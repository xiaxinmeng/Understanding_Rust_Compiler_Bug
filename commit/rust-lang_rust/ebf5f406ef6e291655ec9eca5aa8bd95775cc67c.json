{"sha": "ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZjVmNDA2ZWY2ZTI5MTY1NWVjOWVjYTVhYThiZDk1Nzc1Y2M2N2M=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-30T03:06:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T06:21:20Z"}, "message": "cfail: Remove usage of fmt!", "tree": {"sha": "bc81d2cc0647fe0324e4688d7257e0ee525eefc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc81d2cc0647fe0324e4688d7257e0ee525eefc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "html_url": "https://github.com/rust-lang/rust/commit/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "630082ca8946ff2d0e814a73a2594ba65e1b29be", "url": "https://api.github.com/repos/rust-lang/rust/commits/630082ca8946ff2d0e814a73a2594ba65e1b29be", "html_url": "https://github.com/rust-lang/rust/commit/630082ca8946ff2d0e814a73a2594ba65e1b29be"}], "stats": {"total": 383, "additions": 182, "deletions": 201}, "files": [{"sha": "f60b67cf8420f037d4eb94b7de4f875a6729eb72", "filename": "src/test/compile-fail/assign-imm-local-twice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -11,9 +11,9 @@\n fn test() {\n     let v: int;\n     v = 1; //~ NOTE prior assignment occurs here\n-    info!(\"v=%d\", v);\n+    info2!(\"v={}\", v);\n     v = 2; //~ ERROR re-assignment of immutable variable\n-    info!(\"v=%d\", v);\n+    info2!(\"v={}\", v);\n }\n \n fn main() {"}, {"sha": "32f27f64f54d596a57d56b3a7317ef70a05e90ca", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -27,5 +27,5 @@ fn cat(in_x : uint, in_y : int) -> cat {\n \n fn main() {\n   let nyan : cat = cat(52u, 99);\n-  nyan.speak = || info!(\"meow\"); //~ ERROR attempted to take value of method\n+  nyan.speak = || info2!(\"meow\"); //~ ERROR attempted to take value of method\n }"}, {"sha": "ae911b54107908ad8db90dfc314858ff6e805586", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -21,11 +21,11 @@ fn main() {\n     let a: clam = clam{x: @1, y: @2};\n     let b: clam = clam{x: @10, y: @20};\n     let z: int = a.x + b.y; //~ ERROR binary operation + cannot be applied to type `@int`\n-    info!(z);\n+    info2!(\"{:?}\", z);\n     assert_eq!(z, 21);\n     let forty: fish = fish{a: @40};\n     let two: fish = fish{a: @2};\n     let answer: int = forty.a + two.a;  //~ ERROR binary operation + cannot be applied to type `@int`\n-    info!(answer);\n+    info2!(\"{:?}\", answer);\n     assert_eq!(answer, 42);\n }"}, {"sha": "a9e9ed64d9a37375f3b46ab04feb266eda4dfdd1", "filename": "src/test/compile-fail/bad-bang-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,7 +12,7 @@\n // Tests that a function with a ! annotation always actually fails\n \n fn bad_bang(i: uint) -> ! {\n-    if i < 0u { } else { fail!(); }\n+    if i < 0u { } else { fail2!(); }\n     //~^ ERROR expected `!` but found `()`\n }\n "}, {"sha": "095a85ab21e96c05c1056b67abf6627d044e4c63", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -11,4 +11,4 @@\n // error-pattern:expected `~str` but found `int`\n \n static i: ~str = 10i;\n-fn main() { info!(i); }\n+fn main() { info2!(\"{:?}\", i); }"}, {"sha": "262248f9dc3b795691610c6a5dd79407d152f5ad", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,14 +12,14 @@ struct X { x: () }\n \n impl Drop for X {\n     fn drop(&mut self) {\n-        error!(\"destructor runs\");\n+        error2!(\"destructor runs\");\n     }\n }\n \n fn main() {\n     let x = Some(X { x: () });\n     match x {\n         Some(ref _y @ _z) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        None => fail!()\n+        None => fail2!()\n     }\n }"}, {"sha": "bf665e6fb60b28eb43422e9435d4a4a66ba50a82", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,14 +12,14 @@ struct X { x: (), }\n \n impl Drop for X {\n     fn drop(&mut self) {\n-        error!(\"destructor runs\");\n+        error2!(\"destructor runs\");\n     }\n }\n \n fn main() {\n     let x = Some((X { x: () }, X { x: () }));\n     match x {\n         Some((ref _y, _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        None => fail!()\n+        None => fail2!()\n     }\n }"}, {"sha": "fcb9dbb300c82e3aca02689fcd55ec18c7937cd0", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,7 +12,7 @@ struct X { x: (), }\n \n impl Drop for X {\n     fn drop(&mut self) {\n-        error!(\"destructor runs\");\n+        error2!(\"destructor runs\");\n     }\n }\n \n@@ -22,6 +22,6 @@ fn main() {\n     let x = some2(X { x: () }, X { x: () });\n     match x {\n         some2(ref _y, _z) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        none2 => fail!()\n+        none2 => fail2!()\n     }\n }"}, {"sha": "19076181c512293253c49a5bb02fae3d83bf0bfb", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,14 +12,14 @@ struct X { x: (), }\n \n impl Drop for X {\n     fn drop(&mut self) {\n-        error!(\"destructor runs\");\n+        error2!(\"destructor runs\");\n     }\n }\n \n fn main() {\n     let x = Some((X { x: () }, X { x: () }));\n     match x {\n         Some((_y, ref _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        None => fail!()\n+        None => fail2!()\n     }\n }"}, {"sha": "5c0274b03d09a76ad806977c6ec0225b4bdf5328", "filename": "src/test/compile-fail/bind-by-move-no-guards.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -15,8 +15,8 @@ fn main() {\n     let x = Some(p);\n     c.send(false);\n     match x {\n-        Some(z) if z.recv() => { fail!() }, //~ ERROR cannot bind by-move into a pattern guard\n+        Some(z) if z.recv() => { fail2!() }, //~ ERROR cannot bind by-move into a pattern guard\n         Some(z) => { assert!(!z.recv()); },\n-        None => fail!()\n+        None => fail2!()\n     }\n }"}, {"sha": "9b7cc41e5c875729b7028f4febd5632c247b1e48", "filename": "src/test/compile-fail/bind-by-move-no-sub-bindings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,14 +12,14 @@ struct X { x: (), }\n \n impl Drop for X {\n     fn drop(&mut self) {\n-        error!(\"destructor runs\");\n+        error2!(\"destructor runs\");\n     }\n }\n \n fn main() {\n     let x = Some(X { x: () });\n     match x {\n         Some(_y @ ref _z) => { }, //~ ERROR cannot bind by-move with sub-bindings\n-        None => fail!()\n+        None => fail2!()\n     }\n }"}, {"sha": "294c45093dd6ff110417ab07b4ae03e718f67498", "filename": "src/test/compile-fail/block-arg-as-stmt-with-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -17,6 +17,6 @@ fn compute1() -> float {\n \n fn main() {\n     let x = compute1();\n-    info!(x);\n+    info2!(\"{:?}\", x);\n     assert_eq!(x, -4f);\n }"}, {"sha": "379b71f741173e7179de1ff18740e1559ac6a912", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -21,6 +21,6 @@ fn coerce(b: &fn()) -> extern fn() {\n \n fn main() {\n     let i = 8;\n-    let f = coerce(|| error!(i) );\n+    let f = coerce(|| error2!(\"{:?}\", i) );\n     f();\n }"}, {"sha": "c14989fcbbb6c8a9179af97aca11a6e51723db98", "filename": "src/test/compile-fail/bogus-tag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -17,7 +17,7 @@ enum color { rgb(int, int, int), rgba(int, int, int, int), }\n fn main() {\n     let red: color = rgb(255, 0, 0);\n     match red {\n-      rgb(r, g, b) => { info!(\"rgb\"); }\n-      hsl(h, s, l) => { info!(\"hsl\"); }\n+      rgb(r, g, b) => { info2!(\"rgb\"); }\n+      hsl(h, s, l) => { info2!(\"hsl\"); }\n     }\n }"}, {"sha": "ce3aff59d7a63470bff7c85c2120cab99613ad87", "filename": "src/test/compile-fail/borrowck-anon-fields-variant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-variant.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -10,12 +10,12 @@ fn distinct_variant() {\n \n     let a = match y {\n       Y(ref mut a, _) => a,\n-      X => fail!()\n+      X => fail2!()\n     };\n \n     let b = match y {\n       Y(_, ref mut b) => b,\n-      X => fail!()\n+      X => fail2!()\n     };\n \n     *a += 1;\n@@ -27,12 +27,12 @@ fn same_variant() {\n \n     let a = match y {\n       Y(ref mut a, _) => a,\n-      X => fail!()\n+      X => fail2!()\n     };\n \n     let b = match y {\n       Y(ref mut b, _) => b, //~ ERROR cannot borrow\n-      X => fail!()\n+      X => fail2!()\n     };\n \n     *a += 1;"}, {"sha": "8c4d681d9835dba2c3ca03e1e0300e279fff3efb", "filename": "src/test/compile-fail/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -21,7 +21,7 @@ fn a() {\n \n     p[0] = 5; //~ ERROR cannot assign\n \n-    info!(\"%d\", *q);\n+    info2!(\"{}\", *q);\n }\n \n fn borrow(_x: &[int], _f: &fn()) {}"}, {"sha": "487a16c1836d17c51a6951ba56d6936c71bd63a6", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -24,7 +24,7 @@ fn main() {\n                 x = X(Left((0,0))); //~ ERROR cannot assign to `x`\n                 (*f)()\n             },\n-            _ => fail!()\n+            _ => fail2!()\n         }\n     }\n }"}, {"sha": "c7cb9ce27f2bb02e28197352a23acb15403d8a57", "filename": "src/test/compile-fail/borrowck-borrow-from-owned-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -18,7 +18,7 @@ struct Bar {\n   int2: int,\n }\n \n-fn make_foo() -> ~Foo { fail!() }\n+fn make_foo() -> ~Foo { fail2!() }\n \n fn borrow_same_field_twice_mut_mut() {\n     let mut foo = make_foo();"}, {"sha": "d01fd86f2886ae9885012c35391951e5c146cb58", "filename": "src/test/compile-fail/borrowck-borrow-from-stack-variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -18,7 +18,7 @@ struct Bar {\n   int2: int,\n }\n \n-fn make_foo() -> Foo { fail!() }\n+fn make_foo() -> Foo { fail2!() }\n \n fn borrow_same_field_twice_mut_mut() {\n     let mut foo = make_foo();"}, {"sha": "918e06fad07d4a59610b2f1db81f4ae685b1c90c", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -16,7 +16,7 @@ struct defer<'self> {\n impl<'self> Drop for defer<'self> {\n     fn drop(&mut self) {\n         unsafe {\n-            error!(\"%?\", self.x);\n+            error2!(\"{:?}\", self.x);\n         }\n     }\n }"}, {"sha": "1058211a6e455e3a3276cad3e63722ee87e728a7", "filename": "src/test/compile-fail/borrowck-lend-flow-if.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -16,9 +16,9 @@\n \n fn borrow(_v: &int) {}\n fn borrow_mut(_v: &mut int) {}\n-fn cond() -> bool { fail!() }\n-fn for_func(_f: &fn() -> bool) { fail!() }\n-fn produce<T>() -> T { fail!(); }\n+fn cond() -> bool { fail2!() }\n+fn for_func(_f: &fn() -> bool) { fail2!() }\n+fn produce<T>() -> T { fail2!(); }\n \n fn inc(v: &mut ~int) {\n     *v = ~(**v + 1);"}, {"sha": "fff8a25847972b4a3bed9af1dda8774c76356f2f", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -16,8 +16,8 @@\n \n fn borrow(_v: &int) {}\n fn borrow_mut(_v: &mut int) {}\n-fn cond() -> bool { fail!() }\n-fn produce<T>() -> T { fail!(); }\n+fn cond() -> bool { fail2!() }\n+fn produce<T>() -> T { fail2!(); }\n \n fn inc(v: &mut ~int) {\n     *v = ~(**v + 1);"}, {"sha": "b6a30da46f830ffe02eb31d4b265e3184d7d21f2", "filename": "src/test/compile-fail/borrowck-lend-flow-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -13,7 +13,7 @@\n #[allow(unused_variable)];\n #[allow(dead_assignment)];\n \n-fn cond() -> bool { fail!() }\n+fn cond() -> bool { fail2!() }\n fn link<'a>(v: &'a uint, w: &mut &'a uint) -> bool { *w = v; true }\n \n fn separate_arms() {"}, {"sha": "c51d6117e5ca146bd691478579bc4ff2e7f50f40", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -16,9 +16,9 @@\n \n fn borrow(_v: &int) {}\n fn borrow_mut(_v: &mut int) {}\n-fn cond() -> bool { fail!() }\n-fn for_func(_f: &fn() -> bool) { fail!() }\n-fn produce<T>() -> T { fail!(); }\n+fn cond() -> bool { fail2!() }\n+fn for_func(_f: &fn() -> bool) { fail2!() }\n+fn produce<T>() -> T { fail2!(); }\n \n fn inc(v: &mut ~int) {\n     *v = ~(**v + 1);"}, {"sha": "32dfa59927f5134070f423931f5b2ea291a8fb75", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -18,14 +18,14 @@ fn box_imm() {\n     let v = ~3;\n     let _w = &v;\n     do task::spawn {\n-        info!(\"v=%d\", *v);\n+        info2!(\"v={}\", *v);\n         //~^ ERROR cannot move `v` into closure\n     }\n \n     let v = ~3;\n     let _w = &v;\n     task::spawn(|| {\n-        info!(\"v=%d\", *v);\n+        info2!(\"v={}\", *v);\n         //~^ ERROR cannot move\n     });\n }"}, {"sha": "db9d8d7ceafba924094d0591b1c4634db6990da6", "filename": "src/test/compile-fail/borrowck-loan-local-as-both-mut-and-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -16,7 +16,7 @@ use std::either::{Either, Left, Right};\n                 *x = Right(1.0);\n                 *z\n             }\n-            _ => fail!()\n+            _ => fail2!()\n         }\n     }\n "}, {"sha": "145aaa405a6e89a3580eafb35ea11cb9c70f76ba", "filename": "src/test/compile-fail/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n                 }\n             }\n             let z = tail[0].clone();\n-            info!(fmt!(\"%?\", z));\n+            info2!(\"{:?}\", z);\n         }\n         _ => {\n             unreachable!();"}, {"sha": "56e047e5bc52253cd5c0cba5249454b16bb1c394", "filename": "src/test/compile-fail/borrowck-mut-addr-of-imm-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,5 +12,5 @@ fn main() {\n     let x: int = 3;\n     let y: &mut int = &mut x; //~ ERROR cannot borrow\n     *y = 5;\n-    info!(*y);\n+    info2!(\"{:?}\", *y);\n }"}, {"sha": "bd0b4afe730c901317cbfe98a08e80095cf1b9e9", "filename": "src/test/compile-fail/borrowck-ref-into-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -14,7 +14,7 @@ fn main() {\n         Some(ref m) => { //~ ERROR borrowed value does not live long enough\n             msg = m;\n         },\n-        None => { fail!() }\n+        None => { fail2!() }\n     }\n     println(*msg);\n }"}, {"sha": "53e69fc1611aa911d2359b08634d5e7ebbb349cb", "filename": "src/test/compile-fail/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -2,7 +2,7 @@ fn a() -> &[int] {\n     let vec = ~[1, 2, 3, 4];\n     let tail = match vec {\n         [_, ..tail] => tail, //~ ERROR does not live long enough\n-        _ => fail!(\"a\")\n+        _ => fail2!(\"a\")\n     };\n     tail\n }\n@@ -11,7 +11,7 @@ fn b() -> &[int] {\n     let vec = ~[1, 2, 3, 4];\n     let init = match vec {\n         [..init, _] => init, //~ ERROR does not live long enough\n-        _ => fail!(\"b\")\n+        _ => fail2!(\"b\")\n     };\n     init\n }\n@@ -20,7 +20,7 @@ fn c() -> &[int] {\n     let vec = ~[1, 2, 3, 4];\n     let slice = match vec {\n         [_, ..slice, _] => slice, //~ ERROR does not live long enough\n-        _ => fail!(\"c\")\n+        _ => fail2!(\"c\")\n     };\n     slice\n }"}, {"sha": "b31e49bceb505087f54b4c546e916a341c7e4ee1", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -4,7 +4,7 @@ fn a() {\n         [~ref _a] => {\n             vec[0] = ~4; //~ ERROR cannot assign to `(*vec)[]` because it is borrowed\n         }\n-        _ => fail!(\"foo\")\n+        _ => fail2!(\"foo\")\n     }\n }\n "}, {"sha": "e0c2d08e413399f3c17535e461b93b6625ba3b16", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -2,7 +2,7 @@ fn a() -> &int {\n     let vec = ~[1, 2, 3, 4];\n     let tail = match vec {\n         [_a, ..tail] => &tail[0], //~ ERROR borrowed value does not live long enough\n-        _ => fail!(\"foo\")\n+        _ => fail2!(\"foo\")\n     };\n     tail\n }"}, {"sha": "6f483b82d818336eb05ae22770f98e495e7509ed", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -22,12 +22,12 @@ struct cat {\n impl cat {\n   pub fn eat(&self) -> bool {\n     if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n+        error2!(\"OM NOM NOM\");\n         self.how_hungry -= 2;\n         return true;\n     }\n     else {\n-        error!(\"Not hungry!\");\n+        error2!(\"Not hungry!\");\n         return false;\n     }\n   }\n@@ -40,7 +40,7 @@ impl noisy for cat {\n \n impl cat {\n     fn meow(&self) {\n-      error!(\"Meow\");\n+      error2!(\"Meow\");\n       self.meows += 1;\n       if self.meows % 5 == 0 {\n           self.how_hungry += 1;"}, {"sha": "101f96ce0b47cb4ebfabc474dc2f4944edb23d2a", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -15,7 +15,7 @@ struct cat {\n impl cat {\n     fn sleep(&self) { loop{} }\n     fn meow(&self) {\n-      error!(\"Meow\");\n+      error2!(\"Meow\");\n       meows += 1u; //~ ERROR unresolved name\n       sleep();     //~ ERROR unresolved name\n     }"}, {"sha": "6663cff9b5632141677db824f2948346c498bf5e", "filename": "src/test/compile-fail/closure-that-fails.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -2,6 +2,6 @@ fn foo(f: &fn() -> !) {}\n \n fn main() {\n     // Type inference didn't use to be able to handle this:\n-    foo(|| fail!());\n+    foo(|| fail2!());\n     foo(|| 22); //~ ERROR mismatched types\n }"}, {"sha": "771f2b2dfb680454225c813db095076088f225c1", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -26,5 +26,5 @@ fn main() {\n     let x = foo(10);\n     let _y = x.clone();\n     //~^ ERROR does not implement any method in scope\n-    error!(x);\n+    error2!(\"{:?}\", x);\n }"}, {"sha": "f143e6c00a2ed666f4cc95644fb51d7b384ad17e", "filename": "src/test/compile-fail/debug-correct-span.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fcompile-fail%2Fdebug-correct-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fcompile-fail%2Fdebug-correct-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdebug-correct-span.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    debug!(\"%s %s\", 3); //~ ERROR: not enough arguments\n-}"}, {"sha": "86c56f7ae8190a1105dece47fcc5da8b50436833", "filename": "src/test/compile-fail/deref-non-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fderef-non-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fderef-non-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderef-non-pointer.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n   match *1 { //~ ERROR: cannot be dereferenced\n-      _ => { fail!(); }\n+      _ => { fail2!(); }\n   }\n }"}, {"sha": "40a4232717db2af5088138d4cbeef24d43df3e45", "filename": "src/test/compile-fail/die-not-static.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fcompile-fail%2Fdie-not-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630082ca8946ff2d0e814a73a2594ba65e1b29be/src%2Ftest%2Fcompile-fail%2Fdie-not-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdie-not-static.rs?ref=630082ca8946ff2d0e814a73a2594ba65e1b29be", "patch": "@@ -1,8 +0,0 @@\n-use std::str;\n-\n-fn main() {\n-    let v = ~\"test\";\n-    let sslice = v.slice(0, v.len());\n-    //~^ ERROR borrowed value does not live long enough\n-    fail!(sslice);\n-}"}, {"sha": "aac6cd118b204884ce23647a8f070c12d8fe89ad", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct-let.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -14,7 +14,7 @@ struct X {\n \n impl Drop for X {\n     fn drop(&mut self) {\n-        error!(\"value: %s\", self.x);\n+        error2!(\"value: {}\", self.x);\n     }\n }\n \n@@ -26,5 +26,5 @@ fn unwrap(x: X) -> ~str {\n fn main() {\n     let x = X { x: ~\"hello\" };\n     let y = unwrap(x);\n-    error!(\"contents: %s\", y);\n+    error2!(\"contents: {}\", y);\n }"}, {"sha": "e14900c4bb44cb0553aa5018691dc3a197eafcff", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct-match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -14,15 +14,15 @@ struct X {\n \n impl Drop for X {\n     fn drop(&mut self) {\n-        error!(\"value: %s\", self.x);\n+        error2!(\"value: {}\", self.x);\n     }\n }\n \n fn main() {\n     let x = X { x: ~\"hello\" };\n \n     match x {\n-        X { x: y } => error!(\"contents: %s\", y)\n+        X { x: y } => error2!(\"contents: {}\", y)\n         //~^ ERROR cannot move out of type `X`, which defines the `Drop` trait\n     }\n }"}, {"sha": "dc32e8e10226cc5601a132c9ed577cfc965b1e31", "filename": "src/test/compile-fail/does-nothing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -1,2 +1,2 @@\n // error-pattern: unresolved name `this_does_nothing_what_the`.\n-fn main() { info!(\"doing\"); this_does_nothing_what_the; info!(\"boing\"); }\n+fn main() { info2!(\"doing\"); this_does_nothing_what_the; info2!(\"boing\"); }"}, {"sha": "3fdd4000b1b9ab383f6cf765231ad70474b90bfb", "filename": "src/test/compile-fail/export2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport2.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -15,7 +15,7 @@ mod foo {\n }\n \n mod bar {\n-    fn x() { info!(\"x\"); }\n+    fn x() { info2!(\"x\"); }\n \n     pub fn y() { }\n }"}, {"sha": "7602656eabb074b28a90fd34168539266fb39d2d", "filename": "src/test/compile-fail/extfmt-missing-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-missing-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-missing-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-missing-type.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:missing type\n \n-fn main() { fmt!(\"%+\"); }\n+fn main() { oldfmt!(\"%+\"); }"}, {"sha": "2721c780ac6cf3e2a3bfaa8dc39a2964dada0cbf", "filename": "src/test/compile-fail/extfmt-no-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-no-args.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:fmt! takes at least 1 argument\n \n-fn main() { fmt!(); }\n+fn main() { oldfmt!(); }"}, {"sha": "7aa744a11caac933b8cff947910e3eafc81bfcaa", "filename": "src/test/compile-fail/extfmt-non-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-non-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-non-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-non-literal.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -14,5 +14,5 @@ fn main() {\n     // fmt!'s first argument must be a literal.  Hopefully this\n     // restriction can be eased eventually to just require a\n     // compile-time constant.\n-    let x = fmt!(\"a\" + \"b\");\n+    let x = oldfmt!(\"a\" + \"b\");\n }"}, {"sha": "e25eae821275f3a49cd4398a91218d66f4391890", "filename": "src/test/compile-fail/extfmt-non-literal2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-non-literal2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-non-literal2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-non-literal2.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -14,5 +14,5 @@ fn main() {\n     // fmt!'s first argument must be a literal.  Hopefully this\n     // restriction can be eased eventually to just require a\n     // compile-time constant.\n-    let x = fmt!(20);\n+    let x = oldfmt!(20);\n }"}, {"sha": "5fd17fe92c14579067f63eaaabf67a017f4d05c5", "filename": "src/test/compile-fail/extfmt-not-enough-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-not-enough-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-not-enough-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-not-enough-args.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,4 +12,4 @@\n \n extern mod extra;\n \n-fn main() { let s = fmt!(\"%s%s%s\", \"test\", \"test\"); }\n+fn main() { let s = oldfmt!(\"%s%s%s\", \"test\", \"test\"); }"}, {"sha": "5e12543ce8f0e600f65e99623ee8999ef11cf6dc", "filename": "src/test/compile-fail/extfmt-too-many-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-too-many-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-too-many-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-too-many-args.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,4 +12,4 @@\n \n extern mod extra;\n \n-fn main() { let s = fmt!(\"%s\", \"test\", \"test\"); }\n+fn main() { let s = oldfmt!(\"%s\", \"test\", \"test\"); }"}, {"sha": "94ded1c528fdbfe507c154b1336dd14110d5fe09", "filename": "src/test/compile-fail/extfmt-unknown-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-unknown-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-unknown-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-unknown-type.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:unknown type\n \n-fn main() { fmt!(\"%w\"); }\n+fn main() { oldfmt!(\"%w\"); }"}, {"sha": "4e165153c0bdcad27dfda119540dde51e3938ada", "filename": "src/test/compile-fail/extfmt-unsigned-plus.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-plus.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,5 +12,5 @@\n \n fn main() {\n     // Can't use a sign on unsigned conversions\n-    fmt!(\"%+u\", 10u);\n+    oldfmt!(\"%+u\", 10u);\n }"}, {"sha": "8396ecc25c16ec7ee341a8f3a4a73e4d09a7dce8", "filename": "src/test/compile-fail/extfmt-unsigned-space.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-space.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,5 +12,5 @@\n \n fn main() {\n     // Can't use a space on unsigned conversions\n-    fmt!(\"% u\", 10u);\n+    oldfmt!(\"% u\", 10u);\n }"}, {"sha": "373a10e99cfd0560473beb9355d93b9fbf4daa72", "filename": "src/test/compile-fail/extfmt-unterminated-conv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-unterminated-conv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fextfmt-unterminated-conv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-unterminated-conv.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:unterminated conversion\n \n-fn main() { fmt!(\"%\"); }\n+fn main() { oldfmt!(\"%\"); }"}, {"sha": "4dce462bd416d9304e999c85a36074be32386ed4", "filename": "src/test/compile-fail/fail-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:failed to find an implementation of trait std::sys::FailWithCause for int\n \n-fn main() { fail!(5); }\n+fn main() { fail2!(5); }"}, {"sha": "bcede4483c744bf06ff7bbc5106453450f2024de", "filename": "src/test/compile-fail/fail-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Ffail-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Ffail-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-simple.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,5 +12,5 @@\n \n // error-pattern:unexpected token\n fn main() {\n-  fail!(@);\n+  fail2!(@);\n }"}, {"sha": "341f60eeedf8d57018579eb5f0272861bdb1cdf3", "filename": "src/test/compile-fail/fail-type-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // error-pattern:failed to find an implementation of trait std::sys::FailWithCause for ~[int]\n-fn main() { fail!(~[0i]); }\n+fn main() { fail2!(~[0i]); }"}, {"sha": "284787a817264a16b600fd8f06e4cd4a49dd07c0", "filename": "src/test/compile-fail/functional-struct-update-noncopyable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -17,7 +17,7 @@ use extra::arc::*;\n struct A { y: Arc<int>, x: Arc<int> }\n \n impl Drop for A {\n-    fn drop(&mut self) { println(fmt!(\"x=%?\", self.x.get())); }\n+    fn drop(&mut self) { println(format!(\"x={:?}\", self.x.get())); }\n }\n fn main() {\n     let a = A { y: Arc::new(1), x: Arc::new(2) };"}, {"sha": "c5fb22c68210682388c10bfe8e9a993dd828121f", "filename": "src/test/compile-fail/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,5 +12,5 @@\n \n fn main() {\n     let a = if true { true };\n-    info!(a);\n+    info2!(\"{:?}\", a);\n }"}, {"sha": "0e920d137a85cb36f29e9f8c6e9c842539795374", "filename": "src/test/compile-fail/import-glob-0.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -13,10 +13,10 @@\n use module_of_many_things::*;\n \n mod module_of_many_things {\n-    pub fn f1() { info!(\"f1\"); }\n-    pub fn f2() { info!(\"f2\"); }\n-    fn f3() { info!(\"f3\"); }\n-    pub fn f4() { info!(\"f4\"); }\n+    pub fn f1() { info2!(\"f1\"); }\n+    pub fn f2() { info2!(\"f2\"); }\n+    fn f3() { info2!(\"f3\"); }\n+    pub fn f4() { info2!(\"f4\"); }\n }\n \n "}, {"sha": "334ddbeceee6214008733d20a0a284183c43085d", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,13 +12,13 @@\n \n mod circ1 {\n     pub use circ2::f2;\n-    pub fn f1() { info!(\"f1\"); }\n+    pub fn f1() { info2!(\"f1\"); }\n     pub fn common() -> uint { return 0u; }\n }\n \n mod circ2 {\n     pub use circ1::f1;\n-    pub fn f2() { info!(\"f2\"); }\n+    pub fn f2() { info2!(\"f2\"); }\n     pub fn common() -> uint { return 1u; }\n }\n "}, {"sha": "129a4aece8f5e4172a696790347cf47062469b87", "filename": "src/test/compile-fail/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,6 +12,6 @@\n use zed::bar;\n use zed::baz;\n mod zed {\n-    pub fn bar() { info!(\"bar\"); }\n+    pub fn bar() { info2!(\"bar\"); }\n }\n fn main(args: ~[str]) { bar(); }"}, {"sha": "8cebbdbc176fb176f621b7b94016497948175e3b", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -13,6 +13,6 @@ use baz::zed::bar;  //~ ERROR unresolved import\n \n mod baz {}\n mod zed {\n-    pub fn bar() { info!(\"bar3\"); }\n+    pub fn bar() { info2!(\"bar3\"); }\n }\n fn main(args: ~[str]) { bar(); }"}, {"sha": "f05a90acc9dd35bfb580f63c3dd9b62d04f2b5ae", "filename": "src/test/compile-fail/import3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport3.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -11,4 +11,4 @@\n // error-pattern: unresolved\n use main::bar;\n \n-fn main(args: ~[str]) { info!(\"foo\"); }\n+fn main(args: ~[str]) { info2!(\"foo\"); }"}, {"sha": "bcc93407ec15af88039e328af75487121d93f9cf", "filename": "src/test/compile-fail/import4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport4.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -13,4 +13,4 @@\n mod a { pub use b::foo; }\n mod b { pub use a::foo; }\n \n-fn main(args: ~[str]) { info!(\"loop\"); }\n+fn main(args: ~[str]) { info2!(\"loop\"); }"}, {"sha": "bf419db39541f8c5d759792a07eb99b171b35c66", "filename": "src/test/compile-fail/issue-1448-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -10,6 +10,8 @@\n \n // Regression test for issue #1448 and #1386\n \n+fn foo(a: uint) -> uint { a }\n+\n fn main() {\n-    info!(\"%u\", 10i); //~ ERROR mismatched types\n+    info2!(\"{:u}\", foo(10i)); //~ ERROR mismatched types\n }"}, {"sha": "5e1a69227e57d4f8cb4095ff51083d84792e08ab", "filename": "src/test/compile-fail/issue-1476.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    error!(x); //~ ERROR unresolved name `x`.\n+    error2!(\"{:?}\", x); //~ ERROR unresolved name `x`.\n }"}, {"sha": "3f393621fd9088f300971c66d9023f6978e64540", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -14,7 +14,7 @@ trait vec_monad<A> {\n \n impl<A> vec_monad<A> for ~[A] {\n     fn bind<B>(&self, f: &fn(A) -> ~[B]) {\n-        let mut r = fail!();\n+        let mut r = fail2!();\n         for elt in self.iter() { r = r + f(*elt); }\n         //~^ WARNING unreachable expression\n         //~^^ ERROR the type of this value must be known"}, {"sha": "1c4df25f353bf4c3dedd77a1af0f32d776e0711b", "filename": "src/test/compile-fail/issue-2150.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -13,7 +13,7 @@\n \n fn fail_len(v: ~[int]) -> uint {\n     let mut i = 3;\n-    fail!();\n+    fail2!();\n     for x in v.iter() { i += 1u; }\n     //~^ ERROR: unreachable statement\n     return i;"}, {"sha": "db02bb5e55b60535dc776189711419dccda0a9f6", "filename": "src/test/compile-fail/issue-2151.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let x = fail!();\n+    let x = fail2!();\n     x.clone(); //~ ERROR the type of this value must be known in this context\n }"}, {"sha": "b9b26e12b40fe658dd9f7eb46eeab55567b7428a", "filename": "src/test/compile-fail/issue-2281-part1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern: unresolved name `foobar`.\n \n-fn main(args: ~[str]) { info!(foobar); }\n+fn main(args: ~[str]) { info2!(\"{:?}\", foobar); }"}, {"sha": "c8f835ccdc9aad15ee28655eea97557c02d50f26", "filename": "src/test/compile-fail/issue-2330.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -16,7 +16,7 @@ trait channel<T> {\n \n // `chan` is not a trait, it's an enum\n impl chan for int { //~ ERROR chan is not a trait\n-    fn send(&self, v: int) { fail!() }\n+    fn send(&self, v: int) { fail2!() }\n }\n \n fn main() {"}, {"sha": "247ef3d751f4852453d0240e08e352f3d1ec9c59", "filename": "src/test/compile-fail/issue-2370-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2370-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2370-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2370-2.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -15,5 +15,5 @@ struct cat {\n \n fn main() {\n     let kitty : cat = cat { x: () };\n-    error!(*kitty);\n+    error2!(\"{:?}\", *kitty);\n }"}, {"sha": "5754b4bb472e04b6f40afe6d0b891dac4dc4f066", "filename": "src/test/compile-fail/issue-2370.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2370.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2370.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2370.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -15,5 +15,5 @@ struct cat {\n \n fn main() {\n     let nyan = cat { foo: () };\n-    error!(*nyan);\n+    error2!(\"{:?}\", *nyan);\n }"}, {"sha": "77f07a9d793e28c0a5e47fcdb590e1dba281f38c", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -20,7 +20,7 @@ struct E {\n }\n \n impl A for E {\n-  fn b<F:Freeze,G>(_x: F) -> F { fail!() } //~ ERROR type parameter 0 requires `Freeze`\n+  fn b<F:Freeze,G>(_x: F) -> F { fail2!() } //~ ERROR type parameter 0 requires `Freeze`\n }\n \n fn main() {}"}, {"sha": "7dc6dd6a85208ce2c1d65de6c972c956c2984794", "filename": "src/test/compile-fail/issue-2611-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -21,7 +21,7 @@ struct E {\n \n impl A for E {\n   // n.b. The error message is awful -- see #3404\n-  fn b<F:Clone,G>(&self, _x: G) -> G { fail!() } //~ ERROR method `b` has an incompatible type\n+  fn b<F:Clone,G>(&self, _x: G) -> G { fail2!() } //~ ERROR method `b` has an incompatible type\n }\n \n fn main() {}"}, {"sha": "49bc3b9ba6c3f3ed406390c346983f34fd257715", "filename": "src/test/compile-fail/issue-2823.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -14,7 +14,7 @@ struct C {\n \n impl Drop for C {\n     fn drop(&mut self) {\n-        error!(\"dropping: %?\", self.x);\n+        error2!(\"dropping: {:?}\", self.x);\n     }\n }\n "}, {"sha": "f8e355360d709a370669465dde21043528a32f20", "filename": "src/test/compile-fail/issue-3021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -25,7 +25,7 @@ fn siphash(k0 : u64) -> SipHash {\n            //~^ ERROR unresolved name `k0`.\n         }\n     }\n-    fail!();\n+    fail2!();\n }\n \n fn main() {}"}, {"sha": "3ab44b6674806b9ef80ec44a9e316df3bde1fc67", "filename": "src/test/compile-fail/issue-3038.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -19,13 +19,13 @@ fn main()\n {\n \n     let _z = match g(1, 2) {\n-      g(x, x) => { info!(x + x); }\n+      g(x, x) => { info2!(\"{:?}\", x + x); }\n       //~^ ERROR Identifier `x` is bound more than once in the same pattern\n     };\n \n     let _z = match i(l(1, 2), m(3, 4)) {\n       i(l(x, _), m(_, x))  //~ ERROR Identifier `x` is bound more than once in the same pattern\n-        => { error!(x + x); }\n+        => { error2!(\"{:?}\", x + x); }\n     };\n \n     let _z = match (1, 2) {"}, {"sha": "d65001f2b041079086effac19874cefec30fa8e0", "filename": "src/test/compile-fail/issue-3099.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-3099.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-3099.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3099.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n fn a(x: ~str) -> ~str {\n-    fmt!(\"First function with %s\", x)\n+    format!(\"First function with {}\", x)\n }\n \n fn a(x: ~str, y: ~str) -> ~str { //~ ERROR duplicate definition of value `a`\n-    fmt!(\"Second function with %s and %s\", x, y)\n+    format!(\"Second function with {} and {}\", x, y)\n }\n \n fn main() {\n-    info!(\"Result: \");\n+    info2!(\"Result: \");\n }"}, {"sha": "7c56064c2990a588dd1d2447d7eecb7f2ad27086", "filename": "src/test/compile-fail/issue-3521-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -13,5 +13,5 @@ fn main() {\n \n     static y: int = foo + 1; //~ ERROR: attempt to use a non-constant value in a constant\n \n-    error!(y);\n+    error2!(\"{}\", y);\n }"}, {"sha": "aa82ade449d1f2d7ae62b2d996b9dc1ace2ed603", "filename": "src/test/compile-fail/issue-3521.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -15,5 +15,5 @@ fn main() {\n         Bar = foo //~ ERROR attempt to use a non-constant value in a constant\n     }\n \n-    error!(Bar);\n+    error2!(\"{:?}\", Bar);\n }"}, {"sha": "4718c5b88a671b41391d17312566fc073e44fe1c", "filename": "src/test/compile-fail/issue-3601.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -37,6 +37,6 @@ fn main() {\n         ~Element(ed) => match ed.kind { //~ ERROR non-exhaustive patterns\n             ~HTMLImageElement(ref d) if d.image.is_some() => { true }\n         },\n-        _ => fail!(\"WAT\") //~ ERROR unreachable pattern\n+        _ => fail2!(\"WAT\") //~ ERROR unreachable pattern\n     };\n }"}, {"sha": "b6bfe79800f6758563e1a60813bdb7406d647f19", "filename": "src/test/compile-fail/issue-3668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -16,7 +16,7 @@ trait PTrait {\n impl PTrait for P {\n    fn getChildOption(&self) -> Option<@P> {\n        static childVal: @P = self.child.get(); //~ ERROR attempt to use a non-constant value in a constant\n-       fail!();\n+       fail2!();\n    }\n }\n "}, {"sha": "8ff81df938d4e01d6d58fb153d95fe29f7893b7e", "filename": "src/test/compile-fail/issue-5062.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() { fmt!(\"%?\", None); } //~ ERROR unconstrained type\n+fn main() { format!(\"{:?}\", None); } //~ ERROR unconstrained type"}, {"sha": "03fe86cb8797710bce299d67d1101bd1a8f92859", "filename": "src/test/compile-fail/issue-5439.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-5439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-5439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5439.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -25,5 +25,5 @@ impl Bar {\n fn main () {\n     let bar = Bar { bar: 1 };\n     let foo = bar.make_foo(2);\n-    println(fmt!(\"%d\", foo.foo));\n+    println!(\"{}\", foo.foo);\n }"}, {"sha": "77ff58e7427bb382ec21e716efba8e0f9a491e21", "filename": "src/test/compile-fail/issue-6458-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-6458-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-6458-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-1.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn foo<T>(t: T) {}\n-fn main() { foo(fail!()) } //~ ERROR cannot determine a type for this expression: unconstrained type\n+fn main() { foo(fail2!()) } //~ ERROR cannot determine a type for this expression: unconstrained type"}, {"sha": "f395b7fdd76af9960c78bcd777a7642352f124a8", "filename": "src/test/compile-fail/issue-6458-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    fmt!(\"%?\", None); //~ ERROR: cannot determine a type for this expression: unconstrained type\n+    format!(\"{:?}\", None); //~ ERROR: cannot determine a type for this bounded\n }"}, {"sha": "9deb7d6fba42b42467ff878969f1d44150402bad", "filename": "src/test/compile-fail/lint-unused-unsafe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -19,7 +19,7 @@ mod foo {\n     }\n }\n \n-fn callback<T>(_f: &fn() -> T) -> T { fail!() }\n+fn callback<T>(_f: &fn() -> T) -> T { fail2!() }\n unsafe fn unsf() {}\n \n fn bad1() { unsafe {} }                  //~ ERROR: unnecessary `unsafe` block\n@@ -49,7 +49,7 @@ fn good2() {\n        sure that when purity is inherited that the source of the unsafe-ness\n        is tracked correctly */\n     unsafe {\n-        unsafe fn what() -> ~[~str] { fail!() }\n+        unsafe fn what() -> ~[~str] { fail2!() }\n \n         do callback {\n             what();"}, {"sha": "71d063130bf769a2c57b6db4e985d13b67313ccc", "filename": "src/test/compile-fail/liveness-and-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-and-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-and-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-and-init.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     let i: int;\n \n-    info!(false && { i = 5; true });\n-    info!(i); //~ ERROR use of possibly uninitialized variable: `i`\n+    info2!(\"{}\", false && { i = 5; true });\n+    info2!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`\n }"}, {"sha": "87cd83d8aeaf68e9f175171efb87e3032763322e", "filename": "src/test/compile-fail/liveness-bad-bang-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,6 +12,6 @@\n // Tests that a function with a ! annotation always actually fails\n // error-pattern: some control paths may return\n \n-fn bad_bang(i: uint) -> ! { info!(3); }\n+fn bad_bang(i: uint) -> ! { info2!(\"{}\", 3); }\n \n fn main() { bad_bang(5u); }"}, {"sha": "9438aa0e52e8a3c3b080fa4647081f0bed7c7fbc", "filename": "src/test/compile-fail/liveness-block-unint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,6 +12,6 @@ fn force(f: &fn()) { f(); }\n fn main() {\n     let x: int;\n     force(|| {\n-        info!(x); //~ ERROR capture of possibly uninitialized variable: `x`\n+        info2!(\"{}\", x); //~ ERROR capture of possibly uninitialized variable: `x`\n     });\n }"}, {"sha": "37a91338d8d2e380ce33c9ede878050798fbc2dd", "filename": "src/test/compile-fail/liveness-break-uninit-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit-2.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -16,9 +16,9 @@ fn foo() -> int {\n         x = 0;\n     }\n \n-    info!(x); //~ ERROR use of possibly uninitialized variable: `x`\n+    info2!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n \n     return 17;\n }\n \n-fn main() { info!(foo()); }\n+fn main() { info2!(\"{}\", foo()); }"}, {"sha": "5aae93df0dcd5a8b167a43ae4cd6f21680258ceb", "filename": "src/test/compile-fail/liveness-break-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -16,9 +16,9 @@ fn foo() -> int {\n         x = 0;\n     }\n \n-    info!(x); //~ ERROR use of possibly uninitialized variable: `x`\n+    info2!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n \n     return 17;\n }\n \n-fn main() { info!(foo()); }\n+fn main() { info2!(\"{}\", foo()); }"}, {"sha": "69aa47bd567ae4a8bbbd4429a0ad5f54ccefc5d7", "filename": "src/test/compile-fail/liveness-closure-require-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn force(f: &fn() -> int) -> int { f() }\n-fn main() { info!(force(|| {})); } //~ ERROR mismatched types\n+fn main() { info2!(\"{:?}\", force(|| {})); } //~ ERROR mismatched types"}, {"sha": "a0436d984167be7df2cf0058e87bc680ab203208", "filename": "src/test/compile-fail/liveness-if-no-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-if-no-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-if-no-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-if-no-else.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { info!(x); }\n+fn foo(x: int) { info2!(\"{}\", x); }\n \n fn main() {\n     let x: int; if 1 > 2 { x = 10; }"}, {"sha": "cf13f7117eea2796beea04cf7d3f2555f18f30ee", "filename": "src/test/compile-fail/liveness-if-with-else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-if-with-else.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { info!(x); }\n+fn foo(x: int) { info2!(\"{:?}\", x); }\n \n fn main() {\n     let x: int;\n     if 1 > 2 {\n-        info!(\"whoops\");\n+        info2!(\"whoops\");\n     } else {\n         x = 10;\n     }"}, {"sha": "db8afdf45ae22d03fe2a2f1c37467e03f2473616", "filename": "src/test/compile-fail/liveness-init-in-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -13,5 +13,5 @@ fn main() {\n         let i: int;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };\n-    error!(f());\n+    error2!(\"{:?}\", f());\n }"}, {"sha": "769de1e7ef3da5a89d1ef7c35a40171f14c320e5", "filename": "src/test/compile-fail/liveness-move-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let y: ~int = ~42;\n     let mut x: ~int;\n     loop {\n-        info!(y);\n+        info2!(\"{:?}\", y);\n         loop {\n             loop {\n                 loop {"}, {"sha": "752c6c9f1b7181862a14590c4fc05a2891f5f17a", "filename": "src/test/compile-fail/liveness-move-in-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     let y: ~int = ~42;\n     let mut x: ~int;\n     loop {\n-        info!(y); //~ ERROR use of moved value: `y`\n+        info2!(\"{:?}\", y); //~ ERROR use of moved value: `y`\n         while true { while true { while true { x = y; x.clone(); } } }\n         //~^ ERROR use of moved value: `y`\n     }"}, {"sha": "9ab7a64e8bdf9d4f2a1649d5ea4b6cc67f8bacd4", "filename": "src/test/compile-fail/liveness-or-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-or-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-or-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-or-init.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     let i: int;\n \n-    info!(false || { i = 5; true });\n-    info!(i); //~ ERROR use of possibly uninitialized variable: `i`\n+    info2!(\"{}\", false || { i = 5; true });\n+    info2!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`\n }"}, {"sha": "439aff342bc61513b8afb57f808236bf5f39ea9e", "filename": "src/test/compile-fail/liveness-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-uninit.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { info!(x); }\n+fn foo(x: int) { info2!(\"{}\", x); }\n \n fn main() {\n     let x: int;"}, {"sha": "8ef3c5494aec671d05e68314cd6b2c310ddf1203", "filename": "src/test/compile-fail/liveness-use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     let x = ~5;\n     let y = x;\n-    info!(*x); //~ ERROR use of moved value: `x`\n+    info2!(\"{:?}\", *x); //~ ERROR use of moved value: `x`\n     y.clone();\n }"}, {"sha": "4f2d84ad13b029b785134702fc598f9d5eb0866b", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n fn send<T:Send>(ch: _chan<T>, data: T) {\n-    info!(ch);\n-    info!(data);\n-    fail!();\n+    info2!(\"{:?}\", ch);\n+    info2!(\"{:?}\", data);\n+    fail2!();\n }\n \n struct _chan<T>(int);\n@@ -20,7 +20,7 @@ struct _chan<T>(int);\n // message after the send deinitializes it\n fn test00_start(ch: _chan<~int>, message: ~int, _count: ~int) {\n     send(ch, message);\n-    info!(message); //~ ERROR use of moved value: `message`\n+    info2!(\"{:?}\", message); //~ ERROR use of moved value: `message`\n }\n \n-fn main() { fail!(); }\n+fn main() { fail2!(); }"}, {"sha": "02d8656baff178b57e9c1bac5b3226064c7d6c0a", "filename": "src/test/compile-fail/liveness-while-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-while-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fliveness-while-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-while-break.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -14,7 +14,7 @@ fn test(cond: bool) {\n         v = 3;\n         break;\n     }\n-    info!(\"%d\", v); //~ ERROR use of possibly uninitialized variable: `v`\n+    info2!(\"{}\", v); //~ ERROR use of possibly uninitialized variable: `v`\n }\n \n fn main() {"}, {"sha": "5d9ae958ce0c11f3e491b810e7572e4478bc90cd", "filename": "src/test/compile-fail/match-join.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -11,11 +11,11 @@\n // a good test that we merge paths correctly in the presence of a\n // variable that's used before it's declared\n \n-fn my_fail() -> ! { fail!(); }\n+fn my_fail() -> ! { fail2!(); }\n \n fn main() {\n     match true { false => { my_fail(); } true => { } }\n \n-    info!(x); //~ ERROR unresolved name `x`.\n+    info2!(\"{:?}\", x); //~ ERROR unresolved name `x`.\n     let x: int;\n }"}, {"sha": "6531ae035843ac9227abbe839ad1a87c87be75e8", "filename": "src/test/compile-fail/moves-based-on-type-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -2,7 +2,7 @@\n // they occur as part of various kinds of expressions.\n \n struct Foo<A> { f: A }\n-fn guard(_s: ~str) -> bool {fail!()}\n+fn guard(_s: ~str) -> bool {fail2!()}\n fn touch<A>(_a: &A) {}\n \n fn f10() {"}, {"sha": "4893c8b71979b78f24b3b002cad9e2af353be2cc", "filename": "src/test/compile-fail/moves-based-on-type-match-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-match-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-match-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-match-bindings.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -3,7 +3,7 @@\n // terms of the binding, not the discriminant.\n \n struct Foo<A> { f: A }\n-fn guard(_s: ~str) -> bool {fail!()}\n+fn guard(_s: ~str) -> bool {fail2!()}\n fn touch<A>(_a: &A) {}\n \n fn f10() {"}, {"sha": "d1eae1ae6134b74a734a58ea2af5eb0e948b175c", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -30,7 +30,7 @@ fn innocent_looking_victim() {\n                     (f.c)(f, true);\n                     println!(\"{:?}\", msg);\n                 },\n-                None => fail!(\"oops\"),\n+                None => fail2!(\"oops\"),\n             }\n         }\n     }"}, {"sha": "90a68d796f3076e8ca91dd4a68d1b926a6c0447a", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -26,5 +26,5 @@ fn main() {\n \n     assert_eq!((arc_v.get())[2], 3);\n \n-    info!(arc_v);\n+    info2!(\"{:?}\", arc_v);\n }"}, {"sha": "9eca1329824535e43e01e2f8abe8b10544d9e6df", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -24,5 +24,5 @@ fn main() {\n \n     assert_eq!((arc_v.get())[2], 3); //~ ERROR use of moved value: `arc_v`\n \n-    info!(arc_v); //~ ERROR use of moved value: `arc_v`\n+    info2!(\"{:?}\", arc_v); //~ ERROR use of moved value: `arc_v`\n }"}, {"sha": "f6d1aceab6469968bcc96d6dc4abcaf117ffb1c9", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -33,6 +33,6 @@ fn main() {\n \n     do task::spawn {\n         let y = x.take();   //~ ERROR does not fulfill `Send`\n-        error!(y);\n+        error2!(\"{:?}\", y);\n     }\n }"}, {"sha": "f5660fd35106c8cd4870eaabab4cedd0cb067a8a", "filename": "src/test/compile-fail/non-exhaustive-match-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -16,7 +16,7 @@ enum u { c, d }\n fn main() {\n   let x = a(c);\n   match x {\n-      a(d) => { fail!(\"hello\"); }\n-      b => { fail!(\"goodbye\"); }\n+      a(d) => { fail2!(\"hello\"); }\n+      b => { fail2!(\"goodbye\"); }\n     }\n }"}, {"sha": "199bdaa397adbc61e8c340ec3983008cbec48eda", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -39,5 +39,5 @@ fn foo(i:int) -> foo {\n fn main() {\n     let x = foo(10);\n     let _y = x.clone(); //~ ERROR does not implement any method in scope\n-    error!(x);\n+    error2!(\"{:?}\", x);\n }"}, {"sha": "45efa8929890a7b2f4d9be310929426dbdcac2c6", "filename": "src/test/compile-fail/nonscalar-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -15,5 +15,5 @@ struct foo {\n }\n \n fn main() {\n-    info!(foo{ x: 1 } as int);\n+    info2!(\"{:?}\", foo{ x: 1 } as int);\n }"}, {"sha": "a53736580d9b2aa53027227765c3f39547c84e1a", "filename": "src/test/compile-fail/not-enough-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -13,7 +13,7 @@\n // unrelated errors.\n \n fn foo(a: int, b: int, c: int, d:int) {\n-  fail!();\n+  fail2!();\n }\n \n fn main() {"}, {"sha": "5b5cab25e0464126e6aee39828ca228e4fd01a3c", "filename": "src/test/compile-fail/oversized-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:literal out of range\n \n-fn main() { info!(300u8); }\n+fn main() { info2!(\"{}\", 300u8); }"}, {"sha": "0a5bc4ad8bb851f7d7064a1f08adfbffd6ba9878", "filename": "src/test/compile-fail/packed-struct-generic-transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -32,6 +32,6 @@ fn main() {\n     let foo = Foo { bar: [1u8, 2, 3, 4, 5], baz: 10i32 };\n     unsafe {\n         let oof: Oof<[u8, .. 5], i32> = cast::transmute(foo);\n-        info!(oof);\n+        info2!(\"{:?}\", oof);\n     }\n }"}, {"sha": "79978dedb567fb89b598f412e3ec79f95e21e857", "filename": "src/test/compile-fail/packed-struct-transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -32,6 +32,6 @@ fn main() {\n     let foo = Foo { bar: 1, baz: 10 };\n     unsafe {\n         let oof: Oof = cast::transmute(foo);\n-        info!(oof);\n+        info2!(\"{:?}\", oof);\n     }\n }"}, {"sha": "216280b34e922b98b9e2d3ba4fbeda8bef3b85d3", "filename": "src/test/compile-fail/pattern-tyvar-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -15,6 +15,6 @@ extern mod extra;\n enum bar { t1((), Option<~[int]>), t2, }\n \n // n.b. my change changes this error message, but I think it's right -- tjc\n-fn foo(t: bar) -> int { match t { t1(_, Some(x)) => { return x * 3; } _ => { fail!(); } } } //~ ERROR binary operation * cannot be applied to\n+fn foo(t: bar) -> int { match t { t1(_, Some(x)) => { return x * 3; } _ => { fail2!(); } } } //~ ERROR binary operation * cannot be applied to\n \n fn main() { }"}, {"sha": "67a4bacbe9a9d9555155ea5afceca9227afbd0e3", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -18,9 +18,9 @@ enum bar { t1((), Option<~[int]>), t2, }\n fn foo(t: bar) {\n     match t {\n       t1(_, Some::<int>(x)) => {\n-        info!(x);\n+        info2!(\"{:?}\", x);\n       }\n-      _ => { fail!(); }\n+      _ => { fail2!(); }\n     }\n }\n "}, {"sha": "8baba6cccc11823d41de7bb74ab155e6c798f6e8", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -37,7 +37,7 @@ fn main() {\n         // Can't do this copy\n         let x = ~~~A {y: r(i)};\n         let _z = x.clone(); //~ ERROR failed to find an implementation\n-        info!(x);\n+        info2!(\"{:?}\", x);\n     }\n-    error!(*i);\n+    error2!(\"{:?}\", *i);\n }"}, {"sha": "1904f0826176ea25cd9f09ce779a0e04a449f1a3", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -33,5 +33,5 @@ fn dog() -> dog {\n fn main() {\n     let mut d = dog();\n     d.chase_cat();\n-    info!(\"cats_chased: %u\", d.cats_chased);\n+    info2!(\"cats_chased: {}\", d.cats_chased);\n }"}, {"sha": "10107f64158d454ce3271ad3fbdffe8ffc31276d", "filename": "src/test/compile-fail/regions-fn-subtyping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn of<T>() -> &fn(T) { fail!(); }\n-fn subtype<T>(x: &fn(T)) { fail!(); }\n+fn of<T>() -> &fn(T) { fail2!(); }\n+fn subtype<T>(x: &fn(T)) { fail2!(); }\n \n fn test_fn<'x,'y,'z,T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n     // Here, x, y, and z are free.  Other letters"}, {"sha": "872491adaacc849c44ee33991fa817d318576b62", "filename": "src/test/compile-fail/regions-free-region-ordering-callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -27,7 +27,7 @@ fn ordering3<'a, 'b>(x: &'a uint, y: &'b uint) -> &'a &'b uint {\n     // Do not infer an ordering from the return value.\n     let z: &'b uint = &*x;\n     //~^ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n-    fail!();\n+    fail2!();\n }\n \n fn ordering4<'a, 'b>(a: &'a uint, b: &'b uint, x: &fn(&'a &'b uint)) {"}, {"sha": "06e91ddcf56debabc465b5542d25022c72520bb1", "filename": "src/test/compile-fail/regions-freevar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -13,6 +13,6 @@ fn wants_static_fn(_x: &'static fn()) {}\n fn main() {\n     let i = 3;\n     do wants_static_fn { //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n-        info!(\"i=%d\", i);\n+        info2!(\"i={}\", i);\n     }\n }"}, {"sha": "885d50b7efc4c3823f77d7f22ae341845a9af609", "filename": "src/test/compile-fail/regions-ret-borrowed-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -24,5 +24,5 @@ fn return_it<'a>() -> &'a int {\n \n fn main() {\n     let x = return_it();\n-    info!(\"foo=%d\", *x);\n+    info2!(\"foo={}\", *x);\n }"}, {"sha": "5dea40f4ac7c96c9bcd82decd6117b2398ac2ef7", "filename": "src/test/compile-fail/regions-ret-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -27,5 +27,5 @@ fn return_it() -> &int {\n \n fn main() {\n     let x = return_it();\n-    info!(\"foo=%d\", *x);\n+    info2!(\"foo={}\", *x);\n }"}, {"sha": "ce6d12a22655e9cf7258b9dea657250e08d3a3b6", "filename": "src/test/compile-fail/tag-that-dare-not-speak-its-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -16,7 +16,7 @@\n extern mod std;\n \n fn last<T>(v: ~[&T]) -> std::option::Option<T> {\n-    fail!();\n+    fail2!();\n }\n \n fn main() {"}, {"sha": "a88435bff6eb0835d93f0bc77c7d4616e0a44aa6", "filename": "src/test/compile-fail/tag-type-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Ftag-type-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Ftag-type-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-type-args.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -14,4 +14,4 @@ enum quux<T> { bar }\n \n fn foo(c: quux) { assert!((false)); }\n \n-fn main() { fail!(); }\n+fn main() { fail2!(); }"}, {"sha": "798b92fd57b83a2e2e5880c53a0da9ca2f19539d", "filename": "src/test/compile-fail/unconstrained-none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -11,5 +11,5 @@\n // Issue #5062\n \n fn main() {\n-    fmt!(\"%?\", None); //~ ERROR cannot determine a type for this expression: unconstrained type\n+    None; //~ ERROR cannot determine a type for this expression: unconstrained type\n }"}, {"sha": "8882bd1e2681a19a957765d2b7e3cf90d9340972", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -19,5 +19,5 @@ impl Drop for r {\n fn main() {\n     let i = ~r { b: true };\n     let _j = i.clone(); //~ ERROR failed to find an implementation\n-    info!(i);\n+    info2!(\"{:?}\", i);\n }"}, {"sha": "4bc181cbdfa978aa87970d7a0bbba110629565ee", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -31,6 +31,6 @@ fn main() {\n     let r2 = ~[~r { i: i2 }];\n     f(r1.clone(), r2.clone());\n     //~^ ERROR failed to find an implementation of\n-    info!((r2, *i1));\n-    info!((r1, *i2));\n+    info2!(\"{:?}\", (r2, *i1));\n+    info2!(\"{:?}\", (r1, *i2));\n }"}, {"sha": "d9a5302aedcb9306121ef6d92b64993cf03e5f78", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -13,5 +13,5 @@\n use std::libc;\n \n fn main() {\n-  info!(1.0 as *libc::FILE); // Can't cast float to foreign.\n+  info2!(\"{:?}\", 1.0 as *libc::FILE); // Can't cast float to foreign.\n }"}, {"sha": "38bba1efea5748ec1ca6295192fc4b9aec4c1871", "filename": "src/test/compile-fail/vec-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-field.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -13,7 +13,7 @@\n \n fn f() {\n     let v = ~[1i];\n-    info!(v.some_field_name); //type error\n+    info2!(\"{}\", v.some_field_name); //type error\n }\n \n fn main() { }"}, {"sha": "48db83bd92f3304ce209abb15e0f858090175a28", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf5f406ef6e291655ec9eca5aa8bd95775cc67c/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=ebf5f406ef6e291655ec9eca5aa8bd95775cc67c", "patch": "@@ -25,5 +25,5 @@ fn main() {\n     let i = ~[r(0)];\n     let j = ~[r(1)];\n     let k = i + j;\n-    info!(j);\n+    info2!(\"{}\", j);\n }"}]}