{"sha": "c47857478628445730af1d464e55a7f980c01837", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0Nzg1NzQ3ODYyODQ0NTczMGFmMWQ0NjRlNTVhN2Y5ODBjMDE4Mzc=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-10-29T10:29:26Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-11-04T10:10:04Z"}, "message": "Explain the use of blocks around `self.data` accesses", "tree": {"sha": "85c86691cf46fbbd4afe0933fa40c044e118e8e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85c86691cf46fbbd4afe0933fa40c044e118e8e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c47857478628445730af1d464e55a7f980c01837", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c47857478628445730af1d464e55a7f980c01837", "html_url": "https://github.com/rust-lang/rust/commit/c47857478628445730af1d464e55a7f980c01837", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c47857478628445730af1d464e55a7f980c01837/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02131f4dcd0c85f6b3cc7e8d6a5845a6bdd30ff5", "url": "https://api.github.com/repos/rust-lang/rust/commits/02131f4dcd0c85f6b3cc7e8d6a5845a6bdd30ff5", "html_url": "https://github.com/rust-lang/rust/commit/02131f4dcd0c85f6b3cc7e8d6a5845a6bdd30ff5"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "298e3f5de6fc32fe93c87930d4583909ae763cad", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c47857478628445730af1d464e55a7f980c01837/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47857478628445730af1d464e55a7f980c01837/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=c47857478628445730af1d464e55a7f980c01837", "patch": "@@ -131,6 +131,10 @@ pub struct ScalarInt {\n // can't take references to fields of packed structs.\n impl<CTX> crate::ty::HashStable<CTX> for ScalarInt {\n     fn hash_stable(&self, hcx: &mut CTX, hasher: &mut crate::ty::StableHasher) {\n+        // Using a block `{self.data}` here to force a copy instead of using `self.data`\n+        // directly, because `hash_stable` takes `&self` and would thus borrow `self.data`.\n+        // Since `Self` is a packed struct, that would create a possibly unaligned reference,\n+        // which is UB on a lot of platforms.\n         { self.data }.hash_stable(hcx, hasher);\n         self.size.hash_stable(hcx, hasher);\n     }\n@@ -167,6 +171,11 @@ impl ScalarInt {\n     /// construct `Scalar`s).\n     #[inline(always)]\n     fn check_data(self) {\n+        // Using a block `{self.data}` here to force a copy instead of using `self.data`\n+        // directly, because `assert_eq` takes references to its arguments and formatting\n+        // arguments and would thus borrow `self.data`. Since `Self`\n+        // is a packed struct, that would create a possibly unaligned reference, which\n+        // is UB on a lot of platforms.\n         debug_assert_eq!(\n             truncate(self.data, self.size()),\n             { self.data },\n@@ -336,6 +345,11 @@ impl fmt::LowerHex for ScalarInt {\n         self.check_data();\n         // Format as hex number wide enough to fit any value of the given `size`.\n         // So data=20, size=1 will be \"0x14\", but with size=4 it'll be \"0x00000014\".\n+        // Using a block `{self.data}` here to force a copy instead of using `self.data`\n+        // directly, because `write!` takes references to its formatting arguments and\n+        // would thus borrow `self.data`. Since `Self`\n+        // is a packed struct, that would create a possibly unaligned reference, which\n+        // is UB on a lot of platforms.\n         write!(f, \"{:01$x}\", { self.data }, self.size as usize * 2)\n     }\n }"}]}