{"sha": "88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZmM1NDM4NjZjMmM0OGIzYjFhMzJlOWQ1NWE0ZWI3N2QxZGVlNjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-09T20:38:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-09T20:38:36Z"}, "message": "Auto merge of #24232 - Manishearth:rollup, r=Manishearth\n\nNone", "tree": {"sha": "cfb472437aefde7eab3e8e034c5dbb45c8f0f7c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfb472437aefde7eab3e8e034c5dbb45c8f0f7c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "html_url": "https://github.com/rust-lang/rust/commit/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e326aa197b1ee35b41c992eec171589197a7459d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e326aa197b1ee35b41c992eec171589197a7459d", "html_url": "https://github.com/rust-lang/rust/commit/e326aa197b1ee35b41c992eec171589197a7459d"}, {"sha": "ea731797b821c3347be72fefcba32d48e04d27d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea731797b821c3347be72fefcba32d48e04d27d0", "html_url": "https://github.com/rust-lang/rust/commit/ea731797b821c3347be72fefcba32d48e04d27d0"}], "stats": {"total": 1408, "additions": 461, "deletions": 947}, "files": [{"sha": "97c998a5cda3c3d5ac1b40c96a0e9a0e3e03130e", "filename": "configure", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/configure", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -523,30 +523,35 @@ fi\n BOOL_OPTIONS=\"\"\n VAL_OPTIONS=\"\"\n \n+opt debug 0 \"debug mode\"\n opt valgrind 0 \"run tests with valgrind (memcheck by default)\"\n opt helgrind 0 \"run tests with helgrind instead of memcheck\"\n opt valgrind-rpass 1 \"run rpass-valgrind tests with valgrind\"\n opt docs     1 \"build standard library documentation\"\n opt compiler-docs     0 \"build compiler documentation\"\n-opt optimize 1 \"build optimized rust code\"\n-opt optimize-cxx 1 \"build optimized C++ code\"\n-opt optimize-llvm 1 \"build optimized LLVM\"\n opt optimize-tests 1 \"build tests with optimizations\"\n opt libcpp 1 \"build with llvm with libc++ instead of libstdc++ when using clang\"\n-opt llvm-assertions 1 \"build LLVM with assertions\"\n-opt debug 1 \"build with extra debug fun\"\n+opt llvm-assertions 0 \"build LLVM with assertions\"\n+opt debug-assertions 0 \"build with debugging assertions\"\n opt fast-make 0 \"use .gitmodules as timestamp for submodule deps\"\n opt ccache 0 \"invoke gcc/clang via ccache to reuse object files between builds\"\n opt local-rust 0 \"use an installed rustc rather than downloading a snapshot\"\n opt llvm-static-stdcpp 0 \"statically link to libstdc++ for LLVM\"\n opt rpath 0 \"build rpaths into rustc itself\"\n-opt nightly 0 \"build nightly packages\"\n-opt verify-install 1 \"verify installed binaries work\"\n # This is used by the automation to produce single-target nightlies\n opt dist-host-only 0 \"only install bins for the host architecture\"\n opt inject-std-version 1 \"inject the current compiler version of libstd into programs\"\n opt llvm-version-check 1 \"don't check if the LLVM version is supported, build anyway\"\n \n+# Optimization and debugging options. These may be overridden by the release channel, etc.\n+opt_nosave optimize 1 \"build optimized rust code\"\n+opt_nosave optimize-cxx 1 \"build optimized C++ code\"\n+opt_nosave optimize-llvm 1 \"build optimized LLVM\"\n+opt_nosave llvm-assertions 0 \"build LLVM with assertions\"\n+opt_nosave debug-assertions 0 \"build with debugging assertions\"\n+opt_nosave debuginfo 0 \"build with debugger metadata\"\n+opt_nosave debug-jemalloc 0 \"build jemalloc with --enable-debug --enable-fill\"\n+\n valopt localstatedir \"/var/lib\" \"local state directory\"\n valopt sysconfdir \"/etc\" \"install system configuration files\"\n \n@@ -556,6 +561,7 @@ valopt llvm-root \"\" \"set LLVM root\"\n valopt jemalloc-root \"\" \"set directory where libjemalloc_pic.a is located\"\n valopt build \"${DEFAULT_BUILD}\" \"GNUs ./configure syntax LLVM build triple\"\n valopt android-cross-path \"/opt/ndk_standalone\" \"Android NDK standalone path\"\n+valopt release-channel \"dev\" \"the name of the release channel to build\"\n \n # Many of these are saved below during the \"writing configuration\" step\n # (others are conditionally saved).\n@@ -568,7 +574,6 @@ valopt_nosave local-rust-root \"/usr/local\" \"set prefix for local rust binary\"\n valopt_nosave host \"${CFG_BUILD}\" \"GNUs ./configure syntax LLVM host triples\"\n valopt_nosave target \"${CFG_HOST}\" \"GNUs ./configure syntax LLVM target triples\"\n valopt_nosave mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n-valopt_nosave release-channel \"dev\" \"the name of the release channel to build\"\n \n # Temporarily support old triples until buildbots get updated\n CFG_BUILD=$(to_llvm_triple $CFG_BUILD)\n@@ -621,13 +626,24 @@ case \"$CFG_RELEASE_CHANNEL\" in\n         ;;\n esac\n \n-# Continue supporting the old --enable-nightly flag to transition the bots\n-# XXX Remove me\n-if [ ! -z \"$CFG_ENABLE_NIGHTLY\" ]\n-then\n-    CFG_RELEASE_CHANNEL=nightly\n+# Adjust perf and debug options for debug mode\n+if [ -n \"$CFG_ENABLE_DEBUG\" ]; then\n+    msg \"debug mode enabled, setting performance options\"\n+    CFG_DISABLE_OPTIMIZE=1\n+    CFG_DISABLE_OPTIMIZE_CXX=1\n+    CFG_ENABLE_LLVM_ASSERTIONS=1\n+    CFG_ENABLE_DEBUG_ASSERTIONS=1\n+    CFG_ENABLE_DEBUG_JEMALLOC=1\n fi\n-putvar CFG_RELEASE_CHANNEL\n+\n+# OK, now write the debugging options\n+if [ -n \"$CFG_DISABLE_OPTIMIZE\" ]; then putvar CFG_DISABLE_OPTIMIZE; fi\n+if [ -n \"$CFG_DISABLE_OPTIMIZE_CXX\" ]; then putvar CFG_DISABLE_OPTIMIZE_CXX; fi\n+if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then putvar CFG_DISABLE_OPTIMIZE_LLVM; fi\n+if [ -n \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]; then putvar CFG_ENABLE_LLVM_ASSERTIONS; fi\n+if [ -n \"$CFG_ENABLE_DEBUG_ASSERTIONS\" ]; then putvar CFG_ENABLE_DEBUG_ASSERTIONS; fi\n+if [ -n \"$CFG_ENABLE_DEBUGINFO\" ]; then putvar CFG_ENABLE_DEBUGINFO; fi\n+if [ -n \"$CFG_ENABLE_DEBUG_JEMALLOC\" ]; then putvar CFG_ENABLE_DEBUG_JEMALLOC; fi\n \n # A magic value that allows the compiler to use unstable features\n # during the bootstrap even when doing so would normally be an error\n@@ -1180,7 +1196,7 @@ do\n             LLVM_DBG_OPTS=\"--enable-optimized\"\n             LLVM_INST_DIR=$LLVM_BUILD_DIR/Release\n         fi\n-        if [ ! -z \"$CFG_DISABLE_LLVM_ASSERTIONS\" ]\n+        if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n         then\n             LLVM_ASSERTION_OPTS=\"--disable-assertions\"\n         else\n@@ -1434,6 +1450,11 @@ move_if_changed config.tmp config.mk\n rm -f config.tmp\n touch config.stamp\n \n-step_msg \"complete\"\n+if [ -z \"$CFG_ENABLE_DEBUG\" ]; then\n+    step_msg \"configured in release mode. for development consider --enable-debug\"\n+else\n+    step_msg \"complete\"\n+fi\n+\n msg \"run \\`make help\\`\"\n msg"}, {"sha": "cabc97a1e49120073c6e415d7546905f12e2be1b", "filename": "mk/install.mk", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,12 +8,6 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n-ifdef CFG_DISABLE_VERIFY_INSTALL\n-MAYBE_DISABLE_VERIFY=--disable-verify\n-else\n-MAYBE_DISABLE_VERIFY=\n-endif\n-\n install:\n ifeq (root user, $(USER) $(patsubst %,user,$(SUDO_USER)))\n # Build the dist as the original user\n@@ -22,9 +16,9 @@ else\n \t$(Q)$(MAKE) prepare_install\n endif\n ifeq ($(CFG_DISABLE_DOCS),)\n-\t$(Q)cd tmp/empty_dir && sh ../../tmp/dist/$(DOC_PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(DESTDIR)$(CFG_PREFIX)\" --libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" --mandir=\"$(DESTDIR)$(CFG_MANDIR)\" \"$(MAYBE_DISABLE_VERIFY)\"\n+\t$(Q)cd tmp/empty_dir && sh ../../tmp/dist/$(DOC_PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(DESTDIR)$(CFG_PREFIX)\" --libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" --mandir=\"$(DESTDIR)$(CFG_MANDIR)\"\n endif\n-\t$(Q)cd tmp/empty_dir && sh ../../tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(DESTDIR)$(CFG_PREFIX)\" --libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" --mandir=\"$(DESTDIR)$(CFG_MANDIR)\" \"$(MAYBE_DISABLE_VERIFY)\"\n+\t$(Q)cd tmp/empty_dir && sh ../../tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(DESTDIR)$(CFG_PREFIX)\" --libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" --mandir=\"$(DESTDIR)$(CFG_MANDIR)\"\n # Remove tmp files because it's a decent amount of disk space\n \t$(Q)rm -R tmp/dist\n "}, {"sha": "ea00444453d00fc39c08464ba8c83d84f0c5b310", "filename": "mk/main.mk", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -126,11 +126,16 @@ endif\n \n CFG_JEMALLOC_FLAGS += $(JEMALLOC_FLAGS)\n \n-ifdef CFG_DISABLE_DEBUG\n-  CFG_RUSTC_FLAGS += --cfg ndebug\n-else\n-  $(info cfg: enabling more debugging (CFG_ENABLE_DEBUG))\n+ifdef CFG_ENABLE_DEBUG_ASSERTIONS\n+  $(info cfg: enabling debug assertions (CFG_ENABLE_DEBUG_ASSERTIONS))\n   CFG_RUSTC_FLAGS += --cfg debug -C debug-assertions=on\n+else\n+  CFG_RUSTC_FLAGS += --cfg ndebug\n+endif\n+\n+ifdef CFG_ENABLE_DEBUGINFO\n+  $(info cfg: enabling debuginfo (CFG_ENABLE_DEBUGINFO))\n+  CFG_RUSTC_FLAGS += -g\n endif\n \n ifdef SAVE_TEMPS"}, {"sha": "70abce8b4606751f1bda548dcd97a31f0661fecc", "filename": "mk/rt.mk", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -143,6 +143,10 @@ else ifeq ($(findstring android, $(OSTYPE_$(1))), android)\n   JEMALLOC_ARGS_$(1) := --disable-tls\n endif\n \n+ifdef CFG_ENABLE_DEBUG_JEMALLOC\n+  JEMALLOC_ARGS_$(1) += --enable-debug --enable-fill\n+endif\n+\n ################################################################################\n # jemalloc\n ################################################################################"}, {"sha": "d59239016d881d998529ecb8716cfd5ef02f2fed", "filename": "src/doc/trpl/associated-types.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Fdoc%2Ftrpl%2Fassociated-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Fdoc%2Ftrpl%2Fassociated-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fassociated-types.md?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -198,5 +198,5 @@ let obj = Box::new(graph) as Box<Graph<N=Node, E=Edge>>;\n ```\n \n The `N=Node` syntax allows us to provide a concrete type, `Node`, for the `N`\n-type parameter. Same with `E=Edge`. If we didn\u2019t proide this constraint, we\n+type parameter. Same with `E=Edge`. If we didn\u2019t provide this constraint, we\n couldn\u2019t be sure which `impl` to match this trait object to."}, {"sha": "311901b43d400c63d58b1f09c8626c97f4ef7964", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -44,8 +44,7 @@ pub trait Clone : Sized {\n     /// but can be overridden to reuse the resources of `a` to avoid unnecessary\n     /// allocations.\n     #[inline(always)]\n-    #[unstable(feature = \"core\",\n-               reason = \"this function is rarely used\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn clone_from(&mut self, source: &Self) {\n         *self = source.clone()\n     }"}, {"sha": "8cbdda758697b370bee105c7d5d409d6d9276c31", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -171,10 +171,10 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn chain<U>(self, other: U) -> Chain<Self, U> where\n-        Self: Sized, U: Iterator<Item=Self::Item>,\n+    fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter> where\n+        Self: Sized, U: IntoIterator<Item=Self::Item>,\n     {\n-        Chain{a: self, b: other, flag: false}\n+        Chain{a: self, b: other.into_iter(), flag: false}\n     }\n \n     /// Creates an iterator that iterates over both this and the specified\n@@ -207,8 +207,10 @@ pub trait Iterator {\n     /// both produce the same output.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn zip<U: Iterator>(self, other: U) -> Zip<Self, U> where Self: Sized {\n-        Zip{a: self, b: other}\n+    fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter> where\n+        Self: Sized, U: IntoIterator\n+    {\n+        Zip{a: self, b: other.into_iter()}\n     }\n \n     /// Creates a new iterator that will apply the specified function to each\n@@ -443,7 +445,7 @@ pub trait Iterator {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F>\n-        where Self: Sized, U: Iterator, F: FnMut(Self::Item) -> U,\n+        where Self: Sized, U: IntoIterator, F: FnMut(Self::Item) -> U,\n     {\n         FlatMap{iter: self, f: f, frontiter: None, backiter: None }\n     }\n@@ -933,7 +935,7 @@ pub trait Iterator {\n     /// `std::usize::MAX` elements of the original iterator.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn rev(self) -> Rev<Self> where Self: Sized {\n+    fn rev(self) -> Rev<Self> where Self: Sized + DoubleEndedIterator {\n         Rev{iter: self}\n     }\n \n@@ -2093,15 +2095,15 @@ impl<B, I, St, F> Iterator for Scan<I, St, F> where\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n-pub struct FlatMap<I, U, F> {\n+pub struct FlatMap<I, U: IntoIterator, F> {\n     iter: I,\n     f: F,\n-    frontiter: Option<U>,\n-    backiter: Option<U>,\n+    frontiter: Option<U::IntoIter>,\n+    backiter: Option<U::IntoIter>,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I: Iterator, U: Iterator, F> Iterator for FlatMap<I, U, F>\n+impl<I: Iterator, U: IntoIterator, F> Iterator for FlatMap<I, U, F>\n     where F: FnMut(I::Item) -> U,\n {\n     type Item = U::Item;\n@@ -2110,13 +2112,13 @@ impl<I: Iterator, U: Iterator, F> Iterator for FlatMap<I, U, F>\n     fn next(&mut self) -> Option<U::Item> {\n         loop {\n             if let Some(ref mut inner) = self.frontiter {\n-                for x in inner.by_ref() {\n+                if let Some(x) = inner.by_ref().next() {\n                     return Some(x)\n                 }\n             }\n             match self.iter.next().map(|x| (self.f)(x)) {\n                 None => return self.backiter.as_mut().and_then(|it| it.next()),\n-                next => self.frontiter = next,\n+                next => self.frontiter = next.map(IntoIterator::into_iter),\n             }\n         }\n     }\n@@ -2134,22 +2136,22 @@ impl<I: Iterator, U: Iterator, F> Iterator for FlatMap<I, U, F>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I: DoubleEndedIterator, U: DoubleEndedIterator, F> DoubleEndedIterator\n-    for FlatMap<I, U, F>\n-    where F: FnMut(I::Item) -> U\n+impl<I: DoubleEndedIterator, U, F> DoubleEndedIterator for FlatMap<I, U, F> where\n+    F: FnMut(I::Item) -> U,\n+    U: IntoIterator,\n+    U::IntoIter: DoubleEndedIterator\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<U::Item> {\n         loop {\n             if let Some(ref mut inner) = self.backiter {\n-                match inner.next_back() {\n-                    None => (),\n-                    y => return y\n+                if let Some(y) = inner.next_back() {\n+                    return Some(y)\n                 }\n             }\n             match self.iter.next_back().map(|x| (self.f)(x)) {\n                 None => return self.frontiter.as_mut().and_then(|it| it.next_back()),\n-                next => self.backiter = next,\n+                next => self.backiter = next.map(IntoIterator::into_iter),\n             }\n         }\n     }"}, {"sha": "ee9d1e015539e337a18a19ca066d6ddb197b2610", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -662,7 +662,19 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n               cmt: mc::cmt<'tcx>,\n               _loan_region: ty::Region,\n               bk: ty::BorrowKind,\n-              loan_cause: euv::LoanCause) {\n+              loan_cause: euv::LoanCause)\n+    {\n+        // Kind of hacky, but we allow Unsafe coercions in constants.\n+        // These occur when we convert a &T or *T to a *U, as well as\n+        // when making a thin pointer (e.g., `*T`) into a fat pointer\n+        // (e.g., `*Trait`).\n+        match loan_cause {\n+            euv::LoanCause::AutoUnsafe => {\n+                return;\n+            }\n+            _ => { }\n+        }\n+\n         let mut cur = &cmt;\n         let mut is_interior = false;\n         loop {"}, {"sha": "18e634a2dd6308ecb23e3e35cb4c8578bf075fd9", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 145, "deletions": 28, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -99,6 +99,7 @@ pub enum LoanCause {\n     ClosureCapture(Span),\n     AddrOf,\n     AutoRef,\n+    AutoUnsafe,\n     RefBinding,\n     OverloadedOperator,\n     ClosureInvocation,\n@@ -800,18 +801,8 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                             return_if_err!(self.mc.cat_expr_unadjusted(expr));\n                         self.delegate_consume(expr.id, expr.span, cmt_unadjusted);\n                     }\n-                    ty::AdjustDerefRef(ty::AutoDerefRef {\n-                        autoref: ref opt_autoref,\n-                        autoderefs: n\n-                    }) => {\n-                        self.walk_autoderefs(expr, n);\n-\n-                        match *opt_autoref {\n-                            None => { }\n-                            Some(ref r) => {\n-                                self.walk_autoref(expr, r, n);\n-                            }\n-                        }\n+                    ty::AdjustDerefRef(ref adj) => {\n+                        self.walk_autoderefref(expr, adj);\n                     }\n                 }\n             }\n@@ -852,39 +843,165 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n         }\n     }\n \n+    fn walk_autoderefref(&mut self,\n+                         expr: &ast::Expr,\n+                         adj: &ty::AutoDerefRef<'tcx>) {\n+        debug!(\"walk_autoderefref expr={} adj={}\",\n+               expr.repr(self.tcx()),\n+               adj.repr(self.tcx()));\n+\n+        self.walk_autoderefs(expr, adj.autoderefs);\n+\n+        // Weird hacky special case: AutoUnsizeUniq, which converts\n+        // from a ~T to a ~Trait etc, always comes in a stylized\n+        // fashion. In particular, we want to consume the ~ pointer\n+        // being dereferenced, not the dereferenced content (as the\n+        // content is, at least for upcasts, unsized).\n+        match adj.autoref {\n+            Some(ty::AutoUnsizeUniq(_)) => {\n+                assert!(adj.autoderefs == 1,\n+                        format!(\"Expected exactly 1 deref with Uniq AutoRefs, found: {}\",\n+                                adj.autoderefs));\n+                let cmt_unadjusted =\n+                    return_if_err!(self.mc.cat_expr_unadjusted(expr));\n+                self.delegate_consume(expr.id, expr.span, cmt_unadjusted);\n+                return;\n+            }\n+            _ => { }\n+        }\n+\n+        let autoref = adj.autoref.as_ref();\n+        let cmt_derefd = return_if_err!(\n+            self.mc.cat_expr_autoderefd(expr, adj.autoderefs));\n+        self.walk_autoref(expr, &cmt_derefd, autoref);\n+    }\n+\n+    /// Walks the autoref `opt_autoref` applied to the autoderef'd\n+    /// `expr`. `cmt_derefd` is the mem-categorized form of `expr`\n+    /// after all relevant autoderefs have occurred. Because AutoRefs\n+    /// can be recursive, this function is recursive: it first walks\n+    /// deeply all the way down the autoref chain, and then processes\n+    /// the autorefs on the way out. At each point, it returns the\n+    /// `cmt` for the rvalue that will be produced by introduced an\n+    /// autoref.\n     fn walk_autoref(&mut self,\n                     expr: &ast::Expr,\n-                    autoref: &ty::AutoRef,\n-                    n: usize) {\n-        debug!(\"walk_autoref expr={}\", expr.repr(self.tcx()));\n+                    cmt_derefd: &mc::cmt<'tcx>,\n+                    opt_autoref: Option<&ty::AutoRef<'tcx>>)\n+                    -> mc::cmt<'tcx>\n+    {\n+        debug!(\"walk_autoref(expr.id={} cmt_derefd={} opt_autoref={:?})\",\n+               expr.id,\n+               cmt_derefd.repr(self.tcx()),\n+               opt_autoref);\n+\n+        let autoref = match opt_autoref {\n+            Some(autoref) => autoref,\n+            None => {\n+                // No recursive step here, this is a base case.\n+                return cmt_derefd.clone();\n+            }\n+        };\n \n         match *autoref {\n-            ty::AutoPtr(r, m, _) => {\n-                let cmt_derefd = return_if_err!(\n-                    self.mc.cat_expr_autoderefd(expr, n));\n-                debug!(\"walk_adjustment: cmt_derefd={}\",\n-                       cmt_derefd.repr(self.tcx()));\n+            ty::AutoPtr(r, m, ref baseref) => {\n+                let cmt_base = self.walk_autoref_recursively(expr, cmt_derefd, baseref);\n+\n+                debug!(\"walk_autoref: expr.id={} cmt_base={}\",\n+                       expr.id,\n+                       cmt_base.repr(self.tcx()));\n \n                 self.delegate.borrow(expr.id,\n                                      expr.span,\n-                                     cmt_derefd,\n+                                     cmt_base,\n                                      r,\n                                      ty::BorrowKind::from_mutbl(m),\n                                      AutoRef);\n             }\n-            ty::AutoUnsize(_) |\n+\n+            ty::AutoUnsize(_) => {\n+                // Converting a `[T; N]` to `[T]` or `T` to `Trait`\n+                // isn't really a borrow, move, etc, in and of itself.\n+                // Also, no recursive step here, this is a base case.\n+\n+                // It may seem a bit odd to return the cmt_derefd\n+                // unmodified here, but in fact I think it's the right\n+                // thing to do. Essentially the unsize transformation\n+                // isn't really relevant to the borrowing rules --\n+                // it's best thought of as a kind of side-modifier to\n+                // the autoref, adding additional data that is\n+                // attached to the pointer that is produced, but not\n+                // affecting the data being borrowed in any other\n+                // way. To see what I mean, consider this example:\n+                //\n+                //    fn foo<'a>(&'a self) -> &'a Trait { self }\n+                //\n+                // This is valid because the underlying `self` value\n+                // lives for the lifetime 'a. If we were to treat the\n+                // \"unsizing\" as e.g. producing an rvalue, that would\n+                // only be valid for the temporary scope, which isn't\n+                // enough to justify the return value, which have the\n+                // lifetime 'a.\n+                //\n+                // Another option would be to add a variant for\n+                // categorization (like downcast) that wraps\n+                // cmt_derefd and represents the unsizing operation.\n+                // But I don't think there is any particular use for\n+                // this (yet). -nmatsakis\n+                return cmt_derefd.clone();\n+            }\n+\n             ty::AutoUnsizeUniq(_) => {\n-                assert!(n == 1, format!(\"Expected exactly 1 deref with Uniq \\\n-                                         AutoRefs, found: {}\", n));\n-                let cmt_unadjusted =\n-                    return_if_err!(self.mc.cat_expr_unadjusted(expr));\n-                self.delegate_consume(expr.id, expr.span, cmt_unadjusted);\n+                // these are handled via special case above\n+                self.tcx().sess.span_bug(expr.span, \"nexpected AutoUnsizeUniq\");\n             }\n-            ty::AutoUnsafe(..) => {\n+\n+            ty::AutoUnsafe(m, ref baseref) => {\n+                let cmt_base = self.walk_autoref_recursively(expr, cmt_derefd, baseref);\n+\n+                debug!(\"walk_autoref: expr.id={} cmt_base={}\",\n+                       expr.id,\n+                       cmt_base.repr(self.tcx()));\n+\n+                // Converting from a &T to *T (or &mut T to *mut T) is\n+                // treated as borrowing it for the enclosing temporary\n+                // scope.\n+                let r = ty::ReScope(region::CodeExtent::from_node_id(expr.id));\n+\n+                self.delegate.borrow(expr.id,\n+                                     expr.span,\n+                                     cmt_base,\n+                                     r,\n+                                     ty::BorrowKind::from_mutbl(m),\n+                                     AutoUnsafe);\n             }\n         }\n+\n+        // Construct the categorization for the result of the autoref.\n+        // This is always an rvalue, since we are producing a new\n+        // (temporary) indirection.\n+\n+        let adj_ty =\n+            ty::adjust_ty_for_autoref(self.tcx(),\n+                                      expr.span,\n+                                      cmt_derefd.ty,\n+                                      opt_autoref);\n+\n+        self.mc.cat_rvalue_node(expr.id, expr.span, adj_ty)\n     }\n \n+    fn walk_autoref_recursively(&mut self,\n+                                expr: &ast::Expr,\n+                                cmt_derefd: &mc::cmt<'tcx>,\n+                                autoref: &Option<Box<ty::AutoRef<'tcx>>>)\n+                                -> mc::cmt<'tcx>\n+    {\n+        // Shuffle from a ref to an optional box to an optional ref.\n+        let autoref: Option<&ty::AutoRef<'tcx>> = autoref.as_ref().map(|b| &**b);\n+        self.walk_autoref(expr, cmt_derefd, autoref)\n+    }\n+\n+\n     // When this returns true, it means that the expression *is* a\n     // method-call (i.e. via the operator-overload).  This true result\n     // also implies that walk_overloaded_operator already took care of"}, {"sha": "6c7dc61109fb5109cd5f4b5cf3ae524b672404c6", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -833,6 +833,15 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n         ret\n     }\n \n+    /// Returns the lifetime of a temporary created by expr with id `id`.\n+    /// This could be `'static` if `id` is part of a constant expression.\n+    pub fn temporary_scope(&self, id: ast::NodeId) -> ty::Region {\n+        match self.typer.temporary_scope(id) {\n+            Some(scope) => ty::ReScope(scope),\n+            None => ty::ReStatic\n+        }\n+    }\n+\n     pub fn cat_rvalue_node(&self,\n                            id: ast::NodeId,\n                            span: Span,\n@@ -848,17 +857,12 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n             _ => check_const::NOT_CONST\n         };\n \n+        // Compute maximum lifetime of this rvalue. This is 'static if\n+        // we can promote to a constant, otherwise equal to enclosing temp\n+        // lifetime.\n         let re = match qualif & check_const::NON_STATIC_BORROWS {\n-            check_const::PURE_CONST => {\n-                // Constant rvalues get promoted to 'static.\n-                ty::ReStatic\n-            }\n-            _ => {\n-                match self.typer.temporary_scope(id) {\n-                    Some(scope) => ty::ReScope(scope),\n-                    None => ty::ReStatic\n-                }\n-            }\n+            check_const::PURE_CONST => ty::ReStatic,\n+            _ => self.temporary_scope(id),\n         };\n         let ret = self.cat_rvalue(id, span, re, expr_ty);\n         debug!(\"cat_rvalue_node ret {}\", ret.repr(self.tcx()));"}, {"sha": "322b5d3a8cf27bbee757d07bd1f1833b722cdbcf", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -22,6 +22,7 @@ use syntax::ptr::P;\n use syntax::ast;\n \n use std::collections::HashMap;\n+use std::borrow::ToOwned;\n \n /// Structure used to register plugins.\n ///\n@@ -50,6 +51,9 @@ pub struct Registry<'a> {\n \n     #[doc(hidden)]\n     pub lint_groups: HashMap<&'static str, Vec<LintId>>,\n+\n+    #[doc(hidden)]\n+    pub llvm_passes: Vec<String>,\n }\n \n impl<'a> Registry<'a> {\n@@ -62,6 +66,7 @@ impl<'a> Registry<'a> {\n             syntax_exts: vec!(),\n             lint_passes: vec!(),\n             lint_groups: HashMap::new(),\n+            llvm_passes: vec!(),\n         }\n     }\n \n@@ -116,4 +121,13 @@ impl<'a> Registry<'a> {\n     pub fn register_lint_group(&mut self, name: &'static str, to: Vec<&'static Lint>) {\n         self.lint_groups.insert(name, to.into_iter().map(|x| LintId::of(x)).collect());\n     }\n+\n+    /// Register an LLVM pass.\n+    ///\n+    /// Registration with LLVM itself is handled through static C++ objects with\n+    /// constructors. This method simply adds a name to the list of passes to\n+    /// execute.\n+    pub fn register_llvm_pass(&mut self, name: &str) {\n+        self.llvm_passes.push(name.to_owned());\n+    }\n }"}, {"sha": "148f484b0ed5c487a5c1a045e1ab31ee67de1e95", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -52,6 +52,7 @@ pub struct Session {\n     pub working_dir: PathBuf,\n     pub lint_store: RefCell<lint::LintStore>,\n     pub lints: RefCell<NodeMap<Vec<(lint::LintId, codemap::Span, String)>>>,\n+    pub plugin_llvm_passes: RefCell<Vec<String>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n     pub crate_metadata: RefCell<Vec<String>>,\n     pub features: RefCell<feature_gate::Features>,\n@@ -391,6 +392,7 @@ pub fn build_session_(sopts: config::Options,\n         working_dir: env::current_dir().unwrap(),\n         lint_store: RefCell::new(lint::LintStore::new()),\n         lints: RefCell::new(NodeMap()),\n+        plugin_llvm_passes: RefCell::new(Vec::new()),\n         crate_types: RefCell::new(Vec::new()),\n         crate_metadata: RefCell::new(Vec::new()),\n         features: RefCell::new(feature_gate::Features::new()),"}, {"sha": "9776538de3fedc748f03f584706ac35b43312b0b", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -542,6 +542,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 euv::OverloadedOperator(..) |\n                 euv::AddrOf(..) |\n                 euv::AutoRef(..) |\n+                euv::AutoUnsafe(..) |\n                 euv::ClosureInvocation(..) |\n                 euv::ForLoop(..) |\n                 euv::RefBinding(..) |"}, {"sha": "c57cbcb929fbc8999d32287a047e78bad3b078b7", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -775,6 +775,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     euv::AddrOf |\n                     euv::RefBinding |\n                     euv::AutoRef |\n+                    euv::AutoUnsafe |\n                     euv::ForLoop |\n                     euv::MatchDiscriminant => {\n                         format!(\"cannot borrow {} as mutable\", descr)\n@@ -822,6 +823,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             BorrowViolation(euv::OverloadedOperator) |\n             BorrowViolation(euv::AddrOf) |\n             BorrowViolation(euv::AutoRef) |\n+            BorrowViolation(euv::AutoUnsafe) |\n             BorrowViolation(euv::RefBinding) |\n             BorrowViolation(euv::MatchDiscriminant) => {\n                 \"cannot borrow data mutably\""}, {"sha": "e310798b20ab78d55c8a000548922a7f7724eec5", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -438,7 +438,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         }\n     });\n \n-    let Registry { syntax_exts, lint_passes, lint_groups, .. } = registry;\n+    let Registry { syntax_exts, lint_passes, lint_groups, llvm_passes, .. } = registry;\n \n     {\n         let mut ls = sess.lint_store.borrow_mut();\n@@ -449,6 +449,8 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         for (name, to) in lint_groups {\n             ls.register_group(Some(sess), true, name, to);\n         }\n+\n+        *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n     }\n \n     // Lint plugins are registered; now we can process command line flags."}, {"sha": "de21d62651499b1d0de33d9250ee8430525dfe40", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -319,6 +319,8 @@ struct CodegenContext<'a> {\n     lto_ctxt: Option<(&'a Session, &'a [String])>,\n     // Handler to use for diagnostics produced during codegen.\n     handler: &'a Handler,\n+    // LLVM passes added by plugins.\n+    plugin_passes: Vec<String>,\n     // LLVM optimizations for which we want to print remarks.\n     remark: Passes,\n }\n@@ -328,6 +330,7 @@ impl<'a> CodegenContext<'a> {\n         CodegenContext {\n             lto_ctxt: Some((sess, reachable)),\n             handler: sess.diagnostic().handler(),\n+            plugin_passes: sess.plugin_llvm_passes.borrow().clone(),\n             remark: sess.opts.cg.remark.clone(),\n         }\n     }\n@@ -461,6 +464,16 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n                 }\n             }\n \n+            for pass in &cgcx.plugin_passes {\n+                let pass = CString::new(pass.clone()).unwrap();\n+                if !llvm::LLVMRustAddPass(mpm, pass.as_ptr()) {\n+                    cgcx.handler.err(&format!(\"a plugin asked for LLVM pass {:?} but LLVM \\\n+                                               does not recognize it\", pass));\n+                }\n+            }\n+\n+            cgcx.handler.abort_if_errors();\n+\n             // Finally, run the actual optimization passes\n             time(config.time_passes, \"llvm function passes\", (), |()|\n                  llvm::LLVMRustRunFunctionPassManager(fpm, llmod));\n@@ -907,6 +920,7 @@ fn run_work_multithreaded(sess: &Session,\n     for i in 0..num_workers {\n         let work_items_arc = work_items_arc.clone();\n         let diag_emitter = diag_emitter.clone();\n+        let plugin_passes = sess.plugin_llvm_passes.borrow().clone();\n         let remark = sess.opts.cg.remark.clone();\n \n         let (tx, rx) = channel();\n@@ -921,6 +935,7 @@ fn run_work_multithreaded(sess: &Session,\n             let cgcx = CodegenContext {\n                 lto_ctxt: None,\n                 handler: &diag_handler,\n+                plugin_passes: plugin_passes,\n                 remark: remark,\n             };\n "}, {"sha": "7c1fea4e60f6ecffa0281f906bbdb92da26f254a", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -20,7 +20,6 @@ use super::{\n     PreferMutLvalue,\n     structurally_resolved_type,\n };\n-use middle::infer;\n use middle::traits;\n use middle::ty::{self, Ty};\n use syntax::ast;\n@@ -314,36 +313,9 @@ fn lookup_op_method<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,\n \n     let method = match trait_did {\n         Some(trait_did) => {\n-            // We do eager coercions to make using operators\n-            // more ergonomic:\n-            //\n-            // - If the input is of type &'a T (resp. &'a mut T),\n-            //   then reborrow it to &'b T (resp. &'b mut T) where\n-            //   'b <= 'a.  This makes things like `x == y`, where\n-            //   `x` and `y` are both region pointers, work.  We\n-            //   could also solve this with variance or different\n-            //   traits that don't force left and right to have same\n-            //   type.\n-            let (adj_ty, adjustment) = match lhs_ty.sty {\n-                ty::ty_rptr(r_in, mt) => {\n-                    let r_adj = fcx.infcx().next_region_var(infer::Autoref(lhs_expr.span));\n-                    fcx.mk_subr(infer::Reborrow(lhs_expr.span), r_adj, *r_in);\n-                    let adjusted_ty = ty::mk_rptr(fcx.tcx(), fcx.tcx().mk_region(r_adj), mt);\n-                    let autoptr = ty::AutoPtr(r_adj, mt.mutbl, None);\n-                    let adjustment = ty::AutoDerefRef { autoderefs: 1, autoref: Some(autoptr) };\n-                    (adjusted_ty, adjustment)\n-                }\n-                _ => {\n-                    (lhs_ty, ty::AutoDerefRef { autoderefs: 0, autoref: None })\n-                }\n-            };\n-\n-            debug!(\"adjusted_ty={} adjustment={:?}\",\n-                   adj_ty.repr(fcx.tcx()),\n-                   adjustment);\n-\n+            let noop = ty::AutoDerefRef { autoderefs: 0, autoref: None };\n             method::lookup_in_trait_adjusted(fcx, expr.span, Some(lhs_expr), opname,\n-                                             trait_did, adjustment, adj_ty, Some(other_tys))\n+                                             trait_did, noop, lhs_ty, Some(other_tys))\n         }\n         None => None\n     };"}, {"sha": "9554e6ad8aad3881f1a8be980429b32ddf3e9604", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -1119,20 +1119,24 @@ fn link_pattern<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n fn link_autoref(rcx: &Rcx,\n                 expr: &ast::Expr,\n                 autoderefs: usize,\n-                autoref: &ty::AutoRef) {\n-\n+                autoref: &ty::AutoRef)\n+{\n     debug!(\"link_autoref(autoref={:?})\", autoref);\n     let mc = mc::MemCategorizationContext::new(rcx.fcx);\n     let expr_cmt = ignore_err!(mc.cat_expr_autoderefd(expr, autoderefs));\n     debug!(\"expr_cmt={}\", expr_cmt.repr(rcx.tcx()));\n \n     match *autoref {\n         ty::AutoPtr(r, m, _) => {\n-            link_region(rcx, expr.span, r,\n-                ty::BorrowKind::from_mutbl(m), expr_cmt);\n+            link_region(rcx, expr.span, r, ty::BorrowKind::from_mutbl(m), expr_cmt);\n+        }\n+\n+        ty::AutoUnsafe(m, _) => {\n+            let r = ty::ReScope(CodeExtent::from_node_id(expr.id));\n+            link_region(rcx, expr.span, r, ty::BorrowKind::from_mutbl(m), expr_cmt);\n         }\n \n-        ty::AutoUnsafe(..) | ty::AutoUnsizeUniq(_) | ty::AutoUnsize(_) => {}\n+        ty::AutoUnsizeUniq(_) | ty::AutoUnsize(_) => {}\n     }\n }\n "}, {"sha": "7428d0a8e35ef1820a35bcf461437bc995771109", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -163,12 +163,18 @@ impl Error {\n     /// `Error` for the error code.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn last_os_error() -> Error {\n-        Error::from_os_error(sys::os::errno() as i32)\n+        Error::from_raw_os_error(sys::os::errno() as i32)\n     }\n \n     /// Creates a new instance of an `Error` from a particular OS error code.\n-    #[unstable(feature = \"io\",\n-               reason = \"unclear whether this function is necessary\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn from_raw_os_error(code: i32) -> Error {\n+        Error { repr: Repr::Os(code) }\n+    }\n+\n+    /// Creates a new instance of an `Error` from a particular OS error code.\n+    #[unstable(feature = \"io\", reason = \"deprecated\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"renamed to from_raw_os_error\")]\n     pub fn from_os_error(code: i32) -> Error {\n         Error { repr: Repr::Os(code) }\n     }"}, {"sha": "3d10c151f80d6b4266375aa48ea747cca6543b48", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -37,6 +37,7 @@\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable]\n macro_rules! panic {\n     () => ({\n         panic!(\"explicit panic\")"}, {"sha": "18d8fcc8a5288966bccca93ce5043cadcd409cc5", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -750,8 +750,9 @@ mod tests {\n         assert!(tsa(\"localhost:23924\").unwrap().contains(&a));\n     }\n \n+    // FIXME: figure out why this fails on bitrig and fix it\n     #[test]\n-    #[cfg(not(windows))]\n+    #[cfg(not(any(windows, target_os = \"bitrig\")))]\n     fn to_socket_addr_str_bad() {\n         assert!(tsa(\"1200::AB00:1234::2552:7777:1313:34300\").is_err());\n     }"}, {"sha": "2f58a437eb4727992d192b058e58e2b6cef0aff1", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -495,7 +495,6 @@ pub extern fn rust_begin_unwind(msg: fmt::Arguments,\n /// on (e.g.) the inlining of other functions as possible), by moving\n /// the actual formatting into this shared place.\n #[inline(never)] #[cold]\n-#[stable(since = \"1.0.0\", feature = \"rust1\")]\n pub fn begin_unwind_fmt(msg: fmt::Arguments, file_line: &(&'static str, usize)) -> ! {\n     use fmt::Write;\n \n@@ -511,7 +510,6 @@ pub fn begin_unwind_fmt(msg: fmt::Arguments, file_line: &(&'static str, usize))\n \n /// This is the entry point of unwinding for panic!() and assert!().\n #[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n-#[stable(since = \"1.0.0\", feature = \"rust1\")]\n pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, usize)) -> ! {\n     // Note that this should be the only allocation performed in this code path.\n     // Currently this means that panic!() on OOM will invoke this code path,\n@@ -598,7 +596,6 @@ fn begin_unwind_inner(msg: Box<Any + Send>,\n /// Only a limited number of callbacks can be registered, and this function\n /// returns whether the callback was successfully registered or not. It is not\n /// currently possible to unregister a callback once it has been registered.\n-#[unstable(feature = \"std_misc\")]\n pub unsafe fn register(f: Callback) -> bool {\n     match CALLBACK_CNT.fetch_add(1, Ordering::SeqCst) {\n         // The invocation code has knowledge of this window where the count has"}, {"sha": "60f00c80b4abdbf61b42b7020627a9603f28121a", "filename": "src/libstd/sys/unix/process2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -193,7 +193,7 @@ impl Process {\n                                 let errno = combine(&bytes[0.. 4]);\n                                 assert!(p.wait().is_ok(),\n                                         \"wait() should either return Ok or panic\");\n-                                return Err(Error::from_os_error(errno))\n+                                return Err(Error::from_raw_os_error(errno))\n                             }\n                             Ok(0) => return Ok(p),\n                             Err(ref e) if e.kind() == ErrorKind::Interrupted => {}"}, {"sha": "73d6cd73621ad6ed39be674112663e01a2ff8bb5", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -212,7 +212,7 @@ pub unsafe fn create(stack: usize, p: Thunk) -> io::Result<rust_thread> {\n     assert_eq!(pthread_attr_destroy(&mut attr), 0);\n \n     return if ret != 0 {\n-        Err(io::Error::from_os_error(ret))\n+        Err(io::Error::from_raw_os_error(ret))\n     } else {\n         mem::forget(p); // ownership passed to pthread_create\n         Ok(native)"}, {"sha": "5ced8863e62a905dd137de6e6c9d19dd44f03de5", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -43,7 +43,7 @@ pub fn init() {\n \n /// Returns the last error from the Windows socket interface.\n fn last_error() -> io::Error {\n-    io::Error::from_os_error(unsafe { c::WSAGetLastError() })\n+    io::Error::from_raw_os_error(unsafe { c::WSAGetLastError() })\n }\n \n /// Checks if the signed integer is the Windows constant `SOCKET_ERROR` (-1)"}, {"sha": "56af43474a6155d69240411bcd01d1fbf209c704", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -26,6 +26,8 @@ use std::num::ToPrimitive;\n use std::ops::{Add, Sub};\n use std::rc::Rc;\n \n+use std::fmt;\n+\n use libc::c_uint;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n@@ -199,6 +201,7 @@ pub fn original_sp(cm: &CodeMap, sp: Span, enclosing_sp: Span) -> Span {\n //\n \n /// A source code location used for error reporting\n+#[derive(Debug)]\n pub struct Loc {\n     /// Information about the original source\n     pub file: Rc<FileMap>,\n@@ -211,6 +214,7 @@ pub struct Loc {\n /// A source code location used as the result of lookup_char_pos_adj\n // Actually, *none* of the clients use the filename *or* file field;\n // perhaps they should just be removed.\n+#[derive(Debug)]\n pub struct LocWithOpt {\n     pub filename: FileName,\n     pub line: usize,\n@@ -219,7 +223,9 @@ pub struct LocWithOpt {\n }\n \n // used to be structural records. Better names, anyone?\n+#[derive(Debug)]\n pub struct FileMapAndLine { pub fm: Rc<FileMap>, pub line: usize }\n+#[derive(Debug)]\n pub struct FileMapAndBytePos { pub fm: Rc<FileMap>, pub pos: BytePos }\n \n \n@@ -449,6 +455,12 @@ impl Decodable for FileMap {\n     }\n }\n \n+impl fmt::Debug for FileMap {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"FileMap({})\", self.name)\n+    }\n+}\n+\n impl FileMap {\n     /// EFFECT: register a start-of-line offset in the\n     /// table of line-beginnings."}, {"sha": "3cc16006b1b9c08a0812ad7033a8d562755f6b3f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -2880,7 +2880,7 @@ impl<'a> Parser<'a> {\n         try!(self.expect_keyword(keywords::In));\n         let expr = try!(self.parse_expr_res(RESTRICTION_NO_STRUCT_LITERAL));\n         let loop_block = try!(self.parse_block());\n-        let hi = self.span.hi;\n+        let hi = self.last_span.hi;\n \n         Ok(self.mk_expr(lo, hi, ExprForLoop(pat, expr, loop_block, opt_ident)))\n     }"}, {"sha": "d61f47fd7ef27cf49556c5a86afb5248b3ae149a", "filename": "src/test/auxiliary/llvm_pass_plugin.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fauxiliary%2Fllvm_pass_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fauxiliary%2Fllvm_pass_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fllvm_pass_plugin.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+\n+#![feature(plugin_registrar)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc;\n+\n+use rustc::plugin::Registry;\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    // This pass is built in to LLVM.\n+    //\n+    // Normally, we would name a pass that was registered through\n+    // C++ static object constructors in the same .so file as the\n+    // plugin registrar.\n+    reg.register_llvm_pass(\"inline\");\n+}"}, {"sha": "20ac757354faf0ccf738300f73b692d2c81bd2de", "filename": "src/test/compile-fail/bad-mid-path-type-params.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-tidy-linelength\n-\n struct S<T> {\n     contents: T,\n }"}, {"sha": "5878e9a9f649be3b1e80adb796ba44f634305bb5", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-tidy-linelength\n-\n use std::cell::RefCell;\n \n trait Trait : ::std::marker::MarkerTrait {}"}, {"sha": "796b455f5c70a3258edc4bcadcf2288438be4df0", "filename": "src/test/compile-fail/borrowck-use-uninitialized-in-cast-trait.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fborrowck-use-uninitialized-in-cast-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fborrowck-use-uninitialized-in-cast-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-use-uninitialized-in-cast-trait.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Variation on `borrowck-use-uninitialized-in-cast` in which we do a\n+// trait cast from an uninitialized source. Issue #20791.\n+\n+trait Foo { fn dummy(&self) { } }\n+impl Foo for i32 { }\n+\n+fn main() {\n+    let x: &i32;\n+    let y = x as *const Foo; //~ ERROR use of possibly uninitialized variable: `*x`\n+}"}, {"sha": "a3d5af80b533b6ac220635007281b56c954ad2ff", "filename": "src/test/compile-fail/borrowck-use-uninitialized-in-cast.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fborrowck-use-uninitialized-in-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fborrowck-use-uninitialized-in-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-use-uninitialized-in-cast.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we detect unused values that are cast to other things.\n+// The problem was specified to casting to `*`, as creating unsafe\n+// pointers was not being fully checked. Issue #20791.\n+\n+// pretty-expanded FIXME #23616\n+\n+fn main() {\n+    let x: &i32;\n+    let y = x as *const i32; //~ ERROR use of possibly uninitialized variable: `*x`\n+}"}, {"sha": "062a4a43b694b14ae86ef57172f3032a5b25e286", "filename": "src/test/compile-fail/coherence-default-trait-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-tidy-linelength\n-\n #![feature(optin_builtin_traits)]\n \n use std::marker::MarkerTrait;"}, {"sha": "78435f1a78a16874da4f0caf183bd8bfd6f7d8e2", "filename": "src/test/compile-fail/coherence-orphan.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-tidy-linelength\n // aux-build:coherence_orphan_lib.rs\n \n #![feature(optin_builtin_traits)]"}, {"sha": "f4f6aaa94fe29c8422ade8ed3275e4950351e26e", "filename": "src/test/compile-fail/issue-22289.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fissue-22289.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fissue-22289.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22289.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    0 as &std::any::Any; //~ ERROR non-scalar cast: `i32` as `&core::any::Any`\n+}"}, {"sha": "4c6652d812c8c7d0f9e4a9f5a619ca3acdda4263", "filename": "src/test/compile-fail/issue-22370.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fissue-22370.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fissue-22370.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22370.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+trait A<T=Self> {}\n+\n+fn f(a: &A) {}\n+//~^ ERROR the type parameter `T` must be explicitly specified in an object type because its default value `Self` references the type `Self`\n+\n+fn main() {}"}, {"sha": "368e2483533a4ae6601eda33999e36b0af65f719", "filename": "src/test/compile-fail/issue-22384.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fissue-22384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fissue-22384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22384.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Trait {\n+    fn foo();\n+}\n+\n+fn main() {\n+    <<i32 as Copy>::foobar as Trait>::foo();\n+    //~^ ERROR use of undeclared associated type `Copy::foobar`\n+}"}, {"sha": "96c8ec45058561af386d9b97011f87e162a906cb", "filename": "src/test/compile-fail/issue-8767.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fissue-8767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fissue-8767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8767.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-tidy-linelength\n-\n impl B { //~ ERROR use of undeclared type name `B`\n }\n "}, {"sha": "16f195b4ea2689cee2c7d06c137d2538351adeb2", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -12,7 +12,6 @@\n // aux-build:inherited_stability.rs\n // aux-build:stability_cfg1.rs\n // aux-build:stability_cfg2.rs\n-// ignore-tidy-linelength\n \n #![deny(deprecated)]\n #![allow(dead_code)]"}, {"sha": "1615af400713c2a2ddaf78722ed93b65ecf309b1", "filename": "src/test/compile-fail/lint-uppercase-variables.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-tidy-linelength\n-\n #![allow(dead_code)]\n #![deny(non_snake_case)]\n "}, {"sha": "09b97dfb30f24f8063084a32e847f26ca15499e4", "filename": "src/test/compile-fail/typeck-default-trait-impl-outside-crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-outside-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-outside-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-outside-crate.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-tidy-linelength\n-\n #![feature(optin_builtin_traits)]\n \n impl Copy for .. {}"}, {"sha": "addc5721752316d4476096969b9bc5a10c644b3d", "filename": "src/test/compile-fail/use-after-move-implicity-coerced-object.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-tidy-linelength\n-\n #![feature(box_syntax)]\n \n use std::fmt;"}, {"sha": "1da9a06b0eea4cea1b3300c13a032168ffa122f0", "filename": "src/test/debuginfo/gdb-pretty-std.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-std.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-windows failing on win32 bot\n // ignore-freebsd: gdb package too new\n-// ignore-tidy-linelength\n // ignore-lldb\n // ignore-android: FIXME(#10381)\n // compile-flags:-g"}, {"sha": "5dfef636f9f365e92910d4c1b09d0c436b3d45f4", "filename": "src/test/run-pass-fulldeps/llvm-pass-plugin.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass-fulldeps%2Fllvm-pass-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass-fulldeps%2Fllvm-pass-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fllvm-pass-plugin.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:llvm_pass_plugin.rs\n+// ignore-stage1\n+\n+#![feature(plugin)]\n+#![plugin(llvm_pass_plugin)]\n+\n+pub fn main() { }"}, {"sha": "a0644e513a6e9727c5e988b31f961f953a9b9074", "filename": "src/test/run-pass-fulldeps/rename-directory.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -12,7 +12,6 @@\n // because it needs TempDir, which is in extra\n \n // ignore-android\n-// pretty-expanded FIXME #23616\n \n #![feature(rustc_private, path_ext)]\n "}, {"sha": "d2a595804a4b29c810eece527bf35eaaeb998cc8", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n struct X {\n     x: isize"}, {"sha": "c93049b87a76483473ef35c46fd0570dba5b9d4f", "filename": "src/test/run-pass/arith-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Farith-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Farith-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-2.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let i32_c: isize = 0x10101010;"}, {"sha": "e5ff97e3cdbd287992093dbb7c4b75878a806ac7", "filename": "src/test/run-pass/arith-unsigned.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Farith-unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Farith-unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-unsigned.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(type_limits)]\n "}, {"sha": "53eec3c28c0de7580e9e60b1a3fbd77786b4cb13", "filename": "src/test/run-pass/artificial-block.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fartificial-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fartificial-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fartificial-block.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn f() -> isize { { return 3; } }\n "}, {"sha": "d89607077dcbeaceca799f0cf1940c08ac96bc66", "filename": "src/test/run-pass/as-precedence.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fas-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fas-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fas-precedence.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn main() {\n     assert_eq!(3 as usize * 3, 9);"}, {"sha": "3eebc7acb0fd55f2b43507b4a13b443603569bd8", "filename": "src/test/run-pass/asm-in-out-operand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(asm)]\n "}, {"sha": "d7913b473f85aae25c3412dad9db5163b3a2c18c", "filename": "src/test/run-pass/asm-out-assign.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(asm)]\n "}, {"sha": "186f91da07ccbdfa2815ea4232015ffe7da3a7d9", "filename": "src/test/run-pass/assign-assign.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassign-assign.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // Issue 483 - Assignment expressions result in nil\n-// pretty-expanded FIXME #23616\n \n fn test_assign() {\n     let mut x: isize;"}, {"sha": "f05a1520b8ef88e173465d8b1b0985e860333932", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -12,7 +12,6 @@\n // making method calls, but only if there aren't any matches without\n // it.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(unboxed_closures)]\n "}, {"sha": "06521e0ec78e8164d3d37dbbb0f37cf31326ae09", "filename": "src/test/run-pass/associated-types-basic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(core)]\n "}, {"sha": "d82ba6add75c78b09b94965d997fd4bdef179fd9", "filename": "src/test/run-pass/associated-types-binding-in-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-trait.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n // Test a case where the associated type binding (to `bool`, in this\n // case) is derived from the trait definition. Issue #21636.\n \n-// pretty-expanded FIXME #23616\n \n use std::vec;\n "}, {"sha": "4eacd120bc690919314f654039b9cc9443c2a8db", "filename": "src/test/run-pass/associated-types-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test equality constrai32s on associated types in a where clause.\n \n-// pretty-expanded FIXME #23616\n \n pub trait ToI32 {\n     fn to_i32(&self) -> i32;"}, {"sha": "77ab616ca918b35b4dab8f4918e4853089e3f07f", "filename": "src/test/run-pass/associated-types-constant-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n trait SignedUnsigned {\n     type Opposite;"}, {"sha": "1661812520b3efe22bfd2bb9511078cb495ced02", "filename": "src/test/run-pass/associated-types-doubleendediterator-object.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "7014cc59b71db619283d20fc136a5f3f016dcc36", "filename": "src/test/run-pass/associated-types-enum-field-named.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-named.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test associated types appearing in struct-like enum variants.\n \n-// pretty-expanded FIXME #23616\n \n use self::VarValue::*;\n "}, {"sha": "c983fdefc0e35c0f8d8ced8550858cf0a6b8a866", "filename": "src/test/run-pass/associated-types-enum-field-numbered.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-numbered.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test associated types appearing in tuple-like enum variants.\n \n-// pretty-expanded FIXME #23616\n \n use self::VarValue::*;\n "}, {"sha": "74199f57fb634f401c0797230cbe782496f6b7e5", "filename": "src/test/run-pass/associated-types-in-default-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n trait Get {\n     type Value;"}, {"sha": "dcd7895fa99e644c325488016b200eed7e33a7fd", "filename": "src/test/run-pass/associated-types-in-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n trait Get {\n     type Value;"}, {"sha": "5b81ac7090876f89758e28ba7a1e7b53ccd06545", "filename": "src/test/run-pass/associated-types-in-impl-generics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n trait Get {\n     type Value;"}, {"sha": "5eaf4c2bc839654e3317ed638589e546ade1f737", "filename": "src/test/run-pass/associated-types-in-inherent-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n trait Get {\n     type Value;"}, {"sha": "31336787e4c13e41ee892fbf75d6cc7a7d2337bb", "filename": "src/test/run-pass/associated-types-issue-20220.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20220.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test references to `Self::Item` in the trait. Issue #20220.\n \n-// pretty-expanded FIXME #23616\n \n use std::vec;\n "}, {"sha": "cf4b82721112c5baa69c88e6178532861531fd96", "filename": "src/test/run-pass/associated-types-issue-21212.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-issue-21212.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-issue-21212.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-21212.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -13,7 +13,6 @@\n // where clauses in the environment which in turn required normalizing\n // `Self::Input`.\n \n-// pretty-expanded FIXME #23616\n \n pub trait Parser {\n     type Input;"}, {"sha": "181ce52eb4baf6fb2dcee6fa65d02f4f1e65b624", "filename": "src/test/run-pass/associated-types-iterator-binding.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn pairwise_sub<T:DoubleEndedIterator<Item=isize>>(mut t: T) -> isize {\n     let mut result = 0;"}, {"sha": "dfd468884a167ec2df94020703dfb1b3c615d3da", "filename": "src/test/run-pass/associated-types-project-from-type-param-via-bound-in-where-clause.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -12,7 +12,6 @@\n // `Item` originates in a where-clause, not the declaration of\n // `T`. Issue #20300.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(core)]\n "}, {"sha": "8054b3aa52a1d95c0e592d80dae4df4558ef9287", "filename": "src/test/run-pass/associated-types-projection-from-known-type-in-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test where the impl self type uses a projection from a constant type.\n \n-// pretty-expanded FIXME #23616\n \n trait Int\n {"}, {"sha": "70c7602ffceb17d3726e8ed224c06b9dcc0a73d2", "filename": "src/test/run-pass/associated-types-projection-in-supertrait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n // Test that we are handle to correctly handle a projection type\n // that appears in a supertrait bound. Issue #20559.\n \n-// pretty-expanded FIXME #23616\n \n trait A\n {"}, {"sha": "3b7fb65a8b4aaa96adf84eba8337a8d4692166b9", "filename": "src/test/run-pass/associated-types-ref-in-struct-literal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test associated type references in a struct literal. Issue #20535.\n \n-// pretty-expanded FIXME #23616\n \n pub trait Foo {\n     type Bar;"}, {"sha": "5bba54e57b477ce5e334a14e7c5aecdc368364c9", "filename": "src/test/run-pass/associated-types-return.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test equality constraints on associated types in a where clause.\n \n-// pretty-expanded FIXME #23616\n \n pub trait Foo {\n     type A;"}, {"sha": "776b2183d3908948b4f6a130c6aee5d576818e50", "filename": "src/test/run-pass/associated-types-simple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n trait Get {\n     type Value;"}, {"sha": "6adfaabcc23b46f0d4fa3cb69de798c41814d251", "filename": "src/test/run-pass/associated-types-stream.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-stream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-stream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-stream.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n // Test references to the trait `Stream` in the bounds for associated\n // types defined on `Stream`. Issue #20551.\n \n-// pretty-expanded FIXME #23616\n \n trait Stream {\n     type Car;"}, {"sha": "00746c32e1c31e07cc4cd6373a7a880a1efd5816", "filename": "src/test/run-pass/associated-types-struct-field-named.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n // Test that we correctly normalize the type of a struct field\n // which has an associated type.\n \n-// pretty-expanded FIXME #23616\n \n pub trait UnifyKey {\n     type Value;"}, {"sha": "25e89892a29af5d2df94b957b5ac18daa40081c9", "filename": "src/test/run-pass/associated-types-struct-field-numbered.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n // Test that we correctly normalize the type of a struct field\n // which has an associated type.\n \n-// pretty-expanded FIXME #23616\n \n pub trait UnifyKey {\n     type Value;"}, {"sha": "1432369f7143dbbf5730f0137cf3f445833bbe34", "filename": "src/test/run-pass/associated-types-sugar-path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test paths to associated types using the type-parameter-only sugar.\n \n-// pretty-expanded FIXME #23616\n \n pub trait Foo {\n     type A;"}, {"sha": "b3c9ea541b71282af4490d41f05ccc47229a59b5", "filename": "src/test/run-pass/attr-main-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-main-2.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(main)]\n "}, {"sha": "893fb85b529a70a91fbce0493627f13920797be7", "filename": "src/test/run-pass/attr-no-drop-flag-size.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(unsafe_destructor)]\n #![feature(unsafe_no_drop_flag)]"}, {"sha": "babc0db4c3190c52f27e12b0c9925c26923f316c", "filename": "src/test/run-pass/auto-loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-loop.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let mut sum = 0;"}, {"sha": "5b12edb427562ae1b23df3ccc31a9d7ab52ebf86", "filename": "src/test/run-pass/auto-ref-sliceable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n trait Pushable<T> {\n     fn push_val(&mut self, t: T);"}, {"sha": "1f3d17ad55c08ef9609d863a89b00bc691c0b0cf", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn f<T>(x: Vec<T>) -> T { return x.into_iter().next().unwrap(); }\n "}, {"sha": "582fd020dd061756ec49a63f06a37404f0a4c079", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "c80a92a185a2e26c007ec799db6ef995cad3cb24", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "2a782cfa176ee1566658c71dbc63bba0d63d7f72", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "a1bcf65ab75fabece2f93c2b6f85c685c9e4ada5", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "326218674ae3f7ad5da77a0d0d3d95fa4d514545", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "05f12fd089ad476c6dd9ca706ebcd96c42d57b3a", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "19c0e7baaa0a1998f00caa6dc2a2825497f38330", "filename": "src/test/run-pass/big-literals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbig-literals.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(core)]\n "}, {"sha": "01a9ec809397336b4831bf188c3c865d62462f6c", "filename": "src/test/run-pass/binary-minus-without-space.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Check that issue #954 stays fixed\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     match -1 { -1 => {}, _ => panic!(\"wat\") }"}, {"sha": "9be7d63ab951d8cd10978ae5efe9524c7268934b", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::sync::Arc;\n fn dispose(_x: Arc<bool>) { }"}, {"sha": "b4c38bf450b1bd63b138b1ef96b7649aae18bf4e", "filename": "src/test/run-pass/bind-field-short-with-modifiers.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbind-field-short-with-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbind-field-short-with-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-field-short-with-modifiers.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     struct Foo { x: isize, y: isize }"}, {"sha": "73cba2e4e0a7ca73bb1eae25d7e16fab0a73ab10", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn asBlock<F>(f: F) -> usize where F: FnOnce() -> usize {\n    return f();"}, {"sha": "ac8f5012573616c56fabc935be30af47814a968a", "filename": "src/test/run-pass/block-expr-precedence.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -13,7 +13,6 @@\n \n // no-reformat\n \n-// pretty-expanded FIXME #23616\n \n /*\n  *"}, {"sha": "3e6109da39a266d9a014fb40fc3247b561fca277", "filename": "src/test/run-pass/block-fn-coerce.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn force<F>(f: F) -> isize where F: FnOnce() -> isize { return f(); }\n "}, {"sha": "fa0b86d0a02467761a8a3165ef5f280706185e6a", "filename": "src/test/run-pass/bool-not.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbool-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbool-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbool-not.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     if !false { assert!((true)); } else { assert!((false)); }"}, {"sha": "53b568b06b5b6a16546cdcb52c290828ae7d6feb", "filename": "src/test/run-pass/bool.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbool.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Basic boolean tests\n \n-// pretty-expanded FIXME #23616\n \n use std::cmp::Ordering::{Equal, Greater, Less};\n use std::ops::{BitAnd, BitOr, BitXor};"}, {"sha": "f0d09688192c6fd56ee13ee2a869ae8dda2066b6", "filename": "src/test/run-pass/borrow-tuple-fields.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct Foo(isize, isize);\n "}, {"sha": "7fdc65a96e238d3894ba661577ffe4fc18272f38", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "5b15c8f0797fa659a2d218457586d925e1deff63", "filename": "src/test/run-pass/borrowck-closures-two-imm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -14,7 +14,6 @@\n // that the main function can read the variable too while\n // the closures are in scope. Issue #6801.\n \n-// pretty-expanded FIXME #23616\n \n fn a() -> i32 {\n     let mut x = 3;"}, {"sha": "0e33351894d14c0759e21c8f2d082a0ce3cb744e", "filename": "src/test/run-pass/borrowck-fixed-length-vecs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let x = [22];"}, {"sha": "380bd398a7cb2fe57d4419aa20c02c1380131f93", "filename": "src/test/run-pass/borrowck-freeze-frozen-mut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-freeze-frozen-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-freeze-frozen-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-freeze-frozen-mut.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test that a `&mut` inside of an `&` is freezable.\n \n-// pretty-expanded FIXME #23616\n \n struct MutSlice<'a, T:'a> {\n     data: &'a mut [T]"}, {"sha": "fb30c85e709631b02d60e45f6fa0fbdbb751681b", "filename": "src/test/run-pass/borrowck-macro-interaction-issue-6304.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n // Check that we do not ICE when compiling this\n // macro, which reuses the expression `$id`\n \n-// pretty-expanded FIXME #23616\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "bbc668f5cabfe77523915cdff0ba9fc3a3866de5", "filename": "src/test/run-pass/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "d55517c65d667e458d53b91142fc56dc0b937eea", "filename": "src/test/run-pass/borrowck-mut-vec-as-imm-slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn want_slice(v: &[isize]) -> isize {\n     let mut sum = 0;"}, {"sha": "e0a5db678d2f455d39a36876966a502ec62a45bf", "filename": "src/test/run-pass/borrowck-pat-reassign-no-binding.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let mut x = None;"}, {"sha": "045e8d952adaa0ffdd383e48327a19b94a5acf92", "filename": "src/test/run-pass/borrowck-rvalues-mutable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-rvalues-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-rvalues-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-rvalues-mutable.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct Counter {\n     value: usize"}, {"sha": "59a5fea769a6fcb19afe8b7f0af1fca7c2490f1c", "filename": "src/test/run-pass/borrowck-scope-of-deref-issue-4666.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-scope-of-deref-issue-4666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-scope-of-deref-issue-4666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-scope-of-deref-issue-4666.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -12,7 +12,6 @@\n // limited to the deref operation itself, and does not infect the\n // block as a whole.\n \n-// pretty-expanded FIXME #23616\n \n struct Box {\n     x: usize"}, {"sha": "2e8ddb08064726af9a7f3f3afe7ce0269d75a261", "filename": "src/test/run-pass/borrowck-univariant-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n use std::cell::Cell;\n "}, {"sha": "3e47764ba0264ea90192477aed583163a5ca1178", "filename": "src/test/run-pass/borrowed-ptr-pattern-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn foo(s: &String) -> bool {\n     match &**s {"}, {"sha": "91228efb9c1cb1a8ce62956ac62a4a52016d376d", "filename": "src/test/run-pass/borrowed-ptr-pattern-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn foo<'r>(s: &'r usize) -> bool {\n     match s {"}, {"sha": "6656eb41f2e3a64ff4a6b8f52d2277ecfdb8317a", "filename": "src/test/run-pass/borrowed-ptr-pattern-infallible.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let (&x, &y) = (&3, &'a');"}, {"sha": "e1e9381eeb8e76f5506d45f58a758c29f6f1dc57", "filename": "src/test/run-pass/borrowed-ptr-pattern-option.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn select<'r>(x: &'r Option<isize>, y: &'r Option<isize>) -> &'r Option<isize> {\n     match (x, y) {"}, {"sha": "3042ff7743b706903a7d538acc9d7cdab5d6f7be", "filename": "src/test/run-pass/borrowed-ptr-pattern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn foo<T:Clone>(x: &T) -> T{\n     match x {"}, {"sha": "ea136e2dc4854d9193f869175fc31ab22d0024bf", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let mut i = 0;"}, {"sha": "80fd09114fc95b8abae05620b55ad2ea48a7f8c9", "filename": "src/test/run-pass/bug-7183-generics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n trait Speak : Sized {\n     fn say(&self, s:&str) -> String;"}, {"sha": "c5064d56ca1233502c64e6d21e9be352f4534cb8", "filename": "src/test/run-pass/builtin-superkinds-capabilities-transitive.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -14,7 +14,6 @@\n // a Send. Basically this just makes sure rustc is using\n // each_bound_trait_and_supertraits in type_contents correctly.\n \n-// pretty-expanded FIXME #23616\n \n use std::sync::mpsc::{channel, Sender};\n "}, {"sha": "183e6fe232cd39e7c9533f3edf56ea53960ce598", "filename": "src/test/run-pass/builtin-superkinds-capabilities-xc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -14,7 +14,6 @@\n // Tests \"capabilities\" granted by traits with super-builtin-kinds,\n // even when using them cross-crate.\n \n-// pretty-expanded FIXME #23616\n \n extern crate trait_superkinds_in_metadata;\n "}, {"sha": "a4d5c943b1f68b81458bef1ca9c1ab2d1dde7f67", "filename": "src/test/run-pass/builtin-superkinds-capabilities.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -12,7 +12,6 @@\n // builtin-kinds, e.g., if a trait requires Send to implement, then\n // at usage site of that trait, we know we have the Send capability.\n \n-// pretty-expanded FIXME #23616\n \n use std::sync::mpsc::{channel, Sender, Receiver};\n "}, {"sha": "c4dc7d78b06d52df49518d17cebf8690d8a55ae3", "filename": "src/test/run-pass/builtin-superkinds-self-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n // Tests the ability for the Self type in default methods to use\n // capabilities granted by builtin kinds as supertraits.\n \n-// pretty-expanded FIXME #23616\n \n use std::sync::mpsc::{Sender, channel};\n "}, {"sha": "5bbdec95b157647d0fec393e3c8357ff4b1c76f9", "filename": "src/test/run-pass/by-value-self-in-mut-slot.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fby-value-self-in-mut-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fby-value-self-in-mut-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fby-value-self-in-mut-slot.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct X {\n     a: isize"}, {"sha": "e35398a22917fc66c10484fdc46acc4184b86cec", "filename": "src/test/run-pass/call-closure-from-overloaded-op.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn foo() -> isize { 22 }\n "}, {"sha": "45cec79e1a30ee973b5adbe40f2f2ad4df0343d5", "filename": "src/test/run-pass/capture-clauses-boxed-closures.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn each<T, F>(x: &[T], mut f: F) where F: FnMut(&T) {\n     for val in x {"}, {"sha": "5e7d5aacb8d0d871d625a298e39e38d972d97f04", "filename": "src/test/run-pass/capture-clauses-unboxed-closures.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(unboxed_closures)]\n "}, {"sha": "bb60626a4bf02afaeea6107dcc59c532212fbbc1", "filename": "src/test/run-pass/cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let i: isize = 'Q' as isize;"}, {"sha": "e4f4a4f3a576cde0ce8b7e632e48c1254046af66", "filename": "src/test/run-pass/cci_nested_exe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:cci_nested_lib.rs\n \n-// pretty-expanded FIXME #23616\n \n #![feature(globs)]\n "}, {"sha": "c1fcf49654626735f0449d8d5542d92e7e93607e", "filename": "src/test/run-pass/cell-does-not-clone.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcell-does-not-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcell-does-not-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcell-does-not-clone.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::cell::Cell;\n "}, {"sha": "36b9ce1585cf803cf7e72a748592cffc3d3a2f56", "filename": "src/test/run-pass/cfg-macros-foo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -13,7 +13,6 @@\n // check that cfg correctly chooses between the macro impls (see also\n // cfg-macros-notfoo.rs)\n \n-// pretty-expanded FIXME #23616\n \n #[cfg(foo)]\n #[macro_use]"}, {"sha": "4e1b833add017b7c56ee39d80a7929aeb0b958aa", "filename": "src/test/run-pass/cfg-macros-notfoo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -13,7 +13,6 @@\n // check that cfg correctly chooses between the macro impls (see also\n // cfg-macros-foo.rs)\n \n-// pretty-expanded FIXME #23616\n \n #[cfg(foo)]\n #[macro_use]"}, {"sha": "1b692d8bd51f4d8eadffd75e2143bb1594074788", "filename": "src/test/run-pass/cfgs-on-items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcfgs-on-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcfgs-on-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfgs-on-items.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n // compile-flags: --cfg fooA --cfg fooB\n \n // fooA AND !bar\n-// pretty-expanded FIXME #23616\n \n #[cfg(all(fooA, not(bar)))]\n fn foo1() -> isize { 1 }"}, {"sha": "d63512f8066cbbe07449f2edef7b83327cc60fa0", "filename": "src/test/run-pass/char.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchar.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let c: char = 'x';"}, {"sha": "5959dd4c389c85de57a340ce90ace8d7c0663be9", "filename": "src/test/run-pass/check-static-mut-slices.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcheck-static-mut-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcheck-static-mut-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-mut-slices.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Checks that mutable static items can have mutable slices\n \n-// pretty-expanded FIXME #23616\n \n static mut TEST: &'static mut [isize] = &mut [1];\n "}, {"sha": "8408597f3540995a5cd19bd9d8c8e52c2659f869", "filename": "src/test/run-pass/check-static-slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n // Check that the various ways of getting to a reference to a vec (both sized\n // and unsized) work properly.\n \n-// pretty-expanded FIXME #23616\n \n const aa: [isize; 3] = [1, 2, 3];\n const ab: &'static [isize; 3] = &aa;"}, {"sha": "6783609b256c98e80138564b6820a3f451ab41cf", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n /* Test that exporting a class also exports its\n    public fields and methods */"}, {"sha": "6ab158dc37ca5d0d0c4b474932422999f97985df", "filename": "src/test/run-pass/class-method-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:cci_class_2.rs\n-// pretty-expanded FIXME #23616\n \n extern crate cci_class_2;\n use cci_class_2::kitties::cat;"}, {"sha": "666571007595c066e1da7007d49ddeaeb1c93d7a", "filename": "src/test/run-pass/class-methods-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:cci_class_3.rs\n-// pretty-expanded FIXME #23616\n \n extern crate cci_class_3;\n use cci_class_3::kitties::cat;"}, {"sha": "93af906bd5a6c47e188e616485263c121de2ec8a", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct cat {\n   meows : usize,"}, {"sha": "4d247bde190de29f7bcf8afd920b37de3fd718a9", "filename": "src/test/run-pass/class-poly-methods-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:cci_class_6.rs\n-// pretty-expanded FIXME #23616\n \n extern crate cci_class_6;\n use cci_class_6::kitties::cat;"}, {"sha": "2528ff5128f9c874d9b19aa5bb977616889946bc", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n struct cat<U> {\n     info : Vec<U> ,"}, {"sha": "3d99aa1ef1d08984142ac5bf6012e2e7b37b9218", "filename": "src/test/run-pass/classes-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:cci_class_4.rs\n-// pretty-expanded FIXME #23616\n \n extern crate cci_class_4;\n use cci_class_4::kitties::cat;"}, {"sha": "db15001c62f1931d8ac3a7f43ea17709e10fab18", "filename": "src/test/run-pass/classes-simple-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:cci_class.rs\n-// pretty-expanded FIXME #23616\n \n extern crate cci_class;\n use cci_class::kitties::cat;"}, {"sha": "64ec2ea7e71aea8b335125c3726e786db6aad117", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct cat {\n     meows : usize,"}, {"sha": "c475fb2cff945429280e445197f8eb6842bec810", "filename": "src/test/run-pass/classes-simple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct cat {\n     meows : usize,"}, {"sha": "d813a6d8102360e8ea6ae31a9e0bffa251cf59ef", "filename": "src/test/run-pass/cleanup-rvalue-during-if-and-while.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -12,7 +12,6 @@\n // This test verifies that temporaries created for `while`'s and `if`\n // conditions are dropped after the condition is evaluated.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "344ea63c7c74da6d474372fc8320b667e1a4e659", "filename": "src/test/run-pass/cleanup-rvalue-temp-during-incomplete-alloc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -24,7 +24,6 @@\n // It's unclear how likely such a bug is to recur, but it seems like a\n // scenario worth testing.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "630a510ca651ed1fe79c3d431f9b2fa75989cc80", "filename": "src/test/run-pass/closure-inference.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn foo(i: isize) -> isize { i + 1 }\n "}, {"sha": "2f24cd4ce40432c032d5ee1490c587bd02c7c842", "filename": "src/test/run-pass/closure-inference2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test a rather underspecified example:\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let f = {|i| i};"}, {"sha": "cd3f556864e64ae2c372d74c33e2005a3d50e8db", "filename": "src/test/run-pass/cmp-default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcmp-default.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::cmp::Ordering;\n "}, {"sha": "5258ad1af5150c317b9d619af550007474355c83", "filename": "src/test/run-pass/coerce-reborrow-imm-ptr-rcvr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct SpeechMaker {\n     speeches: usize"}, {"sha": "4e116ae14669146a7714349849e13d2eb1029407", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-rcvr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn bar(v: &mut [usize]) -> Vec<usize> {\n     v.to_vec()"}, {"sha": "ce0bc33905fe5c3f355c373669bbae4b2a600f09", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn reverse(v: &mut [usize]) {\n     v.reverse();"}, {"sha": "066b33e007b89e61ffee78cc0a10851339c2bddf", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-rcvr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn bar(v: &mut [usize]) {\n     v.reverse();"}, {"sha": "228a73326e1170fe128c92a4608af95f54221985", "filename": "src/test/run-pass/compare-generic-enums.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcompare-generic-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcompare-generic-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcompare-generic-enums.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n type an_int = isize;\n "}, {"sha": "9a2390a9e68d3e7946dd725f40510bcd153d2f74", "filename": "src/test/run-pass/concat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconcat.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     assert_eq!(format!(concat!(\"foo\", \"bar\", \"{}\"), \"baz\"), \"foobarbaz\".to_string());"}, {"sha": "5891d9f1aa019aa8ae4be68647a2b411fd7689e5", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // Crate use statements\n-// pretty-expanded FIXME #23616\n \n #[cfg(bogus)]\n use flippity;"}, {"sha": "c6beb5ba358750e25b1a32e4a7675755dfeaaceb", "filename": "src/test/run-pass/conditional-debug-macro-off.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n // compile-flags: -C debug-assertions=no\n // exec-env:RUST_LOG=conditional-debug-macro-off=4\n \n-// pretty-expanded FIXME #23616\n \n #![feature(rustc_private)]\n "}, {"sha": "69173e35e2ce38aa9a3f8a5269437e8617b61e57", "filename": "src/test/run-pass/const-autoderef.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n static A: [u8; 1] = ['h' as u8];\n static B: u8 = (&A)[0];"}, {"sha": "125aefe036dc621307a475926ac2997d7dd97483", "filename": "src/test/run-pass/const-big-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum Foo {\n     Bar(u32),"}, {"sha": "4b32ee352311d1d50c3eefa7c585a2e1b4d32807", "filename": "src/test/run-pass/const-binops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-binops.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n macro_rules! assert_approx_eq {\n     ($a:expr, $b:expr) => ({"}, {"sha": "6fa6feffbfa005dacb526f92e73e2183c0852097", "filename": "src/test/run-pass/const-block-cross-crate-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-block-cross-crate-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-block-cross-crate-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block-cross-crate-fn.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:cci_const_block.rs\n \n-// pretty-expanded FIXME #23616\n \n extern crate cci_const_block;\n "}, {"sha": "8a4b220a3763c3401d2c335e4af1a32e739508a7", "filename": "src/test/run-pass/const-block-item-macro-codegen.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-block-item-macro-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-block-item-macro-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block-item-macro-codegen.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n // General test that function items in static blocks\n // can be generated with a macro.\n \n-// pretty-expanded FIXME #23616\n \n struct MyType {\n     desc: &'static str,"}, {"sha": "b616b1f610325e6a97faa828dc61b44ffe549c07", "filename": "src/test/run-pass/const-block-item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-block-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-block-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block-item.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n mod foo {\n     pub trait Value {"}, {"sha": "e56d01d7ba8ce205edeef9172e941a57eef50dfc", "filename": "src/test/run-pass/const-block.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(dead_code)]\n #![allow(unused_unsafe)]"}, {"sha": "e7674f893d37738843a83417c03ab81de5956945", "filename": "src/test/run-pass/const-cast-ptr-int.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::ptr;\n "}, {"sha": "411df2b3e0759d7a8c59234d2e02e8c07f483c3c", "filename": "src/test/run-pass/const-cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(libc)]\n "}, {"sha": "b28017b85ad612218047d807548f5bf2d0ea51f2", "filename": "src/test/run-pass/const-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-const.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n const a: isize = 1;\n const b: isize = a + 2;"}, {"sha": "0d9d0e0e0aa73bd550d2639bbc4d3f5643113361", "filename": "src/test/run-pass/const-contents.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-contents.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Issue #570\n \n-// pretty-expanded FIXME #23616\n \n static lsl : isize = 1 << 2;\n static add : isize = 1 + 2;"}, {"sha": "d66c335db2e8785920def01c97a73815ef3be31b", "filename": "src/test/run-pass/const-cross-crate-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:cci_const.rs\n \n-// pretty-expanded FIXME #23616\n \n extern crate cci_const;\n static foo: &'static str = cci_const::foopy;"}, {"sha": "bbe31ceed33cf64992dedf23687565e45e9cfa2f", "filename": "src/test/run-pass/const-cross-crate-extern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:cci_const.rs\n \n-// pretty-expanded FIXME #23616\n \n extern crate cci_const;\n use cci_const::bar;"}, {"sha": "f5407f0c815235d30b54814edd2d2208c0a7e396", "filename": "src/test/run-pass/const-deref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-deref.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n const C: &'static isize = &1000;\n static D: isize = *C;"}, {"sha": "57470c4a67e263fc11c7ec7ce57c805aa2db5a5d", "filename": "src/test/run-pass/const-enum-byref-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V, VV(isize) }\n static C: E = E::V;"}, {"sha": "e3f1d5d35320c3847d70ad16205223bf4aeee7a7", "filename": "src/test/run-pass/const-enum-byref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V, VV(isize) }\n static C: E = E::V;"}, {"sha": "38f21f7e9596245bd560402aff03502831c71f28", "filename": "src/test/run-pass/const-enum-cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum A { A1, A2 }\n enum B { B1=0, B2=2 }"}, {"sha": "40a1c99e987db5cfd855c38a305c7617438436c0", "filename": "src/test/run-pass/const-enum-ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V0, V1(isize) }\n static C: &'static E = &E::V0;"}, {"sha": "46c4f82eb98e1c5c54c081a5ca04110ec93dcdbe", "filename": "src/test/run-pass/const-enum-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-struct.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V16(u16), V32(u32) }\n struct S { a: E, b: u16, c: u16 }"}, {"sha": "e356ecb385b98a4225fa4f6f8bbf9016f7085534", "filename": "src/test/run-pass/const-enum-struct2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-struct2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-struct2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-struct2.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V0, V16(u16) }\n struct S { a: E, b: u16, c: u16 }"}, {"sha": "6c8786dee6782b7feca49254121a56943b4aa1c3", "filename": "src/test/run-pass/const-enum-structlike.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E {\n     S0 { s: String },"}, {"sha": "476defaa524a08096a2cb0332cc985ff66e4f072", "filename": "src/test/run-pass/const-enum-tuple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuple.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V16(u16), V32(u32) }\n static C: (E, u16, u16) = (E::V16(0xDEAD), 0x600D, 0xBAD);"}, {"sha": "61043ef75a4c554417b210c12f8aed9b0f7a9eaa", "filename": "src/test/run-pass/const-enum-tuple2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-tuple2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-tuple2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuple2.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V0, V16(u16) }\n static C: (E, u16, u16) = (E::V0, 0x600D, 0xBAD);"}, {"sha": "f574508522b266c4148dae2fd05e2b5ae9b14d93", "filename": "src/test/run-pass/const-enum-tuplestruct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V16(u16), V32(u32) }\n struct S(E, u16, u16);"}, {"sha": "88cfc0dec702856dc8387fa93e03800a454fe463", "filename": "src/test/run-pass/const-enum-tuplestruct2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct2.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V0, V16(u16) }\n struct S(E, u16, u16);"}, {"sha": "2f1cd8dbf9b1213cd3f2fd68ec7a2c48f51050f6", "filename": "src/test/run-pass/const-enum-vec-index.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V1(isize), V0 }\n const C: &'static [E] = &[E::V0, E::V1(0xDEADBEE)];"}, {"sha": "de94527a604867dd7ed87932f56f852e2f4a8c9a", "filename": "src/test/run-pass/const-enum-vec-ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V1(isize), V0 }\n static C: &'static [E] = &[E::V0, E::V1(0xDEADBEE), E::V0];"}, {"sha": "8d43a76bc28c314deaa1ea8ea82634d3f425fcf0", "filename": "src/test/run-pass/const-enum-vector.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V1(isize), V0 }\n static C: [E; 3] = [E::V0, E::V1(0xDEADBEE), E::V0];"}, {"sha": "214b0400e8631056570d1f6bc518b1cd664c9a88", "filename": "src/test/run-pass/const-extern-function.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n extern fn foopy() {}\n "}, {"sha": "85c92dda434a64ccb65891d23f5a15ad978e1645", "filename": "src/test/run-pass/const-fn-val.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn foo() -> isize {\n     return 0xca7f000d;"}, {"sha": "7f26a9773396d7a76bb3273f08b93b4dfe178b35", "filename": "src/test/run-pass/const-negative.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-negative.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Issue #358\n \n-// pretty-expanded FIXME #23616\n \n static toplevel_mod: isize = -1;\n "}, {"sha": "b3f6549ef0167c1c5a5a4efe0e51c788fd616c33", "filename": "src/test/run-pass/const-nullary-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum Foo {\n     Bar,"}, {"sha": "b1b7f782cd04a143fcbc37239b3ada310fbf6485", "filename": "src/test/run-pass/const-nullary-univariant-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #[derive(Copy, Clone)]\n enum Foo {"}, {"sha": "9a1f747ce59fbb0cc8ddafcaaa67fbc7ff3a8277", "filename": "src/test/run-pass/const-region-ptrs-noncopy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n type Big = [u64; 8];\n struct Pair<'a> { a: isize, b: &'a Big }"}, {"sha": "1cdb98a8bc05b36a65045594eca0e4117a1b1adc", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::{str, string};\n "}, {"sha": "ddc50fc6646f2e12c04fd1904f6695dc62aa83c3", "filename": "src/test/run-pass/const-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct Bar(isize, isize);\n "}, {"sha": "36e6e160a3bd298229c672c94f5c0aa2d751766d", "filename": "src/test/run-pass/consts-in-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n const FOO: isize = 10;\n const BAR: isize = 3;"}, {"sha": "7eae9017420d7a9f089d287a39e027643be70042", "filename": "src/test/run-pass/cross-crate-newtype-struct-pat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcross-crate-newtype-struct-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fcross-crate-newtype-struct-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcross-crate-newtype-struct-pat.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:newtype_struct_xc.rs\n \n-// pretty-expanded FIXME #23616\n \n extern crate newtype_struct_xc;\n "}, {"sha": "f8e690cf29e077f996a97895b11a1dd363053f2e", "filename": "src/test/run-pass/deep.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdeep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdeep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdeep.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n fn f(x: isize) -> isize {\n     if x == 1 { return 1; } else { let y: isize = 1 + f(x - 1); return y; }"}, {"sha": "98441d7daaad74246458b4b14b28cb28be130647", "filename": "src/test/run-pass/deref-mut-on-ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test that `&mut T` implements `DerefMut<T>`\n \n-// pretty-expanded FIXME #23616\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "383c8197f94738df3946e4f5f726c587d7069ebd", "filename": "src/test/run-pass/deref-on-ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test that `&T` and `&mut T` implement `Deref<T>`\n \n-// pretty-expanded FIXME #23616\n \n use std::ops::Deref;\n "}, {"sha": "b84d78b4f4fbdde76885fc30da909978d5246809", "filename": "src/test/run-pass/deref-rc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderef-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderef-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-rc.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::rc::Rc;\n "}, {"sha": "b1cd1877a7667101e40d76165de5f2f76a70f196", "filename": "src/test/run-pass/deriving-cmp-generic-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // no-pretty-expanded FIXME #15189\n \n-// pretty-expanded FIXME #23616\n \n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n enum E<T> {"}, {"sha": "14f7862ef21fc899cd0369f2270de965e76ef110", "filename": "src/test/run-pass/deriving-cmp-generic-struct-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // no-pretty-expanded FIXME #15189\n \n-// pretty-expanded FIXME #23616\n \n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n enum ES<T> {"}, {"sha": "5c7d806f519d17ed129fb6f8807e1350a9fe2b0a", "filename": "src/test/run-pass/deriving-cmp-generic-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // no-pretty-expanded FIXME #15189\n \n-// pretty-expanded FIXME #23616\n \n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n struct S<T> {"}, {"sha": "b7bfb91b278a0bb8c6f05c0638b89faa07b1778b", "filename": "src/test/run-pass/deriving-cmp-generic-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // no-pretty-expanded FIXME #15189\n \n-// pretty-expanded FIXME #23616\n \n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n struct TS<T>(T,T);"}, {"sha": "e22e4767d521fd78fa9437d1e4cf980c7549f9b9", "filename": "src/test/run-pass/deriving-cmp-shortcircuit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -12,7 +12,6 @@\n // where possible, by having a type that panics when compared as the\n // second element, so this passes iff the instances shortcircuit.\n \n-// pretty-expanded FIXME #23616\n \n use std::cmp::Ordering;\n "}, {"sha": "dc31e71aad8730b484c1e2005873d1b7de08fd9b", "filename": "src/test/run-pass/deriving-default-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "db5a1f3f000a87e4946d432efd7b8f80f247ff9e", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "7cc59edfcab0e98b9a86b8e16ba14740779de1ce", "filename": "src/test/run-pass/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n // This briefly tests the capability of `Cell` and `RefCell` to implement the\n // `Encodable` and `Decodable` traits via `#[derive(Encodable, Decodable)]`\n \n-// pretty-expanded FIXME #23616\n \n #![feature(rustc_private)]\n "}, {"sha": "287750e5051c7b5a219e1d4c12f326d548600892", "filename": "src/test/run-pass/deriving-hash.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-hash.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(hash)]\n "}, {"sha": "bc11b55d3105f3029fa9a054a4a77047cb5f3c6e", "filename": "src/test/run-pass/deriving-rand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-rand.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(rand)]\n "}, {"sha": "0d24f0bd0d7b32cc1ae645a633e87c6ad8a070d3", "filename": "src/test/run-pass/destructure-array-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdestructure-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdestructure-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdestructure-array-1.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n // Ensure that we can do a destructuring bind of a fixed-size array,\n // even when the element type has a destructor.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(slice_patterns)]\n "}, {"sha": "0816e258e84a003d603d70651e667b75700eb12d", "filename": "src/test/run-pass/die-macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdie-macro.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Just testing that panic!() type checks in statement or expr\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unreachable_code)]\n "}, {"sha": "b6cae71df865da0ecfb9661f868eba53c03b4554", "filename": "src/test/run-pass/div-mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdiv-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdiv-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiv-mod.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let x: isize = 15;"}, {"sha": "33d5c72772c579e9597ee650298d9569967b1412", "filename": "src/test/run-pass/drop-struct-as-object.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n // Test that destructor on a struct runs successfully after the struct\n // is boxed and converted to an object.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "9dd458344cb5a3399e219f9ff74bb84fc76e5259", "filename": "src/test/run-pass/drop-with-type-ascription-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-1.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(str_words)]\n "}, {"sha": "cb3712dea322455e674976b9f95fd261bf126c1a", "filename": "src/test/run-pass/drop-with-type-ascription-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-2.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(collections)]\n "}, {"sha": "6ccf6c2fd644d958b5a1b05229a736416dfe7aa0", "filename": "src/test/run-pass/dropck_tarena_sound_drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -16,7 +16,6 @@\n // shows a similar setup, but restricts `f` so that the struct `C<'a>`\n // is force-fed a lifetime equal to that of the borrowed arena.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unstable)]\n #![feature(unsafe_destructor, rustc_private)]"}, {"sha": "b031c82a07f3dec35d9d9f147dda252ada8fc9e2", "filename": "src/test/run-pass/dst-deref-mut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n-// pretty-expanded FIXME #23616\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "c4666d05fbfe36758b7fccb867c6764aa34a7ff2", "filename": "src/test/run-pass/dst-deref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n-// pretty-expanded FIXME #23616\n \n use std::ops::Deref;\n "}, {"sha": "34a187fa6f2d2ca66a5301c2858b2366fba8cfe4", "filename": "src/test/run-pass/dst-index.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-index.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -11,7 +11,6 @@\n // Test that overloaded index expressions with DST result types\n // work and don't ICE.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(core)]\n "}, {"sha": "d899de9164071f23adfb7b3b4a500810fa4a3536", "filename": "src/test/run-pass/dst-raw.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-raw.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test DST raw pointers\n \n-// pretty-expanded FIXME #23616\n \n trait Trait {\n     fn foo(&self) -> isize;"}, {"sha": "d440fb2a216ecf93131bb254a520b1b98f90d252", "filename": "src/test/run-pass/dst-struct-sole.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // As dst-struct.rs, but the unsized field is the only field in the struct.\n \n-// pretty-expanded FIXME #23616\n \n struct Fat<T: ?Sized> {\n     ptr: T"}, {"sha": "8b6db23026b8a9cf3e36c41c7ed0425bef24aade", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "4d2b50c08e2f508e2b03ed7e1426a6586e0e4e9b", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "afc1d200b274b3db37fd9c17c5e1539663d1d1ea", "filename": "src/test/run-pass/else-if.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Felse-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Felse-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Felse-if.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     if 1 == 2 {"}, {"sha": "af6e321e40aa65ee59dcb90e8acd4aea14575453", "filename": "src/test/run-pass/empty-allocation-non-null.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     assert!(Some(Box::new(())).is_some());"}, {"sha": "827894f8f32c91084930842a74634dcedc29eeeb", "filename": "src/test/run-pass/enum-alignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-alignment.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::mem;\n "}, {"sha": "8be3634c88addb6dc6a3e5027e9903171a65b927", "filename": "src/test/run-pass/enum-clike-ffi-as-int.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-clike-ffi-as-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-clike-ffi-as-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-clike-ffi-as-int.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n /*!\n  * C-like enums have to be represented as LLVM ints, not wrapped in a"}, {"sha": "1ff6370136076e76e800ce68c773a6f9ebdabc95", "filename": "src/test/run-pass/enum-discr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discr.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum Animal {\n     Cat = 0,"}, {"sha": "99e44735d0f03a11a25a9517d08c8480bdb089b6", "filename": "src/test/run-pass/enum-discrim-autosizing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-discrim-autosizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-discrim-autosizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-autosizing.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::mem::size_of;\n "}, {"sha": "edad5cc1652da9253695ce3aad854faff0db28be", "filename": "src/test/run-pass/enum-discrim-manual-sizing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-discrim-manual-sizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-discrim-manual-sizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-manual-sizing.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::mem::size_of;\n "}, {"sha": "cf66725178011f4521cdbbe1c96990785d079471", "filename": "src/test/run-pass/enum-disr-val-pretty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // pp-exact\n \n-// pretty-expanded FIXME #23616\n \n enum color { red = 1, green, blue, imaginary = -1, }\n "}, {"sha": "499d131947a38027d210bf4df73653aa7ac4563a", "filename": "src/test/run-pass/enum-null-pointer-opt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(core)]\n "}, {"sha": "1342c4e104de5bf01f16f6375a90dfe87068ac65", "filename": "src/test/run-pass/enum-nullable-const-null-with-fields.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-nullable-const-null-with-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-nullable-const-null-with-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-const-null-with-fields.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::result::Result;\n use std::result::Result::Ok;"}, {"sha": "c8a1047cfa8180987a8da946a54673bc35405f23", "filename": "src/test/run-pass/enum-nullable-simplifycfg-misopt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "efe72729817e8fb9da9b31eb0ebebf23a3d26903", "filename": "src/test/run-pass/env-home-dir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(path)]\n "}, {"sha": "d86f63c9cb91daff12bd2d29017b1c066b3d650f", "filename": "src/test/run-pass/env-vars.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenv-vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fenv-vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-vars.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::env::*;\n "}, {"sha": "bf8b089a830c2c662eb2d9dcbe253950679b704e", "filename": "src/test/run-pass/eq-multidispatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #[derive(PartialEq)]\n struct Bar;"}, {"sha": "4dfb15418405dd8ecdf5405479fb6112adf26ecd", "filename": "src/test/run-pass/estr-uniq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Festr-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Festr-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-uniq.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(dead_assignment)]\n "}, {"sha": "d17056e6d799d3c6fd3c39a69130cb81bca4f477", "filename": "src/test/run-pass/exec-env.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexec-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexec-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexec-env.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // exec-env:TEST_EXEC_ENV=22\n \n-// pretty-expanded FIXME #23616\n \n use std::env;\n "}, {"sha": "1b50d3028b1e254e6870e5607d08593691008cd9", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "4021ae89e3629fc7bea5585ab7863f7bacfcb96c", "filename": "src/test/run-pass/explicit-self-objects-uniq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "d2a0d60eb661447ab42d0aa6ddabaecbd53ad4d1", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "67e41aad6971b63f4d217071bff2fa83afe2b5ad", "filename": "src/test/run-pass/expr-block-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n fn test_fn() {\n     fn ten() -> isize { return 10; }"}, {"sha": "5477a9227aa1d30d55f828fccb2d8b237074ef63", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "8795962bebdd8be067054dbc610a447152aa6d60", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn test_generic<T: Clone, F>(expected: T, eq: F) where F: FnOnce(T, T) -> bool {\n     let actual: T = { expected.clone() };"}, {"sha": "d9b4c95bc24d19a2944cb84fc7a407f80181eeeb", "filename": "src/test/run-pass/expr-block-slot.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-block-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-block-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-slot.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Regression test for issue #377\n \n-// pretty-expanded FIXME #23616\n \n struct A { a: isize }\n struct V { v: isize }"}, {"sha": "7ad024186015b70c600cf7ddcb76a45ea5078d80", "filename": "src/test/run-pass/expr-block-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "38be041938b3c3875762b31207f059c7a5823748", "filename": "src/test/run-pass/expr-block.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -13,7 +13,6 @@\n \n \n // Tests for standalone blocks as expressions\n-// pretty-expanded FIXME #23616\n \n fn test_basic() { let rs: bool = { true }; assert!((rs)); }\n "}, {"sha": "99e74a6b8564dc0e62629dd7b58c515f65fe5c0c", "filename": "src/test/run-pass/expr-copy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-copy.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn f(arg: &mut A) {\n     arg.a = 100;"}, {"sha": "aeca388d317b623fe74be0ec6af82783920cb7ff", "filename": "src/test/run-pass/expr-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-fn.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn test_int() {\n     fn f() -> isize { 10 }"}, {"sha": "94c6b70bb62f32cd867832895cfbddfb6c8176cd", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn test_generic<T, F>(expected: T, not_expected: T, eq: F) where\n     T: Clone,"}, {"sha": "43110533b6dc6919e454d9b805aa296f10e8c211", "filename": "src/test/run-pass/expr-if-panic-all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-if-panic-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-if-panic-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-panic-all.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // When all branches of an if expression result in panic, the entire if\n // expression results in panic.\n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let _x = if true {"}, {"sha": "c7f10b66ca3c77489fee58d3e755816c27f53970", "filename": "src/test/run-pass/expr-if-panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-if-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-if-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-panic.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn test_if_panic() {\n     let x = if false { panic!() } else { 10 };"}, {"sha": "12000fd54e7e73365a33bf20c1b1b6a3e62200bc", "filename": "src/test/run-pass/expr-if-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "e8458e320113bf366ad938f5f2b47de1cbe78444", "filename": "src/test/run-pass/expr-if.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -13,7 +13,6 @@\n \n \n // Tests for if as expressions\n-// pretty-expanded FIXME #23616\n \n fn test_if() { let rs: bool = if true { true } else { false }; assert!((rs)); }\n "}, {"sha": "738fcecb2e0db96f00fe3d652cdea1b4903280e8", "filename": "src/test/run-pass/expr-match-generic-unique1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "88ea2415241093016478d137fc0522a75758326e", "filename": "src/test/run-pass/expr-match-generic-unique2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "509106289d079859e1db249748439d900d4c1d00", "filename": "src/test/run-pass/expr-match-generic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-match-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-match-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n type compare<T> = extern \"Rust\" fn(T, T) -> bool;\n "}, {"sha": "e712d552a810779fc2ae98f019fb11e8189f500a", "filename": "src/test/run-pass/expr-match-panic-all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-match-panic-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-match-panic-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-panic-all.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -13,7 +13,6 @@\n \n // When all branches of a match expression result in panic, the entire\n // match expression results in panic.\n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let _x ="}, {"sha": "89dc7b09c7b15a5ace7e683164f571e8c7e62d5c", "filename": "src/test/run-pass/expr-match-panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-match-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-match-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-panic.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn test_simple() {\n     let r = match true { true => { true } false => { panic!() } };"}, {"sha": "e752c20a5124251cf240f6731298266d8a99059e", "filename": "src/test/run-pass/expr-match-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "580ee52ed364572d6dc5b25db6cc23d35a0c53c2", "filename": "src/test/run-pass/expr-match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexpr-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -13,7 +13,6 @@\n \n \n // Tests for using match as an expression\n-// pretty-expanded FIXME #23616\n \n fn test_basic() {\n     let mut rs: bool = match true { true => { true } false => { false } };"}, {"sha": "90ca31e80be3a49e4c055112b70e6f1214435b1e", "filename": "src/test/run-pass/ext-expand-inner-exprs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fext-expand-inner-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fext-expand-inner-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fext-expand-inner-exprs.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n static FOO : &'static str = concat!(concat!(\"hel\", \"lo\"), \"world\");\n "}, {"sha": "3474e2eefb7c7cba8933faafe3b538914125c542", "filename": "src/test/run-pass/exterior.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fexterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexterior.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n use std::cell::Cell;\n "}, {"sha": "ec6b6c8d39fad9625e6e75d8d32f033164a79ff0", "filename": "src/test/run-pass/extern-call-direct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-call-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-call-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-direct.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test direct calls to extern fns.\n \n-// pretty-expanded FIXME #23616\n \n extern fn f(x: usize) -> usize { x * 2 }\n "}, {"sha": "6535ae2fca946793fd36ccad8b21caaf4d9ad3a4", "filename": "src/test/run-pass/extern-compare-with-return-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Tests that we can compare various kinds of extern fn signatures.\n \n-// pretty-expanded FIXME #23616\n \n extern fn voidret1() {}\n extern fn voidret2() {}"}, {"sha": "28a076113d1f093d257e1e86a1ab8014013fa45f", "filename": "src/test/run-pass/extern-methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-methods.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(core)]\n "}, {"sha": "e75aa2d72c925d8a2bd0bc26e26d526d60ba220f", "filename": "src/test/run-pass/extern-pass-char.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test a function that takes/returns a u8.\n \n-// pretty-expanded FIXME #23616\n \n #[link(name = \"rust_test_helpers\")]\n extern {"}, {"sha": "e92f9b6a1a172302565db4664e3e82c0c77a1aca", "filename": "src/test/run-pass/extern-pass-double.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #[link(name = \"rust_test_helpers\")]\n extern {"}, {"sha": "0753ea1bcfeada174d7e2f3176f67bd533440ae4", "filename": "src/test/run-pass/extern-pass-u32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test a function that takes/returns a u32.\n \n-// pretty-expanded FIXME #23616\n \n #[link(name = \"rust_test_helpers\")]\n extern {"}, {"sha": "89faa3bb47141bac73ec00290c7616cd646d4d64", "filename": "src/test/run-pass/extern-pass-u64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test a call to a function that takes/returns a u64.\n \n-// pretty-expanded FIXME #23616\n \n #[link(name = \"rust_test_helpers\")]\n extern {"}, {"sha": "3c58646e0c302aec4548d17705002fc7111b1fd4", "filename": "src/test/run-pass/extern-return-TwoU16s.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub struct TwoU16s {\n     one: u16, two: u16"}, {"sha": "0eb6be2d687a496d6079f38484261b8d0c3601cd", "filename": "src/test/run-pass/extern-return-TwoU32s.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub struct TwoU32s {\n     one: u32, two: u32"}, {"sha": "d5eab86351e10a1c5a8b839cdcf3e84c3ccd7277", "filename": "src/test/run-pass/extern-return-TwoU64s.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub struct TwoU64s {\n     one: u64, two: u64"}, {"sha": "d8f476bcd0cbb8cf1da726427b8096ea9e367f9f", "filename": "src/test/run-pass/extern-return-TwoU8s.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub struct TwoU8s {\n     one: u8, two: u8"}, {"sha": "7ef87b9409d51c017db502464821449f0018af4c", "filename": "src/test/run-pass/extern-take-value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-take-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextern-take-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-take-value.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n extern fn f() {\n }"}, {"sha": "352f68da9854fcdf11049b4d90bb5d5e6693fa4d", "filename": "src/test/run-pass/extoption_env-not-defined.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextoption_env-not-defined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fextoption_env-not-defined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextoption_env-not-defined.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     assert!(option_env!(\"__HOPEFULLY_DOESNT_EXIST__\").is_none());"}, {"sha": "624167db36da354f24639f47b5426bad1d2b8490", "filename": "src/test/run-pass/field-destruction-order.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffield-destruction-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffield-destruction-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffield-destruction-order.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -21,7 +21,6 @@\n // declarations, but we currently run them top-to-bottom. I don't think the\n // order really matters that much as long as we define what it is.\n \n-// pretty-expanded FIXME #23616\n \n struct A;\n struct B;"}, {"sha": "eefd94475358c386832bec5e2b3912625fcd9f1d", "filename": "src/test/run-pass/fixed_length_copy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffixed_length_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffixed_length_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed_length_copy.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let arr = [1,2,3];"}, {"sha": "e9f6e0f51b4ec6dacc7b2b6342c74db89a0f8bae", "filename": "src/test/run-pass/float2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffloat2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffloat2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat2.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let a = 1.5e6f64;"}, {"sha": "d133f3463a3f2accba63150ef73250654a542ab3", "filename": "src/test/run-pass/floatlits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffloatlits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffloatlits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloatlits.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let f = 4.999999999999f64;"}, {"sha": "2d3d4cbffd00d3eb5562a1e2d21678fa2d5509a9", "filename": "src/test/run-pass/fn-bare-assign.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn f(i: isize, called: &mut bool) {\n     assert_eq!(i, 10);"}, {"sha": "3ed4f103af081644f3493d2f82b7858af4b60c4b", "filename": "src/test/run-pass/fn-bare-size.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::mem;\n "}, {"sha": "e6ee77cb62bb6d85cc7d5912c1a0cae8d9fd9838", "filename": "src/test/run-pass/fn-bare-spawn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // This is what the signature to spawn should look like with bare functions\n \n-// pretty-expanded FIXME #23616\n \n fn spawn<T:Send>(val: T, f: fn(T)) {\n     f(val);"}, {"sha": "9a8a8d4782ed583f6fff8aaefbdb01a2f22db3f5", "filename": "src/test/run-pass/fn-item-type-cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffn-item-type-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffn-item-type-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-item-type-cast.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test explicit coercions from a fn item type to a fn pointer type.\n \n-// pretty-expanded FIXME #23616\n \n fn foo(x: isize) -> isize { x * 2 }\n fn bar(x: isize) -> isize { x * 4 }"}, {"sha": "2e9607602fd627edc2d82ca79800dca39c3d72b2", "filename": "src/test/run-pass/fn-pattern-expected-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let f = |(x, y): (isize, isize)| {"}, {"sha": "963d34a2d2fbdd70239463b40826e1983d6af548", "filename": "src/test/run-pass/for-destruct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffor-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffor-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-destruct.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct Pair { x: isize, y: isize }\n "}, {"sha": "411183e4f74a7a23c031527b6ffce08f2f9d523a", "filename": "src/test/run-pass/for-loop-goofiness.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffor-loop-goofiness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffor-loop-goofiness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-goofiness.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum BogusOption<T> {\n     None,"}, {"sha": "7efd15f222e3717af4cc3fc80f99c101087a2da1", "filename": "src/test/run-pass/for-loop-into-iterator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffor-loop-into-iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffor-loop-into-iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-into-iterator.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -10,7 +10,6 @@\n \n // Test that for loops can do what RFC #235 claims\n \n-// pretty-expanded FIXME #23616\n \n fn main() {\n     let mut v = vec![1];"}, {"sha": "001ca1a02f632ad0311e9c37df9737d04a93c8ff", "filename": "src/test/run-pass/for-loop-panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffor-loop-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Ffor-loop-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-panic.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,6 +9,5 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() { let x: Vec<isize> = Vec::new(); for _ in &x { panic!(\"moop\"); } }"}, {"sha": "bfc0d6cf9d542729ff573db0751746f6e8fb3e12", "filename": "src/test/run-pass/foreach-external-iterators-break.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let x = [1; 100];"}, {"sha": "cedb9601431462df10d76c27ce9b726e3a5d5d4d", "filename": "src/test/run-pass/foreach-external-iterators-hashmap-break-restart.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(collections)]\n "}, {"sha": "79304fce5c166d1defa8369431130610ace37db2", "filename": "src/test/run-pass/foreach-external-iterators-hashmap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(collections)]\n "}, {"sha": "7248537d6a1b6263742a7185473f3204b316cb34", "filename": "src/test/run-pass/foreach-external-iterators-loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let x = [1; 100];"}, {"sha": "87aa3d84003c527d7f751605889264d1871db977", "filename": "src/test/run-pass/foreach-external-iterators-nested.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let x = [1; 100];"}, {"sha": "d1fe98f5431f751d7b8f3b93dd36725f49c202e4", "filename": "src/test/run-pass/foreach-external-iterators.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let x = [1; 100];"}, {"sha": "60068185f5a524f37dac0a4f7224f9400b148bbd", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn two<F>(mut it: F) where F: FnMut(isize) { it(0); it(1); }\n "}, {"sha": "d3d872620c38b9a7d2bf224b0ff9c486d4cfbe1e", "filename": "src/test/run-pass/foreign-fn-with-byval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #[derive(Copy, Clone)]\n pub struct S {"}, {"sha": "9bbd8cdb11d884de0ac3bf9e1ea91e2c74ff9002", "filename": "src/test/run-pass/format-nan.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fformat-nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fformat-nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-nan.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     use std::f64;"}, {"sha": "0f16dfa1e8f15753d9202e7bd0a98e33950a5e59", "filename": "src/test/run-pass/format-ref-cell.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fformat-ref-cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fc543866c2c48b3b1a32e9d55a4eb77d1dee66/src%2Ftest%2Frun-pass%2Fformat-ref-cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-ref-cell.rs?ref=88fc543866c2c48b3b1a32e9d55a4eb77d1dee66", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::cell::RefCell;\n "}]}