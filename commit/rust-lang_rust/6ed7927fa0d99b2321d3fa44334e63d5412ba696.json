{"sha": "6ed7927fa0d99b2321d3fa44334e63d5412ba696", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZDc5MjdmYTBkOTliMjMyMWQzZmE0NDMzNGU2M2Q1NDEyYmE2OTY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-10-21T13:47:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-21T13:47:25Z"}, "message": "Rollup merge of #45419 - steveklabnik:fix-commonmark-renderings, r=QuietMisdreavus\n\nFix most rendering warnings from switching to CommonMark\n\nThere's one big one lift, I'm filing a bug for it soon.\n\nr? @rust-lang/docs", "tree": {"sha": "823d9a763ba57432396794516a06c87408d451f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/823d9a763ba57432396794516a06c87408d451f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ed7927fa0d99b2321d3fa44334e63d5412ba696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed7927fa0d99b2321d3fa44334e63d5412ba696", "html_url": "https://github.com/rust-lang/rust/commit/6ed7927fa0d99b2321d3fa44334e63d5412ba696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ed7927fa0d99b2321d3fa44334e63d5412ba696/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d86c5d00a248d069abe015163261d4cff3e8cd3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d86c5d00a248d069abe015163261d4cff3e8cd3d", "html_url": "https://github.com/rust-lang/rust/commit/d86c5d00a248d069abe015163261d4cff3e8cd3d"}, {"sha": "f8f9005e57852d4775b952d3b430e458a6a414bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f9005e57852d4775b952d3b430e458a6a414bb", "html_url": "https://github.com/rust-lang/rust/commit/f8f9005e57852d4775b952d3b430e458a6a414bb"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "3a2022ad429f7ef85150138ac6e83e81c699b4a5", "filename": "src/liballoc/allocator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Fliballoc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Fliballoc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fallocator.rs?ref=6ed7927fa0d99b2321d3fa44334e63d5412ba696", "patch": "@@ -70,7 +70,7 @@ impl Layout {\n     ///\n     /// * `align` must be a power of two,\n     ///\n-    /// * `align` must not exceed 2^31 (i.e. `1 << 31`),\n+    /// * `align` must not exceed 2<sup>31</sup> (i.e. `1 << 31`),\n     ///\n     /// * `size`, when rounded up to the nearest multiple of `align`,\n     ///    must not overflow (i.e. the rounded value must be less than\n@@ -113,7 +113,7 @@ impl Layout {\n     /// # Safety\n     ///\n     /// This function is unsafe as it does not verify that `align` is\n-    /// a power-of-two that is also less than or equal to 2^31, nor\n+    /// a power-of-two that is also less than or equal to 2<sup>31</sup>, nor\n     /// that `size` aligned to `align` fits within the address space\n     /// (i.e. the `Layout::from_size_align` preconditions).\n     #[inline]\n@@ -227,7 +227,7 @@ impl Layout {\n         };\n \n         // We can assume that `self.align` is a power-of-two that does\n-        // not exceed 2^31. Furthermore, `alloc_size` has already been\n+        // not exceed 2<sup>31</sup>. Furthermore, `alloc_size` has already been\n         // rounded up to a multiple of `self.align`; therefore, the\n         // call to `Layout::from_size_align` below should never panic.\n         Some((Layout::from_size_align(alloc_size, self.align).unwrap(), padded_size))"}, {"sha": "58299d5d8361eec7f8e1240e79de2c82708d3481", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=6ed7927fa0d99b2321d3fa44334e63d5412ba696", "patch": "@@ -475,7 +475,6 @@\n //! them with the same character. For example, the `{` character is escaped with\n //! `{{` and the `}` character is escaped with `}}`.\n //!\n-//! [`format!`]: ../../macro.format.html\n //! [`usize`]: ../../std/primitive.usize.html\n //! [`isize`]: ../../std/primitive.isize.html\n //! [`i8`]: ../../std/primitive.i8.html"}, {"sha": "4e4d9b3f1e2f0585cfc9c3be3c366bb973268f27", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=6ed7927fa0d99b2321d3fa44334e63d5412ba696", "patch": "@@ -22,7 +22,7 @@ use mem;\n /// This is currently the default hashing function used by standard library\n /// (eg. `collections::HashMap` uses it by default).\n ///\n-/// See: https://131002.net/siphash/\n+/// See: <https://131002.net/siphash>\n #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n #[rustc_deprecated(since = \"1.13.0\",\n                    reason = \"use `std::collections::hash_map::DefaultHasher` instead\")]\n@@ -33,7 +33,7 @@ pub struct SipHasher13 {\n \n /// An implementation of SipHash 2-4.\n ///\n-/// See: https://131002.net/siphash/\n+/// See: <https://131002.net/siphash/>\n #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n #[rustc_deprecated(since = \"1.13.0\",\n                    reason = \"use `std::collections::hash_map::DefaultHasher` instead\")]\n@@ -44,7 +44,7 @@ pub struct SipHasher24 {\n \n /// An implementation of SipHash 2-4.\n ///\n-/// See: https://131002.net/siphash/\n+/// See: <https://131002.net/siphash/>\n ///\n /// SipHash is a general-purpose hashing function: it runs at a good\n /// speed (competitive with Spooky and City) and permits strong _keyed_"}, {"sha": "01990f61feeb3cbda9babdccf1e2f651e31f3d41", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=6ed7927fa0d99b2321d3fa44334e63d5412ba696", "patch": "@@ -551,7 +551,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// Most platforms fundamentally can't even construct such an allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n-    /// for 2^63 bytes due to page-table limitations or splitting the address space.\n+    /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory\n@@ -684,7 +684,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// Most platforms fundamentally can't even construct such an allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n-    /// for 2^63 bytes due to page-table limitations or splitting the address space.\n+    /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory\n@@ -743,7 +743,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// Most platforms fundamentally can't even construct such an allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n-    /// for 2^63 bytes due to page-table limitations or splitting the address space.\n+    /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory\n@@ -1182,7 +1182,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// Most platforms fundamentally can't even construct such an allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n-    /// for 2^63 bytes due to page-table limitations or splitting the address space.\n+    /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory\n@@ -1382,7 +1382,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// Most platforms fundamentally can't even construct such an allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n-    /// for 2^63 bytes due to page-table limitations or splitting the address space.\n+    /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory\n@@ -1441,7 +1441,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// Most platforms fundamentally can't even construct such an allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n-    /// for 2^63 bytes due to page-table limitations or splitting the address space.\n+    /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory"}, {"sha": "327deb9b419bee6c93ead3b6bf3554c152dfaace", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=6ed7927fa0d99b2321d3fa44334e63d5412ba696", "patch": "@@ -411,10 +411,12 @@ pub trait AsciiExt {\n     fn is_ascii_hexdigit(&self) -> bool { unimplemented!(); }\n \n     /// Checks if the value is an ASCII punctuation character:\n+    ///\n     /// U+0021 ... U+002F `! \" # $ % & ' ( ) * + , - . /`\n     /// U+003A ... U+0040 `: ; < = > ? @`\n-    /// U+005B ... U+0060 `[ \\\\ ] ^ _ \\``\n+    /// U+005B ... U+0060 ``[ \\\\ ] ^ _ ` ``\n     /// U+007B ... U+007E `{ | } ~`\n+    ///\n     /// For strings, true if all characters in the string are\n     /// ASCII punctuation.\n     ///"}, {"sha": "8c34660f821b71b45c20406adf5a4f7a47c1994d", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=6ed7927fa0d99b2321d3fa44334e63d5412ba696", "patch": "@@ -41,7 +41,7 @@ use sys_common::{AsInner, IntoInner, FromInner};\n /// # Creating an `OsString`\n ///\n /// **From a Rust string**: `OsString` implements\n-/// [`From`]`<`[`String`]`>`, so you can use `my_string.`[`from`] to\n+/// [`From`]`<`[`String`]`>`, so you can use `my_string.from` to\n /// create an `OsString` from a normal Rust string.\n ///\n /// **From slices:** Just like you can start with an empty Rust\n@@ -63,7 +63,6 @@ use sys_common::{AsInner, IntoInner, FromInner};\n ///\n /// [`OsStr`]: struct.OsStr.html\n /// [`From`]: ../convert/trait.From.html\n-/// [`from`]: ../convert/trait.From.html#tymethod.from\n /// [`String`]: ../string/struct.String.html\n /// [`&str`]: ../primitive.str.html\n /// [`u8`]: ../primitive.u8.html"}, {"sha": "870d11298fe3bf6be136277a1b7ad6bbdd562340", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=6ed7927fa0d99b2321d3fa44334e63d5412ba696", "patch": "@@ -168,7 +168,7 @@ impl UdpSocket {\n     /// This will return an error when the IP version of the local socket\n     /// does not match that returned from [`ToSocketAddrs`].\n     ///\n-    /// See https://github.com/rust-lang/rust/issues/34202 for more details.\n+    /// See <https://github.com/rust-lang/rust/issues/34202> for more details.\n     ///\n     /// [`ToSocketAddrs`]: ../../std/net/trait.ToSocketAddrs.html\n     ///"}, {"sha": "7c107177c64cd67a83beb6a3b35274183a9be1b0", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=6ed7927fa0d99b2321d3fa44334e63d5412ba696", "patch": "@@ -343,7 +343,7 @@ impl Command {\n     /// The search path to be used may be controlled by setting the\n     /// `PATH` environment variable on the Command,\n     /// but this has some implementation limitations on Windows\n-    /// (see https://github.com/rust-lang/rust/issues/37519).\n+    /// (see <https://github.com/rust-lang/rust/issues/37519>).\n     ///\n     /// # Examples\n     ///"}, {"sha": "24c41046f263abf462b914ee937adf453bc28707", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed7927fa0d99b2321d3fa44334e63d5412ba696/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=6ed7927fa0d99b2321d3fa44334e63d5412ba696", "patch": "@@ -32,7 +32,7 @@ pub trait FileExt {\n     /// function, it is set to the end of the read.\n     ///\n     /// Reading beyond the end of the file will always return with a length of\n-    /// 0.\n+    /// 0\\.\n     ///\n     /// Note that similar to `File::read`, it is not an error to return with a\n     /// short read. When returning from such a short read, the file pointer is"}]}