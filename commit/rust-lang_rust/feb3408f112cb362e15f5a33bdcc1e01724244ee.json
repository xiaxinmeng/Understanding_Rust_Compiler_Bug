{"sha": "feb3408f112cb362e15f5a33bdcc1e01724244ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYjM0MDhmMTEyY2IzNjJlMTVmNWEzM2JkY2MxZTAxNzI0MjQ0ZWU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-05T20:27:44Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-14T15:04:37Z"}, "message": "Update const fn tests", "tree": {"sha": "bdb73ae778a0d8598060942892ec3576061be557", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdb73ae778a0d8598060942892ec3576061be557"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feb3408f112cb362e15f5a33bdcc1e01724244ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feb3408f112cb362e15f5a33bdcc1e01724244ee", "html_url": "https://github.com/rust-lang/rust/commit/feb3408f112cb362e15f5a33bdcc1e01724244ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feb3408f112cb362e15f5a33bdcc1e01724244ee/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c339aeb7bec40777b606889b9bd256fcea1dece", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c339aeb7bec40777b606889b9bd256fcea1dece", "html_url": "https://github.com/rust-lang/rust/commit/2c339aeb7bec40777b606889b9bd256fcea1dece"}], "stats": {"total": 267, "additions": 202, "deletions": 65}, "files": [{"sha": "62f678790d21fdb56cd50dabafda4eeac712fb86", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr?ref=feb3408f112cb362e15f5a33bdcc1e01724244ee", "patch": "@@ -1,10 +1,12 @@\n-error: heap allocations are not allowed in const fn\n+error[E0723]: heap allocations are not allowed in const fn (see issue #57563)\n   --> $DIR/bad_const_fn_body_ice.rs:2:5\n    |\n LL |     vec![1, 2, 3] //~ ERROR heap allocations are not allowed in const fn\n    |     ^^^^^^^^^^^^^\n    |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "b5af3e7ee46655ca8d5c44f3aa342a1584102305", "filename": "src/test/ui/consts/min_const_fn/cast_errors.stderr", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr?ref=feb3408f112cb362e15f5a33bdcc1e01724244ee", "patch": "@@ -1,32 +1,43 @@\n-error: unsizing casts are not allowed in const fn\n+error[E0723]: unsizing casts are not allowed in const fn (see issue #57563)\n   --> $DIR/cast_errors.rs:3:41\n    |\n LL | const fn unsize(x: &[u8; 3]) -> &[u8] { x }\n    |                                         ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: function pointers in const fn are unstable\n+error[E0723]: function pointers in const fn are unstable (see issue #57563)\n   --> $DIR/cast_errors.rs:5:23\n    |\n LL | const fn closure() -> fn() { || {} }\n    |                       ^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: function pointers in const fn are unstable\n+error[E0723]: function pointers in const fn are unstable (see issue #57563)\n   --> $DIR/cast_errors.rs:8:5\n    |\n LL |     (|| {}) as fn();\n    |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: function pointers in const fn are unstable\n+error[E0723]: function pointers in const fn are unstable (see issue #57563)\n   --> $DIR/cast_errors.rs:11:28\n    |\n LL | const fn reify(f: fn()) -> unsafe fn() { f }\n    |                            ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: function pointers in const fn are unstable\n+error[E0723]: function pointers in const fn are unstable (see issue #57563)\n   --> $DIR/cast_errors.rs:13:21\n    |\n LL | const fn reify2() { main as unsafe fn(); }\n    |                     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 5 previous errors\n \n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "d84e2651d4fc42ac5f1390aca3139bb7e6942ca7", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr?ref=feb3408f112cb362e15f5a33bdcc1e01724244ee", "patch": "@@ -1,8 +1,11 @@\n-error: function pointers in const fn are unstable\n+error[E0723]: function pointers in const fn are unstable (see issue #57563)\n   --> $DIR/cmp_fn_pointers.rs:1:14\n    |\n LL | const fn cmp(x: fn(), y: fn()) -> bool { //~ ERROR function pointers in const fn are unstable\n    |              ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "716e8380c45da23a2ebad6861a53c38cb742335c", "filename": "src/test/ui/consts/min_const_fn/loop_ice.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr?ref=feb3408f112cb362e15f5a33bdcc1e01724244ee", "patch": "@@ -1,8 +1,11 @@\n-error: loops are not allowed in const fn\n+error[E0723]: loops are not allowed in const fn (see issue #57563)\n   --> $DIR/loop_ice.rs:2:5\n    |\n LL |     loop {} //~ ERROR loops are not allowed in const fn\n    |     ^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "e095ccaf20e29a106b46008ea1872e9ec06049be", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 101, "deletions": 34, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=feb3408f112cb362e15f5a33bdcc1e01724244ee", "patch": "@@ -4,216 +4,283 @@ error[E0493]: destructors cannot be evaluated at compile-time\n LL |     const fn into_inner(self) -> T { self.0 } //~ destructors cannot be evaluated\n    |                         ^^^^ constant functions cannot evaluate destructors\n \n-error: mutable references in const fn are unstable\n+error[E0723]: mutable references in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:39:36\n    |\n LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n    |                                    ^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:44:28\n    |\n LL |     const fn into_inner_lt(self) -> T { self.0 } //~ destructors cannot be evaluated\n    |                            ^^^^ constant functions cannot evaluate destructors\n \n-error: mutable references in const fn are unstable\n+error[E0723]: mutable references in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:46:42\n    |\n LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n    |                                          ^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:51:27\n    |\n LL |     const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructors\n    |                           ^^^^ constant functions cannot evaluate destructors\n \n-error: mutable references in const fn are unstable\n+error[E0723]: mutable references in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:53:38\n    |\n LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n    |                                      ^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: mutable references in const fn are unstable\n+error[E0723]: mutable references in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:58:39\n    |\n LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n    |                                       ^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:76:16\n    |\n LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n    |                ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:78:18\n    |\n LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n    |                  ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: only int, `bool` and `char` operations are stable in const fn\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:80:33\n    |\n LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n    |                                 ^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: only int, `bool` and `char` operations are stable in const fn\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:82:35\n    |\n LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n    |                                   ^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: only int and `bool` operations are stable in const fn\n+error[E0723]: only int and `bool` operations are stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:84:35\n    |\n LL | const fn foo19_3(f: f32) -> f32 { -f }\n    |                                   ^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: only int, `bool` and `char` operations are stable in const fn\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:86:43\n    |\n LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n    |                                           ^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: cannot access `static` items in const fn\n+error[E0723]: cannot access `static` items in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:90:27\n    |\n LL | const fn foo25() -> u32 { BAR } //~ ERROR cannot access `static` items in const fn\n    |                           ^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: cannot access `static` items in const fn\n+error[E0723]: cannot access `static` items in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:91:36\n    |\n LL | const fn foo26() -> &'static u32 { &BAR } //~ ERROR cannot access `static` items\n    |                                    ^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: casting pointers to ints is unstable in const fn\n+error[E0723]: casting pointers to ints is unstable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:92:42\n    |\n LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: casting pointers to ints is unstable in const fn\n+error[E0723]: casting pointers to ints is unstable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:94:63\n    |\n LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: casting pointers to ints is unstable in const fn\n+error[E0723]: casting pointers to ints is unstable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:96:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: casting pointers to ints is unstable in const fn\n+error[E0723]: casting pointers to ints is unstable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:98:63\n    |\n LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: `if`, `match`, `&&` and `||` are not stable in const fn\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:100:38\n    |\n LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: `if`, `match`, `&&` and `||` are not stable in const fn\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:102:29\n    |\n LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n    |                             ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: `if`, `match`, `&&` and `||` are not stable in const fn\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:104:44\n    |\n LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n    |                                            ^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: `if`, `match`, `&&` and `||` are not stable in const fn\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:106:44\n    |\n LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n    |                                            ^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: mutable references in const fn are unstable\n+error[E0723]: mutable references in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:108:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:113:6\n    |\n LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:118:6\n    |\n LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:123:6\n    |\n LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: `impl Trait` in const fn is unstable\n+error[E0723]: `impl Trait` in const fn is unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:129:24\n    |\n LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:131:34\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:133:22\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n    |                      ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: `impl Trait` in const fn is unstable\n+error[E0723]: `impl Trait` in const fn is unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:134:23\n    |\n LL | const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn is unstable\n    |                       ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:135:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n    |                       ^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:136:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:141:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: function pointers in const fn are unstable\n+error[E0723]: function pointers in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:144:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: function pointers in const fn are unstable\n+error[E0723]: function pointers in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:146:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 36 previous errors\n \n-For more information about this error, try `rustc --explain E0493`.\n+Some errors occurred: E0493, E0723.\n+For more information about an error, try `rustc --explain E0493`."}, {"sha": "8ff963722cf1519aac0a63523da678ab6f1b03c1", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr?ref=feb3408f112cb362e15f5a33bdcc1e01724244ee", "patch": "@@ -1,14 +1,19 @@\n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn_dyn.rs:9:5\n    |\n LL |     x.0.field;\n    |     ^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn_dyn.rs:12:66\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                  ^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "8838ababe2c0e99adb0eb85a66da361ded04ca42", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_fn_ptr.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr?ref=feb3408f112cb362e15f5a33bdcc1e01724244ee", "patch": "@@ -1,14 +1,19 @@\n-error: function pointers in const fn are unstable\n+error[E0723]: function pointers in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn_fn_ptr.rs:11:5\n    |\n LL |     x.0.field;\n    |     ^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: function pointers in const fn are unstable\n+error[E0723]: function pointers in const fn are unstable (see issue #57563)\n   --> $DIR/min_const_fn_fn_ptr.rs:14:59\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasPtr { field }) }\n    |                                                           ^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "1e6f698b3c8e3f11acdc379bb0d89c7c21a7db05", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr?ref=feb3408f112cb362e15f5a33bdcc1e01724244ee", "patch": "@@ -1,26 +1,35 @@\n-error: can only call other `min_const_fn` within a `min_const_fn`\n+error[E0723]: can only call other `min_const_fn` within a `min_const_fn` (see issue #57563)\n   --> $DIR/min_const_fn_libstd_stability.rs:15:25\n    |\n LL | const fn bar() -> u32 { foo() } //~ ERROR can only call other `min_const_fn`\n    |                         ^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: can only call other `min_const_fn` within a `min_const_fn`\n+error[E0723]: can only call other `min_const_fn` within a `min_const_fn` (see issue #57563)\n   --> $DIR/min_const_fn_libstd_stability.rs:22:26\n    |\n LL | const fn bar2() -> u32 { foo2() } //~ ERROR can only call other `min_const_fn`\n    |                          ^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: only int, `bool` and `char` operations are stable in const fn\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn_libstd_stability.rs:26:26\n    |\n LL | const fn bar3() -> u32 { (5f32 + 6f32) as u32 } //~ ERROR only int, `bool` and `char` operations\n    |                          ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: can only call other `min_const_fn` within a `min_const_fn`\n+error[E0723]: can only call other `min_const_fn` within a `min_const_fn` (see issue #57563)\n   --> $DIR/min_const_fn_libstd_stability.rs:34:32\n    |\n LL | const fn bar2_gated() -> u32 { foo2_gated() } //~ ERROR can only call other `min_const_fn`\n    |                                ^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "07d10984392d809d067dc84f6fb40b5807850455", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr?ref=feb3408f112cb362e15f5a33bdcc1e01724244ee", "patch": "@@ -1,26 +1,35 @@\n-error: can only call other `min_const_fn` within a `min_const_fn`\n+error[E0723]: can only call other `min_const_fn` within a `min_const_fn` (see issue #57563)\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:15:41\n    |\n LL | const unsafe fn bar() -> u32 { unsafe { foo() } } //~ ERROR can only call other `min_const_fn`\n    |                                         ^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: can only call other `min_const_fn` within a `min_const_fn`\n+error[E0723]: can only call other `min_const_fn` within a `min_const_fn` (see issue #57563)\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:22:42\n    |\n LL | const unsafe fn bar2() -> u32 { unsafe { foo2() } } //~ ERROR can only call other `min_const_fn`\n    |                                          ^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: only int, `bool` and `char` operations are stable in const fn\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn (see issue #57563)\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:26:33\n    |\n LL | const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 } //~ ERROR only int, `bool` and `char` op\n    |                                 ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: can only call other `min_const_fn` within a `min_const_fn`\n+error[E0723]: can only call other `min_const_fn` within a `min_const_fn` (see issue #57563)\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:34:48\n    |\n LL | const unsafe fn bar2_gated() -> u32 { unsafe { foo2_gated() } } //~ ERROR can only call other\n    |                                                ^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "7cb8c6e62ec60ac3f2dd7c45b642d89bffc3fbaa", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr?ref=feb3408f112cb362e15f5a33bdcc1e01724244ee", "patch": "@@ -1,20 +1,27 @@\n-error: can only call other `min_const_fn` within a `min_const_fn`\n+error[E0723]: can only call other `min_const_fn` within a `min_const_fn` (see issue #57563)\n   --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:15:32\n    |\n LL | const unsafe fn bar() -> u32 { foo() } //~ ERROR can only call other `min_const_fn`\n    |                                ^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: can only call other `min_const_fn` within a `min_const_fn`\n+error[E0723]: can only call other `min_const_fn` within a `min_const_fn` (see issue #57563)\n   --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:22:33\n    |\n LL | const unsafe fn bar2() -> u32 { foo2() } //~ ERROR can only call other `min_const_fn`\n    |                                 ^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: can only call other `min_const_fn` within a `min_const_fn`\n+error[E0723]: can only call other `min_const_fn` within a `min_const_fn` (see issue #57563)\n   --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:30:39\n    |\n LL | const unsafe fn bar2_gated() -> u32 { foo2_gated() } //~ ERROR can only call other `min_const_fn`\n    |                                       ^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "e5a3502a3dc52770eb0484a7ff93a24227e20c63", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr?ref=feb3408f112cb362e15f5a33bdcc1e01724244ee", "patch": "@@ -1,14 +1,19 @@\n-error: mutable references in const fn are unstable\n+error[E0723]: mutable references in const fn are unstable (see issue #57563)\n   --> $DIR/mutable_borrow.rs:3:9\n    |\n LL |     let b = &mut a; //~ ERROR mutable references in const fn\n    |         ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: mutable references in const fn are unstable\n+error[E0723]: mutable references in const fn are unstable (see issue #57563)\n   --> $DIR/mutable_borrow.rs:12:13\n    |\n LL |         let b = &mut a; //~ ERROR mutable references in const fn\n    |             ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "5272062ccfc14e959ac07beccbd05c9165a0494a", "filename": "src/test/ui/consts/single_variant_match_ice.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr?ref=feb3408f112cb362e15f5a33bdcc1e01724244ee", "patch": "@@ -10,12 +10,15 @@ error[E0019]: constant contains unimplemented expression type\n LL |     x => 42, //~ ERROR unimplemented expression type\n    |     ^\n \n-error: `if`, `match`, `&&` and `||` are not stable in const fn\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn (see issue #57563)\n   --> $DIR/single_variant_match_ice.rs:18:13\n    |\n LL |             Prob => 0x1, //~ ERROR `if`, `match`, `&&` and `||` are not stable in const fn\n    |             ^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0019`.\n+Some errors occurred: E0019, E0723.\n+For more information about an error, try `rustc --explain E0019`."}, {"sha": "97160af43bee4eb1796c59fa0d0f7f6fb89d55c0", "filename": "src/test/ui/issues/issue-37550.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr?ref=feb3408f112cb362e15f5a33bdcc1e01724244ee", "patch": "@@ -1,8 +1,11 @@\n-error: function pointers in const fn are unstable\n+error[E0723]: function pointers in const fn are unstable (see issue #57563)\n   --> $DIR/issue-37550.rs:3:9\n    |\n LL |     let x = || t; //~ ERROR function pointers in const fn are unstable\n    |         ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "fb3841948f11fd490f4c9a3c722171606202db22", "filename": "src/test/ui/unsafe/ranged_ints2_const.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb3408f112cb362e15f5a33bdcc1e01724244ee/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr?ref=feb3408f112cb362e15f5a33bdcc1e01724244ee", "patch": "@@ -1,14 +1,18 @@\n-error: mutable references in const fn are unstable\n+error[E0723]: mutable references in const fn are unstable (see issue #57563)\n   --> $DIR/ranged_ints2_const.rs:11:9\n    |\n LL |     let y = &mut x.0; //~ ERROR references in const fn are unstable\n    |         ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: mutable references in const fn are unstable\n+error[E0723]: mutable references in const fn are unstable (see issue #57563)\n   --> $DIR/ranged_ints2_const.rs:18:9\n    |\n LL |     let y = unsafe { &mut x.0 }; //~ ERROR mutable references in const fn are unstable\n    |         ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n   --> $DIR/ranged_ints2_const.rs:11:13\n@@ -20,4 +24,5 @@ LL |     let y = &mut x.0; //~ ERROR references in const fn are unstable\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0133`.\n+Some errors occurred: E0133, E0723.\n+For more information about an error, try `rustc --explain E0133`."}]}