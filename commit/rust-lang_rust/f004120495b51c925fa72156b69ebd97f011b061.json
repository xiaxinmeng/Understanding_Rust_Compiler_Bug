{"sha": "f004120495b51c925fa72156b69ebd97f011b061", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMDQxMjA0OTViNTFjOTI1ZmE3MjE1NmI2OWViZDk3ZjAxMWIwNjE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-11T14:45:06Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-11T14:45:06Z"}, "message": "properly lint function argument patterns in similar_names", "tree": {"sha": "a08cd49ba6e9ca2b0c62207fc7987a3d37b0b126", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a08cd49ba6e9ca2b0c62207fc7987a3d37b0b126"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f004120495b51c925fa72156b69ebd97f011b061", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXM0VyAAoJEFbW7qD8Z6xG4xMQAK3ohyWqf7Jd3SSq4+NSQ7Gl\nmTMCvI2WN1VufpQbRGrMARtmtHtQUOztbhc1y4v63njLP8E9LYswrL1QoOwgXJC8\nDIh7rAhtTbHX7zCPxC8/DsX0RrwO7w0FAVfNU5R75Xjt2kvLaXYGLRSKtXbosCLO\npvSTmhQxUv1GI9BGhbzivfJER28/RyJZi2L+7XXcO3Cur7CgofxbxH7TTY7PIPPe\nfTZxjk9gRAwb9Omh3imAyDE75JLypySek7wZ46RwTHEydz7ZMnbkhBh+oQ5TY5uO\ndfxn3x/2rJpJdhmI/r4bXV6BSvQ/zGLTp+N5IuLS6GFwnRzw+e2O3/yZoXFw0x97\nRcLcBzz1s4tcaPKGdJgcUTEpaENnF3bfTpHOLHVBMruj41oKXOBa6d2wwvtH6lHU\ncjMMtTgVItLdLOL4FmXyRpqaV6h1ztGe6azJEmr6eEx4NUMJhVsxpFHoc63QF9tG\nOf1//xTdm4MC6BzPU4MwfQdf/E0trSEjrDz/JnTmjTTYuqqqA7RlvFSEU47+rfFv\nfhiLgbUaPirc1vkX7sl7WT5FxvuDJMFmYfoqIiBoL0Rk10CLU88fnP+qI0zUTn7B\nh+fvoyTS5WeWufWAkRVJlorASIxW41KV4Z810bLam75HFWa0B+PYVxd5Vra0P/Hy\n4qaZTErjFhYsqv1EHsYt\n=E2N/\n-----END PGP SIGNATURE-----", "payload": "tree a08cd49ba6e9ca2b0c62207fc7987a3d37b0b126\nparent 49e2570b77558e9215b43926d2633eef4a25f7bd\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1462977906 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1462977906 +0200\n\nproperly lint function argument patterns in similar_names"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f004120495b51c925fa72156b69ebd97f011b061", "html_url": "https://github.com/rust-lang/rust/commit/f004120495b51c925fa72156b69ebd97f011b061", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f004120495b51c925fa72156b69ebd97f011b061/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49e2570b77558e9215b43926d2633eef4a25f7bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/49e2570b77558e9215b43926d2633eef4a25f7bd", "html_url": "https://github.com/rust-lang/rust/commit/49e2570b77558e9215b43926d2633eef4a25f7bd"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "cbb083a3e161ab4ef2b4c79df6d1800937705ebb", "filename": "src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f004120495b51c925fa72156b69ebd97f011b061/src%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004120495b51c925fa72156b69ebd97f011b061/src%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnon_expressive_names.rs?ref=f004120495b51c925fa72156b69ebd97f011b061", "patch": "@@ -259,7 +259,7 @@ impl EarlyLintPass for NonExpressiveNames {\n                 };\n                 // initialize with function arguments\n                 for arg in &decl.inputs {\n-                    visit::walk_pat(&mut SimilarNamesNameVisitor(&mut visitor), &arg.pat);\n+                    SimilarNamesNameVisitor(&mut visitor).visit_pat(&arg.pat);\n                 }\n                 // walk all other bindings\n                 walk_block(&mut visitor, blk);"}, {"sha": "4639a9439651e89bd48a6be85441b21aca058ed1", "filename": "src/shadow.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f004120495b51c925fa72156b69ebd97f011b061/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004120495b51c925fa72156b69ebd97f011b061/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=f004120495b51c925fa72156b69ebd97f011b061", "patch": "@@ -195,7 +195,7 @@ fn check_pat(cx: &LateContext, pat: &Pat, init: &Option<&Expr>, span: Span, bind\n     }\n }\n \n-fn lint_shadow<T>(cx: &LateContext, name: Name, span: Span, lspan: Span, init: &Option<T>, prev_span: Span)\n+fn lint_shadow<T>(cx: &LateContext, name: Name, span: Span, pattern_span: Span, init: &Option<T>, prev_span: Span)\n     where T: Deref<Target = Expr>\n {\n     fn note_orig(cx: &LateContext, mut db: DiagnosticWrapper, lint: &'static Lint, span: Span) {\n@@ -209,25 +209,25 @@ fn lint_shadow<T>(cx: &LateContext, name: Name, span: Span, lspan: Span, init: &\n                                SHADOW_SAME,\n                                span,\n                                &format!(\"{} is shadowed by itself in {}\",\n-                                        snippet(cx, lspan, \"_\"),\n+                                        snippet(cx, pattern_span, \"_\"),\n                                         snippet(cx, expr.span, \"..\")));\n             note_orig(cx, db, SHADOW_SAME, prev_span);\n         } else if contains_self(name, expr) {\n             let db = span_note_and_lint(cx,\n                                         SHADOW_REUSE,\n-                                        lspan,\n+                                        pattern_span,\n                                         &format!(\"{} is shadowed by {} which reuses the original value\",\n-                                                 snippet(cx, lspan, \"_\"),\n+                                                 snippet(cx, pattern_span, \"_\"),\n                                                  snippet(cx, expr.span, \"..\")),\n                                         expr.span,\n                                         \"initialization happens here\");\n             note_orig(cx, db, SHADOW_REUSE, prev_span);\n         } else {\n             let db = span_note_and_lint(cx,\n                                         SHADOW_UNRELATED,\n-                                        lspan,\n+                                        pattern_span,\n                                         &format!(\"{} is shadowed by {}\",\n-                                                 snippet(cx, lspan, \"_\"),\n+                                                 snippet(cx, pattern_span, \"_\"),\n                                                  snippet(cx, expr.span, \"..\")),\n                                         expr.span,\n                                         \"initialization happens here\");\n@@ -238,7 +238,7 @@ fn lint_shadow<T>(cx: &LateContext, name: Name, span: Span, lspan: Span, init: &\n         let db = span_lint(cx,\n                            SHADOW_UNRELATED,\n                            span,\n-                           &format!(\"{} shadows a previous declaration\", snippet(cx, lspan, \"_\")));\n+                           &format!(\"{} shadows a previous declaration\", snippet(cx, pattern_span, \"_\")));\n         note_orig(cx, db, SHADOW_UNRELATED, prev_span);\n     }\n }"}]}