{"sha": "8f433adf75c9e3f1befea5115d7e84531b3668ad", "node_id": "C_kwDOAAsO6NoAKDhmNDMzYWRmNzVjOWUzZjFiZWZlYTUxMTVkN2U4NDUzMWIzNjY4YWQ", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-10-13T13:58:41Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-20T19:19:33Z"}, "message": "Align multiline messages to their label (add left margin)", "tree": {"sha": "2c0909956a32dceae6f6545441032fdb772e866f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c0909956a32dceae6f6545441032fdb772e866f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f433adf75c9e3f1befea5115d7e84531b3668ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f433adf75c9e3f1befea5115d7e84531b3668ad", "html_url": "https://github.com/rust-lang/rust/commit/8f433adf75c9e3f1befea5115d7e84531b3668ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f433adf75c9e3f1befea5115d7e84531b3668ad/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "563db4245b5373794be8e06ea878f81661888fa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/563db4245b5373794be8e06ea878f81661888fa0", "html_url": "https://github.com/rust-lang/rust/commit/563db4245b5373794be8e06ea878f81661888fa0"}], "stats": {"total": 2607, "additions": 1310, "deletions": 1297}, "files": [{"sha": "6b79962ddd6095bc600d8d0766b5ce557d8b8a14", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f433adf75c9e3f1befea5115d7e84531b3668ad/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f433adf75c9e3f1befea5115d7e84531b3668ad/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=8f433adf75c9e3f1befea5115d7e84531b3668ad", "patch": "@@ -1266,22 +1266,37 @@ impl EmitterWriter {\n             }\n             self.msg_to_buffer(&mut buffer, msg, max_line_num_len, \"note\", None);\n         } else {\n+            let mut label_width = 0;\n             // The failure note level itself does not provide any useful diagnostic information\n             if *level != Level::FailureNote {\n                 buffer.append(0, level.to_str(), Style::Level(*level));\n+                label_width += level.to_str().len();\n             }\n             // only render error codes, not lint codes\n             if let Some(DiagnosticId::Error(ref code)) = *code {\n                 buffer.append(0, \"[\", Style::Level(*level));\n                 buffer.append(0, &code, Style::Level(*level));\n                 buffer.append(0, \"]\", Style::Level(*level));\n+                label_width += 2 + code.len();\n             }\n             let header_style = if is_secondary { Style::HeaderMsg } else { Style::MainHeaderMsg };\n             if *level != Level::FailureNote {\n                 buffer.append(0, \": \", header_style);\n+                label_width += 2;\n             }\n             for &(ref text, _) in msg.iter() {\n-                buffer.append(0, &replace_tabs(text), header_style);\n+                // Account for newlines to align output to its label.\n+                for (line, text) in replace_tabs(text).lines().enumerate() {\n+                    buffer.append(\n+                        0 + line,\n+                        &format!(\n+                            \"{}{}\",\n+                            if line == 0 { String::new() } else { \" \".repeat(label_width) },\n+                            text\n+                        ),\n+                        header_style,\n+                    );\n+                }\n             }\n         }\n "}, {"sha": "878afb39214adaf4f5a50da71b1bc4a6b2848c8a", "filename": "src/test/ui/attributes/key-value-expansion.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr?ref=8f433adf75c9e3f1befea5115d7e84531b3668ad", "patch": "@@ -16,15 +16,15 @@ LL | bug!();\n    = note: this error originates in the macro `bug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unexpected token: `{\n-    let res =\n-        ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n-                                                            &match (&\"u8\",) {\n-                                                                 _args =>\n-                                                                 [::core::fmt::ArgumentV1::new(_args.0,\n-                                                                                               ::core::fmt::Display::fmt)],\n-                                                             }));\n-    res\n-}.as_str()`\n+           let res =\n+               ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n+                                                                   &match (&\"u8\",) {\n+                                                                        _args =>\n+                                                                        [::core::fmt::ArgumentV1::new(_args.0,\n+                                                                                                      ::core::fmt::Display::fmt)],\n+                                                                    }));\n+           res\n+       }.as_str()`\n   --> $DIR/key-value-expansion.rs:48:23\n    |\n LL |         doc_comment! {format!(\"{coor}\", coor = stringify!($t1)).as_str()}"}, {"sha": "37230078781ede152614b2e937b9861347e37bb4", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/params-on-stack.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.stderr?ref=8f433adf75c9e3f1befea5115d7e84531b3668ad", "patch": "@@ -1,5 +1,4 @@\n error: <unknown>:0:0: in function test i32 (i32, i32, i32, i32, i32): call to non-secure function would require passing arguments on stack\n \n-\n error: aborting due to previous error\n "}, {"sha": "1054c26651270276c87c04fa8b93ab55696103aa", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-entry/params-on-stack.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.stderr?ref=8f433adf75c9e3f1befea5115d7e84531b3668ad", "patch": "@@ -1,5 +1,4 @@\n error: <unknown>:0:0: in function entry_function i32 (i32, i32, i32, i32, i32): secure entry function requires arguments on stack\n \n-\n error: aborting due to previous error\n "}, {"sha": "418f780d62c971ea985059fa1074e79b4c72c4d9", "filename": "src/test/ui/layout/debug.stderr", "status": "modified", "additions": 317, "deletions": 317, "changes": 634, "blob_url": "https://github.com/rust-lang/rust/blob/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr?ref=8f433adf75c9e3f1befea5115d7e84531b3668ad", "patch": "@@ -1,345 +1,345 @@\n error: layout_of(E) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I32,\n-                false,\n-            ),\n-            valid_range: 0..=0,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 0,\n-                    },\n-                    pref: $PREF_ALIGN,\n-                },\n-                size: Size {\n-                    raw: 4,\n-                },\n-            },\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [\n-                        Size {\n-                            raw: 4,\n-                        },\n-                        Size {\n-                            raw: 4,\n-                        },\n-                        Size {\n-                            raw: 8,\n-                        },\n-                    ],\n-                    memory_index: [\n-                        0,\n-                        1,\n-                        2,\n-                    ],\n-                },\n-                variants: Single {\n-                    index: 1,\n-                },\n-                abi: Uninhabited,\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 2,\n-                    },\n-                    pref: $PREF_ALIGN,\n-                },\n-                size: Size {\n-                    raw: 12,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Aggregate {\n-        sized: true,\n-    },\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I32,\n-                    false,\n-                ),\n-                valid_range: 0..=0,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: $PREF_ALIGN,\n-    },\n-    size: Size {\n-        raw: 12,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 0,\n+                           },\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size {\n+                           raw: 4,\n+                       },\n+                   },\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [\n+                               Size {\n+                                   raw: 4,\n+                               },\n+                               Size {\n+                                   raw: 4,\n+                               },\n+                               Size {\n+                                   raw: 8,\n+                               },\n+                           ],\n+                           memory_index: [\n+                               0,\n+                               1,\n+                               2,\n+                           ],\n+                       },\n+                       variants: Single {\n+                           index: 1,\n+                       },\n+                       abi: Uninhabited,\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 2,\n+                           },\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size {\n+                           raw: 12,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I32,\n+                           false,\n+                       ),\n+                       valid_range: 0..=0,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: $PREF_ALIGN,\n+           },\n+           size: Size {\n+               raw: 12,\n+           },\n+       }\n   --> $DIR/debug.rs:6:1\n    |\n LL | enum E { Foo, Bar(!, i32, i32) }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(S) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-            Size {\n-                raw: 0,\n-            },\n-            Size {\n-                raw: 4,\n-            },\n-        ],\n-        memory_index: [\n-            1,\n-            0,\n-            2,\n-        ],\n-    },\n-    variants: Single {\n-        index: 0,\n-    },\n-    abi: ScalarPair(\n-        Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 0..=4294967295,\n-        },\n-        Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 0..=4294967295,\n-        },\n-    ),\n-    largest_niche: None,\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: $PREF_ALIGN,\n-    },\n-    size: Size {\n-        raw: 8,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+                   Size {\n+                       raw: 0,\n+                   },\n+                   Size {\n+                       raw: 4,\n+                   },\n+               ],\n+               memory_index: [\n+                   1,\n+                   0,\n+                   2,\n+               ],\n+           },\n+           variants: Single {\n+               index: 0,\n+           },\n+           abi: ScalarPair(\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 0..=4294967295,\n+               },\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 0..=4294967295,\n+               },\n+           ),\n+           largest_niche: None,\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: $PREF_ALIGN,\n+           },\n+           size: Size {\n+               raw: 8,\n+           },\n+       }\n   --> $DIR/debug.rs:9:1\n    |\n LL | struct S { f1: i32, f2: (), f3: i32 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(U) = Layout {\n-    fields: Union(\n-        2,\n-    ),\n-    variants: Single {\n-        index: 0,\n-    },\n-    abi: Aggregate {\n-        sized: true,\n-    },\n-    largest_niche: None,\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: $PREF_ALIGN,\n-    },\n-    size: Size {\n-        raw: 8,\n-    },\n-}\n+           fields: Union(\n+               2,\n+           ),\n+           variants: Single {\n+               index: 0,\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n+           largest_niche: None,\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: $PREF_ALIGN,\n+           },\n+           size: Size {\n+               raw: 8,\n+           },\n+       }\n   --> $DIR/debug.rs:12:1\n    |\n LL | union U { f1: (i32, i32), f3: i32 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(std::result::Result<i32, i32>) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I32,\n-                false,\n-            ),\n-            valid_range: 0..=1,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [\n-                        Size {\n-                            raw: 4,\n-                        },\n-                    ],\n-                    memory_index: [\n-                        0,\n-                    ],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 2,\n-                    },\n-                    pref: $PREF_ALIGN,\n-                },\n-                size: Size {\n-                    raw: 8,\n-                },\n-            },\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [\n-                        Size {\n-                            raw: 4,\n-                        },\n-                    ],\n-                    memory_index: [\n-                        0,\n-                    ],\n-                },\n-                variants: Single {\n-                    index: 1,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 2,\n-                    },\n-                    pref: $PREF_ALIGN,\n-                },\n-                size: Size {\n-                    raw: 8,\n-                },\n-            },\n-        ],\n-    },\n-    abi: ScalarPair(\n-        Scalar {\n-            value: Int(\n-                I32,\n-                false,\n-            ),\n-            valid_range: 0..=1,\n-        },\n-        Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 0..=4294967295,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I32,\n-                    false,\n-                ),\n-                valid_range: 0..=1,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: $PREF_ALIGN,\n-    },\n-    size: Size {\n-        raw: 8,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [\n+                               Size {\n+                                   raw: 4,\n+                               },\n+                           ],\n+                           memory_index: [\n+                               0,\n+                           ],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 2,\n+                           },\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size {\n+                           raw: 8,\n+                       },\n+                   },\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [\n+                               Size {\n+                                   raw: 4,\n+                               },\n+                           ],\n+                           memory_index: [\n+                               0,\n+                           ],\n+                       },\n+                       variants: Single {\n+                           index: 1,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 2,\n+                           },\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size {\n+                           raw: 8,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: ScalarPair(\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 0..=4294967295,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I32,\n+                           false,\n+                       ),\n+                       valid_range: 0..=1,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: $PREF_ALIGN,\n+           },\n+           size: Size {\n+               raw: 8,\n+           },\n+       }\n   --> $DIR/debug.rs:15:1\n    |\n LL | type Test = Result<i32, i32>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(i32) = Layout {\n-    fields: Primitive,\n-    variants: Single {\n-        index: 0,\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 0..=4294967295,\n-        },\n-    ),\n-    largest_niche: None,\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: $PREF_ALIGN,\n-    },\n-    size: Size {\n-        raw: 4,\n-    },\n-}\n+           fields: Primitive,\n+           variants: Single {\n+               index: 0,\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 0..=4294967295,\n+               },\n+           ),\n+           largest_niche: None,\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: $PREF_ALIGN,\n+           },\n+           size: Size {\n+               raw: 4,\n+           },\n+       }\n   --> $DIR/debug.rs:18:1\n    |\n LL | type T = impl std::fmt::Debug;"}, {"sha": "39b23cb4b572ef8e3afb75aa22ccab3b605c1099", "filename": "src/test/ui/layout/hexagon-enum.stderr", "status": "modified", "additions": 410, "deletions": 410, "changes": 820, "blob_url": "https://github.com/rust-lang/rust/blob/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr?ref=8f433adf75c9e3f1befea5115d7e84531b3668ad", "patch": "@@ -1,438 +1,438 @@\n error: layout_of(A) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 0..=0,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 0,\n-                    },\n-                    pref: Align {\n-                        pow2: 0,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 1,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 0..=0,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I8,\n-                    false,\n-                ),\n-                valid_range: 0..=0,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 0,\n-        },\n-        pref: Align {\n-            pow2: 0,\n-        },\n-    },\n-    size: Size {\n-        raw: 1,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 0,\n+                           },\n+                           pref: Align {\n+                               pow2: 0,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 1,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I8,\n+                           false,\n+                       ),\n+                       valid_range: 0..=0,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 0,\n+               },\n+               pref: Align {\n+                   pow2: 0,\n+               },\n+           },\n+           size: Size {\n+               raw: 1,\n+           },\n+       }\n   --> $DIR/hexagon-enum.rs:16:1\n    |\n LL | enum A { Apple }\n    | ^^^^^^^^^^^^^^^^\n \n error: layout_of(B) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 255..=255,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 0,\n-                    },\n-                    pref: Align {\n-                        pow2: 0,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 1,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 255..=255,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I8,\n-                    false,\n-                ),\n-                valid_range: 255..=255,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 0,\n-        },\n-        pref: Align {\n-            pow2: 0,\n-        },\n-    },\n-    size: Size {\n-        raw: 1,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 255..=255,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 0,\n+                           },\n+                           pref: Align {\n+                               pow2: 0,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 1,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 255..=255,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I8,\n+                           false,\n+                       ),\n+                       valid_range: 255..=255,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 0,\n+               },\n+               pref: Align {\n+                   pow2: 0,\n+               },\n+           },\n+           size: Size {\n+               raw: 1,\n+           },\n+       }\n   --> $DIR/hexagon-enum.rs:20:1\n    |\n LL | enum B { Banana = 255, }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(C) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I16,\n-                false,\n-            ),\n-            valid_range: 256..=256,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 1,\n-                    },\n-                    pref: Align {\n-                        pow2: 1,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 2,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I16,\n-                false,\n-            ),\n-            valid_range: 256..=256,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I16,\n-                    false,\n-                ),\n-                valid_range: 256..=256,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 1,\n-        },\n-        pref: Align {\n-            pow2: 1,\n-        },\n-    },\n-    size: Size {\n-        raw: 2,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I16,\n+                       false,\n+                   ),\n+                   valid_range: 256..=256,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 1,\n+                           },\n+                           pref: Align {\n+                               pow2: 1,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 2,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I16,\n+                       false,\n+                   ),\n+                   valid_range: 256..=256,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I16,\n+                           false,\n+                       ),\n+                       valid_range: 256..=256,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 1,\n+               },\n+               pref: Align {\n+                   pow2: 1,\n+               },\n+           },\n+           size: Size {\n+               raw: 2,\n+           },\n+       }\n   --> $DIR/hexagon-enum.rs:24:1\n    |\n LL | enum C { Chaenomeles = 256, }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(P) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I32,\n-                false,\n-            ),\n-            valid_range: 268435456..=268435456,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 2,\n-                    },\n-                    pref: Align {\n-                        pow2: 2,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 4,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I32,\n-                false,\n-            ),\n-            valid_range: 268435456..=268435456,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I32,\n-                    false,\n-                ),\n-                valid_range: 268435456..=268435456,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: Align {\n-            pow2: 2,\n-        },\n-    },\n-    size: Size {\n-        raw: 4,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 268435456..=268435456,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 2,\n+                           },\n+                           pref: Align {\n+                               pow2: 2,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 4,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 268435456..=268435456,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I32,\n+                           false,\n+                       ),\n+                       valid_range: 268435456..=268435456,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: Align {\n+                   pow2: 2,\n+               },\n+           },\n+           size: Size {\n+               raw: 4,\n+           },\n+       }\n   --> $DIR/hexagon-enum.rs:28:1\n    |\n LL | enum P { Peach = 0x1000_0000isize, }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(T) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 2164260864..=2164260864,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 2,\n-                    },\n-                    pref: Align {\n-                        pow2: 2,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 4,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 2164260864..=2164260864,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I32,\n-                    true,\n-                ),\n-                valid_range: 2164260864..=2164260864,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: Align {\n-            pow2: 2,\n-        },\n-    },\n-    size: Size {\n-        raw: 4,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 2164260864..=2164260864,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 2,\n+                           },\n+                           pref: Align {\n+                               pow2: 2,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 4,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 2164260864..=2164260864,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I32,\n+                           true,\n+                       ),\n+                       valid_range: 2164260864..=2164260864,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: Align {\n+                   pow2: 2,\n+               },\n+           },\n+           size: Size {\n+               raw: 4,\n+           },\n+       }\n   --> $DIR/hexagon-enum.rs:34:1\n    |\n LL | enum T { Tangerine = TANGERINE as isize }"}, {"sha": "144ab02792e5018020b06ba9e4346ffc35de1a3b", "filename": "src/test/ui/layout/thumb-enum.stderr", "status": "modified", "additions": 410, "deletions": 410, "changes": 820, "blob_url": "https://github.com/rust-lang/rust/blob/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr?ref=8f433adf75c9e3f1befea5115d7e84531b3668ad", "patch": "@@ -1,438 +1,438 @@\n error: layout_of(A) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 0..=0,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 0,\n-                    },\n-                    pref: Align {\n-                        pow2: 2,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 1,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 0..=0,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I8,\n-                    false,\n-                ),\n-                valid_range: 0..=0,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 0,\n-        },\n-        pref: Align {\n-            pow2: 2,\n-        },\n-    },\n-    size: Size {\n-        raw: 1,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 0,\n+                           },\n+                           pref: Align {\n+                               pow2: 2,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 1,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I8,\n+                           false,\n+                       ),\n+                       valid_range: 0..=0,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 0,\n+               },\n+               pref: Align {\n+                   pow2: 2,\n+               },\n+           },\n+           size: Size {\n+               raw: 1,\n+           },\n+       }\n   --> $DIR/thumb-enum.rs:16:1\n    |\n LL | enum A { Apple }\n    | ^^^^^^^^^^^^^^^^\n \n error: layout_of(B) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 255..=255,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 0,\n-                    },\n-                    pref: Align {\n-                        pow2: 2,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 1,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I8,\n-                false,\n-            ),\n-            valid_range: 255..=255,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I8,\n-                    false,\n-                ),\n-                valid_range: 255..=255,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 0,\n-        },\n-        pref: Align {\n-            pow2: 2,\n-        },\n-    },\n-    size: Size {\n-        raw: 1,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 255..=255,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 0,\n+                           },\n+                           pref: Align {\n+                               pow2: 2,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 1,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 255..=255,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I8,\n+                           false,\n+                       ),\n+                       valid_range: 255..=255,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 0,\n+               },\n+               pref: Align {\n+                   pow2: 2,\n+               },\n+           },\n+           size: Size {\n+               raw: 1,\n+           },\n+       }\n   --> $DIR/thumb-enum.rs:20:1\n    |\n LL | enum B { Banana = 255, }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(C) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I16,\n-                false,\n-            ),\n-            valid_range: 256..=256,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 1,\n-                    },\n-                    pref: Align {\n-                        pow2: 2,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 2,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I16,\n-                false,\n-            ),\n-            valid_range: 256..=256,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I16,\n-                    false,\n-                ),\n-                valid_range: 256..=256,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 1,\n-        },\n-        pref: Align {\n-            pow2: 2,\n-        },\n-    },\n-    size: Size {\n-        raw: 2,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I16,\n+                       false,\n+                   ),\n+                   valid_range: 256..=256,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 1,\n+                           },\n+                           pref: Align {\n+                               pow2: 2,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 2,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I16,\n+                       false,\n+                   ),\n+                   valid_range: 256..=256,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I16,\n+                           false,\n+                       ),\n+                       valid_range: 256..=256,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 1,\n+               },\n+               pref: Align {\n+                   pow2: 2,\n+               },\n+           },\n+           size: Size {\n+               raw: 2,\n+           },\n+       }\n   --> $DIR/thumb-enum.rs:24:1\n    |\n LL | enum C { Chaenomeles = 256, }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(P) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I32,\n-                false,\n-            ),\n-            valid_range: 268435456..=268435456,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 2,\n-                    },\n-                    pref: Align {\n-                        pow2: 2,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 4,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I32,\n-                false,\n-            ),\n-            valid_range: 268435456..=268435456,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I32,\n-                    false,\n-                ),\n-                valid_range: 268435456..=268435456,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: Align {\n-            pow2: 2,\n-        },\n-    },\n-    size: Size {\n-        raw: 4,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 268435456..=268435456,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 2,\n+                           },\n+                           pref: Align {\n+                               pow2: 2,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 4,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 268435456..=268435456,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I32,\n+                           false,\n+                       ),\n+                       valid_range: 268435456..=268435456,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: Align {\n+                   pow2: 2,\n+               },\n+           },\n+           size: Size {\n+               raw: 4,\n+           },\n+       }\n   --> $DIR/thumb-enum.rs:28:1\n    |\n LL | enum P { Peach = 0x1000_0000isize, }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(T) = Layout {\n-    fields: Arbitrary {\n-        offsets: [\n-            Size {\n-                raw: 0,\n-            },\n-        ],\n-        memory_index: [\n-            0,\n-        ],\n-    },\n-    variants: Multiple {\n-        tag: Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 2164260864..=2164260864,\n-        },\n-        tag_encoding: Direct,\n-        tag_field: 0,\n-        variants: [\n-            Layout {\n-                fields: Arbitrary {\n-                    offsets: [],\n-                    memory_index: [],\n-                },\n-                variants: Single {\n-                    index: 0,\n-                },\n-                abi: Aggregate {\n-                    sized: true,\n-                },\n-                largest_niche: None,\n-                align: AbiAndPrefAlign {\n-                    abi: Align {\n-                        pow2: 2,\n-                    },\n-                    pref: Align {\n-                        pow2: 2,\n-                    },\n-                },\n-                size: Size {\n-                    raw: 4,\n-                },\n-            },\n-        ],\n-    },\n-    abi: Scalar(\n-        Scalar {\n-            value: Int(\n-                I32,\n-                true,\n-            ),\n-            valid_range: 2164260864..=2164260864,\n-        },\n-    ),\n-    largest_niche: Some(\n-        Niche {\n-            offset: Size {\n-                raw: 0,\n-            },\n-            scalar: Scalar {\n-                value: Int(\n-                    I32,\n-                    true,\n-                ),\n-                valid_range: 2164260864..=2164260864,\n-            },\n-        },\n-    ),\n-    align: AbiAndPrefAlign {\n-        abi: Align {\n-            pow2: 2,\n-        },\n-        pref: Align {\n-            pow2: 2,\n-        },\n-    },\n-    size: Size {\n-        raw: 4,\n-    },\n-}\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size {\n+                       raw: 0,\n+                   },\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 2164260864..=2164260864,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align {\n+                               pow2: 2,\n+                           },\n+                           pref: Align {\n+                               pow2: 2,\n+                           },\n+                       },\n+                       size: Size {\n+                           raw: 4,\n+                       },\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Scalar {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 2164260864..=2164260864,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size {\n+                       raw: 0,\n+                   },\n+                   scalar: Scalar {\n+                       value: Int(\n+                           I32,\n+                           true,\n+                       ),\n+                       valid_range: 2164260864..=2164260864,\n+                   },\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align {\n+                   pow2: 2,\n+               },\n+               pref: Align {\n+                   pow2: 2,\n+               },\n+           },\n+           size: Size {\n+               raw: 4,\n+           },\n+       }\n   --> $DIR/thumb-enum.rs:34:1\n    |\n LL | enum T { Tangerine = TANGERINE as isize }"}, {"sha": "f71bed84d5627fdd7d9422e1eb16475207e91e1f", "filename": "src/test/ui/traits/vtable/vtable-diamond.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.stderr?ref=8f433adf75c9e3f1befea5115d7e84531b3668ad", "patch": "@@ -1,13 +1,13 @@\n error: vtable entries for `<S as D>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as A>::foo_a),\n-    Method(<S as B>::foo_b),\n-    Method(<S as C>::foo_c),\n-    TraitVPtr(<S as C>),\n-    Method(<S as D>::foo_d),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as A>::foo_a),\n+           Method(<S as B>::foo_b),\n+           Method(<S as C>::foo_c),\n+           TraitVPtr(<S as C>),\n+           Method(<S as D>::foo_d),\n+       ]\n   --> $DIR/vtable-diamond.rs:21:1\n    |\n LL | / trait D: B + C {\n@@ -17,12 +17,12 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as C>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as A>::foo_a),\n-    Method(<S as C>::foo_c),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as A>::foo_a),\n+           Method(<S as C>::foo_c),\n+       ]\n   --> $DIR/vtable-diamond.rs:15:1\n    |\n LL | / trait C: A {"}, {"sha": "915fd701b03365b8108962905f2cd0fa602fc035", "filename": "src/test/ui/traits/vtable/vtable-multi-level.stderr", "status": "modified", "additions": 104, "deletions": 104, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.stderr?ref=8f433adf75c9e3f1befea5115d7e84531b3668ad", "patch": "@@ -1,34 +1,34 @@\n error: vtable entries for `<S as O>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as A>::foo_a),\n-    Method(<S as B>::foo_b),\n-    TraitVPtr(<S as B>),\n-    Method(<S as C>::foo_c),\n-    Method(<S as D>::foo_d),\n-    TraitVPtr(<S as D>),\n-    Method(<S as E>::foo_e),\n-    TraitVPtr(<S as E>),\n-    Method(<S as F>::foo_f),\n-    TraitVPtr(<S as F>),\n-    Method(<S as G>::foo_g),\n-    Method(<S as H>::foo_h),\n-    TraitVPtr(<S as H>),\n-    Method(<S as I>::foo_i),\n-    TraitVPtr(<S as I>),\n-    Method(<S as J>::foo_j),\n-    TraitVPtr(<S as J>),\n-    Method(<S as K>::foo_k),\n-    TraitVPtr(<S as K>),\n-    Method(<S as L>::foo_l),\n-    TraitVPtr(<S as L>),\n-    Method(<S as M>::foo_m),\n-    TraitVPtr(<S as M>),\n-    Method(<S as N>::foo_n),\n-    TraitVPtr(<S as N>),\n-    Method(<S as O>::foo_o),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as A>::foo_a),\n+           Method(<S as B>::foo_b),\n+           TraitVPtr(<S as B>),\n+           Method(<S as C>::foo_c),\n+           Method(<S as D>::foo_d),\n+           TraitVPtr(<S as D>),\n+           Method(<S as E>::foo_e),\n+           TraitVPtr(<S as E>),\n+           Method(<S as F>::foo_f),\n+           TraitVPtr(<S as F>),\n+           Method(<S as G>::foo_g),\n+           Method(<S as H>::foo_h),\n+           TraitVPtr(<S as H>),\n+           Method(<S as I>::foo_i),\n+           TraitVPtr(<S as I>),\n+           Method(<S as J>::foo_j),\n+           TraitVPtr(<S as J>),\n+           Method(<S as K>::foo_k),\n+           TraitVPtr(<S as K>),\n+           Method(<S as L>::foo_l),\n+           TraitVPtr(<S as L>),\n+           Method(<S as M>::foo_m),\n+           TraitVPtr(<S as M>),\n+           Method(<S as N>::foo_n),\n+           TraitVPtr(<S as N>),\n+           Method(<S as O>::foo_o),\n+       ]\n   --> $DIR/vtable-multi-level.rs:95:1\n    |\n LL | / trait O: G + N {\n@@ -38,11 +38,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as B>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as B>::foo_b),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as B>::foo_b),\n+       ]\n   --> $DIR/vtable-multi-level.rs:19:1\n    |\n LL | / trait B {\n@@ -52,11 +52,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as D>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as D>::foo_d),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as D>::foo_d),\n+       ]\n   --> $DIR/vtable-multi-level.rs:30:1\n    |\n LL | / trait D {\n@@ -66,11 +66,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as E>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as E>::foo_e),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as E>::foo_e),\n+       ]\n   --> $DIR/vtable-multi-level.rs:36:1\n    |\n LL | / trait E {\n@@ -80,14 +80,14 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as F>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as D>::foo_d),\n-    Method(<S as E>::foo_e),\n-    TraitVPtr(<S as E>),\n-    Method(<S as F>::foo_f),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as D>::foo_d),\n+           Method(<S as E>::foo_e),\n+           TraitVPtr(<S as E>),\n+           Method(<S as F>::foo_f),\n+       ]\n   --> $DIR/vtable-multi-level.rs:42:1\n    |\n LL | / trait F: D + E {\n@@ -97,11 +97,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as H>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as H>::foo_h),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as H>::foo_h),\n+       ]\n   --> $DIR/vtable-multi-level.rs:53:1\n    |\n LL | / trait H {\n@@ -111,11 +111,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as I>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as I>::foo_i),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as I>::foo_i),\n+       ]\n   --> $DIR/vtable-multi-level.rs:59:1\n    |\n LL | / trait I {\n@@ -125,14 +125,14 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as J>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as H>::foo_h),\n-    Method(<S as I>::foo_i),\n-    TraitVPtr(<S as I>),\n-    Method(<S as J>::foo_j),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as H>::foo_h),\n+           Method(<S as I>::foo_i),\n+           TraitVPtr(<S as I>),\n+           Method(<S as J>::foo_j),\n+       ]\n   --> $DIR/vtable-multi-level.rs:65:1\n    |\n LL | / trait J: H + I {\n@@ -142,11 +142,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as K>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as K>::foo_k),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as K>::foo_k),\n+       ]\n   --> $DIR/vtable-multi-level.rs:71:1\n    |\n LL | / trait K {\n@@ -156,11 +156,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as L>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as L>::foo_l),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as L>::foo_l),\n+       ]\n   --> $DIR/vtable-multi-level.rs:77:1\n    |\n LL | / trait L {\n@@ -170,14 +170,14 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as M>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as K>::foo_k),\n-    Method(<S as L>::foo_l),\n-    TraitVPtr(<S as L>),\n-    Method(<S as M>::foo_m),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as K>::foo_k),\n+           Method(<S as L>::foo_l),\n+           TraitVPtr(<S as L>),\n+           Method(<S as M>::foo_m),\n+       ]\n   --> $DIR/vtable-multi-level.rs:83:1\n    |\n LL | / trait M: K + L {\n@@ -187,21 +187,21 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as N>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as H>::foo_h),\n-    Method(<S as I>::foo_i),\n-    TraitVPtr(<S as I>),\n-    Method(<S as J>::foo_j),\n-    Method(<S as K>::foo_k),\n-    TraitVPtr(<S as K>),\n-    Method(<S as L>::foo_l),\n-    TraitVPtr(<S as L>),\n-    Method(<S as M>::foo_m),\n-    TraitVPtr(<S as M>),\n-    Method(<S as N>::foo_n),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as H>::foo_h),\n+           Method(<S as I>::foo_i),\n+           TraitVPtr(<S as I>),\n+           Method(<S as J>::foo_j),\n+           Method(<S as K>::foo_k),\n+           TraitVPtr(<S as K>),\n+           Method(<S as L>::foo_l),\n+           TraitVPtr(<S as L>),\n+           Method(<S as M>::foo_m),\n+           TraitVPtr(<S as M>),\n+           Method(<S as N>::foo_n),\n+       ]\n   --> $DIR/vtable-multi-level.rs:89:1\n    |\n LL | / trait N: J + M {"}, {"sha": "f1c8947f9069f76e1b46becaa4fae1b69cb743c9", "filename": "src/test/ui/traits/vtable/vtable-multiple.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.stderr?ref=8f433adf75c9e3f1befea5115d7e84531b3668ad", "patch": "@@ -1,12 +1,12 @@\n error: vtable entries for `<S as C>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as A>::foo_a),\n-    Method(<S as B>::foo_b),\n-    TraitVPtr(<S as B>),\n-    Method(<S as C>::foo_c),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as A>::foo_a),\n+           Method(<S as B>::foo_b),\n+           TraitVPtr(<S as B>),\n+           Method(<S as C>::foo_c),\n+       ]\n   --> $DIR/vtable-multiple.rs:16:1\n    |\n LL | / trait C: A + B {\n@@ -16,11 +16,11 @@ LL | | }\n    | |_^\n \n error: vtable entries for `<S as B>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as B>::foo_b),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as B>::foo_b),\n+       ]\n   --> $DIR/vtable-multiple.rs:10:1\n    |\n LL | / trait B {"}, {"sha": "bbfbde222f3344fde1ef1a0b67325f9af535e8eb", "filename": "src/test/ui/traits/vtable/vtable-non-object-safe.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.stderr?ref=8f433adf75c9e3f1befea5115d7e84531b3668ad", "patch": "@@ -1,12 +1,12 @@\n error: vtable entries for `<std::vec::IntoIter<u8> as A>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<std::vec::IntoIter<u8> as Iterator>::next),\n-    Method(<std::vec::IntoIter<u8> as Iterator>::size_hint),\n-    Method(<std::vec::IntoIter<u8> as Iterator>::advance_by),\n-    Method(<std::vec::IntoIter<u8> as Iterator>::nth),\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<std::vec::IntoIter<u8> as Iterator>::next),\n+           Method(<std::vec::IntoIter<u8> as Iterator>::size_hint),\n+           Method(<std::vec::IntoIter<u8> as Iterator>::advance_by),\n+           Method(<std::vec::IntoIter<u8> as Iterator>::nth),\n+       ]\n   --> $DIR/vtable-non-object-safe.rs:8:1\n    |\n LL | trait A: Iterator {}"}, {"sha": "c8cf58399723cea1c3bee793631e1e7800a032fa", "filename": "src/test/ui/traits/vtable/vtable-vacant.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f433adf75c9e3f1befea5115d7e84531b3668ad/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr?ref=8f433adf75c9e3f1befea5115d7e84531b3668ad", "patch": "@@ -1,12 +1,12 @@\n error: vtable entries for `<S as B>`: [\n-    MetadataDropInPlace,\n-    MetadataSize,\n-    MetadataAlign,\n-    Method(<S as A>::foo_a1),\n-    Vacant,\n-    Method(<S as B>::foo_b1),\n-    Vacant,\n-]\n+           MetadataDropInPlace,\n+           MetadataSize,\n+           MetadataAlign,\n+           Method(<S as A>::foo_a1),\n+           Vacant,\n+           Method(<S as B>::foo_b1),\n+           Vacant,\n+       ]\n   --> $DIR/vtable-vacant.rs:15:1\n    |\n LL | / trait B: A {"}]}