{"sha": "5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYjczZmM2ZGJmOWU0ZWUxYTQ5ODY1NWNiNjA5ZWZkZjVmYTkzZWQ=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-02-22T23:37:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-02-26T16:51:39Z"}, "message": "Encode linker arguments as UTF-16 on MSVC platforms", "tree": {"sha": "b74856d311e11ef8535477fdf0aaae83e6488b47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b74856d311e11ef8535477fdf0aaae83e6488b47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed", "html_url": "https://github.com/rust-lang/rust/commit/5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bedbad61195d2eae69b43eca49c6d3e2aee8f208", "url": "https://api.github.com/repos/rust-lang/rust/commits/bedbad61195d2eae69b43eca49c6d3e2aee8f208", "html_url": "https://github.com/rust-lang/rust/commit/bedbad61195d2eae69b43eca49c6d3e2aee8f208"}], "stats": {"total": 60, "additions": 50, "deletions": 10}, "files": [{"sha": "8f308e726865cd938714c29592d6db61fce9b5a6", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed", "patch": "@@ -849,7 +849,19 @@ fn exec_linker(sess: &Session, cmd: &mut Command, tmpdir: &Path)\n         args.push_str(\"\\n\");\n     }\n     let file = tmpdir.join(\"linker-arguments\");\n-    fs::write(&file, args.as_bytes())?;\n+    let bytes = if sess.target.target.options.is_like_msvc {\n+        let mut out = vec![];\n+        // start the stream with a UTF-16 BOM\n+        for c in vec![0xFEFF].into_iter().chain(args.encode_utf16()) {\n+            // encode in little endian\n+            out.push(c as u8);\n+            out.push((c >> 8) as u8);\n+        }\n+        out\n+    } else {\n+        args.into_bytes()\n+    };\n+    fs::write(&file, &bytes)?;\n     cmd2.arg(format!(\"@{}\", file.display()));\n     return cmd2.output();\n "}, {"sha": "67d8ad0b67255bf25e7fc9ac58cf1c569d8616be", "filename": "src/test/run-make/long-linker-command-lines-cmd-exe/foo.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed/src%2Ftest%2Frun-make%2Flong-linker-command-lines-cmd-exe%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed/src%2Ftest%2Frun-make%2Flong-linker-command-lines-cmd-exe%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flong-linker-command-lines-cmd-exe%2Ffoo.rs?ref=5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed", "patch": "@@ -36,8 +36,11 @@ fn main() {\n     let ok = tmpdir.join(\"ok\");\n     let not_ok = tmpdir.join(\"not_ok\");\n     if env::var(\"YOU_ARE_A_LINKER\").is_ok() {\n-        match env::args().find(|a| a.contains(\"@\")) {\n-            Some(file) => { fs::copy(&file[1..], &ok).unwrap(); }\n+        match env::args_os().find(|a| a.to_string_lossy().contains(\"@\")) {\n+            Some(file) => {\n+                let file = file.to_str().unwrap();\n+                fs::copy(&file[1..], &ok).unwrap();\n+            }\n             None => { File::create(&not_ok).unwrap(); }\n         }\n         return\n@@ -84,11 +87,23 @@ fn main() {\n             continue\n         }\n \n-        let mut contents = String::new();\n-        File::open(&ok).unwrap().read_to_string(&mut contents).unwrap();\n+        let mut contents = Vec::new();\n+        File::open(&ok).unwrap().read_to_end(&mut contents).unwrap();\n \n         for j in 0..i {\n-            assert!(contents.contains(&format!(\"{}{}\", lib_name, j)));\n+            let exp = format!(\"{}{}\", lib_name, j);\n+            let exp = if cfg!(target_env = \"msvc\") {\n+                let mut out = Vec::with_capacity(exp.len() * 2);\n+                for c in exp.encode_utf16() {\n+                    // encode in little endian\n+                    out.push(c as u8);\n+                    out.push((c >> 8) as u8);\n+                }\n+                out\n+            } else {\n+                exp.into_bytes()\n+            };\n+            assert!(contents.windows(exp.len()).any(|w| w == &exp[..]));\n         }\n \n         break"}, {"sha": "2ac240982afc4d5c4fe650f5dc3786de8313aec3", "filename": "src/test/run-make/long-linker-command-lines/foo.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed/src%2Ftest%2Frun-make%2Flong-linker-command-lines%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed/src%2Ftest%2Frun-make%2Flong-linker-command-lines%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flong-linker-command-lines%2Ffoo.rs?ref=5db73fc6dbf9e4ee1a498655cb609efdf5fa93ed", "patch": "@@ -27,7 +27,8 @@ fn main() {\n     let tmpdir = PathBuf::from(env::var_os(\"TMPDIR\").unwrap());\n     let ok = tmpdir.join(\"ok\");\n     if env::var(\"YOU_ARE_A_LINKER\").is_ok() {\n-        if let Some(file) = env::args().find(|a| a.contains(\"@\")) {\n+        if let Some(file) = env::args_os().find(|a| a.to_string_lossy().contains(\"@\")) {\n+            let file = file.to_str().expect(\"non-utf8 file argument\");\n             fs::copy(&file[1..], &ok).unwrap();\n         }\n         return\n@@ -76,11 +77,23 @@ fn main() {\n             continue\n         }\n \n-        let mut contents = String::new();\n-        File::open(&ok).unwrap().read_to_string(&mut contents).unwrap();\n+        let mut contents = Vec::new();\n+        File::open(&ok).unwrap().read_to_end(&mut contents).unwrap();\n \n         for j in 0..i {\n-            assert!(contents.contains(&format!(\"{}{}\", lib_name, j)));\n+            let exp = format!(\"{}{}\", lib_name, j);\n+            let exp = if cfg!(target_env = \"msvc\") {\n+                let mut out = Vec::with_capacity(exp.len() * 2);\n+                for c in exp.encode_utf16() {\n+                    // encode in little endian\n+                    out.push(c as u8);\n+                    out.push((c >> 8) as u8);\n+                }\n+                out\n+            } else {\n+                exp.into_bytes()\n+            };\n+            assert!(contents.windows(exp.len()).any(|w| w == &exp[..]));\n         }\n \n         break"}]}