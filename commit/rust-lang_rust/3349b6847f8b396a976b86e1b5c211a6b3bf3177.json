{"sha": "3349b6847f8b396a976b86e1b5c211a6b3bf3177", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNDliNjg0N2Y4YjM5NmE5NzZiODZlMWI1YzIxMWE2YjNiZjMxNzc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-28T00:21:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-28T00:21:37Z"}, "message": "Rollup merge of #78447 - bugadani:typo, r=matthewjasper\n\nFix typo in  comment\n\nI hope I got all the typos in that word. :)", "tree": {"sha": "d89f95d9b351b3016f451d30ec39c70b7ef41dae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d89f95d9b351b3016f451d30ec39c70b7ef41dae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3349b6847f8b396a976b86e1b5c211a6b3bf3177", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfmLmRCRBK7hj4Ov3rIwAAdHIIAG/KB5N5LKAsvySfYYfWeV73\nPJBGWAhAOMGwPJe+lSzSpnXtpB6qaUekHM6mjoNKWyOgQKuuO43JzUS9LiiO93L1\nbKV5B3zXUqVKZqd091A3eRBT97so1q1uz2Ja1XOS/EGOCFZBjpv1ZnBSdjSorB93\nop9U7dSZcBVp1/wHKIkC7VvX2AJDSTFJ0LHiHUD98FwsJgG8WUQrpBISoEjAeBTJ\n+d25h2u3MZUH+7nbL8aAV87hWb9QqFKlgOLK/wefInyqZJtFEBuTw2AyNy+TXDYe\ngFzf7rfcTiaRcyD+kjpHI7Mx6zK0WIL4NjZY1/Pf0I32ET31Se/LKRM9npu6So4=\n=adC/\n-----END PGP SIGNATURE-----\n", "payload": "tree d89f95d9b351b3016f451d30ec39c70b7ef41dae\nparent 14b4ed20c72194444fdb4df3ecda769f354be820\nparent b01c74b73ce13a3b71985926267d909e1fd40818\nauthor Dylan DPC <dylan.dpc@gmail.com> 1603844497 +0100\ncommitter GitHub <noreply@github.com> 1603844497 +0100\n\nRollup merge of #78447 - bugadani:typo, r=matthewjasper\n\nFix typo in  comment\n\nI hope I got all the typos in that word. :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3349b6847f8b396a976b86e1b5c211a6b3bf3177", "html_url": "https://github.com/rust-lang/rust/commit/3349b6847f8b396a976b86e1b5c211a6b3bf3177", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3349b6847f8b396a976b86e1b5c211a6b3bf3177/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14b4ed20c72194444fdb4df3ecda769f354be820", "url": "https://api.github.com/repos/rust-lang/rust/commits/14b4ed20c72194444fdb4df3ecda769f354be820", "html_url": "https://github.com/rust-lang/rust/commit/14b4ed20c72194444fdb4df3ecda769f354be820"}, {"sha": "b01c74b73ce13a3b71985926267d909e1fd40818", "url": "https://api.github.com/repos/rust-lang/rust/commits/b01c74b73ce13a3b71985926267d909e1fd40818", "html_url": "https://github.com/rust-lang/rust/commit/b01c74b73ce13a3b71985926267d909e1fd40818"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "a8522547666994683d664eeeb8ae1aa9c4093140", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3349b6847f8b396a976b86e1b5c211a6b3bf3177/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3349b6847f8b396a976b86e1b5c211a6b3bf3177/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=3349b6847f8b396a976b86e1b5c211a6b3bf3177", "patch": "@@ -533,7 +533,7 @@ impl DropArena {\n         ptr::write(mem, object);\n         let result = &mut *mem;\n         // Record the destructor after doing the allocation as that may panic\n-        // and would cause `object`'s destuctor to run twice if it was recorded before\n+        // and would cause `object`'s destructor to run twice if it was recorded before\n         self.destructors\n             .borrow_mut()\n             .push(DropType { drop_fn: drop_for_type::<T>, obj: result as *mut T as *mut u8 });\n@@ -560,7 +560,7 @@ impl DropArena {\n         mem::forget(vec.drain(..));\n \n         // Record the destructors after doing the allocation as that may panic\n-        // and would cause `object`'s destuctor to run twice if it was recorded before\n+        // and would cause `object`'s destructor to run twice if it was recorded before\n         for i in 0..len {\n             destructors.push(DropType {\n                 drop_fn: drop_for_type::<T>,"}, {"sha": "4ed888784181447edbf711ce2d6c1408d5a171d8", "filename": "compiler/rustc_data_structures/src/graph/vec_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3349b6847f8b396a976b86e1b5c211a6b3bf3177/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3349b6847f8b396a976b86e1b5c211a6b3bf3177/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs?ref=3349b6847f8b396a976b86e1b5c211a6b3bf3177", "patch": "@@ -29,7 +29,7 @@ impl<N: Idx> VecGraph<N> {\n \n         // Create the *edge starts* array. We are iterating over over\n         // the (sorted) edge pairs. We maintain the invariant that the\n-        // length of the `node_starts` arary is enough to store the\n+        // length of the `node_starts` array is enough to store the\n         // current source node -- so when we see that the source node\n         // for an edge is greater than the current length, we grow the\n         // edge-starts array by just enough."}, {"sha": "29c686e5d08539ec37f67f234d7788c533677c8b", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3349b6847f8b396a976b86e1b5c211a6b3bf3177/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3349b6847f8b396a976b86e1b5c211a6b3bf3177/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=3349b6847f8b396a976b86e1b5c211a6b3bf3177", "patch": "@@ -738,14 +738,14 @@ impl<D: Decoder> Decodable<D> for Span {\n }\n \n /// Calls the provided closure, using the provided `SourceMap` to format\n-/// any spans that are debug-printed during the closure'e exectuino.\n+/// any spans that are debug-printed during the closure's execution.\n ///\n /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`\n /// (see `rustc_interface::callbacks::span_debug1). However, some parts\n /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before\n /// a `TyCtxt` is available. In this case, we fall back to\n /// the `SourceMap` provided to this function. If that is not available,\n-/// we fall back to printing the raw `Span` field values\n+/// we fall back to printing the raw `Span` field values.\n pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {\n     SESSION_GLOBALS.with(|session_globals| {\n         *session_globals.source_map.borrow_mut() = Some(source_map);"}]}