{"sha": "f20af8d43d9193a2f865ae0361e80158bce0a0a2", "node_id": "C_kwDOAAsO6NoAKGYyMGFmOGQ0M2Q5MTkzYTJmODY1YWUwMzYxZTgwMTU4YmNlMGEwYTI", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-25T21:32:31Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-29T01:18:10Z"}, "message": "Simplify transmutes in MIR InstCombine\n\nThanks to the combination of #108246 and #108442 it could already remove identity transmutes.\n\nWith this PR, it can also simplify them to `IntToInt` casts, `Discriminant` reads, or `Field` projections.", "tree": {"sha": "144789651a03cbe85404b3e80cb7842026eaed4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/144789651a03cbe85404b3e80cb7842026eaed4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f20af8d43d9193a2f865ae0361e80158bce0a0a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f20af8d43d9193a2f865ae0361e80158bce0a0a2", "html_url": "https://github.com/rust-lang/rust/commit/f20af8d43d9193a2f865ae0361e80158bce0a0a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f20af8d43d9193a2f865ae0361e80158bce0a0a2/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478cbb42b730ba4739351b72ce2aa928e78e2f81", "url": "https://api.github.com/repos/rust-lang/rust/commits/478cbb42b730ba4739351b72ce2aa928e78e2f81", "html_url": "https://github.com/rust-lang/rust/commit/478cbb42b730ba4739351b72ce2aa928e78e2f81"}], "stats": {"total": 344, "additions": 340, "deletions": 4}, "files": [{"sha": "c9750e899a51e5e5748d00796729bf993d2e4584", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f20af8d43d9193a2f865ae0361e80158bce0a0a2/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f20af8d43d9193a2f865ae0361e80158bce0a0a2/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=f20af8d43d9193a2f865ae0361e80158bce0a0a2", "patch": "@@ -3,10 +3,12 @@\n use crate::MirPass;\n use rustc_hir::Mutability;\n use rustc_middle::mir::{\n-    BinOp, Body, Constant, ConstantKind, LocalDecls, Operand, Place, ProjectionElem, Rvalue,\n-    SourceInfo, Statement, StatementKind, SwitchTargets, Terminator, TerminatorKind, UnOp,\n+    BinOp, Body, CastKind, Constant, ConstantKind, Field, LocalDecls, Operand, Place,\n+    ProjectionElem, Rvalue, SourceInfo, Statement, StatementKind, SwitchTargets, Terminator,\n+    TerminatorKind, UnOp,\n };\n use rustc_middle::ty::layout::ValidityRequirement;\n+use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, ParamEnv, SubstsRef, Ty, TyCtxt};\n use rustc_span::symbol::Symbol;\n \n@@ -145,9 +147,53 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n     }\n \n     fn combine_cast(&self, _source_info: &SourceInfo, rvalue: &mut Rvalue<'tcx>) {\n-        if let Rvalue::Cast(_kind, operand, ty) = rvalue {\n-            if operand.ty(self.local_decls, self.tcx) == *ty {\n+        if let Rvalue::Cast(kind, operand, cast_ty) = rvalue {\n+            let operand_ty = operand.ty(self.local_decls, self.tcx);\n+            if operand_ty == *cast_ty {\n                 *rvalue = Rvalue::Use(operand.clone());\n+            } else if *kind == CastKind::Transmute {\n+                // Transmuting an integer to another integer is just a signedness cast\n+                if let (ty::Int(int), ty::Uint(uint)) | (ty::Uint(uint), ty::Int(int)) = (operand_ty.kind(), cast_ty.kind())\n+                    && int.bit_width() == uint.bit_width()\n+                {\n+                    // The width check isn't strictly necessary, as different widths\n+                    // are UB and thus we'd be allowed to turn it into a cast anyway.\n+                    // But let's keep the UB around for codegen to exploit later.\n+                    // (If `CastKind::Transmute` ever becomes *not* UB for mismatched sizes,\n+                    // then the width check is necessary for big-endian correctness.)\n+                    *kind = CastKind::IntToInt;\n+                    return;\n+                }\n+\n+                // Transmuting a fieldless enum to its repr is a discriminant read\n+                if let ty::Adt(adt_def, ..) = operand_ty.kind()\n+                    && adt_def.is_enum()\n+                    && adt_def.is_payloadfree()\n+                    && let Some(place) = operand.place()\n+                    && let Some(repr_int) = adt_def.repr().int\n+                    && repr_int.to_ty(self.tcx) == *cast_ty\n+                {\n+                    *rvalue = Rvalue::Discriminant(place);\n+                    return;\n+                }\n+\n+                // Transmuting a transparent struct/union to a field's type is a projection\n+                if let ty::Adt(adt_def, substs) = operand_ty.kind()\n+                    && adt_def.repr().transparent()\n+                    && (adt_def.is_struct() || adt_def.is_union())\n+                    && let Some(place) = operand.place()\n+                {\n+                    let variant = adt_def.non_enum_variant();\n+                    for (i, field) in variant.fields.iter().enumerate() {\n+                        let field_ty = field.ty(self.tcx, substs);\n+                        if field_ty == *cast_ty {\n+                            let place = place.project_deeper(&[ProjectionElem::Field(Field::from_usize(i), *cast_ty)], self.tcx);\n+                            let operand = if operand.is_move() { Operand::Move(place) } else { Operand::Copy(place) };\n+                            *rvalue = Rvalue::Use(operand);\n+                            return;\n+                        }\n+                    }\n+                }\n             }\n         }\n     }"}, {"sha": "c44a14075ef6fa3f65551c42aeb02b0eceeba477", "filename": "tests/mir-opt/combine_transmutes.adt_transmutes.InstCombine.diff", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/f20af8d43d9193a2f865ae0361e80158bce0a0a2/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f20af8d43d9193a2f865ae0361e80158bce0a0a2/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstCombine.diff?ref=f20af8d43d9193a2f865ae0361e80158bce0a0a2", "patch": "@@ -0,0 +1,158 @@\n+- // MIR for `adt_transmutes` before InstCombine\n++ // MIR for `adt_transmutes` after InstCombine\n+  \n+  fn adt_transmutes() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/combine_transmutes.rs:+0:32: +0:32\n+      let _1: u8;                          // in scope 0 at $DIR/combine_transmutes.rs:+1:9: +1:11\n+      let mut _2: EnumNoRepr;              // in scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:41\n+      let mut _4: EnumNoRepr;              // in scope 0 at $DIR/combine_transmutes.rs:+2:28: +2:41\n+      let mut _6: EnumReprIsize;           // in scope 0 at $DIR/combine_transmutes.rs:+3:31: +3:47\n+      let mut _8: EnumReprIsize;           // in scope 0 at $DIR/combine_transmutes.rs:+4:31: +4:47\n+      let mut _10: std::cmp::Ordering;     // in scope 0 at $DIR/combine_transmutes.rs:+5:28: +5:52\n+      let mut _12: std::cmp::Ordering;     // in scope 0 at $DIR/combine_transmutes.rs:+6:28: +6:52\n+      let mut _14: std::option::Option<std::num::NonZeroU8>; // in scope 0 at $DIR/combine_transmutes.rs:+7:28: +7:58\n+      let mut _16: std::num::Wrapping<i16>; // in scope 0 at $DIR/combine_transmutes.rs:+8:29: +8:54\n+      let mut _18: std::num::Wrapping<i16>; // in scope 0 at $DIR/combine_transmutes.rs:+9:29: +9:54\n+      let mut _20: Union32;                // in scope 0 at $DIR/combine_transmutes.rs:+10:29: +10:47\n+      let mut _22: Union32;                // in scope 0 at $DIR/combine_transmutes.rs:+11:29: +11:47\n+      let mut _24: std::mem::MaybeUninit<std::string::String>; // in scope 0 at $DIR/combine_transmutes.rs:+12:46: +12:77\n+      scope 1 {\n+          debug _a => _1;                  // in scope 1 at $DIR/combine_transmutes.rs:+1:9: +1:11\n+          let _3: i8;                      // in scope 1 at $DIR/combine_transmutes.rs:+2:9: +2:11\n+          scope 2 {\n+              debug _a => _3;              // in scope 2 at $DIR/combine_transmutes.rs:+2:9: +2:11\n+              let _5: usize;               // in scope 2 at $DIR/combine_transmutes.rs:+3:9: +3:11\n+              scope 3 {\n+                  debug _a => _5;          // in scope 3 at $DIR/combine_transmutes.rs:+3:9: +3:11\n+                  let _7: isize;           // in scope 3 at $DIR/combine_transmutes.rs:+4:9: +4:11\n+                  scope 4 {\n+                      debug _a => _7;      // in scope 4 at $DIR/combine_transmutes.rs:+4:9: +4:11\n+                      let _9: u8;          // in scope 4 at $DIR/combine_transmutes.rs:+5:9: +5:11\n+                      scope 5 {\n+                          debug _a => _9;  // in scope 5 at $DIR/combine_transmutes.rs:+5:9: +5:11\n+                          let _11: i8;     // in scope 5 at $DIR/combine_transmutes.rs:+6:9: +6:11\n+                          scope 6 {\n+                              debug _a => _11; // in scope 6 at $DIR/combine_transmutes.rs:+6:9: +6:11\n+                              let _13: u8; // in scope 6 at $DIR/combine_transmutes.rs:+7:9: +7:11\n+                              scope 7 {\n+                                  debug _a => _13; // in scope 7 at $DIR/combine_transmutes.rs:+7:9: +7:11\n+                                  let _15: i16; // in scope 7 at $DIR/combine_transmutes.rs:+8:9: +8:11\n+                                  scope 8 {\n+                                      debug _a => _15; // in scope 8 at $DIR/combine_transmutes.rs:+8:9: +8:11\n+                                      let _17: u16; // in scope 8 at $DIR/combine_transmutes.rs:+9:9: +9:11\n+                                      scope 9 {\n+                                          debug _a => _17; // in scope 9 at $DIR/combine_transmutes.rs:+9:9: +9:11\n+                                          let _19: u32; // in scope 9 at $DIR/combine_transmutes.rs:+10:9: +10:11\n+                                          scope 10 {\n+                                              debug _a => _19; // in scope 10 at $DIR/combine_transmutes.rs:+10:9: +10:11\n+                                              let _21: i32; // in scope 10 at $DIR/combine_transmutes.rs:+11:9: +11:11\n+                                              scope 11 {\n+                                                  debug _a => _21; // in scope 11 at $DIR/combine_transmutes.rs:+11:9: +11:11\n+                                                  let _23: std::mem::ManuallyDrop<std::string::String>; // in scope 11 at $DIR/combine_transmutes.rs:+12:9: +12:11\n+                                                  scope 12 {\n+                                                      debug _a => _23; // in scope 12 at $DIR/combine_transmutes.rs:+12:9: +12:11\n+                                                  }\n+                                              }\n+                                          }\n+                                      }\n+                                  }\n+                              }\n+                          }\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/combine_transmutes.rs:+1:9: +1:11\n+          StorageLive(_2);                 // scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:41\n+          _2 = EnumNoRepr::A;              // scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:41\n+          _1 = move _2 as u8 (Transmute);  // scope 0 at $DIR/combine_transmutes.rs:+1:18: +1:42\n+          StorageDead(_2);                 // scope 0 at $DIR/combine_transmutes.rs:+1:41: +1:42\n+          StorageLive(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+2:9: +2:11\n+          StorageLive(_4);                 // scope 1 at $DIR/combine_transmutes.rs:+2:28: +2:41\n+          _4 = EnumNoRepr::B;              // scope 1 at $DIR/combine_transmutes.rs:+2:28: +2:41\n+          _3 = move _4 as i8 (Transmute);  // scope 1 at $DIR/combine_transmutes.rs:+2:18: +2:42\n+          StorageDead(_4);                 // scope 1 at $DIR/combine_transmutes.rs:+2:41: +2:42\n+          StorageLive(_5);                 // scope 2 at $DIR/combine_transmutes.rs:+3:9: +3:11\n+          StorageLive(_6);                 // scope 2 at $DIR/combine_transmutes.rs:+3:31: +3:47\n+          _6 = EnumReprIsize::A;           // scope 2 at $DIR/combine_transmutes.rs:+3:31: +3:47\n+          _5 = move _6 as usize (Transmute); // scope 2 at $DIR/combine_transmutes.rs:+3:21: +3:48\n+          StorageDead(_6);                 // scope 2 at $DIR/combine_transmutes.rs:+3:47: +3:48\n+          StorageLive(_7);                 // scope 3 at $DIR/combine_transmutes.rs:+4:9: +4:11\n+          StorageLive(_8);                 // scope 3 at $DIR/combine_transmutes.rs:+4:31: +4:47\n+          _8 = EnumReprIsize::B;           // scope 3 at $DIR/combine_transmutes.rs:+4:31: +4:47\n+-         _7 = move _8 as isize (Transmute); // scope 3 at $DIR/combine_transmutes.rs:+4:21: +4:48\n++         _7 = discriminant(_8);           // scope 3 at $DIR/combine_transmutes.rs:+4:21: +4:48\n+          StorageDead(_8);                 // scope 3 at $DIR/combine_transmutes.rs:+4:47: +4:48\n+          StorageLive(_9);                 // scope 4 at $DIR/combine_transmutes.rs:+5:9: +5:11\n+          StorageLive(_10);                // scope 4 at $DIR/combine_transmutes.rs:+5:28: +5:52\n+          _10 = Less;                      // scope 4 at $DIR/combine_transmutes.rs:+5:28: +5:52\n+          _9 = move _10 as u8 (Transmute); // scope 4 at $DIR/combine_transmutes.rs:+5:18: +5:53\n+          StorageDead(_10);                // scope 4 at $DIR/combine_transmutes.rs:+5:52: +5:53\n+          StorageLive(_11);                // scope 5 at $DIR/combine_transmutes.rs:+6:9: +6:11\n+          StorageLive(_12);                // scope 5 at $DIR/combine_transmutes.rs:+6:28: +6:52\n+          _12 = Less;                      // scope 5 at $DIR/combine_transmutes.rs:+6:28: +6:52\n+-         _11 = move _12 as i8 (Transmute); // scope 5 at $DIR/combine_transmutes.rs:+6:18: +6:53\n++         _11 = discriminant(_12);         // scope 5 at $DIR/combine_transmutes.rs:+6:18: +6:53\n+          StorageDead(_12);                // scope 5 at $DIR/combine_transmutes.rs:+6:52: +6:53\n+          StorageLive(_13);                // scope 6 at $DIR/combine_transmutes.rs:+7:9: +7:11\n+          StorageLive(_14);                // scope 6 at $DIR/combine_transmutes.rs:+7:28: +7:58\n+          _14 = Option::<NonZeroU8>::Some(const _); // scope 6 at $DIR/combine_transmutes.rs:+7:28: +7:58\n+                                           // mir::Constant\n+                                           // + span: $DIR/combine_transmutes.rs:41:33: 41:57\n+                                           // + literal: Const { ty: NonZeroU8, val: Unevaluated(NonZeroU8::MAX, [], None) }\n+          _13 = move _14 as u8 (Transmute); // scope 6 at $DIR/combine_transmutes.rs:+7:18: +7:59\n+          StorageDead(_14);                // scope 6 at $DIR/combine_transmutes.rs:+7:58: +7:59\n+          StorageLive(_15);                // scope 7 at $DIR/combine_transmutes.rs:+8:9: +8:11\n+          StorageLive(_16);                // scope 7 at $DIR/combine_transmutes.rs:+8:29: +8:54\n+          _16 = Wrapping::<i16>(const 0_i16); // scope 7 at $DIR/combine_transmutes.rs:+8:29: +8:54\n+-         _15 = move _16 as i16 (Transmute); // scope 7 at $DIR/combine_transmutes.rs:+8:19: +8:55\n++         _15 = move (_16.0: i16);         // scope 7 at $DIR/combine_transmutes.rs:+8:19: +8:55\n+          StorageDead(_16);                // scope 7 at $DIR/combine_transmutes.rs:+8:54: +8:55\n+          StorageLive(_17);                // scope 8 at $DIR/combine_transmutes.rs:+9:9: +9:11\n+          StorageLive(_18);                // scope 8 at $DIR/combine_transmutes.rs:+9:29: +9:54\n+          _18 = Wrapping::<i16>(const 0_i16); // scope 8 at $DIR/combine_transmutes.rs:+9:29: +9:54\n+          _17 = move _18 as u16 (Transmute); // scope 8 at $DIR/combine_transmutes.rs:+9:19: +9:55\n+          StorageDead(_18);                // scope 8 at $DIR/combine_transmutes.rs:+9:54: +9:55\n+          StorageLive(_19);                // scope 9 at $DIR/combine_transmutes.rs:+10:9: +10:11\n+          StorageLive(_20);                // scope 9 at $DIR/combine_transmutes.rs:+10:29: +10:47\n+          _20 = Union32 { u32: const 0_i32 }; // scope 9 at $DIR/combine_transmutes.rs:+10:29: +10:47\n+          _19 = move _20 as u32 (Transmute); // scope 9 at $DIR/combine_transmutes.rs:+10:19: +10:48\n+          StorageDead(_20);                // scope 9 at $DIR/combine_transmutes.rs:+10:47: +10:48\n+          StorageLive(_21);                // scope 10 at $DIR/combine_transmutes.rs:+11:9: +11:11\n+          StorageLive(_22);                // scope 10 at $DIR/combine_transmutes.rs:+11:29: +11:47\n+          _22 = Union32 { u32: const 0_u32 }; // scope 10 at $DIR/combine_transmutes.rs:+11:29: +11:47\n+          _21 = move _22 as i32 (Transmute); // scope 10 at $DIR/combine_transmutes.rs:+11:19: +11:48\n+          StorageDead(_22);                // scope 10 at $DIR/combine_transmutes.rs:+11:47: +11:48\n+          StorageLive(_23);                // scope 11 at $DIR/combine_transmutes.rs:+12:9: +12:11\n+          StorageLive(_24);                // scope 11 at $DIR/combine_transmutes.rs:+12:46: +12:77\n+          _24 = MaybeUninit::<String>::uninit() -> bb1; // scope 11 at $DIR/combine_transmutes.rs:+12:46: +12:77\n+                                           // mir::Constant\n+                                           // + span: $DIR/combine_transmutes.rs:46:46: 46:75\n+                                           // + user_ty: UserType(23)\n+                                           // + literal: Const { ty: fn() -> MaybeUninit<String> {MaybeUninit::<String>::uninit}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         _23 = move _24 as std::mem::ManuallyDrop<std::string::String> (Transmute); // scope 11 at $DIR/combine_transmutes.rs:+12:36: +12:78\n++         _23 = move (_24.1: std::mem::ManuallyDrop<std::string::String>); // scope 11 at $DIR/combine_transmutes.rs:+12:36: +12:78\n+          StorageDead(_24);                // scope 11 at $DIR/combine_transmutes.rs:+12:77: +12:78\n+          _0 = const ();                   // scope 0 at $DIR/combine_transmutes.rs:+0:32: +13:2\n+          StorageDead(_23);                // scope 11 at $DIR/combine_transmutes.rs:+13:1: +13:2\n+          StorageDead(_21);                // scope 10 at $DIR/combine_transmutes.rs:+13:1: +13:2\n+          StorageDead(_19);                // scope 9 at $DIR/combine_transmutes.rs:+13:1: +13:2\n+          StorageDead(_17);                // scope 8 at $DIR/combine_transmutes.rs:+13:1: +13:2\n+          StorageDead(_15);                // scope 7 at $DIR/combine_transmutes.rs:+13:1: +13:2\n+          StorageDead(_13);                // scope 6 at $DIR/combine_transmutes.rs:+13:1: +13:2\n+          StorageDead(_11);                // scope 5 at $DIR/combine_transmutes.rs:+13:1: +13:2\n+          StorageDead(_9);                 // scope 4 at $DIR/combine_transmutes.rs:+13:1: +13:2\n+          StorageDead(_7);                 // scope 3 at $DIR/combine_transmutes.rs:+13:1: +13:2\n+          StorageDead(_5);                 // scope 2 at $DIR/combine_transmutes.rs:+13:1: +13:2\n+          StorageDead(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+13:1: +13:2\n+          StorageDead(_1);                 // scope 0 at $DIR/combine_transmutes.rs:+13:1: +13:2\n+          return;                          // scope 0 at $DIR/combine_transmutes.rs:+13:2: +13:2\n+      }\n+  }\n+  "}, {"sha": "c83c9f5acf484e094e5a5f40f25d1b1d747f867b", "filename": "tests/mir-opt/combine_transmutes.identity_transmutes.InstCombine.diff", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f20af8d43d9193a2f865ae0361e80158bce0a0a2/tests%2Fmir-opt%2Fcombine_transmutes.identity_transmutes.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f20af8d43d9193a2f865ae0361e80158bce0a0a2/tests%2Fmir-opt%2Fcombine_transmutes.identity_transmutes.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.identity_transmutes.InstCombine.diff?ref=f20af8d43d9193a2f865ae0361e80158bce0a0a2", "patch": "@@ -0,0 +1,43 @@\n+- // MIR for `identity_transmutes` before InstCombine\n++ // MIR for `identity_transmutes` after InstCombine\n+  \n+  fn identity_transmutes() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/combine_transmutes.rs:+0:37: +0:37\n+      let _1: i32;                         // in scope 0 at $DIR/combine_transmutes.rs:+2:9: +2:11\n+      let mut _3: std::vec::Vec<i32>;      // in scope 0 at $DIR/combine_transmutes.rs:+3:46: +3:56\n+      scope 1 {\n+          debug _a => _1;                  // in scope 1 at $DIR/combine_transmutes.rs:+2:9: +2:11\n+          let _2: std::vec::Vec<i32>;      // in scope 1 at $DIR/combine_transmutes.rs:+3:9: +3:11\n+          scope 2 {\n+              debug _a => _2;              // in scope 2 at $DIR/combine_transmutes.rs:+3:9: +3:11\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/combine_transmutes.rs:+2:9: +2:11\n+-         _1 = const 1_i32 as i32 (Transmute); // scope 0 at $DIR/combine_transmutes.rs:+2:14: +2:38\n++         _1 = const 1_i32;                // scope 0 at $DIR/combine_transmutes.rs:+2:14: +2:38\n+          StorageLive(_2);                 // scope 1 at $DIR/combine_transmutes.rs:+3:9: +3:11\n+          StorageLive(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+3:46: +3:56\n+          _3 = Vec::<i32>::new() -> bb1;   // scope 1 at $DIR/combine_transmutes.rs:+3:46: +3:56\n+                                           // mir::Constant\n+                                           // + span: $DIR/combine_transmutes.rs:15:46: 15:54\n+                                           // + user_ty: UserType(0)\n+                                           // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         _2 = move _3 as std::vec::Vec<i32> (Transmute); // scope 1 at $DIR/combine_transmutes.rs:+3:14: +3:57\n++         _2 = move _3;                    // scope 1 at $DIR/combine_transmutes.rs:+3:14: +3:57\n+          StorageDead(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+3:56: +3:57\n+          _0 = const ();                   // scope 0 at $DIR/combine_transmutes.rs:+0:37: +4:2\n+          drop(_2) -> bb2;                 // scope 1 at $DIR/combine_transmutes.rs:+4:1: +4:2\n+      }\n+  \n+      bb2: {\n+          StorageDead(_2);                 // scope 1 at $DIR/combine_transmutes.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/combine_transmutes.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/combine_transmutes.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "8de7c34e6b2dac3ab0296f3ddb257d78c1fdf892", "filename": "tests/mir-opt/combine_transmutes.integer_transmutes.InstCombine.diff", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f20af8d43d9193a2f865ae0361e80158bce0a0a2/tests%2Fmir-opt%2Fcombine_transmutes.integer_transmutes.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f20af8d43d9193a2f865ae0361e80158bce0a0a2/tests%2Fmir-opt%2Fcombine_transmutes.integer_transmutes.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.integer_transmutes.InstCombine.diff?ref=f20af8d43d9193a2f865ae0361e80158bce0a0a2", "patch": "@@ -0,0 +1,24 @@\n+- // MIR for `integer_transmutes` before InstCombine\n++ // MIR for `integer_transmutes` after InstCombine\n+  \n+  fn integer_transmutes() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/combine_transmutes.rs:+0:36: +0:36\n+      let mut _1: u32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _2: i64;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: i64;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _4: u32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _5: usize;                   // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+-         _1 = const 1_i32 as u32 (Transmute); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n++         _1 = const 1_i32 as u32 (IntToInt); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _2 = const 1_i32 as i64 (Transmute); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+-         _3 = const 1_u64 as i64 (Transmute); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n++         _3 = const 1_u64 as i64 (IntToInt); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _4 = const 1_u64 as u32 (Transmute); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+-         _5 = const 1_isize as usize (Transmute); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n++         _5 = const 1_isize as usize (IntToInt); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          return;                          // scope 0 at $DIR/combine_transmutes.rs:+8:13: +8:21\n+      }\n+  }\n+  "}, {"sha": "de9b9c35c030b3a7a4c90a890d8cdc35b3666fb5", "filename": "tests/mir-opt/combine_transmutes.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/f20af8d43d9193a2f865ae0361e80158bce0a0a2/tests%2Fmir-opt%2Fcombine_transmutes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f20af8d43d9193a2f865ae0361e80158bce0a0a2/tests%2Fmir-opt%2Fcombine_transmutes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.rs?ref=f20af8d43d9193a2f865ae0361e80158bce0a0a2", "patch": "@@ -0,0 +1,65 @@\n+// unit-test: InstCombine\n+// compile-flags: -C panic=abort\n+\n+#![crate_type = \"lib\"]\n+#![feature(core_intrinsics)]\n+#![feature(custom_mir)]\n+\n+use std::intrinsics::mir::*;\n+use std::mem::{MaybeUninit, ManuallyDrop, transmute};\n+\n+// EMIT_MIR combine_transmutes.identity_transmutes.InstCombine.diff\n+pub unsafe fn identity_transmutes() {\n+    // These are nops and should be removed\n+    let _a = transmute::<i32, i32>(1);\n+    let _a = transmute::<Vec<i32>, Vec<i32>>(Vec::new());\n+}\n+\n+#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n+// EMIT_MIR combine_transmutes.integer_transmutes.InstCombine.diff\n+pub unsafe fn integer_transmutes() {\n+    mir! {\n+        {\n+            let A = CastTransmute::<i32, u32>(1); // Can be a cast\n+            let B = CastTransmute::<i32, i64>(1); // UB\n+            let C = CastTransmute::<u64, i64>(1); // Can be a cast\n+            let D = CastTransmute::<u64, u32>(1); // UB\n+            let E = CastTransmute::<isize, usize>(1); // Can be a cast\n+            Return()\n+        }\n+    }\n+}\n+\n+// EMIT_MIR combine_transmutes.adt_transmutes.InstCombine.diff\n+pub unsafe fn adt_transmutes() {\n+    let _a: u8 = transmute(EnumNoRepr::A);\n+    let _a: i8 = transmute(EnumNoRepr::B);\n+    let _a: usize = transmute(EnumReprIsize::A);\n+    let _a: isize = transmute(EnumReprIsize::B);\n+    let _a: u8 = transmute(std::cmp::Ordering::Less);\n+    let _a: i8 = transmute(std::cmp::Ordering::Less);\n+    let _a: u8 = transmute(Some(std::num::NonZeroU8::MAX));\n+    let _a: i16 = transmute(std::num::Wrapping(0_i16));\n+    let _a: u16 = transmute(std::num::Wrapping(0_i16));\n+    let _a: u32 = transmute(Union32 { i32: 0 });\n+    let _a: i32 = transmute(Union32 { u32: 0 });\n+    let _a: ManuallyDrop<String> = transmute(MaybeUninit::<String>::uninit());\n+}\n+\n+#[inline(always)]\n+#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n+const unsafe fn mir_transmute<T, U>(x: T) -> U {\n+    mir!{\n+        {\n+            RET = CastTransmute(x);\n+            Return()\n+        }\n+    }\n+}\n+\n+pub enum EnumNoRepr { A, B, C }\n+\n+#[repr(isize)]\n+pub enum EnumReprIsize { A, B, C }\n+\n+pub union Union32 { u32: u32, i32: i32 }"}]}