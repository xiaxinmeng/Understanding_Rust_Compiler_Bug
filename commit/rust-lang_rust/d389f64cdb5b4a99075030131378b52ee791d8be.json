{"sha": "d389f64cdb5b4a99075030131378b52ee791d8be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzODlmNjRjZGI1YjRhOTkwNzUwMzAxMzEzNzhiNTJlZTc5MWQ4YmU=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-11-14T00:19:25Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-11-15T23:18:50Z"}, "message": "Fix spurious CI filures due to OOM\n\nFixes #66342", "tree": {"sha": "f3eae48558e1cbbdee9470cbfa7c51ec42b85c37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3eae48558e1cbbdee9470cbfa7c51ec42b85c37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d389f64cdb5b4a99075030131378b52ee791d8be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d389f64cdb5b4a99075030131378b52ee791d8be", "html_url": "https://github.com/rust-lang/rust/commit/d389f64cdb5b4a99075030131378b52ee791d8be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d389f64cdb5b4a99075030131378b52ee791d8be/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bd30ce2aac40c7698aa4a1b9520aa649ff2d1c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd30ce2aac40c7698aa4a1b9520aa649ff2d1c5", "html_url": "https://github.com/rust-lang/rust/commit/1bd30ce2aac40c7698aa4a1b9520aa649ff2d1c5"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "979d109aa05b919efd805f03f2241d3d563e9a50", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d389f64cdb5b4a99075030131378b52ee791d8be/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d389f64cdb5b4a99075030131378b52ee791d8be/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=d389f64cdb5b4a99075030131378b52ee791d8be", "patch": "@@ -22,7 +22,7 @@ use rustc::ty::subst::InternalSubsts;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::IndexVec;\n use rustc::ty::layout::{\n-    LayoutOf, TyLayout, LayoutError, HasTyCtxt, TargetDataLayout, HasDataLayout,\n+    LayoutOf, TyLayout, LayoutError, HasTyCtxt, TargetDataLayout, HasDataLayout, Size,\n };\n \n use crate::rustc::ty::subst::Subst;\n@@ -35,6 +35,9 @@ use crate::interpret::{\n use crate::const_eval::error_to_const_error;\n use crate::transform::{MirPass, MirSource};\n \n+/// The maximum number of bytes that we'll allocate space for a return value.\n+const MAX_ALLOC_LIMIT: u64 = 1024;\n+\n pub struct ConstProp;\n \n impl<'tcx> MirPass<'tcx> for ConstProp {\n@@ -313,8 +316,10 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             ecx\n                 .layout_of(body.return_ty().subst(tcx, substs))\n                 .ok()\n-                // Don't bother allocating memory for ZST types which have no values.\n-                .filter(|ret_layout| !ret_layout.is_zst())\n+                // Don't bother allocating memory for ZST types which have no values\n+                // or for large values.\n+                .filter(|ret_layout| !ret_layout.is_zst() &&\n+                                     ret_layout.size < Size::from_bytes(MAX_ALLOC_LIMIT))\n                 .map(|ret_layout| ecx.allocate(ret_layout, MemoryKind::Stack));\n \n         ecx.push_stack_frame("}, {"sha": "fa2a6f7567316372d07fd97909add79d11ac154d", "filename": "src/test/ui/consts/issue-66342.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d389f64cdb5b4a99075030131378b52ee791d8be/src%2Ftest%2Fui%2Fconsts%2Fissue-66342.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d389f64cdb5b4a99075030131378b52ee791d8be/src%2Ftest%2Fui%2Fconsts%2Fissue-66342.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66342.rs?ref=d389f64cdb5b4a99075030131378b52ee791d8be", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+fn foo() -> [u8; 4 * 1024 * 1024 * 1024 * 1024] {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    foo();\n+}"}]}