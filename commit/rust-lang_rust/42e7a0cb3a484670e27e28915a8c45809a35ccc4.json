{"sha": "42e7a0cb3a484670e27e28915a8c45809a35ccc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZTdhMGNiM2E0ODQ2NzBlMjdlMjg5MTVhOGM0NTgwOWEzNWNjYzQ=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-08-08T03:47:33Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-08-09T19:25:22Z"}, "message": "rustc_mir: use IndexMap in BorrowSet", "tree": {"sha": "941049514beccceaf081ec8478a89a438661dd9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/941049514beccceaf081ec8478a89a438661dd9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42e7a0cb3a484670e27e28915a8c45809a35ccc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42e7a0cb3a484670e27e28915a8c45809a35ccc4", "html_url": "https://github.com/rust-lang/rust/commit/42e7a0cb3a484670e27e28915a8c45809a35ccc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42e7a0cb3a484670e27e28915a8c45809a35ccc4/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "952daa20b4296667b0d21750a4dc5e03a4c8a55b", "url": "https://api.github.com/repos/rust-lang/rust/commits/952daa20b4296667b0d21750a4dc5e03a4c8a55b", "html_url": "https://github.com/rust-lang/rust/commit/952daa20b4296667b0d21750a4dc5e03a4c8a55b"}], "stats": {"total": 95, "additions": 52, "deletions": 43}, "files": [{"sha": "b4299fbc5a1fe8128e5710c8cfb742d3d6095526", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/42e7a0cb3a484670e27e28915a8c45809a35ccc4/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e7a0cb3a484670e27e28915a8c45809a35ccc4/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=42e7a0cb3a484670e27e28915a8c45809a35ccc4", "patch": "@@ -3,9 +3,8 @@ use crate::borrow_check::path_utils::allow_two_phase_borrow;\n use crate::borrow_check::place_ext::PlaceExt;\n use crate::dataflow::indexes::BorrowIndex;\n use crate::dataflow::move_paths::MoveData;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::IndexVec;\n use rustc_middle::mir::traversal;\n use rustc_middle::mir::visit::{MutatingUseContext, NonUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, Body, Local, Location};\n@@ -15,14 +14,11 @@ use std::ops::Index;\n \n crate struct BorrowSet<'tcx> {\n     /// The fundamental map relating bitvector indexes to the borrows\n-    /// in the MIR.\n-    crate borrows: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n-\n-    /// Each borrow is also uniquely identified in the MIR by the\n-    /// `Location` of the assignment statement in which it appears on\n-    /// the right hand side; we map each such location to the\n-    /// corresponding `BorrowIndex`.\n-    crate location_map: FxHashMap<Location, BorrowIndex>,\n+    /// in the MIR. Each borrow is also uniquely identified in the MIR\n+    /// by the `Location` of the assignment statement in which it\n+    /// appears on the right hand side. Thus the location is the map\n+    /// key, and its position in the map corresponds to `BorrowIndex`.\n+    crate location_map: FxIndexMap<Location, BorrowData<'tcx>>,\n \n     /// Locations which activate borrows.\n     /// NOTE: a given location may activate more than one borrow in the future\n@@ -40,7 +36,7 @@ impl<'tcx> Index<BorrowIndex> for BorrowSet<'tcx> {\n     type Output = BorrowData<'tcx>;\n \n     fn index(&self, index: BorrowIndex) -> &BorrowData<'tcx> {\n-        &self.borrows[index]\n+        &self.location_map[index.as_usize()]\n     }\n }\n \n@@ -129,7 +125,6 @@ impl<'tcx> BorrowSet<'tcx> {\n         let mut visitor = GatherBorrows {\n             tcx,\n             body: &body,\n-            idx_vec: IndexVec::new(),\n             location_map: Default::default(),\n             activation_map: Default::default(),\n             local_map: Default::default(),\n@@ -146,7 +141,6 @@ impl<'tcx> BorrowSet<'tcx> {\n         }\n \n         BorrowSet {\n-            borrows: visitor.idx_vec,\n             location_map: visitor.location_map,\n             activation_map: visitor.activation_map,\n             local_map: visitor.local_map,\n@@ -157,13 +151,32 @@ impl<'tcx> BorrowSet<'tcx> {\n     crate fn activations_at_location(&self, location: Location) -> &[BorrowIndex] {\n         self.activation_map.get(&location).map(|activations| &activations[..]).unwrap_or(&[])\n     }\n+\n+    crate fn len(&self) -> usize {\n+        self.location_map.len()\n+    }\n+\n+    crate fn indices(&self) -> impl Iterator<Item = BorrowIndex> {\n+        BorrowIndex::from_usize(0)..BorrowIndex::from_usize(self.len())\n+    }\n+\n+    crate fn iter_enumerated(&self) -> impl Iterator<Item = (BorrowIndex, &BorrowData<'tcx>)> {\n+        self.indices().zip(self.location_map.values())\n+    }\n+\n+    crate fn get_index_of(&self, location: &Location) -> Option<BorrowIndex> {\n+        self.location_map.get_index_of(location).map(BorrowIndex::from)\n+    }\n+\n+    crate fn contains(&self, location: &Location) -> bool {\n+        self.location_map.contains_key(location)\n+    }\n }\n \n struct GatherBorrows<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n-    idx_vec: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n-    location_map: FxHashMap<Location, BorrowIndex>,\n+    location_map: FxIndexMap<Location, BorrowData<'tcx>>,\n     activation_map: FxHashMap<Location, Vec<BorrowIndex>>,\n     local_map: FxHashMap<mir::Local, FxHashSet<BorrowIndex>>,\n \n@@ -203,8 +216,8 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'tcx> {\n                 borrowed_place: *borrowed_place,\n                 assigned_place: *assigned_place,\n             };\n-            let idx = self.idx_vec.push(borrow);\n-            self.location_map.insert(location, idx);\n+            let (idx, _) = self.location_map.insert_full(location, borrow);\n+            let idx = BorrowIndex::from(idx);\n \n             self.insert_as_pending_if_two_phase(location, assigned_place, kind, idx);\n \n@@ -224,7 +237,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'tcx> {\n         //\n         //     TMP = &mut place\n         if let Some(&borrow_index) = self.pending_activations.get(temp) {\n-            let borrow_data = &mut self.idx_vec[borrow_index];\n+            let borrow_data = &mut self.location_map[borrow_index.as_usize()];\n \n             // Watch out: the use of TMP in the borrow itself\n             // doesn't count as an activation. =)\n@@ -265,8 +278,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'tcx> {\n         if let mir::Rvalue::Ref(region, kind, ref place) = *rvalue {\n             // double-check that we already registered a BorrowData for this\n \n-            let borrow_index = self.location_map[&location];\n-            let borrow_data = &self.idx_vec[borrow_index];\n+            let borrow_data = &self.location_map[&location];\n             assert_eq!(borrow_data.reserve_location, location);\n             assert_eq!(borrow_data.kind, kind);\n             assert_eq!(borrow_data.region, region.to_region_vid());\n@@ -316,7 +328,7 @@ impl<'a, 'tcx> GatherBorrows<'a, 'tcx> {\n         // Consider the borrow not activated to start. When we find an activation, we'll update\n         // this field.\n         {\n-            let borrow_data = &mut self.idx_vec[borrow_index];\n+            let borrow_data = &mut self.location_map[borrow_index.as_usize()];\n             borrow_data.activation_location = TwoPhaseActivation::NotActivated;\n         }\n \n@@ -332,7 +344,7 @@ impl<'a, 'tcx> GatherBorrows<'a, 'tcx> {\n                        at borrow_index: {:?} with associated data {:?}\",\n                 temp,\n                 old_index,\n-                self.idx_vec[old_index]\n+                self.location_map[old_index.as_usize()]\n             );\n         }\n     }"}, {"sha": "33b09dcb888ed680cfa676663cd5010b850e35da", "filename": "src/librustc_mir/borrow_check/constraint_generation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42e7a0cb3a484670e27e28915a8c45809a35ccc4/src%2Flibrustc_mir%2Fborrow_check%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e7a0cb3a484670e27e28915a8c45809a35ccc4/src%2Flibrustc_mir%2Fborrow_check%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconstraint_generation.rs?ref=42e7a0cb3a484670e27e28915a8c45809a35ccc4", "patch": "@@ -217,7 +217,7 @@ impl<'cx, 'cg, 'tcx> ConstraintGeneration<'cx, 'cg, 'tcx> {\n                             let places_conflict = places_conflict::places_conflict(\n                                 self.infcx.tcx,\n                                 self.body,\n-                                self.borrow_set.borrows[borrow_index].borrowed_place,\n+                                self.borrow_set[borrow_index].borrowed_place,\n                                 place,\n                                 places_conflict::PlaceConflictBias::NoOverlap,\n                             );"}, {"sha": "2de2124dc5e0eaab2cc85e6590422bc2f06ec330", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42e7a0cb3a484670e27e28915a8c45809a35ccc4/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e7a0cb3a484670e27e28915a8c45809a35ccc4/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=42e7a0cb3a484670e27e28915a8c45809a35ccc4", "patch": "@@ -166,8 +166,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 // Invalidate all borrows of local places\n                 let borrow_set = self.borrow_set.clone();\n                 let resume = self.location_table.start_index(resume.start_location());\n-                for i in borrow_set.borrows.indices() {\n-                    if borrow_of_local_data(borrow_set.borrows[i].borrowed_place) {\n+                for (i, data) in borrow_set.iter_enumerated() {\n+                    if borrow_of_local_data(data.borrowed_place) {\n                         self.all_facts.invalidates.push((resume, i));\n                     }\n                 }\n@@ -178,8 +178,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 // Invalidate all borrows of local places\n                 let borrow_set = self.borrow_set.clone();\n                 let start = self.location_table.start_index(location);\n-                for i in borrow_set.borrows.indices() {\n-                    if borrow_of_local_data(borrow_set.borrows[i].borrowed_place) {\n+                for (i, data) in borrow_set.iter_enumerated() {\n+                    if borrow_of_local_data(data.borrowed_place) {\n                         self.all_facts.invalidates.push((start, i));\n                     }\n                 }\n@@ -369,7 +369,7 @@ impl<'cx, 'tcx> InvalidationGenerator<'cx, 'tcx> {\n         let tcx = self.tcx;\n         let body = self.body;\n         let borrow_set = self.borrow_set.clone();\n-        let indices = self.borrow_set.borrows.indices();\n+        let indices = self.borrow_set.indices();\n         each_borrow_involving_path(\n             self,\n             tcx,"}, {"sha": "6e211b42a052ee36575f983a59931655fa14e334", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42e7a0cb3a484670e27e28915a8c45809a35ccc4/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e7a0cb3a484670e27e28915a8c45809a35ccc4/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=42e7a0cb3a484670e27e28915a8c45809a35ccc4", "patch": "@@ -1131,11 +1131,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 (\n                     Reservation(WriteKind::MutableBorrow(bk)),\n                     BorrowKind::Shallow | BorrowKind::Shared,\n-                ) if {\n-                    tcx.migrate_borrowck() && this.borrow_set.location_map.contains_key(&location)\n-                } =>\n-                {\n-                    let bi = this.borrow_set.location_map[&location];\n+                ) if { tcx.migrate_borrowck() && this.borrow_set.contains(&location) } => {\n+                    let bi = this.borrow_set.get_index_of(&location).unwrap();\n                     debug!(\n                         \"recording invalid reservation of place: {:?} with \\\n                          borrow index {:?} as warning\","}, {"sha": "66a17cba6bb010b225a28b8d651531fbb3c0112c", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42e7a0cb3a484670e27e28915a8c45809a35ccc4/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e7a0cb3a484670e27e28915a8c45809a35ccc4/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=42e7a0cb3a484670e27e28915a8c45809a35ccc4", "patch": "@@ -206,7 +206,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n         //   the `borrow_set`, their `BorrowIndex` are synthesized as the universal region index\n         //   added to the existing number of loans, as if they succeeded them in the set.\n         //\n-        let borrow_count = borrow_set.borrows.len();\n+        let borrow_count = borrow_set.len();\n         debug!(\n             \"compute_regions: polonius placeholders, num_universals={}, borrow_count={}\",\n             universal_regions.len(),"}, {"sha": "ff98de5475ecff8076a2b9b64ccc64568d834466", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42e7a0cb3a484670e27e28915a8c45809a35ccc4/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e7a0cb3a484670e27e28915a8c45809a35ccc4/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=42e7a0cb3a484670e27e28915a8c45809a35ccc4", "patch": "@@ -2469,11 +2469,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // example).\n         if let Some(all_facts) = all_facts {\n             let _prof_timer = self.infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n-            if let Some(borrow_index) = borrow_set.location_map.get(&location) {\n+            if let Some(borrow_index) = borrow_set.get_index_of(&location) {\n                 let region_vid = borrow_region.to_region_vid();\n                 all_facts.borrow_region.push((\n                     region_vid,\n-                    *borrow_index,\n+                    borrow_index,\n                     location_table.mid_index(location),\n                 ));\n             }"}, {"sha": "7e7b7f2cc76fae2849c7db753683a930a49cf2ad", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/42e7a0cb3a484670e27e28915a8c45809a35ccc4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e7a0cb3a484670e27e28915a8c45809a35ccc4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=42e7a0cb3a484670e27e28915a8c45809a35ccc4", "patch": "@@ -136,9 +136,9 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n         borrow_set: &Rc<BorrowSet<'tcx>>,\n     ) -> Self {\n         let mut borrows_out_of_scope_at_location = FxHashMap::default();\n-        for (borrow_index, borrow_data) in borrow_set.borrows.iter_enumerated() {\n+        for (borrow_index, borrow_data) in borrow_set.iter_enumerated() {\n             let borrow_region = borrow_data.region.to_region_vid();\n-            let location = borrow_set.borrows[borrow_index].reserve_location;\n+            let location = borrow_data.reserve_location;\n \n             precompute_borrows_out_of_scope(\n                 body,\n@@ -160,7 +160,7 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n     }\n \n     pub fn location(&self, idx: BorrowIndex) -> &Location {\n-        &self.borrow_set.borrows[idx].reserve_location\n+        &self.borrow_set[idx].reserve_location\n     }\n \n     /// Add all borrows to the kill set, if those borrows are out of scope at `location`.\n@@ -216,7 +216,7 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n             places_conflict(\n                 self.tcx,\n                 self.body,\n-                self.borrow_set.borrows[i].borrowed_place,\n+                self.borrow_set[i].borrowed_place,\n                 place,\n                 PlaceConflictBias::NoOverlap,\n             )\n@@ -232,7 +232,7 @@ impl<'tcx> dataflow::AnalysisDomain<'tcx> for Borrows<'_, 'tcx> {\n     const NAME: &'static str = \"borrows\";\n \n     fn bits_per_block(&self, _: &mir::Body<'tcx>) -> usize {\n-        self.borrow_set.borrows.len() * 2\n+        self.borrow_set.len() * 2\n     }\n \n     fn initialize_start_block(&self, _: &mir::Body<'tcx>, _: &mut BitSet<Self::Idx>) {\n@@ -271,11 +271,11 @@ impl<'tcx> dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n                     ) {\n                         return;\n                     }\n-                    let index = self.borrow_set.location_map.get(&location).unwrap_or_else(|| {\n+                    let index = self.borrow_set.get_index_of(&location).unwrap_or_else(|| {\n                         panic!(\"could not find BorrowIndex for location {:?}\", location);\n                     });\n \n-                    trans.gen(*index);\n+                    trans.gen(index);\n                 }\n \n                 // Make sure there are no remaining borrows for variables"}]}