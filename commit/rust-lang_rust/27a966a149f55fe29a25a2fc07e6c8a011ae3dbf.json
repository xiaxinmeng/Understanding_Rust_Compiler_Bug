{"sha": "27a966a149f55fe29a25a2fc07e6c8a011ae3dbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YTk2NmExNDlmNTVmZTI5YTI1YTJmYzA3ZTZjOGEwMTFhZTNkYmY=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-10T15:59:25Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-12T14:51:04Z"}, "message": "Make use of slice::strip_prefix and slice pattern", "tree": {"sha": "7afc1007a082f15c8efecd6687b82d9076b276e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7afc1007a082f15c8efecd6687b82d9076b276e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27a966a149f55fe29a25a2fc07e6c8a011ae3dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27a966a149f55fe29a25a2fc07e6c8a011ae3dbf", "html_url": "https://github.com/rust-lang/rust/commit/27a966a149f55fe29a25a2fc07e6c8a011ae3dbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27a966a149f55fe29a25a2fc07e6c8a011ae3dbf/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90a7d2470a7ae29c529ae2a3684c47839c57d763", "url": "https://api.github.com/repos/rust-lang/rust/commits/90a7d2470a7ae29c529ae2a3684c47839c57d763", "html_url": "https://github.com/rust-lang/rust/commit/90a7d2470a7ae29c529ae2a3684c47839c57d763"}], "stats": {"total": 52, "additions": 25, "deletions": 27}, "files": [{"sha": "5215db7cdb3ce8d43217ab583443560f0fdde99e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27a966a149f55fe29a25a2fc07e6c8a011ae3dbf/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a966a149f55fe29a25a2fc07e6c8a011ae3dbf/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=27a966a149f55fe29a25a2fc07e6c8a011ae3dbf", "patch": "@@ -306,6 +306,7 @@\n #![feature(shrink_to)]\n #![feature(slice_concat_ext)]\n #![feature(slice_internals)]\n+#![feature(slice_strip)]\n #![feature(staged_api)]\n #![feature(std_internals)]\n #![feature(stdsimd)]"}, {"sha": "25ecc79abf0f153c2873bd6ac4ea7fe486440093", "filename": "src/libstd/sys/windows/path.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/27a966a149f55fe29a25a2fc07e6c8a011ae3dbf/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a966a149f55fe29a25a2fc07e6c8a011ae3dbf/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs?ref=27a966a149f55fe29a25a2fc07e6c8a011ae3dbf", "patch": "@@ -29,23 +29,20 @@ pub fn is_valid_drive_letter(disk: u8) -> bool {\n }\n \n pub fn parse_prefix(path: &OsStr) -> Option<Prefix<'_>> {\n-    use crate::path::Prefix::*;\n+    use Prefix::{DeviceNS, Disk, Verbatim, VerbatimDisk, VerbatimUNC, UNC};\n     unsafe {\n         // The unsafety here stems from converting between &OsStr and &[u8]\n         // and back. This is safe to do because (1) we only look at ASCII\n         // contents of the encoding and (2) new &OsStr values are produced\n         // only from ASCII-bounded slices of existing &OsStr values.\n-        let mut path = os_str_as_u8_slice(path);\n+        let path = os_str_as_u8_slice(path);\n \n-        if path.starts_with(br\"\\\\\") {\n-            // \\\\\n-            path = &path[2..];\n-            if path.starts_with(br\"?\\\") {\n-                // \\\\?\\\n-                path = &path[2..];\n-                if path.starts_with(br\"UNC\\\") {\n-                    // \\\\?\\UNC\\server\\share\n-                    path = &path[4..];\n+        // \\\\\n+        if let Some(path) = path.strip_prefix(br\"\\\\\") {\n+            // \\\\?\\\n+            if let Some(path) = path.strip_prefix(br\"?\\\") {\n+                // \\\\?\\UNC\\server\\share\n+                if let Some(path) = path.strip_prefix(br\"UNC\\\") {\n                     let (server, share) = match parse_two_comps(path, is_verbatim_sep) {\n                         Some((server, share)) => {\n                             (u8_slice_as_os_str(server), u8_slice_as_os_str(share))\n@@ -55,35 +52,35 @@ pub fn parse_prefix(path: &OsStr) -> Option<Prefix<'_>> {\n                     return Some(VerbatimUNC(server, share));\n                 } else {\n                     // \\\\?\\path\n-                    let idx = path.iter().position(|&b| b == b'\\\\');\n-                    if idx == Some(2) && path[1] == b':' {\n-                        let c = path[0];\n-                        if is_valid_drive_letter(c) {\n-                            // \\\\?\\C:\\ path\n+                    match path {\n+                        // \\\\?\\C:\\path\n+                        [c, b':', b'\\\\', ..] if is_valid_drive_letter(*c) => {\n                             return Some(VerbatimDisk(c.to_ascii_uppercase()));\n                         }\n+                        // \\\\?\\cat_pics\n+                        _ => {\n+                            let idx = path.iter().position(|&b| b == b'\\\\').unwrap_or(path.len());\n+                            let slice = &path[..idx];\n+                            return Some(Verbatim(u8_slice_as_os_str(slice)));\n+                        }\n                     }\n-                    let slice = &path[..idx.unwrap_or(path.len())];\n-                    return Some(Verbatim(u8_slice_as_os_str(slice)));\n                 }\n-            } else if path.starts_with(b\".\\\\\") {\n-                // \\\\.\\path\n-                path = &path[2..];\n-                let pos = path.iter().position(|&b| b == b'\\\\');\n-                let slice = &path[..pos.unwrap_or(path.len())];\n+            } else if let Some(path) = path.strip_prefix(b\".\\\\\") {\n+                // \\\\.\\COM42\n+                let idx = path.iter().position(|&b| b == b'\\\\').unwrap_or(path.len());\n+                let slice = &path[..idx];\n                 return Some(DeviceNS(u8_slice_as_os_str(slice)));\n             }\n             match parse_two_comps(path, is_sep_byte) {\n                 Some((server, share)) if !server.is_empty() && !share.is_empty() => {\n                     // \\\\server\\share\n                     return Some(UNC(u8_slice_as_os_str(server), u8_slice_as_os_str(share)));\n                 }\n-                _ => (),\n+                _ => {}\n             }\n-        } else if path.get(1) == Some(&b':') {\n+        } else if let [c, b':', ..] = path {\n             // C:\n-            let c = path[0];\n-            if is_valid_drive_letter(c) {\n+            if is_valid_drive_letter(*c) {\n                 return Some(Disk(c.to_ascii_uppercase()));\n             }\n         }"}]}