{"sha": "4fa57575302a5931517590daf8df2ef8a93f7a7b", "node_id": "C_kwDOAAsO6NoAKDRmYTU3NTc1MzAyYTU5MzE1MTc1OTBkYWY4ZGYyZWY4YTkzZjdhN2I", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-17T14:14:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-25T09:09:34Z"}, "message": "Lint unnecessary safety comments on statements and block tail expressions", "tree": {"sha": "3bfef5a8bc9356ac63331d515970a18f7cee3001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bfef5a8bc9356ac63331d515970a18f7cee3001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fa57575302a5931517590daf8df2ef8a93f7a7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa57575302a5931517590daf8df2ef8a93f7a7b", "html_url": "https://github.com/rust-lang/rust/commit/4fa57575302a5931517590daf8df2ef8a93f7a7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fa57575302a5931517590daf8df2ef8a93f7a7b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8c3f64cee8b07470572f274712dc9ab2634221b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c3f64cee8b07470572f274712dc9ab2634221b", "html_url": "https://github.com/rust-lang/rust/commit/b8c3f64cee8b07470572f274712dc9ab2634221b"}], "stats": {"total": 229, "additions": 220, "deletions": 9}, "files": [{"sha": "c60144df757c2d0d638521cbd41a491823a214af", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 124, "deletions": 2, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/4fa57575302a5931517590daf8df2ef8a93f7a7b/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa57575302a5931517590daf8df2ef8a93f7a7b/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=4fa57575302a5931517590daf8df2ef8a93f7a7b", "patch": "@@ -1,6 +1,10 @@\n+use std::ops::ControlFlow;\n+\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::source::walk_span_to_context;\n+use clippy_utils::visitors::{for_each_expr_with_closures, Descend};\n use clippy_utils::{get_parent_node, is_lint_allowed};\n+use hir::HirId;\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::{Block, BlockCheckMode, ItemKind, Node, UnsafeSource};\n@@ -90,8 +94,8 @@ declare_clippy_lint! {\n \n declare_lint_pass!(UndocumentedUnsafeBlocks => [UNDOCUMENTED_UNSAFE_BLOCKS, UNNECESSARY_SAFETY_COMMENT]);\n \n-impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n-    fn check_block(&mut self, cx: &LateContext<'_>, block: &'_ Block<'_>) {\n+impl<'tcx> LateLintPass<'tcx> for UndocumentedUnsafeBlocks {\n+    fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>) {\n         if block.rules == BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided)\n             && !in_external_macro(cx.tcx.sess, block.span)\n             && !is_lint_allowed(cx, UNDOCUMENTED_UNSAFE_BLOCKS, block.hir_id)\n@@ -115,6 +119,45 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n                 \"consider adding a safety comment on the preceding line\",\n             );\n         }\n+\n+        if let Some(tail) = block.expr\n+            && !is_lint_allowed(cx, UNNECESSARY_SAFETY_COMMENT, tail.hir_id)\n+            && !in_external_macro(cx.tcx.sess, tail.span)\n+            && let HasSafetyComment::Yes(pos) = stmt_has_safety_comment(cx, tail.span, tail.hir_id)\n+            && let Some(help_span) = expr_has_unnecessary_safety_comment(cx, tail, pos)\n+        {\n+            span_lint_and_help(\n+                cx,\n+                UNNECESSARY_SAFETY_COMMENT,\n+                tail.span,\n+                \"expression has unnecessary safety comment\",\n+                Some(help_span),\n+                \"consider removing the safety comment\",\n+            );\n+        }\n+    }\n+\n+    fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &hir::Stmt<'tcx>) {\n+        let expr = match stmt.kind {\n+            hir::StmtKind::Local(&hir::Local { init: Some(expr), .. })\n+            | hir::StmtKind::Expr(expr)\n+            | hir::StmtKind::Semi(expr) => expr,\n+            _ => return,\n+        };\n+        if !is_lint_allowed(cx, UNNECESSARY_SAFETY_COMMENT, stmt.hir_id)\n+            && !in_external_macro(cx.tcx.sess, stmt.span)\n+            && let HasSafetyComment::Yes(pos) = stmt_has_safety_comment(cx, stmt.span, stmt.hir_id)\n+            && let Some(help_span) = expr_has_unnecessary_safety_comment(cx, expr, pos)\n+        {\n+            span_lint_and_help(\n+                cx,\n+                UNNECESSARY_SAFETY_COMMENT,\n+                stmt.span,\n+                \"statement has unnecessary safety comment\",\n+                Some(help_span),\n+                \"consider removing the safety comment\",\n+            );\n+        }\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {\n@@ -216,6 +259,36 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n     }\n }\n \n+fn expr_has_unnecessary_safety_comment<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'tcx>,\n+    comment_pos: BytePos,\n+) -> Option<Span> {\n+    // this should roughly be the reverse of `block_parents_have_safety_comment`\n+    if for_each_expr_with_closures(cx, expr, |expr| match expr.kind {\n+        hir::ExprKind::Block(\n+            Block {\n+                rules: BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided),\n+                ..\n+            },\n+            _,\n+        ) => ControlFlow::Break(()),\n+        // statements will be handled by check_stmt itself again\n+        hir::ExprKind::Block(..) => ControlFlow::Continue(Descend::No),\n+        _ => ControlFlow::Continue(Descend::Yes),\n+    })\n+    .is_some()\n+    {\n+        return None;\n+    }\n+\n+    let source_map = cx.tcx.sess.source_map();\n+    let span = Span::new(comment_pos, comment_pos, SyntaxContext::root(), None);\n+    let help_span = source_map.span_extend_to_next_char(span, '\\n', true);\n+\n+    Some(help_span)\n+}\n+\n fn is_unsafe_from_proc_macro(cx: &LateContext<'_>, span: Span) -> bool {\n     let source_map = cx.sess().source_map();\n     let file_pos = source_map.lookup_byte_offset(span.lo());\n@@ -358,6 +431,55 @@ fn item_has_safety_comment(cx: &LateContext<'_>, item: &hir::Item<'_>) -> HasSaf\n     }\n }\n \n+/// Checks if the lines immediately preceding the item contain a safety comment.\n+#[allow(clippy::collapsible_match)]\n+fn stmt_has_safety_comment(cx: &LateContext<'_>, span: Span, hir_id: HirId) -> HasSafetyComment {\n+    match span_from_macro_expansion_has_safety_comment(cx, span) {\n+        HasSafetyComment::Maybe => (),\n+        has_safety_comment => return has_safety_comment,\n+    }\n+\n+    if span.ctxt() == SyntaxContext::root() {\n+        if let Some(parent_node) = get_parent_node(cx.tcx, hir_id) {\n+            let comment_start = match parent_node {\n+                Node::Block(block) => walk_span_to_context(block.span, SyntaxContext::root()).map(Span::lo),\n+                _ => return HasSafetyComment::Maybe,\n+            };\n+\n+            let source_map = cx.sess().source_map();\n+            if let Some(comment_start) = comment_start\n+                && let Ok(unsafe_line) = source_map.lookup_line(span.lo())\n+                && let Ok(comment_start_line) = source_map.lookup_line(comment_start)\n+                && Lrc::ptr_eq(&unsafe_line.sf, &comment_start_line.sf)\n+                && let Some(src) = unsafe_line.sf.src.as_deref()\n+            {\n+                unsafe_line.sf.lines(|lines| {\n+                    if comment_start_line.line >= unsafe_line.line {\n+                        HasSafetyComment::No\n+                    } else {\n+                        match text_has_safety_comment(\n+                            src,\n+                            &lines[comment_start_line.line + 1..=unsafe_line.line],\n+                            unsafe_line.sf.start_pos.to_usize(),\n+                        ) {\n+                            Some(b) => HasSafetyComment::Yes(b),\n+                            None => HasSafetyComment::No,\n+                        }\n+                    }\n+                })\n+            } else {\n+                // Problem getting source text. Pretend a comment was found.\n+                HasSafetyComment::Maybe\n+            }\n+        } else {\n+            // No parent node. Pretend a comment was found.\n+            HasSafetyComment::Maybe\n+        }\n+    } else {\n+        HasSafetyComment::No\n+    }\n+}\n+\n fn comment_start_before_item_in_mod(\n     cx: &LateContext<'_>,\n     parent_mod: &hir::Mod<'_>,"}, {"sha": "863fb60fcfca1fb09aee2de418dcd9c0743d7855", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4fa57575302a5931517590daf8df2ef8a93f7a7b/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa57575302a5931517590daf8df2ef8a93f7a7b/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=4fa57575302a5931517590daf8df2ef8a93f7a7b", "patch": "@@ -170,36 +170,36 @@ where\n         cb: F,\n     }\n \n-    struct WithStmtGuarg<'a, F> {\n+    struct WithStmtGuard<'a, F> {\n         val: &'a mut RetFinder<F>,\n         prev_in_stmt: bool,\n     }\n \n     impl<F> RetFinder<F> {\n-        fn inside_stmt(&mut self, in_stmt: bool) -> WithStmtGuarg<'_, F> {\n+        fn inside_stmt(&mut self, in_stmt: bool) -> WithStmtGuard<'_, F> {\n             let prev_in_stmt = std::mem::replace(&mut self.in_stmt, in_stmt);\n-            WithStmtGuarg {\n+            WithStmtGuard {\n                 val: self,\n                 prev_in_stmt,\n             }\n         }\n     }\n \n-    impl<F> std::ops::Deref for WithStmtGuarg<'_, F> {\n+    impl<F> std::ops::Deref for WithStmtGuard<'_, F> {\n         type Target = RetFinder<F>;\n \n         fn deref(&self) -> &Self::Target {\n             self.val\n         }\n     }\n \n-    impl<F> std::ops::DerefMut for WithStmtGuarg<'_, F> {\n+    impl<F> std::ops::DerefMut for WithStmtGuard<'_, F> {\n         fn deref_mut(&mut self) -> &mut Self::Target {\n             self.val\n         }\n     }\n \n-    impl<F> Drop for WithStmtGuarg<'_, F> {\n+    impl<F> Drop for WithStmtGuard<'_, F> {\n         fn drop(&mut self) {\n             self.val.in_stmt = self.prev_in_stmt;\n         }"}, {"sha": "cb99ce0d4214a77b5039a9a95d2a5edfa581d7fb", "filename": "tests/ui/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4fa57575302a5931517590daf8df2ef8a93f7a7b/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa57575302a5931517590daf8df2ef8a93f7a7b/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.rs?ref=4fa57575302a5931517590daf8df2ef8a93f7a7b", "patch": "@@ -522,4 +522,35 @@ fn issue_9142() {\n     };\n }\n \n+mod unnecessary_from_macro {\n+    trait T {}\n+\n+    macro_rules! no_safety_comment {\n+        ($t:ty) => {\n+            impl T for $t {}\n+        };\n+    }\n+\n+    // FIXME: This is not caught\n+    // Safety: unnecessary\n+    no_safety_comment!(());\n+\n+    macro_rules! with_safety_comment {\n+        ($t:ty) => {\n+            // Safety: unnecessary\n+            impl T for $t {}\n+        };\n+    }\n+\n+    with_safety_comment!(i32);\n+}\n+\n+fn unnecessary_on_stmt_and_expr() -> u32 {\n+    // SAFETY: unnecessary\n+    let num = 42;\n+\n+    // SAFETY: unnecessary\n+    24\n+}\n+\n fn main() {}"}, {"sha": "919fd51351cb161d9e786cdf45d962e18ca5a154", "filename": "tests/ui/undocumented_unsafe_blocks.stderr", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4fa57575302a5931517590daf8df2ef8a93f7a7b/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa57575302a5931517590daf8df2ef8a93f7a7b/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.stderr?ref=4fa57575302a5931517590daf8df2ef8a93f7a7b", "patch": "@@ -344,6 +344,24 @@ LL |         unsafe {};\n    |\n    = help: consider adding a safety comment on the preceding line\n \n+error: statement has unnecessary safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:514:5\n+   |\n+LL | /     let _ = {\n+LL | |         if unsafe { true } {\n+LL | |             todo!();\n+LL | |         } else {\n+...  |\n+LL | |         }\n+LL | |     };\n+   | |______^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:513:5\n+   |\n+LL |     // SAFETY: this is more than one level away, so it should warn\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: unsafe block missing a safety comment\n   --> $DIR/undocumented_unsafe_blocks.rs:515:12\n    |\n@@ -360,5 +378,45 @@ LL |             let bar = unsafe {};\n    |\n    = help: consider adding a safety comment on the preceding line\n \n-error: aborting due to 40 previous errors\n+error: impl has unnecessary safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:541:13\n+   |\n+LL |             impl T for $t {}\n+   |             ^^^^^^^^^^^^^^^^\n+...\n+LL |     with_safety_comment!(i32);\n+   |     ------------------------- in this macro invocation\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:540:13\n+   |\n+LL |             // Safety: unnecessary\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `with_safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expression has unnecessary safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:553:5\n+   |\n+LL |     24\n+   |     ^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:552:5\n+   |\n+LL |     // SAFETY: unnecessary\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: statement has unnecessary safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:550:5\n+   |\n+LL |     let num = 42;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:549:5\n+   |\n+LL |     // SAFETY: unnecessary\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 44 previous errors\n "}]}