{"sha": "b85e2af898546f9c7a7b58b02b43ba0ae0c948c9", "node_id": "C_kwDOAAsO6NoAKGI4NWUyYWY4OTg1NDZmOWM3YTdiNThiMDJiNDNiYTBhZTBjOTQ4Yzk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-04T18:39:00Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-04T18:48:03Z"}, "message": "Correctly handle non-semi statement expressions for never coercions", "tree": {"sha": "30ec05b28f0d476a4c3e97b12fa79f4c255bc933", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30ec05b28f0d476a4c3e97b12fa79f4c255bc933"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b85e2af898546f9c7a7b58b02b43ba0ae0c948c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b85e2af898546f9c7a7b58b02b43ba0ae0c948c9", "html_url": "https://github.com/rust-lang/rust/commit/b85e2af898546f9c7a7b58b02b43ba0ae0c948c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b85e2af898546f9c7a7b58b02b43ba0ae0c948c9/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95c4cb991f02841ef15898370640aa47491d9456", "url": "https://api.github.com/repos/rust-lang/rust/commits/95c4cb991f02841ef15898370640aa47491d9456", "html_url": "https://github.com/rust-lang/rust/commit/95c4cb991f02841ef15898370640aa47491d9456"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "8895dc095f92acbfccbe4a976bb82206b7c027ab", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b85e2af898546f9c7a7b58b02b43ba0ae0c948c9/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85e2af898546f9c7a7b58b02b43ba0ae0c948c9/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=b85e2af898546f9c7a7b58b02b43ba0ae0c948c9", "patch": "@@ -84,14 +84,38 @@ impl<'a> InferenceContext<'a> {\n         }\n     }\n \n+    pub(super) fn infer_expr_coerce_never(&mut self, expr: ExprId, expected: &Expectation) -> Ty {\n+        let ty = self.infer_expr_inner(expr, expected);\n+        // While we don't allow *arbitrary* coercions here, we *do* allow\n+        // coercions from ! to `expected`.\n+        if ty.is_never() {\n+            if let Some(adjustments) = self.result.expr_adjustments.get(&expr) {\n+                return if let [Adjustment { kind: Adjust::NeverToAny, target }] = &**adjustments {\n+                    target.clone()\n+                } else {\n+                    self.err_ty()\n+                };\n+            }\n+\n+            let adj_ty = self.table.new_type_var();\n+            self.write_expr_adj(\n+                expr,\n+                vec![Adjustment { kind: Adjust::NeverToAny, target: adj_ty.clone() }],\n+            );\n+            adj_ty\n+        } else {\n+            ty\n+        }\n+    }\n+\n     fn infer_expr_inner(&mut self, tgt_expr: ExprId, expected: &Expectation) -> Ty {\n         self.db.unwind_if_cancelled();\n \n         let ty = match &self.body[tgt_expr] {\n             Expr::Missing => self.err_ty(),\n             &Expr::If { condition, then_branch, else_branch } => {\n                 let expected = &expected.adjust_for_branches(&mut self.table);\n-                self.infer_expr(\n+                self.infer_expr_coerce_never(\n                     condition,\n                     &Expectation::HasType(self.result.standard_types.bool_.clone()),\n                 );\n@@ -415,7 +439,7 @@ impl<'a> InferenceContext<'a> {\n                     for arm in arms.iter() {\n                         if let Some(guard_expr) = arm.guard {\n                             self.diverges = Diverges::Maybe;\n-                            self.infer_expr(\n+                            self.infer_expr_coerce_never(\n                                 guard_expr,\n                                 &Expectation::HasType(self.result.standard_types.bool_.clone()),\n                             );\n@@ -1146,7 +1170,6 @@ impl<'a> InferenceContext<'a> {\n         let coerce_ty = expected.coercion_target_type(&mut self.table);\n         let old_resolver =\n             mem::replace(&mut self.resolver, resolver_for_expr(self.db.upcast(), self.owner, expr));\n-\n         let (break_ty, ty) =\n             self.with_breakable_ctx(BreakableKind::Block, Some(coerce_ty.clone()), label, |this| {\n                 for stmt in statements {\n@@ -1188,14 +1211,14 @@ impl<'a> InferenceContext<'a> {\n                             }\n                         }\n                         &Statement::Expr { expr, has_semi } => {\n-                            this.infer_expr(\n-                                expr,\n-                                &if has_semi {\n-                                    Expectation::none()\n-                                } else {\n-                                    Expectation::HasType(this.result.standard_types.unit.clone())\n-                                },\n-                            );\n+                            if has_semi {\n+                                this.infer_expr(expr, &Expectation::none());\n+                            } else {\n+                                this.infer_expr_coerce(\n+                                    expr,\n+                                    &Expectation::HasType(this.result.standard_types.unit.clone()),\n+                                );\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "74bcab6caa94a3ed1c14cc138e0a47f6c7e1c77b", "filename": "crates/hir-ty/src/tests/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b85e2af898546f9c7a7b58b02b43ba0ae0c948c9/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85e2af898546f9c7a7b58b02b43ba0ae0c948c9/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=b85e2af898546f9c7a7b58b02b43ba0ae0c948c9", "patch": "@@ -476,7 +476,7 @@ fn infer_adt_pattern() {\n             183..184 'x': usize\n             190..191 'x': usize\n             201..205 'E::B': E\n-            209..212 'foo': bool\n+            209..212 'foo': {unknown}\n             216..217 '1': usize\n             227..231 'E::B': E\n             235..237 '10': usize"}, {"sha": "2fa6234da1e8639bd22bbd95f7378c603b011ad7", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b85e2af898546f9c7a7b58b02b43ba0ae0c948c9/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85e2af898546f9c7a7b58b02b43ba0ae0c948c9/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=b85e2af898546f9c7a7b58b02b43ba0ae0c948c9", "patch": "@@ -270,7 +270,7 @@ fn infer_std_crash_5() {\n             61..320 '{     ...     }': ()\n             75..79 'name': &{unknown}\n             82..166 'if doe...     }': &{unknown}\n-            85..98 'doesnt_matter': bool\n+            85..98 'doesnt_matter': {unknown}\n             99..128 '{     ...     }': &{unknown}\n             113..118 'first': &{unknown}\n             134..166 '{     ...     }': &{unknown}\n@@ -279,7 +279,7 @@ fn infer_std_crash_5() {\n             181..188 'content': &{unknown}\n             191..313 'if ICE...     }': &{unknown}\n             194..231 'ICE_RE..._VALUE': {unknown}\n-            194..247 'ICE_RE...&name)': bool\n+            194..247 'ICE_RE...&name)': {unknown}\n             241..246 '&name': &&{unknown}\n             242..246 'name': &{unknown}\n             248..276 '{     ...     }': &{unknown}"}]}