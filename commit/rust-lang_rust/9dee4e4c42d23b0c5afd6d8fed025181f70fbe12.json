{"sha": "9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "node_id": "C_kwDOAAsO6NoAKDlkZWU0ZTRjNDJkMjNiMGM1YWZkNmQ4ZmVkMDI1MTgxZjcwZmJlMTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-04T15:17:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-04T15:17:32Z"}, "message": "Auto merge of #107267 - cjgillot:keep-aggregate, r=oli-obk\n\nDo not deaggregate MIR\n\nThis turns out to simplify a lot of things.\nI haven't checked the consequences for miri yet.\n\ncc `@JakobDegen`\nr? `@oli-obk`", "tree": {"sha": "9e854d084f562af0f8369eca144ad1fb044b248f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e854d084f562af0f8369eca144ad1fb044b248f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "html_url": "https://github.com/rust-lang/rust/commit/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1", "html_url": "https://github.com/rust-lang/rust/commit/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1"}, {"sha": "5c39ba20279e338e2cd421bc799d4a5d3397c3b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c39ba20279e338e2cd421bc799d4a5d3397c3b9", "html_url": "https://github.com/rust-lang/rust/commit/5c39ba20279e338e2cd421bc799d4a5d3397c3b9"}], "stats": {"total": 1697, "additions": 658, "deletions": 1039}, "files": [{"sha": "b0a8188e5e04d92e085ccf1a5a5bbed0a52a87ca", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -2645,6 +2645,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             operands,\n                         ) = rvalue\n                         {\n+                            let def_id = def_id.expect_local();\n                             for operand in operands {\n                                 let (Operand::Copy(assigned_from) | Operand::Move(assigned_from)) = operand else {\n                                     continue;\n@@ -2667,7 +2668,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 // into a place then we should annotate the closure in\n                                 // case it ends up being assigned into the return place.\n                                 annotated_closure =\n-                                    self.annotate_fn_sig(*def_id, substs.as_closure().sig());\n+                                    self.annotate_fn_sig(def_id, substs.as_closure().sig());\n                                 debug!(\n                                     \"annotate_argument_and_return_for_borrow: \\\n                                      annotated_closure={:?} assigned_from_local={:?} \\"}, {"sha": "a75ec87be4cac0721b6cdfc58fa3b095c7959048", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -817,6 +817,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             && let AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) = **kind\n         {\n             debug!(\"move_spans: def_id={:?} places={:?}\", def_id, places);\n+            let def_id = def_id.expect_local();\n             if let Some((args_span, generator_kind, capture_kind_span, path_span)) =\n                 self.closure_span(def_id, moved_place, places)\n             {\n@@ -945,6 +946,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     box AggregateKind::Generator(def_id, _, _) => (def_id, true),\n                     _ => continue,\n                 };\n+                let def_id = def_id.expect_local();\n \n                 debug!(\n                     \"borrow_spans: def_id={:?} is_generator={:?} places={:?}\","}, {"sha": "98103af779d8b5fbc157abb6418f960bd0edc67f", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -1278,6 +1278,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // in order to populate our used_mut set.\n                 match **aggregate_kind {\n                     AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {\n+                        let def_id = def_id.expect_local();\n                         let BorrowCheckResult { used_mut_upvars, .. } =\n                             self.infcx.tcx.mir_borrowck(def_id);\n                         debug!(\"{:?} used_mut_upvars={:?}\", def_id, used_mut_upvars);"}, {"sha": "5b52846562f87f64db5d65d5095c64850fd11904", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -2536,7 +2536,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // clauses on the struct.\n             AggregateKind::Closure(def_id, substs)\n             | AggregateKind::Generator(def_id, substs, _) => {\n-                (def_id.to_def_id(), self.prove_closure_bounds(tcx, def_id, substs, location))\n+                (def_id, self.prove_closure_bounds(tcx, def_id.expect_local(), substs, location))\n             }\n \n             AggregateKind::Array(_) | AggregateKind::Tuple => {"}, {"sha": "35948e50f48d0da28aa8e27f53936be7160df860", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::ty::cast::{CastTy, IntTy};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, Ty, TyCtxt};\n use rustc_span::source_map::{Span, DUMMY_SP};\n+use rustc_target::abi::VariantIdx;\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     #[instrument(level = \"trace\", skip(self, bx))]\n@@ -106,31 +107,31 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             mir::Rvalue::Aggregate(ref kind, ref operands) => {\n-                let (dest, active_field_index) = match **kind {\n-                    mir::AggregateKind::Adt(adt_did, variant_index, _, _, active_field_index) => {\n-                        dest.codegen_set_discr(bx, variant_index);\n-                        if bx.tcx().adt_def(adt_did).is_enum() {\n-                            (dest.project_downcast(bx, variant_index), active_field_index)\n-                        } else {\n-                            (dest, active_field_index)\n-                        }\n+                let (variant_index, variant_dest, active_field_index) = match **kind {\n+                    mir::AggregateKind::Adt(_, variant_index, _, _, active_field_index) => {\n+                        let variant_dest = dest.project_downcast(bx, variant_index);\n+                        (variant_index, variant_dest, active_field_index)\n                     }\n-                    _ => (dest, None),\n+                    _ => (VariantIdx::from_u32(0), dest, None),\n                 };\n+                if active_field_index.is_some() {\n+                    assert_eq!(operands.len(), 1);\n+                }\n                 for (i, operand) in operands.iter().enumerate() {\n                     let op = self.codegen_operand(bx, operand);\n                     // Do not generate stores and GEPis for zero-sized fields.\n                     if !op.layout.is_zst() {\n                         let field_index = active_field_index.unwrap_or(i);\n                         let field = if let mir::AggregateKind::Array(_) = **kind {\n                             let llindex = bx.cx().const_usize(field_index as u64);\n-                            dest.project_index(bx, llindex)\n+                            variant_dest.project_index(bx, llindex)\n                         } else {\n-                            dest.project_field(bx, field_index)\n+                            variant_dest.project_field(bx, field_index)\n                         };\n                         op.val.store(bx, field);\n                     }\n                 }\n+                dest.codegen_set_discr(bx, variant_index);\n             }\n \n             _ => {"}, {"sha": "8d4d0420cda4ab27a462515c94e4eee43b3c7317", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -774,15 +774,6 @@ where\n         variant_index: VariantIdx,\n         dest: &PlaceTy<'tcx, M::Provenance>,\n     ) -> InterpResult<'tcx> {\n-        // This must be an enum or generator.\n-        match dest.layout.ty.kind() {\n-            ty::Adt(adt, _) => assert!(adt.is_enum()),\n-            ty::Generator(..) => {}\n-            _ => span_bug!(\n-                self.cur_span(),\n-                \"write_discriminant called on non-variant-type (neither enum nor generator)\"\n-            ),\n-        }\n         // Layout computation excludes uninhabited variants from consideration\n         // therefore there's no way to represent those variants in the given layout.\n         // Essentially, uninhabited variants do not have a tag that corresponds to their\n@@ -855,6 +846,34 @@ where\n         Ok(())\n     }\n \n+    /// Writes the discriminant of the given variant.\n+    #[instrument(skip(self), level = \"debug\")]\n+    pub fn write_aggregate(\n+        &mut self,\n+        kind: &mir::AggregateKind<'tcx>,\n+        operands: &[mir::Operand<'tcx>],\n+        dest: &PlaceTy<'tcx, M::Provenance>,\n+    ) -> InterpResult<'tcx> {\n+        self.write_uninit(&dest)?;\n+        let (variant_index, variant_dest, active_field_index) = match *kind {\n+            mir::AggregateKind::Adt(_, variant_index, _, _, active_field_index) => {\n+                let variant_dest = self.place_downcast(&dest, variant_index)?;\n+                (variant_index, variant_dest, active_field_index)\n+            }\n+            _ => (VariantIdx::from_u32(0), dest.clone(), None),\n+        };\n+        if active_field_index.is_some() {\n+            assert_eq!(operands.len(), 1);\n+        }\n+        for (field_index, operand) in operands.iter().enumerate() {\n+            let field_index = active_field_index.unwrap_or(field_index);\n+            let field_dest = self.place_field(&variant_dest, field_index)?;\n+            let op = self.eval_operand(operand, Some(field_dest.layout))?;\n+            self.copy_op(&op, &field_dest, /*allow_transmute*/ false)?;\n+        }\n+        self.write_discriminant(variant_index, &dest)\n+    }\n+\n     pub fn raw_const_to_mplace(\n         &self,\n         raw: ConstAlloc<'tcx>,"}, {"sha": "7d9a98da08a9a037ed104e5b55c9b4c49c524ef7", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -199,13 +199,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Aggregate(box ref kind, ref operands) => {\n-                assert!(matches!(kind, mir::AggregateKind::Array(..)));\n-\n-                for (field_index, operand) in operands.iter().enumerate() {\n-                    let op = self.eval_operand(operand, None)?;\n-                    let field_dest = self.place_field(&dest, field_index)?;\n-                    self.copy_op(&op, &field_dest, /*allow_transmute*/ false)?;\n-                }\n+                self.write_aggregate(kind, operands, &dest)?;\n             }\n \n             Repeat(ref operand, _) => {"}, {"sha": "1a23b06d2e89cae1296d78b618a6e10cf5d5de30", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -453,7 +453,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n             Rvalue::Aggregate(kind, ..) => {\n                 if let AggregateKind::Generator(def_id, ..) = kind.as_ref()\n-                    && let Some(generator_kind @ hir::GeneratorKind::Async(..)) = self.tcx.generator_kind(def_id.to_def_id())\n+                    && let Some(generator_kind @ hir::GeneratorKind::Async(..)) = self.tcx.generator_kind(def_id)\n                 {\n                     self.check_op(ops::Generator(generator_kind));\n                 }"}, {"sha": "76b316cdf0c3fdecc5ccc061b251f3c8b878a96e", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -8,10 +8,10 @@ use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::visit::NonUseContext::VarDebugInfo;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{\n-    traversal, AggregateKind, BasicBlock, BinOp, Body, BorrowKind, CastKind, CopyNonOverlapping,\n-    Local, Location, MirPass, MirPhase, NonDivergingIntrinsic, Operand, Place, PlaceElem, PlaceRef,\n-    ProjectionElem, RetagKind, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind,\n-    Terminator, TerminatorKind, UnOp, START_BLOCK,\n+    traversal, BasicBlock, BinOp, Body, BorrowKind, CastKind, CopyNonOverlapping, Local, Location,\n+    MirPass, MirPhase, NonDivergingIntrinsic, Operand, Place, PlaceElem, PlaceRef, ProjectionElem,\n+    RetagKind, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n+    TerminatorKind, UnOp, START_BLOCK,\n };\n use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n@@ -423,19 +423,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             };\n         }\n         match rvalue {\n-            Rvalue::Use(_) | Rvalue::CopyForDeref(_) => {}\n-            Rvalue::Aggregate(agg_kind, _) => {\n-                let disallowed = match **agg_kind {\n-                    AggregateKind::Array(..) => false,\n-                    _ => self.mir_phase >= MirPhase::Runtime(RuntimePhase::PostCleanup),\n-                };\n-                if disallowed {\n-                    self.fail(\n-                        location,\n-                        format!(\"{:?} have been lowered to field assignments\", rvalue),\n-                    )\n-                }\n-            }\n+            Rvalue::Use(_) | Rvalue::CopyForDeref(_) | Rvalue::Aggregate(..) => {}\n             Rvalue::Ref(_, BorrowKind::Shallow, _) => {\n                 if self.mir_phase >= MirPhase::Runtime(RuntimePhase::Initial) {\n                     self.fail("}, {"sha": "10783c5ed1d1cd7389fd67f5aa72e83f74763108", "filename": "compiler/rustc_const_eval/src/util/aggregate.rs", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs?ref=4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1", "patch": "@@ -1,77 +0,0 @@\n-use rustc_index::vec::Idx;\n-use rustc_middle::mir::*;\n-use rustc_middle::ty::{Ty, TyCtxt};\n-use rustc_target::abi::VariantIdx;\n-\n-use std::iter::TrustedLen;\n-\n-/// Expand `lhs = Rvalue::Aggregate(kind, operands)` into assignments to the fields.\n-///\n-/// Produces something like\n-/// ```ignore (ilustrative)\n-/// (lhs as Variant).field0 = arg0;     // We only have a downcast if this is an enum\n-/// (lhs as Variant).field1 = arg1;\n-/// discriminant(lhs) = variant_index;  // If lhs is an enum or generator.\n-/// ```\n-pub fn expand_aggregate<'tcx>(\n-    orig_lhs: Place<'tcx>,\n-    operands: impl Iterator<Item = (Operand<'tcx>, Ty<'tcx>)> + TrustedLen,\n-    kind: AggregateKind<'tcx>,\n-    source_info: SourceInfo,\n-    tcx: TyCtxt<'tcx>,\n-) -> impl Iterator<Item = Statement<'tcx>> + TrustedLen {\n-    let mut lhs = orig_lhs;\n-    let mut set_discriminant = None;\n-    let active_field_index = match kind {\n-        AggregateKind::Adt(adt_did, variant_index, _, _, active_field_index) => {\n-            let adt_def = tcx.adt_def(adt_did);\n-            if adt_def.is_enum() {\n-                set_discriminant = Some(Statement {\n-                    kind: StatementKind::SetDiscriminant {\n-                        place: Box::new(orig_lhs),\n-                        variant_index,\n-                    },\n-                    source_info,\n-                });\n-                lhs = tcx.mk_place_downcast(orig_lhs, adt_def, variant_index);\n-            }\n-            active_field_index\n-        }\n-        AggregateKind::Generator(..) => {\n-            // Right now we only support initializing generators to\n-            // variant 0 (Unresumed).\n-            let variant_index = VariantIdx::new(0);\n-            set_discriminant = Some(Statement {\n-                kind: StatementKind::SetDiscriminant { place: Box::new(orig_lhs), variant_index },\n-                source_info,\n-            });\n-\n-            // Operands are upvars stored on the base place, so no\n-            // downcast is necessary.\n-\n-            None\n-        }\n-        _ => None,\n-    };\n-\n-    let operands = operands.enumerate().map(move |(i, (op, ty))| {\n-        let lhs_field = if let AggregateKind::Array(_) = kind {\n-            let offset = u64::try_from(i).unwrap();\n-            tcx.mk_place_elem(\n-                lhs,\n-                ProjectionElem::ConstantIndex { offset, min_length: offset + 1, from_end: false },\n-            )\n-        } else {\n-            let field = Field::new(active_field_index.unwrap_or(i));\n-            tcx.mk_place_field(lhs, field, ty)\n-        };\n-        Statement {\n-            source_info,\n-            kind: StatementKind::Assign(Box::new((lhs_field, Rvalue::Use(op)))),\n-        }\n-    });\n-    [Statement { source_info, kind: StatementKind::Deinit(Box::new(orig_lhs)) }]\n-        .into_iter()\n-        .chain(operands)\n-        .chain(set_discriminant)\n-}"}, {"sha": "51735e33e0f7142c9536a9aec475ce764712ffd1", "filename": "compiler/rustc_const_eval/src/util/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -1,4 +1,3 @@\n-pub mod aggregate;\n mod alignment;\n mod call_kind;\n pub mod collect_writes;\n@@ -7,7 +6,6 @@ mod find_self_call;\n mod might_permit_raw_init;\n mod type_name;\n \n-pub use self::aggregate::expand_aggregate;\n pub use self::alignment::is_disaligned;\n pub use self::call_kind::{call_kind, CallDesugaringKind, CallKind};\n pub use self::compare_types::{is_equal_up_to_subtyping, is_subtype};"}, {"sha": "10ac7e0d39af6ca89d849eb539a9410a9dd9c7f1", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -2098,10 +2098,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                     AggregateKind::Closure(def_id, substs) => ty::tls::with(|tcx| {\n                         let name = if tcx.sess.opts.unstable_opts.span_free_formats {\n                             let substs = tcx.lift(substs).unwrap();\n-                            format!(\n-                                \"[closure@{}]\",\n-                                tcx.def_path_str_with_substs(def_id.to_def_id(), substs),\n-                            )\n+                            format!(\"[closure@{}]\", tcx.def_path_str_with_substs(def_id, substs),)\n                         } else {\n                             let span = tcx.def_span(def_id);\n                             format!(\n@@ -2112,11 +2109,17 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         let mut struct_fmt = fmt.debug_struct(&name);\n \n                         // FIXME(project-rfc-2229#48): This should be a list of capture names/places\n-                        if let Some(upvars) = tcx.upvars_mentioned(def_id) {\n+                        if let Some(def_id) = def_id.as_local()\n+                            && let Some(upvars) = tcx.upvars_mentioned(def_id)\n+                        {\n                             for (&var_id, place) in iter::zip(upvars.keys(), places) {\n                                 let var_name = tcx.hir().name(var_id);\n                                 struct_fmt.field(var_name.as_str(), place);\n                             }\n+                        } else {\n+                            for (index, place) in places.iter().enumerate() {\n+                                struct_fmt.field(&format!(\"{index}\"), place);\n+                            }\n                         }\n \n                         struct_fmt.finish()\n@@ -2127,11 +2130,17 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         let mut struct_fmt = fmt.debug_struct(&name);\n \n                         // FIXME(project-rfc-2229#48): This should be a list of capture names/places\n-                        if let Some(upvars) = tcx.upvars_mentioned(def_id) {\n+                        if let Some(def_id) = def_id.as_local()\n+                            && let Some(upvars) = tcx.upvars_mentioned(def_id)\n+                        {\n                             for (&var_id, place) in iter::zip(upvars.keys(), places) {\n                                 let var_name = tcx.hir().name(var_id);\n                                 struct_fmt.field(var_name.as_str(), place);\n                             }\n+                        } else {\n+                            for (index, place) in places.iter().enumerate() {\n+                                struct_fmt.field(&format!(\"{index}\"), place);\n+                            }\n                         }\n \n                         struct_fmt.finish()"}, {"sha": "66ee68187896f54d7466442a18cb55a76d1270d5", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -1203,10 +1203,8 @@ pub enum AggregateKind<'tcx> {\n     /// active field index would identity the field `c`\n     Adt(DefId, VariantIdx, SubstsRef<'tcx>, Option<UserTypeAnnotationIndex>, Option<usize>),\n \n-    // Note: We can use LocalDefId since closures and generators a deaggregated\n-    // before codegen.\n-    Closure(LocalDefId, SubstsRef<'tcx>),\n-    Generator(LocalDefId, SubstsRef<'tcx>, hir::Movability),\n+    Closure(DefId, SubstsRef<'tcx>),\n+    Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]"}, {"sha": "b5e0b88bbe52dbf79ff94f109d4b52f960d17311", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -205,9 +205,9 @@ impl<'tcx> Rvalue<'tcx> {\n                 AggregateKind::Adt(did, _, substs, _, _) => {\n                     tcx.bound_type_of(did).subst(tcx, substs)\n                 }\n-                AggregateKind::Closure(did, substs) => tcx.mk_closure(did.to_def_id(), substs),\n+                AggregateKind::Closure(did, substs) => tcx.mk_closure(did, substs),\n                 AggregateKind::Generator(did, substs, movability) => {\n-                    tcx.mk_generator(did.to_def_id(), substs, movability)\n+                    tcx.mk_generator(did, substs, movability)\n                 }\n             },\n             Rvalue::ShallowInitBox(_, ty) => tcx.mk_box(ty),"}, {"sha": "cd0e69328634b33e2b70785e6f13fd75b865240f", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -439,10 +439,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         // We implicitly set the discriminant to 0. See\n                         // librustc_mir/transform/deaggregator.rs for details.\n                         let movability = movability.unwrap();\n-                        Box::new(AggregateKind::Generator(closure_id, substs, movability))\n+                        Box::new(AggregateKind::Generator(\n+                            closure_id.to_def_id(),\n+                            substs,\n+                            movability,\n+                        ))\n                     }\n                     UpvarSubsts::Closure(substs) => {\n-                        Box::new(AggregateKind::Closure(closure_id, substs))\n+                        Box::new(AggregateKind::Closure(closure_id.to_def_id(), substs))\n                     }\n                 };\n                 block.and(Rvalue::Aggregate(result, operands))"}, {"sha": "d00ee1f4babe8b3aed8b835ab633fca0db04c2e0", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -126,6 +126,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                     }\n                 }\n                 &AggregateKind::Closure(def_id, _) | &AggregateKind::Generator(def_id, _, _) => {\n+                    let def_id = def_id.expect_local();\n                     let UnsafetyCheckResult { violations, used_unsafe_blocks, .. } =\n                         self.tcx.unsafety_check_result(def_id);\n                     self.register_violations(violations, used_unsafe_blocks.iter().copied());"}, {"sha": "949a59a97bfb6a6e56b75d88d31f84c092530b61", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -5,6 +5,7 @@\n use rustc_const_eval::const_eval::CheckAlignment;\n use rustc_const_eval::interpret::{ConstValue, ImmTy, Immediate, InterpCx, Scalar};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def::DefKind;\n use rustc_middle::mir::visit::{MutVisitor, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -85,6 +86,30 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n         state: &mut State<Self::Value>,\n     ) {\n         match rvalue {\n+            Rvalue::Aggregate(kind, operands) => {\n+                let target = self.map().find(target.as_ref());\n+                if let Some(target) = target {\n+                    state.flood_idx_with(target, self.map(), FlatSet::Bottom);\n+                    let field_based = match **kind {\n+                        AggregateKind::Tuple | AggregateKind::Closure(..) => true,\n+                        AggregateKind::Adt(def_id, ..) => {\n+                            matches!(self.tcx.def_kind(def_id), DefKind::Struct)\n+                        }\n+                        _ => false,\n+                    };\n+                    if field_based {\n+                        for (field_index, operand) in operands.iter().enumerate() {\n+                            if let Some(field) = self\n+                                .map()\n+                                .apply(target, TrackElem::Field(Field::from_usize(field_index)))\n+                            {\n+                                let result = self.handle_operand(operand, state);\n+                                state.assign_idx(field, result, self.map());\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n             Rvalue::CheckedBinaryOp(op, box (left, right)) => {\n                 let target = self.map().find(target.as_ref());\n                 if let Some(target) = target {"}, {"sha": "fe272de20f8d085e7d0c88548f16382791209e0a", "filename": "compiler/rustc_mir_transform/src/deaggregator.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs?ref=4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1", "patch": "@@ -1,45 +0,0 @@\n-use crate::util::expand_aggregate;\n-use crate::MirPass;\n-use rustc_middle::mir::*;\n-use rustc_middle::ty::TyCtxt;\n-\n-pub struct Deaggregator;\n-\n-impl<'tcx> MirPass<'tcx> for Deaggregator {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let basic_blocks = body.basic_blocks.as_mut_preserves_cfg();\n-        for bb in basic_blocks {\n-            bb.expand_statements(|stmt| {\n-                // FIXME(eddyb) don't match twice on `stmt.kind` (post-NLL).\n-                match stmt.kind {\n-                    // FIXME(#48193) Deaggregate arrays when it's cheaper to do so.\n-                    StatementKind::Assign(box (\n-                        _,\n-                        Rvalue::Aggregate(box AggregateKind::Array(_), _),\n-                    )) => {\n-                        return None;\n-                    }\n-                    StatementKind::Assign(box (_, Rvalue::Aggregate(_, _))) => {}\n-                    _ => return None,\n-                }\n-\n-                let stmt = stmt.replace_nop();\n-                let source_info = stmt.source_info;\n-                let StatementKind::Assign(box (lhs, Rvalue::Aggregate(kind, operands))) = stmt.kind else {\n-                    bug!();\n-                };\n-\n-                Some(expand_aggregate(\n-                    lhs,\n-                    operands.into_iter().map(|op| {\n-                        let ty = op.ty(&body.local_decls, tcx);\n-                        (op, ty)\n-                    }),\n-                    *kind,\n-                    source_info,\n-                    tcx,\n-                ))\n-            });\n-        }\n-    }\n-}"}, {"sha": "47f9d35a4f7ec5e7101fadb5bb3a04a0721d2aea", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -52,7 +52,6 @@\n \n use crate::deref_separator::deref_finder;\n use crate::simplify;\n-use crate::util::expand_aggregate;\n use crate::MirPass;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::pluralize;\n@@ -272,31 +271,26 @@ impl<'tcx> TransformVisitor<'tcx> {\n             assert_eq!(self.state_adt_ref.variant(idx).fields.len(), 0);\n \n             // FIXME(swatinem): assert that `val` is indeed unit?\n-            statements.extend(expand_aggregate(\n-                Place::return_place(),\n-                std::iter::empty(),\n-                kind,\n+            statements.push(Statement {\n+                kind: StatementKind::Assign(Box::new((\n+                    Place::return_place(),\n+                    Rvalue::Aggregate(Box::new(kind), vec![]),\n+                ))),\n                 source_info,\n-                self.tcx,\n-            ));\n+            });\n             return;\n         }\n \n         // else: `Poll::Ready(x)`, `GeneratorState::Yielded(x)` or `GeneratorState::Complete(x)`\n         assert_eq!(self.state_adt_ref.variant(idx).fields.len(), 1);\n \n-        let ty = self\n-            .tcx\n-            .bound_type_of(self.state_adt_ref.variant(idx).fields[0].did)\n-            .subst(self.tcx, self.state_substs);\n-\n-        statements.extend(expand_aggregate(\n-            Place::return_place(),\n-            std::iter::once((val, ty)),\n-            kind,\n+        statements.push(Statement {\n+            kind: StatementKind::Assign(Box::new((\n+                Place::return_place(),\n+                Rvalue::Aggregate(Box::new(kind), vec![val]),\n+            ))),\n             source_info,\n-            self.tcx,\n-        ));\n+        });\n     }\n \n     // Create a Place referencing a generator struct field"}, {"sha": "9070a7368b168049c6bae014116324261b1d490e", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -60,7 +60,6 @@ mod coverage;\n mod ctfe_limit;\n mod dataflow_const_prop;\n mod dead_store_elimination;\n-mod deaggregator;\n mod deduce_param_attrs;\n mod deduplicate_blocks;\n mod deref_separator;\n@@ -523,9 +522,6 @@ fn run_runtime_lowering_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         &elaborate_box_derefs::ElaborateBoxDerefs,\n         &generator::StateTransform,\n         &add_retag::AddRetag,\n-        // Deaggregator is necessary for const prop. We may want to consider implementing\n-        // CTFE support for aggregates.\n-        &deaggregator::Deaggregator,\n         &Lint(const_prop_lint::ConstProp),\n     ];\n     pm::run_passes_no_validate(tcx, body, passes, Some(MirPhase::Runtime(RuntimePhase::Initial)));"}, {"sha": "551422386f6e012aaa28ed75abcb76f210f38713", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -15,7 +15,6 @@ use rustc_target::spec::abi::Abi;\n use std::fmt;\n use std::iter;\n \n-use crate::util::expand_aggregate;\n use crate::{\n     abort_unwinding_calls, add_call_guards, add_moves_for_packed_drops, deref_separator,\n     pass_manager as pm, remove_noop_landing_pads, simplify,\n@@ -831,19 +830,23 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n     // return;\n     debug!(\"build_ctor: variant_index={:?}\", variant_index);\n \n-    let statements = expand_aggregate(\n-        Place::return_place(),\n-        adt_def.variant(variant_index).fields.iter().enumerate().map(|(idx, field_def)| {\n-            (Operand::Move(Place::from(Local::new(idx + 1))), field_def.ty(tcx, substs))\n-        }),\n-        AggregateKind::Adt(adt_def.did(), variant_index, substs, None, None),\n+    let kind = AggregateKind::Adt(adt_def.did(), variant_index, substs, None, None);\n+    let variant = adt_def.variant(variant_index);\n+    let statement = Statement {\n+        kind: StatementKind::Assign(Box::new((\n+            Place::return_place(),\n+            Rvalue::Aggregate(\n+                Box::new(kind),\n+                (0..variant.fields.len())\n+                    .map(|idx| Operand::Move(Place::from(Local::new(idx + 1))))\n+                    .collect(),\n+            ),\n+        ))),\n         source_info,\n-        tcx,\n-    )\n-    .collect();\n+    };\n \n     let start_block = BasicBlockData {\n-        statements,\n+        statements: vec![statement],\n         terminator: Some(Terminator { source_info, kind: TerminatorKind::Return }),\n         is_cleanup: false,\n     };"}, {"sha": "accb504c088ef83a59712586f62a954d1e2084c4", "filename": "tests/mir-opt/building/async_await.a-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fbuilding%2Fasync_await.a-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fbuilding%2Fasync_await.a-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.a-%7Bclosure%230%7D.generator_resume.0.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -24,9 +24,7 @@ fn a::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:11:14: 11:16]>\n     bb1: {\n         _4 = move _2;                    // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n         _3 = const ();                   // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n-        Deinit(_0);                      // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n-        ((_0 as Ready).0: ()) = move _3; // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n-        discriminant(_0) = 0;            // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n+        _0 = Poll::<()>::Ready(move _3); // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n         discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:11:14: 11:16]))) = 1; // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n         return;                          // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n     }"}, {"sha": "ad4e5c6fcfd72e99795e0ac6bff1a69e51b7a54a", "filename": "tests/mir-opt/building/async_await.b-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -167,8 +167,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageLive(_19);                // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n         StorageLive(_20);                // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n         _20 = ();                        // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        Deinit(_0);                      // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        discriminant(_0) = 1;            // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        _0 = Poll::<()>::Pending;        // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n         discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 3; // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n         return;                          // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n     }\n@@ -276,8 +275,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageLive(_35);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n         StorageLive(_36);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n         _36 = ();                        // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        Deinit(_0);                      // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        discriminant(_0) = 1;            // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        _0 = Poll::<()>::Pending;        // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n         discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 4; // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n         return;                          // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n     }\n@@ -317,9 +315,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     }\n \n     bb26: {\n-        Deinit(_0);                      // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n-        ((_0 as Ready).0: ()) = move _37; // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n-        discriminant(_0) = 0;            // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n+        _0 = Poll::<()>::Ready(move _37); // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n         discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 1; // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n         return;                          // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n     }"}, {"sha": "20b0fb9643ee622bf73b10d3981f15769d9a7e73", "filename": "tests/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -61,10 +61,7 @@\n   \n       bb3: {\n           StorageDead(_9);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:15: 10:16\n-          Deinit(_0);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n-          (_0.0: T) = move _2;             // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n-          (_0.1: u64) = move _5;           // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n-          (_0.2: [f32; 3]) = move _8;      // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n+          _0 = MyThing::<T> { v: move _2, i: move _5, a: move _8 }; // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n           StorageDead(_8);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n           StorageDead(_5);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n           StorageDead(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15"}, {"sha": "9b69f79c28ee72978d69625ae1371f73926e350e", "filename": "tests/mir-opt/const_allocation.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -26,30 +26,30 @@ alloc1 (static: FOO, size: 8, align: 4) {\n \n alloc18 (size: 48, align: 4) {\n     0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc5\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc9\u2500\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc14\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc8\u2500\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc13\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n }\n \n alloc5 (size: 0, align: 4) {}\n \n-alloc9 (size: 16, align: 4) {\n-    \u257e\u2500alloc8\u2500\u2500\u257c 03 00 00 00 \u257e\u2500alloc10\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n+alloc8 (size: 16, align: 4) {\n+    \u257e\u2500alloc9\u2500\u2500\u257c 03 00 00 00 \u257e\u2500alloc10\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n }\n \n-alloc8 (size: 3, align: 1) {\n+alloc9 (size: 3, align: 1) {\n     66 6f 6f                                        \u2502 foo\n }\n \n alloc10 (size: 3, align: 1) {\n     62 61 72                                        \u2502 bar\n }\n \n-alloc14 (size: 24, align: 4) {\n-    0x00 \u2502 \u257e\u2500alloc13\u2500\u257c 03 00 00 00 \u257e\u2500alloc15\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n+alloc13 (size: 24, align: 4) {\n+    0x00 \u2502 \u257e\u2500alloc14\u2500\u257c 03 00 00 00 \u257e\u2500alloc15\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n     0x10 \u2502 \u257e\u2500alloc16\u2500\u257c 04 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n-alloc13 (size: 3, align: 1) {\n+alloc14 (size: 3, align: 1) {\n     6d 65 68                                        \u2502 meh\n }\n "}, {"sha": "d0f196e724581e0a1a0a2512864220d50d7bcde8", "filename": "tests/mir-opt/const_allocation.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -27,33 +27,33 @@ alloc1 (static: FOO, size: 16, align: 8) {\n alloc18 (size: 72, align: 8) {\n     0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc5\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n alloc5 (size: 0, align: 8) {}\n \n-alloc9 (size: 32, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+alloc8 (size: 32, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n     0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc10\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc8 (size: 3, align: 1) {\n+alloc9 (size: 3, align: 1) {\n     66 6f 6f                                        \u2502 foo\n }\n \n alloc10 (size: 3, align: 1) {\n     62 61 72                                        \u2502 bar\n }\n \n-alloc14 (size: 48, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+alloc13 (size: 48, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n     0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc15\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n     0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc16\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 04 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc13 (size: 3, align: 1) {\n+alloc14 (size: 3, align: 1) {\n     6d 65 68                                        \u2502 meh\n }\n "}, {"sha": "49e8b020dfb796225a48bfcdde01827aefda3af5", "filename": "tests/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 28, "deletions": 47, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -8,8 +8,8 @@\n       let mut _6: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:15: +4:16\n       let mut _7: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:19: +4:20\n       let mut _8: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:23: +4:24\n-      let mut _12: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:13: +13:16\n-      let mut _13: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:19: +13:22\n+      let mut _14: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:13: +13:16\n+      let mut _15: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:19: +13:22\n       scope 1 {\n -         debug x => _1;                   // in scope 1 at $DIR/const_debuginfo.rs:+1:9: +1:10\n +         debug x => const 1_u8;           // in scope 1 at $DIR/const_debuginfo.rs:+1:9: +1:10\n@@ -29,21 +29,18 @@\n                       scope 5 {\n -                         debug s => _9;   // in scope 5 at $DIR/const_debuginfo.rs:+6:9: +6:10\n +                         debug s => const \"hello, world!\"; // in scope 5 at $DIR/const_debuginfo.rs:+6:9: +6:10\n-                          let _14: bool;   // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-                          let _15: bool;   // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-                          let _16: u32;    // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                          let _10: (bool, bool, u32); // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n                           scope 6 {\n-                              debug f => (bool, bool, u32){ .0 => _14, .1 => _15, .2 => _16, }; // in scope 6 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-                              let _10: std::option::Option<u16>; // in scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n+                              debug f => _10; // in scope 6 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                              let _11: std::option::Option<u16>; // in scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n                               scope 7 {\n-                                  debug o => _10; // in scope 7 at $DIR/const_debuginfo.rs:+10:9: +10:10\n-                                  let _17: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-                                  let _18: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                  debug o => _11; // in scope 7 at $DIR/const_debuginfo.rs:+10:9: +10:10\n+                                  let _12: Point; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n                                   scope 8 {\n-                                      debug p => Point{ .0 => _17, .1 => _18, }; // in scope 8 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-                                      let _11: u32; // in scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+                                      debug p => _12; // in scope 8 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                      let _13: u32; // in scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n                                       scope 9 {\n--                                         debug a => _11; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+-                                         debug a => _13; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n +                                         debug a => const 64_u32; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n                                       }\n                                   }\n@@ -69,40 +66,24 @@\n                                            // mir::Constant\n                                            // + span: $DIR/const_debuginfo.rs:14:13: 14:28\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-          StorageLive(_14);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-          StorageLive(_15);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-          StorageLive(_16);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-          Deinit(_14);                     // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          Deinit(_15);                     // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          Deinit(_16);                     // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          _14 = const true;                // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          _15 = const false;               // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          _16 = const 123_u32;             // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          StorageLive(_10);                // scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n-          Deinit(_10);                     // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n-          ((_10 as Some).0: u16) = const 99_u16; // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n-          discriminant(_10) = 1;           // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n-          StorageLive(_17);                // scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-          StorageLive(_18);                // scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-          Deinit(_17);                     // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          Deinit(_18);                     // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          _17 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          _18 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          StorageLive(_11);                // scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n-          StorageLive(_12);                // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n-          _12 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n-          StorageLive(_13);                // scope 8 at $DIR/const_debuginfo.rs:+13:19: +13:22\n-          _13 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:19: +13:22\n-          _11 = const 64_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:22\n-          StorageDead(_13);                // scope 8 at $DIR/const_debuginfo.rs:+13:21: +13:22\n-          StorageDead(_12);                // scope 8 at $DIR/const_debuginfo.rs:+13:21: +13:22\n-          StorageDead(_11);                // scope 8 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_17);                // scope 7 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_18);                // scope 7 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_10);                // scope 6 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_14);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_15);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_16);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageLive(_10);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+          _10 = (const true, const false, const 123_u32); // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          StorageLive(_11);                // scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n+          _11 = Option::<u16>::Some(const 99_u16); // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n+          StorageLive(_12);                // scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+          _12 = Point { x: const 32_u32, y: const 32_u32 }; // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          StorageLive(_13);                // scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+          StorageLive(_14);                // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n+          _14 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n+          StorageLive(_15);                // scope 8 at $DIR/const_debuginfo.rs:+13:19: +13:22\n+          _15 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:19: +13:22\n+          _13 = const 64_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:22\n+          StorageDead(_15);                // scope 8 at $DIR/const_debuginfo.rs:+13:21: +13:22\n+          StorageDead(_14);                // scope 8 at $DIR/const_debuginfo.rs:+13:21: +13:22\n+          StorageDead(_13);                // scope 8 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_12);                // scope 7 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_11);                // scope 6 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_10);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_9);                 // scope 4 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_4);                 // scope 3 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           return;                          // scope 0 at $DIR/const_debuginfo.rs:+14:2: +14:2"}, {"sha": "4dc98f8567402fc05bc9f2261f68ffce550cf7e4", "filename": "tests/mir-opt/const_goto_storage.match_nested_if.ConstGoto.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -17,7 +17,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_goto_storage.rs:+1:9: +1:12\n -         StorageLive(_2);                 // scope 0 at $DIR/const_goto_storage.rs:+1:21: +1:23\n--         Deinit(_2);                      // scope 0 at $DIR/const_goto_storage.rs:+1:21: +1:23\n+-         _2 = ();                         // scope 0 at $DIR/const_goto_storage.rs:+1:21: +1:23\n -         StorageLive(_3);                 // scope 0 at $DIR/const_goto_storage.rs:+2:15: +6:10\n -         StorageLive(_4);                 // scope 0 at $DIR/const_goto_storage.rs:+2:18: +2:76\n -         StorageLive(_5);                 // scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52"}, {"sha": "6ac460db86f8114e9e8c3ae6c0e18edfe36064e2", "filename": "tests/mir-opt/const_prop/aggregate.foo.ConstProp.diff", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -0,0 +1,55 @@\n+- // MIR for `foo` before ConstProp\n++ // MIR for `foo` after ConstProp\n+  \n+  fn foo(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/aggregate.rs:+0:8: +0:9\n+      let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:15: +0:15\n+      let _2: i32;                         // in scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n+      let mut _3: i32;                     // in scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+      let mut _4: (i32, u8);               // in scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+      let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+      let mut _7: i32;                     // in scope 0 at $DIR/aggregate.rs:+3:18: +3:26\n+      let mut _8: (u8, i32);               // in scope 0 at $DIR/aggregate.rs:+3:18: +3:24\n+      let mut _9: u8;                      // in scope 0 at $DIR/aggregate.rs:+3:19: +3:20\n+      scope 1 {\n+          debug first => _2;               // in scope 1 at $DIR/aggregate.rs:+2:9: +2:14\n+          let _6: i32;                     // in scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+          scope 2 {\n+              debug second => _6;          // in scope 2 at $DIR/aggregate.rs:+3:9: +3:15\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n+          StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+          StorageLive(_4);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+          StorageLive(_5);                 // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+          _5 = _1;                         // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+          _4 = (const 0_i32, move _5);     // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+          StorageDead(_5);                 // scope 0 at $DIR/aggregate.rs:+2:22: +2:23\n+-         _3 = (_4.0: i32);                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+-         _2 = Add(move _3, const 1_i32);  // scope 0 at $DIR/aggregate.rs:+2:17: +2:29\n++         _3 = const 0_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n++         _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:29\n+          StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+2:28: +2:29\n+          StorageDead(_4);                 // scope 0 at $DIR/aggregate.rs:+2:29: +2:30\n+          StorageLive(_6);                 // scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+          StorageLive(_7);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n+          StorageLive(_8);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n+          StorageLive(_9);                 // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n+          _9 = _1;                         // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n+          _8 = (move _9, const 1_i32);     // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n+          StorageDead(_9);                 // scope 1 at $DIR/aggregate.rs:+3:23: +3:24\n+-         _7 = (_8.1: i32);                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n+-         _6 = Add(move _7, const 2_i32);  // scope 1 at $DIR/aggregate.rs:+3:18: +3:30\n++         _7 = const 1_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n++         _6 = const 3_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:30\n+          StorageDead(_7);                 // scope 1 at $DIR/aggregate.rs:+3:29: +3:30\n+          StorageDead(_8);                 // scope 1 at $DIR/aggregate.rs:+3:30: +3:31\n+          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:15: +4:2\n+          StorageDead(_6);                 // scope 1 at $DIR/aggregate.rs:+4:1: +4:2\n+          StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/aggregate.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "2ef6d74e52846abc966636764c231d6284b16110", "filename": "tests/mir-opt/const_prop/aggregate.foo.PreCodegen.after.mir", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -0,0 +1,49 @@\n+// MIR for `foo` after PreCodegen\n+\n+fn foo(_1: u8) -> () {\n+    debug x => _1;                       // in scope 0 at $DIR/aggregate.rs:+0:8: +0:9\n+    let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:15: +0:15\n+    let _2: i32;                         // in scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n+    let mut _3: i32;                     // in scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+    let mut _4: (i32, u8);               // in scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+    let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+    let mut _7: i32;                     // in scope 0 at $DIR/aggregate.rs:+3:18: +3:26\n+    let mut _8: (u8, i32);               // in scope 0 at $DIR/aggregate.rs:+3:18: +3:24\n+    let mut _9: u8;                      // in scope 0 at $DIR/aggregate.rs:+3:19: +3:20\n+    scope 1 {\n+        debug first => _2;               // in scope 1 at $DIR/aggregate.rs:+2:9: +2:14\n+        let _6: i32;                     // in scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+        scope 2 {\n+            debug second => _6;          // in scope 2 at $DIR/aggregate.rs:+3:9: +3:15\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n+        StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+        StorageLive(_4);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+        StorageLive(_5);                 // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+        _5 = _1;                         // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+        _4 = (const 0_i32, move _5);     // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+        StorageDead(_5);                 // scope 0 at $DIR/aggregate.rs:+2:22: +2:23\n+        _3 = const 0_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+        _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:29\n+        StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+2:28: +2:29\n+        StorageDead(_4);                 // scope 0 at $DIR/aggregate.rs:+2:29: +2:30\n+        StorageLive(_6);                 // scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+        StorageLive(_7);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n+        StorageLive(_8);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n+        StorageLive(_9);                 // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n+        _9 = _1;                         // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n+        _8 = (move _9, const 1_i32);     // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n+        StorageDead(_9);                 // scope 1 at $DIR/aggregate.rs:+3:23: +3:24\n+        _7 = const 1_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n+        _6 = const 3_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:30\n+        StorageDead(_7);                 // scope 1 at $DIR/aggregate.rs:+3:29: +3:30\n+        StorageDead(_8);                 // scope 1 at $DIR/aggregate.rs:+3:30: +3:31\n+        _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:15: +4:2\n+        StorageDead(_6);                 // scope 1 at $DIR/aggregate.rs:+4:1: +4:2\n+        StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/aggregate.rs:+4:2: +4:2\n+    }\n+}"}, {"sha": "f6e58955b4f607bda88d14caaad97155edd15853", "filename": "tests/mir-opt/const_prop/aggregate.main.ConstProp.diff", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -3,9 +3,11 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-      let mut _3: (i32, i32, i32);         // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+      let _1: u8;                          // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n+      let mut _2: u8;                      // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+      let mut _3: (i32, u8, i32);          // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+      let _4: ();                          // in scope 0 at $DIR/aggregate.rs:+2:5: +2:11\n+      let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:9: +2:10\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:+1:9: +1:10\n       }\n@@ -14,19 +16,29 @@\n           StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n           StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-          Deinit(_3);                      // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-          (_3.0: i32) = const 0_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-          (_3.1: i32) = const 1_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-          (_3.2: i32) = const 2_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n--         _2 = (_3.1: i32);                // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n--         _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n-+         _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-+         _1 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n+          _3 = (const 0_i32, const 1_u8, const 2_i32); // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+-         _2 = (_3.1: u8);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+-         _1 = Add(move _2, const 0_u8);   // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n++         _2 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n++         _1 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n           StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+1:27: +1:28\n           StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+1:28: +1:29\n-          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/aggregate.rs:+2:2: +2:2\n+          StorageLive(_4);                 // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n+          StorageLive(_5);                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n+-         _5 = _1;                         // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n++         _5 = const 1_u8;                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n+          _4 = foo(move _5) -> bb1;        // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n+                                           // mir::Constant\n+                                           // + span: $DIR/aggregate.rs:8:5: 8:8\n+                                           // + literal: Const { ty: fn(u8) {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 1 at $DIR/aggregate.rs:+2:10: +2:11\n+          StorageDead(_4);                 // scope 1 at $DIR/aggregate.rs:+2:11: +2:12\n+          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/aggregate.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "4706af92cba982460cb000b76ce91829be11aa13", "filename": "tests/mir-opt/const_prop/aggregate.main.PreCodegen.after.mir", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -2,9 +2,11 @@\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:11: +0:11\n-    let _1: i32;                         // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n-    let mut _2: i32;                     // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-    let mut _3: (i32, i32, i32);         // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+    let _1: u8;                          // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n+    let mut _2: u8;                      // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+    let mut _3: (i32, u8, i32);          // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+    let _4: ();                          // in scope 0 at $DIR/aggregate.rs:+2:5: +2:11\n+    let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:9: +2:10\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:+1:9: +1:10\n     }\n@@ -13,16 +15,25 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n         StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n         StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-        Deinit(_3);                      // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-        (_3.0: i32) = const 0_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-        (_3.1: i32) = const 1_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-        (_3.2: i32) = const 2_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-        _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-        _1 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n+        _3 = (const 0_i32, const 1_u8, const 2_i32); // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+        _2 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+        _1 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n         StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+1:27: +1:28\n         StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+1:28: +1:29\n-        _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +2:2\n-        StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+2:1: +2:2\n-        return;                          // scope 0 at $DIR/aggregate.rs:+2:2: +2:2\n+        StorageLive(_4);                 // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n+        StorageLive(_5);                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n+        _5 = const 1_u8;                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n+        _4 = foo(move _5) -> bb1;        // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n+                                         // mir::Constant\n+                                         // + span: $DIR/aggregate.rs:8:5: 8:8\n+                                         // + literal: Const { ty: fn(u8) {foo}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_5);                 // scope 1 at $DIR/aggregate.rs:+2:10: +2:11\n+        StorageDead(_4);                 // scope 1 at $DIR/aggregate.rs:+2:11: +2:12\n+        _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +3:2\n+        StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+3:1: +3:2\n+        return;                          // scope 0 at $DIR/aggregate.rs:+3:2: +3:2\n     }\n }"}, {"sha": "aa123b7a8664dfb839013275b03e6b92f55d22f7", "filename": "tests/mir-opt/const_prop/aggregate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.rs?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -5,4 +5,13 @@\n // EMIT_MIR aggregate.main.PreCodegen.after.mir\n fn main() {\n     let x = (0, 1, 2).1 + 0;\n+    foo(x);\n+}\n+\n+// EMIT_MIR aggregate.foo.ConstProp.diff\n+// EMIT_MIR aggregate.foo.PreCodegen.after.mir\n+fn foo(x: u8) {\n+    // Verify that we still propagate if part of the aggregate is not known.\n+    let first = (0, x).0 + 1;\n+    let second = (x, 1).1 + 2;\n }"}, {"sha": "b9a10704be0dcd6914b0349e38a43d88e8dff653", "filename": "tests/mir-opt/const_prop/discriminant.main.ConstProp.32bit.diff", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -17,17 +17,20 @@\n           StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n           StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+-         _3 = Option::<bool>::Some(const true); // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n -         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n -         switchInt(move _4) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         _3 = const Option::<bool>::Some(true); // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n++                                          // mir::Constant\n++                                          // + span: $DIR/discriminant.rs:12:34: 12:44\n++                                          // + literal: Const { ty: Option<bool>, val: Value(Scalar(0x01)) }\n +         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n +         switchInt(const 1_isize) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: bool)) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+-         switchInt(((_3 as Some).0: bool)) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         switchInt(const true) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb2: {"}, {"sha": "b9a10704be0dcd6914b0349e38a43d88e8dff653", "filename": "tests/mir-opt/const_prop/discriminant.main.ConstProp.64bit.diff", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -17,17 +17,20 @@\n           StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n           StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+-         _3 = Option::<bool>::Some(const true); // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n -         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n -         switchInt(move _4) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         _3 = const Option::<bool>::Some(true); // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n++                                          // mir::Constant\n++                                          // + span: $DIR/discriminant.rs:12:34: 12:44\n++                                          // + literal: Const { ty: Option<bool>, val: Value(Scalar(0x01)) }\n +         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n +         switchInt(const 1_isize) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: bool)) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+-         switchInt(((_3 as Some).0: bool)) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         switchInt(const true) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb2: {"}, {"sha": "4f056dd85e3f7999faa7851adeb2e15c52d1ad77", "filename": "tests/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -32,16 +32,14 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:+6:9: +6:22\n           StorageLive(_2);                 // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n-          Deinit(_2);                      // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n-          (_2.0: u32) = const 1114113_u32; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n+          _2 = InvalidChar { int: const 1114113_u32 }; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n -         _1 = (_2.1: char);               // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:67\n +         _1 = const {transmute(0x00110001): char}; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:67\n           StorageDead(_2);                 // scope 0 at $DIR/invalid_constant.rs:+6:69: +6:70\n           StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n           StorageLive(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:25: +13:59\n           StorageLive(_5);                 // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n-          Deinit(_5);                      // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n-          (_5.0: u32) = const 4_u32;       // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n+          _5 = InvalidTag { int: const 4_u32 }; // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n -         _4 = (_5.1: E);                  // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n -         _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n +         _4 = const Scalar(0x00000004): E; // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57"}, {"sha": "964dd3080749abdd9a20c9efe82196cb3f025111", "filename": "tests/mir-opt/const_prop/issue_66971.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -5,13 +5,14 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/issue_66971.rs:+0:11: +0:11\n       let _1: ();                          // in scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n       let mut _2: ((), u8, u8);            // in scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n+      let mut _3: ();                      // in scope 0 at $DIR/issue_66971.rs:+1:13: +1:15\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n           StorageLive(_2);                 // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-          Deinit(_2);                      // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-          (_2.1: u8) = const 0_u8;         // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-          (_2.2: u8) = const 0_u8;         // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n+          StorageLive(_3);                 // scope 0 at $DIR/issue_66971.rs:+1:13: +1:15\n+          _2 = (move _3, const 0_u8, const 0_u8); // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n+          StorageDead(_3);                 // scope 0 at $DIR/issue_66971.rs:+1:21: +1:22\n           _1 = encode(move _2) -> bb1;     // scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n                                            // mir::Constant\n                                            // + span: $DIR/issue_66971.rs:17:5: 17:11"}, {"sha": "a631cb310904ba8d34699681ea8c015dec276c42", "filename": "tests/mir-opt/const_prop/issue_67019.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -11,12 +11,9 @@\n           StorageLive(_1);                 // scope 0 at $DIR/issue_67019.rs:+1:5: +1:20\n           StorageLive(_2);                 // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n           StorageLive(_3);                 // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n-          Deinit(_3);                      // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n-          (_3.0: u8) = const 1_u8;         // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n-          (_3.1: u8) = const 2_u8;         // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n-          Deinit(_2);                      // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n--         (_2.0: (u8, u8)) = move _3;      // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n-+         (_2.0: (u8, u8)) = const (1_u8, 2_u8); // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n+-         _3 = (const 1_u8, const 2_u8);   // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n++         _3 = const (1_u8, 2_u8);         // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n+          _2 = (move _3,);                 // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n           StorageDead(_3);                 // scope 0 at $DIR/issue_67019.rs:+1:18: +1:19\n           _1 = test(move _2) -> bb1;       // scope 0 at $DIR/issue_67019.rs:+1:5: +1:20\n                                            // mir::Constant"}, {"sha": "0eb47087c9c75eeeedd2f6b23e07d7b8a05f3f45", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -14,9 +14,8 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n-          Deinit(_1);                      // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n-          (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n-          (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n+-         _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n++         _1 = const (42_i32, 43_i32);     // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n           (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n -         _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14"}, {"sha": "26a1c3c1aa9e585c3ee10511242b289f6b611946", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -18,9 +18,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:9: +1:14\n-          Deinit(_1);                      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:17: +1:25\n-          (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:17: +1:25\n-          (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:17: +1:25\n+          _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:17: +1:25\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n           _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:13: +2:19\n           ((*_2).1: i32) = const 99_i32;   // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+3:5: +3:13"}, {"sha": "a2e4890c6a64c222f2ab7479c512750b543899ca", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -4,19 +4,18 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +0:11\n       let _1: i32;                         // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-          let mut _5: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-          let mut _6: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          let mut _2: (i32, i32);          // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n           scope 2 {\n-              debug x => (i32, i32){ .0 => _5, .1 => _6, }; // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-              let _3: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+              debug x => _2;               // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n               scope 3 {\n-                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-                  let _4: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                  debug y => _4;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+                  let _5: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   scope 4 {\n-                      debug z => _4;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                      debug z => _5;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   }\n               }\n           }\n@@ -31,25 +30,21 @@\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-          StorageLive(_6);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-          Deinit(_5);                      // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          Deinit(_6);                      // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          _5 = const 1_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          _6 = const 2_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          StorageLive(_2);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          _2 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          _6 = move _2;                    // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n-          StorageDead(_2);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-          _3 = _6;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n-          StorageLive(_4);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n--         _4 = _5;                         // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n-+         _4 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n-          StorageDead(_4);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_5);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_6);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+-         _2 = (const 1_i32, const 2_i32); // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n++         _2 = const (1_i32, 2_i32);       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          (_2.1: i32) = move _3;           // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+          _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n+          StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+-         _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n++         _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n+          StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:2: +6:2\n       }"}, {"sha": "1368b114658dfe003e6ea050534217fdbbd8bf50", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.32bit.diff", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -9,7 +9,7 @@\n       let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      let mut _9: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -52,9 +52,8 @@\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n           StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _9 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         _8 = _9;                         // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n +         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n           StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "1368b114658dfe003e6ea050534217fdbbd8bf50", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.64bit.diff", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -9,7 +9,7 @@\n       let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      let mut _9: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -52,9 +52,8 @@\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n           StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _9 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         _8 = _9;                         // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n +         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n           StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "de1d57ed401a176478bd51d6f6a5621eaea41589", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -10,8 +10,6 @@\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+     let mut _10: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+     let mut _11: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -47,21 +45,10 @@\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n--         StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n--         StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n-+         StorageLive(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         StorageLive(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         Deinit(_10);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         Deinit(_11);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         _10 = const 12_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         _11 = const 42_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         _8 = _11;                        // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-+         StorageDead(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n-+         StorageDead(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n           nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "de1d57ed401a176478bd51d6f6a5621eaea41589", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -10,8 +10,6 @@\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+     let mut _10: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+     let mut _11: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -47,21 +45,10 @@\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n--         StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n--         StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n-+         StorageLive(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         StorageLive(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         Deinit(_10);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         Deinit(_11);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         _10 = const 12_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         _11 = const 42_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         _8 = _11;                        // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-+         StorageDead(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n-+         StorageDead(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n           nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "270a1ccf560f1e5de0b078884a2e1bd0d5683021", "filename": "tests/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -11,24 +11,17 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n-          Deinit(_1);                      // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n-          (_1.0: u32) = const 1_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n-          (_1.1: u32) = const 2_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n+-         _1 = (const 1_u32, const 2_u32); // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n++         _1 = const (1_u32, 2_u32);       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n           StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n-          StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n--         _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n-+         _3 = const (1_u32, 2_u32);       // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n-          _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n+          _2 = consume(_1) -> bb1;         // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n                                            // mir::Constant\n                                            // + span: $DIR/tuple_literal_propagation.rs:5:5: 5:12\n                                            // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:14: +3:15\n           StorageDead(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:15: +3:16\n-          StorageDead(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/tuple_literal_propagation.rs:+4:2: +4:2\n       }\n   }"}, {"sha": "def9fc6428fb63e8f02cd104db629c54aaa9c90f", "filename": "tests/mir-opt/const_prop_miscompile.bar.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -19,8 +19,8 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n-          Deinit(_1);                      // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n-          (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n+-         _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n++         _1 = const (1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n           StorageLive(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n           _3 = &raw mut (_1.0: i32);       // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22"}, {"sha": "b54c10a140f2cb30b529fa34c4929f1bcb634aab", "filename": "tests/mir-opt/const_prop_miscompile.foo.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -16,8 +16,8 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n-          Deinit(_1);                      // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n-          (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n+-         _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n++         _1 = const (1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:6: +2:14\n           _2 = &mut (_1.0: i32);           // scope 1 at $DIR/const_prop_miscompile.rs:+2:6: +2:14\n           (*_2) = const 5_i32;             // scope 1 at $DIR/const_prop_miscompile.rs:+2:5: +2:18"}, {"sha": "97d0a01e00bc4fd725769dfb1cc601b264026b22", "filename": "tests/mir-opt/copy-prop/issue_107511.main.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -57,9 +57,7 @@\n   \n       bb1: {\n           StorageDead(_6);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n-          Deinit(_4);                      // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n-          (_4.0: usize) = const 0_usize;   // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n-          (_4.1: usize) = move _5;         // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _5 }; // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n           StorageDead(_5);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n           _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> bb2; // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n                                            // mir::Constant"}, {"sha": "d049c79d78deff2502ead980cb2ae0f4e45de9e5", "filename": "tests/mir-opt/dataflow-const-prop/enum.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.main.DataflowConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -23,9 +23,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/enum.rs:+1:9: +1:10\n-          Deinit(_1);                      // scope 0 at $DIR/enum.rs:+1:13: +1:21\n-          ((_1 as V1).0: i32) = const 0_i32; // scope 0 at $DIR/enum.rs:+1:13: +1:21\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum.rs:+1:13: +1:21\n+          _1 = E::V1(const 0_i32);         // scope 0 at $DIR/enum.rs:+1:13: +1:21\n           StorageLive(_2);                 // scope 1 at $DIR/enum.rs:+2:9: +2:10\n           _3 = discriminant(_1);           // scope 1 at $DIR/enum.rs:+2:19: +2:20\n           switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 1 at $DIR/enum.rs:+2:13: +2:20"}, {"sha": "8f045eedfb05801413d24cb49b8faf8a6fe2bfc4", "filename": "tests/mir-opt/dataflow-const-prop/repr_transparent.main.DataflowConstProp.diff", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fdataflow-const-prop%2Frepr_transparent.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fdataflow-const-prop%2Frepr_transparent.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Frepr_transparent.main.DataflowConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -17,8 +17,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/repr_transparent.rs:+1:9: +1:10\n-          Deinit(_1);                      // scope 0 at $DIR/repr_transparent.rs:+1:13: +1:19\n-          (_1.0: i32) = const 0_i32;       // scope 0 at $DIR/repr_transparent.rs:+1:13: +1:19\n+          _1 = I32(const 0_i32);           // scope 0 at $DIR/repr_transparent.rs:+1:13: +1:19\n           StorageLive(_2);                 // scope 1 at $DIR/repr_transparent.rs:+2:9: +2:10\n           StorageLive(_3);                 // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:26\n           StorageLive(_4);                 // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:20\n@@ -31,9 +30,8 @@\n +         _3 = const 0_i32;                // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:26\n           StorageDead(_5);                 // scope 1 at $DIR/repr_transparent.rs:+2:25: +2:26\n           StorageDead(_4);                 // scope 1 at $DIR/repr_transparent.rs:+2:25: +2:26\n-          Deinit(_2);                      // scope 1 at $DIR/repr_transparent.rs:+2:13: +2:27\n--         (_2.0: i32) = move _3;           // scope 1 at $DIR/repr_transparent.rs:+2:13: +2:27\n-+         (_2.0: i32) = const 0_i32;       // scope 1 at $DIR/repr_transparent.rs:+2:13: +2:27\n+-         _2 = I32(move _3);               // scope 1 at $DIR/repr_transparent.rs:+2:13: +2:27\n++         _2 = I32(const 0_i32);           // scope 1 at $DIR/repr_transparent.rs:+2:13: +2:27\n           StorageDead(_3);                 // scope 1 at $DIR/repr_transparent.rs:+2:26: +2:27\n           _0 = const ();                   // scope 0 at $DIR/repr_transparent.rs:+0:11: +3:2\n           StorageDead(_2);                 // scope 1 at $DIR/repr_transparent.rs:+3:1: +3:2"}, {"sha": "a91a755830d1507b651cd3ecd26ea9dde64df7f7", "filename": "tests/mir-opt/dataflow-const-prop/sibling_ptr.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -23,9 +23,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/sibling_ptr.rs:+1:9: +1:14\n-          Deinit(_1);                      // scope 0 at $DIR/sibling_ptr.rs:+1:27: +1:33\n-          (_1.0: u8) = const 0_u8;         // scope 0 at $DIR/sibling_ptr.rs:+1:27: +1:33\n-          (_1.1: u8) = const 0_u8;         // scope 0 at $DIR/sibling_ptr.rs:+1:27: +1:33\n+          _1 = (const 0_u8, const 0_u8);   // scope 0 at $DIR/sibling_ptr.rs:+1:27: +1:33\n           StorageLive(_2);                 // scope 1 at $DIR/sibling_ptr.rs:+2:5: +5:6\n           StorageLive(_3);                 // scope 2 at $DIR/sibling_ptr.rs:+3:13: +3:14\n           _3 = &raw mut (_1.0: u8);        // scope 2 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL"}, {"sha": "53c62c0817391d51705e060ad9b1b1c811eebb6e", "filename": "tests/mir-opt/dataflow-const-prop/struct.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fdataflow-const-prop%2Fstruct.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fdataflow-const-prop%2Fstruct.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fstruct.main.DataflowConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -21,8 +21,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/struct.rs:+1:9: +1:14\n-          Deinit(_1);                      // scope 0 at $DIR/struct.rs:+1:17: +1:21\n-          (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/struct.rs:+1:17: +1:21\n+          _1 = S(const 1_i32);             // scope 0 at $DIR/struct.rs:+1:17: +1:21\n           StorageLive(_2);                 // scope 1 at $DIR/struct.rs:+2:9: +2:10\n           StorageLive(_3);                 // scope 1 at $DIR/struct.rs:+2:13: +2:16\n -         _3 = (_1.0: i32);                // scope 1 at $DIR/struct.rs:+2:13: +2:16"}, {"sha": "8ce4ce4ba976d1e42ffd78480ad38793037520e5", "filename": "tests/mir-opt/dataflow-const-prop/tuple.main.DataflowConstProp.diff", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.main.DataflowConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -25,9 +25,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/tuple.rs:+1:9: +1:14\n-          Deinit(_1);                      // scope 0 at $DIR/tuple.rs:+1:17: +1:23\n-          (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/tuple.rs:+1:17: +1:23\n-          (_1.1: i32) = const 2_i32;       // scope 0 at $DIR/tuple.rs:+1:17: +1:23\n+          _1 = (const 1_i32, const 2_i32); // scope 0 at $DIR/tuple.rs:+1:17: +1:23\n           StorageLive(_2);                 // scope 1 at $DIR/tuple.rs:+2:9: +2:10\n           StorageLive(_3);                 // scope 1 at $DIR/tuple.rs:+2:13: +2:22\n           StorageLive(_4);                 // scope 1 at $DIR/tuple.rs:+2:13: +2:16\n@@ -43,9 +41,7 @@\n -         _2 = Add(move _3, const 3_i32);  // scope 1 at $DIR/tuple.rs:+2:13: +2:26\n +         _2 = const 6_i32;                // scope 1 at $DIR/tuple.rs:+2:13: +2:26\n           StorageDead(_3);                 // scope 1 at $DIR/tuple.rs:+2:25: +2:26\n-          Deinit(_1);                      // scope 2 at $DIR/tuple.rs:+3:5: +3:15\n-          (_1.0: i32) = const 2_i32;       // scope 2 at $DIR/tuple.rs:+3:5: +3:15\n-          (_1.1: i32) = const 3_i32;       // scope 2 at $DIR/tuple.rs:+3:5: +3:15\n+          _1 = (const 2_i32, const 3_i32); // scope 2 at $DIR/tuple.rs:+3:5: +3:15\n           StorageLive(_6);                 // scope 2 at $DIR/tuple.rs:+4:9: +4:10\n           StorageLive(_7);                 // scope 2 at $DIR/tuple.rs:+4:13: +4:22\n           StorageLive(_8);                 // scope 2 at $DIR/tuple.rs:+4:13: +4:16"}, {"sha": "db136485a21152e886ed324af07dbd29e414c95c", "filename": "tests/mir-opt/deaggregator_test.bar.Deaggregator.diff", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff?ref=4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1", "patch": "@@ -1,21 +0,0 @@\n-- // MIR for `bar` before Deaggregator\n-+ // MIR for `bar` after Deaggregator\n-  \n-  fn bar(_1: usize) -> Baz {\n-      debug a => _1;                       // in scope 0 at $DIR/deaggregator_test.rs:+0:8: +0:9\n-      let mut _0: Baz;                     // return place in scope 0 at $DIR/deaggregator_test.rs:+0:21: +0:24\n-      let mut _2: usize;                   // in scope 0 at $DIR/deaggregator_test.rs:+1:14: +1:15\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test.rs:+1:14: +1:15\n-          _2 = _1;                         // scope 0 at $DIR/deaggregator_test.rs:+1:14: +1:15\n--         _0 = Baz { x: move _2, y: const 0f32, z: const false }; // scope 0 at $DIR/deaggregator_test.rs:+1:5: +1:35\n-+         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test.rs:+1:5: +1:35\n-+         (_0.0: usize) = move _2;         // scope 0 at $DIR/deaggregator_test.rs:+1:5: +1:35\n-+         (_0.1: f32) = const 0f32;        // scope 0 at $DIR/deaggregator_test.rs:+1:5: +1:35\n-+         (_0.2: bool) = const false;      // scope 0 at $DIR/deaggregator_test.rs:+1:5: +1:35\n-          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test.rs:+1:34: +1:35\n-          return;                          // scope 0 at $DIR/deaggregator_test.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "ee59402af386ba1d16ec8ffd93edfd1889acc608", "filename": "tests/mir-opt/deaggregator_test.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeaggregator_test.rs?ref=4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1", "patch": "@@ -1,17 +0,0 @@\n-// unit-test: Deaggregator\n-\n-struct Baz {\n-    x: usize,\n-    y: f32,\n-    z: bool,\n-}\n-\n-// EMIT_MIR deaggregator_test.bar.Deaggregator.diff\n-fn bar(a: usize) -> Baz {\n-    Baz { x: a, y: 0.0, z: false }\n-}\n-\n-fn main() {\n-    // Make sure the function actually gets instantiated.\n-    bar(0);\n-}"}, {"sha": "f28c2b482af2dd6dc03d729651af0454a8466713", "filename": "tests/mir-opt/deaggregator_test_enum.bar.Deaggregator.diff", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test_enum.bar.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test_enum.bar.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeaggregator_test_enum.bar.Deaggregator.diff?ref=4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1", "patch": "@@ -1,20 +0,0 @@\n-- // MIR for `bar` before Deaggregator\n-+ // MIR for `bar` after Deaggregator\n-  \n-  fn bar(_1: usize) -> Baz {\n-      debug a => _1;                       // in scope 0 at $DIR/deaggregator_test_enum.rs:+0:8: +0:9\n-      let mut _0: Baz;                     // return place in scope 0 at $DIR/deaggregator_test_enum.rs:+0:21: +0:24\n-      let mut _2: usize;                   // in scope 0 at $DIR/deaggregator_test_enum.rs:+1:19: +1:20\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test_enum.rs:+1:19: +1:20\n-          _2 = _1;                         // scope 0 at $DIR/deaggregator_test_enum.rs:+1:19: +1:20\n--         _0 = Baz::Foo { x: move _2 };    // scope 0 at $DIR/deaggregator_test_enum.rs:+1:5: +1:22\n-+         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum.rs:+1:5: +1:22\n-+         ((_0 as Foo).0: usize) = move _2; // scope 0 at $DIR/deaggregator_test_enum.rs:+1:5: +1:22\n-+         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum.rs:+1:5: +1:22\n-          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test_enum.rs:+1:21: +1:22\n-          return;                          // scope 0 at $DIR/deaggregator_test_enum.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "ea402dafdec7a8f23cebe29f036f1f05aea64d1c", "filename": "tests/mir-opt/deaggregator_test_enum.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeaggregator_test_enum.rs?ref=4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1", "patch": "@@ -1,19 +0,0 @@\n-// unit-test: Deaggregator\n-\n-enum Baz {\n-    Empty,\n-    Foo { x: usize },\n-}\n-\n-// EMIT_MIR deaggregator_test_enum.bar.Deaggregator.diff\n-fn bar(a: usize) -> Baz {\n-    Baz::Foo { x: a }\n-}\n-\n-fn main() {\n-    let x = bar(10);\n-    match x {\n-        Baz::Empty => println!(\"empty\"),\n-        Baz::Foo { x } => println!(\"{}\", x),\n-    };\n-}"}, {"sha": "955c317324aa8418059bfc7635dda5521e825df8", "filename": "tests/mir-opt/deaggregator_test_enum_2.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeaggregator_test_enum_2.rs?ref=4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1", "patch": "@@ -1,21 +0,0 @@\n-// unit-test: Deaggregator\n-// Test that deaggregate fires in more than one basic block\n-\n-enum Foo {\n-    A(i32),\n-    B(i32),\n-}\n-\n-// EMIT_MIR deaggregator_test_enum_2.test1.Deaggregator.diff\n-fn test1(x: bool, y: i32) -> Foo {\n-    if x {\n-        Foo::A(y)\n-    } else {\n-        Foo::B(y)\n-    }\n-}\n-\n-fn main() {\n-    // Make sure the function actually gets instantiated.\n-    test1(false, 0);\n-}"}, {"sha": "210d3849e18a106bb1e76987b5934588e335ba34", "filename": "tests/mir-opt/deaggregator_test_enum_2.test1.Deaggregator.diff", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff?ref=4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1", "patch": "@@ -1,45 +0,0 @@\n-- // MIR for `test1` before Deaggregator\n-+ // MIR for `test1` after Deaggregator\n-  \n-  fn test1(_1: bool, _2: i32) -> Foo {\n-      debug x => _1;                       // in scope 0 at $DIR/deaggregator_test_enum_2.rs:+0:10: +0:11\n-      debug y => _2;                       // in scope 0 at $DIR/deaggregator_test_enum_2.rs:+0:19: +0:20\n-      let mut _0: Foo;                     // return place in scope 0 at $DIR/deaggregator_test_enum_2.rs:+0:30: +0:33\n-      let mut _3: bool;                    // in scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n-      let mut _4: i32;                     // in scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:16: +2:17\n-      let mut _5: i32;                     // in scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:16: +4:17\n-  \n-      bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n-          _3 = _1;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n-          switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n-      }\n-  \n-      bb1: {\n-          StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:16: +2:17\n-          _4 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:16: +2:17\n--         _0 = Foo::A(move _4);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:9: +2:18\n-+         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:9: +2:18\n-+         ((_0 as A).0: i32) = move _4;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:9: +2:18\n-+         discriminant(_0) = 0;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:9: +2:18\n-          StorageDead(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:17: +2:18\n-          goto -> bb3;                     // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:5: +5:6\n-      }\n-  \n-      bb2: {\n-          StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:16: +4:17\n-          _5 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:16: +4:17\n--         _0 = Foo::B(move _5);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:9: +4:18\n-+         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:9: +4:18\n-+         ((_0 as B).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:9: +4:18\n-+         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:9: +4:18\n-          StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:17: +4:18\n-          goto -> bb3;                     // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:5: +5:6\n-      }\n-  \n-      bb3: {\n-          StorageDead(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+5:5: +5:6\n-          return;                          // scope 0 at $DIR/deaggregator_test_enum_2.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "46305fe21d28c2c33d325974fb8f6cd1e7bb4b53", "filename": "tests/mir-opt/deaggregator_test_multiple.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeaggregator_test_multiple.rs?ref=4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1", "patch": "@@ -1,17 +0,0 @@\n-// unit-test: Deaggregator\n-// Test that deaggregate fires more than once per block\n-\n-enum Foo {\n-    A(i32),\n-    B,\n-}\n-\n-// EMIT_MIR deaggregator_test_multiple.test.Deaggregator.diff\n-fn test(x: i32) -> [Foo; 2] {\n-    [Foo::A(x), Foo::A(x)]\n-}\n-\n-fn main() {\n-    // Make sure the function actually gets instantiated.\n-    test(0);\n-}"}, {"sha": "cf5da273c2894ffa4112404a37b28a536703702e", "filename": "tests/mir-opt/deaggregator_test_multiple.test.Deaggregator.diff", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test_multiple.test.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1/tests%2Fmir-opt%2Fdeaggregator_test_multiple.test.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeaggregator_test_multiple.test.Deaggregator.diff?ref=4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1", "patch": "@@ -1,35 +0,0 @@\n-- // MIR for `test` before Deaggregator\n-+ // MIR for `test` after Deaggregator\n-  \n-  fn test(_1: i32) -> [Foo; 2] {\n-      debug x => _1;                       // in scope 0 at $DIR/deaggregator_test_multiple.rs:+0:9: +0:10\n-      let mut _0: [Foo; 2];                // return place in scope 0 at $DIR/deaggregator_test_multiple.rs:+0:20: +0:28\n-      let mut _2: Foo;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n-      let mut _3: i32;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:+1:13: +1:14\n-      let mut _4: Foo;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n-      let mut _5: i32;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:+1:24: +1:25\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n-          StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:13: +1:14\n-          _3 = _1;                         // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:13: +1:14\n--         _2 = Foo::A(move _3);            // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n-+         Deinit(_2);                      // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n-+         ((_2 as A).0: i32) = move _3;    // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n-+         discriminant(_2) = 0;            // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n-          StorageDead(_3);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:14: +1:15\n-          StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n-          StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:24: +1:25\n-          _5 = _1;                         // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:24: +1:25\n--         _4 = Foo::A(move _5);            // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n-+         Deinit(_4);                      // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n-+         ((_4 as A).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n-+         discriminant(_4) = 0;            // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n-          StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:25: +1:26\n-          _0 = [move _2, move _4];         // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:5: +1:27\n-          StorageDead(_4);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:26: +1:27\n-          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:26: +1:27\n-          return;                          // scope 0 at $DIR/deaggregator_test_multiple.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "5383d1be129823618bb50b694a8d9bda6e56d624", "filename": "tests/mir-opt/early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -25,9 +25,7 @@\n           _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:+1:12: +1:13\n           StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:15: +1:16\n           _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:+1:15: +1:16\n-          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n-          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n-          (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+          _3 = (move _4, move _5);         // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n           _7 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17"}, {"sha": "b3e21ff49bdf3a0a652e73d7c20d9d892f20ffeb", "filename": "tests/mir-opt/early_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -26,9 +26,7 @@\n           _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:+1:12: +1:13\n           StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:15: +1:16\n           _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:+1:15: +1:16\n-          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n-          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n-          (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+          _3 = (move _4, move _5);         // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n           _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17"}, {"sha": "e098a88eb5578555b8642cc43d6b1e40f1c12098", "filename": "tests/mir-opt/early_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -25,9 +25,7 @@\n           _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:+1:12: +1:13\n           StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:15: +1:16\n           _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:+1:15: +1:16\n-          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n-          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n-          (_3.1: std::option::Option<bool>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+          _3 = (move _4, move _5);         // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n           _7 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17"}, {"sha": "ec3b4bbdff42f394790b6befc07f15161066ca4a", "filename": "tests/mir-opt/early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -34,10 +34,7 @@\n           _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:15: +1:16\n           StorageLive(_7);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:18: +1:19\n           _7 = _3;                         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:18: +1:19\n-          Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n-          (_4.0: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n-          (_4.1: std::option::Option<u32>) = move _6; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n-          (_4.2: std::option::Option<u32>) = move _7; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n+          _4 = (move _5, move _6, move _7); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n           StorageDead(_7);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:19: +1:20\n           StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:19: +1:20\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:19: +1:20"}, {"sha": "a91d0d7cf730fc5959209fd654b15e91d6cacd51", "filename": "tests/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -73,9 +73,7 @@\n           _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:15: +5:16\n           StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:18: +5:23\n           _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:18: +5:23\n-          Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _4 = (move _5, move _6);         // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n           _34 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n@@ -91,10 +89,8 @@\n   \n       bb2: {\n           StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n-          Deinit(_33);                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n-          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n-          ((_0 as Err).0: ()) = move _33;  // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n-          discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n+          _33 = ();                        // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n+          _0 = Result::<ViewportPercentageLength, ()>::Err(move _33); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n           StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:27: +10:28\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n@@ -134,9 +130,7 @@\n           _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n           StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:48: +6:49\n           StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:48: +6:49\n-          Deinit(_3);                      // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n-          ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n-          discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n+          _3 = ViewportPercentageLength::Vw(move _14); // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n           StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n           StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n           StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n@@ -158,9 +152,7 @@\n           _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n           StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:48: +7:49\n           StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:48: +7:49\n-          Deinit(_3);                      // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n-          ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n-          discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n+          _3 = ViewportPercentageLength::Vh(move _19); // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n           StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n           StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n           StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n@@ -182,9 +174,7 @@\n           _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n           StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:54: +8:55\n           StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:54: +8:55\n-          Deinit(_3);                      // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n-          ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n-          discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n+          _3 = ViewportPercentageLength::Vmin(move _24); // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n           StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n           StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n           StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n@@ -206,19 +196,15 @@\n           _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n           StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:54: +9:55\n           StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:54: +9:55\n-          Deinit(_3);                      // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n-          ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n-          discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n+          _3 = ViewportPercentageLength::Vmax(move _29); // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n           StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n           StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n           StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n           goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n       }\n   \n       bb10: {\n-          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n-          ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n-          discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n+          _0 = Result::<ViewportPercentageLength, ()>::Ok(move _3); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n           goto -> bb11;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2"}, {"sha": "6468eb5f8dde590946844314f7fef99d55e4e188", "filename": "tests/mir-opt/early_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -32,9 +32,7 @@\n           _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:12: +1:13\n           StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:15: +1:16\n           _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:15: +1:16\n-          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n-          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n-          (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n+          _3 = (move _4, move _5);         // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:16: +1:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:16: +1:17\n           _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17"}, {"sha": "5ebaacd4ba91d71d7469fd621a8f56091d090dda", "filename": "tests/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -51,14 +51,20 @@\n       }\n   \n       bb2: {\n-          Deinit(_6);                      // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n-          discriminant(_6) = 1;            // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n+-         _6 = MinusPlus;                  // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n++         _6 = const MinusPlus;            // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n++                                          // mir::Constant\n++                                          // + span: $DIR/funky_arms.rs:21:17: 21:41\n++                                          // + literal: Const { ty: Sign, val: Value(Scalar(0x01)) }\n           goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n       }\n   \n       bb3: {\n-          Deinit(_6);                      // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n-          discriminant(_6) = 0;            // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n+-         _6 = Minus;                      // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n++         _6 = const Minus;                // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n++                                          // mir::Constant\n++                                          // + span: $DIR/funky_arms.rs:20:18: 20:38\n++                                          // + literal: Const { ty: Sign, val: Value(Scalar(0x00)) }\n           goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n       }\n   "}, {"sha": "7efda05d2b88143ac8ceda6b8a0711c3cc4d6e10", "filename": "tests/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -54,9 +54,7 @@ fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator_tiny.rs:19:16: 19:24\n         StorageLive(_6);                 // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n         StorageLive(_7);                 // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n         _7 = ();                         // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n-        Deinit(_0);                      // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n-        ((_0 as Yielded).0: ()) = move _7; // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n-        discriminant(_0) = 0;            // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n+        _0 = GeneratorState::<(), ()>::Yielded(move _7); // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n         discriminant((*(_1.0: &mut [generator@$DIR/generator_tiny.rs:19:16: 19:24]))) = 3; // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n         return;                          // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n     }"}, {"sha": "501390c3bf1016066a95e879f238ceee402ec00a", "filename": "tests/mir-opt/inline/cycle.f.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -13,7 +13,7 @@\n           StorageLive(_3);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:6\n           _3 = &_1;                        // scope 0 at $DIR/cycle.rs:+1:5: +1:6\n           StorageLive(_4);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:8\n-          Deinit(_4);                      // scope 0 at $DIR/cycle.rs:+1:5: +1:8\n+          _4 = ();                         // scope 0 at $DIR/cycle.rs:+1:5: +1:8\n           _2 = <impl Fn() as Fn<()>>::call(move _3, move _4) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/cycle.rs:+1:5: +1:8\n                                            // mir::Constant\n                                            // + span: $DIR/cycle.rs:6:5: 6:6"}, {"sha": "fff8d01712770dc85d2b52cffc49675421b55be0", "filename": "tests/mir-opt/inline/inline_closure.foo.Inline.after.mir", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -21,17 +21,23 @@ fn foo(_1: T, _2: i32) -> i32 {\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/inline_closure.rs:+1:9: +1:10\n-        Deinit(_3);                      // scope 0 at $DIR/inline_closure.rs:+1:13: +1:24\n+        _3 = [closure@foo::<T>::{closure#0}]; // scope 0 at $DIR/inline_closure.rs:+1:13: +1:24\n+                                         // closure\n+                                         // + def_id: DefId(0:6 ~ inline_closure[92ba]::foo::{closure#0})\n+                                         // + substs: [\n+                                         //     T,\n+                                         //     i8,\n+                                         //     extern \"rust-call\" fn((i32, i32)) -> i32,\n+                                         //     (),\n+                                         // ]\n         StorageLive(_4);                 // scope 1 at $DIR/inline_closure.rs:+2:5: +2:6\n         _4 = &_3;                        // scope 1 at $DIR/inline_closure.rs:+2:5: +2:6\n         StorageLive(_5);                 // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n         StorageLive(_6);                 // scope 1 at $DIR/inline_closure.rs:+2:7: +2:8\n         _6 = _2;                         // scope 1 at $DIR/inline_closure.rs:+2:7: +2:8\n         StorageLive(_7);                 // scope 1 at $DIR/inline_closure.rs:+2:10: +2:11\n         _7 = _2;                         // scope 1 at $DIR/inline_closure.rs:+2:10: +2:11\n-        Deinit(_5);                      // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n-        (_5.0: i32) = move _6;           // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n-        (_5.1: i32) = move _7;           // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n+        _5 = (move _6, move _7);         // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n         StorageLive(_8);                 // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n         _8 = move (_5.0: i32);           // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n         StorageLive(_9);                 // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12"}, {"sha": "dab2043064f39802d924604ba1874f3a4f4fd5ad", "filename": "tests/mir-opt/inline/inline_closure_borrows_arg.foo.Inline.after.mir", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -24,17 +24,23 @@ fn foo(_1: T, _2: &i32) -> i32 {\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/inline_closure_borrows_arg.rs:+1:9: +1:10\n-        Deinit(_3);                      // scope 0 at $DIR/inline_closure_borrows_arg.rs:+1:13: +4:6\n+        _3 = [closure@foo::<T>::{closure#0}]; // scope 0 at $DIR/inline_closure_borrows_arg.rs:+1:13: +4:6\n+                                         // closure\n+                                         // + def_id: DefId(0:6 ~ inline_closure_borrows_arg[96e9]::foo::{closure#0})\n+                                         // + substs: [\n+                                         //     T,\n+                                         //     i8,\n+                                         //     for<'a, 'b> extern \"rust-call\" fn((&'a i32, &'b i32)) -> i32,\n+                                         //     (),\n+                                         // ]\n         StorageLive(_4);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:6\n         _4 = &_3;                        // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:6\n         StorageLive(_5);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n         StorageLive(_6);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:7: +5:8\n         _6 = &(*_2);                     // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:7: +5:8\n         StorageLive(_7);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:10: +5:11\n         _7 = &(*_2);                     // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:10: +5:11\n-        Deinit(_5);                      // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n-        (_5.0: &i32) = move _6;          // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n-        (_5.1: &i32) = move _7;          // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n+        _5 = (move _6, move _7);         // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n         StorageLive(_8);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n         _8 = move (_5.0: &i32);          // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n         StorageLive(_9);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12"}, {"sha": "84fd051e0a3518280555a38dbfa40c4581752187", "filename": "tests/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -30,18 +30,23 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         _4 = &_2;                        // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n         StorageLive(_5);                 // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n         _5 = &_1;                        // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n-        Deinit(_3);                      // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n-        (_3.0: &i32) = move _4;          // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n-        (_3.1: &T) = move _5;            // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n+        _3 = [closure@foo::<T>::{closure#0}] { q: move _4, t: move _5 }; // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n+                                         // closure\n+                                         // + def_id: DefId(0:6 ~ inline_closure_captures[8bc0]::foo::{closure#0})\n+                                         // + substs: [\n+                                         //     T,\n+                                         //     i8,\n+                                         //     extern \"rust-call\" fn((i32,)) -> (i32, T),\n+                                         //     (&i32, &T),\n+                                         // ]\n         StorageDead(_5);                 // scope 0 at $DIR/inline_closure_captures.rs:+1:16: +1:17\n         StorageDead(_4);                 // scope 0 at $DIR/inline_closure_captures.rs:+1:16: +1:17\n         StorageLive(_6);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:6\n         _6 = &_3;                        // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:6\n         StorageLive(_7);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n         StorageLive(_8);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:7: +2:8\n         _8 = _2;                         // scope 1 at $DIR/inline_closure_captures.rs:+2:7: +2:8\n-        Deinit(_7);                      // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n-        (_7.0: i32) = move _8;           // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n+        _7 = (move _8,);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n         StorageLive(_9);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n         _9 = move (_7.0: i32);           // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n         StorageLive(_10);                // scope 2 at $DIR/inline_closure_captures.rs:+1:19: +1:20\n@@ -50,9 +55,7 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         StorageLive(_11);                // scope 2 at $DIR/inline_closure_captures.rs:+1:22: +1:23\n         _13 = deref_copy ((*_6).1: &T);  // scope 2 at $DIR/inline_closure_captures.rs:+1:22: +1:23\n         _11 = (*_13);                    // scope 2 at $DIR/inline_closure_captures.rs:+1:22: +1:23\n-        Deinit(_0);                      // scope 2 at $DIR/inline_closure_captures.rs:+1:18: +1:24\n-        (_0.0: i32) = move _10;          // scope 2 at $DIR/inline_closure_captures.rs:+1:18: +1:24\n-        (_0.1: T) = move _11;            // scope 2 at $DIR/inline_closure_captures.rs:+1:18: +1:24\n+        _0 = (move _10, move _11);       // scope 2 at $DIR/inline_closure_captures.rs:+1:18: +1:24\n         StorageDead(_11);                // scope 2 at $DIR/inline_closure_captures.rs:+1:23: +1:24\n         StorageDead(_10);                // scope 2 at $DIR/inline_closure_captures.rs:+1:23: +1:24\n         StorageDead(_9);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9"}, {"sha": "e1b2f7dbf358d0117473f706aae225250a667f5e", "filename": "tests/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -48,9 +48,7 @@\n +         StorageDead(_6);                 // scope 2 at $DIR/inline_diverging.rs:28:15: 28:16\n +         StorageLive(_8);                 // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n +         _8 = move _3;                    // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n-+         Deinit(_1);                      // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11\n-+         (_1.0: !) = move _8;             // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11\n-+         (_1.1: !) = move _9;             // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11\n++         _1 = (move _8, move _9);         // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11\n +         StorageDead(_8);                 // scope 3 at $DIR/inline_diverging.rs:29:10: 29:11\n +         StorageDead(_3);                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n +         drop(_2) -> bb2;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2"}, {"sha": "95d649f89ba6b34d73095dda74cb4dc67dfd4cb4", "filename": "tests/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -44,8 +44,17 @@\n -     }\n - \n -     bb1: {\n-+         Deinit(_4);                      // scope 2 at $DIR/inline_generator.rs:15:5: 15:41\n-+         discriminant(_4) = 0;            // scope 2 at $DIR/inline_generator.rs:15:5: 15:41\n++         _4 = [generator@$DIR/inline_generator.rs:15:5: 15:8 (#0)]; // scope 2 at $DIR/inline_generator.rs:15:5: 15:41\n++                                          // generator\n++                                          // + def_id: DefId(0:7 ~ inline_generator[ea31]::g::{closure#0})\n++                                          // + substs: [\n++                                          //     bool,\n++                                          //     i32,\n++                                          //     bool,\n++                                          //     {bool, i32},\n++                                          //     (),\n++                                          // ]\n++                                          // + movability: Movable\n           _3 = &mut _4;                    // scope 0 at $DIR/inline_generator.rs:+1:23: +1:31\n -         _2 = Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline_generator.rs:+1:14: +1:32\n -                                          // mir::Constant\n@@ -59,8 +68,7 @@\n +         _5 = move _3;                    // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageLive(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         _6 = move _5;                    // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+         Deinit(_2);                      // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+         (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]) = move _6; // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         _2 = Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]> { pointer: move _6 }; // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageDead(_5);                 // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n           StorageDead(_3);                 // scope 0 at $DIR/inline_generator.rs:+1:31: +1:32\n@@ -106,9 +114,7 @@\n +     }\n + \n +     bb6: {\n-+         Deinit(_1);                      // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n-+         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n-+         discriminant(_1) = 0;            // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n++         _1 = GeneratorState::<i32, bool>::Yielded(move _8); // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n +         _11 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n +         discriminant((*_11)) = 3;        // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n +         goto -> bb1;                     // scope 0 at $DIR/inline_generator.rs:15:11: 15:39\n@@ -117,9 +123,7 @@\n +     bb7: {\n +         StorageLive(_8);                 // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n +         StorageDead(_8);                 // scope 6 at $DIR/inline_generator.rs:15:38: 15:39\n-+         Deinit(_1);                      // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n-+         ((_1 as Complete).0: bool) = _7; // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n-+         discriminant(_1) = 1;            // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n++         _1 = GeneratorState::<i32, bool>::Complete(_7); // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         _12 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         discriminant((*_12)) = 1;        // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         goto -> bb1;                     // scope 0 at $DIR/inline_generator.rs:15:41: 15:41"}, {"sha": "a1cbf0d3e0ddea636215f47eb8220bece8d79c82", "filename": "tests/mir-opt/inline/inline_into_box_place.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -51,9 +51,7 @@\n +                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Unevaluated(alloc::raw_vec::RawVec::<T>::NEW, [u32], None) }\n-+         Deinit(_9);                      // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         (_9.0: alloc::raw_vec::RawVec<u32>) = move _10; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         (_9.1: usize) = const 0_usize;   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         _9 = Vec::<u32> { buf: move _10, len: const 0_usize }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         StorageDead(_10);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         (*_8) = move _9;                 // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n +         StorageDead(_9);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43"}, {"sha": "4dd1aad489dd48e919b08e9e38715b5fe1a2f8bc", "filename": "tests/mir-opt/inline/issue_76997_inline_scopes_parenting.main.Inline.after.mir", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -20,14 +20,20 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:9: +1:10\n-        Deinit(_1);                      // scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:13: +1:33\n+        _1 = [closure@$DIR/issue_76997_inline_scopes_parenting.rs:5:13: 5:16]; // scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:13: +1:33\n+                                         // closure\n+                                         // + def_id: DefId(0:4 ~ issue_76997_inline_scopes_parenting[bc59]::main::{closure#0})\n+                                         // + substs: [\n+                                         //     i8,\n+                                         //     extern \"rust-call\" fn(((),)),\n+                                         //     (),\n+                                         // ]\n         StorageLive(_2);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:6\n         _2 = &_1;                        // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:6\n         StorageLive(_3);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n         StorageLive(_4);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:7: +2:9\n-        Deinit(_4);                      // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:7: +2:9\n-        Deinit(_3);                      // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n-        (_3.0: ()) = move _4;            // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n+        _4 = ();                         // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:7: +2:9\n+        _3 = (move _4,);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n         StorageLive(_5);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n         _5 = move (_3.0: ());            // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n         StorageLive(_6);                 // scope 2 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:23: +1:24"}, {"sha": "aa62e4a165e197d811e4f90cd9fe027132fe9827", "filename": "tests/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -25,7 +25,7 @@\n       bb1: {\n           _3 = &_4;                        // scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n-          Deinit(_5);                      // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n+          _5 = ();                         // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n -         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n -                                          // mir::Constant\n -                                          // + span: $DIR/issue_78442.rs:11:5: 11:15"}, {"sha": "21055c6bfb57f4e3eb21546d374d8ca122528cad", "filename": "tests/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -24,7 +24,7 @@\n       bb1: {\n           _3 = &_4;                        // scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n-          Deinit(_5);                      // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n+          _5 = ();                         // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n -         _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n +         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n                                            // mir::Constant"}, {"sha": "bcda1288045664ae98db4fb45b0a140b6767788e", "filename": "tests/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -67,17 +67,14 @@\n   \n       bb7: {\n           StorageDead(_6);                 // scope 4 at $DIR/issue_75439.rs:+5:35: +5:36\n-          Deinit(_0);                      // scope 3 at $DIR/issue_75439.rs:+5:9: +5:39\n-          ((_0 as Some).0: [u8; 4]) = move _5; // scope 3 at $DIR/issue_75439.rs:+5:9: +5:39\n-          discriminant(_0) = 1;            // scope 3 at $DIR/issue_75439.rs:+5:9: +5:39\n+          _0 = Option::<[u8; 4]>::Some(move _5); // scope 3 at $DIR/issue_75439.rs:+5:9: +5:39\n           StorageDead(_5);                 // scope 3 at $DIR/issue_75439.rs:+5:38: +5:39\n           StorageDead(_4);                 // scope 1 at $DIR/issue_75439.rs:+6:5: +6:6\n           goto -> bb9;                     // scope 1 at $DIR/issue_75439.rs:+4:5: +8:6\n       }\n   \n       bb8: {\n-          Deinit(_0);                      // scope 1 at $DIR/issue_75439.rs:+7:9: +7:13\n-          discriminant(_0) = 0;            // scope 1 at $DIR/issue_75439.rs:+7:9: +7:13\n+          _0 = Option::<[u8; 4]>::None;    // scope 1 at $DIR/issue_75439.rs:+7:9: +7:13\n           goto -> bb9;                     // scope 1 at $DIR/issue_75439.rs:+4:5: +8:6\n       }\n   "}, {"sha": "5c972a00e464d846ba03d11487e6cc69639fc3e4", "filename": "tests/mir-opt/lower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -25,9 +25,9 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:12\n-          Deinit(_1);                      // scope 0 at $DIR/lower_intrinsics.rs:+1:15: +1:17\n+          _1 = ();                         // scope 0 at $DIR/lower_intrinsics.rs:+1:15: +1:17\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:16\n-          Deinit(_2);                      // scope 1 at $DIR/lower_intrinsics.rs:+2:19: +2:21\n+          _2 = ();                         // scope 1 at $DIR/lower_intrinsics.rs:+2:19: +2:21\n           StorageLive(_3);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n           StorageLive(_4);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:59\n           StorageLive(_5);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:45"}, {"sha": "92f8d4e14abbde628f7c54d700f7078b952b6466", "filename": "tests/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.diff", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -41,7 +41,7 @@\n -         _3 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+16:13: +16:22\n -         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+17:13: +17:22\n -         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:+18:13: +18:21\n--         Deinit(_6);                      // scope 4 at $DIR/matches_reduce_branches.rs:+19:13: +19:15\n+-         _6 = ();                         // scope 4 at $DIR/matches_reduce_branches.rs:+19:13: +19:15\n -         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:+19:13: +19:15\n -     }\n - \n@@ -54,7 +54,7 @@\n +         _3 = Eq(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:+9:13: +9:21\n           _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+10:13: +10:22\n           _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:+11:13: +11:21\n-          Deinit(_6);                      // scope 4 at $DIR/matches_reduce_branches.rs:+12:13: +12:15\n+          _6 = ();                         // scope 4 at $DIR/matches_reduce_branches.rs:+12:13: +12:15\n -         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:+12:13: +12:15\n -     }\n - \n@@ -69,11 +69,7 @@\n           _9 = _4;                         // scope 4 at $DIR/matches_reduce_branches.rs:+23:12: +23:13\n           StorageLive(_10);                // scope 4 at $DIR/matches_reduce_branches.rs:+23:15: +23:16\n           _10 = _5;                        // scope 4 at $DIR/matches_reduce_branches.rs:+23:15: +23:16\n-          Deinit(_0);                      // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n-          (_0.0: bool) = move _7;          // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n-          (_0.1: bool) = move _8;          // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n-          (_0.2: bool) = move _9;          // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n-          (_0.3: bool) = move _10;         // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n+          _0 = (move _7, move _8, move _9, move _10); // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n           StorageDead(_10);                // scope 4 at $DIR/matches_reduce_branches.rs:+23:16: +23:17\n           StorageDead(_9);                 // scope 4 at $DIR/matches_reduce_branches.rs:+23:16: +23:17\n           StorageDead(_8);                 // scope 4 at $DIR/matches_reduce_branches.rs:+23:16: +23:17"}, {"sha": "0580f73341d21fdf5ae84496bd47e143db3ce163", "filename": "tests/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -34,7 +34,7 @@\n -     }\n - \n -     bb4: {\n-          Deinit(_0);                      // scope 0 at $DIR/matches_reduce_branches.rs:+2:9: +2:11\n+          _0 = ();                         // scope 0 at $DIR/matches_reduce_branches.rs:+2:9: +2:11\n -         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n +         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n       }"}, {"sha": "20e8ef2f72029daf9e512f55e3e7601080cca4dd", "filename": "tests/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -20,7 +20,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:+1:9: +1:12\n           StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+1:21: +1:23\n-          Deinit(_2);                      // scope 0 at $DIR/matches_reduce_branches.rs:+1:21: +1:23\n+          _2 = ();                         // scope 0 at $DIR/matches_reduce_branches.rs:+1:21: +1:23\n           StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n           StorageLive(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n           StorageLive(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52"}, {"sha": "210f178a0a9e5d32e7068dd5c6cd933c7a28a128", "filename": "tests/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -16,20 +16,15 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:9: +1:14\n         StorageLive(_2);                 // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:24: +1:42\n         StorageLive(_3);                 // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:32: +1:41\n-        Deinit(_3);                      // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:32: +1:41\n-        (_3.0: usize) = const 0_usize;   // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:32: +1:41\n-        Deinit(_2);                      // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:24: +1:42\n-        (_2.0: Droppy) = move _3;        // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:24: +1:42\n+        _3 = Droppy(const 0_usize);      // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:32: +1:41\n+        _2 = Aligned(move _3);           // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:24: +1:42\n         StorageDead(_3);                 // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:41: +1:42\n-        Deinit(_1);                      // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:17: +1:43\n-        (_1.0: Aligned) = move _2;       // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:17: +1:43\n+        _1 = Packed(move _2);            // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:17: +1:43\n         StorageDead(_2);                 // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:42: +1:43\n         StorageLive(_4);                 // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:11: +2:29\n         StorageLive(_5);                 // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:19: +2:28\n-        Deinit(_5);                      // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:19: +2:28\n-        (_5.0: usize) = const 0_usize;   // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:19: +2:28\n-        Deinit(_4);                      // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:11: +2:29\n-        (_4.0: Droppy) = move _5;        // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:11: +2:29\n+        _5 = Droppy(const 0_usize);      // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:19: +2:28\n+        _4 = Aligned(move _5);           // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:11: +2:29\n         StorageDead(_5);                 // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:28: +2:29\n         StorageLive(_6);                 // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:5: +2:8\n         _6 = move (_1.0: Aligned);       // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:5: +2:8"}, {"sha": "a8dd91efc379f86fef4c776c80d2a693f00d806a", "filename": "tests/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -31,9 +31,7 @@\n           _1 = const 0_i32;                // scope 0 at $DIR/remove_storage_markers.rs:+1:19: +1:20\n -         StorageLive(_2);                 // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n -         StorageLive(_3);                 // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n-          Deinit(_3);                      // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n-          (_3.0: i32) = const 0_i32;       // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n-          (_3.1: i32) = const 10_i32;      // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n+          _3 = std::ops::Range::<i32> { start: const 0_i32, end: const 10_i32 }; // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n           _2 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _3) -> bb1; // scope 1 at $DIR/remove_storage_markers.rs:+2:14: +2:19\n                                            // mir::Constant\n                                            // + span: $DIR/remove_storage_markers.rs:10:14: 10:19"}, {"sha": "af34bc5edb7fe640fcde983caf154d8ce5a21ef1", "filename": "tests/mir-opt/remove_zsts.get_union.PreCodegen.after.mir", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fremove_zsts.get_union.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fremove_zsts.get_union.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fremove_zsts.get_union.PreCodegen.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -2,9 +2,12 @@\n \n fn get_union() -> Foo {\n     let mut _0: Foo;                     // return place in scope 0 at $DIR/remove_zsts.rs:+0:19: +0:22\n+    let mut _1: ();                      // in scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n \n     bb0: {\n-        Deinit(_0);                      // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n+        StorageLive(_1);                 // scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n+        _0 = Foo { x: move _1 };         // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n+        StorageDead(_1);                 // scope 0 at $DIR/remove_zsts.rs:+1:17: +1:18\n         return;                          // scope 0 at $DIR/remove_zsts.rs:+2:2: +2:2\n     }\n }"}, {"sha": "0af29b2babc2b114aa841f6432c9b2a616c99754", "filename": "tests/mir-opt/remove_zsts.get_union.RemoveZsts.diff", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fremove_zsts.get_union.RemoveZsts.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fremove_zsts.get_union.RemoveZsts.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fremove_zsts.get_union.RemoveZsts.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -7,11 +7,9 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n--         Deinit(_1);                      // scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n+-         _1 = ();                         // scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n +         nop;                             // scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n-          Deinit(_0);                      // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n--         (_0.0: ()) = move _1;            // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n-+         nop;                             // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n+          _0 = Foo { x: move _1 };         // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n           StorageDead(_1);                 // scope 0 at $DIR/remove_zsts.rs:+1:17: +1:18\n           return;                          // scope 0 at $DIR/remove_zsts.rs:+2:2: +2:2\n       }"}, {"sha": "3b479710b4f2d3af3f6b2f42deb80dfdddcd0811", "filename": "tests/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -122,9 +122,7 @@ fn array_casts() -> () {\n                                          // + literal: Const { ty: &usize, val: Unevaluated(array_casts, [], Some(promoted[0])) }\n         Retag(_35);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _18 = &(*_35);                   // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        Deinit(_13);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        (_13.0: &usize) = move _14;      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        (_13.1: &usize) = move _18;      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _13 = (move _14, move _18);      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         Retag(_13);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageDead(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageDead(_14);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -150,8 +148,7 @@ fn array_casts() -> () {\n \n     bb3: {\n         StorageLive(_27);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        Deinit(_27);                     // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        discriminant(_27) = 0;           // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _27 = core::panicking::AssertKind::Eq; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_28);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_29);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _29 = move _27;                  // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -164,8 +161,7 @@ fn array_casts() -> () {\n         _33 = &(*_21);                   // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _32 = &(*_33);                   // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_34);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        Deinit(_34);                     // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        discriminant(_34) = 0;           // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _34 = Option::<Arguments<'_>>::None; // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         Retag(_34);                      // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _28 = core::panicking::assert_failed::<usize, usize>(move _29, move _30, move _32, move _34); // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // mir::Constant"}, {"sha": "d7b6d64b6b7b7abb655d0cb729df2f36a4c19445", "filename": "tests/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -62,8 +62,7 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 1 at $DIR/retag.rs:+3:13: +3:14\n         StorageLive(_4);                 // scope 1 at $DIR/retag.rs:+3:17: +3:36\n         StorageLive(_5);                 // scope 1 at $DIR/retag.rs:+3:17: +3:24\n-        Deinit(_5);                      // scope 1 at $DIR/retag.rs:+3:17: +3:24\n-        (_5.0: i32) = const 0_i32;       // scope 1 at $DIR/retag.rs:+3:17: +3:24\n+        _5 = Test(const 0_i32);          // scope 1 at $DIR/retag.rs:+3:17: +3:24\n         _4 = &_5;                        // scope 1 at $DIR/retag.rs:+3:17: +3:36\n         StorageLive(_6);                 // scope 1 at $DIR/retag.rs:+3:29: +3:35\n         StorageLive(_7);                 // scope 1 at $DIR/retag.rs:+3:29: +3:35\n@@ -107,7 +106,14 @@ fn main() -> () {\n         StorageDead(_2);                 // scope 1 at $DIR/retag.rs:+8:5: +8:6\n         StorageLive(_13);                // scope 1 at $DIR/retag.rs:+11:9: +11:10\n         StorageLive(_14);                // scope 1 at $DIR/retag.rs:+11:31: +14:6\n-        Deinit(_14);                     // scope 1 at $DIR/retag.rs:+11:31: +14:6\n+        _14 = [closure@main::{closure#0}]; // scope 1 at $DIR/retag.rs:+11:31: +14:6\n+                                         // closure\n+                                         // + def_id: DefId(0:14 ~ retag[4622]::main::{closure#0})\n+                                         // + substs: [\n+                                         //     i8,\n+                                         //     for<'a> extern \"rust-call\" fn((&'a i32,)) -> &'a i32,\n+                                         //     (),\n+                                         // ]\n         Retag(_14);                      // scope 1 at $DIR/retag.rs:+11:31: +14:6\n         _13 = move _14 as for<'a> fn(&'a i32) -> &'a i32 (Pointer(ClosureFnPointer(Normal))); // scope 1 at $DIR/retag.rs:+11:31: +14:6\n         StorageDead(_14);                // scope 1 at $DIR/retag.rs:+11:47: +11:48\n@@ -129,8 +135,7 @@ fn main() -> () {\n         StorageLive(_19);                // scope 7 at $DIR/retag.rs:+18:5: +18:24\n         StorageLive(_20);                // scope 7 at $DIR/retag.rs:+18:5: +18:24\n         StorageLive(_21);                // scope 7 at $DIR/retag.rs:+18:5: +18:12\n-        Deinit(_21);                     // scope 7 at $DIR/retag.rs:+18:5: +18:12\n-        (_21.0: i32) = const 0_i32;      // scope 7 at $DIR/retag.rs:+18:5: +18:12\n+        _21 = Test(const 0_i32);         // scope 7 at $DIR/retag.rs:+18:5: +18:12\n         _20 = &_21;                      // scope 7 at $DIR/retag.rs:+18:5: +18:24\n         StorageLive(_22);                // scope 7 at $DIR/retag.rs:+18:21: +18:23\n         StorageLive(_23);                // scope 7 at $DIR/retag.rs:+18:21: +18:23"}, {"sha": "cb89d6340760f9ebc022d6b0f2ca9ad654d501e2", "filename": "tests/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 19, "deletions": 41, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -56,36 +56,31 @@\n           StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n           _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n           _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n--         switchInt(move _10) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          switchInt(move _10) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n       bb1: {\n--         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n--         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n--         switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n--     }\n-- \n--     bb2: {\n+          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n+          _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+          switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+      }\n+  \n+      bb2: {\n           StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           _9 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           _2 = _9;                         // scope 4 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-          ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-          discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n+          _0 = Result::<i32, i32>::Ok(move _2); // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n           StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n       }\n   \n--     bb3: {\n-+     bb2: {\n+      bb3: {\n           unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n       }\n   \n--     bb4: {\n-+     bb3: {\n+      bb4: {\n           StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n@@ -97,9 +92,7 @@\n           _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _0 = Result::<i32, i32>::Err(move _17); // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n@@ -109,48 +102,33 @@\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n       }\n   \n--     bb5: {\n-+     bb4: {\n+      bb5: {\n           StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           _13 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           _15 = move _13;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_14);                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_14 as Err).0: i32) = move _15; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_14) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _14 = Result::<Infallible, i32>::Err(move _15); // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_3);                      // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _14; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _3 = ControlFlow::<Result<Infallible, i32>, i32>::Break(move _14); // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n--         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-+         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         switchInt(move _5) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+          goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n--     bb6: {\n-+     bb5: {\n+      bb6: {\n           unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n--     bb7: {\n-+     bb6: {\n+      bb7: {\n           StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           _12 = move _11;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_3);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_3 as Continue).0: i32) = move _12; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _3 = ControlFlow::<Result<Infallible, i32>, i32>::Continue(move _12); // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n--         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-+         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         switchInt(move _5) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+          goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   }\n   "}, {"sha": "3c7e9dc6131523601efb5e967f447dec60005f5e", "filename": "tests/mir-opt/separate_const_switch.too_complex.SeparateConstSwitch.diff", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -38,14 +38,10 @@\n           _6 = ((_1 as Err).0: usize);     // scope 0 at $DIR/separate_const_switch.rs:+8:17: +8:18\n           StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:+8:42: +8:43\n           _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:+8:42: +8:43\n-          Deinit(_2);                      // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n-          ((_2 as Break).0: usize) = move _7; // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n-          discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n+          _2 = ControlFlow::<usize, i32>::Break(move _7); // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n           StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:+8:43: +8:44\n           StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n--         goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n-+         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-+         switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n+          goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n       }\n   \n       bb2: {\n@@ -57,53 +53,41 @@\n           _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n           StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n           _5 = _4;                         // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-          Deinit(_2);                      // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-          ((_2 as Continue).0: i32) = move _5; // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-          discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n+          _2 = ControlFlow::<usize, i32>::Continue(move _5); // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n           StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:45: +7:46\n           StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n--         goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n--     }\n-- \n--     bb4: {\n+          goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n+      }\n+  \n+      bb4: {\n           _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n--         switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n-+         switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n+          switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n       }\n   \n--     bb5: {\n-+     bb4: {\n+      bb5: {\n           StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n           _11 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-          Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n-          discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n+          _0 = Option::<i32>::None;        // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n           StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n--         goto -> bb8;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n-+         goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n+          goto -> bb8;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n       }\n   \n--     bb6: {\n-+     bb5: {\n+      bb6: {\n           unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n       }\n   \n--     bb7: {\n-+     bb6: {\n+      bb7: {\n           StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n           _9 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n           StorageLive(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n           _10 = _9;                        // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-          Deinit(_0);                      // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-          ((_0 as Some).0: i32) = move _10; // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-          discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n+          _0 = Option::<i32>::Some(move _10); // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n           StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:43: +11:44\n           StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n--         goto -> bb8;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-+         goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n+          goto -> bb8;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n       }\n   \n--     bb8: {\n-+     bb7: {\n+      bb8: {\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+14:1: +14:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:+14:2: +14:2\n       }"}, {"sha": "5c898d798ff1688e8fb109f7549f012bb111f776", "filename": "tests/mir-opt/simple_option_map_e2e.ezmap.PreCodegen.after.mir", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -4,29 +4,31 @@ fn ezmap(_1: Option<i32>) -> Option<i32> {\n     debug x => _1;                       // in scope 0 at $DIR/simple_option_map_e2e.rs:+0:14: +0:15\n     let mut _0: std::option::Option<i32>; // return place in scope 0 at $DIR/simple_option_map_e2e.rs:+0:33: +0:44\n     let mut _2: [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]; // in scope 0 at $DIR/simple_option_map_e2e.rs:+1:12: +1:21\n+    let mut _7: i32;                     // in scope 0 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n     scope 1 (inlined map::<i32, i32, [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]>) { // at $DIR/simple_option_map_e2e.rs:14:5: 14:22\n         debug slf => _1;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:2:17: 2:20\n         debug f => _2;                   // in scope 1 at $DIR/simple_option_map_e2e.rs:2:33: 2:34\n         let mut _3: isize;               // in scope 1 at $DIR/simple_option_map_e2e.rs:7:9: 7:16\n-        let mut _4: i32;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+        let _4: i32;                     // in scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n         let mut _5: i32;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+        let mut _6: (i32,);              // in scope 1 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n         scope 2 {\n-            debug x => _5;               // in scope 2 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n+            debug x => _4;               // in scope 2 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n             scope 3 (inlined ezmap::{closure#0}) { // at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-                debug n => _5;           // in scope 3 at $DIR/simple_option_map_e2e.rs:+1:13: +1:14\n+                debug n => _7;           // in scope 3 at $DIR/simple_option_map_e2e.rs:+1:13: +1:14\n             }\n         }\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:12: +1:21\n+        StorageLive(_4);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:5: +1:22\n         _3 = discriminant(_1);           // scope 1 at $DIR/simple_option_map_e2e.rs:6:11: 6:14\n         switchInt(move _3) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 1 at $DIR/simple_option_map_e2e.rs:6:5: 6:14\n     }\n \n     bb1: {\n-        Deinit(_0);                      // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n-        discriminant(_0) = 0;            // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n+        _0 = Option::<i32>::None;        // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n         goto -> bb4;                     // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n     }\n \n@@ -35,17 +37,22 @@ fn ezmap(_1: Option<i32>) -> Option<i32> {\n     }\n \n     bb3: {\n-        _5 = move ((_1 as Some).0: i32); // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n-        StorageLive(_4);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        _4 = Add(_5, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n-        Deinit(_0);                      // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n-        ((_0 as Some).0: i32) = move _4; // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n-        discriminant(_0) = 1;            // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n-        StorageDead(_4);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:29: 7:30\n+        _4 = move ((_1 as Some).0: i32); // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n+        StorageLive(_5);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+        StorageLive(_6);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+        _6 = (move _4,);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+        StorageLive(_7);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+        _7 = move (_6.0: i32);           // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+        _5 = Add(_7, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n+        StorageDead(_7);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+        StorageDead(_6);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:28: 7:29\n+        _0 = Option::<i32>::Some(move _5); // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n+        StorageDead(_5);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:29: 7:30\n         goto -> bb4;                     // scope 1 at $DIR/simple_option_map_e2e.rs:10:1: 10:2\n     }\n \n     bb4: {\n+        StorageDead(_4);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:5: +1:22\n         StorageDead(_2);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:21: +1:22\n         return;                          // scope 0 at $DIR/simple_option_map_e2e.rs:+2:2: +2:2\n     }"}, {"sha": "946595e322e1889c1889d834acdbd1745fc683d4", "filename": "tests/mir-opt/simplify_locals.d1.SimplifyLocals-before-const-prop.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals-before-const-prop.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -9,8 +9,7 @@\n   \n       bb0: {\n -         StorageLive(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:13: +2:17\n--         Deinit(_1);                      // scope 0 at $DIR/simplify_locals.rs:+2:13: +2:17\n--         discriminant(_1) = 0;            // scope 0 at $DIR/simplify_locals.rs:+2:13: +2:17\n+-         _1 = E::A;                       // scope 0 at $DIR/simplify_locals.rs:+2:13: +2:17\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:17: +2:18\n           _0 = const ();                   // scope 0 at $DIR/simplify_locals.rs:+0:9: +3:2\n           return;                          // scope 0 at $DIR/simplify_locals.rs:+3:2: +3:2"}, {"sha": "6a5dc56e211ce59b007e7ed26ee6c65e57aaf2a0", "filename": "tests/mir-opt/simplify_locals.d2.SimplifyLocals-before-const-prop.diff", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals-before-const-prop.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -9,15 +9,11 @@\n   \n       bb0: {\n -         StorageLive(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:22: +2:26\n--         Deinit(_1);                      // scope 0 at $DIR/simplify_locals.rs:+2:22: +2:26\n--         discriminant(_1) = 1;            // scope 0 at $DIR/simplify_locals.rs:+2:22: +2:26\n+-         _1 = E::B;                       // scope 0 at $DIR/simplify_locals.rs:+2:22: +2:26\n -         StorageLive(_2);                 // scope 0 at $DIR/simplify_locals.rs:+2:5: +2:17\n -         StorageLive(_3);                 // scope 0 at $DIR/simplify_locals.rs:+2:11: +2:15\n--         Deinit(_3);                      // scope 0 at $DIR/simplify_locals.rs:+2:11: +2:15\n--         discriminant(_3) = 0;            // scope 0 at $DIR/simplify_locals.rs:+2:11: +2:15\n--         Deinit(_2);                      // scope 0 at $DIR/simplify_locals.rs:+2:6: +2:16\n--         (_2.0: i32) = const 10_i32;      // scope 0 at $DIR/simplify_locals.rs:+2:6: +2:16\n--         (_2.1: E) = move _3;             // scope 0 at $DIR/simplify_locals.rs:+2:6: +2:16\n+-         _3 = E::A;                       // scope 0 at $DIR/simplify_locals.rs:+2:11: +2:15\n+-         _2 = (const 10_i32, move _3);    // scope 0 at $DIR/simplify_locals.rs:+2:6: +2:16\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify_locals.rs:+2:15: +2:16\n -         (_2.1: E) = move _1;             // scope 0 at $DIR/simplify_locals.rs:+2:5: +2:26\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:25: +2:26"}, {"sha": "9b7dd733820344ffe78e7db64e1445947b934f5c", "filename": "tests/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals-final.diff", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals-final.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals-final.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals-final.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -18,14 +18,10 @@\n       bb0: {\n           StorageLive(_1);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:30: +1:69\n           StorageLive(_2);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:31: +1:49\n-          Deinit(_2);                      // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:31: +1:49\n-          discriminant(_2) = 0;            // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:31: +1:49\n+          _2 = Option::<u8>::None;         // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:31: +1:49\n           StorageLive(_3);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:51: +1:68\n-          Deinit(_3);                      // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:51: +1:68\n-          discriminant(_3) = 0;            // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:51: +1:68\n-          Deinit(_1);                      // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:30: +1:69\n-          (_1.0: std::option::Option<u8>) = move _2; // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:30: +1:69\n-          (_1.1: std::option::Option<T>) = move _3; // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:30: +1:69\n+          _3 = Option::<T>::None;          // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:51: +1:68\n+          _1 = (move _2, move _3);         // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:30: +1:69\n           StorageDead(_3);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:68: +1:69\n           StorageDead(_2);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:68: +1:69\n           _5 = discriminant((_1.0: std::option::Option<u8>)); // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:12: +1:27"}, {"sha": "0f8866f9c2f4eecfa9b91b76dea8df0b5a19347e", "filename": "tests/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -28,36 +28,30 @@\n       bb0: {\n -         StorageLive(_1);                 // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:20: +1:28\n -         StorageLive(_2);                 // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:21: +1:23\n--         Deinit(_2);                      // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:21: +1:23\n+-         _2 = ();                         // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:21: +1:23\n -         StorageLive(_3);                 // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:25: +1:27\n--         Deinit(_3);                      // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:25: +1:27\n--         Deinit(_1);                      // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:20: +1:28\n--         (_1.0: ()) = move _2;            // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:20: +1:28\n--         (_1.1: ()) = move _3;            // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:20: +1:28\n+-         _3 = ();                         // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:25: +1:27\n+-         _1 = (move _2, move _3);         // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:20: +1:28\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:27: +1:28\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:27: +1:28\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:28: +1:29\n -         StorageLive(_4);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:5: +2:22\n -         StorageLive(_5);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n -         StorageLive(_6);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:14: +2:16\n--         Deinit(_6);                      // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:14: +2:16\n+-         _6 = ();                         // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:14: +2:16\n -         StorageLive(_7);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:18: +2:20\n--         Deinit(_7);                      // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:18: +2:20\n--         Deinit(_5);                      // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n--         (_5.0: ()) = move _6;            // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n--         (_5.1: ()) = move _7;            // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n+-         _7 = ();                         // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:18: +2:20\n+-         _5 = (move _6, move _7);         // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n -         StorageDead(_7);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:20: +2:21\n -         StorageDead(_6);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:20: +2:21\n -         _4 = use_zst(move _5) -> bb1;    // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:5: +2:22\n +         StorageLive(_1);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:5: +2:22\n +         StorageLive(_2);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n +         StorageLive(_3);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:14: +2:16\n-+         Deinit(_3);                      // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:14: +2:16\n++         _3 = ();                         // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:14: +2:16\n +         StorageLive(_4);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:18: +2:20\n-+         Deinit(_4);                      // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:18: +2:20\n-+         Deinit(_2);                      // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n-+         (_2.0: ()) = move _3;            // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n-+         (_2.1: ()) = move _4;            // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n++         _4 = ();                         // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:18: +2:20\n++         _2 = (move _3, move _4);         // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n +         StorageDead(_4);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:20: +2:21\n +         StorageDead(_3);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:20: +2:21\n +         _1 = use_zst(move _2) -> bb1;    // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:5: +2:22\n@@ -73,8 +67,7 @@\n -         StorageLive(_9);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:34\n -         StorageLive(_10);                // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:30\n -         StorageLive(_11);                // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n--         Deinit(_11);                     // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n--         (_11.0: u8) = const 40_u8;       // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n+-         _11 = Temp { x: const 40_u8 };   // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n -         _10 = (_11.0: u8);               // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:30\n -         _9 = Add(move _10, const 2_u8);  // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:34\n -         StorageDead(_10);                // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:33: +4:34\n@@ -85,8 +78,7 @@\n +         StorageLive(_6);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:34\n +         StorageLive(_7);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:30\n +         StorageLive(_8);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n-+         Deinit(_8);                      // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n-+         (_8.0: u8) = const 40_u8;        // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n++         _8 = Temp { x: const 40_u8 };    // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n +         _7 = (_8.0: u8);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:30\n +         _6 = Add(move _7, const 2_u8);   // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:34\n +         StorageDead(_7);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:33: +4:34"}, {"sha": "3f9af31d888e325fe26b9dbda79a6aa3d2a7a486", "filename": "tests/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals-before-const-prop.diff", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals-before-const-prop.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -26,9 +26,7 @@\n           _3 = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:14: +3:15\n           StorageLive(_4);                 // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:25: +3:26\n           _4 = move _3;                    // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:25: +3:26\n-          Deinit(_0);                      // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:20: +3:27\n-          ((_0 as Some).0: std::boxed::Box<()>) = move _4; // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:20: +3:27\n-          discriminant(_0) = 1;            // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:20: +3:27\n+          _0 = Option::<Box<()>>::Some(move _4); // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:20: +3:27\n           StorageDead(_4);                 // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:26: +3:27\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:26: +3:27\n           goto -> bb4;                     // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:26: +3:27\n@@ -39,8 +37,7 @@\n       }\n   \n       bb3: {\n-          Deinit(_0);                      // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+2:17: +2:21\n-          discriminant(_0) = 0;            // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+2:17: +2:21\n+          _0 = Option::<Box<()>>::None;    // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+2:17: +2:21\n           goto -> bb4;                     // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+2:17: +2:21\n       }\n   "}, {"sha": "17a89e7d8eb204c2fc4280ee829e0ada254671af", "filename": "tests/mir-opt/sroa.dropping.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsroa.dropping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsroa.dropping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.dropping.ScalarReplacementOfAggregates.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -13,18 +13,12 @@\n           StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+1:5: +1:32\n           StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:5: +1:30\n           StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+1:7: +1:13\n-          Deinit(_3);                      // scope 0 at $DIR/sroa.rs:+1:7: +1:13\n-          (_3.0: usize) = const 0_usize;   // scope 0 at $DIR/sroa.rs:+1:7: +1:13\n+          _3 = Tag(const 0_usize);         // scope 0 at $DIR/sroa.rs:+1:7: +1:13\n           StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:21\n-          Deinit(_4);                      // scope 0 at $DIR/sroa.rs:+1:15: +1:21\n-          (_4.0: usize) = const 1_usize;   // scope 0 at $DIR/sroa.rs:+1:15: +1:21\n+          _4 = Tag(const 1_usize);         // scope 0 at $DIR/sroa.rs:+1:15: +1:21\n           StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:23: +1:29\n-          Deinit(_5);                      // scope 0 at $DIR/sroa.rs:+1:23: +1:29\n-          (_5.0: usize) = const 2_usize;   // scope 0 at $DIR/sroa.rs:+1:23: +1:29\n-          Deinit(_2);                      // scope 0 at $DIR/sroa.rs:+1:5: +1:30\n-          (_2.0: Tag) = move _3;           // scope 0 at $DIR/sroa.rs:+1:5: +1:30\n-          (_2.1: Tag) = move _4;           // scope 0 at $DIR/sroa.rs:+1:5: +1:30\n-          (_2.2: Tag) = move _5;           // scope 0 at $DIR/sroa.rs:+1:5: +1:30\n+          _5 = Tag(const 2_usize);         // scope 0 at $DIR/sroa.rs:+1:23: +1:29\n+          _2 = S(move _3, move _4, move _5); // scope 0 at $DIR/sroa.rs:+1:5: +1:30\n           StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:29: +1:30\n           StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+1:29: +1:30\n           StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+1:29: +1:30"}, {"sha": "04d26162aadef88a0a3f63c0257c461879e6bd47", "filename": "tests/mir-opt/sroa.enums.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -16,9 +16,7 @@\n           StorageLive(_2);                 // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n           StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+1:27: +1:28\n           _3 = _1;                         // scope 1 at $DIR/sroa.rs:+1:27: +1:28\n-          Deinit(_2);                      // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n-          ((_2 as Some).0: usize) = move _3; // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n-          discriminant(_2) = 1;            // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n+          _2 = Option::<usize>::Some(move _3); // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n           StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+1:28: +1:29\n           _4 = discriminant(_2);           // scope 1 at $DIR/sroa.rs:+1:12: +1:19\n           switchInt(move _4) -> [1: bb1, otherwise: bb2]; // scope 1 at $DIR/sroa.rs:+1:12: +1:19"}, {"sha": "b01fb6fc91538ccd3a35ccd5d50cc17d68629091", "filename": "tests/mir-opt/sroa.escaping.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -22,10 +22,7 @@\n       }\n   \n       bb1: {\n-          Deinit(_4);                      // scope 0 at $DIR/sroa.rs:+2:8: +2:39\n-          (_4.0: u32) = const 1_u32;       // scope 0 at $DIR/sroa.rs:+2:8: +2:39\n-          (_4.1: u32) = const 2_u32;       // scope 0 at $DIR/sroa.rs:+2:8: +2:39\n-          (_4.2: u32) = move _5;           // scope 0 at $DIR/sroa.rs:+2:8: +2:39\n+          _4 = Escaping { a: const 1_u32, b: const 2_u32, c: move _5 }; // scope 0 at $DIR/sroa.rs:+2:8: +2:39\n           StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+2:38: +2:39\n           _3 = &(_4.0: u32);               // scope 0 at $DIR/sroa.rs:+2:7: +2:41\n           _2 = &raw const (*_3);           // scope 0 at $DIR/sroa.rs:+2:7: +2:41"}, {"sha": "749c22c26e04bba376bf902ae8811b8cd84a15b4", "filename": "tests/mir-opt/sroa.flat.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 9, "deletions": 39, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -10,10 +10,6 @@\n       let mut _5: Foo;                     // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n       let mut _6: ();                      // in scope 0 at $DIR/sroa.rs:+1:45: +1:47\n       let mut _7: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:60: +1:68\n-+     let mut _8: u8;                      // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+     let mut _9: ();                      // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+     let mut _10: &str;                   // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+     let mut _11: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/sroa.rs:+1:15: +1:16\n           debug b => _2;                   // in scope 1 at $DIR/sroa.rs:+1:18: +1:19\n@@ -30,52 +26,26 @@\n       }\n   \n       bb0: {\n--         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         StorageLive(_8);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         StorageLive(_9);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         StorageLive(_10);                // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         StorageLive(_11);                // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n+          StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n           StorageLive(_6);                 // scope 0 at $DIR/sroa.rs:+1:45: +1:47\n-          Deinit(_6);                      // scope 0 at $DIR/sroa.rs:+1:45: +1:47\n+          _6 = ();                         // scope 0 at $DIR/sroa.rs:+1:45: +1:47\n           StorageLive(_7);                 // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n-          Deinit(_7);                      // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n-          ((_7 as Some).0: isize) = const -4_isize; // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n-          discriminant(_7) = 1;            // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n--         Deinit(_5);                      // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n--         (_5.0: u8) = const 5_u8;         // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n--         (_5.1: ()) = move _6;            // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n--         (_5.2: &str) = const \"a\";        // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         Deinit(_8);                      // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         Deinit(_9);                      // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         Deinit(_10);                     // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         Deinit(_11);                     // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         _8 = const 5_u8;                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         _9 = move _6;                    // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         _10 = const \"a\";                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n+          _7 = Option::<isize>::Some(const -4_isize); // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n+          _5 = Foo { a: const 5_u8, b: move _6, c: const \"a\", d: move _7 }; // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n                                            // mir::Constant\n                                            // + span: $DIR/sroa.rs:57:52: 57:55\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n--         (_5.3: std::option::Option<isize>) = move _7; // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n-+         _11 = move _7;                   // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n           StorageDead(_7);                 // scope 0 at $DIR/sroa.rs:+1:69: +1:70\n           StorageDead(_6);                 // scope 0 at $DIR/sroa.rs:+1:69: +1:70\n           StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n--         _1 = (_5.0: u8);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n-+         _1 = _8;                         // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n+          _1 = (_5.0: u8);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n           StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n--         _2 = (_5.1: ());                 // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n-+         _2 = _9;                         // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n+          _2 = (_5.1: ());                 // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n           StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n--         _3 = (_5.2: &str);               // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n-+         _3 = _10;                        // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n+          _3 = (_5.2: &str);               // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n           StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n--         _4 = (_5.3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n--         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-+         _4 = _11;                        // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n-+         StorageDead(_8);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-+         StorageDead(_9);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-+         StorageDead(_10);                // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n-+         StorageDead(_11);                // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n+          _4 = (_5.3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n+          StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n           _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:15: +6:2\n           StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n           StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2"}, {"sha": "dc4945104f4cb7ac0b1c384976099e4ee420940c", "filename": "tests/mir-opt/sroa.structs.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -6,28 +6,15 @@\n       let mut _0: f32;                     // return place in scope 0 at $DIR/sroa.rs:+0:27: +0:30\n       let mut _2: structs::U;              // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n       let mut _3: f32;                     // in scope 0 at $DIR/sroa.rs:+6:18: +6:19\n-+     let mut _4: usize;                   // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+     let mut _5: f32;                     // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n+          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n           StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+6:18: +6:19\n           _3 = _1;                         // scope 0 at $DIR/sroa.rs:+6:18: +6:19\n--         Deinit(_2);                      // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n--         (_2.0: usize) = const 0_usize;   // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n--         (_2.1: f32) = move _3;           // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         Deinit(_4);                      // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         Deinit(_5);                      // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         _4 = const 0_usize;              // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         _5 = move _3;                    // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n+          _2 = U { _foo: const 0_usize, a: move _3 }; // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n           StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+6:20: +6:21\n--         _0 = (_2.1: f32);                // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n--         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n-+         _0 = _5;                         // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n-+         StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n-+         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n+          _0 = (_2.1: f32);                // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n+          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n           return;                          // scope 0 at $DIR/sroa.rs:+7:2: +7:2\n       }\n   }"}, {"sha": "adfb01385d448abaaf08bce5ed8279067a237a0c", "filename": "tests/mir-opt/sroa.unions.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsroa.unions.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fsroa.unions.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.unions.ScalarReplacementOfAggregates.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -13,8 +13,7 @@\n           StorageLive(_2);                 // scope 1 at $DIR/sroa.rs:+5:14: +5:27\n           StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+5:24: +5:25\n           _3 = _1;                         // scope 1 at $DIR/sroa.rs:+5:24: +5:25\n-          Deinit(_2);                      // scope 1 at $DIR/sroa.rs:+5:14: +5:27\n-          (_2.0: f32) = move _3;           // scope 1 at $DIR/sroa.rs:+5:14: +5:27\n+          _2 = Repr { f: move _3 };        // scope 1 at $DIR/sroa.rs:+5:14: +5:27\n           StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+5:26: +5:27\n           _0 = (_2.1: u32);                // scope 1 at $DIR/sroa.rs:+5:14: +5:29\n           StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2"}, {"sha": "b9cc1057513d08670528189998ac5af3ed236710", "filename": "tests/mir-opt/try_identity_e2e.new.PreCodegen.after.mir", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -26,45 +26,40 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n         _3 = discriminant(_1);           // scope 0 at $DIR/try_identity_e2e.rs:+3:19: +3:20\n-        switchInt(move _3) -> [0: bb2, 1: bb1, otherwise: bb4]; // scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:20\n+        switchInt(move _3) -> [0: bb2, 1: bb1, otherwise: bb5]; // scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:20\n     }\n \n     bb1: {\n         _5 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n-        Deinit(_2);                      // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n-        ((_2 as Break).0: E) = move _5;  // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n-        discriminant(_2) = 1;            // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n-        _6 = discriminant(_2);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n-        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n+        _2 = ControlFlow::<E, T>::Break(move _5); // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n+        goto -> bb3;                     // scope 0 at $DIR/try_identity_e2e.rs:+5:47: +5:48\n     }\n \n     bb2: {\n         _4 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n-        Deinit(_2);                      // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n-        ((_2 as Continue).0: T) = move _4; // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n-        discriminant(_2) = 0;            // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n-        _6 = discriminant(_2);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n-        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n+        _2 = ControlFlow::<E, T>::Continue(move _4); // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n+        goto -> bb3;                     // scope 0 at $DIR/try_identity_e2e.rs:+4:49: +4:50\n     }\n \n     bb3: {\n+        _6 = discriminant(_2);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n+        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n+    }\n+\n+    bb4: {\n         _8 = move ((_2 as Break).0: E);  // scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n-        Deinit(_0);                      // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n-        ((_0 as Err).0: E) = move _8;    // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n-        discriminant(_0) = 1;            // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n+        _0 = Result::<T, E>::Err(move _8); // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n         StorageDead(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n         return;                          // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n     }\n \n-    bb4: {\n+    bb5: {\n         unreachable;                     // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n     }\n \n-    bb5: {\n+    bb6: {\n         _7 = move ((_2 as Continue).0: T); // scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n-        Deinit(_0);                      // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6\n-        ((_0 as Ok).0: T) = move _7;     // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6\n-        discriminant(_0) = 0;            // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6\n+        _0 = Result::<T, E>::Ok(move _7); // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6\n         StorageDead(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n         return;                          // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n     }"}, {"sha": "d88ae5ac93eba8504d22de3bd38b486dadae2ef4", "filename": "tests/mir-opt/try_identity_e2e.old.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -20,9 +20,7 @@ fn old(_1: Result<T, E>) -> Result<T, E> {\n \n     bb1: {\n         _4 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n-        Deinit(_0);                      // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n-        ((_0 as Err).0: E) = move _4;    // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n-        discriminant(_0) = 1;            // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n+        _0 = Result::<T, E>::Err(move _4); // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n         return;                          // scope 0 at $DIR/try_identity_e2e.rs:+7:1: +7:2\n     }\n \n@@ -32,9 +30,7 @@ fn old(_1: Result<T, E>) -> Result<T, E> {\n \n     bb3: {\n         _3 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n-        Deinit(_0);                      // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6\n-        ((_0 as Ok).0: T) = move _3;     // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6\n-        discriminant(_0) = 0;            // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6\n+        _0 = Result::<T, E>::Ok(move _3); // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6\n         return;                          // scope 0 at $DIR/try_identity_e2e.rs:+7:1: +7:2\n     }\n }"}, {"sha": "03f37b14b28c98f6d563630f50dea11f1eb9fe1b", "filename": "tests/mir-opt/uninhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -15,8 +15,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +5:6\n         StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n-        Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n-        discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n+        _2 = Test1::C;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n         _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n         switchInt(move _3) -> [2: bb1, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n     }\n@@ -33,8 +32,7 @@ fn main() -> () {\n         StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+5:6: +5:7\n         StorageLive(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +10:6\n         StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-        Deinit(_7);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-        discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n+        _7 = Test2::D;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n         _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n         switchInt(move _8) -> [4: bb5, 5: bb3, otherwise: bb4]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n     }"}, {"sha": "671e116226bea61e20d2181f9fc5a9bc62290a39", "filename": "tests/mir-opt/uninhabited_enum_branching.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -16,8 +16,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +5:6\n           StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n-          Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n-          discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n+          _2 = Test1::C;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n           _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n -         switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n +         switchInt(move _3) -> [2: bb1, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n@@ -62,8 +61,7 @@\n           StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+5:6: +5:7\n           StorageLive(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +10:6\n           StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-          Deinit(_7);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-          discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n+          _7 = Test2::D;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n           _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n           switchInt(move _8) -> [4: bb8, 5: bb6, otherwise: bb7]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n       }"}, {"sha": "eb2a76ed1d5e45df0545a1469bfcc1a1a13faf21", "filename": "tests/mir-opt/uninhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -22,11 +22,8 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:9: +1:13\n         StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n-        Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n-        discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n-        Deinit(_1);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:16: +1:48\n-        (_1.0: u32) = const 51_u32;      // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:16: +1:48\n-        (_1.1: Test1) = move _2;         // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:16: +1:48\n+        _2 = Test1::C;                   // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n+        _1 = Plop { xx: const 51_u32, test1: move _2 }; // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:16: +1:48\n         StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:47: +1:48\n         StorageLive(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:5: +8:6\n         StorageLive(_4);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22"}, {"sha": "4e797774dba7e6e45f2f8ca12a83f132be755dfb", "filename": "tests/mir-opt/uninhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -23,11 +23,8 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:9: +1:13\n           StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n-          Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n-          discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n-          Deinit(_1);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:16: +1:48\n-          (_1.0: u32) = const 51_u32;      // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:16: +1:48\n-          (_1.1: Test1) = move _2;         // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:16: +1:48\n+          _2 = Test1::C;                   // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n+          _1 = Plop { xx: const 51_u32, test1: move _2 }; // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:16: +1:48\n           StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:47: +1:48\n           StorageLive(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:5: +8:6\n           StorageLive(_4);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22"}, {"sha": "8b271135cc3f6978dfec495608a35e5d317eab72", "filename": "tests/mir-opt/unusual_item_types.Test-X-{constructor#0}.built.after.mir", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.built.after.mir?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -4,9 +4,7 @@ fn Test::X(_1: usize) -> Test {\n     let mut _0: Test;                    // return place in scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n \n     bb0: {\n-        Deinit(_0);                      // scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n-        ((_0 as X).0: usize) = move _1;  // scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n-        discriminant(_0) = 0;            // scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n+        _0 = Test::X(move _1);           // scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n         return;                          // scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n     }\n }"}, {"sha": "a4f2d8c84d889f90bccdb76c1d1a84acbd6bade5", "filename": "tests/mir-opt/while_let_loops.change_loop_body.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -16,8 +16,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n           _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:+1:18: +1:19\n           StorageLive(_2);                 // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n-          Deinit(_2);                      // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n-          discriminant(_2) = 0;            // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n+          _2 = Option::<u32>::None;        // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n -         _3 = discriminant(_2);           // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n -         switchInt(move _3) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n +         _3 = const 0_isize;              // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25"}, {"sha": "cb0cab2444bf7a9abfe924cb96426fafa294ab3c", "filename": "tests/ui/consts/const-err-late.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fui%2Fconsts%2Fconst-err-late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9dee4e4c42d23b0c5afd6d8fed025181f70fbe12/tests%2Fui%2Fconsts%2Fconst-err-late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-err-late.stderr?ref=9dee4e4c42d23b0c5afd6d8fed025181f70fbe12", "patch": "@@ -28,24 +28,12 @@ note: erroneous constant used\n LL |     black_box((S::<i32>::FOO, S::<u32>::FOO));\n    |                               ^^^^^^^^^^^^^\n \n-note: erroneous constant used\n-  --> $DIR/const-err-late.rs:19:31\n-   |\n-LL |     black_box((S::<i32>::FOO, S::<u32>::FOO));\n-   |                               ^^^^^^^^^^^^^\n-\n note: erroneous constant used\n   --> $DIR/const-err-late.rs:19:16\n    |\n LL |     black_box((S::<i32>::FOO, S::<u32>::FOO));\n    |                ^^^^^^^^^^^^^\n \n-note: erroneous constant used\n-  --> $DIR/const-err-late.rs:19:31\n-   |\n-LL |     black_box((S::<i32>::FOO, S::<u32>::FOO));\n-   |                               ^^^^^^^^^^^^^\n-\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}]}