{"sha": "ff28bb7839a039641788436b21130ae2d378609b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMjhiYjc4MzlhMDM5NjQxNzg4NDM2YjIxMTMwYWUyZDM3ODYwOWI=", "commit": {"author": {"name": "Olivier Saut", "email": "osaut@airpost.net", "date": "2013-05-24T20:54:58Z"}, "committer": {"name": "Olivier Saut", "email": "osaut@airpost.net", "date": "2013-05-24T20:54:58Z"}, "message": "Remove the clone function for the method", "tree": {"sha": "dc8f2cd52b9e5b1cbde74267bc215ada0d67e3d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc8f2cd52b9e5b1cbde74267bc215ada0d67e3d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff28bb7839a039641788436b21130ae2d378609b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff28bb7839a039641788436b21130ae2d378609b", "html_url": "https://github.com/rust-lang/rust/commit/ff28bb7839a039641788436b21130ae2d378609b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff28bb7839a039641788436b21130ae2d378609b/comments", "author": null, "committer": null, "parents": [{"sha": "f2125434d86669d3086094397855f80c2bf636ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2125434d86669d3086094397855f80c2bf636ac", "html_url": "https://github.com/rust-lang/rust/commit/f2125434d86669d3086094397855f80c2bf636ac"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "123e727593568e9fd21e45484de64d7b028a6d61", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff28bb7839a039641788436b21130ae2d378609b/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff28bb7839a039641788436b21130ae2d378609b/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=ff28bb7839a039641788436b21130ae2d378609b", "patch": "@@ -123,20 +123,17 @@ pub impl<T:Const+Owned> ARC<T> {\n         unsafe { &*self.x.get_immut() }\n     }\n }\n+\n /**\n  * Duplicate an atomically reference counted wrapper.\n  *\n  * The resulting two `arc` objects will point to the same underlying data\n  * object. However, one of the `arc` objects can be sent to another task,\n  * allowing them to share the underlying data.\n  */\n-pub fn clone<T:Const + Owned>(rc: &ARC<T>) -> ARC<T> {\n-    ARC { x: rc.x.clone() }\n-}\n-\n impl<T:Const + Owned> Clone for ARC<T> {\n     fn clone(&self) -> ARC<T> {\n-        clone(self)\n+        ARC { x: self.x.clone() }\n     }\n }\n "}]}