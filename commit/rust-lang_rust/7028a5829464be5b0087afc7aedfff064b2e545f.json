{"sha": "7028a5829464be5b0087afc7aedfff064b2e545f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMjhhNTgyOTQ2NGJlNWIwMDg3YWZjN2FlZGZmZjA2NGIyZTU0NWY=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-04-20T01:51:06Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-04-20T01:51:06Z"}, "message": "Attempt to clarify interleave/deinterleave", "tree": {"sha": "a28c407352a7355dd39cb5ddeff1348d29bc6df9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a28c407352a7355dd39cb5ddeff1348d29bc6df9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7028a5829464be5b0087afc7aedfff064b2e545f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7028a5829464be5b0087afc7aedfff064b2e545f", "html_url": "https://github.com/rust-lang/rust/commit/7028a5829464be5b0087afc7aedfff064b2e545f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7028a5829464be5b0087afc7aedfff064b2e545f/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1999c54890d57aec3432335715ce29ec87abfeda", "url": "https://api.github.com/repos/rust-lang/rust/commits/1999c54890d57aec3432335715ce29ec87abfeda", "html_url": "https://github.com/rust-lang/rust/commit/1999c54890d57aec3432335715ce29ec87abfeda"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "dd63c69c63db7d9e591445f1e8f9e6d43d265cc9", "filename": "crates/core_simd/src/permute.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7028a5829464be5b0087afc7aedfff064b2e545f/crates%2Fcore_simd%2Fsrc%2Fpermute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7028a5829464be5b0087afc7aedfff064b2e545f/crates%2Fcore_simd%2Fsrc%2Fpermute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fpermute.rs?ref=7028a5829464be5b0087afc7aedfff064b2e545f", "patch": "@@ -31,11 +31,24 @@ macro_rules! impl_shuffle_lane {\n \n             /// Interleave two vectors.\n             ///\n-            /// The even lanes of the first result contain the lower half of `self`, and the odd\n-            /// lanes contain the lower half of `other`.\n+            /// Produces two vectors with lanes taken alternately from `self` and `other`.\n             ///\n-            /// The even lanes of the second result contain the upper half of `self`, and the odd\n-            /// lanes contain the upper half of `other`.\n+            /// The first result contains the first `LANES / 2` lanes from `self` and `other`,\n+            /// alternating, starting with the first lane of `self`.\n+            ///\n+            /// The second result contains the last `LANES / 2` lanes from `self` and `other`,\n+            /// alternating, starting with the lane `LANES / 2` from the start of `self`.\n+            ///\n+            /// This particular permutation is efficient on many architectures.\n+            ///\n+            /// ```\n+            /// # use core_simd::SimdU32;\n+            /// let a = SimdU32::from_array([0, 1, 2, 3]);\n+            /// let b = SimdU32::from_array([4, 5, 6, 7]);\n+            /// let (x, y) = a.interleave(b);\n+            /// assert_eq!(x.to_array(), [0, 4, 1, 5]);\n+            /// assert_eq!(y.to_array(), [2, 6, 3, 7]);\n+            /// ```\n             #[inline]\n             pub fn interleave(self, other: Self) -> (Self, Self) {\n                 const fn lo() -> [u32; $n] {\n@@ -71,9 +84,22 @@ macro_rules! impl_shuffle_lane {\n \n             /// Deinterleave two vectors.\n             ///\n-            /// The first result contains the even lanes of `self` and then `other`, concatenated.\n+            /// The first result takes every other lane of `self` and then `other`, starting with\n+            /// the first lane.\n+            ///\n+            /// The second result takes every other lane of `self` and then `other`, starting with\n+            /// the second lane.\n+            ///\n+            /// This particular permutation is efficient on many architectures.\n             ///\n-            /// The second result contains the odd lanes of `self` and then `other`, concatenated.\n+            /// ```\n+            /// # use core_simd::SimdU32;\n+            /// let a = SimdU32::from_array([0, 4, 1, 5]);\n+            /// let b = SimdU32::from_array([2, 6, 3, 7]);\n+            /// let (x, y) = a.deinterleave(b);\n+            /// assert_eq!(x.to_array(), [0, 1, 2, 3]);\n+            /// assert_eq!(y.to_array(), [4, 5, 6, 7]);\n+            /// ```\n             #[inline]\n             pub fn deinterleave(self, other: Self) -> (Self, Self) {\n                 const fn even() -> [u32; $n] {"}]}