{"sha": "c65454850f80a99e995fc71b74b475a77d0e5f30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NTQ1NDg1MGY4MGE5OWU5OTVmYzcxYjc0YjQ3NWE3N2QwZTVmMzA=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-26T22:54:48Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:21:08Z"}, "message": "Remove AngleBracketedArgs impl", "tree": {"sha": "d9eb4b9aca5472b0ede4d03110a90db36ecc4c82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9eb4b9aca5472b0ede4d03110a90db36ecc4c82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c65454850f80a99e995fc71b74b475a77d0e5f30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c65454850f80a99e995fc71b74b475a77d0e5f30", "html_url": "https://github.com/rust-lang/rust/commit/c65454850f80a99e995fc71b74b475a77d0e5f30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c65454850f80a99e995fc71b74b475a77d0e5f30/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d888c7225786530dae2461567e991f398388cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d888c7225786530dae2461567e991f398388cf", "html_url": "https://github.com/rust-lang/rust/commit/e1d888c7225786530dae2461567e991f398388cf"}], "stats": {"total": 79, "additions": 39, "deletions": 40}, "files": [{"sha": "830481d4f73610a98b09a52b4c9cb5cae48d2868", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c65454850f80a99e995fc71b74b475a77d0e5f30/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65454850f80a99e995fc71b74b475a77d0e5f30/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c65454850f80a99e995fc71b74b475a77d0e5f30", "patch": "@@ -1754,12 +1754,16 @@ impl<'a> LoweringContext<'a> {\n         itctx: ImplTraitContext,\n     ) -> (hir::GenericArgs, bool) {\n         let &AngleBracketedArgs { ref args, ref bindings, .. } = data;\n+        let has_types = args.iter().any(|arg| match arg {\n+            GenericArgAST::Type(_) => true,\n+            _ => false,\n+        });\n         (hir::GenericArgs {\n             args: args.iter().map(|a| self.lower_generic_arg(a, itctx)).collect(),\n             bindings: bindings.iter().map(|b| self.lower_ty_binding(b, itctx)).collect(),\n             parenthesized: false,\n         },\n-        data.types().count() == 0 && param_mode == ParamMode::Optional)\n+        has_types && param_mode == ParamMode::Optional)\n     }\n \n     fn lower_parenthesized_parameter_data("}, {"sha": "14003f0fd37191c76035b1ae8cf8095ca72b73a4", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c65454850f80a99e995fc71b74b475a77d0e5f30/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65454850f80a99e995fc71b74b475a77d0e5f30/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=c65454850f80a99e995fc71b74b475a77d0e5f30", "patch": "@@ -679,12 +679,18 @@ impl<'a> ReplaceBodyWithLoop<'a> {\n                     ast::TyKind::Path(_, ref path) => path.segments.iter().any(|seg| {\n                         match seg.args.as_ref().map(|generic_arg| &**generic_arg) {\n                             None => false,\n-                            Some(&ast::GenericArgs::AngleBracketed(ref data)) =>\n-                                any_involves_impl_trait(data.types().into_iter()) ||\n-                                any_involves_impl_trait(data.bindings.iter().map(|b| &b.ty)),\n-                            Some(&ast::GenericArgs::Parenthesized(ref data)) =>\n+                            Some(&ast::GenericArgs::AngleBracketed(ref data)) => {\n+                                let types = data.args.iter().filter_map(|arg| match arg {\n+                                    ast::GenericArgAST::Type(ty) => Some(ty),\n+                                    _ => None,\n+                                });\n+                                any_involves_impl_trait(types.into_iter()) ||\n+                                any_involves_impl_trait(data.bindings.iter().map(|b| &b.ty))\n+                            },\n+                            Some(&ast::GenericArgs::Parenthesized(ref data)) => {\n                                 any_involves_impl_trait(data.inputs.iter()) ||\n-                                any_involves_impl_trait(data.output.iter()),\n+                                any_involves_impl_trait(data.output.iter())\n+                            }\n                         }\n                     }),\n                     _ => false,"}, {"sha": "a6ef83671a55e51885228b83d9e4d1d2b4637daf", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c65454850f80a99e995fc71b74b475a77d0e5f30/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65454850f80a99e995fc71b74b475a77d0e5f30/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=c65454850f80a99e995fc71b74b475a77d0e5f30", "patch": "@@ -515,21 +515,24 @@ impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n     }\n     fn visit_generic_args(&mut self, _: Span, generic_args: &'a GenericArgs) {\n         match *generic_args {\n-            GenericArgs::AngleBracketed(ref generic_args) => {\n-                for type_ in generic_args.types() {\n-                    self.visit_ty(type_);\n+            GenericArgs::AngleBracketed(ref data) => {\n+                for arg in &data.args {\n+                    match arg {\n+                        GenericArgAST::Type(ty) => self.visit_ty(ty),\n+                        _ => {}\n+                    }\n                 }\n-                for type_binding in &generic_args.bindings {\n+                for type_binding in &data.bindings {\n                     // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n                     // are allowed to contain nested `impl Trait`.\n                     self.with_impl_trait(None, |this| visit::walk_ty(this, &type_binding.ty));\n                 }\n             }\n-            GenericArgs::Parenthesized(ref generic_args) => {\n-                for type_ in &generic_args.inputs {\n+            GenericArgs::Parenthesized(ref data) => {\n+                for type_ in &data.inputs {\n                     self.visit_ty(type_);\n                 }\n-                if let Some(ref type_) = generic_args.output {\n+                if let Some(ref type_) = data.output {\n                     // `-> Foo` syntax is essentially an associated type binding,\n                     // so it is also allowed to contain nested `impl Trait`.\n                     self.with_impl_trait(None, |this| visit::walk_ty(this, type_));"}, {"sha": "5faa3559c76aac6d25560ecb88a34a412baa8d1f", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c65454850f80a99e995fc71b74b475a77d0e5f30/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65454850f80a99e995fc71b74b475a77d0e5f30/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=c65454850f80a99e995fc71b74b475a77d0e5f30", "patch": "@@ -825,9 +825,14 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         for seg in &path.segments {\n             if let Some(ref generic_args) = seg.args {\n                 match **generic_args {\n-                    ast::GenericArgs::AngleBracketed(ref data) => for t in data.types() {\n-                        self.visit_ty(t);\n-                    },\n+                    ast::GenericArgs::AngleBracketed(ref data) => {\n+                        for arg in &data.args {\n+                            match arg {\n+                                ast::GenericArgAST::Type(ty) => self.visit_ty(ty),\n+                                _ => {}\n+                            }\n+                        }\n+                    }\n                     ast::GenericArgs::Parenthesized(ref data) => {\n                         for t in &data.inputs {\n                             self.visit_ty(t);\n@@ -910,8 +915,11 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         // Explicit types in the turbo-fish.\n         if let Some(ref generic_args) = seg.args {\n             if let ast::GenericArgs::AngleBracketed(ref data) = **generic_args {\n-                for t in data.types() {\n-                    self.visit_ty(t);\n+                for arg in &data.args {\n+                    match arg {\n+                        ast::GenericArgAST::Type(ty) => self.visit_ty(ty),\n+                        _ => {}\n+                    }\n                 }\n             }\n         }"}, {"sha": "c2626c70a42736f8b9b13db6ed2a4b8890f8df44", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c65454850f80a99e995fc71b74b475a77d0e5f30/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65454850f80a99e995fc71b74b475a77d0e5f30/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c65454850f80a99e995fc71b74b475a77d0e5f30", "patch": "@@ -178,28 +178,6 @@ pub struct AngleBracketedArgs {\n     pub bindings: Vec<TypeBinding>,\n }\n \n-impl AngleBracketedArgs {\n-    pub fn lifetimes(&self) -> impl DoubleEndedIterator<Item = &Lifetime> {\n-        self.args.iter().filter_map(|arg| {\n-            if let GenericArgAST::Lifetime(lt) = arg {\n-                Some(lt)\n-            } else {\n-                None\n-            }\n-        })\n-    }\n-\n-    pub fn types(&self) -> impl DoubleEndedIterator<Item = &P<Ty>> {\n-        self.args.iter().filter_map(|arg| {\n-            if let GenericArgAST::Type(ty) = arg {\n-                Some(ty)\n-            } else {\n-                None\n-            }\n-        })\n-    }\n-}\n-\n impl Into<Option<P<GenericArgs>>> for AngleBracketedArgs {\n     fn into(self) -> Option<P<GenericArgs>> {\n         Some(P(GenericArgs::AngleBracketed(self)))"}]}