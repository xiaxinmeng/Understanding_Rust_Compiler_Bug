{"sha": "0553f71b1b27bd75102284711c84aede3001943b", "node_id": "C_kwDOAAsO6NoAKDA1NTNmNzFiMWIyN2JkNzUxMDIyODQ3MTFjODRhZWRlMzAwMTk0M2I", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-05-25T07:49:01Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-05-25T08:14:14Z"}, "message": "introduce build metrics version numbers to handle breaking changes", "tree": {"sha": "66d65d5e075346d4c815298141728f3ee6b23573", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66d65d5e075346d4c815298141728f3ee6b23573"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0553f71b1b27bd75102284711c84aede3001943b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmRvGNYACgkQzXazX3c0\ndp6SXBAAn6CSw9cIhEVb7r+46wnQl3sqP1xWpHaDk8EQBCljTcBqQtJH6qYRRiha\nKxQS/xidKTrfEdhDAnmGrZ0ChkYdqBmzddX5Zin0OQXLsaKFOPtBTOWHYd57N3zF\nBWfeoeQf8d9jMgVeMTq7JW8bpIB3x2Yj7mQl4tPWp62vln9ndbkg1OBg7HTT4JKG\n+NKU9atz0DL0hh+Np/9ntV6l3C59+fj0gnxH3cmYG+pmi9jH3gbAMlmj1I5fF61B\nDE9MaxFdeyR1nxxGgRk2pMC2pTFy1aiVm3J9rrEDx+8kkac/YiYYrQduPUwEiLq0\n7cYNdhfs3yj1n3xp/SpxjQsx0NYTTZefUVD6vuuQ/oSW2xImAYUxDvZo9CwxNH3G\n86jp60NJHmYbZXrs3ChU+8R09ICWWLo0DmWD382fvTel94SGQNvDCnRXG7FfqIyv\nRmNzFAL6SJQMg0XBuQK5Vb91YFCSmZccgTupPUD4vgjs86r8i6VijCpE8NdvoFJn\nTJSk0EEoUAe2HEPL7Tx69pn0QsfqmjwexBvA8PYv97M1NScjhBE44wWNSIBFnHHV\nWqG028wps9hIj3tGgagyqVS41CaUj7vmnrH64SvdbwkzXWDOfpW4XoIROvhI8Tu8\nyy84AItr4d1LdbSuduFnvgq5/jcv1x2qY8JiwG9xCWTZb/fDf2g=\n=hLqV\n-----END PGP SIGNATURE-----", "payload": "tree 66d65d5e075346d4c815298141728f3ee6b23573\nparent 3c9b07643a11fe4049826a45382b08a6eaf722fd\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1685000941 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1685002454 +0200\n\nintroduce build metrics version numbers to handle breaking changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0553f71b1b27bd75102284711c84aede3001943b", "html_url": "https://github.com/rust-lang/rust/commit/0553f71b1b27bd75102284711c84aede3001943b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0553f71b1b27bd75102284711c84aede3001943b/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c9b07643a11fe4049826a45382b08a6eaf722fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c9b07643a11fe4049826a45382b08a6eaf722fd", "html_url": "https://github.com/rust-lang/rust/commit/3c9b07643a11fe4049826a45382b08a6eaf722fd"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "9f68eea9a5ebecfc3e3e7e5f38078d81869f888d", "filename": "src/bootstrap/metrics.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0553f71b1b27bd75102284711c84aede3001943b/src%2Fbootstrap%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0553f71b1b27bd75102284711c84aede3001943b/src%2Fbootstrap%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetrics.rs?ref=0553f71b1b27bd75102284711c84aede3001943b", "patch": "@@ -14,6 +14,13 @@ use std::io::BufWriter;\n use std::time::{Duration, Instant, SystemTime};\n use sysinfo::{CpuExt, System, SystemExt};\n \n+// Update this number whenever a breaking change is made to the build metrics.\n+//\n+// Versions:\n+// 0: initial version\n+// 1: replaced JsonNode::Test with JsonNode::TestSuite\n+const CURRENT_METADATA_VERSION: usize = 1;\n+\n pub(crate) struct BuildMetrics {\n     state: RefCell<MetricsState>,\n }\n@@ -145,7 +152,20 @@ impl BuildMetrics {\n         // Some of our CI builds consist of multiple independent CI invocations. Ensure all the\n         // previous invocations are still present in the resulting file.\n         let mut invocations = match std::fs::read(&dest) {\n-            Ok(contents) => t!(serde_json::from_slice::<JsonRoot>(&contents)).invocations,\n+            Ok(contents) => {\n+                // We first parse just the metadata_version field to have the check succeed even if\n+                // the rest of the contents are not valid anymore.\n+                let version: OnlyMetadataVersion = t!(serde_json::from_slice(&contents));\n+                if version.metadata_version == CURRENT_METADATA_VERSION {\n+                    t!(serde_json::from_slice::<JsonRoot>(&contents)).invocations\n+                } else {\n+                    println!(\n+                        \"warning: overriding existing build/metrics.json, as it's not \\\n+                         compatible with build metrics format version {CURRENT_METADATA_VERSION}.\"\n+                    );\n+                    Vec::new()\n+                }\n+            }\n             Err(err) => {\n                 if err.kind() != std::io::ErrorKind::NotFound {\n                     panic!(\"failed to open existing metrics file at {}: {err}\", dest.display());\n@@ -163,7 +183,8 @@ impl BuildMetrics {\n             children: steps.into_iter().map(|step| self.prepare_json_step(step)).collect(),\n         });\n \n-        let json = JsonRoot { system_stats, invocations };\n+        let json =\n+            JsonRoot { metadata_version: CURRENT_METADATA_VERSION, system_stats, invocations };\n \n         t!(std::fs::create_dir_all(dest.parent().unwrap()));\n         let mut file = BufWriter::new(t!(File::create(&dest)));\n@@ -214,6 +235,8 @@ struct StepMetrics {\n #[derive(Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n struct JsonRoot {\n+    #[serde(default)] // For version 0 the field was not present.\n+    metadata_version: usize,\n     system_stats: JsonInvocationSystemStats,\n     invocations: Vec<JsonInvocation>,\n }\n@@ -299,3 +322,9 @@ struct JsonInvocationSystemStats {\n struct JsonStepSystemStats {\n     cpu_utilization_percent: f64,\n }\n+\n+#[derive(Deserialize)]\n+struct OnlyMetadataVersion {\n+    #[serde(default)] // For version 0 the field was not present.\n+    metadata_version: usize,\n+}"}]}