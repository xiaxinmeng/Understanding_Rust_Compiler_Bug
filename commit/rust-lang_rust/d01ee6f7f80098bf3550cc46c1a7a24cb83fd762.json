{"sha": "d01ee6f7f80098bf3550cc46c1a7a24cb83fd762", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMWVlNmY3ZjgwMDk4YmYzNTUwY2M0NmMxYTdhMjRjYjgzZmQ3NjI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-14T23:57:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-14T23:57:15Z"}, "message": "Rollup merge of #72062 - overdrivenpotato:psp, r=jonas-schievink\n\nAdd built in PSP target\n\nThis adds a new target, `mipsel-sony-psp`, corresponding to the Sony PSP. The linker script is necessary to handle special sections, which are required by the target. This has been tested with my [rust-psp] crate and I can confirm it works as intended.\n\nThe linker script is taken from [here]. It has been slightly adapted to work with rust and LLD.\n\nThe `stdarch` submodule was also updated in order for `libcore` to build successfully.\n\n[rust-psp]: https://github.com/overdrivenpotato/rust-psp\n[here]: https://github.com/pspdev/pspsdk/blob/master/src/base/linkfile.prx.in", "tree": {"sha": "9046e5e82b9672a6067523a1377ada2af048f090", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9046e5e82b9672a6067523a1377ada2af048f090"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d01ee6f7f80098bf3550cc46c1a7a24cb83fd762", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJevdrcCRBK7hj4Ov3rIwAAdHIIAJmazApNaTlTuWgtvAZrNH8W\nqllk/V/OfyBM3d+HpHx9oIANU+nULoajZyzIC5+MfOw9EIqo+rF5BJjcBXDdb4r9\n8wASwxBT3LjccGH8ZpjckVR2K2tnVBbR+bjb0v1MhBWmB0Xdv7G4iEPmd17pk1TW\nKtwZQkpoBzEHvwFHwM/rvn+DJVfklfaMRVWF7vGTePfnmwV1upqOOqugDgQVYdRo\njW9KeNTjKMEVR+fl3fAHSmYM95UyMwVgXwKjIeTvTTrba0Wb5CLX5uSmRSSca60K\ndx/krqdcFjxJ5TTcOUgxOa0gQ9eCKJ4+QB3+9lzijjQ9bPfkTVa1IeIwsPuZWsM=\n=dMu4\n-----END PGP SIGNATURE-----\n", "payload": "tree 9046e5e82b9672a6067523a1377ada2af048f090\nparent a264acaf1a0cbc4f0e5b654da15cbf5614901824\nparent 425723f5b384ba75af4b9a6b4e0186f8bf2e99a3\nauthor Dylan DPC <dylan.dpc@gmail.com> 1589500635 +0200\ncommitter GitHub <noreply@github.com> 1589500635 +0200\n\nRollup merge of #72062 - overdrivenpotato:psp, r=jonas-schievink\n\nAdd built in PSP target\n\nThis adds a new target, `mipsel-sony-psp`, corresponding to the Sony PSP. The linker script is necessary to handle special sections, which are required by the target. This has been tested with my [rust-psp] crate and I can confirm it works as intended.\n\nThe linker script is taken from [here]. It has been slightly adapted to work with rust and LLD.\n\nThe `stdarch` submodule was also updated in order for `libcore` to build successfully.\n\n[rust-psp]: https://github.com/overdrivenpotato/rust-psp\n[here]: https://github.com/pspdev/pspsdk/blob/master/src/base/linkfile.prx.in\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d01ee6f7f80098bf3550cc46c1a7a24cb83fd762", "html_url": "https://github.com/rust-lang/rust/commit/d01ee6f7f80098bf3550cc46c1a7a24cb83fd762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d01ee6f7f80098bf3550cc46c1a7a24cb83fd762/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a264acaf1a0cbc4f0e5b654da15cbf5614901824", "url": "https://api.github.com/repos/rust-lang/rust/commits/a264acaf1a0cbc4f0e5b654da15cbf5614901824", "html_url": "https://github.com/rust-lang/rust/commit/a264acaf1a0cbc4f0e5b654da15cbf5614901824"}, {"sha": "425723f5b384ba75af4b9a6b4e0186f8bf2e99a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/425723f5b384ba75af4b9a6b4e0186f8bf2e99a3", "html_url": "https://github.com/rust-lang/rust/commit/425723f5b384ba75af4b9a6b4e0186f8bf2e99a3"}], "stats": {"total": 113, "additions": 112, "deletions": 1}, "files": [{"sha": "a54160cdd710fb9f87a6f33385651fe1a4c61844", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d01ee6f7f80098bf3550cc46c1a7a24cb83fd762/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01ee6f7f80098bf3550cc46c1a7a24cb83fd762/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=d01ee6f7f80098bf3550cc46c1a7a24cb83fd762", "patch": "@@ -1179,6 +1179,28 @@ fn add_pre_link_args(\n     cmd.args(&sess.opts.debugging_opts.pre_link_args);\n }\n \n+/// Add a link script embedded in the target, if applicable.\n+fn add_link_script(cmd: &mut dyn Linker, sess: &Session, tmpdir: &Path, crate_type: CrateType) {\n+    match (crate_type, &sess.target.target.options.link_script) {\n+        (CrateType::Cdylib | CrateType::Executable, Some(script)) => {\n+            if !sess.target.target.options.linker_is_gnu {\n+                sess.fatal(\"can only use link script when linking with GNU-like linker\");\n+            }\n+\n+            let file_name = [\"rustc\", &sess.target.target.llvm_target, \"linkfile.ld\"].join(\"-\");\n+\n+            let path = tmpdir.join(file_name);\n+            if let Err(e) = fs::write(&path, script) {\n+                sess.fatal(&format!(\"failed to write link script to {}: {}\", path.display(), e));\n+            }\n+\n+            cmd.arg(\"--script\");\n+            cmd.arg(path);\n+        }\n+        _ => {}\n+    }\n+}\n+\n /// Add arbitrary \"user defined\" args defined from command line and by `#[link_args]` attributes.\n /// FIXME: Determine where exactly these args need to be inserted.\n fn add_user_defined_link_args(\n@@ -1421,6 +1443,9 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // NO-OPT-OUT, OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n     add_pre_link_args(cmd, sess, flavor, crate_type);\n \n+    // NO-OPT-OUT\n+    add_link_script(cmd, sess, tmpdir, crate_type);\n+\n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.target.target.options.is_like_fuchsia {\n         let prefix = match sess.opts.debugging_opts.sanitizer {"}, {"sha": "0c74454d0c5fe66dafc189266e2c637350613a56", "filename": "src/librustc_target/spec/mipsel_sony_psp.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d01ee6f7f80098bf3550cc46c1a7a24cb83fd762/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01ee6f7f80098bf3550cc46c1a7a24cb83fd762/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp.rs?ref=d01ee6f7f80098bf3550cc46c1a7a24cb83fd762", "patch": "@@ -0,0 +1,43 @@\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n+\n+// The PSP has custom linker requirements.\n+const LINKER_SCRIPT: &str = include_str!(\"./mipsel_sony_psp_linker_script.ld\");\n+\n+pub fn target() -> TargetResult {\n+    let mut pre_link_args = LinkArgs::new();\n+    pre_link_args.insert(\n+        LinkerFlavor::Lld(LldFlavor::Ld),\n+        vec![\"--eh-frame-hdr\".to_string(), \"--emit-relocs\".to_string()],\n+    );\n+\n+    Ok(Target {\n+        llvm_target: \"mipsel-sony-psp\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n+        arch: \"mips\".to_string(),\n+        target_os: \"psp\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"sony\".to_string(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+\n+        options: TargetOptions {\n+            cpu: \"mips2\".to_string(),\n+            executables: true,\n+            linker: Some(\"rust-lld\".to_owned()),\n+            linker_is_gnu: true,\n+            relocation_model: RelocModel::Static,\n+\n+            // PSP FPU only supports single precision floats.\n+            features: \"+single-float\".to_string(),\n+\n+            // PSP does not support trap-on-condition instructions.\n+            llvm_args: vec![\"-mno-check-zero-division\".to_string()],\n+            pre_link_args,\n+            link_script: Some(LINKER_SCRIPT.to_string()),\n+            ..Default::default()\n+        },\n+    })\n+}"}, {"sha": "1bd436d6f94cc08614c7a2e28a1db6ec211c1e93", "filename": "src/librustc_target/spec/mipsel_sony_psp_linker_script.ld", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d01ee6f7f80098bf3550cc46c1a7a24cb83fd762/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp_linker_script.ld", "raw_url": "https://github.com/rust-lang/rust/raw/d01ee6f7f80098bf3550cc46c1a7a24cb83fd762/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp_linker_script.ld", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp_linker_script.ld?ref=d01ee6f7f80098bf3550cc46c1a7a24cb83fd762", "patch": "@@ -0,0 +1,34 @@\n+ENTRY(module_start)\n+SECTIONS\n+{\n+  /* PRX format requires text to begin at 0 */\n+  .text 0 : { *(.text .text.*) }\n+\n+  /* Sort stubs for convenient ordering */\n+  .sceStub.text : { *(.sceStub.text) *(SORT(.sceStub.text.*)) }\n+\n+  /* Keep these sections around, even though they may appear unused to the linker */\n+  .lib.ent.top :  { KEEP(*(.lib.ent.top)) }\n+  .lib.ent :      { KEEP(*(.lib.ent)) }\n+  .lib.ent.btm :  { KEEP(*(.lib.ent.btm)) }\n+  .lib.stub.top : { KEEP(*(.lib.stub.top)) }\n+  .lib.stub :     { KEEP(*(.lib.stub)) }\n+  .lib.stub.btm : { KEEP(*(.lib.stub.btm)) }\n+  .eh_frame_hdr : { KEEP(*(.eh_frame_hdr)) }\n+\n+  /* Add symbols for LLVM's libunwind */\n+  __eh_frame_hdr_start = SIZEOF(.eh_frame_hdr) > 0 ? ADDR(.eh_frame_hdr) : 0;\n+  __eh_frame_hdr_end = SIZEOF(.eh_frame_hdr) > 0 ? . : 0;\n+  .eh_frame :\n+  {\n+    __eh_frame_start = .;\n+    KEEP(*(.eh_frame))\n+    __eh_frame_end = .;\n+  }\n+\n+  /* These are explicitly listed to avoid being merged into .rodata */\n+  .rodata.sceResident : { *(.rodata.sceResident) }\n+  .rodata.sceModuleInfo : { *(.rodata.sceModuleInfo) }\n+  /* Sort NIDs for convenient ordering */\n+  .rodata.sceNid : { *(.rodata.sceNid) *(SORT(.rodata.sceNid.*)) }\n+}"}, {"sha": "c7b2023ddca04153feaae7c37a5c74131d043975", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d01ee6f7f80098bf3550cc46c1a7a24cb83fd762/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01ee6f7f80098bf3550cc46c1a7a24cb83fd762/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=d01ee6f7f80098bf3550cc46c1a7a24cb83fd762", "patch": "@@ -582,6 +582,8 @@ supported_targets! {\n     (\"powerpc-wrs-vxworks\", powerpc_wrs_vxworks),\n     (\"powerpc-wrs-vxworks-spe\", powerpc_wrs_vxworks_spe),\n     (\"powerpc64-wrs-vxworks\", powerpc64_wrs_vxworks),\n+\n+    (\"mipsel-sony-psp\", mipsel_sony_psp),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target.\n@@ -666,6 +668,10 @@ pub struct TargetOptions {\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n+    /// Optional link script applied to `dylib` and `executable` crate types.\n+    /// This is a string containing the script, not a path. Can only be applied\n+    /// to linkers where `linker_is_gnu` is true.\n+    pub link_script: Option<String>,\n \n     /// Environment variables to be set for the linker invocation.\n     pub link_env: Vec<(String, String)>,\n@@ -899,6 +905,7 @@ impl Default for TargetOptions {\n             pre_link_args: LinkArgs::new(),\n             pre_link_args_crt: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n+            link_script: None,\n             asm_args: Vec::new(),\n             cpu: \"generic\".to_string(),\n             features: String::new(),\n@@ -1249,6 +1256,7 @@ impl Target {\n         key!(post_link_objects, list);\n         key!(post_link_objects_crt, list);\n         key!(post_link_args, link_args);\n+        key!(link_script, optional);\n         key!(link_env, env);\n         key!(link_env_remove, list);\n         key!(asm_args, list);\n@@ -1479,6 +1487,7 @@ impl ToJson for Target {\n         target_option_val!(post_link_objects);\n         target_option_val!(post_link_objects_crt);\n         target_option_val!(link_args - post_link_args);\n+        target_option_val!(link_script);\n         target_option_val!(env - link_env);\n         target_option_val!(link_env_remove);\n         target_option_val!(asm_args);"}, {"sha": "ec6fccd34c30003a7ebf4e7a9dfe4e31f5b76e1b", "filename": "src/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdarch?ref=d01ee6f7f80098bf3550cc46c1a7a24cb83fd762", "patch": "@@ -1 +1 @@\n-Subproject commit d10eefc62284c40c5a95a2eed19fc1f414a5364d\n+Subproject commit ec6fccd34c30003a7ebf4e7a9dfe4e31f5b76e1b"}]}