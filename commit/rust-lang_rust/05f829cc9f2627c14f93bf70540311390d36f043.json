{"sha": "05f829cc9f2627c14f93bf70540311390d36f043", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZjgyOWNjOWYyNjI3YzE0ZjkzYmY3MDU0MDMxMTM5MGQzNmYwNDM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-02T16:21:32Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-02T16:21:32Z"}, "message": "merge the three stacks in the interpreter", "tree": {"sha": "eab63aae515e983d9b73856d1099eebe7c0e87d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eab63aae515e983d9b73856d1099eebe7c0e87d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05f829cc9f2627c14f93bf70540311390d36f043", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXUF0MAAoJEFbW7qD8Z6xGEDMP/0u5z97zGG0l6BI58w7UulOC\nt6kDQCDybbYYHjgibnJNSvMrr6UdWwxLtBxhEbQq2dWZ4ub6seyv1OFxzlID8wpo\n04qkPrF5KQrlpmo75BErS6EHj6wQR2yNIQKFSIXFyWxA2gvmTvGoX0+6EZzgBY1z\n7+mb4PEB+OySmhAZfcU5KX8PWe3ld0F+4C7jQYK8AfJNnhkLbLFopwtp+vrYeahi\nhJ8VKGmcKfgcO9BgfBb+Vy86AGJWAy0aOH5Y9ACW+WdFOyxINZtPaSN2H55aHPTl\nhqMWKaq4XKJd4IH30DGWGQ3MTHKOs14TDlKKnd8dLjAGf7VwH5aecFuXj7S45NCX\nZa9lOh9NzB8M1giihnGBqFJMJsMoxhKQbAiSlRxqVNFvdLCby77M7l35aQNVN+J6\nUeAwhI8i0IChTahu5XBd+qa7mxAYdvDD87cInhVPXBql0fvgJ6vyLeye/41IX3VB\nHWfgXB+1oC+HThyM+U4ZOWLkYDD4lVsk351da5U+bQbeXJyL7QsxefWPu2tHBSUZ\nEwMYHFm3AIc9hT4pRFgqx+++U4WCm/Jo0s2M5Ia0rS5t9BWHh1RERkHb3PGjswKe\ncgSA4nNblmIJ9BT5XGhDo5ATluT84dFT6I80ffBD0967yRdfYJXjfwTNetRw2usw\nIZXnhqXBzS/YeMa2q5QJ\n=8Cnp\n-----END PGP SIGNATURE-----", "payload": "tree eab63aae515e983d9b73856d1099eebe7c0e87d1\nparent 38ae3526e56137d10a6c0e21d861016d6de0c698\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464884492 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464884492 +0200\n\nmerge the three stacks in the interpreter"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05f829cc9f2627c14f93bf70540311390d36f043", "html_url": "https://github.com/rust-lang/rust/commit/05f829cc9f2627c14f93bf70540311390d36f043", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05f829cc9f2627c14f93bf70540311390d36f043/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38ae3526e56137d10a6c0e21d861016d6de0c698", "url": "https://api.github.com/repos/rust-lang/rust/commits/38ae3526e56137d10a6c0e21d861016d6de0c698", "html_url": "https://github.com/rust-lang/rust/commit/38ae3526e56137d10a6c0e21d861016d6de0c698"}], "stats": {"total": 67, "additions": 31, "deletions": 36}, "files": [{"sha": "7ae20f78dc480962e1cb4c10802280941cb47857", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/05f829cc9f2627c14f93bf70540311390d36f043/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f829cc9f2627c14f93bf70540311390d36f043/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=05f829cc9f2627c14f93bf70540311390d36f043", "patch": "@@ -37,17 +37,6 @@ struct GlobalEvalContext<'a, 'tcx: 'a> {\n     /// The virtual memory system.\n     memory: Memory,\n \n-    /// Another stack containing the type substitutions for the current function invocation. It\n-    /// exists separately from `stack` because it must contain the `Substs` for a function while\n-    /// *creating* the `Frame` for that same function.\n-    substs_stack: Vec<&'tcx Substs<'tcx>>,\n-\n-    // TODO(solson): Merge with `substs_stack`. Also try restructuring `Frame` to accomodate.\n-    /// A stack of the things necessary to print good strack traces:\n-    ///   * Function DefIds and Substs to print proper substituted function names.\n-    ///   * Spans pointing to specific function calls in the source.\n-    name_stack: Vec<(DefId, &'tcx Substs<'tcx>, codemap::Span)>,\n-\n     /// Precomputed statics and constants\n     statics: DefIdMap<Pointer>,\n }\n@@ -74,6 +63,15 @@ impl<'a, 'b, 'mir, 'tcx> DerefMut for FnEvalContext<'a, 'b, 'mir, 'tcx> {\n \n /// A stack frame.\n struct Frame<'a, 'tcx: 'a> {\n+    /// The def_id of the current function\n+    def_id: DefId,\n+\n+    /// The span of the call site\n+    span: codemap::Span,\n+\n+    /// type substitutions for the current function invocation\n+    substs: &'tcx Substs<'tcx>,\n+\n     /// The MIR for the function called on this frame.\n     mir: CachedMir<'a, 'tcx>,\n \n@@ -148,26 +146,25 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n                                    .uint_type\n                                    .bit_width()\n                                    .expect(\"Session::target::uint_type was usize\")/8),\n-            substs_stack: Vec::new(),\n-            name_stack: Vec::new(),\n             statics: DefIdMap(),\n         }\n     }\n \n     fn call(&mut self, mir: &mir::Mir<'tcx>, def_id: DefId) -> EvalResult<Option<Pointer>> {\n+        let substs = self.tcx.mk_substs(subst::Substs::empty());\n+\n         let mut nested_fecx = FnEvalContext::new(self);\n \n+        nested_fecx.push_stack_frame(def_id, mir.span, CachedMir::Ref(mir), substs, None);\n         let return_ptr = match mir.return_ty {\n             ty::FnConverging(ty) => {\n                 let size = nested_fecx.type_size(ty);\n                 Some(nested_fecx.memory.allocate(size))\n             }\n             ty::FnDiverging => None,\n         };\n+        nested_fecx.frame_mut().return_ptr = return_ptr;\n \n-        let substs = nested_fecx.substs();\n-        nested_fecx.name_stack.push((def_id, substs, mir.span));\n-        nested_fecx.push_stack_frame(CachedMir::Ref(mir), substs, return_ptr);\n         nested_fecx.run()?;\n         Ok(return_ptr)\n     }\n@@ -184,7 +181,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n     fn maybe_report<T>(&self, span: codemap::Span, r: EvalResult<T>) -> EvalResult<T> {\n         if let Err(ref e) = r {\n             let mut err = self.tcx.sess.struct_span_err(span, &e.to_string());\n-            for &(def_id, substs, span) in self.name_stack.iter().rev() {\n+            for &Frame{ def_id, substs, span, .. } in self.stack.iter().rev() {\n                 // FIXME(solson): Find a way to do this without this Display impl hack.\n                 use rustc::util::ppaux;\n                 use std::fmt;\n@@ -221,20 +218,13 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n         }\n     }\n \n-    fn push_stack_frame(&mut self, mir: CachedMir<'mir, 'tcx>, substs: &'tcx Substs<'tcx>,\n+    fn push_stack_frame(&mut self, def_id: DefId, span: codemap::Span, mir: CachedMir<'mir, 'tcx>, substs: &'tcx Substs<'tcx>,\n         return_ptr: Option<Pointer>)\n     {\n-        self.substs_stack.push(substs);\n-\n         let arg_tys = mir.arg_decls.iter().map(|a| a.ty);\n         let var_tys = mir.var_decls.iter().map(|v| v.ty);\n         let temp_tys = mir.temp_decls.iter().map(|t| t.ty);\n \n-        let locals: Vec<Pointer> = arg_tys.chain(var_tys).chain(temp_tys).map(|ty| {\n-            let size = self.type_size(ty);\n-            self.memory.allocate(size)\n-        }).collect();\n-\n         let num_args = mir.arg_decls.len();\n         let num_vars = mir.var_decls.len();\n \n@@ -244,18 +234,27 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n             mir: mir.clone(),\n             next_block: mir::START_BLOCK,\n             return_ptr: return_ptr,\n-            locals: locals,\n+            locals: Vec::new(),\n             var_offset: num_args,\n             temp_offset: num_args + num_vars,\n             promoted: HashMap::new(),\n+            span: span,\n+            def_id: def_id,\n+            substs: substs,\n         });\n+\n+        let locals: Vec<Pointer> = arg_tys.chain(var_tys).chain(temp_tys).map(|ty| {\n+            let size = self.type_size(ty);\n+            self.memory.allocate(size)\n+        }).collect();\n+\n+        self.frame_mut().locals = locals;\n     }\n \n     fn pop_stack_frame(&mut self) {\n         ::log_settings::settings().indentation -= 1;\n         let _frame = self.stack.pop().expect(\"tried to pop a stack frame, but there were none\");\n         // TODO(solson): Deallocate local variables.\n-        self.substs_stack.pop();\n     }\n \n     fn eval_terminator(&mut self, terminator: &mir::Terminator<'tcx>)\n@@ -382,8 +381,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                                 }\n \n                                 let mir = self.load_mir(resolved_def_id);\n-                                self.name_stack.push((def_id, substs, terminator.span));\n-                                self.push_stack_frame(mir, resolved_substs, return_ptr);\n+                                self.push_stack_frame(def_id, terminator.span, mir, resolved_substs, return_ptr);\n \n                                 for (i, (src, src_ty)) in arg_srcs.into_iter().enumerate() {\n                                     let dest = self.frame().locals[i];\n@@ -1237,7 +1235,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n     }\n \n     fn substs(&self) -> &'tcx Substs<'tcx> {\n-        self.substs_stack.last().cloned().unwrap_or_else(|| self.tcx.mk_substs(Substs::empty()))\n+        self.frame().substs\n     }\n \n     fn load_mir(&self, def_id: DefId) -> CachedMir<'mir, 'tcx> {"}, {"sha": "48773d6e0df7539438d2fcf8421f946e32634e0c", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05f829cc9f2627c14f93bf70540311390d36f043/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f829cc9f2627c14f93bf70540311390d36f043/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=05f829cc9f2627c14f93bf70540311390d36f043", "patch": "@@ -69,7 +69,6 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n             },\n             TerminatorTarget::Return => {\n                 self.fncx.pop_stack_frame();\n-                self.fncx.name_stack.pop();\n                 self.stmt.pop();\n                 assert!(self.constants.last().unwrap().is_empty());\n                 self.constants.pop();\n@@ -115,9 +114,8 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n                 self.fncx.frame_mut().promoted.insert(index, return_ptr);\n                 let substs = self.fncx.substs();\n                 // FIXME: somehow encode that this is a promoted constant's frame\n-                let def_id = self.fncx.name_stack.last().unwrap().0;\n-                self.fncx.name_stack.push((def_id, substs, span));\n-                self.fncx.push_stack_frame(CachedMir::Owned(Rc::new(mir)), substs, Some(return_ptr));\n+                let def_id = self.fncx.frame().def_id;\n+                self.fncx.push_stack_frame(def_id, span, CachedMir::Owned(Rc::new(mir)), substs, Some(return_ptr));\n                 self.stmt.push(0);\n                 self.constants.push(Vec::new());\n                 self.block = self.fncx.frame().next_block;\n@@ -129,8 +127,7 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n                 let return_ptr = self.alloc(mir.return_ty);\n                 self.fncx.gecx.statics.insert(def_id, return_ptr);\n                 let substs = self.fncx.tcx.mk_substs(subst::Substs::empty());\n-                self.fncx.name_stack.push((def_id, substs, span));\n-                self.fncx.push_stack_frame(mir, substs, Some(return_ptr));\n+                self.fncx.push_stack_frame(def_id, span, mir, substs, Some(return_ptr));\n                 self.stmt.push(0);\n                 self.constants.push(Vec::new());\n                 self.block = self.fncx.frame().next_block;"}]}