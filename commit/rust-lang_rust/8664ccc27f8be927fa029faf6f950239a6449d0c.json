{"sha": "8664ccc27f8be927fa029faf6f950239a6449d0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NjRjY2MyN2Y4YmU5MjdmYTAyOWZhZjZmOTUwMjM5YTY0NDlkMGM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-08T14:19:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-08T14:19:42Z"}, "message": "Remove ArchiveConfig", "tree": {"sha": "dc3f582716b9473b9afca914980cfa14b50a02aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc3f582716b9473b9afca914980cfa14b50a02aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8664ccc27f8be927fa029faf6f950239a6449d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8664ccc27f8be927fa029faf6f950239a6449d0c", "html_url": "https://github.com/rust-lang/rust/commit/8664ccc27f8be927fa029faf6f950239a6449d0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8664ccc27f8be927fa029faf6f950239a6449d0c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb0e5c62119debd0d7766f43cafa5b8d67bc5cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0e5c62119debd0d7766f43cafa5b8d67bc5cb0", "html_url": "https://github.com/rust-lang/rust/commit/fb0e5c62119debd0d7766f43cafa5b8d67bc5cb0"}], "stats": {"total": 51, "additions": 23, "deletions": 28}, "files": [{"sha": "a34ede57e7991eaa65b4ab0082e507760895812c", "filename": "src/archive.rs", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8664ccc27f8be927fa029faf6f950239a6449d0c/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8664ccc27f8be927fa029faf6f950239a6449d0c/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=8664ccc27f8be927fa029faf6f950239a6449d0c", "patch": "@@ -8,14 +8,6 @@ use rustc_codegen_ssa::METADATA_FILENAME;\n \n use object::{Object, SymbolKind};\n \n-struct ArchiveConfig<'a> {\n-    sess: &'a Session,\n-    dst: PathBuf,\n-    lib_search_paths: Vec<PathBuf>,\n-    use_gnu_style_archive: bool,\n-    no_builtin_ranlib: bool,\n-}\n-\n #[derive(Debug)]\n enum ArchiveEntry {\n     FromArchive {\n@@ -26,7 +18,12 @@ enum ArchiveEntry {\n }\n \n pub(crate) struct ArArchiveBuilder<'a> {\n-    config: ArchiveConfig<'a>,\n+    sess: &'a Session,\n+    dst: PathBuf,\n+    lib_search_paths: Vec<PathBuf>,\n+    use_gnu_style_archive: bool,\n+    no_builtin_ranlib: bool,\n+\n     src_archives: Vec<(PathBuf, ar::Archive<File>)>,\n     // Don't use `HashMap` here, as the order is important. `rust.metadata.bin` must always be at\n     // the end of an archive for linkers to not get confused.\n@@ -37,14 +34,6 @@ pub(crate) struct ArArchiveBuilder<'a> {\n impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n     fn new(sess: &'a Session, output: &Path, input: Option<&Path>) -> Self {\n         use rustc_codegen_ssa::back::link::archive_search_paths;\n-        let config = ArchiveConfig {\n-            sess,\n-            dst: output.to_path_buf(),\n-            lib_search_paths: archive_search_paths(sess),\n-            use_gnu_style_archive: sess.target.target.options.archive_format == \"gnu\",\n-            // FIXME fix builtin ranlib on macOS\n-            no_builtin_ranlib: sess.target.target.options.is_like_osx,\n-        };\n \n         let (src_archives, entries) = if let Some(input) = input {\n             let mut archive = ar::Archive::new(File::open(input).unwrap());\n@@ -69,7 +58,13 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         };\n \n         ArArchiveBuilder {\n-            config,\n+            sess,\n+            dst: output.to_path_buf(),\n+            lib_search_paths: archive_search_paths(sess),\n+            use_gnu_style_archive: sess.target.target.options.archive_format == \"gnu\",\n+            // FIXME fix builtin ranlib on macOS\n+            no_builtin_ranlib: sess.target.target.options.is_like_osx,\n+\n             src_archives,\n             entries,\n             update_symbols: false,\n@@ -97,7 +92,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n     }\n \n     fn add_native_library(&mut self, name: rustc_span::symbol::Symbol) {\n-        let location = find_library(name, &self.config.lib_search_paths, self.config.sess);\n+        let location = find_library(name, &self.lib_search_paths, self.sess);\n         self.add_archive(location.clone(), |_| false)\n             .unwrap_or_else(|e| {\n                 panic!(\n@@ -149,7 +144,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             Gnu(ar::GnuBuilder<File>),\n         }\n \n-        let sess = self.config.sess;\n+        let sess = self.sess;\n \n         let mut symbol_table = BTreeMap::new();\n \n@@ -179,7 +174,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n                 }\n             };\n \n-            if !self.config.no_builtin_ranlib {\n+            if !self.no_builtin_ranlib {\n                 match object::File::parse(&data) {\n                     Ok(object) => {\n                         symbol_table.insert(entry_name.as_bytes().to_vec(), object.symbols().filter_map(|(_index, symbol)| {\n@@ -204,9 +199,9 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             entries.push((entry_name, data));\n         }\n \n-        let mut builder = if self.config.use_gnu_style_archive {\n+        let mut builder = if self.use_gnu_style_archive {\n             BuilderKind::Gnu(ar::GnuBuilder::new(\n-                File::create(&self.config.dst).unwrap_or_else(|err| {\n+                File::create(&self.dst).unwrap_or_else(|err| {\n                     sess.fatal(&format!(\"error opening destination during archive building: {}\", err));\n                 }),\n                 entries\n@@ -218,7 +213,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             ).unwrap())\n         } else {\n             BuilderKind::Bsd(ar::Builder::new(\n-                File::create(&self.config.dst).unwrap_or_else(|err| {\n+                File::create(&self.dst).unwrap_or_else(|err| {\n                     sess.fatal(&format!(\"error opening destination during archive building: {}\", err));\n                 }),\n                 symbol_table,\n@@ -241,17 +236,17 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         // Finalize archive\n         std::mem::drop(builder);\n \n-        if self.config.no_builtin_ranlib {\n-            let ranlib = crate::toolchain::get_toolchain_binary(self.config.sess, \"ranlib\");\n+        if self.no_builtin_ranlib {\n+            let ranlib = crate::toolchain::get_toolchain_binary(self.sess, \"ranlib\");\n \n             // Run ranlib to be able to link the archive\n             let status = std::process::Command::new(ranlib)\n-                .arg(self.config.dst)\n+                .arg(self.dst)\n                 .status()\n                 .expect(\"Couldn't run ranlib\");\n \n             if !status.success() {\n-                self.config.sess.fatal(&format!(\"Ranlib exited with code {:?}\", status.code()));\n+                self.sess.fatal(&format!(\"Ranlib exited with code {:?}\", status.code()));\n             }\n         }\n     }"}]}