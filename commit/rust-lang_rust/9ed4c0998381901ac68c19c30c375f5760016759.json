{"sha": "9ed4c0998381901ac68c19c30c375f5760016759", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZDRjMDk5ODM4MTkwMWFjNjhjMTljMzBjMzc1ZjU3NjAwMTY3NTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-22T02:44:24Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T23:59:38Z"}, "message": "parse: extract `error_on_unmatched_vis`.", "tree": {"sha": "b1bc6cc997c185828e32017d432a24d6958aebfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1bc6cc997c185828e32017d432a24d6958aebfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ed4c0998381901ac68c19c30c375f5760016759", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed4c0998381901ac68c19c30c375f5760016759", "html_url": "https://github.com/rust-lang/rust/commit/9ed4c0998381901ac68c19c30c375f5760016759", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ed4c0998381901ac68c19c30c375f5760016759/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7017058e6b289ea6253e62b9ffdae5dea036855f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7017058e6b289ea6253e62b9ffdae5dea036855f", "html_url": "https://github.com/rust-lang/rust/commit/7017058e6b289ea6253e62b9ffdae5dea036855f"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "732bbdf1c54770679d5d5fa9f32f67bc20063264", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9ed4c0998381901ac68c19c30c375f5760016759/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed4c0998381901ac68c19c30c375f5760016759/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=9ed4c0998381901ac68c19c30c375f5760016759", "patch": "@@ -88,23 +88,29 @@ impl<'a> Parser<'a> {\n             return Ok(Some(P(self.mk_item(lo, ident, kind, vis, Defaultness::Final, attrs))));\n         }\n \n-        // FAILURE TO PARSE ITEM\n-        if let VisibilityKind::Inherited = vis.node {\n-        } else {\n-            let vs = pprust::vis_to_string(&vis);\n-            let vs = vs.trim_end();\n-            self.struct_span_err(vis.span, &format!(\"unmatched visibility `{}`\", vs))\n-                .span_label(vis.span, \"the unmatched visibility\")\n-                .help(&format!(\"you likely meant to define an item, e.g., `{} fn foo() {{}}`\", vs))\n-                .emit();\n-        }\n+        // At this point, we have failed to parse an item.\n+\n+        self.error_on_unmatched_vis(&vis);\n \n         if !attributes_allowed {\n             self.recover_attrs_no_item(&attrs)?;\n         }\n         Ok(None)\n     }\n \n+    /// Error in-case a non-inherited visibility was parsed but no item followed.\n+    fn error_on_unmatched_vis(&self, vis: &Visibility) {\n+        if let VisibilityKind::Inherited = vis.node {\n+            return;\n+        }\n+        let vs = pprust::vis_to_string(&vis);\n+        let vs = vs.trim_end();\n+        self.struct_span_err(vis.span, &format!(\"unmatched visibility `{}`\", vs))\n+            .span_label(vis.span, \"the unmatched visibility\")\n+            .help(&format!(\"you likely meant to define an item, e.g., `{} fn foo() {{}}`\", vs))\n+            .emit();\n+    }\n+\n     /// Parses one of the items allowed by the flags.\n     fn parse_item_kind(\n         &mut self,"}]}