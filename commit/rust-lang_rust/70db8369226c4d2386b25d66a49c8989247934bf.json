{"sha": "70db8369226c4d2386b25d66a49c8989247934bf", "node_id": "C_kwDOAAsO6NoAKDcwZGI4MzY5MjI2YzRkMjM4NmIyNWQ2NmE0OWM4OTg5MjQ3OTM0YmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-24T10:56:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-24T10:56:34Z"}, "message": "Auto merge of #111566 - clubby789:bootstrap-override-config, r=ozkanonur\n\nOverride config.toml options from command line\n\nhttps://rust-lang.zulipchat.com/#narrow/stream/326414-t-infra.2Fbootstrap/topic/Running.20tests.20on.20precompiled.20rustc/near/357763280\n\ncc `@jyn514`", "tree": {"sha": "bdbaebb78c134153a70417464982ed5eb7bd6a86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdbaebb78c134153a70417464982ed5eb7bd6a86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70db8369226c4d2386b25d66a49c8989247934bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70db8369226c4d2386b25d66a49c8989247934bf", "html_url": "https://github.com/rust-lang/rust/commit/70db8369226c4d2386b25d66a49c8989247934bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70db8369226c4d2386b25d66a49c8989247934bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d69787f098618f12449f974fabcae249702340aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d69787f098618f12449f974fabcae249702340aa", "html_url": "https://github.com/rust-lang/rust/commit/d69787f098618f12449f974fabcae249702340aa"}, {"sha": "7a7cbe0206bbe54987089d79e655d5f51eeda9d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7cbe0206bbe54987089d79e655d5f51eeda9d2", "html_url": "https://github.com/rust-lang/rust/commit/7a7cbe0206bbe54987089d79e655d5f51eeda9d2"}], "stats": {"total": 350, "additions": 303, "deletions": 47}, "files": [{"sha": "e192cda9a9a71d3340f5464e65307e9f5d0f3c9d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 124, "deletions": 26, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/70db8369226c4d2386b25d66a49c8989247934bf/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70db8369226c4d2386b25d66a49c8989247934bf/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=70db8369226c4d2386b25d66a49c8989247934bf", "patch": "@@ -350,7 +350,7 @@ impl SplitDebuginfo {\n }\n \n /// LTO mode used for compiling rustc itself.\n-#[derive(Default, Clone, PartialEq)]\n+#[derive(Default, Clone, PartialEq, Debug)]\n pub enum RustcLto {\n     Off,\n     #[default]\n@@ -508,29 +508,42 @@ struct TomlConfig {\n     profile: Option<String>,\n }\n \n+/// Describes how to handle conflicts in merging two [`TomlConfig`]\n+#[derive(Copy, Clone, Debug)]\n+enum ReplaceOpt {\n+    /// Silently ignore a duplicated value\n+    IgnoreDuplicate,\n+    /// Override the current value, even if it's `Some`\n+    Override,\n+    /// Exit with an error on duplicate values\n+    ErrorOnDuplicate,\n+}\n+\n trait Merge {\n-    fn merge(&mut self, other: Self);\n+    fn merge(&mut self, other: Self, replace: ReplaceOpt);\n }\n \n impl Merge for TomlConfig {\n     fn merge(\n         &mut self,\n-        TomlConfig { build, install, llvm, rust, dist, target, profile: _, changelog_seen: _ }: Self,\n+        TomlConfig { build, install, llvm, rust, dist, target, profile: _, changelog_seen }: Self,\n+        replace: ReplaceOpt,\n     ) {\n-        fn do_merge<T: Merge>(x: &mut Option<T>, y: Option<T>) {\n+        fn do_merge<T: Merge>(x: &mut Option<T>, y: Option<T>, replace: ReplaceOpt) {\n             if let Some(new) = y {\n                 if let Some(original) = x {\n-                    original.merge(new);\n+                    original.merge(new, replace);\n                 } else {\n                     *x = Some(new);\n                 }\n             }\n         }\n-        do_merge(&mut self.build, build);\n-        do_merge(&mut self.install, install);\n-        do_merge(&mut self.llvm, llvm);\n-        do_merge(&mut self.rust, rust);\n-        do_merge(&mut self.dist, dist);\n+        self.changelog_seen.merge(changelog_seen, replace);\n+        do_merge(&mut self.build, build, replace);\n+        do_merge(&mut self.install, install, replace);\n+        do_merge(&mut self.llvm, llvm, replace);\n+        do_merge(&mut self.rust, rust, replace);\n+        do_merge(&mut self.dist, dist, replace);\n         assert!(target.is_none(), \"merging target-specific config is not currently supported\");\n     }\n }\n@@ -547,10 +560,33 @@ macro_rules! define_config {\n         }\n \n         impl Merge for $name {\n-            fn merge(&mut self, other: Self) {\n+            fn merge(&mut self, other: Self, replace: ReplaceOpt) {\n                 $(\n-                    if !self.$field.is_some() {\n-                        self.$field = other.$field;\n+                    match replace {\n+                        ReplaceOpt::IgnoreDuplicate => {\n+                            if self.$field.is_none() {\n+                                self.$field = other.$field;\n+                            }\n+                        },\n+                        ReplaceOpt::Override => {\n+                            if other.$field.is_some() {\n+                                self.$field = other.$field;\n+                            }\n+                        }\n+                        ReplaceOpt::ErrorOnDuplicate => {\n+                            if other.$field.is_some() {\n+                                if self.$field.is_some() {\n+                                    if cfg!(test) {\n+                                        panic!(\"overriding existing option\")\n+                                    } else {\n+                                        eprintln!(\"overriding existing option: `{}`\", stringify!($field));\n+                                        crate::detail_exit(2);\n+                                    }\n+                                } else {\n+                                    self.$field = other.$field;\n+                                }\n+                            }\n+                        }\n                     }\n                 )*\n             }\n@@ -623,6 +659,37 @@ macro_rules! define_config {\n     }\n }\n \n+impl<T> Merge for Option<T> {\n+    fn merge(&mut self, other: Self, replace: ReplaceOpt) {\n+        match replace {\n+            ReplaceOpt::IgnoreDuplicate => {\n+                if self.is_none() {\n+                    *self = other;\n+                }\n+            }\n+            ReplaceOpt::Override => {\n+                if other.is_some() {\n+                    *self = other;\n+                }\n+            }\n+            ReplaceOpt::ErrorOnDuplicate => {\n+                if other.is_some() {\n+                    if self.is_some() {\n+                        if cfg!(test) {\n+                            panic!(\"overriding existing option\")\n+                        } else {\n+                            eprintln!(\"overriding existing option\");\n+                            crate::detail_exit(2);\n+                        }\n+                    } else {\n+                        *self = other;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n define_config! {\n     /// TOML representation of various global build decisions.\n     #[derive(Default)]\n@@ -864,28 +931,27 @@ impl Config {\n \n     pub fn parse(args: &[String]) -> Config {\n         #[cfg(test)]\n-        let get_toml = |_: &_| TomlConfig::default();\n+        fn get_toml(_: &Path) -> TomlConfig {\n+            TomlConfig::default()\n+        }\n+\n         #[cfg(not(test))]\n-        let get_toml = |file: &Path| {\n+        fn get_toml(file: &Path) -> TomlConfig {\n             let contents =\n                 t!(fs::read_to_string(file), format!(\"config file {} not found\", file.display()));\n             // Deserialize to Value and then TomlConfig to prevent the Deserialize impl of\n             // TomlConfig and sub types to be monomorphized 5x by toml.\n-            match toml::from_str(&contents)\n+            toml::from_str(&contents)\n                 .and_then(|table: toml::Value| TomlConfig::deserialize(table))\n-            {\n-                Ok(table) => table,\n-                Err(err) => {\n-                    eprintln!(\"failed to parse TOML configuration '{}': {}\", file.display(), err);\n+                .unwrap_or_else(|err| {\n+                    eprintln!(\"failed to parse TOML configuration '{}': {err}\", file.display());\n                     crate::detail_exit(2);\n-                }\n-            }\n-        };\n-\n+                })\n+        }\n         Self::parse_inner(args, get_toml)\n     }\n \n-    fn parse_inner<'a>(args: &[String], get_toml: impl 'a + Fn(&Path) -> TomlConfig) -> Config {\n+    fn parse_inner(args: &[String], get_toml: impl Fn(&Path) -> TomlConfig) -> Config {\n         let mut flags = Flags::parse(&args);\n         let mut config = Config::default_opts();\n \n@@ -998,8 +1064,40 @@ impl Config {\n             include_path.push(\"defaults\");\n             include_path.push(format!(\"config.{}.toml\", include));\n             let included_toml = get_toml(&include_path);\n-            toml.merge(included_toml);\n+            toml.merge(included_toml, ReplaceOpt::IgnoreDuplicate);\n+        }\n+\n+        let mut override_toml = TomlConfig::default();\n+        for option in flags.set.iter() {\n+            fn get_table(option: &str) -> Result<TomlConfig, toml::de::Error> {\n+                toml::from_str(&option)\n+                    .and_then(|table: toml::Value| TomlConfig::deserialize(table))\n+            }\n+\n+            let mut err = match get_table(option) {\n+                Ok(v) => {\n+                    override_toml.merge(v, ReplaceOpt::ErrorOnDuplicate);\n+                    continue;\n+                }\n+                Err(e) => e,\n+            };\n+            // We want to be able to set string values without quotes,\n+            // like in `configure.py`. Try adding quotes around the right hand side\n+            if let Some((key, value)) = option.split_once(\"=\") {\n+                if !value.contains('\"') {\n+                    match get_table(&format!(r#\"{key}=\"{value}\"\"#)) {\n+                        Ok(v) => {\n+                            override_toml.merge(v, ReplaceOpt::ErrorOnDuplicate);\n+                            continue;\n+                        }\n+                        Err(e) => err = e,\n+                    }\n+                }\n+            }\n+            eprintln!(\"failed to parse override `{option}`: `{err}\");\n+            crate::detail_exit(2)\n         }\n+        toml.merge(override_toml, ReplaceOpt::Override);\n \n         config.changelog_seen = toml.changelog_seen;\n "}, {"sha": "4de84b543ed96c0cdf838a8b7b5682d27eac375d", "filename": "src/bootstrap/config/tests.rs", "status": "modified", "additions": 71, "deletions": 6, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/70db8369226c4d2386b25d66a49c8989247934bf/src%2Fbootstrap%2Fconfig%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70db8369226c4d2386b25d66a49c8989247934bf/src%2Fbootstrap%2Fconfig%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig%2Ftests.rs?ref=70db8369226c4d2386b25d66a49c8989247934bf", "patch": "@@ -1,13 +1,11 @@\n-use super::{Config, Flags, TomlConfig};\n+use super::{Config, Flags};\n use clap::CommandFactory;\n use std::{env, path::Path};\n \n-fn toml(config: &str) -> impl '_ + Fn(&Path) -> TomlConfig {\n-    |&_| toml::from_str(config).unwrap()\n-}\n-\n fn parse(config: &str) -> Config {\n-    Config::parse_inner(&[\"check\".to_owned(), \"--config=/does/not/exist\".to_owned()], toml(config))\n+    Config::parse_inner(&[\"check\".to_owned(), \"--config=/does/not/exist\".to_owned()], |&_| {\n+        toml::from_str(config).unwrap()\n+    })\n }\n \n #[test]\n@@ -94,3 +92,70 @@ fn detect_src_and_out() {\n fn clap_verify() {\n     Flags::command().debug_assert();\n }\n+\n+#[test]\n+fn override_toml() {\n+    let config = Config::parse_inner(\n+        &[\n+            \"check\".to_owned(),\n+            \"--config=/does/not/exist\".to_owned(),\n+            \"--set=changelog-seen=1\".to_owned(),\n+            \"--set=rust.lto=fat\".to_owned(),\n+            \"--set=rust.deny-warnings=false\".to_owned(),\n+            \"--set=build.gdb=\\\"bar\\\"\".to_owned(),\n+            \"--set=build.tools=[\\\"cargo\\\"]\".to_owned(),\n+            \"--set=llvm.build-config={\\\"foo\\\" = \\\"bar\\\"}\".to_owned(),\n+        ],\n+        |&_| {\n+            toml::from_str(\n+                r#\"\n+changelog-seen = 0\n+[rust]\n+lto = \"off\"\n+deny-warnings = true\n+\n+[build]\n+gdb = \"foo\"\n+tools = []\n+\n+[llvm]\n+download-ci-llvm = false\n+build-config = {}\n+                \"#,\n+            )\n+            .unwrap()\n+        },\n+    );\n+    assert_eq!(config.changelog_seen, Some(1), \"setting top-level value\");\n+    assert_eq!(\n+        config.rust_lto,\n+        crate::config::RustcLto::Fat,\n+        \"setting string value without quotes\"\n+    );\n+    assert_eq!(config.gdb, Some(\"bar\".into()), \"setting string value with quotes\");\n+    assert_eq!(config.deny_warnings, false, \"setting boolean value\");\n+    assert_eq!(\n+        config.tools,\n+        Some([\"cargo\".to_string()].into_iter().collect()),\n+        \"setting list value\"\n+    );\n+    assert_eq!(\n+        config.llvm_build_config,\n+        [(\"foo\".to_string(), \"bar\".to_string())].into_iter().collect(),\n+        \"setting dictionary value\"\n+    );\n+}\n+\n+#[test]\n+#[should_panic]\n+fn override_toml_duplicate() {\n+    Config::parse_inner(\n+        &[\n+            \"check\".to_owned(),\n+            \"--config=/does/not/exist\".to_owned(),\n+            \"--set=changelog-seen=1\".to_owned(),\n+            \"--set=changelog-seen=2\".to_owned(),\n+        ],\n+        |&_| toml::from_str(\"changelog-seen = 0\").unwrap(),\n+    );\n+}"}, {"sha": "80e715777984a492fe6d29a6c7dcbad49d2cfa39", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70db8369226c4d2386b25d66a49c8989247934bf/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70db8369226c4d2386b25d66a49c8989247934bf/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=70db8369226c4d2386b25d66a49c8989247934bf", "patch": "@@ -158,6 +158,9 @@ pub struct Flags {\n     #[arg(global(true))]\n     /// paths for the subcommand\n     pub paths: Vec<PathBuf>,\n+    /// override options in config.toml\n+    #[arg(global(true), value_hint = clap::ValueHint::Other, long, value_name = \"section.option=value\")]\n+    pub set: Vec<String>,\n     /// arguments passed to subcommands\n     #[arg(global(true), last(true), value_name = \"ARGS\")]\n     pub free_args: Vec<String>,"}, {"sha": "9f65f1eeeb7e57e55d7a9b00ac4a8c3adcd14b6a", "filename": "src/etc/completions/x.py.fish", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70db8369226c4d2386b25d66a49c8989247934bf/src%2Fetc%2Fcompletions%2Fx.py.fish", "raw_url": "https://github.com/rust-lang/rust/raw/70db8369226c4d2386b25d66a49c8989247934bf/src%2Fetc%2Fcompletions%2Fx.py.fish", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcompletions%2Fx.py.fish?ref=70db8369226c4d2386b25d66a49c8989247934bf", "patch": "@@ -19,6 +19,7 @@ complete -c x.py -n \"__fish_use_subcommand\" -l rust-profile-generate -d 'generat\n complete -c x.py -n \"__fish_use_subcommand\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n complete -c x.py -n \"__fish_use_subcommand\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n complete -c x.py -n \"__fish_use_subcommand\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_use_subcommand\" -l set -d 'override options in config.toml' -r -f\n complete -c x.py -n \"__fish_use_subcommand\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n complete -c x.py -n \"__fish_use_subcommand\" -s i -l incremental -d 'use incremental compilation'\n complete -c x.py -n \"__fish_use_subcommand\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n@@ -62,6 +63,7 @@ complete -c x.py -n \"__fish_seen_subcommand_from build\" -l rust-profile-generate\n complete -c x.py -n \"__fish_seen_subcommand_from build\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from build\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from build\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l set -d 'override options in config.toml' -r -f\n complete -c x.py -n \"__fish_seen_subcommand_from build\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n complete -c x.py -n \"__fish_seen_subcommand_from build\" -s i -l incremental -d 'use incremental compilation'\n complete -c x.py -n \"__fish_seen_subcommand_from build\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n@@ -91,6 +93,7 @@ complete -c x.py -n \"__fish_seen_subcommand_from check\" -l rust-profile-generate\n complete -c x.py -n \"__fish_seen_subcommand_from check\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from check\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from check\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l set -d 'override options in config.toml' -r -f\n complete -c x.py -n \"__fish_seen_subcommand_from check\" -l all-targets -d 'Check all targets'\n complete -c x.py -n \"__fish_seen_subcommand_from check\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n complete -c x.py -n \"__fish_seen_subcommand_from check\" -s i -l incremental -d 'use incremental compilation'\n@@ -125,6 +128,7 @@ complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l rust-profile-generat\n complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l set -d 'override options in config.toml' -r -f\n complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l fix\n complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s i -l incremental -d 'use incremental compilation'\n@@ -155,6 +159,7 @@ complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l rust-profile-generate -\n complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l set -d 'override options in config.toml' -r -f\n complete -c x.py -n \"__fish_seen_subcommand_from fix\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n complete -c x.py -n \"__fish_seen_subcommand_from fix\" -s i -l incremental -d 'use incremental compilation'\n complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n@@ -184,6 +189,7 @@ complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l rust-profile-generate -\n complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l set -d 'override options in config.toml' -r -f\n complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l check -d 'check formatting instead of applying'\n complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -s i -l incremental -d 'use incremental compilation'\n@@ -214,6 +220,7 @@ complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l rust-profile-generate -\n complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l set -d 'override options in config.toml' -r -f\n complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l open -d 'open the docs in a browser'\n complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l json -d 'render the documentation in JSON format in addition to the usual HTML format'\n complete -c x.py -n \"__fish_seen_subcommand_from doc\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n@@ -251,6 +258,7 @@ complete -c x.py -n \"__fish_seen_subcommand_from test\" -l rust-profile-generate\n complete -c x.py -n \"__fish_seen_subcommand_from test\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from test\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from test\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l set -d 'override options in config.toml' -r -f\n complete -c x.py -n \"__fish_seen_subcommand_from test\" -l no-fail-fast -d 'run all tests regardless of failure'\n complete -c x.py -n \"__fish_seen_subcommand_from test\" -l no-doc -d 'do not run doc tests'\n complete -c x.py -n \"__fish_seen_subcommand_from test\" -l doc -d 'only run doc tests'\n@@ -288,6 +296,7 @@ complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l rust-profile-generate\n complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l set -d 'override options in config.toml' -r -f\n complete -c x.py -n \"__fish_seen_subcommand_from bench\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n complete -c x.py -n \"__fish_seen_subcommand_from bench\" -s i -l incremental -d 'use incremental compilation'\n complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n@@ -317,6 +326,7 @@ complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l rust-profile-generate\n complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l set -d 'override options in config.toml' -r -f\n complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l all\n complete -c x.py -n \"__fish_seen_subcommand_from clean\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n complete -c x.py -n \"__fish_seen_subcommand_from clean\" -s i -l incremental -d 'use incremental compilation'\n@@ -347,6 +357,7 @@ complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l rust-profile-generate\n complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l set -d 'override options in config.toml' -r -f\n complete -c x.py -n \"__fish_seen_subcommand_from dist\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n complete -c x.py -n \"__fish_seen_subcommand_from dist\" -s i -l incremental -d 'use incremental compilation'\n complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n@@ -376,6 +387,7 @@ complete -c x.py -n \"__fish_seen_subcommand_from install\" -l rust-profile-genera\n complete -c x.py -n \"__fish_seen_subcommand_from install\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from install\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from install\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l set -d 'override options in config.toml' -r -f\n complete -c x.py -n \"__fish_seen_subcommand_from install\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n complete -c x.py -n \"__fish_seen_subcommand_from install\" -s i -l incremental -d 'use incremental compilation'\n complete -c x.py -n \"__fish_seen_subcommand_from install\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n@@ -406,6 +418,7 @@ complete -c x.py -n \"__fish_seen_subcommand_from run\" -l rust-profile-generate -\n complete -c x.py -n \"__fish_seen_subcommand_from run\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from run\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from run\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l set -d 'override options in config.toml' -r -f\n complete -c x.py -n \"__fish_seen_subcommand_from run\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n complete -c x.py -n \"__fish_seen_subcommand_from run\" -s i -l incremental -d 'use incremental compilation'\n complete -c x.py -n \"__fish_seen_subcommand_from run\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n@@ -435,6 +448,7 @@ complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l rust-profile-generate\n complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l set -d 'override options in config.toml' -r -f\n complete -c x.py -n \"__fish_seen_subcommand_from setup\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n complete -c x.py -n \"__fish_seen_subcommand_from setup\" -s i -l incremental -d 'use incremental compilation'\n complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n@@ -464,6 +478,7 @@ complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l rust-profile-genera\n complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l set -d 'override options in config.toml' -r -f\n complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l run -d 'run suggested tests'\n complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -s i -l incremental -d 'use incremental compilation'"}, {"sha": "569c186555cc24e2d173098a4d8856062f302abf", "filename": "src/etc/completions/x.py.ps1", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70db8369226c4d2386b25d66a49c8989247934bf/src%2Fetc%2Fcompletions%2Fx.py.ps1", "raw_url": "https://github.com/rust-lang/rust/raw/70db8369226c4d2386b25d66a49c8989247934bf/src%2Fetc%2Fcompletions%2Fx.py.ps1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcompletions%2Fx.py.ps1?ref=70db8369226c4d2386b25d66a49c8989247934bf", "patch": "@@ -43,6 +43,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n             [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n             [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--set', 'set', [CompletionResultType]::ParameterName, 'override options in config.toml')\n             [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n@@ -93,6 +94,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n             [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n             [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--set', 'set', [CompletionResultType]::ParameterName, 'override options in config.toml')\n             [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n@@ -129,6 +131,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n             [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n             [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--set', 'set', [CompletionResultType]::ParameterName, 'override options in config.toml')\n             [CompletionResult]::new('--all-targets', 'all-targets', [CompletionResultType]::ParameterName, 'Check all targets')\n             [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n@@ -170,6 +173,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n             [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n             [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--set', 'set', [CompletionResultType]::ParameterName, 'override options in config.toml')\n             [CompletionResult]::new('--fix', 'fix', [CompletionResultType]::ParameterName, 'fix')\n             [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n@@ -207,6 +211,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n             [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n             [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--set', 'set', [CompletionResultType]::ParameterName, 'override options in config.toml')\n             [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n@@ -243,6 +248,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n             [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n             [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--set', 'set', [CompletionResultType]::ParameterName, 'override options in config.toml')\n             [CompletionResult]::new('--check', 'check', [CompletionResultType]::ParameterName, 'check formatting instead of applying')\n             [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n@@ -280,6 +286,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n             [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n             [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--set', 'set', [CompletionResultType]::ParameterName, 'override options in config.toml')\n             [CompletionResult]::new('--open', 'open', [CompletionResultType]::ParameterName, 'open the docs in a browser')\n             [CompletionResult]::new('--json', 'json', [CompletionResultType]::ParameterName, 'render the documentation in JSON format in addition to the usual HTML format')\n             [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n@@ -324,6 +331,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n             [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n             [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--set', 'set', [CompletionResultType]::ParameterName, 'override options in config.toml')\n             [CompletionResult]::new('--no-fail-fast', 'no-fail-fast', [CompletionResultType]::ParameterName, 'run all tests regardless of failure')\n             [CompletionResult]::new('--no-doc', 'no-doc', [CompletionResultType]::ParameterName, 'do not run doc tests')\n             [CompletionResult]::new('--doc', 'doc', [CompletionResultType]::ParameterName, 'only run doc tests')\n@@ -368,6 +376,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n             [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n             [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--set', 'set', [CompletionResultType]::ParameterName, 'override options in config.toml')\n             [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n@@ -404,6 +413,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n             [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n             [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--set', 'set', [CompletionResultType]::ParameterName, 'override options in config.toml')\n             [CompletionResult]::new('--all', 'all', [CompletionResultType]::ParameterName, 'all')\n             [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n@@ -441,6 +451,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n             [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n             [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--set', 'set', [CompletionResultType]::ParameterName, 'override options in config.toml')\n             [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n@@ -477,6 +488,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n             [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n             [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--set', 'set', [CompletionResultType]::ParameterName, 'override options in config.toml')\n             [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n@@ -514,6 +526,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n             [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n             [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--set', 'set', [CompletionResultType]::ParameterName, 'override options in config.toml')\n             [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n@@ -550,6 +563,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n             [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n             [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--set', 'set', [CompletionResultType]::ParameterName, 'override options in config.toml')\n             [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n@@ -586,6 +600,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n             [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n             [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--set', 'set', [CompletionResultType]::ParameterName, 'override options in config.toml')\n             [CompletionResult]::new('--run', 'run', [CompletionResultType]::ParameterName, 'run suggested tests')\n             [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n             [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')"}, {"sha": "322afdb28835f876f6867755a654ea6b68b84db1", "filename": "src/etc/completions/x.py.sh", "status": "modified", "additions": 75, "deletions": 15, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/70db8369226c4d2386b25d66a49c8989247934bf/src%2Fetc%2Fcompletions%2Fx.py.sh", "raw_url": "https://github.com/rust-lang/rust/raw/70db8369226c4d2386b25d66a49c8989247934bf/src%2Fetc%2Fcompletions%2Fx.py.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcompletions%2Fx.py.sh?ref=70db8369226c4d2386b25d66a49c8989247934bf", "patch": "@@ -61,7 +61,7 @@ _x.py() {\n \n     case \"${cmd}\" in\n         x.py)\n-            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]... build check clippy fix fmt doc test bench clean dist install run setup suggest\"\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --set --help [PATHS]... [ARGS]... build check clippy fix fmt doc test bench clean dist install run setup suggest\"\n             if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]] ; then\n                 COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n                 return 0\n@@ -155,6 +155,10 @@ _x.py() {\n                     COMPREPLY=($(compgen -f \"${cur}\"))\n                     return 0\n                     ;;\n+                --set)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n                 *)\n                     COMPREPLY=()\n                     ;;\n@@ -163,7 +167,7 @@ _x.py() {\n             return 0\n             ;;\n         x.py__bench)\n-            opts=\"-v -i -j -h --test-args --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            opts=\"-v -i -j -h --test-args --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --set --help [PATHS]... [ARGS]...\"\n             if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n                 COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n                 return 0\n@@ -261,6 +265,10 @@ _x.py() {\n                     COMPREPLY=($(compgen -f \"${cur}\"))\n                     return 0\n                     ;;\n+                --set)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n                 *)\n                     COMPREPLY=()\n                     ;;\n@@ -269,7 +277,7 @@ _x.py() {\n             return 0\n             ;;\n         x.py__build)\n-            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --set --help [PATHS]... [ARGS]...\"\n             if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n                 COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n                 return 0\n@@ -363,6 +371,10 @@ _x.py() {\n                     COMPREPLY=($(compgen -f \"${cur}\"))\n                     return 0\n                     ;;\n+                --set)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n                 *)\n                     COMPREPLY=()\n                     ;;\n@@ -371,7 +383,7 @@ _x.py() {\n             return 0\n             ;;\n         x.py__check)\n-            opts=\"-v -i -j -h --all-targets --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            opts=\"-v -i -j -h --all-targets --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --set --help [PATHS]... [ARGS]...\"\n             if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n                 COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n                 return 0\n@@ -465,6 +477,10 @@ _x.py() {\n                     COMPREPLY=($(compgen -f \"${cur}\"))\n                     return 0\n                     ;;\n+                --set)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n                 *)\n                     COMPREPLY=()\n                     ;;\n@@ -473,7 +489,7 @@ _x.py() {\n             return 0\n             ;;\n         x.py__clean)\n-            opts=\"-v -i -j -h --all --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            opts=\"-v -i -j -h --all --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --set --help [PATHS]... [ARGS]...\"\n             if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n                 COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n                 return 0\n@@ -567,6 +583,10 @@ _x.py() {\n                     COMPREPLY=($(compgen -f \"${cur}\"))\n                     return 0\n                     ;;\n+                --set)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n                 *)\n                     COMPREPLY=()\n                     ;;\n@@ -575,7 +595,7 @@ _x.py() {\n             return 0\n             ;;\n         x.py__clippy)\n-            opts=\"-A -D -W -F -v -i -j -h --fix --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            opts=\"-A -D -W -F -v -i -j -h --fix --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --set --help [PATHS]... [ARGS]...\"\n             if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n                 COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n                 return 0\n@@ -685,6 +705,10 @@ _x.py() {\n                     COMPREPLY=($(compgen -f \"${cur}\"))\n                     return 0\n                     ;;\n+                --set)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n                 *)\n                     COMPREPLY=()\n                     ;;\n@@ -693,7 +717,7 @@ _x.py() {\n             return 0\n             ;;\n         x.py__dist)\n-            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --set --help [PATHS]... [ARGS]...\"\n             if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n                 COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n                 return 0\n@@ -787,6 +811,10 @@ _x.py() {\n                     COMPREPLY=($(compgen -f \"${cur}\"))\n                     return 0\n                     ;;\n+                --set)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n                 *)\n                     COMPREPLY=()\n                     ;;\n@@ -795,7 +823,7 @@ _x.py() {\n             return 0\n             ;;\n         x.py__doc)\n-            opts=\"-v -i -j -h --open --json --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            opts=\"-v -i -j -h --open --json --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --set --help [PATHS]... [ARGS]...\"\n             if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n                 COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n                 return 0\n@@ -889,6 +917,10 @@ _x.py() {\n                     COMPREPLY=($(compgen -f \"${cur}\"))\n                     return 0\n                     ;;\n+                --set)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n                 *)\n                     COMPREPLY=()\n                     ;;\n@@ -897,7 +929,7 @@ _x.py() {\n             return 0\n             ;;\n         x.py__fix)\n-            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --set --help [PATHS]... [ARGS]...\"\n             if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n                 COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n                 return 0\n@@ -991,6 +1023,10 @@ _x.py() {\n                     COMPREPLY=($(compgen -f \"${cur}\"))\n                     return 0\n                     ;;\n+                --set)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n                 *)\n                     COMPREPLY=()\n                     ;;\n@@ -999,7 +1035,7 @@ _x.py() {\n             return 0\n             ;;\n         x.py__fmt)\n-            opts=\"-v -i -j -h --check --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            opts=\"-v -i -j -h --check --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --set --help [PATHS]... [ARGS]...\"\n             if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n                 COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n                 return 0\n@@ -1093,6 +1129,10 @@ _x.py() {\n                     COMPREPLY=($(compgen -f \"${cur}\"))\n                     return 0\n                     ;;\n+                --set)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n                 *)\n                     COMPREPLY=()\n                     ;;\n@@ -1101,7 +1141,7 @@ _x.py() {\n             return 0\n             ;;\n         x.py__install)\n-            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --set --help [PATHS]... [ARGS]...\"\n             if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n                 COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n                 return 0\n@@ -1195,6 +1235,10 @@ _x.py() {\n                     COMPREPLY=($(compgen -f \"${cur}\"))\n                     return 0\n                     ;;\n+                --set)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n                 *)\n                     COMPREPLY=()\n                     ;;\n@@ -1203,7 +1247,7 @@ _x.py() {\n             return 0\n             ;;\n         x.py__run)\n-            opts=\"-v -i -j -h --args --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            opts=\"-v -i -j -h --args --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --set --help [PATHS]... [ARGS]...\"\n             if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n                 COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n                 return 0\n@@ -1301,6 +1345,10 @@ _x.py() {\n                     COMPREPLY=($(compgen -f \"${cur}\"))\n                     return 0\n                     ;;\n+                --set)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n                 *)\n                     COMPREPLY=()\n                     ;;\n@@ -1309,7 +1357,7 @@ _x.py() {\n             return 0\n             ;;\n         x.py__setup)\n-            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [<PROFILE>|hook|vscode|link] [PATHS]... [ARGS]...\"\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --set --help [<PROFILE>|hook|vscode|link] [PATHS]... [ARGS]...\"\n             if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n                 COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n                 return 0\n@@ -1403,6 +1451,10 @@ _x.py() {\n                     COMPREPLY=($(compgen -f \"${cur}\"))\n                     return 0\n                     ;;\n+                --set)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n                 *)\n                     COMPREPLY=()\n                     ;;\n@@ -1411,7 +1463,7 @@ _x.py() {\n             return 0\n             ;;\n         x.py__suggest)\n-            opts=\"-v -i -j -h --run --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            opts=\"-v -i -j -h --run --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --set --help [PATHS]... [ARGS]...\"\n             if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n                 COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n                 return 0\n@@ -1505,6 +1557,10 @@ _x.py() {\n                     COMPREPLY=($(compgen -f \"${cur}\"))\n                     return 0\n                     ;;\n+                --set)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n                 *)\n                     COMPREPLY=()\n                     ;;\n@@ -1513,7 +1569,7 @@ _x.py() {\n             return 0\n             ;;\n         x.py__test)\n-            opts=\"-v -i -j -h --no-fail-fast --skip --test-args --rustc-args --no-doc --doc --bless --force-rerun --only-modified --compare-mode --pass --run --rustfix-coverage --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            opts=\"-v -i -j -h --no-fail-fast --skip --test-args --rustc-args --no-doc --doc --bless --force-rerun --only-modified --compare-mode --pass --run --rustfix-coverage --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --set --help [PATHS]... [ARGS]...\"\n             if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n                 COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n                 return 0\n@@ -1631,6 +1687,10 @@ _x.py() {\n                     COMPREPLY=($(compgen -f \"${cur}\"))\n                     return 0\n                     ;;\n+                --set)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n                 *)\n                     COMPREPLY=()\n                     ;;"}]}