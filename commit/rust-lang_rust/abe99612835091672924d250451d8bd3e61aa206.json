{"sha": "abe99612835091672924d250451d8bd3e61aa206", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZTk5NjEyODM1MDkxNjcyOTI0ZDI1MDQ1MWQ4YmQzZTYxYWEyMDY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-05-22T17:00:20Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-05-26T22:39:57Z"}, "message": "* Fix compile_fail tag (in some cases, it compiled whereas it wasn't expected to and was still considered 'ok')\n* Fix error explanations tests/tags", "tree": {"sha": "91d530b87b026c2338a9f3c2a3bca2ac70eee381", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91d530b87b026c2338a9f3c2a3bca2ac70eee381"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abe99612835091672924d250451d8bd3e61aa206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abe99612835091672924d250451d8bd3e61aa206", "html_url": "https://github.com/rust-lang/rust/commit/abe99612835091672924d250451d8bd3e61aa206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abe99612835091672924d250451d8bd3e61aa206/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8393d99c356e51128e0125aa23a7824d6ff513b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8393d99c356e51128e0125aa23a7824d6ff513b2", "html_url": "https://github.com/rust-lang/rust/commit/8393d99c356e51128e0125aa23a7824d6ff513b2"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "34080a24d9d395f95167c418a03806d73972e99c", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=abe99612835091672924d250451d8bd3e61aa206", "patch": "@@ -20,6 +20,8 @@ remainder of a zero divisor) in a static or constant expression. Erroneous\n code example:\n \n ```compile_fail\n+#[deny(const_err)]\n+\n const X: i32 = 42 / 0;\n // error: attempted to divide by zero in a constant expression\n ```\n@@ -66,7 +68,7 @@ this restriction.\n \n This happens when a trait has a method like the following:\n \n-```compile_fail\n+```\n trait Trait {\n     fn foo(&self) -> Self;\n }"}, {"sha": "0624d72dd59939295a1aaaf3c4710ccf3abc6c16", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=abe99612835091672924d250451d8bd3e61aa206", "patch": "@@ -153,7 +153,7 @@ structure that is currently uninitialized.\n \n For example, this can happen when a drop has taken place:\n \n-```compile_fail\n+```ignore\n struct Foo {\n     a: u32,\n }"}, {"sha": "8b1d7bed7c42d8fba4ee947cb640c090f31c12b5", "filename": "src/librustc_const_eval/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fdiagnostics.rs?ref=abe99612835091672924d250451d8bd3e61aa206", "patch": "@@ -76,6 +76,8 @@ Not-a-Number (NaN) values cannot be compared for equality and hence can never\n match the input to a match expression. So, the following will not compile:\n \n ```compile_fail\n+#![deny(illegal_floating_point_constant_pattern)]\n+\n const NAN: f32 = 0.0 / 0.0;\n \n let number = 0.1f32;\n@@ -160,7 +162,7 @@ let Some(y) = x;\n If you encounter this error you probably need to use a `match` or `if let` to\n deal with the possibility of failure. Example:\n \n-```compile_fail\n+```\n let x = Some(1);\n \n match x {"}, {"sha": "d33bc52c5a7ce7147f7414f25349d5e92ad9d24d", "filename": "src/librustc_privacy/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustc_privacy%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustc_privacy%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Fdiagnostics.rs?ref=abe99612835091672924d250451d8bd3e61aa206", "patch": "@@ -17,6 +17,8 @@ A private trait was used on a public type parameter bound. Erroneous code\n examples:\n \n ```compile_fail\n+#![deny(private_in_public)]\n+\n trait Foo {\n     fn dummy(&self) { }\n }\n@@ -45,6 +47,8 @@ E0446: r##\"\n A private type was used in a public type signature. Erroneous code example:\n \n ```compile_fail\n+#![deny(private_in_public)]\n+\n mod Foo {\n     struct Bar(u32);\n \n@@ -73,7 +77,7 @@ mod Foo {\n E0447: r##\"\n The `pub` keyword was used inside a function. Erroneous code example:\n \n-```compile_fail\n+```ignore\n fn foo() {\n     pub struct Bar; // error: visibility has no effect inside functions\n }"}, {"sha": "b576f77dbd77d4f02e650aa34ab345bdf896a40d", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=abe99612835091672924d250451d8bd3e61aa206", "patch": "@@ -21,7 +21,7 @@ variable declarations and expression statements.\n \n Here is an example that demonstrates the error:\n \n-```compile_fail\n+```ignore\n fn f() {\n     // Variable declaration before import\n     let x = 0;"}, {"sha": "d36878b03322a30fbe24c4c98c66bdaed168a242", "filename": "src/librustc_trans/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustc_trans%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustc_trans%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdiagnostics.rs?ref=abe99612835091672924d250451d8bd3e61aa206", "patch": "@@ -15,7 +15,7 @@ register_long_diagnostics! {\n E0510: r##\"\n `return_address` was used in an invalid context. Erroneous code example:\n \n-```compile_fail\n+```ignore\n #![feature(intrinsics)]\n \n extern \"rust-intrinsic\" {\n@@ -54,7 +54,7 @@ E0511: r##\"\n Invalid monomorphization of an intrinsic function was used. Erroneous code\n example:\n \n-```compile_fail\n+```ignore\n #![feature(platform_intrinsics)]\n \n extern \"platform-intrinsic\" {"}, {"sha": "75dcfb2c4f967a636c53c2abc12c9e78ab585bbb", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=abe99612835091672924d250451d8bd3e61aa206", "patch": "@@ -956,7 +956,7 @@ first instance of `Foo` could be made to initialize another instance!\n \n Here's an example of a struct that has this problem:\n \n-```compile_fail\n+```ignore\n struct Foo { x: Box<Foo> } // error\n ```\n \n@@ -977,7 +977,7 @@ are generic.\n \n This will cause an error:\n \n-```compile_fail\n+```ignore\n #![feature(repr_simd)]\n \n #[repr(simd)]\n@@ -1168,7 +1168,7 @@ for an explicit choice of the discriminant type. In either cases, the\n discriminant values must fall within a valid range for the expected type;\n otherwise this error is raised. For example:\n \n-```compile_fail\n+```ignore\n #[repr(u8)]\n enum Thing {\n     A = 1024,\n@@ -1179,7 +1179,7 @@ enum Thing {\n Here, 1024 lies outside the valid range for `u8`, so the discriminant for `A` is\n invalid. Here is another, more subtle example which depends on target word size:\n \n-```compile_fail\n+```ignore\n enum DependsOnPointerSize {\n     A = 1 << 32\n }\n@@ -2081,7 +2081,7 @@ E0193: r##\"\n `where` clauses must use generic type parameters: it does not make sense to use\n them otherwise. An example causing this error:\n \n-```compile_fail\n+```ignore\n trait Foo {\n     fn bar(&self);\n }\n@@ -3145,7 +3145,7 @@ An attempt was made to access an associated constant through either a generic\n type parameter or `Self`. This is not supported yet. An example causing this\n error is shown below:\n \n-```compile_fail\n+```ignore\n #![feature(associated_consts)]\n \n trait Foo {\n@@ -3332,6 +3332,7 @@ The maximum value of an enum was reached, so it cannot be automatically\n set in the next enum value. Erroneous code example:\n \n ```compile_fail\n+#[deny(overflowing_literals)]\n enum Foo {\n     X = 0x7fffffffffffffff,\n     Y, // error: enum discriminant overflowed on value after"}, {"sha": "53201a9580ec0057d3222bddefafce66d1465076", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe99612835091672924d250451d8bd3e61aa206/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=abe99612835091672924d250451d8bd3e61aa206", "patch": "@@ -271,8 +271,12 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     match res {\n         Ok(r) => {\n             match r {\n-                Err(count) if count > 0 && compile_fail == false => {\n-                    sess.fatal(\"aborting due to previous error(s)\")\n+                Err(count) => {\n+                    if count > 0 && compile_fail == false {\n+                        sess.fatal(\"aborting due to previous error(s)\")\n+                    } else if count == 0 && compile_fail == true {\n+                        panic!(\"test compiled while it wasn't supposed to\")\n+                    }\n                 }\n                 Ok(()) if compile_fail => panic!(\"test compiled while it wasn't supposed to\"),\n                 _ => {}"}]}