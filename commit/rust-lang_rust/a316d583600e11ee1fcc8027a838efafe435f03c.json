{"sha": "a316d583600e11ee1fcc8027a838efafe435f03c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMTZkNTgzNjAwZTExZWUxZmNjODAyN2E4MzhlZmFmZTQzNWYwM2M=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T17:15:13Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T17:21:03Z"}, "message": "Rename shift_bound_vars{_out} to align with Chalk", "tree": {"sha": "d4448b520724757956ba653e5c0a318b3abdb52c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4448b520724757956ba653e5c0a318b3abdb52c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a316d583600e11ee1fcc8027a838efafe435f03c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a316d583600e11ee1fcc8027a838efafe435f03c", "html_url": "https://github.com/rust-lang/rust/commit/a316d583600e11ee1fcc8027a838efafe435f03c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a316d583600e11ee1fcc8027a838efafe435f03c/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbab69cbffed37291b463c0e57fade49581e1de2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbab69cbffed37291b463c0e57fade49581e1de2", "html_url": "https://github.com/rust-lang/rust/commit/fbab69cbffed37291b463c0e57fade49581e1de2"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "daf379ef8791e1d12218658a21b245e5af0474f1", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a316d583600e11ee1fcc8027a838efafe435f03c/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a316d583600e11ee1fcc8027a838efafe435f03c/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=a316d583600e11ee1fcc8027a838efafe435f03c", "patch": "@@ -124,7 +124,7 @@ impl<T> Binders<T> {\n     where\n         T: TypeWalk,\n     {\n-        Binders::empty(&Interner, value.shift_bound_vars(DebruijnIndex::ONE))\n+        Binders::empty(&Interner, value.shifted_in_from(DebruijnIndex::ONE))\n     }\n }\n \n@@ -209,7 +209,8 @@ impl CallableSig {\n             params_and_return: fn_ptr\n                 .substs\n                 .clone()\n-                .shift_bound_vars_out(DebruijnIndex::ONE)\n+                .shifted_out_to(DebruijnIndex::ONE)\n+                .expect(\"unexpected lifetime vars in fn ptr\")\n                 .interned()\n                 .iter()\n                 .map(|arg| arg.assert_ty_ref(&Interner).clone())"}, {"sha": "48c26f471f1f1c3fe9c6dcfdca4a098bc4814824", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a316d583600e11ee1fcc8027a838efafe435f03c/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a316d583600e11ee1fcc8027a838efafe435f03c/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=a316d583600e11ee1fcc8027a838efafe435f03c", "patch": "@@ -483,7 +483,7 @@ impl<'a> TyLoweringContext<'a> {\n                         };\n                         // We need to shift in the bound vars, since\n                         // associated_type_shorthand_candidates does not do that\n-                        let substs = substs.shift_bound_vars(self.in_binders);\n+                        let substs = substs.shifted_in_from(self.in_binders);\n                         // FIXME handle type parameters on the segment\n                         return Some(\n                             TyKind::Alias(AliasTy::Projection(ProjectionTy {\n@@ -831,20 +831,20 @@ pub fn associated_type_shorthand_candidates<R>(\n     };\n \n     match res {\n-        // FIXME: how to correctly handle higher-ranked bounds here?\n         TypeNs::SelfType(impl_id) => search(\n-            db.impl_trait(impl_id)?\n-                .into_value_and_skipped_binders()\n-                .0\n-                .shift_bound_vars_out(DebruijnIndex::ONE),\n+            // we're _in_ the impl -- the binders get added back later. Correct,\n+            // but it would be nice to make this more explicit\n+            db.impl_trait(impl_id)?.into_value_and_skipped_binders().0,\n         ),\n         TypeNs::GenericParam(param_id) => {\n             let predicates = db.generic_predicates_for_param(param_id);\n             let res = predicates.iter().find_map(|pred| match pred.skip_binders().skip_binders() {\n                 // FIXME: how to correctly handle higher-ranked bounds here?\n-                WhereClause::Implemented(tr) => {\n-                    search(tr.clone().shift_bound_vars_out(DebruijnIndex::ONE))\n-                }\n+                WhereClause::Implemented(tr) => search(\n+                    tr.clone()\n+                        .shifted_out_to(DebruijnIndex::ONE)\n+                        .expect(\"FIXME unexpected higher-ranked trait bound\"),\n+                ),\n                 _ => None,\n             });\n             if let res @ Some(_) = res {"}, {"sha": "c3b148cab7c49cee769511d5b23644f2623d59a8", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a316d583600e11ee1fcc8027a838efafe435f03c/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a316d583600e11ee1fcc8027a838efafe435f03c/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=a316d583600e11ee1fcc8027a838efafe435f03c", "patch": "@@ -531,7 +531,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n ) -> Option<chalk_ir::Binders<rust_ir::InlineBound<Interner>>> {\n     // An InlineBound is like a GenericPredicate, except the self type is left out.\n     // We don't have a special type for this, but Chalk does.\n-    let self_ty_shifted_in = self_ty.clone().shift_bound_vars(DebruijnIndex::ONE);\n+    let self_ty_shifted_in = self_ty.clone().shifted_in_from(DebruijnIndex::ONE);\n     let (pred, binders) = pred.as_ref().into_value_and_skipped_binders();\n     match pred {\n         WhereClause::Implemented(trait_ref) => {"}, {"sha": "d11708299d22189af6bffd0bd1a313e5fc196b5b", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a316d583600e11ee1fcc8027a838efafe435f03c/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a316d583600e11ee1fcc8027a838efafe435f03c/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=a316d583600e11ee1fcc8027a838efafe435f03c", "patch": "@@ -66,9 +66,11 @@ fn direct_super_trait_refs(db: &dyn HirDatabase, trait_ref: &TraitRef) -> Vec<Tr\n         .filter_map(|pred| {\n             pred.as_ref().filter_map(|pred| match pred.skip_binders() {\n                 // FIXME: how to correctly handle higher-ranked bounds here?\n-                WhereClause::Implemented(tr) => {\n-                    Some(tr.clone().shift_bound_vars_out(DebruijnIndex::ONE))\n-                }\n+                WhereClause::Implemented(tr) => Some(\n+                    tr.clone()\n+                        .shifted_out_to(DebruijnIndex::ONE)\n+                        .expect(\"FIXME unexpected higher-ranked trait bound\"),\n+                ),\n                 _ => None,\n             })\n         })\n@@ -103,6 +105,8 @@ pub(super) fn all_super_traits(db: &dyn DefDatabase, trait_: TraitId) -> Vec<Tra\n /// we have `Self: Trait<u32, i32>` and `Trait<T, U>: OtherTrait<U>` we'll get\n /// `Self: OtherTrait<i32>`.\n pub(super) fn all_super_trait_refs(db: &dyn HirDatabase, trait_ref: TraitRef) -> Vec<TraitRef> {\n+    // FIXME: replace by Chalk's `super_traits`, maybe make this a query\n+\n     // we need to take care a bit here to avoid infinite loops in case of cycles\n     // (i.e. if we have `trait A: B; trait B: A;`)\n     let mut result = vec![trait_ref];"}, {"sha": "b85e6ab4d269109d25bf72086118567ea0bdbedc", "filename": "crates/hir_ty/src/walk.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a316d583600e11ee1fcc8027a838efafe435f03c/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a316d583600e11ee1fcc8027a838efafe435f03c/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fwalk.rs?ref=a316d583600e11ee1fcc8027a838efafe435f03c", "patch": "@@ -82,7 +82,7 @@ pub trait TypeWalk {\n                         *ty = substs.interned()[bound.index]\n                             .assert_ty_ref(&Interner)\n                             .clone()\n-                            .shift_bound_vars(binders);\n+                            .shifted_in_from(binders);\n                     }\n                 }\n             },\n@@ -92,7 +92,7 @@ pub trait TypeWalk {\n     }\n \n     /// Shifts up debruijn indices of `TyKind::Bound` vars by `n`.\n-    fn shift_bound_vars(self, n: DebruijnIndex) -> Self\n+    fn shifted_in_from(self, n: DebruijnIndex) -> Self\n     where\n         Self: Sized,\n     {\n@@ -108,20 +108,22 @@ pub trait TypeWalk {\n     }\n \n     /// Shifts debruijn indices of `TyKind::Bound` vars out (down) by `n`.\n-    fn shift_bound_vars_out(self, n: DebruijnIndex) -> Self\n+    fn shifted_out_to(self, n: DebruijnIndex) -> Option<Self>\n     where\n         Self: Sized + std::fmt::Debug,\n     {\n-        self.fold_binders(\n-            &mut |ty, binders| match ty.kind(&Interner) {\n-                TyKind::BoundVar(bound) if bound.debruijn >= binders => {\n-                    TyKind::BoundVar(bound.shifted_out_to(n).unwrap_or(bound.clone()))\n-                        .intern(&Interner)\n+        Some(self.fold_binders(\n+            &mut |ty, binders| {\n+                match ty.kind(&Interner) {\n+                    TyKind::BoundVar(bound) if bound.debruijn >= binders => {\n+                        TyKind::BoundVar(bound.shifted_out_to(n).unwrap_or(bound.clone()))\n+                            .intern(&Interner)\n+                    }\n+                    _ => ty,\n                 }\n-                _ => ty,\n             },\n             DebruijnIndex::INNERMOST,\n-        )\n+        ))\n     }\n }\n "}]}