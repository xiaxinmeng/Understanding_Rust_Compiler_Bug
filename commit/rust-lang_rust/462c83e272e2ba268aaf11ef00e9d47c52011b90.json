{"sha": "462c83e272e2ba268aaf11ef00e9d47c52011b90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MmM4M2UyNzJlMmJhMjY4YWFmMTFlZjAwZTlkNDdjNTIwMTFiOTA=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-01-30T17:25:25Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-14T22:04:39Z"}, "message": "Address basic nits from initial review", "tree": {"sha": "9aab5e97fb01a5b5d154428718a2686445eb8b3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aab5e97fb01a5b5d154428718a2686445eb8b3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/462c83e272e2ba268aaf11ef00e9d47c52011b90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/462c83e272e2ba268aaf11ef00e9d47c52011b90", "html_url": "https://github.com/rust-lang/rust/commit/462c83e272e2ba268aaf11ef00e9d47c52011b90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/462c83e272e2ba268aaf11ef00e9d47c52011b90/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9734406a5f95393e8e888cf67b48861ea8a39de7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9734406a5f95393e8e888cf67b48861ea8a39de7", "html_url": "https://github.com/rust-lang/rust/commit/9734406a5f95393e8e888cf67b48861ea8a39de7"}], "stats": {"total": 116, "additions": 97, "deletions": 19}, "files": [{"sha": "2c501c1a48103b6bfab3e7a9d264cb2180890ff6", "filename": "src/librustc/middle/traits/specialize.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/462c83e272e2ba268aaf11ef00e9d47c52011b90/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462c83e272e2ba268aaf11ef00e9d47c52011b90/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize.rs?ref=462c83e272e2ba268aaf11ef00e9d47c52011b90", "patch": "@@ -52,10 +52,9 @@ pub struct SpecializationGraph {\n }\n \n /// Information pertinent to an overlapping impl error.\n-pub struct Overlap<'tcx> {\n+pub struct Overlap<'a, 'tcx: 'a> {\n+    pub in_context: InferCtxt<'a, 'tcx>,\n     pub with_impl: DefId,\n-\n-    /// NB: this TraitRef can contain inference variables!\n     pub on_trait_ref: ty::TraitRef<'tcx>,\n }\n \n@@ -70,13 +69,13 @@ impl SpecializationGraph {\n     /// Insert a local impl into the specialization graph. If an existing impl\n     /// conflicts with it (has overlap, but neither specializes the other),\n     /// information about the area of overlap is returned in the `Err`.\n-    pub fn insert<'tcx>(&mut self,\n-                        tcx: &ty::ctxt<'tcx>,\n-                        impl_def_id: DefId,\n-                        trait_ref: ty::TraitRef)\n-                        -> Result<(), Overlap<'tcx>> {\n+    pub fn insert<'a, 'tcx>(&mut self,\n+                            tcx: &'a ty::ctxt<'tcx>,\n+                            impl_def_id: DefId)\n+                            -> Result<(), Overlap<'a, 'tcx>> {\n         assert!(impl_def_id.is_local());\n \n+        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let mut parent = trait_ref.def_id;\n         let mut my_children = vec![];\n \n@@ -98,6 +97,7 @@ impl SpecializationGraph {\n                         return Err(Overlap {\n                             with_impl: possible_sibling,\n                             on_trait_ref: trait_ref,\n+                            in_context: infcx,\n                         });\n                     }\n \n@@ -118,6 +118,7 @@ impl SpecializationGraph {\n                         return Err(Overlap {\n                             with_impl: possible_sibling,\n                             on_trait_ref: trait_ref,\n+                            in_context: infcx,\n                         });\n                     }\n "}, {"sha": "85cea4d8096d6fd0a4c97ea44e15378e0c0374ad", "filename": "src/librustc/middle/ty/trait_def.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/462c83e272e2ba268aaf11ef00e9d47c52011b90/src%2Flibrustc%2Fmiddle%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462c83e272e2ba268aaf11ef00e9d47c52011b90/src%2Flibrustc%2Fmiddle%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ftrait_def.rs?ref=462c83e272e2ba268aaf11ef00e9d47c52011b90", "patch": "@@ -125,7 +125,8 @@ impl<'tcx> TraitDef<'tcx> {\n     fn record_impl(&self,\n                    tcx: &TyCtxt<'tcx>,\n                    impl_def_id: DefId,\n-                   impl_trait_ref: TraitRef<'tcx>) -> bool {\n+                   impl_trait_ref: TraitRef<'tcx>)\n+                   -> bool {\n         debug!(\"TraitDef::record_impl for {:?}, from {:?}\",\n                self, impl_trait_ref);\n \n@@ -161,7 +162,9 @@ impl<'tcx> TraitDef<'tcx> {\n                              tcx: &TyCtxt<'tcx>,\n                              impl_def_id: DefId,\n                              impl_trait_ref: TraitRef<'tcx>) {\n-        self.record_impl(tcx, impl_def_id, impl_trait_ref);\n+        assert!(impl_def_id.is_local());\n+        let was_new = self.record_impl(tcx, impl_def_id, impl_trait_ref);\n+        assert!(was_new);\n     }\n \n     /// Records a trait-to-implementation mapping for a non-local impl.\n@@ -174,6 +177,8 @@ impl<'tcx> TraitDef<'tcx> {\n                               impl_def_id: DefId,\n                               impl_trait_ref: TraitRef<'tcx>,\n                               parent_impl: DefId) {\n+        assert!(!impl_def_id.is_local());\n+\n         // if the impl has not previously been recorded\n         if self.record_impl(tcx, impl_def_id, impl_trait_ref) {\n             // if the impl is non-local, it's placed directly into the\n@@ -186,15 +191,14 @@ impl<'tcx> TraitDef<'tcx> {\n     /// Adds a local impl into the specialization graph, returning an error with\n     /// overlap information if the impl overlaps but does not specialize an\n     /// existing impl.\n-    pub fn add_impl_for_specialization(&self,\n-                                       tcx: &ctxt<'tcx>,\n-                                       impl_def_id: DefId,\n-                                       impl_trait_ref: TraitRef<'tcx>)\n-                                       -> Result<(), traits::Overlap<'tcx>> {\n+    pub fn add_impl_for_specialization<'a>(&self,\n+                                           tcx: &'a ctxt<'tcx>,\n+                                           impl_def_id: DefId)\n+                                           -> Result<(), traits::Overlap<'a, 'tcx>> {\n         assert!(impl_def_id.is_local());\n \n         self.specialization_graph.borrow_mut()\n-            .insert(tcx, impl_def_id, impl_trait_ref)\n+            .insert(tcx, impl_def_id)\n     }\n \n     /// Returns the immediately less specialized impl, if any."}, {"sha": "1ebc131224dc7a05b5295de73135569de1058edd", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/462c83e272e2ba268aaf11ef00e9d47c52011b90/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462c83e272e2ba268aaf11ef00e9d47c52011b90/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=462c83e272e2ba268aaf11ef00e9d47c52011b90", "patch": "@@ -133,9 +133,7 @@ impl<'cx, 'tcx,'v> intravisit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n                 let def = self.tcx.lookup_trait_def(trait_def_id);\n \n                 // attempt to insert into the specialization graph\n-                let insert_result = def.add_impl_for_specialization(self.tcx,\n-                                                                    impl_def_id,\n-                                                                    trait_ref);\n+                let insert_result = def.add_impl_for_specialization(self.tcx, impl_def_id);\n \n                 // insertion failed due to overlap\n                 if let Err(overlap) = insert_result {"}, {"sha": "a5f0fbbd0940bba2cdd86ba88f7ac8fa21fcf382", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/462c83e272e2ba268aaf11ef00e9d47c52011b90/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462c83e272e2ba268aaf11ef00e9d47c52011b90/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=462c83e272e2ba268aaf11ef00e9d47c52011b90", "patch": "@@ -250,6 +250,7 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n     (\"question_mark\", \"1.9.0\", Some(31436), Active)\n \n     // impl specialization (RFC 1210)\n+    // TODO: update with issue number (once it exists), before landing\n     (\"specialization\", \"1.7.0\", None, Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)"}, {"sha": "9aec614012e4d3dd5dfa50f2e775f11c61d53217", "filename": "src/test/compile-fail/specialization-negative-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/462c83e272e2ba268aaf11ef00e9d47c52011b90/src%2Ftest%2Fcompile-fail%2Fspecialization-negative-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462c83e272e2ba268aaf11ef00e9d47c52011b90/src%2Ftest%2Fcompile-fail%2Fspecialization-negative-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization-negative-impl.rs?ref=462c83e272e2ba268aaf11ef00e9d47c52011b90", "patch": "@@ -13,6 +13,8 @@\n \n struct TestType<T>(T);\n \n+// TODO: nail down the rules here with @nikomatsakis\n+\n unsafe impl<T> Send for TestType<T> {}\n impl !Send for TestType<u8> {}\n "}, {"sha": "06a01f0ca0575ca1953c8199bcae3858dae6b65b", "filename": "src/test/compile-fail/specialization-no-default.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/462c83e272e2ba268aaf11ef00e9d47c52011b90/src%2Ftest%2Fcompile-fail%2Fspecialization-no-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462c83e272e2ba268aaf11ef00e9d47c52011b90/src%2Ftest%2Fcompile-fail%2Fspecialization-no-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization-no-default.rs?ref=462c83e272e2ba268aaf11ef00e9d47c52011b90", "patch": "@@ -10,6 +10,10 @@\n \n #![feature(specialization)]\n \n+////////////////////////////////////////////////////////////////////////////////\n+// Test 1: one layer of specialization, multiple methods, missing `default`\n+////////////////////////////////////////////////////////////////////////////////\n+\n trait Foo {\n     fn foo(&self);\n     fn bar(&self);\n@@ -28,6 +32,10 @@ impl Foo for u32 {\n     fn bar(&self) {} //~ ERROR E0520\n }\n \n+////////////////////////////////////////////////////////////////////////////////\n+// Test 2: one layer of specialization, missing `default` on associated type\n+////////////////////////////////////////////////////////////////////////////////\n+\n trait Bar {\n     type T;\n }\n@@ -40,4 +48,45 @@ impl Bar for u8 {\n     type T = (); //~ ERROR E0520\n }\n \n+////////////////////////////////////////////////////////////////////////////////\n+// Test 3a: multiple layers of specialization, missing interior `default`\n+////////////////////////////////////////////////////////////////////////////////\n+\n+trait Baz {\n+    fn baz(&self);\n+}\n+\n+impl<T> Baz for T {\n+    default fn baz(&self) {}\n+}\n+\n+impl<T: Clone> Baz for T {\n+    fn baz(&self) {}\n+}\n+\n+impl Baz for i32 {\n+    fn baz(&self) {}\n+}\n+\n+////////////////////////////////////////////////////////////////////////////////\n+// Test 3b: multiple layers of specialization, missing interior `default`,\n+// redundant `default` in bottom layer.\n+////////////////////////////////////////////////////////////////////////////////\n+\n+trait Redundant {\n+    fn redundant(&self);\n+}\n+\n+impl<T> Redundant for T {\n+    default fn redundant(&self) {}\n+}\n+\n+impl<T: Clone> Redundant for T {\n+    fn redundant(&self) {}\n+}\n+\n+impl Redundant for i32 {\n+    default fn redundant(&self) {}\n+}\n+\n fn main() {}"}, {"sha": "d662c5bfa28d6a68af8faa20e7499a423bb342d9", "filename": "src/test/run-pass/specialization-default-methods.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/462c83e272e2ba268aaf11ef00e9d47c52011b90/src%2Ftest%2Frun-pass%2Fspecialization-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462c83e272e2ba268aaf11ef00e9d47c52011b90/src%2Ftest%2Frun-pass%2Fspecialization-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization-default-methods.rs?ref=462c83e272e2ba268aaf11ef00e9d47c52011b90", "patch": "@@ -16,6 +16,12 @@ trait Foo {\n     fn foo(&self) -> bool;\n }\n \n+// Specialization tree for Foo:\n+//\n+//        T\n+//       / \\\n+//    i32   i64\n+\n impl<T> Foo for T {\n     default fn foo(&self) -> bool { false }\n }\n@@ -38,6 +44,23 @@ trait Bar {\n     fn bar(&self) -> i32 { 0 }\n }\n \n+// Specialization tree for Bar.\n+// Uses of $ designate that method is provided\n+//\n+//           $Bar   (the trait)\n+//             |\n+//             T\n+//            /|\\\n+//           / | \\\n+//          /  |  \\\n+//         /   |   \\\n+//        /    |    \\\n+//       /     |     \\\n+//     $i32   &str  $Vec<T>\n+//                    /\\\n+//                   /  \\\n+//            Vec<i32>  $Vec<i64>\n+\n impl<T> Bar for T {} // use the provided method\n \n impl Bar for i32 {"}]}