{"sha": "90d6d3327d7d40f1f0c8e524c5e40f658070c90f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZDZkMzMyN2Q3ZDQwZjFmMGM4ZTUyNGM1ZTQwZjY1ODA3MGM5MGY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-22T11:39:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-22T11:39:23Z"}, "message": "Rollup merge of #87307 - michaelwoerister:pgo-unwind-msvc, r=nagisa\n\nAllow combining -Cprofile-generate and -Cpanic=unwind when targeting MSVC.\n\nThe LLVM limitation that previously prevented this has been fixed in LLVM 9 which is older than the oldest LLVM version we currently support.\n\nFixes https://github.com/rust-lang/rust/issues/61002.\n\nr? ``@nagisa`` (or anyone else from ``@rust-lang/wg-llvm)``", "tree": {"sha": "1fcb663084e02469539b54d979b88994fb7946c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fcb663084e02469539b54d979b88994fb7946c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90d6d3327d7d40f1f0c8e524c5e40f658070c90f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+VjrCRBK7hj4Ov3rIwAADHQIAB3tBJrBnTddcQVNshWAuIKY\ntpiSwXZcTJWTm4NcTjFeRTiKVzX+GjedEBUL8oQ9HiP4SeL2uNT84jd9g6iqziC/\nP+WeX2OShXaXsGEspUpiXksTkKdfxu2KGbryPrGIRS6Rb5GHQRBNJN5p+aXHwWmE\nm1gipugi1JMMkY/4zRVohnBCrlTq3YPymBRdl7xqofLVQZEzneBpBXBTPQDsPAT3\n82f6XHG+aKxp3VHougQrcXomXb/yRi86tVzCCHpwlW9E1PfP1RK8fZxlF/+ubABv\n+DsA2w86BzKMs7dby2pONRRTJP+3YTyQo/ZbjBnJDd5L4SB8sHCKtXP2xGr9YJw=\n=lo9H\n-----END PGP SIGNATURE-----\n", "payload": "tree 1fcb663084e02469539b54d979b88994fb7946c7\nparent 8dba89823ac4994837b632fe63ce582a60addcd6\nparent d56c02d7e9d2ad9b563ad3695c65b976f1099ec7\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1626953963 +0200\ncommitter GitHub <noreply@github.com> 1626953963 +0200\n\nRollup merge of #87307 - michaelwoerister:pgo-unwind-msvc, r=nagisa\n\nAllow combining -Cprofile-generate and -Cpanic=unwind when targeting MSVC.\n\nThe LLVM limitation that previously prevented this has been fixed in LLVM 9 which is older than the oldest LLVM version we currently support.\n\nFixes https://github.com/rust-lang/rust/issues/61002.\n\nr? ``@nagisa`` (or anyone else from ``@rust-lang/wg-llvm)``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90d6d3327d7d40f1f0c8e524c5e40f658070c90f", "html_url": "https://github.com/rust-lang/rust/commit/90d6d3327d7d40f1f0c8e524c5e40f658070c90f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dba89823ac4994837b632fe63ce582a60addcd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dba89823ac4994837b632fe63ce582a60addcd6", "html_url": "https://github.com/rust-lang/rust/commit/8dba89823ac4994837b632fe63ce582a60addcd6"}, {"sha": "d56c02d7e9d2ad9b563ad3695c65b976f1099ec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d56c02d7e9d2ad9b563ad3695c65b976f1099ec7", "html_url": "https://github.com/rust-lang/rust/commit/d56c02d7e9d2ad9b563ad3695c65b976f1099ec7"}], "stats": {"total": 83, "additions": 2, "deletions": 81}, "files": [{"sha": "86d495c3353b3bdfb9adf5562a06dbf0fd9f27bb", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=90d6d3327d7d40f1f0c8e524c5e40f658070c90f", "patch": "@@ -1,7 +1,7 @@\n use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n-use crate::config::{self, CrateType, OutputType, PrintRequest, SwitchWithOptPath};\n+use crate::config::{self, CrateType, OutputType, SwitchWithOptPath};\n use crate::filesearch;\n use crate::lint::{self, LintId};\n use crate::parse::ParseSess;\n@@ -1440,25 +1440,6 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         }\n     }\n \n-    // PGO does not work reliably with panic=unwind on Windows. Let's make it\n-    // an error to combine the two for now. It always runs into an assertions\n-    // if LLVM is built with assertions, but without assertions it sometimes\n-    // does not crash and will probably generate a corrupted binary.\n-    // We should only display this error if we're actually going to run PGO.\n-    // If we're just supposed to print out some data, don't show the error (#61002).\n-    if sess.opts.cg.profile_generate.enabled()\n-        && sess.target.is_like_msvc\n-        && sess.panic_strategy() == PanicStrategy::Unwind\n-        && sess.opts.prints.iter().all(|&p| p == PrintRequest::NativeStaticLibs)\n-    {\n-        sess.err(\n-            \"Profile-guided optimization does not yet work in conjunction \\\n-                  with `-Cpanic=unwind` on Windows when targeting MSVC. \\\n-                  See issue #61002 <https://github.com/rust-lang/rust/issues/61002> \\\n-                  for more information.\",\n-        );\n-    }\n-\n     // Sanitizers can only be used on platforms that we know have working sanitizer codegen.\n     let supported_sanitizers = sess.target.options.supported_sanitizers;\n     let unsupported_sanitizers = sess.opts.debugging_opts.sanitizer - supported_sanitizers;"}, {"sha": "05c2d2fc0d8c1cd354521ff7b9d2169dc7123ce9", "filename": "src/test/codegen/pgo-instrumentation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs?ref=90d6d3327d7d40f1f0c8e524c5e40f658070c90f", "patch": "@@ -1,8 +1,7 @@\n // Test that `-Cprofile-generate` creates expected instrumentation artifacts in LLVM IR.\n-// Compiling with `-Cpanic=abort` because PGO+unwinding isn't supported on all platforms.\n \n // needs-profiler-support\n-// compile-flags: -Cprofile-generate -Ccodegen-units=1 -Cpanic=abort\n+// compile-flags: -Cprofile-generate -Ccodegen-units=1\n \n // CHECK: @__llvm_profile_raw_version =\n // CHECK-DAG: @__profc_{{.*}}pgo_instrumentation{{.*}}some_function{{.*}} = {{.*}}global"}, {"sha": "9773e3f1fdfc4b8c8949e94f2c936674171da94b", "filename": "src/test/run-make-fulldeps/pgo-branch-weights/Makefile", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-branch-weights%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-branch-weights%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-branch-weights%2FMakefile?ref=90d6d3327d7d40f1f0c8e524c5e40f658070c90f", "patch": "@@ -6,19 +6,6 @@\n \n -include ../tools.mk\n \n-# This test makes sure that instrumented binaries record the right counts for\n-# functions being called and branches being taken. We run an instrumented binary\n-# with an argument that causes a know path through the program and then check\n-# that the expected counts get added to the use-phase LLVM IR.\n-\n-# LLVM doesn't support instrumenting binaries that use SEH:\n-# https://github.com/rust-lang/rust/issues/61002\n-#\n-# Things work fine with -Cpanic=abort though.\n-ifdef IS_MSVC\n-COMMON_FLAGS=-Cpanic=abort\n-endif\n-\n # For some very small programs GNU ld seems to not properly handle\n # instrumentation sections correctly. Neither Gold nor LLD have that problem.\n ifeq ($(UNAME),Linux)"}, {"sha": "a7d5c561632574b485db2251f2cec14c8152da85", "filename": "src/test/run-make-fulldeps/pgo-gen-lto/Makefile", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile?ref=90d6d3327d7d40f1f0c8e524c5e40f658070c90f", "patch": "@@ -8,14 +8,6 @@\n \n COMPILE_FLAGS=-Copt-level=3 -Clto=fat -Cprofile-generate=\"$(TMPDIR)\"\n \n-# LLVM doesn't yet support instrumenting binaries that use unwinding on MSVC:\n-# https://github.com/rust-lang/rust/issues/61002\n-#\n-# Things work fine with -Cpanic=abort though.\n-ifdef IS_MSVC\n-COMPILE_FLAGS+= -Cpanic=abort\n-endif\n-\n all:\n \t$(RUSTC) $(COMPILE_FLAGS) test.rs\n \t$(call RUN,test) || exit 1"}, {"sha": "425bfc28a9766d058b44aa1b18750867e8138093", "filename": "src/test/run-make-fulldeps/pgo-gen-no-imp-symbols/Makefile", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile?ref=90d6d3327d7d40f1f0c8e524c5e40f658070c90f", "patch": "@@ -4,14 +4,6 @@\n \n COMPILE_FLAGS=-O -Ccodegen-units=1 -Cprofile-generate=\"$(TMPDIR)\"\n \n-# LLVM doesn't yet support instrumenting binaries that use unwinding on MSVC:\n-# https://github.com/rust-lang/rust/issues/61002\n-#\n-# Things work fine with -Cpanic=abort though.\n-ifdef IS_MSVC\n-COMPILE_FLAGS+= -Cpanic=abort\n-endif\n-\n all:\n \t$(RUSTC) $(COMPILE_FLAGS) --emit=llvm-ir test.rs\n \t# We expect symbols starting with \"__llvm_profile_\"."}, {"sha": "6533355be34182e3bc1dd7033de138f7bdf27664", "filename": "src/test/run-make-fulldeps/pgo-gen/Makefile", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile?ref=90d6d3327d7d40f1f0c8e524c5e40f658070c90f", "patch": "@@ -8,14 +8,6 @@\n \n COMPILE_FLAGS=-g -Cprofile-generate=\"$(TMPDIR)\"\n \n-# LLVM doesn't yet support instrumenting binaries that use unwinding on MSVC:\n-# https://github.com/rust-lang/rust/issues/61002\n-#\n-# Things work fine with -Cpanic=abort though.\n-ifdef IS_MSVC\n-COMPILE_FLAGS+= -Cpanic=abort\n-endif\n-\n all:\n \t$(RUSTC) $(COMPILE_FLAGS) test.rs\n \t$(call RUN,test) || exit 1"}, {"sha": "c0195dcbb31be047bb1d16677c6c8b76c231f65e", "filename": "src/test/run-make-fulldeps/pgo-indirect-call-promotion/Makefile", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-indirect-call-promotion%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-indirect-call-promotion%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-indirect-call-promotion%2FMakefile?ref=90d6d3327d7d40f1f0c8e524c5e40f658070c90f", "patch": "@@ -6,20 +6,6 @@\n \n -include ../tools.mk\n \n-# This test makes sure that indirect call promotion is performed. The test\n-# programs calls the same function a thousand times through a function pointer.\n-# Only PGO data provides the information that it actually always is the same\n-# function. We verify that the indirect call promotion pass inserts a check\n-# whether it can make a direct call instead of the indirect call.\n-\n-# LLVM doesn't support instrumenting binaries that use SEH:\n-# https://github.com/rust-lang/rust/issues/61002\n-#\n-# Things work fine with -Cpanic=abort though.\n-ifdef IS_MSVC\n-COMMON_FLAGS=-Cpanic=abort\n-endif\n-\n all:\n \t# We don't compile `opaque` with either optimizations or instrumentation.\n \t# We don't compile `opaque` with either optimizations or instrumentation."}, {"sha": "d7863c9c587a50481b18b08b765b8fee1c00ebe0", "filename": "src/test/run-make-fulldeps/pgo-use/Makefile", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/90d6d3327d7d40f1f0c8e524c5e40f658070c90f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile?ref=90d6d3327d7d40f1f0c8e524c5e40f658070c90f", "patch": "@@ -18,14 +18,6 @@\n \n COMMON_FLAGS=-Copt-level=2 -Ccodegen-units=1 -Cllvm-args=-disable-preinline\n \n-# LLVM doesn't support instrumenting binaries that use SEH:\n-# https://github.com/rust-lang/rust/issues/61002\n-#\n-# Things work fine with -Cpanic=abort though.\n-ifdef IS_MSVC\n-COMMON_FLAGS+= -Cpanic=abort\n-endif\n-\n ifeq ($(UNAME),Darwin)\n # macOS does not have the `tac` command, but `tail -r` does the same thing\n TAC := tail -r"}]}