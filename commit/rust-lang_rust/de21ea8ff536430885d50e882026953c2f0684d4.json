{"sha": "de21ea8ff536430885d50e882026953c2f0684d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMjFlYThmZjUzNjQzMDg4NWQ1MGU4ODIwMjY5NTNjMmYwNjg0ZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-17T17:00:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-17T17:00:10Z"}, "message": "Auto merge of #53449 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #52858 (Implement Iterator::size_hint for Elaborator.)\n - #53321 (Fix usage of `wasm_target_feature`)\n - #53326 ([nll] add regression test for issue #27868)\n - #53347 (rustc_resolve: don't allow paths starting with `::crate`.)\n - #53349 ([nll] add tests for #48697 and #30104)\n - #53357 (Pretty print btreemap for GDB)\n - #53358 (`{to,from}_{ne,le,be}_bytes` for unsigned integer types)\n - #53406 (Do not suggest conversion method that is already there)\n - #53407 (make more ported compile fail tests more robust w.r.t. NLL)\n - #53413 (Warn that `#![feature(rust_2018_preview)]` is implied when the edition is set to Rust 2018.)\n - #53434 (wasm: Remove --strip-debug argument to LLD)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "57cbbd8ee6519d568aaff8534b392cc7ae5b3a31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57cbbd8ee6519d568aaff8534b392cc7ae5b3a31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de21ea8ff536430885d50e882026953c2f0684d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de21ea8ff536430885d50e882026953c2f0684d4", "html_url": "https://github.com/rust-lang/rust/commit/de21ea8ff536430885d50e882026953c2f0684d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de21ea8ff536430885d50e882026953c2f0684d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87", "html_url": "https://github.com/rust-lang/rust/commit/8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87"}, {"sha": "f2146667affe8dc662cc1a44d293efb4a7d8cc0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2146667affe8dc662cc1a44d293efb4a7d8cc0f", "html_url": "https://github.com/rust-lang/rust/commit/f2146667affe8dc662cc1a44d293efb4a7d8cc0f"}], "stats": {"total": 933, "additions": 750, "deletions": 183}, "files": [{"sha": "4e16e61aa0d398cb0f21cfd60a67a64af037403c", "filename": "src/Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -308,7 +308,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.6.0\"\n+version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"chalk-macros 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1897,7 +1897,7 @@ dependencies = [\n  \"backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chalk-engine 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chalk-engine 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n@@ -2408,7 +2408,7 @@ name = \"rustc_traits\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chalk-engine 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chalk-engine 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n  \"log 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -3135,7 +3135,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum cargo_metadata 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d6809b327f87369e6f3651efd2c5a96c49847a3ed2559477ecba79014751ee1\"\n \"checksum cc 1.0.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2119ea4867bd2b8ed3aecab467709720b2d55b1bcfe09f772fd68066eaf15275\"\n \"checksum cfg-if 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"efe5c877e17a9c717a0bf3613b2709f723202c4e4675cc8f12926ded29bcb17e\"\n-\"checksum chalk-engine 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a146c19172c7eea48ea55a7123ac95da786639bc665097f1e14034ee5f1d8699\"\n+\"checksum chalk-engine 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25ce2f28f55ed544a2a3756b7acf41dd7d6f27acffb2086439950925506af7d0\"\n \"checksum chalk-macros 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"295635afd6853aa9f20baeb7f0204862440c0fe994c5a253d5f479dac41d047e\"\n \"checksum chrono 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6962c635d530328acc53ac6a955e83093fedc91c5809dfac1fa60fa470830a37\"\n \"checksum clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b957d88f4b6a63b9d70d5f454ac8011819c6efa7727858f458ab71c756ce2d3e\""}, {"sha": "9901dc1ebe307028eea40ffd140608c0a9b49cc1", "filename": "src/doc/unstable-book/src/language-features/crate-in-paths.md", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-in-paths.md", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-in-paths.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-in-paths.md?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -9,10 +9,6 @@ The tracking issue for this feature is: [#44660]\n The `crate_in_paths` feature allows to explicitly refer to the crate root in absolute paths\n using keyword `crate`.\n \n-`crate` can be used *only* in absolute paths, i.e. either in `::crate::a::b::c` form or in `use`\n-items where the starting `::` is added implicitly.  \n-Paths like `crate::a::b::c` are not accepted currently.\n-\n This feature is required in `feature(extern_absolute_paths)` mode to refer to any absolute path\n in the local crate (absolute paths refer to extern crates by default in that mode), but can be\n used without `feature(extern_absolute_paths)` as well.\n@@ -39,15 +35,14 @@ mod n\n     use crate as root;\n     pub fn check() {\n         assert_eq!(f(), 1);\n-        // `::` is required in non-import paths\n-        assert_eq!(::crate::m::g(), 2);\n+        assert_eq!(crate::m::g(), 2);\n         assert_eq!(root::m::h(), 3);\n     }\n }\n \n fn main() {\n     assert_eq!(f(), 1);\n-    assert_eq!(::crate::m::g(), 2);\n+    assert_eq!(crate::m::g(), 2);\n     assert_eq!(root::m::h(), 3);\n     n::check();\n }"}, {"sha": "6a22e7eba646b09185260f62d7f43e7114996d2a", "filename": "src/doc/unstable-book/src/language-features/extern-absolute-paths.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-absolute-paths.md", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-absolute-paths.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-absolute-paths.md?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -12,7 +12,7 @@ The `extern_absolute_paths` feature enables mode allowing to refer to names from\n `::my_crate::a::b` will resolve to path `a::b` in crate `my_crate`.\n \n `feature(crate_in_paths)` can be used in `feature(extern_absolute_paths)` mode for referring\n-to absolute paths in the local crate (`::crate::a::b`).\n+to absolute paths in the local crate (`crate::a::b`).\n \n `feature(extern_in_paths)` provides the same effect by using keyword `extern` to refer to\n paths from other crates (`extern::my_crate::a::b`)."}, {"sha": "1797f6708ac5b4745fcc2300fc3653b68c1320bc", "filename": "src/etc/debugger_pretty_printers_common.py", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Fetc%2Fdebugger_pretty_printers_common.py", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Fetc%2Fdebugger_pretty_printers_common.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdebugger_pretty_printers_common.py?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -49,6 +49,7 @@\n TYPE_KIND_OS_STRING         = 18\n TYPE_KIND_STD_VECDEQUE      = 19\n TYPE_KIND_STD_BTREESET      = 20\n+TYPE_KIND_STD_BTREEMAP      = 21\n \n ENCODED_ENUM_PREFIX = \"RUST$ENCODED$ENUM$\"\n ENUM_DISR_FIELD_NAME = \"RUST$ENUM$DISR\"\n@@ -75,6 +76,9 @@\n # std::collections::BTreeSet<> related constants\n STD_BTREESET_FIELD_NAMES = [\"map\"]\n \n+# std::collections::BTreeMap<> related constants\n+STD_BTREEMAP_FIELD_NAMES = [\"root\", \"length\"]\n+\n # std::String related constants\n STD_STRING_FIELD_NAMES = [\"vec\"]\n \n@@ -184,6 +188,11 @@ def __classify_struct(self):\n                 self.__conforms_to_field_layout(STD_BTREESET_FIELD_NAMES)):\n             return TYPE_KIND_STD_BTREESET\n \n+        # STD COLLECTION BTREEMAP\n+        if (unqualified_type_name.startswith(\"BTreeMap<\") and\n+                self.__conforms_to_field_layout(STD_BTREEMAP_FIELD_NAMES)):\n+            return TYPE_KIND_STD_BTREEMAP\n+\n         # STD STRING\n         if (unqualified_type_name.startswith(\"String\") and\n             self.__conforms_to_field_layout(STD_STRING_FIELD_NAMES)):\n@@ -380,6 +389,18 @@ def extract_length_and_ptr_from_std_btreeset(vec_val):\n     return (length, data_ptr)\n \n \n+def extract_length_and_ptr_from_std_btreemap(vec_val):\n+    assert vec_val.type.get_type_kind() == TYPE_KIND_STD_BTREEMAP\n+    root = vec_val.get_child_at_index(0)\n+    length = vec_val.get_child_at_index(1).as_integer()\n+    node = root.get_child_at_index(0)\n+    ptr = node.get_child_at_index(0)\n+    unique_ptr_val = ptr.get_child_at_index(0)\n+    data_ptr = unique_ptr_val.get_child_at_index(0)\n+    assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n+    return (length, data_ptr)\n+\n+\n def extract_length_and_ptr_from_slice(slice_val):\n     assert (slice_val.type.get_type_kind() == TYPE_KIND_SLICE or\n             slice_val.type.get_type_kind() == TYPE_KIND_STR_SLICE)"}, {"sha": "216915dba5fe7c03116d1cf2906afd7bbafe392f", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -130,6 +130,9 @@ def rust_pretty_printer_lookup_function(gdb_val):\n     if type_kind == rustpp.TYPE_KIND_STD_BTREESET:\n         return RustStdBTreeSetPrinter(val)\n \n+    if type_kind == rustpp.TYPE_KIND_STD_BTREEMAP:\n+        return RustStdBTreeMapPrinter(val)\n+\n     if type_kind == rustpp.TYPE_KIND_STD_STRING:\n         return RustStdStringPrinter(val)\n \n@@ -325,6 +328,32 @@ def children(self):\n             yield (str(index), gdb_ptr[index])\n \n \n+class RustStdBTreeMapPrinter(object):\n+    def __init__(self, val):\n+        self.__val = val\n+\n+    @staticmethod\n+    def display_hint():\n+        return \"map\"\n+\n+    def to_string(self):\n+        (length, data_ptr) = \\\n+            rustpp.extract_length_and_ptr_from_std_btreemap(self.__val)\n+        return (self.__val.type.get_unqualified_type_name() +\n+                (\"(len: %i)\" % length))\n+\n+    def children(self):\n+        (length, data_ptr) = \\\n+            rustpp.extract_length_and_ptr_from_std_btreemap(self.__val)\n+        keys = GdbValue(data_ptr.get_wrapped_value().dereference()).get_child_at_index(3)\n+        keys_ptr = keys.get_wrapped_value()\n+        vals = GdbValue(data_ptr.get_wrapped_value().dereference()).get_child_at_index(4)\n+        vals_ptr = vals.get_wrapped_value()\n+        for index in xrange(length):\n+            yield (str(index), keys_ptr[index])\n+            yield (str(index), vals_ptr[index])\n+\n+\n class RustStdStringPrinter(object):\n     def __init__(self, val):\n         self.__val = val\n@@ -338,6 +367,7 @@ def to_string(self):\n     def display_hint(self):\n         return \"string\"\n \n+\n class RustOsStringPrinter(object):\n     def __init__(self, val):\n         self.__val = val"}, {"sha": "37856dc546935d3421153e26db476eba5437a166", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 90, "deletions": 18, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -1891,7 +1891,7 @@ $EndFeature, \"\n         /// ```\n         /// #![feature(int_to_from_bytes)]\n         ///\n-        /// let bytes = 0x12345678i32.to_be_bytes();\n+        /// let bytes = 0x12_34_56_78_i32.to_be_bytes();\n         /// assert_eq!(bytes, [0x12, 0x34, 0x56, 0x78]);\n         /// ```\n         #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n@@ -1908,7 +1908,7 @@ $EndFeature, \"\n         /// ```\n         /// #![feature(int_to_from_bytes)]\n         ///\n-        /// let bytes = 0x12345678i32.to_le_bytes();\n+        /// let bytes =  0x12_34_56_78_i32.to_le_bytes();\n         /// assert_eq!(bytes, [0x78, 0x56, 0x34, 0x12]);\n         /// ```\n         #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n@@ -3568,47 +3568,119 @@ $EndFeature, \"\n             }\n         }\n \n-        /// Return the memory representation of this integer as a byte array.\n+        /// Return the memory representation of this integer as a byte array in\n+        /// big-endian (network) byte order.\n+        ///\n+        /// # Examples\n         ///\n-        /// The target platform\u2019s native endianness is used.\n-        /// Portable code likely wants to use this after [`to_be`] or [`to_le`].\n+        /// ```\n+        /// #![feature(int_to_from_bytes)]\n         ///\n-        /// [`to_be`]: #method.to_be\n-        /// [`to_le`]: #method.to_le\n+        /// let bytes =  0x12_34_56_78_i32.to_be_bytes();\n+        /// assert_eq!(bytes, [0x12, 0x34, 0x56, 0x78]);\n+        /// ```\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+        #[inline]\n+        pub fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+            self.to_be().to_ne_bytes()\n+        }\n+\n+        /// Return the memory representation of this integer as a byte array in\n+        /// little-endian byte order.\n         ///\n         /// # Examples\n         ///\n         /// ```\n         /// #![feature(int_to_from_bytes)]\n         ///\n-        /// let bytes = 0x1234_5678_u32.to_be().to_bytes();\n-        /// assert_eq!(bytes, [0x12, 0x34, 0x56, 0x78]);\n+        /// let bytes =  0x12_34_56_78_i32.to_le_bytes();\n+        /// assert_eq!(bytes, [0x78, 0x56, 0x34, 0x12]);\n+        /// ```\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+        #[inline]\n+        pub fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+            self.to_le().to_ne_bytes()\n+        }\n+\n+        /// Return the memory representation of this integer as a byte array in\n+        /// native byte order.\n+        ///\n+        /// As the target platform's native endianness is used, portable code\n+        /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,\n+        /// instead.\n+        ///\n+        /// [`to_be_bytes`]: #method.to_be_bytes\n+        /// [`to_le_bytes`]: #method.to_le_bytes\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(int_to_from_bytes)]\n+        ///\n+        /// let bytes = i32::min_value().to_be().to_ne_bytes();\n+        /// assert_eq!(bytes, [0x80, 0, 0, 0]);\n         /// ```\n         #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n         #[inline]\n-        pub fn to_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+        pub fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             unsafe { mem::transmute(self) }\n         }\n \n-        /// Create an integer value from its memory representation as a byte array.\n+        /// Create an integer value from its representation as a byte array in\n+        /// big endian.\n+        ///\n+        /// # Examples\n         ///\n-        /// The target platform\u2019s native endianness is used.\n-        /// Portable code likely wants to use [`to_be`] or [`to_le`] after this.\n+        /// ```\n+        /// #![feature(int_to_from_bytes)]\n         ///\n-        /// [`to_be`]: #method.to_be\n-        /// [`to_le`]: #method.to_le\n+        /// let int = i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]);\n+        /// assert_eq!(int, 0x12_34_56_78);\n+        /// ```\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+        #[inline]\n+        pub fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+            Self::from_be(Self::from_ne_bytes(bytes))\n+        }\n+\n+        /// Create an integer value from its representation as a byte array in\n+        /// little endian.\n         ///\n         /// # Examples\n         ///\n         /// ```\n         /// #![feature(int_to_from_bytes)]\n         ///\n-        /// let int = u32::from_be(u32::from_bytes([0x12, 0x34, 0x56, 0x78]));\n-        /// assert_eq!(int, 0x1234_5678_u32);\n+        /// let int = i32::from_le_bytes([0x12, 0x34, 0x56, 0x78]);\n+        /// assert_eq!(int, 0x78_56_34_12);\n         /// ```\n         #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n         #[inline]\n-        pub fn from_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+        pub fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+            Self::from_le(Self::from_ne_bytes(bytes))\n+        }\n+\n+        /// Create an integer value from its memory representation as a byte\n+        /// array in native endianness.\n+        ///\n+        /// As the target platform's native endianness is used, portable code\n+        /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\n+        /// appropriate instead.\n+        ///\n+        /// [`from_be_bytes`]: #method.from_be_bytes\n+        /// [`from_le_bytes`]: #method.from_le_bytes\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(int_to_from_bytes)]\n+        ///\n+        /// let int = i32::from_be(i32::from_ne_bytes([0x80, 0, 0, 0]));\n+        /// assert_eq!(int, i32::min_value());\n+        /// ```\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+        #[inline]\n+        pub fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             unsafe { mem::transmute(bytes) }\n         }\n     }"}, {"sha": "59b5b58e61eac533f1c3245b28880c1028405c85", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -31,7 +31,7 @@ syntax_pos = { path = \"../libsyntax_pos\" }\n backtrace = \"0.3.3\"\n parking_lot = \"0.5.5\"\n byteorder = { version = \"1.1\", features = [\"i128\"]}\n-chalk-engine = { version = \"0.6.0\", default-features=false }\n+chalk-engine = { version = \"0.7.0\", default-features=false }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n \n # Note that these dependencies are a lie, they're just here to get linkage to"}, {"sha": "40f13ac06f56fbed1439d69e2df4f9793004bafc", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -239,6 +239,10 @@ impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n impl<'cx, 'gcx, 'tcx> Iterator for Elaborator<'cx, 'gcx, 'tcx> {\n     type Item = ty::Predicate<'tcx>;\n \n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (self.stack.len(), None)\n+    }\n+\n     fn next(&mut self) -> Option<ty::Predicate<'tcx>> {\n         // Extract next item from top-most stack frame, if any.\n         let next_predicate = match self.stack.pop() {"}, {"sha": "6311ab7c74c1c787ac8469e2e18d9336a726591b", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -1006,18 +1006,6 @@ impl<'a> Linker for WasmLd<'a> {\n             OptLevel::Size => \"-O2\",\n             OptLevel::SizeMin => \"-O2\"\n         });\n-        match self.sess.opts.optimize {\n-            OptLevel::No => (),\n-            OptLevel::Less |\n-            OptLevel::Default |\n-            OptLevel::Aggressive |\n-            OptLevel::Size |\n-            OptLevel::SizeMin => {\n-                // LLD generates incorrect debugging information when\n-                // optimization is applied: strip debug sections.\n-                self.cmd.arg(\"--strip-debug\");\n-            }\n-        }\n     }\n \n     fn pgo_gen(&mut self) {"}, {"sha": "729689e35c9989b0cbe9b2dc00389d14d5a0808f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 36, "deletions": 43, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -3459,64 +3459,57 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             let ns = if is_last { opt_ns.unwrap_or(TypeNS) } else { TypeNS };\n             let name = ident.name;\n \n-            if i == 0 && ns == TypeNS && name == keywords::SelfValue.name() {\n-                let mut ctxt = ident.span.ctxt().modern();\n-                module = Some(ModuleOrUniformRoot::Module(\n-                    self.resolve_self(&mut ctxt, self.current_module)));\n-                continue\n-            } else if allow_super && ns == TypeNS && name == keywords::Super.name() {\n-                let mut ctxt = ident.span.ctxt().modern();\n-                let self_module_parent = match i {\n-                    0 => self.resolve_self(&mut ctxt, self.current_module).parent,\n-                    _ => match module {\n-                        Some(ModuleOrUniformRoot::Module(module)) => module.parent,\n-                        _ => None,\n-                    },\n-                };\n-                if let Some(parent) = self_module_parent {\n-                    module = Some(ModuleOrUniformRoot::Module(\n-                        self.resolve_self(&mut ctxt, parent)));\n-                    continue\n-                } else {\n+            allow_super &= ns == TypeNS &&\n+                (name == keywords::SelfValue.name() ||\n+                 name == keywords::Super.name());\n+\n+            if ns == TypeNS {\n+                if allow_super && name == keywords::Super.name() {\n+                    let mut ctxt = ident.span.ctxt().modern();\n+                    let self_module = match i {\n+                        0 => Some(self.resolve_self(&mut ctxt, self.current_module)),\n+                        _ => match module {\n+                            Some(ModuleOrUniformRoot::Module(module)) => Some(module),\n+                            _ => None,\n+                        },\n+                    };\n+                    if let Some(self_module) = self_module {\n+                        if let Some(parent) = self_module.parent {\n+                            module = Some(ModuleOrUniformRoot::Module(\n+                                self.resolve_self(&mut ctxt, parent)));\n+                            continue;\n+                        }\n+                    }\n                     let msg = \"There are too many initial `super`s.\".to_string();\n                     return PathResult::Failed(ident.span, msg, false);\n                 }\n-            }\n-            allow_super = false;\n-\n-            if ns == TypeNS {\n                 if i == 0 {\n+                    if name == keywords::SelfValue.name() {\n+                        let mut ctxt = ident.span.ctxt().modern();\n+                        module = Some(ModuleOrUniformRoot::Module(\n+                            self.resolve_self(&mut ctxt, self.current_module)));\n+                        continue;\n+                    }\n                     if name == keywords::Extern.name() ||\n                        name == keywords::CrateRoot.name() &&\n                        self.session.features_untracked().extern_absolute_paths &&\n                        self.session.rust_2018() {\n                         module = Some(ModuleOrUniformRoot::UniformRoot(name));\n                         continue;\n                     }\n-                }\n-                if (i == 0 && name == keywords::CrateRoot.name()) ||\n-                   (i == 0 && name == keywords::Crate.name()) ||\n-                   (i == 0 && name == keywords::DollarCrate.name()) ||\n-                   (i == 1 && name == keywords::Crate.name() &&\n-                              path[0].name == keywords::CrateRoot.name()) {\n-                    // `::a::b`, `crate::a::b`, `::crate::a::b` or `$crate::a::b`\n-                    module = Some(ModuleOrUniformRoot::Module(\n-                        self.resolve_crate_root(ident)));\n-                    continue\n+                    if name == keywords::CrateRoot.name() ||\n+                       name == keywords::Crate.name() ||\n+                       name == keywords::DollarCrate.name() {\n+                        // `::a::b`, `crate::a::b` or `$crate::a::b`\n+                        module = Some(ModuleOrUniformRoot::Module(\n+                            self.resolve_crate_root(ident)));\n+                        continue;\n+                    }\n                 }\n             }\n \n             // Report special messages for path segment keywords in wrong positions.\n-            if name == keywords::CrateRoot.name() && i != 0 ||\n-               name == keywords::DollarCrate.name() && i != 0 ||\n-               name == keywords::SelfValue.name() && i != 0 ||\n-               name == keywords::SelfType.name() && i != 0 ||\n-               name == keywords::Super.name() && i != 0 ||\n-               name == keywords::Extern.name() && i != 0 ||\n-               // we allow crate::foo and ::crate::foo but nothing else\n-               name == keywords::Crate.name() && i > 1 &&\n-                    path[0].name != keywords::CrateRoot.name() ||\n-               name == keywords::Crate.name() && path.len() == 1 {\n+            if ident.is_path_segment_keyword() && i != 0 {\n                 let name_str = if name == keywords::CrateRoot.name() {\n                     \"crate root\".to_string()\n                 } else {"}, {"sha": "3e1a6ca9aff7c33f40db6c5540cc8ee71428749d", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -16,4 +16,4 @@ rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-chalk-engine = { version = \"0.6.0\", default-features=false }\n+chalk-engine = { version = \"0.7.0\", default-features=false }"}, {"sha": "4fac11189a40004951629cd2c9e344247a677344", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -4629,8 +4629,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let methods = self.get_conversion_methods(expr.span, expected, found);\n             if let Ok(expr_text) = self.sess().codemap().span_to_snippet(expr.span) {\n                 let suggestions = iter::repeat(expr_text).zip(methods.iter())\n-                    .map(|(receiver, method)| format!(\"{}.{}()\", receiver, method.ident))\n-                    .collect::<Vec<_>>();\n+                    .filter_map(|(receiver, method)| {\n+                        let method_call = format!(\".{}()\", method.ident);\n+                        if receiver.ends_with(&method_call) {\n+                            None  // do not suggest code that is already there (#53348)\n+                        } else {\n+                            Some(format!(\"{}{}\", receiver, method_call))\n+                        }\n+                    }) .collect::<Vec<_>>();\n                 if !suggestions.is_empty() {\n                     err.span_suggestions(expr.span, \"try using a conversion method\", suggestions);\n                 }"}, {"sha": "02f431dccca6b4b9882ad657e25f88e40d3243b9", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -1925,6 +1925,7 @@ fn from_target_feature(\n                 Some(\"mmx_target_feature\") => rust_features.mmx_target_feature,\n                 Some(\"sse4a_target_feature\") => rust_features.sse4a_target_feature,\n                 Some(\"tbm_target_feature\") => rust_features.tbm_target_feature,\n+                Some(\"wasm_target_feature\") => rust_features.wasm_target_feature,\n                 Some(name) => bug!(\"unknown target feature gate {}\", name),\n                 None => true,\n             };"}, {"sha": "7a8a7b073185a6477dfeb8fdbb73dec1995d1202", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 56, "deletions": 23, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -1930,7 +1930,15 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n     let mut features = Features::new();\n     let mut edition_enabled_features = FxHashMap();\n \n-    for &(name, .., f_edition, set) in ACTIVE_FEATURES.iter() {\n+    for &edition in ALL_EDITIONS {\n+        if edition <= crate_edition {\n+            // The `crate_edition` implies its respective umbrella feature-gate\n+            // (i.e. `#![feature(rust_20XX_preview)]` isn't needed on edition 20XX).\n+            edition_enabled_features.insert(Symbol::intern(edition.feature_name()), edition);\n+        }\n+    }\n+\n+    for &(name, .., f_edition, set) in ACTIVE_FEATURES {\n         if let Some(f_edition) = f_edition {\n             if f_edition <= crate_edition {\n                 set(&mut features, DUMMY_SP);\n@@ -1939,26 +1947,22 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n         }\n     }\n \n+    // Process the edition umbrella feature-gates first, to ensure\n+    // `edition_enabled_features` is completed before it's queried.\n     for attr in krate_attrs {\n         if !attr.check_name(\"feature\") {\n             continue\n         }\n \n         let list = match attr.meta_item_list() {\n             Some(list) => list,\n-            None => {\n-                span_err!(span_handler, attr.span, E0555,\n-                          \"malformed feature attribute, expected #![feature(...)]\");\n-                continue\n-            }\n+            None => continue,\n         };\n \n         for mi in list {\n             let name = if let Some(word) = mi.word() {\n                 word.name()\n             } else {\n-                span_err!(span_handler, mi.span, E0556,\n-                          \"malformed feature, expected just one word\");\n                 continue\n             };\n \n@@ -1974,10 +1978,10 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n \n             if let Some(edition) = ALL_EDITIONS.iter().find(|e| name == e.feature_name()) {\n                 if *edition <= crate_edition {\n-                    continue\n+                    continue;\n                 }\n \n-                for &(name, .., f_edition, set) in ACTIVE_FEATURES.iter() {\n+                for &(name, .., f_edition, set) in ACTIVE_FEATURES {\n                     if let Some(f_edition) = f_edition {\n                         if f_edition <= *edition {\n                             // FIXME(Manishearth) there is currently no way to set\n@@ -1987,24 +1991,53 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                         }\n                     }\n                 }\n+            }\n+        }\n+    }\n+\n+    for attr in krate_attrs {\n+        if !attr.check_name(\"feature\") {\n+            continue\n+        }\n+\n+        let list = match attr.meta_item_list() {\n+            Some(list) => list,\n+            None => {\n+                span_err!(span_handler, attr.span, E0555,\n+                          \"malformed feature attribute, expected #![feature(...)]\");\n+                continue\n+            }\n+        };\n \n+        for mi in list {\n+            let name = if let Some(word) = mi.word() {\n+                word.name()\n+            } else {\n+                span_err!(span_handler, mi.span, E0556,\n+                          \"malformed feature, expected just one word\");\n                 continue\n+            };\n+\n+            if let Some(edition) = edition_enabled_features.get(&name) {\n+                struct_span_warn!(\n+                    span_handler,\n+                    mi.span,\n+                    E0705,\n+                    \"the feature `{}` is included in the Rust {} edition\",\n+                    name,\n+                    edition,\n+                ).emit();\n+                continue;\n+            }\n+\n+            if ALL_EDITIONS.iter().any(|e| name == e.feature_name()) {\n+                // Handled in the separate loop above.\n+                continue;\n             }\n \n             if let Some((.., set)) = ACTIVE_FEATURES.iter().find(|f| name == f.0) {\n-                if let Some(edition) = edition_enabled_features.get(&name) {\n-                    struct_span_warn!(\n-                        span_handler,\n-                        mi.span,\n-                        E0705,\n-                        \"the feature `{}` is included in the Rust {} edition\",\n-                        name,\n-                        edition,\n-                    ).emit();\n-                } else {\n-                    set(&mut features, mi.span);\n-                    features.declared_lang_features.push((name, mi.span, None));\n-                }\n+                set(&mut features, mi.span);\n+                features.declared_lang_features.push((name, mi.span, None));\n                 continue\n             }\n "}, {"sha": "8e37a884b34bbe24171fee585e1b98f1e8a394c3", "filename": "src/test/debuginfo/pretty-std-collections.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -22,11 +22,15 @@\n // gdb-command: print btree_set\n // gdb-check:$1 = BTreeSet<i32>(len: 3) = {3, 5, 7}\n \n+// gdb-command: print btree_map\n+// gdb-check:$2 = BTreeMap<i32, i32>(len: 3) = {[3] = 3, [5] = 7, [7] = 4}\n+\n // gdb-command: print vec_deque\n-// gdb-check:$2 = VecDeque<i32>(len: 3, cap: 8) = {5, 3, 7}\n+// gdb-check:$3 = VecDeque<i32>(len: 3, cap: 8) = {5, 3, 7}\n \n #![allow(unused_variables)]\n use std::collections::BTreeSet;\n+use std::collections::BTreeMap;\n use std::collections::VecDeque;\n \n \n@@ -38,6 +42,12 @@ fn main() {\n     btree_set.insert(3);\n     btree_set.insert(7);\n \n+    // BTreeMap\n+    let mut btree_map = BTreeMap::new();\n+    btree_map.insert(5, 7);\n+    btree_map.insert(3, 3);\n+    btree_map.insert(7, 4);\n+\n     // VecDeque\n     let mut vec_deque = VecDeque::new();\n     vec_deque.push_back(5);"}, {"sha": "61c3e781c08676fe99413024987c9f8f37d18196", "filename": "src/test/run-pass/macro-at-most-once-rep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Frun-pass%2Fmacro-at-most-once-rep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Frun-pass%2Fmacro-at-most-once-rep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-at-most-once-rep.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -18,7 +18,7 @@\n //\n // This test focuses on non-error cases and making sure the correct number of repetitions happen.\n \n-// compile-flags: --edition=2018\n+// edition:2018\n \n #![feature(macro_at_most_once_rep)]\n "}, {"sha": "31f683a17355066c8e825c30295570bfa9f5ed51", "filename": "src/test/run-pass/rfc-2126-crate-paths/crate-path-absolute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Frun-pass%2Frfc-2126-crate-paths%2Fcrate-path-absolute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Frun-pass%2Frfc-2126-crate-paths%2Fcrate-path-absolute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-crate-paths%2Fcrate-path-absolute.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -28,14 +28,14 @@ mod n\n     use crate as root;\n     pub fn check() {\n         assert_eq!(f(), 1);\n-        assert_eq!(::crate::m::g(), 2);\n+        assert_eq!(crate::m::g(), 2);\n         assert_eq!(root::m::h(), 3);\n     }\n }\n \n fn main() {\n     assert_eq!(f(), 1);\n-    assert_eq!(::crate::m::g(), 2);\n+    assert_eq!(crate::m::g(), 2);\n     assert_eq!(root::m::h(), 3);\n     n::check();\n }"}, {"sha": "4646d81cf518f8b79715ba0a9d99ee40ada5d9d0", "filename": "src/test/run-pass/rfc-2126-crate-paths/crate-path-visibility-ambiguity.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Frun-pass%2Frfc-2126-crate-paths%2Fcrate-path-visibility-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Frun-pass%2Frfc-2126-crate-paths%2Fcrate-path-visibility-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-crate-paths%2Fcrate-path-visibility-ambiguity.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -14,8 +14,9 @@\n mod m {\n     pub struct Z;\n     pub struct S1(crate (::m::Z)); // OK\n-    pub struct S2(::crate ::m::Z); // OK\n+    pub struct S2((crate ::m::Z)); // OK\n     pub struct S3(crate ::m::Z); // OK\n+    pub struct S4(crate crate::m::Z); // OK\n }\n \n fn main() {"}, {"sha": "f3d39deef173083939609268aff7177579709c79", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -13,7 +13,7 @@\n \n // FIXME: once `--edition` is stable in rustdoc, remove that `compile-flags` directive\n \n-#![feature(rust_2018_preview, async_await, futures_api)]\n+#![feature(async_await, futures_api)]\n \n // @has async_fn/struct.S.html\n // @has - '//code' 'pub async fn f()'"}, {"sha": "b64ebed030588fae9cccd48b4f963f1d580c0aa5", "filename": "src/test/ui-fulldeps/rust-2018/suggestions-not-always-applicable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fsuggestions-not-always-applicable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fsuggestions-not-always-applicable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fsuggestions-not-always-applicable.fixed?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:suggestions-not-always-applicable.rs\n-// compile-flags: --edition 2015\n+// edition:2015\n // run-rustfix\n // rustfix-only-machine-applicable\n // compile-pass"}, {"sha": "b64ebed030588fae9cccd48b4f963f1d580c0aa5", "filename": "src/test/ui-fulldeps/rust-2018/suggestions-not-always-applicable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fsuggestions-not-always-applicable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fsuggestions-not-always-applicable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Frust-2018%2Fsuggestions-not-always-applicable.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:suggestions-not-always-applicable.rs\n-// compile-flags: --edition 2015\n+// edition:2015\n // run-rustfix\n // rustfix-only-machine-applicable\n // compile-pass"}, {"sha": "ea3e0587958b10a8c86c0713333508606628e145", "filename": "src/test/ui-fulldeps/unnecessary-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition 2018\n+// edition:2018\n \n #![deny(unused_extern_crates)]\n #![feature(alloc, test, libc)]"}, {"sha": "b5fd3cf35f28bedd306e13813b6ed3a1a1a2a261", "filename": "src/test/ui/E0705.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2FE0705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2FE0705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0705.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -10,9 +10,9 @@\n \n // compile-pass\n \n-#![feature(rust_2018_preview)]\n #![feature(raw_identifiers)]\n //~^ WARN the feature `raw_identifiers` is included in the Rust 2018 edition\n+#![feature(rust_2018_preview)]\n \n fn main() {\n     let foo = 0;"}, {"sha": "2aa3077e48c2dad6ffa3d56be088b875f2f4492e", "filename": "src/test/ui/E0705.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2FE0705.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2FE0705.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0705.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -1,5 +1,5 @@\n warning[E0705]: the feature `raw_identifiers` is included in the Rust 2018 edition\n-  --> $DIR/E0705.rs:14:12\n+  --> $DIR/E0705.rs:13:12\n    |\n LL | #![feature(raw_identifiers)]\n    |            ^^^^^^^^^^^^^^^"}, {"sha": "c96799c85f20606117e71831f46ff5106b1ba233", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut-fail.nll.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -0,0 +1,75 @@\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:26:24\n+   |\n+LL |     let c1 = to_fn_mut(|| x = 4);\n+   |                        -- - first borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+   |                        ^^ - second borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:37:24\n+   |\n+LL |     let c1 = to_fn_mut(|| set(&mut x));\n+   |                        --          - first borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+   |                        ^^          - second borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:44:24\n+   |\n+LL |     let c1 = to_fn_mut(|| x = 5);\n+   |                        -- - first borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+   |                        ^^          - second borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:51:24\n+   |\n+LL |     let c1 = to_fn_mut(|| x = 5);\n+   |                        -- - first borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n+   |                        ^^                                  - second borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+LL |     //~^ ERROR cannot borrow `x` as mutable more than once\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:63:24\n+   |\n+LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n+   |                        --           - first borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n+   |                        ^^           - second borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+LL |     //~^ ERROR cannot borrow `x` as mutable more than once\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "66ebd346dab62620e58bd893548db35b30b3980c", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut-fail.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -8,22 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Tests that two closures cannot simultaneously have mutable\n // access to the variable, whether that mutable access be used\n // for direct assignment or for taking mutable ref. Issue #6801.\n \n-// ignore-compare-mode-nll\n-\n #![feature(box_syntax)]\n \n+\n+\n+\n+\n fn to_fn_mut<F: FnMut()>(f: F) -> F { f }\n \n fn a() {\n     let mut x = 3;\n     let c1 = to_fn_mut(|| x = 4);\n     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+    c1;\n }\n \n fn set(x: &mut isize) {\n@@ -34,19 +35,22 @@ fn b() {\n     let mut x = 3;\n     let c1 = to_fn_mut(|| set(&mut x));\n     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+    c1;\n }\n \n fn c() {\n     let mut x = 3;\n     let c1 = to_fn_mut(|| x = 5);\n     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+    c1;\n }\n \n fn d() {\n     let mut x = 3;\n     let c1 = to_fn_mut(|| x = 5);\n     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n     //~^ ERROR cannot borrow `x` as mutable more than once\n+    c1;\n }\n \n fn g() {\n@@ -58,6 +62,7 @@ fn g() {\n     let c1 = to_fn_mut(|| set(&mut *x.f));\n     let c2 = to_fn_mut(|| set(&mut *x.f));\n     //~^ ERROR cannot borrow `x` as mutable more than once\n+    c1;\n }\n \n fn main() {"}, {"sha": "59104cc4be9b9d0921cb0bd67ef7b1e46458e754", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut-fail.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -9,11 +9,12 @@ LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable mo\n    |                        ^^ - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n+LL |     c1;\n LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut-fail.rs:36:24\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:37:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - previous borrow occurs due to use of `x` in closure\n@@ -23,11 +24,12 @@ LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as muta\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n+LL |     c1;\n LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut-fail.rs:42:24\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:44:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n@@ -37,11 +39,12 @@ LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as muta\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n+LL |     c1;\n LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut-fail.rs:48:24\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:51:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n@@ -51,12 +54,12 @@ LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nes\n    |                        ^^                                  - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |     //~^ ERROR cannot borrow `x` as mutable more than once\n+...\n LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut-fail.rs:59:24\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:63:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n    |                        --           - previous borrow occurs due to use of `x` in closure\n@@ -66,7 +69,7 @@ LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n    |                        ^^           - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |     //~^ ERROR cannot borrow `x` as mutable more than once\n+...\n LL | }\n    | - first borrow ends here\n "}, {"sha": "17519ccb1438dded93710c0d229dc3533c02a84c", "filename": "src/test/ui/borrowck/borrowck-closures-unique.nll.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -0,0 +1,54 @@\n+error[E0500]: closure requires unique access to `x` but it is already borrowed\n+  --> $DIR/borrowck-closures-unique.rs:36:14\n+   |\n+LL |     let c1 = || get(x);\n+   |              --     - first borrow occurs due to use of `x` in closure\n+   |              |\n+   |              borrow occurs here\n+LL |     let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+   |              ^^     - second borrow occurs due to use of `x` in closure\n+   |              |\n+   |              closure construction occurs here\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0500]: closure requires unique access to `x` but it is already borrowed\n+  --> $DIR/borrowck-closures-unique.rs:42:14\n+   |\n+LL |     let c1 = || get(x);\n+   |              --     - first borrow occurs due to use of `x` in closure\n+   |              |\n+   |              borrow occurs here\n+LL |     let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n+   |              ^^       - second borrow occurs due to use of `x` in closure\n+   |              |\n+   |              closure construction occurs here\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0524]: two closures require unique access to `x` at the same time\n+  --> $DIR/borrowck-closures-unique.rs:48:14\n+   |\n+LL |     let c1 = || set(x);\n+   |              --     - first borrow occurs due to use of `x` in closure\n+   |              |\n+   |              first closure is constructed here\n+LL |     let c2 = || set(x); //~ ERROR two closures require unique access to `x` at the same time\n+   |              ^^     - second borrow occurs due to use of `x` in closure\n+   |              |\n+   |              second closure is constructed here\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/borrowck-closures-unique.rs:57:38\n+   |\n+LL | fn e(x: &'static mut isize) {\n+   |      - help: consider changing this to be mutable: `mut x`\n+LL |     let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n+   |                                      ^^^^^ cannot assign\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0500, E0524, E0594.\n+For more information about an error, try `rustc --explain E0500`."}, {"sha": "caf5785f481c2bded03c8b17be98998af959d92f", "filename": "src/test/ui/borrowck/borrowck-closures-unique.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Tests that a closure which requires mutable access to the referent\n // of an `&mut` requires a \"unique\" borrow -- that is, the variable to\n // be borrowed (here, `x`) will not be borrowed *mutably*, but\n //  may be *immutable*, but we cannot allow\n // multiple borrows.\n \n+\n+\n fn get(x: &isize) -> isize {\n     *x\n }\n@@ -27,25 +27,40 @@ fn set(x: &mut isize) -> isize {\n fn a(x: &mut isize) {\n     let c1 = || get(x);\n     let c2 = || get(x);\n+    c1();\n+    c2();\n }\n \n fn b(x: &mut isize) {\n     let c1 = || get(x);\n     let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+    c1;\n }\n \n fn c(x: &mut isize) {\n     let c1 = || get(x);\n     let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n+    c1;\n }\n \n fn d(x: &mut isize) {\n     let c1 = || set(x);\n     let c2 = || set(x); //~ ERROR two closures require unique access to `x` at the same time\n+    c1;\n+}\n+\n+// This test was originally encoded in the form shown as `fn f` below.\n+// However, since MIR-borrowck and thus NLL takes more control-flow information\n+// into account, it was necessary to change the test in order to witness the\n+// same (expected) error under both AST-borrowck and NLL.\n+fn e(x: &'static mut isize) {\n+    let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n+    c1;\n }\n \n-fn e(x: &mut isize) {\n+fn f(x: &'static mut isize) {\n     let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable argument\n+    c1;\n }\n \n fn main() {"}, {"sha": "cfcb81b31e700947cc09d72fd0358eaf004a4872", "filename": "src/test/ui/borrowck/borrowck-closures-unique.stderr", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -1,5 +1,5 @@\n error[E0500]: closure requires unique access to `x` but it is already borrowed\n-  --> $DIR/borrowck-closures-unique.rs:34:14\n+  --> $DIR/borrowck-closures-unique.rs:36:14\n    |\n LL |     let c1 = || get(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n@@ -9,11 +9,12 @@ LL |     let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n    |              ^^     - borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n+LL |     c1;\n LL | }\n    | - borrow ends here\n \n error[E0500]: closure requires unique access to `x` but it is already borrowed\n-  --> $DIR/borrowck-closures-unique.rs:39:14\n+  --> $DIR/borrowck-closures-unique.rs:42:14\n    |\n LL |     let c1 = || get(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n@@ -23,11 +24,12 @@ LL |     let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique acce\n    |              ^^       - borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n+LL |     c1;\n LL | }\n    | - borrow ends here\n \n error[E0524]: two closures require unique access to `x` at the same time\n-  --> $DIR/borrowck-closures-unique.rs:44:14\n+  --> $DIR/borrowck-closures-unique.rs:48:14\n    |\n LL |     let c1 = || set(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n@@ -37,11 +39,22 @@ LL |     let c2 = || set(x); //~ ERROR two closures require unique access to `x`\n    |              ^^     - borrow occurs due to use of `x` in closure\n    |              |\n    |              second closure is constructed here\n+LL |     c1;\n LL | }\n    | - borrow from first closure ends here\n \n error[E0595]: closure cannot assign to immutable argument `x`\n-  --> $DIR/borrowck-closures-unique.rs:48:14\n+  --> $DIR/borrowck-closures-unique.rs:57:14\n+   |\n+LL |     let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow mutably\n+help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n+   |\n+LL |     x //~ ERROR closure cannot assign to immutable argument\n+   |     ^\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/borrowck-closures-unique.rs:62:14\n    |\n LL |     let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable argument\n    |              ^^ cannot borrow mutably\n@@ -50,7 +63,7 @@ help: consider removing the `&mut`, as it is an immutable binding to a mutable r\n LL |     x //~ ERROR closure cannot assign to immutable argument\n    |     ^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0500, E0524, E0595.\n For more information about an error, try `rustc --explain E0500`."}, {"sha": "104c0886311d0bda3cea464539a338336fdb6288", "filename": "src/test/ui/borrowck/borrowck-feature-nll-overrides-migrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -20,7 +20,7 @@\n \n // revisions: zflag edition\n // [zflag]compile-flags: -Z borrowck=migrate\n-// [edition]compile-flags: --edition 2018\n+// [edition]edition:2018\n \n #![feature(nll)]\n "}, {"sha": "bb6b29072e257fc6fe317d8f726912d0acdca55b", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -23,7 +23,7 @@\n \n // revisions: zflag edition\n //[zflag]compile-flags: -Z borrowck=migrate\n-//[edition]compile-flags: --edition 2018\n+//[edition]edition:2018\n //[zflag] run-pass\n //[edition] run-pass\n "}, {"sha": "3b53fb9fc42831f7bf77da554c3a76bf1df29799", "filename": "src/test/ui/borrowck/issue-52967-edition-2018-needs-two-phase-borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fissue-52967-edition-2018-needs-two-phase-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fborrowck%2Fissue-52967-edition-2018-needs-two-phase-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-52967-edition-2018-needs-two-phase-borrows.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -14,7 +14,7 @@\n \n // revisions: ast zflags edition\n //[zflags]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n-//[edition]compile-flags: --edition 2018\n+//[edition]edition:2018\n \n // run-pass\n "}, {"sha": "75761a0b5b9716849883878868ca2cbfddad7fbe", "filename": "src/test/ui/editions/edition-extern-crate-allowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Feditions%2Fedition-extern-crate-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Feditions%2Fedition-extern-crate-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-extern-crate-allowed.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:edition-extern-crate-allowed.rs\n-// compile-flags: --edition 2015\n+// edition:2015\n // compile-pass\n \n #![warn(rust_2018_idioms)]"}, {"sha": "5896e9a07159164c923153fb375b54b25c0663f4", "filename": "src/test/ui/editions/edition-feature-ok.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Feditions%2Fedition-feature-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Feditions%2Fedition-feature-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-feature-ok.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:--edition 2018\n // compile-pass\n \n #![feature(rust_2018_preview)]"}, {"sha": "d20873f5e11635d1dd710d31206b7fd2adbdc9ea", "filename": "src/test/ui/editions/edition-feature-redundant.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Feditions%2Fedition-feature-redundant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Feditions%2Fedition-feature-redundant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-feature-redundant.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+// compile-pass\n+\n+#![feature(rust_2018_preview)]\n+//~^ WARN the feature `rust_2018_preview` is included in the Rust 2018 edition\n+\n+fn main() {}"}, {"sha": "ccf7b21fbc5c04a7e4a552ec3595e9c08e0c4905", "filename": "src/test/ui/editions/edition-feature-redundant.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Feditions%2Fedition-feature-redundant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Feditions%2Fedition-feature-redundant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-feature-redundant.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -0,0 +1,6 @@\n+warning[E0705]: the feature `rust_2018_preview` is included in the Rust 2018 edition\n+  --> $DIR/edition-feature-redundant.rs:14:12\n+   |\n+LL | #![feature(rust_2018_preview)]\n+   |            ^^^^^^^^^^^^^^^^^\n+"}, {"sha": "e667dab621bda6e1026e0a2c912ba2988bd7c43b", "filename": "src/test/ui/feature-gates/feature-gate-crate_in_paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -11,5 +11,5 @@\n struct S;\n \n fn main() {\n-    let _ = ::crate::S; //~ ERROR `crate` in paths is experimental\n+    let _ = crate::S; //~ ERROR `crate` in paths is experimental\n }"}, {"sha": "32115ba2111b57368efb15ca6315ac3e91cfa011", "filename": "src/test/ui/feature-gates/feature-gate-crate_in_paths.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: `crate` in paths is experimental (see issue #45477)\n-  --> $DIR/feature-gate-crate_in_paths.rs:14:15\n+  --> $DIR/feature-gate-crate_in_paths.rs:14:13\n    |\n-LL |     let _ = ::crate::S; //~ ERROR `crate` in paths is experimental\n-   |               ^^^^^\n+LL |     let _ = crate::S; //~ ERROR `crate` in paths is experimental\n+   |             ^^^^^\n    |\n    = help: add #![feature(crate_in_paths)] to the crate attributes to enable\n "}, {"sha": "943b684fe8d7703c836fd2853abdfd2bece43086", "filename": "src/test/ui/hashmap-lifetimes.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -0,0 +1,13 @@\n+error[E0502]: cannot borrow `my_stuff` as mutable because it is also borrowed as immutable\n+  --> $DIR/hashmap-lifetimes.rs:18:5\n+   |\n+LL |     let mut it = my_stuff.iter();\n+   |                  -------- immutable borrow occurs here\n+LL |     my_stuff.insert(1, 43); //~ ERROR cannot borrow\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     it;\n+   |     -- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "eb7404e7b780b9434594c845e515e016d42b5c42", "filename": "src/test/ui/hashmap-lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fhashmap-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fhashmap-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap-lifetimes.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n+\n \n fn main() {\n     let mut my_stuff = std::collections::HashMap::new();\n     my_stuff.insert(0, 42);\n \n     let mut it = my_stuff.iter();\n     my_stuff.insert(1, 43); //~ ERROR cannot borrow\n+    it;\n }"}, {"sha": "187c98ab298b67e1513bde0228f05bde1fbd05f9", "filename": "src/test/ui/hashmap-lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fhashmap-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fhashmap-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap-lifetimes.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -5,6 +5,7 @@ LL |     let mut it = my_stuff.iter();\n    |                  -------- immutable borrow occurs here\n LL |     my_stuff.insert(1, 43); //~ ERROR cannot borrow\n    |     ^^^^^^^^ mutable borrow occurs here\n+LL |     it;\n LL | }\n    | - immutable borrow ends here\n "}, {"sha": "153e5003746887eff17f558297ac82f585d9e2a0", "filename": "src/test/ui/in-band-lifetimes/elided-lifetimes.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.fixed?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // run-rustfix\n-// compile-flags: --edition 2018\n+// edition:2018\n \n #![allow(unused)]\n #![deny(elided_lifetimes_in_paths)]"}, {"sha": "41aa7e1a7b7b9b4524b9c311559c88f3bef64801", "filename": "src/test/ui/in-band-lifetimes/elided-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // run-rustfix\n-// compile-flags: --edition 2018\n+// edition:2018\n \n #![allow(unused)]\n #![deny(elided_lifetimes_in_paths)]"}, {"sha": "46ab07dad6e476cf45428417235b447ac8170ff5", "filename": "src/test/ui/issues/issue-53348.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut v = vec![\"hello\", \"this\", \"is\", \"a\", \"test\"];\n+\n+    let v2 = Vec::new();\n+\n+    v.into_iter().map(|s|s.to_owned()).collect::<Vec<_>>();\n+\n+    let mut a = String::new();\n+    for i in v {\n+        a = *i.to_string();\n+        //~^ ERROR mismatched types\n+        //~| NOTE expected struct `std::string::String`, found str\n+        //~| NOTE expected type\n+        v2.push(a);\n+    }\n+}"}, {"sha": "9aab4928ffa5733d4229a07be1c86a9e6ac67afe", "filename": "src/test/ui/issues/issue-53348.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-53348.rs:20:13\n+   |\n+LL |         a = *i.to_string();\n+   |             ^^^^^^^^^^^^^^ expected struct `std::string::String`, found str\n+   |\n+   = note: expected type `std::string::String`\n+              found type `str`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "63a4ef16a2581cef6a2a03fdc27dff2ad29402b4", "filename": "src/test/ui/macros/macro-at-most-once-rep-2015-ques-rep-feature-flag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-rep-feature-flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-rep-feature-flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-rep-feature-flag.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -12,7 +12,7 @@\n // with the feature flag.\n \n // gate-test-macro_at_most_once_rep\n-// compile-flags: --edition=2015\n+// edition:2015\n \n #![feature(macro_at_most_once_rep)]\n "}, {"sha": "64848d050cb1e90bbe242628a1ceddb7266017c8", "filename": "src/test/ui/macros/macro-at-most-once-rep-2015-ques-rep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-rep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-rep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-rep.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -10,7 +10,7 @@\n \n // Test behavior of `?` macro _kleene op_ under the 2015 edition. Namely, it doesn't exist.\n \n-// compile-flags: --edition=2015\n+// edition:2015\n \n macro_rules! bar {\n     ($(a)?) => {} //~ERROR expected `*` or `+`"}, {"sha": "a7857991079feefec88b41726b3e71cc68fe90e5", "filename": "src/test/ui/macros/macro-at-most-once-rep-2015-ques-sep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015-ques-sep.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -11,7 +11,7 @@\n // Test behavior of `?` macro _separator_ under the 2015 edition. Namely, `?` can be used as a\n // separator, but you get a migration warning for the edition.\n \n-// compile-flags: --edition=2015\n+// edition:2015\n // compile-pass\n \n #![warn(rust_2018_compatibility)]"}, {"sha": "ffabf9bcdf68557dad795f6135ed646380c87d74", "filename": "src/test/ui/macros/macro-at-most-once-rep-2018-feature-gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018-feature-gate.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -11,7 +11,7 @@\n // Feature gate test for macro_at_most_once_rep under 2018 edition.\n \n // gate-test-macro_at_most_once_rep\n-// compile-flags: --edition=2018\n+// edition:2018\n \n macro_rules! foo {\n     ($(a)?) => {}"}, {"sha": "5dabe8d95280100932a910c7b92344c23dbb1fde", "filename": "src/test/ui/macros/macro-at-most-once-rep-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -10,7 +10,7 @@\n \n // Tests that `?` is a Kleene op and not a macro separator in the 2018 edition.\n \n-// compile-flags: --edition=2018\n+// edition:2018\n \n #![feature(macro_at_most_once_rep)]\n "}, {"sha": "022917a5556e647c44fac2caa1dfa70b9f67fd0b", "filename": "src/test/ui/nll/issue-27868.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fnll%2Fissue-27868.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fnll%2Fissue-27868.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27868.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #27868\n+\n+#![feature(nll)]\n+\n+use std::ops::AddAssign;\n+\n+struct MyVec<T>(Vec<T>);\n+\n+impl <T> Drop for MyVec<T> {\n+    fn drop(&mut self) {\n+        println!(\"Being dropped.\");\n+    }\n+}\n+\n+impl<T> AddAssign<T> for MyVec<T> {\n+    fn add_assign(&mut self, _elem: T) {\n+        println!(\"In add_assign.\");\n+    }\n+}\n+\n+fn main() {\n+    let mut vec = MyVec(vec![0]);\n+    let mut vecvec = vec![vec];\n+\n+    vecvec[0] += {\n+        vecvec = vec![];\n+        //~^ ERROR cannot assign to `vecvec` because it is borrowed [E0506]\n+        0\n+    };\n+}"}, {"sha": "a376829e37b8ce2af17f6da649c994511adfca90", "filename": "src/test/ui/nll/issue-27868.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fnll%2Fissue-27868.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fnll%2Fissue-27868.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27868.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -0,0 +1,18 @@\n+error[E0506]: cannot assign to `vecvec` because it is borrowed\n+  --> $DIR/issue-27868.rs:36:9\n+   |\n+LL |       vecvec[0] += {\n+   |       ------\n+   |       |\n+   |  _____borrow of `vecvec` occurs here\n+   | |\n+LL | |         vecvec = vec![];\n+   | |         ^^^^^^ assignment to borrowed `vecvec` occurs here\n+LL | |         //~^ ERROR cannot assign to `vecvec` because it is borrowed [E0506]\n+LL | |         0\n+LL | |     };\n+   | |_____- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "64c32a55d0496085c432e9b3846296d8f5083620", "filename": "src/test/ui/nll/issue-30104.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fnll%2Fissue-30104.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fnll%2Fissue-30104.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-30104.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #30104\n+\n+// compile-pass\n+\n+#![feature(nll)]\n+\n+use std::ops::{Deref, DerefMut};\n+\n+fn box_two_field(v: &mut Box<(i32, i32)>) {\n+    let _a = &mut v.0;\n+    let _b = &mut v.1;\n+}\n+\n+fn box_destructure(v: &mut Box<(i32, i32)>) {\n+    let (ref mut _head, ref mut _tail) = **v;\n+}\n+\n+struct Wrap<T>(T);\n+\n+impl<T> Deref for Wrap<T> {\n+    type Target = T;\n+    fn deref(&self) -> &T {\n+        &self.0\n+    }\n+}\n+\n+impl<T> DerefMut for Wrap<T> {\n+    fn deref_mut(&mut self) -> &mut T {\n+        &mut self.0\n+    }\n+}\n+\n+fn smart_two_field(v: &mut Wrap<(i32, i32)>) {\n+    let _a = &mut v.0;\n+    let _b = &mut v.1;\n+}\n+\n+fn smart_destructure(v: &mut Wrap<(i32, i32)>) {\n+    let (ref mut _head, ref mut _tail) = **v;\n+}\n+\n+fn main() {}"}, {"sha": "69ff82e16a1bf10690898c6b4a6e64f07945a26b", "filename": "src/test/ui/nll/issue-48697.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fnll%2Fissue-48697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fnll%2Fissue-48697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48697.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #48697\n+\n+// compile-pass\n+\n+#![feature(nll)]\n+\n+fn foo(x: &i32) -> &i32 {\n+    let z = 4;\n+    let f = &|y| y;\n+    let k = f(&z);\n+    f(x)\n+}\n+\n+fn main() {}"}, {"sha": "90427b061b652f16a6ab7575314416f286689ec3", "filename": "src/test/ui/removing-extern-crate.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fremoving-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fremoving-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fremoving-extern-crate.fixed?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition 2018\n+// edition:2018\n // aux-build:removing-extern-crate.rs\n // run-rustfix\n // compile-pass"}, {"sha": "3905d285becb55a5cf42ac18915b8bf469a09079", "filename": "src/test/ui/removing-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fremoving-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Fremoving-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fremoving-extern-crate.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition 2018\n+// edition:2018\n // aux-build:removing-extern-crate.rs\n // run-rustfix\n // compile-pass"}, {"sha": "a44ca9d2d25c986a7acba0e44199878406e6bc38", "filename": "src/test/ui/rfc-2126-crate-paths/crate-path-non-absolute.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -15,6 +15,7 @@ struct S;\n pub mod m {\n     fn f() {\n         let s = ::m::crate::S; //~ ERROR failed to resolve\n+        let s1 = ::crate::S; //~ ERROR failed to resolve\n         let s2 = crate::S; // no error\n     }\n }"}, {"sha": "f16c84960776663322ea5620e8aa699358a0ca4e", "filename": "src/test/ui/rfc-2126-crate-paths/crate-path-non-absolute.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -1,9 +1,15 @@\n-error[E0433]: failed to resolve. Could not find `crate` in `m`\n+error[E0433]: failed to resolve. `crate` in paths can only be used in start position\n   --> $DIR/crate-path-non-absolute.rs:17:22\n    |\n LL |         let s = ::m::crate::S; //~ ERROR failed to resolve\n-   |                      ^^^^^ Could not find `crate` in `m`\n+   |                      ^^^^^ `crate` in paths can only be used in start position\n \n-error: aborting due to previous error\n+error[E0433]: failed to resolve. global paths cannot start with `crate`\n+  --> $DIR/crate-path-non-absolute.rs:18:20\n+   |\n+LL |         let s1 = ::crate::S; //~ ERROR failed to resolve\n+   |                    ^^^^^ global paths cannot start with `crate`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0433`."}, {"sha": "3ebb3a25d8d3551c46d6591f17157a660e15f7a0", "filename": "src/test/ui/rfc-2126-crate-paths/keyword-crate-as-identifier.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -11,5 +11,6 @@\n #![feature(crate_in_paths)]\n \n fn main() {\n-    let crate = 0; //~ ERROR failed to resolve. `crate` in paths can only be used in start position\n+    let crate = 0;\n+    //~^ ERROR expected unit struct/variant or constant, found module `crate`\n }"}, {"sha": "ec44fb4db0090e99c5e99e5fc36d234b29fcc3f0", "filename": "src/test/ui/rfc-2126-crate-paths/keyword-crate-as-identifier.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -1,9 +1,9 @@\n-error[E0433]: failed to resolve. `crate` in paths can only be used in start position\n+error[E0532]: expected unit struct/variant or constant, found module `crate`\n   --> $DIR/keyword-crate-as-identifier.rs:14:9\n    |\n-LL |     let crate = 0; //~ ERROR failed to resolve. `crate` in paths can only be used in start position\n-   |         ^^^^^ `crate` in paths can only be used in start position\n+LL |     let crate = 0;\n+   |         ^^^^^ not a unit struct/variant or constant\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0433`.\n+For more information about this error, try `rustc --explain E0532`."}, {"sha": "3bc468483bda2a1487ceeff1cd3119864fb4f761", "filename": "src/test/ui/rust-2018/async-ident-allowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition 2015\n+// edition:2015\n \n #![deny(rust_2018_compatibility)]\n "}, {"sha": "8a2b9c1f27213c19df0980019af787546c7be6bf", "filename": "src/test/ui/rust-2018/edition-lint-paths.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -68,7 +68,7 @@ fn main() {\n     //~^ ERROR absolute\n     //~| WARN this was previously accepted\n     let x = bar::Bar;\n-    let x = ::crate::bar::Bar;\n+    let x = crate::bar::Bar;\n     let x = self::bar::Bar;\n     foo::test();\n "}, {"sha": "b6e5d5a8afbf1cddc5e3e5f7e41c1db5730583e5", "filename": "src/test/ui/rust-2018/edition-lint-paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -68,7 +68,7 @@ fn main() {\n     //~^ ERROR absolute\n     //~| WARN this was previously accepted\n     let x = bar::Bar;\n-    let x = ::crate::bar::Bar;\n+    let x = crate::bar::Bar;\n     let x = self::bar::Bar;\n     foo::test();\n "}, {"sha": "fc81ab08f624d480ee5491354e3cfb911653f98a", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic-in-2018.fixed", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.fixed?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -10,12 +10,11 @@\n \n // aux-build:edition-lint-paths.rs\n // run-rustfix\n-// compile-flags:--edition 2018\n+// edition:2018\n \n // The \"normal case\". Ideally we would remove the `extern crate` here,\n // but we don't.\n \n-#![feature(rust_2018_preview)]\n #![deny(rust_2018_idioms)]\n #![allow(dead_code)]\n "}, {"sha": "72751f2080cc9b2d28f31ab179189438679dc9a1", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic-in-2018.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -10,12 +10,11 @@\n \n // aux-build:edition-lint-paths.rs\n // run-rustfix\n-// compile-flags:--edition 2018\n+// edition:2018\n \n // The \"normal case\". Ideally we would remove the `extern crate` here,\n // but we don't.\n \n-#![feature(rust_2018_preview)]\n #![deny(rust_2018_idioms)]\n #![allow(dead_code)]\n "}, {"sha": "0ecfd4e4a2ca3076523bffe3ebf6a840dd5fcda9", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic-in-2018.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -1,18 +1,18 @@\n error: unused extern crate\n-  --> $DIR/extern-crate-idiomatic-in-2018.rs:22:1\n+  --> $DIR/extern-crate-idiomatic-in-2018.rs:21:1\n    |\n LL | extern crate edition_lint_paths;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n    |\n note: lint level defined here\n-  --> $DIR/extern-crate-idiomatic-in-2018.rs:19:9\n+  --> $DIR/extern-crate-idiomatic-in-2018.rs:18:9\n    |\n LL | #![deny(rust_2018_idioms)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: #[deny(unused_extern_crates)] implied by #[deny(rust_2018_idioms)]\n \n error: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/extern-crate-idiomatic-in-2018.rs:25:1\n+  --> $DIR/extern-crate-idiomatic-in-2018.rs:24:1\n    |\n LL | extern crate edition_lint_paths as bar;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `use`"}, {"sha": "deb80411bbf6405ed809afe2c6c113fbb737ca9c", "filename": "src/test/ui/rust-2018/issue-52202-use-suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --edition 2018\n+// edition:2018\n \n // The local `use` suggestion should start with `crate::` (but the\n // standard-library suggestions should not, obviously)."}, {"sha": "6ad57a15465d37a7db96fb90e922566d74166b70", "filename": "src/test/ui/unboxed-closures/unboxed-closure-region.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.nll.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/unboxed-closure-region.rs:18:12\n+   |\n+LL |         || x //~ ERROR `x` does not live long enough\n+   |         -- ^ borrowed value does not live long enough\n+   |         |\n+   |         value captured here\n+LL |     };\n+   |     - `x` dropped here while still borrowed\n+LL |     _f;\n+   |     -- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "da6dbc6e74f86b7cfe588d05dd3dc0dd082ada34", "filename": "src/test/ui/unboxed-closures/unboxed-closure-region.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that an unboxed closure that captures a free variable by\n // reference cannot escape the region of that variable.\n+\n+\n fn main() {\n     let _f = {\n         let x = 0;\n         || x //~ ERROR `x` does not live long enough\n     };\n+    _f;\n }"}, {"sha": "f85f3afff70e8ff0a63221c2977da7be535299f7", "filename": "src/test/ui/unboxed-closures/unboxed-closure-region.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -7,6 +7,7 @@ LL |         || x //~ ERROR `x` does not live long enough\n    |         capture occurs here\n LL |     };\n    |     - borrowed value only lives until here\n+LL |     _f;\n LL | }\n    | - borrowed value needs to live until here\n "}, {"sha": "cadda398c6f339a81965abb467bcc1cddf28852a", "filename": "src/test/ui/unboxed-closures/unboxed-closures-borrow-conflict.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.nll.stderr?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -0,0 +1,15 @@\n+error[E0503]: cannot use `x` because it was mutably borrowed\n+  --> $DIR/unboxed-closures-borrow-conflict.rs:19:14\n+   |\n+LL |     let f = || x += 1;\n+   |             -- - borrow occurs due to use of `x` in closure\n+   |             |\n+   |             borrow of `x` occurs here\n+LL |     let _y = x; //~ ERROR cannot use `x` because it was mutably borrowed\n+   |              ^ use of borrowed `x`\n+LL |     f;\n+   |     - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0503`."}, {"sha": "aa50fb837733c6ed729ca2254c462489344fd443", "filename": "src/test/ui/unboxed-closures/unboxed-closures-borrow-conflict.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de21ea8ff536430885d50e882026953c2f0684d4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.rs?ref=de21ea8ff536430885d50e882026953c2f0684d4", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that an unboxed closure that mutates a free variable will\n // cause borrow conflicts.\n \n+\n+\n fn main() {\n     let mut x = 0;\n     let f = || x += 1;\n     let _y = x; //~ ERROR cannot use `x` because it was mutably borrowed\n+    f;\n }"}]}