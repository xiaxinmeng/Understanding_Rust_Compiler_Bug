{"sha": "7e62240801cc5f7aa70300fb0f92f54370eabea6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNjIyNDA4MDFjYzVmN2FhNzAzMDBmYjBmOTJmNTQzNzBlYWJlYTY=", "commit": {"author": {"name": "Marko Mijalkovic", "email": "marko.mijalkovic97@gmail.com", "date": "2020-05-10T20:06:33Z"}, "committer": {"name": "Marko Mijalkovic", "email": "marko.mijalkovic97@gmail.com", "date": "2020-05-10T20:06:33Z"}, "message": "Add lld_link_script to TargetOptions", "tree": {"sha": "14a8d59f31a6924f173652f4e5232209598990a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14a8d59f31a6924f173652f4e5232209598990a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e62240801cc5f7aa70300fb0f92f54370eabea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e62240801cc5f7aa70300fb0f92f54370eabea6", "html_url": "https://github.com/rust-lang/rust/commit/7e62240801cc5f7aa70300fb0f92f54370eabea6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e62240801cc5f7aa70300fb0f92f54370eabea6/comments", "author": {"login": "overdrivenpotato", "id": 5241210, "node_id": "MDQ6VXNlcjUyNDEyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5241210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/overdrivenpotato", "html_url": "https://github.com/overdrivenpotato", "followers_url": "https://api.github.com/users/overdrivenpotato/followers", "following_url": "https://api.github.com/users/overdrivenpotato/following{/other_user}", "gists_url": "https://api.github.com/users/overdrivenpotato/gists{/gist_id}", "starred_url": "https://api.github.com/users/overdrivenpotato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/overdrivenpotato/subscriptions", "organizations_url": "https://api.github.com/users/overdrivenpotato/orgs", "repos_url": "https://api.github.com/users/overdrivenpotato/repos", "events_url": "https://api.github.com/users/overdrivenpotato/events{/privacy}", "received_events_url": "https://api.github.com/users/overdrivenpotato/received_events", "type": "User", "site_admin": false}, "committer": {"login": "overdrivenpotato", "id": 5241210, "node_id": "MDQ6VXNlcjUyNDEyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5241210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/overdrivenpotato", "html_url": "https://github.com/overdrivenpotato", "followers_url": "https://api.github.com/users/overdrivenpotato/followers", "following_url": "https://api.github.com/users/overdrivenpotato/following{/other_user}", "gists_url": "https://api.github.com/users/overdrivenpotato/gists{/gist_id}", "starred_url": "https://api.github.com/users/overdrivenpotato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/overdrivenpotato/subscriptions", "organizations_url": "https://api.github.com/users/overdrivenpotato/orgs", "repos_url": "https://api.github.com/users/overdrivenpotato/repos", "events_url": "https://api.github.com/users/overdrivenpotato/events{/privacy}", "received_events_url": "https://api.github.com/users/overdrivenpotato/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8961b083762d3660ca21110836b547e8b3f19022", "url": "https://api.github.com/repos/rust-lang/rust/commits/8961b083762d3660ca21110836b547e8b3f19022", "html_url": "https://github.com/rust-lang/rust/commit/8961b083762d3660ca21110836b547e8b3f19022"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "ab59a1c5f4879bace90bfd403769d8297b703e0e", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7e62240801cc5f7aa70300fb0f92f54370eabea6/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62240801cc5f7aa70300fb0f92f54370eabea6/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=7e62240801cc5f7aa70300fb0f92f54370eabea6", "patch": "@@ -1179,6 +1179,34 @@ fn add_pre_link_args(\n     cmd.args(&sess.opts.debugging_opts.pre_link_args);\n }\n \n+/// Add an LLD link script embedded in the target, if applicable.\n+fn add_lld_link_script(\n+    cmd: &mut dyn Linker,\n+    sess: &Session,\n+    flavor: LinkerFlavor,\n+    tmpdir: &Path,\n+    crate_type: CrateType,\n+) {\n+    match (flavor, crate_type, &sess.target.target.options.lld_link_script) {\n+        (\n+            LinkerFlavor::Lld(LldFlavor::Ld),\n+            CrateType::Cdylib | CrateType::Executable,\n+            Some(script),\n+        ) => {\n+            let file_name = [\"rustc\", &sess.target.target.llvm_target, \"linkfile.ld\"].join(\"-\");\n+\n+            let path = tmpdir.join(file_name);\n+            if let Err(e) = fs::write(&path, script) {\n+                sess.fatal(&format!(\"failed to write link script to {}: {}\", path.display(), e));\n+            }\n+\n+            cmd.arg(\"--script\");\n+            cmd.arg(path);\n+        }\n+        _ => {}\n+    }\n+}\n+\n /// Add arbitrary \"user defined\" args defined from command line and by `#[link_args]` attributes.\n /// FIXME: Determine where exactly these args need to be inserted.\n fn add_user_defined_link_args(\n@@ -1421,6 +1449,9 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // NO-OPT-OUT, OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n     add_pre_link_args(cmd, sess, flavor, crate_type);\n \n+    // NO-OPT-OUT\n+    add_lld_link_script(cmd, sess, flavor, tmpdir, crate_type);\n+\n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.target.target.options.is_like_fuchsia {\n         let prefix = match sess.opts.debugging_opts.sanitizer {"}, {"sha": "eb38dee63b68f69ad0f4d3ea680944d61a642351", "filename": "src/librustc_target/spec/mipsel_sony_psp.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7e62240801cc5f7aa70300fb0f92f54370eabea6/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62240801cc5f7aa70300fb0f92f54370eabea6/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp.rs?ref=7e62240801cc5f7aa70300fb0f92f54370eabea6", "patch": "@@ -1,28 +1,14 @@\n use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, RelocModel};\n use crate::spec::{Target, TargetOptions, TargetResult};\n-use std::{env, fs, io, path::PathBuf};\n \n // The PSP has custom linker requirements.\n const LINKER_SCRIPT: &str = include_str!(\"./mipsel_sony_psp_linker_script.ld\");\n \n-fn write_script() -> io::Result<PathBuf> {\n-    let path = env::temp_dir().join(\"rustc-mipsel-sony-psp-linkfile.ld\");\n-    fs::write(&path, LINKER_SCRIPT)?;\n-    Ok(path)\n-}\n-\n pub fn target() -> TargetResult {\n-    let script = write_script().map_err(|e| format!(\"failed to write link script: {}\", e))?;\n-\n     let mut pre_link_args = LinkArgs::new();\n     pre_link_args.insert(\n         LinkerFlavor::Lld(LldFlavor::Ld),\n-        vec![\n-            \"--eh-frame-hdr\".to_string(),\n-            \"--emit-relocs\".to_string(),\n-            \"--script\".to_string(),\n-            script.display().to_string(),\n-        ],\n+        vec![\"--eh-frame-hdr\".to_string(), \"--emit-relocs\".to_string()],\n     );\n \n     Ok(Target {\n@@ -49,6 +35,7 @@ pub fn target() -> TargetResult {\n             // PSP does not support trap-on-condition instructions.\n             llvm_args: vec![\"-mno-check-zero-division\".to_string()],\n             pre_link_args,\n+            lld_link_script: Some(LINKER_SCRIPT.to_string()),\n             ..Default::default()\n         },\n     })"}, {"sha": "91dfa1550f6265b061848e570acf551beead5d77", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e62240801cc5f7aa70300fb0f92f54370eabea6/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62240801cc5f7aa70300fb0f92f54370eabea6/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=7e62240801cc5f7aa70300fb0f92f54370eabea6", "patch": "@@ -668,6 +668,9 @@ pub struct TargetOptions {\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n+    /// Optional LLD link script applied to `dylib` and `executable` crate\n+    /// types. This is a string containing the script, not a path.\n+    pub lld_link_script: Option<String>,\n \n     /// Environment variables to be set for the linker invocation.\n     pub link_env: Vec<(String, String)>,\n@@ -897,6 +900,7 @@ impl Default for TargetOptions {\n             pre_link_args: LinkArgs::new(),\n             pre_link_args_crt: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n+            lld_link_script: None,\n             asm_args: Vec::new(),\n             cpu: \"generic\".to_string(),\n             features: String::new(),\n@@ -1246,6 +1250,7 @@ impl Target {\n         key!(post_link_objects, list);\n         key!(post_link_objects_crt, list);\n         key!(post_link_args, link_args);\n+        key!(lld_link_script, optional);\n         key!(link_env, env);\n         key!(link_env_remove, list);\n         key!(asm_args, list);\n@@ -1475,6 +1480,7 @@ impl ToJson for Target {\n         target_option_val!(post_link_objects);\n         target_option_val!(post_link_objects_crt);\n         target_option_val!(link_args - post_link_args);\n+        target_option_val!(lld_link_script);\n         target_option_val!(env - link_env);\n         target_option_val!(link_env_remove);\n         target_option_val!(asm_args);"}]}