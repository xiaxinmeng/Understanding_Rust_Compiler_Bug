{"sha": "64d0143c2c5f627e246822b4e2f501e563ec63cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZDAxNDNjMmM1ZjYyN2UyNDY4MjJiNGUyZjUwMWU1NjNlYzYzY2M=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T09:33:18Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-01T17:54:55Z"}, "message": "pretty: remove ParseSess dependency", "tree": {"sha": "480be10e878405f57051db39ecc25b3e1cd9e68f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/480be10e878405f57051db39ecc25b3e1cd9e68f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64d0143c2c5f627e246822b4e2f501e563ec63cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64d0143c2c5f627e246822b4e2f501e563ec63cc", "html_url": "https://github.com/rust-lang/rust/commit/64d0143c2c5f627e246822b4e2f501e563ec63cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64d0143c2c5f627e246822b4e2f501e563ec63cc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e03d1064f0d98961b83885ce951351ae57cc7aad", "url": "https://api.github.com/repos/rust-lang/rust/commits/e03d1064f0d98961b83885ce951351ae57cc7aad", "html_url": "https://github.com/rust-lang/rust/commit/e03d1064f0d98961b83885ce951351ae57cc7aad"}], "stats": {"total": 58, "additions": 23, "deletions": 35}, "files": [{"sha": "5cd9e9a4a58485e7fc7a88933720879b05278d8a", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/64d0143c2c5f627e246822b4e2f501e563ec63cc/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d0143c2c5f627e246822b4e2f501e563ec63cc/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=64d0143c2c5f627e246822b4e2f501e563ec63cc", "patch": "@@ -392,14 +392,16 @@ pub fn print_after_parsing(\n         call_with_pp_support(&s, sess, None, move |annotation| {\n             debug!(\"pretty printing source code {:?}\", s);\n             let sess = annotation.sess();\n+            let parse = &sess.parse_sess;\n             *out = pprust::print_crate(\n                 sess.source_map(),\n-                &sess.parse_sess,\n                 krate,\n                 src_name,\n                 src,\n                 annotation.pp_ann(),\n                 false,\n+                parse.edition,\n+                &parse.injected_crate_name,\n             )\n         })\n     } else {\n@@ -432,14 +434,16 @@ pub fn print_after_hir_lowering<'tcx>(\n             call_with_pp_support(&s, tcx.sess, Some(tcx), move |annotation| {\n                 debug!(\"pretty printing source code {:?}\", s);\n                 let sess = annotation.sess();\n+                let parse = &sess.parse_sess;\n                 *out = pprust::print_crate(\n                     sess.source_map(),\n-                    &sess.parse_sess,\n                     krate,\n                     src_name,\n                     src,\n                     annotation.pp_ann(),\n                     true,\n+                    parse.edition,\n+                    &parse.injected_crate_name,\n                 )\n             })\n         }\n@@ -449,14 +453,8 @@ pub fn print_after_hir_lowering<'tcx>(\n             call_with_pp_support_hir(&s, tcx, move |annotation, krate| {\n                 debug!(\"pretty printing source code {:?}\", s);\n                 let sess = annotation.sess();\n-                *out = pprust_hir::print_crate(\n-                    sess.source_map(),\n-                    &sess.parse_sess,\n-                    krate,\n-                    src_name,\n-                    src,\n-                    annotation.pp_ann(),\n-                )\n+                let cm = sess.source_map();\n+                *out = pprust_hir::print_crate(cm, krate, src_name, src, annotation.pp_ann())\n             })\n         }\n "}, {"sha": "7beabacecc292b989ff80f624014476925dd2d10", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64d0143c2c5f627e246822b4e2f501e563ec63cc/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d0143c2c5f627e246822b4e2f501e563ec63cc/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=64d0143c2c5f627e246822b4e2f501e563ec63cc", "patch": "@@ -6,7 +6,6 @@ use syntax::ast;\n use syntax::print::pp::Breaks::{Consistent, Inconsistent};\n use syntax::print::pp::{self, Breaks};\n use syntax::print::pprust::{self, Comments, PrintState};\n-use syntax::sess::ParseSess;\n use syntax::util::parser::{self, AssocOp, Fixity};\n \n use crate::hir;\n@@ -142,13 +141,12 @@ pub const INDENT_UNIT: usize = 4;\n /// it can scan the input text for comments to copy forward.\n pub fn print_crate<'a>(\n     cm: &'a SourceMap,\n-    sess: &ParseSess,\n     krate: &hir::Crate<'_>,\n     filename: FileName,\n     input: String,\n     ann: &'a dyn PpAnn,\n ) -> String {\n-    let mut s = State::new_from_input(cm, sess, filename, input, ann);\n+    let mut s = State::new_from_input(cm, filename, input, ann);\n \n     // When printing the AST, we sometimes need to inject `#[no_std]` here.\n     // Since you can't compile the HIR, it's not necessary.\n@@ -161,12 +159,11 @@ pub fn print_crate<'a>(\n impl<'a> State<'a> {\n     pub fn new_from_input(\n         cm: &'a SourceMap,\n-        sess: &ParseSess,\n         filename: FileName,\n         input: String,\n         ann: &'a dyn PpAnn,\n     ) -> State<'a> {\n-        State { s: pp::mk_printer(), comments: Some(Comments::new(cm, sess, filename, input)), ann }\n+        State { s: pp::mk_printer(), comments: Some(Comments::new(cm, filename, input)), ann }\n     }\n }\n "}, {"sha": "624d1c70c158d44becd6d202020a76b3281d358e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/64d0143c2c5f627e246822b4e2f501e563ec63cc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d0143c2c5f627e246822b4e2f501e563ec63cc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=64d0143c2c5f627e246822b4e2f501e563ec63cc", "patch": "@@ -5,15 +5,16 @@ use crate::attr;\n use crate::print::pp::Breaks::{Consistent, Inconsistent};\n use crate::print::pp::{self, Breaks};\n use crate::ptr::P;\n-use crate::sess::ParseSess;\n use crate::token::{self, BinOpToken, DelimToken, Nonterminal, Token, TokenKind};\n use crate::tokenstream::{self, TokenStream, TokenTree};\n use crate::util::classify;\n use crate::util::comments;\n use crate::util::parser::{self, AssocOp, Fixity};\n \n+use rustc_data_structures::sync::Once;\n+use rustc_span::edition::Edition;\n use rustc_span::source_map::{dummy_spanned, SourceMap, Spanned};\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{BytePos, FileName, Span};\n \n use std::borrow::Cow;\n@@ -54,13 +55,8 @@ pub struct Comments<'a> {\n }\n \n impl<'a> Comments<'a> {\n-    pub fn new(\n-        cm: &'a SourceMap,\n-        sess: &ParseSess,\n-        filename: FileName,\n-        input: String,\n-    ) -> Comments<'a> {\n-        let comments = comments::gather_comments(sess, filename, input);\n+    pub fn new(cm: &'a SourceMap, filename: FileName, input: String) -> Comments<'a> {\n+        let comments = comments::gather_comments(cm, filename, input);\n         Comments { cm, comments, current: 0 }\n     }\n \n@@ -102,21 +98,22 @@ crate const INDENT_UNIT: usize = 4;\n /// it can scan the input text for comments to copy forward.\n pub fn print_crate<'a>(\n     cm: &'a SourceMap,\n-    sess: &ParseSess,\n     krate: &ast::Crate,\n     filename: FileName,\n     input: String,\n     ann: &'a dyn PpAnn,\n     is_expanded: bool,\n+    edition: Edition,\n+    injected_crate_name: &Once<Symbol>,\n ) -> String {\n     let mut s = State {\n         s: pp::mk_printer(),\n-        comments: Some(Comments::new(cm, sess, filename, input)),\n+        comments: Some(Comments::new(cm, filename, input)),\n         ann,\n         is_expanded,\n     };\n \n-    if is_expanded && sess.injected_crate_name.try_get().is_some() {\n+    if is_expanded && injected_crate_name.try_get().is_some() {\n         // We need to print `#![no_std]` (and its feature gate) so that\n         // compiling pretty-printed source won't inject libstd again.\n         // However, we don't want these attributes in the AST because\n@@ -130,7 +127,7 @@ pub fn print_crate<'a>(\n \n         // Currently, in Rust 2018 we don't have `extern crate std;` at the crate\n         // root, so this is not needed, and actually breaks things.\n-        if sess.edition == rustc_span::edition::Edition::Edition2015 {\n+        if edition == Edition::Edition2015 {\n             // `#![no_std]`\n             let no_std_meta = attr::mk_word_item(ast::Ident::with_dummy_span(sym::no_std));\n             let fake_attr = attr::mk_attr_inner(no_std_meta);\n@@ -144,10 +141,7 @@ pub fn print_crate<'a>(\n     s.s.eof()\n }\n \n-pub fn to_string<F>(f: F) -> String\n-where\n-    F: FnOnce(&mut State<'_>),\n-{\n+pub fn to_string(f: impl FnOnce(&mut State<'_>)) -> String {\n     let mut printer =\n         State { s: pp::mk_printer(), comments: None, ann: &NoAnn, is_expanded: false };\n     f(&mut printer);"}, {"sha": "de33189884c3a132793589e1ddb1688bedfc9437", "filename": "src/libsyntax/util/comments.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64d0143c2c5f627e246822b4e2f501e563ec63cc/src%2Flibsyntax%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d0143c2c5f627e246822b4e2f501e563ec63cc/src%2Flibsyntax%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fcomments.rs?ref=64d0143c2c5f627e246822b4e2f501e563ec63cc", "patch": "@@ -1,7 +1,6 @@\n pub use CommentStyle::*;\n \n use crate::ast;\n-use crate::sess::ParseSess;\n \n use rustc_span::source_map::SourceMap;\n use rustc_span::{BytePos, CharPos, FileName, Pos};\n@@ -191,8 +190,8 @@ fn split_block_comment_into_lines(text: &str, col: CharPos) -> Vec<String> {\n \n // it appears this function is called only from pprust... that's\n // probably not a good thing.\n-crate fn gather_comments(sess: &ParseSess, path: FileName, src: String) -> Vec<Comment> {\n-    let cm = SourceMap::new(sess.source_map().path_mapping().clone());\n+crate fn gather_comments(sm: &SourceMap, path: FileName, src: String) -> Vec<Comment> {\n+    let cm = SourceMap::new(sm.path_mapping().clone());\n     let source_file = cm.new_source_file(path, src);\n     let text = (*source_file.src.as_ref().unwrap()).clone();\n "}]}