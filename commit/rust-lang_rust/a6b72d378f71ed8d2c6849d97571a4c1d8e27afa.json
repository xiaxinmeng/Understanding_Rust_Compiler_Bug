{"sha": "a6b72d378f71ed8d2c6849d97571a4c1d8e27afa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YjcyZDM3OGY3MWVkOGQyYzY4NDlkOTc1NzFhNGMxZDhlMjdhZmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-05T09:54:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-05T09:54:34Z"}, "message": "Auto merge of #6542 - rail-rain:ptr_as_ptr, r=flip1995\n\nAdd a new lint `ptr_as_ptr`\n\nThis PR adds a new lint `ptr_as_ptr` which checks for `as` casts between raw pointers without changing its mutability and suggest replacing it with `pointer::cast`. Closes #5890.\n\nOpen question: should this lint be `pedantic` or `style`? I set it `pedantic` for now because the original post suggests using it, but I think the lint also fits well to `style`.\n\n---\n\nchangelog: New lint `ptr_as_ptr`", "tree": {"sha": "7ad9cbc0a7c72571ed4d204852946121bedaab87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ad9cbc0a7c72571ed4d204852946121bedaab87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa", "html_url": "https://github.com/rust-lang/rust/commit/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "311186b9bba220a38290b1c888864d7251c30882", "url": "https://api.github.com/repos/rust-lang/rust/commits/311186b9bba220a38290b1c888864d7251c30882", "html_url": "https://github.com/rust-lang/rust/commit/311186b9bba220a38290b1c888864d7251c30882"}, {"sha": "dfa5d7e818c32ea48bc141799276f700ab9d8fb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa5d7e818c32ea48bc141799276f700ab9d8fb7", "html_url": "https://github.com/rust-lang/rust/commit/dfa5d7e818c32ea48bc141799276f700ab9d8fb7"}], "stats": {"total": 251, "additions": 247, "deletions": 4}, "files": [{"sha": "64864c2e2780dbee9ad45976b4c978f744a46265", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a6b72d378f71ed8d2c6849d97571a4c1d8e27afa", "patch": "@@ -2141,6 +2141,7 @@ Released 2018-09-13\n [`print_with_newline`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_with_newline\n [`println_empty_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#println_empty_string\n [`ptr_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg\n+[`ptr_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr\n [`ptr_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_eq\n [`ptr_offset_with_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast\n [`pub_enum_variant_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#pub_enum_variant_names"}, {"sha": "37a56bc20c8c072a88e026ef09242d0a320d4d8b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a6b72d378f71ed8d2c6849d97571a4c1d8e27afa", "patch": "@@ -912,6 +912,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &types::LET_UNIT_VALUE,\n         &types::LINKEDLIST,\n         &types::OPTION_OPTION,\n+        &types::PTR_AS_PTR,\n         &types::RC_BUFFER,\n         &types::REDUNDANT_ALLOCATION,\n         &types::TYPE_COMPLEXITY,\n@@ -1222,6 +1223,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box strings::StringToString);\n     store.register_late_pass(|| box zero_sized_map_values::ZeroSizedMapValues);\n     store.register_late_pass(|| box vec_init_then_push::VecInitThenPush::default());\n+    store.register_late_pass(move || box types::PtrAsPtr::new(msrv));\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1348,6 +1350,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::LET_UNIT_VALUE),\n         LintId::of(&types::LINKEDLIST),\n         LintId::of(&types::OPTION_OPTION),\n+        LintId::of(&types::PTR_AS_PTR),\n         LintId::of(&unicode::NON_ASCII_LITERAL),\n         LintId::of(&unicode::UNICODE_NOT_NFC),\n         LintId::of(&unnested_or_patterns::UNNESTED_OR_PATTERNS),"}, {"sha": "b21f81bd517f70b45797bada442c0b3c50b7f842", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 97, "deletions": 4, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=a6b72d378f71ed8d2c6849d97571a4c1d8e27afa", "patch": "@@ -19,7 +19,8 @@ use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::TypeFoldable;\n-use rustc_middle::ty::{self, InferTy, Ty, TyCtxt, TyS, TypeckResults};\n+use rustc_middle::ty::{self, InferTy, Ty, TyCtxt, TyS, TypeAndMut, TypeckResults};\n+use rustc_semver::RustcVersion;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::Span;\n@@ -30,11 +31,13 @@ use rustc_typeck::hir_ty_to_ty;\n \n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n+use crate::utils::sugg::Sugg;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, indent_of, int_bits, is_type_diagnostic_item,\n-    last_path_segment, match_def_path, match_path, method_chain_args, multispan_sugg, numeric_literal::NumericLiteral,\n-    qpath_res, reindent_multiline, sext, snippet, snippet_opt, snippet_with_applicability, snippet_with_macro_callsite,\n-    span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, unsext,\n+    last_path_segment, match_def_path, match_path, meets_msrv, method_chain_args, multispan_sugg,\n+    numeric_literal::NumericLiteral, qpath_res, reindent_multiline, sext, snippet, snippet_opt,\n+    snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg,\n+    span_lint_and_then, unsext,\n };\n \n declare_clippy_lint! {\n@@ -2878,3 +2881,93 @@ impl<'tcx> LateLintPass<'tcx> for RefToMut {\n         }\n     }\n }\n+\n+const PTR_AS_PTR_MSRV: RustcVersion = RustcVersion::new(1, 38, 0);\n+\n+declare_clippy_lint! {\n+    /// **What it does:**\n+    /// Checks for `as` casts between raw pointers without changing its mutability,\n+    /// namely `*const T` to `*const U` and `*mut T` to `*mut U`.\n+    ///\n+    /// **Why is this bad?**\n+    /// Though `as` casts between raw pointers is not terrible, `pointer::cast` is safer because\n+    /// it cannot accidentally change the pointer's mutability nor cast the pointer to other types like `usize`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let ptr: *const u32 = &42_u32;\n+    /// let mut_ptr: *mut u32 = &mut 42_u32;\n+    /// let _ = ptr as *const i32;\n+    /// let _ = mut_ptr as *mut i32;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let ptr: *const u32 = &42_u32;\n+    /// let mut_ptr: *mut u32 = &mut 42_u32;\n+    /// let _ = ptr.cast::<i32>();\n+    /// let _ = mut_ptr.cast::<i32>();\n+    /// ```\n+    pub PTR_AS_PTR,\n+    pedantic,\n+    \"casting using `as` from and to raw pointers that doesn't change its mutability, where `pointer::cast` could take the place of `as`\"\n+}\n+\n+pub struct PtrAsPtr {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl PtrAsPtr {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(PtrAsPtr => [PTR_AS_PTR]);\n+\n+impl<'tcx> LateLintPass<'tcx> for PtrAsPtr {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if !meets_msrv(self.msrv.as_ref(), &PTR_AS_PTR_MSRV) {\n+            return;\n+        }\n+\n+        if expr.span.from_expansion() {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::Cast(cast_expr, cast_to_hir_ty) = expr.kind;\n+            let (cast_from, cast_to) = (cx.typeck_results().expr_ty(cast_expr), cx.typeck_results().expr_ty(expr));\n+            if let ty::RawPtr(TypeAndMut { mutbl: from_mutbl, .. }) = cast_from.kind();\n+            if let ty::RawPtr(TypeAndMut { ty: to_pointee_ty, mutbl: to_mutbl }) = cast_to.kind();\n+            if matches!((from_mutbl, to_mutbl),\n+                (Mutability::Not, Mutability::Not) | (Mutability::Mut, Mutability::Mut));\n+            // The `U` in `pointer::cast` have to be `Sized`\n+            // as explained here: https://github.com/rust-lang/rust/issues/60602.\n+            if to_pointee_ty.is_sized(cx.tcx.at(expr.span), cx.param_env);\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+                let cast_expr_sugg = Sugg::hir_with_applicability(cx, cast_expr, \"_\", &mut applicability);\n+                let turbofish = match &cast_to_hir_ty.kind {\n+                        TyKind::Infer => Cow::Borrowed(\"\"),\n+                        TyKind::Ptr(mut_ty) if matches!(mut_ty.ty.kind, TyKind::Infer) => Cow::Borrowed(\"\"),\n+                        _ => Cow::Owned(format!(\"::<{}>\", to_pointee_ty)),\n+                    };\n+                span_lint_and_sugg(\n+                    cx,\n+                    PTR_AS_PTR,\n+                    expr.span,\n+                    \"`as` casting between raw pointers without changing its mutability\",\n+                    \"try `pointer::cast`, a safer alternative\",\n+                    format!(\"{}.cast{}()\", cast_expr_sugg.maybe_par(), turbofish),\n+                    applicability,\n+                );\n+            }\n+        }\n+    }\n+\n+    extract_msrv_attr!(LateContext);\n+}"}, {"sha": "8346a9454f4eee45040c9bcae8905de7cd64c494", "filename": "tests/ui/ptr_as_ptr.fixed", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa/tests%2Fui%2Fptr_as_ptr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa/tests%2Fui%2Fptr_as_ptr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_as_ptr.fixed?ref=a6b72d378f71ed8d2c6849d97571a4c1d8e27afa", "patch": "@@ -0,0 +1,50 @@\n+// run-rustfix\n+\n+#![warn(clippy::ptr_as_ptr)]\n+#![feature(custom_inner_attributes)]\n+\n+fn main() {\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    let _ = ptr.cast::<i32>();\n+    let _ = mut_ptr.cast::<i32>();\n+\n+    // Make sure the lint can handle the difference in their operator precedences.\n+    unsafe {\n+        let ptr_ptr: *const *const u32 = &ptr;\n+        let _ = (*ptr_ptr).cast::<i32>();\n+    }\n+\n+    // Changes in mutability. Do not lint this.\n+    let _ = ptr as *mut i32;\n+    let _ = mut_ptr as *const i32;\n+\n+    // `pointer::cast` cannot perform unsized coercions unlike `as`. Do not lint this.\n+    let ptr_of_array: *const [u32; 4] = &[1, 2, 3, 4];\n+    let _ = ptr_of_array as *const [u32];\n+    let _ = ptr_of_array as *const dyn std::fmt::Debug;\n+\n+    // Ensure the lint doesn't produce unnecessary turbofish for inferred types.\n+    let _: *const i32 = ptr.cast();\n+    let _: *mut i32 = mut_ptr.cast();\n+}\n+\n+fn _msrv_1_37() {\n+    #![clippy::msrv = \"1.37\"]\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    // `pointer::cast` was stabilized in 1.38. Do not lint this\n+    let _ = ptr as *const i32;\n+    let _ = mut_ptr as *mut i32;\n+}\n+\n+fn _msrv_1_38() {\n+    #![clippy::msrv = \"1.38\"]\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    let _ = ptr.cast::<i32>();\n+    let _ = mut_ptr.cast::<i32>();\n+}"}, {"sha": "b68d4bc0aaca1f91cc3ed1244953124fe29aaf49", "filename": "tests/ui/ptr_as_ptr.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa/tests%2Fui%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa/tests%2Fui%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_as_ptr.rs?ref=a6b72d378f71ed8d2c6849d97571a4c1d8e27afa", "patch": "@@ -0,0 +1,50 @@\n+// run-rustfix\n+\n+#![warn(clippy::ptr_as_ptr)]\n+#![feature(custom_inner_attributes)]\n+\n+fn main() {\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    let _ = ptr as *const i32;\n+    let _ = mut_ptr as *mut i32;\n+\n+    // Make sure the lint can handle the difference in their operator precedences.\n+    unsafe {\n+        let ptr_ptr: *const *const u32 = &ptr;\n+        let _ = *ptr_ptr as *const i32;\n+    }\n+\n+    // Changes in mutability. Do not lint this.\n+    let _ = ptr as *mut i32;\n+    let _ = mut_ptr as *const i32;\n+\n+    // `pointer::cast` cannot perform unsized coercions unlike `as`. Do not lint this.\n+    let ptr_of_array: *const [u32; 4] = &[1, 2, 3, 4];\n+    let _ = ptr_of_array as *const [u32];\n+    let _ = ptr_of_array as *const dyn std::fmt::Debug;\n+\n+    // Ensure the lint doesn't produce unnecessary turbofish for inferred types.\n+    let _: *const i32 = ptr as *const _;\n+    let _: *mut i32 = mut_ptr as _;\n+}\n+\n+fn _msrv_1_37() {\n+    #![clippy::msrv = \"1.37\"]\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    // `pointer::cast` was stabilized in 1.38. Do not lint this\n+    let _ = ptr as *const i32;\n+    let _ = mut_ptr as *mut i32;\n+}\n+\n+fn _msrv_1_38() {\n+    #![clippy::msrv = \"1.38\"]\n+    let ptr: *const u32 = &42_u32;\n+    let mut_ptr: *mut u32 = &mut 42_u32;\n+\n+    let _ = ptr as *const i32;\n+    let _ = mut_ptr as *mut i32;\n+}"}, {"sha": "854906dc111dfec2bcd5a4dc3852ee99f5a2ec74", "filename": "tests/ui/ptr_as_ptr.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa/tests%2Fui%2Fptr_as_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6b72d378f71ed8d2c6849d97571a4c1d8e27afa/tests%2Fui%2Fptr_as_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_as_ptr.stderr?ref=a6b72d378f71ed8d2c6849d97571a4c1d8e27afa", "patch": "@@ -0,0 +1,46 @@\n+error: `as` casting between raw pointers without changing its mutability\n+  --> $DIR/ptr_as_ptr.rs:10:13\n+   |\n+LL |     let _ = ptr as *const i32;\n+   |             ^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<i32>()`\n+   |\n+   = note: `-D clippy::ptr-as-ptr` implied by `-D warnings`\n+\n+error: `as` casting between raw pointers without changing its mutability\n+  --> $DIR/ptr_as_ptr.rs:11:13\n+   |\n+LL |     let _ = mut_ptr as *mut i32;\n+   |             ^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mut_ptr.cast::<i32>()`\n+\n+error: `as` casting between raw pointers without changing its mutability\n+  --> $DIR/ptr_as_ptr.rs:16:17\n+   |\n+LL |         let _ = *ptr_ptr as *const i32;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*ptr_ptr).cast::<i32>()`\n+\n+error: `as` casting between raw pointers without changing its mutability\n+  --> $DIR/ptr_as_ptr.rs:29:25\n+   |\n+LL |     let _: *const i32 = ptr as *const _;\n+   |                         ^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast()`\n+\n+error: `as` casting between raw pointers without changing its mutability\n+  --> $DIR/ptr_as_ptr.rs:30:23\n+   |\n+LL |     let _: *mut i32 = mut_ptr as _;\n+   |                       ^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mut_ptr.cast()`\n+\n+error: `as` casting between raw pointers without changing its mutability\n+  --> $DIR/ptr_as_ptr.rs:48:13\n+   |\n+LL |     let _ = ptr as *const i32;\n+   |             ^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<i32>()`\n+\n+error: `as` casting between raw pointers without changing its mutability\n+  --> $DIR/ptr_as_ptr.rs:49:13\n+   |\n+LL |     let _ = mut_ptr as *mut i32;\n+   |             ^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mut_ptr.cast::<i32>()`\n+\n+error: aborting due to 7 previous errors\n+"}]}