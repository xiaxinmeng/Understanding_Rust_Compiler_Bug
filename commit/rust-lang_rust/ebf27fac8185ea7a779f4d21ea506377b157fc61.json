{"sha": "ebf27fac8185ea7a779f4d21ea506377b157fc61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZjI3ZmFjODE4NWVhN2E3NzlmNGQyMWVhNTA2Mzc3YjE1N2ZjNjE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-03-13T21:01:35Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-03-20T18:11:16Z"}, "message": "Revised span-to-lines conversion to produce an empty vec on DUMMY_SP.\n\nThis required revising some of the client code to stop relying on\nthe returned set of lines being non-empty.", "tree": {"sha": "e788a408afe34724f4af9d36407ebd4e362a1b45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e788a408afe34724f4af9d36407ebd4e362a1b45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebf27fac8185ea7a779f4d21ea506377b157fc61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf27fac8185ea7a779f4d21ea506377b157fc61", "html_url": "https://github.com/rust-lang/rust/commit/ebf27fac8185ea7a779f4d21ea506377b157fc61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebf27fac8185ea7a779f4d21ea506377b157fc61/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4c675c476c18b1a11041193f2f59d695b126bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c675c476c18b1a11041193f2f59d695b126bc8", "html_url": "https://github.com/rust-lang/rust/commit/f4c675c476c18b1a11041193f2f59d695b126bc8"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "94053b98cd75b47ef74343528779dce888b7e2dc", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf27fac8185ea7a779f4d21ea506377b157fc61/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf27fac8185ea7a779f4d21ea506377b157fc61/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=ebf27fac8185ea7a779f4d21ea506377b157fc61", "patch": "@@ -1574,7 +1574,7 @@ impl EmitterWriter {\n                 .span_to_lines(parts[0].span)\n                 .expect(\"span_to_lines failed when emitting suggestion\");\n \n-            assert!(!lines.lines.is_empty());\n+            assert!(!lines.lines.is_empty() || parts[0].span.is_dummy());\n \n             let line_start = sm.lookup_char_pos(parts[0].span.lo()).line;\n             draw_col_separator_no_space(&mut buffer, 1, max_line_num_len + 1);"}, {"sha": "a21314afb1e3b1d7a3bdd90121b69899262c2a62", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebf27fac8185ea7a779f4d21ea506377b157fc61/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf27fac8185ea7a779f4d21ea506377b157fc61/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=ebf27fac8185ea7a779f4d21ea506377b157fc61", "patch": "@@ -194,7 +194,7 @@ impl CodeSuggestion {\n                 let bounding_span = Span::with_root_ctxt(lo, hi);\n                 // The different spans might belong to different contexts, if so ignore suggestion.\n                 let lines = sm.span_to_lines(bounding_span).ok()?;\n-                assert!(!lines.lines.is_empty());\n+                assert!(!lines.lines.is_empty() || bounding_span.is_dummy());\n \n                 // We can't splice anything if the source is unavailable.\n                 if !sm.ensure_source_file_source_present(lines.file.clone()) {\n@@ -213,8 +213,8 @@ impl CodeSuggestion {\n                 let sf = &lines.file;\n                 let mut prev_hi = sm.lookup_char_pos(bounding_span.lo());\n                 prev_hi.col = CharPos::from_usize(0);\n-\n-                let mut prev_line = sf.get_line(lines.lines[0].line_index);\n+                let mut prev_line =\n+                    lines.lines.get(0).and_then(|line0| sf.get_line(line0.line_index));\n                 let mut buf = String::new();\n \n                 for part in &substitution.parts {"}, {"sha": "b1a243a50620c96852d6ae964ea79c9b972cf168", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ebf27fac8185ea7a779f4d21ea506377b157fc61/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf27fac8185ea7a779f4d21ea506377b157fc61/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=ebf27fac8185ea7a779f4d21ea506377b157fc61", "patch": "@@ -535,6 +535,10 @@ impl SourceMap {\n         let (lo, hi) = self.is_valid_span(sp)?;\n         assert!(hi.line >= lo.line);\n \n+        if sp.is_dummy() {\n+            return Ok(FileLines { file: lo.file, lines: Vec::new() });\n+        }\n+\n         let mut lines = Vec::with_capacity(hi.line - lo.line + 1);\n \n         // The span starts partway through the first line,\n@@ -545,6 +549,9 @@ impl SourceMap {\n         // and to the end of the line. Be careful because the line\n         // numbers in Loc are 1-based, so we subtract 1 to get 0-based\n         // lines.\n+        //\n+        // FIXME: now that we handle DUMMY_SP up above, we should consider\n+        // aseerting the line numbers here are all indeed 1-based.\n         let hi_line = hi.line.saturating_sub(1);\n         for line_index in lo.line.saturating_sub(1)..hi_line {\n             let line_len = lo.file.get_line(line_index).map(|s| s.chars().count()).unwrap_or(0);"}]}