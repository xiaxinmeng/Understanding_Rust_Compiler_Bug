{"sha": "b04ca13873d5ef5e5b18195aaf8925562302e8e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNGNhMTM4NzNkNWVmNWU1YjE4MTk1YWFmODkyNTU2MjMwMmU4ZTA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-12-13T18:32:16Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-01-19T19:24:08Z"}, "message": "Fix leak in VecDeque::drain when drop panics", "tree": {"sha": "a6da6c16e2151a8f4c7e13a9d3386c8442912f11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6da6c16e2151a8f4c7e13a9d3386c8442912f11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b04ca13873d5ef5e5b18195aaf8925562302e8e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b04ca13873d5ef5e5b18195aaf8925562302e8e0", "html_url": "https://github.com/rust-lang/rust/commit/b04ca13873d5ef5e5b18195aaf8925562302e8e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b04ca13873d5ef5e5b18195aaf8925562302e8e0/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc492452dae29d75b14afe3559f5fb59be7f2d3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc492452dae29d75b14afe3559f5fb59be7f2d3a", "html_url": "https://github.com/rust-lang/rust/commit/dc492452dae29d75b14afe3559f5fb59be7f2d3a"}], "stats": {"total": 120, "additions": 86, "deletions": 34}, "files": [{"sha": "de92c4997e371529fc0caabd8c6624ee3ba2683b", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 48, "deletions": 34, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b04ca13873d5ef5e5b18195aaf8925562302e8e0/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04ca13873d5ef5e5b18195aaf8925562302e8e0/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=b04ca13873d5ef5e5b18195aaf8925562302e8e0", "patch": "@@ -2575,47 +2575,61 @@ unsafe impl<T: Send> Send for Drain<'_, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<T> Drop for Drain<'_, T> {\n     fn drop(&mut self) {\n-        self.for_each(drop);\n+        struct DropGuard<'r, 'a, T>(&'r mut Drain<'a, T>);\n \n-        let source_deque = unsafe { self.deque.as_mut() };\n+        impl<'r, 'a, T> Drop for DropGuard<'r, 'a, T> {\n+            fn drop(&mut self) {\n+                self.0.for_each(drop);\n \n-        // T = source_deque_tail; H = source_deque_head; t = drain_tail; h = drain_head\n-        //\n-        //        T   t   h   H\n-        // [. . . o o x x o o . . .]\n-        //\n-        let orig_tail = source_deque.tail;\n-        let drain_tail = source_deque.head;\n-        let drain_head = self.after_tail;\n-        let orig_head = self.after_head;\n+                let source_deque = unsafe { self.0.deque.as_mut() };\n \n-        let tail_len = count(orig_tail, drain_tail, source_deque.cap());\n-        let head_len = count(drain_head, orig_head, source_deque.cap());\n+                // T = source_deque_tail; H = source_deque_head; t = drain_tail; h = drain_head\n+                //\n+                //        T   t   h   H\n+                // [. . . o o x x o o . . .]\n+                //\n+                let orig_tail = source_deque.tail;\n+                let drain_tail = source_deque.head;\n+                let drain_head = self.0.after_tail;\n+                let orig_head = self.0.after_head;\n \n-        // Restore the original head value\n-        source_deque.head = orig_head;\n+                let tail_len = count(orig_tail, drain_tail, source_deque.cap());\n+                let head_len = count(drain_head, orig_head, source_deque.cap());\n \n-        match (tail_len, head_len) {\n-            (0, 0) => {\n-                source_deque.head = 0;\n-                source_deque.tail = 0;\n-            }\n-            (0, _) => {\n-                source_deque.tail = drain_head;\n-            }\n-            (_, 0) => {\n-                source_deque.head = drain_tail;\n-            }\n-            _ => unsafe {\n-                if tail_len <= head_len {\n-                    source_deque.tail = source_deque.wrap_sub(drain_head, tail_len);\n-                    source_deque.wrap_copy(source_deque.tail, orig_tail, tail_len);\n-                } else {\n-                    source_deque.head = source_deque.wrap_add(drain_tail, head_len);\n-                    source_deque.wrap_copy(drain_tail, drain_head, head_len);\n+                // Restore the original head value\n+                source_deque.head = orig_head;\n+\n+                match (tail_len, head_len) {\n+                    (0, 0) => {\n+                        source_deque.head = 0;\n+                        source_deque.tail = 0;\n+                    }\n+                    (0, _) => {\n+                        source_deque.tail = drain_head;\n+                    }\n+                    (_, 0) => {\n+                        source_deque.head = drain_tail;\n+                    }\n+                    _ => unsafe {\n+                        if tail_len <= head_len {\n+                            source_deque.tail = source_deque.wrap_sub(drain_head, tail_len);\n+                            source_deque.wrap_copy(source_deque.tail, orig_tail, tail_len);\n+                        } else {\n+                            source_deque.head = source_deque.wrap_add(drain_tail, head_len);\n+                            source_deque.wrap_copy(drain_tail, drain_head, head_len);\n+                        }\n+                    },\n                 }\n-            },\n+            }\n         }\n+\n+        while let Some(item) = self.next() {\n+            let guard = DropGuard(self);\n+            drop(item);\n+            mem::forget(guard);\n+        }\n+\n+        DropGuard(self);\n     }\n }\n "}, {"sha": "07f1f098954a9e84aa8aea09a0c4c33108fa217d", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b04ca13873d5ef5e5b18195aaf8925562302e8e0/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04ca13873d5ef5e5b18195aaf8925562302e8e0/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=b04ca13873d5ef5e5b18195aaf8925562302e8e0", "patch": "@@ -1606,3 +1606,41 @@ fn truncate_leak() {\n \n     assert_eq!(unsafe { DROPS }, 7);\n }\n+\n+#[test]\n+fn test_drain_leak() {\n+    static mut DROPS: i32 = 0;\n+\n+    #[derive(Debug, PartialEq)]\n+    struct D(u32, bool);\n+\n+    impl Drop for D {\n+        fn drop(&mut self) {\n+            unsafe {\n+                DROPS += 1;\n+            }\n+\n+            if self.1 {\n+                panic!(\"panic in `drop`\");\n+            }\n+        }\n+    }\n+\n+    let mut v = VecDeque::new();\n+    v.push_back(D(4, false));\n+    v.push_back(D(5, false));\n+    v.push_back(D(6, false));\n+    v.push_front(D(3, false));\n+    v.push_front(D(2, true));\n+    v.push_front(D(1, false));\n+    v.push_front(D(0, false));\n+\n+    catch_unwind(AssertUnwindSafe(|| {\n+        v.drain(1..=4);\n+    })).ok();\n+\n+    assert_eq!(unsafe { DROPS }, 4);\n+    assert_eq!(v.len(), 3);\n+    drop(v);\n+    assert_eq!(unsafe { DROPS }, 7);\n+}"}]}