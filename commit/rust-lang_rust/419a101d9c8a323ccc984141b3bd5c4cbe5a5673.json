{"sha": "419a101d9c8a323ccc984141b3bd5c4cbe5a5673", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOWExMDFkOWM4YTMyM2NjYzk4NDE0MWIzYmQ1YzRjYmU1YTU2NzM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-23T17:31:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-23T17:31:52Z"}, "message": "Rollup merge of #56022 - RalfJung:validate-before-jump, r=oli-obk\n\nWhen popping in CTFE, perform validation before jumping to next statement to have a better span for the error\n\nCurrently, when validating the return value fails, the span points at the next statement after the call. That does not make much sense.\n\nr? @oli-obk", "tree": {"sha": "4bb2b62b49e7a438fd269d576042e6d43f680a13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bb2b62b49e7a438fd269d576042e6d43f680a13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/419a101d9c8a323ccc984141b3bd5c4cbe5a5673", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb+DmICRBK7hj4Ov3rIwAAdHIIAKaWRr4kDOj52leRFgBXuyCg\njMHvWTHLzxTmiajsC2amlJFyBXhb8AzK5RUGEPBt5SASQ4DuHWTjZJWx9BtEk44C\ngF0as7gdWvCU1nKYlB8iNxCeUkozdSV6HZZUtiHVuml6p2O1N3PvWcdclkby5CCQ\nInYsxdIbr9VXEyvuFwpYePYOa8F9/pgMWIXfgPRf5n2KPpj1YInSFC1VPO7BXsd3\nV9QqvEiUx/StUkDp+03iP6zXz25wlWocy7g807nxdXv2gtVBQ9yT+fdNEmEmJdf8\n5e9ib6tZaXS7TW2/lMikhvy+T6vZp96FBPTubpejWSKI+s3t4+SaBQUyS2hew6k=\n=r8AY\n-----END PGP SIGNATURE-----\n", "payload": "tree 4bb2b62b49e7a438fd269d576042e6d43f680a13\nparent 12f6a42f610f0d4cd72886848d91f00e98d40590\nparent bcf82efe081dd12e4b6708241f5a1d165d103cae\nauthor kennytm <kennytm@gmail.com> 1542994312 +0800\ncommitter GitHub <noreply@github.com> 1542994312 +0800\n\nRollup merge of #56022 - RalfJung:validate-before-jump, r=oli-obk\n\nWhen popping in CTFE, perform validation before jumping to next statement to have a better span for the error\n\nCurrently, when validating the return value fails, the span points at the next statement after the call. That does not make much sense.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/419a101d9c8a323ccc984141b3bd5c4cbe5a5673", "html_url": "https://github.com/rust-lang/rust/commit/419a101d9c8a323ccc984141b3bd5c4cbe5a5673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/419a101d9c8a323ccc984141b3bd5c4cbe5a5673/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12f6a42f610f0d4cd72886848d91f00e98d40590", "url": "https://api.github.com/repos/rust-lang/rust/commits/12f6a42f610f0d4cd72886848d91f00e98d40590", "html_url": "https://github.com/rust-lang/rust/commit/12f6a42f610f0d4cd72886848d91f00e98d40590"}, {"sha": "bcf82efe081dd12e4b6708241f5a1d165d103cae", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf82efe081dd12e4b6708241f5a1d165d103cae", "html_url": "https://github.com/rust-lang/rust/commit/bcf82efe081dd12e4b6708241f5a1d165d103cae"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "2eb5f7c853f8c97447332f6836e928734387f001", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/419a101d9c8a323ccc984141b3bd5c4cbe5a5673/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419a101d9c8a323ccc984141b3bd5c4cbe5a5673/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=419a101d9c8a323ccc984141b3bd5c4cbe5a5673", "patch": "@@ -504,15 +504,14 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         let frame = self.stack.pop().expect(\n             \"tried to pop a stack frame, but there were none\",\n         );\n+        // Abort early if we do not want to clean up: We also avoid validation in that case,\n+        // because this is CTFE and the final value will be thoroughly validated anyway.\n         match frame.return_to_block {\n-            StackPopCleanup::Goto(block) => {\n-                self.goto_block(block)?;\n-            }\n+            StackPopCleanup::Goto(_) => {},\n             StackPopCleanup::None { cleanup } => {\n                 if !cleanup {\n-                    // Leak the locals. Also skip validation, this is only used by\n-                    // static/const computation which does its own (stronger) final\n-                    // validation.\n+                    assert!(self.stack.is_empty(), \"only the topmost frame should ever be leaked\");\n+                    // Leak the locals, skip validation.\n                     return Ok(());\n                 }\n             }\n@@ -521,7 +520,8 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         for local in frame.locals {\n             self.deallocate_local(local)?;\n         }\n-        // Validate the return value.\n+        // Validate the return value. Do this after deallocating so that we catch dangling\n+        // references.\n         if let Some(return_place) = frame.return_place {\n             if M::enforce_validity(self) {\n                 // Data got changed, better make sure it matches the type!\n@@ -542,6 +542,13 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             // Uh, that shouldn't happen... the function did not intend to return\n             return err!(Unreachable);\n         }\n+        // Jump to new block -- *after* validation so that the spans make more sense.\n+        match frame.return_to_block {\n+            StackPopCleanup::Goto(block) => {\n+                self.goto_block(block)?;\n+            }\n+            StackPopCleanup::None { .. } => {}\n+        }\n \n         if self.stack.len() > 1 { // FIXME should be \"> 0\", printing topmost frame crashes rustc...\n             debug!(\"CONTINUING({}) {}\", self.cur_frame(), self.frame().instance);"}]}