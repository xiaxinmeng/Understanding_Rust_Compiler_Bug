{"sha": "cd2603299c4ea2a82511e4dc4a876ff2a05fe26e", "node_id": "C_kwDOAAsO6NoAKGNkMjYwMzI5OWM0ZWEyYTgyNTExZTRkYzRhODc2ZmYyYTA1ZmUyNmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-04T20:29:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-04T20:29:16Z"}, "message": "Auto merge of #13546 - Veykril:unsafe-fn-ptr, r=Veykril\n\nLower unsafety of fn pointer and fn item types", "tree": {"sha": "d3a680f271983a19c7235e7cb9dc9429b5ab8e01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3a680f271983a19c7235e7cb9dc9429b5ab8e01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e", "html_url": "https://github.com/rust-lang/rust/commit/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad633db4935a220f77becfab55300492cfab239d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad633db4935a220f77becfab55300492cfab239d", "html_url": "https://github.com/rust-lang/rust/commit/ad633db4935a220f77becfab55300492cfab239d"}, {"sha": "6f09c72b1b26bc11c401d734f4ae9d9e8f8de565", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f09c72b1b26bc11c401d734f4ae9d9e8f8de565", "html_url": "https://github.com/rust-lang/rust/commit/6f09c72b1b26bc11c401d734f4ae9d9e8f8de565"}], "stats": {"total": 65, "additions": 47, "deletions": 18}, "files": [{"sha": "933970d10e47282924e6496cbac5a33a2d17d76d", "filename": "crates/hir-def/src/pretty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e/crates%2Fhir-def%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e/crates%2Fhir-def%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpretty.rs?ref=cd2603299c4ea2a82511e4dc4a876ff2a05fe26e", "patch": "@@ -143,9 +143,12 @@ pub(crate) fn print_type_ref(type_ref: &TypeRef, buf: &mut dyn Write) -> fmt::Re\n             print_type_ref(elem, buf)?;\n             write!(buf, \"]\")?;\n         }\n-        TypeRef::Fn(args_and_ret, varargs) => {\n+        TypeRef::Fn(args_and_ret, varargs, is_unsafe) => {\n             let ((_, return_type), args) =\n                 args_and_ret.split_last().expect(\"TypeRef::Fn is missing return type\");\n+            if *is_unsafe {\n+                write!(buf, \"unsafe \")?;\n+            }\n             write!(buf, \"fn(\")?;\n             for (i, (_, typeref)) in args.iter().enumerate() {\n                 if i != 0 {"}, {"sha": "f8bb78ddcfe02d26b790869308108f7454e6509a", "filename": "crates/hir-def/src/type_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs?ref=cd2603299c4ea2a82511e4dc4a876ff2a05fe26e", "patch": "@@ -119,7 +119,7 @@ pub enum TypeRef {\n     Array(Box<TypeRef>, ConstScalarOrPath),\n     Slice(Box<TypeRef>),\n     /// A fn pointer. Last element of the vector is the return type.\n-    Fn(Vec<(Option<Name>, TypeRef)>, bool /*varargs*/),\n+    Fn(Vec<(Option<Name>, TypeRef)>, bool /*varargs*/, bool /*is_unsafe*/),\n     ImplTrait(Vec<Interned<TypeBound>>),\n     DynTrait(Vec<Interned<TypeBound>>),\n     Macro(AstId<ast::MacroCall>),\n@@ -229,7 +229,7 @@ impl TypeRef {\n                     Vec::new()\n                 };\n                 params.push((None, ret_ty));\n-                TypeRef::Fn(params, is_varargs)\n+                TypeRef::Fn(params, is_varargs, inner.unsafe_token().is_some())\n             }\n             // for types are close enough for our purposes to the inner type for now...\n             ast::Type::ForType(inner) => TypeRef::from_ast_opt(ctx, inner.ty()),\n@@ -263,7 +263,7 @@ impl TypeRef {\n         fn go(type_ref: &TypeRef, f: &mut impl FnMut(&TypeRef)) {\n             f(type_ref);\n             match type_ref {\n-                TypeRef::Fn(params, _) => {\n+                TypeRef::Fn(params, _, _) => {\n                     params.iter().for_each(|(_, param_type)| go(param_type, f))\n                 }\n                 TypeRef::Tuple(types) => types.iter().for_each(|t| go(t, f)),"}, {"sha": "a22a4b170f61c749e68e929368ebb6233060ffd1", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=cd2603299c4ea2a82511e4dc4a876ff2a05fe26e", "patch": "@@ -1187,8 +1187,11 @@ impl HirDisplay for TypeRef {\n                 inner.hir_fmt(f)?;\n                 write!(f, \"]\")?;\n             }\n-            TypeRef::Fn(parameters, is_varargs) => {\n+            &TypeRef::Fn(ref parameters, is_varargs, is_unsafe) => {\n                 // FIXME: Function pointer qualifiers.\n+                if is_unsafe {\n+                    write!(f, \"unsafe \")?;\n+                }\n                 write!(f, \"fn(\")?;\n                 if let Some(((_, return_type), function_parameters)) = parameters.split_last() {\n                     for index in 0..function_parameters.len() {\n@@ -1203,7 +1206,7 @@ impl HirDisplay for TypeRef {\n                             write!(f, \", \")?;\n                         }\n                     }\n-                    if *is_varargs {\n+                    if is_varargs {\n                         write!(f, \"{}...\", if parameters.len() == 1 { \"\" } else { \", \" })?;\n                     }\n                     write!(f, \")\")?;"}, {"sha": "b68c764bdca09fa1637bf3c8a9cb37ea1742ee03", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=cd2603299c4ea2a82511e4dc4a876ff2a05fe26e", "patch": "@@ -210,6 +210,7 @@ pub(crate) fn make_binders<T: HasInterner<Interner = Interner>>(\n pub struct CallableSig {\n     params_and_return: Arc<[Ty]>,\n     is_varargs: bool,\n+    safety: Safety,\n }\n \n has_interner!(CallableSig);\n@@ -218,9 +219,14 @@ has_interner!(CallableSig);\n pub type PolyFnSig = Binders<CallableSig>;\n \n impl CallableSig {\n-    pub fn from_params_and_return(mut params: Vec<Ty>, ret: Ty, is_varargs: bool) -> CallableSig {\n+    pub fn from_params_and_return(\n+        mut params: Vec<Ty>,\n+        ret: Ty,\n+        is_varargs: bool,\n+        safety: Safety,\n+    ) -> CallableSig {\n         params.push(ret);\n-        CallableSig { params_and_return: params.into(), is_varargs }\n+        CallableSig { params_and_return: params.into(), is_varargs, safety }\n     }\n \n     pub fn from_fn_ptr(fn_ptr: &FnPointer) -> CallableSig {\n@@ -237,13 +243,14 @@ impl CallableSig {\n                 .map(|arg| arg.assert_ty_ref(Interner).clone())\n                 .collect(),\n             is_varargs: fn_ptr.sig.variadic,\n+            safety: fn_ptr.sig.safety,\n         }\n     }\n \n     pub fn to_fn_ptr(&self) -> FnPointer {\n         FnPointer {\n             num_binders: 0,\n-            sig: FnSig { abi: (), safety: Safety::Safe, variadic: self.is_varargs },\n+            sig: FnSig { abi: (), safety: self.safety, variadic: self.is_varargs },\n             substitution: FnSubst(Substitution::from_iter(\n                 Interner,\n                 self.params_and_return.iter().cloned(),\n@@ -268,7 +275,11 @@ impl TypeFoldable<Interner> for CallableSig {\n     ) -> Result<Self, E> {\n         let vec = self.params_and_return.to_vec();\n         let folded = vec.try_fold_with(folder, outer_binder)?;\n-        Ok(CallableSig { params_and_return: folded.into(), is_varargs: self.is_varargs })\n+        Ok(CallableSig {\n+            params_and_return: folded.into(),\n+            is_varargs: self.is_varargs,\n+            safety: self.safety,\n+        })\n     }\n }\n \n@@ -573,5 +584,5 @@ pub fn callable_sig_from_fnonce(\n \n     let ret_ty = db.normalize_projection(projection, env);\n \n-    Some(CallableSig::from_params_and_return(params, ret_ty.clone(), false))\n+    Some(CallableSig::from_params_and_return(params, ret_ty.clone(), false, Safety::Safe))\n }"}, {"sha": "baf9842d5fbf262101c6171f215456f48e31895e", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=cd2603299c4ea2a82511e4dc4a876ff2a05fe26e", "patch": "@@ -227,13 +227,17 @@ impl<'a> TyLoweringContext<'a> {\n                     .intern(Interner)\n             }\n             TypeRef::Placeholder => TyKind::Error.intern(Interner),\n-            TypeRef::Fn(params, is_varargs) => {\n+            &TypeRef::Fn(ref params, variadic, is_unsafe) => {\n                 let substs = self.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n                     Substitution::from_iter(Interner, params.iter().map(|(_, tr)| ctx.lower_ty(tr)))\n                 });\n                 TyKind::Function(FnPointer {\n                     num_binders: 0, // FIXME lower `for<'a> fn()` correctly\n-                    sig: FnSig { abi: (), safety: Safety::Safe, variadic: *is_varargs },\n+                    sig: FnSig {\n+                        abi: (),\n+                        safety: if is_unsafe { Safety::Unsafe } else { Safety::Safe },\n+                        variadic,\n+                    },\n                     substitution: FnSubst(substs),\n                 })\n                 .intern(Interner)\n@@ -1573,7 +1577,12 @@ fn fn_sig_for_fn(db: &dyn HirDatabase, def: FunctionId) -> PolyFnSig {\n         .with_type_param_mode(ParamLoweringMode::Variable);\n     let ret = ctx_ret.lower_ty(&data.ret_type);\n     let generics = generics(db.upcast(), def.into());\n-    let sig = CallableSig::from_params_and_return(params, ret, data.is_varargs());\n+    let sig = CallableSig::from_params_and_return(\n+        params,\n+        ret,\n+        data.is_varargs(),\n+        if data.has_unsafe_kw() { Safety::Unsafe } else { Safety::Safe },\n+    );\n     make_binders(db, &generics, sig)\n }\n \n@@ -1617,7 +1626,7 @@ fn fn_sig_for_struct_constructor(db: &dyn HirDatabase, def: StructId) -> PolyFnS\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(ParamLoweringMode::Variable);\n     let params = fields.iter().map(|(_, field)| ctx.lower_ty(&field.type_ref)).collect::<Vec<_>>();\n     let (ret, binders) = type_for_adt(db, def.into()).into_value_and_skipped_binders();\n-    Binders::new(binders, CallableSig::from_params_and_return(params, ret, false))\n+    Binders::new(binders, CallableSig::from_params_and_return(params, ret, false, Safety::Safe))\n }\n \n /// Build the type of a tuple struct constructor.\n@@ -1644,7 +1653,7 @@ fn fn_sig_for_enum_variant_constructor(db: &dyn HirDatabase, def: EnumVariantId)\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(ParamLoweringMode::Variable);\n     let params = fields.iter().map(|(_, field)| ctx.lower_ty(&field.type_ref)).collect::<Vec<_>>();\n     let (ret, binders) = type_for_adt(db, def.parent.into()).into_value_and_skipped_binders();\n-    Binders::new(binders, CallableSig::from_params_and_return(params, ret, false))\n+    Binders::new(binders, CallableSig::from_params_and_return(params, ret, false, Safety::Safe))\n }\n \n /// Build the type of a tuple enum variant constructor."}, {"sha": "7e3aecc2ae0ae4688d687440390d81b29fc0356d", "filename": "crates/hir-ty/src/tests/coercion.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=cd2603299c4ea2a82511e4dc4a876ff2a05fe26e", "patch": "@@ -390,7 +390,7 @@ fn test() {\n     let f: fn(u32) -> isize = foo;\n                            // ^^^ adjustments: Pointer(ReifyFnPointer)\n     let f: unsafe fn(u32) -> isize = foo;\n-                                  // ^^^ adjustments: Pointer(ReifyFnPointer)\n+                                  // ^^^ adjustments: Pointer(ReifyFnPointer), Pointer(UnsafeFnPointer)\n }\",\n     );\n }\n@@ -421,7 +421,10 @@ fn coerce_closure_to_fn_ptr() {\n     check_no_mismatches(\n         r\"\n fn test() {\n-    let f: fn(u32) -> isize = |x| { 1 };\n+    let f: fn(u32) -> u32 = |x| x;\n+                         // ^^^^^ adjustments: Pointer(ClosureFnPointer(Safe))\n+    let f: unsafe fn(u32) -> u32 = |x| x;\n+                                // ^^^^^ adjustments: Pointer(ClosureFnPointer(Unsafe))\n }\",\n     );\n }"}]}