{"sha": "9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NDUwNTJlNjQ3MzdhMjFhN2Q5YTZjYjMzN2JkYTFhNGVlZDNlMGE=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-06-13T21:56:42Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-17T01:15:54Z"}, "message": "rustc: Improve span for error about using a method as a field.\n\nlibsyntax: ExprField now contains a SpannedIdent rather than Ident.\n\n[breaking-change]", "tree": {"sha": "5964aa5da4cac6a05608d32ca85100b4200e7b0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5964aa5da4cac6a05608d32ca85100b4200e7b0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "html_url": "https://github.com/rust-lang/rust/commit/9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "051abae802318d8401c9b5e6baa9ffc863f7f8eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/051abae802318d8401c9b5e6baa9ffc863f7f8eb", "html_url": "https://github.com/rust-lang/rust/commit/051abae802318d8401c9b5e6baa9ffc863f7f8eb"}], "stats": {"total": 68, "additions": 43, "deletions": 25}, "files": [{"sha": "24111d1c7a16b996764405aa38798cddd174bad0", "filename": "src/librustc/back/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fback%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fback%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fsvh.rs?ref=9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "patch": "@@ -270,7 +270,7 @@ mod svh_visitor {\n             ExprBlock(..)            => SawExprBlock,\n             ExprAssign(..)           => SawExprAssign,\n             ExprAssignOp(op, _, _)   => SawExprAssignOp(op),\n-            ExprField(_, id, _)      => SawExprField(content(id)),\n+            ExprField(_, id, _)      => SawExprField(content(id.node)),\n             ExprIndex(..)            => SawExprIndex,\n             ExprPath(..)             => SawExprPath,\n             ExprAddrOf(m, _)         => SawExprAddrOf(m),"}, {"sha": "1535239141862ca17fe64d330b62d754c5a0d9ea", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "patch": "@@ -235,7 +235,7 @@ impl<'a> Visitor<MarkSymbolVisitorContext> for MarkSymbolVisitor<'a> {\n                 self.lookup_and_handle_method(expr.id, expr.span);\n             }\n             ast::ExprField(ref lhs, ref ident, _) => {\n-                self.handle_field_access(&**lhs, ident);\n+                self.handle_field_access(&**lhs, &ident.node);\n             }\n             _ => ()\n         }"}, {"sha": "9b5930cf9ada30cc5361ba8a93cc1dd182537fda", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "patch": "@@ -447,7 +447,7 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n \n           ast::ExprField(ref base, f_name, _) => {\n             let base_cmt = if_ok!(self.cat_expr(&**base));\n-            Ok(self.cat_field(expr, base_cmt, f_name, expr_ty))\n+            Ok(self.cat_field(expr, base_cmt, f_name.node, expr_ty))\n           }\n \n           ast::ExprIndex(ref base, _) => {"}, {"sha": "37d535e7d16c2671019a879e175b7c29c884cd0d", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "patch": "@@ -801,7 +801,7 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n             ast::ExprField(ref base, ident, _) => {\n                 match ty::get(ty::expr_ty_adjusted(self.tcx, &**base)).sty {\n                     ty::ty_struct(id, _) => {\n-                        self.check_field(expr.span, id, NamedField(ident));\n+                        self.check_field(expr.span, id, NamedField(ident.node));\n                     }\n                     _ => {}\n                 }"}, {"sha": "53c09fcf283507af68fc20ec97de2cd1a32b873f", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "patch": "@@ -5241,7 +5241,7 @@ impl<'a> Resolver<'a> {\n                 // field, we need to add any trait methods we find that match\n                 // the field name so that we can do some nice error reporting\n                 // later on in typeck.\n-                let traits = self.search_for_traits_containing_method(ident.name);\n+                let traits = self.search_for_traits_containing_method(ident.node.name);\n                 self.trait_map.insert(expr.id, traits);\n             }\n             ExprMethodCall(ident, _, _) => {"}, {"sha": "2b2f3b8fb0b5fd085ba00cdc24736f1bde36644d", "filename": "src/librustc/middle/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs?ref=9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "patch": "@@ -1210,7 +1210,7 @@ impl<'l> Visitor<DxrVisitorEnv> for DxrVisitor<'l> {\n                     ty::ty_struct(def_id, _) => {\n                         let fields = ty::lookup_struct_fields(&self.analysis.ty_cx, def_id);\n                         for f in fields.iter() {\n-                            if f.name == ident.name {\n+                            if f.name == ident.node.name {\n                                 let sub_span = self.span.span_for_last_ident(ex.span);\n                                 self.fmt.ref_str(recorder::VarRef,\n                                                  ex.span,"}, {"sha": "45019edc58bdf17dd7eda12c241fb03b060aa6c4", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "patch": "@@ -419,7 +419,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n               let brepr = adt::represent_type(cx, bt);\n               let (bv, inlineable) = const_expr(cx, &**base, is_local);\n               expr::with_field_tys(cx.tcx(), bt, None, |discr, field_tys| {\n-                  let ix = ty::field_idx_strict(cx.tcx(), field.name, field_tys);\n+                  let ix = ty::field_idx_strict(cx.tcx(), field.node.name, field_tys);\n                   (adt::const_get_field(cx, &*brepr, bv, discr, ix), inlineable)\n               })\n           }"}, {"sha": "01ba6113c0d518902e43689904367b354db96a1d", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "patch": "@@ -389,7 +389,7 @@ fn trans_datum_unadjusted<'a>(bcx: &'a Block<'a>,\n             trans_def(bcx, expr, bcx.def(expr.id))\n         }\n         ast::ExprField(ref base, ident, _) => {\n-            trans_rec_field(bcx, &**base, ident)\n+            trans_rec_field(bcx, &**base, ident.node)\n         }\n         ast::ExprIndex(ref base, ref idx) => {\n             trans_index(bcx, expr, &**base, &**idx)"}, {"sha": "c87b7ec76ee02984f71ef9ee8c88559ab4ffd18a", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "patch": "@@ -2352,7 +2352,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                    expr: &ast::Expr,\n                    lvalue_pref: LvaluePreference,\n                    base: &ast::Expr,\n-                   field: ast::Name,\n+                   field: &ast::SpannedIdent,\n                    tys: &[ast::P<ast::Ty>]) {\n         let tcx = fcx.ccx.tcx;\n         check_expr_with_lvalue_pref(fcx, base, lvalue_pref);\n@@ -2365,7 +2365,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                     ty::ty_struct(base_id, ref substs) => {\n                         debug!(\"struct named {}\", ppaux::ty_to_str(tcx, base_t));\n                         let fields = ty::lookup_struct_fields(tcx, base_id);\n-                        lookup_field_ty(tcx, base_id, fields.as_slice(), field, &(*substs))\n+                        lookup_field_ty(tcx, base_id, fields.as_slice(), field.node.name, &(*substs))\n                     }\n                     _ => None\n                 }\n@@ -2383,7 +2383,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         match method::lookup(fcx,\n                              expr,\n                              base,\n-                             field,\n+                             field.node.name,\n                              expr_t,\n                              tps.as_slice(),\n                              DontDerefArgs,\n@@ -2392,14 +2392,14 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                              IgnoreStaticMethods) {\n             Some(_) => {\n                 fcx.type_error_message(\n-                    expr.span,\n+                    field.span,\n                     |actual| {\n                         format!(\"attempted to take value of method `{}` on type \\\n-                                 `{}`\", token::get_name(field), actual)\n+                                 `{}`\", token::get_ident(field.node), actual)\n                     },\n                     expr_t, None);\n \n-                tcx.sess.span_note(expr.span,\n+                tcx.sess.span_note(field.span,\n                     \"maybe a missing `()` to call it? If not, try an anonymous function.\");\n             }\n \n@@ -2410,7 +2410,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                         format!(\"attempted access of field `{}` on \\\n                                         type `{}`, but no field with that \\\n                                         name was found\",\n-                                       token::get_name(field),\n+                                       token::get_ident(field.node),\n                                        actual)\n                     },\n                     expr_t, None);\n@@ -3214,7 +3214,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         }\n       }\n       ast::ExprField(ref base, ref field, ref tys) => {\n-        check_field(fcx, expr, lvalue_pref, &**base, field.name, tys.as_slice());\n+        check_field(fcx, expr, lvalue_pref, &**base, field, tys.as_slice());\n       }\n       ast::ExprIndex(ref base, ref idx) => {\n           check_expr_with_lvalue_pref(fcx, &**base, lvalue_pref);"}, {"sha": "ae0fb34d7352185b8ca60259518476966a3c932c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "patch": "@@ -464,7 +464,7 @@ pub enum Expr_ {\n \n     ExprAssign(Gc<Expr>, Gc<Expr>),\n     ExprAssignOp(BinOp, Gc<Expr>, Gc<Expr>),\n-    ExprField(Gc<Expr>, Ident, Vec<P<Ty>>),\n+    ExprField(Gc<Expr>, SpannedIdent, Vec<P<Ty>>),\n     ExprIndex(Gc<Expr>, Gc<Expr>),\n \n     /// Expression that looks like a \"name\". For example,"}, {"sha": "8d48401f9c2a45ec077fcc2cdb8d43d86826fa09", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "patch": "@@ -13,7 +13,7 @@ use ast::{P, Ident, Generics, NodeId, Expr};\n use ast;\n use ast_util;\n use attr;\n-use codemap::{Span, respan, Spanned, DUMMY_SP};\n+use codemap::{Span, respan, Spanned, DUMMY_SP, Pos};\n use ext::base::ExtCtxt;\n use fold::Folder;\n use owned_slice::OwnedSlice;\n@@ -560,7 +560,15 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn expr_field_access(&self, sp: Span, expr: Gc<ast::Expr>, ident: ast::Ident) -> Gc<ast::Expr> {\n-        self.expr(sp, ast::ExprField(expr, ident, Vec::new()))\n+        let field_name = token::get_ident(ident);\n+        let field_span = Span {\n+            lo: sp.lo - Pos::from_uint(field_name.get().len()),\n+            hi: sp.hi,\n+            expn_info: sp.expn_info,\n+        };\n+\n+        let id = Spanned { node: ident, span: field_span };\n+        self.expr(sp, ast::ExprField(expr, id, Vec::new()))\n     }\n     fn expr_addr_of(&self, sp: Span, e: Gc<ast::Expr>) -> Gc<ast::Expr> {\n         self.expr(sp, ast::ExprAddrOf(ast::MutImmutable, e))"}, {"sha": "6d2b0ceed8bf7d081b227aee820ededf1d4cbfe3", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "patch": "@@ -876,7 +876,7 @@ pub fn noop_fold_expr<T: Folder>(e: Gc<Expr>, folder: &mut T) -> Gc<Expr> {\n         }\n         ExprField(el, id, ref tys) => {\n             ExprField(folder.fold_expr(el),\n-                      folder.fold_ident(id),\n+                      respan(id.span, folder.fold_ident(id.node)),\n                       tys.iter().map(|&x| folder.fold_ty(x)).collect())\n         }\n         ExprIndex(el, er) => {"}, {"sha": "bbe0680ef145411a372cabfd8ea2f1bfe0d0b3cb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "patch": "@@ -1796,7 +1796,7 @@ impl<'a> Parser<'a> {\n         ExprIndex(expr, idx)\n     }\n \n-    pub fn mk_field(&mut self, expr: Gc<Expr>, ident: Ident,\n+    pub fn mk_field(&mut self, expr: Gc<Expr>, ident: ast::SpannedIdent,\n                     tys: Vec<P<Ty>>) -> ast::Expr_ {\n         ExprField(expr, ident, tys)\n     }\n@@ -2090,7 +2090,8 @@ impl<'a> Parser<'a> {\n                             e = self.mk_expr(lo, hi, nd);\n                         }\n                         _ => {\n-                            let field = self.mk_field(e, i, tys);\n+                            let id = spanned(dot, hi, i);\n+                            let field = self.mk_field(e, id, tys);\n                             e = self.mk_expr(lo, hi, field)\n                         }\n                     }"}, {"sha": "badfbe7eb1522d927eeb7978a0a09ee1cf11ad6e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "patch": "@@ -1487,7 +1487,7 @@ impl<'a> State<'a> {\n             ast::ExprField(ref expr, id, ref tys) => {\n                 try!(self.print_expr(&**expr));\n                 try!(word(&mut self.s, \".\"));\n-                try!(self.print_ident(id));\n+                try!(self.print_ident(id.node));\n                 if tys.len() > 0u {\n                     try!(word(&mut self.s, \"::<\"));\n                     try!(self.commasep("}, {"sha": "3cde24892af3e8ec464c9436e7c5a57c3e71e082", "filename": "src/test/compile-fail/method-missing-call.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Ftest%2Fcompile-fail%2Fmethod-missing-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9945052e64737a21a7d9a6cb337bda1a4eed3e0a/src%2Ftest%2Fcompile-fail%2Fmethod-missing-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-missing-call.rs?ref=9945052e64737a21a7d9a6cb337bda1a4eed3e0a", "patch": "@@ -28,7 +28,16 @@ impl Point {\n \n fn main() {\n     let point: Point = Point::new();\n-    let px: int =  point.get_x;//~ ERROR attempted to take value of method `get_x` on type `Point`\n-    //~^ NOTE maybe a missing `()` to call it? If not, try an anonymous function.\n+    let px: int =  point\n+                        .get_x;//~ ERROR attempted to take value of method `get_x` on type `Point`\n+                        //~^ NOTE maybe a missing `()` to call it? If not, try an anonymous\n+\n+    // Ensure the span is useful\n+    let ys = &[1,2,3,4,5,6,7];\n+    let a = ys.iter()\n+              .map(|x| x)\n+              .filter(|&&x| x == 1)\n+              .filter_map; //~ ERROR attempted to take value of method `filter_map` on type\n+              //~^ NOTE maybe a missing `()` to call it? If not, try an anonymous function.\n }\n "}]}