{"sha": "ffa840d4f2bbe31721b40d56093259c4a5c0b50b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYTg0MGQ0ZjJiYmUzMTcyMWI0MGQ1NjA5MzI1OWM0YTVjMGI1MGI=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-03T17:13:01Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-03T21:27:37Z"}, "message": "Use `utils::sugg` in `match` related lints\n\nAlso don't build suggestion when unnecessary.", "tree": {"sha": "d029213cce130248fe2ab25c016f612b4a6ae991", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d029213cce130248fe2ab25c016f612b4a6ae991"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffa840d4f2bbe31721b40d56093259c4a5c0b50b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXeYNKAAoJEF5CfHlMukXopE0QAMY+v3GvgKvgw+aBjYzbOFLl\nLlojDPUWJOiGk9Sfh653QX+/PqbZTrMiclI31FVOhJcSdcM1tPK0orCfj68k55iD\nh1LO4FD/qOQyaZ4m3lFENJMOe4VERuwcYiGZqa6G7SZtjg0XhLjUEXdb4k2T3Cos\ngSIDQ0pRWfQYYtHMuIg193eVVe/szfCxX2IgHJ+xWTvW3njQI4pY3hQN4NZndbZs\nSv1pGT9A98tPXUBdXec5heZbvTRzg2GkW0/fbsqu4FGpqrPuuMQo1cyO3gFo0TiX\n/SF9pMDxxTfJ2k6QeTIpyrENv8l0pcHefWcT4/+6TdMlhr7VrjvCUCmPE8BkCE5I\nHPuMD38U8fPQakKLxW2w4Ih4ngLCULpOYuf/8G0ROfJP1Gc2X0rGGRMgFKXUbIS6\nRTtN3/mLV9urDZQW/KwVU3r58fuw2NzWAgfG5nKwWmp9uMVF7Ebfs+k16IL6C5ZY\n/MNePQUtAFAFwp4bJXE+ex2HR/iYVofUE/XkTrMV2Cj2nCedIAYylMSeQP+nYW+l\nKRv3Ut0qz+DJyHWmF7ugKtRopLAnfAUt1BAgUEwSVsco2TCz2DaE7Tk7ObsAlrtW\nhVuGmYkM9Y2NF3eLVhyAe3NwMxQ/l7q8EGxn2uiT64lXZEP0HTHH74WxahHBrhCn\nzpoCgf6QFf7Dwc4banST\n=uvsr\n-----END PGP SIGNATURE-----", "payload": "tree d029213cce130248fe2ab25c016f612b4a6ae991\nparent cc18556ae550089bf79fb57013dc83ae5873336b\nauthor mcarton <cartonmartin+git@gmail.com> 1467565981 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467581257 +0200\n\nUse `utils::sugg` in `match` related lints\n\nAlso don't build suggestion when unnecessary.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa840d4f2bbe31721b40d56093259c4a5c0b50b", "html_url": "https://github.com/rust-lang/rust/commit/ffa840d4f2bbe31721b40d56093259c4a5c0b50b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffa840d4f2bbe31721b40d56093259c4a5c0b50b/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc18556ae550089bf79fb57013dc83ae5873336b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc18556ae550089bf79fb57013dc83ae5873336b", "html_url": "https://github.com/rust-lang/rust/commit/cc18556ae550089bf79fb57013dc83ae5873336b"}], "stats": {"total": 131, "additions": 67, "deletions": 64}, "files": [{"sha": "de21cabc6fb422d3b83277073581d62881151fd1", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 56, "deletions": 58, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/ffa840d4f2bbe31721b40d56093259c4a5c0b50b/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa840d4f2bbe31721b40d56093259c4a5c0b50b/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=ffa840d4f2bbe31721b40d56093259c4a5c0b50b", "patch": "@@ -235,57 +235,54 @@ fn check_single_match_opt_like(cx: &LateContext, ex: &Expr, arms: &[Arm], expr:\n fn check_match_bool(cx: &LateContext, ex: &Expr, arms: &[Arm], expr: &Expr) {\n     // type of expression == bool\n     if cx.tcx.expr_ty(ex).sty == ty::TyBool {\n-        let sugg = if arms.len() == 2 && arms[0].pats.len() == 1 {\n-            // no guards\n-            let exprs = if let PatKind::Lit(ref arm_bool) = arms[0].pats[0].node {\n-                if let ExprLit(ref lit) = arm_bool.node {\n-                    match lit.node {\n-                        LitKind::Bool(true) => Some((&*arms[0].body, &*arms[1].body)),\n-                        LitKind::Bool(false) => Some((&*arms[1].body, &*arms[0].body)),\n-                        _ => None,\n+        span_lint_and_then(cx,\n+                           MATCH_BOOL,\n+                           expr.span,\n+                           \"you seem to be trying to match on a boolean expression\",\n+                           move |db| {\n+            if arms.len() == 2 && arms[0].pats.len() == 1 {\n+                // no guards\n+                let exprs = if let PatKind::Lit(ref arm_bool) = arms[0].pats[0].node {\n+                    if let ExprLit(ref lit) = arm_bool.node {\n+                        match lit.node {\n+                            LitKind::Bool(true) => Some((&*arms[0].body, &*arms[1].body)),\n+                            LitKind::Bool(false) => Some((&*arms[1].body, &*arms[0].body)),\n+                            _ => None,\n+                        }\n+                    } else {\n+                        None\n                     }\n                 } else {\n                     None\n-                }\n-            } else {\n-                None\n-            };\n-\n-            if let Some((ref true_expr, ref false_expr)) = exprs {\n-                match (is_unit_expr(true_expr), is_unit_expr(false_expr)) {\n-                    (false, false) => {\n-                        Some(format!(\"if {} {} else {}\",\n-                                     snippet(cx, ex.span, \"b\"),\n-                                     expr_block(cx, true_expr, None, \"..\"),\n-                                     expr_block(cx, false_expr, None, \"..\")))\n+                };\n+\n+                if let Some((ref true_expr, ref false_expr)) = exprs {\n+                    let sugg = match (is_unit_expr(true_expr), is_unit_expr(false_expr)) {\n+                        (false, false) => {\n+                            Some(format!(\"if {} {} else {}\",\n+                                         snippet(cx, ex.span, \"b\"),\n+                                         expr_block(cx, true_expr, None, \"..\"),\n+                                         expr_block(cx, false_expr, None, \"..\")))\n+                        }\n+                        (false, true) => {\n+                            Some(format!(\"if {} {}\", snippet(cx, ex.span, \"b\"), expr_block(cx, true_expr, None, \"..\")))\n+                        }\n+                        (true, false) => {\n+                            let test = Sugg::hir(cx, ex, \"..\");\n+                            Some(format!(\"if {} {}\",\n+                                         !test,\n+                                         expr_block(cx, false_expr, None, \"..\")))\n+                        }\n+                        (true, true) => None,\n+                    };\n+\n+                    if let Some(sugg) = sugg {\n+                        db.span_suggestion(expr.span, \"consider using an if/else expression\", sugg);\n                     }\n-                    (false, true) => {\n-                        Some(format!(\"if {} {}\", snippet(cx, ex.span, \"b\"), expr_block(cx, true_expr, None, \"..\")))\n-                    }\n-                    (true, false) => {\n-                        let test = Sugg::hir(cx, ex, \"..\");\n-                        Some(format!(\"if {} {}\",\n-                                     !test,\n-                                     expr_block(cx, false_expr, None, \"..\")))\n-                    }\n-                    (true, true) => None,\n                 }\n-            } else {\n-                None\n             }\n-        } else {\n-            None\n-        };\n \n-        span_lint_and_then(cx,\n-                           MATCH_BOOL,\n-                           expr.span,\n-                           \"you seem to be trying to match on a boolean expression. Consider using an if..else block:\",\n-                           move |db| {\n-                               if let Some(sugg) = sugg {\n-                                   db.span_suggestion(expr.span, \"try this\", sugg);\n-                               }\n-                           });\n+       });\n     }\n }\n \n@@ -309,26 +306,28 @@ fn check_overlapping_arms(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: MatchSource, expr: &Expr) {\n     if has_only_ref_pats(arms) {\n         if let ExprAddrOf(Mutability::MutImmutable, ref inner) = ex.node {\n-            let template = match_template(cx, expr.span, source, \"\", inner);\n             span_lint_and_then(cx,\n                                MATCH_REF_PATS,\n                                expr.span,\n                                \"you don't need to add `&` to both the expression and the patterns\",\n                                |db| {\n-                                   db.span_suggestion(expr.span, \"try\", template);\n-                               });\n+                let inner = Sugg::hir(cx, inner, \"..\");\n+                let template = match_template(expr.span, source, inner);\n+                db.span_suggestion(expr.span, \"try\", template);\n+            });\n         } else {\n-            let template = match_template(cx, expr.span, source, \"*\", ex);\n             span_lint_and_then(cx,\n                                MATCH_REF_PATS,\n                                expr.span,\n                                \"you don't need to add `&` to all patterns\",\n                                |db| {\n-                                   db.span_suggestion(expr.span,\n-                                                      \"instead of prefixing all patterns with `&`, you can \\\n-                                                       dereference the expression\",\n-                                                      template);\n-                               });\n+                let ex = Sugg::hir(cx, ex, \"..\");\n+                let template = match_template(expr.span, source, ex.deref());\n+                db.span_suggestion(expr.span,\n+                                   \"instead of prefixing all patterns with `&`, you can \\\n+                                   dereference the expression\",\n+                                   template);\n+            });\n         }\n     }\n }\n@@ -411,12 +410,11 @@ fn has_only_ref_pats(arms: &[Arm]) -> bool {\n     mapped.map_or(false, |v| v.iter().any(|el| *el))\n }\n \n-fn match_template(cx: &LateContext, span: Span, source: MatchSource, op: &str, expr: &Expr) -> String {\n-    let expr_snippet = snippet(cx, expr.span, \"..\");\n+fn match_template(span: Span, source: MatchSource, expr: Sugg) -> String {\n     match source {\n-        MatchSource::Normal => format!(\"match {}{} {{ .. }}\", op, expr_snippet),\n-        MatchSource::IfLetDesugar { .. } => format!(\"if let .. = {}{} {{ .. }}\", op, expr_snippet),\n-        MatchSource::WhileLetDesugar => format!(\"while let .. = {}{} {{ .. }}\", op, expr_snippet),\n+        MatchSource::Normal => format!(\"match {} {{ .. }}\", expr),\n+        MatchSource::IfLetDesugar { .. } => format!(\"if let .. = {} {{ .. }}\", expr),\n+        MatchSource::WhileLetDesugar => format!(\"while let .. = {} {{ .. }}\", expr),\n         MatchSource::ForLoopDesugar => span_bug!(span, \"for loop desugared to match with &-patterns!\"),\n         MatchSource::TryDesugar => span_bug!(span, \"`?` operator desugared to match with &-patterns!\"),\n     }"}, {"sha": "f857c821e7ba2ee2b789016b8385b102a25dfb2d", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffa840d4f2bbe31721b40d56093259c4a5c0b50b/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa840d4f2bbe31721b40d56093259c4a5c0b50b/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=ffa840d4f2bbe31721b40d56093259c4a5c0b50b", "patch": "@@ -134,6 +134,11 @@ impl<'a> Sugg<'a> {\n         make_unop(\"&mut \", self)\n     }\n \n+    /// Convenience method to create the `*<expr>` suggestion.\n+    pub fn deref(self) -> Sugg<'static> {\n+        make_unop(\"*\", self)\n+    }\n+\n     /// Convenience method to create the `<lhs>..<rhs>` or `<lhs>...<rhs>` suggestion.\n     pub fn range(self, end: Self, limit: ast::RangeLimits) -> Sugg<'static> {\n         match limit {"}, {"sha": "f64cceb5c34711f6c7f6ae0246ad76cd8c93d5a8", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffa840d4f2bbe31721b40d56093259c4a5c0b50b/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa840d4f2bbe31721b40d56093259c4a5c0b50b/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=ffa840d4f2bbe31721b40d56093259c4a5c0b50b", "patch": "@@ -112,7 +112,7 @@ fn match_bool() {\n \n     match test {\n     //~^ ERROR you seem to be trying to match on a boolean expression\n-    //~| HELP try\n+    //~| HELP consider\n     //~| SUGGESTION if test { 0 } else { 42 };\n         true => 0,\n         false => 42,\n@@ -121,31 +121,31 @@ fn match_bool() {\n     let option = 1;\n     match option == 1 {\n     //~^ ERROR you seem to be trying to match on a boolean expression\n-    //~| HELP try\n+    //~| HELP consider\n     //~| SUGGESTION if option == 1 { 1 } else { 0 };\n         true => 1,\n         false => 0,\n     };\n \n     match test {\n     //~^ ERROR you seem to be trying to match on a boolean expression\n-    //~| HELP try\n+    //~| HELP consider\n     //~| SUGGESTION if !test { println!(\"Noooo!\"); };\n         true => (),\n         false => { println!(\"Noooo!\"); }\n     };\n \n     match test {\n     //~^ ERROR you seem to be trying to match on a boolean expression\n-    //~| HELP try\n+    //~| HELP consider\n     //~| SUGGESTION if !test { println!(\"Noooo!\"); };\n         false => { println!(\"Noooo!\"); }\n         _ => (),\n     };\n \n     match test && test {\n     //~^ ERROR you seem to be trying to match on a boolean expression\n-    //~| HELP try\n+    //~| HELP consider\n     //~| SUGGESTION if !(test && test) { println!(\"Noooo!\"); };\n     //~| ERROR equal expressions as operands\n         false => { println!(\"Noooo!\"); }\n@@ -154,7 +154,7 @@ fn match_bool() {\n \n     match test {\n     //~^ ERROR you seem to be trying to match on a boolean expression\n-    //~| HELP try\n+    //~| HELP consider\n     //~| SUGGESTION if test { println!(\"Yes!\"); } else { println!(\"Noooo!\"); };\n         false => { println!(\"Noooo!\"); }\n         true => { println!(\"Yes!\"); }"}]}