{"sha": "341aa97adb20ca22e0fcb0851014bfa2297ff932", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MWFhOTdhZGIyMGNhMjJlMGZjYjA4NTEwMTRiZmEyMjk3ZmY5MzI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-09-23T15:25:20Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-12-16T10:31:42Z"}, "message": "llvm: update ffi bindings for split dwarf\n\nThis commit modifies the FFI bindings to LLVM required for Split DWARF\nsupport in rustc. In particular:\n\n- `addPassesToEmitFile`'s wrapper, `LLVMRustWriteOutputFile` now takes\n  a `DwoPath` `const char*`. When disabled, `nullptr` should be provided\n  which will preserve existing behaviour. When enabled, the path to the\n  `.dwo` file should be provided.\n- `createCompileUnit`'s wrapper, `LLVMRustDIBuilderCreateCompileUnit`\n  now has two additional arguments, for the `DWOId` and to enable\n  `SplitDebugInlining`. `DWOId` should always be zero.\n- `createTargetMachine`'s wrapper, `LLVMRustCreateTargetMachine` has an\n  additional argument which should be provided the path to the `.dwo`\n  when enabled.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "feede76df0527ae11d6b22fafe3932f8158a5a20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feede76df0527ae11d6b22fafe3932f8158a5a20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/341aa97adb20ca22e0fcb0851014bfa2297ff932", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl/Z4g4ACgkQJZLnbIc4\nH9kfvhAAkTcNdY9wTnMtGHuXvkfy7n3a5PxekJz0LJbtv/PxYFx09HeZn0C7x/4l\npe5rtB2Ovuleeq1SluIvWribi9M5nmD/N2R2AqDDKWePfDympeAT1lXILc9DLhqO\nFOFbAbJtpgbxGIDtWb/uTv6K5ICu+66GShoR25gGtAOcW+GlHTWmwLIJ03eTUTQV\n4+4WH/4QTrhl+/D/nxa9c9z6xyj/l0Fkj7m6RR1bMDtQEL3kM0d3tNPFHmimcWBh\nxxigPsZwp5HD1Y8pFZxbPSQdeGUMuhkduo77h50cwkw8Wqy5reRfx68uzEEzJ/HY\nER8M7hTBKKZpI8iFFpa7dvcbfNBnrVHD7sDU42GZvqPmAO3U4ksY/ia8j1xWOWv4\ntrAUK2BPG+MUOgkxNDYpnyyT5dwZjMuFWDHtq0W7u5fwKqBXJcUe8TTCtVs0FuXn\naR679KQ03bkRw8Vqs3HYXPO7h8E5elOS9XzmciyadCFGmc5zfeGDnREq435ngTBz\ntA2NNL/MtDjFMcb0n1fysNm+Mo+zkTo0GGpK6jAdWzcPYgBnTlHO970IScG/Qv+h\nSkkn4m4j5WVUG0Okr4DkA9n7483Zey56hmDKPuvAnucKBZutRL4mT9Ql7SByBUiR\nIX+WaBLOxjzpsgftC+izSV/mAqs06GNVzC8+NaCv2IV0/OY4CPg=\n=iaBH\n-----END PGP SIGNATURE-----", "payload": "tree feede76df0527ae11d6b22fafe3932f8158a5a20\nparent ddbc6176de780987025c2cf22eb63922bc0c6253\nauthor David Wood <david@davidtw.co> 1600874720 +0100\ncommitter David Wood <david@davidtw.co> 1608114702 +0000\n\nllvm: update ffi bindings for split dwarf\n\nThis commit modifies the FFI bindings to LLVM required for Split DWARF\nsupport in rustc. In particular:\n\n- `addPassesToEmitFile`'s wrapper, `LLVMRustWriteOutputFile` now takes\n  a `DwoPath` `const char*`. When disabled, `nullptr` should be provided\n  which will preserve existing behaviour. When enabled, the path to the\n  `.dwo` file should be provided.\n- `createCompileUnit`'s wrapper, `LLVMRustDIBuilderCreateCompileUnit`\n  now has two additional arguments, for the `DWOId` and to enable\n  `SplitDebugInlining`. `DWOId` should always be zero.\n- `createTargetMachine`'s wrapper, `LLVMRustCreateTargetMachine` has an\n  additional argument which should be provided the path to the `.dwo`\n  when enabled.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/341aa97adb20ca22e0fcb0851014bfa2297ff932", "html_url": "https://github.com/rust-lang/rust/commit/341aa97adb20ca22e0fcb0851014bfa2297ff932", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/341aa97adb20ca22e0fcb0851014bfa2297ff932/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddbc6176de780987025c2cf22eb63922bc0c6253", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddbc6176de780987025c2cf22eb63922bc0c6253", "html_url": "https://github.com/rust-lang/rust/commit/ddbc6176de780987025c2cf22eb63922bc0c6253"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "a6b866a0498cbf87602e0c95bb1b26c8e042c043", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/341aa97adb20ca22e0fcb0851014bfa2297ff932/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341aa97adb20ca22e0fcb0851014bfa2297ff932/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=341aa97adb20ca22e0fcb0851014bfa2297ff932", "patch": "@@ -53,7 +53,14 @@ pub fn write_output_file(\n ) -> Result<(), FatalError> {\n     unsafe {\n         let output_c = path_to_c_string(output);\n-        let result = llvm::LLVMRustWriteOutputFile(target, pm, m, output_c.as_ptr(), file_type);\n+        let result = llvm::LLVMRustWriteOutputFile(\n+            target,\n+            pm,\n+            m,\n+            output_c.as_ptr(),\n+            std::ptr::null(),\n+            file_type,\n+        );\n         result.into_result().map_err(|()| {\n             let msg = format!(\"could not write output to {}\", output.display());\n             llvm_err(handler, &msg)\n@@ -164,6 +171,7 @@ pub fn target_machine_factory(\n         !sess.opts.debugging_opts.use_ctors_section.unwrap_or(sess.target.use_ctors_section);\n \n     Arc::new(move || {\n+        let split_dwarf_file = std::ptr::null();\n         let tm = unsafe {\n             llvm::LLVMRustCreateTargetMachine(\n                 triple.as_ptr(),\n@@ -182,6 +190,7 @@ pub fn target_machine_factory(\n                 emit_stack_size_section,\n                 relax_elf_relocations,\n                 use_init_array,\n+                split_dwarf_file,\n             )\n         };\n "}, {"sha": "41c8a5e5705280b2f7ad0e5499e90993e03bedcc", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/341aa97adb20ca22e0fcb0851014bfa2297ff932/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341aa97adb20ca22e0fcb0851014bfa2297ff932/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=341aa97adb20ca22e0fcb0851014bfa2297ff932", "patch": "@@ -1039,6 +1039,8 @@ pub fn compile_unit_metadata(\n             split_name.as_ptr().cast(),\n             split_name.len(),\n             kind,\n+            0,\n+            true,\n         );\n \n         if tcx.sess.opts.debugging_opts.profile {"}, {"sha": "707aaa2b53ffc8575925f48da94c200fc6d1cb80", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/341aa97adb20ca22e0fcb0851014bfa2297ff932/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341aa97adb20ca22e0fcb0851014bfa2297ff932/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=341aa97adb20ca22e0fcb0851014bfa2297ff932", "patch": "@@ -1830,6 +1830,8 @@ extern \"C\" {\n         SplitName: *const c_char,\n         SplitNameLen: size_t,\n         kind: DebugEmissionKind,\n+        DWOId: u64,\n+        SplitDebugInlining: bool,\n     ) -> &'a DIDescriptor;\n \n     pub fn LLVMRustDIBuilderCreateFile(\n@@ -2151,6 +2153,7 @@ extern \"C\" {\n         EmitStackSizeSection: bool,\n         RelaxELFRelocations: bool,\n         UseInitArray: bool,\n+        SplitDwarfFile: *const c_char,\n     ) -> Option<&'static mut TargetMachine>;\n     pub fn LLVMRustDisposeTargetMachine(T: &'static mut TargetMachine);\n     pub fn LLVMRustAddBuilderLibraryInfo(\n@@ -2179,6 +2182,7 @@ extern \"C\" {\n         PM: &PassManager<'a>,\n         M: &'a Module,\n         Output: *const c_char,\n+        DwoOutput: *const c_char,\n         FileType: FileType,\n     ) -> LLVMRustResult;\n     pub fn LLVMRustOptimizeWithNewPassManager("}, {"sha": "2264908995bb7f34ce335e3224b97e6f4c911a14", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/341aa97adb20ca22e0fcb0851014bfa2297ff932/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/341aa97adb20ca22e0fcb0851014bfa2297ff932/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=341aa97adb20ca22e0fcb0851014bfa2297ff932", "patch": "@@ -450,7 +450,8 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     bool AsmComments,\n     bool EmitStackSizeSection,\n     bool RelaxELFRelocations,\n-    bool UseInitArray) {\n+    bool UseInitArray,\n+    const char *SplitDwarfFile) {\n \n   auto OptLevel = fromRust(RustOptLevel);\n   auto RM = fromRust(RustReloc);\n@@ -476,6 +477,9 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   Options.MCOptions.AsmVerbose = AsmComments;\n   Options.MCOptions.PreserveAsmComments = AsmComments;\n   Options.MCOptions.ABIName = ABIStr;\n+  if (SplitDwarfFile) {\n+      Options.MCOptions.SplitDwarfFile = SplitDwarfFile;\n+  }\n   Options.RelaxELFRelocations = RelaxELFRelocations;\n   Options.UseInitArray = UseInitArray;\n \n@@ -610,7 +614,7 @@ static TargetMachine::CodeGenFileType fromRust(LLVMRustFileType Type) {\n \n extern \"C\" LLVMRustResult\n LLVMRustWriteOutputFile(LLVMTargetMachineRef Target, LLVMPassManagerRef PMR,\n-                        LLVMModuleRef M, const char *Path,\n+                        LLVMModuleRef M, const char *Path, const char *DwoPath,\n                         LLVMRustFileType RustFileType) {\n   llvm::legacy::PassManager *PM = unwrap<llvm::legacy::PassManager>(PMR);\n   auto FileType = fromRust(RustFileType);\n@@ -626,8 +630,22 @@ LLVMRustWriteOutputFile(LLVMTargetMachineRef Target, LLVMPassManagerRef PMR,\n   }\n \n   buffer_ostream BOS(OS);\n-  unwrap(Target)->addPassesToEmitFile(*PM, BOS, nullptr, FileType, false);\n-  PM->run(*unwrap(M));\n+  if (DwoPath) {\n+    raw_fd_ostream DOS(DwoPath, EC, sys::fs::F_None);\n+    EC.clear();\n+    if (EC)\n+        ErrorInfo = EC.message();\n+    if (ErrorInfo != \"\") {\n+      LLVMRustSetLastError(ErrorInfo.c_str());\n+      return LLVMRustResult::Failure;\n+    }\n+    buffer_ostream DBOS(DOS);\n+    unwrap(Target)->addPassesToEmitFile(*PM, BOS, &DBOS, FileType, false);\n+    PM->run(*unwrap(M));\n+  } else {\n+    unwrap(Target)->addPassesToEmitFile(*PM, BOS, nullptr, FileType, false);\n+    PM->run(*unwrap(M));\n+  }\n \n   // Apparently `addPassesToEmitFile` adds a pointer to our on-the-stack output\n   // stream (OS), so the only real safe place to delete this is here? Don't we"}, {"sha": "c0ff62c17beb56db0c28d438d649256bc33d37c8", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/341aa97adb20ca22e0fcb0851014bfa2297ff932/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/341aa97adb20ca22e0fcb0851014bfa2297ff932/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=341aa97adb20ca22e0fcb0851014bfa2297ff932", "patch": "@@ -690,13 +690,14 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateCompileUnit(\n     const char *Producer, size_t ProducerLen, bool isOptimized,\n     const char *Flags, unsigned RuntimeVer,\n     const char *SplitName, size_t SplitNameLen,\n-    LLVMRustDebugEmissionKind Kind) {\n+    LLVMRustDebugEmissionKind Kind,\n+    uint64_t DWOId, bool SplitDebugInlining) {\n   auto *File = unwrapDI<DIFile>(FileRef);\n \n   return wrap(Builder->createCompileUnit(Lang, File, StringRef(Producer, ProducerLen),\n                                          isOptimized, Flags, RuntimeVer,\n                                          StringRef(SplitName, SplitNameLen),\n-                                         fromRust(Kind)));\n+                                         fromRust(Kind), DWOId, SplitDebugInlining));\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFile("}]}