{"sha": "490742e3390624bd5c1467ab741655013db1e5cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MDc0MmUzMzkwNjI0YmQ1YzE0NjdhYjc0MTY1NTAxM2RiMWU1Y2Y=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-10-24T13:10:23Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-10-25T08:17:20Z"}, "message": "Resolve types properly in const eval", "tree": {"sha": "d97a38c514ec0214d80ad3bebff24021ca11a647", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d97a38c514ec0214d80ad3bebff24021ca11a647"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/490742e3390624bd5c1467ab741655013db1e5cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlnwSJAACgkQpp+NIls6\n19mhHQ/+NKWysJf2Lsh1tqhwGSJFFflztYC4YJlBt8hrQwW4/Itjbv1wB5AJXzpL\nLtCYberh2p4LWGik++y3SNdMfICr4f/US5MYPnIbwyp5GjUQrFLk7BvwKSch5/Hx\nEhRIYsgtNyGqYOKjvXYmYXRrENJr8/OsDqtBFDNYcz8STx4k4dkk3yrVQ5qj7dHq\nsCWkqpLfPsYMud4Oe5Z+iwUa2DEsswWvx3HTVNXKAzlITHjQQnciCXU3jXauOdmr\nlQco60FZfBoi7qddqJrjwwWR5+rslH/tmE7rDa/wuM4ig1V8XNJlgOzTMz4Uq4i9\nY/CNJn656fTsV30W/z73iRS/gG2d66JTfH0oyCuu+P4kjoZvKXebm+2B9936WHPT\nSy56Dh7Du1H5z9NqROG4WPF7oKkAl6l5NyVW7XvCijsz0CJIV5MQeuV+XJc+8gpA\nnS19IvZm85n0oggwXbXDMTUebSTbja32O4+Cpjs4qsFYbT5apZWe7OaFBZr8vQXh\ncTt7/0i94zErFv8kBmSI93OdPtkNlVQjsdMe5ekssiODG07GERaSXx1cznQXCtPM\n2a5KsL0kanrJrL5lSHZj3+pl62vQEZ4hibzMFpuXCKZMZb5lmdWYlrKMPdS7kyZe\nE0j1DBeAKX1ghGsUM58p/GorHM3e19scarC3qbviPleuu6enp/Q=\n=l86c\n-----END PGP SIGNATURE-----", "payload": "tree d97a38c514ec0214d80ad3bebff24021ca11a647\nparent 6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1508850623 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1508919440 +0200\n\nResolve types properly in const eval\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/490742e3390624bd5c1467ab741655013db1e5cf", "html_url": "https://github.com/rust-lang/rust/commit/490742e3390624bd5c1467ab741655013db1e5cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/490742e3390624bd5c1467ab741655013db1e5cf/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "html_url": "https://github.com/rust-lang/rust/commit/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51"}], "stats": {"total": 102, "additions": 10, "deletions": 92}, "files": [{"sha": "442c79393fdc7f3000af293267d08d40cad267dc", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/490742e3390624bd5c1467ab741655013db1e5cf/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490742e3390624bd5c1467ab741655013db1e5cf/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=490742e3390624bd5c1467ab741655013db1e5cf", "patch": "@@ -100,7 +100,7 @@ impl<'tcx> fmt::Display for Instance<'tcx> {\n impl<'a, 'b, 'tcx> Instance<'tcx> {\n     pub fn new(def_id: DefId, substs: &'tcx Substs<'tcx>)\n                -> Instance<'tcx> {\n-        assert!(substs.is_normalized_for_trans() && !substs.has_escaping_regions(),\n+        assert!(!substs.has_escaping_regions(),\n                 \"substs of instance {:?} not normalized for trans: {:?}\",\n                 def_id, substs);\n         Instance { def: InstanceDef::Item(def_id), substs: substs }\n@@ -139,7 +139,7 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n                    substs: &'tcx Substs<'tcx>) -> Option<Instance<'tcx>> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n         let result = if let Some(trait_def_id) = tcx.trait_of_item(def_id) {\n-            debug!(\" => associated item, attempting to find impl\");\n+            debug!(\" => associated item, attempting to find impl in param_env {:#?}\", param_env);\n             let item = tcx.associated_item(def_id);\n             resolve_associated_item(tcx, &item, param_env, trait_def_id, substs)\n         } else {"}, {"sha": "657156902b5c11974a5d3020341539f9e78db1f5", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 8, "deletions": 90, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/490742e3390624bd5c1467ab741655013db1e5cf/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490742e3390624bd5c1467ab741655013db1e5cf/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=490742e3390624bd5c1467ab741655013db1e5cf", "patch": "@@ -13,9 +13,7 @@ use rustc::middle::const_val::ConstAggregate::*;\n use rustc::middle::const_val::ErrKind::*;\n use rustc::middle::const_val::{ByteArray, ConstVal, ConstEvalErr, EvalResult, ErrKind};\n \n-use rustc::hir::map as hir_map;\n use rustc::hir::map::blocks::FnLikeNode;\n-use rustc::traits;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -54,33 +52,12 @@ macro_rules! math {\n pub fn lookup_const_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     key: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n                                     -> Option<(DefId, &'tcx Substs<'tcx>)> {\n-    let (def_id, _) = key.value;\n-    if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n-        match tcx.hir.find(node_id) {\n-            Some(hir_map::NodeTraitItem(_)) => {\n-                // If we have a trait item and the substitutions for it,\n-                // `resolve_trait_associated_const` will select an impl\n-                // or the default.\n-                resolve_trait_associated_const(tcx, key)\n-            }\n-            _ => Some(key.value)\n-        }\n-    } else {\n-        match tcx.describe_def(def_id) {\n-            Some(Def::AssociatedConst(_)) => {\n-                // As mentioned in the comments above for in-crate\n-                // constants, we only try to find the expression for a\n-                // trait-associated const if the caller gives us the\n-                // substitutions for the reference to it.\n-                if tcx.trait_of_item(def_id).is_some() {\n-                    resolve_trait_associated_const(tcx, key)\n-                } else {\n-                    Some(key.value)\n-                }\n-            }\n-            _ => Some(key.value)\n-        }\n-    }\n+    ty::Instance::resolve(\n+        tcx,\n+        key.param_env,\n+        key.value.0,\n+        key.value.1,\n+    ).map(|instance| (instance.def_id(), instance.substs))\n }\n \n pub struct ConstContext<'a, 'tcx: 'a> {\n@@ -119,6 +96,7 @@ type CastResult<'tcx> = Result<ConstVal<'tcx>, ErrKind<'tcx>>;\n \n fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n                                      e: &'tcx Expr) -> EvalResult<'tcx> {\n+    trace!(\"eval_const_expr_partial: {:?}\", e);\n     let tcx = cx.tcx;\n     let ty = cx.tables.expr_ty(e).subst(tcx, cx.substs);\n     let mk_const = |val| tcx.mk_const(ty::Const { val, ty });\n@@ -289,6 +267,7 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n           match cx.tables.qpath_def(qpath, e.hir_id) {\n               Def::Const(def_id) |\n               Def::AssociatedConst(def_id) => {\n+                    let substs = tcx.normalize_associated_type_in_env(&substs, cx.param_env);\n                     match tcx.at(e.span).const_eval(cx.param_env.and((def_id, substs))) {\n                         Ok(val) => val,\n                         Err(ConstEvalErr { kind: TypeckError, .. }) => {\n@@ -486,67 +465,6 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n     Ok(result)\n }\n \n-fn resolve_trait_associated_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                            key: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n-                                            -> Option<(DefId, &'tcx Substs<'tcx>)> {\n-    let param_env = key.param_env;\n-    let (def_id, substs) = key.value;\n-    let trait_item = tcx.associated_item(def_id);\n-    let trait_id = trait_item.container.id();\n-    let trait_ref = ty::Binder(ty::TraitRef::new(trait_id, substs));\n-    debug!(\"resolve_trait_associated_const: trait_ref={:?}\",\n-           trait_ref);\n-\n-    tcx.infer_ctxt().enter(|infcx| {\n-        let mut selcx = traits::SelectionContext::new(&infcx);\n-        let obligation = traits::Obligation::new(traits::ObligationCause::dummy(),\n-                                                 param_env,\n-                                                 trait_ref.to_poly_trait_predicate());\n-        let selection = match selcx.select(&obligation) {\n-            Ok(Some(vtable)) => vtable,\n-            // Still ambiguous, so give up and let the caller decide whether this\n-            // expression is really needed yet. Some associated constant values\n-            // can't be evaluated until monomorphization is done in trans.\n-            Ok(None) => {\n-                return None\n-            }\n-            Err(_) => {\n-                return None\n-            }\n-        };\n-\n-        // NOTE: this code does not currently account for specialization, but when\n-        // it does so, it should hook into the param_env.reveal to determine when the\n-        // constant should resolve.\n-        match selection {\n-            traits::VtableImpl(ref impl_data) => {\n-                let name = trait_item.name;\n-                let ac = tcx.associated_items(impl_data.impl_def_id)\n-                    .find(|item| item.kind == ty::AssociatedKind::Const && item.name == name);\n-                match ac {\n-                    // FIXME(eddyb) Use proper Instance resolution to\n-                    // get the correct Substs returned from here.\n-                    Some(ic) => {\n-                        let substs = Substs::identity_for_item(tcx, ic.def_id);\n-                        Some((ic.def_id, substs))\n-                    }\n-                    None => {\n-                        if trait_item.defaultness.has_value() {\n-                            Some(key.value)\n-                        } else {\n-                            None\n-                        }\n-                    }\n-                }\n-            }\n-            traits::VtableParam(_) => None,\n-            _ => {\n-                bug!(\"resolve_trait_associated_const: unexpected vtable type {:?}\", selection)\n-            }\n-        }\n-    })\n-}\n-\n fn cast_const_int<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             val: ConstInt,\n                             ty: Ty<'tcx>)"}]}