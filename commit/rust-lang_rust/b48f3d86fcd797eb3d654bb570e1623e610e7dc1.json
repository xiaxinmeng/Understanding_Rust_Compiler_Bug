{"sha": "b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "node_id": "C_kwDOAAsO6NoAKGI0OGYzZDg2ZmNkNzk3ZWIzZDY1NGJiNTcwZTE2MjNlNjEwZTdkYzE", "commit": {"author": {"name": "Xavier Denis", "email": "xldenis@gmail.com", "date": "2022-06-09T18:06:44Z"}, "committer": {"name": "Xavier Denis", "email": "xldenis@gmail.com", "date": "2022-06-10T20:01:56Z"}, "message": "Fix `SourceScope` for `if let` bindings.", "tree": {"sha": "b072c39c92b8d6fda4b093f49b85a9ce16404415", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b072c39c92b8d6fda4b093f49b85a9ce16404415"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "html_url": "https://github.com/rust-lang/rust/commit/b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/comments", "author": {"login": "xldenis", "id": 451373, "node_id": "MDQ6VXNlcjQ1MTM3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/451373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xldenis", "html_url": "https://github.com/xldenis", "followers_url": "https://api.github.com/users/xldenis/followers", "following_url": "https://api.github.com/users/xldenis/following{/other_user}", "gists_url": "https://api.github.com/users/xldenis/gists{/gist_id}", "starred_url": "https://api.github.com/users/xldenis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xldenis/subscriptions", "organizations_url": "https://api.github.com/users/xldenis/orgs", "repos_url": "https://api.github.com/users/xldenis/repos", "events_url": "https://api.github.com/users/xldenis/events{/privacy}", "received_events_url": "https://api.github.com/users/xldenis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xldenis", "id": 451373, "node_id": "MDQ6VXNlcjQ1MTM3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/451373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xldenis", "html_url": "https://github.com/xldenis", "followers_url": "https://api.github.com/users/xldenis/followers", "following_url": "https://api.github.com/users/xldenis/following{/other_user}", "gists_url": "https://api.github.com/users/xldenis/gists{/gist_id}", "starred_url": "https://api.github.com/users/xldenis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xldenis/subscriptions", "organizations_url": "https://api.github.com/users/xldenis/orgs", "repos_url": "https://api.github.com/users/xldenis/repos", "events_url": "https://api.github.com/users/xldenis/events{/privacy}", "received_events_url": "https://api.github.com/users/xldenis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec55c61305eaf385fc1b93ac9a78284b4d887fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec55c61305eaf385fc1b93ac9a78284b4d887fe5", "html_url": "https://github.com/rust-lang/rust/commit/ec55c61305eaf385fc1b93ac9a78284b4d887fe5"}], "stats": {"total": 215, "additions": 121, "deletions": 94}, "files": [{"sha": "ea677d727e0172003df6f27b95a0f5af1345b5a4", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "patch": "@@ -70,8 +70,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                         &this.thir[cond],\n                                         Some(condition_scope),\n                                         condition_scope,\n-                                        then_expr.span,\n+                                        then_expr.span\n                                     ));\n+\n                                     this.expr_into_dest(destination, then_blk, then_expr)\n                                 });\n                             then_block.and(else_block)\n@@ -97,7 +98,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::Let { expr, ref pat } => {\n                 let scope = this.local_scope();\n                 let (true_block, false_block) = this.in_if_then_scope(scope, |this| {\n-                    this.lower_let_expr(block, &this.thir[expr], pat, scope, expr_span)\n+                    this.lower_let_expr(block, &this.thir[expr], pat, scope, None, expr_span)\n                 });\n \n                 this.cfg.push_assign_constant("}, {"sha": "ce25a89a2749b17029687b39c5c34929906fe3fd", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         expr: &Expr<'tcx>,\n         temp_scope_override: Option<region::Scope>,\n         break_scope: region::Scope,\n-        variable_scope_span: Span,\n+        variable_span: Span,\n     ) -> BlockAnd<()> {\n         let this = self;\n         let expr_span = expr.span;\n@@ -53,15 +53,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     &this.thir[lhs],\n                     temp_scope_override,\n                     break_scope,\n-                    variable_scope_span,\n+                    variable_span,\n                 ));\n \n                 let rhs_then_block = unpack!(this.then_else_break(\n                     lhs_then_block,\n                     &this.thir[rhs],\n                     temp_scope_override,\n                     break_scope,\n-                    variable_scope_span,\n+                    variable_span,\n                 ));\n \n                 rhs_then_block.unit()\n@@ -74,12 +74,22 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         &this.thir[value],\n                         temp_scope_override,\n                         break_scope,\n-                        variable_scope_span,\n+                        variable_span,\n                     )\n                 })\n             }\n             ExprKind::Let { expr, ref pat } => {\n-                this.lower_let_expr(block, &this.thir[expr], pat, break_scope, variable_scope_span)\n+                let variable_scope =\n+                    this.new_source_scope(variable_span, LintLevel::Inherited, None);\n+                this.source_scope = variable_scope;\n+                this.lower_let_expr(\n+                    block,\n+                    &this.thir[expr],\n+                    pat,\n+                    break_scope,\n+                    Some(variable_scope),\n+                    variable_span,\n+                )\n             }\n             _ => {\n                 let temp_scope = temp_scope_override.unwrap_or_else(|| this.local_scope());\n@@ -1773,6 +1783,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         expr: &Expr<'tcx>,\n         pat: &Pat<'tcx>,\n         else_target: region::Scope,\n+        source_scope: Option<SourceScope>,\n         span: Span,\n     ) -> BlockAnd<()> {\n         let expr_span = expr.span;\n@@ -1798,7 +1809,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let otherwise_post_guard_block = otherwise_candidate.pre_binding_block.unwrap();\n         self.break_for_else(otherwise_post_guard_block, else_target, self.source_info(expr_span));\n \n-        self.declare_bindings(None, pat.span.to(span), pat, ArmHasGuard(false), opt_expr_place);\n+        self.declare_bindings(\n+            source_scope,\n+            pat.span.to(span),\n+            pat,\n+            ArmHasGuard(false),\n+            opt_expr_place,\n+        );\n+\n         let post_guard_block = self.bind_pattern(\n             self.source_info(pat.span),\n             guard_candidate,\n@@ -1975,7 +1993,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Guard::IfLet(ref pat, scrutinee) => {\n                         let s = &this.thir[scrutinee];\n                         guard_span = s.span;\n-                        this.lower_let_expr(block, s, pat, match_scope, arm_span)\n+                        this.lower_let_expr(block, s, pat, match_scope, None, arm_span)\n                     }\n                 });\n "}, {"sha": "a773ca246dd61a5141fa99101a6012e4af8a817f", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.64bit.diff", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff?ref=b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "patch": "@@ -10,22 +10,24 @@\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:11:9: 11:10\n       }\n+      scope 2 {\n+      }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:11:9: 11:10\n           StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n-          StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n-          Deinit(_3);                      // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n-          ((_3 as Some).0: bool) = const true; // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n-          discriminant(_3) = 1;            // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n--         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n--         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n-+         _4 = const 1_isize;              // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n-+         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+          StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n+          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n+          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n+          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n+-         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n+-         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n++         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n++         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n       }\n   \n       bb2: {"}, {"sha": "d77056e6316f2e5144a2cb0b49b05e04d132f8aa", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff?ref=b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "patch": "@@ -7,18 +7,20 @@\n       let mut _2: isize;                   // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:20: 13:30\n       let mut _3: isize;                   // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n       let mut _4: &E;                      // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:12:16: 12:17\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          _3 = discriminant((*_1));        // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          switchInt(move _3) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          _3 = discriminant((*_1));        // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          switchInt(move _3) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n       }\n   \n       bb1: {\n-          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          _4 = move (((*_1) as Some).0: &E); // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          _2 = discriminant((*_4));        // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          switchInt(move _2) -> [1_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          StorageLive(_4);                 // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          _4 = move (((*_1) as Some).0: &E); // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          _2 = discriminant((*_4));        // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          StorageDead(_4);                 // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          switchInt(move _2) -> [1_isize: bb2, otherwise: bb3]; // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n       }\n   \n       bb2: {"}, {"sha": "2e0df0a6ba9f70d1dc08929d7681bb6888da5601", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "patch": "@@ -27,9 +27,9 @@\n           let _6: core::num::flt2dec::Sign; // in scope 1 at $DIR/funky_arms.rs:19:9: 19:13\n           scope 2 {\n               debug sign => _6;            // in scope 2 at $DIR/funky_arms.rs:19:9: 19:13\n-              let _10: usize;              // in scope 2 at $DIR/funky_arms.rs:24:17: 24:26\n               scope 3 {\n                   debug precision => _10;  // in scope 3 at $DIR/funky_arms.rs:24:17: 24:26\n+                  let _10: usize;          // in scope 3 at $DIR/funky_arms.rs:24:17: 24:26\n               }\n           }\n       }\n@@ -63,24 +63,24 @@\n       }\n   \n       bb4: {\n-          StorageLive(_7);                 // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n-          StorageLive(_8);                 // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n-          _8 = &(*_1);                     // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n-          _7 = Formatter::precision(move _8) -> bb5; // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n+          StorageLive(_7);                 // scope 3 at $DIR/funky_arms.rs:24:30: 24:45\n+          StorageLive(_8);                 // scope 3 at $DIR/funky_arms.rs:24:30: 24:45\n+          _8 = &(*_1);                     // scope 3 at $DIR/funky_arms.rs:24:30: 24:45\n+          _7 = Formatter::precision(move _8) -> bb5; // scope 3 at $DIR/funky_arms.rs:24:30: 24:45\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:24:34: 24:43\n                                            // + literal: Const { ty: for<'r> fn(&'r Formatter) -> Option<usize> {Formatter::precision}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb5: {\n-          StorageDead(_8);                 // scope 2 at $DIR/funky_arms.rs:24:44: 24:45\n-          _9 = discriminant(_7);           // scope 2 at $DIR/funky_arms.rs:24:12: 24:27\n-          switchInt(move _9) -> [1_isize: bb6, otherwise: bb8]; // scope 2 at $DIR/funky_arms.rs:24:12: 24:27\n+          StorageDead(_8);                 // scope 3 at $DIR/funky_arms.rs:24:44: 24:45\n+          _9 = discriminant(_7);           // scope 3 at $DIR/funky_arms.rs:24:12: 24:27\n+          switchInt(move _9) -> [1_isize: bb6, otherwise: bb8]; // scope 3 at $DIR/funky_arms.rs:24:12: 24:27\n       }\n   \n       bb6: {\n-          StorageLive(_10);                // scope 2 at $DIR/funky_arms.rs:24:17: 24:26\n-          _10 = ((_7 as Some).0: usize);   // scope 2 at $DIR/funky_arms.rs:24:17: 24:26\n+          StorageLive(_10);                // scope 3 at $DIR/funky_arms.rs:24:17: 24:26\n+          _10 = ((_7 as Some).0: usize);   // scope 3 at $DIR/funky_arms.rs:24:17: 24:26\n           StorageLive(_11);                // scope 2 at $DIR/funky_arms.rs:26:43: 26:46\n           _11 = &mut (*_1);                // scope 2 at $DIR/funky_arms.rs:26:43: 26:46\n           StorageLive(_12);                // scope 2 at $DIR/funky_arms.rs:26:48: 26:51"}, {"sha": "3c662a86814060e7bd9157187356ce1ebd718b94", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "patch": "@@ -14,9 +14,9 @@ fn main() -> () {\n     let mut _11: isize;                  // in scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     scope 1 {\n         debug e => _1;                   // in scope 1 at $DIR/issue-41888.rs:7:9: 7:10\n-        let _6: K;                       // in scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         scope 2 {\n             debug _k => _6;              // in scope 2 at $DIR/issue-41888.rs:10:21: 10:23\n+            let _6: K;                   // in scope 2 at $DIR/issue-41888.rs:10:21: 10:23\n         }\n     }\n \n@@ -51,14 +51,14 @@ fn main() -> () {\n \n     bb4: {\n         StorageDead(_3);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-        _5 = discriminant(_1);           // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n-        switchInt(move _5) -> [0_isize: bb5, otherwise: bb6]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n+        _5 = discriminant(_1);           // scope 2 at $DIR/issue-41888.rs:10:16: 10:24\n+        switchInt(move _5) -> [0_isize: bb5, otherwise: bb6]; // scope 2 at $DIR/issue-41888.rs:10:16: 10:24\n     }\n \n     bb5: {\n-        StorageLive(_6);                 // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n-        _9 = const false;                // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n-        _6 = move ((_1 as F).0: K);      // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n+        StorageLive(_6);                 // scope 2 at $DIR/issue-41888.rs:10:21: 10:23\n+        _9 = const false;                // scope 2 at $DIR/issue-41888.rs:10:21: 10:23\n+        _6 = move ((_1 as F).0: K);      // scope 2 at $DIR/issue-41888.rs:10:21: 10:23\n         _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:10:29: 13:10\n         StorageDead(_6);                 // scope 1 at $DIR/issue-41888.rs:13:9: 13:10\n         goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10"}, {"sha": "a194cddd52a604c26942ed7cd5ff1e426546f057", "filename": "src/test/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "patch": "@@ -10,9 +10,9 @@\n       let mut _6: u32;                     // in scope 0 at $DIR/issue-75439.rs:10:33: 10:35\n       scope 1 {\n           debug dwords => _2;              // in scope 1 at $DIR/issue-75439.rs:7:9: 7:15\n-          let _4: u32;                     // in scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n           scope 3 {\n               debug ip => _4;              // in scope 3 at $DIR/issue-75439.rs:9:27: 9:29\n+              let _4: u32;                 // in scope 3 at $DIR/issue-75439.rs:9:27: 9:29\n           }\n           scope 4 {\n           }\n@@ -32,15 +32,15 @@\n   \n       bb1: {\n           StorageDead(_3);                 // scope 2 at $DIR/issue-75439.rs:7:52: 7:53\n-          switchInt(_2[0 of 4]) -> [0_u32: bb2, otherwise: bb8]; // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n+          switchInt(_2[0 of 4]) -> [0_u32: bb2, otherwise: bb8]; // scope 3 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb2: {\n-          switchInt(_2[1 of 4]) -> [0_u32: bb3, otherwise: bb8]; // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n+          switchInt(_2[1 of 4]) -> [0_u32: bb3, otherwise: bb8]; // scope 3 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb3: {\n-          switchInt(_2[2 of 4]) -> [0_u32: bb5, 4294901760_u32: bb6, otherwise: bb8]; // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n+          switchInt(_2[2 of 4]) -> [0_u32: bb5, 4294901760_u32: bb6, otherwise: bb8]; // scope 3 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb4: {\n@@ -54,15 +54,15 @@\n       }\n   \n       bb5: {\n-          StorageLive(_4);                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n-          _4 = _2[3 of 4];                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n-          goto -> bb4;                     // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n+          StorageLive(_4);                 // scope 3 at $DIR/issue-75439.rs:9:27: 9:29\n+          _4 = _2[3 of 4];                 // scope 3 at $DIR/issue-75439.rs:9:27: 9:29\n+          goto -> bb4;                     // scope 3 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb6: {\n-          StorageLive(_4);                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n-          _4 = _2[3 of 4];                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n-          goto -> bb4;                     // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n+          StorageLive(_4);                 // scope 3 at $DIR/issue-75439.rs:9:27: 9:29\n+          _4 = _2[3 of 4];                 // scope 3 at $DIR/issue-75439.rs:9:27: 9:29\n+          goto -> bb4;                     // scope 3 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb7: {"}, {"sha": "7137e01fae3b93dde95a654ab0227c6619774b47", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff?ref=b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "patch": "@@ -8,38 +8,38 @@\n       let mut _3: std::option::Option<T>;  // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n       let mut _4: isize;                   // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n       let mut _5: isize;                   // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n-      let _6: u8;                          // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n -     let mut _7: bool;                    // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n -     let mut _8: u8;                      // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n       scope 1 {\n           debug a => _6;                   // in scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n+          let _6: u8;                      // in scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n-          Deinit(_2);                      // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n-          discriminant(_2) = 0;            // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n-          Deinit(_3);                      // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n-          discriminant(_3) = 0;            // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n-          Deinit(_1);                      // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n-          (_1.0: std::option::Option<u8>) = move _2; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n-          (_1.1: std::option::Option<T>) = move _3; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n-          _5 = discriminant((_1.0: std::option::Option<u8>)); // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n-          switchInt(move _5) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n+          StorageLive(_1);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n+          StorageLive(_2);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n+          Deinit(_2);                      // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n+          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n+          StorageLive(_3);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n+          Deinit(_3);                      // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n+          discriminant(_3) = 0;            // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n+          Deinit(_1);                      // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n+          (_1.0: std::option::Option<u8>) = move _2; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n+          (_1.1: std::option::Option<T>) = move _3; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n+          StorageDead(_3);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n+          StorageDead(_2);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n+          _5 = discriminant((_1.0: std::option::Option<u8>)); // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n+          switchInt(move _5) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n       }\n   \n       bb1: {\n-          _4 = discriminant((_1.1: std::option::Option<T>)); // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n-          switchInt(move _4) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n+          _4 = discriminant((_1.1: std::option::Option<T>)); // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n+          switchInt(move _4) -> [0_isize: bb2, otherwise: bb3]; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n       }\n   \n       bb2: {\n-          StorageLive(_6);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n-          _6 = (((_1.0: std::option::Option<u8>) as Some).0: u8); // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n+          StorageLive(_6);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n+          _6 = (((_1.0: std::option::Option<u8>) as Some).0: u8); // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n -         StorageLive(_7);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n -         StorageLive(_8);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n -         _8 = _6;                         // scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13"}, {"sha": "fa8fd0a3c11705071428f8b7658e799452a73ec1", "filename": "src/test/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "patch": "@@ -5,35 +5,35 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/unreachable.rs:8:11: 8:11\n       let mut _1: std::option::Option<Empty>; // in scope 0 at $DIR/unreachable.rs:9:23: 9:30\n       let mut _2: isize;                   // in scope 0 at $DIR/unreachable.rs:9:12: 9:20\n-      let _3: Empty;                       // in scope 0 at $DIR/unreachable.rs:9:17: 9:19\n       let mut _4: i32;                     // in scope 0 at $DIR/unreachable.rs:10:13: 10:19\n       let _5: ();                          // in scope 0 at $DIR/unreachable.rs:12:9: 16:10\n       let mut _6: bool;                    // in scope 0 at $DIR/unreachable.rs:12:12: 12:16\n       let mut _7: !;                       // in scope 0 at $DIR/unreachable.rs:18:9: 18:21\n       scope 1 {\n           debug _x => _3;                  // in scope 1 at $DIR/unreachable.rs:9:17: 9:19\n+          let _3: Empty;                   // in scope 1 at $DIR/unreachable.rs:9:17: 9:19\n       }\n       scope 2 {\n           debug _y => _4;                  // in scope 2 at $DIR/unreachable.rs:10:13: 10:19\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/unreachable.rs:9:23: 9:30\n-          _1 = empty() -> bb1;             // scope 0 at $DIR/unreachable.rs:9:23: 9:30\n+          StorageLive(_1);                 // scope 1 at $DIR/unreachable.rs:9:23: 9:30\n+          _1 = empty() -> bb1;             // scope 1 at $DIR/unreachable.rs:9:23: 9:30\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable.rs:9:23: 9:28\n                                            // + literal: Const { ty: fn() -> Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n--         switchInt(move _2) -> [1_isize: bb2, otherwise: bb6]; // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n-+         goto -> bb2;                     // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n+          _2 = discriminant(_1);           // scope 1 at $DIR/unreachable.rs:9:12: 9:20\n+-         switchInt(move _2) -> [1_isize: bb2, otherwise: bb6]; // scope 1 at $DIR/unreachable.rs:9:12: 9:20\n++         goto -> bb2;                     // scope 1 at $DIR/unreachable.rs:9:12: 9:20\n       }\n   \n       bb2: {\n--         StorageLive(_3);                 // scope 0 at $DIR/unreachable.rs:9:17: 9:19\n--         _3 = move ((_1 as Some).0: Empty); // scope 0 at $DIR/unreachable.rs:9:17: 9:19\n+-         StorageLive(_3);                 // scope 1 at $DIR/unreachable.rs:9:17: 9:19\n+-         _3 = move ((_1 as Some).0: Empty); // scope 1 at $DIR/unreachable.rs:9:17: 9:19\n -         StorageLive(_4);                 // scope 0 at $DIR/unreachable.rs:10:13: 10:19\n -         StorageLive(_5);                 // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -         StorageLive(_6);                 // scope 2 at $DIR/unreachable.rs:12:12: 12:16"}, {"sha": "48c9f6bf27159469be35f14d3b6f7f02adba9188", "filename": "src/test/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "patch": "@@ -11,31 +11,31 @@\n       let mut _7: !;                       // in scope 0 at $DIR/unreachable_diverging.rs:18:9: 18:22\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/unreachable_diverging.rs:13:9: 13:10\n-          let _4: Empty;                   // in scope 1 at $DIR/unreachable_diverging.rs:14:17: 14:21\n           scope 2 {\n               debug bomb => _4;            // in scope 2 at $DIR/unreachable_diverging.rs:14:17: 14:21\n+              let _4: Empty;               // in scope 2 at $DIR/unreachable_diverging.rs:14:17: 14:21\n           }\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/unreachable_diverging.rs:13:9: 13:10\n           _1 = const true;                 // scope 0 at $DIR/unreachable_diverging.rs:13:13: 13:17\n-          StorageLive(_2);                 // scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n-          _2 = empty() -> bb1;             // scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n+          StorageLive(_2);                 // scope 2 at $DIR/unreachable_diverging.rs:14:25: 14:32\n+          _2 = empty() -> bb1;             // scope 2 at $DIR/unreachable_diverging.rs:14:25: 14:32\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:14:25: 14:30\n                                            // + literal: Const { ty: fn() -> Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n-          _3 = discriminant(_2);           // scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n--         switchInt(move _3) -> [1_isize: bb2, otherwise: bb6]; // scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n-+         switchInt(move _3) -> [1_isize: bb2, otherwise: bb5]; // scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n+          _3 = discriminant(_2);           // scope 2 at $DIR/unreachable_diverging.rs:14:12: 14:22\n+-         switchInt(move _3) -> [1_isize: bb2, otherwise: bb6]; // scope 2 at $DIR/unreachable_diverging.rs:14:12: 14:22\n++         switchInt(move _3) -> [1_isize: bb2, otherwise: bb5]; // scope 2 at $DIR/unreachable_diverging.rs:14:12: 14:22\n       }\n   \n       bb2: {\n-          StorageLive(_4);                 // scope 1 at $DIR/unreachable_diverging.rs:14:17: 14:21\n-          _4 = move ((_2 as Some).0: Empty); // scope 1 at $DIR/unreachable_diverging.rs:14:17: 14:21\n+          StorageLive(_4);                 // scope 2 at $DIR/unreachable_diverging.rs:14:17: 14:21\n+          _4 = move ((_2 as Some).0: Empty); // scope 2 at $DIR/unreachable_diverging.rs:14:17: 14:21\n           StorageLive(_5);                 // scope 1 at $DIR/unreachable_diverging.rs:15:9: 17:10\n           StorageLive(_6);                 // scope 1 at $DIR/unreachable_diverging.rs:15:12: 15:13\n           _6 = _1;                         // scope 1 at $DIR/unreachable_diverging.rs:15:12: 15:13"}, {"sha": "d6156eaaf482345412cb0874dd1db849cc909122", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.64bit.diff", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff?ref=b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "patch": "@@ -13,22 +13,24 @@\n       let mut _8: !;                       // in scope 0 at $DIR/while_let_loops.rs:7:5: 10:6\n       scope 1 {\n           debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:6:9: 6:15\n+          scope 2 {\n+          }\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n           _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n-          StorageLive(_3);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n-          Deinit(_3);                      // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n-          discriminant(_3) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n--         _4 = discriminant(_3);           // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n--         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n-+         _4 = const 0_isize;              // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n-+         switchInt(const 0_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n+          StorageLive(_3);                 // scope 2 at $DIR/while_let_loops.rs:7:28: 7:32\n+          Deinit(_3);                      // scope 2 at $DIR/while_let_loops.rs:7:28: 7:32\n+          discriminant(_3) = 0;            // scope 2 at $DIR/while_let_loops.rs:7:28: 7:32\n+-         _4 = discriminant(_3);           // scope 2 at $DIR/while_let_loops.rs:7:15: 7:25\n+-         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:7:15: 7:25\n++         _4 = const 0_isize;              // scope 2 at $DIR/while_let_loops.rs:7:15: 7:25\n++         switchInt(const 0_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:7:15: 7:25\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb2, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n+          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb2, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:7:15: 7:25\n       }\n   \n       bb2: {"}, {"sha": "5657f9413a1b4e585bc62f359a2edc4ba3035c4c", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b48f3d86fcd797eb3d654bb570e1623e610e7dc1/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir?ref=b48f3d86fcd797eb3d654bb570e1623e610e7dc1", "patch": "@@ -5,6 +5,8 @@ fn change_loop_body() -> () {\n     let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n     scope 1 {\n         debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:6:9: 6:15\n+        scope 2 {\n+        }\n     }\n \n     bb0: {"}]}