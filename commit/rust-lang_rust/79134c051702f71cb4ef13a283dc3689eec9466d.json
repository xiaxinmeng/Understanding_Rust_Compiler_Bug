{"sha": "79134c051702f71cb4ef13a283dc3689eec9466d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MTM0YzA1MTcwMmY3MWNiNGVmMTNhMjgzZGMzNjg5ZWVjOTQ2NmQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-27T00:38:43Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-01-12T13:18:55Z"}, "message": "Stabilize `uniform_paths`", "tree": {"sha": "37d06b01291e27872a4aa551faa2e2090445da19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37d06b01291e27872a4aa551faa2e2090445da19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79134c051702f71cb4ef13a283dc3689eec9466d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79134c051702f71cb4ef13a283dc3689eec9466d", "html_url": "https://github.com/rust-lang/rust/commit/79134c051702f71cb4ef13a283dc3689eec9466d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79134c051702f71cb4ef13a283dc3689eec9466d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f3db49c3d99d0338b4a47b62079da71c26db458", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f3db49c3d99d0338b4a47b62079da71c26db458", "html_url": "https://github.com/rust-lang/rust/commit/2f3db49c3d99d0338b4a47b62079da71c26db458"}], "stats": {"total": 273, "additions": 60, "deletions": 213}, "files": [{"sha": "bb679d340eae7dd65f198e384e7bd6334cacfc8b", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -831,32 +831,23 @@ impl<'a> Resolver<'a> {\n             // but its `Def` should coincide with a crate passed with `--extern`\n             // (otherwise there would be ambiguity) and we can skip feature error in this case.\n             'ok: {\n-                if !is_import || (!rust_2015 && self.session.features_untracked().uniform_paths) {\n+                if !is_import || !rust_2015 {\n                     break 'ok;\n                 }\n                 if ns == TypeNS && use_prelude && self.extern_prelude_get(ident, true).is_some() {\n                     break 'ok;\n                 }\n-                if rust_2015 {\n-                    let root_ident = Ident::new(keywords::PathRoot.name(), orig_ident.span);\n-                    let root_module = self.resolve_crate_root(root_ident);\n-                    if self.resolve_ident_in_module_ext(ModuleOrUniformRoot::Module(root_module),\n-                                                        orig_ident, ns, None, false, path_span)\n-                                                        .is_ok() {\n-                        break 'ok;\n-                    }\n+                let root_ident = Ident::new(keywords::PathRoot.name(), orig_ident.span);\n+                let root_module = self.resolve_crate_root(root_ident);\n+                if self.resolve_ident_in_module_ext(ModuleOrUniformRoot::Module(root_module),\n+                                                    orig_ident, ns, None, false, path_span)\n+                                                    .is_ok() {\n+                    break 'ok;\n                 }\n \n-                let reason = if rust_2015 {\n-                    \"in macros originating from 2015 edition\"\n-                } else {\n-                    \"on stable channel\"\n-                };\n-                let msg = format!(\"imports can only refer to extern crate names \\\n-                                   passed with `--extern` {}\", reason);\n-                let mut err = feature_err(&self.session.parse_sess, \"uniform_paths\",\n-                                          ident.span, GateIssue::Language, &msg);\n-\n+                let msg = \"imports can only refer to extern crate names passed with \\\n+                           `--extern` in macros originating from 2015 edition\";\n+                let mut err = self.session.struct_span_err(ident.span, msg);\n                 let what = self.binding_description(binding, ident,\n                                                     flags.contains(Flags::MISC_FROM_PRELUDE));\n                 let note_msg = format!(\"this import refers to {what}\", what = what);"}, {"sha": "19b8df80a6ab2d6e2a7ed0365e734e5dd9eb7b3b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -440,9 +440,6 @@ declare_features! (\n     // support for arbitrary delimited token streams in non-macro attributes\n     (active, unrestricted_attribute_tokens, \"1.30.0\", Some(55208), None),\n \n-    // Allows `use x::y;` to resolve through `self::x`, not just `::x`.\n-    (active, uniform_paths, \"1.30.0\", Some(53130), None),\n-\n     // Allows unsized rvalues at arguments and parameters.\n     (active, unsized_locals, \"1.30.0\", Some(48055), None),\n \n@@ -687,6 +684,8 @@ declare_features! (\n     (accepted, cfg_attr_multi, \"1.33.0\", Some(54881), None),\n     // Top level or-patterns (`p | q`) in `if let` and `while let`.\n     (accepted, if_while_or_patterns, \"1.33.0\", Some(48215), None),\n+    // Allows `use x::y;` to search `x` in the current scope.\n+    (accepted, uniform_paths, \"1.32.0\", Some(53130), None),\n );\n \n // If you change this, please modify `src/doc/unstable-book` as well. You must"}, {"sha": "a46533178609bb7b6677944d34e61e6ef2bc24e5", "filename": "src/test/run-pass/uniform-paths/auxiliary/issue-53691.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Frun-pass%2Funiform-paths%2Fauxiliary%2Fissue-53691.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Frun-pass%2Funiform-paths%2Fauxiliary%2Fissue-53691.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiform-paths%2Fauxiliary%2Fissue-53691.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n mod m { pub fn f() {} }\n mod n { pub fn g() {} }\n "}, {"sha": "e4e8b32c70ee9a1d6907d9d45adfb223861375a4", "filename": "src/test/run-pass/uniform-paths/basic-nested.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Frun-pass%2Funiform-paths%2Fbasic-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Frun-pass%2Funiform-paths%2Fbasic-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiform-paths%2Fbasic-nested.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,12 +1,12 @@\n-// run-pass\n-#![allow(unused_imports)]\n-#![allow(non_camel_case_types)]\n+// This test is similar to `basic.rs`, but nested in modules.\n \n+// run-pass\n // edition:2018\n \n-#![feature(decl_macro, uniform_paths)]\n+#![feature(decl_macro)]\n \n-// This test is similar to `basic.rs`, but nested in modules.\n+#![allow(unused_imports)]\n+#![allow(non_camel_case_types)]\n \n mod foo {\n     // Test that ambiguity errors are not emitted between `self::test` and"}, {"sha": "4e2e2dedef67924c9bb265bbba87d59500b691f1", "filename": "src/test/run-pass/uniform-paths/basic.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Frun-pass%2Funiform-paths%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Frun-pass%2Funiform-paths%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiform-paths%2Fbasic.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,10 +1,8 @@\n // run-pass\n-#![allow(unused_imports)]\n-#![allow(non_camel_case_types)]\n-\n // edition:2018\n \n-#![feature(uniform_paths)]\n+#![allow(unused_imports)]\n+#![allow(non_camel_case_types)]\n \n // Test that ambiguity errors are not emitted between `self::test` and\n // `::test`, assuming the latter (crate) is not in `extern_prelude`."}, {"sha": "a62a28bb94d12681bf90d7ff97bfd750b914cfa4", "filename": "src/test/run-pass/uniform-paths/macros-nested.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Frun-pass%2Funiform-paths%2Fmacros-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Frun-pass%2Funiform-paths%2Fmacros-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiform-paths%2Fmacros-nested.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,11 +1,9 @@\n-// run-pass\n-#![allow(non_camel_case_types)]\n+// This test is similar to `macros.rs`, but nested in modules.\n \n+// run-pass\n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n-// This test is similar to `macros.rs`, but nested in modules.\n+#![allow(non_camel_case_types)]\n \n mod foo {\n     // Test that ambiguity errors are not emitted between `self::test` and"}, {"sha": "31b809f0cfdc5f2a5ad39ad08a64ca302017e2b9", "filename": "src/test/run-pass/uniform-paths/macros.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Frun-pass%2Funiform-paths%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Frun-pass%2Funiform-paths%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiform-paths%2Fmacros.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,11 +1,9 @@\n-// run-pass\n-#![allow(non_camel_case_types)]\n+// This test is similar to `basic.rs`, but with macros defining local items.\n \n+// run-pass\n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n-// This test is similar to `basic.rs`, but with macros defining local items.\n+#![allow(non_camel_case_types)]\n \n // Test that ambiguity errors are not emitted between `self::test` and\n // `::test`, assuming the latter (crate) is not in `extern_prelude`."}, {"sha": "ce4cc13d9ecd7876007f5ed679a90deca6fe0aae", "filename": "src/test/run-pass/uniform-paths/same-crate.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Frun-pass%2Funiform-paths%2Fsame-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Frun-pass%2Funiform-paths%2Fsame-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiform-paths%2Fsame-crate.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,9 +1,6 @@\n // run-pass\n-\n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n pub const A: usize = 0;\n \n pub mod foo {"}, {"sha": "5ba45b19dded0f22bef9377a9facd12e813221e3", "filename": "src/test/ui/editions/edition-imports-2015.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -3,8 +3,6 @@\n // aux-build:edition-imports-2018.rs\n // aux-build:absolute.rs\n \n-#![feature(uniform_paths)]\n-\n #[macro_use]\n extern crate edition_imports_2018;\n "}, {"sha": "816ab21d81426677658c193b21826d4945373de5", "filename": "src/test/ui/editions/edition-imports-2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.stderr?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,5 +1,5 @@\n error: cannot glob-import all possible crates\n-  --> $DIR/edition-imports-2015.rs:25:5\n+  --> $DIR/edition-imports-2015.rs:23:5\n    |\n LL |     gen_glob!(); //~ ERROR cannot glob-import all possible crates\n    |     ^^^^^^^^^^^^"}, {"sha": "7c78fbb26a1b876060066374b0cab7a58e641504", "filename": "src/test/ui/editions/edition-imports-virtual-2015-gated.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: imports can only refer to extern crate names passed with `--extern` in macros originating from 2015 edition (see issue #53130)\n+error: imports can only refer to extern crate names passed with `--extern` in macros originating from 2015 edition\n   --> <::edition_imports_2015::gen_gated macros>:1:50\n    |\n LL | (  ) => { fn check_gated (  ) { enum E { A } use E :: * ; } }\n@@ -9,7 +9,6 @@ LL | (  ) => { fn check_gated (  ) { enum E { A } use E :: * ; } }\n LL |     gen_gated!();\n    |     ------------- not an extern crate passed with `--extern`\n    |\n-   = help: add #![feature(uniform_paths)] to the crate attributes to enable\n note: this import refers to the enum defined here\n   --> $DIR/edition-imports-virtual-2015-gated.rs:9:5\n    |\n@@ -19,4 +18,3 @@ LL |     gen_gated!();\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "71f880aae2cec9f204a47fcff8cd03603b600d86", "filename": "src/test/ui/feature-gates/feature-gate-uniform-paths.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2f3db49c3d99d0338b4a47b62079da71c26db458/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-uniform-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3db49c3d99d0338b4a47b62079da71c26db458/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-uniform-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-uniform-paths.rs?ref=2f3db49c3d99d0338b4a47b62079da71c26db458", "patch": "@@ -1,19 +0,0 @@\n-// edition:2018\n-\n-pub mod foo {\n-    pub use bar::Bar; //~ ERROR imports can only refer to extern crate names\n-\n-    pub mod bar {\n-        pub struct Bar;\n-    }\n-}\n-\n-use inline; //~ ERROR imports can only refer to extern crate names\n-\n-use Vec; //~ ERROR imports can only refer to extern crate names\n-\n-use vec; //~ ERROR imports can only refer to extern crate names\n-\n-fn main() {\n-    let _ = foo::Bar;\n-}"}, {"sha": "8b79e597e63fe78eb960ce480c82e13423d4c116", "filename": "src/test/ui/feature-gates/feature-gate-uniform-paths.stderr", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2f3db49c3d99d0338b4a47b62079da71c26db458/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-uniform-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f3db49c3d99d0338b4a47b62079da71c26db458/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-uniform-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-uniform-paths.stderr?ref=2f3db49c3d99d0338b4a47b62079da71c26db458", "patch": "@@ -1,50 +0,0 @@\n-error[E0658]: imports can only refer to extern crate names passed with `--extern` on stable channel (see issue #53130)\n-  --> $DIR/feature-gate-uniform-paths.rs:4:13\n-   |\n-LL |       pub use bar::Bar; //~ ERROR imports can only refer to extern crate names\n-   |               ^^^\n-LL | \n-LL | /     pub mod bar {\n-LL | |         pub struct Bar;\n-LL | |     }\n-   | |_____- not an extern crate passed with `--extern`\n-   |\n-   = help: add #![feature(uniform_paths)] to the crate attributes to enable\n-note: this import refers to the module defined here\n-  --> $DIR/feature-gate-uniform-paths.rs:6:5\n-   |\n-LL | /     pub mod bar {\n-LL | |         pub struct Bar;\n-LL | |     }\n-   | |_____^\n-\n-error[E0658]: imports can only refer to extern crate names passed with `--extern` on stable channel (see issue #53130)\n-  --> $DIR/feature-gate-uniform-paths.rs:11:5\n-   |\n-LL | use inline; //~ ERROR imports can only refer to extern crate names\n-   |     ^^^^^^ not an extern crate passed with `--extern`\n-   |\n-   = help: add #![feature(uniform_paths)] to the crate attributes to enable\n-   = note: this import refers to a built-in attribute\n-\n-error[E0658]: imports can only refer to extern crate names passed with `--extern` on stable channel (see issue #53130)\n-  --> $DIR/feature-gate-uniform-paths.rs:13:5\n-   |\n-LL | use Vec; //~ ERROR imports can only refer to extern crate names\n-   |     ^^^ not an extern crate passed with `--extern`\n-   |\n-   = help: add #![feature(uniform_paths)] to the crate attributes to enable\n-   = note: this import refers to a struct from prelude\n-\n-error[E0658]: imports can only refer to extern crate names passed with `--extern` on stable channel (see issue #53130)\n-  --> $DIR/feature-gate-uniform-paths.rs:15:5\n-   |\n-LL | use vec; //~ ERROR imports can only refer to extern crate names\n-   |     ^^^ not an extern crate passed with `--extern`\n-   |\n-   = help: add #![feature(uniform_paths)] to the crate attributes to enable\n-   = note: this import refers to a macro from prelude\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "ec5747b4bca8c8b0c75aaa9fd62c93c6dffefb2d", "filename": "src/test/ui/imports/issue-56125.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Fimports%2Fissue-56125.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Fimports%2Fissue-56125.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-56125.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -2,8 +2,6 @@\n // compile-flags:--extern issue_56125\n // aux-build:issue-56125.rs\n \n-#![feature(uniform_paths)]\n-\n mod m1 {\n     use issue_56125::last_segment::*;\n     //~^ ERROR `issue_56125` is ambiguous"}, {"sha": "13d4068b5628d2081ea8d9752857d78853b0011f", "filename": "src/test/ui/imports/issue-56125.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,49 +1,49 @@\n error[E0432]: unresolved import `empty::issue_56125`\n-  --> $DIR/issue-56125.rs:19:9\n+  --> $DIR/issue-56125.rs:17:9\n    |\n LL |     use empty::issue_56125; //~ ERROR unresolved import `empty::issue_56125`\n    |         ^^^^^^^^^^^^^^^^^^ no `issue_56125` in `m3::empty`\n \n error[E0659]: `issue_56125` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/issue-56125.rs:8:9\n+  --> $DIR/issue-56125.rs:6:9\n    |\n LL |     use issue_56125::last_segment::*;\n    |         ^^^^^^^^^^^ ambiguous name\n    |\n    = note: `issue_56125` could refer to an extern crate passed with `--extern`\n    = help: use `::issue_56125` to refer to this extern crate unambiguously\n note: `issue_56125` could also refer to the module imported here\n-  --> $DIR/issue-56125.rs:8:9\n+  --> $DIR/issue-56125.rs:6:9\n    |\n LL |     use issue_56125::last_segment::*;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use `self::issue_56125` to refer to this module unambiguously\n \n error[E0659]: `issue_56125` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/issue-56125.rs:13:9\n+  --> $DIR/issue-56125.rs:11:9\n    |\n LL |     use issue_56125::non_last_segment::non_last_segment::*;\n    |         ^^^^^^^^^^^ ambiguous name\n    |\n    = note: `issue_56125` could refer to an extern crate passed with `--extern`\n    = help: use `::issue_56125` to refer to this extern crate unambiguously\n note: `issue_56125` could also refer to the module imported here\n-  --> $DIR/issue-56125.rs:13:9\n+  --> $DIR/issue-56125.rs:11:9\n    |\n LL |     use issue_56125::non_last_segment::non_last_segment::*;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use `self::issue_56125` to refer to this module unambiguously\n \n error[E0659]: `issue_56125` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/issue-56125.rs:20:9\n+  --> $DIR/issue-56125.rs:18:9\n    |\n LL |     use issue_56125::*; //~ ERROR `issue_56125` is ambiguous\n    |         ^^^^^^^^^^^ ambiguous name\n    |\n    = note: `issue_56125` could refer to an extern crate passed with `--extern`\n    = help: use `::issue_56125` to refer to this extern crate unambiguously\n note: `issue_56125` could also refer to the module imported here\n-  --> $DIR/issue-56125.rs:20:9\n+  --> $DIR/issue-56125.rs:17:9\n    |\n LL |     use issue_56125::*; //~ ERROR `issue_56125` is ambiguous\n    |         ^^^^^^^^^^^^^^"}, {"sha": "dd21de75aaf75bb1e2847b345c39995a9b2c447e", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/not-whitelisted.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n // Tests that arbitrary crates (other than `core`, `std` and `meta`)\n // aren't allowed without `--extern`, even if they're in the sysroot.\n use alloc; //~ ERROR unresolved import `alloc`"}, {"sha": "3bea7816b3061e6726bffb60dd0df442ba36a47f", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/not-whitelisted.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.stderr?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,11 +1,11 @@\n error: cannot import a built-in macro\n-  --> $DIR/not-whitelisted.rs:8:5\n+  --> $DIR/not-whitelisted.rs:6:5\n    |\n LL | use test; //~ ERROR cannot import a built-in macro\n    |     ^^^^\n \n error[E0432]: unresolved import `alloc`\n-  --> $DIR/not-whitelisted.rs:7:5\n+  --> $DIR/not-whitelisted.rs:5:5\n    |\n LL | use alloc; //~ ERROR unresolved import `alloc`\n    |     ^^^^^ no `alloc` external crate"}, {"sha": "5c377dda7c67cdf12608d032c14e728938ed27a4", "filename": "src/test/ui/rust-2018/future-proofing-locals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n \n-#![feature(uniform_paths)]\n #![allow(non_camel_case_types)]\n \n mod T {"}, {"sha": "68354b332a9c68036c366f45b69f3efd787a8b20", "filename": "src/test/ui/rust-2018/future-proofing-locals.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,47 +1,47 @@\n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:14:9\n+  --> $DIR/future-proofing-locals.rs:13:9\n    |\n LL |     use T as _; //~ ERROR imports cannot refer to type parameters\n    |         ^\n \n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:15:9\n+  --> $DIR/future-proofing-locals.rs:14:9\n    |\n LL |     use T::U; //~ ERROR imports cannot refer to type parameters\n    |         ^\n \n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:16:9\n+  --> $DIR/future-proofing-locals.rs:15:9\n    |\n LL |     use T::*; //~ ERROR imports cannot refer to type parameters\n    |         ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:26:9\n+  --> $DIR/future-proofing-locals.rs:25:9\n    |\n LL |     use x as _; //~ ERROR imports cannot refer to local variables\n    |         ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:32:9\n+  --> $DIR/future-proofing-locals.rs:31:9\n    |\n LL |     use x; //~ ERROR imports cannot refer to local variables\n    |         ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:38:17\n+  --> $DIR/future-proofing-locals.rs:37:17\n    |\n LL |             use x; //~ ERROR imports cannot refer to local variables\n    |                 ^\n \n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:46:10\n+  --> $DIR/future-proofing-locals.rs:45:10\n    |\n LL |     use {T as _, x}; //~ ERROR imports cannot refer to type parameters\n    |          ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:46:18\n+  --> $DIR/future-proofing-locals.rs:45:18\n    |\n LL |     use {T as _, x}; //~ ERROR imports cannot refer to type parameters\n    |                  ^"}, {"sha": "5eafbb2c2fc66a2ef86f1a8f1e4b159475caef14", "filename": "src/test/ui/rust-2018/local-path-suggestions-2018.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2018.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -2,8 +2,6 @@\n // compile-flags:--extern baz\n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n mod foo {\n     pub type Bar = u32;\n }"}, {"sha": "71c8289264ffe47620b21f0ec208afc263a33b05", "filename": "src/test/ui/rust-2018/local-path-suggestions-2018.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2018.stderr?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,13 +1,13 @@\n error[E0432]: unresolved import `foo`\n-  --> $DIR/local-path-suggestions-2018.rs:12:9\n+  --> $DIR/local-path-suggestions-2018.rs:10:9\n    |\n LL |     use foo::Bar; //~ ERROR unresolved import `foo`\n    |         ^^^ did you mean `crate::foo`?\n    |\n    = note: `use` statements changed in Rust 2018; read more at <https://doc.rust-lang.org/edition-guide/rust-2018/module-system/path-clarity.html>\n \n error[E0432]: unresolved import `foobar`\n-  --> $DIR/local-path-suggestions-2018.rs:21:5\n+  --> $DIR/local-path-suggestions-2018.rs:19:5\n    |\n LL | use foobar::Baz; //~ ERROR unresolved import `foobar`\n    |     ^^^^^^ did you mean `baz::foobar`?"}, {"sha": "3f5897901a056b7cb1714f880ebe41222e7d31f8", "filename": "src/test/ui/rust-2018/uniform-paths/block-scoped-shadow-nested.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow-nested.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n mod my {\n     pub mod sub {\n         pub fn bar() {}"}, {"sha": "4a01ba5088f62099cf2f200b76f4db2549a72d7a", "filename": "src/test/ui/rust-2018/uniform-paths/block-scoped-shadow-nested.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow-nested.stderr?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,16 +1,16 @@\n error[E0659]: `sub` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/block-scoped-shadow-nested.rs:18:13\n+  --> $DIR/block-scoped-shadow-nested.rs:16:13\n    |\n LL |         use sub::bar; //~ ERROR `sub` is ambiguous\n    |             ^^^ ambiguous name\n    |\n note: `sub` could refer to the module imported here\n-  --> $DIR/block-scoped-shadow-nested.rs:16:9\n+  --> $DIR/block-scoped-shadow-nested.rs:14:9\n    |\n LL |     use my::sub;\n    |         ^^^^^^^\n note: `sub` could also refer to the module defined here\n-  --> $DIR/block-scoped-shadow-nested.rs:11:1\n+  --> $DIR/block-scoped-shadow-nested.rs:9:1\n    |\n LL | / mod sub {\n LL | |     pub fn bar() {}"}, {"sha": "0c2da1884b758744e4aff57539597b217d0c5a08", "filename": "src/test/ui/rust-2018/uniform-paths/fn-local-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Ffn-local-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Ffn-local-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Ffn-local-enum.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,8 +1,6 @@\n // compile-pass\n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n fn main() {\n     enum E { A, B, C }\n "}, {"sha": "536cc25e35ac1b4b4516a482e93d3c3b90015b0b", "filename": "src/test/ui/rust-2018/uniform-paths/issue-54390.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f3db49c3d99d0338b4a47b62079da71c26db458/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54390.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3db49c3d99d0338b4a47b62079da71c26db458/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54390.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54390.rs?ref=2f3db49c3d99d0338b4a47b62079da71c26db458", "patch": "@@ -1,11 +0,0 @@\n-// edition:2018\n-\n-#![deny(unused)]\n-\n-use std::fmt;\n-\n-// No \"unresolved import\" + \"unused import\" combination here.\n-use fmt::Write; //~ ERROR imports can only refer to extern crate names\n-                //~| ERROR unused import: `fmt::Write`\n-\n-fn main() {}"}, {"sha": "8f86698c9c11a16e57ca83bab3a7f1a542736ed3", "filename": "src/test/ui/rust-2018/uniform-paths/issue-54390.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2f3db49c3d99d0338b4a47b62079da71c26db458/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54390.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f3db49c3d99d0338b4a47b62079da71c26db458/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54390.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54390.stderr?ref=2f3db49c3d99d0338b4a47b62079da71c26db458", "patch": "@@ -1,32 +0,0 @@\n-error[E0658]: imports can only refer to extern crate names passed with `--extern` on stable channel (see issue #53130)\n-  --> $DIR/issue-54390.rs:8:5\n-   |\n-LL | use std::fmt;\n-   |     -------- not an extern crate passed with `--extern`\n-...\n-LL | use fmt::Write; //~ ERROR imports can only refer to extern crate names\n-   |     ^^^\n-   |\n-   = help: add #![feature(uniform_paths)] to the crate attributes to enable\n-note: this import refers to the module imported here\n-  --> $DIR/issue-54390.rs:5:5\n-   |\n-LL | use std::fmt;\n-   |     ^^^^^^^^\n-\n-error: unused import: `fmt::Write`\n-  --> $DIR/issue-54390.rs:8:5\n-   |\n-LL | use fmt::Write; //~ ERROR imports can only refer to extern crate names\n-   |     ^^^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-54390.rs:3:9\n-   |\n-LL | #![deny(unused)]\n-   |         ^^^^^^\n-   = note: #[deny(unused_imports)] implied by #[deny(unused)]\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "6c3f1892cb3697ffd27bf570d72bd64917908850", "filename": "src/test/ui/rust-2018/uniform-paths/macro-rules.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#![feature(decl_macro, uniform_paths)]\n+#![feature(decl_macro)]\n \n mod m1 {\n     // Non-exported legacy macros are treated as `pub(crate)`.\n@@ -14,6 +14,7 @@ mod m1 {\n mod m2 {\n     macro_rules! legacy_macro { () => () }\n \n+    #[allow(non_camel_case_types)]\n     type legacy_macro = u8;\n \n     // Legacy macro imports don't prevent names from other namespaces from being imported."}, {"sha": "541fc1be4e82f7920973868c25f9adeffaa35ba0", "filename": "src/test/ui/rust-2018/uniform-paths/prelude-fail-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n // Built-in attribute\n use inline as imported_inline;\n mod builtin {"}, {"sha": "40b8fcf7158eb3fde3855e0acf4745d8ca140f2a", "filename": "src/test/ui/rust-2018/uniform-paths/prelude-fail-2.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail-2.stderr?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,41 +1,41 @@\n error: cannot use a built-in attribute through an import\n-  --> $DIR/prelude-fail-2.rs:17:3\n+  --> $DIR/prelude-fail-2.rs:15:3\n    |\n LL | #[imported_inline] //~ ERROR cannot use a built-in attribute through an import\n    |   ^^^^^^^^^^^^^^^\n    |\n note: the built-in attribute imported here\n-  --> $DIR/prelude-fail-2.rs:6:5\n+  --> $DIR/prelude-fail-2.rs:4:5\n    |\n LL | use inline as imported_inline;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cannot use a built-in attribute through an import\n-  --> $DIR/prelude-fail-2.rs:18:3\n+  --> $DIR/prelude-fail-2.rs:16:3\n    |\n LL | #[builtin::imported_inline] //~ ERROR cannot use a built-in attribute through an import\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cannot use a tool module through an import\n-  --> $DIR/prelude-fail-2.rs:19:3\n+  --> $DIR/prelude-fail-2.rs:17:3\n    |\n LL | #[imported_rustfmt::skip] //~ ERROR cannot use a tool module through an import\n    |   ^^^^^^^^^^^^^^^^\n    |\n note: the tool module imported here\n-  --> $DIR/prelude-fail-2.rs:12:5\n+  --> $DIR/prelude-fail-2.rs:10:5\n    |\n LL | use rustfmt as imported_rustfmt;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cannot use a tool module through an import\n-  --> $DIR/prelude-fail-2.rs:20:13\n+  --> $DIR/prelude-fail-2.rs:18:13\n    |\n LL | #[tool_mod::imported_rustfmt::skip] //~ ERROR cannot use a tool module through an import\n    |             ^^^^^^^^^^^^^^^^\n    |\n note: the tool module imported here\n-  --> $DIR/prelude-fail-2.rs:14:13\n+  --> $DIR/prelude-fail-2.rs:12:13\n    |\n LL |     pub use rustfmt as imported_rustfmt;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d717884c901b3e6efd658fc8035c3128b7a72331", "filename": "src/test/ui/rust-2018/uniform-paths/prelude-fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n // Built-in macro\n use env as env_imported; //~ ERROR cannot import a built-in macro\n "}, {"sha": "fdfea416b12f1af9d7d907ae0afba6688ad5d444", "filename": "src/test/ui/rust-2018/uniform-paths/prelude-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.stderr?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,11 +1,11 @@\n error: cannot import a built-in macro\n-  --> $DIR/prelude-fail.rs:6:5\n+  --> $DIR/prelude-fail.rs:4:5\n    |\n LL | use env as env_imported; //~ ERROR cannot import a built-in macro\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error[E0432]: unresolved import `rustfmt`\n-  --> $DIR/prelude-fail.rs:9:5\n+  --> $DIR/prelude-fail.rs:7:5\n    |\n LL | use rustfmt::skip as imported_rustfmt_skip; //~ ERROR unresolved import `rustfmt`\n    |     ^^^^^^^ not a module `rustfmt`"}, {"sha": "9a326b4c728bdd68eb791ba6166072b08629870e", "filename": "src/test/ui/rust-2018/uniform-paths/prelude.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79134c051702f71cb4ef13a283dc3689eec9466d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude.rs?ref=79134c051702f71cb4ef13a283dc3689eec9466d", "patch": "@@ -1,8 +1,6 @@\n // compile-pass\n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n // Macro imported with `#[macro_use] extern crate`\n use vec as imported_vec;\n "}]}