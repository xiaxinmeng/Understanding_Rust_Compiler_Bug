{"sha": "51617b83a18b2a0b1f0f2cae8c43e42043a86b76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNjE3YjgzYTE4YjJhMGIxZjBmMmNhZThjNDNlNDIwNDNhODZiNzY=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-02-25T14:06:50Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-02-27T05:15:57Z"}, "message": "new lint: iter_count", "tree": {"sha": "fe13f9f81a9759acc19c543e0f7e0716335cfd67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe13f9f81a9759acc19c543e0f7e0716335cfd67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51617b83a18b2a0b1f0f2cae8c43e42043a86b76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51617b83a18b2a0b1f0f2cae8c43e42043a86b76", "html_url": "https://github.com/rust-lang/rust/commit/51617b83a18b2a0b1f0f2cae8c43e42043a86b76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51617b83a18b2a0b1f0f2cae8c43e42043a86b76/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7154b2360114977cd67bb844114cf429fa9cdb88", "url": "https://api.github.com/repos/rust-lang/rust/commits/7154b2360114977cd67bb844114cf429fa9cdb88", "html_url": "https://github.com/rust-lang/rust/commit/7154b2360114977cd67bb844114cf429fa9cdb88"}], "stats": {"total": 238, "additions": 238, "deletions": 0}, "files": [{"sha": "41c334c68169b98e3cb73305bdd2e5a844ad7fba", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51617b83a18b2a0b1f0f2cae8c43e42043a86b76/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/51617b83a18b2a0b1f0f2cae8c43e42043a86b76/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=51617b83a18b2a0b1f0f2cae8c43e42043a86b76", "patch": "@@ -2135,6 +2135,7 @@ Released 2018-09-13\n [`invisible_characters`]: https://rust-lang.github.io/rust-clippy/master/index.html#invisible_characters\n [`items_after_statements`]: https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements\n [`iter_cloned_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_cloned_collect\n+[`iter_count`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_count\n [`iter_next_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_loop\n [`iter_next_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_slice\n [`iter_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth"}, {"sha": "1ace4c8a10c91bc7e5bb6c72b83c2152ee62842e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/51617b83a18b2a0b1f0f2cae8c43e42043a86b76/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51617b83a18b2a0b1f0f2cae8c43e42043a86b76/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=51617b83a18b2a0b1f0f2cae8c43e42043a86b76", "patch": "@@ -775,6 +775,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::INTO_ITER_ON_REF,\n         &methods::ITERATOR_STEP_BY_ZERO,\n         &methods::ITER_CLONED_COLLECT,\n+        &methods::ITER_COUNT,\n         &methods::ITER_NEXT_SLICE,\n         &methods::ITER_NTH,\n         &methods::ITER_NTH_ZERO,\n@@ -1577,6 +1578,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::INTO_ITER_ON_REF),\n         LintId::of(&methods::ITERATOR_STEP_BY_ZERO),\n         LintId::of(&methods::ITER_CLONED_COLLECT),\n+        LintId::of(&methods::ITER_COUNT),\n         LintId::of(&methods::ITER_NEXT_SLICE),\n         LintId::of(&methods::ITER_NTH),\n         LintId::of(&methods::ITER_NTH_ZERO),\n@@ -1881,6 +1883,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::FILTER_NEXT),\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n         LintId::of(&methods::INSPECT_FOR_EACH),\n+        LintId::of(&methods::ITER_COUNT),\n         LintId::of(&methods::MANUAL_FILTER_MAP),\n         LintId::of(&methods::MANUAL_FIND_MAP),\n         LintId::of(&methods::OPTION_AS_REF_DEREF),"}, {"sha": "17e7f6f662db59a88dfa9909a5ff2f19c10751e5", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/51617b83a18b2a0b1f0f2cae8c43e42043a86b76/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51617b83a18b2a0b1f0f2cae8c43e42043a86b76/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=51617b83a18b2a0b1f0f2cae8c43e42043a86b76", "patch": "@@ -1540,6 +1540,32 @@ declare_clippy_lint! {\n     \"implicitly cloning a value by invoking a function on its dereferenced type\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for the use of `.iter().count()`.\n+    ///\n+    /// **Why is this bad?** `.len()` is more efficient and more\n+    /// readable.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // Bad\n+    /// let some_vec = vec![0, 1, 2, 3];\n+    /// let _ = some_vec.iter().count();\n+    /// let _ = &some_vec[..].iter().count();\n+    ///\n+    /// // Good\n+    /// let some_vec = vec![0, 1, 2, 3];\n+    /// let _ = some_vec.len();\n+    /// let _ = &some_vec[..].len();\n+    /// ```\n+    pub ITER_COUNT,\n+    complexity,\n+    \"replace `.iter().count()` with `.len()`\"\n+}\n+\n pub struct Methods {\n     msrv: Option<RustcVersion>,\n }\n@@ -1585,6 +1611,7 @@ impl_lint_pass!(Methods => [\n     MAP_FLATTEN,\n     ITERATOR_STEP_BY_ZERO,\n     ITER_NEXT_SLICE,\n+    ITER_COUNT,\n     ITER_NTH,\n     ITER_NTH_ZERO,\n     BYTES_NTH,\n@@ -1664,6 +1691,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 lint_search_is_some(cx, expr, \"rposition\", arg_lists[1], arg_lists[0], method_spans[1])\n             },\n             [\"extend\", ..] => lint_extend(cx, expr, arg_lists[0]),\n+            [\"count\", \"iter\"] => lint_iter_count(cx, expr, &arg_lists[1], false),\n+            [\"count\", \"iter_mut\"] => lint_iter_count(cx, expr, &arg_lists[1], true),\n             [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, &arg_lists, false),\n             [\"nth\", \"iter_mut\"] => lint_iter_nth(cx, expr, &arg_lists, true),\n             [\"nth\", \"bytes\"] => bytes_nth::lints(cx, expr, &arg_lists[1]),\n@@ -2632,6 +2661,39 @@ fn lint_iter_next<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, iter_\n     }\n }\n \n+fn lint_iter_count<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, iter_args: &'tcx [Expr<'tcx>], is_mut: bool) {\n+    let mut_str = if is_mut { \"_mut\" } else { \"\" };\n+    if_chain! {\n+        let caller_type = if derefs_to_slice(cx, &iter_args[0], cx.typeck_results().expr_ty(&iter_args[0])).is_some() {\n+            Some(\"slice\")\n+        } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym::vec_type) {\n+            Some(\"Vec\")\n+        } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym!(vecdeque_type)) {\n+            Some(\"VecDeque\")\n+        } else if match_trait_method(cx, expr, &paths::ITERATOR) {\n+            Some(\"std::iter::Iterator\")\n+        } else {\n+            None\n+        };\n+        if let Some(caller_type) = caller_type;\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_sugg(\n+                cx,\n+                ITER_COUNT,\n+                expr.span,\n+                &format!(\"called `.iter{}().count()` on a `{}`\", mut_str, caller_type),\n+                \"try\",\n+                format!(\n+                    \"{}.len()\",\n+                    snippet_with_applicability(cx, iter_args[0].span, \"..\", &mut applicability),\n+                ),\n+                applicability,\n+            );\n+        }\n+    }\n+}\n+\n fn lint_iter_nth<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &hir::Expr<'_>,"}, {"sha": "7dc3f4ebd4d4681d47b4af94635ee7644f3a2452", "filename": "tests/ui/auxiliary/option_helpers.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51617b83a18b2a0b1f0f2cae8c43e42043a86b76/tests%2Fui%2Fauxiliary%2Foption_helpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51617b83a18b2a0b1f0f2cae8c43e42043a86b76/tests%2Fui%2Fauxiliary%2Foption_helpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Foption_helpers.rs?ref=51617b83a18b2a0b1f0f2cae8c43e42043a86b76", "patch": "@@ -48,4 +48,8 @@ impl IteratorFalsePositives {\n     pub fn skip_while(self) -> IteratorFalsePositives {\n         self\n     }\n+\n+    pub fn count(self) -> usize {\n+        self.foo as usize\n+    }\n }"}, {"sha": "14cae1cd73e4241d0dd980da2b349bd6cc92b92c", "filename": "tests/ui/iter_count.fixed", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/51617b83a18b2a0b1f0f2cae8c43e42043a86b76/tests%2Fui%2Fiter_count.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/51617b83a18b2a0b1f0f2cae8c43e42043a86b76/tests%2Fui%2Fiter_count.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_count.fixed?ref=51617b83a18b2a0b1f0f2cae8c43e42043a86b76", "patch": "@@ -0,0 +1,58 @@\n+// run-rustfix\n+// aux-build:option_helpers.rs\n+\n+#![warn(clippy::iter_count)]\n+#![allow(unused_variables)]\n+#![allow(unused_mut)]\n+\n+extern crate option_helpers;\n+\n+use option_helpers::IteratorFalsePositives;\n+use std::collections::{HashSet, VecDeque};\n+\n+/// Struct to generate false positives for things with `.iter()`.\n+#[derive(Copy, Clone)]\n+struct HasIter;\n+\n+impl HasIter {\n+    fn iter(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+\n+    fn iter_mut(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+}\n+\n+fn main() {\n+    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let mut some_vec_deque: VecDeque<_> = some_vec.iter().cloned().collect();\n+    let mut some_hash_set = HashSet::new();\n+    some_hash_set.insert(1);\n+\n+    {\n+        // Make sure we lint `.iter()` for relevant types.\n+        let bad_vec = some_vec.len();\n+        let bad_slice = &some_vec[..].len();\n+        let bad_boxed_slice = boxed_slice.len();\n+        let bad_vec_deque = some_vec_deque.len();\n+        let bad_hash_set = some_hash_set.len();\n+    }\n+\n+    {\n+        // Make sure we lint `.iter_mut()` for relevant types.\n+        let bad_vec = some_vec.len();\n+    }\n+    {\n+        let bad_slice = &some_vec[..].len();\n+    }\n+    {\n+        let bad_vec_deque = some_vec_deque.len();\n+    }\n+\n+    // Make sure we don't lint for non-relevant types.\n+    let false_positive = HasIter;\n+    let ok = false_positive.iter().count();\n+    let ok_mut = false_positive.iter_mut().count();\n+}"}, {"sha": "dfe02e5d53e29ad9bc4448810ad56cbe8143864a", "filename": "tests/ui/iter_count.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/51617b83a18b2a0b1f0f2cae8c43e42043a86b76/tests%2Fui%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51617b83a18b2a0b1f0f2cae8c43e42043a86b76/tests%2Fui%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_count.rs?ref=51617b83a18b2a0b1f0f2cae8c43e42043a86b76", "patch": "@@ -0,0 +1,58 @@\n+// run-rustfix\n+// aux-build:option_helpers.rs\n+\n+#![warn(clippy::iter_count)]\n+#![allow(unused_variables)]\n+#![allow(unused_mut)]\n+\n+extern crate option_helpers;\n+\n+use option_helpers::IteratorFalsePositives;\n+use std::collections::{HashSet, VecDeque};\n+\n+/// Struct to generate false positives for things with `.iter()`.\n+#[derive(Copy, Clone)]\n+struct HasIter;\n+\n+impl HasIter {\n+    fn iter(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+\n+    fn iter_mut(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+}\n+\n+fn main() {\n+    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let mut some_vec_deque: VecDeque<_> = some_vec.iter().cloned().collect();\n+    let mut some_hash_set = HashSet::new();\n+    some_hash_set.insert(1);\n+\n+    {\n+        // Make sure we lint `.iter()` for relevant types.\n+        let bad_vec = some_vec.iter().count();\n+        let bad_slice = &some_vec[..].iter().count();\n+        let bad_boxed_slice = boxed_slice.iter().count();\n+        let bad_vec_deque = some_vec_deque.iter().count();\n+        let bad_hash_set = some_hash_set.iter().count();\n+    }\n+\n+    {\n+        // Make sure we lint `.iter_mut()` for relevant types.\n+        let bad_vec = some_vec.iter_mut().count();\n+    }\n+    {\n+        let bad_slice = &some_vec[..].iter_mut().count();\n+    }\n+    {\n+        let bad_vec_deque = some_vec_deque.iter_mut().count();\n+    }\n+\n+    // Make sure we don't lint for non-relevant types.\n+    let false_positive = HasIter;\n+    let ok = false_positive.iter().count();\n+    let ok_mut = false_positive.iter_mut().count();\n+}"}, {"sha": "a465d22199455e944bfc30b54502a39ea90cc33d", "filename": "tests/ui/iter_count.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/51617b83a18b2a0b1f0f2cae8c43e42043a86b76/tests%2Fui%2Fiter_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51617b83a18b2a0b1f0f2cae8c43e42043a86b76/tests%2Fui%2Fiter_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_count.stderr?ref=51617b83a18b2a0b1f0f2cae8c43e42043a86b76", "patch": "@@ -0,0 +1,52 @@\n+error: called `.iter().count()` on a `Vec`\n+  --> $DIR/iter_count.rs:36:23\n+   |\n+LL |         let bad_vec = some_vec.iter().count();\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vec.len()`\n+   |\n+   = note: `-D clippy::iter-count` implied by `-D warnings`\n+\n+error: called `.iter().count()` on a `slice`\n+  --> $DIR/iter_count.rs:37:26\n+   |\n+LL |         let bad_slice = &some_vec[..].iter().count();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vec[..].len()`\n+\n+error: called `.iter().count()` on a `slice`\n+  --> $DIR/iter_count.rs:38:31\n+   |\n+LL |         let bad_boxed_slice = boxed_slice.iter().count();\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `boxed_slice.len()`\n+\n+error: called `.iter().count()` on a `VecDeque`\n+  --> $DIR/iter_count.rs:39:29\n+   |\n+LL |         let bad_vec_deque = some_vec_deque.iter().count();\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vec_deque.len()`\n+\n+error: called `.iter().count()` on a `std::iter::Iterator`\n+  --> $DIR/iter_count.rs:40:28\n+   |\n+LL |         let bad_hash_set = some_hash_set.iter().count();\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_hash_set.len()`\n+\n+error: called `.iter_mut().count()` on a `Vec`\n+  --> $DIR/iter_count.rs:45:23\n+   |\n+LL |         let bad_vec = some_vec.iter_mut().count();\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vec.len()`\n+\n+error: called `.iter_mut().count()` on a `slice`\n+  --> $DIR/iter_count.rs:48:26\n+   |\n+LL |         let bad_slice = &some_vec[..].iter_mut().count();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vec[..].len()`\n+\n+error: called `.iter_mut().count()` on a `VecDeque`\n+  --> $DIR/iter_count.rs:51:29\n+   |\n+LL |         let bad_vec_deque = some_vec_deque.iter_mut().count();\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vec_deque.len()`\n+\n+error: aborting due to 8 previous errors\n+"}]}