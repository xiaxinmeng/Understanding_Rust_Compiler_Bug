{"sha": "0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNWZkYzg3NDVjZDBiYzVmYmY5MjcyMzAxZDNhYWZhMmViOGYzMzE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-08T23:24:27Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-08T23:25:56Z"}, "message": "Rename last to last_opt, last_unsafe to last\n\nAs per discussion on IRC. I am about to file an RFC for further\ndiscussion about the more general issue of whether to enforce\ninvariants through types, typestate, or dynamic checks, but for now,\nremoving the misleading name \"last_unsafe\".", "tree": {"sha": "9c41d534de15987872229a6e7a915a3be23cb3d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c41d534de15987872229a6e7a915a3be23cb3d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "html_url": "https://github.com/rust-lang/rust/commit/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8047c0cd68baaee21ac89ac7d933bc84b7ebcf3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8047c0cd68baaee21ac89ac7d933bc84b7ebcf3e", "html_url": "https://github.com/rust-lang/rust/commit/8047c0cd68baaee21ac89ac7d933bc84b7ebcf3e"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "5658e57f68a42b0fe5aa440fb818507da8d6c14a", "filename": "src/libcore/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "patch": "@@ -170,7 +170,7 @@ fn splitext(p: path) -> (str, str) {\n         if vec::len(parts) > 1u {\n             let base = str::connect(vec::init(parts), \".\");\n             // We just checked that parts is non-empty, so this is safe\n-            let ext = \".\" + vec::last_unsafe(parts);\n+            let ext = \".\" + vec::last(parts);\n \n             fn is_dotfile(base: str) -> bool {\n                 str::is_empty(base)"}, {"sha": "f1aac380886fb56f7787b9ca4350073cb530f03b", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "patch": "@@ -187,27 +187,24 @@ fn init<T: copy>(v: [const T]) -> [T] {\n /*\n Function: last\n \n-Returns the last element of a vector\n-\n-Returns:\n+Returns the last element of a `v`, failing if the vector is empty.\n \n-An option containing the last element of `v` if `v` is not empty, or\n-none if `v` is empty.\n */\n-pure fn last<T: copy>(v: [const T]) -> option<T> {\n-    if len(v) == 0u { ret none; }\n-    ret some(v[len(v) - 1u]);\n+pure fn last<T: copy>(v: [const T]) -> T {\n+    if len(v) == 0u { fail \"last_unsafe: empty vector\" }\n+    v[len(v) - 1u]\n }\n \n /*\n-Function: last_unsafe\n+Function: last_opt\n \n-Returns the last element of a `v`, failing if the vector is empty.\n+Returns some(x) where `x` is the last element of a vector `v`,\n+or none if the vector is empty.\n \n */\n-pure fn last_unsafe<T: copy>(v: [const T]) -> T {\n-    if len(v) == 0u { fail \"last_unsafe: empty vector\" }\n-    v[len(v) - 1u]\n+pure fn last_opt<T: copy>(v: [const T]) -> option<T> {\n+    if len(v) == 0u { ret none; }\n+    some(v[len(v) - 1u])\n }\n \n /*\n@@ -1270,11 +1267,11 @@ mod tests {\n \n     #[test]\n     fn test_last() {\n-        let n = last([]);\n+        let n = last_opt([]);\n         assert (n == none);\n-        n = last([1, 2, 3]);\n+        n = last_opt([1, 2, 3]);\n         assert (n == some(3));\n-        n = last([1, 2, 3, 4, 5]);\n+        n = last_opt([1, 2, 3, 4, 5]);\n         assert (n == some(5));\n     }\n "}, {"sha": "8a5b88f7480f36fd577cf00faea97d2757a9648f", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "patch": "@@ -271,7 +271,7 @@ fn splitext(p: path) -> (str, str) {\n         if vec::len(parts) > 1u {\n             let base = str::connect(vec::init(parts), \".\");\n             // We just checked that parts is non-empty\n-            let ext = \".\" + vec::last_unsafe(parts);\n+            let ext = \".\" + vec::last(parts);\n \n             fn is_dotfile(base: str) -> bool {\n                 str::is_empty(base)"}, {"sha": "fc9c50a1e00f1495ea5d8fcc6486e72f88721079", "filename": "src/rustc/front/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fattr.rs?ref=0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "patch": "@@ -256,7 +256,7 @@ fn meta_item_from_list(\n     name: str\n ) -> option<@ast::meta_item> {\n     let items = attr::find_meta_items_by_name(items, name);\n-    vec::last(items)\n+    vec::last_opt(items)\n }\n \n fn meta_item_value_from_list("}, {"sha": "986c42ca7c2ef5392022cab40566fd251a32a4e0", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "patch": "@@ -144,7 +144,7 @@ fn find_library_crate(sess: session::session, ident: ast::ident,\n     let crate_name =\n         {\n             let name_items = attr::find_meta_items_by_name(metas, \"name\");\n-            alt vec::last(name_items) {\n+            alt vec::last_opt(name_items) {\n               some(i) {\n                 alt attr::get_meta_item_value_str(i) {\n                   some(n) { n }"}, {"sha": "e64ee524b4deea6806880a2fc8dcaa2a68d42e40", "filename": "src/rustc/middle/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fast_map.rs?ref=0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "patch": "@@ -189,7 +189,7 @@ fn map_view_item(vi: @view_item, cx: ctx, _v: vt) {\n               view_path_glob(pth, id) | view_path_list(pth, _, id) {\n                   // should be a constraint on the type\n                 assert (vec::is_not_empty(*pth));\n-                (id, vec::last_unsafe(*pth))\n+                (id, vec::last(*pth))\n               }\n             };\n             cx.map.insert(id, node_export(vp, extend(cx, name)));"}, {"sha": "4327acdb058064dedce3b94da4c1e7d970eed3a1", "filename": "src/rustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fpat_util.rs?ref=0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "patch": "@@ -70,5 +70,5 @@ fn pat_binding_ids(dm: resolve::def_map, pat: @pat) -> [node_id] {\n \n fn path_to_ident(p: @path) -> ident {\n   assert (vec::is_not_empty(p.node.idents)); // should be a constraint on path\n-  vec::last_unsafe(p.node.idents)\n+  vec::last(p.node.idents)\n }"}, {"sha": "a64b9491824550762c8d671a0f0dbf2a6499c6fd", "filename": "src/rustc/middle/tstate/bitvectors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "patch": "@@ -183,7 +183,7 @@ fn kill_poststate(fcx: fn_ctxt, id: node_id, c: tsconstr) -> bool {\n fn clear_in_poststate_expr(fcx: fn_ctxt, e: @expr, t: poststate) {\n     alt e.node {\n       expr_path(p) {\n-        alt vec::last(p.node.idents) {\n+        alt vec::last_opt(p.node.idents) {\n           some(i) {\n             alt local_node_id_to_def(fcx, e.id) {\n               some(def_local(nid, _)) {"}, {"sha": "1c997ca84e82251458450ec5af2ad1ec10af7190", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "patch": "@@ -406,7 +406,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n                                                     init_assign),\n                                       exs, return_val);\n \n-        let base_pres = alt vec::last(exs) { none { pres }\n+        let base_pres = alt vec::last_opt(exs) { none { pres }\n                           some(f) { expr_poststate(fcx.ccx, f) }};\n         option::may(maybe_base, {|base|\n             changed |= find_pre_post_state_expr(fcx, base_pres, base) |"}, {"sha": "d690bcb4d9d595eb7bd7e9d1c0e1401b4890334a", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "patch": "@@ -2642,7 +2642,7 @@ fn bind_params(fcx: @fn_ctxt, tp: ty::t, count: uint)\n }\n \n fn get_self_info(ccx: @crate_ctxt) -> option<self_info> {\n-    ret vec::last(ccx.self_infos);\n+    ret vec::last_opt(ccx.self_infos);\n }\n \n fn check_decl_initializer(fcx: @fn_ctxt, nid: ast::node_id,"}, {"sha": "cd45deb9423b96a151b158644e3653ab40601ac6", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "patch": "@@ -89,7 +89,9 @@ fn local_rhs_span(l: @ast::local, def: span) -> span {\n }\n \n fn is_main_name(path: middle::ast_map::path) -> bool {\n-    option::get(vec::last(path)) == middle::ast_map::path_name(\"main\")\n+    // FIXME: path should be a constrained type, so we know\n+    // the call to last doesn't fail\n+    vec::last(path) == middle::ast_map::path_name(\"main\")\n }\n \n //"}, {"sha": "978c6fc901483bc98a5c7895172acd3fb1c833a5", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "patch": "@@ -163,7 +163,7 @@ fn build_reexport_path_map(srv: astsrv::srv, -def_map: def_map) -> path_map {\n             };\n           // should be a constraint on the node_export constructor\n           // that guarantees path is non-empty\n-            let name = alt check vec::last_unsafe(*path) {\n+            let name = alt check vec::last(*path) {\n               ast_map::path_name(nm) { nm }\n             };\n             let modpath = ast_map::path_to_str(vec::init(*path));"}, {"sha": "813548dc35eeb8281b6c87c3b905222fd17a6f99", "filename": "src/test/run-pass/zip-same-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzip-same-length.rs?ref=0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "patch": "@@ -19,5 +19,5 @@ fn main() {\n \n     check (is_not_empty(ps));\n     assert (head(ps) == ('a', 1u));\n-    assert (last_unsafe(ps) == (j as char, 10u));\n+    assert (last(ps) == (j as char, 10u));\n }"}]}