{"sha": "8ee4446ee5e1c23bef61b45f74e37db4bad2f424", "node_id": "C_kwDOAAsO6NoAKDhlZTQ0NDZlZTVlMWMyM2JlZjYxYjQ1Zjc0ZTM3ZGI0YmFkMmY0MjQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-12T20:40:43Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-01T19:38:20Z"}, "message": "Remove visibility from AssocItem.", "tree": {"sha": "a5ebd99a2f29958498b87361e8270f5687586a50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5ebd99a2f29958498b87361e8270f5687586a50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ee4446ee5e1c23bef61b45f74e37db4bad2f424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee4446ee5e1c23bef61b45f74e37db4bad2f424", "html_url": "https://github.com/rust-lang/rust/commit/8ee4446ee5e1c23bef61b45f74e37db4bad2f424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ee4446ee5e1c23bef61b45f74e37db4bad2f424/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "110f0656cb655f7f57b1649b11ff5bcfa2303b07", "url": "https://api.github.com/repos/rust-lang/rust/commits/110f0656cb655f7f57b1649b11ff5bcfa2303b07", "html_url": "https://github.com/rust-lang/rust/commit/110f0656cb655f7f57b1649b11ff5bcfa2303b07"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "40f8da43c669a9aafbd5ef400e5cf4c22e6ef030", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ee4446ee5e1c23bef61b45f74e37db4bad2f424/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee4446ee5e1c23bef61b45f74e37db4bad2f424/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=8ee4446ee5e1c23bef61b45f74e37db4bad2f424", "patch": "@@ -1151,7 +1151,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         ty::AssocItem {\n             name,\n             kind,\n-            vis: self.get_visibility(id),\n             def_id: self.local_def_id(id),\n             trait_item_def_id: self.get_trait_item_def_id(id),\n             container: container.with_def_id(parent),"}, {"sha": "e18737c0d7cb828449f92048c41c17d1b0003818", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ee4446ee5e1c23bef61b45f74e37db4bad2f424/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee4446ee5e1c23bef61b45f74e37db4bad2f424/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=8ee4446ee5e1c23bef61b45f74e37db4bad2f424", "patch": "@@ -46,7 +46,6 @@ pub struct AssocItem {\n     pub def_id: DefId,\n     pub name: Symbol,\n     pub kind: AssocKind,\n-    pub vis: Visibility,\n     pub container: AssocItemContainer,\n \n     /// If this is an item in an impl of a trait then this is the `DefId` of\n@@ -67,6 +66,11 @@ impl AssocItem {\n         tcx.impl_defaultness(self.def_id)\n     }\n \n+    #[inline]\n+    pub fn visibility(&self, tcx: TyCtxt<'_>) -> Visibility {\n+        tcx.visibility(self.def_id)\n+    }\n+\n     pub fn signature(&self, tcx: TyCtxt<'_>) -> String {\n         match self.kind {\n             ty::AssocKind::Fn => {"}, {"sha": "64574ade2bb56c2ba57175ab66d481c0b00fc4ad", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ee4446ee5e1c23bef61b45f74e37db4bad2f424/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee4446ee5e1c23bef61b45f74e37db4bad2f424/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=8ee4446ee5e1c23bef61b45f74e37db4bad2f424", "patch": "@@ -59,8 +59,7 @@ fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n             if let Some(impl_item_ref) =\n                 impl_.items.iter().find(|i| i.id.def_id.to_def_id() == def_id)\n             {\n-                let assoc_item =\n-                    associated_item_from_impl_item_ref(tcx, parent_def_id, impl_item_ref);\n+                let assoc_item = associated_item_from_impl_item_ref(parent_def_id, impl_item_ref);\n                 debug_assert_eq!(assoc_item.def_id, def_id);\n                 return assoc_item;\n             }\n@@ -70,8 +69,7 @@ fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n             if let Some(trait_item_ref) =\n                 trait_item_refs.iter().find(|i| i.id.def_id.to_def_id() == def_id)\n             {\n-                let assoc_item =\n-                    associated_item_from_trait_item_ref(tcx, parent_def_id, trait_item_ref);\n+                let assoc_item = associated_item_from_trait_item_ref(parent_def_id, trait_item_ref);\n                 debug_assert_eq!(assoc_item.def_id, def_id);\n                 return assoc_item;\n             }\n@@ -88,7 +86,6 @@ fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n }\n \n fn associated_item_from_trait_item_ref(\n-    tcx: TyCtxt<'_>,\n     parent_def_id: LocalDefId,\n     trait_item_ref: &hir::TraitItemRef,\n ) -> ty::AssocItem {\n@@ -102,7 +99,6 @@ fn associated_item_from_trait_item_ref(\n     ty::AssocItem {\n         name: trait_item_ref.ident.name,\n         kind,\n-        vis: tcx.visibility(def_id),\n         def_id: def_id.to_def_id(),\n         trait_item_def_id: Some(def_id.to_def_id()),\n         container: ty::TraitContainer(parent_def_id.to_def_id()),\n@@ -111,7 +107,6 @@ fn associated_item_from_trait_item_ref(\n }\n \n fn associated_item_from_impl_item_ref(\n-    tcx: TyCtxt<'_>,\n     parent_def_id: LocalDefId,\n     impl_item_ref: &hir::ImplItemRef,\n ) -> ty::AssocItem {\n@@ -125,7 +120,6 @@ fn associated_item_from_impl_item_ref(\n     ty::AssocItem {\n         name: impl_item_ref.ident.name,\n         kind,\n-        vis: tcx.visibility(def_id),\n         def_id: def_id.to_def_id(),\n         trait_item_def_id: impl_item_ref.trait_item_def_id,\n         container: ty::ImplContainer(parent_def_id.to_def_id()),"}, {"sha": "5026715804f9c8401209fa7afe283ee31184889d", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ee4446ee5e1c23bef61b45f74e37db4bad2f424/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee4446ee5e1c23bef61b45f74e37db4bad2f424/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=8ee4446ee5e1c23bef61b45f74e37db4bad2f424", "patch": "@@ -1141,7 +1141,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .or_else(|| find_item_of_kind(ty::AssocKind::Const))\n             .expect(\"missing associated type\");\n \n-        if !assoc_item.vis.is_accessible_from(def_scope, tcx) {\n+        if !assoc_item.visibility(tcx).is_accessible_from(def_scope, tcx) {\n             tcx.sess\n                 .struct_span_err(\n                     binding.span,\n@@ -1997,7 +1997,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let ty = self.normalize_ty(span, ty);\n \n         let kind = DefKind::AssocTy;\n-        if !item.vis.is_accessible_from(def_scope, tcx) {\n+        if !item.visibility(tcx).is_accessible_from(def_scope, tcx) {\n             let kind = kind.descr(item.def_id);\n             let msg = format!(\"{} `{}` is private\", kind, assoc_ident);\n             tcx.sess"}, {"sha": "3771920d6b563cf603f7d655597b98bdaf324900", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ee4446ee5e1c23bef61b45f74e37db4bad2f424/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee4446ee5e1c23bef61b45f74e37db4bad2f424/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=8ee4446ee5e1c23bef61b45f74e37db4bad2f424", "patch": "@@ -594,7 +594,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             let item = candidate.item;\n             let def_scope =\n                 self.tcx.adjust_ident_and_get_scope(name, item.container.id(), self.body_id).1;\n-            item.vis.is_accessible_from(def_scope, self.tcx)\n+            item.visibility(self.tcx).is_accessible_from(def_scope, self.tcx)\n         } else {\n             true\n         };"}, {"sha": "e0253ee04c42e516472d7c8eff82fd2a710131ac", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ee4446ee5e1c23bef61b45f74e37db4bad2f424/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee4446ee5e1c23bef61b45f74e37db4bad2f424/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=8ee4446ee5e1c23bef61b45f74e37db4bad2f424", "patch": "@@ -1937,7 +1937,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 }\n                             }\n                             // We only want to suggest public or local traits (#45781).\n-                            item.vis.is_public() || info.def_id.is_local()\n+                            item.visibility(self.tcx).is_public() || info.def_id.is_local()\n                         })\n                         .is_some()\n             })"}, {"sha": "6577315a2b7100b256927fde3ae12e304c26637c", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ee4446ee5e1c23bef61b45f74e37db4bad2f424/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee4446ee5e1c23bef61b45f74e37db4bad2f424/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=8ee4446ee5e1c23bef61b45f74e37db4bad2f424", "patch": "@@ -439,7 +439,7 @@ pub(crate) fn build_impl(\n                             .unwrap(); // corresponding associated item has to exist\n                         !tcx.is_doc_hidden(trait_item.def_id)\n                     } else {\n-                        item.vis.is_public()\n+                        item.visibility(tcx).is_public()\n                     }\n                 })\n                 .map(|item| item.clean(cx))"}]}