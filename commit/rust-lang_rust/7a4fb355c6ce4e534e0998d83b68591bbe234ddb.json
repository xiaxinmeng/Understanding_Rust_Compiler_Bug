{"sha": "7a4fb355c6ce4e534e0998d83b68591bbe234ddb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNGZiMzU1YzZjZTRlNTM0ZTA5OThkODNiNjg1OTFiYmUyMzRkZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-16T13:15:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-16T13:15:52Z"}, "message": "Auto merge of #75567 - poliorcetics:intra-links-std-net, r=jyn514\n\nMove to intra doc links in std::net\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc\n\nThe links for `true` and `false` had to stay else `rustdoc` complained, it is intended ?", "tree": {"sha": "d4dea5cf082ef98be7809a7d1c77af6d1b1a1793", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4dea5cf082ef98be7809a7d1c77af6d1b1a1793"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a4fb355c6ce4e534e0998d83b68591bbe234ddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4fb355c6ce4e534e0998d83b68591bbe234ddb", "html_url": "https://github.com/rust-lang/rust/commit/7a4fb355c6ce4e534e0998d83b68591bbe234ddb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a4fb355c6ce4e534e0998d83b68591bbe234ddb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97ba0c7171c4d2d9b899a2bd8e40a8974c47b86d", "url": "https://api.github.com/repos/rust-lang/rust/commits/97ba0c7171c4d2d9b899a2bd8e40a8974c47b86d", "html_url": "https://github.com/rust-lang/rust/commit/97ba0c7171c4d2d9b899a2bd8e40a8974c47b86d"}, {"sha": "5fc187cd971ef3a4440878916b516e5a5c23ae57", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fc187cd971ef3a4440878916b516e5a5c23ae57", "html_url": "https://github.com/rust-lang/rust/commit/5fc187cd971ef3a4440878916b516e5a5c23ae57"}], "stats": {"total": 435, "additions": 142, "deletions": 293}, "files": [{"sha": "c11049fb98152e0696675f077293c4c3ed287867", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 26, "deletions": 54, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/7a4fb355c6ce4e534e0998d83b68591bbe234ddb/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4fb355c6ce4e534e0998d83b68591bbe234ddb/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=7a4fb355c6ce4e534e0998d83b68591bbe234ddb", "patch": "@@ -22,9 +22,7 @@ use crate::vec;\n /// The size of a `SocketAddr` instance may vary depending on the target operating\n /// system.\n ///\n-/// [IP address]: ../../std/net/enum.IpAddr.html\n-/// [`SocketAddrV4`]: ../../std/net/struct.SocketAddrV4.html\n-/// [`SocketAddrV6`]: ../../std/net/struct.SocketAddrV6.html\n+/// [IP address]: IpAddr\n ///\n /// # Examples\n ///\n@@ -50,7 +48,7 @@ pub enum SocketAddr {\n \n /// An IPv4 socket address.\n ///\n-/// IPv4 socket addresses consist of an [IPv4 address] and a 16-bit port number, as\n+/// IPv4 socket addresses consist of an [`IPv4` address] and a 16-bit port number, as\n /// stated in [IETF RFC 793].\n ///\n /// See [`SocketAddr`] for a type encompassing both IPv4 and IPv6 socket addresses.\n@@ -59,8 +57,7 @@ pub enum SocketAddr {\n /// system.\n ///\n /// [IETF RFC 793]: https://tools.ietf.org/html/rfc793\n-/// [IPv4 address]: ../../std/net/struct.Ipv4Addr.html\n-/// [`SocketAddr`]: ../../std/net/enum.SocketAddr.html\n+/// [`IPv4` address]: Ipv4Addr\n ///\n /// # Examples\n ///\n@@ -81,7 +78,7 @@ pub struct SocketAddrV4 {\n \n /// An IPv6 socket address.\n ///\n-/// IPv6 socket addresses consist of an [Ipv6 address], a 16-bit port number, as well\n+/// IPv6 socket addresses consist of an [`IPv6` address], a 16-bit port number, as well\n /// as fields containing the traffic class, the flow label, and a scope identifier\n /// (see [IETF RFC 2553, Section 3.3] for more details).\n ///\n@@ -91,8 +88,7 @@ pub struct SocketAddrV4 {\n /// system.\n ///\n /// [IETF RFC 2553, Section 3.3]: https://tools.ietf.org/html/rfc2553#section-3.3\n-/// [IPv6 address]: ../../std/net/struct.Ipv6Addr.html\n-/// [`SocketAddr`]: ../../std/net/enum.SocketAddr.html\n+/// [`IPv6` address]: Ipv6Addr\n ///\n /// # Examples\n ///\n@@ -114,7 +110,7 @@ pub struct SocketAddrV6 {\n impl SocketAddr {\n     /// Creates a new socket address from an [IP address] and a port number.\n     ///\n-    /// [IP address]: ../../std/net/enum.IpAddr.html\n+    /// [IP address]: IpAddr\n     ///\n     /// # Examples\n     ///\n@@ -210,12 +206,12 @@ impl SocketAddr {\n     }\n \n     /// Returns [`true`] if the [IP address] in this `SocketAddr` is an\n-    /// [IPv4 address], and [`false`] otherwise.\n+    /// [`IPv4` address], and [`false`] otherwise.\n     ///\n-    /// [`true`]: ../../std/primitive.bool.html\n+    /// [IP address]: IpAddr\n+    /// [`IPv4` address]: IpAddr::V4\n     /// [`false`]: ../../std/primitive.bool.html\n-    /// [IP address]: ../../std/net/enum.IpAddr.html\n-    /// [IPv4 address]: ../../std/net/enum.IpAddr.html#variant.V4\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -232,12 +228,12 @@ impl SocketAddr {\n     }\n \n     /// Returns [`true`] if the [IP address] in this `SocketAddr` is an\n-    /// [IPv6 address], and [`false`] otherwise.\n+    /// [`IPv6` address], and [`false`] otherwise.\n     ///\n-    /// [`true`]: ../../std/primitive.bool.html\n+    /// [IP address]: IpAddr\n+    /// [`IPv6` address]: IpAddr::V6\n     /// [`false`]: ../../std/primitive.bool.html\n-    /// [IP address]: ../../std/net/enum.IpAddr.html\n-    /// [IPv6 address]: ../../std/net/enum.IpAddr.html#variant.V6\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -255,9 +251,9 @@ impl SocketAddr {\n }\n \n impl SocketAddrV4 {\n-    /// Creates a new socket address from an [IPv4 address] and a port number.\n+    /// Creates a new socket address from an [`IPv4` address] and a port number.\n     ///\n-    /// [IPv4 address]: ../../std/net/struct.Ipv4Addr.html\n+    /// [`IPv4` address]: Ipv4Addr\n     ///\n     /// # Examples\n     ///\n@@ -342,14 +338,14 @@ impl SocketAddrV4 {\n }\n \n impl SocketAddrV6 {\n-    /// Creates a new socket address from an [IPv6 address], a 16-bit port number,\n+    /// Creates a new socket address from an [`IPv6` address], a 16-bit port number,\n     /// and the `flowinfo` and `scope_id` fields.\n     ///\n     /// For more information on the meaning and layout of the `flowinfo` and `scope_id`\n     /// parameters, see [IETF RFC 2553, Section 3.3].\n     ///\n     /// [IETF RFC 2553, Section 3.3]: https://tools.ietf.org/html/rfc2553#section-3.3\n-    /// [IPv6 address]: ../../std/net/struct.Ipv6Addr.html\n+    /// [`IPv6` address]: Ipv6Addr\n     ///\n     /// # Examples\n     ///\n@@ -461,9 +457,7 @@ impl SocketAddrV6 {\n \n     /// Changes the flow information associated with this socket address.\n     ///\n-    /// See the [`flowinfo`] method's documentation for more details.\n-    ///\n-    /// [`flowinfo`]: #method.flowinfo\n+    /// See [`SocketAddrV6::flowinfo`]'s documentation for more details.\n     ///\n     /// # Examples\n     ///\n@@ -501,9 +495,7 @@ impl SocketAddrV6 {\n \n     /// Changes the scope ID associated with this socket address.\n     ///\n-    /// See the [`scope_id`] method's documentation for more details.\n-    ///\n-    /// [`scope_id`]: #method.scope_id\n+    /// See [`SocketAddrV6::scope_id`]'s documentation for more details.\n     ///\n     /// # Examples\n     ///\n@@ -535,9 +527,6 @@ impl FromInner<c::sockaddr_in6> for SocketAddrV6 {\n #[stable(feature = \"ip_from_ip\", since = \"1.16.0\")]\n impl From<SocketAddrV4> for SocketAddr {\n     /// Converts a [`SocketAddrV4`] into a [`SocketAddr::V4`].\n-    ///\n-    /// [`SocketAddrV4`]: ../../std/net/struct.SocketAddrV4.html\n-    /// [`SocketAddr::V4`]: ../../std/net/enum.SocketAddr.html#variant.V4\n     fn from(sock4: SocketAddrV4) -> SocketAddr {\n         SocketAddr::V4(sock4)\n     }\n@@ -546,9 +535,6 @@ impl From<SocketAddrV4> for SocketAddr {\n #[stable(feature = \"ip_from_ip\", since = \"1.16.0\")]\n impl From<SocketAddrV6> for SocketAddr {\n     /// Converts a [`SocketAddrV6`] into a [`SocketAddr::V6`].\n-    ///\n-    /// [`SocketAddrV6`]: ../../std/net/struct.SocketAddrV6.html\n-    /// [`SocketAddr::V6`]: ../../std/net/enum.SocketAddr.html#variant.V6\n     fn from(sock6: SocketAddrV6) -> SocketAddr {\n         SocketAddr::V6(sock6)\n     }\n@@ -562,13 +548,6 @@ impl<I: Into<IpAddr>> From<(I, u16)> for SocketAddr {\n     /// and creates a [`SocketAddr::V6`] for a [`IpAddr::V6`].\n     ///\n     /// `u16` is treated as port of the newly created [`SocketAddr`].\n-    ///\n-    /// [`IpAddr`]: ../../std/net/enum.IpAddr.html\n-    /// [`IpAddr::V4`]: ../../std/net/enum.IpAddr.html#variant.V4\n-    /// [`IpAddr::V6`]: ../../std/net/enum.IpAddr.html#variant.V6\n-    /// [`SocketAddr`]: ../../std/net/enum.SocketAddr.html\n-    /// [`SocketAddr::V4`]: ../../std/net/enum.SocketAddr.html#variant.V4\n-    /// [`SocketAddr::V6`]: ../../std/net/enum.SocketAddr.html#variant.V6\n     fn from(pieces: (I, u16)) -> SocketAddr {\n         SocketAddr::new(pieces.0.into(), pieces.1)\n     }\n@@ -785,18 +764,11 @@ impl hash::Hash for SocketAddrV6 {\n /// Addresses returned by the operating system that are not IP addresses are\n /// silently ignored.\n ///\n-/// [`FromStr`]: ../../std/str/trait.FromStr.html\n-/// [`IpAddr`]: ../../std/net/enum.IpAddr.html\n-/// [`Ipv4Addr`]: ../../std/net/struct.Ipv4Addr.html\n-/// [`Ipv6Addr`]: ../../std/net/struct.Ipv6Addr.html\n-/// [`SocketAddr`]: ../../std/net/enum.SocketAddr.html\n-/// [`SocketAddrV4`]: ../../std/net/struct.SocketAddrV4.html\n-/// [`SocketAddrV6`]: ../../std/net/struct.SocketAddrV6.html\n-/// [`&str`]: ../../std/primitive.str.html\n-/// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n-/// [`to_socket_addrs`]: #tymethod.to_socket_addrs\n-/// [`UdpSocket`]: ../../std/net/struct.UdpSocket.html\n-/// [`u16`]: ../../std/primitive.u16.html\n+/// [`FromStr`]: crate::str::FromStr\n+/// [`&str`]: str\n+/// [`TcpStream`]: crate::net::TcpStream\n+/// [`to_socket_addrs`]: ToSocketAddrs::to_socket_addrs\n+/// [`UdpSocket`]: crate::net::UdpSocket\n ///\n /// # Examples\n ///\n@@ -867,7 +839,7 @@ impl hash::Hash for SocketAddrV6 {\n /// let stream = TcpStream::connect((Ipv4Addr::new(127, 0, 0, 1), 443));\n /// ```\n ///\n-/// [`TcpStream::connect`]: ../../std/net/struct.TcpStream.html#method.connect\n+/// [`TcpStream::connect`]: crate::net::TcpStream::connect\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ToSocketAddrs {\n     /// Returned iterator over socket addresses which this type may correspond"}, {"sha": "de28268ea368212ee8593e01a7f087dc20b103c4", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 63, "deletions": 76, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/7a4fb355c6ce4e534e0998d83b68591bbe234ddb/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4fb355c6ce4e534e0998d83b68591bbe234ddb/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=7a4fb355c6ce4e534e0998d83b68591bbe234ddb", "patch": "@@ -22,9 +22,6 @@ use crate::sys_common::{AsInner, FromInner};\n /// The size of an `IpAddr` instance may vary depending on the target operating\n /// system.\n ///\n-/// [`Ipv4Addr`]: ../../std/net/struct.Ipv4Addr.html\n-/// [`Ipv6Addr`]: ../../std/net/struct.Ipv6Addr.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -61,14 +58,13 @@ pub enum IpAddr {\n /// system.\n ///\n /// [IETF RFC 791]: https://tools.ietf.org/html/rfc791\n-/// [`IpAddr`]: ../../std/net/enum.IpAddr.html\n ///\n /// # Textual representation\n ///\n /// `Ipv4Addr` provides a [`FromStr`] implementation. The four octets are in decimal\n /// notation, divided by `.` (this is called \"dot-decimal notation\").\n ///\n-/// [`FromStr`]: ../../std/str/trait.FromStr.html\n+/// [`FromStr`]: crate::str::FromStr\n ///\n /// # Examples\n ///\n@@ -96,7 +92,6 @@ pub struct Ipv4Addr {\n /// system.\n ///\n /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n-/// [`IpAddr`]: ../../std/net/enum.IpAddr.html\n ///\n /// # Textual representation\n ///\n@@ -105,7 +100,7 @@ pub struct Ipv4Addr {\n /// notation, and segments are separated by `:`. For more information, see\n /// [IETF RFC 5952].\n ///\n-/// [`FromStr`]: ../../std/str/trait.FromStr.html\n+/// [`FromStr`]: crate::str::FromStr\n /// [IETF RFC 5952]: https://tools.ietf.org/html/rfc5952\n ///\n /// # Examples\n@@ -138,11 +133,9 @@ pub enum Ipv6MulticastScope {\n impl IpAddr {\n     /// Returns [`true`] for the special 'unspecified' address.\n     ///\n-    /// See the documentation for [`Ipv4Addr::is_unspecified`][IPv4] and\n-    /// [`Ipv6Addr::is_unspecified`][IPv6] for more details.\n+    /// See the documentation for [`Ipv4Addr::is_unspecified()`] and\n+    /// [`Ipv6Addr::is_unspecified()`] for more details.\n     ///\n-    /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_unspecified\n-    /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_unspecified\n     /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n@@ -163,11 +156,9 @@ impl IpAddr {\n \n     /// Returns [`true`] if this is a loopback address.\n     ///\n-    /// See the documentation for [`Ipv4Addr::is_loopback`][IPv4] and\n-    /// [`Ipv6Addr::is_loopback`][IPv6] for more details.\n+    /// See the documentation for [`Ipv4Addr::is_loopback()`] and\n+    /// [`Ipv6Addr::is_loopback()`] for more details.\n     ///\n-    /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_loopback\n-    /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_loopback\n     /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n@@ -188,11 +179,9 @@ impl IpAddr {\n \n     /// Returns [`true`] if the address appears to be globally routable.\n     ///\n-    /// See the documentation for [`Ipv4Addr::is_global`][IPv4] and\n-    /// [`Ipv6Addr::is_global`][IPv6] for more details.\n+    /// See the documentation for [`Ipv4Addr::is_global()`] and\n+    /// [`Ipv6Addr::is_global()`] for more details.\n     ///\n-    /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_global\n-    /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_global\n     /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n@@ -214,11 +203,9 @@ impl IpAddr {\n \n     /// Returns [`true`] if this is a multicast address.\n     ///\n-    /// See the documentation for [`Ipv4Addr::is_multicast`][IPv4] and\n-    /// [`Ipv6Addr::is_multicast`][IPv6] for more details.\n+    /// See the documentation for [`Ipv4Addr::is_multicast()`] and\n+    /// [`Ipv6Addr::is_multicast()`] for more details.\n     ///\n-    /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_multicast\n-    /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_multicast\n     /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n@@ -239,11 +226,9 @@ impl IpAddr {\n \n     /// Returns [`true`] if this address is in a range designated for documentation.\n     ///\n-    /// See the documentation for [`Ipv4Addr::is_documentation`][IPv4] and\n-    /// [`Ipv6Addr::is_documentation`][IPv6] for more details.\n+    /// See the documentation for [`Ipv4Addr::is_documentation()`] and\n+    /// [`Ipv6Addr::is_documentation()`] for more details.\n     ///\n-    /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_documentation\n-    /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_documentation\n     /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n@@ -266,11 +251,12 @@ impl IpAddr {\n         }\n     }\n \n-    /// Returns [`true`] if this address is an [IPv4 address], and [`false`] otherwise.\n+    /// Returns [`true`] if this address is an [`IPv4` address], and [`false`]\n+    /// otherwise.\n     ///\n     /// [`true`]: ../../std/primitive.bool.html\n     /// [`false`]: ../../std/primitive.bool.html\n-    /// [IPv4 address]: #variant.V4\n+    /// [`IPv4` address]: IpAddr::V4\n     ///\n     /// # Examples\n     ///\n@@ -285,11 +271,12 @@ impl IpAddr {\n         matches!(self, IpAddr::V4(_))\n     }\n \n-    /// Returns [`true`] if this address is an [IPv6 address], and [`false`] otherwise.\n+    /// Returns [`true`] if this address is an [`IPv6` address], and [`false`]\n+    /// otherwise.\n     ///\n     /// [`true`]: ../../std/primitive.bool.html\n     /// [`false`]: ../../std/primitive.bool.html\n-    /// [IPv6 address]: #variant.V6\n+    /// [`IPv6` address]: IpAddr::V6\n     ///\n     /// # Examples\n     ///\n@@ -385,8 +372,8 @@ impl Ipv4Addr {\n     /// This property is defined in _UNIX Network Programming, Second Edition_,\n     /// W. Richard Stevens, p. 891; see also [ip7].\n     ///\n-    /// [ip7]: http://man7.org/linux/man-pages/man7/ip.7.html\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [ip7]: http://man7.org/linux/man-pages/man7/ip.7.html\n     ///\n     /// # Examples\n     ///\n@@ -406,8 +393,8 @@ impl Ipv4Addr {\n     ///\n     /// This property is defined by [IETF RFC 1122].\n     ///\n-    /// [IETF RFC 1122]: https://tools.ietf.org/html/rfc1122\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [IETF RFC 1122]: https://tools.ietf.org/html/rfc1122\n     ///\n     /// # Examples\n     ///\n@@ -430,8 +417,8 @@ impl Ipv4Addr {\n     ///  - 172.16.0.0/12\n     ///  - 192.168.0.0/16\n     ///\n-    /// [IETF RFC 1918]: https://tools.ietf.org/html/rfc1918\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [IETF RFC 1918]: https://tools.ietf.org/html/rfc1918\n     ///\n     /// # Examples\n     ///\n@@ -460,8 +447,8 @@ impl Ipv4Addr {\n     ///\n     /// This property is defined by [IETF RFC 3927].\n     ///\n-    /// [IETF RFC 3927]: https://tools.ietf.org/html/rfc3927\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [IETF RFC 3927]: https://tools.ietf.org/html/rfc3927\n     ///\n     /// # Examples\n     ///\n@@ -483,24 +470,25 @@ impl Ipv4Addr {\n     /// Returns [`true`] if the address appears to be globally routable.\n     /// See [iana-ipv4-special-registry][ipv4-sr].\n     ///\n-    /// The following return false:\n+    /// The following return [`false`]:\n     ///\n-    /// - private addresses (see [`is_private()`](#method.is_private))\n-    /// - the loopback address (see [`is_loopback()`](#method.is_loopback))\n-    /// - the link-local address (see [`is_link_local()`](#method.is_link_local))\n-    /// - the broadcast address (see [`is_broadcast()`](#method.is_broadcast))\n-    /// - addresses used for documentation (see [`is_documentation()`](#method.is_documentation))\n-    /// - the unspecified address (see [`is_unspecified()`](#method.is_unspecified)), and the whole\n+    /// - private addresses (see [`Ipv4Addr::is_private()`])\n+    /// - the loopback address (see [`Ipv4Addr::is_loopback()`])\n+    /// - the link-local address (see [`Ipv4Addr::is_link_local()`])\n+    /// - the broadcast address (see [`Ipv4Addr::is_broadcast()`])\n+    /// - addresses used for documentation (see [`Ipv4Addr::is_documentation()`])\n+    /// - the unspecified address (see [`Ipv4Addr::is_unspecified()`]), and the whole\n     ///   0.0.0.0/8 block\n     /// - addresses reserved for future protocols (see\n-    /// [`is_ietf_protocol_assignment()`](#method.is_ietf_protocol_assignment), except\n+    /// [`Ipv4Addr::is_ietf_protocol_assignment()`], except\n     /// `192.0.0.9/32` and `192.0.0.10/32` which are globally routable\n-    /// - addresses reserved for future use (see [`is_reserved()`](#method.is_reserved)\n+    /// - addresses reserved for future use (see [`Ipv4Addr::is_reserved()`]\n     /// - addresses reserved for networking devices benchmarking (see\n-    /// [`is_benchmarking`](#method.is_benchmarking))\n+    /// [`Ipv4Addr::is_benchmarking()`])\n     ///\n-    /// [ipv4-sr]: https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [`false`]: ../../std/primitive.bool.html\n+    /// [ipv4-sr]: https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml\n     ///\n     /// # Examples\n     ///\n@@ -572,8 +560,8 @@ impl Ipv4Addr {\n     /// Returns [`true`] if this address is part of the Shared Address Space defined in\n     /// [IETF RFC 6598] (`100.64.0.0/10`).\n     ///\n-    /// [IETF RFC 6598]: https://tools.ietf.org/html/rfc6598\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [IETF RFC 6598]: https://tools.ietf.org/html/rfc6598\n     ///\n     /// # Examples\n     ///\n@@ -598,11 +586,11 @@ impl Ipv4Addr {\n     /// - `192.0.0.9/32` is the \"Port Control Protocol Anycast\" (see [IETF RFC 7723])\n     /// - `192.0.0.10/32` is used for NAT traversal (see [IETF RFC 8155])\n     ///\n+    /// [`true`]: ../../std/primitive.bool.html\n     /// [IETF RFC 6890]: https://tools.ietf.org/html/rfc6890\n     /// [IETF RFC 7600]: https://tools.ietf.org/html/rfc7600\n     /// [IETF RFC 7723]: https://tools.ietf.org/html/rfc7723\n     /// [IETF RFC 8155]: https://tools.ietf.org/html/rfc8155\n-    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -625,9 +613,9 @@ impl Ipv4Addr {\n     /// network devices benchmarking. This range is defined in [IETF RFC 2544] as `192.18.0.0`\n     /// through `198.19.255.255` but [errata 423] corrects it to `198.18.0.0/15`.\n     ///\n+    /// [`true`]: ../../std/primitive.bool.html\n     /// [IETF RFC 2544]: https://tools.ietf.org/html/rfc2544\n     /// [errata 423]: https://www.rfc-editor.org/errata/eid423\n-    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -649,8 +637,8 @@ impl Ipv4Addr {\n     /// broadcast address `255.255.255.255`, but this implementation explicitly excludes it, since\n     /// it is obviously not reserved for future use.\n     ///\n-    /// [IETF RFC 1112]: https://tools.ietf.org/html/rfc1112\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [IETF RFC 1112]: https://tools.ietf.org/html/rfc1112\n     ///\n     /// # Warning\n     ///\n@@ -681,8 +669,8 @@ impl Ipv4Addr {\n     /// Multicast addresses have a most significant octet between 224 and 239,\n     /// and is defined by [IETF RFC 5771].\n     ///\n-    /// [IETF RFC 5771]: https://tools.ietf.org/html/rfc5771\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [IETF RFC 5771]: https://tools.ietf.org/html/rfc5771\n     ///\n     /// # Examples\n     ///\n@@ -702,8 +690,8 @@ impl Ipv4Addr {\n     ///\n     /// A broadcast address has all octets set to 255 as defined in [IETF RFC 919].\n     ///\n-    /// [IETF RFC 919]: https://tools.ietf.org/html/rfc919\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [IETF RFC 919]: https://tools.ietf.org/html/rfc919\n     ///\n     /// # Examples\n     ///\n@@ -726,8 +714,8 @@ impl Ipv4Addr {\n     /// - 198.51.100.0/24 (TEST-NET-2)\n     /// - 203.0.113.0/24 (TEST-NET-3)\n     ///\n-    /// [IETF RFC 5737]: https://tools.ietf.org/html/rfc5737\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [IETF RFC 5737]: https://tools.ietf.org/html/rfc5737\n     ///\n     /// # Examples\n     ///\n@@ -749,11 +737,11 @@ impl Ipv4Addr {\n         }\n     }\n \n-    /// Converts this address to an IPv4-compatible [IPv6 address].\n+    /// Converts this address to an IPv4-compatible [`IPv6` address].\n     ///\n     /// a.b.c.d becomes ::a.b.c.d\n     ///\n-    /// [IPv6 address]: ../../std/net/struct.Ipv6Addr.html\n+    /// [`IPv6` address]: Ipv6Addr\n     ///\n     /// # Examples\n     ///\n@@ -771,11 +759,11 @@ impl Ipv4Addr {\n         Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a, b, c, d])\n     }\n \n-    /// Converts this address to an IPv4-mapped [IPv6 address].\n+    /// Converts this address to an IPv4-mapped [`IPv6` address].\n     ///\n     /// a.b.c.d becomes ::ffff:a.b.c.d\n     ///\n-    /// [IPv6 address]: ../../std/net/struct.Ipv6Addr.html\n+    /// [`IPv6` address]: Ipv6Addr\n     ///\n     /// # Examples\n     ///\n@@ -1128,8 +1116,8 @@ impl Ipv6Addr {\n     ///\n     /// This property is defined in [IETF RFC 4291].\n     ///\n-    /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n     ///\n     /// # Examples\n     ///\n@@ -1148,8 +1136,8 @@ impl Ipv6Addr {\n     ///\n     /// This property is defined in [IETF RFC 4291].\n     ///\n-    /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n     ///\n     /// # Examples\n     ///\n@@ -1199,6 +1187,7 @@ impl Ipv6Addr {\n     /// This property is defined in [IETF RFC 4193].\n     ///\n     /// [IETF RFC 4193]: https://tools.ietf.org/html/rfc4193\n+    ///\n     /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n@@ -1230,7 +1219,9 @@ impl Ipv6Addr {\n     ///\n     /// This method validates the format defined in the RFC and won't recognize the following\n     /// addresses such as `fe80:0:0:1::` or `fe81::` as unicast link-local addresses for example.\n-    /// If you need a less strict validation use [`is_unicast_link_local()`] instead.\n+    /// If you need a less strict validation use [`Ipv6Addr::is_unicast_link_local()`] instead.\n+    ///\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -1259,13 +1250,11 @@ impl Ipv6Addr {\n     /// - [IETF RFC 4291 section 2.5.6]\n     /// - [RFC 4291 errata 4406] (which has been rejected but provides useful\n     ///   insight)\n-    /// - [`is_unicast_link_local()`]\n+    /// - [`Ipv6Addr::is_unicast_link_local()`]\n     ///\n     /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n     /// [IETF RFC 4291 section 2.5.6]: https://tools.ietf.org/html/rfc4291#section-2.5.6\n-    /// [`true`]: ../../std/primitive.bool.html\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n-    /// [`is_unicast_link_local()`]: ../../std/net/struct.Ipv6Addr.html#method.is_unicast_link_local\n     pub fn is_unicast_link_local_strict(&self) -> bool {\n         (self.segments()[0] & 0xffff) == 0xfe80\n             && (self.segments()[1] & 0xffff) == 0\n@@ -1287,9 +1276,11 @@ impl Ipv6Addr {\n     /// ```\n     ///\n     /// As a result, this method consider addresses such as `fe80:0:0:1::` or `fe81::` to be\n-    /// unicast link-local addresses, whereas [`is_unicast_link_local_strict()`] does not. If you\n-    /// need a strict validation fully compliant with the RFC, use\n-    /// [`is_unicast_link_local_strict()`].\n+    /// unicast link-local addresses, whereas [`Ipv6Addr::is_unicast_link_local_strict()`] does not.\n+    /// If you need a strict validation fully compliant with the RFC, use\n+    /// [`Ipv6Addr::is_unicast_link_local_strict()`] instead.\n+    ///\n+    /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -1320,9 +1311,7 @@ impl Ipv6Addr {\n     ///   insight)\n     ///\n     /// [IETF RFC 4291 section 2.4]: https://tools.ietf.org/html/rfc4291#section-2.4\n-    /// [`true`]: ../../std/primitive.bool.html\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n-    /// [`is_unicast_link_local_strict()`]: ../../std/net/struct.Ipv6Addr.html#method.is_unicast_link_local_strict\n     pub fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n     }\n@@ -1371,8 +1360,8 @@ impl Ipv6Addr {\n     ///\n     /// This property is defined in [IETF RFC 3849].\n     ///\n-    /// [IETF RFC 3849]: https://tools.ietf.org/html/rfc3849\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [IETF RFC 3849]: https://tools.ietf.org/html/rfc3849\n     ///\n     /// # Examples\n     ///\n@@ -1464,8 +1453,8 @@ impl Ipv6Addr {\n     ///\n     /// This property is defined by [IETF RFC 4291].\n     ///\n-    /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n     ///\n     /// # Examples\n     ///\n@@ -1480,14 +1469,13 @@ impl Ipv6Addr {\n         (self.segments()[0] & 0xff00) == 0xff00\n     }\n \n-    /// Converts this address to an [IPv4 address] if it's an \"IPv4-mapped IPv6 address\"\n+    /// Converts this address to an [`IPv4` address] if it's an \"IPv4-mapped IPv6 address\"\n     /// defined in [IETF RFC 4291 section 2.5.5.2], otherwise returns [`None`].\n     ///\n     /// `::ffff:a.b.c.d` becomes `a.b.c.d`.\n     /// All addresses *not* starting with `::ffff` will return `None`.\n     ///\n-    /// [IPv4 address]: ../../std/net/struct.Ipv4Addr.html\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`IPv4` address]: Ipv4Addr\n     /// [IETF RFC 4291 section 2.5.5.2]: https://tools.ietf.org/html/rfc4291#section-2.5.5.2\n     ///\n     /// # Examples\n@@ -1511,13 +1499,12 @@ impl Ipv6Addr {\n         }\n     }\n \n-    /// Converts this address to an [IPv4 address]. Returns [`None`] if this address is\n+    /// Converts this address to an [`IPv4` address]. Returns [`None`] if this address is\n     /// neither IPv4-compatible or IPv4-mapped.\n     ///\n     /// ::a.b.c.d and ::ffff:a.b.c.d become a.b.c.d\n     ///\n-    /// [IPv4 address]: ../../std/net/struct.Ipv4Addr.html\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`IPv4` address]: Ipv4Addr\n     ///\n     /// # Examples\n     ///"}, {"sha": "d4b1552fec5fff05780804082be7bafb5cc2b68d", "filename": "library/std/src/net/mod.rs", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7a4fb355c6ce4e534e0998d83b68591bbe234ddb/library%2Fstd%2Fsrc%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4fb355c6ce4e534e0998d83b68591bbe234ddb/library%2Fstd%2Fsrc%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fmod.rs?ref=7a4fb355c6ce4e534e0998d83b68591bbe234ddb", "patch": "@@ -14,17 +14,6 @@\n //! * [`ToSocketAddrs`] is a trait that used for generic address resolution when interacting\n //!   with networking objects like [`TcpListener`], [`TcpStream`] or [`UdpSocket`]\n //! * Other types are return or parameter types for various methods in this module\n-//!\n-//! [`IpAddr`]: ../../std/net/enum.IpAddr.html\n-//! [`Ipv4Addr`]: ../../std/net/struct.Ipv4Addr.html\n-//! [`Ipv6Addr`]: ../../std/net/struct.Ipv6Addr.html\n-//! [`SocketAddr`]: ../../std/net/enum.SocketAddr.html\n-//! [`SocketAddrV4`]: ../../std/net/struct.SocketAddrV4.html\n-//! [`SocketAddrV6`]: ../../std/net/struct.SocketAddrV6.html\n-//! [`TcpListener`]: ../../std/net/struct.TcpListener.html\n-//! [`TcpStream`]: ../../std/net/struct.TcpStream.html\n-//! [`ToSocketAddrs`]: ../../std/net/trait.ToSocketAddrs.html\n-//! [`UdpSocket`]: ../../std/net/struct.UdpSocket.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -49,38 +38,27 @@ mod tcp;\n mod test;\n mod udp;\n \n-/// Possible values which can be passed to the [`shutdown`] method of\n-/// [`TcpStream`].\n-///\n-/// [`shutdown`]: struct.TcpStream.html#method.shutdown\n-/// [`TcpStream`]: struct.TcpStream.html\n+/// Possible values which can be passed to the [`TcpStream::shutdown`] method.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Shutdown {\n     /// The reading portion of the [`TcpStream`] should be shut down.\n     ///\n-    /// All currently blocked and future [reads] will return [`Ok(0)`].\n+    /// All currently blocked and future [reads] will return [`Ok`]`(0)`.\n     ///\n-    /// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n-    /// [reads]: ../../std/io/trait.Read.html\n-    /// [`Ok(0)`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [reads]: crate::io::Read\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Read,\n     /// The writing portion of the [`TcpStream`] should be shut down.\n     ///\n     /// All currently blocked and future [writes] will return an error.\n     ///\n-    /// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n-    /// [writes]: ../../std/io/trait.Write.html\n+    /// [writes]: crate::io::Write\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Write,\n     /// Both the reading and the writing portions of the [`TcpStream`] should be shut down.\n     ///\n     /// See [`Shutdown::Read`] and [`Shutdown::Write`] for more information.\n-    ///\n-    /// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n-    /// [`Shutdown::Read`]: #variant.Read\n-    /// [`Shutdown::Write`]: #variant.Write\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Both,\n }"}, {"sha": "a425aca5a646debbdeadf98844601dafc3fb70d5", "filename": "library/std/src/net/parser.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a4fb355c6ce4e534e0998d83b68591bbe234ddb/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4fb355c6ce4e534e0998d83b68591bbe234ddb/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs?ref=7a4fb355c6ce4e534e0998d83b68591bbe234ddb", "patch": "@@ -302,14 +302,6 @@ impl FromStr for SocketAddr {\n /// // No problem, the `panic!` message has disappeared.\n /// let _foo: SocketAddr = \"127.0.0.1:8080\".parse().expect(\"unreachable panic\");\n /// ```\n-///\n-/// [`FromStr`]: ../../std/str/trait.FromStr.html\n-/// [`IpAddr`]: ../../std/net/enum.IpAddr.html\n-/// [`Ipv4Addr`]: ../../std/net/struct.Ipv4Addr.html\n-/// [`Ipv6Addr`]: ../../std/net/struct.Ipv6Addr.html\n-/// [`SocketAddr`]: ../../std/net/enum.SocketAddr.html\n-/// [`SocketAddrV4`]: ../../std/net/struct.SocketAddrV4.html\n-/// [`SocketAddrV6`]: ../../std/net/struct.SocketAddrV6.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct AddrParseError(());"}, {"sha": "a76c9c46c05d2d1068db981c9a7a7c91e1f1a342", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 22, "deletions": 62, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/7a4fb355c6ce4e534e0998d83b68591bbe234ddb/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4fb355c6ce4e534e0998d83b68591bbe234ddb/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=7a4fb355c6ce4e534e0998d83b68591bbe234ddb", "patch": "@@ -20,13 +20,12 @@ use crate::time::Duration;\n ///\n /// The Transmission Control Protocol is specified in [IETF RFC 793].\n ///\n-/// [`accept`]: ../../std/net/struct.TcpListener.html#method.accept\n-/// [`connect`]: #method.connect\n+/// [`accept`]: TcpListener::accept\n+/// [`connect`]: TcpStream::connect\n /// [IETF RFC 793]: https://tools.ietf.org/html/rfc793\n-/// [reading]: ../../std/io/trait.Read.html\n-/// [`shutdown`]: #method.shutdown\n-/// [`TcpListener`]: ../../std/net/struct.TcpListener.html\n-/// [writing]: ../../std/io/trait.Write.html\n+/// [reading]: Read\n+/// [`shutdown`]: TcpStream::shutdown\n+/// [writing]: Write\n ///\n /// # Examples\n ///\n@@ -55,11 +54,9 @@ pub struct TcpStream(net_imp::TcpStream);\n ///\n /// The Transmission Control Protocol is specified in [IETF RFC 793].\n ///\n-/// [`accept`]: #method.accept\n-/// [`bind`]: #method.bind\n+/// [`accept`]: TcpListener::accept\n+/// [`bind`]: TcpListener::bind\n /// [IETF RFC 793]: https://tools.ietf.org/html/rfc793\n-/// [`Incoming`]: ../../std/net/struct.Incoming.html\n-/// [`TcpListener::incoming`]: #method.incoming\n ///\n /// # Examples\n ///\n@@ -85,12 +82,10 @@ pub struct TcpListener(net_imp::TcpListener);\n \n /// An iterator that infinitely [`accept`]s connections on a [`TcpListener`].\n ///\n-/// This `struct` is created by the [`incoming`] method on [`TcpListener`].\n+/// This `struct` is created by the [`TcpListener::incoming`] method.\n /// See its documentation for more.\n ///\n-/// [`accept`]: ../../std/net/struct.TcpListener.html#method.accept\n-/// [`incoming`]: ../../std/net/struct.TcpListener.html#method.incoming\n-/// [`TcpListener`]: ../../std/net/struct.TcpListener.html\n+/// [`accept`]: TcpListener::accept\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Incoming<'a> {\n@@ -109,8 +104,6 @@ impl TcpStream {\n     /// the addresses result in a successful connection, the error returned from\n     /// the last connection attempt (the last address) is returned.\n     ///\n-    /// [`ToSocketAddrs`]: ../../std/net/trait.ToSocketAddrs.html\n-    ///\n     /// # Examples\n     ///\n     /// Open a TCP connection to `127.0.0.1:8080`:\n@@ -157,8 +150,6 @@ impl TcpStream {\n     /// single system call. It instead calls `connect` in nonblocking mode and\n     /// then uses an OS-specific mechanism to await the completion of the\n     /// connection request.\n-    ///\n-    /// [`SocketAddr`]: ../../std/net/enum.SocketAddr.html\n     #[stable(feature = \"tcpstream_connect_timeout\", since = \"1.21.0\")]\n     pub fn connect_timeout(addr: &SocketAddr, timeout: Duration) -> io::Result<TcpStream> {\n         net_imp::TcpStream::connect_timeout(addr, timeout).map(TcpStream)\n@@ -204,8 +195,6 @@ impl TcpStream {\n     /// portions to return immediately with an appropriate value (see the\n     /// documentation of [`Shutdown`]).\n     ///\n-    /// [`Shutdown`]: ../../std/net/enum.Shutdown.html\n-    ///\n     /// # Platform-specific behavior\n     ///\n     /// Calling this function multiple times may result in different behavior,\n@@ -260,12 +249,9 @@ impl TcpStream {\n     /// a result of setting this option. For example Unix typically returns an\n     /// error of the kind [`WouldBlock`], but Windows may return [`TimedOut`].\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    /// [`read`]: ../../std/io/trait.Read.html#tymethod.read\n-    /// [`WouldBlock`]: ../../std/io/enum.ErrorKind.html#variant.WouldBlock\n-    /// [`TimedOut`]: ../../std/io/enum.ErrorKind.html#variant.TimedOut\n-    /// [`Duration`]: ../../std/time/struct.Duration.html\n+    /// [`read`]: Read::read\n+    /// [`WouldBlock`]: io::ErrorKind::WouldBlock\n+    /// [`TimedOut`]: io::ErrorKind::TimedOut\n     ///\n     /// # Examples\n     ///\n@@ -307,12 +293,9 @@ impl TcpStream {\n     /// as a result of setting this option. For example Unix typically returns\n     /// an error of the kind [`WouldBlock`], but Windows may return [`TimedOut`].\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    /// [`write`]: ../../std/io/trait.Write.html#tymethod.write\n-    /// [`Duration`]: ../../std/time/struct.Duration.html\n-    /// [`WouldBlock`]: ../../std/io/enum.ErrorKind.html#variant.WouldBlock\n-    /// [`TimedOut`]: ../../std/io/enum.ErrorKind.html#variant.TimedOut\n+    /// [`write`]: Write::write\n+    /// [`WouldBlock`]: io::ErrorKind::WouldBlock\n+    /// [`TimedOut`]: io::ErrorKind::TimedOut\n     ///\n     /// # Examples\n     ///\n@@ -350,8 +333,7 @@ impl TcpStream {\n     ///\n     /// Some platforms do not provide access to the current timeout.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`read`]: ../../std/io/trait.Read.html#tymethod.read\n+    /// [`read`]: Read::read\n     ///\n     /// # Examples\n     ///\n@@ -376,8 +358,7 @@ impl TcpStream {\n     ///\n     /// Some platforms do not provide access to the current timeout.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`write`]: ../../std/io/trait.Write.html#tymethod.write\n+    /// [`write`]: Write::write\n     ///\n     /// # Examples\n     ///\n@@ -440,9 +421,7 @@ impl TcpStream {\n \n     /// Gets the value of the `TCP_NODELAY` option on this socket.\n     ///\n-    /// For more information about this option, see [`set_nodelay`][link].\n-    ///\n-    /// [link]: #method.set_nodelay\n+    /// For more information about this option, see [`TcpStream::set_nodelay`].\n     ///\n     /// # Examples\n     ///\n@@ -480,9 +459,7 @@ impl TcpStream {\n \n     /// Gets the value of the `IP_TTL` option for this socket.\n     ///\n-    /// For more information about this option, see [`set_ttl`][link].\n-    ///\n-    /// [link]: #method.set_ttl\n+    /// For more information about this option, see [`TcpStream::set_ttl`].\n     ///\n     /// # Examples\n     ///\n@@ -559,8 +536,6 @@ impl TcpStream {\n     /// };\n     /// println!(\"bytes: {:?}\", buf);\n     /// ```\n-    ///\n-    /// [`io::ErrorKind::WouldBlock`]: ../io/enum.ErrorKind.html#variant.WouldBlock\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)\n@@ -681,7 +656,7 @@ impl TcpListener {\n     ///\n     /// Binding with a port number of 0 will request that the OS assigns a port\n     /// to this listener. The port allocated can be queried via the\n-    /// [`local_addr`] method.\n+    /// [`TcpListener::local_addr`] method.\n     ///\n     /// The address type can be any implementor of [`ToSocketAddrs`] trait. See\n     /// its documentation for concrete examples.\n@@ -691,9 +666,6 @@ impl TcpListener {\n     /// none of the addresses succeed in creating a listener, the error returned\n     /// from the last attempt (the last address) is returned.\n     ///\n-    /// [`local_addr`]: #method.local_addr\n-    /// [`ToSocketAddrs`]: ../../std/net/trait.ToSocketAddrs.html\n-    ///\n     /// # Examples\n     ///\n     /// Creates a TCP listener bound to `127.0.0.1:80`:\n@@ -743,8 +715,6 @@ impl TcpListener {\n     /// object references. Both handles can be used to accept incoming\n     /// connections and options set on one listener will affect the other.\n     ///\n-    /// [`TcpListener`]: ../../std/net/struct.TcpListener.html\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -764,8 +734,6 @@ impl TcpListener {\n     /// is established. When established, the corresponding [`TcpStream`] and the\n     /// remote peer's address will be returned.\n     ///\n-    /// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -790,11 +758,7 @@ impl TcpListener {\n     ///\n     /// The returned iterator will never return [`None`] and will also not yield\n     /// the peer's [`SocketAddr`] structure. Iterating over it is equivalent to\n-    /// calling [`accept`] in a loop.\n-    ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`SocketAddr`]: ../../std/net/enum.SocketAddr.html\n-    /// [`accept`]: #method.accept\n+    /// calling [`TcpListener::accept`] in a loop.\n     ///\n     /// # Examples\n     ///\n@@ -837,9 +801,7 @@ impl TcpListener {\n \n     /// Gets the value of the `IP_TTL` option for this socket.\n     ///\n-    /// For more information about this option, see [`set_ttl`][link].\n-    ///\n-    /// [link]: #method.set_ttl\n+    /// For more information about this option, see [`TcpListener::set_ttl`].\n     ///\n     /// # Examples\n     ///\n@@ -936,8 +898,6 @@ impl TcpListener {\n     ///     }\n     /// }\n     /// ```\n-    ///\n-    /// [`io::ErrorKind::WouldBlock`]: ../io/enum.ErrorKind.html#variant.WouldBlock\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)"}, {"sha": "d730b2b87ac2595ed52870d3c3bbc114093d80fd", "filename": "library/std/src/net/udp.rs", "status": "modified", "additions": 27, "deletions": 67, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/7a4fb355c6ce4e534e0998d83b68591bbe234ddb/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4fb355c6ce4e534e0998d83b68591bbe234ddb/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs?ref=7a4fb355c6ce4e534e0998d83b68591bbe234ddb", "patch": "@@ -19,15 +19,15 @@ use crate::time::Duration;\n /// an unordered, unreliable protocol; refer to [`TcpListener`] and [`TcpStream`] for TCP\n /// primitives.\n ///\n-/// [`bind`]: #method.bind\n-/// [`connect`]: #method.connect\n+/// [`bind`]: UdpSocket::bind\n+/// [`connect`]: UdpSocket::connect\n /// [IETF RFC 768]: https://tools.ietf.org/html/rfc768\n-/// [`recv`]: #method.recv\n-/// [received from]: #method.recv_from\n-/// [`send`]: #method.send\n-/// [sent to]: #method.send_to\n-/// [`TcpListener`]: ../../std/net/struct.TcpListener.html\n-/// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n+/// [`recv`]: UdpSocket::recv\n+/// [received from]: UdpSocket::recv_from\n+/// [`send`]: UdpSocket::send\n+/// [sent to]: UdpSocket::send_to\n+/// [`TcpListener`]: crate::net::TcpListener\n+/// [`TcpStream`]: crate::net::TcpStream\n ///\n /// # Examples\n ///\n@@ -65,8 +65,6 @@ impl UdpSocket {\n     /// of the addresses succeed in creating a socket, the error returned from\n     /// the last attempt (the last address) is returned.\n     ///\n-    /// [`ToSocketAddrs`]: ../../std/net/trait.ToSocketAddrs.html\n-    ///\n     /// # Examples\n     ///\n     /// Creates a UDP socket bound to `127.0.0.1:3400`:\n@@ -160,8 +158,6 @@ impl UdpSocket {\n     ///\n     /// See issue #34202 for more details.\n     ///\n-    /// [`ToSocketAddrs`]: ../../std/net/trait.ToSocketAddrs.html\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -193,7 +189,7 @@ impl UdpSocket {\n     ///\n     /// If the socket isn't connected, it will return a [`NotConnected`] error.\n     ///\n-    /// [`NotConnected`]: ../../std/io/enum.ErrorKind.html#variant.NotConnected\n+    /// [`NotConnected`]: io::ErrorKind::NotConnected\n     ///\n     /// ```no_run\n     /// use std::net::UdpSocket;\n@@ -254,12 +250,9 @@ impl UdpSocket {\n     /// a result of setting this option. For example Unix typically returns an\n     /// error of the kind [`WouldBlock`], but Windows may return [`TimedOut`].\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    /// [`read`]: ../../std/io/trait.Read.html#tymethod.read\n-    /// [`Duration`]: ../../std/time/struct.Duration.html\n-    /// [`WouldBlock`]: ../../std/io/enum.ErrorKind.html#variant.WouldBlock\n-    /// [`TimedOut`]: ../../std/io/enum.ErrorKind.html#variant.TimedOut\n+    /// [`read`]: io::Read::read\n+    /// [`WouldBlock`]: io::ErrorKind::WouldBlock\n+    /// [`TimedOut`]: io::ErrorKind::TimedOut\n     ///\n     /// # Examples\n     ///\n@@ -300,12 +293,9 @@ impl UdpSocket {\n     /// as a result of setting this option. For example Unix typically returns\n     /// an error of the kind [`WouldBlock`], but Windows may return [`TimedOut`].\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    /// [`write`]: ../../std/io/trait.Write.html#tymethod.write\n-    /// [`Duration`]: ../../std/time/struct.Duration.html\n-    /// [`WouldBlock`]: ../../std/io/enum.ErrorKind.html#variant.WouldBlock\n-    /// [`TimedOut`]: ../../std/io/enum.ErrorKind.html#variant.TimedOut\n+    /// [`write`]: io::Write::write\n+    /// [`WouldBlock`]: io::ErrorKind::WouldBlock\n+    /// [`TimedOut`]: io::ErrorKind::TimedOut\n     ///\n     /// # Examples\n     ///\n@@ -338,8 +328,7 @@ impl UdpSocket {\n     ///\n     /// If the timeout is [`None`], then [`read`] calls will block indefinitely.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`read`]: ../../std/io/trait.Read.html#tymethod.read\n+    /// [`read`]: io::Read::read\n     ///\n     /// # Examples\n     ///\n@@ -359,8 +348,7 @@ impl UdpSocket {\n     ///\n     /// If the timeout is [`None`], then [`write`] calls will block indefinitely.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`write`]: ../../std/io/trait.Write.html#tymethod.write\n+    /// [`write`]: io::Write::write\n     ///\n     /// # Examples\n     ///\n@@ -396,10 +384,7 @@ impl UdpSocket {\n \n     /// Gets the value of the `SO_BROADCAST` option for this socket.\n     ///\n-    /// For more information about this option, see\n-    /// [`set_broadcast`][link].\n-    ///\n-    /// [link]: #method.set_broadcast\n+    /// For more information about this option, see [`UdpSocket::set_broadcast`].\n     ///\n     /// # Examples\n     ///\n@@ -435,10 +420,7 @@ impl UdpSocket {\n \n     /// Gets the value of the `IP_MULTICAST_LOOP` option for this socket.\n     ///\n-    /// For more information about this option, see\n-    /// [`set_multicast_loop_v4`][link].\n-    ///\n-    /// [link]: #method.set_multicast_loop_v4\n+    /// For more information about this option, see [`UdpSocket::set_multicast_loop_v4`].\n     ///\n     /// # Examples\n     ///\n@@ -477,10 +459,7 @@ impl UdpSocket {\n \n     /// Gets the value of the `IP_MULTICAST_TTL` option for this socket.\n     ///\n-    /// For more information about this option, see\n-    /// [`set_multicast_ttl_v4`][link].\n-    ///\n-    /// [link]: #method.set_multicast_ttl_v4\n+    /// For more information about this option, see [`UdpSocket::set_multicast_ttl_v4`].\n     ///\n     /// # Examples\n     ///\n@@ -516,10 +495,7 @@ impl UdpSocket {\n \n     /// Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.\n     ///\n-    /// For more information about this option, see\n-    /// [`set_multicast_loop_v6`][link].\n-    ///\n-    /// [link]: #method.set_multicast_loop_v6\n+    /// For more information about this option, see [`UdpSocket::set_multicast_loop_v6`].\n     ///\n     /// # Examples\n     ///\n@@ -555,9 +531,7 @@ impl UdpSocket {\n \n     /// Gets the value of the `IP_TTL` option for this socket.\n     ///\n-    /// For more information about this option, see [`set_ttl`][link].\n-    ///\n-    /// [link]: #method.set_ttl\n+    /// For more information about this option, see [`UdpSocket::set_ttl`].\n     ///\n     /// # Examples\n     ///\n@@ -597,21 +571,15 @@ impl UdpSocket {\n \n     /// Executes an operation of the `IP_DROP_MEMBERSHIP` type.\n     ///\n-    /// For more information about this option, see\n-    /// [`join_multicast_v4`][link].\n-    ///\n-    /// [link]: #method.join_multicast_v4\n+    /// For more information about this option, see [`UdpSocket::join_multicast_v4`].\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn leave_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()> {\n         self.0.leave_multicast_v4(multiaddr, interface)\n     }\n \n     /// Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.\n     ///\n-    /// For more information about this option, see\n-    /// [`join_multicast_v6`][link].\n-    ///\n-    /// [link]: #method.join_multicast_v6\n+    /// For more information about this option, see [`UdpSocket::join_multicast_v6`].\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn leave_multicast_v6(&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()> {\n         self.0.leave_multicast_v6(multiaddr, interface)\n@@ -675,11 +643,9 @@ impl UdpSocket {\n \n     /// Sends data on the socket to the remote address to which it is connected.\n     ///\n-    /// The [`connect`] method will connect this socket to a remote address. This\n+    /// [`UdpSocket::connect`] will connect this socket to a remote address. This\n     /// method will fail if the socket is not connected.\n     ///\n-    /// [`connect`]: #method.connect\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -701,11 +667,9 @@ impl UdpSocket {\n     /// hold the message bytes. If a message is too long to fit in the supplied buffer,\n     /// excess bytes may be discarded.\n     ///\n-    /// The [`connect`] method will connect this socket to a remote address. This\n+    /// [`UdpSocket::connect`] will connect this socket to a remote address. This\n     /// method will fail if the socket is not connected.\n     ///\n-    /// [`connect`]: #method.connect\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -738,11 +702,9 @@ impl UdpSocket {\n     /// Do not use this function to implement busy waiting, instead use `libc::poll` to\n     /// synchronize IO events on one or more sockets.\n     ///\n-    /// The [`connect`] method will connect this socket to a remote address. This\n+    /// [`UdpSocket::connect`] will connect this socket to a remote address. This\n     /// method will fail if the socket is not connected.\n     ///\n-    /// [`connect`]: #method.connect\n-    ///\n     /// # Errors\n     ///\n     /// This method will fail if the socket is not connected. The `connect` method\n@@ -779,8 +741,6 @@ impl UdpSocket {\n     /// `FIONBIO`. On Windows calling this method corresponds to calling\n     /// `ioctlsocket` `FIONBIO`.\n     ///\n-    /// [`io::ErrorKind::WouldBlock`]: ../io/enum.ErrorKind.html#variant.WouldBlock\n-    ///\n     /// # Examples\n     ///\n     /// Creates a UDP socket bound to `127.0.0.1:7878` and read bytes in"}]}