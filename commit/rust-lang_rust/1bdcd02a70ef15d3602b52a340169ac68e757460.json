{"sha": "1bdcd02a70ef15d3602b52a340169ac68e757460", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZGNkMDJhNzBlZjE1ZDM2MDJiNTJhMzQwMTY5YWM2OGU3NTc0NjA=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-11-01T02:04:11Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-11-01T02:05:58Z"}, "message": "The need for `Single` to cover `Unlistable` was a hack\n\nIt is now unneeded, since we handle `&str` patterns in a consistent way.", "tree": {"sha": "1100e4d7d5bcce1407b6aa3ae6855312075f5d36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1100e4d7d5bcce1407b6aa3ae6855312075f5d36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bdcd02a70ef15d3602b52a340169ac68e757460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bdcd02a70ef15d3602b52a340169ac68e757460", "html_url": "https://github.com/rust-lang/rust/commit/1bdcd02a70ef15d3602b52a340169ac68e757460", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bdcd02a70ef15d3602b52a340169ac68e757460/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cd30197eb126727b791a1c845c5ec47dbd3b1de", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cd30197eb126727b791a1c845c5ec47dbd3b1de", "html_url": "https://github.com/rust-lang/rust/commit/4cd30197eb126727b791a1c845c5ec47dbd3b1de"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "4bbbf416bec4e176139fb1fad3ab8aeff94bd6c4", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1bdcd02a70ef15d3602b52a340169ac68e757460/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bdcd02a70ef15d3602b52a340169ac68e757460/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=1bdcd02a70ef15d3602b52a340169ac68e757460", "patch": "@@ -799,11 +799,9 @@ enum Constructor<'tcx> {\n     /// boxes for the purposes of exhaustiveness: we must not inspect them, and they\n     /// don't count towards making a match exhaustive.\n     Opaque,\n-    /// Fake extra constructor for enums that aren't allowed to be matched exhaustively.\n+    /// Fake extra constructor for enums that aren't allowed to be matched exhaustively. Also used\n+    /// for those types for which we cannot list constructors explicitly, like `f64` and `str`.\n     NonExhaustive,\n-    /// Fake constructor for those types for which we can't list constructors explicitly, like\n-    /// `f64` and `str`.\n-    Unlistable,\n     /// Wildcard pattern.\n     Wildcard,\n }\n@@ -897,6 +895,7 @@ impl<'tcx> Constructor<'tcx> {\n     /// For the simple cases, this is simply checking for equality. For the \"grouped\" constructors,\n     /// this checks for inclusion.\n     fn is_covered_by<'p>(&self, pcx: PatCtxt<'_, 'p, 'tcx>, other: &Self) -> bool {\n+        // This must be kept in sync with `is_covered_by_any`.\n         match (self, other) {\n             // Wildcards cover anything\n             (_, Wildcard) => true,\n@@ -939,11 +938,6 @@ impl<'tcx> Constructor<'tcx> {\n             (Opaque, _) | (_, Opaque) => false,\n             // Only a wildcard pattern can match the special extra constructor.\n             (NonExhaustive, _) => false,\n-            // If we encounter a `Single` here, this means there was only one constructor for this\n-            // type after all.\n-            (Unlistable, Single) => true,\n-            // Otherwise, only a wildcard pattern can match the special extra constructor.\n-            (Unlistable, _) => false,\n \n             _ => span_bug!(\n                 pcx.span,\n@@ -955,7 +949,8 @@ impl<'tcx> Constructor<'tcx> {\n     }\n \n     /// Faster version of `is_covered_by` when applied to many constructors. `used_ctors` is\n-    /// assumed to be built from `matrix.head_ctors()`, and `self` is assumed to have been split.\n+    /// assumed to be built from `matrix.head_ctors()` with wildcards filtered out, and `self` is\n+    /// assumed to have been split from a wildcard.\n     fn is_covered_by_any<'p>(\n         &self,\n         pcx: PatCtxt<'_, 'p, 'tcx>,\n@@ -965,8 +960,9 @@ impl<'tcx> Constructor<'tcx> {\n             return false;\n         }\n \n+        // This must be kept in sync with `is_covered_by`.\n         match self {\n-            // `used_ctors` cannot contain anything else than `Single`s.\n+            // If `self` is `Single`, `used_ctors` cannot contain anything else than `Single`s.\n             Single => !used_ctors.is_empty(),\n             Variant(_) => used_ctors.iter().any(|c| c == self),\n             IntRange(range) => used_ctors\n@@ -979,8 +975,6 @@ impl<'tcx> Constructor<'tcx> {\n                 .any(|other| slice.is_covered_by(other)),\n             // This constructor is never covered by anything else\n             NonExhaustive => false,\n-            // This constructor is only covered by `Single`s\n-            Unlistable => used_ctors.iter().any(|c| *c == Single),\n             Str(..) | FloatRange(..) | Opaque | Wildcard => {\n                 bug!(\"found unexpected ctor in all_ctors: {:?}\", self)\n             }\n@@ -1064,7 +1058,7 @@ impl<'tcx> Constructor<'tcx> {\n             &Str(value) => PatKind::Constant { value },\n             &FloatRange(lo, hi, end) => PatKind::Range(PatRange { lo, hi, end }),\n             IntRange(range) => return range.to_pat(pcx.cx.tcx),\n-            NonExhaustive | Unlistable => PatKind::Wild,\n+            NonExhaustive => PatKind::Wild,\n             Opaque => bug!(\"we should not try to apply an opaque constructor\"),\n             Wildcard => bug!(\n                 \"trying to apply a wildcard constructor; this should have been done in `apply_constructors`\"\n@@ -1213,8 +1207,9 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n                 }\n                 _ => bug!(\"bad slice pattern {:?} {:?}\", constructor, ty),\n             },\n-            Str(..) | FloatRange(..) | IntRange(..) | NonExhaustive | Opaque | Unlistable\n-            | Wildcard => Fields::empty(),\n+            Str(..) | FloatRange(..) | IntRange(..) | NonExhaustive | Opaque | Wildcard => {\n+                Fields::empty()\n+            }\n         };\n         debug!(\"Fields::wildcards({:?}, {:?}) = {:#?}\", constructor, ty, ret);\n         ret\n@@ -1624,8 +1619,8 @@ fn all_constructors<'p, 'tcx>(pcx: PatCtxt<'_, 'p, 'tcx>) -> Vec<Constructor<'tc\n         }\n         _ if cx.is_uninhabited(pcx.ty) => vec![],\n         ty::Adt(..) | ty::Tuple(..) | ty::Ref(..) => vec![Single],\n-        // This type is one for which we don't know how to list constructors, like `str` or `f64`.\n-        _ => vec![Unlistable],\n+        // This type is one for which we cannot list constructors, like `str` or `f64`.\n+        _ => vec![NonExhaustive],\n     }\n }\n "}]}