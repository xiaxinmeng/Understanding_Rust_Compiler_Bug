{"sha": "83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa", "node_id": "C_kwDOAAsO6NoAKDgzZTI0ZmVjOThmMWZiZWNiMjllYTM0YmZkMmJjNmUwZjMyZDI1YWE", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-02-19T14:30:49Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-02-19T14:55:55Z"}, "message": "Fix associated item visibility in block-local impls", "tree": {"sha": "24a2799ad8e68c7936a4334805fafa5f619ebc0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24a2799ad8e68c7936a4334805fafa5f619ebc0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmPyOHsACgkQ4laYqTBY\nYXHcIw/8CwwwgxvYXd67BL7/pvomM5vEbmpwP2PmgBUOjQke51fcXdXdXrdZcPYC\nR5tNcmW5uIFXoFjtx7mHJaf+heqQRSuqLMmwNQTfR8Bl6cdB8QZJuThNjg3exGhv\nl1HGedszKZuvuxrHXIR5iGOgWP9+GX5/aUySngMWZ4gaRW3+BvJ/KTELX9+OqUx3\nFKnPS89od/NIkWBzkjowcvZfJXLbVxiYsTgMAHpSds0xUWDbG2hcIYqDPdxtzYlr\n1WtIuU4ZrEKmiViUgktPBdw+/GDYLKS7mOnzFmjXbI2CN6CJYidBrBQfq5+4+063\ni82euHesSGzwKRYWU2/Z6JlkHWvF+Qxq4k9zv3dgSjrR9I2dDjgiLYYOLlc42SND\n81PmTX3Lud4nb6KRmw25djiLzWEQSKRoaj6A40CmaXWQWUpd3TUACpLUSb7vzpeL\nk9XZcuaL8tWkUF0HupDAj2+TYHNM5acV8gJ/OrxnDTAuaUDftZxqkdwVG7lNp6yH\nV2R83tgBwHDiE6OV3vun9nzjVQcQdWmz/l/gfgcykzlAi9+dCJPoIL2uuCapIXTV\n/hXpPJe04JeXoipqNEOwJlW/Jtk/DFXifF+RgUeVXc67kEqVQqkcoD7TeTzGTkAJ\nk4eyCFZGUKULPwEoflts9524iirubLbBW3tqj2xAJteT29L2ANs=\n=Qagj\n-----END PGP SIGNATURE-----", "payload": "tree 24a2799ad8e68c7936a4334805fafa5f619ebc0a\nparent 443801755c10f64aa3a5b400e8cdc026a7ba6e5e\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1676817049 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1676818555 +0900\n\nFix associated item visibility in block-local impls\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa", "html_url": "https://github.com/rust-lang/rust/commit/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "443801755c10f64aa3a5b400e8cdc026a7ba6e5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/443801755c10f64aa3a5b400e8cdc026a7ba6e5e", "html_url": "https://github.com/rust-lang/rust/commit/443801755c10f64aa3a5b400e8cdc026a7ba6e5e"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "e3704bf2164b01ce0508699ce06f36e4cf74933d", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa", "patch": "@@ -666,8 +666,10 @@ impl DefCollector<'_> {\n         macro_: Macro2Id,\n         vis: &RawVisibility,\n     ) {\n-        let vis =\n-            self.def_map.resolve_visibility(self.db, module_id, vis).unwrap_or(Visibility::Public);\n+        let vis = self\n+            .def_map\n+            .resolve_visibility(self.db, module_id, vis, false)\n+            .unwrap_or(Visibility::Public);\n         self.def_map.modules[module_id].scope.declare(macro_.into());\n         self.update(\n             module_id,\n@@ -831,7 +833,7 @@ impl DefCollector<'_> {\n         let mut def = directive.status.namespaces();\n         let vis = self\n             .def_map\n-            .resolve_visibility(self.db, module_id, &directive.import.visibility)\n+            .resolve_visibility(self.db, module_id, &directive.import.visibility, false)\n             .unwrap_or(Visibility::Public);\n \n         match import.kind {\n@@ -1547,7 +1549,7 @@ impl ModCollector<'_, '_> {\n                 };\n             let resolve_vis = |def_map: &DefMap, visibility| {\n                 def_map\n-                    .resolve_visibility(db, self.module_id, visibility)\n+                    .resolve_visibility(db, self.module_id, visibility, false)\n                     .unwrap_or(Visibility::Public)\n             };\n \n@@ -1823,7 +1825,7 @@ impl ModCollector<'_, '_> {\n     ) -> LocalModuleId {\n         let def_map = &mut self.def_collector.def_map;\n         let vis = def_map\n-            .resolve_visibility(self.def_collector.db, self.module_id, visibility)\n+            .resolve_visibility(self.def_collector.db, self.module_id, visibility, false)\n             .unwrap_or(Visibility::Public);\n         let modules = &mut def_map.modules;\n         let origin = match definition {"}, {"sha": "25478481dd0b343afd74a5f19d7d05c3e76e4d93", "filename": "crates/hir-def/src/nameres/path_resolution.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa", "patch": "@@ -78,6 +78,7 @@ impl DefMap {\n         // pub(path)\n         //     ^^^^ this\n         visibility: &RawVisibility,\n+        within_impl: bool,\n     ) -> Option<Visibility> {\n         let mut vis = match visibility {\n             RawVisibility::Module(path) => {\n@@ -102,7 +103,8 @@ impl DefMap {\n         // `super` to its parent (etc.). However, visibilities must only refer to a module in the\n         // DefMap they're written in, so we restrict them when that happens.\n         if let Visibility::Module(m) = vis {\n-            if self.block_id() != m.block {\n+            // ...unless we're resolving visibility for an associated item in an impl.\n+            if self.block_id() != m.block && !within_impl {\n                 cov_mark::hit!(adjust_vis_in_block_def_map);\n                 vis = Visibility::Module(self.module_id(self.root()));\n                 tracing::debug!(\"visibility {:?} points outside DefMap, adjusting to {:?}\", m, vis);"}, {"sha": "0a44f65ad4a0e43c248babe699cba62ebb90458c", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa", "patch": "@@ -214,10 +214,12 @@ impl Resolver {\n         db: &dyn DefDatabase,\n         visibility: &RawVisibility,\n     ) -> Option<Visibility> {\n+        let within_impl =\n+            self.scopes().find(|scope| matches!(scope, Scope::ImplDefScope(_))).is_some();\n         match visibility {\n             RawVisibility::Module(_) => {\n                 let (item_map, module) = self.item_scope();\n-                item_map.resolve_visibility(db, module, visibility)\n+                item_map.resolve_visibility(db, module, visibility, within_impl)\n             }\n             RawVisibility::Public => Some(Visibility::Public),\n         }"}, {"sha": "c9fcaae56cf0cbf86c8d19afa15047194f9cfa46", "filename": "crates/hir-def/src/visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa/crates%2Fhir-def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa/crates%2Fhir-def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fvisibility.rs?ref=83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa", "patch": "@@ -120,7 +120,7 @@ impl Visibility {\n         self,\n         db: &dyn DefDatabase,\n         def_map: &DefMap,\n-        mut from_module: crate::LocalModuleId,\n+        mut from_module: LocalModuleId,\n     ) -> bool {\n         let mut to_module = match self {\n             Visibility::Module(m) => m,"}, {"sha": "67da5c7f27d148fd1f8958090aa0c5011dd53c8c", "filename": "crates/ide-diagnostics/src/handlers/private_assoc_item.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fprivate_assoc_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fprivate_assoc_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fprivate_assoc_item.rs?ref=83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa", "patch": "@@ -115,6 +115,44 @@ mod module {\n fn main(s: module::Struct) {\n     s.method();\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn can_see_through_top_level_anonymous_const() {\n+        // regression test for #14046.\n+        check_diagnostics(\n+            r#\"\n+struct S;\n+mod m {\n+    const _: () = {\n+        impl crate::S {\n+            pub(crate) fn method(self) {}\n+            pub(crate) const A: usize = 42;\n+        }\n+    };\n+    mod inner {\n+        const _: () = {\n+            impl crate::S {\n+                pub(crate) fn method2(self) {}\n+                pub(crate) const B: usize = 42;\n+                pub(super) fn private(self) {}\n+                pub(super) const PRIVATE: usize = 42;\n+            }\n+        };\n+    }\n+}\n+fn main() {\n+    S.method();\n+    S::A;\n+    S.method2();\n+    S::B;\n+    S.private();\n+  //^^^^^^^^^^^ error: function `private` is private\n+    S::PRIVATE;\n+  //^^^^^^^^^^ error: const `PRIVATE` is private\n+}\n \"#,\n         );\n     }"}]}