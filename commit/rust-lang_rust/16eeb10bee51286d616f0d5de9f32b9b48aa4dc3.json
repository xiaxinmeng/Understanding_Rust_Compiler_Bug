{"sha": "16eeb10bee51286d616f0d5de9f32b9b48aa4dc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZWViMTBiZWU1MTI4NmQ2MTZmMGQ1ZGU5ZjMyYjliNDhhYTRkYzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-23T14:27:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-23T17:16:07Z"}, "message": "Rollup merge of #48624 - bdrewery:freebsd-posix-spawn, r=alexcrichton\n\nCommand: Support posix_spawn() on FreeBSD/OSX/GNU Linux", "tree": {"sha": "771e4d2af0703ee15c6c74849a26e7c13bce5f91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/771e4d2af0703ee15c6c74849a26e7c13bce5f91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3", "html_url": "https://github.com/rust-lang/rust/commit/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cf4cb5a7be38fcb3831204eb32ad6e2ef0a9e25", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cf4cb5a7be38fcb3831204eb32ad6e2ef0a9e25", "html_url": "https://github.com/rust-lang/rust/commit/7cf4cb5a7be38fcb3831204eb32ad6e2ef0a9e25"}, {"sha": "70559c54ce2a493a15f447436e281e16fc55b291", "url": "https://api.github.com/repos/rust-lang/rust/commits/70559c54ce2a493a15f447436e281e16fc55b291", "html_url": "https://github.com/rust-lang/rust/commit/70559c54ce2a493a15f447436e281e16fc55b291"}], "stats": {"total": 222, "additions": 194, "deletions": 28}, "files": [{"sha": "04d9f0b06d344efbda8cce7bebdcd6bdd835c983", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=16eeb10bee51286d616f0d5de9f32b9b48aa4dc3", "patch": "@@ -383,42 +383,19 @@ impl IntoInner<c_int> for Socket {\n // believe it's thread-safe).\n #[cfg(target_env = \"gnu\")]\n fn on_resolver_failure() {\n+    use sys;\n+\n     // If the version fails to parse, we treat it the same as \"not glibc\".\n-    if let Some(Ok(version_str)) = glibc_version_cstr().map(CStr::to_str) {\n-        if let Some(version) = parse_glibc_version(version_str) {\n-            if version < (2, 26) {\n-                unsafe { libc::res_init() };\n-            }\n+    if let Some(version) = sys::os::glibc_version() {\n+        if version < (2, 26) {\n+            unsafe { libc::res_init() };\n         }\n     }\n }\n \n #[cfg(not(target_env = \"gnu\"))]\n fn on_resolver_failure() {}\n \n-#[cfg(target_env = \"gnu\")]\n-fn glibc_version_cstr() -> Option<&'static CStr> {\n-    weak! {\n-        fn gnu_get_libc_version() -> *const libc::c_char\n-    }\n-    if let Some(f) = gnu_get_libc_version.get() {\n-        unsafe { Some(CStr::from_ptr(f())) }\n-    } else {\n-        None\n-    }\n-}\n-\n-// Returns Some((major, minor)) if the string is a valid \"x.y\" version,\n-// ignoring any extra dot-separated parts. Otherwise return None.\n-#[cfg(target_env = \"gnu\")]\n-fn parse_glibc_version(version: &str) -> Option<(usize, usize)> {\n-    let mut parsed_ints = version.split(\".\").map(str::parse::<usize>).fuse();\n-    match (parsed_ints.next(), parsed_ints.next()) {\n-        (Some(Ok(major)), Some(Ok(minor))) => Some((major, minor)),\n-        _ => None\n-    }\n-}\n-\n #[cfg(all(test, taget_env = \"gnu\"))]\n mod test {\n     use super::*;"}, {"sha": "4c86fddee4b45c3eef51466095edc283340e9839", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=16eeb10bee51286d616f0d5de9f32b9b48aa4dc3", "patch": "@@ -546,3 +546,35 @@ pub fn getpid() -> u32 {\n pub fn getppid() -> u32 {\n     unsafe { libc::getppid() as u32 }\n }\n+\n+#[cfg(target_env = \"gnu\")]\n+pub fn glibc_version() -> Option<(usize, usize)> {\n+    if let Some(Ok(version_str)) = glibc_version_cstr().map(CStr::to_str) {\n+        parse_glibc_version(version_str)\n+    } else {\n+        None\n+    }\n+}\n+\n+#[cfg(target_env = \"gnu\")]\n+fn glibc_version_cstr() -> Option<&'static CStr> {\n+    weak! {\n+        fn gnu_get_libc_version() -> *const libc::c_char\n+    }\n+    if let Some(f) = gnu_get_libc_version.get() {\n+        unsafe { Some(CStr::from_ptr(f())) }\n+    } else {\n+        None\n+    }\n+}\n+\n+// Returns Some((major, minor)) if the string is a valid \"x.y\" version,\n+// ignoring any extra dot-separated parts. Otherwise return None.\n+#[cfg(target_env = \"gnu\")]\n+fn parse_glibc_version(version: &str) -> Option<(usize, usize)> {\n+    let mut parsed_ints = version.split(\".\").map(str::parse::<usize>).fuse();\n+    match (parsed_ints.next(), parsed_ints.next()) {\n+        (Some(Ok(major)), Some(Ok(minor))) => Some((major, minor)),\n+        _ => None\n+    }\n+}"}, {"sha": "b7f30600b8a4c7dc3bf63c21a3cb2397510202d4", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=16eeb10bee51286d616f0d5de9f32b9b48aa4dc3", "patch": "@@ -184,6 +184,10 @@ impl Command {\n         let maybe_env = self.env.capture_if_changed();\n         maybe_env.map(|env| construct_envp(env, &mut self.saw_nul))\n     }\n+    #[allow(dead_code)]\n+    pub fn env_saw_path(&self) -> bool {\n+        self.env.have_changed_path()\n+    }\n \n     pub fn setup_io(&self, default: Stdio, needs_stdin: bool)\n                 -> io::Result<(StdioPipes, ChildPipes)> {"}, {"sha": "9d6d607e3f3409127e08f99d95685c656de70de3", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=16eeb10bee51286d616f0d5de9f32b9b48aa4dc3", "patch": "@@ -34,6 +34,11 @@ impl Command {\n         }\n \n         let (ours, theirs) = self.setup_io(default, needs_stdin)?;\n+\n+        if let Some(ret) = self.posix_spawn(&theirs, envp.as_ref())? {\n+            return Ok((ret, ours))\n+        }\n+\n         let (input, output) = sys::pipe::anon_pipe()?;\n \n         let pid = unsafe {\n@@ -229,6 +234,119 @@ impl Command {\n         libc::execvp(self.get_argv()[0], self.get_argv().as_ptr());\n         io::Error::last_os_error()\n     }\n+\n+    #[cfg(not(any(target_os = \"macos\", target_os = \"freebsd\",\n+                  all(target_os = \"linux\", target_env = \"gnu\"))))]\n+    fn posix_spawn(&mut self, _: &ChildPipes, _: Option<&CStringArray>)\n+        -> io::Result<Option<Process>>\n+    {\n+        Ok(None)\n+    }\n+\n+    // Only support platforms for which posix_spawn() can return ENOENT\n+    // directly.\n+    #[cfg(any(target_os = \"macos\", target_os = \"freebsd\",\n+              all(target_os = \"linux\", target_env = \"gnu\")))]\n+    fn posix_spawn(&mut self, stdio: &ChildPipes, envp: Option<&CStringArray>)\n+        -> io::Result<Option<Process>>\n+    {\n+        use mem;\n+        use sys;\n+\n+        if self.get_cwd().is_some() ||\n+            self.get_gid().is_some() ||\n+            self.get_uid().is_some() ||\n+            self.env_saw_path() ||\n+            self.get_closures().len() != 0 {\n+            return Ok(None)\n+        }\n+\n+        // Only glibc 2.24+ posix_spawn() supports returning ENOENT directly.\n+        #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n+        {\n+            if let Some(version) = sys::os::glibc_version() {\n+                if version < (2, 24) {\n+                    return Ok(None)\n+                }\n+            } else {\n+                return Ok(None)\n+            }\n+        }\n+\n+        let mut p = Process { pid: 0, status: None };\n+\n+        struct PosixSpawnFileActions(libc::posix_spawn_file_actions_t);\n+\n+        impl Drop for PosixSpawnFileActions {\n+            fn drop(&mut self) {\n+                unsafe {\n+                    libc::posix_spawn_file_actions_destroy(&mut self.0);\n+                }\n+            }\n+        }\n+\n+        struct PosixSpawnattr(libc::posix_spawnattr_t);\n+\n+        impl Drop for PosixSpawnattr {\n+            fn drop(&mut self) {\n+                unsafe {\n+                    libc::posix_spawnattr_destroy(&mut self.0);\n+                }\n+            }\n+        }\n+\n+        unsafe {\n+            let mut file_actions = PosixSpawnFileActions(mem::uninitialized());\n+            let mut attrs = PosixSpawnattr(mem::uninitialized());\n+\n+            libc::posix_spawnattr_init(&mut attrs.0);\n+            libc::posix_spawn_file_actions_init(&mut file_actions.0);\n+\n+            if let Some(fd) = stdio.stdin.fd() {\n+                cvt(libc::posix_spawn_file_actions_adddup2(&mut file_actions.0,\n+                                                           fd,\n+                                                           libc::STDIN_FILENO))?;\n+            }\n+            if let Some(fd) = stdio.stdout.fd() {\n+                cvt(libc::posix_spawn_file_actions_adddup2(&mut file_actions.0,\n+                                                           fd,\n+                                                           libc::STDOUT_FILENO))?;\n+            }\n+            if let Some(fd) = stdio.stderr.fd() {\n+                cvt(libc::posix_spawn_file_actions_adddup2(&mut file_actions.0,\n+                                                           fd,\n+                                                           libc::STDERR_FILENO))?;\n+            }\n+\n+            let mut set: libc::sigset_t = mem::uninitialized();\n+            cvt(libc::sigemptyset(&mut set))?;\n+            cvt(libc::posix_spawnattr_setsigmask(&mut attrs.0,\n+                                                 &set))?;\n+            cvt(libc::sigaddset(&mut set, libc::SIGPIPE))?;\n+            cvt(libc::posix_spawnattr_setsigdefault(&mut attrs.0,\n+                                                    &set))?;\n+\n+            let flags = libc::POSIX_SPAWN_SETSIGDEF |\n+                libc::POSIX_SPAWN_SETSIGMASK;\n+            cvt(libc::posix_spawnattr_setflags(&mut attrs.0, flags as _))?;\n+\n+            let envp = envp.map(|c| c.as_ptr())\n+                .unwrap_or(*sys::os::environ() as *const _);\n+            let ret = libc::posix_spawnp(\n+                &mut p.pid,\n+                self.get_argv()[0],\n+                &file_actions.0,\n+                &attrs.0,\n+                self.get_argv().as_ptr() as *const _,\n+                envp as *const _,\n+            );\n+            if ret == 0 {\n+                Ok(Some(p))\n+            } else {\n+                Err(io::Error::from_raw_os_error(ret))\n+            }\n+        }\n+    }\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "d0c5951bd6c0a4d141d7174648b8fe9e1883169f", "filename": "src/libstd/sys_common/process.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3/src%2Flibstd%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3/src%2Flibstd%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fprocess.rs?ref=16eeb10bee51286d616f0d5de9f32b9b48aa4dc3", "patch": "@@ -47,13 +47,15 @@ impl EnvKey for DefaultEnvKey {}\n #[derive(Clone, Debug)]\n pub struct CommandEnv<K> {\n     clear: bool,\n+    saw_path: bool,\n     vars: BTreeMap<K, Option<OsString>>\n }\n \n impl<K: EnvKey> Default for CommandEnv<K> {\n     fn default() -> Self {\n         CommandEnv {\n             clear: false,\n+            saw_path: false,\n             vars: Default::default()\n         }\n     }\n@@ -108,9 +110,11 @@ impl<K: EnvKey> CommandEnv<K> {\n \n     // The following functions build up changes\n     pub fn set(&mut self, key: &OsStr, value: &OsStr) {\n+        self.maybe_saw_path(&key);\n         self.vars.insert(key.to_owned().into(), Some(value.to_owned()));\n     }\n     pub fn remove(&mut self, key: &OsStr) {\n+        self.maybe_saw_path(&key);\n         if self.clear {\n             self.vars.remove(key);\n         } else {\n@@ -121,4 +125,12 @@ impl<K: EnvKey> CommandEnv<K> {\n         self.clear = true;\n         self.vars.clear();\n     }\n+    pub fn have_changed_path(&self) -> bool {\n+        self.saw_path || self.clear\n+    }\n+    fn maybe_saw_path(&mut self, key: &OsStr) {\n+        if !self.saw_path && key == \"PATH\" {\n+            self.saw_path = true;\n+        }\n+    }\n }"}, {"sha": "9219cd625f30fc3b496d643f4e228d625c7d9a00", "filename": "src/test/run-pass/process-spawn-nonexistent.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3/src%2Ftest%2Frun-pass%2Fprocess-spawn-nonexistent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16eeb10bee51286d616f0d5de9f32b9b48aa4dc3/src%2Ftest%2Frun-pass%2Fprocess-spawn-nonexistent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-spawn-nonexistent.rs?ref=16eeb10bee51286d616f0d5de9f32b9b48aa4dc3", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-cloudabi no processes\n+// ignore-emscripten no processes\n+\n+use std::io::ErrorKind;\n+use std::process::Command;\n+\n+fn main() {\n+    assert_eq!(Command::new(\"nonexistent\")\n+                   .spawn()\n+                   .unwrap_err()\n+                   .kind(),\n+               ErrorKind::NotFound);\n+}"}]}