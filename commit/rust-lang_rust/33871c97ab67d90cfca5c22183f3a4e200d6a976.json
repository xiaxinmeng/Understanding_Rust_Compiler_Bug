{"sha": "33871c97ab67d90cfca5c22183f3a4e200d6a976", "node_id": "C_kwDOAAsO6NoAKDMzODcxYzk3YWI2N2Q5MGNmY2E1YzIyMTgzZjNhNGUyMDBkNmE5NzY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-28T17:36:49Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-28T17:36:49Z"}, "message": "Make sure that signatures aren't accidental refinements", "tree": {"sha": "2e31168c04fc8a20c2ef6a3b587fd65af55fbe69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e31168c04fc8a20c2ef6a3b587fd65af55fbe69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33871c97ab67d90cfca5c22183f3a4e200d6a976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33871c97ab67d90cfca5c22183f3a4e200d6a976", "html_url": "https://github.com/rust-lang/rust/commit/33871c97ab67d90cfca5c22183f3a4e200d6a976", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33871c97ab67d90cfca5c22183f3a4e200d6a976/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c42cb4ef0544fbfaa500216e53382d6b079c001", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c42cb4ef0544fbfaa500216e53382d6b079c001", "html_url": "https://github.com/rust-lang/rust/commit/1c42cb4ef0544fbfaa500216e53382d6b079c001"}], "stats": {"total": 108, "additions": 84, "deletions": 24}, "files": [{"sha": "2a3144585f2288bd2cf1bff82d92cb953036c771", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/33871c97ab67d90cfca5c22183f3a4e200d6a976/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33871c97ab67d90cfca5c22183f3a4e200d6a976/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=33871c97ab67d90cfca5c22183f3a4e200d6a976", "patch": "@@ -1543,11 +1543,17 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<(&'a K, &'a V)> {\n+    fn min(mut self) -> Option<(&'a K, &'a V)>\n+    where\n+        (&'a K, &'a V): Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<(&'a K, &'a V)> {\n+    fn max(mut self) -> Option<(&'a K, &'a V)>\n+    where\n+        (&'a K, &'a V): Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -1612,11 +1618,17 @@ impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<(&'a K, &'a mut V)> {\n+    fn min(mut self) -> Option<(&'a K, &'a mut V)>\n+    where\n+        (&'a K, &'a mut V): Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<(&'a K, &'a mut V)> {\n+    fn max(mut self) -> Option<(&'a K, &'a mut V)>\n+    where\n+        (&'a K, &'a mut V): Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -1779,11 +1791,17 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<&'a K> {\n+    fn min(mut self) -> Option<&'a K>\n+    where\n+        &'a K: Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<&'a K> {\n+    fn max(mut self) -> Option<&'a K>\n+    where\n+        &'a K: Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -2008,11 +2026,17 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<(&'a K, &'a V)> {\n+    fn min(mut self) -> Option<(&'a K, &'a V)>\n+    where\n+        (&'a K, &'a V): Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<(&'a K, &'a V)> {\n+    fn max(mut self) -> Option<(&'a K, &'a V)>\n+    where\n+        (&'a K, &'a V): Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -2081,11 +2105,17 @@ impl<K, V, A: Allocator + Clone> Iterator for IntoKeys<K, V, A> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<K> {\n+    fn min(mut self) -> Option<K>\n+    where\n+        K: Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<K> {\n+    fn max(mut self) -> Option<K>\n+    where\n+        K: Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -2204,11 +2234,17 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<(&'a K, &'a mut V)> {\n+    fn min(mut self) -> Option<(&'a K, &'a mut V)>\n+    where\n+        (&'a K, &'a mut V): Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<(&'a K, &'a mut V)> {\n+    fn max(mut self) -> Option<(&'a K, &'a mut V)>\n+    where\n+        (&'a K, &'a mut V): Ord,\n+    {\n         self.next_back()\n     }\n }"}, {"sha": "8d2b0e519e22958c29388175d2163014e8481b45", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/33871c97ab67d90cfca5c22183f3a4e200d6a976/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33871c97ab67d90cfca5c22183f3a4e200d6a976/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=33871c97ab67d90cfca5c22183f3a4e200d6a976", "patch": "@@ -1501,11 +1501,17 @@ impl<'a, T> Iterator for Iter<'a, T> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<&'a T> {\n+    fn min(mut self) -> Option<&'a T>\n+    where\n+        &'a T: Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<&'a T> {\n+    fn max(mut self) -> Option<&'a T>\n+    where\n+        &'a T: Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -1604,11 +1610,17 @@ impl<'a, T> Iterator for Range<'a, T> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<&'a T> {\n+    fn min(mut self) -> Option<&'a T>\n+    where\n+        &'a T: Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<&'a T> {\n+    fn max(mut self) -> Option<&'a T>\n+    where\n+        &'a T: Ord,\n+    {\n         self.next_back()\n     }\n }"}, {"sha": "896da37f94c02680f5a8d419fbdd439a994fd22a", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33871c97ab67d90cfca5c22183f3a4e200d6a976/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33871c97ab67d90cfca5c22183f3a4e200d6a976/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=33871c97ab67d90cfca5c22183f3a4e200d6a976", "patch": "@@ -2815,7 +2815,7 @@ impl<'a, T: 'a + Copy, A: Allocator> Extend<&'a T> for VecDeque<T, A> {\n     }\n \n     #[inline]\n-    fn extend_one(&mut self, &elem: &T) {\n+    fn extend_one(&mut self, &elem: &'a T) {\n         self.push_back(elem);\n     }\n "}, {"sha": "940558974e69b20e952a10864a0704080c45bdc7", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33871c97ab67d90cfca5c22183f3a4e200d6a976/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33871c97ab67d90cfca5c22183f3a4e200d6a976/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=33871c97ab67d90cfca5c22183f3a4e200d6a976", "patch": "@@ -248,7 +248,7 @@ where\n impl<'a, T, const N: usize> TryFrom<&'a [T]> for &'a [T; N] {\n     type Error = TryFromSliceError;\n \n-    fn try_from(slice: &[T]) -> Result<&[T; N], TryFromSliceError> {\n+    fn try_from(slice: &'a [T]) -> Result<&'a [T; N], TryFromSliceError> {\n         if slice.len() == N {\n             let ptr = slice.as_ptr() as *const [T; N];\n             // SAFETY: ok because we just checked that the length fits\n@@ -275,7 +275,7 @@ impl<'a, T, const N: usize> TryFrom<&'a [T]> for &'a [T; N] {\n impl<'a, T, const N: usize> TryFrom<&'a mut [T]> for &'a mut [T; N] {\n     type Error = TryFromSliceError;\n \n-    fn try_from(slice: &mut [T]) -> Result<&mut [T; N], TryFromSliceError> {\n+    fn try_from(slice: &'a mut [T]) -> Result<&'a mut [T; N], TryFromSliceError> {\n         if slice.len() == N {\n             let ptr = slice.as_mut_ptr() as *mut [T; N];\n             // SAFETY: ok because we just checked that the length fits"}, {"sha": "0171d89812feb05143a4a9960274f83d0713cadd", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/33871c97ab67d90cfca5c22183f3a4e200d6a976/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33871c97ab67d90cfca5c22183f3a4e200d6a976/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=33871c97ab67d90cfca5c22183f3a4e200d6a976", "patch": "@@ -732,12 +732,18 @@ impl<A: Step> Iterator for ops::Range<A> {\n     }\n \n     #[inline]\n-    fn min(mut self) -> Option<A> {\n+    fn min(mut self) -> Option<A>\n+    where\n+        A: Ord,\n+    {\n         self.next()\n     }\n \n     #[inline]\n-    fn max(mut self) -> Option<A> {\n+    fn max(mut self) -> Option<A>\n+    where\n+        A: Ord,\n+    {\n         self.next_back()\n     }\n \n@@ -1158,12 +1164,18 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     }\n \n     #[inline]\n-    fn min(mut self) -> Option<A> {\n+    fn min(mut self) -> Option<A>\n+    where\n+        A: Ord,\n+    {\n         self.next()\n     }\n \n     #[inline]\n-    fn max(mut self) -> Option<A> {\n+    fn max(mut self) -> Option<A>\n+    where\n+        A: Ord,\n+    {\n         self.next_back()\n     }\n "}, {"sha": "302bf148bd3ef4fe2acad8c659907d9cf42020df", "filename": "library/portable-simd/crates/core_simd/src/ops/deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33871c97ab67d90cfca5c22183f3a4e200d6a976/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33871c97ab67d90cfca5c22183f3a4e200d6a976/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fops%2Fderef.rs?ref=33871c97ab67d90cfca5c22183f3a4e200d6a976", "patch": "@@ -71,7 +71,7 @@ macro_rules! deref_ops {\n \n                 #[inline]\n                 #[must_use = \"operator returns a new vector without mutating the inputs\"]\n-                fn $call(self, rhs: &$simd) -> Self::Output {\n+                fn $call(self, rhs: &'rhs $simd) -> Self::Output {\n                     (*self).$call(*rhs)\n                 }\n             }"}]}