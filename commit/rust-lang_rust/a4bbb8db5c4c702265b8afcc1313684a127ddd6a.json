{"sha": "a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "node_id": "C_kwDOAAsO6NoAKGE0YmJiOGRiNWM0YzcwMjI2NWI4YWZjYzEzMTM2ODRhMTI3ZGRkNmE", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-06-27T14:32:47Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-09-13T15:40:59Z"}, "message": "use ty::Unevaluated<'tcx, ()> in type system", "tree": {"sha": "f1643aa200cd35761c02faf68189ec86276fb0d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1643aa200cd35761c02faf68189ec86276fb0d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "html_url": "https://github.com/rust-lang/rust/commit/a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7098c181f8447810fadb1776d3ffa3cdc93ce402", "url": "https://api.github.com/repos/rust-lang/rust/commits/7098c181f8447810fadb1776d3ffa3cdc93ce402", "html_url": "https://github.com/rust-lang/rust/commit/7098c181f8447810fadb1776d3ffa3cdc93ce402"}], "stats": {"total": 490, "additions": 301, "deletions": 189}, "files": [{"sha": "36bd77c5d93142437a86075c05c83361a96a3ff7", "filename": "Cargo.lock", "status": "modified", "additions": 46, "deletions": 38, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -288,7 +288,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo\"\n-version = \"0.66.0\"\n+version = \"0.65.0\"\n dependencies = [\n  \"anyhow\",\n  \"atty\",\n@@ -299,6 +299,7 @@ dependencies = [\n  \"cargo-util\",\n  \"clap\",\n  \"crates-io\",\n+ \"crossbeam-utils\",\n  \"curl\",\n  \"curl-sys\",\n  \"env_logger 0.9.0\",\n@@ -322,6 +323,7 @@ dependencies = [\n  \"libgit2-sys\",\n  \"log\",\n  \"memchr\",\n+ \"num_cpus\",\n  \"opener\",\n  \"openssl\",\n  \"os_info\",\n@@ -381,7 +383,6 @@ dependencies = [\n name = \"cargo-miri\"\n version = \"0.1.0\"\n dependencies = [\n- \"cargo_metadata 0.15.0\",\n  \"directories\",\n  \"rustc-workspace-hack\",\n  \"rustc_version\",\n@@ -430,7 +431,6 @@ dependencies = [\n  \"termcolor\",\n  \"toml_edit\",\n  \"url\",\n- \"winapi\",\n ]\n \n [[package]]\n@@ -1003,6 +1003,16 @@ dependencies = [\n  \"quote\",\n ]\n \n+[[package]]\n+name = \"ctor\"\n+version = \"0.1.22\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f877be4f7c9f246b183111634f75baa039715e3f46ce860677d3b19a69fb229c\"\n+dependencies = [\n+ \"quote\",\n+ \"syn\",\n+]\n+\n [[package]]\n name = \"curl\"\n version = \"0.4.43\"\n@@ -1560,9 +1570,9 @@ dependencies = [\n \n [[package]]\n name = \"git2\"\n-version = \"0.15.0\"\n+version = \"0.14.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2994bee4a3a6a51eb90c218523be382fd7ea09b16380b9312e9dbe955ff7c7d1\"\n+checksum = \"d0155506aab710a86160ddb504a480d2964d7ab5b9e62419be69e0032bc5931c\"\n dependencies = [\n  \"bitflags\",\n  \"libc\",\n@@ -1575,9 +1585,9 @@ dependencies = [\n \n [[package]]\n name = \"git2-curl\"\n-version = \"0.16.0\"\n+version = \"0.15.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ed817a00721e2f8037ba722e60358d4956dae9cca10315fc982f967907d3b0cd\"\n+checksum = \"1ee51709364c341fbb6fe2a385a290fb9196753bdde2fc45447d27cd31b11b13\"\n dependencies = [\n  \"curl\",\n  \"git2\",\n@@ -1934,30 +1944,11 @@ dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n-[[package]]\n-name = \"libffi\"\n-version = \"3.0.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1e454b3efb16fba3b17810ae5e41df02b649e564ab3c5a34b3b93ed07ad287e6\"\n-dependencies = [\n- \"libc\",\n- \"libffi-sys\",\n-]\n-\n-[[package]]\n-name = \"libffi-sys\"\n-version = \"2.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ab4106b7f09d7b87d021334d5618fac1dfcfb824d4c5fe111ff0074dfd242e15\"\n-dependencies = [\n- \"cc\",\n-]\n-\n [[package]]\n name = \"libgit2-sys\"\n-version = \"0.14.0+1.5.0\"\n+version = \"0.13.4+1.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"47a00859c70c8a4f7218e6d1cc32875c4b55f6799445b842b0d8ed5e4c3d959b\"\n+checksum = \"d0fa6563431ede25f5cc7f6d803c6afbc1c5d3ad3d4925d12c882bf2b526f5d1\"\n dependencies = [\n  \"cc\",\n  \"libc\",\n@@ -2247,8 +2238,6 @@ dependencies = [\n  \"getrandom 0.2.0\",\n  \"lazy_static\",\n  \"libc\",\n- \"libffi\",\n- \"libloading\",\n  \"log\",\n  \"measureme\",\n  \"rand 0.8.5\",\n@@ -2421,6 +2410,15 @@ version = \"6.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"8e22443d1643a904602595ba1cd8f7d896afe56d26712531c5ff73a15b2fbf64\"\n \n+[[package]]\n+name = \"output_vt100\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"628223faebab4e3e40667ee0b2336d34a5b960ff60ea743ddfdbcf7770bcfb66\"\n+dependencies = [\n+ \"winapi\",\n+]\n+\n [[package]]\n name = \"owo-colors\"\n version = \"3.4.0\"\n@@ -2662,6 +2660,18 @@ version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c\"\n \n+[[package]]\n+name = \"pretty_assertions\"\n+version = \"1.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a25e9bcb20aa780fd0bb16b72403a9064d6b3f22f026946029acb941a50af755\"\n+dependencies = [\n+ \"ctor\",\n+ \"diff\",\n+ \"output_vt100\",\n+ \"yansi\",\n+]\n+\n [[package]]\n name = \"pretty_env_logger\"\n version = \"0.4.0\"\n@@ -4540,9 +4550,9 @@ checksum = \"da73c8f77aebc0e40c300b93f0a5f1bece7a248a36eee287d4e095f35c7b7d6e\"\n \n [[package]]\n name = \"snapbox\"\n-version = \"0.3.3\"\n+version = \"0.2.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"44d199ccf8f606592df2d145db26f2aa45344e23c64b074cc5a4047f1d99b0f7\"\n+checksum = \"767a1d5da232b6959cd1bd5c9e8db8a7cce09c3038e89deedb49a549a2aefd93\"\n dependencies = [\n  \"concolor\",\n  \"content_inspector\",\n@@ -4558,9 +4568,9 @@ dependencies = [\n \n [[package]]\n name = \"snapbox-macros\"\n-version = \"0.3.0\"\n+version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8a253e6f894cfa440cba00600a249fa90869d8e0ec45ab274a456e043a0ce8f2\"\n+checksum = \"c01dea7e04cbb27ef4c86e9922184608185f7cd95c1763bc30d727cda4a5e930\"\n \n [[package]]\n name = \"socket2\"\n@@ -5039,16 +5049,14 @@ checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n \n [[package]]\n name = \"ui_test\"\n-version = \"0.3.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7d1f546a5883ae78da735bba529ec1116661e2f73582f23920d994dc97da3a22\"\n+version = \"0.1.0\"\n dependencies = [\n  \"cargo_metadata 0.15.0\",\n  \"color-eyre\",\n  \"colored\",\n  \"crossbeam\",\n- \"diff\",\n  \"lazy_static\",\n+ \"pretty_assertions\",\n  \"regex\",\n  \"rustc_version\",\n  \"serde\","}, {"sha": "ed9ede029a819d04a0e0e5462c527bc756c85d1d", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -354,11 +354,13 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n             let tcx = self.tcx();\n             let maybe_uneval = match constant.literal {\n                 ConstantKind::Ty(ct) => match ct.kind() {\n-                    ty::ConstKind::Unevaluated(uv) => Some(uv),\n+                    ty::ConstKind::Unevaluated(uv) => Some(uv.expand()),\n                     _ => None,\n                 },\n+                ConstantKind::Unevaluated(uv, _) => Some(uv),\n                 _ => None,\n             };\n+\n             if let Some(uv) = maybe_uneval {\n                 if let Some(promoted) = uv.promoted {\n                     let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,\n@@ -1813,11 +1815,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if let Operand::Constant(constant) = op {\n             let maybe_uneval = match constant.literal {\n                 ConstantKind::Ty(ct) => match ct.kind() {\n-                    ty::ConstKind::Unevaluated(uv) => Some(uv),\n+                    ty::ConstKind::Unevaluated(uv) => Some(uv.expand()),\n                     _ => None,\n                 },\n+                ConstantKind::Unevaluated(uv, _) => Some(uv),\n                 _ => None,\n             };\n+\n             if let Some(uv) = maybe_uneval {\n                 if uv.promoted.is_none() {\n                     let tcx = self.tcx();"}, {"sha": "7bf578b6a4e676ebc004328efc7f24f4c281adc6", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -124,26 +124,33 @@ pub(crate) fn codegen_constant<'tcx>(\n ) -> CValue<'tcx> {\n     let const_ = match fx.monomorphize(constant.literal) {\n         ConstantKind::Ty(ct) => ct,\n-        ConstantKind::Val(val, ty) => return codegen_const_value(fx, val, ty),\n-    };\n-    let const_val = match const_.kind() {\n-        ConstKind::Value(valtree) => fx.tcx.valtree_to_const_val((const_.ty(), valtree)),\n-        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+        ConstantKind::Unevaluated(mir::Unevaluated { def, substs, promoted })\n             if fx.tcx.is_static(def.did) =>\n         {\n             assert!(substs.is_empty());\n             assert!(promoted.is_none());\n \n             return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty())).to_cvalue(fx);\n         }\n-        ConstKind::Unevaluated(unevaluated) => {\n+        ConstantKind::Unevaluated(unevaluated) => {\n             match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n                 Ok(const_val) => const_val,\n                 Err(_) => {\n                     span_bug!(constant.span, \"erroneous constant not captured by required_consts\");\n                 }\n             }\n         }\n+        ConstantKind::Val(val, ty) => return codegen_const_value(fx, val, ty),\n+    };\n+    let const_val = match const_.kind() {\n+        ConstKind::Value(valtree) => fx.tcx.valtree_to_const_val((const_.ty(), valtree)),\n+        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+            if fx.tcx.is_static(def.did) =>\n+        {\n+            assert!(substs.is_empty());\n+            assert!(promoted.is_none());\n+            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty())).to_cvalue(fx);\n+        }\n         ConstKind::Param(_)\n         | ConstKind::Infer(_)\n         | ConstKind::Bound(_, _)"}, {"sha": "4c6ab457c494557eb80cbea49cb1745a467b9d6a", "filename": "compiler/rustc_codegen_ssa/src/mir/constant.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -25,26 +25,26 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<ConstValue<'tcx>, ErrorHandled> {\n         let ct = self.monomorphize(constant.literal);\n-        let ct = match ct {\n-            mir::ConstantKind::Ty(ct) => ct,\n+        let uv = match ct {\n+            mir::ConstantKind::Ty(ct) => match ct.kind() {\n+                ty::ConstKind::Unevaluated(uv) => uv.expand(),\n+                ty::ConstKind::Value(val) => {\n+                    return Ok(self.cx.tcx().valtree_to_const_val((ct.ty(), val)));\n+                }\n+                err => span_bug!(\n+                    constant.span,\n+                    \"encountered bad ConstKind after monomorphizing: {:?}\",\n+                    err\n+                ),\n+            },\n+            mir::ConstantKind::Unevaluated(uv, _) => uv,\n             mir::ConstantKind::Val(val, _) => return Ok(val),\n         };\n-        match ct.kind() {\n-            ty::ConstKind::Unevaluated(ct) => self\n-                .cx\n-                .tcx()\n-                .const_eval_resolve(ty::ParamEnv::reveal_all(), ct, None)\n-                .map_err(|err| {\n-                    self.cx.tcx().sess.span_err(constant.span, \"erroneous constant encountered\");\n-                    err\n-                }),\n-            ty::ConstKind::Value(val) => Ok(self.cx.tcx().valtree_to_const_val((ct.ty(), val))),\n-            err => span_bug!(\n-                constant.span,\n-                \"encountered bad ConstKind after monomorphizing: {:?}\",\n-                err\n-            ),\n-        }\n+\n+        self.cx.tcx().const_eval_resolve(ty::ParamEnv::reveal_all(), uv, None).map_err(|err| {\n+            self.cx.tcx().sess.span_err(constant.span, \"erroneous constant encountered\");\n+            err\n+        })\n     }\n \n     /// process constant containing SIMD shuffle indices"}, {"sha": "9784de1fffca97248293b2e634c683465ad19a4c", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -565,7 +565,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n             ty::ConstKind::Unevaluated(uv) => {\n                 let instance = self.resolve(uv.def, uv.substs)?;\n-                Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())\n+                Ok(self.eval_to_allocation(GlobalId { instance, promoted: None })?.into())\n             }\n             ty::ConstKind::Bound(..) | ty::ConstKind::Infer(..) => {\n                 span_bug!(self.cur_span(), \"const_to_op: Unexpected ConstKind {:?}\", c)\n@@ -578,6 +578,16 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n+    /// Tries to evaluate an unevaluated constant from the MIR (and not the type-system).\n+    #[inline]\n+    pub fn uneval_to_op(\n+        &self,\n+        uneval: &ty::Unevaluated<'tcx>,\n+    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        let instance = self.resolve(uneval.def, uneval.substs)?;\n+        Ok(self.eval_to_allocation(GlobalId { instance, promoted: None })?.into())\n+    }\n+\n     pub fn mir_const_to_op(\n         &self,\n         val: &mir::ConstantKind<'tcx>,\n@@ -586,6 +596,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match val {\n             mir::ConstantKind::Ty(ct) => self.const_to_op(*ct, layout),\n             mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, *ty, layout),\n+            mir::ConstantKind::Unevaluated(uv, _) => self.uneval_to_op(uv),\n         }\n     }\n "}, {"sha": "fce799d47ec5989caa47d836c14889beda8c0aeb", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -347,14 +347,15 @@ where\n \n     // Check the qualifs of the value of `const` items.\n     if let Some(ct) = constant.literal.const_for_ty() {\n-        if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) = ct.kind()\n+        if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted: _ }) =\n+            ct.kind()\n         {\n             // Use qualifs of the type for the promoted. Promoteds in MIR body should be possible\n             // only for `NeedsNonConstDrop` with precise drop checking. This is the only const\n             // check performed after the promotion. Verify that with an assertion.\n-            assert!(promoted.is_none() || Q::ALLOW_PROMOTED);\n+\n             // Don't peek inside trait associated constants.\n-            if promoted.is_none() && cx.tcx.trait_of_item(def.did).is_none() {\n+            if cx.tcx.trait_of_item(def.did).is_none() {\n                 let qualifs = if let Some((did, param_did)) = def.as_const_arg() {\n                     cx.tcx.at(constant.span).mir_const_qualif_const_arg((did, param_did))\n                 } else {"}, {"sha": "f7a7cc88a5257c21e30e3ca7b2b798222a3cc31c", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -840,21 +840,15 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 promoted.span = span;\n                 promoted.local_decls[RETURN_PLACE] = LocalDecl::new(ty, span);\n                 let substs = tcx.erase_regions(InternalSubsts::identity_for_item(tcx, def.did));\n-                let _const = tcx.mk_const(ty::ConstS {\n-                    ty,\n-                    kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                        def,\n-                        substs,\n-                        promoted: Some(promoted_id),\n-                    }),\n-                });\n+                let uneval = ty::Unevaluated { def, substs, promoted: Some(promoted_id) };\n \n                 Operand::Constant(Box::new(Constant {\n                     span,\n                     user_ty: None,\n-                    literal: ConstantKind::from_const(_const, tcx),\n+                    literal: ConstantKind::Unevaluated(uneval, ty),\n                 }))\n             };\n+\n             let blocks = self.source.basic_blocks.as_mut();\n             let local_decls = &mut self.source.local_decls;\n             let loc = candidate.location;"}, {"sha": "c406df9e4111606eba1f8d84617b5ee0442bedd5", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -743,7 +743,8 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 }\n             }\n             ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n-                assert_eq!(promoted, None);\n+                assert_eq!(promoted, ());\n+\n                 let substs = self.relate_with_variance(\n                     ty::Variance::Invariant,\n                     ty::VarianceDiagInfo::default(),\n@@ -964,13 +965,15 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                 }\n             }\n             ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n-                assert_eq!(promoted, None);\n+                assert_eq!(promoted, ());\n+\n                 let substs = self.relate_with_variance(\n                     ty::Variance::Invariant,\n                     ty::VarianceDiagInfo::default(),\n                     substs,\n                     substs,\n                 )?;\n+\n                 Ok(self.tcx().mk_const(ty::ConstS {\n                     ty: c.ty(),\n                     kind: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),"}, {"sha": "7bd8f423a01a9a71b6e43ac08aa6511f4cad42e0", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -1673,7 +1673,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn try_const_eval_resolve(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        unevaluated: ty::Unevaluated<'tcx>,\n+        unevaluated: ty::Unevaluated<'tcx, ()>,\n         ty: Ty<'tcx>,\n         span: Option<Span>,\n     ) -> Result<ty::Const<'tcx>, ErrorHandled> {\n@@ -1708,7 +1708,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn const_eval_resolve(\n         &self,\n         mut param_env: ty::ParamEnv<'tcx>,\n-        unevaluated: ty::Unevaluated<'tcx>,\n+        unevaluated: ty::Unevaluated<'tcx, ()>,\n         span: Option<Span>,\n     ) -> EvalToValTreeResult<'tcx> {\n         let mut substs = self.resolve_vars_if_possible(unevaluated.substs);\n@@ -1739,11 +1739,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         debug!(?param_env_erased);\n         debug!(?substs_erased);\n \n-        let unevaluated = ty::Unevaluated {\n-            def: unevaluated.def,\n-            substs: substs_erased,\n-            promoted: unevaluated.promoted,\n-        };\n+        let unevaluated =\n+            ty::Unevaluated { def: unevaluated.def, substs: substs_erased, promoted: () };\n \n         // The return value is the evaluated value which doesn't contain any reference to inference\n         // variables, thus we don't need to substitute back the original values."}, {"sha": "4207988d700d9a6c66d3a8a6c26bb32141ccc238", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -63,7 +63,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn const_eval_resolve_for_typeck(\n         self,\n         param_env: ty::ParamEnv<'tcx>,\n-        ct: ty::Unevaluated<'tcx>,\n+        ct: ty::Unevaluated<'tcx, ()>,\n         span: Option<Span>,\n     ) -> EvalToValTreeResult<'tcx> {\n         // Cannot resolve `Unevaluated` constants that contain inference\n@@ -78,7 +78,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         match ty::Instance::resolve_opt_const_arg(self, param_env, ct.def, ct.substs) {\n             Ok(Some(instance)) => {\n-                let cid = GlobalId { instance, promoted: ct.promoted };\n+                let cid = GlobalId { instance, promoted: None };\n                 self.const_eval_global_id_for_typeck(param_env, cid, span)\n             }\n             Ok(None) => Err(ErrorHandled::TooGeneric),"}, {"sha": "7c9b1e492d922934588037c487798d16cc945382", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 57, "deletions": 13, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -3,7 +3,7 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/mir/index.html\n \n use crate::mir::interpret::{\n-    AllocRange, ConstAllocation, ConstValue, GlobalAlloc, LitToConstInput, Scalar,\n+    AllocRange, ConstAllocation, ConstValue, ErrorHandled, GlobalAlloc, LitToConstInput, Scalar,\n };\n use crate::mir::visit::MirVisitable;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n@@ -2061,6 +2061,10 @@ pub struct Constant<'tcx> {\n pub enum ConstantKind<'tcx> {\n     /// This constant came from the type system\n     Ty(ty::Const<'tcx>),\n+\n+    /// An unevaluated constant that cannot go back into the type system.\n+    Unevaluated(ty::Unevaluated<'tcx, Option<Promoted>>, Ty<'tcx>),\n+\n     /// This constant cannot go back into the type system, as it represents\n     /// something the type system cannot handle (e.g. pointers).\n     Val(interpret::ConstValue<'tcx>, Ty<'tcx>),\n@@ -2091,15 +2095,15 @@ impl<'tcx> ConstantKind<'tcx> {\n     pub fn const_for_ty(&self) -> Option<ty::Const<'tcx>> {\n         match self {\n             ConstantKind::Ty(c) => Some(*c),\n-            ConstantKind::Val(..) => None,\n+            ConstantKind::Val(..) | ConstantKind::Unevaluated(..) => None,\n         }\n     }\n \n     #[inline(always)]\n     pub fn ty(&self) -> Ty<'tcx> {\n         match self {\n             ConstantKind::Ty(c) => c.ty(),\n-            ConstantKind::Val(_, ty) => *ty,\n+            ConstantKind::Val(_, ty) | ConstantKind::Unevaluated(_, ty) => *ty,\n         }\n     }\n \n@@ -2111,6 +2115,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 _ => None,\n             },\n             ConstantKind::Val(val, _) => Some(val),\n+            ConstantKind::Unevaluated(..) => None,\n         }\n     }\n \n@@ -2125,6 +2130,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 _ => None,\n             },\n             ConstantKind::Val(val, _) => val.try_to_scalar(),\n+            ConstantKind::Unevaluated(..) => None,\n         }\n     }\n \n@@ -2157,6 +2163,14 @@ impl<'tcx> ConstantKind<'tcx> {\n                 }\n             }\n             Self::Val(_, _) => self,\n+            Self::Unevaluated(uneval, ty) => {\n+                // FIXME: We might want to have a `try_eval`-like function on `Unevaluated`\n+                match tcx.const_eval_resolve(param_env, uneval, None) {\n+                    Ok(val) => Self::Val(val, ty),\n+                    Err(ErrorHandled::TooGeneric | ErrorHandled::Linted) => self,\n+                    Err(_) => Self::Ty(tcx.const_error(ty)),\n+                }\n+            }\n         }\n     }\n \n@@ -2182,6 +2196,18 @@ impl<'tcx> ConstantKind<'tcx> {\n                     tcx.layout_of(param_env.with_reveal_all_normalized(tcx).and(ty)).ok()?.size;\n                 val.try_to_bits(size)\n             }\n+            Self::Unevaluated(uneval, ty) => {\n+                match tcx.const_eval_resolve(param_env, *uneval, None) {\n+                    Ok(val) => {\n+                        let size = tcx\n+                            .layout_of(param_env.with_reveal_all_normalized(tcx).and(*ty))\n+                            .ok()?\n+                            .size;\n+                        val.try_to_bits(size)\n+                    }\n+                    Err(_) => None,\n+                }\n+            }\n         }\n     }\n \n@@ -2190,6 +2216,12 @@ impl<'tcx> ConstantKind<'tcx> {\n         match self {\n             Self::Ty(ct) => ct.try_eval_bool(tcx, param_env),\n             Self::Val(val, _) => val.try_to_bool(),\n+            Self::Unevaluated(uneval, _) => {\n+                match tcx.const_eval_resolve(param_env, *uneval, None) {\n+                    Ok(val) => val.try_to_bool(),\n+                    Err(_) => None,\n+                }\n+            }\n         }\n     }\n \n@@ -2198,6 +2230,12 @@ impl<'tcx> ConstantKind<'tcx> {\n         match self {\n             Self::Ty(ct) => ct.try_eval_usize(tcx, param_env),\n             Self::Val(val, _) => val.try_to_machine_usize(tcx),\n+            Self::Unevaluated(uneval, _) => {\n+                match tcx.const_eval_resolve(param_env, *uneval, None) {\n+                    Ok(val) => val.try_to_machine_usize(tcx),\n+                    Err(_) => None,\n+                }\n+            }\n         }\n     }\n \n@@ -2293,15 +2331,16 @@ impl<'tcx> ConstantKind<'tcx> {\n         let substs =\n             ty::InlineConstSubsts::new(tcx, ty::InlineConstSubstsParts { parent_substs, ty })\n                 .substs;\n-        debug_assert!(!substs.has_free_regions());\n-        Self::Ty(tcx.mk_const(ty::ConstS {\n-            kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                def: ty::WithOptConstParam::unknown(def_id).to_global(),\n-                substs,\n-                promoted: None,\n-            }),\n-            ty,\n-        }))\n+\n+        let uneval = ty::Unevaluated {\n+            def: ty::WithOptConstParam::unknown(def_id).to_global(),\n+            substs,\n+            promoted: None,\n+        };\n+\n+        debug_assert!(!uneval.has_free_regions());\n+\n+        Self::Unevaluated(uneval, ty)\n     }\n \n     #[instrument(skip(tcx), level = \"debug\", ret)]\n@@ -2398,7 +2437,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                     kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                         def: def.to_global(),\n                         substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n-                        promoted: None,\n+                        promoted: (),\n                     }),\n                     ty,\n                 }))\n@@ -2412,6 +2451,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 let const_val = tcx.valtree_to_const_val((c.ty(), valtree));\n                 Self::Val(const_val, c.ty())\n             }\n+            ty::ConstKind::Unevaluated(uv) => Self::Unevaluated(uv.expand(), c.ty()),\n             _ => Self::Ty(c),\n         }\n     }\n@@ -2612,6 +2652,10 @@ impl<'tcx> Display for ConstantKind<'tcx> {\n         match *self {\n             ConstantKind::Ty(c) => pretty_print_const(c, fmt, true),\n             ConstantKind::Val(val, ty) => pretty_print_const_value(val, ty, fmt, true),\n+            ConstantKind::Unevaluated(..) => {\n+                fmt.write_str(\"_\")?;\n+                Ok(())\n+            }\n         }\n     }\n }"}, {"sha": "3c559e2fe20f9d4adcbeedc553fa1fea54732875", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -464,19 +464,29 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n             let val = match literal {\n                 ConstantKind::Ty(ct) => match ct.kind() {\n                     ty::ConstKind::Param(p) => format!(\"Param({})\", p),\n-                    ty::ConstKind::Unevaluated(uv) => format!(\n-                        \"Unevaluated({}, {:?}, {:?})\",\n-                        self.tcx.def_path_str(uv.def.did),\n-                        uv.substs,\n-                        uv.promoted,\n-                    ),\n+                    ty::ConstKind::Unevaluated(uv) => {\n+                        format!(\n+                            \"Unevaluated({}, {:?}, {:?})\",\n+                            self.tcx.def_path_str(uv.def.did),\n+                            uv.substs,\n+                            uv.promoted,\n+                        )\n+                    }\n                     ty::ConstKind::Value(val) => format!(\"Value({})\", fmt_valtree(&val)),\n                     ty::ConstKind::Error(_) => \"Error\".to_string(),\n                     // These variants shouldn't exist in the MIR.\n                     ty::ConstKind::Placeholder(_)\n                     | ty::ConstKind::Infer(_)\n                     | ty::ConstKind::Bound(..) => bug!(\"unexpected MIR constant: {:?}\", literal),\n                 },\n+                ConstantKind::Unevaluated(uv, _) => {\n+                    format!(\n+                        \"Unevaluated({}, {:?}, {:?})\",\n+                        self.tcx.def_path_str(uv.def.did),\n+                        uv.substs,\n+                        uv.promoted,\n+                    )\n+                }\n                 // To keep the diffs small, we render this like we render `ty::Const::Value`.\n                 //\n                 // This changes once `ty::Const::Value` is represented using valtrees.\n@@ -702,6 +712,7 @@ pub fn write_allocations<'tcx>(\n                 ConstantKind::Val(val, _) => {\n                     self.0.extend(alloc_ids_from_const_val(val));\n                 }\n+                ConstantKind::Unevaluated(..) => {}\n             }\n         }\n     }"}, {"sha": "e5aadac8739f1025193f309fadece8d601f86bd3", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -235,6 +235,9 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ConstantKind<'tcx> {\n         match self {\n             ConstantKind::Ty(c) => Ok(ConstantKind::Ty(c.try_fold_with(folder)?)),\n             ConstantKind::Val(v, t) => Ok(ConstantKind::Val(v, t.try_fold_with(folder)?)),\n+            ConstantKind::Unevaluated(uv, t) => {\n+                Ok(ConstantKind::Unevaluated(uv, t.try_fold_with(folder)?))\n+            }\n         }\n     }\n }"}, {"sha": "6dde8c8b65dc35cc06d65f092cf2414d95e099a8", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -879,6 +879,7 @@ macro_rules! make_mir_visitor {\n                 match literal {\n                     ConstantKind::Ty(ct) => self.visit_const($(& $mutability)? *ct, location),\n                     ConstantKind::Val(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),\n+                    ConstantKind::Unevaluated(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),\n                 }\n             }\n "}, {"sha": "8f79b4705ad60442499b6940bd497d63650d69fb", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> AbstractConst<'tcx> {\n         ct: ty::Const<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorGuaranteed> {\n         match ct.kind() {\n-            ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv.shrink()),\n+            ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv),\n             ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => Err(reported),\n             _ => Ok(None),\n         }"}, {"sha": "339ff4d35930d91817b73be26f3b3517a534963f", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -41,7 +41,7 @@ pub struct ConstS<'tcx> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(ConstS<'_>, 48);\n+static_assert_size!(ConstS<'_>, 40);\n \n impl<'tcx> Const<'tcx> {\n     #[inline]\n@@ -84,7 +84,7 @@ impl<'tcx> Const<'tcx> {\n                 kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                     def: def.to_global(),\n                     substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n-                    promoted: None,\n+                    promoted: (),\n                 }),\n                 ty,\n             }),\n@@ -181,7 +181,7 @@ impl<'tcx> Const<'tcx> {\n                     kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                         def: ty::WithOptConstParam::unknown(def_id).to_global(),\n                         substs,\n-                        promoted: None,\n+                        promoted: (),\n                     }),\n                     ty,\n                 })"}, {"sha": "3c21b89c97dd6c616b4bf006165276351872c967", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -11,6 +11,7 @@ use rustc_macros::HashStable;\n use rustc_target::abi::Size;\n \n use super::ScalarInt;\n+\n /// An unevaluated, potentially generic, constant.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Lift)]\n #[derive(Hash, HashStable)]\n@@ -66,7 +67,7 @@ pub enum ConstKind<'tcx> {\n \n     /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other\n     /// variants when the code is monomorphic enough for that.\n-    Unevaluated(Unevaluated<'tcx>),\n+    Unevaluated(Unevaluated<'tcx, ()>),\n \n     /// Used to hold computed value.\n     Value(ty::ValTree<'tcx>),\n@@ -77,7 +78,7 @@ pub enum ConstKind<'tcx> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(ConstKind<'_>, 40);\n+static_assert_size!(ConstKind<'_>, 32);\n \n impl<'tcx> ConstKind<'tcx> {\n     #[inline]\n@@ -184,6 +185,8 @@ impl<'tcx> ConstKind<'tcx> {\n         if let ConstKind::Unevaluated(unevaluated) = self {\n             use crate::mir::interpret::ErrorHandled;\n \n+            assert_eq!(unevaluated.promoted, ());\n+\n             // HACK(eddyb) this erases lifetimes even though `const_eval_resolve`\n             // also does later, but we want to do it before checking for\n             // inference variables.\n@@ -204,7 +207,7 @@ impl<'tcx> ConstKind<'tcx> {\n                 tcx.param_env(unevaluated.def.did).and(ty::Unevaluated {\n                     def: unevaluated.def,\n                     substs: InternalSubsts::identity_for_item(tcx, unevaluated.def.did),\n-                    promoted: unevaluated.promoted,\n+                    promoted: (),\n                 })\n             } else {\n                 param_env_and\n@@ -228,7 +231,7 @@ impl<'tcx> ConstKind<'tcx> {\n                     }\n                 }\n                 EvalMode::Mir => {\n-                    match tcx.const_eval_resolve(param_env, unevaluated, None) {\n+                    match tcx.const_eval_resolve(param_env, unevaluated.expand(), None) {\n                         // NOTE(eddyb) `val` contains no lifetimes/types/consts,\n                         // and we use the original type, so nothing from `substs`\n                         // (which may be identity substs, see above),"}, {"sha": "afe97e5f92f91adc38b85b3550453ce2cca4fc7e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -1197,15 +1197,9 @@ pub trait PrettyPrinter<'tcx>:\n         }\n \n         match ct.kind() {\n-            ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                def,\n-                substs,\n-                promoted: Some(promoted),\n-            }) => {\n-                p!(print_value_path(def.did, substs));\n-                p!(write(\"::{:?}\", promoted));\n-            }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted: None }) => {\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n+                assert_eq!(promoted, ());\n+\n                 match self.tcx().def_kind(def.did) {\n                     DefKind::Static(..) | DefKind::Const | DefKind::AssocConst => {\n                         p!(print_value_path(def.did, substs))"}, {"sha": "488d9242b114c1ea1f372c9f5fa0a22ce685dc82", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -613,7 +613,7 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n             if tcx.features().generic_const_exprs =>\n         {\n-            tcx.try_unify_abstract_consts(relation.param_env().and((au.shrink(), bu.shrink())))\n+            tcx.try_unify_abstract_consts(relation.param_env().and((au, bu)))\n         }\n \n         // While this is slightly incorrect, it shouldn't matter for `min_const_generics`\n@@ -622,6 +622,8 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n             if au.def == bu.def && au.promoted == bu.promoted =>\n         {\n+            assert_eq!(au.promoted, ());\n+\n             let substs = relation.relate_with_variance(\n                 ty::Variance::Invariant,\n                 ty::VarianceDiagInfo::default(),\n@@ -632,7 +634,7 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n                 kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                     def: au.def,\n                     substs,\n-                    promoted: au.promoted,\n+                    promoted: (),\n                 }),\n                 ty: a.ty(),\n             }));"}, {"sha": "ff80f732b40e7052adab653d117c40cd7a3446eb", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -565,23 +565,19 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         let value = value.eval(self.tcx, self.param_env);\n \n         match value {\n-            mir::ConstantKind::Ty(c) => {\n-                match c.kind() {\n-                    ConstKind::Param(_) => {\n-                        self.errors.push(PatternError::ConstParamInPattern(span));\n-                        return PatKind::Wild;\n-                    }\n-                    ConstKind::Unevaluated(_) => {\n-                        // If we land here it means the const can't be evaluated because it's `TooGeneric`.\n-                        self.tcx\n-                            .sess\n-                            .span_err(span, \"constant pattern depends on a generic parameter\");\n-                        return PatKind::Wild;\n-                    }\n-                    _ => bug!(\"Expected either ConstKind::Param or ConstKind::Unevaluated\"),\n+            mir::ConstantKind::Ty(c) => match c.kind() {\n+                ConstKind::Param(_) => {\n+                    self.errors.push(PatternError::ConstParamInPattern(span));\n+                    return PatKind::Wild;\n                 }\n-            }\n+                _ => bug!(\"Expected ConstKind::Param\"),\n+            },\n             mir::ConstantKind::Val(_, _) => self.const_to_pat(value, id, span, false).kind,\n+            mir::ConstantKind::Unevaluated(..) => {\n+                // If we land here it means the const can't be evaluated because it's `TooGeneric`.\n+                self.tcx.sess.span_err(span, \"constant pattern depends on a generic parameter\");\n+                return PatKind::Wild;\n+            }\n         }\n     }\n "}, {"sha": "cd94af2d3c69dcaa969f65f5dd58b8ce702b4483", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -22,9 +22,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n-use rustc_middle::ty::{\n-    self, ConstInt, ConstKind, Instance, ParamEnv, ScalarInt, Ty, TyCtxt, TypeVisitable,\n-};\n+use rustc_middle::ty::{self, ConstInt, Instance, ParamEnv, ScalarInt, Ty, TyCtxt, TypeVisitable};\n use rustc_session::lint;\n use rustc_span::Span;\n use rustc_target::abi::{HasDataLayout, Size, TargetDataLayout};\n@@ -301,18 +299,17 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 let err = ConstEvalErr::new(&self.ecx, error, Some(c.span));\n                 if let Some(lint_root) = self.lint_root(source_info) {\n                     let lint_only = match c.literal {\n-                        ConstantKind::Ty(ct) => match ct.kind() {\n+                        ConstantKind::Ty(_) => c.literal.needs_subst(),\n+                        ConstantKind::Unevaluated(\n+                            ty::Unevaluated { def: _, substs: _, promoted: Some(_) },\n+                            _,\n+                        ) => {\n                             // Promoteds must lint and not error as the user didn't ask for them\n-                            ConstKind::Unevaluated(ty::Unevaluated {\n-                                def: _,\n-                                substs: _,\n-                                promoted: Some(_),\n-                            }) => true,\n-                            // Out of backwards compatibility we cannot report hard errors in unused\n-                            // generic functions using associated constants of the generic parameters.\n-                            _ => c.literal.needs_subst(),\n-                        },\n-                        ConstantKind::Val(_, ty) => ty.needs_subst(),\n+                            true\n+                        }\n+                        ConstantKind::Unevaluated(_, ty) | ConstantKind::Val(_, ty) => {\n+                            ty.needs_subst()\n+                        }\n                     };\n                     if lint_only {\n                         // Out of backwards compatibility we cannot report hard errors in unused"}, {"sha": "2ad9f582fbef1903b1550e88c4c7ce4239e1d900", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs}\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n use rustc_span::def_id::DefId;\n use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n@@ -606,7 +606,9 @@ impl<'tcx> Inliner<'tcx> {\n                 caller_body.required_consts.extend(\n                     callee_body.required_consts.iter().copied().filter(|&ct| {\n                         match ct.literal.const_for_ty() {\n-                            Some(ct) => matches!(ct.kind(), ConstKind::Unevaluated(_)),\n+                            Some(_) => {\n+                                bug!(\"should never encounter ty::Unevaluated in required_consts\")\n+                            }\n                             None => true,\n                         }\n                     }),"}, {"sha": "022a7a95fa1d220608f77523a185ec0dabf2bb96", "filename": "compiler/rustc_mir_transform/src/required_consts.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -1,5 +1,5 @@\n use rustc_middle::mir::visit::Visitor;\n-use rustc_middle::mir::{Constant, Location};\n+use rustc_middle::mir::{Constant, ConstantKind, Location};\n use rustc_middle::ty::ConstKind;\n \n pub struct RequiredConstsVisitor<'a, 'tcx> {\n@@ -15,8 +15,18 @@ impl<'a, 'tcx> RequiredConstsVisitor<'a, 'tcx> {\n impl<'tcx> Visitor<'tcx> for RequiredConstsVisitor<'_, 'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, _: Location) {\n         let literal = constant.literal;\n-        if let Some(ct) = literal.const_for_ty() && let ConstKind::Unevaluated(_) = ct.kind() {\n-            self.required_consts.push(*constant);\n+        match literal {\n+            ConstantKind::Ty(c) => match c.kind() {\n+                ConstKind::Unevaluated(uv) => {\n+                    let literal = ConstantKind::Unevaluated(uv.expand(), c.ty());\n+                    let new_constant =\n+                        Constant { span: constant.span, user_ty: constant.user_ty, literal };\n+                    self.required_consts.push(new_constant);\n+                }\n+                _ => {}\n+            },\n+            ConstantKind::Unevaluated(..) => self.required_consts.push(*constant),\n+            ConstantKind::Val(..) => {}\n         }\n     }\n }"}, {"sha": "72fb566aff737be2b3b41e07b60e46956e9419f8", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -767,7 +767,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 ty::ConstKind::Unevaluated(ct) => {\n                     debug!(?ct);\n                     let param_env = ty::ParamEnv::reveal_all();\n-                    match self.tcx.const_eval_resolve(param_env, ct, None) {\n+                    match self.tcx.const_eval_resolve(param_env, ct.expand(), None) {\n                         // The `monomorphize` call should have evaluated that constant already.\n                         Ok(val) => val,\n                         Err(ErrorHandled::Reported(_) | ErrorHandled::Linted) => return,\n@@ -780,6 +780,19 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 }\n                 _ => return,\n             },\n+            mir::ConstantKind::Unevaluated(uv, _) => {\n+                let param_env = ty::ParamEnv::reveal_all();\n+                match self.tcx.const_eval_resolve(param_env, uv, None) {\n+                    // The `monomorphize` call should have evaluated that constant already.\n+                    Ok(val) => val,\n+                    Err(ErrorHandled::Reported(_) | ErrorHandled::Linted) => return,\n+                    Err(ErrorHandled::TooGeneric) => span_bug!(\n+                        self.body.source_info(location).span,\n+                        \"collection encountered polymorphic constant: {:?}\",\n+                        literal\n+                    ),\n+                }\n+            }\n         };\n         collect_const_value(self.tcx, val, self.output);\n         self.visit_ty(literal.ty(), TyContext::Location(location));\n@@ -798,7 +811,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 collect_const_value(self.tcx, const_val, self.output)\n             }\n             ty::ConstKind::Unevaluated(unevaluated) => {\n-                match self.tcx.const_eval_resolve(param_env, unevaluated, None) {\n+                match self.tcx.const_eval_resolve(param_env, unevaluated.expand(), None) {\n                     // The `monomorphize` call should have evaluated that constant already.\n                     Ok(val) => span_bug!(\n                         self.body.source_info(location).span,"}, {"sha": "d083a3e00b660b5a73a4a88a1514e8522473174d", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::{def::DefKind, def_id::DefId, ConstContext};\n use rustc_index::bit_set::FiniteBitSet;\n use rustc_middle::mir::{\n     visit::{TyContext, Visitor},\n-    Local, LocalDecl, Location,\n+    ConstantKind, Local, LocalDecl, Location,\n };\n use rustc_middle::ty::{\n     self,\n@@ -292,7 +292,29 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 self.unused_parameters.clear(param.index);\n                 ControlFlow::CONTINUE\n             }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted: Some(p)})\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+                if matches!(\n+                    self.tcx.def_kind(def.did),\n+                    DefKind::AnonConst | DefKind::InlineConst\n+                ) =>\n+            {\n+                assert_eq!(promoted, ());\n+\n+                self.visit_child_body(def.did, substs);\n+                ControlFlow::CONTINUE\n+            }\n+            _ => c.super_visit_with(self),\n+        }\n+    }\n+\n+    fn visit_mir_const(&mut self, constant: ConstantKind<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if !constant.has_param_types_or_consts() {\n+            return ControlFlow::CONTINUE;\n+        }\n+\n+        match constant {\n+            ConstantKind::Ty(_) => constant.super_visit_with(self),\n+            ConstantKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted: Some(p) }, _)\n                 // Avoid considering `T` unused when constants are of the form:\n                 //   `<Self as Foo<T>>::foo::promoted[p]`\n                 if self.def_id == def.did && !self.tcx.generics_of(def.did).has_self =>\n@@ -303,13 +325,9 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 self.visit_body(&promoted[p]);\n                 ControlFlow::CONTINUE\n             }\n-            ty::ConstKind::Unevaluated(uv)\n-                if matches!(self.tcx.def_kind(uv.def.did), DefKind::AnonConst | DefKind::InlineConst) =>\n-            {\n-                self.visit_child_body(uv.def.did, uv.substs);\n-                ControlFlow::CONTINUE\n+            ConstantKind::Val(..) | ConstantKind::Unevaluated(..) => {\n+                constant.super_visit_with(self)\n             }\n-            _ => c.super_visit_with(self),\n         }\n     }\n "}, {"sha": "5a213987e87b30e2d6fc40d0c79b7df15264c1fc", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -183,7 +183,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                 FailureKind::Concrete => {}\n             }\n         }\n-        let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n+        let concrete = infcx.const_eval_resolve(param_env, uv, Some(span));\n         match concrete {\n             Err(ErrorHandled::TooGeneric) => {\n                 Err(NotConstEvaluatable::Error(infcx.tcx.sess.delay_span_bug(\n@@ -210,7 +210,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n         // and hopefully soon change this to an error.\n         //\n         // See #74595 for more details about this.\n-        let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n+        let concrete = infcx.const_eval_resolve(param_env, uv, Some(span));\n \n         match concrete {\n           // If we're evaluating a foreign constant, under a nightly compiler without generic"}, {"sha": "6bb6aef1d05c1f05398ebf45931148b53885ce5f", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -509,11 +509,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n                             (c1.kind(), c2.kind())\n                         {\n-                            if infcx.try_unify_abstract_consts(\n-                                a.shrink(),\n-                                b.shrink(),\n-                                obligation.param_env,\n-                            ) {\n+                            if infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n                                 return ProcessResult::Changed(vec![]);\n                             }\n                         }"}, {"sha": "17afd325f03a219732fbb8aed59f0d8877bf8cad", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -366,7 +366,9 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                     _ => mir::ConstantKind::Ty(const_folded),\n                 }\n             }\n-            mir::ConstantKind::Val(_, _) => constant.try_super_fold_with(self)?,\n+            mir::ConstantKind::Val(_, _) | mir::ConstantKind::Unevaluated(..) => {\n+                constant.try_super_fold_with(self)?\n+            }\n         })\n     }\n "}, {"sha": "c8896027ba111b5eaf663021b8318e40e86dcbd4", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -699,11 +699,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n                             (c1.kind(), c2.kind())\n                         {\n-                            if self.infcx.try_unify_abstract_consts(\n-                                a.shrink(),\n-                                b.shrink(),\n-                                obligation.param_env,\n-                            ) {\n+                            if self.infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n                                 return Ok(EvaluatedToOk);\n                             }\n                         }"}, {"sha": "ff6b5c733868b4b0d711a4a84751417990cf3791", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -456,7 +456,7 @@ impl<'tcx> WfPredicates<'tcx> {\n                             self.out.extend(obligations);\n \n                             let predicate =\n-                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv.shrink()))\n+                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv))\n                                     .to_predicate(self.tcx());\n                             let cause = self.cause(traits::WellFormed(None));\n                             self.out.push(traits::Obligation::with_depth("}, {"sha": "cbc4eab85fd59c633ff0f3b6c22949d7a455fda6", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -2372,10 +2372,10 @@ fn const_evaluatable_predicates_of<'tcx>(\n             let def_id = self.tcx.hir().local_def_id(c.hir_id);\n             let ct = ty::Const::from_anon_const(self.tcx, def_id);\n             if let ty::ConstKind::Unevaluated(uv) = ct.kind() {\n-                assert_eq!(uv.promoted, None);\n+                assert_eq!(uv.promoted, ());\n                 let span = self.tcx.hir().span(c.hir_id);\n                 self.preds.insert((\n-                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv.shrink()))\n+                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv))\n                         .to_predicate(self.tcx),\n                     span,\n                 ));"}, {"sha": "070956deca3f2ad55fa92c29db6f926abb311088", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bbb8db5c4c702265b8afcc1313684a127ddd6a/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=a4bbb8db5c4c702265b8afcc1313684a127ddd6a", "patch": "@@ -235,14 +235,13 @@ pub(crate) fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n pub(crate) fn print_const(cx: &DocContext<'_>, n: ty::Const<'_>) -> String {\n     match n.kind() {\n         ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) => {\n+            assert_eq!(promoted, ());\n             let mut s = if let Some(def) = def.as_local() {\n                 print_const_expr(cx.tcx, cx.tcx.hir().body_owned_by(def.did))\n             } else {\n                 inline::print_inlined_const(cx.tcx, def.did)\n             };\n-            if let Some(promoted) = promoted {\n-                s.push_str(&format!(\"::{:?}\", promoted))\n-            }\n+\n             s\n         }\n         _ => {"}]}