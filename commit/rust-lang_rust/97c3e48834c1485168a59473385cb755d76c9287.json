{"sha": "97c3e48834c1485168a59473385cb755d76c9287", "node_id": "C_kwDOAAsO6NoAKDk3YzNlNDg4MzRjMTQ4NTE2OGE1OTQ3MzM4NWNiNzU1ZDc2YzkyODc", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-12-21T02:28:55Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-12-21T16:55:39Z"}, "message": "refactor: encapsulate cfg_if parsing within parse mod", "tree": {"sha": "0cb95395c3ecf252f4d231111d9bb3480f09f662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cb95395c3ecf252f4d231111d9bb3480f09f662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97c3e48834c1485168a59473385cb755d76c9287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97c3e48834c1485168a59473385cb755d76c9287", "html_url": "https://github.com/rust-lang/rust/commit/97c3e48834c1485168a59473385cb755d76c9287", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97c3e48834c1485168a59473385cb755d76c9287/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62987562e2fbb6ea83fa20598b9e0c91bee536e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/62987562e2fbb6ea83fa20598b9e0c91bee536e3", "html_url": "https://github.com/rust-lang/rust/commit/62987562e2fbb6ea83fa20598b9e0c91bee536e3"}], "stats": {"total": 181, "additions": 98, "deletions": 83}, "files": [{"sha": "ea67977c17a2b7e016ac906e280c30e3e1659a53", "filename": "src/modules/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97c3e48834c1485168a59473385cb755d76c9287/src%2Fmodules%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c3e48834c1485168a59473385cb755d76c9287/src%2Fmodules%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules%2Fvisitor.rs?ref=97c3e48834c1485168a59473385cb755d76c9287", "patch": "@@ -3,7 +3,7 @@ use rustc_ast::visit::Visitor;\n use rustc_span::Symbol;\n \n use crate::attr::MetaVisitor;\n-use crate::parse::parser::Parser;\n+use crate::parse::macros::cfg_if::parse_cfg_if;\n use crate::parse::session::ParseSess;\n \n pub(crate) struct ModItem {\n@@ -62,7 +62,7 @@ impl<'a, 'ast: 'a> CfgIfVisitor<'a> {\n             }\n         };\n \n-        let items = Parser::parse_cfg_if(self.parse_sess, mac)?;\n+        let items = parse_cfg_if(self.parse_sess, mac)?;\n         self.mods\n             .append(&mut items.into_iter().map(|item| ModItem { item }).collect());\n "}, {"sha": "e10fbe64bcdbeff4f7bce0082e815ff4232a2350", "filename": "src/parse/macros/cfg_if.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/97c3e48834c1485168a59473385cb755d76c9287/src%2Fparse%2Fmacros%2Fcfg_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c3e48834c1485168a59473385cb755d76c9287/src%2Fparse%2Fmacros%2Fcfg_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fmacros%2Fcfg_if.rs?ref=97c3e48834c1485168a59473385cb755d76c9287", "patch": "@@ -0,0 +1,89 @@\n+use std::panic::{catch_unwind, AssertUnwindSafe};\n+\n+use rustc_ast::ast;\n+use rustc_ast::token::{DelimToken, TokenKind};\n+use rustc_parse::parser::ForceCollect;\n+use rustc_span::symbol::kw;\n+\n+use crate::parse::macros::build_stream_parser;\n+use crate::parse::session::ParseSess;\n+\n+pub(crate) fn parse_cfg_if<'a>(\n+    sess: &'a ParseSess,\n+    mac: &'a ast::MacCall,\n+) -> Result<Vec<ast::Item>, &'static str> {\n+    match catch_unwind(AssertUnwindSafe(|| parse_cfg_if_inner(sess, mac))) {\n+        Ok(Ok(items)) => Ok(items),\n+        Ok(err @ Err(_)) => err,\n+        Err(..) => Err(\"failed to parse cfg_if!\"),\n+    }\n+}\n+\n+fn parse_cfg_if_inner<'a>(\n+    sess: &'a ParseSess,\n+    mac: &'a ast::MacCall,\n+) -> Result<Vec<ast::Item>, &'static str> {\n+    let ts = mac.args.inner_tokens();\n+    let mut parser = build_stream_parser(sess.inner(), ts);\n+\n+    let mut items = vec![];\n+    let mut process_if_cfg = true;\n+\n+    while parser.token.kind != TokenKind::Eof {\n+        if process_if_cfg {\n+            if !parser.eat_keyword(kw::If) {\n+                return Err(\"Expected `if`\");\n+            }\n+            // Inner attributes are not actually syntactically permitted here, but we don't\n+            // care about inner vs outer attributes in this position. Our purpose with this\n+            // special case parsing of cfg_if macros is to ensure we can correctly resolve\n+            // imported modules that may have a custom `path` defined.\n+            //\n+            // As such, we just need to advance the parser past the attribute and up to\n+            // to the opening brace.\n+            // See also https://github.com/rust-lang/rust/pull/79433\n+            parser\n+                .parse_attribute(rustc_parse::parser::attr::InnerAttrPolicy::Permitted)\n+                .map_err(|_| \"Failed to parse attributes\")?;\n+        }\n+\n+        if !parser.eat(&TokenKind::OpenDelim(DelimToken::Brace)) {\n+            return Err(\"Expected an opening brace\");\n+        }\n+\n+        while parser.token != TokenKind::CloseDelim(DelimToken::Brace)\n+            && parser.token.kind != TokenKind::Eof\n+        {\n+            let item = match parser.parse_item(ForceCollect::No) {\n+                Ok(Some(item_ptr)) => item_ptr.into_inner(),\n+                Ok(None) => continue,\n+                Err(mut err) => {\n+                    err.cancel();\n+                    parser.sess.span_diagnostic.reset_err_count();\n+                    return Err(\n+                        \"Expected item inside cfg_if block, but failed to parse it as an item\",\n+                    );\n+                }\n+            };\n+            if let ast::ItemKind::Mod(..) = item.kind {\n+                items.push(item);\n+            }\n+        }\n+\n+        if !parser.eat(&TokenKind::CloseDelim(DelimToken::Brace)) {\n+            return Err(\"Expected a closing brace\");\n+        }\n+\n+        if parser.eat(&TokenKind::Eof) {\n+            break;\n+        }\n+\n+        if !parser.eat_keyword(kw::Else) {\n+            return Err(\"Expected `else`\");\n+        }\n+\n+        process_if_cfg = parser.token.is_keyword(kw::If);\n+    }\n+\n+    Ok(items)\n+}"}, {"sha": "fbd8c3f909537bbde40de7f45c538b4801a605e8", "filename": "src/parse/macros/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97c3e48834c1485168a59473385cb755d76c9287/src%2Fparse%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c3e48834c1485168a59473385cb755d76c9287/src%2Fparse%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fmacros%2Fmod.rs?ref=97c3e48834c1485168a59473385cb755d76c9287", "patch": "@@ -3,6 +3,7 @@ use rustc_ast::tokenstream::{Cursor, Spacing, TokenStream, TokenTree};\n use rustc_ast::{ast, ptr};\n use rustc_parse::parser::{ForceCollect, Parser};\n use rustc_parse::{stream_to_parser, MACRO_ARGUMENTS};\n+use rustc_session::parse::ParseSess;\n use rustc_span::{\n     symbol::{self, kw},\n     BytePos, Span, Symbol, DUMMY_SP,\n@@ -11,10 +12,15 @@ use rustc_span::{\n use crate::macros::MacroArg;\n use crate::rewrite::{Rewrite, RewriteContext};\n \n+pub(crate) mod cfg_if;\n pub(crate) mod lazy_static;\n \n+fn build_stream_parser<'a>(sess: &'a ParseSess, tokens: TokenStream) -> Parser<'a> {\n+    stream_to_parser(sess, tokens, MACRO_ARGUMENTS)\n+}\n+\n fn build_parser<'a>(context: &RewriteContext<'a>, tokens: TokenStream) -> Parser<'a> {\n-    stream_to_parser(context.parse_sess.inner(), tokens, MACRO_ARGUMENTS)\n+    build_stream_parser(context.parse_sess.inner(), tokens)\n }\n \n fn parse_macro_arg<'a, 'b: 'a>(parser: &'a mut Parser<'b>) -> Option<MacroArg> {"}, {"sha": "8efd2bf257b174e683df0fd4db55c04b227da78e", "filename": "src/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/97c3e48834c1485168a59473385cb755d76c9287/src%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c3e48834c1485168a59473385cb755d76c9287/src%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fparser.rs?ref=97c3e48834c1485168a59473385cb755d76c9287", "patch": "@@ -175,84 +175,4 @@ impl<'a> Parser<'a> {\n             Err(_) => Err(ParserError::ParsePanicError),\n         }\n     }\n-\n-    pub(crate) fn parse_cfg_if(\n-        sess: &'a ParseSess,\n-        mac: &'a ast::MacCall,\n-    ) -> Result<Vec<ast::Item>, &'static str> {\n-        match catch_unwind(AssertUnwindSafe(|| Parser::parse_cfg_if_inner(sess, mac))) {\n-            Ok(Ok(items)) => Ok(items),\n-            Ok(err @ Err(_)) => err,\n-            Err(..) => Err(\"failed to parse cfg_if!\"),\n-        }\n-    }\n-\n-    fn parse_cfg_if_inner(\n-        sess: &'a ParseSess,\n-        mac: &'a ast::MacCall,\n-    ) -> Result<Vec<ast::Item>, &'static str> {\n-        let token_stream = mac.args.inner_tokens();\n-        let mut parser = rustc_parse::stream_to_parser(sess.inner(), token_stream, Some(\"\"));\n-\n-        let mut items = vec![];\n-        let mut process_if_cfg = true;\n-\n-        while parser.token.kind != TokenKind::Eof {\n-            if process_if_cfg {\n-                if !parser.eat_keyword(kw::If) {\n-                    return Err(\"Expected `if`\");\n-                }\n-                // Inner attributes are not actually syntactically permitted here, but we don't\n-                // care about inner vs outer attributes in this position. Our purpose with this\n-                // special case parsing of cfg_if macros is to ensure we can correctly resolve\n-                // imported modules that may have a custom `path` defined.\n-                //\n-                // As such, we just need to advance the parser past the attribute and up to\n-                // to the opening brace.\n-                // See also https://github.com/rust-lang/rust/pull/79433\n-                parser\n-                    .parse_attribute(rustc_parse::parser::attr::InnerAttrPolicy::Permitted)\n-                    .map_err(|_| \"Failed to parse attributes\")?;\n-            }\n-\n-            if !parser.eat(&TokenKind::OpenDelim(DelimToken::Brace)) {\n-                return Err(\"Expected an opening brace\");\n-            }\n-\n-            while parser.token != TokenKind::CloseDelim(DelimToken::Brace)\n-                && parser.token.kind != TokenKind::Eof\n-            {\n-                let item = match parser.parse_item(ForceCollect::No) {\n-                    Ok(Some(item_ptr)) => item_ptr.into_inner(),\n-                    Ok(None) => continue,\n-                    Err(mut err) => {\n-                        err.cancel();\n-                        parser.sess.span_diagnostic.reset_err_count();\n-                        return Err(\n-                            \"Expected item inside cfg_if block, but failed to parse it as an item\",\n-                        );\n-                    }\n-                };\n-                if let ast::ItemKind::Mod(..) = item.kind {\n-                    items.push(item);\n-                }\n-            }\n-\n-            if !parser.eat(&TokenKind::CloseDelim(DelimToken::Brace)) {\n-                return Err(\"Expected a closing brace\");\n-            }\n-\n-            if parser.eat(&TokenKind::Eof) {\n-                break;\n-            }\n-\n-            if !parser.eat_keyword(kw::Else) {\n-                return Err(\"Expected `else`\");\n-            }\n-\n-            process_if_cfg = parser.token.is_keyword(kw::If);\n-        }\n-\n-        Ok(items)\n-    }\n }"}]}