{"sha": "f7f62452e47bab1a8e649da77a0ab0f8505d7035", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZjYyNDUyZTQ3YmFiMWE4ZTY0OWRhNzdhMGFiMGY4NTA1ZDcwMzU=", "commit": {"author": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-04-28T18:59:34Z"}, "committer": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-05-05T09:25:12Z"}, "message": "refactor: Replace probe_fudge by an explict call for the lengths", "tree": {"sha": "9a163aec1501d9398b80cc61f845dea8741a8f0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a163aec1501d9398b80cc61f845dea8741a8f0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7f62452e47bab1a8e649da77a0ab0f8505d7035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f62452e47bab1a8e649da77a0ab0f8505d7035", "html_url": "https://github.com/rust-lang/rust/commit/f7f62452e47bab1a8e649da77a0ab0f8505d7035", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7f62452e47bab1a8e649da77a0ab0f8505d7035/comments", "author": null, "committer": null, "parents": [{"sha": "4a2a6bcfb1b014587daa543a9aa618502750e489", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a2a6bcfb1b014587daa543a9aa618502750e489", "html_url": "https://github.com/rust-lang/rust/commit/4a2a6bcfb1b014587daa543a9aa618502750e489"}], "stats": {"total": 82, "additions": 23, "deletions": 59}, "files": [{"sha": "c6651108df53d9403793d606fc79e990b3fffef5", "filename": "src/librustc_infer/infer/fudge.rs", "status": "modified", "additions": 18, "deletions": 36, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f7f62452e47bab1a8e649da77a0ab0f8505d7035/src%2Flibrustc_infer%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f62452e47bab1a8e649da77a0ab0f8505d7035/src%2Flibrustc_infer%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ffudge.rs?ref=f7f62452e47bab1a8e649da77a0ab0f8505d7035", "patch": "@@ -1,10 +1,9 @@\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::{self, ConstVid, FloatVid, IntVid, RegionVid, Ty, TyCtxt, TyVid};\n \n-use super::region_constraints::RegionSnapshot;\n-use super::type_variable::{self, TypeVariableOrigin};\n+use super::type_variable::TypeVariableOrigin;\n use super::InferCtxt;\n-use super::{CombinedSnapshot, ConstVariableOrigin, RegionVariableOrigin, UnificationTable};\n+use super::{ConstVariableOrigin, RegionVariableOrigin, UnificationTable};\n \n use rustc_data_structures::snapshot_vec as sv;\n use rustc_data_structures::unify as ut;\n@@ -14,13 +13,13 @@ use std::ops::Range;\n \n fn vars_since_snapshot<'tcx, T>(\n     table: &mut UnificationTable<'_, 'tcx, T>,\n-    snapshot: usize,\n+    snapshot_var_len: usize,\n ) -> Range<T>\n where\n     T: UnifyKey,\n     super::UndoLog<'tcx>: From<sv::UndoLog<ut::Delegate<T>>>,\n {\n-    T::from_index(snapshot as u32)..T::from_index(table.len() as u32)\n+    T::from_index(snapshot_var_len as u32)..T::from_index(table.len() as u32)\n }\n \n fn const_vars_since_snapshot<'tcx>(\n@@ -36,41 +35,23 @@ fn const_vars_since_snapshot<'tcx>(\n     )\n }\n \n-/// Extends `CombinedSnapshot` by tracking which variables were added in the snapshot\n-#[must_use = \"once you start a snapshot, you should always consume it\"]\n-struct FudgeSnapshot<'a, 'tcx> {\n-    snapshot: CombinedSnapshot<'a, 'tcx>,\n-    region_constraints_snapshot: RegionSnapshot,\n-    type_snapshot: type_variable::Snapshot<'tcx>,\n+struct VariableLengths {\n+    type_var_len: usize,\n     const_var_len: usize,\n     int_var_len: usize,\n     float_var_len: usize,\n+    region_constraints_len: usize,\n }\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n-    /// Like `probe` but provides information about which variables were created in the snapshot,\n-    /// allowing for inference fudging\n-    fn probe_fudge<R, F>(&self, f: F) -> R\n-    where\n-        F: FnOnce(&FudgeSnapshot<'a, 'tcx>) -> R,\n-    {\n-        debug!(\"probe()\");\n-        let snapshot = self.start_fudge_snapshot();\n-        let r = f(&snapshot);\n-        self.rollback_to(\"probe\", snapshot.snapshot);\n-        r\n-    }\n-\n-    fn start_fudge_snapshot(&self) -> FudgeSnapshot<'a, 'tcx> {\n-        let snapshot = self.start_snapshot();\n+    fn variable_lengths(&self) -> VariableLengths {\n         let mut inner = self.inner.borrow_mut();\n-        FudgeSnapshot {\n-            snapshot,\n-            type_snapshot: inner.type_variables().snapshot(),\n+        VariableLengths {\n+            type_var_len: inner.type_variables().num_vars(),\n             const_var_len: inner.const_unification_table().len(),\n             int_var_len: inner.int_unification_table().len(),\n             float_var_len: inner.float_unification_table().len(),\n-            region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),\n+            region_constraints_len: inner.unwrap_region_constraints().num_region_vars(),\n         }\n     }\n \n@@ -120,7 +101,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     {\n         debug!(\"fudge_inference_if_ok()\");\n \n-        let (mut fudger, value) = self.probe_fudge(|snapshot| {\n+        let variable_lengths = self.variable_lengths();\n+        let (mut fudger, value) = self.probe(|_| {\n             match f() {\n                 Ok(value) => {\n                     let value = self.resolve_vars_if_possible(&value);\n@@ -133,21 +115,21 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n                     let mut inner = self.inner.borrow_mut();\n                     let type_vars =\n-                        inner.type_variables().vars_since_snapshot(&snapshot.type_snapshot);\n+                        inner.type_variables().vars_since_snapshot(variable_lengths.type_var_len);\n                     let int_vars = vars_since_snapshot(\n                         &mut inner.int_unification_table(),\n-                        snapshot.int_var_len,\n+                        variable_lengths.int_var_len,\n                     );\n                     let float_vars = vars_since_snapshot(\n                         &mut inner.float_unification_table(),\n-                        snapshot.float_var_len,\n+                        variable_lengths.float_var_len,\n                     );\n                     let region_vars = inner\n                         .unwrap_region_constraints()\n-                        .vars_since_snapshot(&snapshot.region_constraints_snapshot);\n+                        .vars_since_snapshot(variable_lengths.region_constraints_len);\n                     let const_vars = const_vars_since_snapshot(\n                         &mut inner.const_unification_table(),\n-                        snapshot.const_var_len,\n+                        variable_lengths.const_var_len,\n                     );\n \n                     let fudger = InferenceFudger {"}, {"sha": "fae7f2db4c0d76ca8dcc7e0a640e4c0fa45f4ca2", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f7f62452e47bab1a8e649da77a0ab0f8505d7035/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f62452e47bab1a8e649da77a0ab0f8505d7035/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=f7f62452e47bab1a8e649da77a0ab0f8505d7035", "patch": "@@ -312,7 +312,6 @@ pub struct RegionVariableInfo {\n }\n \n pub struct RegionSnapshot {\n-    value_count: usize,\n     any_unifications: bool,\n }\n \n@@ -454,10 +453,7 @@ impl<'tcx> RegionConstraintCollector<'tcx, '_> {\n \n     pub fn start_snapshot(&mut self) -> RegionSnapshot {\n         debug!(\"RegionConstraintCollector: start_snapshot\");\n-        RegionSnapshot {\n-            value_count: self.unification_table.len(),\n-            any_unifications: self.any_unifications,\n-        }\n+        RegionSnapshot { any_unifications: self.any_unifications }\n     }\n \n     pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {\n@@ -776,9 +772,9 @@ impl<'tcx> RegionConstraintCollector<'tcx, '_> {\n \n     pub fn vars_since_snapshot(\n         &self,\n-        mark: &RegionSnapshot,\n+        value_count: usize,\n     ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {\n-        let range = RegionVid::from_index(mark.value_count as u32)\n+        let range = RegionVid::from_index(value_count as u32)\n             ..RegionVid::from_index(self.unification_table.len() as u32);\n         (\n             range.clone(),"}, {"sha": "f68692391a2889069beadb58650e0e35e444d557", "filename": "src/librustc_infer/infer/type_variable.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f7f62452e47bab1a8e649da77a0ab0f8505d7035/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f62452e47bab1a8e649da77a0ab0f8505d7035/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs?ref=f7f62452e47bab1a8e649da77a0ab0f8505d7035", "patch": "@@ -150,11 +150,6 @@ impl<'tcx> TypeVariableValue<'tcx> {\n     }\n }\n \n-pub struct Snapshot<'tcx> {\n-    value_count: u32,\n-    _marker: PhantomData<&'tcx ()>,\n-}\n-\n pub(crate) struct Instantiate {\n     vid: ty::TyVid,\n }\n@@ -324,14 +319,6 @@ impl<'tcx> TypeVariableTable<'_, 'tcx> {\n         }\n     }\n \n-    /// Creates a snapshot of the type variable state. This snapshot\n-    /// must later be committed (`commit()`) or rolled back\n-    /// (`rollback_to()`). Nested snapshots are permitted, but must\n-    /// be processed in a stack-like fashion.\n-    pub fn snapshot(&mut self) -> Snapshot<'tcx> {\n-        Snapshot { value_count: self.eq_relations().len() as u32, _marker: PhantomData }\n-    }\n-\n     fn values(\n         &mut self,\n     ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {\n@@ -349,10 +336,9 @@ impl<'tcx> TypeVariableTable<'_, 'tcx> {\n     /// Returns a range of the type variables created during the snapshot.\n     pub fn vars_since_snapshot(\n         &mut self,\n-        s: &Snapshot<'tcx>,\n+        value_count: usize,\n     ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {\n-        let range =\n-            TyVid { index: s.value_count }..TyVid { index: self.eq_relations().len() as u32 };\n+        let range = TyVid { index: value_count as u32 }..TyVid { index: self.num_vars() as u32 };\n         (\n             range.start..range.end,\n             (range.start.index..range.end.index)"}]}