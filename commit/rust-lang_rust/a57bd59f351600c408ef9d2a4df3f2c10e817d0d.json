{"sha": "a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1N2JkNTlmMzUxNjAwYzQwOGVmOWQyYTRkZjNmMmMxMGU4MTdkMGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-16T01:53:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-16T01:53:12Z"}, "message": "Merge #8813\n\n8813: Get some more array lengths! r=lf- a=lf-\n\nThis is built on #8799 and thus contains its changes. I'll rebase it onto master when that one gets merged. It adds support for r-a understanding the length of:\r\n\r\n* `let a: [u8; 2] = ...`\r\n* `let a = b\"aaa\"`\r\n* `let a = [0u8; 4]`\r\n\r\nI have added support for getting the values of byte strings, which was not previously there. I am least confident in the correctness of this part and it probably needs some more tests, as we currently have only one test that exercised that part (!).\r\n\r\nFixes #2922.\n\nCo-authored-by: Jade <software@lfcode.ca>", "tree": {"sha": "73af1b67227643ef4e8caa77ba50f2ad738ddd4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73af1b67227643ef4e8caa77ba50f2ad738ddd4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgoHsICRBK7hj4Ov3rIwAAqeEIAKA+XlS/w+yDNxds+o7TtwsD\nlUcyFjxY2Yn8lyReN75/hZunDtBudA2g8ywqWN55GQdLXBDVnGvHyuEQ1cHpq/j6\nRC4IqVXrI8p/ghzo7ar6ddi81rdvENRgyWuvWllZERvjTX5PMSjtZBvCY47i3jgi\nJ5s8SVNcFq+d1wBnL+DLr87xEPNxMGSBbJwGZ6XjrYM5kCpZUXYbz3ukZmk+i74K\nmG0+lzFWWQvDb0gkNZI06W8G5cMwuSUAIMhhDBNu9vVbM22HvJEYKtrbKovhHXC6\ncQIhFfGT8739AgapsFX5CMjLpURPQSB7ZoGdAZ16Y64ZMZGIA3gbif4QYMeM424=\n=+y4L\n-----END PGP SIGNATURE-----\n", "payload": "tree 73af1b67227643ef4e8caa77ba50f2ad738ddd4e\nparent 92abc56bc928fb2a11b8f5b2a37e3c9ee31102d7\nparent de0ed9860d86c3b905a967b1a7b5243499d32d67\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621129992 +0000\ncommitter GitHub <noreply@github.com> 1621129992 +0000\n\nMerge #8813\n\n8813: Get some more array lengths! r=lf- a=lf-\n\nThis is built on #8799 and thus contains its changes. I'll rebase it onto master when that one gets merged. It adds support for r-a understanding the length of:\r\n\r\n* `let a: [u8; 2] = ...`\r\n* `let a = b\"aaa\"`\r\n* `let a = [0u8; 4]`\r\n\r\nI have added support for getting the values of byte strings, which was not previously there. I am least confident in the correctness of this part and it probably needs some more tests, as we currently have only one test that exercised that part (!).\r\n\r\nFixes #2922.\n\nCo-authored-by: Jade <software@lfcode.ca>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "html_url": "https://github.com/rust-lang/rust/commit/a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92abc56bc928fb2a11b8f5b2a37e3c9ee31102d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/92abc56bc928fb2a11b8f5b2a37e3c9ee31102d7", "html_url": "https://github.com/rust-lang/rust/commit/92abc56bc928fb2a11b8f5b2a37e3c9ee31102d7"}, {"sha": "de0ed9860d86c3b905a967b1a7b5243499d32d67", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0ed9860d86c3b905a967b1a7b5243499d32d67", "html_url": "https://github.com/rust-lang/rust/commit/de0ed9860d86c3b905a967b1a7b5243499d32d67"}], "stats": {"total": 563, "additions": 427, "deletions": 136}, "files": [{"sha": "d443b124c419f3cec9d597eeffec2049c3d9698a", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -52,7 +52,9 @@ use hir_def::{\n };\n use hir_expand::{diagnostics::DiagnosticSink, name::name, MacroDefKind};\n use hir_ty::{\n-    autoderef, could_unify,\n+    autoderef,\n+    consteval::ConstExt,\n+    could_unify,\n     method_resolution::{self, def_crates, TyFingerprint},\n     primitive::UintTy,\n     subst_prefix,\n@@ -1914,6 +1916,7 @@ impl Type {\n                     substs.iter(&Interner).filter_map(|a| a.ty(&Interner)).any(go)\n                 }\n \n+                TyKind::Array(_ty, len) if len.is_unknown() => true,\n                 TyKind::Array(ty, _)\n                 | TyKind::Slice(ty)\n                 | TyKind::Raw(_, ty)"}, {"sha": "2a7e0205f5be5da75500a6560a400db0392f9b78", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -1006,23 +1006,27 @@ impl From<ast::BinOp> for BinaryOp {\n impl From<ast::LiteralKind> for Literal {\n     fn from(ast_lit_kind: ast::LiteralKind) -> Self {\n         match ast_lit_kind {\n+            // FIXME: these should have actual values filled in, but unsure on perf impact\n             LiteralKind::IntNumber(lit) => {\n                 if let builtin @ Some(_) = lit.suffix().and_then(BuiltinFloat::from_suffix) {\n                     return Literal::Float(Default::default(), builtin);\n                 } else if let builtin @ Some(_) =\n                     lit.suffix().and_then(|it| BuiltinInt::from_suffix(&it))\n                 {\n-                    Literal::Int(Default::default(), builtin)\n+                    Literal::Int(lit.value().unwrap_or(0) as i128, builtin)\n                 } else {\n                     let builtin = lit.suffix().and_then(|it| BuiltinUint::from_suffix(&it));\n-                    Literal::Uint(Default::default(), builtin)\n+                    Literal::Uint(lit.value().unwrap_or(0), builtin)\n                 }\n             }\n             LiteralKind::FloatNumber(lit) => {\n                 let ty = lit.suffix().and_then(|it| BuiltinFloat::from_suffix(&it));\n                 Literal::Float(Default::default(), ty)\n             }\n-            LiteralKind::ByteString(_) => Literal::ByteString(Default::default()),\n+            LiteralKind::ByteString(bs) => {\n+                let text = bs.value().map(Vec::from).unwrap_or_else(Default::default);\n+                Literal::ByteString(text)\n+            }\n             LiteralKind::String(_) => Literal::String(Default::default()),\n             LiteralKind::Byte => Literal::Uint(Default::default(), Some(BuiltinUint::U8)),\n             LiteralKind::Bool(val) => Literal::Bool(val),"}, {"sha": "2ba619d23411191c2358a2928b19a622ac7c8df8", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -43,8 +43,8 @@ pub enum Literal {\n     ByteString(Vec<u8>),\n     Char(char),\n     Bool(bool),\n-    Int(u64, Option<BuiltinInt>),\n-    Uint(u64, Option<BuiltinUint>),\n+    Int(i128, Option<BuiltinInt>),\n+    Uint(u128, Option<BuiltinUint>),\n     Float(u64, Option<BuiltinFloat>), // FIXME: f64 is not Eq\n }\n "}, {"sha": "9e44547cb03a6fbe432cd799f38f6dacba5e7614", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -2,6 +2,7 @@\n //! be directly created from an ast::TypeRef, without further queries.\n \n use hir_expand::{name::Name, AstId, InFile};\n+use std::convert::TryInto;\n use syntax::ast;\n \n use crate::{body::LowerCtx, path::Path};\n@@ -79,7 +80,9 @@ pub enum TypeRef {\n     Path(Path),\n     RawPtr(Box<TypeRef>, Mutability),\n     Reference(Box<TypeRef>, Option<LifetimeRef>, Mutability),\n-    Array(Box<TypeRef> /*, Expr*/),\n+    // FIXME: for full const generics, the latter element (length) here is going to have to be an\n+    // expression that is further lowered later in hir_ty.\n+    Array(Box<TypeRef>, ConstScalar),\n     Slice(Box<TypeRef>),\n     /// A fn pointer. Last element of the vector is the return type.\n     Fn(Vec<TypeRef>, bool /*varargs*/),\n@@ -140,7 +143,16 @@ impl TypeRef {\n                 TypeRef::RawPtr(Box::new(inner_ty), mutability)\n             }\n             ast::Type::ArrayType(inner) => {\n-                TypeRef::Array(Box::new(TypeRef::from_ast_opt(&ctx, inner.ty())))\n+                // FIXME: This is a hack. We should probably reuse the machinery of\n+                // `hir_def::body::lower` to lower this into an `Expr` and then evaluate it at the\n+                // `hir_ty` level, which would allow knowing the type of:\n+                // let v: [u8; 2 + 2] = [0u8; 4];\n+                let len = inner\n+                    .expr()\n+                    .map(ConstScalar::usize_from_literal_expr)\n+                    .unwrap_or(ConstScalar::Unknown);\n+\n+                TypeRef::Array(Box::new(TypeRef::from_ast_opt(&ctx, inner.ty())), len)\n             }\n             ast::Type::SliceType(inner) => {\n                 TypeRef::Slice(Box::new(TypeRef::from_ast_opt(&ctx, inner.ty())))\n@@ -212,7 +224,7 @@ impl TypeRef {\n                 }\n                 TypeRef::RawPtr(type_ref, _)\n                 | TypeRef::Reference(type_ref, ..)\n-                | TypeRef::Array(type_ref)\n+                | TypeRef::Array(type_ref, _)\n                 | TypeRef::Slice(type_ref) => go(&type_ref, f),\n                 TypeRef::ImplTrait(bounds) | TypeRef::DynTrait(bounds) => {\n                     for bound in bounds {\n@@ -298,3 +310,58 @@ impl TypeBound {\n         }\n     }\n }\n+\n+/// A concrete constant value\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum ConstScalar {\n+    // for now, we only support the trivial case of constant evaluating the length of an array\n+    // Note that this is u64 because the target usize may be bigger than our usize\n+    Usize(u64),\n+\n+    /// Case of an unknown value that rustc might know but we don't\n+    // FIXME: this is a hack to get around chalk not being able to represent unevaluatable\n+    // constants\n+    // https://github.com/rust-analyzer/rust-analyzer/pull/8813#issuecomment-840679177\n+    // https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/Handling.20non.20evaluatable.20constants'.20equality/near/238386348\n+    Unknown,\n+}\n+\n+impl std::fmt::Display for ConstScalar {\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n+        match self {\n+            ConstScalar::Usize(us) => write!(fmt, \"{}\", us),\n+            ConstScalar::Unknown => write!(fmt, \"_\"),\n+        }\n+    }\n+}\n+\n+impl ConstScalar {\n+    /// Gets a target usize out of the ConstScalar\n+    pub fn as_usize(&self) -> Option<u64> {\n+        match self {\n+            &ConstScalar::Usize(us) => Some(us),\n+            _ => None,\n+        }\n+    }\n+\n+    // FIXME: as per the comments on `TypeRef::Array`, this evaluation should not happen at this\n+    // parse stage.\n+    fn usize_from_literal_expr(expr: ast::Expr) -> ConstScalar {\n+        match expr {\n+            ast::Expr::Literal(lit) => {\n+                let lkind = lit.kind();\n+                match lkind {\n+                    ast::LiteralKind::IntNumber(num)\n+                        if num.suffix() == None || num.suffix() == Some(\"usize\") =>\n+                    {\n+                        num.value().and_then(|v| v.try_into().ok())\n+                    }\n+                    _ => None,\n+                }\n+            }\n+            _ => None,\n+        }\n+        .map(ConstScalar::Usize)\n+        .unwrap_or(ConstScalar::Unknown)\n+    }\n+}"}, {"sha": "e3ceb3d626996ac70cf023a26fbbb7675a2faf08", "filename": "crates/hir_ty/src/consteval.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -0,0 +1,56 @@\n+//! Constant evaluation details\n+\n+use std::convert::TryInto;\n+\n+use hir_def::{\n+    builtin_type::BuiltinUint,\n+    expr::{Expr, Literal},\n+    type_ref::ConstScalar,\n+};\n+\n+use crate::{Const, ConstData, ConstValue, Interner, TyKind};\n+\n+/// Extension trait for [`Const`]\n+pub trait ConstExt {\n+    /// Is a [`Const`] unknown?\n+    fn is_unknown(&self) -> bool;\n+}\n+\n+impl ConstExt for Const {\n+    fn is_unknown(&self) -> bool {\n+        match self.data(&Interner).value {\n+            // interned Unknown\n+            chalk_ir::ConstValue::Concrete(chalk_ir::ConcreteConst {\n+                interned: ConstScalar::Unknown,\n+            }) => true,\n+\n+            // interned concrete anything else\n+            chalk_ir::ConstValue::Concrete(..) => false,\n+\n+            _ => {\n+                log::error!(\"is_unknown was called on a non-concrete constant value! {:?}\", self);\n+                true\n+            }\n+        }\n+    }\n+}\n+\n+// FIXME: support more than just evaluating literals\n+pub fn eval_usize(expr: &Expr) -> Option<u64> {\n+    match expr {\n+        Expr::Literal(Literal::Uint(v, None))\n+        | Expr::Literal(Literal::Uint(v, Some(BuiltinUint::Usize))) => (*v).try_into().ok(),\n+        _ => None,\n+    }\n+}\n+\n+/// Interns a possibly-unknown target usize\n+pub fn usize_const(value: Option<u64>) -> Const {\n+    ConstData {\n+        ty: TyKind::Scalar(chalk_ir::Scalar::Uint(chalk_ir::UintTy::Usize)).intern(&Interner),\n+        value: ConstValue::Concrete(chalk_ir::ConcreteConst {\n+            interned: value.map(|value| ConstScalar::Usize(value)).unwrap_or(ConstScalar::Unknown),\n+        }),\n+    }\n+    .intern(&Interner)\n+}"}, {"sha": "0044b1cffc25bc784f2854b188156cd5c564a7ce", "filename": "crates/hir_ty/src/consts.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/92abc56bc928fb2a11b8f5b2a37e3c9ee31102d7/crates%2Fhir_ty%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92abc56bc928fb2a11b8f5b2a37e3c9ee31102d7/crates%2Fhir_ty%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsts.rs?ref=92abc56bc928fb2a11b8f5b2a37e3c9ee31102d7", "patch": "@@ -1,21 +0,0 @@\n-//! Handling of concrete const values\n-\n-/// A concrete constant value\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum ConstScalar {\n-    // for now, we only support the trivial case of constant evaluating the length of an array\n-    // Note that this is u64 because the target usize may be bigger than our usize\n-    Usize(u64),\n-\n-    /// Case of an unknown value that rustc might know but we don't\n-    Unknown,\n-}\n-\n-impl std::fmt::Display for ConstScalar {\n-    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n-        match self {\n-            ConstScalar::Usize(us) => write!(fmt, \"{}\", us),\n-            ConstScalar::Unknown => write!(fmt, \"_\"),\n-        }\n-    }\n-}"}, {"sha": "7bbd1a1f7dad6474651de8f11757bb11e6c3f4cf", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -962,11 +962,10 @@ impl HirDisplay for TypeRef {\n                 write!(f, \"{}\", mutability)?;\n                 inner.hir_fmt(f)?;\n             }\n-            TypeRef::Array(inner) => {\n+            TypeRef::Array(inner, len) => {\n                 write!(f, \"[\")?;\n                 inner.hir_fmt(f)?;\n-                // FIXME: Array length?\n-                write!(f, \"; _]\")?;\n+                write!(f, \"; {}]\", len)?;\n             }\n             TypeRef::Slice(inner) => {\n                 write!(f, \"[\")?;"}, {"sha": "b6b5a1b750c5c414b54a3f9e944532fa427d8bb0", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -3,7 +3,7 @@\n use std::iter::{repeat, repeat_with};\n use std::{mem, sync::Arc};\n \n-use chalk_ir::{cast::Cast, fold::Shift, ConstData, Mutability, TyVariableKind};\n+use chalk_ir::{cast::Cast, fold::Shift, Mutability, TyVariableKind};\n use hir_def::{\n     expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     path::{GenericArg, GenericArgs},\n@@ -15,17 +15,15 @@ use stdx::always;\n use syntax::ast::RangeOp;\n \n use crate::{\n-    autoderef,\n-    consts::ConstScalar,\n-    dummy_usize_const,\n+    autoderef, consteval,\n     lower::lower_to_chalk_mutability,\n     mapping::from_chalk,\n     method_resolution, op,\n     primitive::{self, UintTy},\n     static_lifetime, to_chalk_trait_id,\n     traits::FnTrait,\n     utils::{generics, Generics},\n-    AdtId, Binders, CallableDefId, ConstValue, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n+    AdtId, Binders, CallableDefId, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n     ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyExt, TyKind,\n };\n \n@@ -724,7 +722,7 @@ impl<'a> InferenceContext<'a> {\n                         for expr in items.iter() {\n                             self.infer_expr_coerce(*expr, &Expectation::has_type(elem_ty.clone()));\n                         }\n-                        Some(items.len())\n+                        Some(items.len() as u64)\n                     }\n                     Array::Repeat { initializer, repeat } => {\n                         self.infer_expr_coerce(\n@@ -737,32 +735,26 @@ impl<'a> InferenceContext<'a> {\n                                 TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner),\n                             ),\n                         );\n-                        // FIXME: support length for Repeat array expressions\n-                        None\n+\n+                        let repeat_expr = &self.body.exprs[*repeat];\n+                        consteval::eval_usize(repeat_expr)\n                     }\n                 };\n \n-                let cd = ConstData {\n-                    ty: TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner),\n-                    value: ConstValue::Concrete(chalk_ir::ConcreteConst {\n-                        interned: len\n-                            .map(|len| ConstScalar::Usize(len as u64))\n-                            .unwrap_or(ConstScalar::Unknown),\n-                    }),\n-                };\n-                TyKind::Array(elem_ty, cd.intern(&Interner)).intern(&Interner)\n+                TyKind::Array(elem_ty, consteval::usize_const(len)).intern(&Interner)\n             }\n             Expr::Literal(lit) => match lit {\n                 Literal::Bool(..) => TyKind::Scalar(Scalar::Bool).intern(&Interner),\n                 Literal::String(..) => {\n                     TyKind::Ref(Mutability::Not, static_lifetime(), TyKind::Str.intern(&Interner))\n                         .intern(&Interner)\n                 }\n-                Literal::ByteString(..) => {\n+                Literal::ByteString(bs) => {\n                     let byte_type = TyKind::Scalar(Scalar::Uint(UintTy::U8)).intern(&Interner);\n \n-                    let array_type =\n-                        TyKind::Array(byte_type, dummy_usize_const()).intern(&Interner);\n+                    let len = consteval::usize_const(Some(bs.len() as u64));\n+\n+                    let array_type = TyKind::Array(byte_type, len).intern(&Interner);\n                     TyKind::Ref(Mutability::Not, static_lifetime(), array_type).intern(&Interner)\n                 }\n                 Literal::Char(..) => TyKind::Scalar(Scalar::Char).intern(&Interner),"}, {"sha": "7b41197477a75d2fa6cd1170a2ddec9e7a875d02", "filename": "crates/hir_ty/src/interner.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finterner.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -1,11 +1,12 @@\n //! Implementation of the Chalk `Interner` trait, which allows customizing the\n //! representation of the various objects Chalk deals with (types, goals etc.).\n \n-use crate::{chalk_db, consts::ConstScalar, tls, GenericArg};\n+use crate::{chalk_db, tls, GenericArg};\n use base_db::salsa::InternId;\n use chalk_ir::{Goal, GoalData};\n use hir_def::{\n     intern::{impl_internable, InternStorage, Internable, Interned},\n+    type_ref::ConstScalar,\n     TypeAliasId,\n };\n use smallvec::SmallVec;"}, {"sha": "15b61bedc18f004d95c66415e9119346723d7caa", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -10,9 +10,9 @@ mod autoderef;\n mod builder;\n mod chalk_db;\n mod chalk_ext;\n+pub mod consteval;\n mod infer;\n mod interner;\n-mod consts;\n mod lower;\n mod mapping;\n mod op;\n@@ -38,9 +38,13 @@ use chalk_ir::{\n     interner::HasInterner,\n     UintTy,\n };\n-use hir_def::{expr::ExprId, type_ref::Rawness, TypeParamId};\n+use hir_def::{\n+    expr::ExprId,\n+    type_ref::{ConstScalar, Rawness},\n+    TypeParamId,\n+};\n \n-use crate::{consts::ConstScalar, db::HirDatabase, display::HirDisplay, utils::generics};\n+use crate::{db::HirDatabase, display::HirDisplay, utils::generics};\n \n pub use autoderef::autoderef;\n pub use builder::TyBuilder;"}, {"sha": "bd8bb602864b41027191671d4775ba81bfa285d2", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -29,8 +29,8 @@ use stdx::impl_from;\n use syntax::ast;\n \n use crate::{\n+    consteval,\n     db::HirDatabase,\n-    dummy_usize_const,\n     mapping::ToChalk,\n     static_lifetime, to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n     utils::{\n@@ -172,11 +172,12 @@ impl<'a> TyLoweringContext<'a> {\n                 let inner_ty = self.lower_ty(inner);\n                 TyKind::Raw(lower_to_chalk_mutability(*mutability), inner_ty).intern(&Interner)\n             }\n-            TypeRef::Array(inner) => {\n+            TypeRef::Array(inner, len) => {\n                 let inner_ty = self.lower_ty(inner);\n-                // FIXME: we don't have length info here because we don't store an expression for\n-                // the length\n-                TyKind::Array(inner_ty, dummy_usize_const()).intern(&Interner)\n+\n+                let const_len = consteval::usize_const(len.as_usize());\n+\n+                TyKind::Array(inner_ty, const_len).intern(&Interner)\n             }\n             TypeRef::Slice(inner) => {\n                 let inner_ty = self.lower_ty(inner);"}, {"sha": "19047106912aa7f6c7f2db0cbb25d43631d35058", "filename": "crates/hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -64,42 +64,42 @@ fn coerce_places() {\n             81..92 '{ loop {} }': T\n             83..90 'loop {}': !\n             88..90 '{}': ()\n-            121..132 '{ loop {} }': *mut [T; _]\n+            121..132 '{ loop {} }': *mut [T; 2]\n             123..130 'loop {}': !\n             128..130 '{}': ()\n             159..172 '{     gen() }': *mut [U]\n-            165..168 'gen': fn gen<U>() -> *mut [U; _]\n-            165..170 'gen()': *mut [U; _]\n+            165..168 'gen': fn gen<U>() -> *mut [U; 2]\n+            165..170 'gen()': *mut [U; 2]\n             185..419 '{     ...rr); }': ()\n-            195..198 'arr': &[u8; _]\n+            195..198 'arr': &[u8; 1]\n             211..215 '&[1]': &[u8; 1]\n             212..215 '[1]': [u8; 1]\n             213..214 '1': u8\n             226..227 'a': &[u8]\n-            236..239 'arr': &[u8; _]\n+            236..239 'arr': &[u8; 1]\n             249..250 'b': u8\n             253..254 'f': fn f<u8>(&[u8]) -> u8\n             253..259 'f(arr)': u8\n-            255..258 'arr': &[u8; _]\n+            255..258 'arr': &[u8; 1]\n             269..270 'c': &[u8]\n             279..286 '{ arr }': &[u8]\n-            281..284 'arr': &[u8; _]\n+            281..284 'arr': &[u8; 1]\n             296..297 'd': u8\n             300..301 'g': fn g<u8>(S<&[u8]>) -> u8\n             300..315 'g(S { a: arr })': u8\n             302..314 'S { a: arr }': S<&[u8]>\n-            309..312 'arr': &[u8; _]\n-            325..326 'e': [&[u8]; _]\n+            309..312 'arr': &[u8; 1]\n+            325..326 'e': [&[u8]; 1]\n             340..345 '[arr]': [&[u8]; 1]\n-            341..344 'arr': &[u8; _]\n-            355..356 'f': [&[u8]; _]\n-            370..378 '[arr; 2]': [&[u8]; _]\n-            371..374 'arr': &[u8; _]\n+            341..344 'arr': &[u8; 1]\n+            355..356 'f': [&[u8]; 2]\n+            370..378 '[arr; 2]': [&[u8]; 2]\n+            371..374 'arr': &[u8; 1]\n             376..377 '2': usize\n             388..389 'g': (&[u8], &[u8])\n             406..416 '(arr, arr)': (&[u8], &[u8])\n-            407..410 'arr': &[u8; _]\n-            412..415 'arr': &[u8; _]\n+            407..410 'arr': &[u8; 1]\n+            412..415 'arr': &[u8; 1]\n         \"#]],\n     );\n }\n@@ -159,7 +159,7 @@ fn infer_custom_coerce_unsized() {\n         impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n         impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n         \"#,\n-        expect![[r\"\n+        expect![[r#\"\n             257..258 'x': A<[T]>\n             278..283 '{ x }': A<[T]>\n             280..281 'x': A<[T]>\n@@ -169,23 +169,23 @@ fn infer_custom_coerce_unsized() {\n             333..334 'x': C<[T]>\n             354..359 '{ x }': C<[T]>\n             356..357 'x': C<[T]>\n-            369..370 'a': A<[u8; _]>\n-            384..385 'b': B<[u8; _]>\n-            399..400 'c': C<[u8; _]>\n+            369..370 'a': A<[u8; 2]>\n+            384..385 'b': B<[u8; 2]>\n+            399..400 'c': C<[u8; 2]>\n             414..480 '{     ...(c); }': ()\n             424..425 'd': A<[{unknown}]>\n             428..432 'foo1': fn foo1<{unknown}>(A<[{unknown}]>) -> A<[{unknown}]>\n             428..435 'foo1(a)': A<[{unknown}]>\n-            433..434 'a': A<[u8; _]>\n+            433..434 'a': A<[u8; 2]>\n             445..446 'e': B<[u8]>\n             449..453 'foo2': fn foo2<u8>(B<[u8]>) -> B<[u8]>\n             449..456 'foo2(b)': B<[u8]>\n-            454..455 'b': B<[u8; _]>\n+            454..455 'b': B<[u8; 2]>\n             466..467 'f': C<[u8]>\n             470..474 'foo3': fn foo3<u8>(C<[u8]>) -> C<[u8]>\n             470..477 'foo3(c)': C<[u8]>\n-            475..476 'c': C<[u8; _]>\n-        \"]],\n+            475..476 'c': C<[u8; 2]>\n+        \"#]],\n     );\n }\n "}, {"sha": "787647e9f3b0cf1825d1c6978fa1b74e8b466ec8", "filename": "crates/hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -345,19 +345,19 @@ fn infer_pattern_match_arr() {\n         \"#,\n         expect![[r#\"\n             10..179 '{     ...   } }': ()\n-            20..23 'arr': [f64; _]\n+            20..23 'arr': [f64; 2]\n             36..46 '[0.0, 1.0]': [f64; 2]\n             37..40 '0.0': f64\n             42..45 '1.0': f64\n             52..177 'match ...     }': ()\n-            58..61 'arr': [f64; _]\n-            72..80 '[1.0, a]': [f64; _]\n+            58..61 'arr': [f64; 2]\n+            72..80 '[1.0, a]': [f64; 2]\n             73..76 '1.0': f64\n             73..76 '1.0': f64\n             78..79 'a': f64\n             84..110 '{     ...     }': ()\n             98..99 'a': f64\n-            120..126 '[b, c]': [f64; _]\n+            120..126 '[b, c]': [f64; 2]\n             121..122 'b': f64\n             124..125 'c': f64\n             130..171 '{     ...     }': ()"}, {"sha": "a9cd42186ed01af5c1eb42c99777ea520f329021", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 42, "deletions": 23, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -488,23 +488,34 @@ fn infer_literals() {\n                 mod foo {}\n             \"#;\n             br#\"yolo\"#;\n+            let a = b\"a\\x20b\\\n+            c\";\n+            let b = br\"g\\\n+h\";\n+            let c = br#\"x\"\\\"yb\"#;\n         }\n         \"##,\n         expect![[r##\"\n-            10..216 '{     ...o\"#; }': ()\n-            16..20 '5i32': i32\n-            26..30 '5f32': f32\n-            36..40 '5f64': f64\n-            46..53 '\"hello\"': &str\n-            59..67 'b\"bytes\"': &[u8; _]\n-            73..76 ''c'': char\n-            82..86 'b'b'': u8\n-            92..96 '3.14': f64\n-            102..106 '5000': i32\n-            112..117 'false': bool\n-            123..127 'true': bool\n-            133..197 'r#\"   ...    \"#': &str\n-            203..213 'br#\"yolo\"#': &[u8; _]\n+            18..478 '{     ...     }': ()\n+            32..36 '5i32': i32\n+            50..54 '5f32': f32\n+            68..72 '5f64': f64\n+            86..93 '\"hello\"': &str\n+            107..115 'b\"bytes\"': &[u8; 5]\n+            129..132 ''c'': char\n+            146..150 'b'b'': u8\n+            164..168 '3.14': f64\n+            182..186 '5000': i32\n+            200..205 'false': bool\n+            219..223 'true': bool\n+            237..333 'r#\"   ...    \"#': &str\n+            347..357 'br#\"yolo\"#': &[u8; 4]\n+            375..376 'a': &[u8; 4]\n+            379..403 'b\"a\\x2...    c\"': &[u8; 4]\n+            421..422 'b': &[u8; 4]\n+            425..433 'br\"g\\ h\"': &[u8; 4]\n+            451..452 'c': &[u8; 6]\n+            455..467 'br#\"x\"\\\"yb\"#': &[u8; 6]\n         \"##]],\n     );\n }\n@@ -1260,12 +1271,14 @@ fn infer_array() {\n \n             let b = [a, [\"b\"]];\n             let x: [u8; 0] = [];\n+            // FIXME: requires const evaluation/taking type from rhs somehow\n+            let y: [u8; 2+2] = [1,2,3,4];\n         }\n         \"#,\n         expect![[r#\"\n             8..9 'x': &str\n             17..18 'y': isize\n-            27..292 '{     ... []; }': ()\n+            27..395 '{     ...,4]; }': ()\n             37..38 'a': [&str; 1]\n             41..44 '[x]': [&str; 1]\n             42..43 'x': &str\n@@ -1313,8 +1326,14 @@ fn infer_array() {\n             255..256 'a': [&str; 1]\n             258..263 '[\"b\"]': [&str; 1]\n             259..262 '\"b\"': &str\n-            274..275 'x': [u8; _]\n+            274..275 'x': [u8; 0]\n             287..289 '[]': [u8; 0]\n+            368..369 'y': [u8; _]\n+            383..392 '[1,2,3,4]': [u8; 4]\n+            384..385 '1': u8\n+            386..387 '2': u8\n+            388..389 '3': u8\n+            390..391 '4': u8\n         \"#]],\n     );\n }\n@@ -2409,38 +2428,38 @@ fn infer_operator_overload() {\n             320..422 '{     ...     }': V2\n             334..335 'x': f32\n             338..342 'self': V2\n-            338..344 'self.0': [f32; _]\n+            338..344 'self.0': [f32; 2]\n             338..347 'self.0[0]': {unknown}\n             338..358 'self.0...s.0[0]': f32\n             345..346 '0': i32\n             350..353 'rhs': V2\n-            350..355 'rhs.0': [f32; _]\n+            350..355 'rhs.0': [f32; 2]\n             350..358 'rhs.0[0]': {unknown}\n             356..357 '0': i32\n             372..373 'y': f32\n             376..380 'self': V2\n-            376..382 'self.0': [f32; _]\n+            376..382 'self.0': [f32; 2]\n             376..385 'self.0[1]': {unknown}\n             376..396 'self.0...s.0[1]': f32\n             383..384 '1': i32\n             388..391 'rhs': V2\n-            388..393 'rhs.0': [f32; _]\n+            388..393 'rhs.0': [f32; 2]\n             388..396 'rhs.0[1]': {unknown}\n             394..395 '1': i32\n-            406..408 'V2': V2([f32; _]) -> V2\n+            406..408 'V2': V2([f32; 2]) -> V2\n             406..416 'V2([x, y])': V2\n             409..415 '[x, y]': [f32; 2]\n             410..411 'x': f32\n             413..414 'y': f32\n             436..519 '{     ... vb; }': ()\n             446..448 'va': V2\n-            451..453 'V2': V2([f32; _]) -> V2\n+            451..453 'V2': V2([f32; 2]) -> V2\n             451..465 'V2([0.0, 1.0])': V2\n             454..464 '[0.0, 1.0]': [f32; 2]\n             455..458 '0.0': f32\n             460..463 '1.0': f32\n             475..477 'vb': V2\n-            480..482 'V2': V2([f32; _]) -> V2\n+            480..482 'V2': V2([f32; 2]) -> V2\n             480..494 'V2([0.0, 1.0])': V2\n             483..493 '[0.0, 1.0]': [f32; 2]\n             484..487 '0.0': f32"}, {"sha": "f80cf987985e1d9e70c4474b781a1c42bc0d4518", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -3474,3 +3474,100 @@ fn main(){\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn array_length() {\n+    check_infer(\n+        r#\"\n+trait T {\n+    type Output;\n+    fn do_thing(&self) -> Self::Output;\n+}\n+\n+impl T for [u8; 4] {\n+    type Output = usize;\n+    fn do_thing(&self) -> Self::Output {\n+        2\n+    }\n+}\n+\n+impl T for [u8; 2] {\n+    type Output = u8;\n+    fn do_thing(&self) -> Self::Output {\n+        2\n+    }\n+}\n+\n+fn main() {\n+    let v = [0u8; 2];\n+    let v2 = v.do_thing();\n+    let v3 = [0u8; 4];\n+    let v4 = v3.do_thing();\n+}\n+\"#,\n+        expect![[r#\"\n+            44..48 'self': &Self\n+            133..137 'self': &[u8; 4]\n+            155..172 '{     ...     }': usize\n+            165..166 '2': usize\n+            236..240 'self': &[u8; 2]\n+            258..275 '{     ...     }': u8\n+            268..269 '2': u8\n+            289..392 '{     ...g(); }': ()\n+            299..300 'v': [u8; 2]\n+            303..311 '[0u8; 2]': [u8; 2]\n+            304..307 '0u8': u8\n+            309..310 '2': usize\n+            321..323 'v2': u8\n+            326..327 'v': [u8; 2]\n+            326..338 'v.do_thing()': u8\n+            348..350 'v3': [u8; 4]\n+            353..361 '[0u8; 4]': [u8; 4]\n+            354..357 '0u8': u8\n+            359..360 '4': usize\n+            371..373 'v4': usize\n+            376..378 'v3': [u8; 4]\n+            376..389 'v3.do_thing()': usize\n+        \"#]],\n+    )\n+}\n+\n+// FIXME: We should infer the length of the returned array :)\n+#[test]\n+fn const_generics() {\n+    check_infer(\n+        r#\"\n+trait T {\n+    type Output;\n+    fn do_thing(&self) -> Self::Output;\n+}\n+\n+impl<const L: usize> T for [u8; L] {\n+    type Output = [u8; L];\n+    fn do_thing(&self) -> Self::Output {\n+        *self\n+    }\n+}\n+\n+fn main() {\n+    let v = [0u8; 2];\n+    let v2 = v.do_thing();\n+}\n+\"#,\n+        expect![[r#\"\n+            44..48 'self': &Self\n+            151..155 'self': &[u8; _]\n+            173..194 '{     ...     }': [u8; _]\n+            183..188 '*self': [u8; _]\n+            184..188 'self': &[u8; _]\n+            208..260 '{     ...g(); }': ()\n+            218..219 'v': [u8; 2]\n+            222..230 '[0u8; 2]': [u8; 2]\n+            223..226 '0u8': u8\n+            228..229 '2': usize\n+            240..242 'v2': [u8; _]\n+            245..246 'v': [u8; 2]\n+            245..257 'v.do_thing()': [u8; _]\n+        \"#]],\n+    )\n+}"}, {"sha": "c67ccd1a9f7e9731dae814878da28abae7799381", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -4,7 +4,7 @@ use ide_assists::utils::extract_trivial_expression;\n use itertools::Itertools;\n use syntax::{\n     algo::non_trivia_sibling,\n-    ast::{self, AstNode, AstToken},\n+    ast::{self, AstNode, AstToken, IsString},\n     Direction, NodeOrToken, SourceFile,\n     SyntaxKind::{self, USE_TREE, WHITESPACE},\n     SyntaxNode, SyntaxToken, TextRange, TextSize, T,"}, {"sha": "4269d339ebfdcc6ed7a33d06c59cedbf34beeabb", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -6,7 +6,7 @@ use either::Either;\n use hir::{InFile, Semantics};\n use ide_db::{call_info::ActiveParameter, helpers::rust_doc::is_rust_fence, SymbolKind};\n use syntax::{\n-    ast::{self, AstNode},\n+    ast::{self, AstNode, IsString},\n     AstToken, NodeOrToken, SyntaxNode, SyntaxToken, TextRange, TextSize,\n };\n "}, {"sha": "36589203d5a97b2f894aa7f77261dfbd52ed8ffe", "filename": "crates/ide_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -198,6 +198,34 @@ fn main() {\n         )\n     }\n \n+    /// https://github.com/rust-analyzer/rust-analyzer/issues/2922\n+    #[test]\n+    fn regression_issue_2922() {\n+        check_assist(\n+            add_explicit_type,\n+            r#\"\n+fn main() {\n+    let $0v = [0.0; 2];\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let v: [f64; 2] = [0.0; 2];\n+}\n+\"#,\n+        );\n+        // note: this may break later if we add more consteval. it just needs to be something that our\n+        // consteval engine doesn't understand\n+        check_assist_not_applicable(\n+            add_explicit_type,\n+            r#\"\n+fn main() {\n+    let $0l = [0.0; 2+2];\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn default_generics_should_not_be_added() {\n         check_assist("}, {"sha": "d98a55ae4abf6a3ddf80377c1eea91418946c974", "filename": "crates/ide_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -1,6 +1,6 @@\n use std::borrow::Cow;\n \n-use syntax::{ast, AstToken, TextRange, TextSize};\n+use syntax::{ast, ast::IsString, AstToken, TextRange, TextSize};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n "}, {"sha": "0800d291e44ab2ca31a8fcec7dfd536b56fce930", "filename": "crates/ide_assists/src/handlers/replace_string_with_char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -1,4 +1,4 @@\n-use syntax::{ast, AstToken, SyntaxKind::STRING};\n+use syntax::{ast, ast::IsString, AstToken, SyntaxKind::STRING};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n "}, {"sha": "4b1e1ccee29cd7e0a5158b39d99e11f26effe484", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 61, "deletions": 20, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57bd59f351600c408ef9d2a4df3f2c10e817d0d/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=a57bd59f351600c408ef9d2a4df3f2c10e817d0d", "patch": "@@ -143,6 +143,30 @@ impl QuoteOffsets {\n     }\n }\n \n+pub trait IsString: AstToken {\n+    fn quote_offsets(&self) -> Option<QuoteOffsets> {\n+        let text = self.text();\n+        let offsets = QuoteOffsets::new(text)?;\n+        let o = self.syntax().text_range().start();\n+        let offsets = QuoteOffsets {\n+            quotes: (offsets.quotes.0 + o, offsets.quotes.1 + o),\n+            contents: offsets.contents + o,\n+        };\n+        Some(offsets)\n+    }\n+    fn text_range_between_quotes(&self) -> Option<TextRange> {\n+        self.quote_offsets().map(|it| it.contents)\n+    }\n+    fn open_quote_text_range(&self) -> Option<TextRange> {\n+        self.quote_offsets().map(|it| it.quotes.0)\n+    }\n+    fn close_quote_text_range(&self) -> Option<TextRange> {\n+        self.quote_offsets().map(|it| it.quotes.1)\n+    }\n+}\n+\n+impl IsString for ast::String {}\n+\n impl ast::String {\n     pub fn is_raw(&self) -> bool {\n         self.text().starts_with('r')\n@@ -187,32 +211,49 @@ impl ast::String {\n             (false, false) => Some(Cow::Owned(buf)),\n         }\n     }\n-\n-    pub fn quote_offsets(&self) -> Option<QuoteOffsets> {\n-        let text = self.text();\n-        let offsets = QuoteOffsets::new(text)?;\n-        let o = self.syntax().text_range().start();\n-        let offsets = QuoteOffsets {\n-            quotes: (offsets.quotes.0 + o, offsets.quotes.1 + o),\n-            contents: offsets.contents + o,\n-        };\n-        Some(offsets)\n-    }\n-    pub fn text_range_between_quotes(&self) -> Option<TextRange> {\n-        self.quote_offsets().map(|it| it.contents)\n-    }\n-    pub fn open_quote_text_range(&self) -> Option<TextRange> {\n-        self.quote_offsets().map(|it| it.quotes.0)\n-    }\n-    pub fn close_quote_text_range(&self) -> Option<TextRange> {\n-        self.quote_offsets().map(|it| it.quotes.1)\n-    }\n }\n \n+impl IsString for ast::ByteString {}\n+\n impl ast::ByteString {\n     pub fn is_raw(&self) -> bool {\n         self.text().starts_with(\"br\")\n     }\n+\n+    pub fn value(&self) -> Option<Cow<'_, [u8]>> {\n+        if self.is_raw() {\n+            let text = self.text();\n+            let text =\n+                &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n+            return Some(Cow::Borrowed(text.as_bytes()));\n+        }\n+\n+        let text = self.text();\n+        let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n+\n+        let mut buf: Vec<u8> = Vec::new();\n+        let mut text_iter = text.chars();\n+        let mut has_error = false;\n+        unescape_literal(text, Mode::ByteStr, &mut |char_range, unescaped_char| match (\n+            unescaped_char,\n+            buf.capacity() == 0,\n+        ) {\n+            (Ok(c), false) => buf.push(c as u8),\n+            (Ok(c), true) if char_range.len() == 1 && Some(c) == text_iter.next() => (),\n+            (Ok(c), true) => {\n+                buf.reserve_exact(text.len());\n+                buf.extend_from_slice(&text[..char_range.start].as_bytes());\n+                buf.push(c as u8);\n+            }\n+            (Err(_), _) => has_error = true,\n+        });\n+\n+        match (has_error, buf.capacity() == 0) {\n+            (true, _) => None,\n+            (false, true) => Some(Cow::Borrowed(text.as_bytes())),\n+            (false, false) => Some(Cow::Owned(buf)),\n+        }\n+    }\n }\n \n #[derive(Debug)]"}]}