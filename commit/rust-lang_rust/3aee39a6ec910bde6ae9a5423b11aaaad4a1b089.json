{"sha": "3aee39a6ec910bde6ae9a5423b11aaaad4a1b089", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZWUzOWE2ZWM5MTBiZGU2YWU5YTU0MjNiMTFhYWFhZDRhMWIwODk=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-26T00:29:34Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-26T00:30:13Z"}, "message": "Add #[inline(never)], and also fixed inlining on vec::push", "tree": {"sha": "7b33b33d6df0ba71edbc1943a6ab0c6177726cff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b33b33d6df0ba71edbc1943a6ab0c6177726cff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089", "html_url": "https://github.com/rust-lang/rust/commit/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "987814f11e4614b8aa712eb19cff78fbbe0d34fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/987814f11e4614b8aa712eb19cff78fbbe0d34fa", "html_url": "https://github.com/rust-lang/rust/commit/987814f11e4614b8aa712eb19cff78fbbe0d34fa"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "60cb1b51be68fd31192e870ca0506e071d722d68", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=3aee39a6ec910bde6ae9a5423b11aaaad4a1b089", "patch": "@@ -108,6 +108,11 @@ impl private_methods<A> for dvec<A> {\n // almost nothing works without the copy bound due to limitations\n // around closures.\n impl extensions<A> for dvec<A> {\n+    /// Reserves space for N elements\n+    fn reserve(count: uint) {\n+        vec::reserve(self.data, count)\n+    }\n+\n     /**\n      * Swaps out the current vector and hands it off to a user-provided\n      * function `f`.  The function should transform it however is desired"}, {"sha": "c07dd9b8224cbbbc9441aa8bd81cf6deaabee853", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=3aee39a6ec910bde6ae9a5423b11aaaad4a1b089", "patch": "@@ -509,20 +509,29 @@ fn push<T>(&v: ~[const T], +initval: T) {\n         let repr: **unsafe::vec_repr = ::unsafe::reinterpret_cast(addr_of(v));\n         let fill = (**repr).fill;\n         if (**repr).alloc > fill {\n-            (**repr).fill += sys::size_of::<T>();\n-            let p = ptr::addr_of((**repr).data);\n-            let p = ptr::offset(p, fill) as *mut T;\n-            rusti::move_val_init(*p, initval);\n+            push_fast(v, initval);\n         }\n         else {\n             push_slow(v, initval);\n         }\n     }\n }\n \n+// This doesn't bother to make sure we have space.\n+#[inline(always)] // really pretty please\n+unsafe fn push_fast<T>(&v: ~[const T], +initval: T) {\n+    let repr: **unsafe::vec_repr = ::unsafe::reinterpret_cast(addr_of(v));\n+    let fill = (**repr).fill;\n+    (**repr).fill += sys::size_of::<T>();\n+    let p = ptr::addr_of((**repr).data);\n+    let p = ptr::offset(p, fill) as *mut T;\n+    rusti::move_val_init(*p, initval);\n+}\n+\n+#[inline(never)]\n fn push_slow<T>(&v: ~[const T], +initval: T) {\n     reserve_at_least(v, v.len() + 1u);\n-    push(v, initval);\n+    unsafe { push_fast(v, initval) }\n }\n \n // Unchecked vector indexing\n@@ -644,7 +653,6 @@ fn grow_fn<T>(&v: ~[const T], n: uint, op: init_op<T>) {\n  * of the vector, expands the vector by replicating `initval` to fill the\n  * intervening space.\n  */\n-#[inline(always)]\n fn grow_set<T: copy>(&v: ~[mut T], index: uint, initval: T, val: T) {\n     if index >= len(v) { grow(v, index - len(v) + 1u, initval); }\n     v[index] = val;"}, {"sha": "09f14f4f63e6f79f796e079fb8edded65bb2f8e8", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=3aee39a6ec910bde6ae9a5423b11aaaad4a1b089", "patch": "@@ -17,7 +17,8 @@ enum smallintmap<T:copy> {\n \n /// Create a smallintmap\n fn mk<T: copy>() -> smallintmap<T> {\n-    ret smallintmap_(@{v: dvec()});\n+    let v = dvec();\n+    ret smallintmap_(@{v: v});\n }\n \n /**\n@@ -26,6 +27,7 @@ fn mk<T: copy>() -> smallintmap<T> {\n  */\n #[inline(always)]\n fn insert<T: copy>(self: smallintmap<T>, key: uint, val: T) {\n+    //#error(\"inserting key %?\", key);\n     self.v.grow_set_elt(key, none, some(val));\n }\n "}, {"sha": "4587a5b8b297a9829604e67d78199836746ac432", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=3aee39a6ec910bde6ae9a5423b11aaaad4a1b089", "patch": "@@ -364,7 +364,8 @@ fn foreign_abi(attrs: ~[ast::attribute]) -> either<~str, ast::foreign_abi> {\n enum inline_attr {\n     ia_none,\n     ia_hint,\n-    ia_always\n+    ia_always,\n+    ia_never,\n }\n \n /// True if something like #[inline] is found in the list of attrs.\n@@ -376,6 +377,9 @@ fn find_inline_attr(attrs: ~[ast::attribute]) -> inline_attr {\n           ast::meta_list(@~\"inline\", items) {\n             if !vec::is_empty(find_meta_items_by_name(items, ~\"always\")) {\n                 ia_always\n+            } else if !vec::is_empty(\n+                find_meta_items_by_name(items, ~\"never\")) {\n+                ia_never\n             } else {\n                 ia_hint\n             }"}, {"sha": "b2847b3acc53e490f2c37d53ce0606cbe68da066", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=3aee39a6ec910bde6ae9a5423b11aaaad4a1b089", "patch": "@@ -545,8 +545,8 @@ fn purity_fn_family(p: purity) -> char {\n \n fn should_inline(attrs: ~[attribute]) -> bool {\n     alt attr::find_inline_attr(attrs) {\n-        attr::ia_none { false }\n-        attr::ia_hint | attr::ia_always { true }\n+        attr::ia_none | attr::ia_never  { false }\n+        attr::ia_hint | attr::ia_always { true  }\n     }\n }\n "}, {"sha": "94a4a30021db56aa35ce976f07ef9c23ecc7bab4", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aee39a6ec910bde6ae9a5423b11aaaad4a1b089/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=3aee39a6ec910bde6ae9a5423b11aaaad4a1b089", "patch": "@@ -456,6 +456,7 @@ fn set_inline_hint_if_appr(attrs: ~[ast::attribute],\n     alt attr::find_inline_attr(attrs) {\n       attr::ia_hint { set_inline_hint(llfn); }\n       attr::ia_always { set_always_inline(llfn); }\n+      attr::ia_never { set_no_inline(llfn); }\n       attr::ia_none { /* fallthrough */ }\n     }\n }"}]}