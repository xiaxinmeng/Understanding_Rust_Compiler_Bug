{"sha": "1241abbec473827acf8dbbfff8f79fe08117b967", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNDFhYmJlYzQ3MzgyN2FjZjhkYmJmZmY4Zjc5ZmUwODExN2I5Njc=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-17T15:21:06Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-18T14:49:55Z"}, "message": "Change helper functions to read/write", "tree": {"sha": "c1dae9d2e50e3ca46bfe3fa2f0306bcb86ac2e38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1dae9d2e50e3ca46bfe3fa2f0306bcb86ac2e38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1241abbec473827acf8dbbfff8f79fe08117b967", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1241abbec473827acf8dbbfff8f79fe08117b967", "html_url": "https://github.com/rust-lang/rust/commit/1241abbec473827acf8dbbfff8f79fe08117b967", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1241abbec473827acf8dbbfff8f79fe08117b967/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61da8b84282d4b44f4dd1742328867cae9e5cefc", "url": "https://api.github.com/repos/rust-lang/rust/commits/61da8b84282d4b44f4dd1742328867cae9e5cefc", "html_url": "https://github.com/rust-lang/rust/commit/61da8b84282d4b44f4dd1742328867cae9e5cefc"}], "stats": {"total": 57, "additions": 28, "deletions": 29}, "files": [{"sha": "c384b897428334e5580dfacf7f4fa2028dc8ecd3", "filename": "src/helpers.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1241abbec473827acf8dbbfff8f79fe08117b967/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1241abbec473827acf8dbbfff8f79fe08117b967/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=1241abbec473827acf8dbbfff8f79fe08117b967", "patch": "@@ -345,10 +345,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         Ok(())\n     }\n-}\n-\n \n-pub fn bytes_to_os_string<'tcx>(bytes: Vec<u8>) -> InterpResult<'tcx, OsString> {\n+    fn read_os_string(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx, OsString> {\n+        let bytes = self.eval_context_mut().memory.read_c_str(scalar)?.to_vec();\n         if cfg!(unix) {\n             Ok(std::os::unix::ffi::OsStringExt::from_vec(bytes))\n         } else {\n@@ -358,13 +357,30 @@ pub fn bytes_to_os_string<'tcx>(bytes: Vec<u8>) -> InterpResult<'tcx, OsString>\n         }\n     }\n \n-pub fn os_string_to_bytes<'tcx>(os_string: OsString) -> InterpResult<'tcx, Vec<u8>> {\n-        if cfg!(unix) {\n-            Ok(std::os::unix::ffi::OsStringExt::into_vec(os_string))\n+    fn write_os_string(&mut self, os_string: OsString, ptr: Pointer<Tag>, size: u64) -> InterpResult<'tcx> {\n+        let mut bytes = if cfg!(unix) {\n+            std::os::unix::ffi::OsStringExt::into_vec(os_string)\n         } else {\n             os_string\n                 .into_string()\n-                .map_err(|os_string| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_string).into())\n-                .map(|s| s.into_bytes())\n+                .map_err(|os_string| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_string))?\n+                .into_bytes()\n+        };\n+        // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n+        // terminator to memory using the `ptr` pointer would cause an overflow.\n+        if (bytes.len() as u64) < size {\n+            // We add a `/0` terminator\n+            bytes.push(0);\n+            let this = self.eval_context_mut();\n+            let tcx = &{ this.tcx.tcx };\n+            // This is ok because the buffer was strictly larger than `bytes`, so after adding the\n+            // null terminator, the buffer size is larger or equal to `bytes.len()`, meaning that\n+            // `bytes` actually fit inside tbe buffer.\n+            this.memory\n+                .get_mut(ptr.alloc_id)?\n+                .write_bytes(tcx, ptr, &bytes)\n+        } else {\n+            throw_unsup_format!(\"OsString is larger than destination\")\n         }\n     }\n+}"}, {"sha": "b344a5c5494941ae86b0d8b6bd81d344f1c7855c", "filename": "src/shims/env.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1241abbec473827acf8dbbfff8f79fe08117b967/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1241abbec473827acf8dbbfff8f79fe08117b967/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=1241abbec473827acf8dbbfff8f79fe08117b967", "patch": "@@ -127,20 +127,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // If we cannot get the current directory, we return null\n         match env::current_dir() {\n             Ok(cwd) => {\n-                // It is not clear what happens with non-utf8 paths here\n-                let mut bytes = helpers::os_string_to_bytes(cwd.into())?;\n-                // If `size` is smaller or equal than the `bytes.len()`, writing `bytes` plus the\n-                // required null terminator to memory using the `buf` pointer would cause an\n-                // overflow. The desired behavior in this case is to return null.\n-                if (bytes.len() as u64) < size {\n-                    // We add a `/0` terminator\n-                    bytes.push(0);\n-                    // This is ok because the buffer was strictly larger than `bytes`, so after\n-                    // adding the null terminator, the buffer size is larger or equal to\n-                    // `bytes.len()`, meaning that `bytes` actually fit inside tbe buffer.\n-                    this.memory\n-                        .get_mut(buf.alloc_id)?\n-                        .write_bytes(&*this.tcx, buf, &bytes)?;\n+                if this.write_os_string(cwd.into(), buf, size).is_ok() {\n                     return Ok(Scalar::Ptr(buf));\n                 }\n                 let erange = this.eval_libc(\"ERANGE\")?;\n@@ -156,10 +143,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"chdir\")?;\n \n-        let bytes = this.memory.read_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n-        let path = helpers::bytes_to_os_string(bytes.to_vec());\n+        let path = this.read_os_string(this.read_scalar(path_op)?.not_undef()?)?;\n \n-        match env::set_current_dir(path?) {\n+        match env::set_current_dir(path) {\n             Ok(()) => Ok(0),\n             Err(e) => {\n                 this.consume_io_error(e)?;"}, {"sha": "d4f9fde24e1e38e3191e1c9a9874a2f30f0c02a7", "filename": "src/shims/fs.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1241abbec473827acf8dbbfff8f79fe08117b967/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1241abbec473827acf8dbbfff8f79fe08117b967/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=1241abbec473827acf8dbbfff8f79fe08117b967", "patch": "@@ -94,10 +94,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_unsup_format!(\"unsupported flags {:#x}\", flag & !mirror);\n         }\n \n-        let bytes = this\n-            .memory\n-            .read_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n-        let path: std::path::PathBuf = helpers::bytes_to_os_string(bytes.to_vec())?.into();\n+        let path: std::path::PathBuf = this.read_os_string(this.read_scalar(path_op)?.not_undef()?)?.into();\n \n         let fd = options.open(path).map(|file| {\n             let mut fh = &mut this.machine.file_handler;"}]}