{"sha": "83edb647f22a6aa508565453eca79e032f3779dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZWRiNjQ3ZjIyYTZhYTUwODU2NTQ1M2VjYTc5ZTAzMmYzNzc5ZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-10T12:25:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-10T12:25:44Z"}, "message": "Auto merge of #3755 - phansch:uicleanup2, r=oli-obk\n\nUI test cleanup: Extract match_same_arms tests\n\ncc #2038", "tree": {"sha": "b28dc951f4740d150bf94006aef316ac14a75e11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b28dc951f4740d150bf94006aef316ac14a75e11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83edb647f22a6aa508565453eca79e032f3779dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83edb647f22a6aa508565453eca79e032f3779dc", "html_url": "https://github.com/rust-lang/rust/commit/83edb647f22a6aa508565453eca79e032f3779dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83edb647f22a6aa508565453eca79e032f3779dc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5725726345039830677a0aeb8389ae78ce01ff97", "url": "https://api.github.com/repos/rust-lang/rust/commits/5725726345039830677a0aeb8389ae78ce01ff97", "html_url": "https://github.com/rust-lang/rust/commit/5725726345039830677a0aeb8389ae78ce01ff97"}, {"sha": "1eeda35118096ef74096f07fd6f9624313dd98b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1eeda35118096ef74096f07fd6f9624313dd98b7", "html_url": "https://github.com/rust-lang/rust/commit/1eeda35118096ef74096f07fd6f9624313dd98b7"}], "stats": {"total": 960, "additions": 490, "deletions": 470}, "files": [{"sha": "a0a5c3890edc3512a03c6f44b68636646102be6d", "filename": "tests/ui/copies.stderr", "status": "removed", "additions": 0, "deletions": 355, "changes": 355, "blob_url": "https://github.com/rust-lang/rust/blob/5725726345039830677a0aeb8389ae78ce01ff97/tests%2Fui%2Fcopies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5725726345039830677a0aeb8389ae78ce01ff97/tests%2Fui%2Fcopies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.stderr?ref=5725726345039830677a0aeb8389ae78ce01ff97", "patch": "@@ -1,355 +0,0 @@\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:41:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         Foo { bar: 42 };\n-LL | |         0..10;\n-...  |\n-LL | |         foo();\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n-note: same as this\n-  --> $DIR/copies.rs:33:13\n-   |\n-LL |       if true {\n-   |  _____________^\n-LL | |         Foo { bar: 42 };\n-LL | |         0..10;\n-LL | |         ..;\n-...  |\n-LL | |         foo();\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:87:14\n-   |\n-LL |           _ => {\n-   |  ______________^\n-LL | |             //~ ERROR match arms have same body\n-LL | |             foo();\n-LL | |             let mut a = 42 + [23].len() as i32;\n-...  |\n-LL | |             a\n-LL | |         },\n-   | |_________^\n-   |\n-   = note: `-D clippy::match-same-arms` implied by `-D warnings`\n-note: same as this\n-  --> $DIR/copies.rs:78:15\n-   |\n-LL |           42 => {\n-   |  _______________^\n-LL | |             foo();\n-LL | |             let mut a = 42 + [23].len() as i32;\n-LL | |             if true {\n-...  |\n-LL | |             a\n-LL | |         },\n-   | |_________^\n-note: `42` has the same arm body as the `_` wildcard, consider removing it`\n-  --> $DIR/copies.rs:78:15\n-   |\n-LL |           42 => {\n-   |  _______________^\n-LL | |             foo();\n-LL | |             let mut a = 42 + [23].len() as i32;\n-LL | |             if true {\n-...  |\n-LL | |             a\n-LL | |         },\n-   | |_________^\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:102:14\n-   |\n-LL |         _ => 0, //~ ERROR match arms have same body\n-   |              ^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:100:19\n-   |\n-LL |         Abc::A => 0,\n-   |                   ^\n-note: `Abc::A` has the same arm body as the `_` wildcard, consider removing it`\n-  --> $DIR/copies.rs:100:19\n-   |\n-LL |         Abc::A => 0,\n-   |                   ^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:111:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         42\n-LL | |     };\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:109:21\n-   |\n-LL |       let _ = if true {\n-   |  _____________________^\n-LL | |         42\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:125:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         for _ in &[42] {\n-LL | |             let foo: &Option<_> = &Some::<u8>(42);\n-...  |\n-LL | |         }\n-LL | |     }\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:116:13\n-   |\n-LL |       if true {\n-   |  _____________^\n-LL | |         for _ in &[42] {\n-LL | |             let foo: &Option<_> = &Some::<u8>(42);\n-LL | |             if true {\n-...  |\n-LL | |         }\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:144:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         let bar = if true { 42 } else { 43 };\n-LL | |\n-...  |\n-LL | |         bar + 1;\n-LL | |     }\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:137:13\n-   |\n-LL |       if true {\n-   |  _____________^\n-LL | |         let bar = if true { 42 } else { 43 };\n-LL | |\n-LL | |         while foo() {\n-...  |\n-LL | |         bar + 1;\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:174:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         if let Some(a) = Some(42) {}\n-LL | |     }\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:172:13\n-   |\n-LL |       if true {\n-   |  _____________^\n-LL | |         if let Some(a) = Some(42) {}\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:181:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         if let (1, .., 3) = (1, 2, 3) {}\n-LL | |     }\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:179:13\n-   |\n-LL |       if true {\n-   |  _____________^\n-LL | |         if let (1, .., 3) = (1, 2, 3) {}\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:230:15\n-   |\n-LL |         51 => foo(), //~ ERROR match arms have same body\n-   |               ^^^^^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:229:15\n-   |\n-LL |         42 => foo(),\n-   |               ^^^^^\n-note: consider refactoring into `42 | 51`\n-  --> $DIR/copies.rs:229:15\n-   |\n-LL |         42 => foo(),\n-   |               ^^^^^\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:236:17\n-   |\n-LL |         None => 24, //~ ERROR match arms have same body\n-   |                 ^^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:235:20\n-   |\n-LL |         Some(_) => 24,\n-   |                    ^^\n-note: consider refactoring into `Some(_) | None`\n-  --> $DIR/copies.rs:235:20\n-   |\n-LL |         Some(_) => 24,\n-   |                    ^^\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:258:28\n-   |\n-LL |         (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n-   |                            ^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:257:28\n-   |\n-LL |         (Some(a), None) => bar(a),\n-   |                            ^^^^^^\n-note: consider refactoring into `(Some(a), None) | (None, Some(a))`\n-  --> $DIR/copies.rs:257:28\n-   |\n-LL |         (Some(a), None) => bar(a),\n-   |                            ^^^^^^\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:264:26\n-   |\n-LL |         (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n-   |                          ^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:263:26\n-   |\n-LL |         (Some(a), ..) => bar(a),\n-   |                          ^^^^^^\n-note: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n-  --> $DIR/copies.rs:263:26\n-   |\n-LL |         (Some(a), ..) => bar(a),\n-   |                          ^^^^^^\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:270:20\n-   |\n-LL |         (.., 3) => 42, //~ ERROR match arms have same body\n-   |                    ^^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:269:23\n-   |\n-LL |         (1, .., 3) => 42,\n-   |                       ^^\n-note: consider refactoring into `(1, .., 3) | (.., 3)`\n-  --> $DIR/copies.rs:269:23\n-   |\n-LL |         (1, .., 3) => 42,\n-   |                       ^^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:276:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         0.0\n-LL | |     };\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:274:21\n-   |\n-LL |       let _ = if true {\n-   |  _____________________^\n-LL | |         0.0\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:283:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         -0.0\n-LL | |     };\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:281:21\n-   |\n-LL |       let _ = if true {\n-   |  _____________________^\n-LL | |         -0.0\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:296:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         std::f32::NAN\n-LL | |     };\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:294:21\n-   |\n-LL |       let _ = if true {\n-   |  _____________________^\n-LL | |         std::f32::NAN\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:314:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         try!(Ok(\"foo\"));\n-LL | |     }\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:312:13\n-   |\n-LL |       if true {\n-   |  _____________^\n-LL | |         try!(Ok(\"foo\"));\n-LL | |     } else {\n-   | |_____^\n-\n-error: aborting due to 17 previous errors\n-"}, {"sha": "eef2ef141176b64c32d62a6b1b94aa2ab9490549", "filename": "tests/ui/if_same_then_else.rs", "status": "renamed", "additions": 20, "deletions": 115, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/83edb647f22a6aa508565453eca79e032f3779dc/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83edb647f22a6aa508565453eca79e032f3779dc/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=83edb647f22a6aa508565453eca79e032f3779dc", "patch": "@@ -1,34 +1,24 @@\n+#![warn(clippy::if_same_then_else)]\n #![allow(\n     clippy::blacklisted_name,\n     clippy::collapsible_if,\n     clippy::cyclomatic_complexity,\n     clippy::eq_op,\n-    clippy::needless_continue,\n     clippy::needless_return,\n     clippy::never_loop,\n     clippy::no_effect,\n     clippy::zero_divided_by_zero,\n     clippy::unused_unit\n )]\n \n-fn bar<T>(_: T) {}\n-fn foo() -> bool {\n-    unimplemented!()\n-}\n-\n struct Foo {\n     bar: u8,\n }\n \n-pub enum Abc {\n-    A,\n-    B,\n-    C,\n+fn foo() -> bool {\n+    unimplemented!()\n }\n \n-#[warn(clippy::if_same_then_else)]\n-#[warn(clippy::match_same_arms)]\n-#[allow(clippy::unused_unit)]\n fn if_same_then_else() -> Result<&'static str, ()> {\n     if true {\n         Foo { bar: 42 };\n@@ -74,34 +64,25 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         foo();\n     }\n \n-    let _ = match 42 {\n-        42 => {\n-            foo();\n-            let mut a = 42 + [23].len() as i32;\n-            if true {\n-                a += 7;\n-            }\n-            a = -31 - a;\n-            a\n-        },\n-        _ => {\n-            //~ ERROR match arms have same body\n-            foo();\n-            let mut a = 42 + [23].len() as i32;\n-            if true {\n-                a += 7;\n-            }\n-            a = -31 - a;\n-            a\n-        },\n+    let _ = if true {\n+        0.0\n+    } else {\n+        //~ ERROR same body as `if` block\n+        0.0\n     };\n \n-    let _ = match Abc::A {\n-        Abc::A => 0,\n-        Abc::B => 1,\n-        _ => 0, //~ ERROR match arms have same body\n+    let _ = if true {\n+        -0.0\n+    } else {\n+        //~ ERROR same body as `if` block\n+        -0.0\n     };\n \n+    let _ = if true { 0.0 } else { -0.0 };\n+\n+    // Different NaNs\n+    let _ = if true { 0.0 / 0.0 } else { std::f32::NAN };\n+\n     if true {\n         foo();\n     }\n@@ -225,71 +206,6 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         if let Some(a) = Some(43) {}\n     }\n \n-    let _ = match 42 {\n-        42 => foo(),\n-        51 => foo(), //~ ERROR match arms have same body\n-        _ => true,\n-    };\n-\n-    let _ = match Some(42) {\n-        Some(_) => 24,\n-        None => 24, //~ ERROR match arms have same body\n-    };\n-\n-    let _ = match Some(42) {\n-        Some(foo) => 24,\n-        None => 24,\n-    };\n-\n-    let _ = match Some(42) {\n-        Some(42) => 24,\n-        Some(a) => 24, // bindings are different\n-        None => 0,\n-    };\n-\n-    let _ = match Some(42) {\n-        Some(a) if a > 0 => 24,\n-        Some(a) => 24, // one arm has a guard\n-        None => 0,\n-    };\n-\n-    match (Some(42), Some(42)) {\n-        (Some(a), None) => bar(a),\n-        (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n-        _ => (),\n-    }\n-\n-    match (Some(42), Some(42)) {\n-        (Some(a), ..) => bar(a),\n-        (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n-        _ => (),\n-    }\n-\n-    match (1, 2, 3) {\n-        (1, .., 3) => 42,\n-        (.., 3) => 42, //~ ERROR match arms have same body\n-        _ => 0,\n-    };\n-\n-    let _ = if true {\n-        0.0\n-    } else {\n-        //~ ERROR same body as `if` block\n-        0.0\n-    };\n-\n-    let _ = if true {\n-        -0.0\n-    } else {\n-        //~ ERROR same body as `if` block\n-        -0.0\n-    };\n-\n-    let _ = if true { 0.0 } else { -0.0 };\n-\n-    // Different NaNs\n-    let _ = if true { 0.0 / 0.0 } else { std::f32::NAN };\n-\n     // Same NaNs\n     let _ = if true {\n         std::f32::NAN\n@@ -298,17 +214,6 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         std::f32::NAN\n     };\n \n-    let _ = match Some(()) {\n-        Some(()) => 0.0,\n-        None => -0.0,\n-    };\n-\n-    match (Some(42), Some(\"\")) {\n-        (Some(a), None) => bar(a),\n-        (None, Some(a)) => bar(a), // bindings have different types\n-        _ => (),\n-    }\n-\n     if true {\n         try!(Ok(\"foo\"));\n     } else {\n@@ -339,8 +244,6 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n }\n \n-fn main() {}\n-\n // Issue #2423. This was causing an ICE\n fn func() {\n     if true {\n@@ -355,3 +258,5 @@ fn func() {\n }\n \n fn f(val: &[u8]) {}\n+\n+fn main() {}", "previous_filename": "tests/ui/copies.rs"}, {"sha": "b170db31b85331e4fb5d87e4175d59e049c0366a", "filename": "tests/ui/if_same_then_else.stderr", "status": "added", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/83edb647f22a6aa508565453eca79e032f3779dc/tests%2Fui%2Fif_same_then_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83edb647f22a6aa508565453eca79e032f3779dc/tests%2Fui%2Fif_same_then_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.stderr?ref=83edb647f22a6aa508565453eca79e032f3779dc", "patch": "@@ -0,0 +1,214 @@\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:31:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         Foo { bar: 42 };\n+LL | |         0..10;\n+...  |\n+LL | |         foo();\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:23:13\n+   |\n+LL |       if true {\n+   |  _____________^\n+LL | |         Foo { bar: 42 };\n+LL | |         0..10;\n+LL | |         ..;\n+...  |\n+LL | |         foo();\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:69:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         0.0\n+LL | |     };\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:67:21\n+   |\n+LL |       let _ = if true {\n+   |  _____________________^\n+LL | |         0.0\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:76:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         -0.0\n+LL | |     };\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:74:21\n+   |\n+LL |       let _ = if true {\n+   |  _____________________^\n+LL | |         -0.0\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:92:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         42\n+LL | |     };\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:90:21\n+   |\n+LL |       let _ = if true {\n+   |  _____________________^\n+LL | |         42\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:106:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         for _ in &[42] {\n+LL | |             let foo: &Option<_> = &Some::<u8>(42);\n+...  |\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:97:13\n+   |\n+LL |       if true {\n+   |  _____________^\n+LL | |         for _ in &[42] {\n+LL | |             let foo: &Option<_> = &Some::<u8>(42);\n+LL | |             if true {\n+...  |\n+LL | |         }\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:125:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         let bar = if true { 42 } else { 43 };\n+LL | |\n+...  |\n+LL | |         bar + 1;\n+LL | |     }\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:118:13\n+   |\n+LL |       if true {\n+   |  _____________^\n+LL | |         let bar = if true { 42 } else { 43 };\n+LL | |\n+LL | |         while foo() {\n+...  |\n+LL | |         bar + 1;\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:155:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         if let Some(a) = Some(42) {}\n+LL | |     }\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:153:13\n+   |\n+LL |       if true {\n+   |  _____________^\n+LL | |         if let Some(a) = Some(42) {}\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:162:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         if let (1, .., 3) = (1, 2, 3) {}\n+LL | |     }\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:160:13\n+   |\n+LL |       if true {\n+   |  _____________^\n+LL | |         if let (1, .., 3) = (1, 2, 3) {}\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:212:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         std::f32::NAN\n+LL | |     };\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:210:21\n+   |\n+LL |       let _ = if true {\n+   |  _____________________^\n+LL | |         std::f32::NAN\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:219:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         try!(Ok(\"foo\"));\n+LL | |     }\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:217:13\n+   |\n+LL |       if true {\n+   |  _____________^\n+LL | |         try!(Ok(\"foo\"));\n+LL | |     } else {\n+   | |_____^\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "a1f15c0268b525b0c8036d5732b78ff69001bbda", "filename": "tests/ui/match_same_arms.rs", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/83edb647f22a6aa508565453eca79e032f3779dc/tests%2Fui%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83edb647f22a6aa508565453eca79e032f3779dc/tests%2Fui%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.rs?ref=83edb647f22a6aa508565453eca79e032f3779dc", "patch": "@@ -0,0 +1,113 @@\n+#![allow(\n+    clippy::blacklisted_name,\n+    clippy::collapsible_if,\n+    clippy::cyclomatic_complexity,\n+    clippy::eq_op,\n+    clippy::needless_continue,\n+    clippy::needless_return,\n+    clippy::no_effect,\n+    clippy::zero_divided_by_zero,\n+    clippy::unused_unit\n+)]\n+\n+fn bar<T>(_: T) {}\n+fn foo() -> bool {\n+    unimplemented!()\n+}\n+\n+pub enum Abc {\n+    A,\n+    B,\n+    C,\n+}\n+\n+#[warn(clippy::match_same_arms)]\n+#[allow(clippy::unused_unit)]\n+fn match_same_arms() {\n+    let _ = match 42 {\n+        42 => {\n+            foo();\n+            let mut a = 42 + [23].len() as i32;\n+            if true {\n+                a += 7;\n+            }\n+            a = -31 - a;\n+            a\n+        },\n+        _ => {\n+            //~ ERROR match arms have same body\n+            foo();\n+            let mut a = 42 + [23].len() as i32;\n+            if true {\n+                a += 7;\n+            }\n+            a = -31 - a;\n+            a\n+        },\n+    };\n+\n+    let _ = match Abc::A {\n+        Abc::A => 0,\n+        Abc::B => 1,\n+        _ => 0, //~ ERROR match arms have same body\n+    };\n+\n+    let _ = match 42 {\n+        42 => foo(),\n+        51 => foo(), //~ ERROR match arms have same body\n+        _ => true,\n+    };\n+\n+    let _ = match Some(42) {\n+        Some(_) => 24,\n+        None => 24, //~ ERROR match arms have same body\n+    };\n+\n+    let _ = match Some(42) {\n+        Some(foo) => 24,\n+        None => 24,\n+    };\n+\n+    let _ = match Some(42) {\n+        Some(42) => 24,\n+        Some(a) => 24, // bindings are different\n+        None => 0,\n+    };\n+\n+    let _ = match Some(42) {\n+        Some(a) if a > 0 => 24,\n+        Some(a) => 24, // one arm has a guard\n+        None => 0,\n+    };\n+\n+    match (Some(42), Some(42)) {\n+        (Some(a), None) => bar(a),\n+        (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n+        _ => (),\n+    }\n+\n+    match (Some(42), Some(42)) {\n+        (Some(a), ..) => bar(a),\n+        (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n+        _ => (),\n+    }\n+\n+    match (1, 2, 3) {\n+        (1, .., 3) => 42,\n+        (.., 3) => 42, //~ ERROR match arms have same body\n+        _ => 0,\n+    };\n+\n+    let _ = match Some(()) {\n+        Some(()) => 0.0,\n+        None => -0.0,\n+    };\n+\n+    match (Some(42), Some(\"\")) {\n+        (Some(a), None) => bar(a),\n+        (None, Some(a)) => bar(a), // bindings have different types\n+        _ => (),\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9389e48a3e4b503d177e027d005f774b5d30a550", "filename": "tests/ui/match_same_arms.stderr", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/83edb647f22a6aa508565453eca79e032f3779dc/tests%2Fui%2Fmatch_same_arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83edb647f22a6aa508565453eca79e032f3779dc/tests%2Fui%2Fmatch_same_arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.stderr?ref=83edb647f22a6aa508565453eca79e032f3779dc", "patch": "@@ -0,0 +1,143 @@\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:37:14\n+   |\n+LL |           _ => {\n+   |  ______________^\n+LL | |             //~ ERROR match arms have same body\n+LL | |             foo();\n+LL | |             let mut a = 42 + [23].len() as i32;\n+...  |\n+LL | |             a\n+LL | |         },\n+   | |_________^\n+   |\n+   = note: `-D clippy::match-same-arms` implied by `-D warnings`\n+note: same as this\n+  --> $DIR/match_same_arms.rs:28:15\n+   |\n+LL |           42 => {\n+   |  _______________^\n+LL | |             foo();\n+LL | |             let mut a = 42 + [23].len() as i32;\n+LL | |             if true {\n+...  |\n+LL | |             a\n+LL | |         },\n+   | |_________^\n+note: `42` has the same arm body as the `_` wildcard, consider removing it`\n+  --> $DIR/match_same_arms.rs:28:15\n+   |\n+LL |           42 => {\n+   |  _______________^\n+LL | |             foo();\n+LL | |             let mut a = 42 + [23].len() as i32;\n+LL | |             if true {\n+...  |\n+LL | |             a\n+LL | |         },\n+   | |_________^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:52:14\n+   |\n+LL |         _ => 0, //~ ERROR match arms have same body\n+   |              ^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms.rs:50:19\n+   |\n+LL |         Abc::A => 0,\n+   |                   ^\n+note: `Abc::A` has the same arm body as the `_` wildcard, consider removing it`\n+  --> $DIR/match_same_arms.rs:50:19\n+   |\n+LL |         Abc::A => 0,\n+   |                   ^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:57:15\n+   |\n+LL |         51 => foo(), //~ ERROR match arms have same body\n+   |               ^^^^^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms.rs:56:15\n+   |\n+LL |         42 => foo(),\n+   |               ^^^^^\n+note: consider refactoring into `42 | 51`\n+  --> $DIR/match_same_arms.rs:56:15\n+   |\n+LL |         42 => foo(),\n+   |               ^^^^^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:63:17\n+   |\n+LL |         None => 24, //~ ERROR match arms have same body\n+   |                 ^^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms.rs:62:20\n+   |\n+LL |         Some(_) => 24,\n+   |                    ^^\n+note: consider refactoring into `Some(_) | None`\n+  --> $DIR/match_same_arms.rs:62:20\n+   |\n+LL |         Some(_) => 24,\n+   |                    ^^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:85:28\n+   |\n+LL |         (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n+   |                            ^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms.rs:84:28\n+   |\n+LL |         (Some(a), None) => bar(a),\n+   |                            ^^^^^^\n+note: consider refactoring into `(Some(a), None) | (None, Some(a))`\n+  --> $DIR/match_same_arms.rs:84:28\n+   |\n+LL |         (Some(a), None) => bar(a),\n+   |                            ^^^^^^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:91:26\n+   |\n+LL |         (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n+   |                          ^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms.rs:90:26\n+   |\n+LL |         (Some(a), ..) => bar(a),\n+   |                          ^^^^^^\n+note: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n+  --> $DIR/match_same_arms.rs:90:26\n+   |\n+LL |         (Some(a), ..) => bar(a),\n+   |                          ^^^^^^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:97:20\n+   |\n+LL |         (.., 3) => 42, //~ ERROR match arms have same body\n+   |                    ^^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms.rs:96:23\n+   |\n+LL |         (1, .., 3) => 42,\n+   |                       ^^\n+note: consider refactoring into `(1, .., 3) | (.., 3)`\n+  --> $DIR/match_same_arms.rs:96:23\n+   |\n+LL |         (1, .., 3) => 42,\n+   |                       ^^\n+\n+error: aborting due to 7 previous errors\n+"}]}