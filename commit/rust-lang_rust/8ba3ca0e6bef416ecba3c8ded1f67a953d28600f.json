{"sha": "8ba3ca0e6bef416ecba3c8ded1f67a953d28600f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYTNjYTBlNmJlZjQxNmVjYmEzYzhkZWQxZjY3YTk1M2QyODYwMGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-15T22:32:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-15T22:32:51Z"}, "message": "Auto merge of #68668 - GuillaumeGomez:struct-variant-field-search, r=ollie27\n\nStruct variant field search\n\nFixes #16017.\n\nReopening of #64724.\n\ncc @tomjakubowski\ncc @ollie27\n\nr? @kinnison", "tree": {"sha": "30a66ba5e672d88811c7a2d645d0b9ef24f02a40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30a66ba5e672d88811c7a2d645d0b9ef24f02a40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ba3ca0e6bef416ecba3c8ded1f67a953d28600f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ba3ca0e6bef416ecba3c8ded1f67a953d28600f", "html_url": "https://github.com/rust-lang/rust/commit/8ba3ca0e6bef416ecba3c8ded1f67a953d28600f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ba3ca0e6bef416ecba3c8ded1f67a953d28600f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61d9231ff2604a0467987042d9ebf9ff9ea739b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/61d9231ff2604a0467987042d9ebf9ff9ea739b5", "html_url": "https://github.com/rust-lang/rust/commit/61d9231ff2604a0467987042d9ebf9ff9ea739b5"}, {"sha": "8ee30dbc1b07ad7fc842ceee6d6729a1377f7a36", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee30dbc1b07ad7fc842ceee6d6729a1377f7a36", "html_url": "https://github.com/rust-lang/rust/commit/8ee30dbc1b07ad7fc842ceee6d6729a1377f7a36"}], "stats": {"total": 72, "additions": 48, "deletions": 24}, "files": [{"sha": "3acfb82fe78407e9f4ffebcb5626817ba56732c6", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8ba3ca0e6bef416ecba3c8ded1f67a953d28600f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba3ca0e6bef416ecba3c8ded1f67a953d28600f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=8ba3ca0e6bef416ecba3c8ded1f67a953d28600f", "patch": "@@ -43,7 +43,7 @@ crate struct Cache {\n     /// found on that implementation.\n     pub impls: FxHashMap<DefId, Vec<Impl>>,\n \n-    /// Maintains a mapping of local crate `NodeId`s to the fully qualified name\n+    /// Maintains a mapping of local crate `DefId`s to the fully qualified name\n     /// and \"short type description\" of that node. This is used when generating\n     /// URLs when a type is being linked to. External paths are not located in\n     /// this map because the `External` type itself has all the information\n@@ -358,6 +358,7 @@ impl DocFolder for Cache {\n             | clean::ForeignTypeItem\n             | clean::MacroItem(..)\n             | clean::ProcMacroItem(..)\n+            | clean::VariantItem(..)\n                 if !self.stripped_mod =>\n             {\n                 // Re-exported items mean that the same id can show up twice\n@@ -373,13 +374,6 @@ impl DocFolder for Cache {\n                 }\n                 self.add_aliases(&item);\n             }\n-            // Link variants to their parent enum because pages aren't emitted\n-            // for each variant.\n-            clean::VariantItem(..) if !self.stripped_mod => {\n-                let mut stack = self.stack.clone();\n-                stack.pop();\n-                self.paths.insert(item.def_id, (stack, ItemType::Enum));\n-            }\n \n             clean::PrimitiveItem(..) => {\n                 self.add_aliases(&item);\n@@ -396,7 +390,8 @@ impl DocFolder for Cache {\n             | clean::EnumItem(..)\n             | clean::ForeignTypeItem\n             | clean::StructItem(..)\n-            | clean::UnionItem(..) => {\n+            | clean::UnionItem(..)\n+            | clean::VariantItem(..) => {\n                 self.parent_stack.push(item.def_id);\n                 self.parent_is_trait_impl = false;\n                 true\n@@ -564,7 +559,7 @@ fn extern_location(\n \n /// Builds the search index from the collected metadata\n fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n-    let mut nodeid_to_pathid = FxHashMap::default();\n+    let mut defid_to_pathid = FxHashMap::default();\n     let mut crate_items = Vec::with_capacity(cache.search_index.len());\n     let mut crate_paths = vec![];\n \n@@ -586,21 +581,21 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n         }\n     }\n \n-    // Reduce `NodeId` in paths into smaller sequential numbers,\n+    // Reduce `DefId` in paths into smaller sequential numbers,\n     // and prune the paths that do not appear in the index.\n     let mut lastpath = String::new();\n     let mut lastpathid = 0usize;\n \n     for item in search_index {\n-        item.parent_idx = item.parent.map(|nodeid| {\n-            if nodeid_to_pathid.contains_key(&nodeid) {\n-                *nodeid_to_pathid.get(&nodeid).expect(\"no pathid\")\n+        item.parent_idx = item.parent.map(|defid| {\n+            if defid_to_pathid.contains_key(&defid) {\n+                *defid_to_pathid.get(&defid).expect(\"no pathid\")\n             } else {\n                 let pathid = lastpathid;\n-                nodeid_to_pathid.insert(nodeid, pathid);\n+                defid_to_pathid.insert(defid, pathid);\n                 lastpathid += 1;\n \n-                let &(ref fqp, short) = paths.get(&nodeid).unwrap();\n+                let &(ref fqp, short) = paths.get(&defid).unwrap();\n                 crate_paths.push((short, fqp.last().unwrap().clone()));\n                 pathid\n             }"}, {"sha": "2870c6e0a6147c76c3df5342b4c6b23f950bc335", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8ba3ca0e6bef416ecba3c8ded1f67a953d28600f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/8ba3ca0e6bef416ecba3c8ded1f67a953d28600f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=8ba3ca0e6bef416ecba3c8ded1f67a953d28600f", "patch": "@@ -1364,14 +1364,15 @@ function getSearchElement() {\n             var href;\n             var type = itemTypes[item.ty];\n             var name = item.name;\n+            var path = item.path;\n \n             if (type === \"mod\") {\n-                displayPath = item.path + \"::\";\n-                href = rootPath + item.path.replace(/::/g, \"/\") + \"/\" +\n+                displayPath = path + \"::\";\n+                href = rootPath + path.replace(/::/g, \"/\") + \"/\" +\n                        name + \"/index.html\";\n             } else if (type === \"primitive\" || type === \"keyword\") {\n                 displayPath = \"\";\n-                href = rootPath + item.path.replace(/::/g, \"/\") +\n+                href = rootPath + path.replace(/::/g, \"/\") +\n                        \"/\" + type + \".\" + name + \".html\";\n             } else if (type === \"externcrate\") {\n                 displayPath = \"\";\n@@ -1380,14 +1381,27 @@ function getSearchElement() {\n                 var myparent = item.parent;\n                 var anchor = \"#\" + type + \".\" + name;\n                 var parentType = itemTypes[myparent.ty];\n+                var pageType = parentType;\n+                var pageName = myparent.name;\n+\n                 if (parentType === \"primitive\") {\n                     displayPath = myparent.name + \"::\";\n+                } else if (type === \"structfield\" && parentType === \"variant\") {\n+                    // Structfields belonging to variants are special: the\n+                    // final path element is the enum name.\n+                    var splitPath = item.path.split(\"::\");\n+                    var enumName = splitPath.pop();\n+                    path = splitPath.join(\"::\");\n+                    displayPath = path + \"::\" + enumName + \"::\" + myparent.name + \"::\";\n+                    anchor = \"#variant.\" + myparent.name + \".field.\" + name;\n+                    pageType = \"enum\";\n+                    pageName = enumName;\n                 } else {\n-                    displayPath = item.path + \"::\" + myparent.name + \"::\";\n+                    displayPath = path + \"::\" + myparent.name + \"::\";\n                 }\n-                href = rootPath + item.path.replace(/::/g, \"/\") +\n-                       \"/\" + parentType +\n-                       \".\" + myparent.name +\n+                href = rootPath + path.replace(/::/g, \"/\") +\n+                       \"/\" + pageType +\n+                       \".\" + pageName +\n                        \".html\" + anchor;\n             } else {\n                 displayPath = item.path + \"::\";\n@@ -1668,7 +1682,7 @@ function getSearchElement() {\n                 //              (String) name]\n                 var paths = rawSearchIndex[crate].p;\n \n-                // convert `paths` into an object form\n+                // convert `rawPaths` entries into object form\n                 var len = paths.length;\n                 for (i = 0; i < len; ++i) {\n                     paths[i] = {ty: paths[i][0], name: paths[i][1]};"}, {"sha": "f6deea51e7d4d070da0a946f4df28ba147e6145e", "filename": "src/test/rustdoc-js/struct-like-variant.js", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ba3ca0e6bef416ecba3c8ded1f67a953d28600f/src%2Ftest%2Frustdoc-js%2Fstruct-like-variant.js", "raw_url": "https://github.com/rust-lang/rust/raw/8ba3ca0e6bef416ecba3c8ded1f67a953d28600f/src%2Ftest%2Frustdoc-js%2Fstruct-like-variant.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fstruct-like-variant.js?ref=8ba3ca0e6bef416ecba3c8ded1f67a953d28600f", "patch": "@@ -0,0 +1,7 @@\n+const QUERY = 'name';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'struct_like_variant::Enum::Bar', 'name': 'name', 'desc': 'This is a name.' },\n+    ],\n+};"}, {"sha": "2f52a319ab9adf2b09bce918284d76f14380c694", "filename": "src/test/rustdoc-js/struct-like-variant.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ba3ca0e6bef416ecba3c8ded1f67a953d28600f/src%2Ftest%2Frustdoc-js%2Fstruct-like-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba3ca0e6bef416ecba3c8ded1f67a953d28600f/src%2Ftest%2Frustdoc-js%2Fstruct-like-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fstruct-like-variant.rs?ref=8ba3ca0e6bef416ecba3c8ded1f67a953d28600f", "patch": "@@ -0,0 +1,8 @@\n+#![crate_name = \"struct_like_variant\"]\n+\n+pub enum Enum {\n+    Bar {\n+        /// This is a name.\n+        name: String\n+    }\n+}"}]}