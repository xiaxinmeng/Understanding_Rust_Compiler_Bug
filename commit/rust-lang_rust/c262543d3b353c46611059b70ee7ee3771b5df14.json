{"sha": "c262543d3b353c46611059b70ee7ee3771b5df14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNjI1NDNkM2IzNTNjNDY2MTEwNTliNzBlZTdlZTM3NzFiNWRmMTQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-22T22:28:05Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-22T22:28:05Z"}, "message": "Fix type disagreements in lowering typeck.ty to llvm TypeRefs, enable complex.rs test.", "tree": {"sha": "98a5ee6de931bfe633b4b3a4f719d0c3d42b2b15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98a5ee6de931bfe633b4b3a4f719d0c3d42b2b15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c262543d3b353c46611059b70ee7ee3771b5df14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c262543d3b353c46611059b70ee7ee3771b5df14", "html_url": "https://github.com/rust-lang/rust/commit/c262543d3b353c46611059b70ee7ee3771b5df14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c262543d3b353c46611059b70ee7ee3771b5df14/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1090c5e69cc10f8d7e57c4790461046de068f7aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/1090c5e69cc10f8d7e57c4790461046de068f7aa", "html_url": "https://github.com/rust-lang/rust/commit/1090c5e69cc10f8d7e57c4790461046de068f7aa"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "9a4d138332f0753f7aa72abd34870a7d69dfae8d", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c262543d3b353c46611059b70ee7ee3771b5df14/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c262543d3b353c46611059b70ee7ee3771b5df14/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=c262543d3b353c46611059b70ee7ee3771b5df14", "patch": "@@ -522,6 +522,7 @@ TEST_XFAILS_SELF := $(filter-out \\\n                         arith-2.rs \\\n                         bool-not.rs \\\n                         char.rs \\\n+                        complex.rs \\\n                         dead-code-one-arm-if.rs \\\n                         deep.rs \\\n                         div-mod.rs \\"}, {"sha": "6b45ad8540ffb364fa60853605cced03ba68464a", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c262543d3b353c46611059b70ee7ee3771b5df14/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c262543d3b353c46611059b70ee7ee3771b5df14/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c262543d3b353c46611059b70ee7ee3771b5df14", "patch": "@@ -196,16 +196,16 @@ fn T_array(TypeRef t, uint n) -> TypeRef {\n     ret llvm.LLVMArrayType(t, n);\n }\n \n-fn T_vec(TypeRef t, uint n) -> TypeRef {\n-    ret T_struct(vec(T_int(),      // Refcount\n-                     T_int(),      // Alloc\n-                     T_int(),      // Fill\n-                     T_array(t, n) // Body elements\n+fn T_vec(TypeRef t) -> TypeRef {\n+    ret T_struct(vec(T_int(),       // Refcount\n+                     T_int(),       // Alloc\n+                     T_int(),       // Fill\n+                     T_array(t, 0u) // Body elements\n                      ));\n }\n \n-fn T_str(uint n) -> TypeRef {\n-    ret T_vec(T_i8(), n);\n+fn T_str() -> TypeRef {\n+    ret T_vec(T_i8());\n }\n \n fn T_box(TypeRef t) -> TypeRef {\n@@ -265,12 +265,12 @@ fn type_of_inner(@crate_ctxt cx, @typeck.ty t) -> TypeRef {\n             }\n         }\n         case (typeck.ty_char) { ret T_char(); }\n-        case (typeck.ty_str) { ret T_str(0u); }\n+        case (typeck.ty_str) { ret T_ptr(T_str()); }\n         case (typeck.ty_box(?t)) {\n             ret T_ptr(T_box(type_of(cx, t)));\n         }\n         case (typeck.ty_vec(?t)) {\n-            ret T_ptr(T_vec(type_of(cx, t), 0u));\n+            ret T_ptr(T_vec(type_of(cx, t)));\n         }\n         case (typeck.ty_tup(?elts)) {\n             let vec[TypeRef] tys = vec();\n@@ -544,7 +544,7 @@ impure fn trans_lit(@block_ctxt cx, &ast.lit lit) -> result {\n                                     vec(p2i(C_str(cx.fcx.ccx, s)),\n                                         C_int(len)));\n             sub.val = sub.bcx.build.IntToPtr(sub.val,\n-                                             T_ptr(T_str(len as uint)));\n+                                             T_ptr(T_str()));\n             cx.cleanups += vec(clean(bind trans_drop_str(_, sub.val)));\n             ret sub;\n         }"}]}