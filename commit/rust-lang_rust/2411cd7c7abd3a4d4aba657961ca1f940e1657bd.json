{"sha": "2411cd7c7abd3a4d4aba657961ca1f940e1657bd", "node_id": "C_kwDOAAsO6NoAKDI0MTFjZDdjN2FiZDNhNGQ0YWJhNjU3OTYxY2ExZjk0MGUxNjU3YmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-08T22:18:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-08T22:18:03Z"}, "message": "Rollup merge of #91245 - cameron1024:suggest-i32-u32-char-cast, r=nagisa\n\nsuggest casting between i/u32 and char\n\nAs discussed in https://github.com/rust-lang/rust/issues/91063 , this adds a suggestion for converting between i32/u32 <-> char with `as`, and a short explanation for why this is safe", "tree": {"sha": "c25a4d21c61974c8014b381375586c81009dd7d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c25a4d21c61974c8014b381375586c81009dd7d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2411cd7c7abd3a4d4aba657961ca1f940e1657bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhsS8bCRBK7hj4Ov3rIwAAaIkIAHmeVKSTRjrEY7szGrK2Y84m\nZuZmwifZreoQqi02tZUz6WTZkR4aOE0J+nAYRtsuUhdXxtvwVykZwxNAO+mO3rZz\nkd0lcIkQw2JX8iXri2Ynsx5Y75UYXCGPew+bAvz8eMGqir8egWDubcjXMIqx0YlM\n4FAxLkeLkeGAQUTO0xmJDYEoKjQONZ3h3chgB23PWmqZx9K1Br8PqL4wU0EXykkG\n7etp+3VBbcnSSxC4IgVTx/U8/2kwUQ+WOk3aDRuJ1eUUQ+6opdPYWsMR1hkflgGt\ndAzoHYrfJvJTwKsEDw+Rz9Amz+eW8BOAeR/Wsyn8+fZa7TBbvVMXyoxJSAe+F9M=\n=k27Z\n-----END PGP SIGNATURE-----\n", "payload": "tree c25a4d21c61974c8014b381375586c81009dd7d2\nparent e6b883c74f49f32cb5d1cbad3457f2b8805a4a38\nparent 37ca2eb8c269f48d5a6001394db57ab1c08c4312\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639001883 +0100\ncommitter GitHub <noreply@github.com> 1639001883 +0100\n\nRollup merge of #91245 - cameron1024:suggest-i32-u32-char-cast, r=nagisa\n\nsuggest casting between i/u32 and char\n\nAs discussed in https://github.com/rust-lang/rust/issues/91063 , this adds a suggestion for converting between i32/u32 <-> char with `as`, and a short explanation for why this is safe\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2411cd7c7abd3a4d4aba657961ca1f940e1657bd", "html_url": "https://github.com/rust-lang/rust/commit/2411cd7c7abd3a4d4aba657961ca1f940e1657bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2411cd7c7abd3a4d4aba657961ca1f940e1657bd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b883c74f49f32cb5d1cbad3457f2b8805a4a38", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b883c74f49f32cb5d1cbad3457f2b8805a4a38", "html_url": "https://github.com/rust-lang/rust/commit/e6b883c74f49f32cb5d1cbad3457f2b8805a4a38"}, {"sha": "37ca2eb8c269f48d5a6001394db57ab1c08c4312", "url": "https://api.github.com/repos/rust-lang/rust/commits/37ca2eb8c269f48d5a6001394db57ab1c08c4312", "html_url": "https://github.com/rust-lang/rust/commit/37ca2eb8c269f48d5a6001394db57ab1c08c4312"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "b7e276b69656f84d397f0c74e6d0f67f618868f8", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2411cd7c7abd3a4d4aba657961ca1f940e1657bd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2411cd7c7abd3a4d4aba657961ca1f940e1657bd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=2411cd7c7abd3a4d4aba657961ca1f940e1657bd", "patch": "@@ -1264,6 +1264,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n                 true\n             }\n+            (\n+                &ty::Uint(ty::UintTy::U32 | ty::UintTy::U64 | ty::UintTy::U128)\n+                | &ty::Int(ty::IntTy::I32 | ty::IntTy::I64 | ty::IntTy::I128),\n+                &ty::Char,\n+            ) => {\n+                err.multipart_suggestion_verbose(\n+                    &format!(\"{}, since a `char` always occupies 4 bytes\", cast_msg,),\n+                    cast_suggestion,\n+                    Applicability::MachineApplicable,\n+                );\n+                true\n+            }\n             _ => false,\n         }\n     }"}, {"sha": "379956968bd564eecf6e835a3d4de49891676945", "filename": "src/test/ui/cast/cast-int-to-char.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2411cd7c7abd3a4d4aba657961ca1f940e1657bd/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2411cd7c7abd3a4d4aba657961ca1f940e1657bd/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.rs?ref=2411cd7c7abd3a4d4aba657961ca1f940e1657bd", "patch": "@@ -0,0 +1,9 @@\n+fn foo<T>(_t: T) {}\n+\n+fn main() {\n+    foo::<u32>('0');  //~ ERROR\n+    foo::<i32>('0');  //~ ERROR\n+    foo::<u64>('0');  //~ ERROR\n+    foo::<i64>('0');  //~ ERROR\n+    foo::<char>(0u32);  //~ ERROR\n+}"}, {"sha": "55b9462db8df818e73bc23836bb26fa184ce2c81", "filename": "src/test/ui/cast/cast-int-to-char.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2411cd7c7abd3a4d4aba657961ca1f940e1657bd/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2411cd7c7abd3a4d4aba657961ca1f940e1657bd/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.stderr?ref=2411cd7c7abd3a4d4aba657961ca1f940e1657bd", "patch": "@@ -0,0 +1,53 @@\n+error[E0308]: mismatched types\n+  --> $DIR/cast-int-to-char.rs:4:16\n+   |\n+LL |     foo::<u32>('0');\n+   |                ^^^ expected `u32`, found `char`\n+   |\n+help: you can cast a `char` to a `u32`, since a `char` always occupies 4 bytes\n+   |\n+LL |     foo::<u32>('0' as u32);\n+   |                    ++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/cast-int-to-char.rs:5:16\n+   |\n+LL |     foo::<i32>('0');\n+   |                ^^^ expected `i32`, found `char`\n+   |\n+help: you can cast a `char` to an `i32`, since a `char` always occupies 4 bytes\n+   |\n+LL |     foo::<i32>('0' as i32);\n+   |                    ++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/cast-int-to-char.rs:6:16\n+   |\n+LL |     foo::<u64>('0');\n+   |                ^^^ expected `u64`, found `char`\n+   |\n+help: you can cast a `char` to a `u64`, since a `char` always occupies 4 bytes\n+   |\n+LL |     foo::<u64>('0' as u64);\n+   |                    ++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/cast-int-to-char.rs:7:16\n+   |\n+LL |     foo::<i64>('0');\n+   |                ^^^ expected `i64`, found `char`\n+   |\n+help: you can cast a `char` to an `i64`, since a `char` always occupies 4 bytes\n+   |\n+LL |     foo::<i64>('0' as i64);\n+   |                    ++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/cast-int-to-char.rs:8:17\n+   |\n+LL |     foo::<char>(0u32);\n+   |                 ^^^^ expected `char`, found `u32`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1cfe7ce1ed726f5416ad4ef3fa78e2f842b06907", "filename": "src/test/ui/match/match-type-err-first-arm.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2411cd7c7abd3a4d4aba657961ca1f940e1657bd/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2411cd7c7abd3a4d4aba657961ca1f940e1657bd/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr?ref=2411cd7c7abd3a4d4aba657961ca1f940e1657bd", "patch": "@@ -6,6 +6,11 @@ LL | fn test_func1(n: i32) -> i32 {\n LL |     match n {\n LL |         12 => 'b',\n    |               ^^^ expected `i32`, found `char`\n+   |\n+help: you can cast a `char` to an `i32`, since a `char` always occupies 4 bytes\n+   |\n+LL |         12 => 'b' as i32,\n+   |                   ++++++\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-type-err-first-arm.rs:18:14"}, {"sha": "d3516375291b97546ee218f4f5a1dd58ab6ceb74", "filename": "src/test/ui/proc-macro/macro-brackets.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2411cd7c7abd3a4d4aba657961ca1f940e1657bd/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2411cd7c7abd3a4d4aba657961ca1f940e1657bd/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.stderr?ref=2411cd7c7abd3a4d4aba657961ca1f940e1657bd", "patch": "@@ -3,6 +3,11 @@ error[E0308]: mismatched types\n    |\n LL | id![static X: u32 = 'a';];\n    |                     ^^^ expected `u32`, found `char`\n+   |\n+help: you can cast a `char` to a `u32`, since a `char` always occupies 4 bytes\n+   |\n+LL | id![static X: u32 = 'a' as u32;];\n+   |                         ++++++\n \n error: aborting due to previous error\n "}]}