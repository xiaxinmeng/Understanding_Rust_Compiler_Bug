{"sha": "9d6f8cdefad70fe670147a4dc10a72e53c4e261a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNmY4Y2RlZmFkNzBmZTY3MDE0N2E0ZGMxMGE3MmU1M2M0ZTI2MWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-28T00:16:46Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:59Z"}, "message": "libsyntax: De-`@mut` (and de-`@`) the AST mapping context", "tree": {"sha": "88f5a1e07628436c514fd5668a5d7f86876df3c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88f5a1e07628436c514fd5668a5d7f86876df3c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d6f8cdefad70fe670147a4dc10a72e53c4e261a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6f8cdefad70fe670147a4dc10a72e53c4e261a", "html_url": "https://github.com/rust-lang/rust/commit/9d6f8cdefad70fe670147a4dc10a72e53c4e261a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d6f8cdefad70fe670147a4dc10a72e53c4e261a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acdc9987371092422dedf88bc8a0542e688986c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/acdc9987371092422dedf88bc8a0542e688986c5", "html_url": "https://github.com/rust-lang/rust/commit/acdc9987371092422dedf88bc8a0542e688986c5"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "fd34091cc51fcb0288abfa17470838a8dc84ec2a", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d6f8cdefad70fe670147a4dc10a72e53c4e261a/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6f8cdefad70fe670147a4dc10a72e53c4e261a/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=9d6f8cdefad70fe670147a4dc10a72e53c4e261a", "patch": "@@ -456,12 +456,12 @@ impl Visitor<()> for Ctx {\n }\n \n pub fn map_crate(diag: @SpanHandler, c: &Crate) -> map {\n-    let cx = @mut Ctx {\n+    let mut cx = Ctx {\n         map: @RefCell::new(HashMap::new()),\n         path: RefCell::new(~[]),\n         diag: diag,\n     };\n-    visit::walk_crate(cx, c, ());\n+    visit::walk_crate(&mut cx, c, ());\n     cx.map\n }\n \n@@ -475,7 +475,7 @@ pub fn map_decoded_item(diag: @SpanHandler,\n     // I believe it is ok for the local IDs of inlined items from other crates\n     // to overlap with the local ids from this crate, so just generate the ids\n     // starting from 0.\n-    let cx = @mut Ctx {\n+    let mut cx = Ctx {\n         map: map,\n         path: RefCell::new(path.clone()),\n         diag: diag,\n@@ -499,7 +499,7 @@ pub fn map_decoded_item(diag: @SpanHandler,\n     }\n \n     // visit the item / method contents and add those to the map:\n-    ii.accept((), cx);\n+    ii.accept((), &mut cx);\n }\n \n pub fn node_id_to_str(map: map, id: NodeId, itr: @ident_interner) -> ~str {"}]}