{"sha": "a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5N2Y2MGI4ZTMxZTE5MTNjMGI5MzdiYzJhZGNmYjVlOWUxMjMxMjA=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-16T15:00:16Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-16T17:38:30Z"}, "message": "rustup https://github.com/rust-lang/rust/pull/69738", "tree": {"sha": "9a37d8a241a1c57c3dc9ed16c0413a70d3fc5415", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a37d8a241a1c57c3dc9ed16c0413a70d3fc5415"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "html_url": "https://github.com/rust-lang/rust/commit/a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24f6d643fe45c5acb489d3618736ac40559a883e", "url": "https://api.github.com/repos/rust-lang/rust/commits/24f6d643fe45c5acb489d3618736ac40559a883e", "html_url": "https://github.com/rust-lang/rust/commit/24f6d643fe45c5acb489d3618736ac40559a883e"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "35cde05e7f57cf0d29a49dcc95d0c12de377f95d", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::ast::{AttrKind, AttrStyle, Attribute, Lit, LitKind, MetaItemKind,\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_errors::Applicability;\n use rustc_hir::{\n-    Block, Expr, ExprKind, ImplItem, ImplItemKind, Item, ItemKind, StmtKind, TraitItem, TraitItemKind, TraitMethod,\n+    Block, Expr, ExprKind, ImplItem, ImplItemKind, Item, ItemKind, StmtKind, TraitFn, TraitItem, TraitItemKind,\n };\n use rustc_lint::{CheckLintNameResult, EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -372,15 +372,15 @@ fn is_relevant_item(cx: &LateContext<'_, '_>, item: &Item<'_>) -> bool {\n \n fn is_relevant_impl(cx: &LateContext<'_, '_>, item: &ImplItem<'_>) -> bool {\n     match item.kind {\n-        ImplItemKind::Method(_, eid) => is_relevant_expr(cx, cx.tcx.body_tables(eid), &cx.tcx.hir().body(eid).value),\n+        ImplItemKind::Fn(_, eid) => is_relevant_expr(cx, cx.tcx.body_tables(eid), &cx.tcx.hir().body(eid).value),\n         _ => false,\n     }\n }\n \n fn is_relevant_trait(cx: &LateContext<'_, '_>, item: &TraitItem<'_>) -> bool {\n     match item.kind {\n-        TraitItemKind::Fn(_, TraitMethod::Required(_)) => true,\n-        TraitItemKind::Fn(_, TraitMethod::Provided(eid)) => {\n+        TraitItemKind::Fn(_, TraitFn::Required(_)) => true,\n+        TraitItemKind::Fn(_, TraitFn::Provided(eid)) => {\n             is_relevant_expr(cx, cx.tcx.body_tables(eid), &cx.tcx.hir().body(eid).value)\n         },\n         _ => false,"}, {"sha": "9b028cd0f76b96b2799ca0641b29cca779bb87c8", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -191,7 +191,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n         if self.in_trait_impl || in_external_macro(cx.tcx.sess, item.span) {\n             return;\n         }\n-        if let hir::ImplItemKind::Method(ref sig, body_id) = item.kind {\n+        if let hir::ImplItemKind::Fn(ref sig, body_id) = item.kind {\n             lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));\n         }\n     }"}, {"sha": "06608772c8af57d2b906909b2cec04334b34b724", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -93,7 +93,7 @@ fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_it\n     for impl_item in impl_items {\n         if_chain! {\n             if impl_item.ident.name == sym!(from);\n-            if let ImplItemKind::Method(_, body_id) =\n+            if let ImplItemKind::Fn(_, body_id) =\n                 cx.tcx.hir().impl_item(impl_item.id).kind;\n             then {\n                 // check the body for `begin_panic` or `unwrap`"}, {"sha": "01ced205af485f5dd1ebc4ca0b5c002b4ebdeb2f", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -250,7 +250,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem<'_>) {\n-        if let hir::ImplItemKind::Method(ref sig, ref body_id) = item.kind {\n+        if let hir::ImplItemKind::Fn(ref sig, ref body_id) = item.kind {\n             let attr = must_use_attr(&item.attrs);\n             if let Some(attr) = attr {\n                 let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n@@ -284,7 +284,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n                 let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n                 check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n             }\n-            if let hir::TraitMethod::Provided(eid) = *eid {\n+            if let hir::TraitFn::Provided(eid) = *eid {\n                 let body = cx.tcx.hir().body(eid);\n                 Self::check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id);\n "}, {"sha": "ca8e834e347ce84ac725115d834879ee210a8936", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InherentToString {\n \n         if_chain! {\n             // Check if item is a method, called to_string and has a parameter 'self'\n-            if let ImplItemKind::Method(ref signature, _) = impl_item.kind;\n+            if let ImplItemKind::Fn(ref signature, _) = impl_item.kind;\n             if impl_item.ident.name.as_str() == \"to_string\";\n             let decl = &signature.decl;\n             if decl.implicit_self.has_implicit_self();"}, {"sha": "08fc6287b776e9ffdfb49de4d7910149db410afe", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -4,7 +4,7 @@ use crate::utils::span_lint_and_then;\n use crate::utils::sugg::DiagnosticBuilderExt;\n use rustc_ast::ast::{Attribute, Name};\n use rustc_errors::Applicability;\n-use rustc_hir::{TraitItem, TraitItemKind, TraitMethod};\n+use rustc_hir::{TraitFn, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -32,7 +32,7 @@ declare_lint_pass!(InlineFnWithoutBody => [INLINE_FN_WITHOUT_BODY]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InlineFnWithoutBody {\n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem<'_>) {\n-        if let TraitItemKind::Fn(_, TraitMethod::Required(_)) = item.kind {\n+        if let TraitItemKind::Fn(_, TraitFn::Required(_)) = item.kind {\n             check_attrs(cx, item.ident.name, &item.attrs);\n         }\n     }"}, {"sha": "85d3e9029dffefaec45f8c371f44c557c72d1cae", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::intravisit::{\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, ImplItem, ImplItemKind, Item,\n-    ItemKind, Lifetime, LifetimeName, ParamName, QPath, TraitBoundModifier, TraitItem, TraitItemKind, TraitMethod, Ty,\n+    ItemKind, Lifetime, LifetimeName, ParamName, QPath, TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty,\n     TyKind, WhereClause, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -86,7 +86,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Lifetimes {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem<'_>) {\n-        if let ImplItemKind::Method(ref sig, id) = item.kind {\n+        if let ImplItemKind::Fn(ref sig, id) = item.kind {\n             let report_extra_lifetimes = trait_ref_of_method(cx, item.hir_id).is_none();\n             check_fn_inner(\n                 cx,\n@@ -102,8 +102,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Lifetimes {\n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem<'_>) {\n         if let TraitItemKind::Fn(ref sig, ref body) = item.kind {\n             let body = match *body {\n-                TraitMethod::Required(_) => None,\n-                TraitMethod::Provided(id) => Some(id),\n+                TraitFn::Required(_) => None,\n+                TraitFn::Provided(id) => Some(id),\n             };\n             check_fn_inner(cx, &sig.decl, body, &item.generics, item.span, true);\n         }"}, {"sha": "8bba56c675ffd75c1d1cb151735471a124c8dc47", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -1410,7 +1410,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n         let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         let ty = cx.tcx.type_of(def_id);\n         if_chain! {\n-            if let hir::ImplItemKind::Method(ref sig, id) = impl_item.kind;\n+            if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind;\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir().body(id)).next();\n             if let hir::ItemKind::Impl{ of_trait: None, .. } = item.kind;\n \n@@ -1469,7 +1469,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             }\n         }\n \n-        if let hir::ImplItemKind::Method(_, _) = impl_item.kind {\n+        if let hir::ImplItemKind::Fn(_, _) = impl_item.kind {\n             let ret_ty = return_ty(cx, impl_item.hir_id);\n \n             // walk the return type and check for Self (this does not check associated types)"}, {"sha": "96750cb3b46678a1c65be57d6b94cc9d9a725a30", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -185,7 +185,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n \n         let desc = match impl_item.kind {\n             hir::ImplItemKind::Const(..) => \"an associated constant\",\n-            hir::ImplItemKind::Method(..) => \"a method\",\n+            hir::ImplItemKind::Fn(..) => \"a method\",\n             hir::ImplItemKind::TyAlias(_) => \"an associated type\",\n             hir::ImplItemKind::OpaqueTy(_) => \"an existential type\",\n         };"}, {"sha": "0f871d29c2f3b98a42644d52619e101e9ea58814", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -141,7 +141,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n         }\n \n         let desc = match impl_item.kind {\n-            hir::ImplItemKind::Method(..) => \"a method\",\n+            hir::ImplItemKind::Fn(..) => \"a method\",\n             hir::ImplItemKind::Const(..) | hir::ImplItemKind::TyAlias(_) | hir::ImplItemKind::OpaqueTy(_) => return,\n         };\n "}, {"sha": "adaf82c707480d7555854cad7d797f2873b3f237", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -59,7 +59,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableKeyType {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem<'tcx>) {\n-        if let hir::ImplItemKind::Method(ref sig, ..) = item.kind {\n+        if let hir::ImplItemKind::Fn(ref sig, ..) = item.kind {\n             if trait_ref_of_method(cx, item.hir_id).is_none() {\n                 check_sig(cx, item.hir_id, &sig.decl);\n             }"}, {"sha": "adc93909677dacc5e7d7f2d9c61d8c66aa5c2221", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                     if in_external_macro(cx.sess(), impl_item.span) {\n                         return;\n                     }\n-                    if let hir::ImplItemKind::Method(ref sig, _) = impl_item.kind {\n+                    if let hir::ImplItemKind::Fn(ref sig, _) = impl_item.kind {\n                         let name = impl_item.ident.name;\n                         let id = impl_item.hir_id;\n                         if sig.header.constness == hir::Constness::Const {"}, {"sha": "3d420cf8cecf754e6d5fdb25e2e0e32e0e285874", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -10,7 +10,7 @@ use rustc::ty;\n use rustc_errors::Applicability;\n use rustc_hir::{\n     BinOpKind, BodyId, Expr, ExprKind, FnDecl, FnRetTy, GenericArg, HirId, ImplItem, ImplItemKind, Item, ItemKind,\n-    Lifetime, MutTy, Mutability, Node, PathSegment, QPath, TraitItem, TraitItemKind, TraitMethod, Ty, TyKind,\n+    Lifetime, MutTy, Mutability, Node, PathSegment, QPath, TraitFn, TraitItem, TraitItemKind, Ty, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -109,7 +109,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ptr {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem<'_>) {\n-        if let ImplItemKind::Method(ref sig, body_id) = item.kind {\n+        if let ImplItemKind::Fn(ref sig, body_id) = item.kind {\n             let parent_item = cx.tcx.hir().get_parent_item(item.hir_id);\n             if let Some(Node::Item(it)) = cx.tcx.hir().find(parent_item) {\n                 if let ItemKind::Impl { of_trait: Some(_), .. } = it.kind {\n@@ -122,7 +122,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ptr {\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem<'_>) {\n         if let TraitItemKind::Fn(ref sig, ref trait_method) = item.kind {\n-            let body_id = if let TraitMethod::Provided(b) = *trait_method {\n+            let body_id = if let TraitFn::Provided(b) = *trait_method {\n                 Some(b)\n             } else {\n                 None"}, {"sha": "26d425cf2416c76a3b9d53380d45121cb576b114", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -15,8 +15,8 @@ use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n     BinOpKind, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericParamKind, HirId, ImplItem,\n-    ImplItemKind, Item, ItemKind, Lifetime, Local, MatchSource, MutTy, Mutability, QPath, Stmt, StmtKind, TraitItem,\n-    TraitItemKind, TraitMethod, TyKind, UnOp,\n+    ImplItemKind, Item, ItemKind, Lifetime, Local, MatchSource, MutTy, Mutability, QPath, Stmt, StmtKind, TraitFn,\n+    TraitItem, TraitItemKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n@@ -1457,7 +1457,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexity {\n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem<'_>) {\n         match item.kind {\n             TraitItemKind::Const(ref ty, _) | TraitItemKind::Type(_, Some(ref ty)) => self.check_type(cx, ty),\n-            TraitItemKind::Fn(FnSig { ref decl, .. }, TraitMethod::Required(_)) => self.check_fndecl(cx, decl),\n+            TraitItemKind::Fn(FnSig { ref decl, .. }, TraitFn::Required(_)) => self.check_fndecl(cx, decl),\n             // methods with default impl are covered by check_fn\n             _ => (),\n         }"}, {"sha": "a45b4a6869c5d21cfd2bb6c083641a6709c11d23", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedSelf {\n                         kind: AssocItemKind::Method { has_self: true },\n                         ..\n                     } = impl_item_ref;\n-                    if let ImplItemKind::Method(_, body_id) = &impl_item.kind;\n+                    if let ImplItemKind::Fn(_, body_id) = &impl_item.kind;\n                     let body = cx.tcx.hir().body(*body_id);\n                     if !body.params.is_empty();\n                     then {"}, {"sha": "73a986b79011d979d0716b0dba3a45cbda8b3223", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -195,7 +195,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n                     if let Some(impl_trait_ref) = impl_trait_ref {\n                         for impl_item_ref in refs {\n                             let impl_item = cx.tcx.hir().impl_item(impl_item_ref.id);\n-                            if let ImplItemKind::Method(FnSig{ decl: impl_decl, .. }, impl_body_id)\n+                            if let ImplItemKind::Fn(FnSig{ decl: impl_decl, .. }, impl_body_id)\n                                     = &impl_item.kind {\n                                 let item_type = cx.tcx.type_of(impl_def_id);\n                                 check_trait_method_impl_decl(cx, item_type, impl_item, impl_decl, &impl_trait_ref);"}, {"sha": "d79f6d525fcf4f183041222b6ccf85588a3fbc9e", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DeepCodeInspector {\n                 println!(\"associated constant\");\n                 print_expr(cx, &cx.tcx.hir().body(body_id).value, 1);\n             },\n-            hir::ImplItemKind::Method(..) => println!(\"method\"),\n+            hir::ImplItemKind::Fn(..) => println!(\"method\"),\n             hir::ImplItemKind::TyAlias(_) => println!(\"associated type\"),\n             hir::ImplItemKind::OpaqueTy(_) => println!(\"existential type\"),\n         }"}, {"sha": "280e8e2f32e6bcc754b2a06c6ae5882e4cebb230", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97f60b8e31e1913c0b937bc2adcfb5e9e123120/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=a97f60b8e31e1913c0b937bc2adcfb5e9e123120", "patch": "@@ -101,7 +101,7 @@ pub fn in_constant(cx: &LateContext<'_, '_>, id: HirId) -> bool {\n             ..\n         })\n         | Node::ImplItem(&ImplItem {\n-            kind: ImplItemKind::Method(ref sig, _),\n+            kind: ImplItemKind::Fn(ref sig, _),\n             ..\n         }) => sig.header.constness == Constness::Const,\n         _ => false,\n@@ -758,7 +758,7 @@ pub fn get_enclosing_block<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, hir_id: HirId)\n                 ..\n             })\n             | Node::ImplItem(&ImplItem {\n-                kind: ImplItemKind::Method(_, eid),\n+                kind: ImplItemKind::Fn(_, eid),\n                 ..\n             }) => match cx.tcx.hir().body(eid).value.kind {\n                 ExprKind::Block(ref block, _) => Some(block),"}]}