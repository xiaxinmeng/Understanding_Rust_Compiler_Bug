{"sha": "79602c87b561e26fa1a8fe58b9130cca37375f90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NjAyYzg3YjU2MWUyNmZhMWE4ZmU1OGI5MTMwY2NhMzczNzVmOTA=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-09T23:57:08Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-12T23:26:43Z"}, "message": "Rename `syntax::symbol::symbols` as `syntax::symbol::sym`.\n\nBecause it's going to be used a lot.", "tree": {"sha": "739f978d31995be590fa3c21fc8a722afb576ca5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/739f978d31995be590fa3c21fc8a722afb576ca5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79602c87b561e26fa1a8fe58b9130cca37375f90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79602c87b561e26fa1a8fe58b9130cca37375f90", "html_url": "https://github.com/rust-lang/rust/commit/79602c87b561e26fa1a8fe58b9130cca37375f90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79602c87b561e26fa1a8fe58b9130cca37375f90/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8245f5a38d0aa9cc392a1893fcbefb29bf77c2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8245f5a38d0aa9cc392a1893fcbefb29bf77c2b", "html_url": "https://github.com/rust-lang/rust/commit/a8245f5a38d0aa9cc392a1893fcbefb29bf77c2b"}], "stats": {"total": 277, "additions": 139, "deletions": 138}, "files": [{"sha": "5acd48c77d8203e0c0639f2d01fefe7dda4daf48", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79602c87b561e26fa1a8fe58b9130cca37375f90/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79602c87b561e26fa1a8fe58b9130cca37375f90/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=79602c87b561e26fa1a8fe58b9130cca37375f90", "patch": "@@ -8,7 +8,7 @@ use crate::ty::TyCtxt;\n use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use syntax::symbol::Symbol;\n use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n-use syntax_pos::{Span, symbols};\n+use syntax_pos::{Span, sym};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_macros::HashStable;\n use errors::DiagnosticId;\n@@ -51,7 +51,7 @@ impl<'a, 'tcx> LibFeatureCollector<'a, 'tcx> {\n     }\n \n     fn extract(&self, attr: &Attribute) -> Option<(Symbol, Option<Symbol>, Span)> {\n-        let stab_attrs = [symbols::stable, symbols::unstable, symbols::rustc_const_unstable];\n+        let stab_attrs = [sym::stable, sym::unstable, sym::rustc_const_unstable];\n \n         // Find a stability attribute (i.e., `#[stable (..)]`, `#[unstable (..)]`,\n         // `#[rustc_const_unstable (..)]`)."}, {"sha": "c4977f9240238d5c316898a8a4c0455221c0e4b0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 132, "deletions": 132, "changes": 264, "blob_url": "https://github.com/rust-lang/rust/blob/79602c87b561e26fa1a8fe58b9130cca37375f90/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79602c87b561e26fa1a8fe58b9130cca37375f90/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=79602c87b561e26fa1a8fe58b9130cca37375f90", "patch": "@@ -28,7 +28,7 @@ use crate::tokenstream::TokenTree;\n use errors::{DiagnosticBuilder, Handler};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_target::spec::abi::Abi;\n-use syntax_pos::{Span, DUMMY_SP, symbols};\n+use syntax_pos::{Span, DUMMY_SP, sym};\n use log::debug;\n use lazy_static::lazy_static;\n \n@@ -962,218 +962,218 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Normal attributes\n \n     (\n-        symbols::warn,\n+        sym::warn,\n         Normal,\n         template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n         Ungated\n     ),\n     (\n-        symbols::allow,\n+        sym::allow,\n         Normal,\n         template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n         Ungated\n     ),\n     (\n-        symbols::forbid,\n+        sym::forbid,\n         Normal,\n         template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n         Ungated\n     ),\n     (\n-        symbols::deny,\n+        sym::deny,\n         Normal,\n         template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n         Ungated\n     ),\n \n-    (symbols::macro_use, Normal, template!(Word, List: \"name1, name2, ...\"), Ungated),\n-    (symbols::macro_export, Normal, template!(Word, List: \"local_inner_macros\"), Ungated),\n-    (symbols::plugin_registrar, Normal, template!(Word), Ungated),\n-\n-    (symbols::cfg, Normal, template!(List: \"predicate\"), Ungated),\n-    (symbols::cfg_attr, Normal, template!(List: \"predicate, attr1, attr2, ...\"), Ungated),\n-    (symbols::main, Normal, template!(Word), Ungated),\n-    (symbols::start, Normal, template!(Word), Ungated),\n-    (symbols::repr, Normal, template!(List: \"C, packed, ...\"), Ungated),\n-    (symbols::path, Normal, template!(NameValueStr: \"file\"), Ungated),\n-    (symbols::automatically_derived, Normal, template!(Word), Ungated),\n-    (symbols::no_mangle, Normal, template!(Word), Ungated),\n-    (symbols::no_link, Normal, template!(Word), Ungated),\n-    (symbols::derive, Normal, template!(List: \"Trait1, Trait2, ...\"), Ungated),\n+    (sym::macro_use, Normal, template!(Word, List: \"name1, name2, ...\"), Ungated),\n+    (sym::macro_export, Normal, template!(Word, List: \"local_inner_macros\"), Ungated),\n+    (sym::plugin_registrar, Normal, template!(Word), Ungated),\n+\n+    (sym::cfg, Normal, template!(List: \"predicate\"), Ungated),\n+    (sym::cfg_attr, Normal, template!(List: \"predicate, attr1, attr2, ...\"), Ungated),\n+    (sym::main, Normal, template!(Word), Ungated),\n+    (sym::start, Normal, template!(Word), Ungated),\n+    (sym::repr, Normal, template!(List: \"C, packed, ...\"), Ungated),\n+    (sym::path, Normal, template!(NameValueStr: \"file\"), Ungated),\n+    (sym::automatically_derived, Normal, template!(Word), Ungated),\n+    (sym::no_mangle, Normal, template!(Word), Ungated),\n+    (sym::no_link, Normal, template!(Word), Ungated),\n+    (sym::derive, Normal, template!(List: \"Trait1, Trait2, ...\"), Ungated),\n     (\n-        symbols::should_panic,\n+        sym::should_panic,\n         Normal,\n         template!(Word, List: r#\"expected = \"reason\"#, NameValueStr: \"reason\"),\n         Ungated\n     ),\n-    (symbols::ignore, Normal, template!(Word, NameValueStr: \"reason\"), Ungated),\n-    (symbols::no_implicit_prelude, Normal, template!(Word), Ungated),\n-    (symbols::reexport_test_harness_main, Normal, template!(NameValueStr: \"name\"), Ungated),\n-    (symbols::link_args, Normal, template!(NameValueStr: \"args\"), Gated(Stability::Unstable,\n+    (sym::ignore, Normal, template!(Word, NameValueStr: \"reason\"), Ungated),\n+    (sym::no_implicit_prelude, Normal, template!(Word), Ungated),\n+    (sym::reexport_test_harness_main, Normal, template!(NameValueStr: \"name\"), Ungated),\n+    (sym::link_args, Normal, template!(NameValueStr: \"args\"), Gated(Stability::Unstable,\n                                 \"link_args\",\n                                 \"the `link_args` attribute is experimental and not \\\n                                 portable across platforms, it is recommended to \\\n                                 use `#[link(name = \\\"foo\\\")] instead\",\n                                 cfg_fn!(link_args))),\n-    (symbols::macro_escape, Normal, template!(Word), Ungated),\n+    (sym::macro_escape, Normal, template!(Word), Ungated),\n \n     // RFC #1445.\n-    (symbols::structural_match, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::structural_match, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                             \"structural_match\",\n                                             \"the semantics of constant patterns is \\\n                                             not yet settled\",\n                                             cfg_fn!(structural_match))),\n \n     // RFC #2008\n-    (symbols::non_exhaustive, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::non_exhaustive, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                         \"non_exhaustive\",\n                                         \"non exhaustive is an experimental feature\",\n                                         cfg_fn!(non_exhaustive))),\n \n     // RFC #1268\n-    (symbols::marker, Normal, template!(Word), Gated(Stability::Unstable,\n+    (sym::marker, Normal, template!(Word), Gated(Stability::Unstable,\n                             \"marker_trait_attr\",\n                             \"marker traits is an experimental feature\",\n                             cfg_fn!(marker_trait_attr))),\n \n-    (symbols::plugin, CrateLevel, template!(List: \"name|name(args)\"), Gated(Stability::Unstable,\n+    (sym::plugin, CrateLevel, template!(List: \"name|name(args)\"), Gated(Stability::Unstable,\n                                 \"plugin\",\n                                 \"compiler plugins are experimental \\\n                                 and possibly buggy\",\n                                 cfg_fn!(plugin))),\n \n-    (symbols::no_std, CrateLevel, template!(Word), Ungated),\n-    (symbols::no_core, CrateLevel, template!(Word), Gated(Stability::Unstable,\n+    (sym::no_std, CrateLevel, template!(Word), Ungated),\n+    (sym::no_core, CrateLevel, template!(Word), Gated(Stability::Unstable,\n                                 \"no_core\",\n                                 \"no_core is experimental\",\n                                 cfg_fn!(no_core))),\n-    (symbols::lang, Normal, template!(NameValueStr: \"name\"), Gated(Stability::Unstable,\n+    (sym::lang, Normal, template!(NameValueStr: \"name\"), Gated(Stability::Unstable,\n                         \"lang_items\",\n                         \"language items are subject to change\",\n                         cfg_fn!(lang_items))),\n-    (symbols::linkage, Whitelisted, template!(NameValueStr: \"external|internal|...\"),\n+    (sym::linkage, Whitelisted, template!(NameValueStr: \"external|internal|...\"),\n                                 Gated(Stability::Unstable,\n                                 \"linkage\",\n                                 \"the `linkage` attribute is experimental \\\n                                     and not portable across platforms\",\n                                 cfg_fn!(linkage))),\n-    (symbols::thread_local, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::thread_local, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                         \"thread_local\",\n                                         \"`#[thread_local]` is an experimental feature, and does \\\n                                          not currently handle destructors\",\n                                         cfg_fn!(thread_local))),\n \n-    (symbols::rustc_on_unimplemented, Whitelisted, template!(List:\n+    (sym::rustc_on_unimplemented, Whitelisted, template!(List:\n                         r#\"/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\"\"#,\n                         NameValueStr: \"message\"),\n                                             Gated(Stability::Unstable,\n                                             \"on_unimplemented\",\n                                             \"the `#[rustc_on_unimplemented]` attribute \\\n                                             is an experimental feature\",\n                                             cfg_fn!(on_unimplemented))),\n-    (symbols::rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#),\n+    (sym::rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#),\n                                             Gated(Stability::Unstable,\n                                             \"rustc_const_unstable\",\n                                             \"the `#[rustc_const_unstable]` attribute \\\n                                             is an internal feature\",\n                                             cfg_fn!(rustc_const_unstable))),\n-    (symbols::global_allocator, Normal, template!(Word), Ungated),\n-    (symbols::default_lib_allocator, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::global_allocator, Normal, template!(Word), Ungated),\n+    (sym::default_lib_allocator, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                             \"allocator_internals\",\n                                             \"the `#[default_lib_allocator]` \\\n                                             attribute is an experimental feature\",\n                                             cfg_fn!(allocator_internals))),\n-    (symbols::needs_allocator, Normal, template!(Word), Gated(Stability::Unstable,\n+    (sym::needs_allocator, Normal, template!(Word), Gated(Stability::Unstable,\n                                     \"allocator_internals\",\n                                     \"the `#[needs_allocator]` \\\n                                     attribute is an experimental \\\n                                     feature\",\n                                     cfg_fn!(allocator_internals))),\n-    (symbols::panic_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::panic_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                         \"panic_runtime\",\n                                         \"the `#[panic_runtime]` attribute is \\\n                                         an experimental feature\",\n                                         cfg_fn!(panic_runtime))),\n-    (symbols::needs_panic_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::needs_panic_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                             \"needs_panic_runtime\",\n                                             \"the `#[needs_panic_runtime]` \\\n                                                 attribute is an experimental \\\n                                                 feature\",\n                                             cfg_fn!(needs_panic_runtime))),\n-    (symbols::rustc_outlives, Normal, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_outlives, Normal, template!(Word), Gated(Stability::Unstable,\n                                     \"rustc_attrs\",\n                                     \"the `#[rustc_outlives]` attribute \\\n                                     is just used for rustc unit tests \\\n                                     and will never be stable\",\n                                     cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_variance, Normal, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_variance, Normal, template!(Word), Gated(Stability::Unstable,\n                                     \"rustc_attrs\",\n                                     \"the `#[rustc_variance]` attribute \\\n                                     is just used for rustc unit tests \\\n                                     and will never be stable\",\n                                     cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_layout, Normal, template!(List: \"field1, field2, ...\"),\n+    (sym::rustc_layout, Normal, template!(List: \"field1, field2, ...\"),\n     Gated(Stability::Unstable,\n         \"rustc_attrs\",\n         \"the `#[rustc_layout]` attribute \\\n             is just used for rustc unit tests \\\n             and will never be stable\",\n         cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_layout_scalar_valid_range_start, Whitelisted, template!(List: \"value\"),\n+    (sym::rustc_layout_scalar_valid_range_start, Whitelisted, template!(List: \"value\"),\n     Gated(Stability::Unstable,\n         \"rustc_attrs\",\n         \"the `#[rustc_layout_scalar_valid_range_start]` attribute \\\n             is just used to enable niche optimizations in libcore \\\n             and will never be stable\",\n         cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_layout_scalar_valid_range_end, Whitelisted, template!(List: \"value\"),\n+    (sym::rustc_layout_scalar_valid_range_end, Whitelisted, template!(List: \"value\"),\n     Gated(Stability::Unstable,\n         \"rustc_attrs\",\n         \"the `#[rustc_layout_scalar_valid_range_end]` attribute \\\n             is just used to enable niche optimizations in libcore \\\n             and will never be stable\",\n         cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_regions, Normal, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_regions, Normal, template!(Word), Gated(Stability::Unstable,\n                                     \"rustc_attrs\",\n                                     \"the `#[rustc_regions]` attribute \\\n                                     is just used for rustc unit tests \\\n                                     and will never be stable\",\n                                     cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_error, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_error, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                     \"rustc_attrs\",\n                                     \"the `#[rustc_error]` attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n                                     cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_dump_user_substs, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_dump_user_substs, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                     \"rustc_attrs\",\n                                     \"this attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n                                     cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_if_this_changed, Whitelisted, template!(Word, List: \"DepNode\"),\n+    (sym::rustc_if_this_changed, Whitelisted, template!(Word, List: \"DepNode\"),\n                                                 Gated(Stability::Unstable,\n                                                 \"rustc_attrs\",\n                                                 \"the `#[rustc_if_this_changed]` attribute \\\n                                                 is just used for rustc unit tests \\\n                                                 and will never be stable\",\n                                                 cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_then_this_would_need, Whitelisted, template!(List: \"DepNode\"),\n+    (sym::rustc_then_this_would_need, Whitelisted, template!(List: \"DepNode\"),\n                                                     Gated(Stability::Unstable,\n                                                     \"rustc_attrs\",\n                                                     \"the `#[rustc_if_this_changed]` attribute \\\n                                                     is just used for rustc unit tests \\\n                                                     and will never be stable\",\n                                                     cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_dirty, Whitelisted, template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\",\n+    (sym::rustc_dirty, Whitelisted, template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\",\n                                                     /*opt*/ except = \"...\"\"#),\n                                     Gated(Stability::Unstable,\n                                     \"rustc_attrs\",\n                                     \"the `#[rustc_dirty]` attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n                                     cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_clean, Whitelisted, template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\",\n+    (sym::rustc_clean, Whitelisted, template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\",\n                                                     /*opt*/ except = \"...\"\"#),\n                                     Gated(Stability::Unstable,\n                                     \"rustc_attrs\",\n@@ -1182,7 +1182,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n                                         and will never be stable\",\n                                     cfg_fn!(rustc_attrs))),\n     (\n-        symbols::rustc_partition_reused,\n+        sym::rustc_partition_reused,\n         Whitelisted,\n         template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n         Gated(\n@@ -1195,7 +1195,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         )\n     ),\n     (\n-        symbols::rustc_partition_codegened,\n+        sym::rustc_partition_codegened,\n         Whitelisted,\n         template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n         Gated(\n@@ -1207,36 +1207,36 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n             cfg_fn!(rustc_attrs),\n         )\n     ),\n-    (symbols::rustc_expected_cgu_reuse, Whitelisted, template!(List: r#\"cfg = \"...\", module = \"...\",\n+    (sym::rustc_expected_cgu_reuse, Whitelisted, template!(List: r#\"cfg = \"...\", module = \"...\",\n                                                             kind = \"...\"\"#),\n                                                     Gated(Stability::Unstable,\n                                                     \"rustc_attrs\",\n                                                     \"this attribute \\\n                                                     is just used for rustc unit tests \\\n                                                     and will never be stable\",\n                                                     cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_synthetic, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_synthetic, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                                     \"rustc_attrs\",\n                                                     \"this attribute \\\n                                                     is just used for rustc unit tests \\\n                                                     and will never be stable\",\n                                                     cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_symbol_name, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_symbol_name, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                             \"rustc_attrs\",\n                                             \"internal rustc attributes will never be stable\",\n                                             cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_def_path, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_def_path, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                         \"rustc_attrs\",\n                                         \"internal rustc attributes will never be stable\",\n                                         cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_mir, Whitelisted, template!(List: \"arg1, arg2, ...\"), Gated(Stability::Unstable,\n+    (sym::rustc_mir, Whitelisted, template!(List: \"arg1, arg2, ...\"), Gated(Stability::Unstable,\n                                     \"rustc_attrs\",\n                                     \"the `#[rustc_mir]` attribute \\\n                                     is just used for rustc unit tests \\\n                                     and will never be stable\",\n                                     cfg_fn!(rustc_attrs))),\n     (\n-        symbols::rustc_inherit_overflow_checks,\n+        sym::rustc_inherit_overflow_checks,\n         Whitelisted,\n         template!(Word),\n         Gated(\n@@ -1251,105 +1251,105 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         )\n     ),\n \n-    (symbols::rustc_dump_program_clauses, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_dump_program_clauses, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                                     \"rustc_attrs\",\n                                                     \"the `#[rustc_dump_program_clauses]` \\\n                                                     attribute is just used for rustc unit \\\n                                                     tests and will never be stable\",\n                                                     cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_test_marker, Normal, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_test_marker, Normal, template!(Word), Gated(Stability::Unstable,\n                                     \"rustc_attrs\",\n                                     \"the `#[rustc_test_marker]` attribute \\\n                                     is used internally to track tests\",\n                                     cfg_fn!(rustc_attrs))),\n-    (symbols::rustc_transparent_macro, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_transparent_macro, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                                 \"rustc_attrs\",\n                                                 \"used internally for testing macro hygiene\",\n                                                     cfg_fn!(rustc_attrs))),\n-    (symbols::compiler_builtins, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::compiler_builtins, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                             \"compiler_builtins\",\n                                             \"the `#[compiler_builtins]` attribute is used to \\\n                                             identify the `compiler_builtins` crate which \\\n                                             contains compiler-rt intrinsics and will never be \\\n                                             stable\",\n                                         cfg_fn!(compiler_builtins))),\n-    (symbols::sanitizer_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::sanitizer_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                             \"sanitizer_runtime\",\n                                             \"the `#[sanitizer_runtime]` attribute is used to \\\n                                             identify crates that contain the runtime of a \\\n                                             sanitizer and will never be stable\",\n                                             cfg_fn!(sanitizer_runtime))),\n-    (symbols::profiler_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::profiler_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                             \"profiler_runtime\",\n                                             \"the `#[profiler_runtime]` attribute is used to \\\n                                             identify the `profiler_builtins` crate which \\\n                                             contains the profiler runtime and will never be \\\n                                             stable\",\n                                             cfg_fn!(profiler_runtime))),\n \n-    (symbols::allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"),\n+    (sym::allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"),\n                                             Gated(Stability::Unstable,\n                                             \"allow_internal_unstable\",\n                                             EXPLAIN_ALLOW_INTERNAL_UNSTABLE,\n                                             cfg_fn!(allow_internal_unstable))),\n \n-    (symbols::allow_internal_unsafe, Normal, template!(Word), Gated(Stability::Unstable,\n+    (sym::allow_internal_unsafe, Normal, template!(Word), Gated(Stability::Unstable,\n                                             \"allow_internal_unsafe\",\n                                             EXPLAIN_ALLOW_INTERNAL_UNSAFE,\n                                             cfg_fn!(allow_internal_unsafe))),\n \n-    (symbols::fundamental, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::fundamental, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                     \"fundamental\",\n                                     \"the `#[fundamental]` attribute \\\n                                         is an experimental feature\",\n                                     cfg_fn!(fundamental))),\n \n-    (symbols::proc_macro_derive, Normal, template!(List: \"TraitName, \\\n+    (sym::proc_macro_derive, Normal, template!(List: \"TraitName, \\\n                                                 /*opt*/ attributes(name1, name2, ...)\"),\n                                     Ungated),\n \n-    (symbols::rustc_copy_clone_marker, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_copy_clone_marker, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                                 \"rustc_attrs\",\n                                                 \"internal implementation detail\",\n                                                 cfg_fn!(rustc_attrs))),\n \n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n     (\n-        symbols::doc,\n+        sym::doc,\n         Whitelisted,\n         template!(List: \"hidden|inline|...\", NameValueStr: \"string\"),\n         Ungated\n     ),\n \n     // FIXME: #14406 these are processed in codegen, which happens after the\n     // lint pass\n-    (symbols::cold, Whitelisted, template!(Word), Ungated),\n-    (symbols::naked, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::cold, Whitelisted, template!(Word), Ungated),\n+    (sym::naked, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                 \"naked_functions\",\n                                 \"the `#[naked]` attribute \\\n                                 is an experimental feature\",\n                                 cfg_fn!(naked_functions))),\n-    (symbols::ffi_returns_twice, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::ffi_returns_twice, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                 \"ffi_returns_twice\",\n                                 \"the `#[ffi_returns_twice]` attribute \\\n                                 is an experimental feature\",\n                                 cfg_fn!(ffi_returns_twice))),\n-    (symbols::target_feature, Whitelisted, template!(List: r#\"enable = \"name\"\"#), Ungated),\n-    (symbols::export_name, Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n-    (symbols::inline, Whitelisted, template!(Word, List: \"always|never\"), Ungated),\n-    (symbols::link, Whitelisted, template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\",\n+    (sym::target_feature, Whitelisted, template!(List: r#\"enable = \"name\"\"#), Ungated),\n+    (sym::export_name, Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n+    (sym::inline, Whitelisted, template!(Word, List: \"always|never\"), Ungated),\n+    (sym::link, Whitelisted, template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\",\n                                                /*opt*/ cfg = \"...\"\"#), Ungated),\n-    (symbols::link_name, Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n-    (symbols::link_section, Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n-    (symbols::no_builtins, Whitelisted, template!(Word), Ungated),\n-    (symbols::no_debug, Whitelisted, template!(Word), Gated(\n+    (sym::link_name, Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n+    (sym::link_section, Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n+    (sym::no_builtins, Whitelisted, template!(Word), Ungated),\n+    (sym::no_debug, Whitelisted, template!(Word), Gated(\n         Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/29721\", None),\n         \"no_debug\",\n         \"the `#[no_debug]` attribute was an experimental feature that has been \\\n         deprecated due to lack of demand\",\n         cfg_fn!(no_debug))),\n     (\n-        symbols::omit_gdb_pretty_printer_section,\n+        sym::omit_gdb_pretty_printer_section,\n         Whitelisted,\n         template!(Word),\n         Gated(\n@@ -1361,7 +1361,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n             cfg_fn!(omit_gdb_pretty_printer_section)\n         )\n     ),\n-    (symbols::unsafe_destructor_blind_to_params,\n+    (sym::unsafe_destructor_blind_to_params,\n     Normal,\n     template!(Word),\n     Gated(Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/34761\",\n@@ -1370,47 +1370,47 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         \"unsafe_destructor_blind_to_params has been replaced by \\\n             may_dangle and will be removed in the future\",\n         cfg_fn!(dropck_parametricity))),\n-    (symbols::may_dangle,\n+    (sym::may_dangle,\n     Normal,\n     template!(Word),\n     Gated(Stability::Unstable,\n         \"dropck_eyepatch\",\n         \"may_dangle has unstable semantics and may be removed in the future\",\n         cfg_fn!(dropck_eyepatch))),\n-    (symbols::unwind, Whitelisted, template!(List: \"allowed|aborts\"), Gated(Stability::Unstable,\n+    (sym::unwind, Whitelisted, template!(List: \"allowed|aborts\"), Gated(Stability::Unstable,\n                                 \"unwind_attributes\",\n                                 \"#[unwind] is experimental\",\n                                 cfg_fn!(unwind_attributes))),\n-    (symbols::used, Whitelisted, template!(Word), Ungated),\n+    (sym::used, Whitelisted, template!(Word), Ungated),\n \n     // used in resolve\n-    (symbols::prelude_import, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::prelude_import, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                         \"prelude_import\",\n                                         \"`#[prelude_import]` is for use by rustc only\",\n                                         cfg_fn!(prelude_import))),\n \n     // FIXME: #14407 these are only looked at on-demand so we can't\n     // guarantee they'll have already been checked\n     (\n-        symbols::rustc_deprecated,\n+        sym::rustc_deprecated,\n         Whitelisted,\n         template!(List: r#\"since = \"version\", reason = \"...\"\"#),\n         Ungated\n     ),\n-    (symbols::must_use, Whitelisted, template!(Word, NameValueStr: \"reason\"), Ungated),\n+    (sym::must_use, Whitelisted, template!(Word, NameValueStr: \"reason\"), Ungated),\n     (\n-        symbols::stable,\n+        sym::stable,\n         Whitelisted,\n         template!(List: r#\"feature = \"name\", since = \"version\"\"#),\n         Ungated\n     ),\n     (\n-        symbols::unstable,\n+        sym::unstable,\n         Whitelisted,\n         template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#),\n         Ungated\n     ),\n-    (symbols::deprecated,\n+    (sym::deprecated,\n         Normal,\n         template!(\n             Word,\n@@ -1420,69 +1420,69 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         Ungated\n     ),\n \n-    (symbols::rustc_paren_sugar, Normal, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_paren_sugar, Normal, template!(Word), Gated(Stability::Unstable,\n                                         \"unboxed_closures\",\n                                         \"unboxed_closures are still evolving\",\n                                         cfg_fn!(unboxed_closures))),\n \n-    (symbols::windows_subsystem, Whitelisted, template!(NameValueStr: \"windows|console\"), Ungated),\n+    (sym::windows_subsystem, Whitelisted, template!(NameValueStr: \"windows|console\"), Ungated),\n \n-    (symbols::proc_macro_attribute, Normal, template!(Word), Ungated),\n-    (symbols::proc_macro, Normal, template!(Word), Ungated),\n+    (sym::proc_macro_attribute, Normal, template!(Word), Ungated),\n+    (sym::proc_macro, Normal, template!(Word), Ungated),\n \n-    (symbols::rustc_proc_macro_decls, Normal, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_proc_macro_decls, Normal, template!(Word), Gated(Stability::Unstable,\n                                             \"rustc_attrs\",\n                                             \"used internally by rustc\",\n                                             cfg_fn!(rustc_attrs))),\n \n-    (symbols::allow_fail, Normal, template!(Word), Gated(Stability::Unstable,\n+    (sym::allow_fail, Normal, template!(Word), Gated(Stability::Unstable,\n                                 \"allow_fail\",\n                                 \"allow_fail attribute is currently unstable\",\n                                 cfg_fn!(allow_fail))),\n \n-    (symbols::rustc_std_internal_symbol, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_std_internal_symbol, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                     \"rustc_attrs\",\n                                     \"this is an internal attribute that will \\\n                                     never be stable\",\n                                     cfg_fn!(rustc_attrs))),\n \n     // whitelists \"identity-like\" conversion methods to suggest on type mismatch\n-    (symbols::rustc_conversion_suggestion, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_conversion_suggestion, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                                     \"rustc_attrs\",\n                                                     \"this is an internal attribute that will \\\n                                                         never be stable\",\n                                                     cfg_fn!(rustc_attrs))),\n \n     (\n-        symbols::rustc_args_required_const,\n+        sym::rustc_args_required_const,\n         Whitelisted,\n         template!(List: \"N\"),\n         Gated(Stability::Unstable, \"rustc_attrs\", \"never will be stable\", cfg_fn!(rustc_attrs))\n     ),\n     // RFC 2070\n-    (symbols::panic_handler, Normal, template!(Word), Ungated),\n+    (sym::panic_handler, Normal, template!(Word), Ungated),\n \n-    (symbols::alloc_error_handler, Normal, template!(Word), Gated(Stability::Unstable,\n+    (sym::alloc_error_handler, Normal, template!(Word), Gated(Stability::Unstable,\n                         \"alloc_error_handler\",\n                         \"#[alloc_error_handler] is an unstable feature\",\n                         cfg_fn!(alloc_error_handler))),\n \n     // RFC 2412\n-    (symbols::optimize, Whitelisted, template!(List: \"size|speed\"), Gated(Stability::Unstable,\n+    (sym::optimize, Whitelisted, template!(List: \"size|speed\"), Gated(Stability::Unstable,\n                             \"optimize_attribute\",\n                             \"#[optimize] attribute is an unstable feature\",\n                             cfg_fn!(optimize_attribute))),\n \n     // Crate level attributes\n-    (symbols::crate_name, CrateLevel, template!(NameValueStr: \"name\"), Ungated),\n-    (symbols::crate_type, CrateLevel, template!(NameValueStr: \"bin|lib|...\"), Ungated),\n-    (symbols::crate_id, CrateLevel, template!(NameValueStr: \"ignored\"), Ungated),\n-    (symbols::feature, CrateLevel, template!(List: \"name1, name1, ...\"), Ungated),\n-    (symbols::no_start, CrateLevel, template!(Word), Ungated),\n-    (symbols::no_main, CrateLevel, template!(Word), Ungated),\n-    (symbols::recursion_limit, CrateLevel, template!(NameValueStr: \"N\"), Ungated),\n-    (symbols::type_length_limit, CrateLevel, template!(NameValueStr: \"N\"), Ungated),\n-    (symbols::test_runner, CrateLevel, template!(List: \"path\"), Gated(Stability::Unstable,\n+    (sym::crate_name, CrateLevel, template!(NameValueStr: \"name\"), Ungated),\n+    (sym::crate_type, CrateLevel, template!(NameValueStr: \"bin|lib|...\"), Ungated),\n+    (sym::crate_id, CrateLevel, template!(NameValueStr: \"ignored\"), Ungated),\n+    (sym::feature, CrateLevel, template!(List: \"name1, name1, ...\"), Ungated),\n+    (sym::no_start, CrateLevel, template!(Word), Ungated),\n+    (sym::no_main, CrateLevel, template!(Word), Ungated),\n+    (sym::recursion_limit, CrateLevel, template!(NameValueStr: \"N\"), Ungated),\n+    (sym::type_length_limit, CrateLevel, template!(NameValueStr: \"N\"), Ungated),\n+    (sym::test_runner, CrateLevel, template!(List: \"path\"), Gated(Stability::Unstable,\n                     \"custom_test_frameworks\",\n                     EXPLAIN_CUSTOM_TEST_FRAMEWORKS,\n                     cfg_fn!(custom_test_frameworks))),\n@@ -1582,9 +1582,9 @@ impl<'a> Context<'a> {\n                         self, has_feature, attr.span, name, desc, GateStrength::Hard\n                     );\n                 }\n-            } else if name == symbols::doc {\n+            } else if name == sym::doc {\n                 if let Some(content) = attr.meta_item_list() {\n-                    if content.iter().any(|c| c.check_name(symbols::include)) {\n+                    if content.iter().any(|c| c.check_name(sym::include)) {\n                         gate_feature!(self, external_doc, attr.span,\n                             \"#[doc(include = \\\"...\\\")] is experimental\"\n                         );\n@@ -1841,11 +1841,11 @@ impl<'a> PostExpansionVisitor<'a> {\n                                template: AttributeTemplate) {\n         // Some special attributes like `cfg` must be checked\n         // before the generic check, so we skip them here.\n-        let should_skip = |name| name == symbols::cfg;\n+        let should_skip = |name| name == sym::cfg;\n         // Some of previously accepted forms were used in practice,\n         // report them as warnings for now.\n-        let should_warn = |name| name == symbols::doc || name == symbols::ignore ||\n-                                 name == symbols::inline || name == symbols::link;\n+        let should_warn = |name| name == sym::doc || name == sym::ignore ||\n+                                 name == sym::inline || name == sym::link;\n \n         match attr.parse_meta(self.context.parse_sess) {\n             Ok(meta) => if !should_skip(name) && !template.compatible(&meta.node) {\n@@ -1893,25 +1893,25 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         // check for gated attributes\n         self.context.check_attribute(attr, attr_info, false);\n \n-        if attr.check_name(symbols::doc) {\n+        if attr.check_name(sym::doc) {\n             if let Some(content) = attr.meta_item_list() {\n-                if content.len() == 1 && content[0].check_name(symbols::cfg) {\n+                if content.len() == 1 && content[0].check_name(sym::cfg) {\n                     gate_feature_post!(&self, doc_cfg, attr.span,\n                         \"#[doc(cfg(...))] is experimental\"\n                     );\n-                } else if content.iter().any(|c| c.check_name(symbols::masked)) {\n+                } else if content.iter().any(|c| c.check_name(sym::masked)) {\n                     gate_feature_post!(&self, doc_masked, attr.span,\n                         \"#[doc(masked)] is experimental\"\n                     );\n-                } else if content.iter().any(|c| c.check_name(symbols::spotlight)) {\n+                } else if content.iter().any(|c| c.check_name(sym::spotlight)) {\n                     gate_feature_post!(&self, doc_spotlight, attr.span,\n                         \"#[doc(spotlight)] is experimental\"\n                     );\n-                } else if content.iter().any(|c| c.check_name(symbols::alias)) {\n+                } else if content.iter().any(|c| c.check_name(sym::alias)) {\n                     gate_feature_post!(&self, doc_alias, attr.span,\n                         \"#[doc(alias = \\\"...\\\")] is experimental\"\n                     );\n-                } else if content.iter().any(|c| c.check_name(symbols::keyword)) {\n+                } else if content.iter().any(|c| c.check_name(sym::keyword)) {\n                     gate_feature_post!(&self, doc_keyword, attr.span,\n                         \"#[doc(keyword = \\\"...\\\")] is experimental\"\n                     );\n@@ -1978,7 +1978,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ItemKind::Struct(..) => {\n                 for attr in attr::filter_by_name(&i.attrs[..], \"repr\") {\n                     for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n-                        if item.check_name(symbols::simd) {\n+                        if item.check_name(sym::simd) {\n                             gate_feature_post!(&self, repr_simd, attr.span,\n                                                \"SIMD types are experimental and possibly buggy\");\n                         }\n@@ -1989,7 +1989,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ItemKind::Enum(..) => {\n                 for attr in attr::filter_by_name(&i.attrs[..], \"repr\") {\n                     for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n-                        if item.check_name(symbols::align) {\n+                        if item.check_name(sym::align) {\n                             gate_feature_post!(&self, repr_align_enum, attr.span,\n                                                \"`#[repr(align(x))]` on enums is experimental\");\n                         }\n@@ -2319,7 +2319,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n     // Process the edition umbrella feature-gates first, to ensure\n     // `edition_enabled_features` is completed before it's queried.\n     for attr in krate_attrs {\n-        if !attr.check_name(symbols::feature) {\n+        if !attr.check_name(sym::feature) {\n             continue\n         }\n \n@@ -2364,7 +2364,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n     }\n \n     for attr in krate_attrs {\n-        if !attr.check_name(symbols::feature) {\n+        if !attr.check_name(sym::feature) {\n             continue\n         }\n \n@@ -2496,7 +2496,7 @@ fn maybe_stage_features(span_handler: &Handler, krate: &ast::Crate,\n     };\n     if !allow_features {\n         for attr in &krate.attrs {\n-            if attr.check_name(symbols::feature) {\n+            if attr.check_name(sym::feature) {\n                 let release_channel = option_env!(\"CFG_RELEASE_CHANNEL\").unwrap_or(\"(unknown)\");\n                 span_err!(span_handler, attr.span, E0554,\n                           \"#![feature] may not be used on the {} release channel\","}, {"sha": "d690a39199625cc45a8ce817630491b949f3eb45", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79602c87b561e26fa1a8fe58b9130cca37375f90/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79602c87b561e26fa1a8fe58b9130cca37375f90/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=79602c87b561e26fa1a8fe58b9130cca37375f90", "patch": "@@ -33,7 +33,7 @@ mod span_encoding;\n pub use span_encoding::{Span, DUMMY_SP};\n \n pub mod symbol;\n-pub use symbol::symbols;\n+pub use symbol::sym;\n \n mod analyze_source_file;\n "}, {"sha": "ac3f999c53794a64e6ea93e7f11715ecb91d5890", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/79602c87b561e26fa1a8fe58b9130cca37375f90/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79602c87b561e26fa1a8fe58b9130cca37375f90/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=79602c87b561e26fa1a8fe58b9130cca37375f90", "patch": "@@ -99,8 +99,8 @@ symbols! {\n         Union:              \"union\",\n     }\n \n-    // Symbols that can be referred to with syntax_pos::symbols::*. The symbol\n-    // is the stringified identifier unless otherwise specified (e.g.\n+    // Symbols that can be referred to with syntax_pos::sym::*. The symbol is\n+    // the stringified identifier unless otherwise specified (e.g.\n     // `proc_dash_macro` represents \"proc-macro\").\n     Symbols {\n         aarch64_target_feature,\n@@ -937,7 +937,8 @@ pub mod keywords {\n     keywords!();\n }\n \n-pub mod symbols {\n+// This module has a very short name because it's used a lot.\n+pub mod sym {\n     use super::Symbol;\n     symbols!();\n }"}]}