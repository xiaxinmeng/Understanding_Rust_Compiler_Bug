{"sha": "bdd23bf2155e02d2f889801b3ac02955a1413aa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZDIzYmYyMTU1ZTAyZDJmODg5ODAxYjNhYzAyOTU1YTE0MTNhYTc=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-24T09:30:24Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-24T18:49:38Z"}, "message": "`tcx.lift_to_global` > `tcx.global_tcx().lift`", "tree": {"sha": "2a2762cffd5f32bdaf2f9adbf1b18a7d9188b501", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a2762cffd5f32bdaf2f9adbf1b18a7d9188b501"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdd23bf2155e02d2f889801b3ac02955a1413aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd23bf2155e02d2f889801b3ac02955a1413aa7", "html_url": "https://github.com/rust-lang/rust/commit/bdd23bf2155e02d2f889801b3ac02955a1413aa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdd23bf2155e02d2f889801b3ac02955a1413aa7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "569ae80a0aed5d5fdcde30706017a3122e5f7c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/569ae80a0aed5d5fdcde30706017a3122e5f7c5e", "html_url": "https://github.com/rust-lang/rust/commit/569ae80a0aed5d5fdcde30706017a3122e5f7c5e"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "2fcb0255cc8f67a9e47a358caee14d7dcc8d6d47", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bdd23bf2155e02d2f889801b3ac02955a1413aa7/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd23bf2155e02d2f889801b3ac02955a1413aa7/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=bdd23bf2155e02d2f889801b3ac02955a1413aa7", "patch": "@@ -1151,8 +1151,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             SwitchInt { ref values, switch_ty, .. } => {\n                 let size = ty::tls::with(|tcx| {\n                     let param_env = ty::ParamEnv::empty();\n-                    let tcx = tcx.global_tcx();\n-                    let switch_ty = tcx.lift(&switch_ty).unwrap();\n+                    let switch_ty = tcx.lift_to_global(&switch_ty).unwrap();\n                     tcx.layout_of(param_env.and(switch_ty)).unwrap().size\n                 });\n                 values.iter()\n@@ -1908,8 +1907,8 @@ pub fn print_miri_value<W: Write>(value: Value, ty: Ty, f: &mut W) -> fmt::Resul\n         (Value::Scalar(Scalar::Bits { bits, .. }), &TyUint(ui)) => write!(f, \"{:?}{}\", bits, ui),\n         (Value::Scalar(Scalar::Bits { bits, .. }), &TyInt(i)) => {\n             let bit_width = ty::tls::with(|tcx| {\n-                 let ty = tcx.global_tcx().lift(&ty).unwrap();\n-                 tcx.global_tcx().layout_of(ty::ParamEnv::empty().and(ty)).unwrap().size.bits()\n+                 let ty = tcx.lift_to_global(&ty).unwrap();\n+                 tcx.layout_of(ty::ParamEnv::empty().and(ty)).unwrap().size.bits()\n             });\n             let amt = 128 - bit_width;\n             write!(f, \"{:?}{}\", ((bits as i128) << amt) >> amt, i)"}, {"sha": "524687f6ba70ae8df22dde8c31bd139c448b39cb", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bdd23bf2155e02d2f889801b3ac02955a1413aa7/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd23bf2155e02d2f889801b3ac02955a1413aa7/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=bdd23bf2155e02d2f889801b3ac02955a1413aa7", "patch": "@@ -1823,8 +1823,8 @@ impl<'tcx> Const<'tcx> {\n         bits: u128,\n         ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n     ) -> &'tcx Self {\n-        let ty = tcx.global_tcx().lift(&ty).unwrap();\n-        let size = tcx.global_tcx().layout_of(ty).unwrap_or_else(|e| {\n+        let ty = tcx.lift_to_global(&ty).unwrap();\n+        let size = tcx.layout_of(ty).unwrap_or_else(|e| {\n             panic!(\"could not compute layout for {:?}: {:?}\", ty, e)\n         }).size;\n         let amt = 128 - size.bits();\n@@ -1857,8 +1857,8 @@ impl<'tcx> Const<'tcx> {\n         if self.ty != ty.value {\n             return None;\n         }\n-        let ty = tcx.global_tcx().lift(&ty).unwrap();\n-        let size = tcx.global_tcx().layout_of(ty).ok()?.size;\n+        let ty = tcx.lift_to_global(&ty).unwrap();\n+        let size = tcx.layout_of(ty).ok()?.size;\n         match self.val {\n             ConstVal::Value(val) => val.to_bits(size),\n             _ => None,\n@@ -1896,8 +1896,8 @@ impl<'tcx> Const<'tcx> {\n         ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n     ) -> Option<u128> {\n         assert_eq!(self.ty, ty.value);\n-        let ty = tcx.global_tcx().lift(&ty).unwrap();\n-        let size = tcx.global_tcx().layout_of(ty).ok()?.size;\n+        let ty = tcx.lift_to_global(&ty).unwrap();\n+        let size = tcx.layout_of(ty).ok()?.size;\n         match self.val {\n             ConstVal::Value(val) => val.to_bits(size),\n             _ => None,"}, {"sha": "d660b40e9cb128bdc3c2f8eadaa063e75df11e69", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdd23bf2155e02d2f889801b3ac02955a1413aa7/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd23bf2155e02d2f889801b3ac02955a1413aa7/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=bdd23bf2155e02d2f889801b3ac02955a1413aa7", "patch": "@@ -374,9 +374,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     // Helper to get a `-1` value of the appropriate type\n     fn neg_1_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> {\n-        let gcx = self.hir.tcx().global_tcx();\n-        let param_ty = ty::ParamEnv::empty().and(gcx.lift(&ty).unwrap());\n-        let bits = gcx.layout_of(param_ty).unwrap().size.bits();\n+        let param_ty = ty::ParamEnv::empty().and(self.hir.tcx().lift_to_global(&ty).unwrap());\n+        let bits = self.hir.tcx().layout_of(param_ty).unwrap().size.bits();\n         let n = (!0u128) >> (128 - bits);\n         let literal = Literal::Value {\n             value: ty::Const::from_bits(self.hir.tcx(), n, param_ty)\n@@ -387,10 +386,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     // Helper to get the minimum value of the appropriate type\n     fn minval_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> {\n-        let gcx = self.hir.tcx().global_tcx();\n         assert!(ty.is_signed());\n-        let param_ty = ty::ParamEnv::empty().and(gcx.lift(&ty).unwrap());\n-        let bits = gcx.layout_of(param_ty).unwrap().size.bits();\n+        let param_ty = ty::ParamEnv::empty().and(self.hir.tcx().lift_to_global(&ty).unwrap());\n+        let bits = self.hir.tcx().layout_of(param_ty).unwrap().size.bits();\n         let n = 1 << (bits - 1);\n         let literal = Literal::Value {\n             value: ty::Const::from_bits(self.hir.tcx(), n, param_ty)"}, {"sha": "0129723371b40e33c1f06d761058554b014d7a8e", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bdd23bf2155e02d2f889801b3ac02955a1413aa7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd23bf2155e02d2f889801b3ac02955a1413aa7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=bdd23bf2155e02d2f889801b3ac02955a1413aa7", "patch": "@@ -156,9 +156,8 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         };\n \n         let trunc = |n| {\n-            let gcx = self.tcx.global_tcx();\n-            let param_ty = self.param_env.and(gcx.lift(&ty).unwrap());\n-            let bit_width = gcx.layout_of(param_ty).unwrap().size.bits();\n+            let param_ty = self.param_env.and(self.tcx.lift_to_global(&ty).unwrap());\n+            let bit_width = self.tcx.layout_of(param_ty).unwrap().size.bits();\n             trace!(\"trunc {} with size {} and amt {}\", n, bit_width, 128 - bit_width);\n             let amt = 128 - bit_width;\n             let result = (n << amt) >> amt;"}]}