{"sha": "01417f245cad2dc7dcafcf285ed6c1be163ac3a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNDE3ZjI0NWNhZDJkYzdkY2FmY2YyODVlZDZjMWJlMTYzYWMzYTU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-30T02:36:24Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-05T01:29:41Z"}, "message": "Mark the contents of `char` stable.", "tree": {"sha": "15b5be68b03c671ffd335d8b84b002e705eb8120", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15b5be68b03c671ffd335d8b84b002e705eb8120"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01417f245cad2dc7dcafcf285ed6c1be163ac3a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01417f245cad2dc7dcafcf285ed6c1be163ac3a5", "html_url": "https://github.com/rust-lang/rust/commit/01417f245cad2dc7dcafcf285ed6c1be163ac3a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01417f245cad2dc7dcafcf285ed6c1be163ac3a5/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8018293e0871645ad266b78864473d82a16d0c0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8018293e0871645ad266b78864473d82a16d0c0f", "html_url": "https://github.com/rust-lang/rust/commit/8018293e0871645ad266b78864473d82a16d0c0f"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "708b0bf86372286f0a58c30c7e3d78da88e2a75b", "filename": "src/libcore/char.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/01417f245cad2dc7dcafcf285ed6c1be163ac3a5/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01417f245cad2dc7dcafcf285ed6c1be163ac3a5/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=01417f245cad2dc7dcafcf285ed6c1be163ac3a5", "patch": "@@ -69,7 +69,7 @@ pub const MAX: char = '\\u{10ffff}';\n \n /// Converts from `u32` to a `char`\n #[inline]\n-#[unstable = \"pending decisions about costructors for primitives\"]\n+#[stable]\n pub fn from_u32(i: u32) -> Option<char> {\n     // catch out-of-bounds and surrogates\n     if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n@@ -92,7 +92,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n /// Panics if given an `radix` > 36.\n ///\n #[inline]\n-#[unstable = \"pending decisions about costructors for primitives\"]\n+#[unstable = \"pending integer conventions\"]\n pub fn from_digit(num: uint, radix: uint) -> Option<char> {\n     if radix > 36 {\n         panic!(\"from_digit: radix is too high (maximum 36)\");\n@@ -111,7 +111,7 @@ pub fn from_digit(num: uint, radix: uint) -> Option<char> {\n }\n \n /// Basic `char` manipulations.\n-#[experimental = \"trait organization may change\"]\n+#[stable]\n pub trait Char {\n     /// Checks if a `char` parses as a numeric digit in the given radix.\n     ///\n@@ -126,7 +126,7 @@ pub trait Char {\n     /// # Panics\n     ///\n     /// Panics if given a radix > 36.\n-    #[unstable = \"pending error conventions\"]\n+    #[unstable = \"pending integer conventions\"]\n     fn is_digit(self, radix: uint) -> bool;\n \n     /// Converts a character to the corresponding digit.\n@@ -140,7 +140,7 @@ pub trait Char {\n     /// # Panics\n     ///\n     /// Panics if given a radix outside the range [0..36].\n-    #[unstable = \"pending error conventions, trait organization\"]\n+    #[unstable = \"pending integer conventions\"]\n     fn to_digit(self, radix: uint) -> Option<uint>;\n \n     /// Returns an iterator that yields the hexadecimal Unicode escape\n@@ -149,7 +149,7 @@ pub trait Char {\n     /// All characters are escaped with Rust syntax of the form `\\\\u{NNNN}`\n     /// where `NNNN` is the shortest hexadecimal representation of the code\n     /// point.\n-    #[unstable = \"pending error conventions, trait organization\"]\n+    #[stable]\n     fn escape_unicode(self) -> EscapeUnicode;\n \n     /// Returns an iterator that yields the 'default' ASCII and\n@@ -164,47 +164,47 @@ pub trait Char {\n     ///   escaped.\n     /// * Any other chars in the range [0x20,0x7e] are not escaped.\n     /// * Any other chars are given hex Unicode escapes; see `escape_unicode`.\n-    #[unstable = \"pending error conventions, trait organization\"]\n+    #[stable]\n     fn escape_default(self) -> EscapeDefault;\n \n     /// Returns the amount of bytes this character would need if encoded in\n     /// UTF-8.\n-    #[unstable = \"pending trait organization\"]\n+    #[stable]\n     fn len_utf8(self) -> uint;\n \n     /// Returns the amount of bytes this character would need if encoded in\n     /// UTF-16.\n-    #[unstable = \"pending trait organization\"]\n+    #[stable]\n     fn len_utf16(self) -> uint;\n \n     /// Encodes this character as UTF-8 into the provided byte buffer,\n     /// and then returns the number of bytes written.\n     ///\n     /// If the buffer is not large enough, nothing will be written into it\n     /// and a `None` will be returned.\n-    #[unstable = \"pending trait organization\"]\n+    #[stable]\n     fn encode_utf8(self, dst: &mut [u8]) -> Option<uint>;\n \n     /// Encodes this character as UTF-16 into the provided `u16` buffer,\n     /// and then returns the number of `u16`s written.\n     ///\n     /// If the buffer is not large enough, nothing will be written into it\n     /// and a `None` will be returned.\n-    #[unstable = \"pending trait organization\"]\n+    #[stable]\n     fn encode_utf16(self, dst: &mut [u16]) -> Option<uint>;\n }\n \n-#[experimental = \"trait is experimental\"]\n-impl Char for char {\n-    #[unstable = \"pending trait organization\"]\n+#[stable]\n+impl CharExt for char {\n+    #[unstable = \"pending integer conventions\"]\n     fn is_digit(self, radix: uint) -> bool {\n         match self.to_digit(radix) {\n             Some(_) => true,\n             None    => false,\n         }\n     }\n \n-    #[unstable = \"pending trait organization\"]\n+    #[unstable = \"pending integer conventions\"]\n     fn to_digit(self, radix: uint) -> Option<uint> {\n         if radix > 36 {\n             panic!(\"to_digit: radix is too high (maximum 36)\");\n@@ -219,12 +219,12 @@ impl Char for char {\n         else { None }\n     }\n \n-    #[unstable = \"pending error conventions, trait organization\"]\n+    #[stable]\n     fn escape_unicode(self) -> EscapeUnicode {\n         EscapeUnicode { c: self, state: EscapeUnicodeState::Backslash }\n     }\n \n-    #[unstable = \"pending error conventions, trait organization\"]\n+    #[stable]\n     fn escape_default(self) -> EscapeDefault {\n         let init_state = match self {\n             '\\t' => EscapeDefaultState::Backslash('t'),\n@@ -240,7 +240,7 @@ impl Char for char {\n     }\n \n     #[inline]\n-    #[unstable = \"pending trait organization\"]\n+    #[stable]\n     fn len_utf8(self) -> uint {\n         let code = self as u32;\n         match () {\n@@ -252,14 +252,14 @@ impl Char for char {\n     }\n \n     #[inline]\n-    #[unstable = \"pending trait organization\"]\n+    #[stable]\n     fn len_utf16(self) -> uint {\n         let ch = self as u32;\n         if (ch & 0xFFFF_u32) == ch { 1 } else { 2 }\n     }\n \n     #[inline]\n-    #[unstable = \"pending error conventions, trait organization\"]\n+    #[unstable = \"pending decision about Iterator/Writer/Reader\"]\n     fn encode_utf8(self, dst: &mut [u8]) -> Option<uint> {\n         // Marked #[inline] to allow llvm optimizing it away\n         let code = self as u32;\n@@ -287,7 +287,7 @@ impl Char for char {\n     }\n \n     #[inline]\n-    #[unstable = \"pending error conventions, trait organization\"]\n+    #[unstable = \"pending decision about Iterator/Writer/Reader\"]\n     fn encode_utf16(self, dst: &mut [u16]) -> Option<uint> {\n         // Marked #[inline] to allow llvm optimizing it away\n         let mut ch = self as u32;\n@@ -310,6 +310,7 @@ impl Char for char {\n /// An iterator over the characters that represent a `char`, as escaped by\n /// Rust's unicode escaping rules.\n #[derive(Clone)]\n+#[stable]\n pub struct EscapeUnicode {\n     c: char,\n     state: EscapeUnicodeState\n@@ -325,6 +326,7 @@ enum EscapeUnicodeState {\n     Done,\n }\n \n+#[stable]\n impl Iterator for EscapeUnicode {\n     type Item = char;\n \n@@ -370,6 +372,7 @@ impl Iterator for EscapeUnicode {\n /// An iterator over the characters that represent a `char`, escaped\n /// for maximum portability.\n #[derive(Clone)]\n+#[stable]\n pub struct EscapeDefault {\n     state: EscapeDefaultState\n }\n@@ -382,6 +385,7 @@ enum EscapeDefaultState {\n     Unicode(EscapeUnicode),\n }\n \n+#[stable]\n impl Iterator for EscapeDefault {\n     type Item = char;\n "}]}