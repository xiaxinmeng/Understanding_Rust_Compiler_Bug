{"sha": "3eba7fcf7336c7cebdea4b2c2140c947b6bac67c", "node_id": "C_kwDOAAsO6NoAKDNlYmE3ZmNmNzMzNmM3Y2ViZGVhNGIyYzIxNDBjOTQ3YjZiYWM2N2M", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-09T23:48:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-10T00:29:05Z"}, "message": "implement simd_shuffle", "tree": {"sha": "d73ea959684c70753de68b20dea04aff1cf2c2d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d73ea959684c70753de68b20dea04aff1cf2c2d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eba7fcf7336c7cebdea4b2c2140c947b6bac67c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eba7fcf7336c7cebdea4b2c2140c947b6bac67c", "html_url": "https://github.com/rust-lang/rust/commit/3eba7fcf7336c7cebdea4b2c2140c947b6bac67c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eba7fcf7336c7cebdea4b2c2140c947b6bac67c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aeff5d9ef3032c6ab618cd346f6cdcfaa46c258", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aeff5d9ef3032c6ab618cd346f6cdcfaa46c258", "html_url": "https://github.com/rust-lang/rust/commit/5aeff5d9ef3032c6ab618cd346f6cdcfaa46c258"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "43c61091b9e4d47ae5bf8169baf79bbfcf2bf801", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3eba7fcf7336c7cebdea4b2c2140c947b6bac67c/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eba7fcf7336c7cebdea4b2c2140c947b6bac67c/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=3eba7fcf7336c7cebdea4b2c2140c947b6bac67c", "patch": "@@ -3,7 +3,7 @@ use std::iter;\n use log::trace;\n \n use rustc_apfloat::{Float, Round};\n-use rustc_middle::ty::layout::{IntegerExt, LayoutOf};\n+use rustc_middle::ty::layout::{HasParamEnv, IntegerExt, LayoutOf};\n use rustc_middle::{mir, mir::BinOp, ty, ty::FloatTy};\n use rustc_target::abi::{Align, Integer};\n \n@@ -614,6 +614,45 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     this.write_immediate(val, &dest.into())?;\n                 }\n             }\n+            \"simd_shuffle\" => {\n+                let &[ref left, ref right, ref index] = check_arg_count(args)?;\n+                let (left, left_len) = this.operand_to_simd(left)?;\n+                let (right, right_len) = this.operand_to_simd(right)?;\n+                let (dest, dest_len) = this.place_to_simd(dest)?;\n+\n+                // `index` is an array, not a SIMD type\n+                let ty::Array(_, index_len) = index.layout.ty.kind() else {\n+                    bug!(\"simd_shuffle index argument has non-array type {}\", index.layout.ty)\n+                };\n+                let index_len = index_len.eval_usize(*this.tcx, this.param_env());\n+\n+                assert_eq!(left_len, right_len);\n+                assert_eq!(index_len, dest_len);\n+\n+                for i in 0..dest_len {\n+                    let src_index: u64 = this\n+                        .read_immediate(&this.operand_index(&index, i)?.into())?\n+                        .to_scalar()?\n+                        .to_u32()?\n+                        .into();\n+                    let dest = this.mplace_index(&dest, i)?;\n+\n+                    let val = if src_index < left_len {\n+                        this.read_immediate(&this.mplace_index(&left, src_index)?.into())?\n+                    } else if src_index < left_len.checked_add(right_len).unwrap() {\n+                        this.read_immediate(\n+                            &this.mplace_index(&right, src_index - left_len)?.into(),\n+                        )?\n+                    } else {\n+                        bug!(\n+                            \"simd_shuffle index {} is out of bounds for 2 vectors of size {}\",\n+                            src_index,\n+                            left_len\n+                        );\n+                    };\n+                    this.write_immediate(*val, &dest.into())?;\n+                }\n+            }\n \n             // Atomic operations\n             \"atomic_load\" => this.atomic_load(args, dest, AtomicReadOp::SeqCst)?,"}, {"sha": "67e4e52a7849e88fdf2c599886a3d7482744fcb8", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3eba7fcf7336c7cebdea4b2c2140c947b6bac67c/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eba7fcf7336c7cebdea4b2c2140c947b6bac67c/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=3eba7fcf7336c7cebdea4b2c2140c947b6bac67c", "patch": "@@ -238,6 +238,17 @@ fn simd_cast() {\n     }\n }\n \n+fn simd_swizzle() {\n+    use Which::*;\n+\n+    let a = f32x4::splat(10.0);\n+    let b = f32x4::from_array([1.0, 2.0, 3.0, -4.0]);\n+\n+    assert_eq!(simd_swizzle!(b, [3, 0, 0, 2]), f32x4::from_array([-4.0, 1.0, 1.0, 3.0]));\n+    assert_eq!(simd_swizzle!(b, [1, 2]), f32x2::from_array([2.0, 3.0]));\n+    assert_eq!(simd_swizzle!(b, a, [First(3), Second(0)]), f32x2::from_array([-4.0, 10.0]));\n+}\n+\n fn simd_intrinsics() {\n     extern \"platform-intrinsic\" {\n         fn simd_eq<T, U>(x: T, y: T) -> U;\n@@ -276,5 +287,6 @@ fn main() {\n     simd_ops_f64();\n     simd_ops_i32();\n     simd_cast();\n+    simd_swizzle();\n     simd_intrinsics();\n }"}]}