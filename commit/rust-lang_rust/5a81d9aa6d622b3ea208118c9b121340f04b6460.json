{"sha": "5a81d9aa6d622b3ea208118c9b121340f04b6460", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhODFkOWFhNmQ2MjJiM2VhMjA4MTE4YzliMTIxMzQwZjA0YjY0NjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-24T15:16:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-24T15:16:20Z"}, "message": "Auto merge of #30932 - arielb1:raw-const-errors, r=nagisa\n\nFixes #30705\n\nr? @nagisa", "tree": {"sha": "5bf3d651526284e7221acdaba3d6cb8a6bfbc6cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bf3d651526284e7221acdaba3d6cb8a6bfbc6cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a81d9aa6d622b3ea208118c9b121340f04b6460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a81d9aa6d622b3ea208118c9b121340f04b6460", "html_url": "https://github.com/rust-lang/rust/commit/5a81d9aa6d622b3ea208118c9b121340f04b6460", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a81d9aa6d622b3ea208118c9b121340f04b6460/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0486e12ad0661adcfdbd926dea17d7edfda419c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0486e12ad0661adcfdbd926dea17d7edfda419c1", "html_url": "https://github.com/rust-lang/rust/commit/0486e12ad0661adcfdbd926dea17d7edfda419c1"}, {"sha": "47593dade78814eb8fe3c58d6ec3094e458bb80a", "url": "https://api.github.com/repos/rust-lang/rust/commits/47593dade78814eb8fe3c58d6ec3094e458bb80a", "html_url": "https://github.com/rust-lang/rust/commit/47593dade78814eb8fe3c58d6ec3094e458bb80a"}], "stats": {"total": 86, "additions": 50, "deletions": 36}, "files": [{"sha": "27354c28d85e67585f253c6c3c755841f1c23c7c", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 50, "deletions": 36, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/5a81d9aa6d622b3ea208118c9b121340f04b6460/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a81d9aa6d622b3ea208118c9b121340f04b6460/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=5a81d9aa6d622b3ea208118c9b121340f04b6460", "patch": "@@ -150,26 +150,36 @@ If you really want global mutable state, try using `static mut` or a global\n \"##,\n \n E0018: r##\"\n-The value of static and const variables must be known at compile time. You\n-can't cast a pointer as an integer because we can't know what value the\n-address will take.\n \n-However, pointers to other constants' addresses are allowed in constants,\n-example:\n+The value of static and constant integers must be known at compile time. You\n+can't cast a pointer to an integer because the address of a pointer can\n+vary.\n \n+For example, if you write:\n ```\n-const X: u32 = 50;\n-const Y: *const u32 = &X;\n+static MY_STATIC: u32 = 42;\n+static MY_STATIC_ADDR: usize = &MY_STATIC as *const _ as usize;\n+static WHAT: usize = (MY_STATIC_ADDR^17) + MY_STATIC_ADDR;\n ```\n \n-Therefore, casting one of these non-constant pointers to an integer results\n-in a non-constant integer which lead to this error. Example:\n+Then `MY_STATIC_ADDR` would contain the address of `MY_STATIC`. However,\n+the address can change when the program is linked, as well as change\n+between different executions due to ASLR, and many linkers would\n+not be able to calculate the value of `WHAT`.\n+\n+On the other hand, static and constant pointers can point either to\n+a known numeric address or to the address of a symbol.\n \n ```\n-const X: u32 = 1;\n-const Y: usize = &X as *const u32 as usize;\n-println!(\"{}\", Y);\n+static MY_STATIC_ADDR: &'static u32 = &MY_STATIC;\n+// ... and also\n+static MY_STATIC_ADDR2: *const u32 = &MY_STATIC;\n+\n+const CONST_ADDR: *const u8 = 0x5f3759df as *const u8;\n ```\n+\n+This does not pose a problem by itself because they can't be\n+accessed directly.\n \"##,\n \n E0019: r##\"\n@@ -347,55 +357,59 @@ From [RFC 246]:\n [RFC 246]: https://github.com/rust-lang/rfcs/pull/246\n \"##,\n \n+\n E0395: r##\"\n-The value assigned to a constant expression must be known at compile time,\n-which is not the case when comparing raw pointers. Erroneous code example:\n+The value assigned to a constant scalar must be known at compile time,\n+which is not the case when comparing raw pointers.\n \n+\n+Erroneous code example:\n ```\n-static foo: i32 = 42;\n-static bar: i32 = 43;\n+static FOO: i32 = 42;\n+static BAR: i32 = 42;\n \n-static baz: bool = { (&foo as *const i32) == (&bar as *const i32) };\n+static BAZ: bool = { (&FOO as *const i32) == (&BAR as *const i32) };\n // error: raw pointers cannot be compared in statics!\n ```\n \n-Please check that the result of the comparison can be determined at compile time\n-or isn't assigned to a constant expression. Example:\n+The address assigned by the linker to `FOO` and `BAR` may or may not\n+be identical, so the value of `BAZ` can't be determined.\n+\n+If you want to do the comparison, please do it at run-time.\n+\n+For example:\n \n ```\n-static foo: i32 = 42;\n-static bar: i32 = 43;\n+static FOO: i32 = 42;\n+static BAR: i32 = 42;\n \n-let baz: bool = { (&foo as *const i32) == (&bar as *const i32) };\n+let baz: bool = { (&FOO as *const i32) == (&BAR as *const i32) };\n // baz isn't a constant expression so it's ok\n ```\n \"##,\n \n E0396: r##\"\n-The value assigned to a constant expression must be known at compile time,\n-which is not the case when dereferencing raw pointers. Erroneous code\n-example:\n+The value behind a raw pointer can't be determined at compile-time\n+(or even link-time), which means it can't be used in a constant\n+expression.\n \n+For example:\n ```\n-const foo: i32 = 42;\n-const baz: *const i32 = (&foo as *const i32);\n+const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n \n-const deref: i32 = *baz;\n+const VALUE: u8 = unsafe { *REG_ADDR };\n // error: raw pointers cannot be dereferenced in constants\n ```\n \n-To fix this error, please do not assign this value to a constant expression.\n-Example:\n+A possible fix is to dereference your pointer at some point in run-time.\n \n-```\n-const foo: i32 = 42;\n-const baz: *const i32 = (&foo as *const i32);\n+For example:\n \n-unsafe { let deref: i32 = *baz; }\n-// baz isn't a constant expression so it's ok\n ```\n+const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n \n-You'll also note that this assignment must be done in an unsafe block!\n+let reg_value = unsafe { *REG_ADDR };\n+```\n \"##,\n \n E0397: r##\""}]}