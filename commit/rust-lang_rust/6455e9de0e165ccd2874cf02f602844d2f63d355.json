{"sha": "6455e9de0e165ccd2874cf02f602844d2f63d355", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NTVlOWRlMGUxNjVjY2QyODc0Y2YwMmY2MDI4NDRkMmY2M2QzNTU=", "commit": {"author": {"name": "WhizSid", "email": "whizsid@aol.com", "date": "2020-10-09T00:27:04Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-11-29T19:26:58Z"}, "message": "Fixed 'Comment removed between type name and =' issue (#4448)\n\n* Fixed Comment removed between type name and = issue\r\n\r\n* Fixed where clause issue and pass the full span\r\n\r\n* has_where condition inline\r\n\r\n* Fixed indentation error on where clause\r\n\r\n* Removed tmp file", "tree": {"sha": "c1c471b2889dd0aec980366bc36ceb5034b56daf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1c471b2889dd0aec980366bc36ceb5034b56daf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6455e9de0e165ccd2874cf02f602844d2f63d355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6455e9de0e165ccd2874cf02f602844d2f63d355", "html_url": "https://github.com/rust-lang/rust/commit/6455e9de0e165ccd2874cf02f602844d2f63d355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6455e9de0e165ccd2874cf02f602844d2f63d355/comments", "author": {"login": "whizsid", "id": 44908250, "node_id": "MDQ6VXNlcjQ0OTA4MjUw", "avatar_url": "https://avatars.githubusercontent.com/u/44908250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whizsid", "html_url": "https://github.com/whizsid", "followers_url": "https://api.github.com/users/whizsid/followers", "following_url": "https://api.github.com/users/whizsid/following{/other_user}", "gists_url": "https://api.github.com/users/whizsid/gists{/gist_id}", "starred_url": "https://api.github.com/users/whizsid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whizsid/subscriptions", "organizations_url": "https://api.github.com/users/whizsid/orgs", "repos_url": "https://api.github.com/users/whizsid/repos", "events_url": "https://api.github.com/users/whizsid/events{/privacy}", "received_events_url": "https://api.github.com/users/whizsid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea712f1a2ca24b74fabe9a09b35caaaa46291695", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea712f1a2ca24b74fabe9a09b35caaaa46291695", "html_url": "https://github.com/rust-lang/rust/commit/ea712f1a2ca24b74fabe9a09b35caaaa46291695"}], "stats": {"total": 81, "additions": 78, "deletions": 3}, "files": [{"sha": "6fdca90b12f448bf1da803d64016968113fb6b7b", "filename": "src/items.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6455e9de0e165ccd2874cf02f602844d2f63d355/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6455e9de0e165ccd2874cf02f602844d2f63d355/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=6455e9de0e165ccd2874cf02f602844d2f63d355", "patch": "@@ -1495,6 +1495,7 @@ fn rewrite_type<R: Rewrite>(\n     generics: &ast::Generics,\n     generic_bounds_opt: Option<&ast::GenericBounds>,\n     rhs: Option<&R>,\n+    span: Span,\n ) -> Option<String> {\n     let mut result = String::with_capacity(128);\n     result.push_str(&format!(\"{}type \", format_visibility(context, vis)));\n@@ -1541,12 +1542,40 @@ fn rewrite_type<R: Rewrite>(\n     if let Some(ty) = rhs {\n         // If there's a where clause, add a newline before the assignment. Otherwise just add a\n         // space.\n-        if !generics.where_clause.predicates.is_empty() {\n+        let has_where = !generics.where_clause.predicates.is_empty();\n+        if has_where {\n             result.push_str(&indent.to_string_with_newline(context.config));\n         } else {\n             result.push(' ');\n         }\n-        let lhs = format!(\"{}=\", result);\n+\n+        let comment_span = context\n+            .snippet_provider\n+            .opt_span_before(span, \"=\")\n+            .map(|op_lo| mk_sp(generics.where_clause.span.hi(), op_lo));\n+\n+        let lhs = match comment_span {\n+            Some(comment_span)\n+                if contains_comment(context.snippet_provider.span_to_snippet(comment_span)?) =>\n+            {\n+                let comment_shape = if has_where {\n+                    Shape::indented(indent, context.config)\n+                } else {\n+                    Shape::indented(indent, context.config)\n+                        .block_left(context.config.tab_spaces())?\n+                };\n+\n+                combine_strs_with_missing_comments(\n+                    context,\n+                    result.trim_end(),\n+                    \"=\",\n+                    comment_span,\n+                    comment_shape,\n+                    true,\n+                )?\n+            }\n+            _ => format!(\"{}=\", result),\n+        };\n \n         // 1 = `;`\n         let shape = Shape::indented(indent, context.config).sub_width(1)?;\n@@ -1563,6 +1592,7 @@ pub(crate) fn rewrite_opaque_type(\n     generic_bounds: &ast::GenericBounds,\n     generics: &ast::Generics,\n     vis: &ast::Visibility,\n+    span: Span,\n ) -> Option<String> {\n     let opaque_type_bounds = OpaqueTypeBounds { generic_bounds };\n     rewrite_type(\n@@ -1573,6 +1603,7 @@ pub(crate) fn rewrite_opaque_type(\n         generics,\n         Some(generic_bounds),\n         Some(&opaque_type_bounds),\n+        span,\n     )\n }\n \n@@ -1801,6 +1832,7 @@ pub(crate) fn rewrite_type_alias(\n     context: &RewriteContext<'_>,\n     indent: Indent,\n     vis: &ast::Visibility,\n+    span: Span,\n ) -> Option<String> {\n     rewrite_type(\n         context,\n@@ -1810,6 +1842,7 @@ pub(crate) fn rewrite_type_alias(\n         generics,\n         generic_bounds_opt,\n         ty_opt,\n+        span,\n     )\n }\n \n@@ -1859,8 +1892,9 @@ pub(crate) fn rewrite_associated_impl_type(\n     generics: &ast::Generics,\n     context: &RewriteContext<'_>,\n     indent: Indent,\n+    span: Span,\n ) -> Option<String> {\n-    let result = rewrite_type_alias(ident, ty_opt, generics, None, context, indent, vis)?;\n+    let result = rewrite_type_alias(ident, ty_opt, generics, None, context, indent, vis, span)?;\n \n     match defaultness {\n         ast::Defaultness::Default(..) => Some(format!(\"default {}\", result)),\n@@ -3118,6 +3152,7 @@ impl Rewrite for ast::ForeignItem {\n                 &context,\n                 shape.indent,\n                 &self.vis,\n+                self.span,\n             ),\n             ast::ForeignItemKind::MacCall(ref mac) => {\n                 rewrite_macro(mac, None, context, shape, MacroPosition::Item)"}, {"sha": "fefeffac95c8fc416a510e215e7f6a2ff8664f65", "filename": "src/visitor.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6455e9de0e165ccd2874cf02f602844d2f63d355/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6455e9de0e165ccd2874cf02f602844d2f63d355/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=6455e9de0e165ccd2874cf02f602844d2f63d355", "patch": "@@ -572,6 +572,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                             &self.get_context(),\n                             self.block_indent,\n                             &item.vis,\n+                            item.span,\n                         );\n                         self.push_rewrite(item.span, rewrite);\n                     }\n@@ -583,6 +584,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                             generic_bounds,\n                             generics,\n                             &item.vis,\n+                            item.span,\n                         );\n                         self.push_rewrite(item.span, rewrite);\n                     }\n@@ -649,6 +651,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     &self.get_context(),\n                     self.block_indent,\n                     &ti.vis,\n+                    ti.span,\n                 );\n                 self.push_rewrite(ti.span, rewrite);\n             }\n@@ -695,6 +698,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         &generics,\n                         &self.get_context(),\n                         self.block_indent,\n+                        ii.span,\n                     )\n                 };\n                 let rewrite = match ty {"}, {"sha": "34b51085e131d4e0b726950097d24b1d096203b1", "filename": "tests/source/issue-4244.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6455e9de0e165ccd2874cf02f602844d2f63d355/tests%2Fsource%2Fissue-4244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6455e9de0e165ccd2874cf02f602844d2f63d355/tests%2Fsource%2Fissue-4244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4244.rs?ref=6455e9de0e165ccd2874cf02f602844d2f63d355", "patch": "@@ -0,0 +1,16 @@\n+pub struct SS {}\n+\n+pub type  A  /* A Comment */      = SS;\n+\n+pub type  B // Comment\n+// B\n+= SS;\n+\n+pub type C \n+ /* Comment C */ = SS;\n+\n+pub trait D <T> {\n+\t\ttype E /* Comment E */ = SS;\n+}\n+\n+type F<'a: 'static, T: Ord + 'static>: Eq + PartialEq where T: 'static + Copy     /* x */   = Vec<u8>;"}, {"sha": "8958ba99e80a73a615fbcbbd7cc6f1af42d1a9c2", "filename": "tests/target/issue-4244.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6455e9de0e165ccd2874cf02f602844d2f63d355/tests%2Ftarget%2Fissue-4244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6455e9de0e165ccd2874cf02f602844d2f63d355/tests%2Ftarget%2Fissue-4244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4244.rs?ref=6455e9de0e165ccd2874cf02f602844d2f63d355", "patch": "@@ -0,0 +1,20 @@\n+pub struct SS {}\n+\n+pub type A /* A Comment */ = SS;\n+\n+pub type B // Comment\n+    // B\n+    = SS;\n+\n+pub type C\n+    /* Comment C */\n+    = SS;\n+\n+pub trait D<T> {\n+    type E /* Comment E */ = SS;\n+}\n+\n+type F<'a: 'static, T: Ord + 'static>: Eq + PartialEq\n+where\n+    T: 'static + Copy, /* x */\n+= Vec<u8>;"}]}