{"sha": "35e8be7407198565c434b69c5b9f85c71f156539", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZThiZTc0MDcxOTg1NjVjNDM0YjY5YzViOWY4NWM3MWYxNTY1Mzk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-15T21:36:07Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-16T08:41:24Z"}, "message": "ast/hir: Rename field-related structures\n\nStructField -> FieldDef (\"field definition\")\nField -> ExprField (\"expression field\", not \"field expression\")\nFieldPat -> PatField (\"pattern field\", not \"field pattern\")\n\nAlso rename visiting and other methods working on them.", "tree": {"sha": "8631a38f33e159fbf916ff177dc61d19522c7176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8631a38f33e159fbf916ff177dc61d19522c7176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35e8be7407198565c434b69c5b9f85c71f156539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35e8be7407198565c434b69c5b9f85c71f156539", "html_url": "https://github.com/rust-lang/rust/commit/35e8be7407198565c434b69c5b9f85c71f156539", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35e8be7407198565c434b69c5b9f85c71f156539/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d57c3e1fb64f0e8446436ac2c414a10e563cdfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d57c3e1fb64f0e8446436ac2c414a10e563cdfa", "html_url": "https://github.com/rust-lang/rust/commit/1d57c3e1fb64f0e8446436ac2c414a10e563cdfa"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "48aef74e4d3c300039b4fa2fe2368ca8bf311e6f", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=35e8be7407198565c434b69c5b9f85c71f156539", "patch": "@@ -119,7 +119,7 @@ impl LateLintPass<'_> for InconsistentStructConstructor {\n \n // Check whether the order of the fields in the constructor is consistent with the order in the\n // definition.\n-fn is_consistent_order<'tcx>(fields: &'tcx [hir::Field<'tcx>], def_order_map: &FxHashMap<Symbol, usize>) -> bool {\n+fn is_consistent_order<'tcx>(fields: &'tcx [hir::ExprField<'tcx>], def_order_map: &FxHashMap<Symbol, usize>) -> bool {\n     let mut cur_idx = usize::MIN;\n     for f in fields {\n         let next_idx = def_order_map[&f.ident.name];"}, {"sha": "7e6d4d3a2160bd055095e53160f6ab870a9afe8c", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=35e8be7407198565c434b69c5b9f85c71f156539", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{meets_msrv, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n-use rustc_ast::ast::{Attribute, Item, ItemKind, StructField, Variant, VariantData, VisibilityKind};\n+use rustc_ast::ast::{Attribute, Item, ItemKind, FieldDef, Variant, VariantData, VisibilityKind};\n use rustc_attr as attr;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -142,11 +142,11 @@ fn check_manual_non_exhaustive_enum(cx: &EarlyContext<'_>, item: &Item, variants\n }\n \n fn check_manual_non_exhaustive_struct(cx: &EarlyContext<'_>, item: &Item, data: &VariantData) {\n-    fn is_private(field: &StructField) -> bool {\n+    fn is_private(field: &FieldDef) -> bool {\n         matches!(field.vis.kind, VisibilityKind::Inherited)\n     }\n \n-    fn is_non_exhaustive_marker(field: &StructField) -> bool {\n+    fn is_non_exhaustive_marker(field: &FieldDef) -> bool {\n         is_private(field) && field.ty.kind.is_unit() && field.ident.map_or(true, |n| n.as_str().starts_with('_'))\n     }\n "}, {"sha": "985a66b6cfca24f333a57f0a2449e5bc356f0017", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=35e8be7407198565c434b69c5b9f85c71f156539", "patch": "@@ -188,7 +188,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         self.check_missing_docs_attrs(cx, attrs, impl_item.span, article, desc);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'tcx>, sf: &'tcx hir::StructField<'_>) {\n+    fn check_field_def(&mut self, cx: &LateContext<'tcx>, sf: &'tcx hir::FieldDef<'_>) {\n         if !sf.is_positional() {\n             let attrs = cx.tcx.hir().attrs(sf.hir_id);\n             self.check_missing_docs_attrs(cx, attrs, sf.span, \"a\", \"struct field\");"}, {"sha": "e76c8624b6fe8ac50cd27fbe9b59643fefbdf458", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=35e8be7407198565c434b69c5b9f85c71f156539", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{last_path_segment, span_lint_and_help};\n use rustc_hir::{\n-    intravisit, Body, Expr, ExprKind, FieldPat, FnDecl, HirId, LocalSource, MatchSource, Mutability, Pat, PatKind,\n+    intravisit, Body, Expr, ExprKind, PatField, FnDecl, HirId, LocalSource, MatchSource, Mutability, Pat, PatKind,\n     QPath, Stmt, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -281,7 +281,7 @@ where\n \n fn find_first_mismatch_in_struct<'tcx>(\n     cx: &LateContext<'tcx>,\n-    field_pats: &[FieldPat<'_>],\n+    field_pats: &[PatField<'_>],\n     field_defs: &[FieldDef],\n     substs_ref: SubstsRef<'tcx>,\n ) -> Option<(Span, Mutability, Level)> {"}, {"sha": "f7a6399a7f048499b1fff6bdb166d3ddf3612d78", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=35e8be7407198565c434b69c5b9f85c71f156539", "patch": "@@ -271,7 +271,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n         self.check_fn_decl(cx, decl);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'_>, field: &hir::StructField<'_>) {\n+    fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n         self.check_ty(cx, &field.ty, false);\n     }\n \n@@ -821,7 +821,7 @@ impl<'tcx> LateLintPass<'tcx> for TypeComplexity {\n         self.check_fndecl(cx, decl);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'tcx>, field: &'tcx hir::StructField<'_>) {\n+    fn check_field_def(&mut self, cx: &LateContext<'tcx>, field: &'tcx hir::FieldDef<'_>) {\n         // enum variants are also struct fields now\n         self.check_type(cx, &field.ty);\n     }"}, {"sha": "fa613bb7da3001958f3b7d901ec2d37e890580d8", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=35e8be7407198565c434b69c5b9f85c71f156539", "patch": "@@ -276,7 +276,7 @@ fn transform_with_focus_on_idx(alternatives: &mut Vec<P<Pat>>, focus_idx: usize)\n /// and check that all `fp_i` where `i \u2208 ((0...n) \\ k)` between two patterns are equal.\n fn extend_with_struct_pat(\n     path1: &ast::Path,\n-    fps1: &mut Vec<ast::FieldPat>,\n+    fps1: &mut Vec<ast::PatField>,\n     rest1: bool,\n     start: usize,\n     alternatives: &mut Vec<P<Pat>>,"}, {"sha": "c57614800805ea2ae2c9f52fe26b9edfc4607c75", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=35e8be7407198565c434b69c5b9f85c71f156539", "patch": "@@ -101,12 +101,12 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n         done();\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'tcx>, field: &'tcx hir::StructField<'_>) {\n+    fn check_field_def(&mut self, cx: &LateContext<'tcx>, field: &'tcx hir::FieldDef<'_>) {\n         if !has_attr(cx, field.hir_id) {\n             return;\n         }\n         prelude();\n-        PrintVisitor::new(\"field\").visit_struct_field(field);\n+        PrintVisitor::new(\"field\").visit_field_def(field);\n         done();\n     }\n "}, {"sha": "64ee9e65bb1a6e16aa10ec7718afc511ac9c36d6", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e8be7407198565c434b69c5b9f85c71f156539/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=35e8be7407198565c434b69c5b9f85c71f156539", "patch": "@@ -80,8 +80,8 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     // }\n     // }\n     //\n-    // fn check_struct_field(&mut self, cx: &LateContext<'tcx>, field: &'tcx\n-    // hir::StructField) {\n+    // fn check_field_def(&mut self, cx: &LateContext<'tcx>, field: &'tcx\n+    // hir::FieldDef) {\n     // if !has_attr(&field.attrs) {\n     // return;\n     // }"}, {"sha": "05afa5342962f6f134beb7d8ebcd7623ca1ba735", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35e8be7407198565c434b69c5b9f85c71f156539/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e8be7407198565c434b69c5b9f85c71f156539/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=35e8be7407198565c434b69c5b9f85c71f156539", "patch": "@@ -66,7 +66,7 @@ pub fn eq_range_end(l: &RangeEnd, r: &RangeEnd) -> bool {\n     }\n }\n \n-pub fn eq_field_pat(l: &FieldPat, r: &FieldPat) -> bool {\n+pub fn eq_field_pat(l: &PatField, r: &PatField) -> bool {\n     l.is_placeholder == r.is_placeholder\n         && eq_id(l.ident, r.ident)\n         && eq_pat(&l.pat, &r.pat)\n@@ -175,7 +175,7 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n     }\n }\n \n-pub fn eq_field(l: &Field, r: &Field) -> bool {\n+pub fn eq_field(l: &ExprField, r: &ExprField) -> bool {\n     l.is_placeholder == r.is_placeholder\n         && eq_id(l.ident, r.ident)\n         && eq_expr(&l.expr, &r.expr)\n@@ -359,7 +359,7 @@ pub fn eq_variant_data(l: &VariantData, r: &VariantData) -> bool {\n     }\n }\n \n-pub fn eq_struct_field(l: &StructField, r: &StructField) -> bool {\n+pub fn eq_struct_field(l: &FieldDef, r: &FieldDef) -> bool {\n     l.is_placeholder == r.is_placeholder\n         && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))\n         && eq_vis(&l.vis, &r.vis)"}, {"sha": "0c0e4d3b4ce80ada140aff0ba44192048c84be2a", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e8be7407198565c434b69c5b9f85c71f156539/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e8be7407198565c434b69c5b9f85c71f156539/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=35e8be7407198565c434b69c5b9f85c71f156539", "patch": "@@ -51,7 +51,7 @@ pub struct Range<'a> {\n pub fn range<'a>(expr: &'a hir::Expr<'_>) -> Option<Range<'a>> {\n     /// Finds the field named `name` in the field. Always return `Some` for\n     /// convenience.\n-    fn get_field<'c>(name: &str, fields: &'c [hir::Field<'_>]) -> Option<&'c hir::Expr<'c>> {\n+    fn get_field<'c>(name: &str, fields: &'c [hir::ExprField<'_>]) -> Option<&'c hir::Expr<'c>> {\n         let expr = &fields.iter().find(|field| field.ident.name.as_str() == name)?.expr;\n \n         Some(expr)"}, {"sha": "af82f992d56f6475a599177b0a4b034a3685b44a", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35e8be7407198565c434b69c5b9f85c71f156539/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e8be7407198565c434b69c5b9f85c71f156539/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=35e8be7407198565c434b69c5b9f85c71f156539", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def::Res;\n use rustc_hir::{\n-    BinOpKind, Block, BlockCheckMode, BodyId, BorrowKind, CaptureBy, Expr, ExprKind, Field, FieldPat, FnRetTy,\n+    BinOpKind, Block, BlockCheckMode, BodyId, BorrowKind, CaptureBy, Expr, ExprKind, ExprField, PatField, FnRetTy,\n     GenericArg, GenericArgs, Guard, HirId, InlineAsmOperand, Lifetime, LifetimeName, ParamName, Pat, PatKind, Path,\n     PathSegment, QPath, Stmt, StmtKind, Ty, TyKind, TypeBinding,\n };\n@@ -266,7 +266,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n         over(left, right, |l, r| self.eq_expr(l, r))\n     }\n \n-    fn eq_field(&mut self, left: &Field<'_>, right: &Field<'_>) -> bool {\n+    fn eq_field(&mut self, left: &ExprField<'_>, right: &ExprField<'_>) -> bool {\n         left.ident.name == right.ident.name && self.eq_expr(&left.expr, &right.expr)\n     }\n \n@@ -290,8 +290,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n         left.name == right.name\n     }\n \n-    fn eq_fieldpat(&mut self, left: &FieldPat<'_>, right: &FieldPat<'_>) -> bool {\n-        let (FieldPat { ident: li, pat: lp, .. }, FieldPat { ident: ri, pat: rp, .. }) = (&left, &right);\n+    fn eq_fieldpat(&mut self, left: &PatField<'_>, right: &PatField<'_>) -> bool {\n+        let (PatField { ident: li, pat: lp, .. }, PatField { ident: ri, pat: rp, .. }) = (&left, &right);\n         li.name == ri.name && self.eq_pat(lp, rp)\n     }\n "}]}