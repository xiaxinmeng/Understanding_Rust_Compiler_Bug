{"sha": "cd1047e0d45619f1d668bfbf6cccbbf6396335be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMTA0N2UwZDQ1NjE5ZjFkNjY4YmZiZjZjY2NiYmY2Mzk2MzM1YmU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-01T20:02:21Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-01T20:02:21Z"}, "message": "Fix bug in integer range matching", "tree": {"sha": "b3fba8dfdf0318be0e8b0748876e3f6188c1c6fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3fba8dfdf0318be0e8b0748876e3f6188c1c6fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd1047e0d45619f1d668bfbf6cccbbf6396335be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1047e0d45619f1d668bfbf6cccbbf6396335be", "html_url": "https://github.com/rust-lang/rust/commit/cd1047e0d45619f1d668bfbf6cccbbf6396335be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd1047e0d45619f1d668bfbf6cccbbf6396335be/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74256630117fedf479edbd1145cac47c88036aec", "url": "https://api.github.com/repos/rust-lang/rust/commits/74256630117fedf479edbd1145cac47c88036aec", "html_url": "https://github.com/rust-lang/rust/commit/74256630117fedf479edbd1145cac47c88036aec"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "c219fd2218223a0cbbc28b87404409cde7850067", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cd1047e0d45619f1d668bfbf6cccbbf6396335be/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1047e0d45619f1d668bfbf6cccbbf6396335be/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=cd1047e0d45619f1d668bfbf6cccbbf6396335be", "patch": "@@ -106,27 +106,34 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n \n             PatternKind::Range(PatternRange { lo, hi, ty, end }) => {\n-                let range = match ty.sty {\n+                let (range, bias) = match ty.sty {\n                     ty::Char => {\n-                        Some(('\\u{0000}' as u128, '\\u{10FFFF}' as u128, Size::from_bits(32)))\n+                        (Some(('\\u{0000}' as u128, '\\u{10FFFF}' as u128, Size::from_bits(32))), 0)\n                     }\n                     ty::Int(ity) => {\n                         // FIXME(49937): refactor these bit manipulations into interpret.\n                         let size = Integer::from_attr(&tcx, SignedInt(ity)).size();\n-                        let min = 1u128 << (size.bits() - 1);\n-                        let max = (1u128 << (size.bits() - 1)) - 1;\n-                        Some((min, max, size))\n+                        let max = !0u128 >> (128 - size.bits());\n+                        let bias = 1u128 << (size.bits() - 1);\n+                        (Some((0, max, size)), bias)\n                     }\n                     ty::Uint(uty) => {\n                         // FIXME(49937): refactor these bit manipulations into interpret.\n                         let size = Integer::from_attr(&tcx, UnsignedInt(uty)).size();\n                         let max = !0u128 >> (128 - size.bits());\n-                        Some((0, max, size))\n+                        (Some((0, max, size)), 0)\n                     }\n-                    _ => None,\n+                    _ => (None, 0),\n                 };\n                 if let Some((min, max, sz)) = range {\n                     if let (Some(lo), Some(hi)) = (lo.val.try_to_bits(sz), hi.val.try_to_bits(sz)) {\n+                        // We want to compare ranges numerically, but the order of the bitwise\n+                        // representation of signed integers does not match their numeric order.\n+                        // Thus, to correct the ordering, we need to shift the range of signed\n+                        // integers to correct the comparison. This is achieved by XORing with a\n+                        // bias (see pattern/_match.rs for another pertinent example of this\n+                        // pattern).\n+                        let (lo, hi) = (lo ^ bias, hi ^ bias);\n                         if lo <= min && (hi > max || hi == max && end == RangeEnd::Included) {\n                             // Irrefutable pattern match.\n                             return Ok(());"}, {"sha": "53e9ea9a5775b6efb0b300fcf8a83bdc8174b24c", "filename": "src/test/ui/match-on-negative-integer-ranges.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd1047e0d45619f1d668bfbf6cccbbf6396335be/src%2Ftest%2Fui%2Fmatch-on-negative-integer-ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1047e0d45619f1d668bfbf6cccbbf6396335be/src%2Ftest%2Fui%2Fmatch-on-negative-integer-ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch-on-negative-integer-ranges.rs?ref=cd1047e0d45619f1d668bfbf6cccbbf6396335be", "patch": "@@ -0,0 +1,7 @@\n+// run-pass\n+\n+fn main() {\n+    assert_eq!(false, match -50_i8 { -128i8..=-101i8 => true, _ => false, });\n+\n+    assert_eq!(false, if let -128i8..=-101i8 = -50_i8 { true } else { false });\n+}"}]}