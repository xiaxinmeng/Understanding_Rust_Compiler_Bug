{"sha": "f45f52532a394d2d607fc5693364ad820049376d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NWY1MjUzMmEzOTRkMmQ2MDdmYzU2OTMzNjRhZDgyMDA0OTM3NmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-14T12:55:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-14T12:55:23Z"}, "message": "Auto merge of #53196 - davidtwco:compile-fail-to-ui, r=nikomatsakis\n\nMove `compile-fail` tests to `ui`\n\nFixes #46841, #52531, #44844.\n\nr? @nikomatsakis", "tree": {"sha": "e2ea80cabc3432c685fdd7eedf84d86f965ac957", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2ea80cabc3432c685fdd7eedf84d86f965ac957"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f45f52532a394d2d607fc5693364ad820049376d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f45f52532a394d2d607fc5693364ad820049376d", "html_url": "https://github.com/rust-lang/rust/commit/f45f52532a394d2d607fc5693364ad820049376d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f45f52532a394d2d607fc5693364ad820049376d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d67ba90dab243d2b80324e29df2f06ba13c97607", "url": "https://api.github.com/repos/rust-lang/rust/commits/d67ba90dab243d2b80324e29df2f06ba13c97607", "html_url": "https://github.com/rust-lang/rust/commit/d67ba90dab243d2b80324e29df2f06ba13c97607"}, {"sha": "7b026568f7bf36540fdc7db44dd8e37bb62ad233", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b026568f7bf36540fdc7db44dd8e37bb62ad233", "html_url": "https://github.com/rust-lang/rust/commit/7b026568f7bf36540fdc7db44dd8e37bb62ad233"}], "stats": {"total": 59626, "additions": 59549, "deletions": 77}, "files": [{"sha": "7349c520c240778f09e433cbbc4aff66d58ff523", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -435,13 +435,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn report_similar_impl_candidates(&self,\n-                                      impl_candidates: Vec<ty::TraitRef<'tcx>>,\n+                                      mut impl_candidates: Vec<ty::TraitRef<'tcx>>,\n                                       err: &mut DiagnosticBuilder)\n     {\n         if impl_candidates.is_empty() {\n             return;\n         }\n \n+        let len = impl_candidates.len();\n         let end = if impl_candidates.len() <= 5 {\n             impl_candidates.len()\n         } else {\n@@ -459,10 +460,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         });\n \n+        // Sort impl candidates so that ordering is consistent for UI tests.\n+        let normalized_impl_candidates = &mut impl_candidates[0..end]\n+            .iter()\n+            .map(normalize)\n+            .collect::<Vec<String>>();\n+        normalized_impl_candidates.sort();\n+\n         err.help(&format!(\"the following implementations were found:{}{}\",\n-                          &impl_candidates[0..end].iter().map(normalize).collect::<String>(),\n-                          if impl_candidates.len() > 5 {\n-                              format!(\"\\nand {} others\", impl_candidates.len() - 4)\n+                          normalized_impl_candidates.join(\"\"),\n+                          if len > 5 {\n+                              format!(\"\\nand {} others\", len - 4)\n                           } else {\n                               \"\".to_owned()\n                           }"}, {"sha": "d9848a554aba5bbde1a5c0a0458e7d29c72e36c4", "filename": "src/test/compile-fail/auxiliary/panic-runtime-lang-items.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-lang-items.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/panic-runtime/auxiliary/panic-runtime-lang-items.rs"}, {"sha": "4bb36839d988bc0cc61ceeef925e36347c2540ff", "filename": "src/test/compile-fail/auxiliary/panic-runtime-unwind.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-unwind.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/panic-runtime/auxiliary/panic-runtime-unwind.rs"}, {"sha": "4bb36839d988bc0cc61ceeef925e36347c2540ff", "filename": "src/test/compile-fail/auxiliary/panic-runtime-unwind2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-unwind2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-unwind2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-unwind2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/panic-runtime/auxiliary/panic-runtime-unwind2.rs"}, {"sha": "2183338b24985870edaadd89342620c19080efda", "filename": "src/test/compile-fail/auxiliary/wants-panic-runtime-unwind.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fwants-panic-runtime-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fwants-panic-runtime-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fwants-panic-runtime-unwind.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/panic-runtime/auxiliary/wants-panic-runtime-unwind.rs"}, {"sha": "8869e950b3a44f3706ae2d3d8fb5ced5fd6fb325", "filename": "src/test/compile-fail/meta-expected-error-wrong-rev.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Fmeta-expected-error-wrong-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Fmeta-expected-error-wrong-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmeta-expected-error-wrong-rev.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // revisions: a\n // should-fail\n "}, {"sha": "0fe0da2fa2c5774bdd28967bd0d9c6f093546c99", "filename": "src/test/compile-fail/two-panic-runtimes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Ftwo-panic-runtimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Ftwo-panic-runtimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftwo-panic-runtimes.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/panic-runtime/two-panic-runtimes.rs"}, {"sha": "b178006411ba05d963edee9f628641e1a48e46cc", "filename": "src/test/compile-fail/want-abort-got-unwind.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Fwant-abort-got-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Fwant-abort-got-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwant-abort-got-unwind.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/panic-runtime/want-abort-got-unwind.rs"}, {"sha": "de8e010c3cb48471f64f7bab8ad039bc4b6cd225", "filename": "src/test/compile-fail/want-abort-got-unwind2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Fwant-abort-got-unwind2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fcompile-fail%2Fwant-abort-got-unwind2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwant-abort-got-unwind2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/panic-runtime/want-abort-got-unwind2.rs"}, {"sha": "825f664bf9f5ff387d032e7a5ff351636ddfec9b", "filename": "src/test/ui/.gitattributes", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2F.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2F.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2F.gitattributes?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/.gitattributes"}, {"sha": "a9abc79400e67892147d8ae2735fe6eab16a0fb4", "filename": "src/test/ui/E0501.ast.nll.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0501.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0501.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0501.ast.nll.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,31 @@\n+error[E0501]: cannot borrow `*a` as mutable because previous closure requires unique access\n+  --> $DIR/E0501.rs:28:23\n+   |\n+LL |     let bar = || {\n+   |               -- closure construction occurs here\n+LL |         inside_closure(a)\n+   |                        - first borrow occurs due to use of `a` in closure\n+LL |     };\n+LL |     outside_closure_1(a); //[ast]~ ERROR cannot borrow `*a` as mutable because previous closure requires unique access\n+   |                       ^ borrow occurs here\n+...\n+LL |     drop(bar);\n+   |          --- borrow later used here\n+\n+error[E0501]: cannot borrow `*a` as immutable because previous closure requires unique access\n+  --> $DIR/E0501.rs:31:23\n+   |\n+LL |     let bar = || {\n+   |               -- closure construction occurs here\n+LL |         inside_closure(a)\n+   |                        - first borrow occurs due to use of `a` in closure\n+...\n+LL |     outside_closure_2(a); //[ast]~ ERROR cannot borrow `*a` as immutable because previous closure requires unique access\n+   |                       ^ borrow occurs here\n+...\n+LL |     drop(bar);\n+   |          --- borrow later used here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0501`."}, {"sha": "229b16650173e388abbf8ac72eba127e4384c786", "filename": "src/test/ui/E0501.ast.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0501.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0501.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0501.ast.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,31 @@\n+error[E0501]: cannot borrow `*a` as mutable because previous closure requires unique access\n+  --> $DIR/E0501.rs:28:23\n+   |\n+LL |     let bar = || {\n+   |               -- closure construction occurs here\n+LL |         inside_closure(a)\n+   |                        - previous borrow occurs due to use of `a` in closure\n+LL |     };\n+LL |     outside_closure_1(a); //[ast]~ ERROR cannot borrow `*a` as mutable because previous closure requires unique access\n+   |                       ^ borrow occurs here\n+...\n+LL | }\n+   | - borrow from closure ends here\n+\n+error[E0501]: cannot borrow `*a` as immutable because previous closure requires unique access\n+  --> $DIR/E0501.rs:31:23\n+   |\n+LL |     let bar = || {\n+   |               -- closure construction occurs here\n+LL |         inside_closure(a)\n+   |                        - previous borrow occurs due to use of `a` in closure\n+...\n+LL |     outside_closure_2(a); //[ast]~ ERROR cannot borrow `*a` as immutable because previous closure requires unique access\n+   |                       ^ borrow occurs here\n+...\n+LL | }\n+   | - borrow from closure ends here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0501`."}, {"sha": "a9abc79400e67892147d8ae2735fe6eab16a0fb4", "filename": "src/test/ui/E0501.mir.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0501.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0501.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0501.mir.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,31 @@\n+error[E0501]: cannot borrow `*a` as mutable because previous closure requires unique access\n+  --> $DIR/E0501.rs:28:23\n+   |\n+LL |     let bar = || {\n+   |               -- closure construction occurs here\n+LL |         inside_closure(a)\n+   |                        - first borrow occurs due to use of `a` in closure\n+LL |     };\n+LL |     outside_closure_1(a); //[ast]~ ERROR cannot borrow `*a` as mutable because previous closure requires unique access\n+   |                       ^ borrow occurs here\n+...\n+LL |     drop(bar);\n+   |          --- borrow later used here\n+\n+error[E0501]: cannot borrow `*a` as immutable because previous closure requires unique access\n+  --> $DIR/E0501.rs:31:23\n+   |\n+LL |     let bar = || {\n+   |               -- closure construction occurs here\n+LL |         inside_closure(a)\n+   |                        - first borrow occurs due to use of `a` in closure\n+...\n+LL |     outside_closure_2(a); //[ast]~ ERROR cannot borrow `*a` as immutable because previous closure requires unique access\n+   |                       ^ borrow occurs here\n+...\n+LL |     drop(bar);\n+   |          --- borrow later used here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0501`."}, {"sha": "5643e1ef09146eb1fe6b4daae607938d6c3797b1", "filename": "src/test/ui/E0501.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0501.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0501.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0501.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/E0501.rs"}, {"sha": "cf6b8d9c8d1d5938618b6d00181dd6b2e0977fd1", "filename": "src/test/ui/E0506.ast.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0506.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0506.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0506.ast.nll.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,14 @@\n+error[E0506]: cannot assign to `fancy_num` because it is borrowed\n+  --> $DIR/E0506.rs:21:5\n+   |\n+LL |     let fancy_ref = &fancy_num;\n+   |                     ---------- borrow of `fancy_num` occurs here\n+LL |     fancy_num = FancyNum { num: 6 }; //[ast]~ ERROR E0506\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `fancy_num` occurs here\n+...\n+LL |     println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n+   |                                                 ------------- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "54b4e163681574da7b536e7883e648f17d490f5c", "filename": "src/test/ui/E0506.ast.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0506.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0506.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0506.ast.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0506]: cannot assign to `fancy_num` because it is borrowed\n+  --> $DIR/E0506.rs:21:5\n+   |\n+LL |     let fancy_ref = &fancy_num;\n+   |                      --------- borrow of `fancy_num` occurs here\n+LL |     fancy_num = FancyNum { num: 6 }; //[ast]~ ERROR E0506\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `fancy_num` occurs here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "cf6b8d9c8d1d5938618b6d00181dd6b2e0977fd1", "filename": "src/test/ui/E0506.mir.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0506.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0506.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0506.mir.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,14 @@\n+error[E0506]: cannot assign to `fancy_num` because it is borrowed\n+  --> $DIR/E0506.rs:21:5\n+   |\n+LL |     let fancy_ref = &fancy_num;\n+   |                     ---------- borrow of `fancy_num` occurs here\n+LL |     fancy_num = FancyNum { num: 6 }; //[ast]~ ERROR E0506\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `fancy_num` occurs here\n+...\n+LL |     println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n+   |                                                 ------------- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "c4a7f257394e72088990d7941839d48ee03e9fde", "filename": "src/test/ui/E0506.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0506.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/E0506.rs"}, {"sha": "faf7411af317b15b2f8faf13cb99ff2a052cd173", "filename": "src/test/ui/E0508-fail.ast.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0508-fail.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0508-fail.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508-fail.ast.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n+  --> $DIR/E0508-fail.rs:18:18\n+   |\n+LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n+   |                  ^^^^^^^^\n+   |                  |\n+   |                  cannot move out of here\n+   |                  help: consider using a reference instead: `&array[0]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0508`."}, {"sha": "faf7411af317b15b2f8faf13cb99ff2a052cd173", "filename": "src/test/ui/E0508-fail.mir.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0508-fail.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0508-fail.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508-fail.mir.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n+  --> $DIR/E0508-fail.rs:18:18\n+   |\n+LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n+   |                  ^^^^^^^^\n+   |                  |\n+   |                  cannot move out of here\n+   |                  help: consider using a reference instead: `&array[0]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0508`."}, {"sha": "0c3dce6b0346a78950348aa5acfd47d733ee0ccc", "filename": "src/test/ui/E0508-fail.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0508-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0508-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508-fail.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/E0508.rs"}, {"sha": "5878b795b771ca30432e1160020474a08058bf18", "filename": "src/test/ui/E0508.ast.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0508.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0508.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.ast.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n+  --> $DIR/E0508.rs:18:18\n+   |\n+LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n+   |                  ^^^^^^^^\n+   |                  |\n+   |                  cannot move out of here\n+   |                  help: consider using a reference instead: `&array[0]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0508`."}, {"sha": "5878b795b771ca30432e1160020474a08058bf18", "filename": "src/test/ui/E0508.mir.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0508.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0508.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.mir.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n+  --> $DIR/E0508.rs:18:18\n+   |\n+LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n+   |                  ^^^^^^^^\n+   |                  |\n+   |                  cannot move out of here\n+   |                  help: consider using a reference instead: `&array[0]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0508`."}, {"sha": "3a5255d0f5fe318409b7ed41d93c2f231c942991", "filename": "src/test/ui/E0583.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0583.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0583.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0583.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/E0583.rs"}, {"sha": "82e1cccbb68af735de9ba91be462239dcd879fa9", "filename": "src/test/ui/E0583.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0583.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0583.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0583.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0583]: file not found for module `module_that_doesnt_exist`\n+  --> $DIR/E0583.rs:11:5\n+   |\n+LL | mod module_that_doesnt_exist; //~ ERROR E0583\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: name the file either module_that_doesnt_exist.rs or module_that_doesnt_exist/mod.rs inside the directory \"$DIR\"\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0583`."}, {"sha": "f96eb01abe4e70f2a8a21b7a992e48facae4b737", "filename": "src/test/ui/E0594.ast.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0594.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0594.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0594.ast.nll.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0594]: cannot assign to immutable static item `NUM`\n+  --> $DIR/E0594.rs:17:5\n+   |\n+LL |     NUM = 20; //[ast]~ ERROR E0594\n+   |     ^^^^^^^^ cannot assign\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "f84c1f56ad01ccbec56eea486c41d2610c80f645", "filename": "src/test/ui/E0594.ast.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0594.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0594.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0594.ast.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0594]: cannot assign to immutable static item\n+  --> $DIR/E0594.rs:17:5\n+   |\n+LL |     NUM = 20; //[ast]~ ERROR E0594\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "f96eb01abe4e70f2a8a21b7a992e48facae4b737", "filename": "src/test/ui/E0594.mir.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0594.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0594.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0594.mir.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0594]: cannot assign to immutable static item `NUM`\n+  --> $DIR/E0594.rs:17:5\n+   |\n+LL |     NUM = 20; //[ast]~ ERROR E0594\n+   |     ^^^^^^^^ cannot assign\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "e5e96451d1360dbf38279cb32dd330a9ec5dc48b", "filename": "src/test/ui/E0594.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0594.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/E0594.rs"}, {"sha": "589db4a032d385d056082079473dc5ef4da0c4c9", "filename": "src/test/ui/E0596.ast.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0596.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0596.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0596.ast.nll.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+  --> $DIR/E0596.rs:16:13\n+   |\n+LL |     let x = 1;\n+   |         - help: consider changing this to be mutable: `mut x`\n+LL |     let y = &mut x; //[ast]~ ERROR [E0596]\n+   |             ^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "d88530b21647e9f775c5feffa704ebc160abbad2", "filename": "src/test/ui/E0596.ast.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0596.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0596.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0596.ast.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0596]: cannot borrow immutable local variable `x` as mutable\n+  --> $DIR/E0596.rs:16:18\n+   |\n+LL |     let x = 1;\n+   |         - consider changing this to `mut x`\n+LL |     let y = &mut x; //[ast]~ ERROR [E0596]\n+   |                  ^ cannot borrow mutably\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "589db4a032d385d056082079473dc5ef4da0c4c9", "filename": "src/test/ui/E0596.mir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0596.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0596.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0596.mir.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+  --> $DIR/E0596.rs:16:13\n+   |\n+LL |     let x = 1;\n+   |         - help: consider changing this to be mutable: `mut x`\n+LL |     let y = &mut x; //[ast]~ ERROR [E0596]\n+   |             ^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "52bdff55d86a3c5dd35e333efedcd2c8abfab6f4", "filename": "src/test/ui/E0596.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2FE0596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0596.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/E0596.rs"}, {"sha": "fe052f2f47ffda103b01b199ac3f6a1b3e044bac", "filename": "src/test/ui/absolute-paths-in-nested-use-groups.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fabsolute-paths-in-nested-use-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fabsolute-paths-in-nested-use-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabsolute-paths-in-nested-use-groups.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/absolute-paths-in-nested-use-groups.rs"}, {"sha": "e88d26718a01ef242c7637a7181176893a27d834", "filename": "src/test/ui/absolute-paths-in-nested-use-groups.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fabsolute-paths-in-nested-use-groups.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fabsolute-paths-in-nested-use-groups.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabsolute-paths-in-nested-use-groups.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,21 @@\n+error[E0433]: failed to resolve. crate root in paths can only be used in start position\n+  --> $DIR/absolute-paths-in-nested-use-groups.rs:16:5\n+   |\n+LL |     ::bar,       //~ ERROR crate root in paths can only be used in start position\n+   |     ^ crate root in paths can only be used in start position\n+\n+error[E0433]: failed to resolve. `super` in paths can only be used in start position\n+  --> $DIR/absolute-paths-in-nested-use-groups.rs:17:5\n+   |\n+LL |     super::bar,  //~ ERROR `super` in paths can only be used in start position\n+   |     ^^^^^ `super` in paths can only be used in start position\n+\n+error[E0433]: failed to resolve. `self` in paths can only be used in start position\n+  --> $DIR/absolute-paths-in-nested-use-groups.rs:18:5\n+   |\n+LL |     self::bar,   //~ ERROR `self` in paths can only be used in start position\n+   |     ^^^^ `self` in paths can only be used in start position\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "2aa8f1c3813090291fbca72df73f78ee8f2f8785", "filename": "src/test/ui/access-mode-in-closures.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/access-mode-in-closures.rs:19:15\n+   |\n+LL |         match *s { sty(v) => v } //~ ERROR cannot move out\n+   |               ^^       - move occurs because v has type `std::vec::Vec<isize>`, which does not implement the `Copy` trait\n+   |               |\n+   |               cannot move out of borrowed content\n+   |               help: consider removing this dereference operator: `s`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "bad192fc2cfea95bbb149a26748cde2747ef57ed", "filename": "src/test/ui/access-mode-in-closures.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Faccess-mode-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Faccess-mode-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/access-mode-in-closures.rs"}, {"sha": "daecbb6ed299356ee0651044fda7e9bd2a528bfe", "filename": "src/test/ui/access-mode-in-closures.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/access-mode-in-closures.rs:19:15\n+   |\n+LL |         match *s { sty(v) => v } //~ ERROR cannot move out\n+   |               ^^       - hint: to prevent move, use `ref v` or `ref mut v`\n+   |               |\n+   |               cannot move out of borrowed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "e398f16a065bd186c4b46a2ac3c5777d14e05114", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/alloc-error-handler-bad-signature-1.rs"}, {"sha": "6dd905ceab4057b94f2b82ce630bce6e951adc7a", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-1.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,14 @@\n+error: return type should be `!`\n+  --> $DIR/alloc-error-handler-bad-signature-1.rs:22:6\n+   |\n+LL | ) -> () //~ ERROR return type should be `!`\n+   |      ^^\n+\n+error: argument should be `Layout`\n+  --> $DIR/alloc-error-handler-bad-signature-1.rs:21:11\n+   |\n+LL |     info: &Layout, //~ ERROR argument should be `Layout`\n+   |           ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4fee9d27e51759275aea4dcbdd5cd77216413fae", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/alloc-error-handler-bad-signature-2.rs"}, {"sha": "c1fcdc758336080adee6f03365e2f57cd66a82c6", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,14 @@\n+error: return type should be `!`\n+  --> $DIR/alloc-error-handler-bad-signature-2.rs:22:3\n+   |\n+LL | ) { //~ ERROR return type should be `!`\n+   |   ^\n+\n+error: argument should be `Layout`\n+  --> $DIR/alloc-error-handler-bad-signature-2.rs:21:11\n+   |\n+LL |     info: Layout, //~ ERROR argument should be `Layout`\n+   |           ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "828a78055d5f2ca21edae22a5db2c7d1117d0bc0", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/alloc-error-handler-bad-signature-3.rs"}, {"sha": "9b792c46c24b9cf5ee5207e91bf0621c16fb07db", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-3.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,10 @@\n+error: function should have one argument\n+  --> $DIR/alloc-error-handler-bad-signature-3.rs:20:1\n+   |\n+LL | / fn oom() -> ! { //~ ERROR function should have one argument\n+LL | |     loop {}\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e5650d5b7b0994d67a74255901110bd1c18812ef", "filename": "src/test/ui/allocator/auxiliary/system-allocator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Fauxiliary%2Fsystem-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Fauxiliary%2Fsystem-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fauxiliary%2Fsystem-allocator.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/allocator/auxiliary/system-allocator.rs"}, {"sha": "e5650d5b7b0994d67a74255901110bd1c18812ef", "filename": "src/test/ui/allocator/auxiliary/system-allocator2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Fauxiliary%2Fsystem-allocator2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Fauxiliary%2Fsystem-allocator2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fauxiliary%2Fsystem-allocator2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/allocator/auxiliary/system-allocator2.rs"}, {"sha": "989c102b86e699e72c15b4530862844d6d5a3cee", "filename": "src/test/ui/allocator/function-allocator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ffunction-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ffunction-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ffunction-allocator.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/allocator/function-allocator.rs"}, {"sha": "8649b6b1244520f45abc75437024f69e6ea76aa9", "filename": "src/test/ui/allocator/function-allocator.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ffunction-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ffunction-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ffunction-allocator.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,8 @@\n+error: allocators must be statics\n+  --> $DIR/function-allocator.rs:13:1\n+   |\n+LL | fn foo() {} //~ ERROR: allocators must be statics\n+   | ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6559335960ac5e1804c40d6304ee87c18c7d804a", "filename": "src/test/ui/allocator/not-an-allocator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/allocator/not-an-allocator.rs"}, {"sha": "757c5066a66085a7688573e27561b77202a1bb7b", "filename": "src/test/ui/allocator/not-an-allocator.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,35 @@\n+error[E0277]: the trait bound `usize: std::alloc::GlobalAlloc` is not satisfied\n+  --> $DIR/not-an-allocator.rs:12:1\n+   |\n+LL | static A: usize = 0;\n+   | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n+   |\n+   = note: required by `std::alloc::GlobalAlloc::alloc`\n+\n+error[E0277]: the trait bound `usize: std::alloc::GlobalAlloc` is not satisfied\n+  --> $DIR/not-an-allocator.rs:12:1\n+   |\n+LL | static A: usize = 0;\n+   | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n+   |\n+   = note: required by `std::alloc::GlobalAlloc::dealloc`\n+\n+error[E0277]: the trait bound `usize: std::alloc::GlobalAlloc` is not satisfied\n+  --> $DIR/not-an-allocator.rs:12:1\n+   |\n+LL | static A: usize = 0;\n+   | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n+   |\n+   = note: required by `std::alloc::GlobalAlloc::realloc`\n+\n+error[E0277]: the trait bound `usize: std::alloc::GlobalAlloc` is not satisfied\n+  --> $DIR/not-an-allocator.rs:12:1\n+   |\n+LL | static A: usize = 0;\n+   | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n+   |\n+   = note: required by `std::alloc::GlobalAlloc::alloc_zeroed`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "7a97a11df20334d7e88e1de082249393cfba59c2", "filename": "src/test/ui/allocator/two-allocators.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/allocator/two-allocators.rs"}, {"sha": "5285ee93f2d6a6f7f23f7fd62153f2a48e74080c", "filename": "src/test/ui/allocator/two-allocators.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,8 @@\n+error: cannot define more than one #[global_allocator]\n+  --> $DIR/two-allocators.rs:16:1\n+   |\n+LL | static B: System = System;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e747140dfe560f2c3c140282a1ba94d55bf0445e", "filename": "src/test/ui/allocator/two-allocators2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/allocator/two-allocators2.rs"}, {"sha": "2b23ce38ede76bb9960c9b8a009959449e5e784c", "filename": "src/test/ui/allocator/two-allocators2.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,4 @@\n+error: the #[global_allocator] in this crate conflicts with global allocator in: system_allocator\n+\n+error: aborting due to previous error\n+"}, {"sha": "dd86b02bd20ec98c2fe1041bc7d9d126aac2c6a6", "filename": "src/test/ui/allocator/two-allocators3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/allocator/two-allocators3.rs"}, {"sha": "86e385a96a1b6ff9c0624e06dea2fb01b88e0ad3", "filename": "src/test/ui/allocator/two-allocators3.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,4 @@\n+error: the #[global_allocator] in system_allocator conflicts with this global allocator in: system_allocator2\n+\n+error: aborting due to previous error\n+"}, {"sha": "4d37ba920f3d6bfb3add472d237646ecd34e86de", "filename": "src/test/ui/anon-params-deprecated.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fanon-params-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fanon-params-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-deprecated.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/anon-params-deprecated.rs"}, {"sha": "fa13b8d97e5d954bd7a8ab737783296a485bac93", "filename": "src/test/ui/anon-params-deprecated.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,34 @@\n+error: anonymous parameters are deprecated and will be removed in the next edition.\n+  --> $DIR/anon-params-deprecated.rs:15:12\n+   |\n+LL |     fn foo(i32); //~ ERROR anonymous parameters are deprecated\n+   |            ^^^ help: Try naming the parameter or explicitly ignoring it: `_: i32`\n+   |\n+note: lint level defined here\n+  --> $DIR/anon-params-deprecated.rs:11:11\n+   |\n+LL | #![forbid(anonymous_parameters)]\n+   |           ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n+\n+error: anonymous parameters are deprecated and will be removed in the next edition.\n+  --> $DIR/anon-params-deprecated.rs:18:30\n+   |\n+LL |     fn bar_with_default_impl(String, String) {}\n+   |                              ^^^^^^ help: Try naming the parameter or explicitly ignoring it: `_: String`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n+\n+error: anonymous parameters are deprecated and will be removed in the next edition.\n+  --> $DIR/anon-params-deprecated.rs:18:38\n+   |\n+LL |     fn bar_with_default_impl(String, String) {}\n+   |                                      ^^^^^^ help: Try naming the parameter or explicitly ignoring it: `_: String`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "673314ec4c9978bf98327b22ff2b8c5ea7e6b73b", "filename": "src/test/ui/arg-count-mismatch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farg-count-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farg-count-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-count-mismatch.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/arg-count-mismatch.rs"}, {"sha": "699e36f3472d632b2e95e482fa56d03f5dc2330d", "filename": "src/test/ui/arg-count-mismatch.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farg-count-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farg-count-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-count-mismatch.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+  --> $DIR/arg-count-mismatch.rs:15:28\n+   |\n+LL | fn f(x: isize) { }\n+   | -------------- defined here\n+LL | \n+LL | fn main() { let i: (); i = f(); }\n+   |                            ^^^ expected 1 parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "1f657ca58326eb4bafbd3db64a52d82807add1b9", "filename": "src/test/ui/arg-type-mismatch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farg-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farg-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-type-mismatch.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/arg-type-mismatch.rs"}, {"sha": "2b24d9db3f5b6b7f0c88f0fd7c5458f950dd0529", "filename": "src/test/ui/arg-type-mismatch.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-type-mismatch.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/arg-type-mismatch.rs:16:30\n+   |\n+LL | fn main() { let i: (); i = f(()); }\n+   |                              ^^ expected isize, found ()\n+   |\n+   = note: expected type `isize`\n+              found type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "47e1c09f380b89d6601257017e709657766ab559", "filename": "src/test/ui/array-not-vector.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-not-vector.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/array-not-vector.rs"}, {"sha": "83bf058c449c971057ebb96f079b721da1d75bda", "filename": "src/test/ui/array-not-vector.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farray-not-vector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farray-not-vector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-not-vector.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/array-not-vector.rs:12:19\n+   |\n+LL |     let _x: i32 = [1, 2, 3];\n+   |                   ^^^^^^^^^ expected i32, found array of 3 elements\n+   |\n+   = note: expected type `i32`\n+              found type `[{integer}; 3]`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/array-not-vector.rs:19:20\n+   |\n+LL |     let _y: &i32 = x;\n+   |                    ^ expected i32, found slice\n+   |\n+   = note: expected type `&i32`\n+              found type `&[i32]`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "91007fcd63a28b3d6c0cb0b1585215449bdd0287", "filename": "src/test/ui/array_const_index-0.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farray_const_index-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farray_const_index-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-0.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/array_const_index-0.rs"}, {"sha": "b71d224f4f0ebaf9aabcf6f45d44626018228ed0", "filename": "src/test/ui/array_const_index-0.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-0.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error: this constant cannot be used\n+  --> $DIR/array_const_index-0.rs:12:1\n+   |\n+LL | const B: i32 = (&A)[1];\n+   | ^^^^^^^^^^^^^^^-------^\n+   |                |\n+   |                index out of bounds: the len is 0 but the index is 1\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "66739d308a70fd99b1c3bbb528f16d0ed9e3aff4", "filename": "src/test/ui/array_const_index-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farray_const_index-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farray_const_index-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-1.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/array_const_index-1.rs"}, {"sha": "02f86a693af0c286ffdc0479b0d9f1e22b515890", "filename": "src/test/ui/array_const_index-1.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-1.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error: this constant cannot be used\n+  --> $DIR/array_const_index-1.rs:12:1\n+   |\n+LL | const B: i32 = A[1];\n+   | ^^^^^^^^^^^^^^^----^\n+   |                |\n+   |                index out of bounds: the len is 0 but the index is 1\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "c2b54e37e399d9cc724b9af569013f729ea560cb", "filename": "src/test/ui/asm/asm-bad-clobber.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/asm-bad-clobber.rs"}, {"sha": "81ab006a18ad32eb0a39f1dc029dca508a011cf1", "filename": "src/test/ui/asm/asm-bad-clobber.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0664]: clobber should not be surrounded by braces\n+  --> $DIR/asm-bad-clobber.rs:32:37\n+   |\n+LL |         asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n+   |                                     ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0664`."}, {"sha": "2eefd4235bcfe4241ce77be2b7b45095cd6d2fc5", "filename": "src/test/ui/asm/asm-in-bad-modifier.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/asm-in-bad-modifier.rs"}, {"sha": "dcb11bd1e763030a6e72a9b0c1f8ad00b9f11c51", "filename": "src/test/ui/asm/asm-in-bad-modifier.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,16 @@\n+error[E0662]: input operand constraint contains '='\n+  --> $DIR/asm-in-bad-modifier.rs:33:39\n+   |\n+LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5)); //~ ERROR operand constraint contains '='\n+   |                                       ^^^^\n+\n+error[E0663]: input operand constraint contains '+'\n+  --> $DIR/asm-in-bad-modifier.rs:34:39\n+   |\n+LL |         asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5)); //~ ERROR operand constraint contains '+'\n+   |                                       ^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0662, E0663.\n+For more information about an error, try `rustc --explain E0662`."}, {"sha": "bfc1fd68fe07ba4845ad506db3cac119c1dc1ebc", "filename": "src/test/ui/asm/asm-misplaced-option.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/asm-misplaced-option.rs"}, {"sha": "46723918a3afe45b600ce6126293efaa1f19daa5", "filename": "src/test/ui/asm/asm-misplaced-option.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,26 @@\n+warning: unrecognized option\n+  --> $DIR/asm-misplaced-option.rs:36:64\n+   |\n+LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n+   |                                                                ^^^^\n+\n+warning: expected a clobber, found an option\n+  --> $DIR/asm-misplaced-option.rs:43:80\n+   |\n+LL |         asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n+   |                                                                                ^^^^^^^^^^\n+\n+error: compilation successful\n+  --> $DIR/asm-misplaced-option.rs:31:1\n+   |\n+LL | / pub fn main() { //~ ERROR compilation successful\n+LL | |     // assignment not dead\n+LL | |     let mut x: isize = 0;\n+LL | |     unsafe {\n+...  |\n+LL | |     assert_eq!(x, 13);\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "45b0c84275be46ef203595a015511bd35870a775", "filename": "src/test/ui/asm/asm-out-assign-imm.nll.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.nll.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/ui/asm-out-assign-imm.nll.stderr"}, {"sha": "73143f1154631be50106dbf82ee28d79e985a0f7", "filename": "src/test/ui/asm/asm-out-assign-imm.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/ui/asm-out-assign-imm.rs"}, {"sha": "83cb8092e16a29e7174f5e24a616e8bbfa610ba6", "filename": "src/test/ui/asm/asm-out-assign-imm.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/ui/asm-out-assign-imm.stderr"}, {"sha": "40d2ded8a885bda74d06a300005b07a6fd602828", "filename": "src/test/ui/asm/asm-out-no-modifier.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/asm-out-no-modifier.rs"}, {"sha": "4e9d7b884b3b777182e84ebd543dd7328bd51bc8", "filename": "src/test/ui/asm/asm-out-no-modifier.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0661]: output operand constraint lacks '=' or '+'\n+  --> $DIR/asm-out-no-modifier.rs:32:29\n+   |\n+LL |         asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5)); //~ ERROR output operand constraint lacks '='\n+   |                             ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0661`."}, {"sha": "5f6685e5c1c9f43ca0ce4ee2c7374f9ac950e341", "filename": "src/test/ui/asm/asm-out-read-uninit.ast.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.ast.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0381]: use of possibly uninitialized variable: `x`\n+  --> $DIR/asm-out-read-uninit.rs:35:43\n+   |\n+LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n+   |                                           ^ use of possibly uninitialized `x`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0381`."}, {"sha": "5f6685e5c1c9f43ca0ce4ee2c7374f9ac950e341", "filename": "src/test/ui/asm/asm-out-read-uninit.mir.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.mir.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0381]: use of possibly uninitialized variable: `x`\n+  --> $DIR/asm-out-read-uninit.rs:35:43\n+   |\n+LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n+   |                                           ^ use of possibly uninitialized `x`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0381`."}, {"sha": "c308a9f0850813f51830ce596979026887ae9021", "filename": "src/test/ui/asm/asm-out-read-uninit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/asm-out-read-uninit.rs"}, {"sha": "6d415eb733318108a18aa6d9a9f3ee6af596f3fa", "filename": "src/test/ui/assign-imm-local-twice.ast.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.nll.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,15 @@\n+error[E0384]: cannot assign twice to immutable variable `v`\n+  --> $DIR/assign-imm-local-twice.rs:20:5\n+   |\n+LL |     let v: isize;\n+   |         - consider changing this to `mut v`\n+LL |     //[mir]~^ NOTE consider changing this to `mut v`\n+LL |     v = 1; //[ast]~ NOTE first assignment\n+   |     ----- first assignment to `v`\n+...\n+LL |     v = 2; //[ast]~ ERROR cannot assign twice to immutable variable\n+   |     ^^^^^ cannot assign twice to immutable variable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0384`."}, {"sha": "32752621e149f0971befe8d0953720e5c8c9de20", "filename": "src/test/ui/assign-imm-local-twice.ast.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error[E0384]: cannot assign twice to immutable variable `v`\n+  --> $DIR/assign-imm-local-twice.rs:20:5\n+   |\n+LL |     v = 1; //[ast]~ NOTE first assignment\n+   |     ----- first assignment to `v`\n+...\n+LL |     v = 2; //[ast]~ ERROR cannot assign twice to immutable variable\n+   |     ^^^^^ cannot assign twice to immutable variable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0384`."}, {"sha": "6d415eb733318108a18aa6d9a9f3ee6af596f3fa", "filename": "src/test/ui/assign-imm-local-twice.mir.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassign-imm-local-twice.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassign-imm-local-twice.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.mir.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,15 @@\n+error[E0384]: cannot assign twice to immutable variable `v`\n+  --> $DIR/assign-imm-local-twice.rs:20:5\n+   |\n+LL |     let v: isize;\n+   |         - consider changing this to `mut v`\n+LL |     //[mir]~^ NOTE consider changing this to `mut v`\n+LL |     v = 1; //[ast]~ NOTE first assignment\n+   |     ----- first assignment to `v`\n+...\n+LL |     v = 2; //[ast]~ ERROR cannot assign twice to immutable variable\n+   |     ^^^^^ cannot assign twice to immutable variable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0384`."}, {"sha": "ee9dafdd49eb86c897d6ed4672ff8dd0d54e5248", "filename": "src/test/ui/assign-imm-local-twice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassign-imm-local-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassign-imm-local-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/assign-imm-local-twice.rs"}, {"sha": "4518ce36b6da13140019cfdc9a7d5cac12fc25f4", "filename": "src/test/ui/assign-to-method.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-to-method.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/assign-to-method.rs"}, {"sha": "930b4512572c2d4d015dc5d1c5057d39fa151f9c", "filename": "src/test/ui/assign-to-method.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassign-to-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassign-to-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-to-method.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0615]: attempted to take value of method `speak` on type `cat`\n+  --> $DIR/assign-to-method.rs:30:8\n+   |\n+LL |   nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method\n+   |        ^^^^^\n+   |\n+   = help: maybe a `()` to call it is missing?\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0615`."}, {"sha": "5b24c6bd79f96e75a4666054d35232886241a4a3", "filename": "src/test/ui/assignment-operator-unimplemented.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassignment-operator-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassignment-operator-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassignment-operator-unimplemented.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/assignment-operator-unimplemented.rs"}, {"sha": "983d698c63ebe9f97f54d0d053d37ccbb221e1b5", "filename": "src/test/ui/assignment-operator-unimplemented.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassignment-operator-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassignment-operator-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassignment-operator-unimplemented.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,13 @@\n+error[E0368]: binary assignment operation `+=` cannot be applied to type `Foo`\n+  --> $DIR/assignment-operator-unimplemented.rs:16:3\n+   |\n+LL |   a += *b; //~ Error: binary assignment operation `+=` cannot be applied to type `Foo`\n+   |   -^^^^^^\n+   |   |\n+   |   cannot use `+=` on type `Foo`\n+   |\n+   = note: an implementation of `std::ops::AddAssign` might be missing for `Foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0368`."}, {"sha": "7eab831258f2ecfdbdbc61d7670b3373d2cd83b7", "filename": "src/test/ui/assoc-inherent.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassoc-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassoc-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/assoc-inherent.rs"}, {"sha": "11497cba0ffaaa91e726b436aa74572f84b49c9f", "filename": "src/test/ui/assoc-inherent.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0202]: associated types are not allowed in inherent impls\n+  --> $DIR/assoc-inherent.rs:16:5\n+   |\n+LL |     type Bar = isize; //~ERROR associated types are not allowed in inherent impls\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0202`."}, {"sha": "5051e78d1ba178b07f318479a85bc99c4f6c372f", "filename": "src/test/ui/associated-const/associated-const-ambiguity-report.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-const-ambiguity-report.rs"}, {"sha": "0832b1a2605b0d08a3edd93dde6c5adfec83bf61", "filename": "src/test/ui/associated-const/associated-const-ambiguity-report.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,20 @@\n+error[E0034]: multiple applicable items in scope\n+  --> $DIR/associated-const-ambiguity-report.rs:28:16\n+   |\n+LL | const X: i32 = <i32>::ID; //~ ERROR E0034\n+   |                ^^^^^^^^^ multiple `ID` found\n+   |\n+note: candidate #1 is defined in an impl of the trait `Foo` for the type `i32`\n+  --> $DIR/associated-const-ambiguity-report.rs:21:5\n+   |\n+LL |     const ID: i32 = 1;\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: candidate #2 is defined in an impl of the trait `Bar` for the type `i32`\n+  --> $DIR/associated-const-ambiguity-report.rs:25:5\n+   |\n+LL |     const ID: i32 = 3;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0034`."}, {"sha": "2cc10f0f956b7105a8d9346403c52aa5a69cf1f7", "filename": "src/test/ui/associated-const/associated-const-array-len.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-array-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-array-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-array-len.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-const-array-len.rs"}, {"sha": "5504af8fecd2c4aa51927d1a7e72026bfcfe164d", "filename": "src/test/ui/associated-const/associated-const-array-len.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-array-len.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/associated-const-array-len.rs:16:16\n+   |\n+LL | const X: [i32; <i32 as Foo>::ID] = [0, 1, 2];\n+   |                ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+note: required by `Foo::ID`\n+  --> $DIR/associated-const-array-len.rs:13:5\n+   |\n+LL |     const ID: usize;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "42db13f4f3bd4423260a5a9e76c376310c0afdfe", "filename": "src/test/ui/associated-const/associated-const-dead-code.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-dead-code.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-const-dead-code.rs"}, {"sha": "ee0658121838aaa52ff6ff3d24c4445c665bcd36", "filename": "src/test/ui/associated-const/associated-const-dead-code.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-dead-code.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,14 @@\n+error: associated const is never used: `BAR`\n+  --> $DIR/associated-const-dead-code.rs:16:5\n+   |\n+LL |     const BAR: u32 = 1;\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/associated-const-dead-code.rs:11:9\n+   |\n+LL | #![deny(dead_code)]\n+   |         ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "45f53418dca50d7e538ba2e592dfeb243beee7ce", "filename": "src/test/ui/associated-const/associated-const-generic-obligations.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-const-generic-obligations.rs"}, {"sha": "97986a27c64155992738c938e2f1359b3cb9a6df", "filename": "src/test/ui/associated-const/associated-const-generic-obligations.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `T: Foo` is not satisfied\n+  --> $DIR/associated-const-generic-obligations.rs:25:5\n+   |\n+LL |     const FROM: &'static str = \"foo\";\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: Foo` bound\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "77653b27fb53874cb0268f38d8684450a9b31eb2", "filename": "src/test/ui/associated-const/associated-const-impl-wrong-lifetime.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-lifetime.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/ui/associated-const-impl-wrong-lifetime.rs"}, {"sha": "f8375899e3e01cbee946b13024a6d3aca1d99095", "filename": "src/test/ui/associated-const/associated-const-impl-wrong-lifetime.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-lifetime.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/ui/associated-const-impl-wrong-lifetime.stderr"}, {"sha": "240dfd160974b06e55ec64b9f00670a9acb3b088", "filename": "src/test/ui/associated-const/associated-const-impl-wrong-type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-type.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/ui/associated-const-impl-wrong-type.rs"}, {"sha": "cfccacaee282afa1be50a47ad3aa9522e81fa1c9", "filename": "src/test/ui/associated-const/associated-const-impl-wrong-type.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-type.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/ui/associated-const-impl-wrong-type.stderr"}, {"sha": "f837d9ab8e530f2e0b5ecb714189e3150776bd1a", "filename": "src/test/ui/associated-const/associated-const-in-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-const-in-trait.rs"}, {"sha": "7804e44f2d722a7051641bccc24e7bfe04927e9c", "filename": "src/test/ui/associated-const/associated-const-in-trait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/associated-const-in-trait.rs:19:6\n+   |\n+LL | impl Trait {\n+   |      ^^^^^ the trait `Trait` cannot be made into an object\n+   |\n+   = note: the trait cannot contain associated consts like `N`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "f9a57cd6d75ef39da232bde135858ad63793d3ae", "filename": "src/test/ui/associated-const/associated-const-no-item.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-no-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-no-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-no-item.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-const-no-item.rs"}, {"sha": "a09c04ea0b2fda629206e30e1c5676416cdcf7aa", "filename": "src/test/ui/associated-const/associated-const-no-item.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-no-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-no-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-no-item.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,13 @@\n+error[E0599]: no associated item named `ID` found for type `i32` in the current scope\n+  --> $DIR/associated-const-no-item.rs:16:16\n+   |\n+LL | const X: i32 = <i32>::ID;\n+   |                ^^^^^^^^^ associated item not found in `i32`\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `ID`, perhaps you need to implement it:\n+           candidate #1: `Foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "b5accfff5bbf545808901a1ceb6a66ea4794ff93", "filename": "src/test/ui/associated-const/associated-const-private-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-private-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-private-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-private-impl.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-const-private-impl.rs"}, {"sha": "65be3753baccebf6bb839b1c357af9a0664ccdd4", "filename": "src/test/ui/associated-const/associated-const-private-impl.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-private-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-private-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-private-impl.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0624]: associated constant `ID` is private\n+  --> $DIR/associated-const-private-impl.rs:24:19\n+   |\n+LL |     assert_eq!(1, bar1::Foo::ID);\n+   |                   ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0624`."}, {"sha": "630a234fa66410e2cf886b0bc15244759c1a99e4", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arms.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arms.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-const-type-parameter-arms.rs"}, {"sha": "a88dd4d995503b7d2e7bdb6c7d904869d2c314d3", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arms.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arms.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,15 @@\n+error[E0158]: associated consts cannot be referenced in patterns\n+  --> $DIR/associated-const-type-parameter-arms.rs:31:9\n+   |\n+LL |         A::X => println!(\"A::X\"),\n+   |         ^^^^\n+\n+error[E0158]: associated consts cannot be referenced in patterns\n+  --> $DIR/associated-const-type-parameter-arms.rs:33:9\n+   |\n+LL |         B::X => println!(\"B::X\"),\n+   |         ^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0158`."}, {"sha": "d196cf2215601b4389e772cc72b5092abf8055a7", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-const-type-parameter-arrays-2.rs"}, {"sha": "a440f1f82f1b5ec4f6353133990623aa2beb4603", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays-2.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: the trait bound `A: Foo` is not satisfied\n+  --> $DIR/associated-const-type-parameter-arrays-2.rs:27:22\n+   |\n+LL |     let _array = [4; <A as Foo>::Y];\n+   |                      ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n+   |\n+   = help: consider adding a `where A: Foo` bound\n+note: required by `Foo::Y`\n+  --> $DIR/associated-const-type-parameter-arrays-2.rs:13:5\n+   |\n+LL |     const Y: usize;\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "0b24cab2a681cc6c6138b320c23ca8a799178deb", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-const-type-parameter-arrays.rs"}, {"sha": "48891546360027461c3a083963ccf2083ea631e5", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: the trait bound `A: Foo` is not satisfied\n+  --> $DIR/associated-const-type-parameter-arrays.rs:27:23\n+   |\n+LL |     let _array: [u32; <A as Foo>::Y];\n+   |                       ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n+   |\n+   = help: consider adding a `where A: Foo` bound\n+note: required by `Foo::Y`\n+  --> $DIR/associated-const-type-parameter-arrays.rs:13:5\n+   |\n+LL |     const Y: usize;\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "497ff426b2fae5f8d8939895032c6ec2ec155d17", "filename": "src/test/ui/associated-const/associated-const-upper-case-lint.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-upper-case-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-upper-case-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-upper-case-lint.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-const-upper-case-lint.rs"}, {"sha": "7a5cad69094f5ee9df517afc775382743d1eedbd", "filename": "src/test/ui/associated-const/associated-const-upper-case-lint.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-upper-case-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-upper-case-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-upper-case-lint.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,14 @@\n+error: associated constant `not_upper` should have an upper case name such as `NOT_UPPER`\n+  --> $DIR/associated-const-upper-case-lint.rs:17:5\n+   |\n+LL |     const not_upper: bool = true;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/associated-const-upper-case-lint.rs:11:9\n+   |\n+LL | #![deny(non_upper_case_globals)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "85ea949b9c8da28603ecca4bfb991f1f6a10a48f", "filename": "src/test/ui/associated-item/associated-item-duplicate-names-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-item-duplicate-names-2.rs"}, {"sha": "3b9be8976b42e9bb0dfc0975e30966bde61f896d", "filename": "src/test/ui/associated-item/associated-item-duplicate-names-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0201]: duplicate definitions with name `bar`:\n+  --> $DIR/associated-item-duplicate-names-2.rs:16:5\n+   |\n+LL |     const bar: bool = true;\n+   |     ----------------------- previous definition of `bar` here\n+LL |     fn bar() {} //~ ERROR duplicate definitions\n+   |     ^^^^^^^^^^^ duplicate definition\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0201`."}, {"sha": "12cab13d0b9b33bee7402b73e4f4d515b9bb2f6d", "filename": "src/test/ui/associated-item/associated-item-duplicate-names-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-item-duplicate-names-3.rs"}, {"sha": "3edf59f2010f1638c72f9b21d47b47b3ab449881", "filename": "src/test/ui/associated-item/associated-item-duplicate-names-3.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0201]: duplicate definitions with name `Bar`:\n+  --> $DIR/associated-item-duplicate-names-3.rs:23:5\n+   |\n+LL |     type Bar = i16;\n+   |     --------------- previous definition of `Bar` here\n+LL |     type Bar = u16; //~ ERROR duplicate definitions\n+   |     ^^^^^^^^^^^^^^^ duplicate definition\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0201`."}, {"sha": "a2fc1bc01776771db2655ff034febde660eef7cd", "filename": "src/test/ui/associated-item/associated-item-duplicate-names.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-item-duplicate-names.rs"}, {"sha": "4b060a991f9d73cbce1f59f5316b1d9c3b686dd1", "filename": "src/test/ui/associated-item/associated-item-duplicate-names.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,19 @@\n+error[E0201]: duplicate definitions with name `Ty`:\n+  --> $DIR/associated-item-duplicate-names.rs:21:5\n+   |\n+LL |     type Ty = ();\n+   |     ------------- previous definition of `Ty` here\n+LL |     type Ty = usize; //~ ERROR duplicate definitions\n+   |     ^^^^^^^^^^^^^^^^ duplicate definition\n+\n+error[E0201]: duplicate definitions with name `BAR`:\n+  --> $DIR/associated-item-duplicate-names.rs:23:5\n+   |\n+LL |     const BAR: u32 = 7;\n+   |     ------------------- previous definition of `BAR` here\n+LL |     const BAR: u32 = 8; //~ ERROR duplicate definitions\n+   |     ^^^^^^^^^^^^^^^^^^^ duplicate definition\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0201`."}, {"sha": "7daf0d3c4e29758522cab5cd06e86d4dc2b1c120", "filename": "src/test/ui/associated-path-shl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-path-shl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-path-shl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-path-shl.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-path-shl.rs"}, {"sha": "fa41d4abff482d18f5fa693cb2000d4a18d6cb96", "filename": "src/test/ui/associated-path-shl.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-path-shl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-path-shl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-path-shl.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,43 @@\n+error[E0412]: cannot find type `A` in this scope\n+  --> $DIR/associated-path-shl.rs:14:14\n+   |\n+LL |     let _: <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+   |              ^ not found in this scope\n+\n+error[E0412]: cannot find type `A` in this scope\n+  --> $DIR/associated-path-shl.rs:15:15\n+   |\n+LL |     let _ = <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+   |               ^ not found in this scope\n+\n+error[E0412]: cannot find type `A` in this scope\n+  --> $DIR/associated-path-shl.rs:16:11\n+   |\n+LL |     let <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+   |           ^ not found in this scope\n+\n+error[E0412]: cannot find type `A` in this scope\n+  --> $DIR/associated-path-shl.rs:17:17\n+   |\n+LL |     let 0 ..= <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+   |                 ^ not found in this scope\n+\n+error[E0412]: cannot find type `A` in this scope\n+  --> $DIR/associated-path-shl.rs:19:7\n+   |\n+LL |     <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+   |       ^ not found in this scope\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/associated-path-shl.rs:17:15\n+   |\n+LL |     let 0 ..= <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+   |               ^^^^^^^^^^^ ranges require char or numeric types\n+   |\n+   = note: start type: {integer}\n+   = note: end type: [type error]\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0029, E0412.\n+For more information about an error, try `rustc --explain E0029`."}, {"sha": "ce97019a2b266d5558f39b78fe89965b90d6ad2a", "filename": "src/test/ui/associated-type/associated-type-projection-ambig-between-bound-and-where-clause.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-ambig-between-bound-and-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-ambig-between-bound-and-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-ambig-between-bound-and-where-clause.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-type-projection-ambig-between-bound-and-where-clause.rs"}, {"sha": "2706dda1c5209e558b7f7fb1e2c10424c5329139", "filename": "src/test/ui/associated-type/associated-type-projection-ambig-between-bound-and-where-clause.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,75 @@\n+error[E0221]: ambiguous associated type `Color` in bounds of `C`\n+  --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:26:24\n+   |\n+LL |     type Color;\n+   |     ----------- ambiguous `Color` from `Vehicle`\n+...\n+LL |     type Color;\n+   |     ----------- ambiguous `Color` from `Box`\n+...\n+LL | fn a<C:Vehicle+Box>(_: C::Color) {\n+   |                        ^^^^^^^^ ambiguous associated type `Color`\n+\n+error[E0221]: ambiguous associated type `Color` in bounds of `C`\n+  --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:30:12\n+   |\n+LL |     type Color;\n+   |     ----------- ambiguous `Color` from `Vehicle`\n+...\n+LL |     type Color;\n+   |     ----------- ambiguous `Color` from `Box`\n+...\n+LL | fn b<C>(_: C::Color) where C : Vehicle+Box {\n+   |            ^^^^^^^^ ambiguous associated type `Color`\n+\n+error[E0221]: ambiguous associated type `Color` in bounds of `C`\n+  --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:34:12\n+   |\n+LL |     type Color;\n+   |     ----------- ambiguous `Color` from `Vehicle`\n+...\n+LL |     type Color;\n+   |     ----------- ambiguous `Color` from `Box`\n+...\n+LL | fn c<C>(_: C::Color) where C : Vehicle, C : Box {\n+   |            ^^^^^^^^ ambiguous associated type `Color`\n+\n+error[E0221]: ambiguous associated type `Color` in bounds of `X`\n+  --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:45:20\n+   |\n+LL |     type Color;\n+   |     ----------- ambiguous `Color` from `Vehicle`\n+...\n+LL |     type Color;\n+   |     ----------- ambiguous `Color` from `Box`\n+...\n+LL |     fn e(&self, _: X::Color) where X : Box;\n+   |                    ^^^^^^^^ ambiguous associated type `Color`\n+\n+error[E0221]: ambiguous associated type `Color` in bounds of `X`\n+  --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:48:20\n+   |\n+LL |     type Color;\n+   |     ----------- ambiguous `Color` from `Vehicle`\n+...\n+LL |     type Color;\n+   |     ----------- ambiguous `Color` from `Box`\n+...\n+LL |     fn f(&self, _: X::Color) where X : Box { }\n+   |                    ^^^^^^^^ ambiguous associated type `Color`\n+\n+error[E0221]: ambiguous associated type `Color` in bounds of `X`\n+  --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:40:20\n+   |\n+LL |     type Color;\n+   |     ----------- ambiguous `Color` from `Vehicle`\n+...\n+LL |     type Color;\n+   |     ----------- ambiguous `Color` from `Box`\n+...\n+LL |     fn d(&self, _: X::Color) where X : Box { }\n+   |                    ^^^^^^^^ ambiguous associated type `Color`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0221`."}, {"sha": "5536566c61992607bdeb9f4a566398501d27f842", "filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/ui/associated-type-projection-from-multiple-supertraits.rs"}, {"sha": "7a10b6d021f54029b3150a9808674cc6343e559d", "filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/ui/associated-type-projection-from-multiple-supertraits.stderr"}, {"sha": "b388b6a28e340a30eb714d28ef0dc7757b1ed8e9", "filename": "src/test/ui/associated-type/associated-type-projection-from-supertrait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-type-projection-from-supertrait.rs"}, {"sha": "4bc09b624c8a186d1fd202f553683ecbca300d7c", "filename": "src/test/ui/associated-type/associated-type-projection-from-supertrait.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,39 @@\n+error[E0308]: mismatched types\n+  --> $DIR/associated-type-projection-from-supertrait.rs:43:23\n+   |\n+LL | fn b() { dent(ModelT, Blue); } //~ ERROR mismatched types\n+   |                       ^^^^ expected struct `Black`, found struct `Blue`\n+   |\n+   = note: expected type `Black`\n+              found type `Blue`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/associated-type-projection-from-supertrait.rs:44:23\n+   |\n+LL | fn c() { dent(ModelU, Black); } //~ ERROR mismatched types\n+   |                       ^^^^^ expected struct `Blue`, found struct `Black`\n+   |\n+   = note: expected type `Blue`\n+              found type `Black`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/associated-type-projection-from-supertrait.rs:50:28\n+   |\n+LL | fn f() { ModelT.chip_paint(Blue); } //~ ERROR mismatched types\n+   |                            ^^^^ expected struct `Black`, found struct `Blue`\n+   |\n+   = note: expected type `Black`\n+              found type `Blue`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/associated-type-projection-from-supertrait.rs:51:28\n+   |\n+LL | fn g() { ModelU.chip_paint(Black); } //~ ERROR mismatched types\n+   |                            ^^^^^ expected struct `Blue`, found struct `Black`\n+   |\n+   = note: expected type `Blue`\n+              found type `Black`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "75b60aa8d10b7b392033577ec1c78cb197b1969f", "filename": "src/test/ui/associated-types/associated-types-ICE-when-projecting-out-of-err.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.rs"}, {"sha": "7924ab74444065190b82382e7bf4a606ea90853e", "filename": "src/test/ui/associated-types/associated-types-ICE-when-projecting-out-of-err.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.stderr"}, {"sha": "b1194154911c98c2773891636d681d402509f102", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-binding-to-type-defined-in-supertrait.rs"}, {"sha": "c43ff1ae4cbee2bee05f95e4c3267cc952cb28ef", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,31 @@\n+error[E0271]: type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:47:10\n+   |\n+LL | fn b() { blue_car(ModelT); } //~ ERROR type mismatch\n+   |          ^^^^^^^^ expected struct `Black`, found struct `Blue`\n+   |\n+   = note: expected type `Black`\n+              found type `Blue`\n+note: required by `blue_car`\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:43:1\n+   |\n+LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:48:10\n+   |\n+LL | fn c() { black_car(ModelU); } //~ ERROR type mismatch\n+   |          ^^^^^^^^^ expected struct `Blue`, found struct `Black`\n+   |\n+   = note: expected type `Blue`\n+              found type `Black`\n+note: required by `black_car`\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:40:1\n+   |\n+LL | fn black_car<C:Car<Color=Black>>(c: C) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "cd21fb949cb84190aa147147adff53868501b9c0", "filename": "src/test/ui/associated-types/associated-types-bound-failure.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-bound-failure.rs"}, {"sha": "067dfeb454ce84223f47307f157b8b950382cc07", "filename": "src/test/ui/associated-types/associated-types-bound-failure.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: the trait bound `<G as GetToInt>::R: ToInt` is not satisfied\n+  --> $DIR/associated-types-bound-failure.rs:27:5\n+   |\n+LL |     ToInt::to_int(&g.get()) //~ ERROR E0277\n+   |     ^^^^^^^^^^^^^ the trait `ToInt` is not implemented for `<G as GetToInt>::R`\n+   |\n+   = help: consider adding a `where <G as GetToInt>::R: ToInt` bound\n+note: required by `ToInt::to_int`\n+  --> $DIR/associated-types-bound-failure.rs:14:5\n+   |\n+LL |     fn to_int(&self) -> isize;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "786a25500a886284c4b1bcd9fa4a9ca7f9fcb361", "filename": "src/test/ui/associated-types/associated-types-coherence-failure.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-coherence-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-coherence-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-coherence-failure.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-coherence-failure.rs"}, {"sha": "85d4bf784587e01f023c9ab12f22114609041528", "filename": "src/test/ui/associated-types/associated-types-coherence-failure.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-coherence-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-coherence-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-coherence-failure.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,21 @@\n+error[E0119]: conflicting implementations of trait `IntoCow<'_, _>` for type `Cow<'_, _>`:\n+  --> $DIR/associated-types-coherence-failure.rs:31:1\n+   |\n+LL | impl<'a, B: ?Sized> IntoCow<'a, B> for <B as ToOwned>::Owned where B: ToOwned {\n+   | ----------------------------------------------------------------------------- first implementation here\n+...\n+LL | impl<'a, B: ?Sized> IntoCow<'a, B> for Cow<'a, B> where B: ToOwned {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Cow<'_, _>`\n+\n+error[E0119]: conflicting implementations of trait `IntoCow<'_, _>` for type `&_`:\n+  --> $DIR/associated-types-coherence-failure.rs:38:1\n+   |\n+LL | impl<'a, B: ?Sized> IntoCow<'a, B> for <B as ToOwned>::Owned where B: ToOwned {\n+   | ----------------------------------------------------------------------------- first implementation here\n+...\n+LL | impl<'a, B: ?Sized> IntoCow<'a, B> for &'a B where B: ToOwned {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&_`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "6f2ee854543da265be0514d22c70522af48fef1e", "filename": "src/test/ui/associated-types/associated-types-eq-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-eq-1.rs"}, {"sha": "81bb2ae4ce22ff95540ef5bdcb27e4fa8883d287", "filename": "src/test/ui/associated-types/associated-types-eq-1.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `A` in this scope\n+  --> $DIR/associated-types-eq-1.rs:20:12\n+   |\n+LL |     let _: A = x.boo(); //~ ERROR cannot find type `A` in this scope\n+   |            ^ did you mean `I`?\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "755a9f2d73f6271f22dbb263c9bcc40aeeeedeba", "filename": "src/test/ui/associated-types/associated-types-eq-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-eq-2.rs"}, {"sha": "0b80f3472dcc9477bd68078d884b7fe856d5dae3", "filename": "src/test/ui/associated-types/associated-types-eq-2.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-2.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/associated-types-eq-2.rs:26:30\n+   |\n+LL | fn baz<I: Foo>(x: &<I as Foo<A=Bar>>::A) {}\n+   |                              ^^^^^ associated type not allowed here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0229`."}, {"sha": "cb952f6534f0e57da26b0e45b6d91a14c64be083", "filename": "src/test/ui/associated-types/associated-types-eq-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-eq-3.rs"}, {"sha": "d8b2be0e1b00d94fb584cbc4005b3785278a9e0e", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,37 @@\n+error[E0308]: mismatched types\n+  --> $DIR/associated-types-eq-3.rs:33:18\n+   |\n+LL |     let _: Bar = x.boo();\n+   |                  ^^^^^^^ expected struct `Bar`, found associated type\n+   |\n+   = note: expected type `Bar`\n+              found type `<I as Foo>::A`\n+\n+error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n+  --> $DIR/associated-types-eq-3.rs:48:5\n+   |\n+LL |     foo1(a);\n+   |     ^^^^ expected usize, found struct `Bar`\n+   |\n+   = note: expected type `usize`\n+              found type `Bar`\n+note: required by `foo1`\n+  --> $DIR/associated-types-eq-3.rs:28:1\n+   |\n+LL | fn foo1<I: Foo<A=Bar>>(x: I) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n+  --> $DIR/associated-types-eq-3.rs:51:9\n+   |\n+LL |     baz(&a);\n+   |         ^^ expected usize, found struct `Bar`\n+   |\n+   = note: expected type `usize`\n+              found type `Bar`\n+   = note: required for the cast to the object type `dyn Foo<A=Bar>`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0271, E0308.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "847393ba2b89f4168069b2ad97c1d09fd0cf9cac", "filename": "src/test/ui/associated-types/associated-types-eq-expr-path.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-expr-path.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-eq-expr-path.rs"}, {"sha": "36c31cd3f05600d7eb4fd75c5b7621ac61164f62", "filename": "src/test/ui/associated-types/associated-types-eq-expr-path.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-expr-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-expr-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-expr-path.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/associated-types-eq-expr-path.rs:24:26\n+   |\n+LL |     let x: isize = Foo::<A=usize>::bar();\n+   |                          ^^^^^^^ associated type not allowed here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0229`."}, {"sha": "52a2ca9082d230c297028aabfc9baa63d560d191", "filename": "src/test/ui/associated-types/associated-types-eq-hr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-eq-hr.rs"}, {"sha": "5081a2649d1a2f094bdbe2a0beeccaf8a41f9325", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,126 @@\n+error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n+  --> $DIR/associated-types-eq-hr.rs:92:5\n+   |\n+LL |     foo::<UintStruct>(); //~ ERROR type mismatch\n+   |     ^^^^^^^^^^^^^^^^^ expected usize, found isize\n+   |\n+   = note: expected type `&usize`\n+              found type `&isize`\n+note: required by `foo`\n+  --> $DIR/associated-types-eq-hr.rs:54:1\n+   |\n+LL | / fn foo<T>()\n+LL | |     where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n+LL | | {\n+LL | |     // ok for IntStruct, but not UintStruct\n+LL | | }\n+   | |_^\n+\n+error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n+  --> $DIR/associated-types-eq-hr.rs:94:5\n+   |\n+LL |     bar::<IntStruct>(); //~ ERROR type mismatch\n+   |     ^^^^^^^^^^^^^^^^ expected isize, found usize\n+   |\n+   = note: expected type `&isize`\n+              found type `&usize`\n+note: required by `bar`\n+  --> $DIR/associated-types-eq-hr.rs:60:1\n+   |\n+LL | / fn bar<T>()\n+LL | |     where T : for<'x> TheTrait<&'x isize, A = &'x usize>\n+LL | | {\n+LL | |     // ok for UintStruct, but not IntStruct\n+LL | | }\n+   | |_^\n+\n+error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n+  --> $DIR/associated-types-eq-hr.rs:97:5\n+   |\n+LL |     tuple_one::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+   |\n+   = help: the following implementations were found:\n+             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n+note: required by `tuple_one`\n+  --> $DIR/associated-types-eq-hr.rs:66:1\n+   |\n+LL | / fn tuple_one<T>()\n+LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n+LL | | {\n+LL | |     // not ok for tuple, two lifetimes and we pick first\n+LL | | }\n+   | |_^\n+\n+error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'x isize`\n+  --> $DIR/associated-types-eq-hr.rs:97:5\n+   |\n+LL |     tuple_one::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n+   |\n+note: required by `tuple_one`\n+  --> $DIR/associated-types-eq-hr.rs:66:1\n+   |\n+LL | / fn tuple_one<T>()\n+LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n+LL | | {\n+LL | |     // not ok for tuple, two lifetimes and we pick first\n+LL | | }\n+   | |_^\n+\n+error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n+  --> $DIR/associated-types-eq-hr.rs:101:5\n+   |\n+LL |     tuple_two::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+   |\n+   = help: the following implementations were found:\n+             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n+note: required by `tuple_two`\n+  --> $DIR/associated-types-eq-hr.rs:72:1\n+   |\n+LL | / fn tuple_two<T>()\n+LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n+LL | | {\n+LL | |     // not ok for tuple, two lifetimes and we pick second\n+LL | | }\n+   | |_^\n+\n+error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'y isize`\n+  --> $DIR/associated-types-eq-hr.rs:101:5\n+   |\n+LL |     tuple_two::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n+   |\n+note: required by `tuple_two`\n+  --> $DIR/associated-types-eq-hr.rs:72:1\n+   |\n+LL | / fn tuple_two<T>()\n+LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n+LL | | {\n+LL | |     // not ok for tuple, two lifetimes and we pick second\n+LL | | }\n+   | |_^\n+\n+error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n+  --> $DIR/associated-types-eq-hr.rs:107:5\n+   |\n+LL |     tuple_four::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+   |\n+   = help: the following implementations were found:\n+             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n+note: required by `tuple_four`\n+  --> $DIR/associated-types-eq-hr.rs:84:1\n+   |\n+LL | / fn tuple_four<T>()\n+LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize)>\n+LL | | {\n+LL | |     // not ok for tuple, two lifetimes, and lifetime matching is invariant\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors occurred: E0271, E0277.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "a6fcb9cff13ea58ed40f8ed2b575d952cd3d7730", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-for-unimpl-trait.rs"}, {"sha": "e6c15e465b625f982da7031461559f8fddeab2d9", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `Self: Get` is not satisfied\n+  --> $DIR/associated-types-for-unimpl-trait.rs:17:5\n+   |\n+LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |\n+   = help: consider adding a `where Self: Get` bound\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "becbc27138b770e700d524844357252c7c017c95", "filename": "src/test/ui/associated-types/associated-types-in-ambiguous-context.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/ui/associated-types-in-ambiguous-context.rs"}, {"sha": "c45873ffd53083f1906724142560f9ed7d2457eb", "filename": "src/test/ui/associated-types/associated-types-in-ambiguous-context.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/ui/associated-types-in-ambiguous-context.stderr"}, {"sha": "c1feb8ac45900a052d0ae393029bd71787c9e5ac", "filename": "src/test/ui/associated-types/associated-types-incomplete-object.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-incomplete-object.rs"}, {"sha": "95b1c63125005acb77b6d0aab113547f7d6b07f5", "filename": "src/test/ui/associated-types/associated-types-incomplete-object.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,27 @@\n+error[E0191]: the value of the associated type `B` (from the trait `Foo`) must be specified\n+  --> $DIR/associated-types-incomplete-object.rs:33:26\n+   |\n+LL |     let b = &42isize as &Foo<A=usize>;\n+   |                          ^^^^^^^^^^^^ missing associated type `B` value\n+\n+error[E0191]: the value of the associated type `A` (from the trait `Foo`) must be specified\n+  --> $DIR/associated-types-incomplete-object.rs:36:26\n+   |\n+LL |     let c = &42isize as &Foo<B=char>;\n+   |                          ^^^^^^^^^^^ missing associated type `A` value\n+\n+error[E0191]: the value of the associated type `A` (from the trait `Foo`) must be specified\n+  --> $DIR/associated-types-incomplete-object.rs:39:26\n+   |\n+LL |     let d = &42isize as &Foo;\n+   |                          ^^^ missing associated type `A` value\n+\n+error[E0191]: the value of the associated type `B` (from the trait `Foo`) must be specified\n+  --> $DIR/associated-types-incomplete-object.rs:39:26\n+   |\n+LL |     let d = &42isize as &Foo;\n+   |                          ^^^ missing associated type `B` value\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0191`."}, {"sha": "83726a1676d261911166fe0b541e9a515cdf4e54", "filename": "src/test/ui/associated-types/associated-types-invalid-trait-ref-issue-18865.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-invalid-trait-ref-issue-18865.rs"}, {"sha": "40cba5e68340fb3983c39b25a4d6351cfc110a42", "filename": "src/test/ui/associated-types/associated-types-invalid-trait-ref-issue-18865.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `T: Foo<usize>` is not satisfied\n+  --> $DIR/associated-types-invalid-trait-ref-issue-18865.rs:20:12\n+   |\n+LL |     let u: <T as Foo<usize>>::Bar = t.get_bar();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo<usize>` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: Foo<usize>` bound\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "82258f124d3233da297edae2e9447118e814e45a", "filename": "src/test/ui/associated-types/associated-types-issue-17359.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-17359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-17359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-17359.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-issue-17359.rs"}, {"sha": "8ba8194bdedf021b433dd037446fad46e9a4d893", "filename": "src/test/ui/associated-types/associated-types-issue-17359.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-17359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-17359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-17359.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error[E0046]: not all trait items implemented, missing: `Type`\n+  --> $DIR/associated-types-issue-17359.rs:18:1\n+   |\n+LL |     type Type;\n+   |     ---------- `Type` from trait\n+...\n+LL | impl Trait for isize {}  //~ ERROR missing: `Type`\n+   | ^^^^^^^^^^^^^^^^^^^^ missing `Type` in implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "a00aa8364bde2adeed76ab24a99771fd61a49e2c", "filename": "src/test/ui/associated-types/associated-types-issue-20346.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-issue-20346.rs"}, {"sha": "6f3dfbe0898ecb697e00497f13b96a22fa20550b", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,17 @@\n+error[E0271]: type mismatch resolving `<Adapter<I> as Iterator>::Item == std::option::Option<T>`\n+  --> $DIR/associated-types-issue-20346.rs:44:5\n+   |\n+LL |     is_iterator_of::<Option<T>, _>(&adapter); //~ ERROR type mismatch\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter, found enum `std::option::Option`\n+   |\n+   = note: expected type `T`\n+              found type `std::option::Option<T>`\n+note: required by `is_iterator_of`\n+  --> $DIR/associated-types-issue-20346.rs:25:1\n+   |\n+LL | fn is_iterator_of<A, I: Iterator<Item=A>>(_: &I) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "9436f825de89dd4b95a51cc7e6f7ce4ad320bcdd", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-multiple-types-one-trait.rs"}, {"sha": "c38a5f6e7f455a01d5ec0958a88ca19dde65c143", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,31 @@\n+error[E0271]: type mismatch resolving `<T as Foo>::Y == i32`\n+  --> $DIR/associated-types-multiple-types-one-trait.rs:23:5\n+   |\n+LL |     want_y(t); //~ ERROR type mismatch\n+   |     ^^^^^^ expected associated type, found i32\n+   |\n+   = note: expected type `<T as Foo>::Y`\n+              found type `i32`\n+note: required by `want_y`\n+  --> $DIR/associated-types-multiple-types-one-trait.rs:54:1\n+   |\n+LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n+  --> $DIR/associated-types-multiple-types-one-trait.rs:28:5\n+   |\n+LL |     want_x(t); //~ ERROR type mismatch\n+   |     ^^^^^^ expected associated type, found u32\n+   |\n+   = note: expected type `<T as Foo>::X`\n+              found type `u32`\n+note: required by `want_x`\n+  --> $DIR/associated-types-multiple-types-one-trait.rs:52:1\n+   |\n+LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "baf56ffec86921cb7a78fb6f7407cae57b3c5bdc", "filename": "src/test/ui/associated-types/associated-types-no-suitable-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-no-suitable-bound.rs"}, {"sha": "84802d49caa4e95b97b0c8136c5b1230faf5d5e8", "filename": "src/test/ui/associated-types/associated-types-no-suitable-bound.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `T: Get` is not satisfied\n+  --> $DIR/associated-types-no-suitable-bound.rs:21:5\n+   |\n+LL |     fn uhoh<T>(foo: <T as Get>::Value) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: Get` bound\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "e0f0f3c47ae5ec312ecb2799e65716ca88623b9a", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-no-suitable-supertrait-2.rs"}, {"sha": "712b95f8e547ffeac924dc646a875e25fcf05372", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `Self: Get` is not satisfied\n+  --> $DIR/associated-types-no-suitable-supertrait-2.rs:27:5\n+   |\n+LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |\n+   = help: consider adding a `where Self: Get` bound\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "ec38595e8fe06fa6e15fe6229270e8bc45b204a5", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-no-suitable-supertrait.rs"}, {"sha": "6927146ffbc44cedbeb88e583cb94aff29e07c85", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `Self: Get` is not satisfied\n+  --> $DIR/associated-types-no-suitable-supertrait.rs:27:5\n+   |\n+LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |\n+   = help: consider adding a `where Self: Get` bound\n+\n+error[E0277]: the trait bound `(T, U): Get` is not satisfied\n+  --> $DIR/associated-types-no-suitable-supertrait.rs:32:5\n+   |\n+LL |     fn uhoh<U:Get>(&self, foo: U, bar: <(T, U) as Get>::Value) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `(T, U)`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "384ed8f32847b18f6af9de00c51b1264875ec10c", "filename": "src/test/ui/associated-types/associated-types-outlives.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.nll.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,13 @@\n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/associated-types-outlives.rs:32:14\n+   |\n+LL |         's: loop { y = denormalise(&x); break }\n+   |                                    -- borrow of `x` occurs here\n+LL |         drop(x); //~ ERROR cannot move out of `x` because it is borrowed\n+   |              ^ move out of `x` occurs here\n+LL |         return f(y);\n+   |                  - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "f070ab6799c08bd1ac075f636a1e36af8310846c", "filename": "src/test/ui/associated-types/associated-types-outlives.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-outlives.rs"}, {"sha": "6d46392d94bb4104713f373708bf766cf0c66a79", "filename": "src/test/ui/associated-types/associated-types-outlives.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/associated-types-outlives.rs:32:14\n+   |\n+LL |         's: loop { y = denormalise(&x); break }\n+   |                                     - borrow of `x` occurs here\n+LL |         drop(x); //~ ERROR cannot move out of `x` because it is borrowed\n+   |              ^ move out of `x` occurs here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "946a4b2f73ac4ff82ddaa845267d21ff0328d554", "filename": "src/test/ui/associated-types/associated-types-overridden-default.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-overridden-default.rs"}, {"sha": "e9a480be0678d50c84607ab2285109fda40031f0", "filename": "src/test/ui/associated-types/associated-types-overridden-default.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0399]: the following trait items need to be reimplemented as `Assoc` was overridden: `Assoc2`, `C`, `foo`\n+  --> $DIR/associated-types-overridden-default.rs:21:5\n+   |\n+LL |     type Assoc = ();\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0399`."}, {"sha": "ab061ca4d8da62fcec0bcf48dccc22e5906168bd", "filename": "src/test/ui/associated-types/associated-types-path-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-path-1.rs"}, {"sha": "04147922d9cf127932e65d875f43497bab1edff0", "filename": "src/test/ui/associated-types/associated-types-path-1.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,22 @@\n+error[E0220]: associated type `A` not found for `T`\n+  --> $DIR/associated-types-path-1.rs:20:23\n+   |\n+LL | pub fn f1<T>(a: T, x: T::A) {} //~ERROR associated type `A` not found\n+   |                       ^^^^ associated type `A` not found\n+\n+error[E0221]: ambiguous associated type `A` in bounds of `T`\n+  --> $DIR/associated-types-path-1.rs:21:34\n+   |\n+LL |     type A;\n+   |     ------- ambiguous `A` from `Foo`\n+...\n+LL |     type A;\n+   |     ------- ambiguous `A` from `Bar`\n+...\n+LL | pub fn f2<T: Foo + Bar>(a: T, x: T::A) {} //~ERROR ambiguous associated type `A`\n+   |                                  ^^^^ ambiguous associated type `A`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0220, E0221.\n+For more information about an error, try `rustc --explain E0220`."}, {"sha": "d62f6b0f1a37140aa870e30cbcc5313533396926", "filename": "src/test/ui/associated-types/associated-types-path-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-path-2.rs"}, {"sha": "403b4fd4d8ead7264b91ad1b088654f0cb103572", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,52 @@\n+error[E0308]: mismatched types\n+  --> $DIR/associated-types-path-2.rs:29:14\n+   |\n+LL |     f1(2i32, 4i32);\n+   |              ^^^^ expected u32, found i32\n+\n+error[E0277]: the trait bound `u32: Foo` is not satisfied\n+  --> $DIR/associated-types-path-2.rs:39:5\n+   |\n+LL |     f1(2u32, 4u32);\n+   |     ^^ the trait `Foo` is not implemented for `u32`\n+   |\n+note: required by `f1`\n+  --> $DIR/associated-types-path-2.rs:23:1\n+   |\n+LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `u32: Foo` is not satisfied\n+  --> $DIR/associated-types-path-2.rs:39:5\n+   |\n+LL |     f1(2u32, 4u32);\n+   |     ^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `u32`\n+\n+error[E0277]: the trait bound `u32: Foo` is not satisfied\n+  --> $DIR/associated-types-path-2.rs:45:5\n+   |\n+LL |     f1(2u32, 4i32);\n+   |     ^^ the trait `Foo` is not implemented for `u32`\n+   |\n+note: required by `f1`\n+  --> $DIR/associated-types-path-2.rs:23:1\n+   |\n+LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `u32: Foo` is not satisfied\n+  --> $DIR/associated-types-path-2.rs:45:5\n+   |\n+LL |     f1(2u32, 4i32);\n+   |     ^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/associated-types-path-2.rs:51:18\n+   |\n+LL |     let _: i32 = f2(2i32);\n+   |                  ^^^^^^^^ expected i32, found u32\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "5b8223ff292588cc2a61c6e9a04a8e46de5681e3", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.nll.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,30 @@\n+warning: not reporting region error due to nll\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:32:12\n+   |\n+LL |     let z: I::A = if cond { x } else { y };\n+   |            ^^^^\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:32:29\n+   |\n+LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n+   |        --  -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |     let z: I::A = if cond { x } else { y };\n+   |                             ^ assignment requires that `'a` must outlive `'b`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:32:40\n+   |\n+LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n+   |        --  -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |     let z: I::A = if cond { x } else { y };\n+   |                                        ^ assignment requires that `'b` must outlive `'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5451a20d8166ff9838f28014984d01e22412711d", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-fn-body.rs"}, {"sha": "12bbfb24910cb0e308b5a881384eea741ca9a6f5", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,14 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:32:40\n+   |\n+LL |     x: <I as Foo<&'a isize>>::A,\n+   |                  --------- these two types are declared with different lifetimes...\n+LL |     y: <I as Foo<&'b isize>>::A,\n+   |                  ---------\n+...\n+LL |     let z: I::A = if cond { x } else { y };\n+   |                                        ^ ...but data from `x` flows into `y` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "a79d5c4649a49e2e82fa7b71850b3ccc1f144db4", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-fn.rs"}, {"sha": "399f4d9409a7a87ba4f8799a09454cb3273d8b71", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+  --> $DIR/associated-types-project-from-hrtb-in-fn.rs:21:8\n+   |\n+LL |     x: I::A)\n+   |        ^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0212`."}, {"sha": "e6251a0d318a35321da6f640bada3adb1528adeb", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-struct.rs"}, {"sha": "05c0c38c79f333d70b8891203e454ee1d4200e81", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+  --> $DIR/associated-types-project-from-hrtb-in-struct.rs:21:12\n+   |\n+LL |     field: I::A\n+   |            ^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0212`."}, {"sha": "af46a1b42d07855ff2f122ea4edbd8e2eafb7df4", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-trait-method.rs"}, {"sha": "ccd568b62533d5b874032d3b642671b537b5d3fb", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+  --> $DIR/associated-types-project-from-hrtb-in-trait-method.rs:21:32\n+   |\n+LL |     fn some_method(&self, arg: I::A);\n+   |                                ^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0212`."}, {"sha": "3f72391ff90c7e068dde8ad2cb895cc1e2dd4237", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-projection-to-unrelated-trait-in-method-without-default.rs"}, {"sha": "e7e68dcf852dc96ace1b96462b2a9c8df7e26c65", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `Self: Get` is not satisfied\n+  --> $DIR/associated-types-projection-to-unrelated-trait-in-method-without-default.rs:19:5\n+   |\n+LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |\n+   = help: consider adding a `where Self: Get` bound\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c3acffff240b535e6108e5ed5a50ad1b002a647e", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.rs", "status": "renamed", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n #![allow(unused_variables)]\n \n trait Trait<'a> {\n@@ -22,7 +24,7 @@ fn method1<'a,'b,T>(x: &'a T, y: &'b T)\n     // Note that &'static T <: &'a T.\n     let a: <T as Trait<'a>>::Type = loop { };\n     let b: <T as Trait<'b>>::Type = loop { };\n-    let _: <T as Trait<'a>>::Type = a;\n+    let _c: <T as Trait<'a>>::Type = a;\n }\n \n fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n@@ -31,7 +33,7 @@ fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n     // Note that &'static T <: &'a T.\n     let a: <T as Trait<'a>>::Type = loop { };\n     let b: <T as Trait<'b>>::Type = loop { };\n-    let _: <T as Trait<'b>>::Type = a; //~ ERROR E0623\n+    let _c: <T as Trait<'b>>::Type = a; //~ ERROR E0623\n }\n \n fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n@@ -40,7 +42,7 @@ fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n     // Note that &'static T <: &'a T.\n     let a: <T as Trait<'a>>::Type = loop { };\n     let b: <T as Trait<'b>>::Type = loop { };\n-    let _: <T as Trait<'a>>::Type = b; //~ ERROR E0623\n+    let _c: <T as Trait<'a>>::Type = b; //~ ERROR E0623\n }\n \n fn method4<'a,'b,T>(x: &'a T, y: &'b T)\n@@ -49,7 +51,7 @@ fn method4<'a,'b,T>(x: &'a T, y: &'b T)\n     // Note that &'static T <: &'a T.\n     let a: <T as Trait<'a>>::Type = loop { };\n     let b: <T as Trait<'b>>::Type = loop { };\n-    let _: <T as Trait<'b>>::Type = b;\n+    let _c: <T as Trait<'b>>::Type = b;\n }\n \n fn main() { }", "previous_filename": "src/test/compile-fail/associated-types-subtyping-1.rs"}, {"sha": "3cc7b07a20c598d4eb24188112d1aa7763dbdfc5", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,21 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/associated-types-subtyping-1.rs:36:38\n+   |\n+LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n+   |                        -----     ----- these two types are declared with different lifetimes...\n+...\n+LL |     let _c: <T as Trait<'b>>::Type = a; //~ ERROR E0623\n+   |                                      ^ ...but data from `y` flows into `x` here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/associated-types-subtyping-1.rs:45:38\n+   |\n+LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n+   |                        -----     ----- these two types are declared with different lifetimes...\n+...\n+LL |     let _c: <T as Trait<'a>>::Type = b; //~ ERROR E0623\n+   |                                      ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "aecbf217a5b25e916155829b81188bf7401049ac", "filename": "src/test/ui/associated-types/associated-types-unconstrained.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-unconstrained.rs"}, {"sha": "abb220c96c6c6d80d78a27525e5a1a94347a8b23", "filename": "src/test/ui/associated-types/associated-types-unconstrained.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0284]: type annotations required: cannot resolve `<_ as Foo>::A == _`\n+  --> $DIR/associated-types-unconstrained.rs:24:20\n+   |\n+LL |     let x: isize = Foo::bar();\n+   |                    ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0284`."}, {"sha": "c561ae861ed2ae02d3ab0e6646b88833080b5815", "filename": "src/test/ui/associated-types/associated-types-unsized.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types-unsized.rs"}, {"sha": "0b338c9ad45c5ff3baa68fdd032e64aabbdf51f8", "filename": "src/test/ui/associated-types/associated-types-unsized.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the size for values of type `<T as Get>::Value` cannot be known at compilation time\n+  --> $DIR/associated-types-unsized.rs:17:9\n+   |\n+LL |     let x = t.get(); //~ ERROR the size for values of type\n+   |         ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `<T as Get>::Value`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = help: consider adding a `where <T as Get>::Value: std::marker::Sized` bound\n+   = note: all local variables must have a statically known size\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "23a67b5b064b666ee347d1e7ed7675fd9c0e6280", "filename": "src/test/ui/associated-types/bound-lifetime-constrained.clause.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.clause.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,15 @@\n+error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/bound-lifetime-constrained.rs:48:63\n+   |\n+LL | fn clause1<T>() where T: for<'a> Fn(<() as Foo<'a>>::Item) -> &'a i32 {\n+   |                                                               ^^^^^^^\n+\n+error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/bound-lifetime-constrained.rs:53:42\n+   |\n+LL | fn clause2<T>() where T: for<'a> Fn() -> <() as Foo<'a>>::Item {\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0582`."}, {"sha": "c969baeaefeb7eba64acad62d6d049bcb51455d0", "filename": "src/test/ui/associated-types/bound-lifetime-constrained.func.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.func.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.func.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.func.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,15 @@\n+error[E0581]: return type references lifetime `'a`, which is not constrained by the fn input types\n+  --> $DIR/bound-lifetime-constrained.rs:26:50\n+   |\n+LL | fn func1(_: for<'a> fn(<() as Foo<'a>>::Item) -> &'a i32) {\n+   |                                                  ^^^^^^^\n+\n+error[E0581]: return type references lifetime `'a`, which is not constrained by the fn input types\n+  --> $DIR/bound-lifetime-constrained.rs:33:29\n+   |\n+LL | fn func2(_: for<'a> fn() -> <() as Foo<'a>>::Item) {\n+   |                             ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0581`."}, {"sha": "f24fed0f02ea2f0dc3252507ef5d009657a7f0e1", "filename": "src/test/ui/associated-types/bound-lifetime-constrained.object.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.object.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,15 @@\n+error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/bound-lifetime-constrained.rs:38:56\n+   |\n+LL | fn object1(_: Box<for<'a> Fn(<() as Foo<'a>>::Item) -> &'a i32>) {\n+   |                                                        ^^^^^^^\n+\n+error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/bound-lifetime-constrained.rs:43:35\n+   |\n+LL | fn object2(_: Box<for<'a> Fn() -> <() as Foo<'a>>::Item>) {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0582`."}, {"sha": "9ba5045f2a0539ac72879d757b40d6cb3e9e2a9f", "filename": "src/test/ui/associated-types/bound-lifetime-constrained.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types/bound-lifetime-constrained.rs"}, {"sha": "5df8a828012c7776e5af39f4c1f91cf159fa8799", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.angle.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.angle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.angle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.angle.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,27 @@\n+error[E0582]: binding for associated type `Item` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/bound-lifetime-in-binding-only.rs:22:25\n+   |\n+LL | fn angle<T: for<'a> Foo<Item=&'a i32>>() {\n+   |                         ^^^^^^^^^^^^\n+\n+error[E0582]: binding for associated type `Item` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/bound-lifetime-in-binding-only.rs:27:37\n+   |\n+LL | fn angle1<T>() where T: for<'a> Foo<Item=&'a i32> {\n+   |                                     ^^^^^^^^^^^^\n+\n+error[E0582]: binding for associated type `Item` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/bound-lifetime-in-binding-only.rs:32:37\n+   |\n+LL | fn angle2<T>() where for<'a> T: Foo<Item=&'a i32> {\n+   |                                     ^^^^^^^^^^^^\n+\n+error[E0582]: binding for associated type `Item` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/bound-lifetime-in-binding-only.rs:37:27\n+   |\n+LL | fn angle3(_: &for<'a> Foo<Item=&'a i32>) {\n+   |                           ^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0582`."}, {"sha": "0a12aa76a785b3861baa13f76800f8326aaade18", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.elision.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/bound-lifetime-in-binding-only.rs:62:23\n+   |\n+LL | fn elision<T: Fn() -> &i32>() {\n+   |                       ^ expected lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+   = help: consider giving it a 'static lifetime\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "53594cb83fc6709f22af8c7c1d417fa8c923f993", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.ok.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.ok.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,8 @@\n+error: compilation successful\n+  --> $DIR/bound-lifetime-in-binding-only.rs:81:1\n+   |\n+LL | fn main() { } //[ok]~ ERROR compilation successful\n+   | ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "39a5366080b685502b8ee91dd29bdcd05fb1191f", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.paren.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.paren.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.paren.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.paren.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,27 @@\n+error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/bound-lifetime-in-binding-only.rs:42:29\n+   |\n+LL | fn paren<T: for<'a> Fn() -> &'a i32>() {\n+   |                             ^^^^^^^\n+\n+error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/bound-lifetime-in-binding-only.rs:47:41\n+   |\n+LL | fn paren1<T>() where T: for<'a> Fn() -> &'a i32 {\n+   |                                         ^^^^^^^\n+\n+error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/bound-lifetime-in-binding-only.rs:52:41\n+   |\n+LL | fn paren2<T>() where for<'a> T: Fn() -> &'a i32 {\n+   |                                         ^^^^^^^\n+\n+error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/bound-lifetime-in-binding-only.rs:57:31\n+   |\n+LL | fn paren3(_: &for<'a> Fn() -> &'a i32) {\n+   |                               ^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0582`."}, {"sha": "7cb0623315e1e41ea2fef29da529514f57d8e213", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types/bound-lifetime-in-binding-only.rs"}, {"sha": "8fefdfd4d19efe621e843061d23ff0dd938a2899", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.elision.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/bound-lifetime-in-return-only.rs:44:23\n+   |\n+LL | fn elision(_: fn() -> &i32) {\n+   |                       ^ expected lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+   = help: consider giving it a 'static lifetime\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "ce2cfa6765d17343209b2c0aa913e8fbdfdbd4a1", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.local.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.local.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0581]: return type references lifetime `'a`, which is not constrained by the fn input types\n+  --> $DIR/bound-lifetime-in-return-only.rs:33:28\n+   |\n+LL |     let _: for<'a> fn() -> &'a i32 = loop { };\n+   |                            ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0581`."}, {"sha": "21bef7e5e52c7bb822334a55202ab452742a92b2", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.ok.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.ok.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,8 @@\n+error: compilation successful\n+  --> $DIR/bound-lifetime-in-return-only.rs:59:1\n+   |\n+LL | fn main() { } //[ok]~ ERROR compilation successful\n+   | ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b9b1317cef50f8707aeb14385e4147a4a62f281e", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types/bound-lifetime-in-return-only.rs"}, {"sha": "26a1585463a1354ee4cb7403f520d9f72fa71cda", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.sig.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.sig.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,15 @@\n+error[E0581]: return type references lifetime `'a`, which is not constrained by the fn input types\n+  --> $DIR/bound-lifetime-in-return-only.rs:22:28\n+   |\n+LL | fn sig1(_: for<'a> fn() -> &'a i32) {\n+   |                            ^^^^^^^\n+\n+error[E0581]: return type references lifetime `'a`, which is not constrained by the fn input types\n+  --> $DIR/bound-lifetime-in-return-only.rs:27:39\n+   |\n+LL | fn sig2(_: for<'a, 'b> fn(&'b i32) -> &'a i32) {\n+   |                                       ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0581`."}, {"sha": "db52e4de69bce4d927293f463e3aa8ae997e356c", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.structure.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.structure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.structure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.structure.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,9 @@\n+error[E0581]: return type references lifetime `'a`, which is not constrained by the fn input types\n+  --> $DIR/bound-lifetime-in-return-only.rs:39:24\n+   |\n+LL |     x: for<'a> fn() -> &'a i32\n+   |                        ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0581`."}, {"sha": "a753527ea53d55f341943aa9cedd98d90b4783de", "filename": "src/test/ui/associated-types/cache/chrono-scan.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fchrono-scan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fchrono-scan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fchrono-scan.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types/cache/chrono-scan.rs"}, {"sha": "99281e745656dc0ee51f4c1217ea2f2d453c49d4", "filename": "src/test/ui/associated-types/cache/chrono-scan.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fchrono-scan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fchrono-scan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fchrono-scan.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,8 @@\n+error: compilation successful\n+  --> $DIR/chrono-scan.rs:39:1\n+   |\n+LL | fn main() { } //~ ERROR compilation successful\n+   | ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d1117328c8657b3213746f72714f027b46509037", "filename": "src/test/ui/associated-types/cache/elision.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Felision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Felision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Felision.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types/cache/elision.rs"}, {"sha": "c5314b58002c04ab3c060cab31ad487a1cfd7572", "filename": "src/test/ui/associated-types/cache/elision.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Felision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Felision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Felision.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,8 @@\n+error: compilation successful\n+  --> $DIR/elision.rs:34:1\n+   |\n+LL | fn main() { } //~ ERROR compilation successful\n+   | ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "89a7bb00f74e1580ee53ae0afb53f8501f8c080d", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.krisskross.nll.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,35 @@\n+warning: not reporting region error due to nll\n+  --> $DIR/project-fn-ret-contravariant.rs:53:16\n+   |\n+LL |    let a = bar(foo, y);\n+   |                ^^^\n+\n+warning: not reporting region error due to nll\n+  --> $DIR/project-fn-ret-contravariant.rs:54:16\n+   |\n+LL |    let b = bar(foo, x);\n+   |                ^^^\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/project-fn-ret-contravariant.rs:53:12\n+   |\n+LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+   |              -- -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+LL |    let a = bar(foo, y);\n+   |            ^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/project-fn-ret-contravariant.rs:54:12\n+   |\n+LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+   |              -- -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+LL |    let a = bar(foo, y);\n+LL |    let b = bar(foo, x);\n+   |            ^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6cecf68ffffe1feb1004f547f6d76119f8578e31", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.krisskross.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,25 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/project-fn-ret-contravariant.rs:55:5\n+   |\n+LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+   |                        -------                 ------------------\n+   |                        |\n+   |                        this parameter and the return type are declared with different lifetimes...\n+...\n+LL |    (a, b) //[krisskross]~ ERROR 55:5: 55:6: lifetime mismatch [E0623]\n+   |     ^ ...but data from `y` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/project-fn-ret-contravariant.rs:55:8\n+   |\n+LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+   |                                    -------     ------------------\n+   |                                    |\n+   |                                    this parameter and the return type are declared with different lifetimes...\n+...\n+LL |    (a, b) //[krisskross]~ ERROR 55:5: 55:6: lifetime mismatch [E0623]\n+   |        ^ ...but data from `x` is returned here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "c92aa37a60fb7656340d7a19e93a1ec8bff9cdb2", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.ok.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.ok.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,8 @@\n+error: compilation successful\n+  --> $DIR/project-fn-ret-contravariant.rs:60:1\n+   |\n+LL | fn main() { }\n+   | ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c92aa37a60fb7656340d7a19e93a1ec8bff9cdb2", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.oneuse.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.oneuse.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,8 @@\n+error: compilation successful\n+  --> $DIR/project-fn-ret-contravariant.rs:60:1\n+   |\n+LL | fn main() { }\n+   | ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a5e8f4068e6619711695c6310fdc4a8de6fe96c5", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types/cache/project-fn-ret-contravariant.rs"}, {"sha": "793209b7cbcef15dec34b2117e8a56a6cb9e66ed", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.nll.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,16 @@\n+warning: not reporting region error due to nll\n+  --> $DIR/project-fn-ret-contravariant.rs:48:8\n+   |\n+LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+   |        ^^^\n+\n+error: borrowed data escapes outside of function\n+  --> $DIR/project-fn-ret-contravariant.rs:48:4\n+   |\n+LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n+   |               - `x` is a reference that is only valid in the function body\n+LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+   |    ^^^^^^^^^^^ `x` escapes the function body here\n+\n+error: aborting due to previous error\n+"}, {"sha": "9d42c8e3c6388227d15b6bb00fbb37c102dec06d", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,26 @@\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+  --> $DIR/project-fn-ret-contravariant.rs:48:8\n+   |\n+LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+   |        ^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 47:8...\n+  --> $DIR/project-fn-ret-contravariant.rs:47:8\n+   |\n+LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n+   |        ^^\n+note: ...so that reference does not outlive borrowed content\n+  --> $DIR/project-fn-ret-contravariant.rs:48:13\n+   |\n+LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+   |             ^\n+   = note: but, the lifetime must be valid for the static lifetime...\n+note: ...so that reference does not outlive borrowed content\n+  --> $DIR/project-fn-ret-contravariant.rs:48:4\n+   |\n+LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+   |    ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "dedce3121569ce8e8b66627c82abb535a0c8e4af", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.nll.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,35 @@\n+warning: not reporting region error due to nll\n+  --> $DIR/project-fn-ret-invariant.rs:63:16\n+   |\n+LL |    let a = bar(foo, y); //[krisskross]~ ERROR E0623\n+   |                ^^^\n+\n+warning: not reporting region error due to nll\n+  --> $DIR/project-fn-ret-invariant.rs:64:16\n+   |\n+LL |    let b = bar(foo, x);\n+   |                ^^^\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/project-fn-ret-invariant.rs:63:12\n+   |\n+LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |              -- -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+LL |    let a = bar(foo, y); //[krisskross]~ ERROR E0623\n+   |            ^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/project-fn-ret-invariant.rs:64:12\n+   |\n+LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |              -- -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+LL |    let a = bar(foo, y); //[krisskross]~ ERROR E0623\n+LL |    let b = bar(foo, x);\n+   |            ^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e867ac4baac6aab60f8b290991b9a23113b10b05", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,24 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/project-fn-ret-invariant.rs:63:21\n+   |\n+LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |                                     --------     --------------------\n+   |                                     |\n+   |                                     this parameter and the return type are declared with different lifetimes...\n+LL |    let a = bar(foo, y); //[krisskross]~ ERROR E0623\n+   |                     ^ ...but data from `x` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/project-fn-ret-invariant.rs:65:8\n+   |\n+LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |                                     --------     --------------------\n+   |                                     |\n+   |                                     this parameter and the return type are declared with different lifetimes...\n+...\n+LL |    (a, b) //[krisskross]~ ERROR E0623\n+   |        ^ ...but data from `x` is returned here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "e3e620ea3a03ee928d671b1d9248b1c40bc44f9b", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.ok.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,8 @@\n+error: compilation successful\n+  --> $DIR/project-fn-ret-invariant.rs:69:1\n+   |\n+LL | fn main() { }\n+   | ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a669c7ac73bc53ec26d67a10b7be1d19b344287c", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.nll.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,30 @@\n+warning: not reporting region error due to nll\n+  --> $DIR/project-fn-ret-invariant.rs:47:12\n+   |\n+LL |    let f = foo; // <-- No consistent type can be inferred for `f` here.\n+   |            ^^^\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/project-fn-ret-invariant.rs:48:12\n+   |\n+LL | fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |        -- -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+LL |    let f = foo; // <-- No consistent type can be inferred for `f` here.\n+LL |    let a = bar(f, x);\n+   |            ^^^^^^^^^ argument requires that `'a` must outlive `'b`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/project-fn-ret-invariant.rs:49:12\n+   |\n+LL | fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |        -- -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |    let b = bar(f, y); //[oneuse]~ ERROR 49:19: 49:20: lifetime mismatch [E0623]\n+   |            ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7c86e20fe64d6d288214e0d9a099dcd8f4c20ab3", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,14 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/project-fn-ret-invariant.rs:49:19\n+   |\n+LL | fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |                               --------     --------------------\n+   |                               |\n+   |                               this parameter and the return type are declared with different lifetimes...\n+...\n+LL |    let b = bar(f, y); //[oneuse]~ ERROR 49:19: 49:20: lifetime mismatch [E0623]\n+   |                   ^ ...but data from `x` is returned here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "6e4bdd4b21c79c310d45958e9085bdfdd99c8e2a", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types/cache/project-fn-ret-invariant.rs"}, {"sha": "ed3f2a07aa2e7463e74d639b310ade3e84195eeb", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to nll\n+  --> $DIR/project-fn-ret-invariant.rs:58:8\n+   |\n+LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+   |        ^^^\n+\n+error: borrowed data escapes outside of function\n+  --> $DIR/project-fn-ret-invariant.rs:58:4\n+   |\n+LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n+   |               - `x` is a reference that is only valid in the function body\n+...\n+LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+   |    ^^^^^^^^^^^ `x` escapes the function body here\n+\n+error: aborting due to previous error\n+"}, {"sha": "6432ab9e57d7363acfa16dcfe7388f22c0615ef3", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,22 @@\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/project-fn-ret-invariant.rs:58:8\n+   |\n+LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+   |        ^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 54:8...\n+  --> $DIR/project-fn-ret-invariant.rs:54:8\n+   |\n+LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n+   |        ^^\n+   = note: ...so that the expression is assignable:\n+           expected Type<'_>\n+              found Type<'a>\n+   = note: but, the lifetime must be valid for the static lifetime...\n+   = note: ...so that the expression is assignable:\n+           expected Type<'static>\n+              found Type<'_>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "1351d14fe008737f4e14c1663608d3d9336b97fc", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,17 @@\n+error[E0271]: type mismatch resolving `for<'a> <&'a _ as Mirror>::Image == _`\n+  --> $DIR/higher-ranked-projection.rs:35:5\n+   |\n+LL |     foo(());\n+   |     ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n+   |\n+note: required by `foo`\n+  --> $DIR/higher-ranked-projection.rs:24:1\n+   |\n+LL | / fn foo<U, T>(_t: T)\n+LL | |     where for<'a> &'a T: Mirror<Image=U>\n+LL | | {}\n+   | |__^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "861827f329beae2052961171ca05363c832ce26c", "filename": "src/test/ui/associated-types/higher-ranked-projection.good.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error: compilation successful\n+  --> $DIR/higher-ranked-projection.rs:34:1\n+   |\n+LL | / fn main() { //[good]~ ERROR compilation successful\n+LL | |     foo(());\n+LL | |     //[bad]~^ ERROR type mismatch resolving `for<'a> <&'a _ as Mirror>::Image == _`\n+LL | |     //[bad]~| expected bound lifetime parameter 'a, found concrete lifetime\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "12341fa8db38f790c487a7ff0382b81be3e8abb7", "filename": "src/test/ui/associated-types/higher-ranked-projection.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types/higher-ranked-projection.rs"}, {"sha": "b5b3ecbb580ae34a1994ddab8ae3ae2a74f08572", "filename": "src/test/ui/associated-types/issue-36499.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-36499.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-36499.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-36499.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/associated-types/issue-36499.rs"}, {"sha": "5167c47a6cfcd8d3821e15d1b0aa8a0282ea6326", "filename": "src/test/ui/associated-types/issue-36499.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-36499.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-36499.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-36499.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,8 @@\n+error: expected expression, found `+`\n+  --> $DIR/issue-36499.rs:14:9\n+   |\n+LL |     2 + +2;\n+   |         ^ expected expression\n+\n+error: aborting due to previous error\n+"}, {"sha": "3d6c46f5ce3e15f1c27244c5502ade6e97de5d12", "filename": "src/test/ui/attempted-access-non-fatal.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattempted-access-non-fatal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattempted-access-non-fatal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattempted-access-non-fatal.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/attempted-access-non-fatal.rs"}, {"sha": "d056a3eff6fc7400d197139f5115f32302a89491", "filename": "src/test/ui/attempted-access-non-fatal.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,15 @@\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/attempted-access-non-fatal.rs:14:15\n+   |\n+LL |     let _ = x.foo; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+   |               ^^^\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/attempted-access-non-fatal.rs:15:15\n+   |\n+LL |     let _ = x.bar; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+   |               ^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0610`."}, {"sha": "4ab07f4fa9918e14fd7a60f1cffc2d740585dc3e", "filename": "src/test/ui/attr-bad-crate-attr.rc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattr-bad-crate-attr.rc", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattr-bad-crate-attr.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-bad-crate-attr.rc?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/attr-bad-crate-attr.rc"}, {"sha": "250905dbdcd8ca91b9aaacfcb81588f60f43f27c", "filename": "src/test/ui/attr-usage-inline.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattr-usage-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattr-usage-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-inline.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/attr-usage-inline.rs"}, {"sha": "171bd949e10c6d9863135d4ad0680bbce241c89e", "filename": "src/test/ui/attr-usage-inline.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattr-usage-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattr-usage-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-inline.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,11 @@\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/attr-usage-inline.rs:16:1\n+   |\n+LL | #[inline] //~ ERROR: attribute should be applied to function or closure\n+   | ^^^^^^^^^\n+LL | struct S;\n+   | --------- not a function or closure\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0518`."}, {"sha": "ec7885f1f44f97c68bfcd6ac3ad04b757eae9e2b", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/attrs-with-no-formal-in-generics-1.rs"}, {"sha": "afab999b02e6b40711116a58b4ed8abb466d7f63", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-1.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-1.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,8 @@\n+error: trailing attribute after lifetime parameters\n+  --> $DIR/attrs-with-no-formal-in-generics-1.rs:19:25\n+   |\n+LL | impl<#[rustc_1] 'a, 'b, #[oops]> RefIntPair<'a, 'b> {\n+   |                         ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "efe2d5561a832b5acedfb04da1a94035104faf4d", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/attrs-with-no-formal-in-generics-2.rs"}, {"sha": "8bff45ea9890a2d907a4842139e746b185695ebd", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-2.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,8 @@\n+error: trailing attribute after type parameters\n+  --> $DIR/attrs-with-no-formal-in-generics-2.rs:19:35\n+   |\n+LL | impl<#[rustc_1] 'a, #[rustc_2] T, #[oops]> RefAny<'a, T> {}\n+   |                                   ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e7d5b94d24226b1ceaee9813f9837550fc7b286a", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/attrs-with-no-formal-in-generics-3.rs"}, {"sha": "351c788f84fd14b94c549e4f2f6dadd966b489f0", "filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-3.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-with-no-formal-in-generics%2Fattrs-with-no-formal-in-generics-3.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,8 @@\n+error: trailing attribute after lifetime parameters\n+  --> $DIR/attrs-with-no-formal-in-generics-3.rs:18:38\n+   |\n+LL |     where Q: for <#[rustc_1] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32\n+   |                                      ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "324e9259647792ab335bf654bcecb7f803f13d39", "filename": "src/test/ui/auto-ref-slice-plus-ref.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/auto-ref-slice-plus-ref.rs"}, {"sha": "f62ac84a185a328a51adb51dff37b844c3af4a92", "filename": "src/test/ui/auto-ref-slice-plus-ref.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,44 @@\n+error[E0599]: no method named `test_mut` found for type `std::vec::Vec<{integer}>` in the current scope\n+  --> $DIR/auto-ref-slice-plus-ref.rs:18:7\n+   |\n+LL |     a.test_mut(); //~ ERROR no method named `test_mut` found\n+   |       ^^^^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `test_mut`, perhaps you need to implement it:\n+           candidate #1: `MyIter`\n+   = help: did you mean `get_mut`?\n+\n+error[E0599]: no method named `test` found for type `std::vec::Vec<{integer}>` in the current scope\n+  --> $DIR/auto-ref-slice-plus-ref.rs:19:7\n+   |\n+LL |     a.test(); //~ ERROR no method named `test` found\n+   |       ^^^^\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `test`, perhaps you need to implement it:\n+           candidate #1: `MyIter`\n+\n+error[E0599]: no method named `test` found for type `[{integer}; 1]` in the current scope\n+  --> $DIR/auto-ref-slice-plus-ref.rs:21:11\n+   |\n+LL |     ([1]).test(); //~ ERROR no method named `test` found\n+   |           ^^^^\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `test`, perhaps you need to implement it:\n+           candidate #1: `MyIter`\n+\n+error[E0599]: no method named `test` found for type `&[{integer}; 1]` in the current scope\n+  --> $DIR/auto-ref-slice-plus-ref.rs:22:12\n+   |\n+LL |     (&[1]).test(); //~ ERROR no method named `test` found\n+   |            ^^^^\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `test`, perhaps you need to implement it:\n+           candidate #1: `MyIter`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "92b222e1322b8b5e13442a973daa68bd0a38ba80", "filename": "src/test/ui/auto-trait-validation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauto-trait-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauto-trait-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-trait-validation.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/auto-trait-validation.rs"}, {"sha": "a6bd887021ee1b720174237b60ecf5329ff26346", "filename": "src/test/ui/auto-trait-validation.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauto-trait-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauto-trait-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-trait-validation.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,22 @@\n+error[E0567]: auto traits cannot have generic parameters\n+  --> $DIR/auto-trait-validation.rs:13:1\n+   |\n+LL | auto trait Generic<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0568]: auto traits cannot have super traits\n+  --> $DIR/auto-trait-validation.rs:15:1\n+   |\n+LL | auto trait Bound : Copy {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0380]: auto traits cannot have methods or associated items\n+  --> $DIR/auto-trait-validation.rs:17:1\n+   |\n+LL | auto trait MyTrait { fn foo() {} }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0380, E0567, E0568.\n+For more information about an error, try `rustc --explain E0380`."}, {"sha": "c152fdd9296828b590e80b32e0d3116cba94a02c", "filename": "src/test/ui/autoderef-full-lval.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoderef-full-lval.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/autoderef-full-lval.rs"}, {"sha": "df8eeb5d171c6f740ce9ebc91c956251e47e2b4e", "filename": "src/test/ui/autoderef-full-lval.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,19 @@\n+error[E0369]: binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n+  --> $DIR/autoderef-full-lval.rs:25:20\n+   |\n+LL |     let z: isize = a.x + b.y;\n+   |                    ^^^^^^^^^\n+   |\n+   = note: an implementation of `std::ops::Add` might be missing for `std::boxed::Box<isize>`\n+\n+error[E0369]: binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n+  --> $DIR/autoderef-full-lval.rs:31:25\n+   |\n+LL |     let answer: isize = forty.a + two.a;\n+   |                         ^^^^^^^^^^^^^^^\n+   |\n+   = note: an implementation of `std::ops::Add` might be missing for `std::boxed::Box<isize>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0369`."}, {"sha": "a3d0222a14c97ec7782e41df968de16c5ed4e727", "filename": "src/test/ui/auxiliary/cdylib-dep.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fcdylib-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fcdylib-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fcdylib-dep.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/auxiliary/cdylib-dep.rs"}, {"sha": "4bd8ecacb96b3ddcb5e86e42654dd18cfe6c0fa9", "filename": "src/test/ui/auxiliary/default_ty_param_cross_crate_crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fdefault_ty_param_cross_crate_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fdefault_ty_param_cross_crate_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fdefault_ty_param_cross_crate_crate.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/auxiliary/default_ty_param_cross_crate_crate.rs"}, {"sha": "6b6b14a896b299efde61fa1a3f05415e51ff3857", "filename": "src/test/ui/auxiliary/define_macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fdefine_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fdefine_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fdefine_macro.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/auxiliary/define_macro.rs"}, {"sha": "07f70b177b3b57a57f2111d5b7d0f7e0edb30756", "filename": "src/test/ui/auxiliary/extern-statics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fextern-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fextern-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fextern-statics.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/auxiliary/extern-statics.rs"}, {"sha": "ea09327bd19e140028b29f3f26325ea619b4f1e0", "filename": "src/test/ui/auxiliary/lto-duplicate-symbols1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Flto-duplicate-symbols1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Flto-duplicate-symbols1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Flto-duplicate-symbols1.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/auxiliary/lto-duplicate-symbols1.rs"}, {"sha": "ea09327bd19e140028b29f3f26325ea619b4f1e0", "filename": "src/test/ui/auxiliary/lto-duplicate-symbols2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Flto-duplicate-symbols2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Flto-duplicate-symbols2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Flto-duplicate-symbols2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/auxiliary/lto-duplicate-symbols2.rs"}, {"sha": "3bf39b788db6e1e2b6b8c3f9728c1485916cb5ad", "filename": "src/test/ui/auxiliary/namespaced_enums.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fnamespaced_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fnamespaced_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fnamespaced_enums.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/auxiliary/namespaced_enums.rs"}, {"sha": "5ae8e0d298e53b046fb7e0203c6e5f51cac3505e", "filename": "src/test/ui/auxiliary/noexporttypelib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fnoexporttypelib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fnoexporttypelib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fnoexporttypelib.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/auxiliary/noexporttypelib.rs"}, {"sha": "cf3e9903b5ad001e2bef688a792cfe8c5e630d07", "filename": "src/test/ui/auxiliary/orphan_check_diagnostics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Forphan_check_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Forphan_check_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Forphan_check_diagnostics.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/auxiliary/orphan_check_diagnostics.rs"}, {"sha": "4207fc2373b1749ad49c929fe83655c1778cf4a2", "filename": "src/test/ui/auxiliary/rmeta_meta.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Frmeta_meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Frmeta_meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Frmeta_meta.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/auxiliary/rmeta_meta.rs"}, {"sha": "6096c4df05bb0349d8961399905c4294ce4c1798", "filename": "src/test/ui/auxiliary/rmeta_rlib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Frmeta_rlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Frmeta_rlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Frmeta_rlib.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/auxiliary/rmeta_rlib.rs"}, {"sha": "a59f4b4e8f44b9760b72452564435acd3a4f6f6b", "filename": "src/test/ui/auxiliary/stability_cfg2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fstability_cfg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fstability_cfg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fstability_cfg2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/auxiliary/stability_cfg2.rs"}, {"sha": "6434e62b6f7035556b32e317d8f5e4d1356a9f03", "filename": "src/test/ui/auxiliary/weak-lang-items.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fweak-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fweak-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fweak-lang-items.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+// This aux-file will require the eh_personality function to be codegen'd, but\n+// it hasn't been defined just yet. Make sure we don't explode.\n+\n+#![no_std]\n+#![crate_type = \"rlib\"]\n+\n+struct A;\n+\n+impl core::ops::Drop for A {\n+    fn drop(&mut self) {}\n+}\n+\n+pub fn foo() {\n+    let _a = A;\n+    panic!(\"wut\");\n+}\n+\n+mod std {\n+    pub use core::{option, fmt};\n+}"}, {"sha": "5e7bc61943be57efb922d751d3f0cefd1c39fb7d", "filename": "src/test/ui/auxiliary/xc_private_method_lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fxc_private_method_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fauxiliary%2Fxc_private_method_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fxc_private_method_lib.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/auxiliary/xc_private_method_lib.rs"}, {"sha": "5547d19868d34e2340473e9fc480a8092a59e9ae", "filename": "src/test/ui/bad/bad-const-type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-const-type.rs"}, {"sha": "fbde1573200aad177251c4c56a15d232f5686a1a", "filename": "src/test/ui/bad/bad-const-type.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/bad-const-type.rs:11:20\n+   |\n+LL | static i: String = 10;\n+   |                    ^^\n+   |                    |\n+   |                    expected struct `std::string::String`, found integral variable\n+   |                    help: try using a conversion method: `10.to_string()`\n+   |\n+   = note: expected type `std::string::String`\n+              found type `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "70e1806a20b54acddbc58f1344367e3d7d1cd6b2", "filename": "src/test/ui/bad/bad-crate-name.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-crate-name.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/ui/bad-crate-name.rs"}, {"sha": "8348badeeeb175338fcb22ee4d2ef9c662267e18", "filename": "src/test/ui/bad/bad-crate-name.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-crate-name.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/ui/bad-crate-name.stderr"}, {"sha": "6a5e4cfef895a40021b702c17b75d2b835c57f5d", "filename": "src/test/ui/bad/bad-env-capture.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-env-capture.rs"}, {"sha": "bf460d2a81e9c00e87550cb461e1d725ab94c600", "filename": "src/test/ui/bad/bad-env-capture.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,24 @@\n+error[E0434]: can't capture dynamic environment in a fn item\n+  --> $DIR/bad-env-capture.rs:14:27\n+   |\n+LL |     fn bar() { log(debug, x); }\n+   |                           ^\n+   |\n+   = help: use the `|| { ... }` closure form instead\n+\n+error[E0425]: cannot find function `log` in this scope\n+  --> $DIR/bad-env-capture.rs:14:16\n+   |\n+LL |     fn bar() { log(debug, x); }\n+   |                ^^^ not found in this scope\n+\n+error[E0425]: cannot find value `debug` in this scope\n+  --> $DIR/bad-env-capture.rs:14:20\n+   |\n+LL |     fn bar() { log(debug, x); }\n+   |                    ^^^^^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0425, E0434.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "cf67c73c539799afdb51bedb0562ef4a5cf52f88", "filename": "src/test/ui/bad/bad-env-capture2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-env-capture2.rs"}, {"sha": "8d5703d29f50ca14651faf450ab73e61a1e28ac7", "filename": "src/test/ui/bad/bad-env-capture2.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture2.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,24 @@\n+error[E0434]: can't capture dynamic environment in a fn item\n+  --> $DIR/bad-env-capture2.rs:13:27\n+   |\n+LL |     fn bar() { log(debug, x); }\n+   |                           ^\n+   |\n+   = help: use the `|| { ... }` closure form instead\n+\n+error[E0425]: cannot find function `log` in this scope\n+  --> $DIR/bad-env-capture2.rs:13:16\n+   |\n+LL |     fn bar() { log(debug, x); }\n+   |                ^^^ not found in this scope\n+\n+error[E0425]: cannot find value `debug` in this scope\n+  --> $DIR/bad-env-capture2.rs:13:20\n+   |\n+LL |     fn bar() { log(debug, x); }\n+   |                    ^^^^^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0425, E0434.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "a30c6770b87ff839be0fdf769540b4db4fcffe8d", "filename": "src/test/ui/bad/bad-env-capture3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture3.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-env-capture3.rs"}, {"sha": "258f7d43b56a8451258456b0db8f9f940709d6b4", "filename": "src/test/ui/bad/bad-env-capture3.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-env-capture3.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,24 @@\n+error[E0434]: can't capture dynamic environment in a fn item\n+  --> $DIR/bad-env-capture3.rs:14:31\n+   |\n+LL |         fn bar() { log(debug, x); }\n+   |                               ^\n+   |\n+   = help: use the `|| { ... }` closure form instead\n+\n+error[E0425]: cannot find function `log` in this scope\n+  --> $DIR/bad-env-capture3.rs:14:20\n+   |\n+LL |         fn bar() { log(debug, x); }\n+   |                    ^^^ not found in this scope\n+\n+error[E0425]: cannot find value `debug` in this scope\n+  --> $DIR/bad-env-capture3.rs:14:24\n+   |\n+LL |         fn bar() { log(debug, x); }\n+   |                        ^^^^^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0425, E0434.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "c7d2f2c472f49e15bc94f39232a4145be2ada6ab", "filename": "src/test/ui/bad/bad-expr-lhs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-expr-lhs.rs"}, {"sha": "5937beef9c7a20cff8f80b6c6953420782225ad0", "filename": "src/test/ui/bad/bad-expr-lhs.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,34 @@\n+error[E0070]: invalid left-hand side expression\n+  --> $DIR/bad-expr-lhs.rs:12:5\n+   |\n+LL |     1 = 2; //~ ERROR invalid left-hand side expression\n+   |     ^^^^^ left-hand of expression not valid\n+\n+error[E0067]: invalid left-hand side expression\n+  --> $DIR/bad-expr-lhs.rs:13:5\n+   |\n+LL |     1 += 2; //~ ERROR invalid left-hand side expression\n+   |     ^ invalid expression for left-hand side\n+\n+error[E0070]: invalid left-hand side expression\n+  --> $DIR/bad-expr-lhs.rs:14:5\n+   |\n+LL |     (1, 2) = (3, 4); //~ ERROR invalid left-hand side expression\n+   |     ^^^^^^^^^^^^^^^ left-hand of expression not valid\n+\n+error[E0070]: invalid left-hand side expression\n+  --> $DIR/bad-expr-lhs.rs:17:5\n+   |\n+LL |     (a, b) = (3, 4); //~ ERROR invalid left-hand side expression\n+   |     ^^^^^^^^^^^^^^^ left-hand of expression not valid\n+\n+error[E0070]: invalid left-hand side expression\n+  --> $DIR/bad-expr-lhs.rs:19:5\n+   |\n+LL |     None = Some(3); //~ ERROR invalid left-hand side expression\n+   |     ^^^^^^^^^^^^^^ left-hand of expression not valid\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors occurred: E0067, E0070.\n+For more information about an error, try `rustc --explain E0067`."}, {"sha": "bd62dc663776b54c1499e9f5b709af0cda4f935b", "filename": "src/test/ui/bad/bad-expr-path.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-expr-path.rs"}, {"sha": "a1ac17c78d6a04c7cf5edb97475cb814be717745", "filename": "src/test/ui/bad/bad-expr-path.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,31 @@\n+error[E0425]: cannot find function `log` in this scope\n+  --> $DIR/bad-expr-path.rs:14:5\n+   |\n+LL |     log(debug, m1::arguments);\n+   |     ^^^ not found in this scope\n+\n+error[E0425]: cannot find value `debug` in this scope\n+  --> $DIR/bad-expr-path.rs:14:9\n+   |\n+LL |     log(debug, m1::arguments);\n+   |         ^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `arguments` in module `m1`\n+  --> $DIR/bad-expr-path.rs:14:20\n+   |\n+LL |     log(debug, m1::arguments);\n+   |                    ^^^^^^^^^ not found in `m1`\n+\n+error[E0580]: main function has wrong type\n+  --> $DIR/bad-expr-path.rs:13:1\n+   |\n+LL | fn main(arguments: Vec<String>) { //~ ERROR main function has wrong type\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n+   |\n+   = note: expected type `fn()`\n+              found type `fn(std::vec::Vec<std::string::String>)`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0425, E0580.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "06b72d1ed47f47d1218240b6931b174fd8164406", "filename": "src/test/ui/bad/bad-expr-path2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-expr-path2.rs"}, {"sha": "bb7d01c72fe971cf09fcac3830abecb202c0ea36", "filename": "src/test/ui/bad/bad-expr-path2.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,31 @@\n+error[E0425]: cannot find function `log` in this scope\n+  --> $DIR/bad-expr-path2.rs:16:5\n+   |\n+LL |     log(debug, m1::arguments);\n+   |     ^^^ not found in this scope\n+\n+error[E0425]: cannot find value `debug` in this scope\n+  --> $DIR/bad-expr-path2.rs:16:9\n+   |\n+LL |     log(debug, m1::arguments);\n+   |         ^^^^^ not found in this scope\n+\n+error[E0423]: expected value, found module `m1::arguments`\n+  --> $DIR/bad-expr-path2.rs:16:16\n+   |\n+LL |     log(debug, m1::arguments);\n+   |                ^^^^^^^^^^^^^ not a value\n+\n+error[E0580]: main function has wrong type\n+  --> $DIR/bad-expr-path2.rs:15:1\n+   |\n+LL | fn main(arguments: Vec<String>) { //~ ERROR main function has wrong type\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n+   |\n+   = note: expected type `fn()`\n+              found type `fn(std::vec::Vec<std::string::String>)`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0423, E0425, E0580.\n+For more information about an error, try `rustc --explain E0423`."}, {"sha": "ff63d4b739aef7cb37a8cac00ed54c49ffaeac81", "filename": "src/test/ui/bad/bad-extern-link-attrs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-extern-link-attrs.rs"}, {"sha": "5e58bcd00949225d155252b94c99b0dca5c307c7", "filename": "src/test/ui/bad/bad-extern-link-attrs.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,24 @@\n+error[E0459]: #[link(...)] specified without `name = \"foo\"`\n+  --> $DIR/bad-extern-link-attrs.rs:11:1\n+   |\n+LL | #[link()] //~ ERROR: specified without `name =\n+   | ^^^^^^^^^ missing `name` argument\n+\n+error[E0454]: #[link(name = \"\")] given with empty name\n+  --> $DIR/bad-extern-link-attrs.rs:12:1\n+   |\n+LL | #[link(name = \"\")] //~ ERROR: with empty name\n+   | ^^^^^^^^^^^^^^^^^^ empty name given\n+\n+error[E0458]: unknown kind: `bar`\n+  --> $DIR/bad-extern-link-attrs.rs:14:1\n+   |\n+LL | #[link(name = \"foo\", kind = \"bar\")] //~ ERROR: unknown kind\n+   | ^^^^^^^^^^^^^^^^^^^^^------------^^\n+   |                      |\n+   |                      unknown kind\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0454, E0458, E0459.\n+For more information about an error, try `rustc --explain E0454`."}, {"sha": "2fe94d43acdd1867b9ef7ec40d64911261c0b134", "filename": "src/test/ui/bad/bad-intrinsic-monomorphization.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-intrinsic-monomorphization.rs"}, {"sha": "a088dd0aa439556b055c827a516a2949a09b02c9", "filename": "src/test/ui/bad/bad-intrinsic-monomorphization.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,21 @@\n+error[E0511]: invalid monomorphization of `cttz` intrinsic: expected basic integer type, found `Foo`\n+  --> $DIR/bad-intrinsic-monomorphization.rs:28:5\n+   |\n+LL |     intrinsics::cttz(v)\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error[E0511]: invalid monomorphization of `fadd_fast` intrinsic: expected basic float type, found `Foo`\n+  --> $DIR/bad-intrinsic-monomorphization.rs:33:5\n+   |\n+LL |     intrinsics::fadd_fast(a, b)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0511]: invalid monomorphization of `simd_add` intrinsic: expected SIMD input type, found non-SIMD `Foo`\n+  --> $DIR/bad-intrinsic-monomorphization.rs:38:5\n+   |\n+LL |     simd_add(a, b)\n+   |     ^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0511`."}, {"sha": "cb9c347af603c1e42e57170808a54ee94915ea8f", "filename": "src/test/ui/bad/bad-lint-cap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-lint-cap.rs"}, {"sha": "f284dbf847955b1f836f22cacdd55eaf80f79b64", "filename": "src/test/ui/bad/bad-lint-cap.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,2 @@\n+error: unknown lint level: `test`\n+"}, {"sha": "cb9fb973a01939e332b0bd3cc310be2c6312ac56", "filename": "src/test/ui/bad/bad-lint-cap2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-lint-cap2.rs"}, {"sha": "7471aa21e58ccaf42086f66bb11412bb9df2340a", "filename": "src/test/ui/bad/bad-lint-cap2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,15 @@\n+error: unused import: `std::option`\n+  --> $DIR/bad-lint-cap2.rs:16:5\n+   |\n+LL | use std::option; //~ ERROR\n+   |     ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/bad-lint-cap2.rs:14:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: #[deny(unused_imports)] implied by #[deny(warnings)]\n+\n+error: aborting due to previous error\n+"}, {"sha": "c9394954c5fbd3485c99e74abf0a6e8b9f3d1ce6", "filename": "src/test/ui/bad/bad-lint-cap3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-lint-cap3.rs"}, {"sha": "d32246073146f3bd2a6f095b81afc0ae873f9509", "filename": "src/test/ui/bad/bad-lint-cap3.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,21 @@\n+warning: unused import: `std::option`\n+  --> $DIR/bad-lint-cap3.rs:17:5\n+   |\n+LL | use std::option; //~ WARN\n+   |     ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/bad-lint-cap3.rs:14:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: #[warn(unused_imports)] implied by #[warn(warnings)]\n+\n+error: compilation successful\n+  --> $DIR/bad-lint-cap3.rs:20:1\n+   |\n+LL | fn main() {} //~ ERROR: compilation successful\n+   | ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b73b4a6af6e89e8fdcd3e29012ab6000c85ac2bb", "filename": "src/test/ui/bad/bad-main.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-main.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-main.rs"}, {"sha": "3388e0866e56a81605bcab6acd026111e6a5ee2f", "filename": "src/test/ui/bad/bad-main.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error[E0580]: main function has wrong type\n+  --> $DIR/bad-main.rs:11:1\n+   |\n+LL | fn main(x: isize) { } //~ ERROR: main function has wrong type [E0580]\n+   | ^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n+   |\n+   = note: expected type `fn()`\n+              found type `fn(isize)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0580`."}, {"sha": "7cef3f13dfc2cef2c574a2916f839748471d0aa0", "filename": "src/test/ui/bad/bad-method-typaram-kind.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-method-typaram-kind.rs"}, {"sha": "ed0c49a4f66517c0717d92f7dfd8b50909d38920", "filename": "src/test/ui/bad/bad-method-typaram-kind.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: `T` cannot be sent between threads safely\n+  --> $DIR/bad-method-typaram-kind.rs:12:7\n+   |\n+LL |     1.bar::<T>(); //~ ERROR `T` cannot be sent between threads safely\n+   |       ^^^ `T` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `T`\n+   = help: consider adding a `where T: std::marker::Send` bound\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "20ac757354faf0ccf738300f73b692d2c81bd2de", "filename": "src/test/ui/bad/bad-mid-path-type-params.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-mid-path-type-params.rs"}, {"sha": "d2b002ebee92ccab09badf6f9e9d049b0b1eae40", "filename": "src/test/ui/bad/bad-mid-path-type-params.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,28 @@\n+error[E0087]: too many type parameters provided: expected at most 1 type parameter, found 2 type parameters\n+  --> $DIR/bad-mid-path-type-params.rs:40:28\n+   |\n+LL |     let _ = S::new::<isize,f64>(1, 1.0);\n+   |                            ^^^ expected 1 type parameter\n+\n+error[E0107]: wrong number of lifetime parameters: expected 0, found 1\n+  --> $DIR/bad-mid-path-type-params.rs:43:13\n+   |\n+LL |     let _ = S::<'a,isize>::new::<f64>(1, 1.0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ unexpected lifetime parameter\n+\n+error[E0087]: too many type parameters provided: expected at most 1 type parameter, found 2 type parameters\n+  --> $DIR/bad-mid-path-type-params.rs:46:36\n+   |\n+LL |     let _: S2 = Trait::new::<isize,f64>(1, 1.0);\n+   |                                    ^^^ expected 1 type parameter\n+\n+error[E0088]: too many lifetime parameters provided: expected at most 0 lifetime parameters, found 1 lifetime parameter\n+  --> $DIR/bad-mid-path-type-params.rs:49:25\n+   |\n+LL |     let _: S2 = Trait::<'a,isize>::new::<f64>(1, 1.0);\n+   |                         ^^ expected 0 lifetime parameters\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0087, E0088, E0107.\n+For more information about an error, try `rustc --explain E0087`."}, {"sha": "6987d06ef12c3b40d0a504345ad8cc173e00cd79", "filename": "src/test/ui/bad/bad-module.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-module.rs?ref=f45f52532a394d2d607fc5693364ad820049376d", "previous_filename": "src/test/compile-fail/bad-module.rs"}, {"sha": "8c19922dcabe9157f7074b03ded11e391b47e6d3", "filename": "src/test/ui/bad/bad-module.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f45f52532a394d2d607fc5693364ad820049376d/src%2Ftest%2Fui%2Fbad%2Fbad-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-module.stderr?ref=f45f52532a394d2d607fc5693364ad820049376d", "patch": "@@ -0,0 +1,15 @@\n+error[E0433]: failed to resolve. Use of undeclared type or module `thing`\n+  --> $DIR/bad-module.rs:12:15\n+   |\n+LL |     let foo = thing::len(Vec::new());\n+   |               ^^^^^ Use of undeclared type or module `thing`\n+\n+error[E0433]: failed to resolve. Use of undeclared type or module `foo`\n+  --> $DIR/bad-module.rs:15:15\n+   |\n+LL |     let foo = foo::bar::baz();\n+   |               ^^^ Use of undeclared type or module `foo`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}]}