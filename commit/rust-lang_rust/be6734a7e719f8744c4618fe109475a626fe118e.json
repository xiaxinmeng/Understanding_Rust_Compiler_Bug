{"sha": "be6734a7e719f8744c4618fe109475a626fe118e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNjczNGE3ZTcxOWY4NzQ0YzQ2MThmZTEwOTQ3NWE2MjZmZTExOGU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-09-06T06:36:34Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-02T05:55:46Z"}, "message": "Move reason for move to label", "tree": {"sha": "0f5158760829df88bdf37b7ea7948107e9cab329", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f5158760829df88bdf37b7ea7948107e9cab329"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be6734a7e719f8744c4618fe109475a626fe118e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be6734a7e719f8744c4618fe109475a626fe118e", "html_url": "https://github.com/rust-lang/rust/commit/be6734a7e719f8744c4618fe109475a626fe118e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be6734a7e719f8744c4618fe109475a626fe118e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "885011ef1fd8fbe8c5be50a0713c03c980772be3", "url": "https://api.github.com/repos/rust-lang/rust/commits/885011ef1fd8fbe8c5be50a0713c03c980772be3", "html_url": "https://github.com/rust-lang/rust/commit/885011ef1fd8fbe8c5be50a0713c03c980772be3"}], "stats": {"total": 139, "additions": 86, "deletions": 53}, "files": [{"sha": "4b72b6987084ee5c987f7020749209c52aa12d08", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/be6734a7e719f8744c4618fe109475a626fe118e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6734a7e719f8744c4618fe109475a626fe118e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=be6734a7e719f8744c4618fe109475a626fe118e", "patch": "@@ -705,28 +705,28 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 }, \" (into closure)\"),\n         };\n \n+        let extra_move_label = if need_note {\n+            format!(\" because it has type `{}`, which does not implement the `Copy` trait\",\n+                    moved_lp.ty)\n+        } else {\n+            String::new()\n+        };\n         // Annotate the use and the move in the span. Watch out for\n         // the case where the use and the move are the same. This\n         // means the use is in a loop.\n         err = if use_span == move_span {\n             err.span_label(\n                 use_span,\n-                format!(\"value moved{} here in previous iteration of loop\",\n-                         move_note));\n+                format!(\"value moved{} here in previous iteration of loop{}\",\n+                         move_note,\n+                         extra_move_label));\n             err\n         } else {\n             err.span_label(use_span, format!(\"value {} here after move\", verb_participle))\n-               .span_label(move_span, format!(\"value moved{} here\", move_note));\n+               .span_label(move_span, format!(\"value moved{} here{}\", move_note, extra_move_label));\n             err\n         };\n \n-        if need_note {\n-            err.note(&format!(\"move occurs because `{}` has type `{}`, \\\n-                               which does not implement the `Copy` trait\",\n-                              self.loan_path_to_string(moved_lp),\n-                              moved_lp.ty));\n-        }\n-\n         // Note: we used to suggest adding a `ref binding` or calling\n         // `clone` but those suggestions have been removed because\n         // they are often not what you actually want to do, and were\n@@ -1391,7 +1391,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             LpDowncast(ref lp_base, variant_def_id) => {\n                 out.push('(');\n                 self.append_autoderefd_loan_path_to_string(&lp_base, out);\n-                out.push(':');\n+                out.push_str(DOWNCAST_PRINTED_OPERATOR);\n                 out.push_str(&self.tcx.item_path_str(variant_def_id));\n                 out.push(')');\n             }"}, {"sha": "544679171b4623565505205c473e3ba8e35b7fd0", "filename": "src/test/compile-fail/issue-24357.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be6734a7e719f8744c4618fe109475a626fe118e/src%2Ftest%2Fcompile-fail%2Fissue-24357.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6734a7e719f8744c4618fe109475a626fe118e/src%2Ftest%2Fcompile-fail%2Fissue-24357.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24357.rs?ref=be6734a7e719f8744c4618fe109475a626fe118e", "patch": "@@ -12,9 +12,8 @@ struct NoCopy;\n fn main() {\n    let x = NoCopy;\n    let f = move || { let y = x; };\n-   //~^ value moved (into closure) here\n+   //~^ NOTE value moved (into closure) here because it has type `NoCopy`, which does not\n    let z = x;\n    //~^ ERROR use of moved value: `x`\n-   //~| value used here after move\n-   //~| move occurs because `x` has type `NoCopy`\n+   //~| NOTE value used here after move\n }"}, {"sha": "0929e0b57d32d4c2723896ae96f9971c0ee91247", "filename": "src/test/compile-fail/moves-based-on-type-distribute-copy-over-paren.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be6734a7e719f8744c4618fe109475a626fe118e/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-distribute-copy-over-paren.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6734a7e719f8744c4618fe109475a626fe118e/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-distribute-copy-over-paren.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-distribute-copy-over-paren.rs?ref=be6734a7e719f8744c4618fe109475a626fe118e", "patch": "@@ -17,17 +17,17 @@ fn touch<A>(_a: &A) {}\n fn f00() {\n     let x = \"hi\".to_string();\n     let _y = Foo { f:x };\n-    //~^ value moved here\n+    //~^ NOTE value moved here because it has type\n     touch(&x); //~ ERROR use of moved value: `x`\n-    //~^ value used here after move\n-    //~| move occurs because `x` has type `std::string::String`\n+    //~^ NOTE value used here after move\n }\n \n fn f05() {\n     let x = \"hi\".to_string();\n     let _y = Foo { f:(((x))) };\n-    //~^ value moved here\n+    //~^ NOTE value moved here because it has type\n     touch(&x); //~ ERROR use of moved value: `x`\n+    //~^ NOTE value used here after move\n }\n \n fn f10() {"}, {"sha": "0ac48990be4be16fa53209f112a6b078651e683d", "filename": "src/test/ui/augmented-assignments.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be6734a7e719f8744c4618fe109475a626fe118e/src%2Ftest%2Fui%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6734a7e719f8744c4618fe109475a626fe118e/src%2Ftest%2Fui%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.rs?ref=be6734a7e719f8744c4618fe109475a626fe118e", "patch": "@@ -20,15 +20,18 @@ impl AddAssign for Int {\n \n fn main() {\n     let mut x = Int(1);\n-    x   //~ error: use of moved value: `x`\n-    //~^ value used here after move\n+    x\n+    //~^ error: use of moved value: `x`\n+    //~| note: value used here after move\n     +=\n-    x;  //~ value moved here\n+    x;\n+    //~^ note: value moved here because it has type `Int`, which does not implement the `Copy`\n \n     let y = Int(2);\n-    //~^ consider changing this to `mut y`\n-    y   //~ error: cannot borrow immutable local variable `y` as mutable\n-        //~| cannot borrow\n+    //~^ note: consider changing this to `mut y`\n+    y\n+    //~^ error: cannot borrow immutable local variable `y` as mutable\n+    //~| note: cannot borrow mutably\n     +=\n     Int(1);\n }"}, {"sha": "a2b2d425f1dc9b6e2559d322f29def1089fce97d", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/be6734a7e719f8744c4618fe109475a626fe118e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6734a7e719f8744c4618fe109475a626fe118e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=be6734a7e719f8744c4618fe109475a626fe118e", "patch": "@@ -33,36 +33,33 @@ struct D {\n fn copy_after_move() {\n     let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n-    //~^ value moved here\n-    let _y = a.y; //~ ERROR use of moved\n-    //~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n-    //~| value used here after move\n+    //~^ NOTE value moved here because it has type `std::boxed::Box<isize>`, which does not\n+    let _y = a.y; //~ ERROR use of moved value\n+    //~^ NOTE value used here after move\n }\n \n fn move_after_move() {\n     let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = a.x;\n-    //~^ value moved here\n+    //~^ NOTE value moved here because it has type `std::boxed::Box<isize>`, which does not\n     let _y = a.y; //~ ERROR use of moved\n-    //~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n-    //~| value used here after move\n+    //~^ NOTE value used here after move\n }\n \n fn borrow_after_move() {\n     let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n-    //~^ value moved here\n+    //~^ NOTE value moved here because it has type `std::boxed::Box<isize>`, which does not\n     let _y = &a.y; //~ ERROR use of moved\n-    //~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n-    //~| value used here after move\n+    //~^ NOTE value used here after move\n }\n \n fn move_after_borrow() {\n     let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &a.x;\n     let _y = a.y;\n     //~^ ERROR cannot move\n-    //~| move out of\n+    //~| NOTE move out of\n }\n \n fn copy_after_mut_borrow() {\n@@ -76,54 +73,54 @@ fn move_after_mut_borrow() {\n     let _x = &mut a.x;\n     let _y = a.y;\n     //~^ ERROR cannot move\n-    //~| move out of\n+    //~| NOTE move out of\n }\n \n fn borrow_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n     let _y = &a.y; //~ ERROR cannot borrow\n-    //~^ immutable borrow occurs here (via `a.y`)\n+    //~^ NOTE immutable borrow occurs here (via `a.y`)\n }\n \n fn mut_borrow_after_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &a.x;\n     let _y = &mut a.y; //~ ERROR cannot borrow\n-    //~^ mutable borrow occurs here (via `a.y`)\n+    //~^ NOTE mutable borrow occurs here (via `a.y`)\n }\n \n fn copy_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n-    //~^ value moved here\n+    //~^ NOTE value moved here because it has type `std::boxed::Box<isize>`, which does not\n     let _y = a.y; //~ ERROR use of collaterally moved\n-    //~| value used here after move\n+    //~^ NOTE value used here after move\n }\n \n fn move_after_move_nested() {\n     let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = a.x.x;\n-    //~^ value moved here\n+    //~^ NOTE value moved here because it has type `std::boxed::Box<isize>`, which does not\n     let _y = a.y; //~ ERROR use of collaterally moved\n-    //~| value used here after move\n+    //~^ NOTE value used here after move\n }\n \n fn borrow_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n-    //~^ value moved here\n+    //~^ NOTE value moved here because it has type `std::boxed::Box<isize>`, which does not\n     let _y = &a.y; //~ ERROR use of collaterally moved\n-    //~| value used here after move\n+    //~^ NOTE value used here after move\n }\n \n fn move_after_borrow_nested() {\n     let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &a.x.x;\n-    //~^ borrow of `a.x.x` occurs here\n+    //~^ NOTE borrow of `a.x.x` occurs here\n     let _y = a.y;\n     //~^ ERROR cannot move\n-    //~| move out of\n+    //~| NOTE move out of\n }\n \n fn copy_after_mut_borrow_nested() {\n@@ -137,23 +134,23 @@ fn move_after_mut_borrow_nested() {\n     let _x = &mut a.x.x;\n     let _y = a.y;\n     //~^ ERROR cannot move\n-    //~| move out of\n+    //~| NOTE move out of\n }\n \n fn borrow_after_mut_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n-    //~^ mutable borrow occurs here\n+    //~^ NOTE mutable borrow occurs here\n     let _y = &a.y; //~ ERROR cannot borrow\n-    //~^ immutable borrow occurs here\n+    //~^ NOTE immutable borrow occurs here\n }\n \n fn mut_borrow_after_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &a.x.x;\n-    //~^ immutable borrow occurs here\n+    //~^ NOTE immutable borrow occurs here\n     let _y = &mut a.y; //~ ERROR cannot borrow\n-    //~^ mutable borrow occurs here\n+    //~^ NOTE mutable borrow occurs here\n }\n \n fn main() {"}, {"sha": "a8e1edbdfdf1e09bf230a3d35b9787b52dd1d005", "filename": "src/test/ui/borrowck/issue-41962.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/be6734a7e719f8744c4618fe109475a626fe118e/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6734a7e719f8744c4618fe109475a626fe118e/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs?ref=be6734a7e719f8744c4618fe109475a626fe118e", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main(){\n+    let maybe = Some(vec![true, true]);\n+\n+    loop {\n+        if let Some(thing) = maybe {\n+        }\n+    }\n+}"}, {"sha": "4ee11798123a9481bab2d34f27a811fecb828a99", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be6734a7e719f8744c4618fe109475a626fe118e/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be6734a7e719f8744c4618fe109475a626fe118e/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=be6734a7e719f8744c4618fe109475a626fe118e", "patch": "@@ -0,0 +1,16 @@\n+error[E0382]: use of partially moved value: `maybe`\n+  --> $DIR/issue-41962.rs:15:30\n+   |\n+15 |         if let Some(thing) = maybe {\n+   |                     -----    ^^^^^ value used here after move\n+   |                     |\n+   |                     value moved here because it has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `(maybe as std::prelude::v1::Some).0`\n+  --> $DIR/issue-41962.rs:15:21\n+   |\n+15 |         if let Some(thing) = maybe {\n+   |                     ^^^^^ value moved here in previous iteration of loop because it has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "c08c1a788c1e09f7a41622b0ea834b0acd1bf6f7", "filename": "src/test/ui/moves-based-on-type-match-bindings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be6734a7e719f8744c4618fe109475a626fe118e/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6734a7e719f8744c4618fe109475a626fe118e/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.rs?ref=be6734a7e719f8744c4618fe109475a626fe118e", "patch": "@@ -21,11 +21,11 @@ fn f10() {\n \n     let y = match x {\n         Foo {f} => {}\n+        //~^ NOTE value moved here because it has type `std::string::String`, which does not\n     };\n \n     touch(&x); //~ ERROR use of partially moved value: `x`\n-    //~^ value used here after move\n-    //~| move occurs because `x.f` has type `std::string::String`\n+    //~^ NOTE value used here after move\n }\n \n fn main() {}"}]}