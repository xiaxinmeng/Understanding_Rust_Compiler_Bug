{"sha": "f9335e990897b9ad1f072eb0a8e7385d720538f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MzM1ZTk5MDg5N2I5YWQxZjA3MmViMGE4ZTczODVkNzIwNTM4ZjI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-27T18:37:36Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-29T18:44:34Z"}, "message": "Make Target::from_impl_item a free function.", "tree": {"sha": "205bb60f25057c12ce9accc085ef93af7cd6abfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/205bb60f25057c12ce9accc085ef93af7cd6abfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9335e990897b9ad1f072eb0a8e7385d720538f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9335e990897b9ad1f072eb0a8e7385d720538f2", "html_url": "https://github.com/rust-lang/rust/commit/f9335e990897b9ad1f072eb0a8e7385d720538f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9335e990897b9ad1f072eb0a8e7385d720538f2/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "124fd9d2a43bfadfb3f05b5a7fb46ce884357818", "url": "https://api.github.com/repos/rust-lang/rust/commits/124fd9d2a43bfadfb3f05b5a7fb46ce884357818", "html_url": "https://github.com/rust-lang/rust/commit/124fd9d2a43bfadfb3f05b5a7fb46ce884357818"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "3ff1ba3bbfc8c201ff49c22cf511acc04003ec59", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f9335e990897b9ad1f072eb0a8e7385d720538f2/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9335e990897b9ad1f072eb0a8e7385d720538f2/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=f9335e990897b9ad1f072eb0a8e7385d720538f2", "patch": "@@ -21,29 +21,23 @@ use rustc_span::Span;\n use syntax::ast::Attribute;\n use syntax::attr;\n \n-pub(crate) trait TargetExt {\n-    fn from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem<'_>) -> Target;\n-}\n-\n-impl TargetExt for Target {\n-    fn from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem<'_>) -> Target {\n-        match impl_item.kind {\n-            hir::ImplItemKind::Const(..) => Target::AssocConst,\n-            hir::ImplItemKind::Method(..) => {\n-                let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id);\n-                let containing_item = tcx.hir().expect_item(parent_hir_id);\n-                let containing_impl_is_for_trait = match &containing_item.kind {\n-                    hir::ItemKind::Impl { ref of_trait, .. } => of_trait.is_some(),\n-                    _ => bug!(\"parent of an ImplItem must be an Impl\"),\n-                };\n-                if containing_impl_is_for_trait {\n-                    Target::Method(MethodKind::Trait { body: true })\n-                } else {\n-                    Target::Method(MethodKind::Inherent)\n-                }\n+fn target_from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem<'_>) -> Target {\n+    match impl_item.kind {\n+        hir::ImplItemKind::Const(..) => Target::AssocConst,\n+        hir::ImplItemKind::Method(..) => {\n+            let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id);\n+            let containing_item = tcx.hir().expect_item(parent_hir_id);\n+            let containing_impl_is_for_trait = match &containing_item.kind {\n+                hir::ItemKind::Impl { ref of_trait, .. } => of_trait.is_some(),\n+                _ => bug!(\"parent of an ImplItem must be an Impl\"),\n+            };\n+            if containing_impl_is_for_trait {\n+                Target::Method(MethodKind::Trait { body: true })\n+            } else {\n+                Target::Method(MethodKind::Inherent)\n             }\n-            hir::ImplItemKind::TyAlias(..) | hir::ImplItemKind::OpaqueTy(..) => Target::AssocTy,\n         }\n+        hir::ImplItemKind::TyAlias(..) | hir::ImplItemKind::OpaqueTy(..) => Target::AssocTy,\n     }\n }\n \n@@ -437,7 +431,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n-        let target = Target::from_impl_item(self.tcx, impl_item);\n+        let target = target_from_impl_item(self.tcx, impl_item);\n         self.check_attributes(impl_item.hir_id, &impl_item.attrs, &impl_item.span, target, None);\n         intravisit::walk_impl_item(self, impl_item)\n     }"}]}