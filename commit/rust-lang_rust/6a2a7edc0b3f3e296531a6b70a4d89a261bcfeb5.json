{"sha": "6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMmE3ZWRjMGIzZjNlMjk2NTMxYTZiNzBhNGQ4OWEyNjFiY2ZlYjU=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-06T04:22:56Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-26T21:40:21Z"}, "message": "Fixed issues raised in first review.", "tree": {"sha": "5b9e246920722934d75a805d7ac07a580a9982d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b9e246920722934d75a805d7ac07a580a9982d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5", "html_url": "https://github.com/rust-lang/rust/commit/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74f233388a0ce8c1e5cdf84f6895fb9074c3cabd", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f233388a0ce8c1e5cdf84f6895fb9074c3cabd", "html_url": "https://github.com/rust-lang/rust/commit/74f233388a0ce8c1e5cdf84f6895fb9074c3cabd"}], "stats": {"total": 118, "additions": 33, "deletions": 85}, "files": [{"sha": "f15a27fbc8b597b3664e7f06eb5348da77739c33", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5", "patch": "@@ -31,7 +31,7 @@ use std::collections::BTreeSet;\n use std::iter;\n use std::slice;\n \n-use super::{allow_type_alias_enum_variants};\n+use super::{check_type_alias_enum_variants_enabled};\n \n pub trait AstConv<'gcx, 'tcx> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'a, 'gcx, 'tcx>;\n@@ -1277,7 +1277,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                                      ref_id: ast::NodeId,\n                                      span: Span,\n                                      ty: Ty<'tcx>,\n-                                     qself: &hir::Ty,\n                                      ty_path_def: Def,\n                                      item_segment: &hir::PathSegment)\n                                      -> (Ty<'tcx>, Def)\n@@ -1296,10 +1295,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                     tcx.hygienic_eq(assoc_name, vd.ident, adt_def.did)\n                 });\n                 if let Some(variant_def) = variant_def {\n-                    if allow_type_alias_enum_variants(tcx, qself, span) {\n-                        let def = Def::Variant(variant_def.did);\n-                        return (ty, def);\n-                    }\n+                    check_type_alias_enum_variants_enabled(tcx, span);\n+\n+                    let def = Def::Variant(variant_def.did);\n+                    tcx.check_stability(def.def_id(), Some(ref_id), span);\n+                    return (ty, def);\n                 }\n             }\n         }\n@@ -1376,8 +1376,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         let item = tcx.associated_items(trait_did).find(|i| {\n             Namespace::from(i.kind) == Namespace::Type &&\n                 i.ident.modern() == assoc_ident\n-        })\n-        .expect(\"missing associated type\");\n+        }).expect(\"missing associated type\");\n \n         let ty = self.projected_ty_from_poly_trait_ref(span, item.def_id, bound);\n         let ty = self.normalize_ty(span, ty);\n@@ -1618,7 +1617,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 } else {\n                     Def::Err\n                 };\n-                self.associated_path_def_to_ty(ast_ty.id, ast_ty.span, ty, qself, def, segment).0\n+                self.associated_path_def_to_ty(ast_ty.id, ast_ty.span, ty, def, segment).0\n             }\n             hir::TyKind::Array(ref ty, ref length) => {\n                 let length_def_id = tcx.hir().local_def_id(length.id);"}, {"sha": "88814ae6a2db91962d6bb0fd27c191cb49754ed4", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5", "patch": "@@ -25,7 +25,7 @@ use rustc::infer::{self, InferOk};\n use syntax::ast;\n use syntax_pos::Span;\n \n-use crate::{allow_type_alias_enum_variants};\n+use crate::{check_type_alias_enum_variants_enabled};\n use self::probe::{IsSuggestion, ProbeScope};\n \n pub fn provide(providers: &mut ty::query::Providers) {\n@@ -361,7 +361,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         span: Span,\n                         method_name: ast::Ident,\n                         self_ty: Ty<'tcx>,\n-                        qself: &hir::Ty,\n                         expr_id: ast::NodeId)\n                         -> Result<Def, MethodError<'tcx>> {\n         debug!(\"resolve_ufcs: method_name={:?} self_ty={:?} expr_id={:?}\",\n@@ -379,10 +378,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     tcx.hygienic_eq(method_name, vd.ident, adt_def.did)\n                 });\n                 if let Some(variant_def) = variant_def {\n-                    if allow_type_alias_enum_variants(tcx, qself, span) {\n-                        let def = Def::VariantCtor(variant_def.did, variant_def.ctor_kind);\n-                        return Ok(def);\n-                    }\n+                    check_type_alias_enum_variants_enabled(tcx, span);\n+\n+                    let def = Def::VariantCtor(variant_def.did, variant_def.ctor_kind);\n+                    tcx.check_stability(def.def_id(), Some(expr_id), span);\n+                    return Ok(def);\n                 }\n             }\n         }"}, {"sha": "98c425655d2d3c1bef6e4138a85fcb6220c07a0e", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5", "patch": "@@ -645,7 +645,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn type_derefs_to_local(&self,\n                             span: Span,\n                             rcvr_ty: Ty<'tcx>,\n-                            rcvr_expr: Option<&hir::Expr>) -> bool {\n+                            source: SelfSource) -> bool {\n         fn is_local(ty: Ty) -> bool {\n             match ty.sty {\n                 ty::Adt(def, _) => def.did.is_local(),"}, {"sha": "b13c92c7f6e7c8d38e21f972a094973229b8f67a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5", "patch": "@@ -4539,7 +4539,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     Def::Err\n                 };\n                 let (ty, def) = AstConv::associated_path_def_to_ty(self, node_id, path_span,\n-                                                                   ty, qself, def, segment);\n+                                                                   ty, def, segment);\n \n                 // Write back the new resolution.\n                 let hir_id = self.tcx.hir().node_to_hir_id(node_id);\n@@ -4575,7 +4575,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             return (*cached_def, Some(ty), slice::from_ref(&**item_segment))\n         }\n         let item_name = item_segment.ident;\n-        let def = match self.resolve_ufcs(span, item_name, ty, qself, node_id) {\n+        let def = match self.resolve_ufcs(span, item_name, ty, node_id) {\n             Ok(def) => def,\n             Err(error) => {\n                 let def = match error {"}, {"sha": "c55a1258ce955ab158f1f8ecfb5089da3e7c735c", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5", "patch": "@@ -105,7 +105,6 @@ mod outlives;\n mod variance;\n \n use hir::Node;\n-use hir::def::Def;\n use rustc_target::spec::abi::Abi;\n use rustc::hir;\n use rustc::infer::InferOk;\n@@ -131,28 +130,20 @@ pub struct TypeAndSubsts<'tcx> {\n     ty: Ty<'tcx>,\n }\n \n-fn allow_type_alias_enum_variants<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                                  qself: &hir::Ty,\n-                                                  span: Span) -> bool {\n-    let allow_feature = tcx.features().type_alias_enum_variants;\n-    if !allow_feature {\n-        // Only print error if we know the type is an alias.\n-        if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = qself.node {\n-            if let Def::TyAlias(_) = path.def {\n-                let mut err = tcx.sess.struct_span_err(\n-                    span,\n-                    \"enum variants on type aliases are experimental\"\n-                );\n-                if nightly_options::is_nightly_build() {\n-                    help!(&mut err,\n-                        \"add `#![feature(type_alias_enum_variants)]` to the \\\n-                        crate attributes to enable\");\n-                }\n-                err.emit();\n-            }\n+fn check_type_alias_enum_variants_enabled<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                                          span: Span) {\n+    if !tcx.features().type_alias_enum_variants {\n+        let mut err = tcx.sess.struct_span_err(\n+            span,\n+            \"enum variants on type aliases are experimental\"\n+        );\n+        if nightly_options::is_nightly_build() {\n+            help!(&mut err,\n+                \"add `#![feature(type_alias_enum_variants)]` to the \\\n+                crate attributes to enable\");\n         }\n+        err.emit();\n     }\n-    allow_feature\n }\n \n fn require_c_abi_if_variadic(tcx: TyCtxt,"}, {"sha": "8997c1824ca6d02901062af8ffee5b54700cbfe8", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_enum_variants.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_enum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_enum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_enum_variants.rs?ref=6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5", "patch": "@@ -18,16 +18,12 @@ type Alias = Foo;\n fn main() {\n     let t = Alias::Bar(0);\n     //~^ ERROR enum variants on type aliases are experimental\n-    //~^^ ERROR no variant named `Bar` found for type `Foo` in the current scope\n     let t = Alias::Baz { i: 0 };\n     //~^ ERROR enum variants on type aliases are experimental\n-    //~^^ ERROR ambiguous associated type\n     match t {\n         Alias::Bar(_i) => {}\n         //~^ ERROR enum variants on type aliases are experimental\n-        //~^^ ERROR no variant named `Bar` found for type `Foo` in the current scope\n         Alias::Baz { i: _i } => {}\n         //~^ ERROR enum variants on type aliases are experimental\n-        //~^^ ERROR ambiguous associated type\n     }\n }"}, {"sha": "cba643e18ca1acfbb358b7c3a7bc7d1aa675b164", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_enum_variants.stderr", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_enum_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_enum_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_enum_variants.stderr?ref=6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5", "patch": "@@ -6,67 +6,29 @@ LL |     let t = Alias::Bar(0);\n    |\n    = help: add `#![feature(type_alias_enum_variants)]` to the crate attributes to enable\n \n-error[E0599]: no variant named `Bar` found for type `Foo` in the current scope\n-  --> $DIR/feature-gate-type_alias_enum_variants.rs:19:20\n-   |\n-LL | enum Foo {\n-   | -------- variant `Bar` not found here\n-...\n-LL |     let t = Alias::Bar(0);\n-   |             -------^^^\n-   |             |\n-   |             variant not found in `Foo`\n-   |\n-   = help: did you mean `Bar`?\n-\n error: enum variants on type aliases are experimental\n-  --> $DIR/feature-gate-type_alias_enum_variants.rs:22:13\n+  --> $DIR/feature-gate-type_alias_enum_variants.rs:21:13\n    |\n LL |     let t = Alias::Baz { i: 0 };\n    |             ^^^^^^^^^^\n    |\n    = help: add `#![feature(type_alias_enum_variants)]` to the crate attributes to enable\n \n-error[E0223]: ambiguous associated type\n-  --> $DIR/feature-gate-type_alias_enum_variants.rs:22:13\n-   |\n-LL |     let t = Alias::Baz { i: 0 };\n-   |             ^^^^^^^^^^ help: use fully-qualified syntax: `<Foo as Trait>::Baz`\n-\n error: enum variants on type aliases are experimental\n-  --> $DIR/feature-gate-type_alias_enum_variants.rs:26:9\n+  --> $DIR/feature-gate-type_alias_enum_variants.rs:24:9\n    |\n LL |         Alias::Bar(_i) => {}\n    |         ^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(type_alias_enum_variants)]` to the crate attributes to enable\n \n-error[E0599]: no variant named `Bar` found for type `Foo` in the current scope\n-  --> $DIR/feature-gate-type_alias_enum_variants.rs:26:16\n-   |\n-LL | enum Foo {\n-   | -------- variant `Bar` not found here\n-...\n-LL |         Alias::Bar(_i) => {}\n-   |         -------^^^---- variant not found in `Foo`\n-   |\n-   = help: did you mean `Bar`?\n-\n error: enum variants on type aliases are experimental\n-  --> $DIR/feature-gate-type_alias_enum_variants.rs:29:9\n+  --> $DIR/feature-gate-type_alias_enum_variants.rs:26:9\n    |\n LL |         Alias::Baz { i: _i } => {}\n    |         ^^^^^^^^^^\n    |\n    = help: add `#![feature(type_alias_enum_variants)]` to the crate attributes to enable\n \n-error[E0223]: ambiguous associated type\n-  --> $DIR/feature-gate-type_alias_enum_variants.rs:29:9\n-   |\n-LL |         Alias::Baz { i: _i } => {}\n-   |         ^^^^^^^^^^ help: use fully-qualified syntax: `<Foo as Trait>::Baz`\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0223, E0599.\n-For more information about an error, try `rustc --explain E0223`."}]}