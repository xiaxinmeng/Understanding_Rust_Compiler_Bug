{"sha": "90cc83015eafb21293fd0cb8fb81f172236325df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwY2M4MzAxNWVhZmIyMTI5M2ZkMGNiOGZiODFmMTcyMjM2MzI1ZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-22T23:25:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-22T23:25:32Z"}, "message": "Auto merge of #24703 - Manishearth:rollup, r=Manishearth\n\nr? @Manishearth", "tree": {"sha": "f2b2bc6e032b098ebcca4ae1c2c2dfcc001fe79d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2b2bc6e032b098ebcca4ae1c2c2dfcc001fe79d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90cc83015eafb21293fd0cb8fb81f172236325df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90cc83015eafb21293fd0cb8fb81f172236325df", "html_url": "https://github.com/rust-lang/rust/commit/90cc83015eafb21293fd0cb8fb81f172236325df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90cc83015eafb21293fd0cb8fb81f172236325df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c9636975cdc289e98ef8f33400969371c4ce1bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c9636975cdc289e98ef8f33400969371c4ce1bf", "html_url": "https://github.com/rust-lang/rust/commit/5c9636975cdc289e98ef8f33400969371c4ce1bf"}, {"sha": "b0319e9094c9f4d5d273ab4a40324bd9ded97b5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0319e9094c9f4d5d273ab4a40324bd9ded97b5c", "html_url": "https://github.com/rust-lang/rust/commit/b0319e9094c9f4d5d273ab4a40324bd9ded97b5c"}], "stats": {"total": 299, "additions": 293, "deletions": 6}, "files": [{"sha": "0edadeb628e8036bd6ead12e71797406af7f01a8", "filename": "src/doc/trpl/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90cc83015eafb21293fd0cb8fb81f172236325df/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/90cc83015eafb21293fd0cb8fb81f172236325df/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FSUMMARY.md?ref=90cc83015eafb21293fd0cb8fb81f172236325df", "patch": "@@ -9,6 +9,7 @@\n     * [The Stack and the Heap](the-stack-and-the-heap.md)\n     * [Debug and Display](debug-and-display.md)\n     * [Testing](testing.md)\n+    * [Conditional Compilation](conditional-compilation.md)\n     * [Documentation](documentation.md)\n     * [Iterators](iterators.md)\n     * [Concurrency](concurrency.md)\n@@ -46,7 +47,6 @@\n     * [`const` and `static`](const-and-static.md)\n     * [Tuple Structs](tuple-structs.md)\n     * [Attributes](attributes.md)\n-    * [Conditional Compilation](conditional-compilation.md)\n     * [`type` aliases](type-aliases.md)\n     * [Casting between types](casting-between-types.md)\n     * [Associated Types](associated-types.md)"}, {"sha": "54195a5063b7c0b03c3817b59a351c2c7380973e", "filename": "src/doc/trpl/attributes.md", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/90cc83015eafb21293fd0cb8fb81f172236325df/src%2Fdoc%2Ftrpl%2Fattributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/90cc83015eafb21293fd0cb8fb81f172236325df/src%2Fdoc%2Ftrpl%2Fattributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fattributes.md?ref=90cc83015eafb21293fd0cb8fb81f172236325df", "patch": "@@ -1,3 +1,70 @@\n % Attributes\n \n-Coming Soon!\n+Declarations can be annotated with \u2018attributes\u2019 in Rust. They look like this:\n+\n+```rust\n+#[test]\n+# fn foo() {}\n+```\n+\n+or like this:\n+\n+```rust\n+# mod foo {\n+#![test]\n+# }\n+```\n+\n+The difference between the two is the `!`, which changes what the attribute\n+applies to:\n+\n+```rust,ignore\n+#[foo]\n+struct Foo;\n+\n+mod bar {\n+    #![bar]\n+}\n+```\n+\n+The `#[foo]` attribute applies to the next item, which is the `struct`\n+declaration. The `#![bar]` attribute applies to the item enclosing it, which is\n+the `mod` declaration. Otherwise, they\u2019re the same. Both change the meaning of\n+the item they\u2019re attached to somehow.\n+\n+For example, consider a function like this:\n+\n+```rust\n+#[test]\n+fn check() {\n+    assert_eq!(2, 1 + 1);\n+}\n+```\n+\n+It is marked with `#[test]`. This means it\u2019s special: when you run\n+[tests][tests], this function will execute. When you compile as usual, it won\u2019t\n+even be included. This function is now a test function.\n+\n+[tests]: testing.html\n+\n+Attributes may also have additional data:\n+\n+```rust\n+#[inline(always)]\n+fn super_fast_fn() {\n+# }\n+```\n+\n+Or even keys and values:\n+\n+```rust\n+#[cfg(target_os = \"macos\")]\n+mod macos_only {\n+# }\n+```\n+\n+Rust attributes are used for a number of different things. There is a full list\n+of attributes [in the reference][reference]. Currently, you are not allowed to\n+create your own attributes, the Rust compiler defines them.\n+\n+[reference]: reference.html#attributes"}, {"sha": "73eb0101692afb9eec313d7202f69c93489fbf76", "filename": "src/doc/trpl/conditional-compilation.md", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/90cc83015eafb21293fd0cb8fb81f172236325df/src%2Fdoc%2Ftrpl%2Fconditional-compilation.md", "raw_url": "https://github.com/rust-lang/rust/raw/90cc83015eafb21293fd0cb8fb81f172236325df/src%2Fdoc%2Ftrpl%2Fconditional-compilation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconditional-compilation.md?ref=90cc83015eafb21293fd0cb8fb81f172236325df", "patch": "@@ -1,3 +1,93 @@\n % Conditional Compilation\n \n-Coming Soon!\n+Rust has a special attribute, `#[cfg]`, which allows you to compile code\n+based on a flag passed to the compiler. It has two forms:\n+\n+```rust\n+#[cfg(foo)]\n+# fn foo() {}\n+\n+#[cfg(bar = \"baz\")]\n+# fn bar() {}\n+```\n+\n+They also have some helpers:\n+\n+```rust\n+#[cfg(any(unix, windows))]\n+# fn foo() {}\n+\n+#[cfg(all(unix, target_pointer_width = \"32\"))]\n+# fn bar() {}\n+\n+#[cfg(not(foo))]\n+# fn not_foo() {}\n+```\n+\n+These can nest arbitrarily:\n+\n+```rust\n+#[cfg(any(not(unix), all(target_os=\"macos\", target_arch = \"powerpc\")))]\n+# fn foo() {}\n+```\n+\n+As for how to enable or disable these switches, if you\u2019re using Cargo,\n+they get set in the [`[features]` section][features] of your `Cargo.toml`:\n+\n+[features]: http://doc.crates.io/manifest.html#the-[features]-section\n+\n+```toml\n+[features]\n+# no features by default\n+default = []\n+\n+# The \u201csecure-password\u201d feature depends on the bcrypt package.\n+secure-password = [\"bcrypt\"]\n+```\n+\n+When you do this, Cargo passes along a flag to `rustc`:\n+\n+```text\n+--cfg feature=\"${feature_name}\"\n+```\n+\n+The sum of these `cfg` flags will determine which ones get activated, and\n+therefore, which code gets compiled. Let\u2019s take this code:\n+\n+```rust\n+#[cfg(feature = \"foo\")]\n+mod foo {\n+}\n+```\n+\n+If we compile it with `cargo build --features \"foo\"`, it will send the `--cfg\n+feature=\"foo\"` flag to `rustc`, and the output will have the `mod foo` in it.\n+If we compile it with a regular `cargo build`, no extra flags get passed on,\n+and so, no `foo` module will exist.\n+\n+# cfg_attr\n+\n+You can also set another attribute based on a `cfg` variable with `cfg_attr`:\n+\n+```rust\n+#[cfg_attr(a, b)]\n+# fn foo() {}\n+```\n+\n+Will be the same as `#[b]` if `a` is set by `cfg` attribute, and nothing otherwise.\n+\n+# cfg!\n+\n+The `cfg!` [syntax extension][compilerplugins] lets you use these kinds of flags\n+elsewhere in your code, too:\n+\n+```rust\n+if cfg!(target_os = \"macos\") || cfg!(target_os = \"ios\") {\n+    println!(\"Think Different!\");\n+}\n+```\n+\n+[compilerplugins]: compiler-plugins.html\n+\n+These will be replaced by a `true` or `false` at compile-time, depending on the\n+configuration settings."}, {"sha": "d175da35f5ec97ecd8eeb5305f24d9104ed6090c", "filename": "src/doc/trpl/type-aliases.md", "status": "modified", "additions": 74, "deletions": 1, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/90cc83015eafb21293fd0cb8fb81f172236325df/src%2Fdoc%2Ftrpl%2Ftype-aliases.md", "raw_url": "https://github.com/rust-lang/rust/raw/90cc83015eafb21293fd0cb8fb81f172236325df/src%2Fdoc%2Ftrpl%2Ftype-aliases.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftype-aliases.md?ref=90cc83015eafb21293fd0cb8fb81f172236325df", "patch": "@@ -1,3 +1,76 @@\n % `type` Aliases\n \n-Coming soon\n+The `type` keyword lets you declare an alias of another type:\n+\n+```rust\n+type Name = String;\n+```\n+\n+You can then use this type as if it were a real type:\n+\n+```rust\n+type Name = String;\n+\n+let x: Name = \"Hello\".to_string();\n+```\n+\n+Note, however, that this is an _alias_, not a new type entirely. In other\n+words, because Rust is strongly typed, you\u2019d expect a comparison between two\n+different types to fail:\n+\n+```rust,ignore\n+let x: i32 = 5;\n+let y: i64 = 5;\n+\n+if x == y {\n+   // ...\n+}\n+```\n+\n+this gives\n+\n+```text\n+error: mismatched types:\n+ expected `i32`,\n+    found `i64`\n+(expected i32,\n+    found i64) [E0308]\n+     if x == y {\n+             ^\n+```\n+\n+But, if we had an alias:\n+\n+```rust\n+type Num = i32;\n+\n+let x: i32 = 5;\n+let y: Num = 5;\n+\n+if x == y {\n+   // ...\n+}\n+```\n+\n+This compiles without error. Values of a `Num` type are the same as a value of\n+type `i32`, in every way.\n+\n+You can also use type aliases with generics:\n+\n+```rust\n+use std::result;\n+\n+enum ConcreteError {\n+    Foo,\n+    Bar,\n+}\n+\n+type Result<T> = result::Result<T, ConcreteError>;\n+```\n+\n+This creates a specialized version of the `Result` type, which always has a\n+`ConcreteError` for the `E` part of `Result<T, E>`. This is commonly used\n+in the standard library to create custom errors for each subsection. For\n+example, [io::Result][ioresult].\n+\n+[ioresult]: ../std/io/type.Result.html"}, {"sha": "756abeff06d354e3b3598f1b5f9a4b3bd1255e1d", "filename": "src/doc/trpl/unsized-types.md", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/90cc83015eafb21293fd0cb8fb81f172236325df/src%2Fdoc%2Ftrpl%2Funsized-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/90cc83015eafb21293fd0cb8fb81f172236325df/src%2Fdoc%2Ftrpl%2Funsized-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsized-types.md?ref=90cc83015eafb21293fd0cb8fb81f172236325df", "patch": "@@ -1,3 +1,58 @@\n % Unsized Types\n \n-Coming Soon!\n+Most types have a particular size, in bytes, that is knowable at compile time.\n+For example, an `i32` is thirty-two bits big, or four bytes. However, there are\n+some types which are useful to express, but do not have a defined size. These are\n+called \u2018unsized\u2019 or \u2018dynamically sized\u2019 types. One example is `[T]`. This type\n+represents a certain number of `T` in sequence. But we don\u2019t know how many\n+there are, so the size is not known.\n+\n+Rust understands a few of these types, but they have some restrictions. There\n+are three:\n+\n+1. We can only manipulate an instance of an unsized type via a pointer. An\n+   `&[T]` works just fine, but a `[T]` does not.\n+2. Variables and arguments cannot have dynamically sized types.\n+3. Only the last field in a `struct` may have a dynamically sized type; the\n+   other fields must not. Enum variants must not have dynamically sized types as\n+   data.\n+\n+So why bother? Well, because `[T]` can only be used behind a pointer, if we\n+didn\u2019t have language support for unsized types, it would be impossible to write\n+this:\n+\n+```rust,ignore\n+impl Foo for str {\n+```\n+\n+or\n+\n+```rust,ignore\n+impl<T> Foo for [T] {\n+```\n+\n+Instead, you would have to write:\n+\n+```rust,ignore\n+impl Foo for &str {\n+```\n+\n+Meaning, this implementation would only work for [references][ref], and not\n+other types of pointers. With this `impl`, all pointers, including (at some\n+point, there are some bugs to fix first) user-defined custom smart pointers,\n+can use this `impl`.\n+\n+# ?Sized\n+\n+If you want to write a function that accepts a dynamically sized type, you\n+can use the special bound, `?Sized`:\n+\n+```rust\n+struct Foo<T: ?Sized> {\n+    f: T,\n+}\n+```\n+\n+This `?`, read as \u201cT may be `Sized`\u201d,  means that this bound is special: it\n+lets us match more kinds, not less. It\u2019s almost like every `T` implicitly has\n+`T: Sized`, and the `?` undoes this default."}, {"sha": "240b6286c8cfc64d43f03d3c9cad0b3b96dc0660", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90cc83015eafb21293fd0cb8fb81f172236325df/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90cc83015eafb21293fd0cb8fb81f172236325df/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=90cc83015eafb21293fd0cb8fb81f172236325df", "patch": "@@ -195,9 +195,11 @@ fn test_write() {\n         write!(w, \"{}\", \"hello\");\n         writeln!(w, \"{}\", \"line\");\n         writeln!(w, \"{foo}\", foo=\"bar\");\n+        w.write_char('\u2603');\n+        w.write_str(\"str\");\n     }\n \n-    t!(buf, \"34helloline\\nbar\\n\");\n+    t!(buf, \"34helloline\\nbar\\n\u2603str\");\n }\n \n // Just make sure that the macros are defined, there's not really a lot that we"}]}