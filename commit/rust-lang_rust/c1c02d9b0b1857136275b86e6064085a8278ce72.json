{"sha": "c1c02d9b0b1857136275b86e6064085a8278ce72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYzAyZDliMGIxODU3MTM2Mjc1Yjg2ZTYwNjQwODVhODI3OGNlNzI=", "commit": {"author": {"name": "Ryan Prichard", "email": "ryan.prichard@gmail.com", "date": "2015-03-01T03:30:06Z"}, "committer": {"name": "Ryan Prichard", "email": "ryan.prichard@gmail.com", "date": "2015-03-01T03:30:06Z"}, "message": "Cleanup in the fmt::num module\n\n * Make num::UpperHex private.  I was unable to determine why this struct\n   is public.  The num module itself is not public, and the UpperHex struct\n   is not referenced anywhere in the core::fmt module.  (Only the UpperHex\n   trait is reference.)  num::LowerHex is not public.\n\n * Remove the suffix parameters from the macros that generate integral\n   display traits.\n\n   The code to print the Debug::fmt suffixes was removed when Show was\n   renamed to Debug.  It was an intentional change.  From RFC 0565:\n\n    * Focus on the *runtime* aspects of a type; repeating information such\n      as suffixes for integer literals is not generally useful since that\n      data is readily available from the type definition.\n\n * Because Show was renamed to Debug, rename show! to debug!.", "tree": {"sha": "c900e9e248d52c2e7dde4a1d4e7f5a5d4b7b1bbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c900e9e248d52c2e7dde4a1d4e7f5a5d4b7b1bbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1c02d9b0b1857136275b86e6064085a8278ce72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c02d9b0b1857136275b86e6064085a8278ce72", "html_url": "https://github.com/rust-lang/rust/commit/c1c02d9b0b1857136275b86e6064085a8278ce72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1c02d9b0b1857136275b86e6064085a8278ce72/comments", "author": {"login": "rprichard", "id": 1572855, "node_id": "MDQ6VXNlcjE1NzI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1572855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rprichard", "html_url": "https://github.com/rprichard", "followers_url": "https://api.github.com/users/rprichard/followers", "following_url": "https://api.github.com/users/rprichard/following{/other_user}", "gists_url": "https://api.github.com/users/rprichard/gists{/gist_id}", "starred_url": "https://api.github.com/users/rprichard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rprichard/subscriptions", "organizations_url": "https://api.github.com/users/rprichard/orgs", "repos_url": "https://api.github.com/users/rprichard/repos", "events_url": "https://api.github.com/users/rprichard/events{/privacy}", "received_events_url": "https://api.github.com/users/rprichard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rprichard", "id": 1572855, "node_id": "MDQ6VXNlcjE1NzI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1572855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rprichard", "html_url": "https://github.com/rprichard", "followers_url": "https://api.github.com/users/rprichard/followers", "following_url": "https://api.github.com/users/rprichard/following{/other_user}", "gists_url": "https://api.github.com/users/rprichard/gists{/gist_id}", "starred_url": "https://api.github.com/users/rprichard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rprichard/subscriptions", "organizations_url": "https://api.github.com/users/rprichard/orgs", "repos_url": "https://api.github.com/users/rprichard/repos", "events_url": "https://api.github.com/users/rprichard/events{/privacy}", "received_events_url": "https://api.github.com/users/rprichard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "890293655251c372ea99694c0c9f0795e2663286", "url": "https://api.github.com/repos/rust-lang/rust/commits/890293655251c372ea99694c0c9f0795e2663286", "html_url": "https://github.com/rust-lang/rust/commit/890293655251c372ea99694c0c9f0795e2663286"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "045442e28ac5dfc57161dc0ec3302054c685139a", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c1c02d9b0b1857136275b86e6064085a8278ce72/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c02d9b0b1857136275b86e6064085a8278ce72/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=c1c02d9b0b1857136275b86e6064085a8278ce72", "patch": "@@ -84,7 +84,7 @@ struct LowerHex;\n \n /// A hexadecimal (base 16) radix, formatted with upper-case characters\n #[derive(Clone, PartialEq)]\n-pub struct UpperHex;\n+struct UpperHex;\n \n macro_rules! radix {\n     ($T:ident, $base:expr, $prefix:expr, $($x:pat => $conv:expr),+) => {\n@@ -156,7 +156,7 @@ pub fn radix<T>(x: T, base: u8) -> RadixFmt<T, Radix> {\n }\n \n macro_rules! radix_fmt {\n-    ($T:ty as $U:ty, $fmt:ident, $S:expr) => {\n+    ($T:ty as $U:ty, $fmt:ident) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl fmt::Debug for RadixFmt<$T, Radix> {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -182,8 +182,8 @@ macro_rules! int_base {\n     }\n }\n \n-macro_rules! show {\n-    ($T:ident with $S:expr) => {\n+macro_rules! debug {\n+    ($T:ident) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl fmt::Debug for $T {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -194,27 +194,24 @@ macro_rules! show {\n }\n macro_rules! integer {\n     ($Int:ident, $Uint:ident) => {\n-        integer! { $Int, $Uint, stringify!($Int), stringify!($Uint) }\n-    };\n-    ($Int:ident, $Uint:ident, $SI:expr, $SU:expr) => {\n         int_base! { Display  for $Int as $Int   -> Decimal }\n         int_base! { Binary   for $Int as $Uint  -> Binary }\n         int_base! { Octal    for $Int as $Uint  -> Octal }\n         int_base! { LowerHex for $Int as $Uint  -> LowerHex }\n         int_base! { UpperHex for $Int as $Uint  -> UpperHex }\n-        radix_fmt! { $Int as $Int, fmt_int, $SI }\n-        show! { $Int with $SI }\n+        radix_fmt! { $Int as $Int, fmt_int }\n+        debug! { $Int }\n \n         int_base! { Display  for $Uint as $Uint -> Decimal }\n         int_base! { Binary   for $Uint as $Uint -> Binary }\n         int_base! { Octal    for $Uint as $Uint -> Octal }\n         int_base! { LowerHex for $Uint as $Uint -> LowerHex }\n         int_base! { UpperHex for $Uint as $Uint -> UpperHex }\n-        radix_fmt! { $Uint as $Uint, fmt_int, $SU }\n-        show! { $Uint with $SU }\n+        radix_fmt! { $Uint as $Uint, fmt_int }\n+        debug! { $Uint }\n     }\n }\n-integer! { isize, usize, \"i\", \"u\" }\n+integer! { isize, usize }\n integer! { i8, u8 }\n integer! { i16, u16 }\n integer! { i32, u32 }"}]}