{"sha": "3f8e2690bec118bc217fddf4715d603341c6e4d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmOGUyNjkwYmVjMTE4YmMyMTdmZGRmNDcxNWQ2MDMzNDFjNmU0ZDc=", "commit": {"author": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2014-11-23T06:31:40Z"}, "committer": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2014-11-24T00:05:41Z"}, "message": "Implement into_iter() for BinaryHeap.", "tree": {"sha": "74468bf443ed7d409259874e62cf492554663cc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74468bf443ed7d409259874e62cf492554663cc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f8e2690bec118bc217fddf4715d603341c6e4d7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f8e2690bec118bc217fddf4715d603341c6e4d7", "html_url": "https://github.com/rust-lang/rust/commit/3f8e2690bec118bc217fddf4715d603341c6e4d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f8e2690bec118bc217fddf4715d603341c6e4d7/comments", "author": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "529f8bcd8b03f1bcff46c31c682ce9274abff86d", "url": "https://api.github.com/repos/rust-lang/rust/commits/529f8bcd8b03f1bcff46c31c682ce9274abff86d", "html_url": "https://github.com/rust-lang/rust/commit/529f8bcd8b03f1bcff46c31c682ce9274abff86d"}], "stats": {"total": 82, "additions": 79, "deletions": 3}, "files": [{"sha": "1f47505d6cbf346dcc8ed96e96e11146b3dfb698", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/3f8e2690bec118bc217fddf4715d603341c6e4d7/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f8e2690bec118bc217fddf4715d603341c6e4d7/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=3f8e2690bec118bc217fddf4715d603341c6e4d7", "patch": "@@ -160,9 +160,7 @@ use core::mem::{zeroed, replace, swap};\n use core::ptr;\n \n use slice;\n-use vec::Vec;\n-\n-// FIXME(conventions): implement into_iter\n+use vec::{mod, Vec};\n \n /// A priority queue implemented with a binary heap.\n ///\n@@ -243,6 +241,27 @@ impl<T: Ord> BinaryHeap<T> {\n         Items { iter: self.data.iter() }\n     }\n \n+    /// Creates a consuming iterator, that is, one that moves each value out of\n+    /// the binary heap in arbitrary order.  The binary heap cannot be used\n+    /// after calling this.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::BinaryHeap;\n+    /// let pq = BinaryHeap::from_vec(vec![1i, 2, 3, 4]);\n+    ///\n+    /// // Print 1, 2, 3, 4 in arbitrary order\n+    /// for x in pq.into_iter() {\n+    ///     // x has type int, not &int\n+    ///     println!(\"{}\", x);\n+    /// }\n+    /// ```\n+    #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+    pub fn into_iter(self) -> MoveItems<T> {\n+        MoveItems { iter: self.data.into_iter() }\n+    }\n+\n     /// Returns the greatest item in a queue, or `None` if it is empty.\n     ///\n     /// # Example\n@@ -548,6 +567,26 @@ impl<'a, T> Iterator<&'a T> for Items<'a, T> {\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n+/// An iterator that moves out of a `BinaryHeap`.\n+pub struct MoveItems<T> {\n+    iter: vec::MoveItems<T>,\n+}\n+\n+impl<T> Iterator<T> for MoveItems<T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<T> { self.iter.next() }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n+}\n+\n+impl<T> DoubleEndedIterator<T> for MoveItems<T> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<T> { self.iter.next_back() }\n+}\n+\n+impl<T> ExactSize<T> for MoveItems<T> {}\n+\n impl<T: Ord> FromIterator<T> for BinaryHeap<T> {\n     fn from_iter<Iter: Iterator<T>>(mut iter: Iter) -> BinaryHeap<T> {\n         let vec: Vec<T> = iter.collect();\n@@ -586,6 +625,43 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_move_iter() {\n+        let data = vec!(5i, 9, 3);\n+        let iterout = vec!(9i, 5, 3);\n+        let pq = BinaryHeap::from_vec(data);\n+\n+        let v: Vec<int> = pq.into_iter().collect();\n+        assert_eq!(v, iterout);\n+    }\n+\n+    #[test]\n+    fn test_move_iter_size_hint() {\n+        let data = vec!(5i, 9);\n+        let pq = BinaryHeap::from_vec(data);\n+\n+        let mut it = pq.into_iter();\n+\n+        assert_eq!(it.size_hint(), (2, Some(2)));\n+        assert_eq!(it.next(), Some(9i));\n+\n+        assert_eq!(it.size_hint(), (1, Some(1)));\n+        assert_eq!(it.next(), Some(5i));\n+\n+        assert_eq!(it.size_hint(), (0, Some(0)));\n+        assert_eq!(it.next(), None);\n+    }\n+\n+    #[test]\n+    fn test_move_iter_reverse() {\n+        let data = vec!(5i, 9, 3);\n+        let iterout = vec!(3i, 5, 9);\n+        let pq = BinaryHeap::from_vec(data);\n+\n+        let v: Vec<int> = pq.into_iter().rev().collect();\n+        assert_eq!(v, iterout);\n+    }\n+\n     #[test]\n     fn test_top_and_pop() {\n         let data = vec!(2u, 4, 6, 2, 1, 8, 10, 3, 5, 7, 0, 9, 1);"}]}