{"sha": "a42e21d66e78ff821602beb521bc942d1c722f6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MmUyMWQ2NmU3OGZmODIxNjAyYmViNTIxYmM5NDJkMWM3MjJmNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-26T15:17:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-26T15:17:24Z"}, "message": "Auto merge of #27297 - mitaa:cleanup_E0005, r=alexcrichton\n\nThis does two things:\r\n* removes ast::LocalSource, where only one variant was used because for-loop expansion has changed. One reason that this slipped into here is because the code in `check_local` which checks for `LocalSource::LocalFor` would report the same error as in `check_exhaustive` while using the wrong error code (E0005 instead of E0297).\r\n* silences the warning about already used diagnostic code E0005 (fixes #27279)\r\n\r\npasses `make check` locally.", "tree": {"sha": "9469351ffc85cea844564d6a79d78ee8fef57e6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9469351ffc85cea844564d6a79d78ee8fef57e6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a42e21d66e78ff821602beb521bc942d1c722f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a42e21d66e78ff821602beb521bc942d1c722f6c", "html_url": "https://github.com/rust-lang/rust/commit/a42e21d66e78ff821602beb521bc942d1c722f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a42e21d66e78ff821602beb521bc942d1c722f6c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c12f4e39d32af3c951b66bd2839bc0b5a1125b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c12f4e39d32af3c951b66bd2839bc0b5a1125b", "html_url": "https://github.com/rust-lang/rust/commit/a5c12f4e39d32af3c951b66bd2839bc0b5a1125b"}, {"sha": "19512be11376a17f6c73fb28facad1f0d9f9cefb", "url": "https://api.github.com/repos/rust-lang/rust/commits/19512be11376a17f6c73fb28facad1f0d9f9cefb", "html_url": "https://github.com/rust-lang/rust/commit/19512be11376a17f6c73fb28facad1f0d9f9cefb"}], "stats": {"total": 58, "additions": 22, "deletions": 36}, "files": [{"sha": "7c02045d0838855f7f101544c334226787f77d6f", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a42e21d66e78ff821602beb521bc942d1c722f6c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42e21d66e78ff821602beb521bc942d1c722f6c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=a42e21d66e78ff821602beb521bc942d1c722f6c", "patch": "@@ -1016,18 +1016,8 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n fn check_local(cx: &mut MatchCheckCtxt, loc: &ast::Local) {\n     visit::walk_local(cx, loc);\n \n-    let name = match loc.source {\n-        ast::LocalLet => \"local\",\n-        ast::LocalFor => \"`for` loop\"\n-    };\n-\n-    let mut static_inliner = StaticInliner::new(cx.tcx, None);\n-    is_refutable(cx, &*static_inliner.fold_pat(loc.pat.clone()), |pat| {\n-        span_err!(cx.tcx.sess, loc.pat.span, E0005,\n-            \"refutable pattern in {} binding: `{}` not covered\",\n-            name, pat_to_string(pat)\n-        );\n-    });\n+    let pat = StaticInliner::new(cx.tcx, None).fold_pat(loc.pat.clone());\n+    check_irrefutable(cx, &pat, false);\n \n     // Check legality of move bindings and `@` patterns.\n     check_legality_of_move_bindings(cx, false, slice::ref_slice(&loc.pat));\n@@ -1048,17 +1038,28 @@ fn check_fn(cx: &mut MatchCheckCtxt,\n     visit::walk_fn(cx, kind, decl, body, sp);\n \n     for input in &decl.inputs {\n-        is_refutable(cx, &*input.pat, |pat| {\n-            span_err!(cx.tcx.sess, input.pat.span, E0005,\n-                \"refutable pattern in function argument: `{}` not covered\",\n-                pat_to_string(pat)\n-            );\n-        });\n+        check_irrefutable(cx, &input.pat, true);\n         check_legality_of_move_bindings(cx, false, slice::ref_slice(&input.pat));\n         check_legality_of_bindings_in_at_patterns(cx, &*input.pat);\n     }\n }\n \n+fn check_irrefutable(cx: &MatchCheckCtxt, pat: &Pat, is_fn_arg: bool) {\n+    let origin = if is_fn_arg {\n+        \"function argument\"\n+    } else {\n+        \"local binding\"\n+    };\n+\n+    is_refutable(cx, pat, |uncovered_pat| {\n+        span_err!(cx.tcx.sess, pat.span, E0005,\n+            \"refutable pattern in {}: `{}` not covered\",\n+            origin,\n+            pat_to_string(uncovered_pat),\n+        );\n+    });\n+}\n+\n fn is_refutable<A, F>(cx: &MatchCheckCtxt, pat: &Pat, refutable: F) -> Option<A> where\n     F: FnOnce(&Pat) -> A,\n {"}, {"sha": "72711f2ed18717d6704ebe677f216df994b8365c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a42e21d66e78ff821602beb521bc942d1c722f6c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42e21d66e78ff821602beb521bc942d1c722f6c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a42e21d66e78ff821602beb521bc942d1c722f6c", "patch": "@@ -29,7 +29,6 @@ pub use self::Item_::*;\n pub use self::KleeneOp::*;\n pub use self::Lit_::*;\n pub use self::LitIntType::*;\n-pub use self::LocalSource::*;\n pub use self::Mac_::*;\n pub use self::MacStmtStyle::*;\n pub use self::MetaItem_::*;\n@@ -756,14 +755,6 @@ pub enum MacStmtStyle {\n     MacStmtWithoutBraces,\n }\n \n-/// Where a local declaration came from: either a true `let ... =\n-/// ...;`, or one desugared from the pattern of a for loop.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum LocalSource {\n-    LocalLet,\n-    LocalFor,\n-}\n-\n // FIXME (pending discussion of #1697, #2178...): local should really be\n // a refinement on pat.\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n@@ -775,7 +766,6 @@ pub struct Local {\n     pub init: Option<P<Expr>>,\n     pub id: NodeId,\n     pub span: Span,\n-    pub source: LocalSource,\n }\n \n pub type Decl = Spanned<Decl_>;"}, {"sha": "79210cb3260a0c030c738f30139d5cff026147d1", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a42e21d66e78ff821602beb521bc942d1c722f6c/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42e21d66e78ff821602beb521bc942d1c722f6c/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=a42e21d66e78ff821602beb521bc942d1c722f6c", "patch": "@@ -538,7 +538,6 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             init: Some(ex),\n             id: ast::DUMMY_NODE_ID,\n             span: sp,\n-            source: ast::LocalLet,\n         });\n         let decl = respan(sp, ast::DeclLocal(local));\n         P(respan(sp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))\n@@ -562,7 +561,6 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             init: Some(ex),\n             id: ast::DUMMY_NODE_ID,\n             span: sp,\n-            source: ast::LocalLet,\n         });\n         let decl = respan(sp, ast::DeclLocal(local));\n         P(respan(sp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))"}, {"sha": "286dc91299f5ab7812233afedc3095f4ca20175e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a42e21d66e78ff821602beb521bc942d1c722f6c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42e21d66e78ff821602beb521bc942d1c722f6c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a42e21d66e78ff821602beb521bc942d1c722f6c", "patch": "@@ -911,7 +911,7 @@ fn expand_non_macro_stmt(Spanned {node, span: stmt_span}: Stmt, fld: &mut MacroE\n         StmtDecl(decl, node_id) => decl.and_then(|Spanned {node: decl, span}| match decl {\n             DeclLocal(local) => {\n                 // take it apart:\n-                let rewritten_local = local.map(|Local {id, pat, ty, init, source, span}| {\n+                let rewritten_local = local.map(|Local {id, pat, ty, init, span}| {\n                     // expand the ty since TyFixedLengthVec contains an Expr\n                     // and thus may have a macro use\n                     let expanded_ty = ty.map(|t| fld.fold_ty(t));\n@@ -941,7 +941,6 @@ fn expand_non_macro_stmt(Spanned {node, span: stmt_span}: Stmt, fld: &mut MacroE\n                         pat: rewritten_pat,\n                         // also, don't forget to expand the init:\n                         init: init.map(|e| fld.fold_expr(e)),\n-                        source: source,\n                         span: span\n                     }\n                 });"}, {"sha": "dab6d41df300375d5e9d6536066f6c13007c52f6", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a42e21d66e78ff821602beb521bc942d1c722f6c/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42e21d66e78ff821602beb521bc942d1c722f6c/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=a42e21d66e78ff821602beb521bc942d1c722f6c", "patch": "@@ -515,12 +515,11 @@ pub fn noop_fold_parenthesized_parameter_data<T: Folder>(data: ParenthesizedPara\n }\n \n pub fn noop_fold_local<T: Folder>(l: P<Local>, fld: &mut T) -> P<Local> {\n-    l.map(|Local {id, pat, ty, init, source, span}| Local {\n+    l.map(|Local {id, pat, ty, init, span}| Local {\n         id: fld.new_id(id),\n         ty: ty.map(|t| fld.fold_ty(t)),\n         pat: fld.fold_pat(pat),\n         init: init.map(|e| fld.fold_expr(e)),\n-        source: source,\n         span: fld.new_span(span)\n     })\n }"}, {"sha": "04665140e2fdbeb02e9449338fb23c96bc6c53b5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a42e21d66e78ff821602beb521bc942d1c722f6c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42e21d66e78ff821602beb521bc942d1c722f6c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a42e21d66e78ff821602beb521bc942d1c722f6c", "patch": "@@ -35,7 +35,7 @@ use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy, ItemDefaultImpl};\n use ast::{ItemExternCrate, ItemUse};\n use ast::{LifetimeDef, Lit, Lit_};\n use ast::{LitBool, LitChar, LitByte, LitBinary};\n-use ast::{LitStr, LitInt, Local, LocalLet};\n+use ast::{LitStr, LitInt, Local};\n use ast::{MacStmtWithBraces, MacStmtWithSemicolon, MacStmtWithoutBraces};\n use ast::{MutImmutable, MutMutable, Mac_, MacInvocTT, MatchSource};\n use ast::{MutTy, BiMul, Mutability};\n@@ -3432,7 +3432,6 @@ impl<'a> Parser<'a> {\n             init: init,\n             id: ast::DUMMY_NODE_ID,\n             span: mk_sp(lo, self.last_span.hi),\n-            source: LocalLet,\n         }))\n     }\n "}]}