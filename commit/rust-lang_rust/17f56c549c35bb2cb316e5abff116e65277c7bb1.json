{"sha": "17f56c549c35bb2cb316e5abff116e65277c7bb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZjU2YzU0OWMzNWJiMmNiMzE2ZTVhYmZmMTE2ZTY1Mjc3YzdiYjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-21T20:12:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-21T20:12:22Z"}, "message": "Auto merge of #44215 - oli-obk:import_sugg, r=nrc\n\ndon't suggest placing `use` statements into expanded code\n\nr? @nrc\n\nfixes #44210\n\n```rust\n#[derive(Debug)]\nstruct Foo;\n\ntype X = Path;\n```\n\nwill try to place `use std::path::Path;` between `#[derive(Debug)]` and `struct Foo;`\n\nI am not sure how to obtain a span before the first attribute, because derive attributes are removed during expansion.\n\nIt would be trivial to detect this case and place the `use` after the item, but that would be somewhat weird I think.", "tree": {"sha": "4cbb280a21fbe176a91666ff86a1f9c4c4b2cd02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cbb280a21fbe176a91666ff86a1f9c4c4b2cd02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17f56c549c35bb2cb316e5abff116e65277c7bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17f56c549c35bb2cb316e5abff116e65277c7bb1", "html_url": "https://github.com/rust-lang/rust/commit/17f56c549c35bb2cb316e5abff116e65277c7bb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17f56c549c35bb2cb316e5abff116e65277c7bb1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b55d19479eabcb5d6cbda651187c7004aa28f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b55d19479eabcb5d6cbda651187c7004aa28f7f", "html_url": "https://github.com/rust-lang/rust/commit/1b55d19479eabcb5d6cbda651187c7004aa28f7f"}, {"sha": "f0e7a5b8e51ea7e2e6b66293d96696d68491b6ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e7a5b8e51ea7e2e6b66293d96696d68491b6ad", "html_url": "https://github.com/rust-lang/rust/commit/f0e7a5b8e51ea7e2e6b66293d96696d68491b6ad"}], "stats": {"total": 100, "additions": 70, "deletions": 30}, "files": [{"sha": "36cd69f91b9c34c6fd981cb74efa71d40aa702a3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/17f56c549c35bb2cb316e5abff116e65277c7bb1/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17f56c549c35bb2cb316e5abff116e65277c7bb1/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=17f56c549c35bb2cb316e5abff116e65277c7bb1", "patch": "@@ -605,7 +605,7 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n                 ItemKind::Use(..) => {\n                     // don't suggest placing a use before the prelude\n                     // import or other generated ones\n-                    if item.span == DUMMY_SP {\n+                    if item.span.ctxt().outer().expn_info().is_none() {\n                         self.span = Some(item.span.with_hi(item.span.lo()));\n                         self.found_use = true;\n                         return;\n@@ -615,11 +615,22 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n                 ItemKind::ExternCrate(_) => {}\n                 // but place them before the first other item\n                 _ => if self.span.map_or(true, |span| item.span < span ) {\n-                    self.span = Some(item.span.with_hi(item.span.lo()));\n+                    if item.span.ctxt().outer().expn_info().is_none() {\n+                        // don't insert between attributes and an item\n+                        if item.attrs.is_empty() {\n+                            self.span = Some(item.span.with_hi(item.span.lo()));\n+                        } else {\n+                            // find the first attribute on the item\n+                            for attr in &item.attrs {\n+                                if self.span.map_or(true, |span| attr.span < span) {\n+                                    self.span = Some(attr.span.with_hi(attr.span.lo()));\n+                                }\n+                            }\n+                        }\n+                    }\n                 },\n             }\n         }\n-        assert!(self.span.is_some(), \"a file can't have no items and emit suggestions\");\n     }\n }\n \n@@ -3553,8 +3564,7 @@ impl<'a> Resolver<'a> {\n             };\n             visit::walk_crate(&mut finder, krate);\n             if !candidates.is_empty() {\n-                let span = finder.span.expect(\"did not find module\");\n-                show_candidates(&mut err, span, &candidates, better, finder.found_use);\n+                show_candidates(&mut err, finder.span, &candidates, better, finder.found_use);\n             }\n             err.emit();\n         }\n@@ -3748,7 +3758,8 @@ fn import_candidate_to_paths(suggestion: &ImportSuggestion) -> (Span, String, St\n /// entities with that name in all crates. This method allows outputting the\n /// results of this search in a programmer-friendly way\n fn show_candidates(err: &mut DiagnosticBuilder,\n-                   span: Span,\n+                   // This is `None` if all placement locations are inside expansions\n+                   span: Option<Span>,\n                    candidates: &[ImportSuggestion],\n                    better: bool,\n                    found_use: bool) {\n@@ -3766,18 +3777,27 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n     };\n     let msg = format!(\"possible {}candidate{} into scope\", better, msg_diff);\n \n-    for candidate in &mut path_strings {\n-        // produce an additional newline to separate the new use statement\n-        // from the directly following item.\n-        let additional_newline = if found_use {\n-            \"\"\n-        } else {\n-            \"\\n\"\n-        };\n-        *candidate = format!(\"use {};\\n{}\", candidate, additional_newline);\n-    }\n+    if let Some(span) = span {\n+        for candidate in &mut path_strings {\n+            // produce an additional newline to separate the new use statement\n+            // from the directly following item.\n+            let additional_newline = if found_use {\n+                \"\"\n+            } else {\n+                \"\\n\"\n+            };\n+            *candidate = format!(\"use {};\\n{}\", candidate, additional_newline);\n+        }\n \n-    err.span_suggestions(span, &msg, path_strings);\n+        err.span_suggestions(span, &msg, path_strings);\n+    } else {\n+        let mut msg = msg;\n+        msg.push(':');\n+        for candidate in path_strings {\n+            msg.push('\\n');\n+            msg.push_str(&candidate);\n+        }\n+    }\n }\n \n /// A somewhat inefficient routine to obtain the name of a module."}, {"sha": "f7e5c602644cfa0a8bb5c431309fba9d2b55ffe7", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17f56c549c35bb2cb316e5abff116e65277c7bb1/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17f56c549c35bb2cb316e5abff116e65277c7bb1/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=17f56c549c35bb2cb316e5abff116e65277c7bb1", "patch": "@@ -10,7 +10,7 @@ error[E0423]: expected value, found struct `Z`\n    |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-16 |     use m::n::Z;\n+22 |     use m::n::Z;\n    |\n \n error[E0423]: expected value, found struct `S`\n@@ -24,7 +24,7 @@ error[E0423]: expected value, found struct `S`\n    |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-15 | use m::S;\n+32 | use m::S;\n    |\n \n error[E0423]: expected value, found struct `xcrate::S`\n@@ -38,7 +38,7 @@ error[E0423]: expected value, found struct `xcrate::S`\n    |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-15 | use m::S;\n+32 | use m::S;\n    |\n \n error[E0603]: tuple struct `Z` is private"}, {"sha": "a43b8fc99df5f5e130edb5feeae8783d185c7afb", "filename": "src/test/ui/resolve/use_suggestion_placement.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17f56c549c35bb2cb316e5abff116e65277c7bb1/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17f56c549c35bb2cb316e5abff116e65277c7bb1/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs?ref=17f56c549c35bb2cb316e5abff116e65277c7bb1", "patch": "@@ -16,6 +16,15 @@ mod m {\n     pub const A: i32 = 0;\n }\n \n+mod foo {\n+    #[derive(Debug)]\n+    pub struct Foo;\n+\n+    // test whether the use suggestion isn't\n+    // placed into the expansion of `#[derive(Debug)]\n+    type Bar = Path;\n+}\n+\n fn main() {\n     y!();\n     let _ = A;"}, {"sha": "8a4dfdc80276af7537806d0a483c933ff3768ff1", "filename": "src/test/ui/resolve/use_suggestion_placement.stderr", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/17f56c549c35bb2cb316e5abff116e65277c7bb1/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17f56c549c35bb2cb316e5abff116e65277c7bb1/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr?ref=17f56c549c35bb2cb316e5abff116e65277c7bb1", "patch": "@@ -1,7 +1,18 @@\n+error[E0412]: cannot find type `Path` in this scope\n+  --> $DIR/use_suggestion_placement.rs:25:16\n+   |\n+25 |     type Bar = Path;\n+   |                ^^^^ not found in this scope\n+   |\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+21 |     use std::path::Path;\n+   |\n+\n error[E0425]: cannot find value `A` in this scope\n-  --> $DIR/use_suggestion_placement.rs:21:13\n+  --> $DIR/use_suggestion_placement.rs:30:13\n    |\n-21 |     let _ = A;\n+30 |     let _ = A;\n    |             ^ not found in this scope\n    |\n help: possible candidate is found in another module, you can import it into scope\n@@ -10,9 +21,9 @@ help: possible candidate is found in another module, you can import it into scop\n    |\n \n error[E0412]: cannot find type `HashMap` in this scope\n-  --> $DIR/use_suggestion_placement.rs:26:23\n+  --> $DIR/use_suggestion_placement.rs:35:23\n    |\n-26 |     type Dict<K, V> = HashMap<K, V>;\n+35 |     type Dict<K, V> = HashMap<K, V>;\n    |                       ^^^^^^^ not found in this scope\n    |\n help: possible candidates are found in other modules, you can import them into scope\n@@ -23,16 +34,16 @@ help: possible candidates are found in other modules, you can import them into s\n    |\n \n error[E0091]: type parameter `K` is unused\n-  --> $DIR/use_suggestion_placement.rs:26:15\n+  --> $DIR/use_suggestion_placement.rs:35:15\n    |\n-26 |     type Dict<K, V> = HashMap<K, V>;\n+35 |     type Dict<K, V> = HashMap<K, V>;\n    |               ^ unused type parameter\n \n error[E0091]: type parameter `V` is unused\n-  --> $DIR/use_suggestion_placement.rs:26:18\n+  --> $DIR/use_suggestion_placement.rs:35:18\n    |\n-26 |     type Dict<K, V> = HashMap<K, V>;\n+35 |     type Dict<K, V> = HashMap<K, V>;\n    |                  ^ unused type parameter\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "b57b58e3d2a6da52efbb5841837075457ed5602f", "filename": "src/test/ui/span/issue-35987.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17f56c549c35bb2cb316e5abff116e65277c7bb1/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17f56c549c35bb2cb316e5abff116e65277c7bb1/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr?ref=17f56c549c35bb2cb316e5abff116e65277c7bb1", "patch": "@@ -6,7 +6,7 @@ error[E0404]: expected trait, found type parameter `Add`\n    |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-11 | use std::ops::Add;\n+13 | use std::ops::Add;\n    |\n \n error[E0601]: main function not found"}]}