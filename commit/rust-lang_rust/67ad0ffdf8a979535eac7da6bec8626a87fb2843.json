{"sha": "67ad0ffdf8a979535eac7da6bec8626a87fb2843", "node_id": "C_kwDOAAsO6NoAKDY3YWQwZmZkZjhhOTc5NTM1ZWFjN2RhNmJlYzg2MjZhODdmYjI4NDM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-08T06:21:23Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-11T20:45:51Z"}, "message": "use body.tainted_by_error to skip loading MIR", "tree": {"sha": "36c01a6c8b6a5d9cf8c44e5474e87c9964c766e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36c01a6c8b6a5d9cf8c44e5474e87c9964c766e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67ad0ffdf8a979535eac7da6bec8626a87fb2843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67ad0ffdf8a979535eac7da6bec8626a87fb2843", "html_url": "https://github.com/rust-lang/rust/commit/67ad0ffdf8a979535eac7da6bec8626a87fb2843", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67ad0ffdf8a979535eac7da6bec8626a87fb2843/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a431174c237755d6d46b7f50c147af755212b8ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/a431174c237755d6d46b7f50c147af755212b8ab", "html_url": "https://github.com/rust-lang/rust/commit/a431174c237755d6d46b7f50c147af755212b8ab"}], "stats": {"total": 79, "additions": 21, "deletions": 58}, "files": [{"sha": "bfb9c40be57df0e6d09c34b2caee8b8d63bfdad7", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/67ad0ffdf8a979535eac7da6bec8626a87fb2843/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ad0ffdf8a979535eac7da6bec8626a87fb2843/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=67ad0ffdf8a979535eac7da6bec8626a87fb2843", "patch": "@@ -6,7 +6,6 @@ use crate::interpret::{\n     ScalarMaybeUninit, StackPopCleanup,\n };\n \n-use rustc_errors::ErrorReported;\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -281,28 +280,6 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n \n     let cid = key.value;\n     let def = cid.instance.def.with_opt_param();\n-\n-    if let Some(def) = def.as_local() {\n-        if tcx.has_typeck_results(def.did) {\n-            if let Some(error_reported) = tcx.typeck_opt_const_arg(def).tainted_by_errors {\n-                return Err(ErrorHandled::Reported(error_reported));\n-            }\n-            if let Some(error_reported) = tcx.mir_borrowck_opt_const_arg(def).tainted_by_errors {\n-                return Err(ErrorHandled::Reported(error_reported));\n-            }\n-        }\n-        if !tcx.is_mir_available(def.did) {\n-            tcx.sess.delay_span_bug(\n-                tcx.def_span(def.did),\n-                &format!(\"no MIR body is available for {:?}\", def.did),\n-            );\n-            return Err(ErrorHandled::Reported(ErrorReported {}));\n-        }\n-        if let Some(error_reported) = tcx.mir_const_qualif_opt_const_arg(def).error_occured {\n-            return Err(ErrorHandled::Reported(error_reported));\n-        }\n-    }\n-\n     let is_static = tcx.is_static(def.did);\n \n     let mut ecx = InterpCx::new("}, {"sha": "e157b584052128790b90db8300725e56b7fcf7ad", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67ad0ffdf8a979535eac7da6bec8626a87fb2843/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ad0ffdf8a979535eac7da6bec8626a87fb2843/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=67ad0ffdf8a979535eac7da6bec8626a87fb2843", "patch": "@@ -1,3 +1,5 @@\n+use rustc_errors::ErrorReported;\n+use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty};\n use std::borrow::Borrow;\n@@ -243,6 +245,12 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             ty::InstanceDef::Item(def) => {\n                 if ecx.tcx.is_ctfe_mir_available(def.did) {\n                     Ok(ecx.tcx.mir_for_ctfe_opt_const_arg(def))\n+                } else if ecx.tcx.def_kind(def.did) == DefKind::AssocConst {\n+                    ecx.tcx.sess.delay_span_bug(\n+                        rustc_span::DUMMY_SP,\n+                        \"This is likely a const item that is missing from its impl\",\n+                    );\n+                    throw_inval!(AlreadyReported(ErrorReported {}));\n                 } else {\n                     let path = ecx.tcx.def_path_str(def.did);\n                     Err(ConstEvalErrKind::NeedsRfc(format!(\"calling extern function `{}`\", path))"}, {"sha": "1b86bcfa8c9ad6ed9cef72d69ff896226e79043e", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/67ad0ffdf8a979535eac7da6bec8626a87fb2843/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ad0ffdf8a979535eac7da6bec8626a87fb2843/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=67ad0ffdf8a979535eac7da6bec8626a87fb2843", "patch": "@@ -509,26 +509,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         instance: ty::InstanceDef<'tcx>,\n         promoted: Option<mir::Promoted>,\n     ) -> InterpResult<'tcx, &'tcx mir::Body<'tcx>> {\n-        // do not continue if typeck errors occurred (can only occur in local crate)\n         let def = instance.with_opt_param();\n-        if let Some(def) = def.as_local() {\n-            if self.tcx.has_typeck_results(def.did) {\n-                if let Some(error_reported) = self.tcx.typeck_opt_const_arg(def).tainted_by_errors {\n-                    throw_inval!(AlreadyReported(error_reported));\n-                }\n-                if let Some(error_reported) =\n-                    self.tcx.mir_borrowck_opt_const_arg(def).tainted_by_errors\n-                {\n-                    throw_inval!(AlreadyReported(error_reported));\n-                }\n-            }\n-        }\n-\n         trace!(\"load mir(instance={:?}, promoted={:?})\", instance, promoted);\n-        if let Some(promoted) = promoted {\n-            return Ok(&self.tcx.promoted_mir_opt_const_arg(def)[promoted]);\n+        let body = if let Some(promoted) = promoted {\n+            &self.tcx.promoted_mir_opt_const_arg(def)[promoted]\n+        } else {\n+            M::load_mir(self, instance)?\n+        };\n+        // do not continue if typeck errors occurred (can only occur in local crate)\n+        if let Some(err) = body.tainted_by_errors {\n+            throw_inval!(AlreadyReported(err));\n         }\n-        M::load_mir(self, instance)\n+        Ok(body)\n     }\n \n     /// Call this on things you got out of the MIR (so it is as generic as the current"}, {"sha": "fc2750d230395c16068c023071f1806c0b49afb5", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67ad0ffdf8a979535eac7da6bec8626a87fb2843/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ad0ffdf8a979535eac7da6bec8626a87fb2843/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=67ad0ffdf8a979535eac7da6bec8626a87fb2843", "patch": "@@ -836,14 +836,13 @@ rustc_queries! {\n     /// additional requirements that the closure's creator must verify.\n     query mir_borrowck(key: LocalDefId) -> &'tcx mir::BorrowCheckResult<'tcx> {\n         desc { |tcx| \"borrow-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n-        cache_on_disk_if { true }\n+        cache_on_disk_if(tcx) { tcx.is_typeck_child(key.to_def_id()) }\n     }\n     query mir_borrowck_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::BorrowCheckResult<'tcx> {\n         desc {\n             |tcx| \"borrow-checking the const argument`{}`\",\n             tcx.def_path_str(key.0.to_def_id())\n         }\n-        cache_on_disk_if { true }\n     }\n \n     /// Gets a complete map from all types to their inherent impls."}, {"sha": "065944ea7eaadd222c0a0efb809dd99252771b62", "filename": "src/test/ui/consts/const-fn-error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67ad0ffdf8a979535eac7da6bec8626a87fb2843/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ad0ffdf8a979535eac7da6bec8626a87fb2843/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs?ref=67ad0ffdf8a979535eac7da6bec8626a87fb2843", "patch": "@@ -6,7 +6,6 @@ const fn f(x: usize) -> usize {\n         //~^ ERROR mutable references\n         //~| ERROR calls in constant functions\n         //~| ERROR calls in constant functions\n-        //~| ERROR E0080\n         //~| ERROR `for` is not allowed in a `const fn`\n         sum += i;\n     }"}, {"sha": "e4b62f20a3318cfda146314a6f9e72d803dad77c", "filename": "src/test/ui/consts/const-fn-error.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/67ad0ffdf8a979535eac7da6bec8626a87fb2843/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67ad0ffdf8a979535eac7da6bec8626a87fb2843/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=67ad0ffdf8a979535eac7da6bec8626a87fb2843", "patch": "@@ -5,7 +5,7 @@ LL | /     for i in 0..x {\n LL | |\n LL | |\n LL | |\n-...  |\n+LL | |\n LL | |         sum += i;\n LL | |     }\n    | |_____^\n@@ -34,19 +34,7 @@ error[E0015]: calls in constant functions are limited to constant functions, tup\n LL |     for i in 0..x {\n    |              ^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-fn-error.rs:5:14\n-   |\n-LL |     for i in 0..x {\n-   |              ^^^^\n-   |              |\n-   |              calling non-const function `<std::ops::Range<usize> as IntoIterator>::into_iter`\n-   |              inside `f` at $DIR/const-fn-error.rs:5:14\n-...\n-LL |     let a : [i32; f(X)];\n-   |                   ---- inside `main::{constant#0}` at $DIR/const-fn-error.rs:18:19\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0015, E0080, E0658.\n+Some errors have detailed explanations: E0015, E0658.\n For more information about an error, try `rustc --explain E0015`."}]}