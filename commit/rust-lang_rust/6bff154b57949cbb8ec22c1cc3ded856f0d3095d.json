{"sha": "6bff154b57949cbb8ec22c1cc3ded856f0d3095d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZmYxNTRiNTc5NDljYmI4ZWMyMmMxY2MzZGVkODU2ZjBkMzA5NWQ=", "commit": {"author": {"name": "Daniel Carral", "email": "dan@dcarral.org", "date": "2015-10-15T00:13:20Z"}, "committer": {"name": "Daniel Carral", "email": "dan@dcarral.org", "date": "2015-10-15T00:13:20Z"}, "message": "Replace 'adapters' to 'adaptors' in TRPL book\n\nRegarding #29063: Replace 'iterator adapters' appearances to\n'iterator adaptors', thus embracing the terminology used along the\nAPI docs and achieving consistency between both sources.", "tree": {"sha": "bb41124705ee57edfc8dc1406a470f6c507db783", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb41124705ee57edfc8dc1406a470f6c507db783"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bff154b57949cbb8ec22c1cc3ded856f0d3095d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bff154b57949cbb8ec22c1cc3ded856f0d3095d", "html_url": "https://github.com/rust-lang/rust/commit/6bff154b57949cbb8ec22c1cc3ded856f0d3095d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bff154b57949cbb8ec22c1cc3ded856f0d3095d/comments", "author": {"login": "dcarral", "id": 1498567, "node_id": "MDQ6VXNlcjE0OTg1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1498567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcarral", "html_url": "https://github.com/dcarral", "followers_url": "https://api.github.com/users/dcarral/followers", "following_url": "https://api.github.com/users/dcarral/following{/other_user}", "gists_url": "https://api.github.com/users/dcarral/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcarral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcarral/subscriptions", "organizations_url": "https://api.github.com/users/dcarral/orgs", "repos_url": "https://api.github.com/users/dcarral/repos", "events_url": "https://api.github.com/users/dcarral/events{/privacy}", "received_events_url": "https://api.github.com/users/dcarral/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dcarral", "id": 1498567, "node_id": "MDQ6VXNlcjE0OTg1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1498567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcarral", "html_url": "https://github.com/dcarral", "followers_url": "https://api.github.com/users/dcarral/followers", "following_url": "https://api.github.com/users/dcarral/following{/other_user}", "gists_url": "https://api.github.com/users/dcarral/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcarral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcarral/subscriptions", "organizations_url": "https://api.github.com/users/dcarral/orgs", "repos_url": "https://api.github.com/users/dcarral/repos", "events_url": "https://api.github.com/users/dcarral/events{/privacy}", "received_events_url": "https://api.github.com/users/dcarral/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56a14192e9793a06b33fa11210765d2118a228d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/56a14192e9793a06b33fa11210765d2118a228d9", "html_url": "https://github.com/rust-lang/rust/commit/56a14192e9793a06b33fa11210765d2118a228d9"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "c444f9f2fe53d420e5cbae1bbb63007e2c51d965", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6bff154b57949cbb8ec22c1cc3ded856f0d3095d/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/6bff154b57949cbb8ec22c1cc3ded856f0d3095d/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=6bff154b57949cbb8ec22c1cc3ded856f0d3095d", "patch": "@@ -101,10 +101,10 @@ So, now that we've established that ranges are often not what you want, let's\n talk about what you do want instead.\n \n There are three broad classes of things that are relevant here: iterators,\n-*iterator adapters*, and *consumers*. Here's some definitions:\n+*iterator adaptors*, and *consumers*. Here's some definitions:\n \n * *iterators* give you a sequence of values.\n-* *iterator adapters* operate on an iterator, producing a new iterator with a\n+* *iterator adaptors* operate on an iterator, producing a new iterator with a\n   different output sequence.\n * *consumers* operate on an iterator, producing some final set of values.\n \n@@ -246,12 +246,12 @@ for num in nums.iter() {\n These two basic iterators should serve you well. There are some more\n advanced iterators, including ones that are infinite.\n \n-That's enough about iterators. Iterator adapters are the last concept\n+That's enough about iterators. Iterator adaptors are the last concept\n we need to talk about with regards to iterators. Let's get to it!\n \n-## Iterator adapters\n+## Iterator adaptors\n \n-*Iterator adapters* take an iterator and modify it somehow, producing\n+*Iterator adaptors* take an iterator and modify it somehow, producing\n a new iterator. The simplest one is called `map`:\n \n ```rust,ignore\n@@ -280,7 +280,7 @@ doesn't print any numbers:\n If you are trying to execute a closure on an iterator for its side effects,\n just use `for` instead.\n \n-There are tons of interesting iterator adapters. `take(n)` will return an\n+There are tons of interesting iterator adaptors. `take(n)` will return an\n iterator over the next `n` elements of the original iterator. Let's try it out\n with an infinite iterator:\n \n@@ -329,7 +329,7 @@ a few times, and then consume the result. Check it out:\n \n This will give you a vector containing `6`, `12`, `18`, `24`, and `30`.\n \n-This is just a small taste of what iterators, iterator adapters, and consumers\n+This is just a small taste of what iterators, iterator adaptors, and consumers\n can help you with. There are a number of really useful iterators, and you can\n write your own as well. Iterators provide a safe, efficient way to manipulate\n all kinds of lists. They're a little unusual at first, but if you play with"}]}