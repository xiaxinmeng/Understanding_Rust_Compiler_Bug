{"sha": "00741a2c27f377ad71bbd47a25c63e06b3dffc00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNzQxYTJjMjdmMzc3YWQ3MWJiZDQ3YTI1YzYzZTA2YjNkZmZjMDA=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-11-09T00:54:33Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-11-09T08:30:04Z"}, "message": "First stage of struct variant field visibility changes\n\nWe need a snapshot before the parser can be adjusted.", "tree": {"sha": "ca16ed4d7a141279dff6dc81ff53f29d8c4ccc8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca16ed4d7a141279dff6dc81ff53f29d8c4ccc8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00741a2c27f377ad71bbd47a25c63e06b3dffc00", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00741a2c27f377ad71bbd47a25c63e06b3dffc00", "html_url": "https://github.com/rust-lang/rust/commit/00741a2c27f377ad71bbd47a25c63e06b3dffc00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00741a2c27f377ad71bbd47a25c63e06b3dffc00/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b80edf1d1257bf521fd9e62b732b6302258374e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b80edf1d1257bf521fd9e62b732b6302258374e7", "html_url": "https://github.com/rust-lang/rust/commit/b80edf1d1257bf521fd9e62b732b6302258374e7"}], "stats": {"total": 163, "additions": 94, "deletions": 69}, "files": [{"sha": "8186ebccdad41400b35ba155ea72cc26b46290cb", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=00741a2c27f377ad71bbd47a25c63e06b3dffc00", "patch": "@@ -51,7 +51,8 @@ struct MarkSymbolVisitor<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n     live_symbols: Box<HashSet<ast::NodeId>>,\n     struct_has_extern_repr: bool,\n-    ignore_non_const_paths: bool\n+    ignore_non_const_paths: bool,\n+    inherited_pub_visibility: bool,\n }\n \n impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n@@ -62,7 +63,8 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             tcx: tcx,\n             live_symbols: box HashSet::new(),\n             struct_has_extern_repr: false,\n-            ignore_non_const_paths: false\n+            ignore_non_const_paths: false,\n+            inherited_pub_visibility: false,\n         }\n     }\n \n@@ -206,6 +208,8 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     fn visit_node(&mut self, node: &ast_map::Node) {\n         let had_extern_repr = self.struct_has_extern_repr;\n         self.struct_has_extern_repr = false;\n+        let had_inherited_pub_visibility = self.inherited_pub_visibility;\n+        self.inherited_pub_visibility = false;\n         match *node {\n             ast_map::NodeItem(item) => {\n                 match item.node {\n@@ -217,8 +221,11 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n \n                         visit::walk_item(self, &*item);\n                     }\n+                    ast::ItemEnum(..) => {\n+                        self.inherited_pub_visibility = item.vis == ast::Public;\n+                        visit::walk_item(self, &*item);\n+                    }\n                     ast::ItemFn(..)\n-                    | ast::ItemEnum(..)\n                     | ast::ItemTy(..)\n                     | ast::ItemStatic(..)\n                     | ast::ItemConst(..) => {\n@@ -244,6 +251,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             _ => ()\n         }\n         self.struct_has_extern_repr = had_extern_repr;\n+        self.inherited_pub_visibility = had_inherited_pub_visibility;\n     }\n }\n \n@@ -252,8 +260,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n     fn visit_struct_def(&mut self, def: &ast::StructDef, _: ast::Ident,\n                         _: &ast::Generics, _: ast::NodeId) {\n         let has_extern_repr = self.struct_has_extern_repr;\n+        let inherited_pub_visibility = self.inherited_pub_visibility;\n         let live_fields = def.fields.iter().filter(|f| {\n-            has_extern_repr || match f.node.kind {\n+            has_extern_repr || inherited_pub_visibility || match f.node.kind {\n                 ast::NamedField(_, ast::Public) => true,\n                 _ => false\n             }"}, {"sha": "7f16de26b9e748f75b3815452f98f69e37c3d5b9", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=00741a2c27f377ad71bbd47a25c63e06b3dffc00", "patch": "@@ -668,10 +668,8 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n         let struct_desc = match ty::get(struct_type).sty {\n             ty::ty_struct(_, _) =>\n                 format!(\"struct `{}`\", ty::item_path_str(self.tcx, id)),\n-            ty::ty_enum(enum_id, _) =>\n-                format!(\"variant `{}` of enum `{}`\",\n-                        ty::with_path(self.tcx, id, |mut p| p.last().unwrap()),\n-                        ty::item_path_str(self.tcx, enum_id)),\n+            // struct variant fields have inherited visibility\n+            ty::ty_enum(..) => return,\n             _ => self.tcx.sess.span_bug(span, \"can't find struct for field\")\n         };\n         let msg = match name {\n@@ -1214,11 +1212,6 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n             ast::ItemEnum(ref def, _) => {\n                 for v in def.variants.iter() {\n                     check_inherited(tcx, v.span, v.node.vis);\n-\n-                    match v.node.kind {\n-                        ast::StructVariantKind(ref s) => check_struct(&**s),\n-                        ast::TupleVariantKind(..) => {}\n-                    }\n                 }\n             }\n "}, {"sha": "5a045da4f086efc94f4fddb97083ef6ef3e29da7", "filename": "src/test/auxiliary/issue-8044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-8044.rs?ref=00741a2c27f377ad71bbd47a25c63e06b3dffc00", "patch": "@@ -15,7 +15,7 @@ pub struct BTree<V> {\n }\n \n pub enum TreeItem<V> {\n-    TreeLeaf { pub value: V },\n+    TreeLeaf { value: V },\n }\n \n pub fn leaf<V>(value: V) -> TreeItem<V> {"}, {"sha": "7ebce96dd2ed32e1daf99079a39626b8311d338c", "filename": "src/test/auxiliary/struct_variant_privacy.rs", "status": "renamed", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Ftest%2Fauxiliary%2Fstruct_variant_privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Ftest%2Fauxiliary%2Fstruct_variant_privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_variant_privacy.rs?ref=00741a2c27f377ad71bbd47a25c63e06b3dffc00", "patch": "@@ -7,11 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n #![feature(struct_variant)]\n \n-pub enum Foo {\n-    Bar {\n-        baz: int\n-    }\n+enum Bar {\n+    Baz { a: int }\n }\n+", "previous_filename": "src/test/auxiliary/privacy-struct-variant.rs"}, {"sha": "2cfc94139b628a5fa041c14f3f44c2a2f085e3ae", "filename": "src/test/auxiliary/struct_variant_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs?ref=00741a2c27f377ad71bbd47a25c63e06b3dffc00", "patch": "@@ -15,5 +15,5 @@\n \n pub enum Enum {\n     Variant(u8),\n-    StructVariant { pub arg: u8 }\n+    StructVariant { arg: u8 }\n }"}, {"sha": "ba39d84cf78aa6b9d5c2a1e686677f95371e718c", "filename": "src/test/compile-fail/privacy-struct-variant.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b80edf1d1257bf521fd9e62b732b6302258374e7/src%2Ftest%2Fcompile-fail%2Fprivacy-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80edf1d1257bf521fd9e62b732b6302258374e7/src%2Ftest%2Fcompile-fail%2Fprivacy-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-struct-variant.rs?ref=b80edf1d1257bf521fd9e62b732b6302258374e7", "patch": "@@ -1,48 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:privacy-struct-variant.rs\n-\n-#![feature(struct_variant)]\n-\n-extern crate \"privacy-struct-variant\" as other;\n-\n-mod a {\n-    pub enum Foo {\n-        Bar {\n-            baz: int\n-        }\n-    }\n-\n-    fn test() {\n-        let foo = Bar { baz: 42 };\n-\n-        let Bar { baz: _ } = foo;\n-        match foo { Bar { baz: _ } => {} }\n-    }\n-}\n-\n-fn main() {\n-    let foo = a::Bar { baz: 42 };\n-    //~^ ERROR: field `baz` of variant `Bar` of enum `a::Foo` is private\n-\n-    let a::Bar { baz: _ } = foo;\n-    //~^ ERROR: field `baz` of variant `Bar` of enum `a::Foo` is private\n-    match foo { a::Bar { baz: _ } => {} }\n-    //~^ ERROR: field `baz` of variant `Bar` of enum `a::Foo` is private\n-    //\n-    let foo = other::Bar { baz: 42 };\n-    //~^ ERROR: field `baz` of variant `Bar` of enum `privacy-struct-variant::Foo` is private\n-\n-    let other::Bar { baz: _ } = foo;\n-    //~^ ERROR: field `baz` of variant `Bar` of enum `privacy-struct-variant::Foo` is private\n-    match foo { other::Bar { baz: _ } => {} }\n-    //~^ ERROR: field `baz` of variant `Bar` of enum `privacy-struct-variant::Foo` is private\n-}"}, {"sha": "2d289c7f6cddb3a03a6d3afde657dc9d4328a476", "filename": "src/test/compile-fail/struct-variant-privacy-xc.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy-xc.rs?ref=00741a2c27f377ad71bbd47a25c63e06b3dffc00", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:struct_variant_privacy.rs\n+#![feature(struct_variant)]\n+\n+extern crate struct_variant_privacy;\n+\n+fn f(b: struct_variant_privacy::Bar) { //~ ERROR enum `Bar` is private\n+    match b {\n+        struct_variant_privacy::Bar::Baz { a: _a } => {} //~ ERROR variant `Baz` is private\n+    }\n+}\n+\n+fn main() {}\n+"}, {"sha": "53b8fdf71b72c69331046879ead28dcd8428e0a9", "filename": "src/test/compile-fail/struct-variant-privacy.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy.rs?ref=00741a2c27f377ad71bbd47a25c63e06b3dffc00", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(struct_variant)]\n+\n+mod foo {\n+    enum Bar {\n+        Baz { a: int }\n+    }\n+}\n+\n+fn f(b: foo::Bar) { //~ ERROR enum `Bar` is private\n+    match b {\n+        foo::Bar::Baz { a: _a } => {} //~ ERROR variant `Baz` is inaccessible\n+        // ^~ ERROR enum `Bar` is private\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f622d31346fd45f28b603f4b1ac5e3e6d1687ed7", "filename": "src/test/run-pass/issue-14837.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Ftest%2Frun-pass%2Fissue-14837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Ftest%2Frun-pass%2Fissue-14837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14837.rs?ref=00741a2c27f377ad71bbd47a25c63e06b3dffc00", "patch": "@@ -13,7 +13,7 @@\n #[deny(dead_code)]\n pub enum Foo {\n     Bar {\n-        pub baz: int\n+        baz: int\n     }\n }\n "}, {"sha": "a3946bd8dd95213a135b36b32e89f4837f8a1a63", "filename": "src/test/run-pass/struct-variant-field-visibility.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Ftest%2Frun-pass%2Fstruct-variant-field-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00741a2c27f377ad71bbd47a25c63e06b3dffc00/src%2Ftest%2Frun-pass%2Fstruct-variant-field-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-variant-field-visibility.rs?ref=00741a2c27f377ad71bbd47a25c63e06b3dffc00", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(struct_variant)]\n+\n+mod foo {\n+    pub enum Foo {\n+        Bar { a: int }\n+    }\n+}\n+\n+fn f(f: foo::Foo) {\n+    match f {\n+        foo::Foo::Bar { a: _a } => {}\n+    }\n+}\n+\n+pub fn main() {}"}]}