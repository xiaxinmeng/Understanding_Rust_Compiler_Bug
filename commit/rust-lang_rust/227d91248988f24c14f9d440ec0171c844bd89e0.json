{"sha": "227d91248988f24c14f9d440ec0171c844bd89e0", "node_id": "C_kwDOAAsO6NoAKDIyN2Q5MTI0ODk4OGYyNGMxNGY5ZDQ0MGVjMDE3MWM4NDRiZDg5ZTA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-19T14:36:11Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-19T14:39:42Z"}, "message": "Stop interning stability.", "tree": {"sha": "80d0d90b8ab47a12d922c51188b502ac40a48a6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80d0d90b8ab47a12d922c51188b502ac40a48a6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/227d91248988f24c14f9d440ec0171c844bd89e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/227d91248988f24c14f9d440ec0171c844bd89e0", "html_url": "https://github.com/rust-lang/rust/commit/227d91248988f24c14f9d440ec0171c844bd89e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/227d91248988f24c14f9d440ec0171c844bd89e0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb4ee81ef555126e49b3e9f16ca6f12a3264a451", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4ee81ef555126e49b3e9f16ca6f12a3264a451", "html_url": "https://github.com/rust-lang/rust/commit/cb4ee81ef555126e49b3e9f16ca6f12a3264a451"}], "stats": {"total": 71, "additions": 24, "deletions": 47}, "files": [{"sha": "8b462ca09a531450539ba5a9c63e920f956c9f63", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/227d91248988f24c14f9d440ec0171c844bd89e0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227d91248988f24c14f9d440ec0171c844bd89e0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=227d91248988f24c14f9d440ec0171c844bd89e0", "patch": "@@ -129,12 +129,8 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     opt_def_kind => { Some(cdata.def_kind(def_id.index)) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n     def_ident_span => { cdata.opt_item_ident(def_id.index, &tcx.sess).map(|ident| ident.span) }\n-    lookup_stability => {\n-        cdata.get_stability(def_id.index).map(|s| tcx.intern_stability(s))\n-    }\n-    lookup_const_stability => {\n-        cdata.get_const_stability(def_id.index).map(|s| tcx.intern_const_stability(s))\n-    }\n+    lookup_stability => { cdata.get_stability(def_id.index) }\n+    lookup_const_stability => { cdata.get_const_stability(def_id.index) }\n     lookup_deprecation_entry => {\n         cdata.get_deprecation(def_id.index).map(DeprecationEntry::external)\n     }"}, {"sha": "3c4b1899343f4eb94a88cb96cbcddc40d1c3ac11", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/227d91248988f24c14f9d440ec0171c844bd89e0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227d91248988f24c14f9d440ec0171c844bd89e0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=227d91248988f24c14f9d440ec0171c844bd89e0", "patch": "@@ -1661,7 +1661,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             let hir = tcx.hir();\n \n             let proc_macro_decls_static = tcx.proc_macro_decls_static(()).unwrap().local_def_index;\n-            let stability = tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX)).copied();\n+            let stability = tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX));\n             let macros =\n                 self.lazy(tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index));\n             let spans = self.tcx.sess.parse_sess.proc_macro_quoted_spans();"}, {"sha": "54d53a810b11b729f383db16b7efc8603bcee65d", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/227d91248988f24c14f9d440ec0171c844bd89e0/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227d91248988f24c14f9d440ec0171c844bd89e0/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=227d91248988f24c14f9d440ec0171c844bd89e0", "patch": "@@ -57,11 +57,11 @@ impl DeprecationEntry {\n \n /// A stability index, giving the stability level for items and methods.\n #[derive(HashStable, Debug)]\n-pub struct Index<'tcx> {\n+pub struct Index {\n     /// This is mostly a cache, except the stabilities of local items\n     /// are filled by the annotator.\n-    pub stab_map: FxHashMap<LocalDefId, &'tcx Stability>,\n-    pub const_stab_map: FxHashMap<LocalDefId, &'tcx ConstStability>,\n+    pub stab_map: FxHashMap<LocalDefId, Stability>,\n+    pub const_stab_map: FxHashMap<LocalDefId, ConstStability>,\n     pub depr_map: FxHashMap<LocalDefId, DeprecationEntry>,\n \n     /// Maps for each crate whether it is part of the staged API.\n@@ -71,12 +71,12 @@ pub struct Index<'tcx> {\n     pub active_features: FxHashSet<Symbol>,\n }\n \n-impl<'tcx> Index<'tcx> {\n-    pub fn local_stability(&self, def_id: LocalDefId) -> Option<&'tcx Stability> {\n+impl Index {\n+    pub fn local_stability(&self, def_id: LocalDefId) -> Option<Stability> {\n         self.stab_map.get(&def_id).copied()\n     }\n \n-    pub fn local_const_stability(&self, def_id: LocalDefId) -> Option<&'tcx ConstStability> {\n+    pub fn local_const_stability(&self, def_id: LocalDefId) -> Option<ConstStability> {\n         self.const_stab_map.get(&def_id).copied()\n     }\n \n@@ -416,7 +416,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n \n         match stability {\n-            Some(&Stability {\n+            Some(Stability {\n                 level: attr::Unstable { reason, issue, is_soft }, feature, ..\n             }) => {\n                 if span.allows_unstable(feature) {"}, {"sha": "46103b77adee8eb7fa544ad9a9fc53e58d33911b", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/227d91248988f24c14f9d440ec0171c844bd89e0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227d91248988f24c14f9d440ec0171c844bd89e0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=227d91248988f24c14f9d440ec0171c844bd89e0", "patch": "@@ -1010,12 +1010,12 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query lookup_stability(def_id: DefId) -> Option<&'tcx attr::Stability> {\n+    query lookup_stability(def_id: DefId) -> Option<attr::Stability> {\n         desc { |tcx| \"looking up stability of `{}`\", tcx.def_path_str(def_id) }\n         separate_provide_extern\n     }\n \n-    query lookup_const_stability(def_id: DefId) -> Option<&'tcx attr::ConstStability> {\n+    query lookup_const_stability(def_id: DefId) -> Option<attr::ConstStability> {\n         desc { |tcx| \"looking up const stability of `{}`\", tcx.def_path_str(def_id) }\n         separate_provide_extern\n     }\n@@ -1626,7 +1626,7 @@ rustc_queries! {\n         desc { |tcx| \"names_imported_by_glob_use for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n \n-    query stability_index(_: ()) -> stability::Index<'tcx> {\n+    query stability_index(_: ()) -> stability::Index {\n         storage(ArenaCacheSelector<'tcx>)\n         eval_always\n         desc { \"calculating the stability index for the local crate\" }"}, {"sha": "33db83f052484318c6c6a1d4633bb2ee2c1e1055", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/227d91248988f24c14f9d440ec0171c844bd89e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227d91248988f24c14f9d440ec0171c844bd89e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=227d91248988f24c14f9d440ec0171c844bd89e0", "patch": "@@ -24,7 +24,6 @@ use crate::ty::{\n     RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy,\n };\n use rustc_ast as ast;\n-use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::memmap::Mmap;\n@@ -116,12 +115,6 @@ pub struct CtxtInterners<'tcx> {\n     bound_variable_kinds: InternedSet<'tcx, List<ty::BoundVariableKind>>,\n     layout: InternedSet<'tcx, Layout>,\n     adt_def: InternedSet<'tcx, AdtDef>,\n-\n-    /// `#[stable]` and `#[unstable]` attributes\n-    stability: InternedSet<'tcx, attr::Stability>,\n-\n-    /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes\n-    const_stability: InternedSet<'tcx, attr::ConstStability>,\n }\n \n impl<'tcx> CtxtInterners<'tcx> {\n@@ -143,8 +136,6 @@ impl<'tcx> CtxtInterners<'tcx> {\n             bound_variable_kinds: Default::default(),\n             layout: Default::default(),\n             adt_def: Default::default(),\n-            stability: Default::default(),\n-            const_stability: Default::default(),\n         }\n     }\n \n@@ -1271,7 +1262,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)\n     }\n \n-    pub fn stability(self) -> &'tcx stability::Index<'tcx> {\n+    pub fn stability(self) -> &'tcx stability::Index {\n         self.stability_index(())\n     }\n \n@@ -1981,12 +1972,6 @@ impl<'tcx> TyCtxt<'tcx> {\n \n                 writeln!(fmt, \"InternalSubsts interner: #{}\", self.0.interners.substs.len())?;\n                 writeln!(fmt, \"Region interner: #{}\", self.0.interners.region.len())?;\n-                writeln!(fmt, \"Stability interner: #{}\", self.0.interners.stability.len())?;\n-                writeln!(\n-                    fmt,\n-                    \"Const Stability interner: #{}\",\n-                    self.0.interners.const_stability.len()\n-                )?;\n                 writeln!(\n                     fmt,\n                     \"Const Allocation interner: #{}\",\n@@ -2174,8 +2159,6 @@ direct_interners_old! {\n     const_allocation: intern_const_alloc(Allocation),\n     layout: intern_layout(Layout),\n     adt_def: intern_adt_def(AdtDef),\n-    stability: intern_stability(attr::Stability),\n-    const_stability: intern_const_stability(attr::ConstStability),\n }\n \n macro_rules! slice_interners {"}, {"sha": "591f32c0a10db31be9b6098762190694c2b1e5ce", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/227d91248988f24c14f9d440ec0171c844bd89e0/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227d91248988f24c14f9d440ec0171c844bd89e0/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=227d91248988f24c14f9d440ec0171c844bd89e0", "patch": "@@ -87,9 +87,9 @@ impl InheritStability {\n // A private tree-walker for producing an Index.\n struct Annotator<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    index: &'a mut Index<'tcx>,\n-    parent_stab: Option<&'tcx Stability>,\n-    parent_const_stab: Option<&'tcx ConstStability>,\n+    index: &'a mut Index,\n+    parent_stab: Option<Stability>,\n+    parent_const_stab: Option<ConstStability>,\n     parent_depr: Option<DeprecationEntry>,\n     in_trait_impl: bool,\n }\n@@ -171,7 +171,6 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         let mut const_span = None;\n \n         let const_stab = const_stab.map(|(const_stab, const_span_node)| {\n-            let const_stab = self.tcx.intern_const_stability(const_stab);\n             self.index.const_stab_map.insert(def_id, const_stab);\n             const_span = Some(const_span_node);\n             const_stab\n@@ -228,7 +227,6 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             }\n \n             debug!(\"annotate: found {:?}\", stab);\n-            let stab = self.tcx.intern_stability(stab);\n \n             // Check if deprecated_since < stable_since. If it is,\n             // this is *almost surely* an accident.\n@@ -299,8 +297,8 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n     fn recurse_with_stability_attrs(\n         &mut self,\n         depr: Option<DeprecationEntry>,\n-        stab: Option<&'tcx Stability>,\n-        const_stab: Option<&'tcx ConstStability>,\n+        stab: Option<Stability>,\n+        const_stab: Option<ConstStability>,\n         f: impl FnOnce(&mut Self),\n     ) {\n         // These will be `Some` if this item changes the corresponding stability attribute.\n@@ -655,7 +653,7 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     // stable (assuming they have not inherited instability from their parent).\n }\n \n-fn stability_index<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n+fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n     let is_staged_api =\n         tcx.sess.opts.debugging_opts.force_unstable_if_unmarked || tcx.features().staged_api;\n     let mut staged_api = FxHashMap::default();\n@@ -698,14 +696,14 @@ fn stability_index<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n             let reason = \"this crate is being loaded from the sysroot, an \\\n                           unstable location; did you mean to load this crate \\\n                           from crates.io via `Cargo.toml` instead?\";\n-            let stability = tcx.intern_stability(Stability {\n+            let stability = Stability {\n                 level: attr::StabilityLevel::Unstable {\n                     reason: Some(Symbol::intern(reason)),\n                     issue: NonZeroU32::new(27812),\n                     is_soft: false,\n                 },\n                 feature: sym::rustc_private,\n-            });\n+            };\n             annotator.parent_stab = Some(stability);\n         }\n "}, {"sha": "467a6940628e7b74f20b959e48d977fdb9836198", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/227d91248988f24c14f9d440ec0171c844bd89e0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227d91248988f24c14f9d440ec0171c844bd89e0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=227d91248988f24c14f9d440ec0171c844bd89e0", "patch": "@@ -381,12 +381,12 @@ crate fn rustc_span(def_id: DefId, tcx: TyCtxt<'_>) -> Span {\n }\n \n impl Item {\n-    crate fn stability<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Option<&'tcx Stability> {\n+    crate fn stability<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Option<Stability> {\n         self.def_id.as_def_id().and_then(|did| tcx.lookup_stability(did))\n     }\n \n     crate fn const_stability<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Option<ConstStability> {\n-        self.def_id.as_def_id().and_then(|did| tcx.lookup_const_stability(did)).map(|cs| *cs)\n+        self.def_id.as_def_id().and_then(|did| tcx.lookup_const_stability(did))\n     }\n \n     crate fn deprecation(&self, tcx: TyCtxt<'_>) -> Option<Deprecation> {"}]}