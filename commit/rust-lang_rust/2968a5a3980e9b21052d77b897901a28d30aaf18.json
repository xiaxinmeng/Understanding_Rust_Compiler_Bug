{"sha": "2968a5a3980e9b21052d77b897901a28d30aaf18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NjhhNWEzOTgwZTliMjEwNTJkNzdiODk3OTAxYTI4ZDMwYWFmMTg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-12-16T20:48:02Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-12-18T00:04:23Z"}, "message": "Fix DOM errors", "tree": {"sha": "087f2436eec2068aa0e09f255e57fe3b6c74aa0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/087f2436eec2068aa0e09f255e57fe3b6c74aa0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2968a5a3980e9b21052d77b897901a28d30aaf18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2968a5a3980e9b21052d77b897901a28d30aaf18", "html_url": "https://github.com/rust-lang/rust/commit/2968a5a3980e9b21052d77b897901a28d30aaf18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2968a5a3980e9b21052d77b897901a28d30aaf18/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b56cec03215e8689f02f3839b3d87afbcf260558", "url": "https://api.github.com/repos/rust-lang/rust/commits/b56cec03215e8689f02f3839b3d87afbcf260558", "html_url": "https://github.com/rust-lang/rust/commit/b56cec03215e8689f02f3839b3d87afbcf260558"}], "stats": {"total": 60, "additions": 28, "deletions": 32}, "files": [{"sha": "99246e4a058fd4364f4234818817156148370b28", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2968a5a3980e9b21052d77b897901a28d30aaf18/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2968a5a3980e9b21052d77b897901a28d30aaf18/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=2968a5a3980e9b21052d77b897901a28d30aaf18", "patch": "@@ -3037,15 +3037,14 @@ fn item_trait(\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n         let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-        write!(w, \"{extra}<h3 id='{id}' class='method'>\\\n-                   <span id='{ns_id}' class='invisible'><code>\",\n+        write!(w, \"{extra}<h3 id='{id}' class='method'><code id='{ns_id}'>\",\n                extra = render_spotlight_traits(m)?,\n                id = id,\n                ns_id = ns_id)?;\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl)?;\n         write!(w, \"</code>\")?;\n         render_stability_since(w, m, t)?;\n-        write!(w, \"</span></h3>\")?;\n+        write!(w, \"</h3>\")?;\n         document(w, cx, m)?;\n         Ok(())\n     }\n@@ -3374,11 +3373,10 @@ fn item_struct(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                 let ns_id = cx.derive_id(format!(\"{}.{}\",\n                                               field.name.as_ref().unwrap(),\n                                               ItemType::StructField.name_space()));\n-                write!(w, \"<span id=\\\"{id}\\\" class=\\\"{item_type} small-section-header\\\">\n-                           <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\n-                           <span id=\\\"{ns_id}\\\" class='invisible'>\n-                           <code>{name}: {ty}</code>\n-                           </span></span>\",\n+                write!(w, \"<span id=\\\"{id}\\\" class=\\\"{item_type} small-section-header\\\">\\\n+                           <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n+                           <code id=\\\"{ns_id}\\\">{name}: {ty}</code>\\\n+                           </span>\",\n                        item_type = ItemType::StructField,\n                        id = id,\n                        ns_id = ns_id,\n@@ -3510,7 +3508,7 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                                           ItemType::Variant.name_space()));\n             write!(w, \"<span id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n                        <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                       <span id='{ns_id}' class='invisible'><code>{name}\",\n+                       <code id='{ns_id}'>{name}\",\n                    id = id,\n                    ns_id = ns_id,\n                    name = variant.name.as_ref().unwrap())?;\n@@ -3526,7 +3524,7 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                     write!(w, \")\")?;\n                 }\n             }\n-            write!(w, \"</code></span></span>\")?;\n+            write!(w, \"</code></span>\")?;\n             document(w, cx, variant)?;\n \n             use clean::{Variant, VariantKind};\n@@ -3553,8 +3551,8 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                                                       ItemType::StructField.name_space()));\n                         write!(w, \"<span id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n                                    <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                                   <span id='{ns_id}' class='invisible'><code>{f}:&nbsp;{t}\\\n-                                   </code></span></span>\",\n+                                   <code id='{ns_id}'>{f}:&nbsp;{t}\\\n+                                   </code></span>\",\n                                id = id,\n                                ns_id = ns_id,\n                                f = field.name.as_ref().unwrap(),\n@@ -3999,7 +3997,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                    id, i.inner_impl())?;\n         }\n         write!(w, \"<a href='#{}' class='anchor'></a>\", id)?;\n-        write!(w, \"</span></td><td><span class='out-of-band'>\")?;\n+        write!(w, \"</td><td><span class='out-of-band'>\")?;\n         let since = i.impl_item.stability.as_ref().map(|s| &s.since[..]);\n         if let Some(l) = (Item { item: &i.impl_item, cx: cx }).src_href() {\n             write!(w, \"<div class='ghost'></div>\")?;\n@@ -4009,7 +4007,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n         } else {\n             render_stability_since_raw(w, since, outer_version)?;\n         }\n-        write!(w, \"</span></td></tr></tbody></table></h3>\")?;\n+        write!(w, \"</span></td></tr></tbody></table></span></h3>\")?;\n         if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n             let mut ids = cx.id_map.borrow_mut();\n             write!(w, \"<div class='docblock'>{}</div>\",\n@@ -4045,30 +4043,29 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                     let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                     write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                     write!(w, \"{}\", spotlight_decl(decl)?)?;\n-                    write!(w, \"<span id='{}' class='invisible'>\", ns_id)?;\n-                    write!(w, \"<table class='table-display'><tbody><tr><td><code>\")?;\n+                    write!(w, \"<table id='{}' class='table-display'><tbody><tr><td><code>\", ns_id)?;\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl)?;\n                     write!(w, \"</code>\")?;\n                     if let Some(l) = (Item { cx, item }).src_href() {\n-                        write!(w, \"</span></td><td><span class='out-of-band'>\")?;\n+                        write!(w, \"</td><td><span class='out-of-band'>\")?;\n                         write!(w, \"<div class='ghost'></div>\")?;\n                         render_stability_since_raw(w, item.stable_since(), outer_version)?;\n-                        write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n+                        write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a></span>\",\n                                l, \"goto source code\")?;\n                     } else {\n                         write!(w, \"</td><td>\")?;\n                         render_stability_since_raw(w, item.stable_since(), outer_version)?;\n                     }\n-                    write!(w, \"</td></tr></tbody></table></span></h4>\")?;\n+                    write!(w, \"</td></tr></tbody></table></h4>\")?;\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", ItemType::AssociatedType, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n-                write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n+                write!(w, \"<code id='{}'>\", ns_id)?;\n                 assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link.anchor(&id))?;\n-                write!(w, \"</code></span></h4>\")?;\n+                write!(w, \"</code></h4>\")?;\n             }\n             clean::AssociatedConstItem(ref ty, ref default) => {\n                 let mut version = String::new();\n@@ -4078,19 +4075,18 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n-                write!(w, \"<span id='{}' class='invisible'>\", ns_id)?;\n                 if !version.is_empty() {\n-                    write!(w, \"<table class='table-display'><tbody><tr><td><code>\")?;\n+                    write!(w, \"<table id='{}' class='table-display'><tbody><tr><td><code>\", ns_id)?;\n                 } else {\n-                    write!(w, \"<code>\")?;\n+                    write!(w, \"<code id='{}'>\", ns_id)?;\n                 }\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id))?;\n                 if !version.is_empty() {\n                     write!(w, \"</code>\")?;\n                 }\n                 let src = if let Some(l) = (Item { cx, item }).src_href() {\n                     if !version.is_empty() {\n-                        write!(w, \"</span></td><td><span class='out-of-band'>\")?;\n+                        write!(w, \"</td><td><span class='out-of-band'>\")?;\n                         write!(w, \"<div class='ghost'></div>{}\", version)?;\n                     }\n                     format!(\"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n@@ -4102,18 +4098,18 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                     String::new()\n                 };\n                 if version.is_empty() {\n-                    write!(w, \"</code>{}</span></h4>\", src)?;\n+                    write!(w, \"</code>{}</h4>\", src)?;\n                 } else {\n-                    write!(w, \"{}</td></tr></tbody></table></span></h4>\", src)?;\n+                    write!(w, \"{}</span></td></tr></tbody></table></h4>\", src)?;\n                 }\n             }\n             clean::AssociatedTypeItem(ref bounds, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n-                write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n+                write!(w, \"<code id='{}'>\", ns_id)?;\n                 assoc_type(w, item, bounds, default.as_ref(), link.anchor(&id))?;\n-                write!(w, \"</code></span></h4>\\n\")?;\n+                write!(w, \"</code></h4>\")?;\n             }\n             clean::StrippedItem(..) => return Ok(()),\n             _ => panic!(\"can't make docs for trait item with name {:?}\", item.name)"}, {"sha": "fc3705e3c77677552137daf01fc7dbd64e3089fb", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2968a5a3980e9b21052d77b897901a28d30aaf18/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/2968a5a3980e9b21052d77b897901a28d30aaf18/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=2968a5a3980e9b21052d77b897901a28d30aaf18", "patch": "@@ -611,7 +611,7 @@ a {\n \ttext-decoration: underline;\n }\n \n-.invisible > .srclink {\n+.invisible > .srclink, h4 > code + .srclink {\n \tposition: absolute;\n \ttop: 0;\n \tright: 0;"}, {"sha": "100bf7af0e9b307d0d199892b02fae9d204a1993", "filename": "src/test/rustdoc/assoc-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2968a5a3980e9b21052d77b897901a28d30aaf18/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2968a5a3980e9b21052d77b897901a28d30aaf18/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-types.rs?ref=2968a5a3980e9b21052d77b897901a28d30aaf18", "patch": "@@ -15,9 +15,9 @@\n // @has assoc_types/trait.Index.html\n pub trait Index<I: ?Sized> {\n     // @has - '//*[@id=\"associatedtype.Output\"]//code' 'type Output: ?Sized'\n-    // @has - '//*[@id=\"Output.t\"]//code' 'type Output: ?Sized'\n+    // @has - '//code[@id=\"Output.t\"]' 'type Output: ?Sized'\n     type Output: ?Sized;\n-    // @has - '//*[@id=\"index.v\"]//code' 'fn index'\n+    // @has - '//code[@id=\"index.v\"]' 'fn index'\n     // @has - '//*[@id=\"tymethod.index\"]//code' \\\n     //      \"fn index<'a>(&'a self, index: I) -> &'a Self::Output\"\n     // @has - '//*[@id=\"tymethod.index\"]//code//a[@href=\"../assoc_types/trait.Index.html#associatedtype.Output\"]' \\"}]}