{"sha": "413a82051d34080b47693507fc456b5b4017bb5a", "node_id": "C_kwDOAAsO6NoAKDQxM2E4MjA1MWQzNDA4MGI0NzY5MzUwN2ZjNDU2YjViNDAxN2JiNWE", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2022-10-24T10:32:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-24T10:32:27Z"}, "message": "Rollup merge of #102766 - thomcc:remove-resolv, r=Mark-Simulacrum\n\nDon't link to `libresolv` in libstd on Darwin\n\nCurrently we link `libresolv` into every Rust program on apple targets despite never using it (as of https://github.com/rust-lang/rust/pull/44965). I had thought we needed this for `getaddrinfo` or something, but we do not / cannot safely use it.\n\nI'd like to fix this for `libiconv` too (the other library we pull in. that's harder since it's coming in through `libc`, which is https://github.com/rust-lang/libc/pull/2944)).\n\n---\n\nThis may warrant release notes. I'm not sure but I've added the flag regardless -- It's a change to the list of dylibs every Rust program pulls in, so it's worth mentioning.\n\nIt's pretty unlikely anybody was relying on this being pulled in, and `std` does not guarantee that it will link (and thus transitively provide access to) any particular system library -- anybody relying on that behavior would already be broken when dynamically linking std. That is, there's an outside chance something will fail to link on macOS and iOS because it was accidentally relying on our unnecessary dependency.\n\n(If that *does* happen, that project could be easily fixed by linking libresolv explicitly on those platforms, probably via `#[link(name = \"resolv\")] extern {}`,` -Crustc-link-lib=resolv`, `println!(\"cargo:rustc-link-lib=resolv\")`, or one of several places in `.config/cargo.toml`)\n\n---\n\nI'm also going to preemptively add the nomination for discussing this in the libs meeting. Basically: Do we care about programs that assume we will bring libraries in that we do not use. `libresolv` and `libiconv` on macOS/iOS are in this camp (`libresolv` because we used to use it, and `libiconv` because the `libc` crate was unintentionally(?) pulling it in to every Rust program).\n\nI'd like to remove them both, but this may cause link issues programs that are relying on `std` to depend on them transitively. (Relying on std for this does not work in all build configurations, so this seems very fragile, and like a use case we should not support).\n\nMore generally, IMO we should not guarantee the specific set of system-provided libraries we use (beyond what is implied by an OS version requirement), which means we'd be free to remove this cruft.", "tree": {"sha": "e3a02fb755852b950ef676d8282351894d1c5c21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3a02fb755852b950ef676d8282351894d1c5c21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/413a82051d34080b47693507fc456b5b4017bb5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjVmm7CRBK7hj4Ov3rIwAAud0IABCMaIYgpeWm0DZyDA6hd8yF\nbCMgaaWsBaHHVAHKBv8T1Sv8hmRRpMtbweaBP0Vde0Eoc8TC5bVJdYRp43qRSE5Z\nTZOKUBW6FqRcGGxjxqraBTBaQeLvZDOg/7QXZt2i37w53GTutS+gYNIcD56ihlyP\nPtkrdmw6f8HEcLT75446n3Np6YQSAK0N/7ntgSZLzI1R3tRXnYVBUqH3DoOoa74q\nKH4U+YqtPELp8Q96SfOjHzTX+ul0JpTok9EWLheHWCdGrtww6fWIFg9628FIT1eI\nbqPL4XJzXF3utqPcvFi+cg32ZnAlvloHILtA5c85TlI2iBNZNeoS5y5O/5AQxaQ=\n=dsWB\n-----END PGP SIGNATURE-----\n", "payload": "tree e3a02fb755852b950ef676d8282351894d1c5c21\nparent c1f9d985d798f317ea140d356c4243501637fee4\nparent 2618f7ae04bb458f53fc8fe4c40b54a9377ce0bb\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1666607547 +0900\ncommitter GitHub <noreply@github.com> 1666607547 +0900\n\nRollup merge of #102766 - thomcc:remove-resolv, r=Mark-Simulacrum\n\nDon't link to `libresolv` in libstd on Darwin\n\nCurrently we link `libresolv` into every Rust program on apple targets despite never using it (as of https://github.com/rust-lang/rust/pull/44965). I had thought we needed this for `getaddrinfo` or something, but we do not / cannot safely use it.\n\nI'd like to fix this for `libiconv` too (the other library we pull in. that's harder since it's coming in through `libc`, which is https://github.com/rust-lang/libc/pull/2944)).\n\n---\n\nThis may warrant release notes. I'm not sure but I've added the flag regardless -- It's a change to the list of dylibs every Rust program pulls in, so it's worth mentioning.\n\nIt's pretty unlikely anybody was relying on this being pulled in, and `std` does not guarantee that it will link (and thus transitively provide access to) any particular system library -- anybody relying on that behavior would already be broken when dynamically linking std. That is, there's an outside chance something will fail to link on macOS and iOS because it was accidentally relying on our unnecessary dependency.\n\n(If that *does* happen, that project could be easily fixed by linking libresolv explicitly on those platforms, probably via `#[link(name = \"resolv\")] extern {}`,` -Crustc-link-lib=resolv`, `println!(\"cargo:rustc-link-lib=resolv\")`, or one of several places in `.config/cargo.toml`)\n\n---\n\nI'm also going to preemptively add the nomination for discussing this in the libs meeting. Basically: Do we care about programs that assume we will bring libraries in that we do not use. `libresolv` and `libiconv` on macOS/iOS are in this camp (`libresolv` because we used to use it, and `libiconv` because the `libc` crate was unintentionally(?) pulling it in to every Rust program).\n\nI'd like to remove them both, but this may cause link issues programs that are relying on `std` to depend on them transitively. (Relying on std for this does not work in all build configurations, so this seems very fragile, and like a use case we should not support).\n\nMore generally, IMO we should not guarantee the specific set of system-provided libraries we use (beyond what is implied by an OS version requirement), which means we'd be free to remove this cruft.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/413a82051d34080b47693507fc456b5b4017bb5a", "html_url": "https://github.com/rust-lang/rust/commit/413a82051d34080b47693507fc456b5b4017bb5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/413a82051d34080b47693507fc456b5b4017bb5a/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1f9d985d798f317ea140d356c4243501637fee4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f9d985d798f317ea140d356c4243501637fee4", "html_url": "https://github.com/rust-lang/rust/commit/c1f9d985d798f317ea140d356c4243501637fee4"}, {"sha": "2618f7ae04bb458f53fc8fe4c40b54a9377ce0bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2618f7ae04bb458f53fc8fe4c40b54a9377ce0bb", "html_url": "https://github.com/rust-lang/rust/commit/2618f7ae04bb458f53fc8fe4c40b54a9377ce0bb"}], "stats": {"total": 4, "additions": 0, "deletions": 4}, "files": [{"sha": "9055a011c515e18bd33b44953477220266f17f23", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413a82051d34080b47693507fc456b5b4017bb5a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413a82051d34080b47693507fc456b5b4017bb5a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=413a82051d34080b47693507fc456b5b4017bb5a", "patch": "@@ -382,16 +382,12 @@ cfg_if::cfg_if! {\n         extern \"C\" {}\n     } else if #[cfg(target_os = \"macos\")] {\n         #[link(name = \"System\")]\n-        // res_init and friends require -lresolv on macOS/iOS.\n-        // See #41582 and https://blog.achernya.com/2013/03/os-x-has-silly-libsystem.html\n-        #[link(name = \"resolv\")]\n         extern \"C\" {}\n     } else if #[cfg(any(target_os = \"ios\", target_os = \"watchos\"))] {\n         #[link(name = \"System\")]\n         #[link(name = \"objc\")]\n         #[link(name = \"Security\", kind = \"framework\")]\n         #[link(name = \"Foundation\", kind = \"framework\")]\n-        #[link(name = \"resolv\")]\n         extern \"C\" {}\n     } else if #[cfg(target_os = \"fuchsia\")] {\n         #[link(name = \"zircon\")]"}]}