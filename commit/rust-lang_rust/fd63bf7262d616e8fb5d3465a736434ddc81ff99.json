{"sha": "fd63bf7262d616e8fb5d3465a736434ddc81ff99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNjNiZjcyNjJkNjE2ZThmYjVkMzQ2NWE3MzY0MzRkZGM4MWZmOTk=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-13T22:54:09Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-14T08:22:32Z"}, "message": "Rm allocation in uninhabited_enum_branching\n\nAlso convert `uninhabited_enum_branching` `Cow<[u128]>::to_mut`", "tree": {"sha": "48b7e9d83083705b5b35e1eef12cd60585bee637", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48b7e9d83083705b5b35e1eef12cd60585bee637"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd63bf7262d616e8fb5d3465a736434ddc81ff99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd63bf7262d616e8fb5d3465a736434ddc81ff99", "html_url": "https://github.com/rust-lang/rust/commit/fd63bf7262d616e8fb5d3465a736434ddc81ff99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd63bf7262d616e8fb5d3465a736434ddc81ff99/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70ad31847d568b291253714f06b562ef1d07eda6", "url": "https://api.github.com/repos/rust-lang/rust/commits/70ad31847d568b291253714f06b562ef1d07eda6", "html_url": "https://github.com/rust-lang/rust/commit/70ad31847d568b291253714f06b562ef1d07eda6"}], "stats": {"total": 86, "additions": 33, "deletions": 53}, "files": [{"sha": "84082edd1933f61ec858fe2abba005a3ede99ec9", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fd63bf7262d616e8fb5d3465a736434ddc81ff99/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd63bf7262d616e8fb5d3465a736434ddc81ff99/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=fd63bf7262d616e8fb5d3465a736434ddc81ff99", "patch": "@@ -246,12 +246,14 @@ fn get_arm_identity_info<'a, 'tcx>(\n         tmp_assigned_vars.insert(*r);\n     }\n \n-    let mut dbg_info_to_adjust = Vec::new();\n-    for (i, var_info) in debug_info.iter().enumerate() {\n-        if tmp_assigned_vars.contains(var_info.place.local) {\n-            dbg_info_to_adjust.push(i);\n-        }\n-    }\n+    let dbg_info_to_adjust: Vec<_> =\n+        debug_info\n+            .iter()\n+            .enumerate()\n+            .filter_map(|(i, var_info)| {\n+                if tmp_assigned_vars.contains(var_info.place.local) { Some(i) } else { None }\n+            })\n+            .collect();\n \n     Some(ArmIdentityInfo {\n         local_temp_0: local_tmp_s0,\n@@ -461,14 +463,14 @@ fn match_get_variant_field<'tcx>(\n     stmt: &Statement<'tcx>,\n ) -> Option<(Local, Local, VarField<'tcx>, &'tcx List<PlaceElem<'tcx>>)> {\n     match &stmt.kind {\n-        StatementKind::Assign(box (place_into, rvalue_from)) => match rvalue_from {\n-            Rvalue::Use(Operand::Copy(pf) | Operand::Move(pf)) => {\n-                let local_into = place_into.as_local()?;\n-                let (local_from, vf) = match_variant_field_place(*pf)?;\n-                Some((local_into, local_from, vf, pf.projection))\n-            }\n-            _ => None,\n-        },\n+        StatementKind::Assign(box (\n+            place_into,\n+            Rvalue::Use(Operand::Copy(pf) | Operand::Move(pf)),\n+        )) => {\n+            let local_into = place_into.as_local()?;\n+            let (local_from, vf) = match_variant_field_place(*pf)?;\n+            Some((local_into, local_from, vf, pf.projection))\n+        }\n         _ => None,\n     }\n }\n@@ -479,14 +481,11 @@ fn match_get_variant_field<'tcx>(\n /// ```\n fn match_set_variant_field<'tcx>(stmt: &Statement<'tcx>) -> Option<(Local, Local, VarField<'tcx>)> {\n     match &stmt.kind {\n-        StatementKind::Assign(box (place_from, rvalue_into)) => match rvalue_into {\n-            Rvalue::Use(Operand::Move(place_into)) => {\n-                let local_into = place_into.as_local()?;\n-                let (local_from, vf) = match_variant_field_place(*place_from)?;\n-                Some((local_into, local_from, vf))\n-            }\n-            _ => None,\n-        },\n+        StatementKind::Assign(box (place_from, Rvalue::Use(Operand::Move(place_into)))) => {\n+            let local_into = place_into.as_local()?;\n+            let (local_from, vf) = match_variant_field_place(*place_from)?;\n+            Some((local_into, local_from, vf))\n+        }\n         _ => None,\n     }\n }"}, {"sha": "4cca4d223c0cb6dd7c2f6cff5e71b762b549012b", "filename": "src/librustc_mir/transform/uninhabited_enum_branching.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fd63bf7262d616e8fb5d3465a736434ddc81ff99/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd63bf7262d616e8fb5d3465a736434ddc81ff99/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs?ref=fd63bf7262d616e8fb5d3465a736434ddc81ff99", "patch": "@@ -99,26 +99,18 @@ impl<'tcx> MirPass<'tcx> for UninhabitedEnumBranching {\n             if let TerminatorKind::SwitchInt { values, targets, .. } =\n                 &mut body.basic_blocks_mut()[bb].terminator_mut().kind\n             {\n-                let vals = &*values;\n-                let zipped = vals.iter().zip(targets.iter());\n-\n-                let mut matched_values = Vec::with_capacity(allowed_variants.len());\n-                let mut matched_targets = Vec::with_capacity(allowed_variants.len() + 1);\n-\n-                for (val, target) in zipped {\n-                    if allowed_variants.contains(val) {\n-                        matched_values.push(*val);\n-                        matched_targets.push(*target);\n-                    } else {\n-                        trace!(\"eliminating {:?} -> {:?}\", val, target);\n-                    }\n-                }\n-\n-                // handle the \"otherwise\" branch\n-                matched_targets.push(targets.pop().unwrap());\n-\n-                *values = matched_values.into();\n-                *targets = matched_targets;\n+                // take otherwise out early\n+                let otherwise = targets.pop().unwrap();\n+                assert_eq!(targets.len(), values.len());\n+                let mut i = 0;\n+                targets.retain(|_| {\n+                    let keep = allowed_variants.contains(&values[i]);\n+                    i += 1;\n+                    keep\n+                });\n+                targets.push(otherwise);\n+\n+                values.to_mut().retain(|var| allowed_variants.contains(var));\n             } else {\n                 unreachable!()\n             }"}, {"sha": "fa362c66fb2897a02661f19e2a50486830f1021e", "filename": "src/librustc_mir/transform/unreachable_prop.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd63bf7262d616e8fb5d3465a736434ddc81ff99/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd63bf7262d616e8fb5d3465a736434ddc81ff99/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs?ref=fd63bf7262d616e8fb5d3465a736434ddc81ff99", "patch": "@@ -68,17 +68,6 @@ where\n     F: Fn(BasicBlock) -> bool,\n {\n     let terminator = match *terminator_kind {\n-        TerminatorKind::FalseEdge { real_target, imaginary_target }\n-            if predicate(real_target) && predicate(imaginary_target) =>\n-        {\n-            TerminatorKind::Unreachable\n-        }\n-        TerminatorKind::FalseUnwind { real_target, unwind }\n-            if predicate(real_target) && unwind.map_or(true, &predicate) =>\n-        {\n-            TerminatorKind::Unreachable\n-        }\n-\n         TerminatorKind::Goto { target } if predicate(target) => TerminatorKind::Unreachable,\n         TerminatorKind::SwitchInt { ref discr, switch_ty, ref values, ref targets } => {\n             let original_targets_len = targets.len();"}]}