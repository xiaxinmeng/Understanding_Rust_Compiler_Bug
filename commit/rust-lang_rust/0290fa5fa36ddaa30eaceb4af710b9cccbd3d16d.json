{"sha": "0290fa5fa36ddaa30eaceb4af710b9cccbd3d16d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyOTBmYTVmYTM2ZGRhYTMwZWFjZWI0YWY3MTBiOWNjY2JkM2QxNmQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-29T16:46:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-29T16:46:46Z"}, "message": "Merge #2116\n\n2116: Basic signature help for mbe r=matklad a=kjeremy\n\nThis is really basic and just adds info and docs. Does something like this even make sense to have? I wasn't sure how to handle arguments so left them empty for now.\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "037c39ac54a4c0943960756f46e314a85c118c82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/037c39ac54a4c0943960756f46e314a85c118c82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0290fa5fa36ddaa30eaceb4af710b9cccbd3d16d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJduGz2CRBK7hj4Ov3rIwAAdHIIAKmKayFgxtorHIUPQ505c+Wv\np04ODboQy7pbb+tL9+VdV+ahnFP6/YNwGyoDr0juaYBGfDCvuR3SmU2k+pOYVOY0\nBwbXvDofip5f5xS+X06f0F6xQYCY3UYgwynr04UEyujSnZ/V/F0NcDcmIaGUz9ys\ntPUUyYg+zrQ7fSh4A+jxhwPI7KHTWx54032/EpfskC8FdcEZ6RE882pkRiOgKL8E\ndgZ3OyViup4ObIja84n3EDuHzp+7LqyDSFLbM/DHhyvSJlonBvz/xy0bX3CbqzqT\nVousEiWEoJTqvUgqx3NVyaZRc5aHBrGsM9dBY3pYYgGD/06MP+7Woz4RbKdCwGA=\n=svVJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 037c39ac54a4c0943960756f46e314a85c118c82\nparent de16f94ada933cfd394ddab34c31410cf05268f1\nparent eb220a081b5e5867a1c063b42c02ec35535a19e5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572367606 +0000\ncommitter GitHub <noreply@github.com> 1572367606 +0000\n\nMerge #2116\n\n2116: Basic signature help for mbe r=matklad a=kjeremy\n\nThis is really basic and just adds info and docs. Does something like this even make sense to have? I wasn't sure how to handle arguments so left them empty for now.\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0290fa5fa36ddaa30eaceb4af710b9cccbd3d16d", "html_url": "https://github.com/rust-lang/rust/commit/0290fa5fa36ddaa30eaceb4af710b9cccbd3d16d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0290fa5fa36ddaa30eaceb4af710b9cccbd3d16d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de16f94ada933cfd394ddab34c31410cf05268f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/de16f94ada933cfd394ddab34c31410cf05268f1", "html_url": "https://github.com/rust-lang/rust/commit/de16f94ada933cfd394ddab34c31410cf05268f1"}, {"sha": "eb220a081b5e5867a1c063b42c02ec35535a19e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb220a081b5e5867a1c063b42c02ec35535a19e5", "html_url": "https://github.com/rust-lang/rust/commit/eb220a081b5e5867a1c063b42c02ec35535a19e5"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "729f4c2fff4ecec279a5e3bd62c06a8fdb9192fc", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0290fa5fa36ddaa30eaceb4af710b9cccbd3d16d/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0290fa5fa36ddaa30eaceb4af710b9cccbd3d16d/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=0290fa5fa36ddaa30eaceb4af710b9cccbd3d16d", "patch": "@@ -36,6 +36,10 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n             let function = analyzer.resolve_method_call(&expr)?;\n             (CallInfo::with_fn(db, function), function.data(db).has_self_param())\n         }\n+        FnCallNode::MacroCallExpr(expr) => {\n+            let macro_def = analyzer.resolve_macro_call(db, &expr)?;\n+            (CallInfo::with_macro(db, macro_def)?, false)\n+        }\n     };\n \n     // If we have a calling expression let's find which argument we are on\n@@ -77,9 +81,11 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     Some(call_info)\n }\n \n+#[derive(Debug)]\n enum FnCallNode {\n     CallExpr(ast::CallExpr),\n     MethodCallExpr(ast::MethodCallExpr),\n+    MacroCallExpr(ast::MacroCall),\n }\n \n impl FnCallNode {\n@@ -89,6 +95,8 @@ impl FnCallNode {\n                 Some(FnCallNode::CallExpr(expr))\n             } else if let Some(expr) = ast::MethodCallExpr::cast(node.clone()) {\n                 Some(FnCallNode::MethodCallExpr(expr))\n+            } else if let Some(expr) = ast::MacroCall::cast(node.clone()) {\n+                Some(FnCallNode::MacroCallExpr(expr))\n             } else {\n                 None\n             }\n@@ -105,13 +113,16 @@ impl FnCallNode {\n             FnCallNode::MethodCallExpr(call_expr) => {\n                 call_expr.syntax().children().filter_map(ast::NameRef::cast).nth(0)\n             }\n+\n+            FnCallNode::MacroCallExpr(call_expr) => call_expr.path()?.segment()?.name_ref(),\n         }\n     }\n \n     fn arg_list(&self) -> Option<ast::ArgList> {\n         match self {\n             FnCallNode::CallExpr(expr) => expr.arg_list(),\n             FnCallNode::MethodCallExpr(expr) => expr.arg_list(),\n+            FnCallNode::MacroCallExpr(_) => None,\n         }\n     }\n }\n@@ -135,6 +146,12 @@ impl CallInfo {\n         Some(CallInfo { signature, active_parameter: None })\n     }\n \n+    fn with_macro(db: &RootDatabase, macro_def: hir::MacroDef) -> Option<Self> {\n+        let signature = FunctionSignature::from_macro(db, macro_def)?;\n+\n+        Some(CallInfo { signature, active_parameter: None })\n+    }\n+\n     fn parameters(&self) -> &[String] {\n         &self.signature.parameters\n     }\n@@ -549,4 +566,23 @@ fn main() {\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn fn_signature_for_macro() {\n+        let info = call_info(\n+            r#\"\n+/// empty macro\n+macro_rules! foo {\n+    () => {}\n+}\n+\n+fn f() {\n+    foo!(<|>);\n+}\n+        \"#,\n+        );\n+\n+        assert_eq!(info.label(), \"foo!()\");\n+        assert_eq!(info.doc().map(|it| it.into()), Some(\"empty macro\".to_string()));\n+    }\n }"}, {"sha": "9075ca443c3fe75f48ca7ba5d2ff2fc562ed6b40", "filename": "crates/ra_ide_api/src/display/function_signature.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0290fa5fa36ddaa30eaceb4af710b9cccbd3d16d/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0290fa5fa36ddaa30eaceb4af710b9cccbd3d16d/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=0290fa5fa36ddaa30eaceb4af710b9cccbd3d16d", "patch": "@@ -17,6 +17,7 @@ pub enum CallableKind {\n     Function,\n     StructConstructor,\n     VariantConstructor,\n+    Macro,\n }\n \n /// Contains information about a function signature\n@@ -123,6 +124,26 @@ impl FunctionSignature {\n             .with_doc_opt(variant.docs(db)),\n         )\n     }\n+\n+    pub(crate) fn from_macro(db: &db::RootDatabase, macro_def: hir::MacroDef) -> Option<Self> {\n+        let node: ast::MacroCall = macro_def.source(db).ast;\n+\n+        let params = vec![];\n+\n+        Some(\n+            FunctionSignature {\n+                kind: CallableKind::Macro,\n+                visibility: None,\n+                name: node.name().map(|n| n.text().to_string()),\n+                ret_type: None,\n+                parameters: params,\n+                generic_parameters: vec![],\n+                where_predicates: vec![],\n+                doc: None,\n+            }\n+            .with_doc_opt(macro_def.docs(db)),\n+        )\n+    }\n }\n \n impl From<&'_ ast::FnDef> for FunctionSignature {\n@@ -167,6 +188,7 @@ impl Display for FunctionSignature {\n                 CallableKind::Function => write!(f, \"fn {}\", name)?,\n                 CallableKind::StructConstructor => write!(f, \"struct {}\", name)?,\n                 CallableKind::VariantConstructor => write!(f, \"{}\", name)?,\n+                CallableKind::Macro => write!(f, \"{}!\", name)?,\n             }\n         }\n "}]}