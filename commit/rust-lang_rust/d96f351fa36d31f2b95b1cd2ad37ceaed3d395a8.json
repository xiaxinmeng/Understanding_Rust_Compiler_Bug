{"sha": "d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NmYzNTFmYTM2ZDMxZjJiOTViMWNkMmFkMzdjZWFlZDNkMzk1YTg=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-12-02T07:01:26Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-12-03T17:50:10Z"}, "message": "Addressed feedback from 2020-12-01\n\nAdded one more test (two files) showing coverage of generics and unused\nfunctions across crates.\n\nCreated and referenced new Issues, as requested.\n\nAdded comments.\n\nAdded a note about the possible effects of compiler options on LLVM\ncoverage maps.", "tree": {"sha": "b51e88d4b3163850b652ea044962b812bb339b38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b51e88d4b3163850b652ea044962b812bb339b38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "html_url": "https://github.com/rust-lang/rust/commit/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "def932ca865b86a5057517d8a0e27c0ca72a0815", "url": "https://api.github.com/repos/rust-lang/rust/commits/def932ca865b86a5057517d8a0e27c0ca72a0815", "html_url": "https://github.com/rust-lang/rust/commit/def932ca865b86a5057517d8a0e27c0ca72a0815"}], "stats": {"total": 2163, "additions": 1797, "deletions": 366}, "files": [{"sha": "1c7e727f9b0b96f86e5d50cc26895ed517d5127c", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -262,6 +262,10 @@ fn add_unreachable_coverage<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     function_coverage_map: &mut FxHashMap<Instance<'tcx>, FunctionCoverage<'tcx>>,\n ) {\n+    // FIXME(#79622): Can this solution be simplified and/or improved? Are there other sources\n+    // of compiler state data that might help (or better sources that could be exposed, but\n+    // aren't yet)?\n+\n     // Note: If the crate *only* defines generic functions, there are no codegenerated non-generic\n     // functions to add any unreachable code to. In this case, the unreachable code regions will\n     // have no coverage, instead of having coverage with zero executions.\n@@ -359,6 +363,21 @@ fn add_unreachable_coverage<'tcx>(\n             for def_id in\n                 unreachable_def_ids_by_file.remove(&covered_file_name).into_iter().flatten()\n             {\n+                // Note, this loop adds an unreachable code regions for each MIR-derived region.\n+                // Alternatively, we could add a single code region for the maximum span of all\n+                // code regions here.\n+                //\n+                // Observed downsides of this approach are:\n+                //\n+                // 1. The coverage results will appear inconsistent compared with the same (or\n+                //    similar) code in a function that is reached.\n+                // 2. If the function is unreachable from one crate but reachable when compiling\n+                //    another referencing crate (such as a cross-crate reference to a\n+                //    generic function or inlined function), actual coverage regions overlaid\n+                //    on a single larger code span of `Zero` coverage can appear confusing or\n+                //    wrong. Chaning the unreachable coverage from a `code_region` to a\n+                //    `gap_region` can help, but still can look odd with `0` line counts for\n+                //    lines between executed (> 0) lines (such as for blank lines or comments).\n                 for &region in tcx.covered_code_regions(def_id) {\n                     function_coverage.add_unreachable_region(region.clone());\n                 }"}, {"sha": "f79f0d3253899e6d6ef1f624f952ba9de119b321", "filename": "compiler/rustc_mir/src/transform/coverage/graph.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -140,7 +140,9 @@ impl CoverageGraph {\n \n                 // The following `TerminatorKind`s are either not expected outside an unwind branch,\n                 // or they should not (under normal circumstances) branch. Coverage graphs are\n-                // simplified by assuring coverage results are accurate for well-behaved programs.\n+                // simplified by assuring coverage results are accurate for program executions that\n+                // don't panic.\n+                //\n                 // Programs that panic and unwind may record slightly inaccurate coverage results\n                 // for a coverage region containing the `Terminator` that began the panic. This\n                 // is as intended. (See Issue #78544 for a possible future option to support"}, {"sha": "10f522d67465d69c2c694b7dce0ba28fc40f2fdf", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -499,6 +499,8 @@ fn fn_sig_and_body<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n ) -> (Option<&'tcx rustc_hir::FnSig<'tcx>>, &'tcx rustc_hir::Body<'tcx>) {\n+    // FIXME(#79625): Consider improving MIR to provide the information needed, to avoid going back\n+    // to HIR for it.\n     let hir_node = tcx.hir().get_if_local(def_id).expect(\"expected DefId is local\");\n     let fn_body_id = hir::map::associated_body(hir_node).expect(\"HIR node is a function with body\");\n     (hir::map::fn_sig(hir_node), tcx.hir().body(fn_body_id))"}, {"sha": "6eb89754ee635543a7ccbe97e4bc7dae8390d15b", "filename": "compiler/rustc_mir/src/transform/coverage/spans.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -359,12 +359,12 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n         }\n \n         // Async functions wrap a closure that implements the body to be executed. The enclosing\n-        // function is initially called, posts the closure to the executor, and returns. To avoid\n-        // showing the return from the enclosing function as a \"covered\" return from the closure,\n-        // the enclosing function's `TerminatorKind::Return`s `CoverageSpan` is excluded. The\n-        // closure's `Return` is the only one that will be counted. This provides adequate\n-        // coverage, and more intuitive counts. (Avoids double-counting the closing brace of the\n-        // function body.)\n+        // function is called and returns an `impl Future` without initially executing any of the\n+        // body. To avoid showing the return from the enclosing function as a \"covered\" return from\n+        // the closure, the enclosing function's `TerminatorKind::Return`s `CoverageSpan` is\n+        // excluded. The closure's `Return` is the only one that will be counted. This provides\n+        // adequate coverage, and more intuitive counts. (Avoids double-counting the closing brace\n+        // of the function body.)\n         let body_ends_with_closure = if let Some(last_covspan) = refined_spans.last() {\n             last_covspan.is_closure && last_covspan.span.hi() == self.body_span.hi()\n         } else {"}, {"sha": "9930bc67cd5d2a7990c54c1a098ca713c02ee2e4", "filename": "src/doc/unstable-book/src/compiler-flags/source-based-code-coverage.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -76,6 +76,8 @@ $ RUSTC=$HOME/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc \\\n     cargo build --example formatjson5\n ```\n \n+Note that some compiler options, combined with `-Zinstrument-coverage`, can produce LLVM IR and/or linked binaries that are incompatible with LLVM coverage maps. For example, coverage requires references to actual functions in LLVM IR. If any covered function is optimized out, the coverage tools may not be able to process the coverage results. If you need to pass additional options, with coverage enabled, test them early, to confirm you will get the coverage results you expect.\n+\n ## Running the instrumented binary to generate raw coverage profiling data\n \n In the previous example, `cargo` generated the coverage-instrumented binary `formatjson5`:"}, {"sha": "794a2e382535ab2895ed5062e49cc38f626739f5", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_export_coverage.async.json", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.async.json", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.async.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.async.json?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -6,50 +6,50 @@\n           \"filename\": \"../coverage/async.rs\",\n           \"summary\": {\n             \"functions\": {\n-              \"count\": 16,\n-              \"covered\": 15,\n-              \"percent\": 93.75\n+              \"count\": 17,\n+              \"covered\": 16,\n+              \"percent\": 94.11764705882352\n             },\n             \"instantiations\": {\n-              \"count\": 16,\n-              \"covered\": 15,\n-              \"percent\": 93.75\n+              \"count\": 17,\n+              \"covered\": 16,\n+              \"percent\": 94.11764705882352\n             },\n             \"lines\": {\n-              \"count\": 102,\n-              \"covered\": 75,\n-              \"percent\": 73.52941176470588\n+              \"count\": 105,\n+              \"covered\": 77,\n+              \"percent\": 73.33333333333333\n             },\n             \"regions\": {\n-              \"count\": 76,\n-              \"covered\": 35,\n-              \"notcovered\": 41,\n-              \"percent\": 46.05263157894737\n+              \"count\": 78,\n+              \"covered\": 36,\n+              \"notcovered\": 42,\n+              \"percent\": 46.15384615384615\n             }\n           }\n         }\n       ],\n       \"totals\": {\n         \"functions\": {\n-          \"count\": 16,\n-          \"covered\": 15,\n-          \"percent\": 93.75\n+          \"count\": 17,\n+          \"covered\": 16,\n+          \"percent\": 94.11764705882352\n         },\n         \"instantiations\": {\n-          \"count\": 16,\n-          \"covered\": 15,\n-          \"percent\": 93.75\n+          \"count\": 17,\n+          \"covered\": 16,\n+          \"percent\": 94.11764705882352\n         },\n         \"lines\": {\n-          \"count\": 102,\n-          \"covered\": 75,\n-          \"percent\": 73.52941176470588\n+          \"count\": 105,\n+          \"covered\": 77,\n+          \"percent\": 73.33333333333333\n         },\n         \"regions\": {\n-          \"count\": 76,\n-          \"covered\": 35,\n-          \"notcovered\": 41,\n-          \"percent\": 46.05263157894737\n+          \"count\": 78,\n+          \"covered\": 36,\n+          \"notcovered\": 42,\n+          \"percent\": 46.15384615384615\n         }\n       }\n     }"}, {"sha": "6189c7b7b641f74028049ca28fcc5a32595e6091", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_export_coverage.uses_crate.json", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.uses_crate.json", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.uses_crate.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.uses_crate.json?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -0,0 +1,85 @@\n+{\n+  \"data\": [\n+    {\n+      \"files\": [\n+        {\n+          \"filename\": \"../coverage/used_crate/mod.rs\",\n+          \"summary\": {\n+            \"functions\": {\n+              \"count\": 3,\n+              \"covered\": 3,\n+              \"percent\": 100\n+            },\n+            \"instantiations\": {\n+              \"count\": 4,\n+              \"covered\": 4,\n+              \"percent\": 100\n+            },\n+            \"lines\": {\n+              \"count\": 31,\n+              \"covered\": 14,\n+              \"percent\": 45.16129032258064\n+            },\n+            \"regions\": {\n+              \"count\": 16,\n+              \"covered\": 6,\n+              \"notcovered\": 10,\n+              \"percent\": 37.5\n+            }\n+          }\n+        },\n+        {\n+          \"filename\": \"../coverage/uses_crate.rs\",\n+          \"summary\": {\n+            \"functions\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"instantiations\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"lines\": {\n+              \"count\": 6,\n+              \"covered\": 6,\n+              \"percent\": 100\n+            },\n+            \"regions\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"notcovered\": 0,\n+              \"percent\": 100\n+            }\n+          }\n+        }\n+      ],\n+      \"totals\": {\n+        \"functions\": {\n+          \"count\": 4,\n+          \"covered\": 4,\n+          \"percent\": 100\n+        },\n+        \"instantiations\": {\n+          \"count\": 5,\n+          \"covered\": 5,\n+          \"percent\": 100\n+        },\n+        \"lines\": {\n+          \"count\": 37,\n+          \"covered\": 20,\n+          \"percent\": 54.054054054054056\n+        },\n+        \"regions\": {\n+          \"count\": 17,\n+          \"covered\": 7,\n+          \"notcovered\": 10,\n+          \"percent\": 41.17647058823529\n+        }\n+      }\n+    }\n+  ],\n+  \"type\": \"llvm.coverage.json.export\",\n+  \"version\": \"2.0.1\"\n+}"}, {"sha": "5c9dc0d22b54821cd6eacec11528f885d3c184ee", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.async.txt", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -93,39 +93,43 @@\n    88|       |    }\n    89|      1|}\n    90|       |\n-   91|      1|fn main() {\n-   92|      1|    let _ = g(10);\n-   93|      1|    let _ = h(9);\n-   94|      1|    let mut future = Box::pin(i(8));\n-   95|      1|    j(7);\n-   96|      1|    l(6);\n-   97|      1|    executor::block_on(future.as_mut());\n-   98|      1|}\n-   99|       |\n-  100|       |mod executor {\n-  101|       |    use core::{\n-  102|       |        future::Future,\n-  103|       |        pin::Pin,\n-  104|       |        task::{Context, Poll, RawWaker, RawWakerVTable, Waker},\n-  105|       |    };\n-  106|       |\n-  107|      1|    pub fn block_on<F: Future>(mut future: F) -> F::Output {\n-  108|      1|        let mut future = unsafe { Pin::new_unchecked(&mut future) };\n-  109|      1|\n-  110|      1|        static VTABLE: RawWakerVTable = RawWakerVTable::new(\n-  111|      1|            |_| unimplemented!(\"clone\"),\n-  112|      1|            |_| unimplemented!(\"wake\"),\n-  113|      1|            |_| unimplemented!(\"wake_by_ref\"),\n-  114|      1|            |_| (),\n-  115|      1|        );\n-  116|      1|        let waker = unsafe { Waker::from_raw(RawWaker::new(core::ptr::null(), &VTABLE)) };\n-  117|      1|        let mut context = Context::from_waker(&waker);\n-  118|       |\n-  119|       |        loop {\n-  120|      1|            if let Poll::Ready(val) = future.as_mut().poll(&mut context) {\n-  121|      1|                break val;\n-  122|      0|            }\n-  123|       |        }\n-  124|      1|    }\n-  125|       |}\n+   91|      1|async fn m(x: u8) -> u8 { x - 1 }\n+                                      ^0\n+   92|       |\n+   93|      1|fn main() {\n+   94|      1|    let _ = g(10);\n+   95|      1|    let _ = h(9);\n+   96|      1|    let mut future = Box::pin(i(8));\n+   97|      1|    j(7);\n+   98|      1|    l(6);\n+   99|      1|    let _ = m(5);\n+  100|      1|    executor::block_on(future.as_mut());\n+  101|      1|}\n+  102|       |\n+  103|       |mod executor {\n+  104|       |    use core::{\n+  105|       |        future::Future,\n+  106|       |        pin::Pin,\n+  107|       |        task::{Context, Poll, RawWaker, RawWakerVTable, Waker},\n+  108|       |    };\n+  109|       |\n+  110|      1|    pub fn block_on<F: Future>(mut future: F) -> F::Output {\n+  111|      1|        let mut future = unsafe { Pin::new_unchecked(&mut future) };\n+  112|      1|\n+  113|      1|        static VTABLE: RawWakerVTable = RawWakerVTable::new(\n+  114|      1|            |_| unimplemented!(\"clone\"),\n+  115|      1|            |_| unimplemented!(\"wake\"),\n+  116|      1|            |_| unimplemented!(\"wake_by_ref\"),\n+  117|      1|            |_| (),\n+  118|      1|        );\n+  119|      1|        let waker = unsafe { Waker::from_raw(RawWaker::new(core::ptr::null(), &VTABLE)) };\n+  120|      1|        let mut context = Context::from_waker(&waker);\n+  121|       |\n+  122|       |        loop {\n+  123|      1|            if let Poll::Ready(val) = future.as_mut().poll(&mut context) {\n+  124|      1|                break val;\n+  125|      0|            }\n+  126|       |        }\n+  127|      1|    }\n+  128|       |}\n "}, {"sha": "0fe124f12d906a366569214d1622764287118777", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.partial_eq.txt", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.partial_eq.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.partial_eq.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.partial_eq.txt?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -45,4 +45,19 @@\n    44|       |`function_source_hash` without a code region, if necessary.\n    45|       |\n    46|       |*/\n+   47|       |\n+   48|       |// FIXME(#79626): The derived traits get coverage, which is great, but some of the traits appear\n+   49|       |// to get two coverage execution counts at different positions:\n+   50|       |//\n+   51|       |// ```text\n+   52|       |//    4|      2|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+   53|       |//                       ^0            ^0      ^0 ^0  ^1       ^0 ^0^0\n+   54|       |// ```text\n+   55|       |//\n+   56|       |// `PartialEq`, `PartialOrd`, and `Ord` (and possibly `Eq`, if the trait name was longer than 2\n+   57|       |// characters) have counts at their first and last characters.\n+   58|       |//\n+   59|       |// Why is this? Why does `PartialOrd` have two values (1 and 0)? This must mean we are checking\n+   60|       |// distinct coverages, so maybe we don't want to eliminate one of them. Should we merge them?\n+   61|       |// If merged, do we lose some information?\n "}, {"sha": "81b355a29acf3a2a6fd8d4459904df43504ae1a0", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -0,0 +1,69 @@\n+../coverage/used_crate/mod.rs:\n+    1|       |#![allow(unused_assignments, unused_variables)]\n+    2|       |\n+    3|       |use std::fmt::Debug;\n+    4|       |\n+    5|      1|pub fn used_function() {\n+    6|       |    // Initialize test constants in a way that cannot be determined at compile time, to ensure\n+    7|       |    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from\n+    8|       |    // dependent conditions.\n+    9|      1|    let is_true = std::env::args().len() == 1;\n+   10|      1|    let mut countdown = 0;\n+   11|      1|    if is_true {\n+   12|      1|        countdown = 10;\n+   13|      1|    }\n+                   ^0\n+   14|      1|    used_twice_generic_function(\"some str\");\n+   15|      1|}\n+   16|       |\n+   17|      1|pub fn used_generic_function<T: Debug>(arg: T) {\n+   18|      1|    println!(\"used_generic_function with {:?}\", arg);\n+   19|      1|}\n+   20|       |\n+   21|      2|pub fn used_twice_generic_function<T: Debug>(arg: T) {\n+   22|      2|    println!(\"used_twice_generic_function with {:?}\", arg);\n+   23|      2|}\n+  ------------------\n+  | uses_crate::used_crate::used_twice_generic_function::<alloc::vec::Vec<i32>>:\n+  |   21|      1|pub fn used_twice_generic_function<T: Debug>(arg: T) {\n+  |   22|      1|    println!(\"used_twice_generic_function with {:?}\", arg);\n+  |   23|      1|}\n+  ------------------\n+  | uses_crate::used_crate::used_twice_generic_function::<&str>:\n+  |   21|      1|pub fn used_twice_generic_function<T: Debug>(arg: T) {\n+  |   22|      1|    println!(\"used_twice_generic_function with {:?}\", arg);\n+  |   23|      1|}\n+  ------------------\n+   24|       |\n+   25|      0|pub fn unused_generic_function<T: Debug>(arg: T) {\n+   26|      0|    println!(\"unused_generic_function with {:?}\", arg);\n+   27|      0|}\n+   28|       |\n+   29|      0|pub fn unused_function() {\n+   30|      0|    let is_true = std::env::args().len() == 1;\n+   31|      0|    let mut countdown = 2;\n+   32|      0|    if !is_true {\n+   33|      0|        countdown = 20;\n+   34|      0|    }\n+   35|      0|}\n+   36|       |\n+   37|      0|fn unused_private_function() {\n+   38|      0|    let is_true = std::env::args().len() == 1;\n+   39|      0|    let mut countdown = 2;\n+   40|      0|    if !is_true {\n+   41|      0|        countdown = 20;\n+   42|      0|    }\n+   43|      0|}\n+\n+../coverage/uses_crate.rs:\n+    1|       |#![allow(unused_assignments, unused_variables)]\n+    2|       |\n+    3|       |mod used_crate;\n+    4|       |\n+    5|      1|fn main() {\n+    6|      1|    used_crate::used_function();\n+    7|      1|    let some_vec = vec![1, 2, 3, 4];\n+    8|      1|    used_crate::used_generic_function(&some_vec);\n+    9|      1|    used_crate::used_twice_generic_function(some_vec);\n+   10|      1|}\n+"}, {"sha": "2fac0fea84b19934da61898417150c135121ad9a", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage_counters.async.txt", "status": "modified", "additions": 44, "deletions": 37, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.async.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.async.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.async.txt?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -26,18 +26,18 @@ Counter in file 0 77:14 -> 77:16, 0\n Counter in file 0 78:14 -> 78:16, 0\n Counter in file 0 79:14 -> 79:16, 0\n Counter in file 0 81:1 -> 81:2, 0\n+Counter in file 0 91:25 -> 91:34, 0\n Counter in file 0 5:1 -> 5:25, #1\n-Counter in file 0 21:1 -> 21:23, #1\n-Counter in file 0 17:20 -> 17:21, #1\n-Counter in file 0 67:5 -> 67:23, #1\n-Counter in file 0 38:1 -> 38:19, #1\n-Counter in file 0 13:20 -> 13:21, #1\n-Counter in file 0 29:1 -> 29:22, #1\n-Counter in file 0 91:1 -> 98:2, #1\n Counter in file 0 5:25 -> 6:14, #1\n Counter in file 0 7:9 -> 7:10, #2\n Counter in file 0 9:9 -> 9:10, (#1 - #2)\n Counter in file 0 11:1 -> 11:2, (#2 + (#1 - #2))\n+Counter in file 0 21:1 -> 21:23, #1\n+Counter in file 0 67:5 -> 67:23, #1\n+Counter in file 0 38:1 -> 38:19, #1\n+Counter in file 0 29:1 -> 29:22, #1\n+Counter in file 0 93:1 -> 101:2, #1\n+Counter in file 0 91:1 -> 91:25, #1\n Counter in file 0 38:19 -> 42:12, #1\n Counter in file 0 43:9 -> 43:10, #3\n Counter in file 0 43:14 -> 43:18, (#1 + 0)\n@@ -53,6 +53,7 @@ Counter in file 0 51:5 -> 52:18, #1\n Counter in file 0 53:13 -> 53:14, #2\n Counter in file 0 63:13 -> 63:14, (#1 - #2)\n Counter in file 0 65:5 -> 65:6, (#2 + (#1 - #2))\n+Counter in file 0 17:20 -> 17:21, #1\n Counter in file 0 49:1 -> 68:12, #1\n Counter in file 0 69:9 -> 69:10, #2\n Counter in file 0 69:14 -> 69:27, (#1 + 0)\n@@ -68,17 +69,18 @@ Counter in file 0 86:14 -> 86:16, #2\n Counter in file 0 87:14 -> 87:16, #3\n Counter in file 0 89:1 -> 89:2, (#3 + (#2 + (#1 - (#3 + #2))))\n Counter in file 0 17:1 -> 17:20, #1\n+Counter in file 0 13:20 -> 13:21, #1\n Counter in file 0 66:5 -> 66:23, #1\n-Counter in file 0 107:5 -> 117:54, #1\n-Counter in file 0 120:32 -> 120:35, ((#1 + #2) - #2)\n-Counter in file 0 120:39 -> 120:73, (#1 + #2)\n-Counter in file 0 121:23 -> 121:26, (((#1 + #2) - #2) + 0)\n-Counter in file 0 122:14 -> 122:15, #2\n-Counter in file 0 124:5 -> 124:6, (((#1 + #2) - #2) + 0)\n-Counter in file 0 114:17 -> 114:19, #1\n Counter in file 0 17:9 -> 17:10, #1\n Counter in file 0 17:9 -> 17:10, #1\n+Counter in file 0 117:17 -> 117:19, #1\n Counter in file 0 17:9 -> 17:10, #1\n+Counter in file 0 110:5 -> 120:54, #1\n+Counter in file 0 123:32 -> 123:35, ((#1 + #2) - #2)\n+Counter in file 0 123:39 -> 123:73, (#1 + #2)\n+Counter in file 0 124:23 -> 124:26, (((#1 + #2) - #2) + 0)\n+Counter in file 0 125:14 -> 125:15, #2\n+Counter in file 0 127:5 -> 127:6, (((#1 + #2) - #2) + 0)\n Emitting segments for file: ../coverage/async.rs\n Combined regions:\n   5:1 -> 5:25 (count=1)\n@@ -149,14 +151,16 @@ Combined regions:\n   86:14 -> 86:16 (count=0)\n   87:14 -> 87:16 (count=1)\n   89:1 -> 89:2 (count=1)\n-  91:1 -> 98:2 (count=1)\n-  107:5 -> 117:54 (count=1)\n-  114:17 -> 114:19 (count=1)\n-  120:32 -> 120:35 (count=1)\n-  120:39 -> 120:73 (count=1)\n-  121:23 -> 121:26 (count=1)\n-  122:14 -> 122:15 (count=0)\n-  124:5 -> 124:6 (count=1)\n+  91:1 -> 91:25 (count=1)\n+  91:25 -> 91:34 (count=0)\n+  93:1 -> 101:2 (count=1)\n+  110:5 -> 120:54 (count=1)\n+  117:17 -> 117:19 (count=1)\n+  123:32 -> 123:35 (count=1)\n+  123:39 -> 123:73 (count=1)\n+  124:23 -> 124:26 (count=1)\n+  125:14 -> 125:15 (count=0)\n+  127:5 -> 127:6 (count=1)\n Segment at 5:1 (count = 1), RegionEntry\n Segment at 5:25 (count = 1), RegionEntry\n Segment at 6:14 (count = 0), Skipped\n@@ -287,18 +291,21 @@ Segment at 87:16 (count = 0), Skipped\n Segment at 89:1 (count = 1), RegionEntry\n Segment at 89:2 (count = 0), Skipped\n Segment at 91:1 (count = 1), RegionEntry\n-Segment at 98:2 (count = 0), Skipped\n-Segment at 107:5 (count = 1), RegionEntry\n-Segment at 114:17 (count = 1), RegionEntry\n-Segment at 114:19 (count = 1)\n-Segment at 117:54 (count = 0), Skipped\n-Segment at 120:32 (count = 1), RegionEntry\n-Segment at 120:35 (count = 0), Skipped\n-Segment at 120:39 (count = 1), RegionEntry\n-Segment at 120:73 (count = 0), Skipped\n-Segment at 121:23 (count = 1), RegionEntry\n-Segment at 121:26 (count = 0), Skipped\n-Segment at 122:14 (count = 0), RegionEntry\n-Segment at 122:15 (count = 0), Skipped\n-Segment at 124:5 (count = 1), RegionEntry\n-Segment at 124:6 (count = 0), Skipped\n+Segment at 91:25 (count = 0), RegionEntry\n+Segment at 91:34 (count = 0), Skipped\n+Segment at 93:1 (count = 1), RegionEntry\n+Segment at 101:2 (count = 0), Skipped\n+Segment at 110:5 (count = 1), RegionEntry\n+Segment at 117:17 (count = 1), RegionEntry\n+Segment at 117:19 (count = 1)\n+Segment at 120:54 (count = 0), Skipped\n+Segment at 123:32 (count = 1), RegionEntry\n+Segment at 123:35 (count = 0), Skipped\n+Segment at 123:39 (count = 1), RegionEntry\n+Segment at 123:73 (count = 0), Skipped\n+Segment at 124:23 (count = 1), RegionEntry\n+Segment at 124:26 (count = 0), Skipped\n+Segment at 125:14 (count = 0), RegionEntry\n+Segment at 125:15 (count = 0), Skipped\n+Segment at 127:5 (count = 1), RegionEntry\n+Segment at 127:6 (count = 0), Skipped"}, {"sha": "8901019f19109511005d456b9ad1c992ca43196a", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage_counters.uses_crate.txt", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.uses_crate.txt?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -0,0 +1,80 @@\n+Counter in file 0 17:1 -> 19:2, #1\n+Counter in file 0 25:1 -> 27:2, 0\n+Counter in file 0 29:1 -> 32:16, 0\n+Counter in file 0 32:17 -> 34:6, 0\n+Counter in file 0 34:6 -> 34:7, 0\n+Counter in file 0 35:1 -> 35:2, 0\n+Counter in file 0 37:1 -> 40:16, 0\n+Counter in file 0 40:17 -> 42:6, 0\n+Counter in file 0 42:6 -> 42:7, 0\n+Counter in file 0 43:1 -> 43:2, 0\n+Counter in file 0 5:1 -> 5:24, #1\n+Counter in file 0 9:9 -> 11:15, (#1 + 0)\n+Counter in file 0 11:16 -> 13:6, #2\n+Counter in file 0 13:6 -> 13:7, (#1 - #2)\n+Counter in file 0 14:5 -> 15:2, (#2 + (#1 - #2))\n+Counter in file 0 21:1 -> 23:2, #1\n+Counter in file 0 21:1 -> 23:2, #1\n+Counter in file 0 5:1 -> 10:2, #1\n+Emitting segments for file: ../coverage/used_crate/mod.rs\n+Combined regions:\n+  5:1 -> 5:24 (count=1)\n+  9:9 -> 11:15 (count=1)\n+  11:16 -> 13:6 (count=1)\n+  13:6 -> 13:7 (count=0)\n+  14:5 -> 15:2 (count=1)\n+  17:1 -> 19:2 (count=1)\n+  21:1 -> 23:2 (count=2)\n+  25:1 -> 27:2 (count=0)\n+  29:1 -> 32:16 (count=0)\n+  32:17 -> 34:6 (count=0)\n+  34:6 -> 34:7 (count=0)\n+  35:1 -> 35:2 (count=0)\n+  37:1 -> 40:16 (count=0)\n+  40:17 -> 42:6 (count=0)\n+  42:6 -> 42:7 (count=0)\n+  43:1 -> 43:2 (count=0)\n+Segment at 5:1 (count = 1), RegionEntry\n+Segment at 5:24 (count = 0), Skipped\n+Segment at 9:9 (count = 1), RegionEntry\n+Segment at 11:15 (count = 0), Skipped\n+Segment at 11:16 (count = 1), RegionEntry\n+Segment at 13:6 (count = 0), RegionEntry\n+Segment at 13:7 (count = 0), Skipped\n+Segment at 14:5 (count = 1), RegionEntry\n+Segment at 15:2 (count = 0), Skipped\n+Segment at 17:1 (count = 1), RegionEntry\n+Segment at 19:2 (count = 0), Skipped\n+Segment at 21:1 (count = 2), RegionEntry\n+Segment at 23:2 (count = 0), Skipped\n+Segment at 25:1 (count = 0), RegionEntry\n+Segment at 27:2 (count = 0), Skipped\n+Segment at 29:1 (count = 0), RegionEntry\n+Segment at 32:16 (count = 0), Skipped\n+Segment at 32:17 (count = 0), RegionEntry\n+Segment at 34:6 (count = 0), RegionEntry\n+Segment at 34:7 (count = 0), Skipped\n+Segment at 35:1 (count = 0), RegionEntry\n+Segment at 35:2 (count = 0), Skipped\n+Segment at 37:1 (count = 0), RegionEntry\n+Segment at 40:16 (count = 0), Skipped\n+Segment at 40:17 (count = 0), RegionEntry\n+Segment at 42:6 (count = 0), RegionEntry\n+Segment at 42:7 (count = 0), Skipped\n+Segment at 43:1 (count = 0), RegionEntry\n+Segment at 43:2 (count = 0), Skipped\n+Emitting segments for function: _RINvNtCs4fqI2P2rA04_10uses_crate10used_crate27used_twice_generic_functionINtNtCs3QflaznQylx_5alloc3vec3VeclEEB4_\n+Combined regions:\n+  21:1 -> 23:2 (count=1)\n+Segment at 21:1 (count = 1), RegionEntry\n+Segment at 23:2 (count = 0), Skipped\n+Emitting segments for function: _RINvNtCs4fqI2P2rA04_10uses_crate10used_crate27used_twice_generic_functionReEB4_\n+Combined regions:\n+  21:1 -> 23:2 (count=1)\n+Segment at 21:1 (count = 1), RegionEntry\n+Segment at 23:2 (count = 0), Skipped\n+Emitting segments for file: ../coverage/uses_crate.rs\n+Combined regions:\n+  5:1 -> 10:2 (count=1)\n+Segment at 5:1 (count = 1), RegionEntry\n+Segment at 10:2 (count = 0), Skipped"}, {"sha": "ef2fe7d06825daf40e7e68dfe22ced004a7b7c32", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.async/async.executor-block_on-VTABLE-{closure#3}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.executor-block_on-VTABLE-%7Bclosure%233%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.executor-block_on-VTABLE-%7Bclosure%233%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.executor-block_on-VTABLE-%7Bclosure%233%7D.-------.InstrumentCoverage.0.html?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -69,7 +69,7 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 113\"><span class=\"line\">            <span class=\"code\" style=\"--layer: 0\">|_| </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"114:17-114:19: @0[0]: _0 = ()\n-114:19-114:19: @0.Return: return\"><span class=\"annotation\">@0\u298a</span>()<span class=\"annotation\">\u2989@0</span></span></span></span></div>\n+<div class=\"code\" style=\"counter-reset: line 116\"><span class=\"line\">            <span class=\"code\" style=\"--layer: 0\">|_| </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"117:17-117:19: @0[0]: _0 = ()\n+117:19-117:19: @0.Return: return\"><span class=\"annotation\">@0\u298a</span>()<span class=\"annotation\">\u2989@0</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "81310c8cb25aa9c55d2cf1f37ad616fdb7f78bf2", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.async/async.executor-block_on.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 163, "deletions": 163, "changes": 326, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.executor-block_on.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.executor-block_on.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.executor-block_on.-------.InstrumentCoverage.0.html?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -69,171 +69,171 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 106\"><span class=\"line\">    <span><span class=\"code even\" style=\"--layer: 1\" title=\"108:54-108:65: @0[2]: _3 = &amp;mut _1\n-108:35-108:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n-108:13-108:23: @1[1]: FakeRead(ForLet, _2)\n-116:60-116:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n-116:80-116:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n-116:79-116:86: @2[4]: _8 = &amp;(*_9)\n-116:79-116:86: @2[5]: _7 = &amp;(*_8)\n-116:46-116:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n-116:30-116:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n-116:13-116:18: @4[1]: FakeRead(ForLet, _4)\n-117:47-117:53: @4[7]: _12 = &amp;_4\n-117:47-117:53: @4[8]: _11 = &amp;(*_12)\n-117:27-117:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n-117:13-117:24: @5[1]: FakeRead(ForLet, _10)\"><span class=\"annotation\">@0,1,2,3,4,5\u298a</span>pub fn block_on&lt;F: Future&gt;(mut future: F) -&gt; F::Output {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"108:54-108:65: @0[2]: _3 = &amp;mut _1\n-108:35-108:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n-108:13-108:23: @1[1]: FakeRead(ForLet, _2)\n-116:60-116:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n-116:80-116:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n-116:79-116:86: @2[4]: _8 = &amp;(*_9)\n-116:79-116:86: @2[5]: _7 = &amp;(*_8)\n-116:46-116:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n-116:30-116:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n-116:13-116:18: @4[1]: FakeRead(ForLet, _4)\n-117:47-117:53: @4[7]: _12 = &amp;_4\n-117:47-117:53: @4[8]: _11 = &amp;(*_12)\n-117:27-117:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n-117:13-117:24: @5[1]: FakeRead(ForLet, _10)\">        let mut future = unsafe { Pin::new_unchecked(&amp;mut future) };</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"108:54-108:65: @0[2]: _3 = &amp;mut _1\n-108:35-108:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n-108:13-108:23: @1[1]: FakeRead(ForLet, _2)\n-116:60-116:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n-116:80-116:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n-116:79-116:86: @2[4]: _8 = &amp;(*_9)\n-116:79-116:86: @2[5]: _7 = &amp;(*_8)\n-116:46-116:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n-116:30-116:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n-116:13-116:18: @4[1]: FakeRead(ForLet, _4)\n-117:47-117:53: @4[7]: _12 = &amp;_4\n-117:47-117:53: @4[8]: _11 = &amp;(*_12)\n-117:27-117:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n-117:13-117:24: @5[1]: FakeRead(ForLet, _10)\"></span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"108:54-108:65: @0[2]: _3 = &amp;mut _1\n-108:35-108:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n-108:13-108:23: @1[1]: FakeRead(ForLet, _2)\n-116:60-116:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n-116:80-116:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n-116:79-116:86: @2[4]: _8 = &amp;(*_9)\n-116:79-116:86: @2[5]: _7 = &amp;(*_8)\n-116:46-116:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n-116:30-116:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n-116:13-116:18: @4[1]: FakeRead(ForLet, _4)\n-117:47-117:53: @4[7]: _12 = &amp;_4\n-117:47-117:53: @4[8]: _11 = &amp;(*_12)\n-117:27-117:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n-117:13-117:24: @5[1]: FakeRead(ForLet, _10)\">        static VTABLE: RawWakerVTable = RawWakerVTable::new(</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"108:54-108:65: @0[2]: _3 = &amp;mut _1\n-108:35-108:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n-108:13-108:23: @1[1]: FakeRead(ForLet, _2)\n-116:60-116:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n-116:80-116:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n-116:79-116:86: @2[4]: _8 = &amp;(*_9)\n-116:79-116:86: @2[5]: _7 = &amp;(*_8)\n-116:46-116:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n-116:30-116:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n-116:13-116:18: @4[1]: FakeRead(ForLet, _4)\n-117:47-117:53: @4[7]: _12 = &amp;_4\n-117:47-117:53: @4[8]: _11 = &amp;(*_12)\n-117:27-117:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n-117:13-117:24: @5[1]: FakeRead(ForLet, _10)\">            |_| unimplemented!(\"clone\"),</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"108:54-108:65: @0[2]: _3 = &amp;mut _1\n-108:35-108:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n-108:13-108:23: @1[1]: FakeRead(ForLet, _2)\n-116:60-116:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n-116:80-116:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n-116:79-116:86: @2[4]: _8 = &amp;(*_9)\n-116:79-116:86: @2[5]: _7 = &amp;(*_8)\n-116:46-116:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n-116:30-116:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n-116:13-116:18: @4[1]: FakeRead(ForLet, _4)\n-117:47-117:53: @4[7]: _12 = &amp;_4\n-117:47-117:53: @4[8]: _11 = &amp;(*_12)\n-117:27-117:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n-117:13-117:24: @5[1]: FakeRead(ForLet, _10)\">            |_| unimplemented!(\"wake\"),</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"108:54-108:65: @0[2]: _3 = &amp;mut _1\n-108:35-108:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n-108:13-108:23: @1[1]: FakeRead(ForLet, _2)\n-116:60-116:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n-116:80-116:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n-116:79-116:86: @2[4]: _8 = &amp;(*_9)\n-116:79-116:86: @2[5]: _7 = &amp;(*_8)\n-116:46-116:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n-116:30-116:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n-116:13-116:18: @4[1]: FakeRead(ForLet, _4)\n-117:47-117:53: @4[7]: _12 = &amp;_4\n-117:47-117:53: @4[8]: _11 = &amp;(*_12)\n-117:27-117:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n-117:13-117:24: @5[1]: FakeRead(ForLet, _10)\">            |_| unimplemented!(\"wake_by_ref\"),</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"108:54-108:65: @0[2]: _3 = &amp;mut _1\n-108:35-108:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n-108:13-108:23: @1[1]: FakeRead(ForLet, _2)\n-116:60-116:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n-116:80-116:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n-116:79-116:86: @2[4]: _8 = &amp;(*_9)\n-116:79-116:86: @2[5]: _7 = &amp;(*_8)\n-116:46-116:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n-116:30-116:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n-116:13-116:18: @4[1]: FakeRead(ForLet, _4)\n-117:47-117:53: @4[7]: _12 = &amp;_4\n-117:47-117:53: @4[8]: _11 = &amp;(*_12)\n-117:27-117:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n-117:13-117:24: @5[1]: FakeRead(ForLet, _10)\">            |_| (),</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"108:54-108:65: @0[2]: _3 = &amp;mut _1\n-108:35-108:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n-108:13-108:23: @1[1]: FakeRead(ForLet, _2)\n-116:60-116:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n-116:80-116:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n-116:79-116:86: @2[4]: _8 = &amp;(*_9)\n-116:79-116:86: @2[5]: _7 = &amp;(*_8)\n-116:46-116:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n-116:30-116:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n-116:13-116:18: @4[1]: FakeRead(ForLet, _4)\n-117:47-117:53: @4[7]: _12 = &amp;_4\n-117:47-117:53: @4[8]: _11 = &amp;(*_12)\n-117:27-117:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n-117:13-117:24: @5[1]: FakeRead(ForLet, _10)\">        );</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"108:54-108:65: @0[2]: _3 = &amp;mut _1\n-108:35-108:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n-108:13-108:23: @1[1]: FakeRead(ForLet, _2)\n-116:60-116:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n-116:80-116:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n-116:79-116:86: @2[4]: _8 = &amp;(*_9)\n-116:79-116:86: @2[5]: _7 = &amp;(*_8)\n-116:46-116:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n-116:30-116:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n-116:13-116:18: @4[1]: FakeRead(ForLet, _4)\n-117:47-117:53: @4[7]: _12 = &amp;_4\n-117:47-117:53: @4[8]: _11 = &amp;(*_12)\n-117:27-117:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n-117:13-117:24: @5[1]: FakeRead(ForLet, _10)\">        let waker = unsafe { Waker::from_raw(RawWaker::new(core::ptr::null(), &amp;VTABLE)) };</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"108:54-108:65: @0[2]: _3 = &amp;mut _1\n-108:35-108:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n-108:13-108:23: @1[1]: FakeRead(ForLet, _2)\n-116:60-116:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n-116:80-116:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n-116:79-116:86: @2[4]: _8 = &amp;(*_9)\n-116:79-116:86: @2[5]: _7 = &amp;(*_8)\n-116:46-116:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n-116:30-116:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n-116:13-116:18: @4[1]: FakeRead(ForLet, _4)\n-117:47-117:53: @4[7]: _12 = &amp;_4\n-117:47-117:53: @4[8]: _11 = &amp;(*_12)\n-117:27-117:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n-117:13-117:24: @5[1]: FakeRead(ForLet, _10)\">        let mut context = Context::from_waker(&amp;waker)<span class=\"annotation\">\u2989@0,1,2,3,4,5</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<div class=\"code\" style=\"counter-reset: line 109\"><span class=\"line\">    <span><span class=\"code even\" style=\"--layer: 1\" title=\"111:54-111:65: @0[2]: _3 = &amp;mut _1\n+111:35-111:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n+111:13-111:23: @1[1]: FakeRead(ForLet, _2)\n+119:60-119:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n+119:80-119:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n+119:79-119:86: @2[4]: _8 = &amp;(*_9)\n+119:79-119:86: @2[5]: _7 = &amp;(*_8)\n+119:46-119:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n+119:30-119:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n+119:13-119:18: @4[1]: FakeRead(ForLet, _4)\n+120:47-120:53: @4[7]: _12 = &amp;_4\n+120:47-120:53: @4[8]: _11 = &amp;(*_12)\n+120:27-120:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n+120:13-120:24: @5[1]: FakeRead(ForLet, _10)\"><span class=\"annotation\">@0,1,2,3,4,5\u298a</span>pub fn block_on&lt;F: Future&gt;(mut future: F) -&gt; F::Output {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"111:54-111:65: @0[2]: _3 = &amp;mut _1\n+111:35-111:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n+111:13-111:23: @1[1]: FakeRead(ForLet, _2)\n+119:60-119:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n+119:80-119:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n+119:79-119:86: @2[4]: _8 = &amp;(*_9)\n+119:79-119:86: @2[5]: _7 = &amp;(*_8)\n+119:46-119:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n+119:30-119:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n+119:13-119:18: @4[1]: FakeRead(ForLet, _4)\n+120:47-120:53: @4[7]: _12 = &amp;_4\n+120:47-120:53: @4[8]: _11 = &amp;(*_12)\n+120:27-120:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n+120:13-120:24: @5[1]: FakeRead(ForLet, _10)\">        let mut future = unsafe { Pin::new_unchecked(&amp;mut future) };</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"111:54-111:65: @0[2]: _3 = &amp;mut _1\n+111:35-111:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n+111:13-111:23: @1[1]: FakeRead(ForLet, _2)\n+119:60-119:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n+119:80-119:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n+119:79-119:86: @2[4]: _8 = &amp;(*_9)\n+119:79-119:86: @2[5]: _7 = &amp;(*_8)\n+119:46-119:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n+119:30-119:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n+119:13-119:18: @4[1]: FakeRead(ForLet, _4)\n+120:47-120:53: @4[7]: _12 = &amp;_4\n+120:47-120:53: @4[8]: _11 = &amp;(*_12)\n+120:27-120:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n+120:13-120:24: @5[1]: FakeRead(ForLet, _10)\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"111:54-111:65: @0[2]: _3 = &amp;mut _1\n+111:35-111:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n+111:13-111:23: @1[1]: FakeRead(ForLet, _2)\n+119:60-119:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n+119:80-119:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n+119:79-119:86: @2[4]: _8 = &amp;(*_9)\n+119:79-119:86: @2[5]: _7 = &amp;(*_8)\n+119:46-119:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n+119:30-119:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n+119:13-119:18: @4[1]: FakeRead(ForLet, _4)\n+120:47-120:53: @4[7]: _12 = &amp;_4\n+120:47-120:53: @4[8]: _11 = &amp;(*_12)\n+120:27-120:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n+120:13-120:24: @5[1]: FakeRead(ForLet, _10)\">        static VTABLE: RawWakerVTable = RawWakerVTable::new(</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"111:54-111:65: @0[2]: _3 = &amp;mut _1\n+111:35-111:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n+111:13-111:23: @1[1]: FakeRead(ForLet, _2)\n+119:60-119:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n+119:80-119:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n+119:79-119:86: @2[4]: _8 = &amp;(*_9)\n+119:79-119:86: @2[5]: _7 = &amp;(*_8)\n+119:46-119:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n+119:30-119:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n+119:13-119:18: @4[1]: FakeRead(ForLet, _4)\n+120:47-120:53: @4[7]: _12 = &amp;_4\n+120:47-120:53: @4[8]: _11 = &amp;(*_12)\n+120:27-120:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n+120:13-120:24: @5[1]: FakeRead(ForLet, _10)\">            |_| unimplemented!(\"clone\"),</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"111:54-111:65: @0[2]: _3 = &amp;mut _1\n+111:35-111:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n+111:13-111:23: @1[1]: FakeRead(ForLet, _2)\n+119:60-119:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n+119:80-119:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n+119:79-119:86: @2[4]: _8 = &amp;(*_9)\n+119:79-119:86: @2[5]: _7 = &amp;(*_8)\n+119:46-119:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n+119:30-119:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n+119:13-119:18: @4[1]: FakeRead(ForLet, _4)\n+120:47-120:53: @4[7]: _12 = &amp;_4\n+120:47-120:53: @4[8]: _11 = &amp;(*_12)\n+120:27-120:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n+120:13-120:24: @5[1]: FakeRead(ForLet, _10)\">            |_| unimplemented!(\"wake\"),</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"111:54-111:65: @0[2]: _3 = &amp;mut _1\n+111:35-111:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n+111:13-111:23: @1[1]: FakeRead(ForLet, _2)\n+119:60-119:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n+119:80-119:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n+119:79-119:86: @2[4]: _8 = &amp;(*_9)\n+119:79-119:86: @2[5]: _7 = &amp;(*_8)\n+119:46-119:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n+119:30-119:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n+119:13-119:18: @4[1]: FakeRead(ForLet, _4)\n+120:47-120:53: @4[7]: _12 = &amp;_4\n+120:47-120:53: @4[8]: _11 = &amp;(*_12)\n+120:27-120:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n+120:13-120:24: @5[1]: FakeRead(ForLet, _10)\">            |_| unimplemented!(\"wake_by_ref\"),</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"111:54-111:65: @0[2]: _3 = &amp;mut _1\n+111:35-111:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n+111:13-111:23: @1[1]: FakeRead(ForLet, _2)\n+119:60-119:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n+119:80-119:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n+119:79-119:86: @2[4]: _8 = &amp;(*_9)\n+119:79-119:86: @2[5]: _7 = &amp;(*_8)\n+119:46-119:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n+119:30-119:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n+119:13-119:18: @4[1]: FakeRead(ForLet, _4)\n+120:47-120:53: @4[7]: _12 = &amp;_4\n+120:47-120:53: @4[8]: _11 = &amp;(*_12)\n+120:27-120:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n+120:13-120:24: @5[1]: FakeRead(ForLet, _10)\">            |_| (),</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"111:54-111:65: @0[2]: _3 = &amp;mut _1\n+111:35-111:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n+111:13-111:23: @1[1]: FakeRead(ForLet, _2)\n+119:60-119:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n+119:80-119:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n+119:79-119:86: @2[4]: _8 = &amp;(*_9)\n+119:79-119:86: @2[5]: _7 = &amp;(*_8)\n+119:46-119:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n+119:30-119:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n+119:13-119:18: @4[1]: FakeRead(ForLet, _4)\n+120:47-120:53: @4[7]: _12 = &amp;_4\n+120:47-120:53: @4[8]: _11 = &amp;(*_12)\n+120:27-120:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n+120:13-120:24: @5[1]: FakeRead(ForLet, _10)\">        );</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"111:54-111:65: @0[2]: _3 = &amp;mut _1\n+111:35-111:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n+111:13-111:23: @1[1]: FakeRead(ForLet, _2)\n+119:60-119:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n+119:80-119:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n+119:79-119:86: @2[4]: _8 = &amp;(*_9)\n+119:79-119:86: @2[5]: _7 = &amp;(*_8)\n+119:46-119:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n+119:30-119:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n+119:13-119:18: @4[1]: FakeRead(ForLet, _4)\n+120:47-120:53: @4[7]: _12 = &amp;_4\n+120:47-120:53: @4[8]: _11 = &amp;(*_12)\n+120:27-120:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n+120:13-120:24: @5[1]: FakeRead(ForLet, _10)\">        let waker = unsafe { Waker::from_raw(RawWaker::new(core::ptr::null(), &amp;VTABLE)) };</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"111:54-111:65: @0[2]: _3 = &amp;mut _1\n+111:35-111:66: @0.Call: _2 = Pin::&lt;&amp;mut F&gt;::new_unchecked(move _3) -&gt; [return: bb1, unwind: bb20]\n+111:13-111:23: @1[1]: FakeRead(ForLet, _2)\n+119:60-119:77: @1.Call: _6 = null::&lt;()&gt;() -&gt; [return: bb2, unwind: bb20]\n+119:80-119:86: @2[3]: _9 = const {alloc0: &amp;RawWakerVTable}\n+119:79-119:86: @2[4]: _8 = &amp;(*_9)\n+119:79-119:86: @2[5]: _7 = &amp;(*_8)\n+119:46-119:87: @2.Call: _5 = RawWaker::new(move _6, move _7) -&gt; [return: bb3, unwind: bb20]\n+119:30-119:88: @3.Call: _4 = Waker::from_raw(move _5) -&gt; [return: bb4, unwind: bb20]\n+119:13-119:18: @4[1]: FakeRead(ForLet, _4)\n+120:47-120:53: @4[7]: _12 = &amp;_4\n+120:47-120:53: @4[8]: _11 = &amp;(*_12)\n+120:27-120:54: @4.Call: _10 = Context::from_waker(move _11) -&gt; [return: bb5, unwind: bb19]\n+120:13-120:24: @5[1]: FakeRead(ForLet, _10)\">        let mut context = Context::from_waker(&amp;waker)<span class=\"annotation\">\u2989@0,1,2,3,4,5</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        loop {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if let Poll::Ready(</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"120:32-120:35: @12[1]: _20 = move ((_14 as Ready).0: &lt;F as std::future::Future&gt;::Output)\"><span class=\"annotation\">@10,12,14,15,16,17\u298a</span>val<span class=\"annotation\">\u2989@10,12,14,15,16,17</span></span></span><span class=\"code\" style=\"--layer: 0\">) = </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"120:39-120:45: @7[3]: _16 = &amp;mut _2\n-120:39-120:54: @7.Call: _15 = Pin::&lt;&amp;mut F&gt;::as_mut(move _16) -&gt; [return: bb8, unwind: bb19]\n-120:60-120:72: @8[3]: _18 = &amp;mut _10\n-120:60-120:72: @8[4]: _17 = &amp;mut (*_18)\n-120:39-120:73: @8.Call: _14 = &lt;F as Future&gt;::poll(move _15, move _17) -&gt; [return: bb9, unwind: bb19]\n-120:39-120:73: @9[2]: FakeRead(ForMatchedPlace, _14)\"><span class=\"annotation\">@6,7,8,9\u298a</span>future.as_mut().poll(&amp;mut context)<span class=\"annotation\">\u2989@6,7,8,9</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                break </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"121:23-121:26: @12[2]: _0 = move _20\"><span class=\"annotation\">@10,12,14,15,16,17\u298a</span>val<span class=\"annotation\">\u2989@10,12,14,15,16,17</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"122:14-122:14: @11[0]: _13 = const ()\"><span class=\"annotation\">@11,13\u298a</span>\u2038<span class=\"annotation\">\u2989@11,13</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if let Poll::Ready(</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"123:32-123:35: @12[1]: _20 = move ((_14 as Ready).0: &lt;F as std::future::Future&gt;::Output)\"><span class=\"annotation\">@10,12,14,15,16,17\u298a</span>val<span class=\"annotation\">\u2989@10,12,14,15,16,17</span></span></span><span class=\"code\" style=\"--layer: 0\">) = </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"123:39-123:45: @7[3]: _16 = &amp;mut _2\n+123:39-123:54: @7.Call: _15 = Pin::&lt;&amp;mut F&gt;::as_mut(move _16) -&gt; [return: bb8, unwind: bb19]\n+123:60-123:72: @8[3]: _18 = &amp;mut _10\n+123:60-123:72: @8[4]: _17 = &amp;mut (*_18)\n+123:39-123:73: @8.Call: _14 = &lt;F as Future&gt;::poll(move _15, move _17) -&gt; [return: bb9, unwind: bb19]\n+123:39-123:73: @9[2]: FakeRead(ForMatchedPlace, _14)\"><span class=\"annotation\">@6,7,8,9\u298a</span>future.as_mut().poll(&amp;mut context)<span class=\"annotation\">\u2989@6,7,8,9</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                break </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"124:23-124:26: @12[2]: _0 = move _20\"><span class=\"annotation\">@10,12,14,15,16,17\u298a</span>val<span class=\"annotation\">\u2989@10,12,14,15,16,17</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"125:14-125:14: @11[0]: _13 = const ()\"><span class=\"annotation\">@11,13\u298a</span>\u2038<span class=\"annotation\">\u2989@11,13</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"124:6-124:6: @17.Return: return\"><span class=\"annotation\">@10,12,14,15,16,17\u298a</span>\u2038<span class=\"annotation\">\u2989@10,12,14,15,16,17</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"127:6-127:6: @17.Return: return\"><span class=\"annotation\">@10,12,14,15,16,17\u298a</span>\u2038<span class=\"annotation\">\u2989@10,12,14,15,16,17</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "9cf86ce34a04dbc3dd5657b1c8a02a4abad5e288", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.async/async.m-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.m-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.m-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.m-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -0,0 +1,79 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.async/async.m-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>async.m-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 90\"><span class=\"line\">                        <span><span class=\"code even\" style=\"--layer: 1\" title=\"91:25-91:34: @0[1]: _3 = (_1.0: u8)\n+91:25-91:34: @0[2]: FakeRead(ForLet, _3)\n+91:27-91:28: @0[4]: _4 = _3\n+91:27-91:32: @0[5]: _5 = CheckedSub(_4, const 1_u8)\n+91:27-91:32: @1[0]: _0 = move (_5.0: u8)\n+91:34-91:34: @1.Return: return\"><span class=\"annotation\">@0,1\u298a</span>{ x - 1 }<span class=\"annotation\">\u2989@0,1</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "04412c1d9942780ec21622e5ed8827a5cbbf5eff", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.async/async.m.-------.InstrumentCoverage.0.html", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.m.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.m.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.m.-------.InstrumentCoverage.0.html?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -0,0 +1,74 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.async/async.m.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>async.m - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 90\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0,1\u298a</span>async fn m(x: u8) -&gt; u8 <span class=\"annotation\">\u2989@0,1</span></span></span><span class=\"code\" style=\"--layer: 0\">{ x - 1 }</span></span></div>\n+</body>\n+</html>"}, {"sha": "313a36ed6c2f27192ed8704f63bd88bf5b4567d1", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.async/async.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 117, "deletions": 96, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.async%2Fasync.main.-------.InstrumentCoverage.0.html?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -69,101 +69,122 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 90\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"92:13-92:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb14]\n-93:13-93:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb14]\n-94:31-94:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb14]\n-94:22-94:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb13]\n-94:9-94:19: @6[1]: FakeRead(ForLet, _3)\n-95:5-95:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb12]\n-96:5-96:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb12]\n-97:24-97:30: @8[4]: _9 = &amp;mut _3\n-97:24-97:39: @8.Call: _8 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _9) -&gt; [return: bb9, unwind: bb12]\n-97:5-97:40: @9.Call: _7 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _8) -&gt; [return: bb10, unwind: bb12]\n-91:11-98:2: @10[2]: _0 = const ()\n-98:2-98:2: @11.Return: return\"><span class=\"annotation\">@0,1,2,3,4,5,6,7,8,9,10,11\u298a</span>fn main() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"92:13-92:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb14]\n-93:13-93:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb14]\n-94:31-94:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb14]\n-94:22-94:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb13]\n-94:9-94:19: @6[1]: FakeRead(ForLet, _3)\n-95:5-95:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb12]\n-96:5-96:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb12]\n-97:24-97:30: @8[4]: _9 = &amp;mut _3\n-97:24-97:39: @8.Call: _8 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _9) -&gt; [return: bb9, unwind: bb12]\n-97:5-97:40: @9.Call: _7 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _8) -&gt; [return: bb10, unwind: bb12]\n-91:11-98:2: @10[2]: _0 = const ()\n-98:2-98:2: @11.Return: return\">    let _ = g(10);</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"92:13-92:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb14]\n-93:13-93:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb14]\n-94:31-94:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb14]\n-94:22-94:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb13]\n-94:9-94:19: @6[1]: FakeRead(ForLet, _3)\n-95:5-95:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb12]\n-96:5-96:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb12]\n-97:24-97:30: @8[4]: _9 = &amp;mut _3\n-97:24-97:39: @8.Call: _8 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _9) -&gt; [return: bb9, unwind: bb12]\n-97:5-97:40: @9.Call: _7 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _8) -&gt; [return: bb10, unwind: bb12]\n-91:11-98:2: @10[2]: _0 = const ()\n-98:2-98:2: @11.Return: return\">    let _ = h(9);</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"92:13-92:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb14]\n-93:13-93:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb14]\n-94:31-94:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb14]\n-94:22-94:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb13]\n-94:9-94:19: @6[1]: FakeRead(ForLet, _3)\n-95:5-95:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb12]\n-96:5-96:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb12]\n-97:24-97:30: @8[4]: _9 = &amp;mut _3\n-97:24-97:39: @8.Call: _8 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _9) -&gt; [return: bb9, unwind: bb12]\n-97:5-97:40: @9.Call: _7 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _8) -&gt; [return: bb10, unwind: bb12]\n-91:11-98:2: @10[2]: _0 = const ()\n-98:2-98:2: @11.Return: return\">    let mut future = Box::pin(i(8));</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"92:13-92:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb14]\n-93:13-93:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb14]\n-94:31-94:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb14]\n-94:22-94:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb13]\n-94:9-94:19: @6[1]: FakeRead(ForLet, _3)\n-95:5-95:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb12]\n-96:5-96:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb12]\n-97:24-97:30: @8[4]: _9 = &amp;mut _3\n-97:24-97:39: @8.Call: _8 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _9) -&gt; [return: bb9, unwind: bb12]\n-97:5-97:40: @9.Call: _7 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _8) -&gt; [return: bb10, unwind: bb12]\n-91:11-98:2: @10[2]: _0 = const ()\n-98:2-98:2: @11.Return: return\">    j(7);</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"92:13-92:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb14]\n-93:13-93:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb14]\n-94:31-94:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb14]\n-94:22-94:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb13]\n-94:9-94:19: @6[1]: FakeRead(ForLet, _3)\n-95:5-95:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb12]\n-96:5-96:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb12]\n-97:24-97:30: @8[4]: _9 = &amp;mut _3\n-97:24-97:39: @8.Call: _8 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _9) -&gt; [return: bb9, unwind: bb12]\n-97:5-97:40: @9.Call: _7 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _8) -&gt; [return: bb10, unwind: bb12]\n-91:11-98:2: @10[2]: _0 = const ()\n-98:2-98:2: @11.Return: return\">    l(6);</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"92:13-92:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb14]\n-93:13-93:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb14]\n-94:31-94:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb14]\n-94:22-94:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb13]\n-94:9-94:19: @6[1]: FakeRead(ForLet, _3)\n-95:5-95:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb12]\n-96:5-96:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb12]\n-97:24-97:30: @8[4]: _9 = &amp;mut _3\n-97:24-97:39: @8.Call: _8 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _9) -&gt; [return: bb9, unwind: bb12]\n-97:5-97:40: @9.Call: _7 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _8) -&gt; [return: bb10, unwind: bb12]\n-91:11-98:2: @10[2]: _0 = const ()\n-98:2-98:2: @11.Return: return\">    executor::block_on(future.as_mut());</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"92:13-92:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb14]\n-93:13-93:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb14]\n-94:31-94:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb14]\n-94:22-94:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb13]\n-94:9-94:19: @6[1]: FakeRead(ForLet, _3)\n-95:5-95:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb12]\n-96:5-96:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb12]\n-97:24-97:30: @8[4]: _9 = &amp;mut _3\n-97:24-97:39: @8.Call: _8 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _9) -&gt; [return: bb9, unwind: bb12]\n-97:5-97:40: @9.Call: _7 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _8) -&gt; [return: bb10, unwind: bb12]\n-91:11-98:2: @10[2]: _0 = const ()\n-98:2-98:2: @11.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4,5,6,7,8,9,10,11</span></span></span></span></div>\n+<div class=\"code\" style=\"counter-reset: line 92\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"94:13-94:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb16]\n+95:13-95:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb16]\n+96:31-96:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb16]\n+96:22-96:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb15]\n+96:9-96:19: @6[1]: FakeRead(ForLet, _3)\n+97:5-97:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb14]\n+98:5-98:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb14]\n+99:13-99:17: @8.Call: _7 = m(const 5_u8) -&gt; [return: bb9, unwind: bb14]\n+100:24-100:30: @10[4]: _10 = &amp;mut _3\n+100:24-100:39: @10.Call: _9 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _10) -&gt; [return: bb11, unwind: bb14]\n+100:5-100:40: @11.Call: _8 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _9) -&gt; [return: bb12, unwind: bb14]\n+93:11-101:2: @12[2]: _0 = const ()\n+101:2-101:2: @13.Return: return\"><span class=\"annotation\">@0,1,2,3,4,5,6,7,8,9,10,11,12,13\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"94:13-94:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb16]\n+95:13-95:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb16]\n+96:31-96:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb16]\n+96:22-96:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb15]\n+96:9-96:19: @6[1]: FakeRead(ForLet, _3)\n+97:5-97:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb14]\n+98:5-98:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb14]\n+99:13-99:17: @8.Call: _7 = m(const 5_u8) -&gt; [return: bb9, unwind: bb14]\n+100:24-100:30: @10[4]: _10 = &amp;mut _3\n+100:24-100:39: @10.Call: _9 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _10) -&gt; [return: bb11, unwind: bb14]\n+100:5-100:40: @11.Call: _8 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _9) -&gt; [return: bb12, unwind: bb14]\n+93:11-101:2: @12[2]: _0 = const ()\n+101:2-101:2: @13.Return: return\">    let _ = g(10);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"94:13-94:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb16]\n+95:13-95:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb16]\n+96:31-96:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb16]\n+96:22-96:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb15]\n+96:9-96:19: @6[1]: FakeRead(ForLet, _3)\n+97:5-97:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb14]\n+98:5-98:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb14]\n+99:13-99:17: @8.Call: _7 = m(const 5_u8) -&gt; [return: bb9, unwind: bb14]\n+100:24-100:30: @10[4]: _10 = &amp;mut _3\n+100:24-100:39: @10.Call: _9 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _10) -&gt; [return: bb11, unwind: bb14]\n+100:5-100:40: @11.Call: _8 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _9) -&gt; [return: bb12, unwind: bb14]\n+93:11-101:2: @12[2]: _0 = const ()\n+101:2-101:2: @13.Return: return\">    let _ = h(9);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"94:13-94:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb16]\n+95:13-95:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb16]\n+96:31-96:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb16]\n+96:22-96:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb15]\n+96:9-96:19: @6[1]: FakeRead(ForLet, _3)\n+97:5-97:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb14]\n+98:5-98:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb14]\n+99:13-99:17: @8.Call: _7 = m(const 5_u8) -&gt; [return: bb9, unwind: bb14]\n+100:24-100:30: @10[4]: _10 = &amp;mut _3\n+100:24-100:39: @10.Call: _9 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _10) -&gt; [return: bb11, unwind: bb14]\n+100:5-100:40: @11.Call: _8 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _9) -&gt; [return: bb12, unwind: bb14]\n+93:11-101:2: @12[2]: _0 = const ()\n+101:2-101:2: @13.Return: return\">    let mut future = Box::pin(i(8));</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"94:13-94:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb16]\n+95:13-95:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb16]\n+96:31-96:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb16]\n+96:22-96:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb15]\n+96:9-96:19: @6[1]: FakeRead(ForLet, _3)\n+97:5-97:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb14]\n+98:5-98:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb14]\n+99:13-99:17: @8.Call: _7 = m(const 5_u8) -&gt; [return: bb9, unwind: bb14]\n+100:24-100:30: @10[4]: _10 = &amp;mut _3\n+100:24-100:39: @10.Call: _9 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _10) -&gt; [return: bb11, unwind: bb14]\n+100:5-100:40: @11.Call: _8 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _9) -&gt; [return: bb12, unwind: bb14]\n+93:11-101:2: @12[2]: _0 = const ()\n+101:2-101:2: @13.Return: return\">    j(7);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"94:13-94:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb16]\n+95:13-95:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb16]\n+96:31-96:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb16]\n+96:22-96:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb15]\n+96:9-96:19: @6[1]: FakeRead(ForLet, _3)\n+97:5-97:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb14]\n+98:5-98:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb14]\n+99:13-99:17: @8.Call: _7 = m(const 5_u8) -&gt; [return: bb9, unwind: bb14]\n+100:24-100:30: @10[4]: _10 = &amp;mut _3\n+100:24-100:39: @10.Call: _9 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _10) -&gt; [return: bb11, unwind: bb14]\n+100:5-100:40: @11.Call: _8 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _9) -&gt; [return: bb12, unwind: bb14]\n+93:11-101:2: @12[2]: _0 = const ()\n+101:2-101:2: @13.Return: return\">    l(6);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"94:13-94:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb16]\n+95:13-95:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb16]\n+96:31-96:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb16]\n+96:22-96:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb15]\n+96:9-96:19: @6[1]: FakeRead(ForLet, _3)\n+97:5-97:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb14]\n+98:5-98:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb14]\n+99:13-99:17: @8.Call: _7 = m(const 5_u8) -&gt; [return: bb9, unwind: bb14]\n+100:24-100:30: @10[4]: _10 = &amp;mut _3\n+100:24-100:39: @10.Call: _9 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _10) -&gt; [return: bb11, unwind: bb14]\n+100:5-100:40: @11.Call: _8 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _9) -&gt; [return: bb12, unwind: bb14]\n+93:11-101:2: @12[2]: _0 = const ()\n+101:2-101:2: @13.Return: return\">    let _ = m(5);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"94:13-94:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb16]\n+95:13-95:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb16]\n+96:31-96:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb16]\n+96:22-96:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb15]\n+96:9-96:19: @6[1]: FakeRead(ForLet, _3)\n+97:5-97:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb14]\n+98:5-98:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb14]\n+99:13-99:17: @8.Call: _7 = m(const 5_u8) -&gt; [return: bb9, unwind: bb14]\n+100:24-100:30: @10[4]: _10 = &amp;mut _3\n+100:24-100:39: @10.Call: _9 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _10) -&gt; [return: bb11, unwind: bb14]\n+100:5-100:40: @11.Call: _8 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _9) -&gt; [return: bb12, unwind: bb14]\n+93:11-101:2: @12[2]: _0 = const ()\n+101:2-101:2: @13.Return: return\">    executor::block_on(future.as_mut());</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"94:13-94:18: @0.Call: _1 = g(const 10_u8) -&gt; [return: bb1, unwind: bb16]\n+95:13-95:17: @2.Call: _2 = h(const 9_usize) -&gt; [return: bb3, unwind: bb16]\n+96:31-96:35: @4.Call: _4 = i(const 8_u8) -&gt; [return: bb5, unwind: bb16]\n+96:22-96:36: @5.Call: _3 = Box::&lt;impl Future&gt;::pin(move _4) -&gt; [return: bb6, unwind: bb15]\n+96:9-96:19: @6[1]: FakeRead(ForLet, _3)\n+97:5-97:9: @6.Call: _5 = j(const 7_u8) -&gt; [return: bb7, unwind: bb14]\n+98:5-98:9: @7.Call: _6 = l(const 6_u8) -&gt; [return: bb8, unwind: bb14]\n+99:13-99:17: @8.Call: _7 = m(const 5_u8) -&gt; [return: bb9, unwind: bb14]\n+100:24-100:30: @10[4]: _10 = &amp;mut _3\n+100:24-100:39: @10.Call: _9 = Pin::&lt;Box&lt;impl Future&gt;&gt;::as_mut(move _10) -&gt; [return: bb11, unwind: bb14]\n+100:5-100:40: @11.Call: _8 = block_on::&lt;Pin&lt;&amp;mut impl Future&gt;&gt;(move _9) -&gt; [return: bb12, unwind: bb14]\n+93:11-101:2: @12[2]: _0 = const ()\n+101:2-101:2: @13.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4,5,6,7,8,9,10,11,12,13</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "52c99558de6c525389b12b3f1a1ac370efe318db", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.main.-------.InstrumentCoverage.0.html?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -0,0 +1,151 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>uses_crate.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb12]\n+7:20-7:36: @1[5]: _5 = Box([i32; 4])\n+7:20-7:36: @1[6]: (*_5) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+7:20-7:36: @1[7]: _4 = move _5\n+7:20-7:36: @1[8]: _3 = move _4 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb11]\n+7:9-7:17: @4[1]: FakeRead(ForLet, _2)\n+8:39-8:48: @4[4]: _7 = &amp;_2\n+8:5-8:49: @4.Call: _6 = used_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb9]\n+9:45-9:53: @5[4]: _9 = move _2\n+9:5-9:54: @5.Call: _8 = used_twice_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _9) -&gt; [return: bb6, unwind: bb8]\n+5:11-10:2: @6[2]: _0 = const ()\n+10:2-10:2: @7.Return: return\"><span class=\"annotation\">@0,1,2,3,4,5,6,7\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb12]\n+7:20-7:36: @1[5]: _5 = Box([i32; 4])\n+7:20-7:36: @1[6]: (*_5) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+7:20-7:36: @1[7]: _4 = move _5\n+7:20-7:36: @1[8]: _3 = move _4 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb11]\n+7:9-7:17: @4[1]: FakeRead(ForLet, _2)\n+8:39-8:48: @4[4]: _7 = &amp;_2\n+8:5-8:49: @4.Call: _6 = used_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb9]\n+9:45-9:53: @5[4]: _9 = move _2\n+9:5-9:54: @5.Call: _8 = used_twice_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _9) -&gt; [return: bb6, unwind: bb8]\n+5:11-10:2: @6[2]: _0 = const ()\n+10:2-10:2: @7.Return: return\">    used_crate::used_function();</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb12]\n+7:20-7:36: @1[5]: _5 = Box([i32; 4])\n+7:20-7:36: @1[6]: (*_5) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+7:20-7:36: @1[7]: _4 = move _5\n+7:20-7:36: @1[8]: _3 = move _4 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb11]\n+7:9-7:17: @4[1]: FakeRead(ForLet, _2)\n+8:39-8:48: @4[4]: _7 = &amp;_2\n+8:5-8:49: @4.Call: _6 = used_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb9]\n+9:45-9:53: @5[4]: _9 = move _2\n+9:5-9:54: @5.Call: _8 = used_twice_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _9) -&gt; [return: bb6, unwind: bb8]\n+5:11-10:2: @6[2]: _0 = const ()\n+10:2-10:2: @7.Return: return\">    let some_vec = vec![1, 2, 3, 4];</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb12]\n+7:20-7:36: @1[5]: _5 = Box([i32; 4])\n+7:20-7:36: @1[6]: (*_5) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+7:20-7:36: @1[7]: _4 = move _5\n+7:20-7:36: @1[8]: _3 = move _4 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb11]\n+7:9-7:17: @4[1]: FakeRead(ForLet, _2)\n+8:39-8:48: @4[4]: _7 = &amp;_2\n+8:5-8:49: @4.Call: _6 = used_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb9]\n+9:45-9:53: @5[4]: _9 = move _2\n+9:5-9:54: @5.Call: _8 = used_twice_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _9) -&gt; [return: bb6, unwind: bb8]\n+5:11-10:2: @6[2]: _0 = const ()\n+10:2-10:2: @7.Return: return\">    used_crate::used_generic_function(&amp;some_vec);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb12]\n+7:20-7:36: @1[5]: _5 = Box([i32; 4])\n+7:20-7:36: @1[6]: (*_5) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+7:20-7:36: @1[7]: _4 = move _5\n+7:20-7:36: @1[8]: _3 = move _4 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb11]\n+7:9-7:17: @4[1]: FakeRead(ForLet, _2)\n+8:39-8:48: @4[4]: _7 = &amp;_2\n+8:5-8:49: @4.Call: _6 = used_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb9]\n+9:45-9:53: @5[4]: _9 = move _2\n+9:5-9:54: @5.Call: _8 = used_twice_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _9) -&gt; [return: bb6, unwind: bb8]\n+5:11-10:2: @6[2]: _0 = const ()\n+10:2-10:2: @7.Return: return\">    used_crate::used_twice_generic_function(some_vec);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb12]\n+7:20-7:36: @1[5]: _5 = Box([i32; 4])\n+7:20-7:36: @1[6]: (*_5) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+7:20-7:36: @1[7]: _4 = move _5\n+7:20-7:36: @1[8]: _3 = move _4 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb11]\n+7:9-7:17: @4[1]: FakeRead(ForLet, _2)\n+8:39-8:48: @4[4]: _7 = &amp;_2\n+8:5-8:49: @4.Call: _6 = used_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb9]\n+9:45-9:53: @5[4]: _9 = move _2\n+9:5-9:54: @5.Call: _8 = used_twice_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _9) -&gt; [return: bb6, unwind: bb8]\n+5:11-10:2: @6[2]: _0 = const ()\n+10:2-10:2: @7.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4,5,6,7</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "42ba0458349ff12ed2ae773a911460adf6c4e804", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-unused_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-unused_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-unused_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-unused_function.-------.InstrumentCoverage.0.html?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -0,0 +1,119 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-unused_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>uses_crate.used_crate-unused_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 28\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:19-30:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+30:19-30:35: @1[0]: _3 = &amp;_4\n+30:19-30:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+30:19-30:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+30:9-30:16: @2[3]: FakeRead(ForLet, _1)\n+31:25-31:26: @3[2]: _5 = const 2_i32\n+31:9-31:22: @3[3]: FakeRead(ForLet, _5)\n+32:9-32:16: @3[6]: _7 = _1\n+32:8-32:16: @3[7]: _6 = Not(move _7)\n+32:8-32:16: @3[9]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@0,1,2,3\u298a</span>pub fn unused_function() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:19-30:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+30:19-30:35: @1[0]: _3 = &amp;_4\n+30:19-30:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+30:19-30:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+30:9-30:16: @2[3]: FakeRead(ForLet, _1)\n+31:25-31:26: @3[2]: _5 = const 2_i32\n+31:9-31:22: @3[3]: FakeRead(ForLet, _5)\n+32:9-32:16: @3[6]: _7 = _1\n+32:8-32:16: @3[7]: _6 = Not(move _7)\n+32:8-32:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:19-30:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+30:19-30:35: @1[0]: _3 = &amp;_4\n+30:19-30:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+30:19-30:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+30:9-30:16: @2[3]: FakeRead(ForLet, _1)\n+31:25-31:26: @3[2]: _5 = const 2_i32\n+31:9-31:22: @3[3]: FakeRead(ForLet, _5)\n+32:9-32:16: @3[6]: _7 = _1\n+32:8-32:16: @3[7]: _6 = Not(move _7)\n+32:8-32:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    let mut countdown = 2;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:19-30:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+30:19-30:35: @1[0]: _3 = &amp;_4\n+30:19-30:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+30:19-30:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+30:9-30:16: @2[3]: FakeRead(ForLet, _1)\n+31:25-31:26: @3[2]: _5 = const 2_i32\n+31:9-31:22: @3[3]: FakeRead(ForLet, _5)\n+32:9-32:16: @3[6]: _7 = _1\n+32:8-32:16: @3[7]: _6 = Not(move _7)\n+32:8-32:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    if !is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"33:9-33:23: @6[0]: _5 = const 20_i32\n+32:17-34:6: @6[1]: _0 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"33:9-33:23: @6[0]: _5 = const 20_i32\n+32:17-34:6: @6[1]: _0 = const ()\">        countdown = 20;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"33:9-33:23: @6[0]: _5 = const 20_i32\n+32:17-34:6: @6[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"34:6-34:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:2-35:2: @7.Return: return\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "d89963a32ce6c7174c5580f2cf89e39a6ae2f58d", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-unused_generic_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-unused_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-unused_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-unused_generic_function.-------.InstrumentCoverage.0.html?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -0,0 +1,133 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-unused_generic_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>uses_crate.used_crate-unused_generic_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 24\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:14-26:49: @0[6]: _19 = const unused_generic_function::&lt;T&gt;::promoted[0]\n+26:14-26:49: @0[7]: _7 = &amp;(*_19)\n+26:14-26:49: @0[8]: _6 = &amp;(*_7)\n+26:14-26:49: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+26:51-26:54: @0[17]: _14 = &amp;_1\n+26:5-26:56: @0[18]: _13 = (move _14,)\n+26:5-26:56: @0[20]: FakeRead(ForMatchedPlace, _13)\n+26:5-26:56: @0[22]: _15 = (_13.0: &amp;T)\n+26:5-26:56: @0[25]: _17 = &amp;(*_15)\n+26:5-26:56: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+26:5-26:56: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+26:5-26:56: @1[2]: _12 = [move _16]\n+26:5-26:56: @1[5]: _11 = &amp;_12\n+26:5-26:56: @1[6]: _10 = &amp;(*_11)\n+26:5-26:56: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+26:5-26:56: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+26:5-26:56: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+26:5-26:56: @3[6]: _2 = const ()\n+25:50-27:2: @3[8]: _0 = const ()\n+27:2-27:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn unused_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"26:14-26:49: @0[6]: _19 = const unused_generic_function::&lt;T&gt;::promoted[0]\n+26:14-26:49: @0[7]: _7 = &amp;(*_19)\n+26:14-26:49: @0[8]: _6 = &amp;(*_7)\n+26:14-26:49: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+26:51-26:54: @0[17]: _14 = &amp;_1\n+26:5-26:56: @0[18]: _13 = (move _14,)\n+26:5-26:56: @0[20]: FakeRead(ForMatchedPlace, _13)\n+26:5-26:56: @0[22]: _15 = (_13.0: &amp;T)\n+26:5-26:56: @0[25]: _17 = &amp;(*_15)\n+26:5-26:56: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+26:5-26:56: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+26:5-26:56: @1[2]: _12 = [move _16]\n+26:5-26:56: @1[5]: _11 = &amp;_12\n+26:5-26:56: @1[6]: _10 = &amp;(*_11)\n+26:5-26:56: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+26:5-26:56: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+26:5-26:56: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+26:5-26:56: @3[6]: _2 = const ()\n+25:50-27:2: @3[8]: _0 = const ()\n+27:2-27:2: @4.Return: return\">    println!(\"unused_generic_function with {:?}\", arg);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"26:14-26:49: @0[6]: _19 = const unused_generic_function::&lt;T&gt;::promoted[0]\n+26:14-26:49: @0[7]: _7 = &amp;(*_19)\n+26:14-26:49: @0[8]: _6 = &amp;(*_7)\n+26:14-26:49: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+26:51-26:54: @0[17]: _14 = &amp;_1\n+26:5-26:56: @0[18]: _13 = (move _14,)\n+26:5-26:56: @0[20]: FakeRead(ForMatchedPlace, _13)\n+26:5-26:56: @0[22]: _15 = (_13.0: &amp;T)\n+26:5-26:56: @0[25]: _17 = &amp;(*_15)\n+26:5-26:56: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+26:5-26:56: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+26:5-26:56: @1[2]: _12 = [move _16]\n+26:5-26:56: @1[5]: _11 = &amp;_12\n+26:5-26:56: @1[6]: _10 = &amp;(*_11)\n+26:5-26:56: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+26:5-26:56: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+26:5-26:56: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+26:5-26:56: @3[6]: _2 = const ()\n+25:50-27:2: @3[8]: _0 = const ()\n+27:2-27:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "10e71152c53439c7f116068c3006f938e56ed83a", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-unused_private_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-unused_private_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-unused_private_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-unused_private_function.-------.InstrumentCoverage.0.html?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -0,0 +1,119 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-unused_private_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>uses_crate.used_crate-unused_private_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 36\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"38:19-38:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+38:19-38:35: @1[0]: _3 = &amp;_4\n+38:19-38:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+38:19-38:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+38:9-38:16: @2[3]: FakeRead(ForLet, _1)\n+39:25-39:26: @3[2]: _5 = const 2_i32\n+39:9-39:22: @3[3]: FakeRead(ForLet, _5)\n+40:9-40:16: @3[6]: _7 = _1\n+40:8-40:16: @3[7]: _6 = Not(move _7)\n+40:8-40:16: @3[9]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn unused_private_function() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"38:19-38:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+38:19-38:35: @1[0]: _3 = &amp;_4\n+38:19-38:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+38:19-38:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+38:9-38:16: @2[3]: FakeRead(ForLet, _1)\n+39:25-39:26: @3[2]: _5 = const 2_i32\n+39:9-39:22: @3[3]: FakeRead(ForLet, _5)\n+40:9-40:16: @3[6]: _7 = _1\n+40:8-40:16: @3[7]: _6 = Not(move _7)\n+40:8-40:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"38:19-38:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+38:19-38:35: @1[0]: _3 = &amp;_4\n+38:19-38:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+38:19-38:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+38:9-38:16: @2[3]: FakeRead(ForLet, _1)\n+39:25-39:26: @3[2]: _5 = const 2_i32\n+39:9-39:22: @3[3]: FakeRead(ForLet, _5)\n+40:9-40:16: @3[6]: _7 = _1\n+40:8-40:16: @3[7]: _6 = Not(move _7)\n+40:8-40:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    let mut countdown = 2;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"38:19-38:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+38:19-38:35: @1[0]: _3 = &amp;_4\n+38:19-38:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+38:19-38:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+38:9-38:16: @2[3]: FakeRead(ForLet, _1)\n+39:25-39:26: @3[2]: _5 = const 2_i32\n+39:9-39:22: @3[3]: FakeRead(ForLet, _5)\n+40:9-40:16: @3[6]: _7 = _1\n+40:8-40:16: @3[7]: _6 = Not(move _7)\n+40:8-40:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    if !is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"41:9-41:23: @6[0]: _5 = const 20_i32\n+40:17-42:6: @6[1]: _0 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"41:9-41:23: @6[0]: _5 = const 20_i32\n+40:17-42:6: @6[1]: _0 = const ()\">        countdown = 20;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"41:9-41:23: @6[0]: _5 = const 20_i32\n+40:17-42:6: @6[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"42:6-42:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:2-43:2: @7.Return: return\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "15dce97e742b0ac97e7850693c49cc3aeac2be86", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-used_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-used_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-used_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-used_function.-------.InstrumentCoverage.0.html?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -0,0 +1,113 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-used_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>uses_crate.used_crate-used_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0,1,2,3\u298a</span>pub fn used_function() <span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // dependent conditions.</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"9:19-9:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb10]\n+9:19-9:35: @1[0]: _3 = &amp;_4\n+9:19-9:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb9]\n+9:19-9:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+9:9-9:16: @2[3]: FakeRead(ForLet, _1)\n+10:25-10:26: @3[2]: _5 = const 0_i32\n+10:9-10:22: @3[3]: FakeRead(ForLet, _5)\n+11:8-11:15: @3[6]: _7 = _1\n+11:8-11:15: @3[7]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"9:19-9:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb10]\n+9:19-9:35: @1[0]: _3 = &amp;_4\n+9:19-9:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb9]\n+9:19-9:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+9:9-9:16: @2[3]: FakeRead(ForLet, _1)\n+10:25-10:26: @3[2]: _5 = const 0_i32\n+10:9-10:22: @3[3]: FakeRead(ForLet, _5)\n+11:8-11:15: @3[6]: _7 = _1\n+11:8-11:15: @3[7]: FakeRead(ForMatchedPlace, _7)\">    let mut countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"9:19-9:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb10]\n+9:19-9:35: @1[0]: _3 = &amp;_4\n+9:19-9:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb9]\n+9:19-9:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+9:9-9:16: @2[3]: FakeRead(ForLet, _1)\n+10:25-10:26: @3[2]: _5 = const 0_i32\n+10:9-10:22: @3[3]: FakeRead(ForLet, _5)\n+11:8-11:15: @3[6]: _7 = _1\n+11:8-11:15: @3[7]: FakeRead(ForMatchedPlace, _7)\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:23: @6[0]: _5 = const 10_i32\n+11:16-13:6: @6[1]: _6 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:23: @6[0]: _5 = const 10_i32\n+11:16-13:6: @6[1]: _6 = const ()\">        countdown = 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:23: @6[0]: _5 = const 10_i32\n+11:16-13:6: @6[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"13:6-13:6: @5[0]: _6 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:5-14:44: @7.Call: _8 = used_twice_generic_function::&lt;&amp;str&gt;(const &quot;some str&quot;) -&gt; [return: bb8, unwind: bb10]\n+15:2-15:2: @8.Return: return\"><span class=\"annotation\">@7,8\u298a</span>used_twice_generic_function(\"some str\");</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:5-14:44: @7.Call: _8 = used_twice_generic_function::&lt;&amp;str&gt;(const &quot;some str&quot;) -&gt; [return: bb8, unwind: bb10]\n+15:2-15:2: @8.Return: return\">}<span class=\"annotation\">\u2989@7,8</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "e47ed0b3817869225df17daff919c3b63a9fc5b2", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-used_generic_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-used_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-used_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-used_generic_function.-------.InstrumentCoverage.0.html?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -0,0 +1,133 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-used_generic_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>uses_crate.used_crate-used_generic_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 16\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:14-18:47: @0[6]: _19 = const used_generic_function::&lt;T&gt;::promoted[0]\n+18:14-18:47: @0[7]: _7 = &amp;(*_19)\n+18:14-18:47: @0[8]: _6 = &amp;(*_7)\n+18:14-18:47: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+18:49-18:52: @0[17]: _14 = &amp;_1\n+18:5-18:54: @0[18]: _13 = (move _14,)\n+18:5-18:54: @0[20]: FakeRead(ForMatchedPlace, _13)\n+18:5-18:54: @0[22]: _15 = (_13.0: &amp;T)\n+18:5-18:54: @0[25]: _17 = &amp;(*_15)\n+18:5-18:54: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+18:5-18:54: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+18:5-18:54: @1[2]: _12 = [move _16]\n+18:5-18:54: @1[5]: _11 = &amp;_12\n+18:5-18:54: @1[6]: _10 = &amp;(*_11)\n+18:5-18:54: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+18:5-18:54: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+18:5-18:54: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+18:5-18:54: @3[6]: _2 = const ()\n+17:48-19:2: @3[8]: _0 = const ()\n+19:2-19:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn used_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"18:14-18:47: @0[6]: _19 = const used_generic_function::&lt;T&gt;::promoted[0]\n+18:14-18:47: @0[7]: _7 = &amp;(*_19)\n+18:14-18:47: @0[8]: _6 = &amp;(*_7)\n+18:14-18:47: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+18:49-18:52: @0[17]: _14 = &amp;_1\n+18:5-18:54: @0[18]: _13 = (move _14,)\n+18:5-18:54: @0[20]: FakeRead(ForMatchedPlace, _13)\n+18:5-18:54: @0[22]: _15 = (_13.0: &amp;T)\n+18:5-18:54: @0[25]: _17 = &amp;(*_15)\n+18:5-18:54: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+18:5-18:54: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+18:5-18:54: @1[2]: _12 = [move _16]\n+18:5-18:54: @1[5]: _11 = &amp;_12\n+18:5-18:54: @1[6]: _10 = &amp;(*_11)\n+18:5-18:54: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+18:5-18:54: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+18:5-18:54: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+18:5-18:54: @3[6]: _2 = const ()\n+17:48-19:2: @3[8]: _0 = const ()\n+19:2-19:2: @4.Return: return\">    println!(\"used_generic_function with {:?}\", arg);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"18:14-18:47: @0[6]: _19 = const used_generic_function::&lt;T&gt;::promoted[0]\n+18:14-18:47: @0[7]: _7 = &amp;(*_19)\n+18:14-18:47: @0[8]: _6 = &amp;(*_7)\n+18:14-18:47: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+18:49-18:52: @0[17]: _14 = &amp;_1\n+18:5-18:54: @0[18]: _13 = (move _14,)\n+18:5-18:54: @0[20]: FakeRead(ForMatchedPlace, _13)\n+18:5-18:54: @0[22]: _15 = (_13.0: &amp;T)\n+18:5-18:54: @0[25]: _17 = &amp;(*_15)\n+18:5-18:54: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+18:5-18:54: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+18:5-18:54: @1[2]: _12 = [move _16]\n+18:5-18:54: @1[5]: _11 = &amp;_12\n+18:5-18:54: @1[6]: _10 = &amp;(*_11)\n+18:5-18:54: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+18:5-18:54: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+18:5-18:54: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+18:5-18:54: @3[6]: _2 = const ()\n+17:48-19:2: @3[8]: _0 = const ()\n+19:2-19:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "ef63db45cc07b990f30c1b1b8c83f73a9ec7db06", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-used_twice_generic_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-used_twice_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-used_twice_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-used_twice_generic_function.-------.InstrumentCoverage.0.html?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -0,0 +1,133 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-used_twice_generic_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>uses_crate.used_crate-used_twice_generic_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 20\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"22:14-22:53: @0[6]: _19 = const used_twice_generic_function::&lt;T&gt;::promoted[0]\n+22:14-22:53: @0[7]: _7 = &amp;(*_19)\n+22:14-22:53: @0[8]: _6 = &amp;(*_7)\n+22:14-22:53: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+22:55-22:58: @0[17]: _14 = &amp;_1\n+22:5-22:60: @0[18]: _13 = (move _14,)\n+22:5-22:60: @0[20]: FakeRead(ForMatchedPlace, _13)\n+22:5-22:60: @0[22]: _15 = (_13.0: &amp;T)\n+22:5-22:60: @0[25]: _17 = &amp;(*_15)\n+22:5-22:60: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+22:5-22:60: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+22:5-22:60: @1[2]: _12 = [move _16]\n+22:5-22:60: @1[5]: _11 = &amp;_12\n+22:5-22:60: @1[6]: _10 = &amp;(*_11)\n+22:5-22:60: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+22:5-22:60: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+22:5-22:60: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+22:5-22:60: @3[6]: _2 = const ()\n+21:54-23:2: @3[8]: _0 = const ()\n+23:2-23:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn used_twice_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:14-22:53: @0[6]: _19 = const used_twice_generic_function::&lt;T&gt;::promoted[0]\n+22:14-22:53: @0[7]: _7 = &amp;(*_19)\n+22:14-22:53: @0[8]: _6 = &amp;(*_7)\n+22:14-22:53: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+22:55-22:58: @0[17]: _14 = &amp;_1\n+22:5-22:60: @0[18]: _13 = (move _14,)\n+22:5-22:60: @0[20]: FakeRead(ForMatchedPlace, _13)\n+22:5-22:60: @0[22]: _15 = (_13.0: &amp;T)\n+22:5-22:60: @0[25]: _17 = &amp;(*_15)\n+22:5-22:60: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+22:5-22:60: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+22:5-22:60: @1[2]: _12 = [move _16]\n+22:5-22:60: @1[5]: _11 = &amp;_12\n+22:5-22:60: @1[6]: _10 = &amp;(*_11)\n+22:5-22:60: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+22:5-22:60: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+22:5-22:60: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+22:5-22:60: @3[6]: _2 = const ()\n+21:54-23:2: @3[8]: _0 = const ()\n+23:2-23:2: @4.Return: return\">    println!(\"used_twice_generic_function with {:?}\", arg);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:14-22:53: @0[6]: _19 = const used_twice_generic_function::&lt;T&gt;::promoted[0]\n+22:14-22:53: @0[7]: _7 = &amp;(*_19)\n+22:14-22:53: @0[8]: _6 = &amp;(*_7)\n+22:14-22:53: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+22:55-22:58: @0[17]: _14 = &amp;_1\n+22:5-22:60: @0[18]: _13 = (move _14,)\n+22:5-22:60: @0[20]: FakeRead(ForMatchedPlace, _13)\n+22:5-22:60: @0[22]: _15 = (_13.0: &amp;T)\n+22:5-22:60: @0[25]: _17 = &amp;(*_15)\n+22:5-22:60: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+22:5-22:60: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+22:5-22:60: @1[2]: _12 = [move _16]\n+22:5-22:60: @1[5]: _11 = &amp;_12\n+22:5-22:60: @1[6]: _10 = &amp;(*_11)\n+22:5-22:60: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+22:5-22:60: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+22:5-22:60: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+22:5-22:60: @3[6]: _2 = const ()\n+21:54-23:2: @3[8]: _0 = const ()\n+23:2-23:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "491d27465438701ec52c749dfcdc527e33c627cc", "filename": "src/test/run-make-fulldeps/coverage/async.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -88,12 +88,15 @@ fn l(x: u8) {\n     }\n }\n \n+async fn m(x: u8) -> u8 { x - 1 }\n+\n fn main() {\n     let _ = g(10);\n     let _ = h(9);\n     let mut future = Box::pin(i(8));\n     j(7);\n     l(6);\n+    let _ = m(5);\n     executor::block_on(future.as_mut());\n }\n "}, {"sha": "7d265ba66a4452a4d663e5e29b3a1d2338b71bad", "filename": "src/test/run-make-fulldeps/coverage/partial_eq.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fpartial_eq.rs?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -44,3 +44,18 @@ one expression, which is allowed, but the `function_source_hash` was only passed\n `function_source_hash` without a code region, if necessary.\n \n */\n+\n+// FIXME(#79626): The derived traits get coverage, which is great, but some of the traits appear\n+// to get two coverage execution counts at different positions:\n+//\n+// ```text\n+//    4|      2|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+//                       ^0            ^0      ^0 ^0  ^1       ^0 ^0^0\n+// ```text\n+//\n+// `PartialEq`, `PartialOrd`, and `Ord` (and possibly `Eq`, if the trait name was longer than 2\n+// characters) have counts at their first and last characters.\n+//\n+// Why is this? Why does `PartialOrd` have two values (1 and 0)? This must mean we are checking\n+// distinct coverages, so maybe we don't want to eliminate one of them. Should we merge them?\n+// If merged, do we lose some information?"}, {"sha": "825eff4d352487641af03c7d3662632ffbac405e", "filename": "src/test/run-make-fulldeps/coverage/used_crate/mod.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fused_crate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fused_crate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fused_crate%2Fmod.rs?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -0,0 +1,43 @@\n+#![allow(unused_assignments, unused_variables)]\n+\n+use std::fmt::Debug;\n+\n+pub fn used_function() {\n+    // Initialize test constants in a way that cannot be determined at compile time, to ensure\n+    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from\n+    // dependent conditions.\n+    let is_true = std::env::args().len() == 1;\n+    let mut countdown = 0;\n+    if is_true {\n+        countdown = 10;\n+    }\n+    used_twice_generic_function(\"some str\");\n+}\n+\n+pub fn used_generic_function<T: Debug>(arg: T) {\n+    println!(\"used_generic_function with {:?}\", arg);\n+}\n+\n+pub fn used_twice_generic_function<T: Debug>(arg: T) {\n+    println!(\"used_twice_generic_function with {:?}\", arg);\n+}\n+\n+pub fn unused_generic_function<T: Debug>(arg: T) {\n+    println!(\"unused_generic_function with {:?}\", arg);\n+}\n+\n+pub fn unused_function() {\n+    let is_true = std::env::args().len() == 1;\n+    let mut countdown = 2;\n+    if !is_true {\n+        countdown = 20;\n+    }\n+}\n+\n+fn unused_private_function() {\n+    let is_true = std::env::args().len() == 1;\n+    let mut countdown = 2;\n+    if !is_true {\n+        countdown = 20;\n+    }\n+}"}, {"sha": "473d43217a994c8791d266a4d6b788acbe9ef456", "filename": "src/test/run-make-fulldeps/coverage/uses_crate.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fuses_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fuses_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fuses_crate.rs?ref=d96f351fa36d31f2b95b1cd2ad37ceaed3d395a8", "patch": "@@ -0,0 +1,10 @@\n+#![allow(unused_assignments, unused_variables)]\n+\n+mod used_crate;\n+\n+fn main() {\n+    used_crate::used_function();\n+    let some_vec = vec![1, 2, 3, 4];\n+    used_crate::used_generic_function(&some_vec);\n+    used_crate::used_twice_generic_function(some_vec);\n+}"}]}