{"sha": "e5e4eef02d443eae5089a330e59a69a4f350db81", "node_id": "C_kwDOAAsO6NoAKGU1ZTRlZWYwMmQ0NDNlYWU1MDg5YTMzMGU1OWE2OWE0ZjM1MGRiODE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-22T13:59:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-22T13:59:15Z"}, "message": "Auto merge of #106000 - nikic:lld-build, r=Mark-Simulacrum\n\nMake LLD build forward-compatible with LLVM 16\n\nSwitch to using the cmake module instead of llvm-config. I believe this also removes the need for llvm-config-wrapper.", "tree": {"sha": "a263d6c7e6b87dea59a410ede56d46845de97ecb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a263d6c7e6b87dea59a410ede56d46845de97ecb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5e4eef02d443eae5089a330e59a69a4f350db81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e4eef02d443eae5089a330e59a69a4f350db81", "html_url": "https://github.com/rust-lang/rust/commit/e5e4eef02d443eae5089a330e59a69a4f350db81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5e4eef02d443eae5089a330e59a69a4f350db81/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d8651a92761421b0437ffb44ba5670bea5ee1df", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8651a92761421b0437ffb44ba5670bea5ee1df", "html_url": "https://github.com/rust-lang/rust/commit/2d8651a92761421b0437ffb44ba5670bea5ee1df"}, {"sha": "59b3157c45048edca3cb94841d799d2ab1fe3c43", "url": "https://api.github.com/repos/rust-lang/rust/commits/59b3157c45048edca3cb94841d799d2ab1fe3c43", "html_url": "https://github.com/rust-lang/rust/commit/59b3157c45048edca3cb94841d799d2ab1fe3c43"}], "stats": {"total": 157, "additions": 58, "deletions": 99}, "files": [{"sha": "fafe82a9c128a44ea9307a635b3819282e42c8f1", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5e4eef02d443eae5089a330e59a69a4f350db81/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e4eef02d443eae5089a330e59a69a4f350db81/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=e5e4eef02d443eae5089a330e59a69a4f350db81", "patch": "@@ -29,11 +29,6 @@ name = \"sccache-plus-cl\"\n path = \"bin/sccache-plus-cl.rs\"\n test = false\n \n-[[bin]]\n-name = \"llvm-config-wrapper\"\n-path = \"bin/llvm-config-wrapper.rs\"\n-test = false\n-\n [dependencies]\n cmake = \"0.1.38\"\n fd-lock = \"3.0.8\""}, {"sha": "89984bb55dfd82380ade435c25e362176592a593", "filename": "src/bootstrap/bin/llvm-config-wrapper.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2d8651a92761421b0437ffb44ba5670bea5ee1df/src%2Fbootstrap%2Fbin%2Fllvm-config-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8651a92761421b0437ffb44ba5670bea5ee1df/src%2Fbootstrap%2Fbin%2Fllvm-config-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fllvm-config-wrapper.rs?ref=2d8651a92761421b0437ffb44ba5670bea5ee1df", "patch": "@@ -1,24 +0,0 @@\n-// The sheer existence of this file is an awful hack. See the comments in\n-// `src/bootstrap/native.rs` for why this is needed when compiling LLD.\n-\n-use std::env;\n-use std::io::{self, Write};\n-use std::process::{self, Command, Stdio};\n-\n-fn main() {\n-    let real_llvm_config = env::var_os(\"LLVM_CONFIG_REAL\").unwrap();\n-    let mut cmd = Command::new(real_llvm_config);\n-    cmd.args(env::args().skip(1)).stderr(Stdio::piped());\n-    let output = cmd.output().expect(\"failed to spawn llvm-config\");\n-    let mut stdout = String::from_utf8_lossy(&output.stdout);\n-\n-    if let Ok(to_replace) = env::var(\"LLVM_CONFIG_SHIM_REPLACE\") {\n-        if let Ok(replace_with) = env::var(\"LLVM_CONFIG_SHIM_REPLACE_WITH\") {\n-            stdout = stdout.replace(&to_replace, &replace_with).into();\n-        }\n-    }\n-\n-    print!(\"{}\", stdout.replace(\"\\\\\", \"/\"));\n-    io::stdout().flush().unwrap();\n-    process::exit(output.status.code().unwrap_or(1));\n-}"}, {"sha": "b9d06a77966df4f2b6637cd736211d25efeb468d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e4eef02d443eae5089a330e59a69a4f350db81/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e4eef02d443eae5089a330e59a69a4f350db81/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e5e4eef02d443eae5089a330e59a69a4f350db81", "patch": "@@ -1068,7 +1068,7 @@ impl<'a> Builder<'a> {\n     /// check build or dry-run, where there's no need to build all of LLVM.\n     fn llvm_config(&self, target: TargetSelection) -> Option<PathBuf> {\n         if self.config.llvm_enabled() && self.kind != Kind::Check && !self.config.dry_run() {\n-            let llvm_config = self.ensure(native::Llvm { target });\n+            let native::LlvmResult { llvm_config, .. } = self.ensure(native::Llvm { target });\n             if llvm_config.is_file() {\n                 return Some(llvm_config);\n             }"}, {"sha": "b62e0bfe4e0d1d44d7ef4467dec0b338b902022d", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5e4eef02d443eae5089a330e59a69a4f350db81/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e4eef02d443eae5089a330e59a69a4f350db81/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=e5e4eef02d443eae5089a330e59a69a4f350db81", "patch": "@@ -805,7 +805,7 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n         if builder.is_rust_llvm(target) {\n             cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n         }\n-        let llvm_config = builder.ensure(native::Llvm { target });\n+        let native::LlvmResult { llvm_config, .. } = builder.ensure(native::Llvm { target });\n         cargo.env(\"LLVM_CONFIG\", &llvm_config);\n         if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n             cargo.env(\"CFG_LLVM_ROOT\", s);\n@@ -1341,9 +1341,10 @@ impl Step for Assemble {\n         }\n \n         if builder.config.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\")) {\n-            let llvm_config_bin = builder.ensure(native::Llvm { target: target_compiler.host });\n+            let native::LlvmResult { llvm_config, .. } =\n+                builder.ensure(native::Llvm { target: target_compiler.host });\n             if !builder.config.dry_run() {\n-                let llvm_bin_dir = output(Command::new(llvm_config_bin).arg(\"--bindir\"));\n+                let llvm_bin_dir = output(Command::new(llvm_config).arg(\"--bindir\"));\n                 let llvm_bin_dir = Path::new(llvm_bin_dir.trim());\n \n                 // Since we've already built the LLVM tools, install them to the sysroot."}, {"sha": "340aa78ebf9b5b71a45fca0b2b7bcfa5fc3f6c6d", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5e4eef02d443eae5089a330e59a69a4f350db81/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e4eef02d443eae5089a330e59a69a4f350db81/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=e5e4eef02d443eae5089a330e59a69a4f350db81", "patch": "@@ -24,6 +24,7 @@ use crate::channel;\n use crate::compile;\n use crate::config::TargetSelection;\n use crate::doc::DocumentationFormat;\n+use crate::native;\n use crate::tarball::{GeneratedTarball, OverlayKind, Tarball};\n use crate::tool::{self, Tool};\n use crate::util::{exe, is_dylib, output, t, timeit};\n@@ -1927,7 +1928,9 @@ fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir\n             builder.install(&llvm_dylib_path, dst_libdir, 0o644);\n         }\n         !builder.config.dry_run()\n-    } else if let Ok(llvm_config) = crate::native::prebuilt_llvm_config(builder, target) {\n+    } else if let Ok(native::LlvmResult { llvm_config, .. }) =\n+        native::prebuilt_llvm_config(builder, target)\n+    {\n         let mut cmd = Command::new(llvm_config);\n         cmd.arg(\"--libfiles\");\n         builder.verbose(&format!(\"running {:?}\", cmd));\n@@ -2137,7 +2140,7 @@ impl Step for Bootstrap {\n         let tarball = Tarball::new(builder, \"bootstrap\", &target.triple);\n \n         let bootstrap_outdir = &builder.bootstrap_out;\n-        for file in &[\"bootstrap\", \"llvm-config-wrapper\", \"rustc\", \"rustdoc\", \"sccache-plus-cl\"] {\n+        for file in &[\"bootstrap\", \"rustc\", \"rustdoc\", \"sccache-plus-cl\"] {\n             tarball.add_file(bootstrap_outdir.join(exe(file, target)), \"bootstrap/bin\", 0o755);\n         }\n "}, {"sha": "4e503dfe864e2937eca0461125effb8147739ff1", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 46, "deletions": 63, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/e5e4eef02d443eae5089a330e59a69a4f350db81/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e4eef02d443eae5089a330e59a69a4f350db81/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=e5e4eef02d443eae5089a330e59a69a4f350db81", "patch": "@@ -24,9 +24,18 @@ use crate::util::get_clang_cl_resource_dir;\n use crate::util::{self, exe, output, t, up_to_date};\n use crate::{CLang, GitRepo};\n \n+#[derive(Clone)]\n+pub struct LlvmResult {\n+    /// Path to llvm-config binary.\n+    /// NB: This is always the host llvm-config!\n+    pub llvm_config: PathBuf,\n+    /// Path to LLVM cmake directory for the target.\n+    pub llvm_cmake_dir: PathBuf,\n+}\n+\n pub struct Meta {\n     stamp: HashStamp,\n-    build_llvm_config: PathBuf,\n+    res: LlvmResult,\n     out_dir: PathBuf,\n     root: String,\n }\n@@ -64,15 +73,22 @@ impl LdFlags {\n pub fn prebuilt_llvm_config(\n     builder: &Builder<'_>,\n     target: TargetSelection,\n-) -> Result<PathBuf, Meta> {\n+) -> Result<LlvmResult, Meta> {\n     builder.config.maybe_download_ci_llvm();\n \n     // If we're using a custom LLVM bail out here, but we can only use a\n     // custom LLVM for the build triple.\n     if let Some(config) = builder.config.target_config.get(&target) {\n         if let Some(ref s) = config.llvm_config {\n             check_llvm_version(builder, s);\n-            return Ok(s.to_path_buf());\n+            let llvm_config = s.to_path_buf();\n+            let mut llvm_cmake_dir = llvm_config.clone();\n+            llvm_cmake_dir.pop();\n+            llvm_cmake_dir.pop();\n+            llvm_cmake_dir.push(\"lib\");\n+            llvm_cmake_dir.push(\"cmake\");\n+            llvm_cmake_dir.push(\"llvm\");\n+            return Ok(LlvmResult { llvm_config, llvm_cmake_dir });\n         }\n     }\n \n@@ -84,8 +100,9 @@ pub fn prebuilt_llvm_config(\n         llvm_config_ret_dir.push(\"build\");\n     }\n     llvm_config_ret_dir.push(\"bin\");\n-\n     let build_llvm_config = llvm_config_ret_dir.join(exe(\"llvm-config\", builder.config.build));\n+    let llvm_cmake_dir = out_dir.join(\"lib/cmake/llvm\");\n+    let res = LlvmResult { llvm_config: build_llvm_config, llvm_cmake_dir };\n \n     let stamp = out_dir.join(\"llvm-finished-building\");\n     let stamp = HashStamp::new(stamp, builder.in_tree_llvm_info.sha());\n@@ -96,7 +113,7 @@ pub fn prebuilt_llvm_config(\n                 Using a potentially stale build of LLVM; \\\n                 This may not behave well.\",\n         );\n-        return Ok(build_llvm_config);\n+        return Ok(res);\n     }\n \n     if stamp.is_done() {\n@@ -110,10 +127,10 @@ pub fn prebuilt_llvm_config(\n                 stamp.path.display()\n             ));\n         }\n-        return Ok(build_llvm_config);\n+        return Ok(res);\n     }\n \n-    Err(Meta { stamp, build_llvm_config, out_dir, root: root.into() })\n+    Err(Meta { stamp, res, out_dir, root: root.into() })\n }\n \n /// This retrieves the LLVM sha we *want* to use, according to git history.\n@@ -223,7 +240,7 @@ pub struct Llvm {\n }\n \n impl Step for Llvm {\n-    type Output = PathBuf; // path to llvm-config\n+    type Output = LlvmResult;\n \n     const ONLY_HOSTS: bool = true;\n \n@@ -236,7 +253,7 @@ impl Step for Llvm {\n     }\n \n     /// Compile LLVM for `target`.\n-    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+    fn run(self, builder: &Builder<'_>) -> LlvmResult {\n         let target = self.target;\n         let target_native = if self.target.starts_with(\"riscv\") {\n             // RISC-V target triples in Rust is not named the same as C compiler target triples.\n@@ -252,11 +269,10 @@ impl Step for Llvm {\n             target.to_string()\n         };\n \n-        let Meta { stamp, build_llvm_config, out_dir, root } =\n-            match prebuilt_llvm_config(builder, target) {\n-                Ok(p) => return p,\n-                Err(m) => m,\n-            };\n+        let Meta { stamp, res, out_dir, root } = match prebuilt_llvm_config(builder, target) {\n+            Ok(p) => return p,\n+            Err(m) => m,\n+        };\n \n         builder.update_submodule(&Path::new(\"src\").join(\"llvm-project\"));\n         if builder.llvm_link_shared() && target.contains(\"windows\") {\n@@ -430,7 +446,8 @@ impl Step for Llvm {\n \n         // https://llvm.org/docs/HowToCrossCompileLLVM.html\n         if target != builder.config.build {\n-            let llvm_config = builder.ensure(Llvm { target: builder.config.build });\n+            let LlvmResult { llvm_config, .. } =\n+                builder.ensure(Llvm { target: builder.config.build });\n             if !builder.config.dry_run() {\n                 let llvm_bindir = output(Command::new(&llvm_config).arg(\"--bindir\"));\n                 let host_bin = Path::new(llvm_bindir.trim());\n@@ -480,7 +497,7 @@ impl Step for Llvm {\n         //        tools and libs on all platforms.\n \n         if builder.config.dry_run() {\n-            return build_llvm_config;\n+            return res;\n         }\n \n         cfg.build();\n@@ -490,7 +507,7 @@ impl Step for Llvm {\n         // for a versioned path like libLLVM-14.dylib. Manually create a symbolic\n         // link to make llvm-config happy.\n         if builder.llvm_link_shared() && target.contains(\"apple-darwin\") {\n-            let mut cmd = Command::new(&build_llvm_config);\n+            let mut cmd = Command::new(&res.llvm_config);\n             let version = output(cmd.arg(\"--version\"));\n             let major = version.split('.').next().unwrap();\n             let lib_name = match llvm_version_suffix {\n@@ -509,18 +526,18 @@ impl Step for Llvm {\n         // LLVM after a configuration change, so to rebuild it the build files have to be removed,\n         // which will also remove these modified files.\n         if builder.config.llvm_bolt_profile_generate {\n-            instrument_with_bolt_inplace(&get_built_llvm_lib_path(&build_llvm_config));\n+            instrument_with_bolt_inplace(&get_built_llvm_lib_path(&res.llvm_config));\n         }\n         if let Some(path) = &builder.config.llvm_bolt_profile_use {\n             optimize_library_with_bolt_inplace(\n-                &get_built_llvm_lib_path(&build_llvm_config),\n+                &get_built_llvm_lib_path(&res.llvm_config),\n                 &Path::new(path),\n             );\n         }\n \n         t!(stamp.write());\n \n-        build_llvm_config\n+        res\n     }\n }\n \n@@ -806,7 +823,8 @@ impl Step for Lld {\n         }\n         let target = self.target;\n \n-        let llvm_config = builder.ensure(Llvm { target: self.target });\n+        let LlvmResult { llvm_config, llvm_cmake_dir } =\n+            builder.ensure(Llvm { target: self.target });\n \n         let out_dir = builder.lld_out(target);\n         let done_stamp = out_dir.join(\"lld-finished-building\");\n@@ -837,22 +855,6 @@ impl Step for Lld {\n         configure_cmake(builder, target, &mut cfg, true, ldflags);\n         configure_llvm(builder, target, &mut cfg);\n \n-        // This is an awful, awful hack. Discovered when we migrated to using\n-        // clang-cl to compile LLVM/LLD it turns out that LLD, when built out of\n-        // tree, will execute `llvm-config --cmakedir` and then tell CMake about\n-        // that directory for later processing. Unfortunately if this path has\n-        // forward slashes in it (which it basically always does on Windows)\n-        // then CMake will hit a syntax error later on as... something isn't\n-        // escaped it seems?\n-        //\n-        // Instead of attempting to fix this problem in upstream CMake and/or\n-        // LLVM/LLD we just hack around it here. This thin wrapper will take the\n-        // output from llvm-config and replace all instances of `\\` with `/` to\n-        // ensure we don't hit the same bugs with escaping. It means that you\n-        // can't build on a system where your paths require `\\` on Windows, but\n-        // there's probably a lot of reasons you can't do that other than this.\n-        let llvm_config_shim = env::current_exe().unwrap().with_file_name(\"llvm-config-wrapper\");\n-\n         // Re-use the same flags as llvm to control the level of debug information\n         // generated for lld.\n         let profile = match (builder.config.llvm_optimize, builder.config.llvm_release_debuginfo) {\n@@ -863,36 +865,17 @@ impl Step for Lld {\n \n         cfg.out_dir(&out_dir)\n             .profile(profile)\n-            .env(\"LLVM_CONFIG_REAL\", &llvm_config)\n-            .define(\"LLVM_CONFIG_PATH\", llvm_config_shim)\n+            .define(\"LLVM_CMAKE_DIR\", llvm_cmake_dir)\n             .define(\"LLVM_INCLUDE_TESTS\", \"OFF\");\n \n-        // While we're using this horrible workaround to shim the execution of\n-        // llvm-config, let's just pile on more. I can't seem to figure out how\n-        // to build LLD as a standalone project and also cross-compile it at the\n-        // same time. It wants a natively executable `llvm-config` to learn\n-        // about LLVM, but then it learns about all the host configuration of\n-        // LLVM and tries to link to host LLVM libraries.\n-        //\n-        // To work around that we tell our shim to replace anything with the\n-        // build target with the actual target instead. This'll break parts of\n-        // LLD though which try to execute host tools, such as llvm-tblgen, so\n-        // we specifically tell it where to find those. This is likely super\n-        // brittle and will break over time. If anyone knows better how to\n-        // cross-compile LLD it would be much appreciated to fix this!\n         if target != builder.config.build {\n-            cfg.env(\"LLVM_CONFIG_SHIM_REPLACE\", &builder.config.build.triple)\n-                .env(\"LLVM_CONFIG_SHIM_REPLACE_WITH\", &target.triple)\n-                .define(\n-                    \"LLVM_TABLEGEN_EXE\",\n-                    llvm_config.with_file_name(\"llvm-tblgen\").with_extension(EXE_EXTENSION),\n-                );\n+            // Use the host llvm-tblgen binary.\n+            cfg.define(\n+                \"LLVM_TABLEGEN_EXE\",\n+                llvm_config.with_file_name(\"llvm-tblgen\").with_extension(EXE_EXTENSION),\n+            );\n         }\n \n-        // Explicitly set C++ standard, because upstream doesn't do so\n-        // for standalone builds.\n-        cfg.define(\"CMAKE_CXX_STANDARD\", \"14\");\n-\n         cfg.build();\n \n         t!(File::create(&done_stamp));\n@@ -994,7 +977,7 @@ impl Step for Sanitizers {\n             return runtimes;\n         }\n \n-        let llvm_config = builder.ensure(Llvm { target: builder.config.build });\n+        let LlvmResult { llvm_config, .. } = builder.ensure(Llvm { target: builder.config.build });\n         if builder.config.dry_run() {\n             return runtimes;\n         }"}, {"sha": "0d9c22e210f9d3ffd7de346614eb4b2f9c45451f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5e4eef02d443eae5089a330e59a69a4f350db81/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e4eef02d443eae5089a330e59a69a4f350db81/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=e5e4eef02d443eae5089a330e59a69a4f350db81", "patch": "@@ -1575,7 +1575,8 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         let mut llvm_components_passed = false;\n         let mut copts_passed = false;\n         if builder.config.llvm_enabled() {\n-            let llvm_config = builder.ensure(native::Llvm { target: builder.config.build });\n+            let native::LlvmResult { llvm_config, .. } =\n+                builder.ensure(native::Llvm { target: builder.config.build });\n             if !builder.config.dry_run() {\n                 let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n                 let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));"}]}