{"sha": "ec968198b98c6291aac6a6aac41c1e194b14e95b", "node_id": "C_kwDOAAsO6NoAKGVjOTY4MTk4Yjk4YzYyOTFhYWM2YTZhYWM0MWMxZTE5NGIxNGU5NWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T13:47:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T13:47:46Z"}, "message": "Auto merge of #13816 - WaffleLapkin:postfix_adjustment_hints, r=Veykril\n\nPostfix adjustment hints\n\n# Basic Description\n\nThis PR implements \"postfix\" adjustment hints:\n![2022-12-21_19-27](https://user-images.githubusercontent.com/38225716/208941721-d48d316f-a918-408a-9757-8d4e2b402a66.png)\n\nThey are identical to normal adjustment hints, but are rendered _after_ the expression. E.g. `expr.*` instead of `*expr`. ~~This mirrors \"postfix deref\" feature that I'm planning to eventually propose to the compiler.~~\n\n# Motivation\n\nThe advantage of being postfix is that you need to add parentheses less often:\n\n![2022-12-21_19-38](https://user-images.githubusercontent.com/38225716/208944302-16718112-14a4-4438-8aed-797766391c63.png)\n![2022-12-21_19-37](https://user-images.githubusercontent.com/38225716/208944281-d9614888-6597-41ee-bf5d-a081d8048f94.png)\n\nThis is because a lot of \"reborrow\" hints are caused by field access or method calls, both of which are postfix and have higher \"precedence\" than prefix `&` and `*`.\n\nAlso IMHO it just looks nicer and it's more clear what is happening (order of operations).\n\n# Modes\n\nHowever, there are some cases where postfix hints need parentheses but prefix don't (for example `&x` being turned into `(&x).*.*.&` or `&**&x`).\n\nThis PR allows users to choose which look they like more. There are 4 options (`rust-analyzer.inlayHints.expressionAdjustmentHints.mode` setting):\n- `prefix` \u2014 always use prefix hints (default, what was used before that PR)\n- `postfix` \u2014 always use postfix hints\n- `prefer_prefix` \u2014 try to minimize number of parentheses, breaking ties in favor of prefix\n- `prefer_postfix` \u2014 try to minimize number of parentheses, breaking ties in favor of postfix\n\nComparison of all modes:\n\n![2022-12-21_19-53](https://user-images.githubusercontent.com/38225716/208947482-26357c82-2b42-47d9-acec-835f5f03f6b4.png)\n![2022-12-21_19-49](https://user-images.githubusercontent.com/38225716/208946731-fe566d3b-52b2-4846-994d-c2cecc769e0f.png)\n![2022-12-21_19-48](https://user-images.githubusercontent.com/38225716/208946742-6e237f44-805e-469a-a3db-03d8f76e1317.png)\n![2022-12-21_19-47](https://user-images.githubusercontent.com/38225716/208946747-79f25fae-e3ea-47d2-8d27-cb4eeac034fe.png)\n\n# Edge cases\n\nWhere are some rare cases where chain hints weirdly interact with adjustment hints, for example (note `SourceAnalyzer.&`):\n\n![image](https://user-images.githubusercontent.com/38225716/208947958-41c12971-f1f0-4a41-a930-47939cce9f58.png)\n\nThis is pre-existing, you can get the same effect with prefix hints (`SourceAnalyzer)`).\n\n----\n\nAnother weird thing is this:\n\n![2022-12-21_20-00](https://user-images.githubusercontent.com/38225716/208948590-ea26d325-2108-4b35-abaa-716a65a1ae99.png)\n\nHere `.&` is a hint and `?` is written in the source code. It looks like `?` is part of the hint because `?.` is ligature in my font. IMO this is a bug in vscode, but still worth mentioning (I'm also too lazy to report it there...).\n\n# Fixed bugs\n\nI've used the \"needs parens\" API and this accidentally fixed a bug with parens around `as`, see the test diff:\n```diff,rust\n     let _: *const u32  = &mut 0u32 as *mut u32;\n                        //^^^^^^^^^^^^^^^^^^^^^<mut-ptr-to-const-ptr>\n+                       //^^^^^^^^^^^^^^^^^^^^^(\n+                       //^^^^^^^^^^^^^^^^^^^^^)\n...\n     let _: *const u32  = &mut 0u32 as *mut u32;\n                        //^^^^^^^^^^^^^^^^^^^^^<mut-ptr-to-const-ptr>\n+                       //^^^^^^^^^^^^^^^^^^^^^(\n+                       //^^^^^^^^^^^^^^^^^^^^^)\n```\n\n# Changelog\n\nchangelog feature Add an option to make adjustment hints (aka reborrow hints) postfix\nchangelog fix Fix placement of parentheses around `as` casts for adjustment hints", "tree": {"sha": "db052830452614e4125958923b43b0ed213f78f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db052830452614e4125958923b43b0ed213f78f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec968198b98c6291aac6a6aac41c1e194b14e95b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec968198b98c6291aac6a6aac41c1e194b14e95b", "html_url": "https://github.com/rust-lang/rust/commit/ec968198b98c6291aac6a6aac41c1e194b14e95b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec968198b98c6291aac6a6aac41c1e194b14e95b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0214d81e85c5bd82ae470f1291472a9eb8a0068", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0214d81e85c5bd82ae470f1291472a9eb8a0068", "html_url": "https://github.com/rust-lang/rust/commit/b0214d81e85c5bd82ae470f1291472a9eb8a0068"}, {"sha": "b6169c2a2e5a24e9905a2614e6fe469fb37f50c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6169c2a2e5a24e9905a2614e6fe469fb37f50c9", "html_url": "https://github.com/rust-lang/rust/commit/b6169c2a2e5a24e9905a2614e6fe469fb37f50c9"}], "stats": {"total": 434, "additions": 402, "deletions": 32}, "files": [{"sha": "48a7bbfecffa09a01d752abed39b597e83cec3da", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ec968198b98c6291aac6a6aac41c1e194b14e95b/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec968198b98c6291aac6a6aac41c1e194b14e95b/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=ec968198b98c6291aac6a6aac41c1e194b14e95b", "patch": "@@ -35,6 +35,7 @@ pub struct InlayHintsConfig {\n     pub parameter_hints: bool,\n     pub chaining_hints: bool,\n     pub adjustment_hints: AdjustmentHints,\n+    pub adjustment_hints_mode: AdjustmentHintsMode,\n     pub adjustment_hints_hide_outside_unsafe: bool,\n     pub closure_return_type_hints: ClosureReturnTypeHints,\n     pub binding_mode_hints: bool,\n@@ -74,6 +75,14 @@ pub enum AdjustmentHints {\n     Never,\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub enum AdjustmentHintsMode {\n+    Prefix,\n+    Postfix,\n+    PreferPrefix,\n+    PreferPostfix,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum InlayKind {\n     BindingModeHint,\n@@ -82,6 +91,7 @@ pub enum InlayKind {\n     ClosureReturnTypeHint,\n     GenericParamListHint,\n     AdjustmentHint,\n+    AdjustmentHintPostfix,\n     LifetimeHint,\n     ParameterHint,\n     TypeHint,\n@@ -430,7 +440,7 @@ mod tests {\n     use itertools::Itertools;\n     use test_utils::extract_annotations;\n \n-    use crate::inlay_hints::AdjustmentHints;\n+    use crate::inlay_hints::{AdjustmentHints, AdjustmentHintsMode};\n     use crate::DiscriminantHints;\n     use crate::{fixture, inlay_hints::InlayHintsConfig, LifetimeElisionHints};\n \n@@ -446,6 +456,7 @@ mod tests {\n         lifetime_elision_hints: LifetimeElisionHints::Never,\n         closure_return_type_hints: ClosureReturnTypeHints::Never,\n         adjustment_hints: AdjustmentHints::Never,\n+        adjustment_hints_mode: AdjustmentHintsMode::Prefix,\n         adjustment_hints_hide_outside_unsafe: false,\n         binding_mode_hints: false,\n         hide_named_constructor_hints: false,"}, {"sha": "bdd7c05e008c1994ab764adf2435e5f612da7eaf", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "modified", "additions": 328, "deletions": 29, "changes": 357, "blob_url": "https://github.com/rust-lang/rust/blob/ec968198b98c6291aac6a6aac41c1e194b14e95b/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec968198b98c6291aac6a6aac41c1e194b14e95b/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=ec968198b98c6291aac6a6aac41c1e194b14e95b", "patch": "@@ -5,9 +5,13 @@\n //! ```\n use hir::{Adjust, AutoBorrow, Mutability, OverloadedDeref, PointerCast, Safety, Semantics};\n use ide_db::RootDatabase;\n-use syntax::ast::{self, AstNode};\n \n-use crate::{AdjustmentHints, InlayHint, InlayHintsConfig, InlayKind};\n+use syntax::{\n+    ast::{self, make, AstNode},\n+    ted,\n+};\n+\n+use crate::{AdjustmentHints, AdjustmentHintsMode, InlayHint, InlayHintsConfig, InlayKind};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -32,36 +36,47 @@ pub(super) fn hints(\n         return None;\n     }\n \n-    let parent = expr.syntax().parent().and_then(ast::Expr::cast);\n     let descended = sema.descend_node_into_attributes(expr.clone()).pop();\n     let desc_expr = descended.as_ref().unwrap_or(expr);\n     let adjustments = sema.expr_adjustments(desc_expr).filter(|it| !it.is_empty())?;\n-    let needs_parens = match parent {\n-        Some(parent) => {\n-            match parent {\n-                ast::Expr::AwaitExpr(_)\n-                | ast::Expr::CallExpr(_)\n-                | ast::Expr::CastExpr(_)\n-                | ast::Expr::FieldExpr(_)\n-                | ast::Expr::MethodCallExpr(_)\n-                | ast::Expr::TryExpr(_) => true,\n-                // FIXME: shorthands need special casing, though not sure if adjustments are even valid there\n-                ast::Expr::RecordExpr(_) => false,\n-                ast::Expr::IndexExpr(index) => index.base().as_ref() == Some(expr),\n-                _ => false,\n-            }\n-        }\n-        None => false,\n-    };\n-    if needs_parens {\n+\n+    let (postfix, needs_outer_parens, needs_inner_parens) =\n+        mode_and_needs_parens_for_adjustment_hints(expr, config.adjustment_hints_mode);\n+\n+    if needs_outer_parens {\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::OpeningParenthesis,\n+            label: \"(\".into(),\n+            tooltip: None,\n+        });\n+    }\n+\n+    if postfix && needs_inner_parens {\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),\n             kind: InlayKind::OpeningParenthesis,\n             label: \"(\".into(),\n             tooltip: None,\n         });\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::ClosingParenthesis,\n+            label: \")\".into(),\n+            tooltip: None,\n+        });\n     }\n-    for adjustment in adjustments.into_iter().rev() {\n+\n+    let (mut tmp0, mut tmp1);\n+    let iter: &mut dyn Iterator<Item = _> = if postfix {\n+        tmp0 = adjustments.into_iter();\n+        &mut tmp0\n+    } else {\n+        tmp1 = adjustments.into_iter().rev();\n+        &mut tmp1\n+    };\n+\n+    for adjustment in iter {\n         if adjustment.source == adjustment.target {\n             continue;\n         }\n@@ -97,12 +112,30 @@ pub(super) fn hints(\n         };\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),\n-            kind: InlayKind::AdjustmentHint,\n-            label: text.into(),\n+            kind: if postfix {\n+                InlayKind::AdjustmentHintPostfix\n+            } else {\n+                InlayKind::AdjustmentHint\n+            },\n+            label: if postfix { format!(\".{}\", text.trim_end()).into() } else { text.into() },\n+            tooltip: None,\n+        });\n+    }\n+    if !postfix && needs_inner_parens {\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::OpeningParenthesis,\n+            label: \"(\".into(),\n+            tooltip: None,\n+        });\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::ClosingParenthesis,\n+            label: \")\".into(),\n             tooltip: None,\n         });\n     }\n-    if needs_parens {\n+    if needs_outer_parens {\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),\n             kind: InlayKind::ClosingParenthesis,\n@@ -113,19 +146,119 @@ pub(super) fn hints(\n     Some(())\n }\n \n+/// Returns whatever the hint should be postfix and if we need to add paretheses on the inside and/or outside of `expr`,\n+/// if we are going to add (`postfix`) adjustments hints to it.\n+fn mode_and_needs_parens_for_adjustment_hints(\n+    expr: &ast::Expr,\n+    mode: AdjustmentHintsMode,\n+) -> (bool, bool, bool) {\n+    use {std::cmp::Ordering::*, AdjustmentHintsMode::*};\n+\n+    match mode {\n+        Prefix | Postfix => {\n+            let postfix = matches!(mode, Postfix);\n+            let (inside, outside) = needs_parens_for_adjustment_hints(expr, postfix);\n+            (postfix, inside, outside)\n+        }\n+        PreferPrefix | PreferPostfix => {\n+            let prefer_postfix = matches!(mode, PreferPostfix);\n+\n+            let (pre_inside, pre_outside) = needs_parens_for_adjustment_hints(expr, false);\n+            let prefix = (false, pre_inside, pre_outside);\n+            let pre_count = pre_inside as u8 + pre_outside as u8;\n+\n+            let (post_inside, post_outside) = needs_parens_for_adjustment_hints(expr, true);\n+            let postfix = (true, post_inside, post_outside);\n+            let post_count = post_inside as u8 + post_outside as u8;\n+\n+            match pre_count.cmp(&post_count) {\n+                Less => prefix,\n+                Greater => postfix,\n+                Equal if prefer_postfix => postfix,\n+                Equal => prefix,\n+            }\n+        }\n+    }\n+}\n+\n+/// Returns whatever we need to add paretheses on the inside and/or outside of `expr`,\n+/// if we are going to add (`postfix`) adjustments hints to it.\n+fn needs_parens_for_adjustment_hints(expr: &ast::Expr, postfix: bool) -> (bool, bool) {\n+    // This is a very miserable pile of hacks...\n+    //\n+    // `Expr::needs_parens_in` requires that the expression is the child of the other expression,\n+    // that is supposed to be its parent.\n+    //\n+    // But we want to check what would happen if we add `*`/`.*` to the inner expression.\n+    // To check for inner we need `` expr.needs_parens_in(`*expr`) ``,\n+    // to check for outer we need `` `*expr`.needs_parens_in(parent) ``,\n+    // where \"expr\" is the `expr` parameter, `*expr` is the editted `expr`,\n+    // and \"parent\" is the parent of the original expression...\n+    //\n+    // For this we utilize mutable mutable trees, which is a HACK, but it works.\n+    //\n+    // FIXME: comeup with a better API for `needs_parens_in`, so that we don't have to do *this*\n+\n+    // Make `&expr`/`expr?`\n+    let dummy_expr = {\n+        // `make::*` function go through a string, so they parse wrongly.\n+        // for example `` make::expr_try(`|| a`) `` would result in a\n+        // `|| (a?)` and not `(|| a)?`.\n+        //\n+        // Thus we need dummy parens to preserve the relationship we want.\n+        // The parens are then simply ignored by the following code.\n+        let dummy_paren = make::expr_paren(expr.clone());\n+        if postfix {\n+            make::expr_try(dummy_paren)\n+        } else {\n+            make::expr_ref(dummy_paren, false)\n+        }\n+    };\n+\n+    // Do the dark mutable tree magic.\n+    // This essentially makes `dummy_expr` and `expr` switch places (families),\n+    // so that `expr`'s parent is not `dummy_expr`'s parent.\n+    let dummy_expr = dummy_expr.clone_for_update();\n+    let expr = expr.clone_for_update();\n+    ted::replace(expr.syntax(), dummy_expr.syntax());\n+\n+    let parent = dummy_expr.syntax().parent();\n+    let expr = if postfix {\n+        let ast::Expr::TryExpr(e) = &dummy_expr else { unreachable!() };\n+        let Some(ast::Expr::ParenExpr(e)) = e.expr() else { unreachable!() };\n+\n+        e.expr().unwrap()\n+    } else {\n+        let ast::Expr::RefExpr(e) = &dummy_expr else { unreachable!() };\n+        let Some(ast::Expr::ParenExpr(e)) = e.expr() else { unreachable!() };\n+\n+        e.expr().unwrap()\n+    };\n+\n+    // At this point\n+    // - `parent`     is the parrent of the original expression\n+    // - `dummy_expr` is the original expression wrapped in the operator we want (`*`/`.*`)\n+    // - `expr`       is the clone of the original expression (with `dummy_expr` as the parent)\n+\n+    let needs_outer_parens = parent.map_or(false, |p| dummy_expr.needs_parens_in(p));\n+    let needs_inner_parens = expr.needs_parens_in(dummy_expr.syntax().clone());\n+\n+    (needs_outer_parens, needs_inner_parens)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::{\n         inlay_hints::tests::{check_with_config, DISABLED_CONFIG},\n-        AdjustmentHints, InlayHintsConfig,\n+        AdjustmentHints, AdjustmentHintsMode, InlayHintsConfig,\n     };\n \n     #[test]\n     fn adjustment_hints() {\n         check_with_config(\n             InlayHintsConfig { adjustment_hints: AdjustmentHints::Always, ..DISABLED_CONFIG },\n             r#\"\n-//- minicore: coerce_unsized\n+//- minicore: coerce_unsized, fn\n fn main() {\n     let _: u32         = loop {};\n                        //^^^^^^^<never-to-any>\n@@ -148,12 +281,16 @@ fn main() {\n                        //^^^^<fn-item-to-fn-pointer>\n     let _: unsafe fn() = main as fn();\n                        //^^^^^^^^^^^^<safe-fn-pointer-to-unsafe-fn-pointer>\n+                       //^^^^^^^^^^^^(\n+                       //^^^^^^^^^^^^)\n     let _: fn()        = || {};\n                        //^^^^^<closure-to-fn-pointer>\n     let _: unsafe fn() = || {};\n                        //^^^^^<closure-to-unsafe-fn-pointer>\n     let _: *const u32  = &mut 0u32 as *mut u32;\n                        //^^^^^^^^^^^^^^^^^^^^^<mut-ptr-to-const-ptr>\n+                       //^^^^^^^^^^^^^^^^^^^^^(\n+                       //^^^^^^^^^^^^^^^^^^^^^)\n     let _: &mut [_]    = &mut [0; 0];\n                        //^^^^^^^^^^^<unsize>\n                        //^^^^^^^^^^^&mut $\n@@ -206,6 +343,11 @@ fn main() {\n                                        //^^^^^^^<unsize>\n                                        //^^^^^^^&mut $\n                                        //^^^^^^^*\n+\n+    let _: &mut dyn Fn() = &mut || ();\n+                         //^^^^^^^^^^<unsize>\n+                         //^^^^^^^^^^&mut $\n+                         //^^^^^^^^^^*\n }\n \n #[derive(Copy, Clone)]\n@@ -215,12 +357,153 @@ impl Struct {\n     fn by_ref(&self) {}\n     fn by_ref_mut(&mut self) {}\n }\n-trait Trait {}\n-impl Trait for Struct {}\n \"#,\n         )\n     }\n \n+    #[test]\n+    fn adjustment_hints_postfix() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                adjustment_hints: AdjustmentHints::Always,\n+                adjustment_hints_mode: AdjustmentHintsMode::Postfix,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+//- minicore: coerce_unsized, fn\n+fn main() {\n+\n+    Struct.consume();\n+    Struct.by_ref();\n+  //^^^^^^.&\n+    Struct.by_ref_mut();\n+  //^^^^^^.&mut\n+\n+    (&Struct).consume();\n+   //^^^^^^^(\n+   //^^^^^^^)\n+   //^^^^^^^.*\n+    (&Struct).by_ref();\n+\n+    (&mut Struct).consume();\n+   //^^^^^^^^^^^(\n+   //^^^^^^^^^^^)\n+   //^^^^^^^^^^^.*\n+    (&mut Struct).by_ref();\n+   //^^^^^^^^^^^(\n+   //^^^^^^^^^^^)\n+   //^^^^^^^^^^^.*\n+   //^^^^^^^^^^^.&\n+    (&mut Struct).by_ref_mut();\n+\n+    // Check that block-like expressions don't duplicate hints\n+    let _: &mut [u32] = (&mut []);\n+                       //^^^^^^^(\n+                       //^^^^^^^)\n+                       //^^^^^^^.*\n+                       //^^^^^^^.&mut\n+                       //^^^^^^^.<unsize>\n+    let _: &mut [u32] = { &mut [] };\n+                        //^^^^^^^(\n+                        //^^^^^^^)\n+                        //^^^^^^^.*\n+                        //^^^^^^^.&mut\n+                        //^^^^^^^.<unsize>\n+    let _: &mut [u32] = unsafe { &mut [] };\n+                               //^^^^^^^(\n+                               //^^^^^^^)\n+                               //^^^^^^^.*\n+                               //^^^^^^^.&mut\n+                               //^^^^^^^.<unsize>\n+    let _: &mut [u32] = if true {\n+        &mut []\n+      //^^^^^^^(\n+      //^^^^^^^)\n+      //^^^^^^^.*\n+      //^^^^^^^.&mut\n+      //^^^^^^^.<unsize>\n+    } else {\n+        loop {}\n+      //^^^^^^^.<never-to-any>\n+    };\n+    let _: &mut [u32] = match () { () => &mut [] }\n+                                       //^^^^^^^(\n+                                       //^^^^^^^)\n+                                       //^^^^^^^.*\n+                                       //^^^^^^^.&mut\n+                                       //^^^^^^^.<unsize>\n+\n+    let _: &mut dyn Fn() = &mut || ();\n+                         //^^^^^^^^^^(\n+                         //^^^^^^^^^^)\n+                         //^^^^^^^^^^.*\n+                         //^^^^^^^^^^.&mut\n+                         //^^^^^^^^^^.<unsize>\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Struct;\n+impl Struct {\n+    fn consume(self) {}\n+    fn by_ref(&self) {}\n+    fn by_ref_mut(&mut self) {}\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn adjustment_hints_prefer_prefix() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                adjustment_hints: AdjustmentHints::Always,\n+                adjustment_hints_mode: AdjustmentHintsMode::PreferPrefix,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+fn main() {\n+    let _: u32         = loop {};\n+                       //^^^^^^^<never-to-any>\n+\n+    Struct.by_ref();\n+  //^^^^^^.&\n+\n+    let (): () = return ();\n+               //^^^^^^^^^<never-to-any>\n+\n+    struct Struct;\n+    impl Struct { fn by_ref(&self) {} }\n+}\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn adjustment_hints_prefer_postfix() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                adjustment_hints: AdjustmentHints::Always,\n+                adjustment_hints_mode: AdjustmentHintsMode::PreferPostfix,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+fn main() {\n+    let _: u32         = loop {};\n+                       //^^^^^^^.<never-to-any>\n+\n+    Struct.by_ref();\n+  //^^^^^^.&\n+\n+    let (): () = return ();\n+               //^^^^^^^^^<never-to-any>\n+\n+    struct Struct;\n+    impl Struct { fn by_ref(&self) {} }\n+}\n+            \"#,\n+        )\n+    }\n+\n     #[test]\n     fn never_to_never_is_never_shown() {\n         check_with_config(\n@@ -328,4 +611,20 @@ fn a() {\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn bug() {\n+        check_with_config(\n+            InlayHintsConfig { adjustment_hints: AdjustmentHints::Always, ..DISABLED_CONFIG },\n+            r#\"\n+fn main() {\n+    // These should be identical, but they are not...\n+\n+    let () = return;\n+    let (): () = return;\n+               //^^^^^^<never-to-any>\n+}\n+            \"#,\n+        )\n+    }\n }"}, {"sha": "239456cb281676809f5105aeef75bd844f9fb89f", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec968198b98c6291aac6a6aac41c1e194b14e95b/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec968198b98c6291aac6a6aac41c1e194b14e95b/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=ec968198b98c6291aac6a6aac41c1e194b14e95b", "patch": "@@ -81,8 +81,8 @@ pub use crate::{\n     highlight_related::{HighlightRelatedConfig, HighlightedRange},\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{\n-        AdjustmentHints, ClosureReturnTypeHints, DiscriminantHints, InlayHint, InlayHintLabel,\n-        InlayHintsConfig, InlayKind, InlayTooltip, LifetimeElisionHints,\n+        AdjustmentHints, AdjustmentHintsMode, ClosureReturnTypeHints, DiscriminantHints, InlayHint,\n+        InlayHintLabel, InlayHintsConfig, InlayKind, InlayTooltip, LifetimeElisionHints,\n     },\n     join_lines::JoinLinesConfig,\n     markup::Markup,"}, {"sha": "a6b30ba1396217c788f558cbc2ff9d424b6d8d6e", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec968198b98c6291aac6a6aac41c1e194b14e95b/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec968198b98c6291aac6a6aac41c1e194b14e95b/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=ec968198b98c6291aac6a6aac41c1e194b14e95b", "patch": "@@ -13,6 +13,7 @@ use syntax::{AstNode, SyntaxKind::*, SyntaxToken, TextRange, T};\n \n use crate::{\n     hover::hover_for_definition,\n+    inlay_hints::AdjustmentHintsMode,\n     moniker::{def_to_moniker, MonikerResult},\n     parent_module::crates_for,\n     Analysis, Fold, HoverConfig, HoverDocFormat, HoverResult, InlayHint, InlayHintsConfig,\n@@ -115,6 +116,7 @@ impl StaticIndex<'_> {\n                     closure_return_type_hints: crate::ClosureReturnTypeHints::WithBlock,\n                     lifetime_elision_hints: crate::LifetimeElisionHints::Never,\n                     adjustment_hints: crate::AdjustmentHints::Never,\n+                    adjustment_hints_mode: AdjustmentHintsMode::Prefix,\n                     adjustment_hints_hide_outside_unsafe: false,\n                     hide_named_constructor_hints: false,\n                     hide_closure_initialization_hints: false,"}, {"sha": "27a86db382d4637804d2694486e51f204c23726c", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ec968198b98c6291aac6a6aac41c1e194b14e95b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec968198b98c6291aac6a6aac41c1e194b14e95b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=ec968198b98c6291aac6a6aac41c1e194b14e95b", "patch": "@@ -333,6 +333,8 @@ config_data! {\n         inlayHints_expressionAdjustmentHints_enable: AdjustmentHintsDef = \"\\\"never\\\"\",\n         /// Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.\n         inlayHints_expressionAdjustmentHints_hideOutsideUnsafe: bool = \"false\",\n+        /// Whether to show inlay hints as postfix ops (`.*` instead of `*`, etc).\n+        inlayHints_expressionAdjustmentHints_mode: AdjustmentHintsModeDef = \"\\\"prefix\\\"\",\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n         inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n@@ -1252,6 +1254,12 @@ impl Config {\n                 },\n                 AdjustmentHintsDef::Reborrow => ide::AdjustmentHints::ReborrowOnly,\n             },\n+            adjustment_hints_mode: match self.data.inlayHints_expressionAdjustmentHints_mode {\n+                AdjustmentHintsModeDef::Prefix => ide::AdjustmentHintsMode::Prefix,\n+                AdjustmentHintsModeDef::Postfix => ide::AdjustmentHintsMode::Postfix,\n+                AdjustmentHintsModeDef::PreferPrefix => ide::AdjustmentHintsMode::PreferPrefix,\n+                AdjustmentHintsModeDef::PreferPostfix => ide::AdjustmentHintsMode::PreferPostfix,\n+            },\n             adjustment_hints_hide_outside_unsafe: self\n                 .data\n                 .inlayHints_expressionAdjustmentHints_hideOutsideUnsafe,\n@@ -1768,6 +1776,15 @@ enum DiscriminantHintsDef {\n     Fieldless,\n }\n \n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(rename_all = \"snake_case\")]\n+enum AdjustmentHintsModeDef {\n+    Prefix,\n+    Postfix,\n+    PreferPrefix,\n+    PreferPostfix,\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n enum FilesWatcherDef {\n@@ -2101,6 +2118,21 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 \"Only show discriminant hints on fieldless enum variants.\"\n             ]\n         },\n+        \"AdjustmentHintsModeDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\n+                \"prefix\",\n+                \"postfix\",\n+                \"prefer_prefix\",\n+                \"prefer_postfix\",\n+            ],\n+            \"enumDescriptions\": [\n+                \"Always show adjustment hints as prefix (`*expr`).\",\n+                \"Always show adjustment hints as postfix (`expr.*`).\",\n+                \"Show prefix or postfix depending on which uses less parenthesis, prefering prefix.\",\n+                \"Show prefix or postfix depending on which uses less parenthesis, prefering postfix.\",\n+            ]\n+        },\n         \"CargoFeaturesDef\" => set! {\n             \"anyOf\": [\n                 {"}, {"sha": "e736b2ff9a3be63e62a0424151b5fa3d2ddc9f76", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec968198b98c6291aac6a6aac41c1e194b14e95b/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec968198b98c6291aac6a6aac41c1e194b14e95b/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=ec968198b98c6291aac6a6aac41c1e194b14e95b", "patch": "@@ -452,6 +452,7 @@ pub(crate) fn inlay_hint(\n             | InlayKind::ChainingHint\n             | InlayKind::GenericParamListHint\n             | InlayKind::ClosingParenthesis\n+            | InlayKind::AdjustmentHintPostfix\n             | InlayKind::LifetimeHint\n             | InlayKind::ClosingBraceHint => position(line_index, inlay_hint.range.end()),\n         },\n@@ -465,6 +466,7 @@ pub(crate) fn inlay_hint(\n             | InlayKind::ClosureReturnTypeHint\n             | InlayKind::GenericParamListHint\n             | InlayKind::AdjustmentHint\n+            | InlayKind::AdjustmentHintPostfix\n             | InlayKind::LifetimeHint\n             | InlayKind::ParameterHint => false,\n         }),\n@@ -475,6 +477,7 @@ pub(crate) fn inlay_hint(\n             | InlayKind::ClosureReturnTypeHint\n             | InlayKind::GenericParamListHint\n             | InlayKind::AdjustmentHint\n+            | InlayKind::AdjustmentHintPostfix\n             | InlayKind::TypeHint\n             | InlayKind::DiscriminantHint\n             | InlayKind::ClosingBraceHint => false,\n@@ -493,6 +496,7 @@ pub(crate) fn inlay_hint(\n             | InlayKind::GenericParamListHint\n             | InlayKind::LifetimeHint\n             | InlayKind::AdjustmentHint\n+            | InlayKind::AdjustmentHintPostfix\n             | InlayKind::ClosingBraceHint => None,\n         },\n         text_edits: None,"}, {"sha": "0aaf07ebf38a889fff929cdcd72139457852c5e3", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec968198b98c6291aac6a6aac41c1e194b14e95b/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/ec968198b98c6291aac6a6aac41c1e194b14e95b/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=ec968198b98c6291aac6a6aac41c1e194b14e95b", "patch": "@@ -469,6 +469,11 @@ Whether to show inlay hints for type adjustments.\n --\n Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.\n --\n+[[rust-analyzer.inlayHints.expressionAdjustmentHints.mode]]rust-analyzer.inlayHints.expressionAdjustmentHints.mode (default: `\"prefix\"`)::\n++\n+--\n+Whether to show inlay hints as postfix ops (`.*` instead of `*`, etc).\n+--\n [[rust-analyzer.inlayHints.lifetimeElisionHints.enable]]rust-analyzer.inlayHints.lifetimeElisionHints.enable (default: `\"never\"`)::\n +\n --"}, {"sha": "5ffce2f5536520e3180d87ede9b6a4116f8ac7d3", "filename": "editors/code/package.json", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec968198b98c6291aac6a6aac41c1e194b14e95b/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/ec968198b98c6291aac6a6aac41c1e194b14e95b/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=ec968198b98c6291aac6a6aac41c1e194b14e95b", "patch": "@@ -1000,6 +1000,23 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.inlayHints.expressionAdjustmentHints.mode\": {\n+                    \"markdownDescription\": \"Whether to show inlay hints as postfix ops (`.*` instead of `*`, etc).\",\n+                    \"default\": \"prefix\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"prefix\",\n+                        \"postfix\",\n+                        \"prefer_prefix\",\n+                        \"prefer_postfix\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Always show adjustment hints as prefix (`*expr`).\",\n+                        \"Always show adjustment hints as postfix (`expr.*`).\",\n+                        \"Show prefix or postfix depending on which uses less parenthesis, prefering prefix.\",\n+                        \"Show prefix or postfix depending on which uses less parenthesis, prefering postfix.\"\n+                    ]\n+                },\n                 \"rust-analyzer.inlayHints.lifetimeElisionHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for elided lifetimes in function signatures.\",\n                     \"default\": \"never\","}]}