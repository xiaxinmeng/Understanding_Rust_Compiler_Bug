{"sha": "d8d1d1059a7837551c0065fc060dcb806ad729ef", "node_id": "C_kwDOAAsO6NoAKGQ4ZDFkMTA1OWE3ODM3NTUxYzAwNjVmYzA2MGRjYjgwNmFkNzI5ZWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-21T22:07:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-21T22:07:32Z"}, "message": "Auto merge of #89158 - the8472:rollup-3e4ijth, r=the8472\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #88795 (Print a note if a character literal contains a variation selector)\n - #89015 (core::ascii::escape_default: reduce struct size)\n - #89078 (Cleanup: Remove needless reference in ParentHirIterator)\n - #89086 (Stabilize `Iterator::map_while`)\n - #89096 ([bootstrap] Improve the error message when `ninja` is not found to link to installation instructions)\n - #89113 (dont `.ensure()` the `thir_abstract_const` query call in `mir_build`)\n - #89114 (Fixes a technicality regarding the size of C's `char` type)\n - #89115 (:arrow_up: rust-analyzer)\n - #89126 (Fix ICE when `indirect_structural_match` is allowed)\n - #89141 (Impl `Error` for `FromSecsError` without foreign type)\n - #89142 (Fix match for placeholder region)\n - #89147 (add case for checking const refs in check_const_value_eq)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ad33e22ac8a336ba8f27beaaba0cd03b8b5d124c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad33e22ac8a336ba8f27beaaba0cd03b8b5d124c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8d1d1059a7837551c0065fc060dcb806ad729ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d1d1059a7837551c0065fc060dcb806ad729ef", "html_url": "https://github.com/rust-lang/rust/commit/d8d1d1059a7837551c0065fc060dcb806ad729ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8d1d1059a7837551c0065fc060dcb806ad729ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac2d9fc509e36d1b32513744adf58c34bcc4f43c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2d9fc509e36d1b32513744adf58c34bcc4f43c", "html_url": "https://github.com/rust-lang/rust/commit/ac2d9fc509e36d1b32513744adf58c34bcc4f43c"}, {"sha": "a3e6c19acf12d5995407220721f4fe28452e51da", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3e6c19acf12d5995407220721f4fe28452e51da", "html_url": "https://github.com/rust-lang/rust/commit/a3e6c19acf12d5995407220721f4fe28452e51da"}], "stats": {"total": 342, "additions": 275, "deletions": 67}, "files": [{"sha": "b1f04bfbf0a848993e327fd4a7c07ce037422f5f", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -18,7 +18,6 @@\n #![feature(extend_one)]\n #![feature(hash_raw_entry)]\n #![feature(in_band_lifetimes)]\n-#![feature(iter_map_while)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "3707fadadac208cf774ce2363aa25582d66cd5fd", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -83,12 +83,12 @@ pub struct Map<'hir> {\n \n /// An iterator that walks up the ancestor tree of a given `HirId`.\n /// Constructed using `tcx.hir().parent_iter(hir_id)`.\n-pub struct ParentHirIterator<'map, 'hir> {\n+pub struct ParentHirIterator<'hir> {\n     current_id: HirId,\n-    map: &'map Map<'hir>,\n+    map: Map<'hir>,\n }\n \n-impl<'hir> Iterator for ParentHirIterator<'_, 'hir> {\n+impl<'hir> Iterator for ParentHirIterator<'hir> {\n     type Item = (HirId, Node<'hir>);\n \n     fn next(&mut self) -> Option<Self::Item> {\n@@ -115,12 +115,12 @@ impl<'hir> Iterator for ParentHirIterator<'_, 'hir> {\n \n /// An iterator that walks up the ancestor tree of a given `HirId`.\n /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.\n-pub struct ParentOwnerIterator<'map, 'hir> {\n+pub struct ParentOwnerIterator<'hir> {\n     current_id: HirId,\n-    map: &'map Map<'hir>,\n+    map: Map<'hir>,\n }\n \n-impl<'hir> Iterator for ParentOwnerIterator<'_, 'hir> {\n+impl<'hir> Iterator for ParentOwnerIterator<'hir> {\n     type Item = (HirId, OwnerNode<'hir>);\n \n     fn next(&mut self) -> Option<Self::Item> {\n@@ -588,13 +588,13 @@ impl<'hir> Map<'hir> {\n \n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n     /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n-    pub fn parent_iter(&self, current_id: HirId) -> ParentHirIterator<'_, 'hir> {\n+    pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {\n         ParentHirIterator { current_id, map: self }\n     }\n \n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n     /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n-    pub fn parent_owner_iter(&self, current_id: HirId) -> ParentOwnerIterator<'_, 'hir> {\n+    pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {\n         ParentOwnerIterator { current_id, map: self }\n     }\n "}, {"sha": "3b0640eb98d93fc7035a65983dc4d06fa9dc8c3f", "filename": "compiler/rustc_middle/src/ich/impls_ty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_ty.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -90,7 +90,10 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::RegionKind {\n             ty::ReFree(ref free_region) => {\n                 free_region.hash_stable(hcx, hasher);\n             }\n-            ty::ReVar(..) | ty::RePlaceholder(..) => {\n+            ty::RePlaceholder(p) => {\n+                p.hash_stable(hcx, hasher);\n+            }\n+            ty::ReVar(..) => {\n                 bug!(\"StableHasher: unexpected region {:?}\", *self)\n             }\n         }"}, {"sha": "2c786538014ff20421324e5927de8a613caaf4e0", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -639,6 +639,15 @@ fn check_const_value_eq<R: TypeRelation<'tcx>>(\n             get_slice_bytes(&tcx, a_val) == get_slice_bytes(&tcx, b_val)\n         }\n \n+        (ConstValue::ByRef { alloc: alloc_a, .. }, ConstValue::ByRef { alloc: alloc_b, .. })\n+            if a.ty.is_ref() || b.ty.is_ref() =>\n+        {\n+            if a.ty.is_ref() && b.ty.is_ref() {\n+                alloc_a == alloc_b\n+            } else {\n+                false\n+            }\n+        }\n         (ConstValue::ByRef { .. }, ConstValue::ByRef { .. }) => {\n             let a_destructured = tcx.destructure_const(relation.param_env().and(a));\n             let b_destructured = tcx.destructure_const(relation.param_env().and(b));"}, {"sha": "4108ad50470b711f217ecdcfe9d07b24672e10cc", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -44,15 +44,18 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n     let body_owner_kind = tcx.hir().body_owner_kind(id);\n     let typeck_results = tcx.typeck_opt_const_arg(def);\n \n-    // Ensure unsafeck is ran before we steal the THIR.\n+    // Ensure unsafeck and abstract const building is ran before we steal the THIR.\n+    // We can't use `ensure()` for `thir_abstract_const` as it doesn't compute the query\n+    // if inputs are green. This can cause ICEs when calling `thir_abstract_const` after\n+    // THIR has been stolen if we haven't computed this query yet.\n     match def {\n         ty::WithOptConstParam { did, const_param_did: Some(const_param_did) } => {\n             tcx.ensure().thir_check_unsafety_for_const_arg((did, const_param_did));\n-            tcx.ensure().thir_abstract_const_of_const_arg((did, const_param_did));\n+            drop(tcx.thir_abstract_const_of_const_arg((did, const_param_did)));\n         }\n         ty::WithOptConstParam { did, const_param_did: None } => {\n             tcx.ensure().thir_check_unsafety(did);\n-            tcx.ensure().thir_abstract_const(did);\n+            drop(tcx.thir_abstract_const(did));\n         }\n     }\n "}, {"sha": "847b89f0464f6fa474ea962ed70448b24711a903", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -322,16 +322,18 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     && !self.saw_const_match_lint.get()\n                 {\n                     self.saw_const_match_lint.set(true);\n-                    let msg = format!(\n-                        \"to use a constant of type `{}` in a pattern, \\\n-                        `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                        cv.ty, cv.ty,\n-                    );\n                     tcx.struct_span_lint_hir(\n                         lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n                         id,\n                         span,\n-                        |lint| lint.build(&msg).emit(),\n+                        |lint| {\n+                            let msg = format!(\n+                                \"to use a constant of type `{}` in a pattern, \\\n+                                 `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                                cv.ty, cv.ty,\n+                            );\n+                            lint.build(&msg).emit()\n+                        },\n                     );\n                 }\n                 // Since we are behind a reference, we can just bubble the error up so we get a"}, {"sha": "cef5b3a226bff81a65f1fa69da5bdfc227e06a77", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 47, "deletions": 14, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -3,7 +3,7 @@\n use std::iter::once;\n use std::ops::Range;\n \n-use rustc_errors::{Applicability, Handler};\n+use rustc_errors::{pluralize, Applicability, Handler};\n use rustc_lexer::unescape::{EscapeError, Mode};\n use rustc_span::{BytePos, Span};\n \n@@ -49,24 +49,57 @@ pub(crate) fn emit_unescape_error(\n                 .emit();\n         }\n         EscapeError::MoreThanOneChar => {\n-            let (prefix, msg) = if mode.is_bytes() {\n-                (\"b\", \"if you meant to write a byte string literal, use double quotes\")\n-            } else {\n-                (\"\", \"if you meant to write a `str` literal, use double quotes\")\n-            };\n+            use unicode_normalization::{char::is_combining_mark, UnicodeNormalization};\n \n-            handler\n-                .struct_span_err(\n-                    span_with_quotes,\n-                    \"character literal may only contain one codepoint\",\n-                )\n-                .span_suggestion(\n+            let mut has_help = false;\n+            let mut handler = handler.struct_span_err(\n+                span_with_quotes,\n+                \"character literal may only contain one codepoint\",\n+            );\n+\n+            if lit.chars().skip(1).all(|c| is_combining_mark(c)) {\n+                let escaped_marks =\n+                    lit.chars().skip(1).map(|c| c.escape_default().to_string()).collect::<Vec<_>>();\n+                handler.span_note(\n+                    span,\n+                    &format!(\n+                        \"this `{}` is followed by the combining mark{} `{}`\",\n+                        lit.chars().next().unwrap(),\n+                        pluralize!(escaped_marks.len()),\n+                        escaped_marks.join(\"\"),\n+                    ),\n+                );\n+                let normalized = lit.nfc().to_string();\n+                if normalized.chars().count() == 1 {\n+                    has_help = true;\n+                    handler.span_suggestion(\n+                        span,\n+                        &format!(\n+                            \"consider using the normalized form `{}` of this character\",\n+                            normalized.chars().next().unwrap().escape_default()\n+                        ),\n+                        normalized,\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+\n+            if !has_help {\n+                let (prefix, msg) = if mode.is_bytes() {\n+                    (\"b\", \"if you meant to write a byte string literal, use double quotes\")\n+                } else {\n+                    (\"\", \"if you meant to write a `str` literal, use double quotes\")\n+                };\n+\n+                handler.span_suggestion(\n                     span_with_quotes,\n                     msg,\n                     format!(\"{}\\\"{}\\\"\", prefix, lit),\n                     Applicability::MachineApplicable,\n-                )\n-                .emit();\n+                );\n+            }\n+\n+            handler.emit();\n         }\n         EscapeError::EscapeOnlyChar => {\n             let (c, char_span) = last_char();"}, {"sha": "84e7c68713f231d9b231489943ba24d4fa7b2d3d", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -522,8 +522,7 @@ fn item_for(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> LocalDefId {\n         _ => {}\n     }\n     let item = {\n-        let hir = tcx.hir();\n-        let mut parent_iter = hir.parent_iter(hir_id);\n+        let mut parent_iter = tcx.hir().parent_iter(hir_id);\n         loop {\n             let node = parent_iter.next().map(|n| n.1);\n             match node {"}, {"sha": "cae4dae708e59cf927a1b10c1e91c78551d3e2fd", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -18,7 +18,6 @@\n #![feature(binary_heap_retain)]\n #![feature(binary_heap_as_slice)]\n #![feature(inplace_iteration)]\n-#![feature(iter_map_while)]\n #![feature(slice_group_by)]\n #![feature(slice_partition_dedup)]\n #![feature(vec_spare_capacity)]"}, {"sha": "0a456ee1eb2d59fde0ac9d7c2b56382ee0a1da1a", "filename": "library/core/src/ascii.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fcore%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fcore%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fascii.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -21,7 +21,7 @@ use crate::str::from_utf8_unchecked;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct EscapeDefault {\n-    range: Range<usize>,\n+    range: Range<u8>,\n     data: [u8; 4],\n }\n \n@@ -114,7 +114,7 @@ pub fn escape_default(c: u8) -> EscapeDefault {\n impl Iterator for EscapeDefault {\n     type Item = u8;\n     fn next(&mut self) -> Option<u8> {\n-        self.range.next().map(|i| self.data[i])\n+        self.range.next().map(|i| self.data[i as usize])\n     }\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.range.size_hint()\n@@ -126,7 +126,7 @@ impl Iterator for EscapeDefault {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl DoubleEndedIterator for EscapeDefault {\n     fn next_back(&mut self) -> Option<u8> {\n-        self.range.next_back().map(|i| self.data[i])\n+        self.range.next_back().map(|i| self.data[i as usize])\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -138,7 +138,9 @@ impl FusedIterator for EscapeDefault {}\n impl fmt::Display for EscapeDefault {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // SAFETY: ok because `escape_default` created only valid utf-8 data\n-        f.write_str(unsafe { from_utf8_unchecked(&self.data[self.range.clone()]) })\n+        f.write_str(unsafe {\n+            from_utf8_unchecked(&self.data[(self.range.start as usize)..(self.range.end as usize)])\n+        })\n     }\n }\n "}, {"sha": "793b05fcf9529da6f7465bca7dbdf9f6e13e80c4", "filename": "library/core/src/iter/adapters/map_while.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -10,7 +10,7 @@ use crate::ops::{ControlFlow, Try};\n /// [`map_while`]: Iterator::map_while\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n-#[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n+#[stable(feature = \"iter_map_while\", since = \"1.57.0\")]\n #[derive(Clone)]\n pub struct MapWhile<I, P> {\n     iter: I,\n@@ -23,14 +23,14 @@ impl<I, P> MapWhile<I, P> {\n     }\n }\n \n-#[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n+#[stable(feature = \"iter_map_while\", since = \"1.57.0\")]\n impl<I: fmt::Debug, P> fmt::Debug for MapWhile<I, P> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"MapWhile\").field(\"iter\", &self.iter).finish()\n     }\n }\n \n-#[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n+#[stable(feature = \"iter_map_while\", since = \"1.57.0\")]\n impl<B, I: Iterator, P> Iterator for MapWhile<I, P>\n where\n     P: FnMut(I::Item) -> Option<B>,"}, {"sha": "48e7dcfa7d9a30d838c275233a0f95f7645bb208", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -45,7 +45,7 @@ pub use self::copied::Copied;\n #[stable(feature = \"iter_intersperse\", since = \"1.56.0\")]\n pub use self::intersperse::{Intersperse, IntersperseWith};\n \n-#[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n+#[stable(feature = \"iter_map_while\", since = \"1.57.0\")]\n pub use self::map_while::MapWhile;\n \n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]"}, {"sha": "d6f9edaa046c69e5922678b94d67a68f52373fe8", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -399,7 +399,7 @@ pub use self::adapters::Cloned;\n pub use self::adapters::Copied;\n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n pub use self::adapters::Flatten;\n-#[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n+#[stable(feature = \"iter_map_while\", since = \"1.57.0\")]\n pub use self::adapters::MapWhile;\n #[unstable(feature = \"inplace_iteration\", issue = \"none\")]\n pub use self::adapters::SourceIter;"}, {"sha": "f884340f4e0bd02710d3d96684e8439ac34cacb9", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -1116,7 +1116,6 @@ pub trait Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(iter_map_while)]\n     /// let a = [-1i32, 4, 0, 1];\n     ///\n     /// let mut iter = a.iter().map_while(|x| 16i32.checked_div(*x));\n@@ -1147,7 +1146,6 @@ pub trait Iterator {\n     /// Stopping after an initial [`None`]:\n     ///\n     /// ```\n-    /// #![feature(iter_map_while)]\n     /// use std::convert::TryFrom;\n     ///\n     /// let a = [0, 1, 2, -3, 4, 5, -6];\n@@ -1165,7 +1163,6 @@ pub trait Iterator {\n     /// removed:\n     ///\n     /// ```\n-    /// #![feature(iter_map_while)]\n     /// use std::convert::TryFrom;\n     ///\n     /// let a = [1, 2, -3, 4];\n@@ -1191,7 +1188,7 @@ pub trait Iterator {\n     ///\n     /// [`fuse`]: Iterator::fuse\n     #[inline]\n-    #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n+    #[stable(feature = \"iter_map_while\", since = \"1.57.0\")]\n     fn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P>\n     where\n         Self: Sized,"}, {"sha": "cd3aed4cd28f81a7d90c9f7fc15cfb2a99d97d19", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -50,7 +50,6 @@\n #![feature(iter_partition_in_place)]\n #![feature(iter_is_partitioned)]\n #![feature(iter_order_by)]\n-#![feature(iter_map_while)]\n #![feature(const_mut_refs)]\n #![feature(const_pin)]\n #![feature(const_slice_from_raw_parts)]"}, {"sha": "cc4ea27e57e8d36d8c4f0d314bec127dc9540c26", "filename": "library/std/src/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -31,6 +31,7 @@ use crate::num;\n use crate::str;\n use crate::string;\n use crate::sync::Arc;\n+use crate::time;\n \n /// `Error` is a trait representing the basic expectations for error values,\n /// i.e., values of type `E` in [`Result<T, E>`].\n@@ -598,7 +599,7 @@ impl Error for char::ParseCharError {\n impl Error for alloc::collections::TryReserveError {}\n \n #[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n-impl Error for core::time::FromSecsError {}\n+impl Error for time::FromSecsError {}\n \n // Copied from `any.rs`.\n impl dyn Error + 'static {"}, {"sha": "375d070516eb49bcbf7c1d047b107f6e817275da", "filename": "library/std/src/os/raw/char.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fchar.md?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -1,6 +1,6 @@\n Equivalent to C's `char` type.\n \n-[C's `char` type] is completely unlike [Rust's `char` type]; while Rust's type represents a unicode scalar value, C's `char` type is just an ordinary integer. This type will always be either [`i8`] or [`u8`], as the type is defined as being one byte long.\n+[C's `char` type] is completely unlike [Rust's `char` type]; while Rust's type represents a unicode scalar value, C's `char` type is just an ordinary integer. On modern architectures this type will always be either [`i8`] or [`u8`], as they use byte-addresses memory with 8-bit bytes.\n \n C chars are most commonly used to make C strings. Unlike Rust, where the length of a string is included alongside the string, C strings mark the end of a string with the character `'\\0'`. See [`CStr`] for more information.\n "}, {"sha": "bf3eb5b30c77d356d9b1d256b25c9ae1f22c05ba", "filename": "library/std/src/time.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -44,6 +44,9 @@ use crate::sys_common::FromInner;\n #[stable(feature = \"time\", since = \"1.3.0\")]\n pub use core::time::Duration;\n \n+#[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n+pub use core::time::FromSecsError;\n+\n /// A measurement of a monotonically nondecreasing clock.\n /// Opaque and useful only with [`Duration`].\n ///"}, {"sha": "2d4e15278972469bacd9de44c1b11b34fcaf39f5", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -1494,8 +1494,13 @@ impl Build {\n             {\n                 eprintln!(\n                     \"\n-Couldn't find required command: ninja\n-You should install ninja, or set `ninja=false` in config.toml in the `[llvm]` section.\n+Couldn't find required command: ninja (or ninja-build)\n+\n+You should install ninja as described at\n+<https://github.com/ninja-build/ninja/wiki/Pre-built-Ninja-packages>,\n+or set `ninja = false` in the `[llvm]` section of `config.toml`.\n+Alternatively, set `download-ci-llvm = true` in that `[llvm]` section\n+to download LLVM rather than building it.\n \"\n                 );\n                 std::process::exit(1);"}, {"sha": "40cc665fb612bd325835d1c1652171261fc05a76", "filename": "src/test/ui/consts/issue-89088.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftest%2Fui%2Fconsts%2Fissue-89088.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftest%2Fui%2Fconsts%2Fissue-89088.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-89088.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -0,0 +1,22 @@\n+// Regression test for the ICE described in #89088.\n+\n+// check-pass\n+\n+#![allow(indirect_structural_match)]\n+use std::borrow::Cow;\n+\n+const FOO: &A = &A::Field(Cow::Borrowed(\"foo\"));\n+\n+#[derive(PartialEq, Eq)]\n+enum A {\n+    Field(Cow<'static, str>)\n+}\n+\n+fn main() {\n+    let var = A::Field(Cow::Borrowed(\"bar\"));\n+\n+    match &var {\n+        FOO => todo!(),\n+        _ => todo!()\n+    }\n+}"}, {"sha": "204d18ea25de4482ead25c12fd49f9a1bc7b43ff", "filename": "src/test/ui/consts/refs_check_const_eq-issue-88384.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+\n+#![feature(fn_traits)]\n+#![feature(adt_const_params)]\n+//~^ WARNING the feature `adt_const_params` is incomplete\n+\n+#[derive(PartialEq, Eq)]\n+struct CompileTimeSettings{\n+    hooks: &'static[fn()],\n+}\n+\n+struct Foo<const T: CompileTimeSettings>;\n+\n+impl<const T: CompileTimeSettings> Foo<T> {\n+    fn call_hooks(){\n+    }\n+}\n+\n+fn main(){\n+    const SETTINGS: CompileTimeSettings = CompileTimeSettings{\n+        hooks: &[],\n+    };\n+\n+    Foo::<SETTINGS>::call_hooks();\n+}"}, {"sha": "55928b495b24caf4c401492be1718db7bb6b5574", "filename": "src/test/ui/consts/refs_check_const_eq-issue-88384.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/refs_check_const_eq-issue-88384.rs:4:12\n+   |\n+LL | #![feature(adt_const_params)]\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "6ce9da436680047d2632c3274997e5eeda4666c1", "filename": "src/test/ui/consts/refs_check_const_value_eq-issue-88876.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_value_eq-issue-88876.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_value_eq-issue-88876.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_value_eq-issue-88876.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(adt_const_params)]\n+\n+struct FooConst<const ARRAY: &'static [&'static str]> {}\n+\n+const FOO_ARR: &[&'static str; 2] = &[\"Hello\", \"Friend\"];\n+\n+fn main() {\n+    let _ = FooConst::<FOO_ARR> {};\n+}"}, {"sha": "26ef5ffa11a80ff17b6751e016697f11786d3593", "filename": "src/test/ui/parser/unicode-character-literal.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.fixed?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #88684: Improve diagnostics for combining marks\n+// in character literals.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let _spade = \"\u2660\ufe0f\";\n+    //~^ ERROR: character literal may only contain one codepoint\n+    //~| NOTE: this `\u2660` is followed by the combining mark `\\u{fe0f}`\n+    //~| HELP: if you meant to write a `str` literal, use double quotes\n+\n+    let _s = \"s\u0323\u0307\u0302\u030a\";\n+    //~^ ERROR: character literal may only contain one codepoint\n+    //~| NOTE: this `s` is followed by the combining marks `\\u{323}\\u{307}\\u{302}\\u{30a}`\n+    //~| HELP: if you meant to write a `str` literal, use double quotes\n+\n+    let _a = '\u00c5';\n+    //~^ ERROR: character literal may only contain one codepoint\n+    //~| NOTE: this `A` is followed by the combining mark `\\u{30a}`\n+    //~| HELP: consider using the normalized form `\\u{c5}` of this character\n+}"}, {"sha": "d331522c04cbb7370e8e3e419a2062fec784a106", "filename": "src/test/ui/parser/unicode-character-literal.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #88684: Improve diagnostics for combining marks\n+// in character literals.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let _spade = '\u2660\ufe0f';\n+    //~^ ERROR: character literal may only contain one codepoint\n+    //~| NOTE: this `\u2660` is followed by the combining mark `\\u{fe0f}`\n+    //~| HELP: if you meant to write a `str` literal, use double quotes\n+\n+    let _s = 's\u0323\u0307\u0302\u030a';\n+    //~^ ERROR: character literal may only contain one codepoint\n+    //~| NOTE: this `s` is followed by the combining marks `\\u{323}\\u{307}\\u{302}\\u{30a}`\n+    //~| HELP: if you meant to write a `str` literal, use double quotes\n+\n+    let _a = 'A\u030a';\n+    //~^ ERROR: character literal may only contain one codepoint\n+    //~| NOTE: this `A` is followed by the combining mark `\\u{30a}`\n+    //~| HELP: consider using the normalized form `\\u{c5}` of this character\n+}"}, {"sha": "5cd3bd0fe69d797b43e81038ec8806e438486113", "filename": "src/test/ui/parser/unicode-character-literal.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.stderr?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -0,0 +1,48 @@\n+error: character literal may only contain one codepoint\n+  --> $DIR/unicode-character-literal.rs:7:18\n+   |\n+LL |     let _spade = '\u2660\ufe0f';\n+   |                  ^^^\n+   |\n+note: this `\u2660` is followed by the combining mark `\\u{fe0f}`\n+  --> $DIR/unicode-character-literal.rs:7:19\n+   |\n+LL |     let _spade = '\u2660\ufe0f';\n+   |                   ^\n+help: if you meant to write a `str` literal, use double quotes\n+   |\n+LL |     let _spade = \"\u2660\ufe0f\";\n+   |                  ~~~\n+\n+error: character literal may only contain one codepoint\n+  --> $DIR/unicode-character-literal.rs:12:14\n+   |\n+LL |     let _s = 's\u0323\u0307\u0302\u030a';\n+   |              ^^^\n+   |\n+note: this `s` is followed by the combining marks `\\u{323}\\u{307}\\u{302}\\u{30a}`\n+  --> $DIR/unicode-character-literal.rs:12:15\n+   |\n+LL |     let _s = 's\u0323\u0307\u0302\u030a';\n+   |               ^\n+help: if you meant to write a `str` literal, use double quotes\n+   |\n+LL |     let _s = \"s\u0323\u0307\u0302\u030a\";\n+   |              ~~~\n+\n+error: character literal may only contain one codepoint\n+  --> $DIR/unicode-character-literal.rs:17:14\n+   |\n+LL |     let _a = 'A\u030a';\n+   |              ^-^\n+   |               |\n+   |               help: consider using the normalized form `\\u{c5}` of this character: `\u00c5`\n+   |\n+note: this `A` is followed by the combining mark `\\u{30a}`\n+  --> $DIR/unicode-character-literal.rs:17:15\n+   |\n+LL |     let _a = 'A\u030a';\n+   |               ^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "94b3cd371bd08ab0113eb96fd24255c9d43b6945", "filename": "src/tools/clippy/clippy_utils/src/higher.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -105,8 +105,7 @@ impl<'hir> IfLet<'hir> {\n             if_else,\n         ) = expr.kind\n         {\n-            let hir = cx.tcx.hir();\n-            let mut iter = hir.parent_iter(expr.hir_id);\n+            let mut iter = cx.tcx.hir().parent_iter(expr.hir_id);\n             if let Some((_, Node::Block(Block { stmts: [], .. }))) = iter.next() {\n                 if let Some((\n                     _,"}, {"sha": "7f5a1bf9c0741707f0e4e34a66cb0fb6a6e199d7", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d1d1059a7837551c0065fc060dcb806ad729ef/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -833,12 +833,11 @@ pub fn capture_local_usage(cx: &LateContext<'tcx>, e: &Expr<'_>) -> CaptureKind\n         ExprKind::Path(QPath::Resolved(None, Path { res: Res::Local(_), .. }))\n     ));\n \n-    let map = cx.tcx.hir();\n     let mut child_id = e.hir_id;\n     let mut capture = CaptureKind::Value;\n     let mut capture_expr_ty = e;\n \n-    for (parent_id, parent) in map.parent_iter(e.hir_id) {\n+    for (parent_id, parent) in cx.tcx.hir().parent_iter(e.hir_id) {\n         if let [Adjustment {\n             kind: Adjust::Deref(_) | Adjust::Borrow(AutoBorrow::Ref(..)),\n             target,\n@@ -1224,8 +1223,7 @@ pub fn get_enclosing_block<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n \n /// Gets the loop or closure enclosing the given expression, if any.\n pub fn get_enclosing_loop_or_closure(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n-    let map = tcx.hir();\n-    for (_, node) in map.parent_iter(expr.hir_id) {\n+    for (_, node) in tcx.hir().parent_iter(expr.hir_id) {\n         match node {\n             Node::Expr(\n                 e\n@@ -1244,8 +1242,7 @@ pub fn get_enclosing_loop_or_closure(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Opti\n \n /// Gets the parent node if it's an impl block.\n pub fn get_parent_as_impl(tcx: TyCtxt<'_>, id: HirId) -> Option<&Impl<'_>> {\n-    let map = tcx.hir();\n-    match map.parent_iter(id).next() {\n+    match tcx.hir().parent_iter(id).next() {\n         Some((\n             _,\n             Node::Item(Item {\n@@ -1259,8 +1256,7 @@ pub fn get_parent_as_impl(tcx: TyCtxt<'_>, id: HirId) -> Option<&Impl<'_>> {\n \n /// Checks if the given expression is the else clause of either an `if` or `if let` expression.\n pub fn is_else_clause(tcx: TyCtxt<'_>, expr: &Expr<'_>) -> bool {\n-    let map = tcx.hir();\n-    let mut iter = map.parent_iter(expr.hir_id);\n+    let mut iter = tcx.hir().parent_iter(expr.hir_id);\n     match iter.next() {\n         Some((\n             _,\n@@ -1794,9 +1790,8 @@ pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool\n \n /// Gets the node where an expression is either used, or it's type is unified with another branch.\n pub fn get_expr_use_or_unification_node(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<Node<'tcx>> {\n-    let map = tcx.hir();\n     let mut child_id = expr.hir_id;\n-    let mut iter = map.parent_iter(child_id);\n+    let mut iter = tcx.hir().parent_iter(child_id);\n     loop {\n         match iter.next() {\n             None => break None,"}, {"sha": "f1d7f98ed07b9934286b9c4809dd4d7a47537879", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=d8d1d1059a7837551c0065fc060dcb806ad729ef", "patch": "@@ -1 +1 @@\n-Subproject commit b73b321478d3b2a98d380eb79de717e01620c4e9\n+Subproject commit f1d7f98ed07b9934286b9c4809dd4d7a47537879"}]}