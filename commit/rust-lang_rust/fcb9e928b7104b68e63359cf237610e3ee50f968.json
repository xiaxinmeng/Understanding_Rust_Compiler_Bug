{"sha": "fcb9e928b7104b68e63359cf237610e3ee50f968", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYjllOTI4YjcxMDRiNjhlNjMzNTljZjIzNzYxMGUzZWU1MGY5Njg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-01-19T22:18:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-01-20T02:32:43Z"}, "message": "Integrate generators to universal region setup", "tree": {"sha": "e34752c2d71e4282dee957f441c1f8570fc00b60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e34752c2d71e4282dee957f441c1f8570fc00b60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcb9e928b7104b68e63359cf237610e3ee50f968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb9e928b7104b68e63359cf237610e3ee50f968", "html_url": "https://github.com/rust-lang/rust/commit/fcb9e928b7104b68e63359cf237610e3ee50f968", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcb9e928b7104b68e63359cf237610e3ee50f968/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d259b23a4d69dad34f6ad1041faed84ba304fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d259b23a4d69dad34f6ad1041faed84ba304fc5", "html_url": "https://github.com/rust-lang/rust/commit/5d259b23a4d69dad34f6ad1041faed84ba304fc5"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "57ed41f2f06e63c7ef6968409e55754ef44f3dbc", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fcb9e928b7104b68e63359cf237610e3ee50f968/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb9e928b7104b68e63359cf237610e3ee50f968/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=fcb9e928b7104b68e63359cf237610e3ee50f968", "patch": "@@ -277,6 +277,13 @@ macro_rules! make_mir_visitor {\n \n             fn super_mir(&mut self,\n                          mir: & $($mutability)* Mir<'tcx>) {\n+                if let Some(yield_ty) = &$($mutability)* mir.yield_ty {\n+                    self.visit_ty(yield_ty, TyContext::YieldTy(SourceInfo {\n+                        span: mir.span,\n+                        scope: ARGUMENT_VISIBILITY_SCOPE,\n+                    }));\n+                }\n+\n                 // for best performance, we want to use an iterator rather\n                 // than a for-loop, to avoid calling Mir::invalidate for\n                 // each basic block.\n@@ -852,6 +859,8 @@ pub enum TyContext {\n     /// The return type of the function.\n     ReturnTy(SourceInfo),\n \n+    YieldTy(SourceInfo),\n+\n     /// A type found at some location.\n     Location(Location),\n }"}, {"sha": "3a39eb5c908de3660efe06d05d7a7da6e2d4d9a1", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcb9e928b7104b68e63359cf237610e3ee50f968/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb9e928b7104b68e63359cf237610e3ee50f968/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=fcb9e928b7104b68e63359cf237610e3ee50f968", "patch": "@@ -69,6 +69,7 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n     fn visit_ty(&mut self, ty: &ty::Ty<'tcx>, ty_context: TyContext) {\n         match ty_context {\n             TyContext::ReturnTy(source_info) |\n+            TyContext::YieldTy(source_info) |\n             TyContext::LocalDecl { source_info, .. } => {\n                 span_bug!(source_info.span,\n                           \"should not be visiting outside of the CFG: {:?}\","}, {"sha": "b1aeae0b76bb112b48234a286e1909d050db9dd9", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fcb9e928b7104b68e63359cf237610e3ee50f968/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb9e928b7104b68e63359cf237610e3ee50f968/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=fcb9e928b7104b68e63359cf237610e3ee50f968", "patch": "@@ -60,6 +60,15 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             self.equate_normalized_input_or_output(start_position, input_ty, mir_input_ty);\n         }\n \n+        assert!(\n+            mir.yield_ty.is_some() && universal_regions.yield_ty.is_some() ||\n+            mir.yield_ty.is_none() && universal_regions.yield_ty.is_none()\n+            );\n+        if let Some(mir_yield_ty) = mir.yield_ty {\n+            let ur_yield_ty = universal_regions.yield_ty.unwrap();\n+            self.equate_normalized_input_or_output(start_position, ur_yield_ty, mir_yield_ty);\n+        }\n+\n         // Return types are a bit more complex. They may contain existential `impl Trait`\n         // types.\n         debug!("}, {"sha": "e426457a3493d8564dd85c7bb3ad979a24d23fab", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcb9e928b7104b68e63359cf237610e3ee50f968/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb9e928b7104b68e63359cf237610e3ee50f968/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=fcb9e928b7104b68e63359cf237610e3ee50f968", "patch": "@@ -96,6 +96,8 @@ pub struct UniversalRegions<'tcx> {\n     /// our special inference variable there, we would mess that up.\n     pub region_bound_pairs: Vec<(ty::Region<'tcx>, GenericKind<'tcx>)>,\n \n+    pub yield_ty: Option<Ty<'tcx>>,\n+\n     relations: UniversalRegionRelations,\n }\n \n@@ -505,6 +507,13 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n             num_universals\n         );\n \n+        let yield_ty = match defining_ty {\n+            DefiningTy::Generator(def_id, substs, _) => {\n+                Some(substs.generator_yield_ty(def_id, self.infcx.tcx))\n+            }\n+            _ => None,\n+        };\n+\n         UniversalRegions {\n             indices,\n             fr_static,\n@@ -516,6 +525,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n             unnormalized_output_ty,\n             unnormalized_input_tys,\n             region_bound_pairs: self.region_bound_pairs,\n+            yield_ty: yield_ty,\n             relations: self.relations,\n         }\n     }"}]}