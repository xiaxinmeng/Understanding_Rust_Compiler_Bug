{"sha": "d3362a2222481ce93c921bcc2781ffd401551628", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMzYyYTIyMjI0ODFjZTkzYzkyMWJjYzI3ODFmZmQ0MDE1NTE2Mjg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-30T14:40:21Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-30T14:40:21Z"}, "message": "don't lint on binding names where only a numeric char changes to another numeric", "tree": {"sha": "a1122f6aaf59b03d4b1eda10e89f54f758baf238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1122f6aaf59b03d4b1eda10e89f54f758baf238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3362a2222481ce93c921bcc2781ffd401551628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3362a2222481ce93c921bcc2781ffd401551628", "html_url": "https://github.com/rust-lang/rust/commit/d3362a2222481ce93c921bcc2781ffd401551628", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3362a2222481ce93c921bcc2781ffd401551628/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77652243aef0a5848ef2858b26443b9d3943ec83", "url": "https://api.github.com/repos/rust-lang/rust/commits/77652243aef0a5848ef2858b26443b9d3943ec83", "html_url": "https://github.com/rust-lang/rust/commit/77652243aef0a5848ef2858b26443b9d3943ec83"}], "stats": {"total": 63, "additions": 31, "deletions": 32}, "files": [{"sha": "394812dc4cb39ab88c08e884bde715eef644e622", "filename": "src/non_expressive_names.rs", "status": "modified", "additions": 22, "deletions": 32, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d3362a2222481ce93c921bcc2781ffd401551628/src%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3362a2222481ce93c921bcc2781ffd401551628/src%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnon_expressive_names.rs?ref=d3362a2222481ce93c921bcc2781ffd401551628", "patch": "@@ -133,46 +133,36 @@ impl<'a, 'b, 'c> SimilarNamesNameVisitor<'a, 'b, 'c> {\n             } else {\n                 let mut interned_chars = interned_name.chars();\n                 let mut existing_chars = existing_name.chars();\n+                let first_i = interned_chars.next().expect(\"we know we have at least one char\");\n+                let first_e = existing_chars.next().expect(\"we know we have at least one char\");\n+                let eq_or_numeric = |a: char, b: char| a == b || a.is_numeric() && b.is_numeric();\n \n-                if interned_chars.next() != existing_chars.next() {\n-                    let i = interned_chars.next().expect(\"we know we have more than 1 char\");\n-                    let e = existing_chars.next().expect(\"we know we have more than 1 char\");\n-                    if i == e {\n-                        if i == '_' {\n-                            // allowed similarity x_foo, y_foo\n-                            // or too many chars differ (x_foo, y_boo)\n+                if eq_or_numeric(first_i, first_e) {\n+                    let last_i = interned_chars.next_back().expect(\"we know we have at least two chars\");\n+                    let last_e = existing_chars.next_back().expect(\"we know we have at least two chars\");\n+                    if eq_or_numeric(last_i, last_e) {\n+                        if interned_chars.zip(existing_chars).filter(|&(i, e)| !eq_or_numeric(i, e)).count() != 1 {\n                             continue;\n-                        } else if interned_chars.ne(existing_chars) {\n-                            // too many chars differ\n-                            continue\n                         }\n                     } else {\n-                        // too many chars differ\n-                        continue;\n-                    }\n-                    split_at = interned_name.chars().next().map(|c| c.len_utf8());\n-                } else if interned_chars.next_back() == existing_chars.next_back() {\n-                    if interned_chars.zip(existing_chars).filter(|&(i, e)| i != e).count() != 1 {\n-                        // too many chars differ, or none differ (aka shadowing)\n-                        continue;\n-                    }\n-                } else {\n-                    let i = interned_chars.next_back().expect(\"we know we have more than 2 chars\");\n-                    let e = existing_chars.next_back().expect(\"we know we have more than 2 chars\");\n-                    if i == e {\n-                        if i == '_' {\n-                            // allowed similarity foo_x, foo_x\n-                            // or too many chars differ (foo_x, boo_x)\n+                        let second_last_i = interned_chars.next_back().expect(\"we know we have at least three chars\");\n+                        let second_last_e = existing_chars.next_back().expect(\"we know we have at least three chars\");\n+                        if !eq_or_numeric(second_last_i, second_last_e) || second_last_i == '_' || !interned_chars.zip(existing_chars).all(|(i, e)| eq_or_numeric(i, e)) {\n+                            // allowed similarity foo_x, foo_y\n+                            // or too many chars differ (foo_x, boo_y) or (foox, booy)\n                             continue;\n-                        } else if interned_chars.ne(existing_chars) {\n-                            // too many chars differ\n-                            continue\n                         }\n-                    } else {\n-                        // too many chars differ\n+                        split_at = interned_name.char_indices().rev().next().map(|(i, _)| i);\n+                    }\n+                } else {\n+                    let second_i = interned_chars.next().expect(\"we know we have at least two chars\");\n+                    let second_e = existing_chars.next().expect(\"we know we have at least two chars\");\n+                    if !eq_or_numeric(second_i, second_e) || second_i == '_' || !interned_chars.zip(existing_chars).all(|(i, e)| eq_or_numeric(i, e)) {\n+                        // allowed similarity x_foo, y_foo\n+                        // or too many chars differ (x_foo, y_boo) or (xfoo, yboo)\n                         continue;\n                     }\n-                    split_at = interned_name.char_indices().rev().next().map(|(i, _)| i);\n+                    split_at = interned_name.chars().next().map(|c| c.len_utf8());\n                 }\n             }\n             span_lint_and_then(self.0.cx,"}, {"sha": "7d0cea70366932f7e1cb7a450c42fb60b7fa4fe5", "filename": "tests/compile-fail/non_expressive_names.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3362a2222481ce93c921bcc2781ffd401551628/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3362a2222481ce93c921bcc2781ffd401551628/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnon_expressive_names.rs?ref=d3362a2222481ce93c921bcc2781ffd401551628", "patch": "@@ -10,6 +10,7 @@\n //~| NOTE: lint level defined here\n //~| NOTE: lint level defined here\n //~| NOTE: lint level defined here\n+//~| NOTE: lint level defined here\n #![allow(unused)]\n \n fn main() {\n@@ -67,6 +68,14 @@ fn main() {\n         (cheese2, 2) => panic!(),\n         _ => println!(\"\"),\n     }\n+    let ipv4: i32;\n+    let ipv6: i32;\n+    let abcd1: i32;\n+    let abdc2: i32;\n+    let xyz1abc: i32; //~ NOTE: existing binding defined here\n+    let xyz2abc: i32;\n+    let xyzeabc: i32; //~ ERROR: name is too similar\n+    //~| HELP: for further information visit\n }\n \n #[derive(Clone, Debug)]"}]}