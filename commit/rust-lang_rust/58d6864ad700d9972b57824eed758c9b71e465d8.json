{"sha": "58d6864ad700d9972b57824eed758c9b71e465d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZDY4NjRhZDcwMGQ5OTcyYjU3ODI0ZWVkNzU4YzliNzFlNDY1ZDg=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-25T13:52:25Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-26T14:26:04Z"}, "message": "add an align parameter to call_memcpy", "tree": {"sha": "f005a7eb4c7edf67eecfc99299a8c7e13707ed2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f005a7eb4c7edf67eecfc99299a8c7e13707ed2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58d6864ad700d9972b57824eed758c9b71e465d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58d6864ad700d9972b57824eed758c9b71e465d8", "html_url": "https://github.com/rust-lang/rust/commit/58d6864ad700d9972b57824eed758c9b71e465d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58d6864ad700d9972b57824eed758c9b71e465d8/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6023a01d43557b45dda550ef50d689877b87226", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6023a01d43557b45dda550ef50d689877b87226", "html_url": "https://github.com/rust-lang/rust/commit/f6023a01d43557b45dda550ef50d689877b87226"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "5fa0ade6055fbf80eec545e0327f3146f4ba8388", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/58d6864ad700d9972b57824eed758c9b71e465d8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d6864ad700d9972b57824eed758c9b71e465d8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=58d6864ad700d9972b57824eed758c9b71e465d8", "patch": "@@ -52,7 +52,7 @@ use middle::trans::foreign;\n use middle::trans::glue;\n use middle::trans::inline;\n use middle::trans::machine;\n-use middle::trans::machine::llsize_of;\n+use middle::trans::machine::{llalign_of_min, llsize_of};\n use middle::trans::meth;\n use middle::trans::monomorphize;\n use middle::trans::reachable;\n@@ -1442,12 +1442,7 @@ pub fn with_cond(bcx: block, val: ValueRef, f: &fn(block) -> block) -> block {\n     next_cx\n }\n \n-pub fn call_memcpy(cx: block, dst: ValueRef, src: ValueRef,\n-                   n_bytes: ValueRef) {\n-    // FIXME (Related to #1645, I think?): Provide LLVM with better\n-    // alignment information when the alignment is statically known (it must\n-    // be nothing more than a constant int, or LLVM complains -- not even a\n-    // constant element of a tydesc works).\n+pub fn call_memcpy(cx: block, dst: ValueRef, src: ValueRef, n_bytes: ValueRef, align: u32) {\n     let _icx = cx.insn_ctxt(\"call_memcpy\");\n     let ccx = cx.ccx();\n     let key = match ccx.sess.targ_cfg.arch {\n@@ -1462,7 +1457,7 @@ pub fn call_memcpy(cx: block, dst: ValueRef, src: ValueRef,\n     let src_ptr = PointerCast(cx, src, T_ptr(T_i8()));\n     let dst_ptr = PointerCast(cx, dst, T_ptr(T_i8()));\n     let size = IntCast(cx, n_bytes, ccx.int_type);\n-    let align = C_i32(1i32);\n+    let align = C_i32(align as i32);\n     let volatile = C_i1(false);\n     Call(cx, memcpy, [dst_ptr, src_ptr, size, align, volatile]);\n }\n@@ -1471,8 +1466,10 @@ pub fn memcpy_ty(bcx: block, dst: ValueRef, src: ValueRef, t: ty::t) {\n     let _icx = bcx.insn_ctxt(\"memcpy_ty\");\n     let ccx = bcx.ccx();\n     if ty::type_is_structural(t) {\n-        let llsz = llsize_of(ccx, type_of::type_of(ccx, t));\n-        call_memcpy(bcx, dst, src, llsz);\n+        let llty = type_of::type_of(ccx, t);\n+        let llsz = llsize_of(ccx, llty);\n+        let llalign = llalign_of_min(ccx, llty);\n+        call_memcpy(bcx, dst, src, llsz, llalign as u32);\n     } else {\n         Store(bcx, Load(bcx, src), dst);\n     }"}, {"sha": "335dd47b78b1fc0cce4158ed5c6e79de1cc2218c", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58d6864ad700d9972b57824eed758c9b71e465d8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d6864ad700d9972b57824eed758c9b71e465d8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=58d6864ad700d9972b57824eed758c9b71e465d8", "patch": "@@ -521,7 +521,7 @@ pub fn make_opaque_cbox_take_glue(\n             [opaque_tydesc, sz],\n             expr::SaveIn(rval));\n         let cbox_out = PointerCast(bcx, Load(bcx, rval), llopaquecboxty);\n-        call_memcpy(bcx, cbox_out, cbox_in, sz);\n+        call_memcpy(bcx, cbox_out, cbox_in, sz, 1);\n         Store(bcx, cbox_out, cboxptr);\n \n         // Take the (deeply cloned) type descriptor"}, {"sha": "ff17dd82687c2ffcd712a84bfd411173181c574a", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58d6864ad700d9972b57824eed758c9b71e465d8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d6864ad700d9972b57824eed758c9b71e465d8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=58d6864ad700d9972b57824eed758c9b71e465d8", "patch": "@@ -787,7 +787,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n                 let llsrcptr = PointerCast(bcx, llsrcptr, T_ptr(T_i8()));\n \n                 let llsize = llsize_of(ccx, llintype);\n-                call_memcpy(bcx, lldestptr, llsrcptr, llsize);\n+                call_memcpy(bcx, lldestptr, llsrcptr, llsize, 1);\n             }\n         }\n         ~\"needs_drop\" => {"}, {"sha": "278a73558926c2adf2ef97174b8fdb81ef65ae04", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58d6864ad700d9972b57824eed758c9b71e465d8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d6864ad700d9972b57824eed758c9b71e465d8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=58d6864ad700d9972b57824eed758c9b71e465d8", "patch": "@@ -125,7 +125,7 @@ pub fn duplicate_uniq(bcx: block, vptr: ValueRef, vec_ty: ty::t) -> Result {\n \n     let data_ptr = get_dataptr(bcx, get_bodyptr(bcx, vptr));\n     let new_data_ptr = get_dataptr(bcx, get_bodyptr(bcx, newptr));\n-    base::call_memcpy(bcx, new_data_ptr, data_ptr, fill);\n+    base::call_memcpy(bcx, new_data_ptr, data_ptr, fill, 1);\n \n     let bcx = if ty::type_needs_drop(bcx.tcx(), unit_ty) {\n         iter_vec_raw(bcx, new_data_ptr, vec_ty, fill, glue::take_ty)\n@@ -370,7 +370,7 @@ pub fn write_content(bcx: block,\n                     let bytes = s.len() + 1; // copy null-terminator too\n                     let llbytes = C_uint(bcx.ccx(), bytes);\n                     let llcstr = C_cstr(bcx.ccx(), s);\n-                    base::call_memcpy(bcx, lldest, llcstr, llbytes);\n+                    base::call_memcpy(bcx, lldest, llcstr, llbytes, 1);\n                     return bcx;\n                 }\n             }"}]}