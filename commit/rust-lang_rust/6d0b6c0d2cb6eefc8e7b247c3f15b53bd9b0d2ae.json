{"sha": "6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae", "node_id": "C_kwDOAAsO6NoAKDZkMGI2YzBkMmNiNmVlZmM4ZTdiMjQ3YzNmMTViNTNiZDliMGQyYWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-05T04:57:50Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-15T16:40:42Z"}, "message": "Tweaks and a test", "tree": {"sha": "f5f68a52d7c0ca1812a20561eb0bdb0c0643a2a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5f68a52d7c0ca1812a20561eb0bdb0c0643a2a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae", "html_url": "https://github.com/rust-lang/rust/commit/6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ce2123ecc2b23b270cf869dff2dacb4f72cf745", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce2123ecc2b23b270cf869dff2dacb4f72cf745", "html_url": "https://github.com/rust-lang/rust/commit/4ce2123ecc2b23b270cf869dff2dacb4f72cf745"}], "stats": {"total": 148, "additions": 97, "deletions": 51}, "files": [{"sha": "aa3e31533791e00876d9a07e14e71e695a094bae", "filename": "compiler/rustc_infer/src/infer/generalize.rs", "status": "modified", "additions": 52, "deletions": 51, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fgeneralize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fgeneralize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fgeneralize.rs?ref=6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae", "patch": "@@ -52,7 +52,7 @@ pub trait GeneralizerDelegate<'tcx> {\n \n     fn forbid_inference_vars() -> bool;\n \n-    fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx>;\n+    fn generalize_region(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx>;\n }\n \n pub struct CombineDelegate<'cx, 'tcx> {\n@@ -70,7 +70,9 @@ impl<'tcx> GeneralizerDelegate<'tcx> for CombineDelegate<'_, 'tcx> {\n         false\n     }\n \n-    fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n+    fn generalize_region(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n+        // FIXME: This is non-ideal because we don't give a\n+        // very descriptive origin for this region variable.\n         self.infcx\n             .next_region_var_in_universe(RegionVariableOrigin::MiscVariable(self.span), universe)\n     }\n@@ -88,18 +90,17 @@ where\n         <Self as TypeRelatingDelegate<'tcx>>::forbid_inference_vars()\n     }\n \n-    fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n+    fn generalize_region(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n         <Self as TypeRelatingDelegate<'tcx>>::generalize_existential(self, universe)\n     }\n }\n \n-/// The \"type generalizer\" is used when handling inference variables.\n+/// The \"generalizer\" is used when handling inference variables.\n ///\n /// The basic strategy for handling a constraint like `?A <: B` is to\n-/// apply a \"generalization strategy\" to the type `B` -- this replaces\n-/// all the lifetimes in the type `B` with fresh inference\n-/// variables. (You can read more about the strategy in this [blog\n-/// post].)\n+/// apply a \"generalization strategy\" to the term `B` -- this replaces\n+/// all the lifetimes in the term `B` with fresh inference variables.\n+/// (You can read more about the strategy in this [blog post].)\n ///\n /// As an example, if we had `?A <: &'x u32`, we would generalize `&'x\n /// u32` to `&'0 u32` where `'0` is a fresh variable. This becomes the\n@@ -110,9 +111,11 @@ where\n struct Generalizer<'me, 'tcx, D> {\n     infcx: &'me InferCtxt<'tcx>,\n \n-    // An delegate used to abstract the behaviors of the three previous\n-    // generalizer-like implementations.\n-    pub delegate: &'me mut D,\n+    /// This is used to abstract the behaviors of the three previous\n+    /// generalizer-like implementations (`Generalizer`, `TypeGeneralizer`,\n+    /// and `ConstInferUnifier`). See [`GeneralizerDelegate`] for more\n+    /// information.\n+    delegate: &'me mut D,\n \n     /// After we generalize this type, we are going to relate it to\n     /// some other type. What will be the variance at this point?\n@@ -138,6 +141,7 @@ struct Generalizer<'me, 'tcx, D> {\n }\n \n impl<'tcx, D> Generalizer<'_, 'tcx, D> {\n+    /// Create an error that corresponds to the term kind in `root_term`\n     fn cyclic_term_error(&self) -> TypeError<'tcx> {\n         match self.root_term.unpack() {\n             ty::TermKind::Ty(ty) => TypeError::CyclicTy(ty),\n@@ -183,44 +187,37 @@ where\n             relate::relate_substs_with_variances(\n                 self,\n                 item_def_id,\n-                &opt_variances,\n+                opt_variances,\n                 a_subst,\n                 b_subst,\n                 true,\n             )\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self, variance, b), ret)]\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         variance: ty::Variance,\n         _info: ty::VarianceDiagInfo<'tcx>,\n         a: T,\n         b: T,\n     ) -> RelateResult<'tcx, T> {\n-        debug!(\"Generalizer::relate_with_variance(variance={:?}, a={:?}, b={:?})\", variance, a, b);\n-\n         let old_ambient_variance = self.ambient_variance;\n         self.ambient_variance = self.ambient_variance.xform(variance);\n-\n-        debug!(\"Generalizer::relate_with_variance: ambient_variance = {:?}\", self.ambient_variance);\n-\n+        debug!(?self.ambient_variance, \"new ambient variance\");\n         let r = self.relate(a, b)?;\n-\n         self.ambient_variance = old_ambient_variance;\n-\n-        debug!(\"Generalizer::relate_with_variance: r={:?}\", r);\n-\n         Ok(r)\n     }\n \n+    #[instrument(level = \"debug\", skip(self, t2), ret)]\n     fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n         assert_eq!(t, t2); // we are misusing TypeRelation here; both LHS and RHS ought to be ==\n \n         if let Some(&result) = self.cache.get(&t) {\n             return Ok(result);\n         }\n-        debug!(\"generalize: t={:?}\", t);\n \n         // Check to see whether the type we are generalizing references\n         // any other type variable related to `vid` via\n@@ -241,21 +238,22 @@ where\n                 let mut inner = self.infcx.inner.borrow_mut();\n                 let vid = inner.type_variables().root_var(vid);\n                 let sub_vid = inner.type_variables().sub_root_var(vid);\n-                if TermVid::Ty(sub_vid) == self.root_vid {\n-                    // If sub-roots are equal, then `for_vid` and\n+\n+                if ty::TermVid::Ty(sub_vid) == self.root_vid {\n+                    // If sub-roots are equal, then `root_vid` and\n                     // `vid` are related via subtyping.\n                     Err(self.cyclic_term_error())\n                 } else {\n                     let probe = inner.type_variables().probe(vid);\n                     match probe {\n                         TypeVariableValue::Known { value: u } => {\n-                            debug!(\"generalize: known value {:?}\", u);\n                             drop(inner);\n                             self.relate(u, u)\n                         }\n                         TypeVariableValue::Unknown { universe } => {\n                             match self.ambient_variance {\n-                                // Invariant: no need to make a fresh type variable.\n+                                // Invariant: no need to make a fresh type variable\n+                                // if we can name the universe.\n                                 ty::Invariant => {\n                                     if self.for_universe.can_name(universe) {\n                                         return Ok(t);\n@@ -282,7 +280,7 @@ where\n                             // operation. This is needed to detect cyclic types. To see why, see the\n                             // docs in the `type_variables` module.\n                             inner.type_variables().sub(vid, new_var_id);\n-                            debug!(\"generalize: replacing original vid={:?} with new={:?}\", vid, u);\n+                            debug!(\"replacing original vid={:?} with new={:?}\", vid, u);\n                             Ok(u)\n                         }\n                     }\n@@ -297,45 +295,41 @@ where\n             }\n \n             ty::Placeholder(placeholder) => {\n-                if self.for_universe.cannot_name(placeholder.universe) {\n+                if self.for_universe.can_name(placeholder.universe) {\n+                    Ok(t)\n+                } else {\n                     debug!(\n-                        \"Generalizer::tys: root universe {:?} cannot name\\\n-                         placeholder in universe {:?}\",\n+                        \"root universe {:?} cannot name placeholder in universe {:?}\",\n                         self.for_universe, placeholder.universe\n                     );\n                     Err(TypeError::Mismatch)\n-                } else {\n-                    Ok(t)\n                 }\n             }\n \n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n-                let s = self.relate(substs, substs)?;\n-                Ok(if s == substs { t } else { self.tcx().mk_opaque(def_id, s) })\n-            }\n             _ => relate::super_relate_tys(self, t, t),\n         }?;\n \n         self.cache.insert(t, g);\n         Ok(g)\n     }\n \n+    #[instrument(level = \"debug\", skip(self, r2), ret)]\n     fn regions(\n         &mut self,\n         r: ty::Region<'tcx>,\n         r2: ty::Region<'tcx>,\n     ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n         assert_eq!(r, r2); // we are misusing TypeRelation here; both LHS and RHS ought to be ==\n \n-        debug!(\"generalize: regions r={:?}\", r);\n-\n         match *r {\n             // Never make variables for regions bound within the type itself,\n             // nor for erased regions.\n             ty::ReLateBound(..) | ty::ReErased => {\n                 return Ok(r);\n             }\n \n+            // It doesn't really matter for correctness if we generalize ReError,\n+            // since we're already on a doomed compilation path.\n             ty::ReError(_) => {\n                 return Ok(r);\n             }\n@@ -359,13 +353,10 @@ where\n             }\n         }\n \n-        // FIXME: This is non-ideal because we don't give a\n-        // very descriptive origin for this region variable.\n-        let replacement_region_vid = self.delegate.generalize_existential(self.for_universe);\n-\n-        Ok(replacement_region_vid)\n+        Ok(self.delegate.generalize_region(self.for_universe))\n     }\n \n+    #[instrument(level = \"debug\", skip(self, c2), ret)]\n     fn consts(\n         &mut self,\n         c: ty::Const<'tcx>,\n@@ -378,13 +369,12 @@ where\n                 bug!(\"unexpected inference variable encountered in NLL generalization: {:?}\", c);\n             }\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {\n-                // Check if the current unification would end up\n-                // unifying `target_vid` with a const which contains\n-                // an inference variable which is unioned with `target_vid`.\n-                //\n-                // Not doing so can easily result in stack overflows.\n-                if TermVid::Const(self.infcx.inner.borrow_mut().const_unification_table().find(vid))\n-                    == self.root_vid\n+                // If root const vids are equal, then `root_vid` and\n+                // `vid` are related and we'd be inferring an infinitely\n+                // deep const.\n+                if ty::TermVid::Const(\n+                    self.infcx.inner.borrow_mut().const_unification_table().find(vid),\n+                ) == self.root_vid\n                 {\n                     return Err(self.cyclic_term_error());\n                 }\n@@ -421,10 +411,22 @@ where\n                 )?;\n                 Ok(self.tcx().mk_const(ty::UnevaluatedConst { def, substs }, c.ty()))\n             }\n+            ty::ConstKind::Placeholder(placeholder) => {\n+                if self.for_universe.can_name(placeholder.universe) {\n+                    Ok(c)\n+                } else {\n+                    debug!(\n+                        \"root universe {:?} cannot name placeholder in universe {:?}\",\n+                        self.for_universe, placeholder.universe\n+                    );\n+                    Err(TypeError::Mismatch)\n+                }\n+            }\n             _ => relate::super_relate_consts(self, c, c),\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn binders<T>(\n         &mut self,\n         a: ty::Binder<'tcx, T>,\n@@ -433,7 +435,6 @@ where\n     where\n         T: Relate<'tcx>,\n     {\n-        debug!(\"Generalizer::binders(a={:?})\", a);\n         let result = self.relate(a.skip_binder(), a.skip_binder())?;\n         Ok(a.rebind(result))\n     }"}, {"sha": "eadee6b711e52be7a844d82b9ce721153d2b3f81", "filename": "tests/ui/traits/non_lifetime_binders/universe-error1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Funiverse-error1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Funiverse-error1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Funiverse-error1.rs?ref=6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae", "patch": "@@ -0,0 +1,18 @@\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+trait Other<U: ?Sized> {}\n+\n+impl<U: ?Sized> Other<U> for U {}\n+\n+#[rustfmt::skip]\n+fn foo<U: ?Sized>()\n+where\n+    for<T> T: Other<U> {}\n+\n+fn bar() {\n+    foo::<_>();\n+    //~^ ERROR the trait bound `T: Other<_>` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "bfcad72e35278535296cbdd00ee97cf7e1096e1e", "filename": "tests/ui/traits/non_lifetime_binders/universe-error1.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Funiverse-error1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Funiverse-error1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Funiverse-error1.stderr?ref=6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/universe-error1.rs:1:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0277]: the trait bound `T: Other<_>` is not satisfied\n+  --> $DIR/universe-error1.rs:14:11\n+   |\n+LL |     foo::<_>();\n+   |           ^ the trait `Other<_>` is not implemented for `T`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/universe-error1.rs:11:15\n+   |\n+LL | fn foo<U: ?Sized>()\n+   |    --- required by a bound in this function\n+LL | where\n+LL |     for<T> T: Other<U> {}\n+   |               ^^^^^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}]}