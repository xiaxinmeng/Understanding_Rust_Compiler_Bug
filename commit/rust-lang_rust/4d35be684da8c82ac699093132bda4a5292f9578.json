{"sha": "4d35be684da8c82ac699093132bda4a5292f9578", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMzViZTY4NGRhOGM4MmFjNjk5MDkzMTMyYmRhNGE1MjkyZjk1Nzg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-24T11:08:31Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-26T09:29:35Z"}, "message": "Implement 128bit comparison binops", "tree": {"sha": "109d0d89ae6756b2440c90a0bcc054f45a9252ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/109d0d89ae6756b2440c90a0bcc054f45a9252ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d35be684da8c82ac699093132bda4a5292f9578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d35be684da8c82ac699093132bda4a5292f9578", "html_url": "https://github.com/rust-lang/rust/commit/4d35be684da8c82ac699093132bda4a5292f9578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d35be684da8c82ac699093132bda4a5292f9578/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65e337cdf3e9a54dbabcdb92aebdfb79b5660e24", "url": "https://api.github.com/repos/rust-lang/rust/commits/65e337cdf3e9a54dbabcdb92aebdfb79b5660e24", "html_url": "https://github.com/rust-lang/rust/commit/65e337cdf3e9a54dbabcdb92aebdfb79b5660e24"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "76d0fcb301ee655b4fd7d5d55e101607535dc030", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4d35be684da8c82ac699093132bda4a5292f9578/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d35be684da8c82ac699093132bda4a5292f9578/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=4d35be684da8c82ac699093132bda4a5292f9578", "patch": "@@ -60,22 +60,43 @@ pub fn maybe_codegen<'a, 'tcx>(\n             assert!(!checked);\n             let (lhs_lsb, lhs_msb) = fx.bcx.ins().isplit(lhs_val);\n             let (rhs_lsb, rhs_msb) = fx.bcx.ins().isplit(rhs_val);\n-            let res = match (bin_op, is_signed) {\n-                (BinOp::Eq, _) => {\n+\n+            let res = match bin_op {\n+                BinOp::Eq => {\n                     let lsb_eq = fx.bcx.ins().icmp(IntCC::Equal, lhs_lsb, rhs_lsb);\n                     let msb_eq = fx.bcx.ins().icmp(IntCC::Equal, lhs_msb, rhs_msb);\n                     fx.bcx.ins().band(lsb_eq, msb_eq)\n                 }\n-                (BinOp::Ne, _) => {\n+                BinOp::Ne => {\n                     let lsb_ne = fx.bcx.ins().icmp(IntCC::NotEqual, lhs_lsb, rhs_lsb);\n                     let msb_ne = fx.bcx.ins().icmp(IntCC::NotEqual, lhs_msb, rhs_msb);\n                     fx.bcx.ins().bor(lsb_ne, msb_ne)\n                 }\n                 _ => {\n-                    // FIXME implement it\n-                    let out_layout = fx.layout_of(out_ty);\n-                    return Some(crate::trap::trap_unreachable_ret_value(fx, out_layout, format!(\"unimplemented 128bit binop {:?}\", bin_op)));\n-                },\n+                    // if msb_eq {\n+                    //     lhs_cc\n+                    // } else {\n+                    //     msb_cc\n+                    // }\n+                    let cc = match (bin_op, is_signed) {\n+                        (BinOp::Ge, false) => IntCC::UnsignedGreaterThanOrEqual,\n+                        (BinOp::Gt, false) => IntCC::UnsignedGreaterThan,\n+                        (BinOp::Lt, false) => IntCC::UnsignedLessThan,\n+                        (BinOp::Le, false) => IntCC::UnsignedLessThanOrEqual,\n+\n+                        (BinOp::Ge, true) => IntCC::SignedGreaterThanOrEqual,\n+                        (BinOp::Gt, true) => IntCC::SignedGreaterThan,\n+                        (BinOp::Lt, true) => IntCC::SignedLessThan,\n+                        (BinOp::Le, true) => IntCC::SignedLessThanOrEqual,\n+                        _ => unreachable!(),\n+                    };\n+\n+                    let msb_eq = fx.bcx.ins().icmp(IntCC::Equal, lhs_msb, rhs_msb);\n+                    let lsb_cc = fx.bcx.ins().icmp(cc, lhs_lsb, rhs_lsb);\n+                    let msb_cc = fx.bcx.ins().icmp(cc, lhs_msb, rhs_msb);\n+\n+                    fx.bcx.ins().select(msb_eq, lsb_cc, msb_cc)\n+                }\n             };\n \n             let res = fx.bcx.ins().bint(types::I8, res);"}]}