{"sha": "81211f538ccfbcd1cfb83dc0ad29c7577ad74fa1", "node_id": "C_kwDOAAsO6NoAKDgxMjExZjUzOGNjZmJjZDFjZmI4M2RjMGFkMjljNzU3N2FkNzRmYTE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-01-27T20:53:49Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-01-28T08:31:59Z"}, "message": "Use `crate_limits` query in macro expansion", "tree": {"sha": "b7a5e94570f8747d0e2ebd48e4e291013f3472e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7a5e94570f8747d0e2ebd48e4e291013f3472e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81211f538ccfbcd1cfb83dc0ad29c7577ad74fa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81211f538ccfbcd1cfb83dc0ad29c7577ad74fa1", "html_url": "https://github.com/rust-lang/rust/commit/81211f538ccfbcd1cfb83dc0ad29c7577ad74fa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81211f538ccfbcd1cfb83dc0ad29c7577ad74fa1/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c932ca5f1cf62d041c943e5cfdcc1767c0664692", "url": "https://api.github.com/repos/rust-lang/rust/commits/c932ca5f1cf62d041c943e5cfdcc1767c0664692", "html_url": "https://github.com/rust-lang/rust/commit/c932ca5f1cf62d041c943e5cfdcc1767c0664692"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "8488b4f0d03ff5fe1c4cadf978fbbf920ab96a2d", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/81211f538ccfbcd1cfb83dc0ad29c7577ad74fa1/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81211f538ccfbcd1cfb83dc0ad29c7577ad74fa1/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=81211f538ccfbcd1cfb83dc0ad29c7577ad74fa1", "patch": "@@ -54,12 +54,6 @@ pub struct Expander {\n     recursion_limit: usize,\n }\n \n-#[cfg(test)]\n-static EXPANSION_RECURSION_LIMIT: Limit = Limit::new(32);\n-\n-#[cfg(not(test))]\n-static EXPANSION_RECURSION_LIMIT: Limit = Limit::new(128);\n-\n impl CfgExpander {\n     pub(crate) fn new(\n         db: &dyn DefDatabase,\n@@ -101,7 +95,7 @@ impl Expander {\n         db: &dyn DefDatabase,\n         macro_call: ast::MacroCall,\n     ) -> Result<ExpandResult<Option<(Mark, T)>>, UnresolvedMacro> {\n-        if EXPANSION_RECURSION_LIMIT.check(self.recursion_limit + 1).is_err() {\n+        if self.recursion_limit(db).check(self.recursion_limit + 1).is_err() {\n             cov_mark::hit!(your_stack_belongs_to_me);\n             return Ok(ExpandResult::str_err(\n                 \"reached recursion limit during macro expansion\".into(),\n@@ -222,6 +216,17 @@ impl Expander {\n         let file_local_id = self.ast_id_map.ast_id(item);\n         AstId::new(self.current_file_id, file_local_id)\n     }\n+\n+    fn recursion_limit(&self, db: &dyn DefDatabase) -> Limit {\n+        let limit = db.crate_limits(self.cfg_expander.krate).recursion_limit as _;\n+\n+        #[cfg(not(test))]\n+        return Limit::new(limit);\n+\n+        // Without this, `body::tests::your_stack_belongs_to_me` stack-overflows in debug\n+        #[cfg(test)]\n+        return Limit::new(std::cmp::min(32, limit));\n+    }\n }\n \n #[derive(Debug)]"}]}