{"sha": "86d17b98f2dbb732049d9671c354903b19203b56", "node_id": "C_kwDOAAsO6NoAKDg2ZDE3Yjk4ZjJkYmI3MzIwNDlkOTY3MWMzNTQ5MDNiMTkyMDNiNTY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-17T16:00:04Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-17T16:00:04Z"}, "message": "Revert \"Auto merge of #91403 - cjgillot:inherit-async, r=oli-obk\"\n\nThis reverts commit 3cfa4def7c87d571bd46d92fed608edf8fad236e, reversing\nchanges made to 5d8767cb229b097fedb1dd4bd9420d463c37774f.", "tree": {"sha": "6cb98cbb9e252ed1b140c9f1569fe90b1ea92bf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cb98cbb9e252ed1b140c9f1569fe90b1ea92bf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86d17b98f2dbb732049d9671c354903b19203b56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86d17b98f2dbb732049d9671c354903b19203b56", "html_url": "https://github.com/rust-lang/rust/commit/86d17b98f2dbb732049d9671c354903b19203b56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86d17b98f2dbb732049d9671c354903b19203b56/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b3f35c420694a4f24e5a4df00f06073f4f3a37", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b3f35c420694a4f24e5a4df00f06073f4f3a37", "html_url": "https://github.com/rust-lang/rust/commit/30b3f35c420694a4f24e5a4df00f06073f4f3a37"}], "stats": {"total": 508, "additions": 281, "deletions": 227}, "files": [{"sha": "b1e601516ab97e947c73ba5f346bd574e0f65378", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 50, "deletions": 19, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -1659,12 +1659,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         // When we create the opaque type for this async fn, it is going to have\n         // to capture all the lifetimes involved in the signature (including in the\n-        // return type). This is done by:\n+        // return type). This is done by introducing lifetime parameters for:\n         //\n-        // - making the opaque type inherit all lifetime parameters from its parent;\n-        // - make all the elided lifetimes in the fn arguments into parameters;\n-        // - manually introducing parameters on the opaque type for elided\n-        //   lifetimes in the return type.\n+        // - all the explicitly declared lifetimes from the impl and function itself;\n+        // - all the elided lifetimes in the fn arguments;\n+        // - all the elided lifetimes in the return type.\n         //\n         // So for example in this snippet:\n         //\n@@ -1680,22 +1679,44 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // we would create an opaque type like:\n         //\n         // ```\n-        // type Foo<'a>::bar<'b, '0, '1>::Bar<'2> = impl Future<Output = &'2 u32>;\n+        // type Bar<'a, 'b, '0, '1, '2> = impl Future<Output = &'2 u32>;\n         // ```\n         //\n         // and we would then desugar `bar` to the equivalent of:\n         //\n         // ```rust\n         // impl<'a> Foo<'a> {\n-        //   fn bar<'b, '0, '1>(&'0 self, x: &'b Vec<f64>, y: &'1 str) -> Bar<'_>\n+        //   fn bar<'b, '0, '1>(&'0 self, x: &'b Vec<f64>, y: &'1 str) -> Bar<'a, 'b, '0, '1, '_>\n         // }\n         // ```\n         //\n         // Note that the final parameter to `Bar` is `'_`, not `'2` --\n         // this is because the elided lifetimes from the return type\n         // should be figured out using the ordinary elision rules, and\n         // this desugaring achieves that.\n-        let mut lifetime_params = Vec::new();\n+\n+        debug!(\"lower_async_fn_ret_ty: in_scope_lifetimes={:#?}\", self.in_scope_lifetimes);\n+        debug!(\"lower_async_fn_ret_ty: lifetimes_to_define={:#?}\", self.lifetimes_to_define);\n+\n+        // Calculate all the lifetimes that should be captured\n+        // by the opaque type. This should include all in-scope\n+        // lifetime parameters, including those defined in-band.\n+        //\n+        // `lifetime_params` is a vector of tuple (span, parameter name, lifetime name).\n+\n+        // Input lifetime like `'a` or `'1`:\n+        let mut lifetime_params: Vec<_> = self\n+            .in_scope_lifetimes\n+            .iter()\n+            .cloned()\n+            .map(|name| (name.ident().span, name, hir::LifetimeName::Param(name)))\n+            .chain(\n+                self.lifetimes_to_define\n+                    .iter()\n+                    .map(|&(span, name)| (span, name, hir::LifetimeName::Param(name))),\n+            )\n+            .collect();\n+\n         self.with_hir_id_owner(opaque_ty_node_id, |this| {\n             // We have to be careful to get elision right here. The\n             // idea is that we create a lifetime parameter for each\n@@ -1714,12 +1735,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             debug!(\"lower_async_fn_ret_ty: future_bound={:#?}\", future_bound);\n             debug!(\"lower_async_fn_ret_ty: lifetimes_to_define={:#?}\", lifetimes_to_define);\n \n-            // Output lifetime like `'_`:\n-            lifetime_params = lifetimes_to_define;\n+            lifetime_params.extend(\n+                // Output lifetime like `'_`:\n+                lifetimes_to_define\n+                    .into_iter()\n+                    .map(|(span, name)| (span, name, hir::LifetimeName::Implicit(false))),\n+            );\n             debug!(\"lower_async_fn_ret_ty: lifetime_params={:#?}\", lifetime_params);\n \n             let generic_params =\n-                this.arena.alloc_from_iter(lifetime_params.iter().map(|&(span, hir_name)| {\n+                this.arena.alloc_from_iter(lifetime_params.iter().map(|&(span, hir_name, _)| {\n                     this.lifetime_to_generic_param(span, hir_name, opaque_ty_def_id)\n                 }));\n \n@@ -1737,22 +1762,28 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             this.generate_opaque_type(opaque_ty_def_id, opaque_ty_item, span, opaque_ty_span)\n         });\n \n-        // We need to create the lifetime arguments to our opaque type.\n-        // Continuing with our example, we're creating the type arguments\n-        // for the return type:\n+        // As documented above on the variable\n+        // `input_lifetimes_count`, we need to create the lifetime\n+        // arguments to our opaque type. Continuing with our example,\n+        // we're creating the type arguments for the return type:\n         //\n         // ```\n-        // For<'a>::bar<'b, '0, '1>::Bar<'_>\n+        // Bar<'a, 'b, '0, '1, '_>\n         // ```\n         //\n-        // For the \"input\" lifetime parameters are inherited automatically.\n-        // For the \"output\" lifetime parameters, we just want to generate `'_`.\n+        // For the \"input\" lifetime parameters, we wish to create\n+        // references to the parameters themselves, including the\n+        // \"implicit\" ones created from parameter types (`'a`, `'b`,\n+        // '`0`, `'1`).\n+        //\n+        // For the \"output\" lifetime parameters, we just want to\n+        // generate `'_`.\n         let generic_args =\n-            self.arena.alloc_from_iter(lifetime_params.into_iter().map(|(span, _)| {\n+            self.arena.alloc_from_iter(lifetime_params.into_iter().map(|(span, _, name)| {\n                 GenericArg::Lifetime(hir::Lifetime {\n                     hir_id: self.next_id(),\n                     span: self.lower_span(span),\n-                    name: hir::LifetimeName::Implicit(false),\n+                    name,\n                 })\n             }));\n "}, {"sha": "abd6a15334c90e6a6388ca34513d1778240ca78f", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -2156,24 +2156,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 }\n             }\n \n-            // When in async fn, prefer errors that come from inside the closure.\n-            if !categorized_path[i].from_closure {\n-                let span = categorized_path.iter().find_map(|p| {\n-                    if p.from_closure\n-                        && p.category == categorized_path[i].category\n-                        && categorized_path[i].cause.span.contains(p.cause.span)\n-                    {\n-                        Some(p.cause.span)\n-                    } else {\n-                        None\n-                    }\n-                });\n-\n-                if let Some(span) = span {\n-                    categorized_path[i].cause.span = span;\n-                }\n-            }\n-\n             return categorized_path[i].clone();\n         }\n "}, {"sha": "e1dcfefebcd762187aba9a1d49a0b44154696787", "filename": "compiler/rustc_error_codes/src/error_codes/E0760.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0760.md", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0760.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0760.md?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -1,4 +1,4 @@\n-`impl trait` return type cannot contain a projection\n+`async fn`/`impl trait` return type cannot contain a projection\n or `Self` that references lifetimes from a parent scope.\n \n Erroneous code example:\n@@ -7,7 +7,7 @@ Erroneous code example:\n struct S<'a>(&'a i32);\n \n impl<'a> S<'a> {\n-    fn new(i: &'a i32) -> impl Into<Self> {\n+    async fn new(i: &'a i32) -> Self {\n         S(&22)\n     }\n }\n@@ -19,7 +19,7 @@ To fix this error we need to spell out `Self` to `S<'a>`:\n struct S<'a>(&'a i32);\n \n impl<'a> S<'a> {\n-    fn new(i: &'a i32) -> impl Into<S<'a>> {\n+    async fn new(i: &'a i32) -> S<'a> {\n         S(&22)\n     }\n }"}, {"sha": "e7dca94806cb740243e7ab0af2c141a84635e2ce", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -276,7 +276,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         debug!(?concrete_ty);\n \n         let first_own_region = match opaque_defn.origin {\n-            hir::OpaqueTyOrigin::FnReturn(..) => {\n+            hir::OpaqueTyOrigin::FnReturn(..) | hir::OpaqueTyOrigin::AsyncFn(..) => {\n                 // We lower\n                 //\n                 // fn foo<'l0..'ln>() -> impl Trait<'l0..'lm>\n@@ -291,7 +291,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n             // These opaque type inherit all lifetime parameters from their\n             // parent, so we have to check them all.\n-            hir::OpaqueTyOrigin::AsyncFn(..) | hir::OpaqueTyOrigin::TyAlias => 0,\n+            hir::OpaqueTyOrigin::TyAlias => 0,\n         };\n \n         // For a case like `impl Foo<'a, 'b>`, we would generate a constraint"}, {"sha": "3bea95fa1d554ecfcaa418cd8c909dbce92902e2", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -729,16 +729,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, ref generics, _) => {\n                 self.missing_named_lifetime_spots.push(generics.into());\n-                self.visit_early_late(\n-                    None,\n-                    item.hir_id(),\n-                    &sig.decl,\n-                    generics,\n-                    sig.header.asyncness,\n-                    |this| {\n-                        intravisit::walk_item(this, item);\n-                    },\n-                );\n+                self.visit_early_late(None, item.hir_id(), &sig.decl, generics, |this| {\n+                    intravisit::walk_item(this, item);\n+                });\n                 self.missing_named_lifetime_spots.pop();\n             }\n \n@@ -856,16 +849,11 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {\n         match item.kind {\n-            hir::ForeignItemKind::Fn(ref decl, _, ref generics) => self.visit_early_late(\n-                None,\n-                item.hir_id(),\n-                decl,\n-                generics,\n-                hir::IsAsync::NotAsync,\n-                |this| {\n+            hir::ForeignItemKind::Fn(ref decl, _, ref generics) => {\n+                self.visit_early_late(None, item.hir_id(), decl, generics, |this| {\n                     intravisit::walk_foreign_item(this, item);\n-                },\n-            ),\n+                })\n+            }\n             hir::ForeignItemKind::Static(..) => {\n                 intravisit::walk_foreign_item(self, item);\n             }\n@@ -1142,7 +1130,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     trait_item.hir_id(),\n                     &sig.decl,\n                     &trait_item.generics,\n-                    sig.header.asyncness,\n                     |this| intravisit::walk_trait_item(this, trait_item),\n                 );\n                 self.missing_named_lifetime_spots.pop();\n@@ -1212,7 +1199,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     impl_item.hir_id(),\n                     &sig.decl,\n                     &impl_item.generics,\n-                    sig.header.asyncness,\n                     |this| intravisit::walk_impl_item(this, impl_item),\n                 );\n                 self.missing_named_lifetime_spots.pop();\n@@ -2173,15 +2159,11 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         hir_id: hir::HirId,\n         decl: &'tcx hir::FnDecl<'tcx>,\n         generics: &'tcx hir::Generics<'tcx>,\n-        asyncness: hir::IsAsync,\n         walk: F,\n     ) where\n         F: for<'b, 'c> FnOnce(&'b mut LifetimeContext<'c, 'tcx>),\n     {\n-        // Async fns need all their lifetime parameters to be early bound.\n-        if asyncness != hir::IsAsync::Async {\n-            insert_late_bound_lifetimes(self.map, decl, generics);\n-        }\n+        insert_late_bound_lifetimes(self.map, decl, generics);\n \n         // Find the start of nested early scopes, e.g., in methods.\n         let mut next_early_index = 0;"}, {"sha": "96f920499832784b0c7b0405ee9c574975da155f", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -2409,11 +2409,16 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let def_id = item_id.def_id.to_def_id();\n \n                 match opaque_ty.kind {\n-                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => {\n-                        let replace_parent_lifetimes =\n-                            matches!(origin, hir::OpaqueTyOrigin::FnReturn(..));\n-                        self.impl_trait_ty_to_ty(def_id, lifetimes, replace_parent_lifetimes)\n-                    }\n+                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => self\n+                        .impl_trait_ty_to_ty(\n+                            def_id,\n+                            lifetimes,\n+                            matches!(\n+                                origin,\n+                                hir::OpaqueTyOrigin::FnReturn(..)\n+                                    | hir::OpaqueTyOrigin::AsyncFn(..)\n+                            ),\n+                        ),\n                     ref i => bug!(\"`impl Trait` pointed to non-opaque type?? {:#?}\", i),\n                 }\n             }"}, {"sha": "fba8292b46711dbc168513610687507de6690e2c", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -545,8 +545,10 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n         }\n     }\n \n-    if let ItemKind::OpaqueTy(hir::OpaqueTy { origin: hir::OpaqueTyOrigin::FnReturn(..), .. }) =\n-        item.kind\n+    if let ItemKind::OpaqueTy(hir::OpaqueTy {\n+        origin: hir::OpaqueTyOrigin::AsyncFn(..) | hir::OpaqueTyOrigin::FnReturn(..),\n+        ..\n+    }) = item.kind\n     {\n         let mut visitor = ProhibitOpaqueVisitor {\n             opaque_identity_ty: tcx.mk_opaque(\n@@ -568,13 +570,20 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n \n         if let Some(ty) = prohibit_opaque.break_value() {\n             visitor.visit_item(&item);\n+            let is_async = match item.kind {\n+                ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => {\n+                    matches!(origin, hir::OpaqueTyOrigin::AsyncFn(..))\n+                }\n+                _ => unreachable!(),\n+            };\n \n             let mut err = struct_span_err!(\n                 tcx.sess,\n                 span,\n                 E0760,\n-                \"`impl Trait` return type cannot contain a projection or `Self` that references lifetimes from \\\n+                \"`{}` return type cannot contain a projection or `Self` that references lifetimes from \\\n                  a parent scope\",\n+                if is_async { \"async fn\" } else { \"impl Trait\" },\n             );\n \n             for (span, name) in visitor.selftys {"}, {"sha": "4c9f21d0d4ae191b57fc8d89f0bb3b5b0b88251e", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -2157,7 +2157,8 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                     generics\n                 }\n                 ItemKind::OpaqueTy(OpaqueTy {\n-                    origin: hir::OpaqueTyOrigin::FnReturn(..), ..\n+                    origin: hir::OpaqueTyOrigin::AsyncFn(..) | hir::OpaqueTyOrigin::FnReturn(..),\n+                    ..\n                 }) => {\n                     // return-position impl trait\n                     //\n@@ -2177,7 +2178,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                 }\n                 ItemKind::OpaqueTy(OpaqueTy {\n                     ref generics,\n-                    origin: hir::OpaqueTyOrigin::AsyncFn(..) | hir::OpaqueTyOrigin::TyAlias,\n+                    origin: hir::OpaqueTyOrigin::TyAlias,\n                     ..\n                 }) => {\n                     // type-alias impl trait"}, {"sha": "187bc13357a90f380e7868adf4f6caef8641f656", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -585,12 +585,7 @@ fn clean_ty_generics(\n         .params\n         .iter()\n         .filter_map(|param| match param.kind {\n-            ty::GenericParamDefKind::Lifetime => {\n-                if param.name == kw::UnderscoreLifetime {\n-                    return None;\n-                }\n-                Some(param.clean(cx))\n-            }\n+            ty::GenericParamDefKind::Lifetime => Some(param.clean(cx)),\n             ty::GenericParamDefKind::Type { synthetic, .. } => {\n                 if param.name == kw::SelfUpper {\n                     assert_eq!(param.index, 0);"}, {"sha": "43429ba2329f9af49d71acace07658fb5471ccf0", "filename": "src/test/ui/async-await/issue-61949-self-return-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -8,6 +8,7 @@ pub struct Foo<'a> {\n \n impl<'a> Foo<'a> {\n     pub async fn new(_bar: &'a i32) -> Self {\n+    //~^ ERROR `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n         Foo {\n             bar: &22\n         }\n@@ -18,7 +19,6 @@ async fn foo() {\n     let x = {\n         let bar = 22;\n         Foo::new(&bar).await\n-        //~^ ERROR `bar` does not live long enough [E0597]\n     };\n     drop(x);\n }"}, {"sha": "52b726e186e3adec4a9431ebdcdc1fd916b95065", "filename": "src/test/ui/async-await/issue-61949-self-return-type.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -1,15 +1,9 @@\n-error[E0597]: `bar` does not live long enough\n-  --> $DIR/issue-61949-self-return-type.rs:20:18\n+error[E0760]: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+  --> $DIR/issue-61949-self-return-type.rs:10:40\n    |\n-LL |     let x = {\n-   |         - borrow later stored here\n-LL |         let bar = 22;\n-LL |         Foo::new(&bar).await\n-   |                  ^^^^ borrowed value does not live long enough\n-LL |\n-LL |     };\n-   |     - `bar` dropped here while still borrowed\n+LL |     pub async fn new(_bar: &'a i32) -> Self {\n+   |                                        ^^^^ help: consider spelling out the type instead: `Foo<'a>`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0760`."}, {"sha": "b96cab9f0f51affffcac89671167a6490b5cc134", "filename": "src/test/ui/async-await/issue-74072-lifetime-name-annotations.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -1,10 +1,14 @@\n error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/issue-74072-lifetime-name-annotations.rs:9:5\n    |\n+LL | pub async fn async_fn(x: &mut i32) -> &i32 {\n+   |                          - let's call the lifetime of this reference `'1`\n LL |     let y = &*x;\n    |             --- borrow of `*x` occurs here\n LL |     *x += 1;\n    |     ^^^^^^^ assignment to borrowed `*x` occurs here\n+LL |     y\n+   |     - returning this value requires that `*x` is borrowed for `'1`\n \n error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/issue-74072-lifetime-name-annotations.rs:16:9"}, {"sha": "3b731d9c60a6ae20b51e776fc86dc88cd4468fc0", "filename": "src/test/ui/async-await/issue-75785-confusing-named-region.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -1,10 +1,14 @@\n error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/issue-75785-confusing-named-region.rs:9:5\n    |\n+LL | pub async fn async_fn(x: &mut i32) -> (&i32, &i32) {\n+   |                          - let's call the lifetime of this reference `'1`\n LL |     let y = &*x;\n    |             --- borrow of `*x` occurs here\n LL |     *x += 1;\n    |     ^^^^^^^ assignment to borrowed `*x` occurs here\n+LL |     (&32, y)\n+   |     -------- returning this value requires that `*x` is borrowed for `'1`\n \n error: aborting due to previous error\n "}, {"sha": "8f602a1492ad2ff02765b189b8ebc33f45a7c556", "filename": "src/test/ui/async-await/issues/issue-63388-1.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -2,10 +2,12 @@ error[E0623]: lifetime mismatch\n   --> $DIR/issue-63388-1.rs:14:9\n    |\n LL |         &'a self, foo: &dyn Foo\n-   |         --------       -------- these two types are declared with different lifetimes...\n-...\n+   |                        -------- this parameter and the return type are declared with different lifetimes...\n+LL |     ) -> &dyn Foo\n+   |          --------\n+LL |     {\n LL |         foo\n-   |         ^^^ ...but data from `foo` flows into `self` here\n+   |         ^^^ ...but data from `foo` is returned here\n \n error: aborting due to previous error\n "}, {"sha": "8aaeaecf3e1da11ddb7c81d4e5e20b252974d8a0", "filename": "src/test/ui/async-await/issues/issue-78600.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.rs?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -1,10 +1,10 @@\n-// check-pass\n // edition:2018\n \n struct S<'a>(&'a i32);\n \n impl<'a> S<'a> {\n     async fn new(i: &'a i32) -> Result<Self, ()> {\n+        //~^ ERROR: `async fn`\n         Ok(S(&22))\n     }\n }"}, {"sha": "92b66147106e1eae7ecf4b851d1f1975cf9af1c6", "filename": "src/test/ui/async-await/issues/issue-78600.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -0,0 +1,11 @@\n+error[E0760]: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+  --> $DIR/issue-78600.rs:6:33\n+   |\n+LL |     async fn new(i: &'a i32) -> Result<Self, ()> {\n+   |                                 ^^^^^^^----^^^^^\n+   |                                        |\n+   |                                        help: consider spelling out the type instead: `S<'a>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0760`."}, {"sha": "2722c72c20a339a485453316d57e3382d39f4f7d", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.nll.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -1,13 +1,15 @@\n error: lifetime may not live long enough\n-  --> $DIR/ret-impl-trait-one.rs:12:5\n+  --> $DIR/ret-impl-trait-one.rs:10:85\n    |\n-LL | async fn async_ret_impl_trait3<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n-   |                                --  -- lifetime `'b` defined here\n-   |                                |\n-   |                                lifetime `'a` defined here\n-LL |\n-LL |     (a, b)\n-   |     ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+LL |   async fn async_ret_impl_trait3<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n+   |  ________________________________--__--_______________________________________________^\n+   | |                                |   |\n+   | |                                |   lifetime `'b` defined here\n+   | |                                lifetime `'a` defined here\n+LL | |\n+LL | |     (a, b)\n+LL | | }\n+   | |_^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "149692a2c6998e29981b192df521a48fa354c480", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -2,9 +2,10 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ret-impl-trait-one.rs:10:65\n    |\n LL | async fn async_ret_impl_trait3<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n-   |                                           ------     ------     ^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n-   |                                           |\n-   |                                           these two types are declared with different lifetimes...\n+   |                                                      ------     ^^^^^^^^^^^^^^^^^^^\n+   |                                                      |          |\n+   |                                                      |          ...but data from `a` is returned here\n+   |                                                      this parameter and the return type are declared with different lifetimes...\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ret-impl-trait-one.rs:16:65"}, {"sha": "5bd6ae8d3a42d06814e82f920effcfa0388be58b", "filename": "src/test/ui/async-await/unused-lifetime.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.rs?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -10,13 +10,10 @@\n // Even wrong cases don't cause errors because async functions are desugared with all lifetimes\n // involved in the signature. So, we cannot predict what lifetimes are unused in async function.\n async fn async_wrong_without_args<'a>() {}\n-//~^ ERROR lifetime parameter `'a` never used [unused_lifetimes]\n \n async fn async_wrong_1_lifetime<'a>(_: &i32) {}\n-//~^ ERROR lifetime parameter `'a` never used [unused_lifetimes]\n \n async fn async_wrong_2_lifetimes<'a, 'b>(_: &'a i32, _: &i32) {}\n-//~^ ERROR lifetime parameter `'b` never used [unused_lifetimes]\n \n async fn async_right_1_lifetime<'a>(_: &'a i32) {}\n "}, {"sha": "4e90f43fdd07b9be6ca3e50f936fd14ad189b3c2", "filename": "src/test/ui/async-await/unused-lifetime.stderr", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funused-lifetime.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -1,8 +1,8 @@\n error: lifetime parameter `'a` never used\n-  --> $DIR/unused-lifetime.rs:12:35\n+  --> $DIR/unused-lifetime.rs:31:23\n    |\n-LL | async fn async_wrong_without_args<'a>() {}\n-   |                                  -^^- help: elide the unused lifetime\n+LL | fn wrong_without_args<'a>() {}\n+   |                      -^^- help: elide the unused lifetime\n    |\n note: the lint level is defined here\n   --> $DIR/unused-lifetime.rs:5:9\n@@ -11,40 +11,18 @@ LL | #![deny(unused_lifetimes)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: lifetime parameter `'a` never used\n-  --> $DIR/unused-lifetime.rs:15:33\n-   |\n-LL | async fn async_wrong_1_lifetime<'a>(_: &i32) {}\n-   |                                 ^^-----\n-   |                                 |\n-   |                                 help: elide the unused lifetime\n-\n-error: lifetime parameter `'b` never used\n-  --> $DIR/unused-lifetime.rs:18:38\n-   |\n-LL | async fn async_wrong_2_lifetimes<'a, 'b>(_: &'a i32, _: &i32) {}\n-   |                                      ^^-----------------\n-   |                                      |\n-   |                                      help: elide the unused lifetime\n-\n-error: lifetime parameter `'a` never used\n-  --> $DIR/unused-lifetime.rs:34:23\n-   |\n-LL | fn wrong_without_args<'a>() {}\n-   |                      -^^- help: elide the unused lifetime\n-\n-error: lifetime parameter `'a` never used\n-  --> $DIR/unused-lifetime.rs:36:21\n+  --> $DIR/unused-lifetime.rs:33:21\n    |\n LL | fn wrong_1_lifetime<'a>(_: &i32) {}\n    |                    -^^- help: elide the unused lifetime\n \n error: lifetime parameter `'b` never used\n-  --> $DIR/unused-lifetime.rs:38:26\n+  --> $DIR/unused-lifetime.rs:35:26\n    |\n LL | fn wrong_2_lifetimes<'a, 'b>(_: &'a i32, _: &i32) {}\n    |                        --^^\n    |                        |\n    |                        help: elide the unused lifetime\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "24650dfac02d963e3d4744a30ef8a4e1f5fba421", "filename": "src/test/ui/dropck/drop-with-active-borrows-2.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fdropck%2Fdrop-with-active-borrows-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fdropck%2Fdrop-with-active-borrows-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdrop-with-active-borrows-2.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -1,9 +1,10 @@\n error[E0515]: cannot return value referencing local variable `raw_lines`\n-  --> $DIR/drop-with-active-borrows-2.rs:3:30\n+  --> $DIR/drop-with-active-borrows-2.rs:3:5\n    |\n LL |     raw_lines.iter().map(|l| l.trim()).collect()\n-   |     ----------------         ^^^^^^^^ returns a value referencing data owned by the current function\n+   |     ----------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n+   |     returns a value referencing data owned by the current function\n    |     `raw_lines` is borrowed here\n \n error: aborting due to previous error"}, {"sha": "c82da0f0096add49998e548647c038ceb0504001", "filename": "src/test/ui/issues/issue-13497-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fissues%2Fissue-13497-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fissues%2Fissue-13497-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13497-2.rs?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -1,7 +1,7 @@\n fn read_lines_borrowed<'a>() -> Vec<&'a str> {\n     let rawLines: Vec<String> = vec![\"foo  \".to_string(), \"  bar\".to_string()];\n-    rawLines.iter().map(|l| l.trim()).collect()\n-    //~^ ERROR cannot return value referencing local variable `rawLines`\n+    rawLines //~ ERROR cannot return value referencing local variable `rawLines`\n+        .iter().map(|l| l.trim()).collect()\n }\n \n fn main() {}"}, {"sha": "6f72b79f2a5e08f3d6d13a0c11c7c3e8d882cc9f", "filename": "src/test/ui/issues/issue-13497-2.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fissues%2Fissue-13497-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fissues%2Fissue-13497-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13497-2.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -1,10 +1,14 @@\n error[E0515]: cannot return value referencing local variable `rawLines`\n-  --> $DIR/issue-13497-2.rs:3:29\n+  --> $DIR/issue-13497-2.rs:3:5\n    |\n-LL |     rawLines.iter().map(|l| l.trim()).collect()\n-   |     ---------------         ^^^^^^^^ returns a value referencing data owned by the current function\n-   |     |\n-   |     `rawLines` is borrowed here\n+LL |        rawLines\n+   |   _____^\n+   |  |_____|\n+   | ||\n+LL | ||         .iter().map(|l| l.trim()).collect()\n+   | ||_______________-___________________________^ returns a value referencing data owned by the current function\n+   | |________________|\n+   |                  `rawLines` is borrowed here\n \n error: aborting due to previous error\n "}, {"sha": "57374b7e3bb277d9e9c1bfe9010935e8bf57f43a", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -20,8 +20,9 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                  --  ---- has type `Pin<&'1 Foo>`              ^^^ associated function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n-   |                  |\n+   |                  --              -                             ^^^ associated function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n+   |                  |               |\n+   |                  |               let's call the lifetime of this reference `'1`\n    |                  lifetime `'a` defined here\n \n error: aborting due to 3 previous errors"}, {"sha": "299a2d2f2d3de6f9b21ac115ab6c9b70b24f1cbe", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -2,25 +2,25 @@ error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                          ----      ----            ^ ...but data from `f` flows into `self` here\n+   |                                    ----     ----   ^ ...but data from `f` is returned here\n    |                                    |\n-   |                                    these two types are declared with different lifetimes...\n+   |                                    this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:82\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          -----      ----                                         ^ ...but data from `f` flows into `self` here\n+   |                                     ----              -----------------          ^ ...but data from `f` is returned here\n    |                                     |\n-   |                                     these two types are declared with different lifetimes...\n+   |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                                  -----        ------           ^^^ ...but data from `arg` flows into `self` here\n+   |                                               ------     ---   ^^^ ...but data from `arg` is returned here\n    |                                               |\n-   |                                               these two types are declared with different lifetimes...\n+   |                                               this parameter and the return type are declared with different lifetimes...\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7448e8484b47a1af7b5e7bfffe1c14dd802d8ce4", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -2,49 +2,61 @@ error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                       -----     ---- these two types are declared with different lifetimes...\n+   |                                 ----     ----\n+   |                                 |\n+   |                                 this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                             -----     ---- these two types are declared with different lifetimes...\n+   |                                       ----     ----\n+   |                                       |\n+   |                                       this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                     -----      ---- these two types are declared with different lifetimes...\n+   |                                                ----     ----\n+   |                                                |\n+   |                                                this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                     -----      ---- these two types are declared with different lifetimes...\n+   |                                                ----     ----\n+   |                                                |\n+   |                                                this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                             -----       ---- these two types are declared with different lifetimes...\n+   |                                                         ----     ----\n+   |                                                         |\n+   |                                                         this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:35:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                         -----       ---- these two types are declared with different lifetimes...\n+   |                                                     ----     ----\n+   |                                                     |\n+   |                                                     this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "6056cc46d3d8a505346e9bfade02dba8ce145809", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -2,49 +2,61 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n-   |                       ---------     ---- these two types are declared with different lifetimes...\n+   |                                     ----     ----\n+   |                                     |\n+   |                                     this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-   |                             ---------     ---- these two types are declared with different lifetimes...\n+   |                                           ----     ----\n+   |                                           |\n+   |                                           this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-   |                                     ---------      ---- these two types are declared with different lifetimes...\n+   |                                                    ----     ----\n+   |                                                    |\n+   |                                                    this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-   |                                     ---------      ---- these two types are declared with different lifetimes...\n+   |                                                    ----     ----\n+   |                                                    |\n+   |                                                    this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-   |                                             ---------       ---- these two types are declared with different lifetimes...\n+   |                                                             ----     ----\n+   |                                                             |\n+   |                                                             this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:35:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-   |                                             ---------       ---- these two types are declared with different lifetimes...\n+   |                                                             ----     ----\n+   |                                                             |\n+   |                                                             this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "61034ae4d47b6792ec66874f9079af8558291364", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -2,41 +2,51 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-   |                               -----------     ---- these two types are declared with different lifetimes...\n+   |                                               ----     ----\n+   |                                               |\n+   |                                               this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-   |                                       -----------      ---- these two types are declared with different lifetimes...\n+   |                                                        ----     ----\n+   |                                                        |\n+   |                                                        this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-   |                                       -----------      ---- these two types are declared with different lifetimes...\n+   |                                                        ----     ----\n+   |                                                        |\n+   |                                                        this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                               -----------       ---- these two types are declared with different lifetimes...\n+   |                                                                 ----     ----\n+   |                                                                 |\n+   |                                                                 this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                               -----------       ---- these two types are declared with different lifetimes...\n+   |                                                                 ----     ----\n+   |                                                                 |\n+   |                                                                 this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 5 previous errors\n "}, {"sha": "0eab16e685d4c4fc618fd7962b55406c648311e2", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -2,57 +2,71 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:23:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                       -----     ---- these two types are declared with different lifetimes...\n+   |                                 ----     ----\n+   |                                 |\n+   |                                 this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:29:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                             -----     ---- these two types are declared with different lifetimes...\n+   |                                       ----     ----\n+   |                                       |\n+   |                                       this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:33:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                     -----      ---- these two types are declared with different lifetimes...\n+   |                                                ----     ----\n+   |                                                |\n+   |                                                this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:37:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                     -----      ---- these two types are declared with different lifetimes...\n+   |                                                ----     ----\n+   |                                                |\n+   |                                                this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:41:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                             -----       ---- these two types are declared with different lifetimes...\n+   |                                                         ----     ----\n+   |                                                         |\n+   |                                                         this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:45:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                             -----       ---- these two types are declared with different lifetimes...\n+   |                                                         ----     ----\n+   |                                                         |\n+   |                                                         this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:49:9\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-   |                                            -----            --- these two types are declared with different lifetimes...\n+   |                                                             ---     ---\n+   |                                                             |\n+   |                                                             this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 7 previous errors\n "}, {"sha": "aa1d7453e83e1c0fefc5a3123b57d143451f6e1f", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -2,41 +2,51 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |                               -------     ---- these two types are declared with different lifetimes...\n+   |                                           ----     ----\n+   |                                           |\n+   |                                           this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-   |                                       -------      ---- these two types are declared with different lifetimes...\n+   |                                                    ----     ----\n+   |                                                    |\n+   |                                                    this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-   |                                       -------      ---- these two types are declared with different lifetimes...\n+   |                                                    ----     ----\n+   |                                                    |\n+   |                                                    this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-   |                                               -------       ---- these two types are declared with different lifetimes...\n+   |                                                             ----     ----\n+   |                                                             |\n+   |                                                             this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-   |                                           -------       ---- these two types are declared with different lifetimes...\n+   |                                                         ----     ----\n+   |                                                         |\n+   |                                                         this parameter and the return type are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` flows into `self` here\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 5 previous errors\n "}, {"sha": "136cc96be70cafa57951fc7edd89c784892803b1", "filename": "src/tools/clippy/tests/ui/manual_async_fn.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.fixed?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -80,7 +80,6 @@ fn elided_not_bound(_: &i32) -> impl Future<Output = i32> {\n     async { 42 }\n }\n \n-#[allow(clippy::needless_lifetimes)]\n async fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> i32 { 42 }\n \n // should be ignored"}, {"sha": "ddc453ffdb7500958c5e26cbf62a65a4859640f7", "filename": "src/tools/clippy/tests/ui/manual_async_fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.rs?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -98,7 +98,6 @@ fn elided_not_bound(_: &i32) -> impl Future<Output = i32> {\n     async { 42 }\n }\n \n-#[allow(clippy::needless_lifetimes)]\n fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b {\n     async { 42 }\n }"}, {"sha": "7435f46074c8167287b383f5cee7f67c3e5afb0f", "filename": "src/tools/clippy/tests/ui/manual_async_fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_async_fn.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -140,7 +140,7 @@ LL | fn elided(_: &i32) -> impl Future<Output = i32> + '_ { 42 }\n    |                                                      ~~~~~~\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:102:1\n+  --> $DIR/manual_async_fn.rs:101:1\n    |\n LL | fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "ffa152427a97740c108221fccfbfad53096500aa", "filename": "src/tools/clippy/tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d17b98f2dbb732049d9671c354903b19203b56/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.stderr?ref=86d17b98f2dbb732049d9671c354903b19203b56", "patch": "@@ -18,12 +18,6 @@ error: explicit lifetimes given in parameter types where they could be elided (o\n LL | fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:37:1\n-   |\n-LL | async fn func<'a>(args: &[&'a str]) -> Option<&'a str> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n   --> $DIR/needless_lifetimes.rs:56:1\n    |\n@@ -198,5 +192,5 @@ error: explicit lifetimes given in parameter types where they could be elided (o\n LL |         fn lifetime_elsewhere_provided<'a>(self: Box<Self>, here: &'a ()) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 33 previous errors\n+error: aborting due to 32 previous errors\n "}]}