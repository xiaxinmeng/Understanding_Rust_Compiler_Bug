{"sha": "67351a011bbaf63617c7fc96884129e9fc39e411", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MzUxYTAxMWJiYWY2MzYxN2M3ZmM5Njg4NDEyOWU5ZmMzOWU0MTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-01T11:22:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-01T11:22:31Z"}, "message": "Merge #3805\n\n3805: lower literal patterns r=JoshMcguigan a=JoshMcguigan\n\nWhile working on #3706 I discovered literal patterns weren't being lowered. This PR implements that lowering.\r\n\r\nQuestions for reviewers:\r\n\r\n1. This re-uses the existing conversion from `ast::LiteralKind` to `Literal`, but `ast::LiteralKind` doesn't include information about the actual value of the literal, which causes `Literal` to be created with the default value for the type (rather than the actual value in the source code). Am I correct in thinking that we'd eventually want to change things in such a way that we could initialize the `Literal` with the actual literal value? Is there an existing issue for this, or else perhaps I should create one to discuss how it should be implemented? My main question would be whether `ast::LiteralKind` should be extended to hold the actual value, or if we should provide some other way to get that information from `ast::Literal`?\r\n2. I couldn't find tests which directly cover this, but it does seem to work in #3706. Do we have unit tests for this lowering code?\r\n3. I'm not sure why `lit.literal()` returns an `Option`. Is returning a `Pat::Missing` in the `None` case the right thing to do? \r\n4. I was basically practicing type-system driven development to figure out the transformation from `ast::Pat::LiteralPat` to `Pat::Lit`. I don't have an immediate question here, but I just wanted to ensure this section is looked at closely during review. \n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>", "tree": {"sha": "6b1fd4e64965edb1de5f18894537d812b13fc73a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b1fd4e64965edb1de5f18894537d812b13fc73a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67351a011bbaf63617c7fc96884129e9fc39e411", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehHl3CRBK7hj4Ov3rIwAAdHIIAJglTQvHato3Y4NqlYXFrHlY\nzSL3x0hyOelFzGm5osvPz0k3td8rHfjf6zolZlriRhFm9BqcB5cQPFtITVddomEc\n05li9uX2GwrbtoUPcPtBJf/TiCzQOtJg8QiVepDejze9ITuGS0sD15hWLXcVyakb\nnfcWy7YtDmFasbJGGI8hCwBt2ig6AuuwpuFAjD32rE95WY6y6OvQGTGtujBdOXEC\ntcj/VTUL/V19OOi/TJWHQ7dU5E61Mm/EvYH5IbqmHJY6+3ZF6UIHMsaTIyLHptgX\n5pGrm5mUlY4Luk7sOuAQnotlW4KjoAgqyP7NsvB8DppDrH9OtFpqaR/pboVvnMc=\n=6XvI\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b1fd4e64965edb1de5f18894537d812b13fc73a\nparent d03d638cc3803a4994cef01b889cd1eaf20e7e01\nparent a9d0c9b2a4601835d1dd480b711c5d26f9c97430\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585740151 +0000\ncommitter GitHub <noreply@github.com> 1585740151 +0000\n\nMerge #3805\n\n3805: lower literal patterns r=JoshMcguigan a=JoshMcguigan\n\nWhile working on #3706 I discovered literal patterns weren't being lowered. This PR implements that lowering.\r\n\r\nQuestions for reviewers:\r\n\r\n1. This re-uses the existing conversion from `ast::LiteralKind` to `Literal`, but `ast::LiteralKind` doesn't include information about the actual value of the literal, which causes `Literal` to be created with the default value for the type (rather than the actual value in the source code). Am I correct in thinking that we'd eventually want to change things in such a way that we could initialize the `Literal` with the actual literal value? Is there an existing issue for this, or else perhaps I should create one to discuss how it should be implemented? My main question would be whether `ast::LiteralKind` should be extended to hold the actual value, or if we should provide some other way to get that information from `ast::Literal`?\r\n2. I couldn't find tests which directly cover this, but it does seem to work in #3706. Do we have unit tests for this lowering code?\r\n3. I'm not sure why `lit.literal()` returns an `Option`. Is returning a `Pat::Missing` in the `None` case the right thing to do? \r\n4. I was basically practicing type-system driven development to figure out the transformation from `ast::Pat::LiteralPat` to `Pat::Lit`. I don't have an immediate question here, but I just wanted to ensure this section is looked at closely during review. \n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67351a011bbaf63617c7fc96884129e9fc39e411", "html_url": "https://github.com/rust-lang/rust/commit/67351a011bbaf63617c7fc96884129e9fc39e411", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67351a011bbaf63617c7fc96884129e9fc39e411/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03d638cc3803a4994cef01b889cd1eaf20e7e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03d638cc3803a4994cef01b889cd1eaf20e7e01", "html_url": "https://github.com/rust-lang/rust/commit/d03d638cc3803a4994cef01b889cd1eaf20e7e01"}, {"sha": "a9d0c9b2a4601835d1dd480b711c5d26f9c97430", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d0c9b2a4601835d1dd480b711c5d26f9c97430", "html_url": "https://github.com/rust-lang/rust/commit/a9d0c9b2a4601835d1dd480b711c5d26f9c97430"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "7b809cf4faa1e64ee93ab5da61d34ee50c090b30", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/67351a011bbaf63617c7fc96884129e9fc39e411/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67351a011bbaf63617c7fc96884129e9fc39e411/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=67351a011bbaf63617c7fc96884129e9fc39e411", "patch": "@@ -417,26 +417,7 @@ impl ExprCollector<'_> {\n                 }\n             }\n \n-            ast::Expr::Literal(e) => {\n-                let lit = match e.kind() {\n-                    LiteralKind::IntNumber { suffix } => {\n-                        let known_name = suffix.and_then(|it| BuiltinInt::from_suffix(&it));\n-\n-                        Literal::Int(Default::default(), known_name)\n-                    }\n-                    LiteralKind::FloatNumber { suffix } => {\n-                        let known_name = suffix.and_then(|it| BuiltinFloat::from_suffix(&it));\n-\n-                        Literal::Float(Default::default(), known_name)\n-                    }\n-                    LiteralKind::ByteString => Literal::ByteString(Default::default()),\n-                    LiteralKind::String => Literal::String(Default::default()),\n-                    LiteralKind::Byte => Literal::Int(Default::default(), Some(BuiltinInt::U8)),\n-                    LiteralKind::Bool => Literal::Bool(Default::default()),\n-                    LiteralKind::Char => Literal::Char(Default::default()),\n-                };\n-                self.alloc_expr(Expr::Literal(lit), syntax_ptr)\n-            }\n+            ast::Expr::Literal(e) => self.alloc_expr(Expr::Literal(e.kind().into()), syntax_ptr),\n             ast::Expr::IndexExpr(e) => {\n                 let base = self.collect_expr_opt(e.base());\n                 let index = self.collect_expr_opt(e.index());\n@@ -679,10 +660,19 @@ impl ExprCollector<'_> {\n                     suffix: suffix.into_iter().map(|p| self.collect_pat(p)).collect(),\n                 }\n             }\n+            ast::Pat::LiteralPat(lit) => {\n+                if let Some(ast_lit) = lit.literal() {\n+                    let expr = Expr::Literal(ast_lit.kind().into());\n+                    let expr_ptr = AstPtr::new(&ast::Expr::Literal(ast_lit));\n+                    let expr_id = self.alloc_expr(expr, expr_ptr);\n+                    Pat::Lit(expr_id)\n+                } else {\n+                    Pat::Missing\n+                }\n+            }\n \n             // FIXME: implement\n             ast::Pat::BoxPat(_) => Pat::Missing,\n-            ast::Pat::LiteralPat(_) => Pat::Missing,\n             ast::Pat::RangePat(_) => Pat::Missing,\n         };\n         let ptr = AstPtr::new(&pat);\n@@ -741,3 +731,25 @@ impl From<ast::BinOp> for BinaryOp {\n         }\n     }\n }\n+\n+impl From<ast::LiteralKind> for Literal {\n+    fn from(ast_lit_kind: ast::LiteralKind) -> Self {\n+        match ast_lit_kind {\n+            LiteralKind::IntNumber { suffix } => {\n+                let known_name = suffix.and_then(|it| BuiltinInt::from_suffix(&it));\n+\n+                Literal::Int(Default::default(), known_name)\n+            }\n+            LiteralKind::FloatNumber { suffix } => {\n+                let known_name = suffix.and_then(|it| BuiltinFloat::from_suffix(&it));\n+\n+                Literal::Float(Default::default(), known_name)\n+            }\n+            LiteralKind::ByteString => Literal::ByteString(Default::default()),\n+            LiteralKind::String => Literal::String(Default::default()),\n+            LiteralKind::Byte => Literal::Int(Default::default(), Some(BuiltinInt::U8)),\n+            LiteralKind::Bool => Literal::Bool(Default::default()),\n+            LiteralKind::Char => Literal::Char(Default::default()),\n+        }\n+    }\n+}"}]}