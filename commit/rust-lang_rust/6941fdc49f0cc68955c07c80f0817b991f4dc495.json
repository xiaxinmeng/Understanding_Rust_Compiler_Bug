{"sha": "6941fdc49f0cc68955c07c80f0817b991f4dc495", "node_id": "C_kwDOAAsO6NoAKDY5NDFmZGM0OWYwY2M2ODk1NWMwN2M4MGYwODE3Yjk5MWY0ZGM0OTU", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-12T12:18:08Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-12T15:05:58Z"}, "message": "impl PartialOrd codegen for tuple records", "tree": {"sha": "b8c0ed8194c10a6d9c6c119d4b6868d4b076d4b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8c0ed8194c10a6d9c6c119d4b6868d4b076d4b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6941fdc49f0cc68955c07c80f0817b991f4dc495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6941fdc49f0cc68955c07c80f0817b991f4dc495", "html_url": "https://github.com/rust-lang/rust/commit/6941fdc49f0cc68955c07c80f0817b991f4dc495", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6941fdc49f0cc68955c07c80f0817b991f4dc495/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc6aee51b0d4902bf93fe31665e802b8d2df0bd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6aee51b0d4902bf93fe31665e802b8d2df0bd8", "html_url": "https://github.com/rust-lang/rust/commit/bc6aee51b0d4902bf93fe31665e802b8d2df0bd8"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "1dc8dd95abd19353e7522aaa743d66c64b95b1c8", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6941fdc49f0cc68955c07c80f0817b991f4dc495/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6941fdc49f0cc68955c07c80f0817b991f4dc495/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=6941fdc49f0cc68955c07c80f0817b991f4dc495", "patch": "@@ -675,6 +675,43 @@ impl Clone for Foo {\n         )\n     }\n \n+    #[test]\n+    fn add_custom_impl_partial_ord_record_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: ord\n+#[derive(Partial$0Ord)]\n+struct Foo {\n+    bin: usize,\n+    bar: usize,\n+    baz: usize,\n+}\n+\"#,\n+            r#\"\n+struct Foo {\n+    bin: usize,\n+    bar: usize,\n+    baz: usize,\n+}\n+\n+impl PartialOrd for Foo {\n+    $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n+        match self.bin.partial_cmp(other.bin) {\n+            Some(core::cmp::Ordering::Eq) => {}\n+            ord => return ord,\n+        }\n+        match self.bar.partial_cmp(other.bar) {\n+            Some(core::cmp::Ordering::Eq) => {}\n+            ord => return ord,\n+        }\n+        self.baz.partial_cmp(other.baz)\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn add_custom_impl_partial_eq_record_struct() {\n         check_assist("}, {"sha": "aa0d9bc76bd50355ae1f8f523d93db1c3a5e8e50", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6941fdc49f0cc68955c07c80f0817b991f4dc495/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6941fdc49f0cc68955c07c80f0817b991f4dc495/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=6941fdc49f0cc68955c07c80f0817b991f4dc495", "patch": "@@ -581,6 +581,29 @@ fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n         }\n     }\n \n+    fn gen_partial_eq_match(match_target: ast::Expr) -> Option<ast::Stmt> {\n+        let mut arms = vec![];\n+\n+        let variant_name =\n+            make::path_pat(make::ext::path_from_idents([\"core\", \"cmp\", \"Ordering\", \"Eq\"])?);\n+        let lhs = make::tuple_struct_pat(make::ext::path_from_idents([\"Some\"])?, [variant_name]);\n+        arms.push(make::match_arm(Some(lhs.into()), None, make::expr_empty_block()));\n+\n+        arms.push(make::match_arm(\n+            [make::ident_pat(false, false, make::name(\"ord\")).into()],\n+            None,\n+            make::expr_return(Some(make::expr_path(make::ext::ident_path(\"ord\")))),\n+        ));\n+        // let rhs = make::expr_path(make::ext::ident_path(\"other\"));\n+        let list = make::match_arm_list(arms).indent(ast::edit::IndentLevel(1));\n+        Some(make::expr_stmt(make::expr_match(match_target, list)).into())\n+    }\n+\n+    fn gen_partial_cmp_call(lhs: ast::Expr, rhs: ast::Expr) -> ast::Expr {\n+        let method = make::name_ref(\"partial_cmp\");\n+        make::expr_method_call(lhs, method, make::arg_list(Some(rhs)))\n+    }\n+\n     fn gen_record_pat_field(field_name: &str, pat_name: &str) -> ast::RecordPatField {\n         let pat = make::ext::simple_ident_pat(make::name(&pat_name));\n         let name_ref = make::name_ref(field_name);\n@@ -700,16 +723,22 @@ fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n         }\n         ast::Adt::Struct(strukt) => match strukt.field_list() {\n             Some(ast::FieldList::RecordFieldList(field_list)) => {\n-                let mut expr = None;\n+                let mut exprs = vec![];\n                 for field in field_list.fields() {\n                     let lhs = make::expr_path(make::ext::ident_path(\"self\"));\n                     let lhs = make::expr_field(lhs, &field.name()?.to_string());\n                     let rhs = make::expr_path(make::ext::ident_path(\"other\"));\n                     let rhs = make::expr_field(rhs, &field.name()?.to_string());\n-                    let cmp = make::expr_op(ast::BinOp::EqualityTest, lhs, rhs);\n-                    expr = gen_eq_chain(expr, cmp);\n+                    let ord = gen_partial_cmp_call(lhs, rhs);\n+                    exprs.push(ord);\n                 }\n-                make::block_expr(None, expr).indent(ast::edit::IndentLevel(1))\n+\n+                let tail = exprs.pop();\n+                let stmts = exprs\n+                    .into_iter()\n+                    .map(gen_partial_eq_match)\n+                    .collect::<Option<Vec<ast::Stmt>>>()?;\n+                make::block_expr(stmts.into_iter(), tail).indent(ast::edit::IndentLevel(1))\n             }\n \n             Some(ast::FieldList::TupleFieldList(field_list)) => {"}]}