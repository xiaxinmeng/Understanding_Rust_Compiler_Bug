{"sha": "05547d90b51a089e789ba29be5b2e11099235709", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NTQ3ZDkwYjUxYTA4OWU3ODliYTI5YmU1YjJlMTEwOTkyMzU3MDk=", "commit": {"author": {"name": "rChaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-04-23T23:21:04Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-04-23T23:21:04Z"}, "message": "leave the comment in parentheses of argumentless Fn (#3518)", "tree": {"sha": "713a02c232f08c67d7761460ed3b1bf33f21a7ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/713a02c232f08c67d7761460ed3b1bf33f21a7ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05547d90b51a089e789ba29be5b2e11099235709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05547d90b51a089e789ba29be5b2e11099235709", "html_url": "https://github.com/rust-lang/rust/commit/05547d90b51a089e789ba29be5b2e11099235709", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05547d90b51a089e789ba29be5b2e11099235709/comments", "author": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f61286293d1dc6ccde1713c5ded5cbdb2240b20", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f61286293d1dc6ccde1713c5ded5cbdb2240b20", "html_url": "https://github.com/rust-lang/rust/commit/1f61286293d1dc6ccde1713c5ded5cbdb2240b20"}], "stats": {"total": 164, "additions": 127, "deletions": 37}, "files": [{"sha": "db4796eb08e413a4ec94a3fb664f0be6432ffb69", "filename": "src/source_map.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05547d90b51a089e789ba29be5b2e11099235709/src%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05547d90b51a089e789ba29be5b2e11099235709/src%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_map.rs?ref=05547d90b51a089e789ba29be5b2e11099235709", "patch": "@@ -11,6 +11,7 @@ pub trait SpanUtils {\n     fn span_after(&self, original: Span, needle: &str) -> BytePos;\n     fn span_after_last(&self, original: Span, needle: &str) -> BytePos;\n     fn span_before(&self, original: Span, needle: &str) -> BytePos;\n+    fn span_before_last(&self, original: Span, needle: &str) -> BytePos;\n     fn opt_span_after(&self, original: Span, needle: &str) -> Option<BytePos>;\n     fn opt_span_before(&self, original: Span, needle: &str) -> Option<BytePos>;\n }\n@@ -56,6 +57,17 @@ impl<'a> SpanUtils for SnippetProvider<'a> {\n         })\n     }\n \n+    fn span_before_last(&self, original: Span, needle: &str) -> BytePos {\n+        let snippet = self.span_to_snippet(original).unwrap();\n+        let mut offset = 0;\n+\n+        while let Some(additional_offset) = snippet[offset..].find_uncommented(needle) {\n+            offset += additional_offset + needle.len();\n+        }\n+\n+        original.lo() + BytePos(offset as u32 - 1)\n+    }\n+\n     fn opt_span_after(&self, original: Span, needle: &str) -> Option<BytePos> {\n         self.opt_span_before(original, needle)\n             .map(|bytepos| bytepos + BytePos(needle.len() as u32))"}, {"sha": "f939aeae35ddf3337f1b22da4475cf3a7910cbc6", "filename": "src/types.rs", "status": "modified", "additions": 64, "deletions": 37, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/05547d90b51a089e789ba29be5b2e11099235709/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05547d90b51a089e789ba29be5b2e11099235709/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=05547d90b51a089e789ba29be5b2e11099235709", "patch": "@@ -8,7 +8,9 @@ use syntax::symbol::keywords;\n use crate::config::lists::*;\n use crate::config::{IndentStyle, TypeDensity};\n use crate::expr::{format_expr, rewrite_assign_rhs, rewrite_tuple, rewrite_unary_prefix, ExprType};\n-use crate::lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n+use crate::lists::{\n+    definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator,\n+};\n use crate::macros::{rewrite_macro, MacroPosition};\n use crate::overflow;\n use crate::pairs::{rewrite_pair, PairParts};\n@@ -314,47 +316,56 @@ where\n         let offset = shape.indent + 1;\n         Shape::legacy(budget, offset)\n     };\n+\n     let list_lo = context.snippet_provider.span_after(span, \"(\");\n-    let items = itemize_list(\n-        context.snippet_provider,\n-        inputs,\n-        \")\",\n-        \",\",\n-        |arg| arg.span().lo(),\n-        |arg| arg.span().hi(),\n-        |arg| arg.rewrite(context, list_shape),\n-        list_lo,\n-        span.hi(),\n-        false,\n-    );\n+    let (list_str, tactic) = if inputs.len() == 0 {\n+        let tactic = get_tactics(&[], &output, shape);\n+        let list_hi = context.snippet_provider.span_before_last(span, \")\");\n+        let comment = context\n+            .snippet_provider\n+            .span_to_snippet(mk_sp(list_lo, list_hi))?\n+            .trim();\n+        let comment = if comment.starts_with(\"//\") {\n+            format!(\n+                \"{}{}{}\",\n+                &list_shape.indent.to_string_with_newline(context.config),\n+                comment,\n+                &shape.block().indent.to_string_with_newline(context.config)\n+            )\n+        } else {\n+            comment.to_string()\n+        };\n+        (comment, tactic)\n+    } else {\n+        let items = itemize_list(\n+            context.snippet_provider,\n+            inputs,\n+            \")\",\n+            \",\",\n+            |arg| arg.span().lo(),\n+            |arg| arg.span().hi(),\n+            |arg| arg.rewrite(context, list_shape),\n+            list_lo,\n+            span.hi(),\n+            false,\n+        );\n \n-    let item_vec: Vec<_> = items.collect();\n+        let item_vec: Vec<_> = items.collect();\n+        let tactic = get_tactics(&item_vec, &output, shape);\n+        let trailing_separator = if !context.use_block_indent() || variadic {\n+            SeparatorTactic::Never\n+        } else {\n+            context.config.trailing_comma()\n+        };\n \n-    // If the return type is multi-lined, then force to use multiple lines for\n-    // arguments as well.\n-    let tactic = if output.contains('\\n') {\n-        DefinitiveListTactic::Vertical\n-    } else {\n-        definitive_tactic(\n-            &*item_vec,\n-            ListTactic::HorizontalVertical,\n-            Separator::Comma,\n-            shape.width.saturating_sub(2 + output.len()),\n-        )\n-    };\n-    let trailing_separator = if !context.use_block_indent() || variadic {\n-        SeparatorTactic::Never\n-    } else {\n-        context.config.trailing_comma()\n+        let fmt = ListFormatting::new(list_shape, context.config)\n+            .tactic(tactic)\n+            .trailing_separator(trailing_separator)\n+            .ends_with_newline(tactic.ends_with_newline(context.config.indent_style()))\n+            .preserve_newline(true);\n+        (write_list(&item_vec, &fmt)?, tactic)\n     };\n \n-    let fmt = ListFormatting::new(list_shape, context.config)\n-        .tactic(tactic)\n-        .trailing_separator(trailing_separator)\n-        .ends_with_newline(tactic.ends_with_newline(context.config.indent_style()))\n-        .preserve_newline(true);\n-    let list_str = write_list(&item_vec, &fmt)?;\n-\n     let args = if tactic == DefinitiveListTactic::Horizontal || !context.use_block_indent() {\n         format!(\"({})\", list_str)\n     } else {\n@@ -381,6 +392,22 @@ fn type_bound_colon(context: &RewriteContext<'_>) -> &'static str {\n     colon_spaces(context.config)\n }\n \n+// If the return type is multi-lined, then force to use multiple lines for\n+// arguments as well.\n+fn get_tactics(item_vec: &[ListItem], output: &str, shape: Shape) -> DefinitiveListTactic {\n+    if output.contains('\\n') {\n+        DefinitiveListTactic::Vertical\n+    } else {\n+        definitive_tactic(\n+            item_vec,\n+            ListTactic::HorizontalVertical,\n+            Separator::Comma,\n+            // 2 is for the case of ',\\n'\n+            shape.width.saturating_sub(2 + output.len()),\n+        )\n+    }\n+}\n+\n impl Rewrite for ast::WherePredicate {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         // FIXME: dead spans?"}, {"sha": "821e947c707c7266dcf05ca559e7a48ff74a3fe5", "filename": "tests/source/issue-3508.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/05547d90b51a089e789ba29be5b2e11099235709/tests%2Fsource%2Fissue-3508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05547d90b51a089e789ba29be5b2e11099235709/tests%2Fsource%2Fissue-3508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3508.rs?ref=05547d90b51a089e789ba29be5b2e11099235709", "patch": "@@ -0,0 +1,29 @@\n+fn foo<F>(foo2: F)\n+where\n+    F: Fn(\n+          // this comment is deleted\n+),\n+{\n+}\n+\n+fn foo_block<F>(foo2: F)\n+where\n+    F: Fn(\n+        /* this comment is deleted */\n+  ),\n+{\n+}\n+\n+fn bar(\n+    bar2: impl Fn(\n+          // this comment is deleted\n+    ),\n+) {\n+}\n+\n+fn bar_block(\n+    bar2: impl Fn(\n+        /* this comment is deleted */\n+    ),\n+) {\n+}"}, {"sha": "5f4e156582d4de035e158f8a6faabd034fe6f0db", "filename": "tests/target/issue-3508.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05547d90b51a089e789ba29be5b2e11099235709/tests%2Ftarget%2Fissue-3508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05547d90b51a089e789ba29be5b2e11099235709/tests%2Ftarget%2Fissue-3508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3508.rs?ref=05547d90b51a089e789ba29be5b2e11099235709", "patch": "@@ -0,0 +1,22 @@\n+fn foo<F>(foo2: F)\n+where\n+    F: Fn(\n+        // this comment is deleted\n+    ),\n+{\n+}\n+\n+fn foo_block<F>(foo2: F)\n+where\n+    F: Fn(/* this comment is deleted */),\n+{\n+}\n+\n+fn bar(\n+    bar2: impl Fn(\n+        // this comment is deleted\n+    ),\n+) {\n+}\n+\n+fn bar_block(bar2: impl Fn(/* this comment is deleted */)) {}"}]}