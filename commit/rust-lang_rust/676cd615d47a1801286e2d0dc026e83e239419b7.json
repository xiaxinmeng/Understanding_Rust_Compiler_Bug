{"sha": "676cd615d47a1801286e2d0dc026e83e239419b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NmNkNjE1ZDQ3YTE4MDEyODZlMmQwZGMwMjZlODNlMjM5NDE5Yjc=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-04-17T08:35:31Z"}, "committer": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-04-17T08:48:59Z"}, "message": "syntax: Parses `&&` as `& &` whenever appropriate.\n\nCloses #11227.", "tree": {"sha": "1bab0433982b3b9cc8a028ffa59675973b9a3844", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bab0433982b3b9cc8a028ffa59675973b9a3844"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/676cd615d47a1801286e2d0dc026e83e239419b7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/676cd615d47a1801286e2d0dc026e83e239419b7", "html_url": "https://github.com/rust-lang/rust/commit/676cd615d47a1801286e2d0dc026e83e239419b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/676cd615d47a1801286e2d0dc026e83e239419b7/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baa149bcc7c99dfe3cb5959ae3ba2ff59267d1ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/baa149bcc7c99dfe3cb5959ae3ba2ff59267d1ae", "html_url": "https://github.com/rust-lang/rust/commit/baa149bcc7c99dfe3cb5959ae3ba2ff59267d1ae"}], "stats": {"total": 133, "additions": 95, "deletions": 38}, "files": [{"sha": "379403e54097726f65794f56a570b26d53b009c4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 54, "deletions": 38, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/676cd615d47a1801286e2d0dc026e83e239419b7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/676cd615d47a1801286e2d0dc026e83e239419b7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=676cd615d47a1801286e2d0dc026e83e239419b7", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -542,6 +542,26 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    // Expect and consume an `&`. If `&&` is seen, replace it with a single\n+    // `&` and continue. If an `&` is not seen, signal an error.\n+    fn expect_and(&mut self) {\n+        match self.token {\n+            token::BINOP(token::AND) => self.bump(),\n+            token::ANDAND => {\n+                let lo = self.span.lo + BytePos(1);\n+                self.replace_token(token::BINOP(token::AND), lo, self.span.hi)\n+            }\n+            _ => {\n+                let token_str = self.this_token_to_str();\n+                let found_token =\n+                    Parser::token_to_str(&token::BINOP(token::AND));\n+                self.fatal(format!(\"expected `{}`, found `{}`\",\n+                                   found_token,\n+                                   token_str))\n+            }\n+        }\n+    }\n+\n     // Expect and consume a `|`. If `||` is seen, replace it with a single\n     // `|` and continue. If a `|` is not seen, signal an error.\n     fn expect_or(&mut self) {\n@@ -1218,9 +1238,10 @@ impl<'a> Parser<'a> {\n             };\n             self.expect(&token::RBRACKET);\n             t\n-        } else if self.token == token::BINOP(token::AND) {\n+        } else if self.token == token::BINOP(token::AND) ||\n+                self.token == token::ANDAND {\n             // BORROWED POINTER\n-            self.bump();\n+            self.expect_and();\n             self.parse_borrowed_pointee()\n         } else if self.is_keyword(keywords::Extern) ||\n                 self.token_is_bare_fn_keyword() {\n@@ -2169,42 +2190,37 @@ impl<'a> Parser<'a> {\n             hi = e.span.hi;\n             ex = self.mk_unary(UnNot, e);\n           }\n-          token::BINOP(b) => {\n-            match b {\n-              token::MINUS => {\n-                self.bump();\n-                let e = self.parse_prefix_expr();\n-                hi = e.span.hi;\n-                ex = self.mk_unary(UnNeg, e);\n+          token::BINOP(token::MINUS) => {\n+            self.bump();\n+            let e = self.parse_prefix_expr();\n+            hi = e.span.hi;\n+            ex = self.mk_unary(UnNeg, e);\n+          }\n+          token::BINOP(token::STAR) => {\n+            self.bump();\n+            let e = self.parse_prefix_expr();\n+            hi = e.span.hi;\n+            ex = self.mk_unary(UnDeref, e);\n+          }\n+          token::BINOP(token::AND) | token::ANDAND => {\n+            self.expect_and();\n+            let _lt = self.parse_opt_lifetime();\n+            let m = self.parse_mutability();\n+            let e = self.parse_prefix_expr();\n+            hi = e.span.hi;\n+            // HACK: turn &[...] into a &-vec\n+            ex = match e.node {\n+              ExprVec(..) if m == MutImmutable => {\n+                ExprVstore(e, ExprVstoreSlice)\n               }\n-              token::STAR => {\n-                self.bump();\n-                let e = self.parse_prefix_expr();\n-                hi = e.span.hi;\n-                ex = self.mk_unary(UnDeref, e);\n+              ExprLit(lit) if lit_is_str(lit) && m == MutImmutable => {\n+                ExprVstore(e, ExprVstoreSlice)\n               }\n-              token::AND => {\n-                self.bump();\n-                let _lt = self.parse_opt_lifetime();\n-                let m = self.parse_mutability();\n-                let e = self.parse_prefix_expr();\n-                hi = e.span.hi;\n-                // HACK: turn &[...] into a &-vec\n-                ex = match e.node {\n-                  ExprVec(..) if m == MutImmutable => {\n-                    ExprVstore(e, ExprVstoreSlice)\n-                  }\n-                  ExprLit(lit) if lit_is_str(lit) && m == MutImmutable => {\n-                    ExprVstore(e, ExprVstoreSlice)\n-                  }\n-                  ExprVec(..) if m == MutMutable => {\n-                    ExprVstore(e, ExprVstoreMutSlice)\n-                  }\n-                  _ => ExprAddrOf(m, e)\n-                };\n+              ExprVec(..) if m == MutMutable => {\n+                ExprVstore(e, ExprVstoreMutSlice)\n               }\n-              _ => return self.parse_dot_or_call_expr()\n-            }\n+              _ => ExprAddrOf(m, e)\n+            };\n           }\n           token::AT => {\n             self.bump();\n@@ -2749,10 +2765,10 @@ impl<'a> Parser<'a> {\n                 span: mk_sp(lo, hi)\n             }\n           }\n-          token::BINOP(token::AND) => {\n+          token::BINOP(token::AND) | token::ANDAND => {\n               // parse &pat\n               let lo = self.span.lo;\n-              self.bump();\n+              self.expect_and();\n               let sub = self.parse_pat();\n               hi = sub.span.hi;\n               // HACK: parse &\"...\" as a literal of a borrowed str"}, {"sha": "656b9164dfe221381f22f92bfa60099f295f6006", "filename": "src/test/run-pass/double-ref.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/676cd615d47a1801286e2d0dc026e83e239419b7/src%2Ftest%2Frun-pass%2Fdouble-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/676cd615d47a1801286e2d0dc026e83e239419b7/src%2Ftest%2Frun-pass%2Fdouble-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdouble-ref.rs?ref=676cd615d47a1801286e2d0dc026e83e239419b7", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn check_expr() {\n+    let _:         & uint =     &1u;\n+    let _:       & & uint =    &&1u;\n+    let _:     & & & uint =   &&&1u;\n+    let _:     & & & uint =  & &&1u;\n+    let _:   & & & & uint =  &&&&1u;\n+    let _:   & & & & uint = & &&&1u;\n+    let _: & & & & & uint = &&&&&1u;\n+}\n+\n+fn check_ty() {\n+    let _:     &uint =         & 1u;\n+    let _:    &&uint =       & & 1u;\n+    let _:   &&&uint =     & & & 1u;\n+    let _:  & &&uint =     & & & 1u;\n+    let _:  &&&&uint =   & & & & 1u;\n+    let _: & &&&uint =   & & & & 1u;\n+    let _: &&&&&uint = & & & & & 1u;\n+}\n+\n+fn check_pat() {\n+    let     &_ =         & 1u;\n+    let    &&_ =       & & 1u;\n+    let   &&&_ =     & & & 1u;\n+    let  & &&_ =     & & & 1u;\n+    let  &&&&_ =   & & & & 1u;\n+    let & &&&_ =   & & & & 1u;\n+    let &&&&&_ = & & & & & 1u;\n+}\n+\n+pub fn main() {}"}]}