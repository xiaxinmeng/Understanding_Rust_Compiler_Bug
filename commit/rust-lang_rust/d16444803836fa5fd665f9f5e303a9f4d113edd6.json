{"sha": "d16444803836fa5fd665f9f5e303a9f4d113edd6", "node_id": "C_kwDOAAsO6NoAKGQxNjQ0NDgwMzgzNmZhNWZkNjY1ZjlmNWUzMDNhOWY0ZDExM2VkZDY", "commit": {"author": {"name": "yifei", "email": "lyfmagic99@gmail.com", "date": "2023-01-18T16:38:09Z"}, "committer": {"name": "yifei", "email": "lyfmagic99@gmail.com", "date": "2023-02-13T11:39:44Z"}, "message": "fix: Unexpected trait bound not satisfied in HRTB", "tree": {"sha": "4a52c244ac2b9b5ea1eb79ea539769f7b522b035", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a52c244ac2b9b5ea1eb79ea539769f7b522b035"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d16444803836fa5fd665f9f5e303a9f4d113edd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d16444803836fa5fd665f9f5e303a9f4d113edd6", "html_url": "https://github.com/rust-lang/rust/commit/d16444803836fa5fd665f9f5e303a9f4d113edd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d16444803836fa5fd665f9f5e303a9f4d113edd6/comments", "author": {"login": "LYF1999", "id": 17444266, "node_id": "MDQ6VXNlcjE3NDQ0MjY2", "avatar_url": "https://avatars.githubusercontent.com/u/17444266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LYF1999", "html_url": "https://github.com/LYF1999", "followers_url": "https://api.github.com/users/LYF1999/followers", "following_url": "https://api.github.com/users/LYF1999/following{/other_user}", "gists_url": "https://api.github.com/users/LYF1999/gists{/gist_id}", "starred_url": "https://api.github.com/users/LYF1999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LYF1999/subscriptions", "organizations_url": "https://api.github.com/users/LYF1999/orgs", "repos_url": "https://api.github.com/users/LYF1999/repos", "events_url": "https://api.github.com/users/LYF1999/events{/privacy}", "received_events_url": "https://api.github.com/users/LYF1999/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LYF1999", "id": 17444266, "node_id": "MDQ6VXNlcjE3NDQ0MjY2", "avatar_url": "https://avatars.githubusercontent.com/u/17444266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LYF1999", "html_url": "https://github.com/LYF1999", "followers_url": "https://api.github.com/users/LYF1999/followers", "following_url": "https://api.github.com/users/LYF1999/following{/other_user}", "gists_url": "https://api.github.com/users/LYF1999/gists{/gist_id}", "starred_url": "https://api.github.com/users/LYF1999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LYF1999/subscriptions", "organizations_url": "https://api.github.com/users/LYF1999/orgs", "repos_url": "https://api.github.com/users/LYF1999/repos", "events_url": "https://api.github.com/users/LYF1999/events{/privacy}", "received_events_url": "https://api.github.com/users/LYF1999/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21f683935257713eae8549e8b328367006097053", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f683935257713eae8549e8b328367006097053", "html_url": "https://github.com/rust-lang/rust/commit/21f683935257713eae8549e8b328367006097053"}], "stats": {"total": 122, "additions": 121, "deletions": 1}, "files": [{"sha": "76ac4cfa4c4c7959fd35e60dd055f9d65f855263", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d16444803836fa5fd665f9f5e303a9f4d113edd6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16444803836fa5fd665f9f5e303a9f4d113edd6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d16444803836fa5fd665f9f5e303a9f4d113edd6", "patch": "@@ -27,6 +27,7 @@ use super::{\n \n use crate::infer::{InferCtxt, InferOk, TypeFreshener};\n use crate::traits::error_reporting::TypeErrCtxtExt;\n+use crate::traits::project::try_normalize_with_depth_to;\n use crate::traits::project::ProjectAndUnifyResult;\n use crate::traits::project::ProjectionCacheKeyExt;\n use crate::traits::ProjectionCacheKey;\n@@ -1017,7 +1018,51 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return Ok(cycle_result);\n         }\n \n-        let (result, dep_node) = self.in_task(|this| this.evaluate_stack(&stack));\n+        let (result, dep_node) = self.in_task(|this| {\n+            let mut result = this.evaluate_stack(&stack)?;\n+\n+            // fix issue #103563, we don't normalize\n+            // nested obligations which produced by `TraitDef` candidate\n+            // (i.e. using bounds on assoc items as assumptions).\n+            // because we don't have enough information to\n+            // normalize these obligations before evaluating.\n+            // so we will try to normalize the obligation and evaluate again.\n+            // we will replace it with new solver in the future.\n+            if EvaluationResult::EvaluatedToErr == result\n+                && fresh_trait_pred.has_projections()\n+                && fresh_trait_pred.is_global()\n+            {\n+                let mut nested_obligations = Vec::new();\n+                let predicate = try_normalize_with_depth_to(\n+                    this,\n+                    param_env,\n+                    obligation.cause.clone(),\n+                    obligation.recursion_depth + 1,\n+                    obligation.predicate,\n+                    &mut nested_obligations,\n+                );\n+                if predicate != obligation.predicate {\n+                    let mut nested_result = EvaluationResult::EvaluatedToOk;\n+                    for obligation in nested_obligations {\n+                        nested_result = cmp::max(\n+                            this.evaluate_predicate_recursively(stack.list(), obligation)?,\n+                            nested_result,\n+                        );\n+                    }\n+\n+                    if nested_result.must_apply_modulo_regions() {\n+                        let obligation = obligation.with(this.tcx(), predicate);\n+                        result = cmp::max(\n+                            nested_result,\n+                            this.evaluate_trait_predicate_recursively(stack.list(), obligation)?,\n+                        );\n+                    }\n+                }\n+            }\n+\n+            Ok::<_, OverflowError>(result)\n+        });\n+\n         let result = result?;\n \n         if !result.must_apply_modulo_regions() {"}, {"sha": "cd3eea09b997d6033c253fdc517b6d42717b23b2", "filename": "tests/ui/traits/issue-103563.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/d16444803836fa5fd665f9f5e303a9f4d113edd6/tests%2Fui%2Ftraits%2Fissue-103563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16444803836fa5fd665f9f5e303a9f4d113edd6/tests%2Fui%2Ftraits%2Fissue-103563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-103563.rs?ref=d16444803836fa5fd665f9f5e303a9f4d113edd6", "patch": "@@ -0,0 +1,75 @@\n+// build-pass\n+\n+fn main() {\n+    let mut log_service = LogService { inner: Inner };\n+    log_service.call(());\n+}\n+\n+pub trait Service<Request> {\n+    type Response;\n+\n+    fn call(&mut self, req: Request) -> Self::Response;\n+}\n+\n+pub struct LogService<S> {\n+    inner: S,\n+}\n+\n+impl<T, U, S> Service<T> for LogService<S>\n+where\n+    S: Service<T, Response = U>,\n+    U: Extension + 'static,\n+    for<'a> U::Item<'a>: std::fmt::Debug,\n+{\n+    type Response = S::Response;\n+\n+    fn call(&mut self, req: T) -> Self::Response {\n+        self.inner.call(req)\n+    }\n+}\n+\n+pub struct Inner;\n+\n+impl Service<()> for Inner {\n+    type Response = Resp;\n+\n+    fn call(&mut self, req: ()) -> Self::Response {\n+        Resp::A(req)\n+    }\n+}\n+\n+pub trait Extension {\n+    type Item<'a>;\n+\n+    fn touch<F>(self, f: F) -> Self\n+    where\n+        for<'a> F: Fn(Self::Item<'a>);\n+}\n+\n+pub enum Resp {\n+    A(()),\n+}\n+\n+impl Extension for Resp {\n+    type Item<'a> = RespItem<'a>;\n+    fn touch<F>(self, _f: F) -> Self\n+    where\n+        for<'a> F: Fn(Self::Item<'a>),\n+    {\n+        match self {\n+            Self::A(a) => Self::A(a),\n+        }\n+    }\n+}\n+\n+pub enum RespItem<'a> {\n+    A(&'a ()),\n+}\n+\n+impl<'a> std::fmt::Debug for RespItem<'a> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        match self {\n+            Self::A(arg0) => f.debug_tuple(\"A\").field(arg0).finish(),\n+        }\n+    }\n+}"}]}