{"sha": "1380776d36ca269a7c0c7684568e6ae2d395107f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzODA3NzZkMzZjYTI2OWE3YzBjNzY4NDU2OGU2YWUyZDM5NTEwN2Y=", "commit": {"author": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-23T02:44:43Z"}, "committer": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-23T02:44:43Z"}, "message": "Use explicit self", "tree": {"sha": "bbed81637eafe717365727ab9a7d73bbe9c656be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbed81637eafe717365727ab9a7d73bbe9c656be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1380776d36ca269a7c0c7684568e6ae2d395107f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1380776d36ca269a7c0c7684568e6ae2d395107f", "html_url": "https://github.com/rust-lang/rust/commit/1380776d36ca269a7c0c7684568e6ae2d395107f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1380776d36ca269a7c0c7684568e6ae2d395107f/comments", "author": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "committer": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71c311cec5fa4a71e5349ed2df962a7adfd336bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/71c311cec5fa4a71e5349ed2df962a7adfd336bd", "html_url": "https://github.com/rust-lang/rust/commit/71c311cec5fa4a71e5349ed2df962a7adfd336bd"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "032b2ec3129002261056f5dc9ebf78f299f042ff", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1380776d36ca269a7c0c7684568e6ae2d395107f/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1380776d36ca269a7c0c7684568e6ae2d395107f/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=1380776d36ca269a7c0c7684568e6ae2d395107f", "patch": "@@ -394,8 +394,8 @@ fn MergeState<T>() -> MergeState<T> {\n     }\n }\n \n-impl<T: Ord> &MergeState<T> {\n-    fn binarysort(array: &[mut T], start: uint) {\n+impl<T: Ord> MergeState<T> {\n+    fn binarysort(&self, array: &[mut T], start: uint) {\n         let size = array.len();\n         let mut start = start;\n         assert start <= size;\n@@ -434,12 +434,12 @@ impl<T: Ord> &MergeState<T> {\n         self.last_bsort = false;\n     }\n \n-    fn push_run(run_base: uint, run_len: uint) {\n+    fn push_run(&self, run_base: uint, run_len: uint) {\n         let tmp = RunState{base: run_base, len: run_len};\n         self.runs.push(tmp);\n     }\n \n-    fn merge_at(n: uint, array: &[mut T]) {\n+    fn merge_at(&self, n: uint, array: &[mut T]) {\n         let mut size = self.runs.len();\n         assert size >= 2;\n         assert n == size-2 || n == size-3;\n@@ -483,7 +483,7 @@ impl<T: Ord> &MergeState<T> {\n         self.mergePt = 0;\n     }\n \n-    fn merge_lo(array: &[mut T], base1: uint, len1: uint,\n+    fn merge_lo(&self, array: &[mut T], base1: uint, len1: uint,\n                 base2: uint, len2: uint) {\n         assert len1 != 0 && len2 != 0 && base1+len1 == base2;\n \n@@ -619,7 +619,7 @@ impl<T: Ord> &MergeState<T> {\n         unsafe { vec::raw::set_len(&mut self.tmp, 0); }\n     }\n \n-    fn merge_hi(array: &[mut T], base1: uint, len1: uint,\n+    fn merge_hi(&self, array: &[mut T], base1: uint, len1: uint,\n                 base2: uint, len2: uint) {\n         assert len1 != 1 && len2 != 0 && base1 + len1 == base2;\n \n@@ -762,7 +762,7 @@ impl<T: Ord> &MergeState<T> {\n         unsafe { vec::raw::set_len(&mut self.tmp, 0); }\n     }\n \n-    fn merge_collapse(array: &[mut T]) {\n+    fn merge_collapse(&self, array: &[mut T]) {\n         while self.runs.len() > 1 {\n             let mut n = self.runs.len()-2;\n             let chk = do self.runs.borrow |arr| {\n@@ -780,7 +780,7 @@ impl<T: Ord> &MergeState<T> {\n         }\n     }\n \n-    fn merge_force_collapse(array: &[mut T]) {\n+    fn merge_force_collapse(&self, array: &[mut T]) {\n         while self.runs.len() > 1 {\n             let mut n = self.runs.len()-2;\n             if n > 0 {"}]}