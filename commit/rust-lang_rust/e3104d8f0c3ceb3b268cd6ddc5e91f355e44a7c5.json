{"sha": "e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMTA0ZDhmMGMzY2ViM2IyNjhjZDZkZGM1ZTkxZjM1NWU0NGE3YzU=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-02-21T11:28:28Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-02-21T14:27:55Z"}, "message": "Kill fmt::Show and fmt::String with fire!\n\nToss the tomatoes!", "tree": {"sha": "e65a99a9cf734503c69bdcdc4689715f381e1801", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e65a99a9cf734503c69bdcdc4689715f381e1801"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "html_url": "https://github.com/rust-lang/rust/commit/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "html_url": "https://github.com/rust-lang/rust/commit/522d09dfecbeca1595f25ac58c6d0178bbd21d7d"}], "stats": {"total": 71, "additions": 19, "deletions": 52}, "files": [{"sha": "98673af3c68a84ab3b6e7b3a9cea8094ec8d2796", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "patch": "@@ -404,7 +404,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n pub use core::fmt::{Formatter, Result, Write, rt};\n-pub use core::fmt::{Show, String, Octal, Binary};\n+pub use core::fmt::{Octal, Binary};\n pub use core::fmt::{Display, Debug};\n pub use core::fmt::{LowerHex, UpperHex, Pointer};\n pub use core::fmt::{LowerExp, UpperExp};"}, {"sha": "b2fdd95e60eb80f544203d09aba21c5f2268c89a", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "patch": "@@ -246,16 +246,6 @@ impl<'a> Display for Arguments<'a> {\n     }\n }\n \n-/// Format trait for the `:?` format. Useful for debugging, all types\n-/// should implement this.\n-#[deprecated(since = \"1.0.0\", reason = \"renamed to Debug\")]\n-#[unstable(feature = \"old_fmt\")]\n-pub trait Show {\n-    /// Formats the value using the given formatter.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n-}\n-\n /// Format trait for the `:?` format. Useful for debugging, all types\n /// should implement this.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -269,22 +259,6 @@ pub trait Debug {\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-#[allow(deprecated)]\n-impl<T: Show + ?Sized> Debug for T {\n-    #[allow(deprecated)]\n-    fn fmt(&self, f: &mut Formatter) -> Result { Show::fmt(self, f) }\n-}\n-\n-/// When a value can be semantically expressed as a String, this trait may be\n-/// used. It corresponds to the default format, `{}`.\n-#[deprecated(since = \"1.0.0\", reason = \"renamed to Display\")]\n-#[unstable(feature = \"old_fmt\")]\n-pub trait String {\n-    /// Formats the value using the given formatter.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n-}\n-\n /// When a value can be semantically expressed as a String, this trait may be\n /// used. It corresponds to the default format, `{}`.\n #[rustc_on_unimplemented = \"`{Self}` cannot be formatted with the default \\\n@@ -297,12 +271,6 @@ pub trait Display {\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-#[allow(deprecated)]\n-impl<T: String + ?Sized> Display for T {\n-    #[allow(deprecated)]\n-    fn fmt(&self, f: &mut Formatter) -> Result { String::fmt(self, f) }\n-}\n-\n /// Format trait for the `o` character\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Octal {"}, {"sha": "96a06968c5fa3cc961496cba8a20ee33163eddc7", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "patch": "@@ -17,7 +17,7 @@ pub mod kitty {\n       pub name : String,\n     }\n \n-    impl fmt::String for cat {\n+    impl fmt::Display for cat {\n         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n             write!(f, \"{}\", self.name)\n         }"}, {"sha": "98a9c713e84c331c9d305a63ff0ffa0cb79cec4f", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-blanket-implemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs?ref=e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fmt::Show;\n+use std::fmt::Debug;\n use std::default::Default;\n use std::marker::MarkerTrait;\n "}, {"sha": "57d25a3bf586dcab40fe8df4857095ca8db25ed7", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-blanket-unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs?ref=e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fmt::Show;\n+use std::fmt::Debug;\n use std::default::Default;\n \n // Test that two blanket impls conflict (at least without negative"}, {"sha": "b3ef79c6cc01e98474df89b02339b3406df1f5fa", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-specific-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs?ref=e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "patch": "@@ -13,7 +13,7 @@\n extern crate go_trait;\n \n use go_trait::{Go,GoMut};\n-use std::fmt::Show;\n+use std::fmt::Debug;\n use std::default::Default;\n \n struct MyThingy;"}, {"sha": "7b60a5ecbd71f4ac8533599cfb20cb73c4b42a71", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-specific-multidispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs?ref=e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fmt::Show;\n+use std::fmt::Debug;\n use std::default::Default;\n \n // Test that a blank impl for all T conflicts with an impl for some"}, {"sha": "d218b64af05270f0dec430b4b1001d410edfd0e9", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-specific.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific.rs?ref=e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fmt::Show;\n+use std::fmt::Debug;\n use std::default::Default;\n \n // Test that a blank impl for all T conflicts with an impl for some"}, {"sha": "87b007fdd698239d3af23c2558975c29ad994eb2", "filename": "src/test/compile-fail/coherence-tuple-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fcoherence-tuple-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fcoherence-tuple-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-tuple-conflict.rs?ref=e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fmt::Show;\n+use std::fmt::Debug;\n use std::default::Default;\n \n // Test that a blank impl for all T conflicts with an impl for some"}, {"sha": "9f76f360f26ba7db9cf81f7def9321c8110111ad", "filename": "src/test/compile-fail/issue-17441.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs?ref=e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "patch": "@@ -14,11 +14,11 @@ fn main() {\n     let _foo = &[1_usize, 2] as [usize];\n     //~^ ERROR cast to unsized type: `&[usize; 2]` as `[usize]`\n     //~^^ HELP consider using an implicit coercion to `&[usize]` instead\n-    let _bar = box 1_usize as std::fmt::Show;\n-    //~^ ERROR cast to unsized type: `Box<usize>` as `core::fmt::Show`\n-    //~^^ HELP did you mean `Box<core::fmt::Show>`?\n-    let _baz = 1_usize as std::fmt::Show;\n-    //~^ ERROR cast to unsized type: `usize` as `core::fmt::Show`\n+    let _bar = box 1_usize as std::fmt::Debug;\n+    //~^ ERROR cast to unsized type: `Box<usize>` as `core::fmt::Debug`\n+    //~^^ HELP did you mean `Box<core::fmt::Debug>`?\n+    let _baz = 1_usize as std::fmt::Debug;\n+    //~^ ERROR cast to unsized type: `usize` as `core::fmt::Debug`\n     //~^^ HELP consider using a box or reference as appropriate\n     let _quux = [1_usize, 2] as [usize];\n     //~^ ERROR cast to unsized type: `[usize; 2]` as `[usize]`"}, {"sha": "1998f8ab15529e5cc110fcd28462a8e6ab0d4b74", "filename": "src/test/compile-fail/use-after-move-implicity-coerced-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs?ref=e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "patch": "@@ -18,7 +18,7 @@ struct Number {\n     n: i64\n }\n \n-impl fmt::String for Number {\n+impl fmt::Display for Number {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", self.n)\n     }"}, {"sha": "8febbf8309ea78cb046705b4c04ad9d3c7d5b0be", "filename": "src/test/parse-fail/trailing-plus-in-bounds.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fparse-fail%2Ftrailing-plus-in-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Fparse-fail%2Ftrailing-plus-in-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftrailing-plus-in-bounds.rs?ref=e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fmt::Show;\n+use std::fmt::Debug;\n \n fn main() {\n-    let x: Box<Show+> = box 3 as Box<Show+>;\n+    let x: Box<Debug+> = box 3 as Box<Debug+>;\n     //~^ ERROR at least one type parameter bound must be specified\n     //~^^ ERROR at least one type parameter bound must be specified\n }\n-"}, {"sha": "daff321efcfd9d39299fb7c03e35b30934635d8c", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "patch": "@@ -54,7 +54,7 @@ fn cat(in_x : uint, in_y : int, in_name: String) -> cat {\n     }\n }\n \n-impl fmt::String for cat {\n+impl fmt::Display for cat {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", self.name)\n     }"}, {"sha": "b16b033c22fccafc6854593e9f4cbb553a63cb98", "filename": "src/test/run-pass/coherence-multidispatch-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Frun-pass%2Fcoherence-multidispatch-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Frun-pass%2Fcoherence-multidispatch-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-multidispatch-tuple.rs?ref=e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fmt::Show;\n+use std::fmt::Debug;\n use std::default::Default;\n \n // Test that an impl for homogeneous pairs does not conflict with a"}, {"sha": "be4d475229591bc7c5b178dc6f2b5c2eef25c53e", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=e3104d8f0c3ceb3b268cd6ddc5e91f355e44a7c5", "patch": "@@ -101,7 +101,7 @@ impl AsciiArt {\n \n // Allows AsciiArt to be converted to a string using the libcore ToString trait.\n // Note that the %s fmt! specifier will not call this automatically.\n-impl fmt::String for AsciiArt {\n+impl fmt::Display for AsciiArt {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         // Convert each line into a string.\n         let lines = self.lines.iter()"}]}