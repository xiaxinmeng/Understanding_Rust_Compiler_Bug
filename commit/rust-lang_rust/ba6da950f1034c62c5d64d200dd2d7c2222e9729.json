{"sha": "ba6da950f1034c62c5d64d200dd2d7c2222e9729", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNmRhOTUwZjEwMzRjNjJjNWQ2NGQyMDBkZDJkN2MyMjIyZTk3Mjk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-12T04:51:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-14T22:32:21Z"}, "message": "restore old functionality for now", "tree": {"sha": "6f093fa8411ec99673bc1a3e3b59f8aa89d88eb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f093fa8411ec99673bc1a3e3b59f8aa89d88eb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba6da950f1034c62c5d64d200dd2d7c2222e9729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6da950f1034c62c5d64d200dd2d7c2222e9729", "html_url": "https://github.com/rust-lang/rust/commit/ba6da950f1034c62c5d64d200dd2d7c2222e9729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba6da950f1034c62c5d64d200dd2d7c2222e9729/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a8cb704d9c2543cb30df2e26b992c17e3bc488d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a8cb704d9c2543cb30df2e26b992c17e3bc488d", "html_url": "https://github.com/rust-lang/rust/commit/6a8cb704d9c2543cb30df2e26b992c17e3bc488d"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "1bf9533f0803cd9074a5409dc0ffc44175d7195a", "filename": "src/comp/middle/fn_usage.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ba6da950f1034c62c5d64d200dd2d7c2222e9729/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6da950f1034c62c5d64d200dd2d7c2222e9729/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffn_usage.rs?ref=ba6da950f1034c62c5d64d200dd2d7c2222e9729", "patch": "@@ -7,7 +7,8 @@ export check_crate_fn_usage;\n \n type fn_usage_ctx = {\n     tcx: ty::ctxt,\n-    unsafe_fn_legal: bool\n+    unsafe_fn_legal: bool,\n+    generic_bare_fn_legal: bool\n };\n \n fn fn_usage_expr(expr: @ast::expr,\n@@ -28,28 +29,44 @@ fn fn_usage_expr(expr: @ast::expr,\n               _ {}\n             }\n         }\n+        if !ctx.generic_bare_fn_legal\n+            && ty::expr_has_ty_params(ctx.tcx, expr) {\n+            alt ty::struct(ctx.tcx, ty::expr_ty(ctx.tcx, expr)) {\n+              ty::ty_fn(ast::proto_bare., _, _, _, _) {\n+                ctx.tcx.sess.span_fatal(\n+                    expr.span,\n+                    \"generic bare functions can only be called or bound\");\n+              }\n+              _ { }\n+            }\n+        }\n       }\n \n       ast::expr_call(f, args, _) {\n-        let f_ctx = {unsafe_fn_legal: true with ctx};\n+        let f_ctx = {unsafe_fn_legal: true,\n+                     generic_bare_fn_legal: true with ctx};\n         v.visit_expr(f, f_ctx, v);\n \n-        let args_ctx = {unsafe_fn_legal: false with ctx};\n+        let args_ctx = {unsafe_fn_legal: false,\n+                        generic_bare_fn_legal: false with ctx};\n         visit::visit_exprs(args, args_ctx, v);\n       }\n \n       ast::expr_bind(f, args) {\n-        let f_ctx = {unsafe_fn_legal: false with ctx};\n+        let f_ctx = {unsafe_fn_legal: false,\n+                     generic_bare_fn_legal: true with ctx};\n         v.visit_expr(f, f_ctx, v);\n \n-        let args_ctx = {unsafe_fn_legal: false with ctx};\n+        let args_ctx = {unsafe_fn_legal: false,\n+                        generic_bare_fn_legal: false with ctx};\n         for arg in args {\n             visit::visit_expr_opt(arg, args_ctx, v);\n         }\n       }\n \n       _ {\n-        let subctx = {unsafe_fn_legal: false with ctx};\n+        let subctx = {unsafe_fn_legal: false,\n+                      generic_bare_fn_legal: false with ctx};\n         visit::visit_expr(expr, subctx, v);\n       }\n     }\n@@ -62,7 +79,8 @@ fn check_crate_fn_usage(tcx: ty::ctxt, crate: @ast::crate) {\n                   with *visit::default_visitor()});\n     let ctx = {\n         tcx: tcx,\n-        unsafe_fn_legal: false\n+        unsafe_fn_legal: false,\n+        generic_bare_fn_legal: false\n     };\n     visit::visit_crate(*crate, ctx, visit);\n }"}]}