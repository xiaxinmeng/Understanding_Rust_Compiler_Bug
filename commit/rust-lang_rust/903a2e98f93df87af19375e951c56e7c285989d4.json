{"sha": "903a2e98f93df87af19375e951c56e7c285989d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwM2EyZTk4ZjkzZGY4N2FmMTkzNzVlOTUxYzU2ZTdjMjg1OTg5ZDQ=", "commit": {"author": {"name": "Brandon", "email": "brandondong604@hotmail.com", "date": "2021-03-24T07:47:55Z"}, "committer": {"name": "Brandon", "email": "brandondong604@hotmail.com", "date": "2021-03-24T07:47:55Z"}, "message": "Clean up implementation", "tree": {"sha": "ffa9471abcf322034a52b6a952d44b3d93a525fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffa9471abcf322034a52b6a952d44b3d93a525fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/903a2e98f93df87af19375e951c56e7c285989d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/903a2e98f93df87af19375e951c56e7c285989d4", "html_url": "https://github.com/rust-lang/rust/commit/903a2e98f93df87af19375e951c56e7c285989d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/903a2e98f93df87af19375e951c56e7c285989d4/comments", "author": {"login": "brandondong", "id": 13722457, "node_id": "MDQ6VXNlcjEzNzIyNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/13722457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandondong", "html_url": "https://github.com/brandondong", "followers_url": "https://api.github.com/users/brandondong/followers", "following_url": "https://api.github.com/users/brandondong/following{/other_user}", "gists_url": "https://api.github.com/users/brandondong/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandondong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandondong/subscriptions", "organizations_url": "https://api.github.com/users/brandondong/orgs", "repos_url": "https://api.github.com/users/brandondong/repos", "events_url": "https://api.github.com/users/brandondong/events{/privacy}", "received_events_url": "https://api.github.com/users/brandondong/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brandondong", "id": 13722457, "node_id": "MDQ6VXNlcjEzNzIyNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/13722457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandondong", "html_url": "https://github.com/brandondong", "followers_url": "https://api.github.com/users/brandondong/followers", "following_url": "https://api.github.com/users/brandondong/following{/other_user}", "gists_url": "https://api.github.com/users/brandondong/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandondong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandondong/subscriptions", "organizations_url": "https://api.github.com/users/brandondong/orgs", "repos_url": "https://api.github.com/users/brandondong/repos", "events_url": "https://api.github.com/users/brandondong/events{/privacy}", "received_events_url": "https://api.github.com/users/brandondong/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d063b8d212dd6c54da0aa8608154c980107bd07", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d063b8d212dd6c54da0aa8608154c980107bd07", "html_url": "https://github.com/rust-lang/rust/commit/0d063b8d212dd6c54da0aa8608154c980107bd07"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "b8045fda95cb53016c7b4a16ec6b0fcb27a048b4", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/903a2e98f93df87af19375e951c56e7c285989d4/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903a2e98f93df87af19375e951c56e7c285989d4/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=903a2e98f93df87af19375e951c56e7c285989d4", "patch": "@@ -207,13 +207,6 @@ impl HirFileId {\n         }\n         false\n     }\n-\n-    pub fn is_macro_file(&self) -> bool {\n-        match self.0 {\n-            HirFileIdRepr::MacroFile(_) => true,\n-            HirFileIdRepr::FileId(_) => false,\n-        }\n-    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "64bc926f1c612b2ea53d612d4e827a0578e4a853", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/903a2e98f93df87af19375e951c56e7c285989d4/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903a2e98f93df87af19375e951c56e7c285989d4/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=903a2e98f93df87af19375e951c56e7c285989d4", "patch": "@@ -80,19 +80,19 @@ pub(crate) fn annotations(\n         Either::Left(def) => {\n             let node = match def {\n                 hir::ModuleDef::Const(konst) => {\n-                    konst.source(db).and_then(|node| range_and_position_of(&node))\n+                    konst.source(db).and_then(|node| range_and_position_of(&node, file_id))\n                 }\n                 hir::ModuleDef::Trait(trait_) => {\n-                    trait_.source(db).and_then(|node| range_and_position_of(&node))\n+                    trait_.source(db).and_then(|node| range_and_position_of(&node, file_id))\n                 }\n                 hir::ModuleDef::Adt(hir::Adt::Struct(strukt)) => {\n-                    strukt.source(db).and_then(|node| range_and_position_of(&node))\n+                    strukt.source(db).and_then(|node| range_and_position_of(&node, file_id))\n                 }\n                 hir::ModuleDef::Adt(hir::Adt::Enum(enum_)) => {\n-                    enum_.source(db).and_then(|node| range_and_position_of(&node))\n+                    enum_.source(db).and_then(|node| range_and_position_of(&node, file_id))\n                 }\n                 hir::ModuleDef::Adt(hir::Adt::Union(union)) => {\n-                    union.source(db).and_then(|node| range_and_position_of(&node))\n+                    union.source(db).and_then(|node| range_and_position_of(&node, file_id))\n                 }\n                 _ => None,\n             };\n@@ -122,9 +122,10 @@ pub(crate) fn annotations(\n \n             fn range_and_position_of<T: NameOwner>(\n                 node: &InFile<T>,\n+                file_id: FileId,\n             ) -> Option<(TextSize, TextRange)> {\n-                if node.file_id.is_macro_file() {\n-                    // Macro generated files should not contain annotations.\n+                if node.file_id != file_id.into() {\n+                    // Node is outside the file we are adding annotations to (e.g. macros).\n                     None\n                 } else {\n                     Some(("}]}