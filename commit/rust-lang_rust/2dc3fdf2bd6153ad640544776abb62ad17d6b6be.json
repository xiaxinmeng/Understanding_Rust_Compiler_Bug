{"sha": "2dc3fdf2bd6153ad640544776abb62ad17d6b6be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYzNmZGYyYmQ2MTUzYWQ2NDA1NDQ3NzZhYmI2MmFkMTdkNmI2YmU=", "commit": {"author": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2016-11-27T15:45:09Z"}, "committer": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2016-11-27T15:45:09Z"}, "message": "Resolve visibility issues\n\nuse syntax::ast::Name; is a reexport of syntax::symbol::Symbol(u32);", "tree": {"sha": "01952774329ee990c6351c38bfddc43e85f6d684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01952774329ee990c6351c38bfddc43e85f6d684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dc3fdf2bd6153ad640544776abb62ad17d6b6be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc3fdf2bd6153ad640544776abb62ad17d6b6be", "html_url": "https://github.com/rust-lang/rust/commit/2dc3fdf2bd6153ad640544776abb62ad17d6b6be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dc3fdf2bd6153ad640544776abb62ad17d6b6be/comments", "author": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bcb05cf50624fc54162823f998df40658e158b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bcb05cf50624fc54162823f998df40658e158b1", "html_url": "https://github.com/rust-lang/rust/commit/0bcb05cf50624fc54162823f998df40658e158b1"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "1903c9125e41b1294e672f8331ddc2895d14922e", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2dc3fdf2bd6153ad640544776abb62ad17d6b6be/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc3fdf2bd6153ad640544776abb62ad17d6b6be/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=2dc3fdf2bd6153ad640544776abb62ad17d6b6be", "patch": "@@ -23,15 +23,13 @@ use std::fs::File;\n use std::io::{BufRead, Read};\n use std::path::Path;\n \n-use syntax::parse;\n use syntax::parse::lexer;\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config};\n use rustc::middle::cstore::DummyCrateStore;\n \n use std::rc::Rc;\n use syntax::ast;\n-use syntax::ast::Name;\n use syntax::codemap;\n use syntax::parse::token::{self, BinOpToken, DelimToken, Lit, Token};\n use syntax::parse::lexer::TokenAndSpan;\n@@ -41,7 +39,7 @@ use syntax::symbol::Symbol;\n \n fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n     fn id() -> token::Token {\n-        Token::Ident(ast::Ident::with_empty_ctxt(Name(0)))\n+        Token::Ident(ast::Ident::with_empty_ctxt(Symbol::invalid()))\n     }\n \n     let mut res = HashMap::new();\n@@ -67,7 +65,7 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"SHL\"               => Token::BinOp(BinOpToken::Shl),\n             \"LBRACE\"            => Token::OpenDelim(DelimToken::Brace),\n             \"RARROW\"            => Token::RArrow,\n-            \"LIT_STR\"           => Token::Literal(Lit::Str_(Name(0)), None),\n+            \"LIT_STR\"           => Token::Literal(Lit::Str_(Symbol::invalid()), None),\n             \"DOTDOT\"            => Token::DotDot,\n             \"MOD_SEP\"           => Token::ModSep,\n             \"DOTDOTDOT\"         => Token::DotDotDot,\n@@ -77,21 +75,21 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"ANDAND\"            => Token::AndAnd,\n             \"AT\"                => Token::At,\n             \"LBRACKET\"          => Token::OpenDelim(DelimToken::Bracket),\n-            \"LIT_STR_RAW\"       => Token::Literal(Lit::StrRaw(Name(0), 0), None),\n+            \"LIT_STR_RAW\"       => Token::Literal(Lit::StrRaw(Symbol::invalid(), 0), None),\n             \"RPAREN\"            => Token::CloseDelim(DelimToken::Paren),\n             \"SLASH\"             => Token::BinOp(BinOpToken::Slash),\n             \"COMMA\"             => Token::Comma,\n-            \"LIFETIME\"          => Token::Lifetime(ast::Ident::with_empty_ctxt(Name(0))),\n+            \"LIFETIME\"          => Token::Lifetime(ast::Ident::with_empty_ctxt(Symbol::invalid())),\n             \"CARET\"             => Token::BinOp(BinOpToken::Caret),\n             \"TILDE\"             => Token::Tilde,\n             \"IDENT\"             => id(),\n             \"PLUS\"              => Token::BinOp(BinOpToken::Plus),\n-            \"LIT_CHAR\"          => Token::Literal(Lit::Char(Name(0)), None),\n-            \"LIT_BYTE\"          => Token::Literal(Lit::Byte(Name(0)), None),\n+            \"LIT_CHAR\"          => Token::Literal(Lit::Char(Symbol::invalid()), None),\n+            \"LIT_BYTE\"          => Token::Literal(Lit::Byte(Symbol::invalid()), None),\n             \"EQ\"                => Token::Eq,\n             \"RBRACKET\"          => Token::CloseDelim(DelimToken::Bracket),\n             \"COMMENT\"           => Token::Comment,\n-            \"DOC_COMMENT\"       => Token::DocComment(Name(0)),\n+            \"DOC_COMMENT\"       => Token::DocComment(Symbol::invalid()),\n             \"DOT\"               => Token::Dot,\n             \"EQEQ\"              => Token::EqEq,\n             \"NE\"                => Token::Ne,\n@@ -101,9 +99,9 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"BINOP\"             => Token::BinOp(BinOpToken::Plus),\n             \"POUND\"             => Token::Pound,\n             \"OROR\"              => Token::OrOr,\n-            \"LIT_INTEGER\"       => Token::Literal(Lit::Integer(Name(0)), None),\n+            \"LIT_INTEGER\"       => Token::Literal(Lit::Integer(Symbol::invalid()), None),\n             \"BINOPEQ\"           => Token::BinOpEq(BinOpToken::Plus),\n-            \"LIT_FLOAT\"         => Token::Literal(Lit::Float(Name(0)), None),\n+            \"LIT_FLOAT\"         => Token::Literal(Lit::Float(Symbol::invalid()), None),\n             \"WHITESPACE\"        => Token::Whitespace,\n             \"UNDERSCORE\"        => Token::Underscore,\n             \"MINUS\"             => Token::BinOp(BinOpToken::Minus),\n@@ -113,10 +111,10 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"OR\"                => Token::BinOp(BinOpToken::Or),\n             \"GT\"                => Token::Gt,\n             \"LE\"                => Token::Le,\n-            \"LIT_BINARY\"        => Token::Literal(Lit::ByteStr(Name(0)), None),\n-            \"LIT_BINARY_RAW\"    => Token::Literal(Lit::ByteStrRaw(Name(0), 0), None),\n+            \"LIT_BINARY\"        => Token::Literal(Lit::ByteStr(Symbol::invalid()), None),\n+            \"LIT_BINARY_RAW\"    => Token::Literal(Lit::ByteStrRaw(Symbol::invalid(), 0), None),\n             \"QUESTION\"          => Token::Question,\n-            \"SHEBANG\"           => Token::Shebang(Name(0)),\n+            \"SHEBANG\"           => Token::Shebang(Symbol::invalid()),\n             _                   => continue,\n         };\n "}, {"sha": "e2dcc2409328d318ffb81449dfbbdb3f5ab223d3", "filename": "src/libsyntax/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dc3fdf2bd6153ad640544776abb62ad17d6b6be/src%2Flibsyntax%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc3fdf2bd6153ad640544776abb62ad17d6b6be/src%2Flibsyntax%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsymbol.rs?ref=2dc3fdf2bd6153ad640544776abb62ad17d6b6be", "patch": "@@ -35,6 +35,10 @@ impl Symbol {\n         with_interner(|interner| interner.gensym(string))\n     }\n \n+    pub fn invalid() -> Self {\n+        Symbol(0u32)\n+    }\n+\n     pub fn as_str(self) -> InternedString {\n         with_interner(|interner| unsafe {\n             InternedString {"}]}