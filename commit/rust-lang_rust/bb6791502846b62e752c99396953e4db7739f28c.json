{"sha": "bb6791502846b62e752c99396953e4db7739f28c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNjc5MTUwMjg0NmI2MmU3NTJjOTkzOTY5NTNlNGRiNzczOWYyOGM=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-13T21:43:21Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-27T18:37:57Z"}, "message": "Apply suggestions from code review", "tree": {"sha": "9c9aeb2537e8d2fe83feb2ffca61a896fb677c2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c9aeb2537e8d2fe83feb2ffca61a896fb677c2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb6791502846b62e752c99396953e4db7739f28c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6791502846b62e752c99396953e4db7739f28c", "html_url": "https://github.com/rust-lang/rust/commit/bb6791502846b62e752c99396953e4db7739f28c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb6791502846b62e752c99396953e4db7739f28c/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "594c499db995abaacc10a74c0afbb9aeed48117d", "url": "https://api.github.com/repos/rust-lang/rust/commits/594c499db995abaacc10a74c0afbb9aeed48117d", "html_url": "https://github.com/rust-lang/rust/commit/594c499db995abaacc10a74c0afbb9aeed48117d"}], "stats": {"total": 175, "additions": 125, "deletions": 50}, "files": [{"sha": "70694720154028c4f9717e360e34840d98fdf92d", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bb6791502846b62e752c99396953e4db7739f28c/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6791502846b62e752c99396953e4db7739f28c/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=bb6791502846b62e752c99396953e4db7739f28c", "patch": "@@ -17,8 +17,8 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::{builtin, Level, Lint};\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n-use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::{source_map::MultiSpan, Span, DUMMY_SP};\n \n use std::cmp;\n \n@@ -80,6 +80,8 @@ impl<'s> LintLevelsBuilder<'s> {\n             let level = cmp::min(level, self.sets.lint_cap);\n \n             let lint_flag_val = Symbol::intern(lint_name);\n+            self.check_gated_lint(lint_flag_val, DUMMY_SP);\n+\n             let ids = match store.find_lints(&lint_name) {\n                 Ok(ids) => ids,\n                 Err(_) => continue, // errors handled in check_lint_name_cmdline above\n@@ -211,6 +213,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                 let name = meta_item.path.segments.last().expect(\"empty lint name\").ident.name;\n                 match store.check_lint_name(&name.as_str(), tool_name) {\n                     CheckLintNameResult::Ok(ids) => {\n+                        self.check_gated_lint(name, attr.span);\n                         let src = LintSource::Node(name, li.span(), reason);\n                         for id in ids {\n                             specs.insert(*id, (level, src));\n@@ -383,6 +386,20 @@ impl<'s> LintLevelsBuilder<'s> {\n         BuilderPush { prev, changed: prev != self.cur }\n     }\n \n+    fn check_gated_lint(&self, name: Symbol, span: Span) {\n+        if name.as_str() == \"unsafe_op_in_unsafe_fn\"\n+            && !self.sess.features_untracked().unsafe_block_in_unsafe_fn\n+        {\n+            feature_err(\n+                &self.sess.parse_sess,\n+                sym::unsafe_block_in_unsafe_fn,\n+                span,\n+                \"the `unsafe_op_in_unsafe_fn` lint is unstable\",\n+            )\n+            .emit();\n+        }\n+    }\n+\n     /// Called after `push` when the scope of a set of attributes are exited.\n     pub fn pop(&mut self, push: BuilderPush) {\n         self.cur = push.prev;"}, {"sha": "c63d7215867c2a82fef6a998c639ea3e4501fcbd", "filename": "src/librustc_middle/mir/query.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb6791502846b62e752c99396953e4db7739f28c/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6791502846b62e752c99396953e4db7739f28c/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fquery.rs?ref=bb6791502846b62e752c99396953e4db7739f28c", "patch": "@@ -21,16 +21,17 @@ pub enum UnsafetyViolationKind {\n     GeneralAndConstFn,\n     /// Borrow of packed field.\n     /// Has to be handled as a lint for backwards compatibility.\n-    BorrowPacked(hir::HirId),\n+    BorrowPacked,\n     /// Unsafe operation in an `unsafe fn` but outside an `unsafe` block.\n     /// Has to be handled as a lint for backwards compatibility.\n     /// Should stay gated under `#![feature(unsafe_block_in_unsafe_fn)]`.\n-    UnsafeFn(hir::HirId),\n+    UnsafeFn,\n }\n \n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n pub struct UnsafetyViolation {\n     pub source_info: SourceInfo,\n+    pub lint_root: hir::HirId,\n     pub description: Symbol,\n     pub details: Symbol,\n     pub kind: UnsafetyViolationKind,"}, {"sha": "0434f3447bced068d4491a02477331a629a80168", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 44, "deletions": 23, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/bb6791502846b62e752c99396953e4db7739f28c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6791502846b62e752c99396953e4db7739f28c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=bb6791502846b62e752c99396953e4db7739f28c", "patch": "@@ -2,6 +2,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::hir_id::HirId;\n use rustc_hir::intravisit;\n use rustc_hir::Node;\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n@@ -10,6 +11,7 @@ use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::{SAFE_PACKED_BORROWS, UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n+use rustc_session::lint::Level;\n use rustc_span::symbol::{sym, Symbol};\n \n use std::ops::Bound;\n@@ -220,7 +222,18 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n \n         for (i, elem) in place.projection.iter().enumerate() {\n             let proj_base = &place.projection[..i];\n-            let old_source_info = self.source_info;\n+            if context.is_borrow() {\n+                if util::is_disaligned(self.tcx, self.body, self.param_env, *place) {\n+                    self.require_unsafe(\n+                        \"borrow of packed field\",\n+                        \"fields of packed structs might be misaligned: dereferencing a \\\n+                        misaligned pointer or even just creating a misaligned reference \\\n+                        is undefined behavior\",\n+                        UnsafetyViolationKind::BorrowPacked,\n+                    );\n+                }\n+            }\n+            let source_info = self.source_info;\n             if let [] = proj_base {\n                 let decl = &self.body.local_decls[place.local];\n                 if decl.internal {\n@@ -301,7 +314,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 }\n                 _ => {}\n             }\n-            self.source_info = old_source_info;\n+            self.source_info = source_info;\n         }\n     }\n }\n@@ -314,9 +327,15 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         kind: UnsafetyViolationKind,\n     ) {\n         let source_info = self.source_info;\n+        let lint_root = self.body.source_scopes[self.source_info.scope]\n+            .local_data\n+            .as_ref()\n+            .assert_crate_local()\n+            .lint_root;\n         self.register_violations(\n             &[UnsafetyViolation {\n                 source_info,\n+                lint_root,\n                 description: Symbol::intern(description),\n                 details: Symbol::intern(details),\n                 kind,\n@@ -343,15 +362,15 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                     match violation.kind {\n                         UnsafetyViolationKind::GeneralAndConstFn\n                         | UnsafetyViolationKind::General => {}\n-                        UnsafetyViolationKind::BorrowPacked(_) => {\n+                        UnsafetyViolationKind::BorrowPacked => {\n                             if self.min_const_fn {\n                                 // const fns don't need to be backwards compatible and can\n                                 // emit these violations as a hard error instead of a backwards\n                                 // compat lint\n                                 violation.kind = UnsafetyViolationKind::General;\n                             }\n                         }\n-                        UnsafetyViolationKind::UnsafeFn(_) => {\n+                        UnsafetyViolationKind::UnsafeFn => {\n                             bug!(\"`UnsafetyViolationKind::UnsafeFn` in an `Safe` context\")\n                         }\n                     }\n@@ -365,14 +384,9 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             Safety::FnUnsafe if self.tcx.features().unsafe_block_in_unsafe_fn => {\n                 for violation in violations {\n                     let mut violation = *violation;\n-                    let lint_root = self.body.source_scopes[self.source_info.scope]\n-                        .local_data\n-                        .as_ref()\n-                        .assert_crate_local()\n-                        .lint_root;\n \n                     // FIXME(LeSeulArtichaut): what to do with `UnsafetyViolationKind::BorrowPacked`?\n-                    violation.kind = UnsafetyViolationKind::UnsafeFn(lint_root);\n+                    violation.kind = UnsafetyViolationKind::UnsafeFn;\n                     if !self.violations.contains(&violation) {\n                         self.violations.push(violation)\n                     }\n@@ -394,7 +408,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                             UnsafetyViolationKind::GeneralAndConstFn => {}\n                             // these things are forbidden in const fns\n                             UnsafetyViolationKind::General\n-                            | UnsafetyViolationKind::BorrowPacked(_) => {\n+                            | UnsafetyViolationKind::BorrowPacked => {\n                                 let mut violation = *violation;\n                                 // const fns don't need to be backwards compatible and can\n                                 // emit these violations as a hard error instead of a backwards\n@@ -404,7 +418,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                                     self.violations.push(violation)\n                                 }\n                             }\n-                            UnsafetyViolationKind::UnsafeFn(_) => bug!(\n+                            UnsafetyViolationKind::UnsafeFn => bug!(\n                                 \"`UnsafetyViolationKind::UnsafeFn` in an `ExplicitUnsafe` context\"\n                             ),\n                         }\n@@ -657,47 +671,50 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n     let UnsafetyCheckResult { violations, unsafe_blocks } =\n         tcx.unsafety_check_result(def_id.expect_local());\n \n-    let or_block_msg = if tcx.features().unsafe_block_in_unsafe_fn { \"\" } else { \" or block\" };\n-\n-    for &UnsafetyViolation { source_info, description, details, kind } in violations.iter() {\n+    for &UnsafetyViolation { source_info, lint_root, description, details, kind } in\n+        violations.iter()\n+    {\n         // Report an error.\n+        let unsafe_fn_msg =\n+            if unsafe_op_in_unsafe_fn_allowed(tcx, lint_root) { \"\" } else { \" function or\" };\n+\n         match kind {\n             UnsafetyViolationKind::GeneralAndConstFn | UnsafetyViolationKind::General => {\n                 // once\n                 struct_span_err!(\n                     tcx.sess,\n                     source_info.span,\n                     E0133,\n-                    \"{} is unsafe and requires unsafe function{}\",\n+                    \"{} is unsafe and requires unsafe{} block\",\n                     description,\n-                    or_block_msg,\n+                    unsafe_fn_msg,\n                 )\n                 .span_label(source_info.span, &*description.as_str())\n                 .note(&details.as_str())\n                 .emit();\n             }\n-            UnsafetyViolationKind::BorrowPacked(lint_hir_id) => {\n+            UnsafetyViolationKind::BorrowPacked => {\n                 if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n                     tcx.ensure().unsafe_derive_on_repr_packed(impl_def_id);\n                 } else {\n                     tcx.struct_span_lint_hir(\n                         SAFE_PACKED_BORROWS,\n-                        lint_hir_id,\n+                        lint_root,\n                         source_info.span,\n                         |lint| {\n                             lint.build(&format!(\n-                                \"{} is unsafe and requires unsafe function{} (error E0133)\",\n-                                description, or_block_msg,\n+                                \"{} is unsafe and requires unsafe{} block (error E0133)\",\n+                                description, unsafe_fn_msg,\n                             ))\n                             .note(&details.as_str())\n                             .emit()\n                         },\n                     )\n                 }\n             }\n-            UnsafetyViolationKind::UnsafeFn(lint_hir_id) => tcx.struct_span_lint_hir(\n+            UnsafetyViolationKind::UnsafeFn => tcx.struct_span_lint_hir(\n                 UNSAFE_OP_IN_UNSAFE_FN,\n-                lint_hir_id,\n+                lint_root,\n                 source_info.span,\n                 |lint| {\n                     lint.build(&format!(\n@@ -728,3 +745,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n         report_unused_unsafe(tcx, &unsafe_used, block_id);\n     }\n }\n+\n+fn unsafe_op_in_unsafe_fn_allowed(tcx: TyCtxt<'_>, id: HirId) -> bool {\n+    tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, id).0 == Level::Allow\n+}"}, {"sha": "4e4f0dc74cb7ce0230b401f257185f6463b12af1", "filename": "src/librustc_mir_build/build/block.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb6791502846b62e752c99396953e4db7739f28c/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6791502846b62e752c99396953e4db7739f28c/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs?ref=bb6791502846b62e752c99396953e4db7739f28c", "patch": "@@ -4,6 +4,8 @@ use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use crate::hair::*;\n use rustc_hir as hir;\n use rustc_middle::mir::*;\n+use rustc_session::lint::builtin::UNSAFE_OP_IN_UNSAFE_FN;\n+use rustc_session::lint::Level;\n use rustc_span::Span;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n@@ -218,7 +220,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 match self.unpushed_unsafe {\n                     Safety::Safe => {}\n                     // no longer treat `unsafe fn`s as `unsafe` contexts (see RFC #2585)\n-                    Safety::FnUnsafe if self.hir.tcx().features().unsafe_block_in_unsafe_fn => {}\n+                    Safety::FnUnsafe\n+                        if self.hir.tcx().lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, hir_id).0\n+                            != Level::Allow => {}\n                     _ => return,\n                 }\n                 self.unpushed_unsafe = Safety::ExplicitUnsafe(hir_id);\n@@ -233,7 +237,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .push_unsafe_count\n                     .checked_sub(1)\n                     .unwrap_or_else(|| span_bug!(span, \"unsafe count underflow\"));\n-                if self.push_unsafe_count == 0 { Some(self.unpushed_unsafe) } else { None }\n+                if self.push_unsafe_count == 0 {\n+                    Some(self.unpushed_unsafe)\n+                } else {\n+                    None\n+                }\n             }\n         };\n "}, {"sha": "bf33ac67fcae909a552f9545eb7ac155914eb840", "filename": "src/test/ui/feature-gates/feature-gate-unsafe_block_in_unsafe_fn.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb6791502846b62e752c99396953e4db7739f28c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6791502846b62e752c99396953e4db7739f28c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.rs?ref=bb6791502846b62e752c99396953e4db7739f28c", "patch": "@@ -1,11 +1,4 @@\n-#![deny(unused_unsafe)]\n-\n-unsafe fn unsf() {}\n-\n-unsafe fn foo() {\n-    unsafe { //~ ERROR unnecessary `unsafe` block\n-        unsf()\n-    }\n-}\n+#![deny(unsafe_op_in_unsafe_fn)]\n+//~^ ERROR the `unsafe_op_in_unsafe_fn` lint is unstable\n \n fn main() {}"}, {"sha": "c5cad4a98d9ca29172af13b5a6a539831f1e010e", "filename": "src/test/ui/feature-gates/feature-gate-unsafe_block_in_unsafe_fn.stderr", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bb6791502846b62e752c99396953e4db7739f28c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6791502846b62e752c99396953e4db7739f28c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.stderr?ref=bb6791502846b62e752c99396953e4db7739f28c", "patch": "@@ -1,16 +1,30 @@\n-error: unnecessary `unsafe` block\n-  --> $DIR/feature-gate-unsafe_block_in_unsafe_fn.rs:6:5\n+error[E0658]: the `unsafe_op_in_unsafe_fn` lint is unstable\n+  --> $DIR/feature-gate-unsafe_block_in_unsafe_fn.rs:1:1\n    |\n-LL | unsafe fn foo() {\n-   | --------------- because it's nested under this `unsafe` fn\n-LL |     unsafe {\n-   |     ^^^^^^ unnecessary `unsafe` block\n+LL | #![deny(unsafe_op_in_unsafe_fn)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/feature-gate-unsafe_block_in_unsafe_fn.rs:1:9\n+   = note: see issue #71668 <https://github.com/rust-lang/rust/issues/71668> for more information\n+   = help: add `#![feature(unsafe_block_in_unsafe_fn)]` to the crate attributes to enable\n+\n+error[E0658]: the `unsafe_op_in_unsafe_fn` lint is unstable\n+  --> $DIR/feature-gate-unsafe_block_in_unsafe_fn.rs:1:1\n+   |\n+LL | #![deny(unsafe_op_in_unsafe_fn)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #71668 <https://github.com/rust-lang/rust/issues/71668> for more information\n+   = help: add `#![feature(unsafe_block_in_unsafe_fn)]` to the crate attributes to enable\n+\n+error[E0658]: the `unsafe_op_in_unsafe_fn` lint is unstable\n+  --> $DIR/feature-gate-unsafe_block_in_unsafe_fn.rs:1:1\n+   |\n+LL | #![deny(unsafe_op_in_unsafe_fn)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-LL | #![deny(unused_unsafe)]\n-   |         ^^^^^^^^^^^^^\n+   = note: see issue #71668 <https://github.com/rust-lang/rust/issues/71668> for more information\n+   = help: add `#![feature(unsafe_block_in_unsafe_fn)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "7feb68b98577f1e271ead2d54a16b3b4ee5ea853", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb6791502846b62e752c99396953e4db7739f28c/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6791502846b62e752c99396953e4db7739f28c/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs?ref=bb6791502846b62e752c99396953e4db7739f28c", "patch": "@@ -21,6 +21,12 @@ unsafe fn baz() {\n #[allow(unsafe_op_in_unsafe_fn)]\n unsafe fn qux() {\n     unsf(); // no error\n+\n+    unsafe { unsf() }\n+    //~^ ERROR unnecessary `unsafe` block\n }\n \n-fn main() {}\n+fn main() {\n+    unsf()\n+    //~^ ERROR call to unsafe function is unsafe and requires unsafe function or block\n+}"}, {"sha": "e812210498c4c7f5e9240bc4b8931e111eb21eb0", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bb6791502846b62e752c99396953e4db7739f28c/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6791502846b62e752c99396953e4db7739f28c/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr?ref=bb6791502846b62e752c99396953e4db7739f28c", "patch": "@@ -25,5 +25,20 @@ note: the lint level is defined here\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: unnecessary `unsafe` block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:25:5\n+   |\n+LL |     unsafe { unsf() }\n+   |     ^^^^^^ unnecessary `unsafe` block\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:30:5\n+   |\n+LL |     unsf()\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0133`."}]}