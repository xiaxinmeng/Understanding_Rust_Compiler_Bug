{"sha": "c7f0ca6063022e244ab6a2d4e85db1c13867b084", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZjBjYTYwNjMwMjJlMjQ0YWI2YTJkNGU4NWRiMWMxMzg2N2IwODQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-09T23:56:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-10T00:47:43Z"}, "message": "Remove native \"x86stdcall\" ABI", "tree": {"sha": "9fb79e009597948fea5565417d6372a11dba504e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fb79e009597948fea5565417d6372a11dba504e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7f0ca6063022e244ab6a2d4e85db1c13867b084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7f0ca6063022e244ab6a2d4e85db1c13867b084", "html_url": "https://github.com/rust-lang/rust/commit/c7f0ca6063022e244ab6a2d4e85db1c13867b084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7f0ca6063022e244ab6a2d4e85db1c13867b084/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec6b53761f8157ea553db09b6d5ba40a433c9c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec6b53761f8157ea553db09b6d5ba40a433c9c4", "html_url": "https://github.com/rust-lang/rust/commit/dec6b53761f8157ea553db09b6d5ba40a433c9c4"}], "stats": {"total": 24, "additions": 3, "deletions": 21}, "files": [{"sha": "619303ff807f211acf3a91f75bbf2282bce2d2f1", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7f0ca6063022e244ab6a2d4e85db1c13867b084/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f0ca6063022e244ab6a2d4e85db1c13867b084/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=c7f0ca6063022e244ab6a2d4e85db1c13867b084", "patch": "@@ -260,7 +260,6 @@ fn parse_ty(st: @pstate, sd: str_def) -> ty::t {\n         let abi;\n         alt next(st) as char {\n           'i' { abi = ast::native_abi_rust_intrinsic; }\n-          's' { abi = ast::native_abi_x86stdcall; }\n           'C' { abi = ast::native_abi_c_stack_cdecl; }\n           'S' { abi = ast::native_abi_c_stack_stdcall; }\n         }"}, {"sha": "64c6b558798027b66b4d7f578256dcd4b59e02fa", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7f0ca6063022e244ab6a2d4e85db1c13867b084/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f0ca6063022e244ab6a2d4e85db1c13867b084/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=c7f0ca6063022e244ab6a2d4e85db1c13867b084", "patch": "@@ -143,7 +143,6 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n         w.write_char('N');\n         alt abi {\n           native_abi_rust_intrinsic. { w.write_char('i'); }\n-          native_abi_x86stdcall. { w.write_char('s'); }\n           native_abi_c_stack_cdecl. { w.write_char('C'); }\n           native_abi_c_stack_stdcall. { w.write_char('S'); }\n         }"}, {"sha": "1300528388e2f388ec1a647961a616f5eb914042", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c7f0ca6063022e244ab6a2d4e85db1c13867b084/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f0ca6063022e244ab6a2d4e85db1c13867b084/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c7f0ca6063022e244ab6a2d4e85db1c13867b084", "patch": "@@ -5596,8 +5596,7 @@ fn native_fn_ty_param_count(cx: @crate_ctxt, id: ast::node_id) -> uint {\n \n pure fn native_abi_requires_pair(abi: ast::native_abi) -> bool {\n     alt abi {\n-        ast::native_abi_rust_intrinsic. |\n-        ast::native_abi_x86stdcall. { ret true; }\n+        ast::native_abi_rust_intrinsic. { ret true; }\n         ast::native_abi_c_stack_cdecl. |\n         ast::native_abi_c_stack_stdcall. { ret false; }\n     }\n@@ -5631,6 +5630,8 @@ fn register_native_fn(ccx: @crate_ctxt, sp: span, path: [str], name: str,\n     let fn_type = node_id_type(ccx, id); // NB: has no type params\n     let abi = ty::ty_fn_abi(ccx.tcx, fn_type);\n \n+    // FIXME: There's probably a lot of unused code here now that\n+    // there's only one possible combination of these three options\n     let pass_task;\n     let uses_retptr;\n     let cast_to_i32;\n@@ -5640,11 +5641,6 @@ fn register_native_fn(ccx: @crate_ctxt, sp: span, path: [str], name: str,\n         uses_retptr = true;\n         cast_to_i32 = false;\n       }\n-      ast::native_abi_x86stdcall. {\n-        pass_task = false;\n-        uses_retptr = false;\n-        cast_to_i32 = true;\n-      }\n       ast::native_abi_c_stack_cdecl. {\n         let llfn = decl_cdecl_fn(ccx.llmod, name, T_fn([], ccx.int_type));\n         ccx.item_ids.insert(id, llfn);\n@@ -5789,14 +5785,6 @@ fn register_native_fn(ccx: @crate_ctxt, sp: span, path: [str], name: str,\n         r = result.val;\n         rptr = result.rptr;\n       }\n-      ast::native_abi_x86stdcall. {\n-        let result =\n-            trans_simple_native_abi(bcx, name, call_args, fn_type,\n-                                    uses_retptr,\n-                                    lib::llvm::LLVMX86StdcallCallConv);\n-        r = result.val;\n-        rptr = result.rptr;\n-      }\n       _ {\n         r =\n             trans_native_call(new_raw_block_ctxt(bcx.fcx, bcx.llbb),"}, {"sha": "f9a41660f5eff302809f8b621c6285045d58343d", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7f0ca6063022e244ab6a2d4e85db1c13867b084/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f0ca6063022e244ab6a2d4e85db1c13867b084/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=c7f0ca6063022e244ab6a2d4e85db1c13867b084", "patch": "@@ -427,7 +427,6 @@ type _mod = {view_items: [@view_item], items: [@item]};\n \n tag native_abi {\n     native_abi_rust_intrinsic;\n-    native_abi_x86stdcall;\n     native_abi_c_stack_cdecl;\n     native_abi_c_stack_stdcall;\n }"}, {"sha": "a1a70c44a88a9f3b950d92eda7b747116ec2f0ac", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7f0ca6063022e244ab6a2d4e85db1c13867b084/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f0ca6063022e244ab6a2d4e85db1c13867b084/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=c7f0ca6063022e244ab6a2d4e85db1c13867b084", "patch": "@@ -2008,8 +2008,6 @@ fn parse_item_native_mod(p: parser, attrs: [ast::attribute]) -> @ast::item {\n         let t = parse_str(p);\n         if str::eq(t, \"rust-intrinsic\") {\n             abi = ast::native_abi_rust_intrinsic;\n-        } else if str::eq(t, \"x86stdcall\") {\n-            abi = ast::native_abi_x86stdcall;\n         } else if str::eq(t, \"c-stack-cdecl\") {\n             abi = ast::native_abi_c_stack_cdecl;\n         } else if str::eq(t, \"c-stack-stdcall\") {"}, {"sha": "18460ba04aeefbab1c6aff4b39b3b1ec8cbf5219", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7f0ca6063022e244ab6a2d4e85db1c13867b084/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f0ca6063022e244ab6a2d4e85db1c13867b084/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=c7f0ca6063022e244ab6a2d4e85db1c13867b084", "patch": "@@ -404,7 +404,6 @@ fn print_item(s: ps, &&item: @ast::item) {\n           ast::native_abi_rust_intrinsic. {\n             word_nbsp(s, \"\\\"rust-intrinsic\\\"\");\n           }\n-          ast::native_abi_x86stdcall. { word_nbsp(s, \"\\\"x86stdcall\\\"\"); }\n           ast::native_abi_c_stack_cdecl. {\n             word_nbsp(s, \"\\\"c-stack-cdecl\\\"\");\n           }"}]}