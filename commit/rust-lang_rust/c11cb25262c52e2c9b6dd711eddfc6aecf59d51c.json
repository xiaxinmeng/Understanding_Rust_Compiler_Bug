{"sha": "c11cb25262c52e2c9b6dd711eddfc6aecf59d51c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMWNiMjUyNjJjNTJlMmM5YjZkZDcxMWVkZGZjNmFlY2Y1OWQ1MWM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-02T06:06:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-02T06:06:09Z"}, "message": "Rollup merge of #64649 - estebank:returnator, r=varkor\n\nAvoid ICE on return outside of fn with literal array\n\nDo not ICE when encountering `enum E { A = return [0][0] }`.\n\nFix #64638.", "tree": {"sha": "e86b44b5adc6c9b04daab372f1bca35edc31088f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e86b44b5adc6c9b04daab372f1bca35edc31088f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c11cb25262c52e2c9b6dd711eddfc6aecf59d51c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdlD5RCRBK7hj4Ov3rIwAAdHIIAEL9pQQQojWZojCFOZvMZxud\naXvhNL/TYIQb4bUc+pUuAqQ+wVpcKvdjovTxU1bMGDxXypCFtffHgAizUPBi+dAw\nenugnsQEFRLm1FIQ8Six2vybAoPpbMsHkjSC3txxg1f5Ybhd+PKP+7sUmaqlRw4T\nMzDfmCId+pqJWTAs1JbCyBKW0mkr1SSaq88pNtdsYoQl7gsNXG5qt+U+7HkQ/iyI\ng4V81aIcGTallI254qLP4ZlRgBrLEm83Qvxv0D4ukT3tTHENrdVC/xISbQBqDFdB\nXtK4sL3GhuvOL65Efbn+cbfsrsgvP5SGg6S78cBFDa+aHsN3e0rxNFYtW6fw4vI=\n=t81f\n-----END PGP SIGNATURE-----\n", "payload": "tree e86b44b5adc6c9b04daab372f1bca35edc31088f\nparent ff191b54cc8a95e3bfc7ae5f8f9984f934758165\nparent 0e6fb8e8da2f3256f9e2c2c079b8174acf80d94d\nauthor Tyler Mandry <tmandry@gmail.com> 1569996369 -0700\ncommitter GitHub <noreply@github.com> 1569996369 -0700\n\nRollup merge of #64649 - estebank:returnator, r=varkor\n\nAvoid ICE on return outside of fn with literal array\n\nDo not ICE when encountering `enum E { A = return [0][0] }`.\n\nFix #64638.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c11cb25262c52e2c9b6dd711eddfc6aecf59d51c", "html_url": "https://github.com/rust-lang/rust/commit/c11cb25262c52e2c9b6dd711eddfc6aecf59d51c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c11cb25262c52e2c9b6dd711eddfc6aecf59d51c/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff191b54cc8a95e3bfc7ae5f8f9984f934758165", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff191b54cc8a95e3bfc7ae5f8f9984f934758165", "html_url": "https://github.com/rust-lang/rust/commit/ff191b54cc8a95e3bfc7ae5f8f9984f934758165"}, {"sha": "0e6fb8e8da2f3256f9e2c2c079b8174acf80d94d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e6fb8e8da2f3256f9e2c2c079b8174acf80d94d", "html_url": "https://github.com/rust-lang/rust/commit/0e6fb8e8da2f3256f9e2c2c079b8174acf80d94d"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "7a8a209a5350cfa4dd27053ec9672746e29a4ce3", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c11cb25262c52e2c9b6dd711eddfc6aecf59d51c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11cb25262c52e2c9b6dd711eddfc6aecf59d51c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=c11cb25262c52e2c9b6dd711eddfc6aecf59d51c", "patch": "@@ -190,9 +190,26 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         if let hir::ExprKind::Index(ref base, ref index) = e.kind {\n             let mut tables = self.fcx.tables.borrow_mut();\n \n-            // All valid indexing looks like this; might encounter non-valid indexes at this point\n-            if let ty::Ref(_, base_ty, _) = tables.expr_ty_adjusted(&base).kind {\n-                let index_ty = tables.expr_ty_adjusted(&index);\n+            // All valid indexing looks like this; might encounter non-valid indexes at this point.\n+            let base_ty = tables.expr_ty_adjusted_opt(&base).map(|t| &t.kind);\n+            if base_ty.is_none() {\n+                // When encountering `return [0][0]` outside of a `fn` body we can encounter a base\n+                // that isn't in the type table. We assume more relevant errors have already been\n+                // emitted, so we delay an ICE if none have. (#64638)\n+                self.tcx().sess.delay_span_bug(e.span, &format!(\"bad base: `{:?}`\", base));\n+            }\n+            if let Some(ty::Ref(_, base_ty, _)) = base_ty {\n+                let index_ty = tables.expr_ty_adjusted_opt(&index).unwrap_or_else(|| {\n+                    // When encountering `return [0][0]` outside of a `fn` body we would attempt\n+                    // to access an unexistend index. We assume that more relevant errors will\n+                    // already have been emitted, so we only gate on this with an ICE if no\n+                    // error has been emitted. (#64638)\n+                    self.tcx().sess.delay_span_bug(\n+                        e.span,\n+                        &format!(\"bad index {:?} for base: `{:?}`\", index, base),\n+                    );\n+                    self.fcx.tcx.types.err\n+                });\n                 let index_ty = self.fcx.resolve_vars_if_possible(&index_ty);\n \n                 if base_ty.builtin_index().is_some() && index_ty == self.fcx.tcx.types.usize {"}, {"sha": "a62e5bf8d3c622fe19d3f31b05b994aa9bcbd6d6", "filename": "src/test/ui/issues/issue-64620.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c11cb25262c52e2c9b6dd711eddfc6aecf59d51c/src%2Ftest%2Fui%2Fissues%2Fissue-64620.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11cb25262c52e2c9b6dd711eddfc6aecf59d51c/src%2Ftest%2Fui%2Fissues%2Fissue-64620.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64620.rs?ref=c11cb25262c52e2c9b6dd711eddfc6aecf59d51c", "patch": "@@ -0,0 +1,5 @@\n+enum Bug {\n+    V1 = return [0][0] //~ERROR return statement outside of function body\n+}\n+\n+fn main() {}"}, {"sha": "f40ac4de32d5981426db6c54f4f285715aed09c3", "filename": "src/test/ui/issues/issue-64620.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c11cb25262c52e2c9b6dd711eddfc6aecf59d51c/src%2Ftest%2Fui%2Fissues%2Fissue-64620.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c11cb25262c52e2c9b6dd711eddfc6aecf59d51c/src%2Ftest%2Fui%2Fissues%2Fissue-64620.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64620.stderr?ref=c11cb25262c52e2c9b6dd711eddfc6aecf59d51c", "patch": "@@ -0,0 +1,9 @@\n+error[E0572]: return statement outside of function body\n+  --> $DIR/issue-64620.rs:2:10\n+   |\n+LL |     V1 = return [0][0]\n+   |          ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0572`."}]}