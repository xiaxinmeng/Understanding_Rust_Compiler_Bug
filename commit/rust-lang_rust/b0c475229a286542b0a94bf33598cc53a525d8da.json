{"sha": "b0c475229a286542b0a94bf33598cc53a525d8da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYzQ3NTIyOWEyODY1NDJiMGE5NGJmMzM1OThjYzUzYTUyNWQ4ZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-25T00:36:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-25T00:36:07Z"}, "message": "auto merge of #10055 : pcwalton/rust/arc-clone-inline, r=alexcrichton\n\nr? @thestinger", "tree": {"sha": "3cf0a7fce75da4bf02612b3edbafd3e766929d89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cf0a7fce75da4bf02612b3edbafd3e766929d89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0c475229a286542b0a94bf33598cc53a525d8da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0c475229a286542b0a94bf33598cc53a525d8da", "html_url": "https://github.com/rust-lang/rust/commit/b0c475229a286542b0a94bf33598cc53a525d8da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0c475229a286542b0a94bf33598cc53a525d8da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f5b2219cc893b30863f9136703166f306fcc684", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5b2219cc893b30863f9136703166f306fcc684", "html_url": "https://github.com/rust-lang/rust/commit/3f5b2219cc893b30863f9136703166f306fcc684"}, {"sha": "b13415cccceb80fff99d422b51a7026a019ce878", "url": "https://api.github.com/repos/rust-lang/rust/commits/b13415cccceb80fff99d422b51a7026a019ce878", "html_url": "https://github.com/rust-lang/rust/commit/b13415cccceb80fff99d422b51a7026a019ce878"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "df67b1c9cc1df6a3119ec48ea2c3263f62a2b6fa", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b0c475229a286542b0a94bf33598cc53a525d8da/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c475229a286542b0a94bf33598cc53a525d8da/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=b0c475229a286542b0a94bf33598cc53a525d8da", "patch": "@@ -117,10 +117,12 @@ pub struct Arc<T> { priv x: UnsafeArc<T> }\n  */\n impl<T:Freeze+Send> Arc<T> {\n     /// Create an atomically reference counted wrapper.\n+    #[inline]\n     pub fn new(data: T) -> Arc<T> {\n         Arc { x: UnsafeArc::new(data) }\n     }\n \n+    #[inline]\n     pub fn get<'a>(&'a self) -> &'a T {\n         unsafe { &*self.x.get_immut() }\n     }\n@@ -148,6 +150,7 @@ impl<T:Freeze + Send> Clone for Arc<T> {\n     * object. However, one of the `arc` objects can be sent to another task,\n     * allowing them to share the underlying data.\n     */\n+    #[inline]\n     fn clone(&self) -> Arc<T> {\n         Arc { x: self.x.clone() }\n     }\n@@ -167,6 +170,7 @@ pub struct MutexArc<T> { priv x: UnsafeArc<MutexArcInner<T>> }\n \n impl<T:Send> Clone for MutexArc<T> {\n     /// Duplicate a mutex-protected Arc. See arc::clone for more details.\n+    #[inline]\n     fn clone(&self) -> MutexArc<T> {\n         // NB: Cloning the underlying mutex is not necessary. Its reference\n         // count would be exactly the same as the shared state's.\n@@ -349,6 +353,7 @@ pub struct RWArc<T> {\n \n impl<T:Freeze + Send> Clone for RWArc<T> {\n     /// Duplicate a rwlock-protected Arc. See arc::clone for more details.\n+    #[inline]\n     fn clone(&self) -> RWArc<T> {\n         RWArc { x: self.x.clone() }\n     }"}]}