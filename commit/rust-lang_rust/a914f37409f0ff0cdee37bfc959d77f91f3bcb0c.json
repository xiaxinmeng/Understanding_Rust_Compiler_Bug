{"sha": "a914f37409f0ff0cdee37bfc959d77f91f3bcb0c", "node_id": "C_kwDOAAsO6NoAKGE5MTRmMzc0MDlmMGZmMGNkZWUzN2JmYzk1OWQ3N2Y5MWYzYmNiMGM", "commit": {"author": {"name": "Obei Sideg", "email": "obei.sideg@gmail.com", "date": "2023-02-16T19:04:59Z"}, "committer": {"name": "Obei Sideg", "email": "obei.sideg@gmail.com", "date": "2023-02-23T10:57:06Z"}, "message": "Add lint against `Iterator::map` receiving a callable that returns `()`", "tree": {"sha": "daab9a0ea95f8cd923ac5ebe5339afddc3048c91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daab9a0ea95f8cd923ac5ebe5339afddc3048c91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c", "html_url": "https://github.com/rust-lang/rust/commit/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c/comments", "author": {"login": "obeis", "id": 54103142, "node_id": "MDQ6VXNlcjU0MTAzMTQy", "avatar_url": "https://avatars.githubusercontent.com/u/54103142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obeis", "html_url": "https://github.com/obeis", "followers_url": "https://api.github.com/users/obeis/followers", "following_url": "https://api.github.com/users/obeis/following{/other_user}", "gists_url": "https://api.github.com/users/obeis/gists{/gist_id}", "starred_url": "https://api.github.com/users/obeis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obeis/subscriptions", "organizations_url": "https://api.github.com/users/obeis/orgs", "repos_url": "https://api.github.com/users/obeis/repos", "events_url": "https://api.github.com/users/obeis/events{/privacy}", "received_events_url": "https://api.github.com/users/obeis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "obeis", "id": 54103142, "node_id": "MDQ6VXNlcjU0MTAzMTQy", "avatar_url": "https://avatars.githubusercontent.com/u/54103142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obeis", "html_url": "https://github.com/obeis", "followers_url": "https://api.github.com/users/obeis/followers", "following_url": "https://api.github.com/users/obeis/following{/other_user}", "gists_url": "https://api.github.com/users/obeis/gists{/gist_id}", "starred_url": "https://api.github.com/users/obeis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obeis/subscriptions", "organizations_url": "https://api.github.com/users/obeis/orgs", "repos_url": "https://api.github.com/users/obeis/repos", "events_url": "https://api.github.com/users/obeis/events{/privacy}", "received_events_url": "https://api.github.com/users/obeis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b1dbf728add722d4db894b9b986ec24e1cdb0a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b1dbf728add722d4db894b9b986ec24e1cdb0a1", "html_url": "https://github.com/rust-lang/rust/commit/8b1dbf728add722d4db894b9b986ec24e1cdb0a1"}], "stats": {"total": 135, "additions": 134, "deletions": 1}, "files": [{"sha": "68e62c9789aed9fda1e5a0118d1642cd4f8c6f95", "filename": "compiler/rustc_lint/locales/en-US.ftl", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c/compiler%2Frustc_lint%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c/compiler%2Frustc_lint%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Flocales%2Fen-US.ftl?ref=a914f37409f0ff0cdee37bfc959d77f91f3bcb0c", "patch": "@@ -24,6 +24,13 @@ lint_for_loops_over_fallibles =\n     .use_while_let = to check pattern in a loop use `while let`\n     .use_question_mark = consider unwrapping the `Result` with `?` to iterate over its contents\n \n+lint_map_unit_fn = `Iterator::map` call that discard the iterator's values\n+    .note = `Iterator::map`, like many of the methods on `Iterator`, gets executed lazily, meaning that its effects won't be visible until it is iterated\n+    .function_label = this function returns `()`, which is likely not what you wanted\n+    .argument_label = called `Iterator::map` with callable that returns `()`\n+    .map_label = after this call to map, the resulting iterator is `impl Iterator<Item = ()>`, which means the only information carried by the iterator is the number of items\n+    .suggestion = you might have meant to use `Iterator::for_each`\n+\n lint_non_binding_let_on_sync_lock =\n     non-binding let on a synchronization lock\n "}, {"sha": "35dc533e56c24ea900ad26f4ed9bd11850d46d11", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=a914f37409f0ff0cdee37bfc959d77f91f3bcb0c", "patch": "@@ -63,6 +63,7 @@ mod late;\n mod let_underscore;\n mod levels;\n mod lints;\n+mod map_unit_fn;\n mod methods;\n mod multiple_supertrait_upcastable;\n mod non_ascii_idents;\n@@ -100,6 +101,7 @@ use for_loops_over_fallibles::*;\n use hidden_unicode_codepoints::*;\n use internal::*;\n use let_underscore::*;\n+use map_unit_fn::*;\n use methods::*;\n use multiple_supertrait_upcastable::*;\n use non_ascii_idents::*;\n@@ -239,6 +241,7 @@ late_lint_methods!(\n             NamedAsmLabels: NamedAsmLabels,\n             OpaqueHiddenInferredBound: OpaqueHiddenInferredBound,\n             MultipleSupertraitUpcastable: MultipleSupertraitUpcastable,\n+            MapUnitFn: MapUnitFn,\n         ]\n     ]\n );\n@@ -298,7 +301,8 @@ fn register_builtins(store: &mut LintStore) {\n         UNUSED_LABELS,\n         UNUSED_PARENS,\n         UNUSED_BRACES,\n-        REDUNDANT_SEMICOLONS\n+        REDUNDANT_SEMICOLONS,\n+        MAP_UNIT_FN\n     );\n \n     add_lint_group!(\"let_underscore\", LET_UNDERSCORE_DROP, LET_UNDERSCORE_LOCK);"}, {"sha": "20ab0af5856518a22d7099d3c3160849f59f555e", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=a914f37409f0ff0cdee37bfc959d77f91f3bcb0c", "patch": "@@ -748,6 +748,22 @@ impl AddToDiagnostic for HiddenUnicodeCodepointsDiagSub {\n     }\n }\n \n+// map_unit_fn.rs\n+#[derive(LintDiagnostic)]\n+#[diag(lint_map_unit_fn)]\n+#[note]\n+pub struct MappingToUnit {\n+    #[label(lint_function_label)]\n+    pub function_label: Span,\n+    #[label(lint_argument_label)]\n+    pub argument_label: Span,\n+    #[label(lint_map_label)]\n+    pub map_label: Span,\n+    #[suggestion(style = \"verbose\", code = \"{replace}\", applicability = \"maybe-incorrect\")]\n+    pub suggestion: Span,\n+    pub replace: String,\n+}\n+\n // internal.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_default_hash_types)]"}, {"sha": "533834136901ff3b60582c7ec75f54ab49046bb5", "filename": "compiler/rustc_lint/src/map_unit_fn.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c/compiler%2Frustc_lint%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c/compiler%2Frustc_lint%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fmap_unit_fn.rs?ref=a914f37409f0ff0cdee37bfc959d77f91f3bcb0c", "patch": "@@ -0,0 +1,104 @@\n+use crate::lints::MappingToUnit;\n+use crate::{LateContext, LateLintPass, LintContext};\n+\n+use rustc_hir::{Expr, ExprKind, HirId, Stmt, StmtKind};\n+use rustc_middle::{\n+    query::Key,\n+    ty::{self, Ty},\n+};\n+\n+declare_lint! {\n+    /// The `map_unit_fn` lint checks for `Iterator::map` receive\n+    /// a callable that returns `()`.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// fn foo(items: &mut Vec<u8>) {\n+    ///     items.sort();\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let mut x: Vec<Vec<u8>> = vec![\n+    ///         vec![0, 2, 1],\n+    ///         vec![5, 4, 3],\n+    ///     ];\n+    ///     x.iter_mut().map(foo);\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Mapping to `()` is almost always a mistake.\n+    pub MAP_UNIT_FN,\n+    Warn,\n+    \"`Iterator::map` call that discard the iterator's values\"\n+}\n+\n+declare_lint_pass!(MapUnitFn => [MAP_UNIT_FN]);\n+\n+impl<'tcx> LateLintPass<'tcx> for MapUnitFn {\n+    fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &Stmt<'_>) {\n+        if stmt.span.from_expansion() {\n+            return;\n+        }\n+\n+        if let StmtKind::Semi(expr) = stmt.kind {\n+            if let ExprKind::MethodCall(path, receiver, args, span) = expr.kind {\n+                if path.ident.name.as_str() == \"map\" {\n+                    if receiver.span.from_expansion()\n+                        || args.iter().any(|e| e.span.from_expansion())\n+                        || !is_impl_slice(cx, receiver)\n+                        || !is_diagnostic_name(cx, expr.hir_id, \"IteratorMap\")\n+                    {\n+                        return;\n+                    }\n+                    let arg_ty = cx.typeck_results().expr_ty(&args[0]);\n+                    if let ty::FnDef(id, _) = arg_ty.kind() {\n+                        let fn_ty = cx.tcx.fn_sig(id).skip_binder();\n+                        let ret_ty = fn_ty.output().skip_binder();\n+                        if is_unit_type(ret_ty) {\n+                            cx.emit_spanned_lint(\n+                                MAP_UNIT_FN,\n+                                span,\n+                                MappingToUnit {\n+                                    function_label: cx.tcx.span_of_impl(*id).unwrap(),\n+                                    argument_label: args[0].span,\n+                                    map_label: arg_ty.default_span(cx.tcx),\n+                                    suggestion: path.ident.span,\n+                                    replace: \"for_each\".to_string(),\n+                                },\n+                            )\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn is_impl_slice(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n+        if let Some(impl_id) = cx.tcx.impl_of_method(method_id) {\n+            return cx.tcx.type_of(impl_id).skip_binder().is_slice();\n+        }\n+    }\n+    false\n+}\n+\n+fn is_unit_type(ty: Ty<'_>) -> bool {\n+    ty.is_unit() || ty.is_never()\n+}\n+\n+fn is_diagnostic_name(cx: &LateContext<'_>, id: HirId, name: &str) -> bool {\n+    if let Some(def_id) = cx.typeck_results().type_dependent_def_id(id) {\n+        if let Some(item) = cx.tcx.get_diagnostic_name(def_id) {\n+            if item.as_str() == name {\n+                return true;\n+            }\n+        }\n+    }\n+    false\n+}"}, {"sha": "ae00232c12c8ab9ee7987081f765f88d7d2a33c7", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=a914f37409f0ff0cdee37bfc959d77f91f3bcb0c", "patch": "@@ -278,6 +278,7 @@\n //!\n //! ```\n //! # #![allow(unused_must_use)]\n+//! # #![cfg_attr(not(bootstrap), allow(map_unit_fn))]\n //! let v = vec![1, 2, 3, 4, 5];\n //! v.iter().map(|x| println!(\"{x}\"));\n //! ```"}, {"sha": "5d272ec352287a8ddf9f8511f9744f19ec6433ed", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a914f37409f0ff0cdee37bfc959d77f91f3bcb0c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=a914f37409f0ff0cdee37bfc959d77f91f3bcb0c", "patch": "@@ -777,6 +777,7 @@ pub trait Iterator {\n     ///     println!(\"{x}\");\n     /// }\n     /// ```\n+    #[rustc_diagnostic_item = \"IteratorMap\"]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn map<B, F>(self, f: F) -> Map<Self, F>"}]}