{"sha": "f2571a2dd68ff1d84b5df07cb38831627df6aaff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNTcxYTJkZDY4ZmYxZDg0YjVkZjA3Y2IzODgzMTYyN2RmNmFhZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-26T13:33:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-26T13:33:04Z"}, "message": "Auto merge of #85682 - m-ou-se:array-into-iter-2, r=nikomatsakis\n\nUpdate array_into_iter lint for 1.53 and edition changes.\n\nThis updates the array_into_iter lint for Rust 1.53 and the edition changes.\n\nSee https://github.com/rust-lang/rust/issues/84513\n\nr? `@estebank`", "tree": {"sha": "3f265cb418a3841196b92bc4d00872fa3712e0ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f265cb418a3841196b92bc4d00872fa3712e0ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2571a2dd68ff1d84b5df07cb38831627df6aaff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2571a2dd68ff1d84b5df07cb38831627df6aaff", "html_url": "https://github.com/rust-lang/rust/commit/f2571a2dd68ff1d84b5df07cb38831627df6aaff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2571a2dd68ff1d84b5df07cb38831627df6aaff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "831ae3c1364b7b033bd1da430bc1cb86d93ad186", "url": "https://api.github.com/repos/rust-lang/rust/commits/831ae3c1364b7b033bd1da430bc1cb86d93ad186", "html_url": "https://github.com/rust-lang/rust/commit/831ae3c1364b7b033bd1da430bc1cb86d93ad186"}, {"sha": "dbdf7c7963c8d637c11cac2940161813cd61b8c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbdf7c7963c8d637c11cac2940161813cd61b8c0", "html_url": "https://github.com/rust-lang/rust/commit/dbdf7c7963c8d637c11cac2940161813cd61b8c0"}], "stats": {"total": 362, "additions": 258, "deletions": 104}, "files": [{"sha": "77741c7240b0d100ae1749094dbdd9e780a67f90", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 55, "deletions": 26, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f2571a2dd68ff1d84b5df07cb38831627df6aaff/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2571a2dd68ff1d84b5df07cb38831627df6aaff/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=f2571a2dd68ff1d84b5df07cb38831627df6aaff", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n use rustc_session::lint::FutureIncompatibilityReason;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n+use rustc_span::Span;\n \n declare_lint! {\n     /// The `array_into_iter` lint detects calling `into_iter` on arrays.\n@@ -21,34 +22,44 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// In the future, it is planned to add an `IntoIter` implementation for\n-    /// arrays such that it will iterate over *values* of the array instead of\n-    /// references. Due to how method resolution works, this will change\n-    /// existing code that uses `into_iter` on arrays. The solution to avoid\n-    /// this warning is to use `iter()` instead of `into_iter()`.\n-    ///\n-    /// This is a [future-incompatible] lint to transition this to a hard error\n-    /// in the future. See [issue #66145] for more details and a more thorough\n-    /// description of the lint.\n-    ///\n-    /// [issue #66145]: https://github.com/rust-lang/rust/issues/66145\n-    /// [future-incompatible]: ../index.md#future-incompatible-lints\n+    /// Since Rust 1.53, arrays implement `IntoIterator`. However, to avoid\n+    /// breakage, `array.into_iter()` in Rust 2015 and 2018 code will still\n+    /// behave as `(&array).into_iter()`, returning an iterator over\n+    /// references, just like in Rust 1.52 and earlier.\n+    /// This only applies to the method call syntax `array.into_iter()`, not to\n+    /// any other syntax such as `for _ in array` or `IntoIterator::into_iter(array)`.\n     pub ARRAY_INTO_ITER,\n     Warn,\n-    \"detects calling `into_iter` on arrays\",\n+    \"detects calling `into_iter` on arrays in Rust 2015 and 2018\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #66145 <https://github.com/rust-lang/rust/issues/66145>\",\n         reason: FutureIncompatibilityReason::EditionSemanticsChange(Edition::Edition2021),\n     };\n }\n \n-declare_lint_pass!(\n-    /// Checks for instances of calling `into_iter` on arrays.\n-    ArrayIntoIter => [ARRAY_INTO_ITER]\n-);\n+#[derive(Copy, Clone, Default)]\n+pub struct ArrayIntoIter {\n+    for_expr_span: Span,\n+}\n+\n+impl_lint_pass!(ArrayIntoIter => [ARRAY_INTO_ITER]);\n \n impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n+        // Save the span of expressions in `for _ in expr` syntax,\n+        // so we can give a better suggestion for those later.\n+        if let hir::ExprKind::Match(arg, [_], hir::MatchSource::ForLoopDesugar) = &expr.kind {\n+            if let hir::ExprKind::Call(path, [arg]) = &arg.kind {\n+                if let hir::ExprKind::Path(hir::QPath::LangItem(\n+                    hir::LangItem::IntoIterIntoIter,\n+                    _,\n+                )) = &path.kind\n+                {\n+                    self.for_expr_span = arg.span;\n+                }\n+            }\n+        }\n+\n         // We only care about method call expressions.\n         if let hir::ExprKind::MethodCall(call, span, args, _) = &expr.kind {\n             if call.ident.name != sym::into_iter {\n@@ -104,19 +115,37 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n                 _ => bug!(\"array type coerced to something other than array or slice\"),\n             };\n             cx.struct_span_lint(ARRAY_INTO_ITER, *span, |lint| {\n-                lint.build(&format!(\n-                \"this method call currently resolves to `<&{} as IntoIterator>::into_iter` (due \\\n-                    to autoref coercions), but that might change in the future when \\\n-                    `IntoIterator` impls for arrays are added.\",\n-                target,\n-                ))\n-                .span_suggestion(\n+                let mut diag = lint.build(&format!(\n+                    \"this method call resolves to `<&{} as IntoIterator>::into_iter` \\\n+                    (due to backwards compatibility), \\\n+                    but will resolve to <{} as IntoIterator>::into_iter in Rust 2021.\",\n+                    target, target,\n+                ));\n+                diag.span_suggestion(\n                     call.ident.span,\n                     \"use `.iter()` instead of `.into_iter()` to avoid ambiguity\",\n                     \"iter\".into(),\n                     Applicability::MachineApplicable,\n-                )\n-                .emit();\n+                );\n+                if self.for_expr_span == expr.span {\n+                    let expr_span = expr.span.ctxt().outer_expn_data().call_site;\n+                    diag.span_suggestion(\n+                        receiver_arg.span.shrink_to_hi().to(expr_span.shrink_to_hi()),\n+                        \"or remove `.into_iter()` to iterate by value\",\n+                        String::new(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else {\n+                    diag.multipart_suggestion(\n+                        \"or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\",\n+                        vec![\n+                            (expr.span.shrink_to_lo(), \"IntoIterator::into_iter(\".into()),\n+                            (receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()), \")\".into()),\n+                        ],\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                diag.emit();\n             })\n         }\n     }"}, {"sha": "89f9809d643e08487ebbdbaf47c8d0e4376470e9", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2571a2dd68ff1d84b5df07cb38831627df6aaff/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2571a2dd68ff1d84b5df07cb38831627df6aaff/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=f2571a2dd68ff1d84b5df07cb38831627df6aaff", "patch": "@@ -163,7 +163,7 @@ macro_rules! late_lint_passes {\n                 // FIXME: Turn the computation of types which implement Debug into a query\n                 // and change this to a module lint pass\n                 MissingDebugImplementations: MissingDebugImplementations::default(),\n-                ArrayIntoIter: ArrayIntoIter,\n+                ArrayIntoIter: ArrayIntoIter::default(),\n                 ClashingExternDeclarations: ClashingExternDeclarations::new(),\n                 DropTraitConstraints: DropTraitConstraints,\n                 TemporaryCStringAsPtr: TemporaryCStringAsPtr,"}, {"sha": "e56c2956a697e8fa21cbe738168eb2c8ea188a16", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2571a2dd68ff1d84b5df07cb38831627df6aaff/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2571a2dd68ff1d84b5df07cb38831627df6aaff/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs?ref=f2571a2dd68ff1d84b5df07cb38831627df6aaff", "patch": "@@ -12,11 +12,11 @@ fn main() {\n     // Before 2021, the method dispatched to `IntoIterator for &[T; N]`,\n     // which we continue to support for compatibility.\n     let _: Iter<'_, i32> = array.into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     let _: Iter<'_, i32> = Box::new(array).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     // The `array_into_iter` lint doesn't cover other wrappers that deref to an array.\n@@ -25,6 +25,10 @@ fn main() {\n \n     // But you can always use the trait method explicitly as an array.\n     let _: IntoIter<i32, 10> = IntoIterator::into_iter(array);\n+\n+    for _ in [1, 2, 3].into_iter() {}\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this changes meaning\n }\n \n /// User type that dereferences to an array."}, {"sha": "3bd3ca6e875a13ddfcab03361aad1dcb41d26a5e", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.stderr", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f2571a2dd68ff1d84b5df07cb38831627df6aaff/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2571a2dd68ff1d84b5df07cb38831627df6aaff/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr?ref=f2571a2dd68ff1d84b5df07cb38831627df6aaff", "patch": "@@ -1,21 +1,54 @@\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-2018.rs:14:34\n    |\n LL |     let _: Iter<'_, i32> = array.into_iter();\n-   |                                  ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                                  ^^^^^^^^^\n    |\n    = note: `#[warn(array_into_iter)]` on by default\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     let _: Iter<'_, i32> = array.iter();\n+   |                                  ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     let _: Iter<'_, i32> = IntoIterator::into_iter(array);\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^     ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-2018.rs:18:44\n    |\n LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n-   |                                            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                                            ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     let _: Iter<'_, i32> = Box::new(array).iter();\n+   |                                            ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     let _: Iter<'_, i32> = IntoIterator::into_iter(Box::new(array));\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^               ^\n+\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+  --> $DIR/into-iter-on-arrays-2018.rs:29:24\n+   |\n+LL |     for _ in [1, 2, 3].into_iter() {}\n+   |                        ^^^^^^^^^\n+   |\n+   = warning: this changes meaning in Rust 2021\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     for _ in [1, 2, 3].iter() {}\n+   |                        ^^^^\n+help: or remove `.into_iter()` to iterate by value\n+   |\n+LL |     for _ in [1, 2, 3] {}\n+   |                      --\n \n-warning: 2 warnings emitted\n+warning: 3 warnings emitted\n "}, {"sha": "0055758a6a442ab1f8e2a119d7e9a2b2a00b384d", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.fixed", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f2571a2dd68ff1d84b5df07cb38831627df6aaff/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f2571a2dd68ff1d84b5df07cb38831627df6aaff/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed?ref=f2571a2dd68ff1d84b5df07cb38831627df6aaff", "patch": "@@ -1,48 +1,49 @@\n // run-pass\n // run-rustfix\n+// rustfix-only-machine-applicable\n \n fn main() {\n     let small = [1, 2];\n     let big = [0u8; 33];\n \n     // Expressions that should trigger the lint\n     small.iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     [1, 2].iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     big.iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     [0u8; 33].iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     Box::new(small).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new([1, 2]).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(big).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new([0u8; 33]).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     Box::new(Box::new(small)).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(Box::new([1, 2])).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(Box::new(big)).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(Box::new([0u8; 33])).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     // Expressions that should not"}, {"sha": "01857c78a730c58122c5e62a57c476995353bf1d", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f2571a2dd68ff1d84b5df07cb38831627df6aaff/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2571a2dd68ff1d84b5df07cb38831627df6aaff/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs?ref=f2571a2dd68ff1d84b5df07cb38831627df6aaff", "patch": "@@ -1,48 +1,49 @@\n // run-pass\n // run-rustfix\n+// rustfix-only-machine-applicable\n \n fn main() {\n     let small = [1, 2];\n     let big = [0u8; 33];\n \n     // Expressions that should trigger the lint\n     small.into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     [1, 2].into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     big.into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     [0u8; 33].into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     Box::new(small).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new([1, 2]).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(big).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new([0u8; 33]).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     Box::new(Box::new(small)).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(Box::new([1, 2])).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(Box::new(big)).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(Box::new([0u8; 33])).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     // Expressions that should not"}, {"sha": "01789e0e257485847031f1b40df54bd885a9ecfb", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "modified", "additions": 132, "deletions": 36, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/f2571a2dd68ff1d84b5df07cb38831627df6aaff/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2571a2dd68ff1d84b5df07cb38831627df6aaff/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=f2571a2dd68ff1d84b5df07cb38831627df6aaff", "patch": "@@ -1,111 +1,207 @@\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:9:11\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+  --> $DIR/into-iter-on-arrays-lint.rs:10:11\n    |\n LL |     small.into_iter();\n-   |           ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |           ^^^^^^^^^\n    |\n    = note: `#[warn(array_into_iter)]` on by default\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     small.iter();\n+   |           ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(small);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^     ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:12:12\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+  --> $DIR/into-iter-on-arrays-lint.rs:13:12\n    |\n LL |     [1, 2].into_iter();\n-   |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |            ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     [1, 2].iter();\n+   |            ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter([1, 2]);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^      ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:15:9\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+  --> $DIR/into-iter-on-arrays-lint.rs:16:9\n    |\n LL |     big.into_iter();\n-   |         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |         ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     big.iter();\n+   |         ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(big);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^   ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:18:15\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+  --> $DIR/into-iter-on-arrays-lint.rs:19:15\n    |\n LL |     [0u8; 33].into_iter();\n-   |               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |               ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     [0u8; 33].iter();\n+   |               ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter([0u8; 33]);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^         ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:22:21\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+  --> $DIR/into-iter-on-arrays-lint.rs:23:21\n    |\n LL |     Box::new(small).into_iter();\n-   |                     ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                     ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new(small).iter();\n+   |                     ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new(small));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^               ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:25:22\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+  --> $DIR/into-iter-on-arrays-lint.rs:26:22\n    |\n LL |     Box::new([1, 2]).into_iter();\n-   |                      ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                      ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new([1, 2]).iter();\n+   |                      ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new([1, 2]));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^                ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:28:19\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+  --> $DIR/into-iter-on-arrays-lint.rs:29:19\n    |\n LL |     Box::new(big).into_iter();\n-   |                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                   ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new(big).iter();\n+   |                   ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new(big));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^             ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:31:25\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+  --> $DIR/into-iter-on-arrays-lint.rs:32:25\n    |\n LL |     Box::new([0u8; 33]).into_iter();\n-   |                         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                         ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new([0u8; 33]).iter();\n+   |                         ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new([0u8; 33]));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^                   ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:35:31\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+  --> $DIR/into-iter-on-arrays-lint.rs:36:31\n    |\n LL |     Box::new(Box::new(small)).into_iter();\n-   |                               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                               ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new(Box::new(small)).iter();\n+   |                               ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new(Box::new(small)));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^                         ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:38:32\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+  --> $DIR/into-iter-on-arrays-lint.rs:39:32\n    |\n LL |     Box::new(Box::new([1, 2])).into_iter();\n-   |                                ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                                ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new(Box::new([1, 2])).iter();\n+   |                                ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new(Box::new([1, 2])));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^                          ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:41:29\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+  --> $DIR/into-iter-on-arrays-lint.rs:42:29\n    |\n LL |     Box::new(Box::new(big)).into_iter();\n-   |                             ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                             ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new(Box::new(big)).iter();\n+   |                             ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new(Box::new(big)));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^                       ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:44:35\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+  --> $DIR/into-iter-on-arrays-lint.rs:45:35\n    |\n LL |     Box::new(Box::new([0u8; 33])).into_iter();\n-   |                                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                                   ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new(Box::new([0u8; 33])).iter();\n+   |                                   ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new(Box::new([0u8; 33])));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^                             ^\n \n warning: 12 warnings emitted\n "}, {"sha": "4d98f0ad62d4ddceff454fc3106e60c84ad392e7", "filename": "src/test/ui/lint/issue-78660-cap-lints-future-compat.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/831ae3c1364b7b033bd1da430bc1cb86d93ad186/src%2Ftest%2Fui%2Flint%2Fissue-78660-cap-lints-future-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831ae3c1364b7b033bd1da430bc1cb86d93ad186/src%2Ftest%2Fui%2Flint%2Fissue-78660-cap-lints-future-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-78660-cap-lints-future-compat.rs?ref=831ae3c1364b7b033bd1da430bc1cb86d93ad186", "patch": "@@ -1,10 +0,0 @@\n-// compile-flags: -D warnings --cap-lints allow\n-// check-pass\n-\n-// Regression test for issue #78660\n-// Tests that we don't ICE when a future-incompat-report lint has\n-// has a command-line source, but is capped to allow\n-\n-fn main() {\n-    [\"hi\"].into_iter();\n-}"}]}