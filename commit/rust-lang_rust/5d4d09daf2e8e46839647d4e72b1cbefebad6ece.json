{"sha": "5d4d09daf2e8e46839647d4e72b1cbefebad6ece", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNGQwOWRhZjJlOGU0NjgzOTY0N2Q0ZTcyYjFjYmVmZWJhZDZlY2U=", "commit": {"author": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-07-30T20:36:21Z"}, "committer": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-07-30T20:36:21Z"}, "message": "Add a new test for borrow checker Box<T> behavior", "tree": {"sha": "f4b21bf2c2f90fcc769b3007831df47fa2e60d7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4b21bf2c2f90fcc769b3007831df47fa2e60d7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d4d09daf2e8e46839647d4e72b1cbefebad6ece", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d4d09daf2e8e46839647d4e72b1cbefebad6ece", "html_url": "https://github.com/rust-lang/rust/commit/5d4d09daf2e8e46839647d4e72b1cbefebad6ece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d4d09daf2e8e46839647d4e72b1cbefebad6ece/comments", "author": null, "committer": null, "parents": [{"sha": "3607c7a982c55a165adda8056cc228acf918bc37", "url": "https://api.github.com/repos/rust-lang/rust/commits/3607c7a982c55a165adda8056cc228acf918bc37", "html_url": "https://github.com/rust-lang/rust/commit/3607c7a982c55a165adda8056cc228acf918bc37"}], "stats": {"total": 150, "additions": 150, "deletions": 0}, "files": [{"sha": "c9b384e0b007d7c7edfbf792d5e902a4b4169eab", "filename": "src/test/compile-fail/borrowck-box-insensitivity.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/5d4d09daf2e8e46839647d4e72b1cbefebad6ece/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4d09daf2e8e46839647d4e72b1cbefebad6ece/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs?ref=5d4d09daf2e8e46839647d4e72b1cbefebad6ece", "patch": "@@ -0,0 +1,150 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A {\n+    x: Box<int>,\n+    y: int,\n+}\n+\n+struct B {\n+    x: Box<int>,\n+    y: Box<int>,\n+}\n+\n+struct C {\n+    x: Box<A>,\n+    y: int,\n+}\n+\n+struct D {\n+    x: Box<A>,\n+    y: Box<int>,\n+}\n+\n+fn copy_after_move() {\n+    let a = box A { x: box 0, y: 1 };\n+    let _x = a.x;\n+    let _y = a.y; //~ ERROR use of partially moved\n+}\n+\n+fn move_after_move() {\n+    let a = box B { x: box 0, y: box 1 };\n+    let _x = a.x;\n+    let _y = a.y; //~ ERROR use of partially moved\n+}\n+\n+fn borrow_after_move() {\n+    let a = box A { x: box 0, y: 1 };\n+    let _x = a.x;\n+    let _y = &a.y; //~ ERROR use of partially moved\n+}\n+\n+fn move_after_borrow() {\n+    let a = box B { x: box 0, y: box 1 };\n+    let _x = &a.x;\n+    let _y = a.y; //~ ERROR cannot move\n+}\n+\n+fn copy_after_mut_borrow() {\n+    let mut a = box A { x: box 0, y: 1 };\n+    let _x = &mut a.x;\n+    let _y = a.y; //~ ERROR cannot use\n+}\n+\n+fn move_after_mut_borrow() {\n+    let mut a = box B { x: box 0, y: box 1 };\n+    let _x = &mut a.x;\n+    let _y = a.y; //~ ERROR cannot move\n+}\n+\n+fn borrow_after_mut_borrow() {\n+    let mut a = box A { x: box 0, y: 1 };\n+    let _x = &mut a.x;\n+    let _y = &a.y; //~ ERROR cannot borrow\n+}\n+\n+fn mut_borrow_after_borrow() {\n+    let mut a = box A { x: box 0, y: 1 };\n+    let _x = &a.x;\n+    let _y = &mut a.y; //~ ERROR cannot borrow\n+}\n+\n+fn copy_after_move_nested() {\n+    let a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let _x = a.x.x;\n+    let _y = a.y; //~ ERROR use of partially moved\n+}\n+\n+fn move_after_move_nested() {\n+    let a = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n+    let _x = a.x.x;\n+    let _y = a.y; //~ ERROR use of partially moved\n+}\n+\n+fn borrow_after_move_nested() {\n+    let a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let _x = a.x.x;\n+    let _y = &a.y; //~ ERROR use of partially moved\n+}\n+\n+fn move_after_borrow_nested() {\n+    let a = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n+    let _x = &a.x.x;\n+    let _y = a.y; //~ ERROR cannot move\n+}\n+\n+fn copy_after_mut_borrow_nested() {\n+    let mut a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let _x = &mut a.x.x;\n+    let _y = a.y; //~ ERROR cannot use\n+}\n+\n+fn move_after_mut_borrow_nested() {\n+    let mut a = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n+    let _x = &mut a.x.x;\n+    let _y = a.y; //~ ERROR cannot move\n+}\n+\n+fn borrow_after_mut_borrow_nested() {\n+    let mut a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let _x = &mut a.x.x;\n+    let _y = &a.y; //~ ERROR cannot borrow\n+}\n+\n+fn mut_borrow_after_borrow_nested() {\n+    let mut a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let _x = &a.x.x;\n+    let _y = &mut a.y; //~ ERROR cannot borrow\n+}\n+\n+fn main() {\n+    copy_after_move();\n+    move_after_move();\n+    borrow_after_move();\n+\n+    move_after_borrow();\n+\n+    copy_after_mut_borrow();\n+    move_after_mut_borrow();\n+    borrow_after_mut_borrow();\n+    mut_borrow_after_borrow();\n+\n+    copy_after_move_nested();\n+    move_after_move_nested();\n+    borrow_after_move_nested();\n+\n+    move_after_borrow_nested();\n+\n+    copy_after_mut_borrow_nested();\n+    move_after_mut_borrow_nested();\n+    borrow_after_mut_borrow_nested();\n+    mut_borrow_after_borrow_nested();\n+}\n+"}]}