{"sha": "c5d5d2185816d90ad1420fe544d93150cb9c9a48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZDVkMjE4NTgxNmQ5MGFkMTQyMGZlNTQ0ZDkzMTUwY2I5YzlhNDg=", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2020-06-08T11:46:58Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2020-06-08T11:46:58Z"}, "message": "Add `FieldShorthand` variant to `NameClass`", "tree": {"sha": "8cf69565065eac4536a6b4cbaa47a4b01b6d59e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cf69565065eac4536a6b4cbaa47a4b01b6d59e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5d5d2185816d90ad1420fe544d93150cb9c9a48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d5d2185816d90ad1420fe544d93150cb9c9a48", "html_url": "https://github.com/rust-lang/rust/commit/c5d5d2185816d90ad1420fe544d93150cb9c9a48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5d5d2185816d90ad1420fe544d93150cb9c9a48/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73684a4ae2ff5251bbff35109d2c9ad40fe4ef01", "url": "https://api.github.com/repos/rust-lang/rust/commits/73684a4ae2ff5251bbff35109d2c9ad40fe4ef01", "html_url": "https://github.com/rust-lang/rust/commit/73684a4ae2ff5251bbff35109d2c9ad40fe4ef01"}], "stats": {"total": 59, "additions": 32, "deletions": 27}, "files": [{"sha": "620d2dedd3de9c5a9258bfee283e1fab63229c34", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d5d2185816d90ad1420fe544d93150cb9c9a48/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d5d2185816d90ad1420fe544d93150cb9c9a48/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=c5d5d2185816d90ad1420fe544d93150cb9c9a48", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn goto_definition(\n                 reference_definition(&sema, &name_ref).to_vec()\n             },\n             ast::Name(name) => {\n-                let def = classify_name(&sema, &name)?.definition();\n+                let def = classify_name(&sema, &name)?.into_definition()?;\n                 let nav = def.try_to_nav(sema.db)?;\n                 vec![nav]\n             },"}, {"sha": "f6b52c35d7f54ecffc130a274c0d4869aa934902", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5d5d2185816d90ad1420fe544d93150cb9c9a48/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d5d2185816d90ad1420fe544d93150cb9c9a48/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=c5d5d2185816d90ad1420fe544d93150cb9c9a48", "patch": "@@ -363,6 +363,7 @@ fn highlight_element(\n                     highlight_name(db, def) | HighlightModifier::Definition\n                 }\n                 Some(NameClass::ConstReference(def)) => highlight_name(db, def),\n+                Some(NameClass::FieldShorthand { .. }) => HighlightTag::Field.into(),\n                 None => highlight_name_by_syntax(name) | HighlightModifier::Definition,\n             }\n         }"}, {"sha": "853d856e790ad062600ab3c0553cbbc698ab8739", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c5d5d2185816d90ad1420fe544d93150cb9c9a48/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d5d2185816d90ad1420fe544d93150cb9c9a48/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=c5d5d2185816d90ad1420fe544d93150cb9c9a48", "patch": "@@ -82,38 +82,40 @@ pub enum NameClass {\n     Definition(Definition),\n     /// `None` in `if let None = Some(82) {}`\n     ConstReference(Definition),\n+    FieldShorthand {\n+        local: Local,\n+        field: Definition,\n+    },\n }\n \n impl NameClass {\n     pub fn into_definition(self) -> Option<Definition> {\n         match self {\n             NameClass::Definition(it) => Some(it),\n             NameClass::ConstReference(_) => None,\n+            NameClass::FieldShorthand { local: _, field } => Some(field),\n         }\n     }\n \n     pub fn definition(self) -> Definition {\n         match self {\n             NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n+            NameClass::FieldShorthand { local, field: _ } => Definition::Local(local),\n         }\n     }\n }\n \n pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<NameClass> {\n     let _p = profile(\"classify_name\");\n \n-    if let Some(bind_pat) = name.syntax().parent().and_then(ast::BindPat::cast) {\n+    let parent = name.syntax().parent()?;\n+\n+    if let Some(bind_pat) = ast::BindPat::cast(parent.clone()) {\n         if let Some(def) = sema.resolve_bind_pat_to_const(&bind_pat) {\n             return Some(NameClass::ConstReference(Definition::ModuleDef(def)));\n         }\n     }\n \n-    classify_name_inner(sema, name).map(NameClass::Definition)\n-}\n-\n-fn classify_name_inner(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<Definition> {\n-    let parent = name.syntax().parent()?;\n-\n     match_ast! {\n         match parent {\n             ast::Alias(it) => {\n@@ -123,69 +125,71 @@ fn classify_name_inner(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Opti\n                 let name_ref = path_segment.name_ref()?;\n                 let name_ref_class = classify_name_ref(sema, &name_ref)?;\n \n-                Some(name_ref_class.definition())\n+                Some(NameClass::Definition(name_ref_class.definition()))\n             },\n             ast::BindPat(it) => {\n+                let local = sema.to_def(&it)?;\n+\n                 if let Some(record_field_pat) = it.syntax().parent().and_then(ast::RecordFieldPat::cast) {\n-                    return Some(Definition::Field(\n-                        sema.resolve_record_field_pat(&record_field_pat)?\n-                    ));\n+                    if let Some(field) = sema.resolve_record_field_pat(&record_field_pat) {\n+                        let field = Definition::Field(field);\n+                        return Some(NameClass::FieldShorthand { local, field });\n+                    }\n                 }\n \n-                let local = sema.to_def(&it)?;\n-                Some(Definition::Local(local))\n+                Some(NameClass::Definition(Definition::Local(local)))\n             },\n             ast::RecordFieldDef(it) => {\n                 let field: hir::Field = sema.to_def(&it)?;\n-                Some(Definition::Field(field))\n+                Some(NameClass::Definition(Definition::Field(field)))\n             },\n             ast::Module(it) => {\n                 let def = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::StructDef(it) => {\n                 let def: hir::Struct = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::UnionDef(it) => {\n                 let def: hir::Union = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::EnumDef(it) => {\n                 let def: hir::Enum = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::TraitDef(it) => {\n                 let def: hir::Trait = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::StaticDef(it) => {\n                 let def: hir::Static = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::EnumVariant(it) => {\n                 let def: hir::EnumVariant = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::FnDef(it) => {\n                 let def: hir::Function = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::ConstDef(it) => {\n                 let def: hir::Const = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::TypeAliasDef(it) => {\n                 let def: hir::TypeAlias = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::MacroCall(it) => {\n                 let def = sema.to_def(&it)?;\n-                Some(Definition::Macro(def))\n+                Some(NameClass::Definition(Definition::Macro(def)))\n             },\n             ast::TypeParam(it) => {\n                 let def = sema.to_def(&it)?;\n-                Some(Definition::TypeParam(def))\n+                Some(NameClass::Definition(Definition::TypeParam(def)))\n             },\n             _ => None,\n         }"}]}