{"sha": "597efd6cec5d1d3f7560007cfff520e13c32af64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5N2VmZDZjZWM1ZDFkM2Y3NTYwMDA3Y2ZmZjUyMGUxM2MzMmFmNjQ=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-04-23T16:24:55Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-04-25T21:14:31Z"}, "message": "Re-enable test", "tree": {"sha": "cf8617fe5839be8f72b39645a7cc11e8af225e55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf8617fe5839be8f72b39645a7cc11e8af225e55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/597efd6cec5d1d3f7560007cfff520e13c32af64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/597efd6cec5d1d3f7560007cfff520e13c32af64", "html_url": "https://github.com/rust-lang/rust/commit/597efd6cec5d1d3f7560007cfff520e13c32af64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/597efd6cec5d1d3f7560007cfff520e13c32af64/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ab8619d2010a6f7ee333502a19c102bbbf15bd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab8619d2010a6f7ee333502a19c102bbbf15bd3", "html_url": "https://github.com/rust-lang/rust/commit/8ab8619d2010a6f7ee333502a19c102bbbf15bd3"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "cc42bd9b08b80f85120358bb68c044bc819e9e3a", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/597efd6cec5d1d3f7560007cfff520e13c32af64/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/597efd6cec5d1d3f7560007cfff520e13c32af64/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=597efd6cec5d1d3f7560007cfff520e13c32af64", "patch": "@@ -1835,29 +1835,31 @@ fn decode_item_ast(par_doc: rbml::Doc) -> ast::Item {\n }\n \n #[cfg(test)]\n-trait fake_ext_ctxt {\n+trait FakeExtCtxt {\n+    fn call_site(&self) -> codemap::Span;\n     fn cfg(&self) -> ast::CrateConfig;\n-    fn parse_sess<'a>(&'a self) -> &'a parse::ParseSess;\n-    fn call_site(&self) -> Span;\n     fn ident_of(&self, st: &str) -> ast::Ident;\n+    fn name_of(&self, st: &str) -> ast::Name;\n+    fn parse_sess(&self) -> &parse::ParseSess;\n }\n \n #[cfg(test)]\n-impl fake_ext_ctxt for parse::ParseSess {\n-    fn cfg(&self) -> ast::CrateConfig {\n-        Vec::new()\n-    }\n-    fn parse_sess<'a>(&'a self) -> &'a parse::ParseSess { self }\n-    fn call_site(&self) -> Span {\n+impl FakeExtCtxt for parse::ParseSess {\n+    fn call_site(&self) -> codemap::Span {\n         codemap::Span {\n             lo: codemap::BytePos(0),\n             hi: codemap::BytePos(0),\n-            expn_id: codemap::NO_EXPANSION\n+            expn_id: codemap::NO_EXPANSION,\n         }\n     }\n+    fn cfg(&self) -> ast::CrateConfig { Vec::new() }\n     fn ident_of(&self, st: &str) -> ast::Ident {\n-        token::str_to_ident(st)\n+        parse::token::str_to_ident(st)\n+    }\n+    fn name_of(&self, st: &str) -> ast::Name {\n+        parse::token::intern(st)\n     }\n+    fn parse_sess(&self) -> &parse::ParseSess { self }\n }\n \n #[cfg(test)]\n@@ -1883,15 +1885,14 @@ fn test_basic() {\n         fn foo() {}\n     ));\n }\n-/* NOTE: When there's a snapshot, update this (yay quasiquoter!)\n+\n #[test]\n fn test_smalltalk() {\n     let cx = mk_ctxt();\n     roundtrip(quote_item!(&cx,\n         fn foo() -> isize { 3 + 4 } // first smalltalk program ever executed.\n     ));\n }\n-*/\n \n #[test]\n fn test_more() {"}]}