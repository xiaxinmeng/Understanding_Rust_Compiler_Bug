{"sha": "b97642758fb2c060ec689c540576d308fc081f1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NzY0Mjc1OGZiMmMwNjBlYzY4OWM1NDA1NzZkMzA4ZmMwODFmMWU=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-05-20T00:18:56Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-05-20T02:09:32Z"}, "message": "Fix LLVMConst{I,F}Cmp", "tree": {"sha": "9b59d5c3f379698663acab1560e8ab525338e19f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b59d5c3f379698663acab1560e8ab525338e19f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b97642758fb2c060ec689c540576d308fc081f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b97642758fb2c060ec689c540576d308fc081f1e", "html_url": "https://github.com/rust-lang/rust/commit/b97642758fb2c060ec689c540576d308fc081f1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b97642758fb2c060ec689c540576d308fc081f1e/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e42fcb958cd89d11dbe8f493cfac0a1fca4b1bb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e42fcb958cd89d11dbe8f493cfac0a1fca4b1bb1", "html_url": "https://github.com/rust-lang/rust/commit/e42fcb958cd89d11dbe8f493cfac0a1fca4b1bb1"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "bf3d09d848dadfc9cf1a391a535acf25d0d078f8", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b97642758fb2c060ec689c540576d308fc081f1e/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97642758fb2c060ec689c540576d308fc081f1e/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=b97642758fb2c060ec689c540576d308fc081f1e", "patch": "@@ -220,7 +220,6 @@ pub mod llvm {\n     use super::{ObjectFileRef, Opcode, PassManagerRef, PassManagerBuilderRef};\n     use super::{SectionIteratorRef, TargetDataRef, TypeKind, TypeRef, UseRef};\n     use super::{ValueRef};\n-    use super::{IntPredicate, RealPredicate};\n \n     use core::libc::{c_char, c_int, c_longlong, c_uint, c_ulonglong};\n \n@@ -453,9 +452,9 @@ pub mod llvm {\n         #[fast_ffi]\n         pub unsafe fn LLVMConstAllOnes(Ty: TypeRef) -> ValueRef;\n         #[fast_ffi]\n-        pub unsafe fn LLVMConstICmp(Pred: IntPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef;\n+        pub unsafe fn LLVMConstICmp(Pred: c_uint, V1: ValueRef, V2: ValueRef) -> ValueRef;\n         #[fast_ffi]\n-        pub unsafe fn LLVMConstFCmp(Pred: RealPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef;\n+        pub unsafe fn LLVMConstFCmp(Pred: c_uint, V1: ValueRef, V2: ValueRef) -> ValueRef;\n         /* only for int/vector */\n         #[fast_ffi]\n         pub unsafe fn LLVMGetUndef(Ty: TypeRef) -> ValueRef;\n@@ -1919,6 +1918,16 @@ pub fn SetLinkage(Global: ValueRef, Link: Linkage) {\n     }\n }\n \n+pub fn ConstICmp(Pred: IntPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef {\n+    unsafe {\n+        llvm::LLVMConstICmp(Pred as c_uint, V1, V2)\n+    }\n+}\n+pub fn ConstFCmp(Pred: RealPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef {\n+    unsafe {\n+        llvm::LLVMConstICmp(Pred as c_uint, V1, V2)\n+    }\n+}\n /* Memory-managed object interface to type handles. */\n \n pub struct TypeNames {"}, {"sha": "22014fa330414a56a03820925b1d96ce45160f73", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b97642758fb2c060ec689c540576d308fc081f1e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97642758fb2c060ec689c540576d308fc081f1e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=b97642758fb2c060ec689c540576d308fc081f1e", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n use back::abi;\n-use lib::llvm::{llvm, SetLinkage, PrivateLinkage, ValueRef, TypeRef, Bool, True, False};\n+use lib::llvm::{llvm, ConstFCmp, ConstICmp, SetLinkage, PrivateLinkage, ValueRef, TypeRef, Bool,\n+    True, False};\n use lib::llvm::{IntEQ, IntNE, IntUGT, IntUGE, IntULT, IntULE, IntSGT, IntSGE, IntSLT, IntSLE,\n     RealOEQ, RealOGT, RealOGE, RealOLT, RealOLE, RealONE};\n \n@@ -293,39 +294,39 @@ fn const_expr_unadjusted(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n                 else      { llvm::LLVMConstLShr(te1, te2) }\n               }\n               ast::eq     => {\n-                  if is_float { llvm::LLVMConstFCmp(RealOEQ, te1, te2) }\n-                  else        { llvm::LLVMConstICmp(IntEQ, te1, te2)   }\n+                  if is_float { ConstFCmp(RealOEQ, te1, te2) }\n+                  else        { ConstICmp(IntEQ, te1, te2)   }\n               },\n               ast::lt     => {\n-                  if is_float { llvm::LLVMConstFCmp(RealOLT, te1, te2) }\n+                  if is_float { ConstFCmp(RealOLT, te1, te2) }\n                   else        {\n-                      if signed { llvm::LLVMConstICmp(IntSLT, te1, te2) }\n-                      else      { llvm::LLVMConstICmp(IntULT, te1, te2) }\n+                      if signed { ConstICmp(IntSLT, te1, te2) }\n+                      else      { ConstICmp(IntULT, te1, te2) }\n                   }\n               },\n               ast::le     => {\n-                  if is_float { llvm::LLVMConstFCmp(RealOLE, te1, te2) }\n+                  if is_float { ConstFCmp(RealOLE, te1, te2) }\n                   else        {\n-                      if signed { llvm::LLVMConstICmp(IntSLE, te1, te2) }\n-                      else      { llvm::LLVMConstICmp(IntULE, te1, te2) }\n+                      if signed { ConstICmp(IntSLE, te1, te2) }\n+                      else      { ConstICmp(IntULE, te1, te2) }\n                   }\n               },\n               ast::ne     => {\n-                  if is_float { llvm::LLVMConstFCmp(RealONE, te1, te2) }\n-                  else        { llvm::LLVMConstICmp(IntNE, te1, te2) }\n+                  if is_float { ConstFCmp(RealONE, te1, te2) }\n+                  else        { ConstICmp(IntNE, te1, te2) }\n               },\n               ast::ge     => {\n-                  if is_float { llvm::LLVMConstFCmp(RealOGE, te1, te2) }\n+                  if is_float { ConstFCmp(RealOGE, te1, te2) }\n                   else        {\n-                      if signed { llvm::LLVMConstICmp(IntSGE, te1, te2) }\n-                      else      { llvm::LLVMConstICmp(IntUGE, te1, te2) }\n+                      if signed { ConstICmp(IntSGE, te1, te2) }\n+                      else      { ConstICmp(IntUGE, te1, te2) }\n                   }\n               },\n               ast::gt     => {\n-                  if is_float { llvm::LLVMConstFCmp(RealOGT, te1, te2) }\n+                  if is_float { ConstFCmp(RealOGT, te1, te2) }\n                   else        {\n-                      if signed { llvm::LLVMConstICmp(IntSGT, te1, te2) }\n-                      else      { llvm::LLVMConstICmp(IntUGT, te1, te2) }\n+                      if signed { ConstICmp(IntSGT, te1, te2) }\n+                      else      { ConstICmp(IntUGT, te1, te2) }\n                   }\n               },\n             };"}]}