{"sha": "c86c9339e6991dbf9a9a4ae210492e94b142a728", "node_id": "C_kwDOAAsO6NoAKGM4NmM5MzM5ZTY5OTFkYmY5YTlhNGFlMjEwNDkyZTk0YjE0MmE3Mjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-06T16:42:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-06T16:42:57Z"}, "message": "Rollup merge of #109755 - compiler-errors:new-solver-generator-witness-mir, r=cjgillot\n\nImplement support for `GeneratorWitnessMIR` in new solver\n\nr? ```@cjgillot```\n\nI mostly want this to cut down the number of failing UI tests when running the UI test suite with `--compare-mode=next-solver`, but there doesn't seem like much reason to block implementing this since it adds minimal complexity to the existing structural traits impl in the new solver.\n\nIf others are against adding this for some reason, then maybe we should just make `GeneratorWitnessMIR` return `NoSolution` for these traits. Anything but an ICE please :smile_cat: :ice_cube:", "tree": {"sha": "65c76c7e34cc6c4c0248794d0ac4183c1e163edf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65c76c7e34cc6c4c0248794d0ac4183c1e163edf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c86c9339e6991dbf9a9a4ae210492e94b142a728", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkLvaRCRBK7hj4Ov3rIwAAWuUIAFn1xysMkntRT9SugXImkaYO\npLixVYLFPZP7Tiv592tdq0zIfv1PtJS0U7Kpwn+TypDRGknJQuDayT8zLnn5Qc1u\n7AGkQ+ro2DDtglrOnFZjWvHZ42ZqBs6b3NtVk2vMl+qGRdlRRumk3WSbT0obUObd\nSMKlVTvP6l3Ww1q/XfGPKDpznZBw3wtoPWyVDyuBKGtijkGPyDB5x1FoAdCm1HHu\nYgyT/8TuSNWLsRvj4a2Hvtra4b3b4tacLw0BqT1QF/DTYx6wPhiK4ynzteYM4H66\nGSkk0sKEfpLXk1gB/1qp61PM5wC4EnTHsesre1CjbRqgANP52KmL9FKDoYXf+wE=\n=vzh2\n-----END PGP SIGNATURE-----\n", "payload": "tree 65c76c7e34cc6c4c0248794d0ac4183c1e163edf\nparent 3e21d6875f90eb0bc12833f73f56ec30cad6c1bd\nparent 4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1680799377 +0200\ncommitter GitHub <noreply@github.com> 1680799377 +0200\n\nRollup merge of #109755 - compiler-errors:new-solver-generator-witness-mir, r=cjgillot\n\nImplement support for `GeneratorWitnessMIR` in new solver\n\nr? ```@cjgillot```\n\nI mostly want this to cut down the number of failing UI tests when running the UI test suite with `--compare-mode=next-solver`, but there doesn't seem like much reason to block implementing this since it adds minimal complexity to the existing structural traits impl in the new solver.\n\nIf others are against adding this for some reason, then maybe we should just make `GeneratorWitnessMIR` return `NoSolution` for these traits. Anything but an ICE please :smile_cat: :ice_cube:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c86c9339e6991dbf9a9a4ae210492e94b142a728", "html_url": "https://github.com/rust-lang/rust/commit/c86c9339e6991dbf9a9a4ae210492e94b142a728", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c86c9339e6991dbf9a9a4ae210492e94b142a728/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e21d6875f90eb0bc12833f73f56ec30cad6c1bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e21d6875f90eb0bc12833f73f56ec30cad6c1bd", "html_url": "https://github.com/rust-lang/rust/commit/3e21d6875f90eb0bc12833f73f56ec30cad6c1bd"}, {"sha": "4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996", "html_url": "https://github.com/rust-lang/rust/commit/4a4fc3bb5b1efe6857cf5d6c0b554ff36b966996"}], "stats": {"total": 93, "additions": 90, "deletions": 3}, "files": [{"sha": "4a3b7e42bac15204bfb6f3b4fa5f0cf4d138e35e", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c86c9339e6991dbf9a9a4ae210492e94b142a728/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86c9339e6991dbf9a9a4ae210492e94b142a728/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=c86c9339e6991dbf9a9a4ae210492e94b142a728", "patch": "@@ -1,7 +1,9 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{def_id::DefId, Movability, Mutability};\n use rustc_infer::traits::query::NoSolution;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::{\n+    self, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitableExt,\n+};\n \n use crate::solve::EvalCtxt;\n \n@@ -60,7 +62,16 @@ pub(super) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n \n         ty::GeneratorWitness(types) => Ok(ecx.instantiate_binder_with_placeholders(types).to_vec()),\n \n-        ty::GeneratorWitnessMIR(..) => todo!(),\n+        ty::GeneratorWitnessMIR(def_id, substs) => Ok(ecx\n+            .tcx()\n+            .generator_hidden_types(def_id)\n+            .map(|bty| {\n+                ecx.instantiate_binder_with_placeholders(replace_erased_lifetimes_with_bound_vars(\n+                    tcx,\n+                    bty.subst(tcx, substs),\n+                ))\n+            })\n+            .collect()),\n \n         // For `PhantomData<T>`, we pass `T`.\n         ty::Adt(def, substs) if def.is_phantom_data() => Ok(vec![substs.type_at(0)]),\n@@ -76,6 +87,29 @@ pub(super) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n     }\n }\n \n+fn replace_erased_lifetimes_with_bound_vars<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+) -> ty::Binder<'tcx, Ty<'tcx>> {\n+    debug_assert!(!ty.has_late_bound_regions());\n+    let mut counter = 0;\n+    let ty = tcx.fold_regions(ty, |mut r, current_depth| {\n+        if let ty::ReErased = r.kind() {\n+            let br = ty::BoundRegion {\n+                var: ty::BoundVar::from_u32(counter),\n+                kind: ty::BrAnon(counter, None),\n+            };\n+            counter += 1;\n+            r = tcx.mk_re_late_bound(current_depth, br);\n+        }\n+        r\n+    });\n+    let bound_vars = tcx.mk_bound_variable_kinds_from_iter(\n+        (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i, None))),\n+    );\n+    ty::Binder::bind_with_vars(ty, bound_vars)\n+}\n+\n pub(super) fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n     ecx: &EvalCtxt<'_, 'tcx>,\n     ty: Ty<'tcx>,\n@@ -178,7 +212,16 @@ pub(super) fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n \n         ty::GeneratorWitness(types) => Ok(ecx.instantiate_binder_with_placeholders(types).to_vec()),\n \n-        ty::GeneratorWitnessMIR(..) => todo!(),\n+        ty::GeneratorWitnessMIR(def_id, substs) => Ok(ecx\n+            .tcx()\n+            .generator_hidden_types(def_id)\n+            .map(|bty| {\n+                ecx.instantiate_binder_with_placeholders(replace_erased_lifetimes_with_bound_vars(\n+                    ecx.tcx(),\n+                    bty.subst(ecx.tcx(), substs),\n+                ))\n+            })\n+            .collect()),\n     }\n }\n "}, {"sha": "6a926534e079b86622da3b93617306fb6a6fe74e", "filename": "tests/ui/traits/new-solver/auto-with-drop_tracking_mir.fail.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c86c9339e6991dbf9a9a4ae210492e94b142a728/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c86c9339e6991dbf9a9a4ae210492e94b142a728/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr?ref=c86c9339e6991dbf9a9a4ae210492e94b142a728", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: `impl Future<Output = ()>` cannot be sent between threads safely\n+  --> $DIR/auto-with-drop_tracking_mir.rs:24:13\n+   |\n+LL |     is_send(foo());\n+   |     ------- ^^^^^ `impl Future<Output = ()>` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Send` is not implemented for `impl Future<Output = ()>`\n+note: required by a bound in `is_send`\n+  --> $DIR/auto-with-drop_tracking_mir.rs:23:24\n+   |\n+LL |     fn is_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a5db7c4636b318be9853045cfffe4133b0de1681", "filename": "tests/ui/traits/new-solver/auto-with-drop_tracking_mir.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c86c9339e6991dbf9a9a4ae210492e94b142a728/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86c9339e6991dbf9a9a4ae210492e94b142a728/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs?ref=c86c9339e6991dbf9a9a4ae210492e94b142a728", "patch": "@@ -0,0 +1,26 @@\n+// compile-flags: -Ztrait-solver=next -Zdrop-tracking-mir\n+// edition: 2021\n+// revisions: pass fail\n+//[pass] check-pass\n+\n+#![feature(negative_impls)]\n+\n+struct NotSync;\n+impl !Sync for NotSync {}\n+\n+async fn foo() {\n+    #[cfg(pass)]\n+    let x = &();\n+    #[cfg(fail)]\n+    let x = &NotSync;\n+    bar().await;\n+    drop(x);\n+}\n+\n+async fn bar() {}\n+\n+fn main() {\n+    fn is_send(_: impl Send) {}\n+    is_send(foo());\n+    //[fail]~^ ERROR `impl Future<Output = ()>` cannot be sent between threads safely\n+}"}]}