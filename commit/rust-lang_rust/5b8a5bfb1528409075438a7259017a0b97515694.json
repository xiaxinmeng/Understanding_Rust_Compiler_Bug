{"sha": "5b8a5bfb1528409075438a7259017a0b97515694", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOGE1YmZiMTUyODQwOTA3NTQzOGE3MjU5MDE3YTBiOTc1MTU2OTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-07T10:52:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-07T10:52:09Z"}, "message": "Modernize unqualified reference completion tests", "tree": {"sha": "6fd21cbd04eddf7116b2b695d98b2e17c11eee7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fd21cbd04eddf7116b2b695d98b2e17c11eee7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b8a5bfb1528409075438a7259017a0b97515694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b8a5bfb1528409075438a7259017a0b97515694", "html_url": "https://github.com/rust-lang/rust/commit/5b8a5bfb1528409075438a7259017a0b97515694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b8a5bfb1528409075438a7259017a0b97515694/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b2847885de551cb83feaa31356b85e4e53dcda5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2847885de551cb83feaa31356b85e4e53dcda5", "html_url": "https://github.com/rust-lang/rust/commit/9b2847885de551cb83feaa31356b85e4e53dcda5"}], "stats": {"total": 1629, "additions": 415, "deletions": 1214}, "files": [{"sha": "72ff82e66ed18320ec5467c14cf30178348d831c", "filename": "crates/ra_ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 403, "deletions": 1195, "changes": 1598, "blob_url": "https://github.com/rust-lang/rust/blob/5b8a5bfb1528409075438a7259017a0b97515694/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8a5bfb1528409075438a7259017a0b97515694/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=5b8a5bfb1528409075438a7259017a0b97515694", "patch": "@@ -64,1370 +64,578 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n \n #[cfg(test)]\n mod tests {\n-    use insta::assert_debug_snapshot;\n+    use expect::{expect, Expect};\n     use test_utils::mark;\n \n-    use crate::completion::{test_utils::do_completion, CompletionItem, CompletionKind};\n+    use crate::completion::{\n+        test_utils::{check_edit, completion_list},\n+        CompletionKind,\n+    };\n \n-    fn do_reference_completion(ra_fixture: &str) -> Vec<CompletionItem> {\n-        do_completion(ra_fixture, CompletionKind::Reference)\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n+        expect.assert_eq(&actual)\n     }\n \n     #[test]\n     fn self_fulfilling_completion() {\n         mark::check!(self_fulfilling_completion);\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r#\"\n-                use foo<|>\n-                use std::collections;\n-                \"#,\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"collections\",\n-                source_range: 4..7,\n-                delete: 4..7,\n-                insert: \"collections\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+use foo<|>\n+use std::collections;\n+\"#,\n+            expect![[r#\"\n+                ?? collections\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn bind_pat_and_path_ignore_at() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                enum Enum {\n-                    A,\n-                    B,\n-                }\n-                fn quux(x: Option<Enum>) {\n-                    match x {\n-                        None => (),\n-                        Some(en<|> @ Enum::A) => (),\n-                    }\n-                }\n-                \"\n-            ),\n-            @\"[]\"\n+        check(\n+            r#\"\n+enum Enum { A, B }\n+fn quux(x: Option<Enum>) {\n+    match x {\n+        None => (),\n+        Some(en<|> @ Enum::A) => (),\n+    }\n+}\n+\"#,\n+            expect![[\"\"]],\n         );\n     }\n \n     #[test]\n     fn bind_pat_and_path_ignore_ref() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                enum Enum {\n-                    A,\n-                    B,\n-                }\n-                fn quux(x: Option<Enum>) {\n-                    match x {\n-                        None => (),\n-                        Some(ref en<|>) => (),\n-                    }\n-                }\n-                \"\n-            ),\n-            @r###\"[]\"###\n+        check(\n+            r#\"\n+enum Enum { A, B }\n+fn quux(x: Option<Enum>) {\n+    match x {\n+        None => (),\n+        Some(ref en<|>) => (),\n+    }\n+}\n+\"#,\n+            expect![[\"\"]],\n         );\n     }\n \n     #[test]\n     fn bind_pat_and_path() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                enum Enum {\n-                    A,\n-                    B,\n-                }\n-                fn quux(x: Option<Enum>) {\n-                    match x {\n-                        None => (),\n-                        Some(En<|>) => (),\n-                    }\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Enum\",\n-                source_range: 102..104,\n-                delete: 102..104,\n-                insert: \"Enum\",\n-                kind: Enum,\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+enum Enum { A, B }\n+fn quux(x: Option<Enum>) {\n+    match x {\n+        None => (),\n+        Some(En<|>) => (),\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                en Enum\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_bindings_from_let() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                fn quux(x: i32) {\n-                    let y = 92;\n-                    1 + <|>;\n-                    let z = ();\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"quux(\u2026)\",\n-                source_range: 42..42,\n-                delete: 42..42,\n-                insert: \"quux(${1:x})$0\",\n-                kind: Function,\n-                lookup: \"quux\",\n-                detail: \"fn quux(x: i32)\",\n-                trigger_call_info: true,\n-            },\n-            CompletionItem {\n-                label: \"x\",\n-                source_range: 42..42,\n-                delete: 42..42,\n-                insert: \"x\",\n-                kind: Binding,\n-                detail: \"i32\",\n-            },\n-            CompletionItem {\n-                label: \"y\",\n-                source_range: 42..42,\n-                delete: 42..42,\n-                insert: \"y\",\n-                kind: Binding,\n-                detail: \"i32\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+fn quux(x: i32) {\n+    let y = 92;\n+    1 + <|>;\n+    let z = ();\n+}\n+\"#,\n+            expect![[r#\"\n+                fn quux(\u2026) fn quux(x: i32)\n+                bn x       i32\n+                bn y       i32\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_bindings_from_if_let() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                fn quux() {\n-                    if let Some(x) = foo() {\n-                        let y = 92;\n-                    };\n-                    if let Some(a) = bar() {\n-                        let b = 62;\n-                        1 + <|>\n-                    }\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"a\",\n-                source_range: 129..129,\n-                delete: 129..129,\n-                insert: \"a\",\n-                kind: Binding,\n-            },\n-            CompletionItem {\n-                label: \"b\",\n-                source_range: 129..129,\n-                delete: 129..129,\n-                insert: \"b\",\n-                kind: Binding,\n-                detail: \"i32\",\n-            },\n-            CompletionItem {\n-                label: \"quux()\",\n-                source_range: 129..129,\n-                delete: 129..129,\n-                insert: \"quux()$0\",\n-                kind: Function,\n-                lookup: \"quux\",\n-                detail: \"fn quux()\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+fn quux() {\n+    if let Some(x) = foo() {\n+        let y = 92;\n+    };\n+    if let Some(a) = bar() {\n+        let b = 62;\n+        1 + <|>\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                bn a\n+                bn b      i32\n+                fn quux() fn quux()\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_bindings_from_for() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                fn quux() {\n-                    for x in &[1, 2, 3] {\n-                        <|>\n-                    }\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"quux()\",\n-                source_range: 46..46,\n-                delete: 46..46,\n-                insert: \"quux()$0\",\n-                kind: Function,\n-                lookup: \"quux\",\n-                detail: \"fn quux()\",\n-            },\n-            CompletionItem {\n-                label: \"x\",\n-                source_range: 46..46,\n-                delete: 46..46,\n-                insert: \"x\",\n-                kind: Binding,\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+fn quux() {\n+    for x in &[1, 2, 3] { <|> }\n+}\n+\"#,\n+            expect![[r#\"\n+                fn quux() fn quux()\n+                bn x\n+            \"#]],\n         );\n     }\n \n     #[test]\n-    fn completes_bindings_from_for_with_in_prefix() {\n-        mark::check!(completes_bindings_from_for_with_in_prefix);\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                fn test() {\n-                    for index in &[1, 2, 3] {\n-                        let t = in<|>\n-                    }\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"index\",\n-                source_range: 58..58,\n-                delete: 58..58,\n-                insert: \"index\",\n-                kind: Binding,\n-            },\n-            CompletionItem {\n-                label: \"test()\",\n-                source_range: 58..58,\n-                delete: 58..58,\n-                insert: \"test()$0\",\n-                kind: Function,\n-                lookup: \"test\",\n-                detail: \"fn test()\",\n-            },\n-        ]\n-        \"###\n-        );\n+    fn completes_if_prefix_is_keyword() {\n+        mark::check!(completes_if_prefix_is_keyword);\n+        check_edit(\n+            \"wherewolf\",\n+            r#\"\n+fn main() {\n+    let wherewolf = 92;\n+    drop(where<|>)\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let wherewolf = 92;\n+    drop(wherewolf)\n+}\n+\"#,\n+        )\n     }\n \n     #[test]\n     fn completes_generic_params() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                fn quux<T>() {\n-                    <|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"T\",\n-                source_range: 19..19,\n-                delete: 19..19,\n-                insert: \"T\",\n-                kind: TypeParam,\n-            },\n-            CompletionItem {\n-                label: \"quux()\",\n-                source_range: 19..19,\n-                delete: 19..19,\n-                insert: \"quux()$0\",\n-                kind: Function,\n-                lookup: \"quux\",\n-                detail: \"fn quux<T>()\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"fn quux<T>() { <|> }\"#,\n+            expect![[r#\"\n+                tp T\n+                fn quux() fn quux<T>()\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_generic_params_in_struct() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                struct X<T> {\n-                    x: <|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Self\",\n-                source_range: 21..21,\n-                delete: 21..21,\n-                insert: \"Self\",\n-                kind: TypeParam,\n-            },\n-            CompletionItem {\n-                label: \"T\",\n-                source_range: 21..21,\n-                delete: 21..21,\n-                insert: \"T\",\n-                kind: TypeParam,\n-            },\n-            CompletionItem {\n-                label: \"X<\u2026>\",\n-                source_range: 21..21,\n-                delete: 21..21,\n-                insert: \"X<$0>\",\n-                kind: Struct,\n-                lookup: \"X\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"struct S<T> { x: <|>}\"#,\n+            expect![[r#\"\n+                st S<\u2026>\n+                tp Self\n+                tp T\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_self_in_enum() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                enum X {\n-                    Y(<|>)\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Self\",\n-                source_range: 15..15,\n-                delete: 15..15,\n-                insert: \"Self\",\n-                kind: TypeParam,\n-            },\n-            CompletionItem {\n-                label: \"X\",\n-                source_range: 15..15,\n-                delete: 15..15,\n-                insert: \"X\",\n-                kind: Enum,\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"enum X { Y(<|>) }\"#,\n+            expect![[r#\"\n+                tp Self\n+                en X\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_module_items() {\n-        assert_debug_snapshot!(\n-        do_reference_completion(\n-            r\"\n-                struct Foo;\n-                enum Baz {}\n-                fn quux() {\n-                    <|>\n-                }\n-                \"\n-        ),\n-        @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Baz\",\n-                source_range: 40..40,\n-                delete: 40..40,\n-                insert: \"Baz\",\n-                kind: Enum,\n-            },\n-            CompletionItem {\n-                label: \"Foo\",\n-                source_range: 40..40,\n-                delete: 40..40,\n-                insert: \"Foo\",\n-                kind: Struct,\n-            },\n-            CompletionItem {\n-                label: \"quux()\",\n-                source_range: 40..40,\n-                delete: 40..40,\n-                insert: \"quux()$0\",\n-                kind: Function,\n-                lookup: \"quux\",\n-                detail: \"fn quux()\",\n-            },\n-        ]\n-        \"###\n-            );\n+        check(\n+            r#\"\n+struct S;\n+enum E {}\n+fn quux() { <|> }\n+\"#,\n+            expect![[r#\"\n+                en E\n+                st S\n+                fn quux() fn quux()\n+            \"#]],\n+        );\n     }\n \n     #[test]\n     fn completes_extern_prelude() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                //- /lib.rs\n-                use <|>;\n-\n-                //- /other_crate/lib.rs\n-                // nothing here\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"other_crate\",\n-                source_range: 4..4,\n-                delete: 4..4,\n-                insert: \"other_crate\",\n-                kind: Module,\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+//- /lib.rs\n+use <|>;\n+\n+//- /other_crate/lib.rs\n+// nothing here\n+\"#,\n+            expect![[r#\"\n+                md other_crate\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_module_items_in_nested_modules() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                struct Foo;\n-                mod m {\n-                    struct Bar;\n-                    fn quux() { <|> }\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Bar\",\n-                source_range: 52..52,\n-                delete: 52..52,\n-                insert: \"Bar\",\n-                kind: Struct,\n-            },\n-            CompletionItem {\n-                label: \"quux()\",\n-                source_range: 52..52,\n-                delete: 52..52,\n-                insert: \"quux()$0\",\n-                kind: Function,\n-                lookup: \"quux\",\n-                detail: \"fn quux()\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+struct Foo;\n+mod m {\n+    struct Bar;\n+    fn quux() { <|> }\n+}\n+\"#,\n+            expect![[r#\"\n+                st Bar\n+                fn quux() fn quux()\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_return_type() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                struct Foo;\n-                fn x() -> <|>\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Foo\",\n-                source_range: 22..22,\n-                delete: 22..22,\n-                insert: \"Foo\",\n-                kind: Struct,\n-            },\n-            CompletionItem {\n-                label: \"x()\",\n-                source_range: 22..22,\n-                delete: 22..22,\n-                insert: \"x()$0\",\n-                kind: Function,\n-                lookup: \"x\",\n-                detail: \"fn x()\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+struct Foo;\n+fn x() -> <|>\n+\"#,\n+            expect![[r#\"\n+                st Foo\n+                fn x() fn x()\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn dont_show_both_completions_for_shadowing() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                fn foo() {\n-                    let bar = 92;\n-                    {\n-                        let bar = 62;\n-                        <|>\n-                    }\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"bar\",\n-                source_range: 65..65,\n-                delete: 65..65,\n-                insert: \"bar\",\n-                kind: Binding,\n-                detail: \"i32\",\n-            },\n-            CompletionItem {\n-                label: \"foo()\",\n-                source_range: 65..65,\n-                delete: 65..65,\n-                insert: \"foo()$0\",\n-                kind: Function,\n-                lookup: \"foo\",\n-                detail: \"fn foo()\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+fn foo() {\n+    let bar = 92;\n+    {\n+        let bar = 62;\n+        drop(<|>)\n+    }\n+}\n+\"#,\n+            // FIXME: should be only one bar here\n+            expect![[r#\"\n+                bn bar   i32\n+                bn bar   i32\n+                fn foo() fn foo()\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_self_in_methods() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(r\"impl S { fn foo(&self) { <|> } }\"),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Self\",\n-                source_range: 25..25,\n-                delete: 25..25,\n-                insert: \"Self\",\n-                kind: TypeParam,\n-            },\n-            CompletionItem {\n-                label: \"self\",\n-                source_range: 25..25,\n-                delete: 25..25,\n-                insert: \"self\",\n-                kind: Binding,\n-                detail: \"&{unknown}\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"impl S { fn foo(&self) { <|> } }\"#,\n+            expect![[r#\"\n+                tp Self\n+                bn self &{unknown}\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_prelude() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /main.rs\n-                fn foo() { let x: <|> }\n-\n-                //- /std/lib.rs\n-                #[prelude_import]\n-                use prelude::*;\n-\n-                mod prelude {\n-                    struct Option;\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Option\",\n-                source_range: 18..18,\n-                delete: 18..18,\n-                insert: \"Option\",\n-                kind: Struct,\n-            },\n-            CompletionItem {\n-                label: \"foo()\",\n-                source_range: 18..18,\n-                delete: 18..18,\n-                insert: \"foo()$0\",\n-                kind: Function,\n-                lookup: \"foo\",\n-                detail: \"fn foo()\",\n-            },\n-            CompletionItem {\n-                label: \"std\",\n-                source_range: 18..18,\n-                delete: 18..18,\n-                insert: \"std\",\n-                kind: Module,\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+//- /main.rs\n+fn foo() { let x: <|> }\n+\n+//- /std/lib.rs\n+#[prelude_import]\n+use prelude::*;\n+\n+mod prelude { struct Option; }\n+\"#,\n+            expect![[r#\"\n+                st Option\n+                fn foo()  fn foo()\n+                md std\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_std_prelude_if_core_is_defined() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /main.rs\n-                fn foo() { let x: <|> }\n-\n-                //- /core/lib.rs\n-                #[prelude_import]\n-                use prelude::*;\n-\n-                mod prelude {\n-                    struct Option;\n-                }\n-\n-                //- /std/lib.rs\n-                #[prelude_import]\n-                use prelude::*;\n-\n-                mod prelude {\n-                    struct String;\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"String\",\n-                source_range: 18..18,\n-                delete: 18..18,\n-                insert: \"String\",\n-                kind: Struct,\n-            },\n-            CompletionItem {\n-                label: \"core\",\n-                source_range: 18..18,\n-                delete: 18..18,\n-                insert: \"core\",\n-                kind: Module,\n-            },\n-            CompletionItem {\n-                label: \"foo()\",\n-                source_range: 18..18,\n-                delete: 18..18,\n-                insert: \"foo()$0\",\n-                kind: Function,\n-                lookup: \"foo\",\n-                detail: \"fn foo()\",\n-            },\n-            CompletionItem {\n-                label: \"std\",\n-                source_range: 18..18,\n-                delete: 18..18,\n-                insert: \"std\",\n-                kind: Module,\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+//- /main.rs\n+fn foo() { let x: <|> }\n+\n+//- /core/lib.rs\n+#[prelude_import]\n+use prelude::*;\n+\n+mod prelude { struct Option; }\n+\n+//- /std/lib.rs\n+#[prelude_import]\n+use prelude::*;\n+\n+mod prelude { struct String; }\n+\"#,\n+            expect![[r#\"\n+                st String\n+                md core\n+                fn foo()  fn foo()\n+                md std\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_macros_as_value() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /main.rs\n-                macro_rules! foo {\n-                    () => {}\n-                }\n+        check(\n+            r#\"\n+macro_rules! foo { () => {} }\n \n-                #[macro_use]\n-                mod m1 {\n-                    macro_rules! bar {\n-                        () => {}\n-                    }\n-                }\n+#[macro_use]\n+mod m1 {\n+    macro_rules! bar { () => {} }\n+}\n \n-                mod m2 {\n-                    macro_rules! nope {\n-                        () => {}\n-                    }\n+mod m2 {\n+    macro_rules! nope { () => {} }\n \n-                    #[macro_export]\n-                    macro_rules! baz {\n-                        () => {}\n-                    }\n-                }\n+    #[macro_export]\n+    macro_rules! baz { () => {} }\n+}\n \n-                fn main() {\n-                    let v = <|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"bar!(\u2026)\",\n-                source_range: 256..256,\n-                delete: 256..256,\n-                insert: \"bar!($0)\",\n-                kind: Macro,\n-                lookup: \"bar!\",\n-                detail: \"macro_rules! bar\",\n-            },\n-            CompletionItem {\n-                label: \"baz!(\u2026)\",\n-                source_range: 256..256,\n-                delete: 256..256,\n-                insert: \"baz!($0)\",\n-                kind: Macro,\n-                lookup: \"baz!\",\n-                detail: \"#[macro_export]\\nmacro_rules! baz\",\n-            },\n-            CompletionItem {\n-                label: \"foo!(\u2026)\",\n-                source_range: 256..256,\n-                delete: 256..256,\n-                insert: \"foo!($0)\",\n-                kind: Macro,\n-                lookup: \"foo!\",\n-                detail: \"macro_rules! foo\",\n-            },\n-            CompletionItem {\n-                label: \"m1\",\n-                source_range: 256..256,\n-                delete: 256..256,\n-                insert: \"m1\",\n-                kind: Module,\n-            },\n-            CompletionItem {\n-                label: \"m2\",\n-                source_range: 256..256,\n-                delete: 256..256,\n-                insert: \"m2\",\n-                kind: Module,\n-            },\n-            CompletionItem {\n-                label: \"main()\",\n-                source_range: 256..256,\n-                delete: 256..256,\n-                insert: \"main()$0\",\n-                kind: Function,\n-                lookup: \"main\",\n-                detail: \"fn main()\",\n-            },\n-        ]\n-        \"###\n+fn main() { let v = <|> }\n+\"#,\n+            expect![[r##\"\n+                ma bar!(\u2026) macro_rules! bar\n+                ma baz!(\u2026) #[macro_export]\n+                macro_rules! baz\n+                ma foo!(\u2026) macro_rules! foo\n+                md m1\n+                md m2\n+                fn main()  fn main()\n+            \"##]],\n         );\n     }\n \n     #[test]\n     fn completes_both_macro_and_value() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /main.rs\n-                macro_rules! foo {\n-                    () => {}\n-                }\n-\n-                fn foo() {\n-                    <|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"foo!(\u2026)\",\n-                source_range: 50..50,\n-                delete: 50..50,\n-                insert: \"foo!($0)\",\n-                kind: Macro,\n-                lookup: \"foo!\",\n-                detail: \"macro_rules! foo\",\n-            },\n-            CompletionItem {\n-                label: \"foo()\",\n-                source_range: 50..50,\n-                delete: 50..50,\n-                insert: \"foo()$0\",\n-                kind: Function,\n-                lookup: \"foo\",\n-                detail: \"fn foo()\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+macro_rules! foo { () => {} }\n+fn foo() { <|> }\n+\"#,\n+            expect![[r#\"\n+                ma foo!(\u2026) macro_rules! foo\n+                fn foo()   fn foo()\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_macros_as_type() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /main.rs\n-                macro_rules! foo {\n-                    () => {}\n-                }\n-\n-                fn main() {\n-                    let x: <|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"foo!(\u2026)\",\n-                source_range: 58..58,\n-                delete: 58..58,\n-                insert: \"foo!($0)\",\n-                kind: Macro,\n-                lookup: \"foo!\",\n-                detail: \"macro_rules! foo\",\n-            },\n-            CompletionItem {\n-                label: \"main()\",\n-                source_range: 58..58,\n-                delete: 58..58,\n-                insert: \"main()$0\",\n-                kind: Function,\n-                lookup: \"main\",\n-                detail: \"fn main()\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+macro_rules! foo { () => {} }\n+fn main() { let x: <|> }\n+\"#,\n+            expect![[r#\"\n+                ma foo!(\u2026) macro_rules! foo\n+                fn main()  fn main()\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_macros_as_stmt() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /main.rs\n-                macro_rules! foo {\n-                    () => {}\n-                }\n-\n-                fn main() {\n-                    <|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"foo!(\u2026)\",\n-                source_range: 51..51,\n-                delete: 51..51,\n-                insert: \"foo!($0)\",\n-                kind: Macro,\n-                lookup: \"foo!\",\n-                detail: \"macro_rules! foo\",\n-            },\n-            CompletionItem {\n-                label: \"main()\",\n-                source_range: 51..51,\n-                delete: 51..51,\n-                insert: \"main()$0\",\n-                kind: Function,\n-                lookup: \"main\",\n-                detail: \"fn main()\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+macro_rules! foo { () => {} }\n+fn main() { <|> }\n+\"#,\n+            expect![[r#\"\n+                ma foo!(\u2026) macro_rules! foo\n+                fn main()  fn main()\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_local_item() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /main.rs\n-                fn main() {\n-                    return f<|>;\n-                    fn frobnicate() {}\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"frobnicate()\",\n-                source_range: 23..24,\n-                delete: 23..24,\n-                insert: \"frobnicate()$0\",\n-                kind: Function,\n-                lookup: \"frobnicate\",\n-                detail: \"fn frobnicate()\",\n-            },\n-            CompletionItem {\n-                label: \"main()\",\n-                source_range: 23..24,\n-                delete: 23..24,\n-                insert: \"main()$0\",\n-                kind: Function,\n-                lookup: \"main\",\n-                detail: \"fn main()\",\n-            },\n-        ]\n-        \"###\n-        )\n+        check(\n+            r#\"\n+fn main() {\n+    return f<|>;\n+    fn frobnicate() {}\n+}\n+\"#,\n+            expect![[r#\"\n+                fn frobnicate() fn frobnicate()\n+                fn main()       fn main()\n+            \"#]],\n+        );\n     }\n \n     #[test]\n     fn completes_in_simple_macro_1() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                macro_rules! m { ($e:expr) => { $e } }\n-                fn quux(x: i32) {\n-                    let y = 92;\n-                    m!(<|>);\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"m!(\u2026)\",\n-                source_range: 80..80,\n-                delete: 80..80,\n-                insert: \"m!($0)\",\n-                kind: Macro,\n-                lookup: \"m!\",\n-                detail: \"macro_rules! m\",\n-            },\n-            CompletionItem {\n-                label: \"quux(\u2026)\",\n-                source_range: 80..80,\n-                delete: 80..80,\n-                insert: \"quux(${1:x})$0\",\n-                kind: Function,\n-                lookup: \"quux\",\n-                detail: \"fn quux(x: i32)\",\n-                trigger_call_info: true,\n-            },\n-            CompletionItem {\n-                label: \"x\",\n-                source_range: 80..80,\n-                delete: 80..80,\n-                insert: \"x\",\n-                kind: Binding,\n-                detail: \"i32\",\n-            },\n-            CompletionItem {\n-                label: \"y\",\n-                source_range: 80..80,\n-                delete: 80..80,\n-                insert: \"y\",\n-                kind: Binding,\n-                detail: \"i32\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+macro_rules! m { ($e:expr) => { $e } }\n+fn quux(x: i32) {\n+    let y = 92;\n+    m!(<|>);\n+}\n+\"#,\n+            expect![[r#\"\n+                ma m!(\u2026)   macro_rules! m\n+                fn quux(\u2026) fn quux(x: i32)\n+                bn x       i32\n+                bn y       i32\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_in_simple_macro_2() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                macro_rules! m { ($e:expr) => { $e } }\n-                fn quux(x: i32) {\n-                    let y = 92;\n-                    m!(x<|>);\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"m!(\u2026)\",\n-                source_range: 80..81,\n-                delete: 80..81,\n-                insert: \"m!($0)\",\n-                kind: Macro,\n-                lookup: \"m!\",\n-                detail: \"macro_rules! m\",\n-            },\n-            CompletionItem {\n-                label: \"quux(\u2026)\",\n-                source_range: 80..81,\n-                delete: 80..81,\n-                insert: \"quux(${1:x})$0\",\n-                kind: Function,\n-                lookup: \"quux\",\n-                detail: \"fn quux(x: i32)\",\n-                trigger_call_info: true,\n-            },\n-            CompletionItem {\n-                label: \"x\",\n-                source_range: 80..81,\n-                delete: 80..81,\n-                insert: \"x\",\n-                kind: Binding,\n-                detail: \"i32\",\n-            },\n-            CompletionItem {\n-                label: \"y\",\n-                source_range: 80..81,\n-                delete: 80..81,\n-                insert: \"y\",\n-                kind: Binding,\n-                detail: \"i32\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r\"\n+macro_rules! m { ($e:expr) => { $e } }\n+fn quux(x: i32) {\n+    let y = 92;\n+    m!(x<|>);\n+}\n+\",\n+            expect![[r#\"\n+                ma m!(\u2026)   macro_rules! m\n+                fn quux(\u2026) fn quux(x: i32)\n+                bn x       i32\n+                bn y       i32\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_in_simple_macro_without_closing_parens() {\n-        assert_debug_snapshot!(\n-                    do_reference_completion(\n-                        r\"\n-                macro_rules! m { ($e:expr) => { $e } }\n-                fn quux(x: i32) {\n-                    let y = 92;\n-                    m!(x<|>\n-                }\n-                \"\n-                    ),\n-                    @r###\"\n-        [\n-            CompletionItem {\n-                label: \"m!(\u2026)\",\n-                source_range: 80..81,\n-                delete: 80..81,\n-                insert: \"m!($0)\",\n-                kind: Macro,\n-                lookup: \"m!\",\n-                detail: \"macro_rules! m\",\n-            },\n-            CompletionItem {\n-                label: \"quux(\u2026)\",\n-                source_range: 80..81,\n-                delete: 80..81,\n-                insert: \"quux(${1:x})$0\",\n-                kind: Function,\n-                lookup: \"quux\",\n-                detail: \"fn quux(x: i32)\",\n-                trigger_call_info: true,\n-            },\n-            CompletionItem {\n-                label: \"x\",\n-                source_range: 80..81,\n-                delete: 80..81,\n-                insert: \"x\",\n-                kind: Binding,\n-                detail: \"i32\",\n-            },\n-            CompletionItem {\n-                label: \"y\",\n-                source_range: 80..81,\n-                delete: 80..81,\n-                insert: \"y\",\n-                kind: Binding,\n-                detail: \"i32\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+macro_rules! m { ($e:expr) => { $e } }\n+fn quux(x: i32) {\n+    let y = 92;\n+    m!(x<|>\n+}\n+\"#,\n+            expect![[r#\"\n+                ma m!(\u2026)   macro_rules! m\n+                fn quux(\u2026) fn quux(x: i32)\n+                bn x       i32\n+                bn y       i32\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn completes_unresolved_uses() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                use spam::Quux;\n-\n-                fn main() {\n-                    <|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Quux\",\n-                source_range: 33..33,\n-                delete: 33..33,\n-                insert: \"Quux\",\n-            },\n-            CompletionItem {\n-                label: \"main()\",\n-                source_range: 33..33,\n-                delete: 33..33,\n-                insert: \"main()$0\",\n-                kind: Function,\n-                lookup: \"main\",\n-                detail: \"fn main()\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+use spam::Quux;\n+\n+fn main() { <|> }\n+\"#,\n+            expect![[r#\"\n+                ?? Quux\n+                fn main() fn main()\n+            \"#]],\n         );\n     }\n     #[test]\n     fn completes_enum_variant_matcharm() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                enum Foo {\n-                    Bar,\n-                    Baz,\n-                    Quux\n-                }\n+        check(\n+            r#\"\n+enum Foo { Bar, Baz, Quux }\n \n-                fn main() {\n-                    let foo = Foo::Quux;\n-\n-                    match foo {\n-                        Qu<|>\n-                    }\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Foo\",\n-                source_range: 103..105,\n-                delete: 103..105,\n-                insert: \"Foo\",\n-                kind: Enum,\n-            },\n-            CompletionItem {\n-                label: \"Foo::Bar\",\n-                source_range: 103..105,\n-                delete: 103..105,\n-                insert: \"Foo::Bar\",\n-                kind: EnumVariant,\n-                lookup: \"Bar\",\n-                detail: \"()\",\n-            },\n-            CompletionItem {\n-                label: \"Foo::Baz\",\n-                source_range: 103..105,\n-                delete: 103..105,\n-                insert: \"Foo::Baz\",\n-                kind: EnumVariant,\n-                lookup: \"Baz\",\n-                detail: \"()\",\n-            },\n-            CompletionItem {\n-                label: \"Foo::Quux\",\n-                source_range: 103..105,\n-                delete: 103..105,\n-                insert: \"Foo::Quux\",\n-                kind: EnumVariant,\n-                lookup: \"Quux\",\n-                detail: \"()\",\n-            },\n-        ]\n-        \"###\n+fn main() {\n+    let foo = Foo::Quux;\n+    match foo { Qu<|> }\n+}\n+\"#,\n+            expect![[r#\"\n+                en Foo\n+                ev Foo::Bar  ()\n+                ev Foo::Baz  ()\n+                ev Foo::Quux ()\n+            \"#]],\n         )\n     }\n \n     #[test]\n     fn completes_enum_variant_iflet() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                enum Foo {\n-                    Bar,\n-                    Baz,\n-                    Quux\n-                }\n-\n-                fn main() {\n-                    let foo = Foo::Quux;\n+        check(\n+            r#\"\n+enum Foo { Bar, Baz, Quux }\n \n-                    if let Qu<|> = foo {\n-\n-                    }\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Foo\",\n-                source_range: 90..92,\n-                delete: 90..92,\n-                insert: \"Foo\",\n-                kind: Enum,\n-            },\n-            CompletionItem {\n-                label: \"Foo::Bar\",\n-                source_range: 90..92,\n-                delete: 90..92,\n-                insert: \"Foo::Bar\",\n-                kind: EnumVariant,\n-                lookup: \"Bar\",\n-                detail: \"()\",\n-            },\n-            CompletionItem {\n-                label: \"Foo::Baz\",\n-                source_range: 90..92,\n-                delete: 90..92,\n-                insert: \"Foo::Baz\",\n-                kind: EnumVariant,\n-                lookup: \"Baz\",\n-                detail: \"()\",\n-            },\n-            CompletionItem {\n-                label: \"Foo::Quux\",\n-                source_range: 90..92,\n-                delete: 90..92,\n-                insert: \"Foo::Quux\",\n-                kind: EnumVariant,\n-                lookup: \"Quux\",\n-                detail: \"()\",\n-            },\n-        ]\n-        \"###\n+fn main() {\n+    let foo = Foo::Quux;\n+    if let Qu<|> = foo { }\n+}\n+\"#,\n+            expect![[r#\"\n+                en Foo\n+                ev Foo::Bar  ()\n+                ev Foo::Baz  ()\n+                ev Foo::Quux ()\n+            \"#]],\n         )\n     }\n \n     #[test]\n     fn completes_enum_variant_basic_expr() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                enum Foo {\n-                    Bar,\n-                    Baz,\n-                    Quux\n-                }\n-\n-                fn main() {\n-                    let foo: Foo = Q<|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Foo\",\n-                source_range: 72..73,\n-                delete: 72..73,\n-                insert: \"Foo\",\n-                kind: Enum,\n-            },\n-            CompletionItem {\n-                label: \"Foo::Bar\",\n-                source_range: 72..73,\n-                delete: 72..73,\n-                insert: \"Foo::Bar\",\n-                kind: EnumVariant,\n-                lookup: \"Bar\",\n-                detail: \"()\",\n-            },\n-            CompletionItem {\n-                label: \"Foo::Baz\",\n-                source_range: 72..73,\n-                delete: 72..73,\n-                insert: \"Foo::Baz\",\n-                kind: EnumVariant,\n-                lookup: \"Baz\",\n-                detail: \"()\",\n-            },\n-            CompletionItem {\n-                label: \"Foo::Quux\",\n-                source_range: 72..73,\n-                delete: 72..73,\n-                insert: \"Foo::Quux\",\n-                kind: EnumVariant,\n-                lookup: \"Quux\",\n-                detail: \"()\",\n-            },\n-            CompletionItem {\n-                label: \"main()\",\n-                source_range: 72..73,\n-                delete: 72..73,\n-                insert: \"main()$0\",\n-                kind: Function,\n-                lookup: \"main\",\n-                detail: \"fn main()\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+enum Foo { Bar, Baz, Quux }\n+fn main() { let foo: Foo = Q<|> }\n+\"#,\n+            expect![[r#\"\n+                en Foo\n+                ev Foo::Bar  ()\n+                ev Foo::Baz  ()\n+                ev Foo::Quux ()\n+                fn main()    fn main()\n+            \"#]],\n         )\n     }\n \n     #[test]\n     fn completes_enum_variant_from_module() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                mod m { pub enum E { V } }\n-\n-                fn f() -> m::E {\n-                    V<|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"f()\",\n-                source_range: 49..50,\n-                delete: 49..50,\n-                insert: \"f()$0\",\n-                kind: Function,\n-                lookup: \"f\",\n-                detail: \"fn f() -> m::E\",\n-            },\n-            CompletionItem {\n-                label: \"m\",\n-                source_range: 49..50,\n-                delete: 49..50,\n-                insert: \"m\",\n-                kind: Module,\n-            },\n-            CompletionItem {\n-                label: \"m::E::V\",\n-                source_range: 49..50,\n-                delete: 49..50,\n-                insert: \"m::E::V\",\n-                kind: EnumVariant,\n-                lookup: \"V\",\n-                detail: \"()\",\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+mod m { pub enum E { V } }\n+fn f() -> m::E { V<|> }\n+\"#,\n+            expect![[r#\"\n+                fn f()     fn f() -> m::E\n+                md m\n+                ev m::E::V ()\n+            \"#]],\n         )\n     }\n \n     #[test]\n     fn dont_complete_attr() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                struct Foo;\n-                #[<|>]\n-                fn f() {}\n-                \"\n-            ),\n-            @r###\"[]\"###\n+        check(\n+            r#\"\n+struct Foo;\n+#[<|>]\n+fn f() {}\n+\"#,\n+            expect![[\"\"]],\n         )\n     }\n }"}, {"sha": "7688a1483c70e3fde9bfc2b0a44ee30c706cedfd", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5b8a5bfb1528409075438a7259017a0b97515694/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8a5bfb1528409075438a7259017a0b97515694/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=5b8a5bfb1528409075438a7259017a0b97515694", "patch": "@@ -196,20 +196,11 @@ impl<'a> CompletionContext<'a> {\n     // The range of the identifier that is being completed.\n     pub(crate) fn source_range(&self) -> TextRange {\n         // check kind of macro-expanded token, but use range of original token\n-        match self.token.kind() {\n-            // workaroud when completion is triggered by trigger characters.\n-            IDENT => self.original_token.text_range(),\n-            _ => {\n-                // If we haven't characters between keyword and our cursor we take the keyword start range to edit\n-                if self.token.kind().is_keyword()\n-                    && self.offset == self.original_token.text_range().end()\n-                {\n-                    mark::hit!(completes_bindings_from_for_with_in_prefix);\n-                    TextRange::empty(self.original_token.text_range().start())\n-                } else {\n-                    TextRange::empty(self.offset)\n-                }\n-            }\n+        if self.token.kind() == IDENT || self.token.kind().is_keyword() {\n+            mark::hit!(completes_if_prefix_is_keyword);\n+            self.original_token.text_range()\n+        } else {\n+            TextRange::empty(self.offset)\n         }\n     }\n "}, {"sha": "d7011c9cf4ff506ae410ebf6637cf389e0b61f61", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8a5bfb1528409075438a7259017a0b97515694/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8a5bfb1528409075438a7259017a0b97515694/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=5b8a5bfb1528409075438a7259017a0b97515694", "patch": "@@ -123,6 +123,7 @@ pub enum CompletionItemKind {\n     TypeParam,\n     Macro,\n     Attribute,\n+    UnresolvedReference,\n }\n \n impl CompletionItemKind {\n@@ -147,6 +148,7 @@ impl CompletionItemKind {\n             CompletionItemKind::Trait => \"tt\",\n             CompletionItemKind::TypeAlias => \"ta\",\n             CompletionItemKind::TypeParam => \"tp\",\n+            CompletionItemKind::UnresolvedReference => \"??\",\n         }\n     }\n }"}, {"sha": "e4c57e41a07e661683f3dda2cad92a48b4a58bf2", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b8a5bfb1528409075438a7259017a0b97515694/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8a5bfb1528409075438a7259017a0b97515694/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=5b8a5bfb1528409075438a7259017a0b97515694", "patch": "@@ -79,11 +79,10 @@ impl Completions {\n                 return self.add_macro(ctx, Some(local_name), *mac);\n             }\n             ScopeDef::Unknown => {\n-                return self.add(CompletionItem::new(\n-                    CompletionKind::Reference,\n-                    ctx.source_range(),\n-                    local_name,\n-                ));\n+                return self.add(\n+                    CompletionItem::new(CompletionKind::Reference, ctx.source_range(), local_name)\n+                        .kind(CompletionItemKind::UnresolvedReference),\n+                );\n             }\n         };\n "}, {"sha": "7fa4ffbc6421e7a1363112ef15b69867a7caa157", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b8a5bfb1528409075438a7259017a0b97515694/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8a5bfb1528409075438a7259017a0b97515694/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=5b8a5bfb1528409075438a7259017a0b97515694", "patch": "@@ -100,6 +100,7 @@ pub(crate) fn completion_item_kind(\n         CompletionItemKind::TypeParam => lsp_types::CompletionItemKind::TypeParameter,\n         CompletionItemKind::Macro => lsp_types::CompletionItemKind::Method,\n         CompletionItemKind::Attribute => lsp_types::CompletionItemKind::EnumMember,\n+        CompletionItemKind::UnresolvedReference => lsp_types::CompletionItemKind::Reference,\n     }\n }\n "}]}