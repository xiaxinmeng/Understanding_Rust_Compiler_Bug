{"sha": "bdc3c4bf553ca10a1cbaeee8af061eef79417379", "node_id": "C_kwDOAAsO6NoAKGJkYzNjNGJmNTUzY2ExMGExY2JhZWVlOGFmMDYxZWVmNzk0MTczNzk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-12T20:09:34Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-14T17:50:20Z"}, "message": "Make print_type_sizes test not use feature(start)", "tree": {"sha": "053b8330fd12a75490b259237a8e36c9a996094c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/053b8330fd12a75490b259237a8e36c9a996094c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdc3c4bf553ca10a1cbaeee8af061eef79417379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc3c4bf553ca10a1cbaeee8af061eef79417379", "html_url": "https://github.com/rust-lang/rust/commit/bdc3c4bf553ca10a1cbaeee8af061eef79417379", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdc3c4bf553ca10a1cbaeee8af061eef79417379/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f5ae17f4efbd54c0d53451101044422e9b728ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f5ae17f4efbd54c0d53451101044422e9b728ad", "html_url": "https://github.com/rust-lang/rust/commit/5f5ae17f4efbd54c0d53451101044422e9b728ad"}], "stats": {"total": 164, "additions": 36, "deletions": 128}, "files": [{"sha": "1598b0696913b6e18dc59a2ed556a3505b3f9367", "filename": "src/test/ui/print_type_sizes/async.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fasync.rs?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,19 +1,11 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type lib\n // edition:2021\n // build-pass\n // ignore-pass\n \n-#![feature(start)]\n-\n async fn wait() {}\n \n-async fn test(arg: [u8; 8192]) {\n+pub async fn test(arg: [u8; 8192]) {\n     wait().await;\n     drop(arg);\n }\n-\n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n-    let _ = test([0; 8192]);\n-    0\n-}"}, {"sha": "6e47bb4930dc5306e8666c1e8fb7d407706398bc", "filename": "src/test/ui/print_type_sizes/async.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fasync.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fasync.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fasync.stdout?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,4 +1,4 @@\n-print-type-size type: `[async fn body@$DIR/async.rs:10:32: 13:2]`: 16386 bytes, alignment: 1 bytes\n+print-type-size type: `[async fn body@$DIR/async.rs:8:36: 11:2]`: 16386 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Suspend0`: 16385 bytes\n print-type-size         field `.arg`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n@@ -16,14 +16,14 @@ print-type-size type: `std::mem::MaybeUninit<[u8; 8192]>`: 8192 bytes, alignment\n print-type-size     variant `MaybeUninit`: 8192 bytes\n print-type-size         field `.uninit`: 0 bytes\n print-type-size         field `.value`: 8192 bytes\n-print-type-size type: `[async fn body@$DIR/async.rs:8:17: 8:19]`: 1 bytes, alignment: 1 bytes\n+print-type-size type: `[async fn body@$DIR/async.rs:6:17: 6:19]`: 1 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 0 bytes\n print-type-size     variant `Returned`: 0 bytes\n print-type-size     variant `Panicked`: 0 bytes\n-print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/async.rs:8:17: 8:19]>`: 1 bytes, alignment: 1 bytes\n+print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/async.rs:6:17: 6:19]>`: 1 bytes, alignment: 1 bytes\n print-type-size     field `.value`: 1 bytes\n-print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/async.rs:8:17: 8:19]>`: 1 bytes, alignment: 1 bytes\n+print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/async.rs:6:17: 6:19]>`: 1 bytes, alignment: 1 bytes\n print-type-size     variant `MaybeUninit`: 1 bytes\n print-type-size         field `.uninit`: 0 bytes\n print-type-size         field `.value`: 1 bytes"}, {"sha": "d1cd36274ef3e88970904b45708405415f0fa959", "filename": "src/test/ui/print_type_sizes/generator.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator.rs?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,8 +1,8 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n \n-#![feature(start, generators, generator_trait)]\n+#![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n \n@@ -13,8 +13,6 @@ fn generator<const C: usize>(array: [u8; C]) -> impl Generator<Yield = (), Retur\n     }\n }\n \n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n+pub fn foo() {\n     let _ = generator([0; 8192]);\n-    0\n }"}, {"sha": "1a85fe95bb6f771679ae01786c1bd89c56a2ab6f", "filename": "src/test/ui/print_type_sizes/generator_discr_placement.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,14 +1,13 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type lib\n // build-pass\n // ignore-pass\n \n // Tests a generator that has its discriminant as the *final* field.\n \n // Avoid emitting panic handlers, like the rest of these tests...\n-#![feature(start, generators)]\n+#![feature(generators)]\n \n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n+pub fn foo() {\n     let a = || {\n         {\n             let w: i32 = 4;\n@@ -21,5 +20,4 @@ fn start(_: isize, _: *const *const u8) -> isize {\n             drop(z);\n         }\n     };\n-    0\n }"}, {"sha": "7f8f4ccae7c14c6fbe752324f214fc2eced33820", "filename": "src/test/ui/print_type_sizes/generator_discr_placement.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,4 +1,4 @@\n-print-type-size type: `[generator@$DIR/generator_discr_placement.rs:12:13: 12:15]`: 8 bytes, alignment: 4 bytes\n+print-type-size type: `[generator@$DIR/generator_discr_placement.rs:11:13: 11:15]`: 8 bytes, alignment: 4 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Suspend0`: 7 bytes\n print-type-size         padding: 3 bytes"}, {"sha": "05097087d5a811e1c07a8e36bb50b755aa0941e6", "filename": "src/test/ui/print_type_sizes/generics.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n@@ -8,24 +8,6 @@\n // monomorphized, in the MIR of the original function in which they\n // occur, to have their size reported.\n \n-#![feature(start)]\n-\n-// In an ad-hoc attempt to avoid the injection of unwinding code\n-// (which clutters the output of `-Z print-type-sizes` with types from\n-// `unwind::libunwind`):\n-//\n-//   * I am not using Default to build values because that seems to\n-//     cause the injection of unwinding code. (Instead I just make `fn new`\n-//     methods.)\n-//\n-//   * Pair derive Copy to ensure that we don't inject\n-//     unwinding code into generic uses of Pair when T itself is also\n-//     Copy.\n-//\n-//     (I suspect this reflect some naivety within the rust compiler\n-//      itself; it should be checking for drop glue, i.e., a destructor\n-//      somewhere in the monomorphized types. It should not matter whether\n-//      the type is Copy.)\n #[derive(Copy, Clone)]\n pub struct Pair<T> {\n     _car: T,\n@@ -61,11 +43,9 @@ pub fn f1<T:Copy>(x: T) {\n         Pair::new(FiftyBytes::new(), FiftyBytes::new());\n }\n \n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n+pub fn start() {\n     let _b: Pair<u8> = Pair::new(0, 0);\n     let _s: Pair<SevenBytes> = Pair::new(SevenBytes::new(), SevenBytes::new());\n     let ref _z: ZeroSized = ZeroSized;\n     f1::<SevenBytes>(SevenBytes::new());\n-    0\n }"}, {"sha": "9159038924719f288091a30166a4a362b2a7fc07", "filename": "src/test/ui/print_type_sizes/multiple_types.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,23 +1,13 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n \n // This file illustrates that when multiple structural types occur in\n // a function, every one of them is included in the output.\n \n-#![feature(start)]\n-\n pub struct SevenBytes([u8;  7]);\n pub struct FiftyBytes([u8; 50]);\n \n pub enum Enum {\n     Small(SevenBytes),\n     Large(FiftyBytes),\n }\n-\n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n-    let _e: Enum;\n-    let _f: FiftyBytes;\n-    let _s: SevenBytes;\n-    0\n-}"}, {"sha": "5e620f248b65d35b1dd4243686249b7cb44aac46", "filename": "src/test/ui/print_type_sizes/niche-filling.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n@@ -14,7 +14,6 @@\n // aligned (while on most it is 8-byte aligned) and so the resulting\n // padding and overall computed sizes can be quite different.\n \n-#![feature(start)]\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n@@ -56,7 +55,7 @@ pub struct NestedNonZero {\n \n impl Default for NestedNonZero {\n     fn default() -> Self {\n-        NestedNonZero { pre: 0, val: NonZeroU32::new(1).unwrap(), post: 0 }\n+        NestedNonZero { pre: 0, val: unsafe { NonZeroU32::new_unchecked(1) }, post: 0 }\n     }\n }\n \n@@ -76,8 +75,7 @@ pub union Union2<A: Copy, B: Copy> {\n     b: B,\n }\n \n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n+pub fn test() {\n     let _x: MyOption<NonZeroU32> = Default::default();\n     let _y: EmbeddedDiscr = Default::default();\n     let _z: MyOption<IndirectNonZero> = Default::default();\n@@ -96,6 +94,4 @@ fn start(_: isize, _: *const *const u8) -> isize {\n     // ...even when theoretically possible.\n     let _j: MyOption<Union1<NonZeroU32>> = Default::default();\n     let _k: MyOption<Union2<NonZeroU32, NonZeroU32>> = Default::default();\n-\n-    0\n }"}, {"sha": "2ec5d9e64bfbfbad3de1496e7cdf2773002d6194", "filename": "src/test/ui/print_type_sizes/no_duplicates.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n@@ -8,16 +8,12 @@\n // (even if multiple functions), it is only printed once in the\n // print-type-sizes output.\n \n-#![feature(start)]\n-\n pub struct SevenBytes([u8; 7]);\n \n pub fn f1() {\n     let _s: SevenBytes = SevenBytes([0; 7]);\n }\n \n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n+pub fn test() {\n     let _s: SevenBytes = SevenBytes([0; 7]);\n-    0\n }"}, {"sha": "5ddfe4bf4dbb0a9bfaed5ac3a2a0a95547de2da9", "filename": "src/test/ui/print_type_sizes/packed.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n@@ -13,11 +13,10 @@\n // padding and overall computed sizes can be quite different.\n \n #![allow(dead_code)]\n-#![feature(start)]\n \n #[derive(Default)]\n #[repr(packed)]\n-struct Packed1 {\n+pub struct Packed1 {\n     a: u8,\n     b: u8,\n     g: i32,\n@@ -28,7 +27,7 @@ struct Packed1 {\n \n #[derive(Default)]\n #[repr(packed(2))]\n-struct Packed2 {\n+pub struct Packed2 {\n     a: u8,\n     b: u8,\n     g: i32,\n@@ -40,7 +39,7 @@ struct Packed2 {\n #[derive(Default)]\n #[repr(packed(2))]\n #[repr(C)]\n-struct Packed2C {\n+pub struct Packed2C {\n     a: u8,\n     b: u8,\n     g: i32,\n@@ -50,20 +49,11 @@ struct Packed2C {\n }\n \n #[derive(Default)]\n-struct Padded {\n+pub struct Padded {\n     a: u8,\n     b: u8,\n     g: i32,\n     c: u8,\n     h: i16,\n     d: u8,\n }\n-\n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n-    let _c: Packed1 = Default::default();\n-    let _d: Packed2 = Default::default();\n-    let _e: Packed2C = Default::default();\n-    let _f: Padded = Default::default();\n-    0\n-}"}, {"sha": "f41c677dc6c08ff7bd0a0b61c489b677fbd89b2c", "filename": "src/test/ui/print_type_sizes/padding.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n \n // This file illustrates how padding is handled: alignment\n@@ -9,7 +9,6 @@\n // aligned (while on most it is 8-byte aligned) and so the resulting\n // padding and overall computed sizes can be quite different.\n \n-#![feature(start)]\n #![allow(dead_code)]\n \n struct S {\n@@ -27,8 +26,3 @@ enum E2 {\n     A(i8, i32),\n     B(S),\n }\n-\n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n-    0\n-}"}, {"sha": "0bd11ebc958433a3369b7addf8a8d2213be792d2", "filename": "src/test/ui/print_type_sizes/repr-align.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n@@ -11,7 +11,7 @@\n // It avoids using u64/i64 because on some targets that is only 4-byte\n // aligned (while on most it is 8-byte aligned) and so the resulting\n // padding and overall computed sizes can be quite different.\n-#![feature(start)]\n+\n #![allow(dead_code)]\n \n #[repr(align(16))]\n@@ -24,15 +24,9 @@ enum E {\n }\n \n #[derive(Default)]\n-struct S {\n+pub struct S {\n     a: i32,\n     b: i32,\n     c: A,\n     d: i8,\n }\n-\n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n-    let _s: S = Default::default();\n-    0\n-}"}, {"sha": "6b103776a30d3c6c700a85cf3a242f4661edc8ee", "filename": "src/test/ui/print_type_sizes/repr_int_c.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr_int_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr_int_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr_int_c.rs?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,10 +1,9 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n \n // This test makes sure that the tag is not grown for `repr(C)` or `repr(u8)`\n // variants (see https://github.com/rust-lang/rust/issues/50098 for the original bug).\n \n-#![feature(start)]\n #![allow(dead_code)]\n \n #[repr(C, u8)]\n@@ -18,8 +17,3 @@ enum Repru8 {\n     A(u16),\n     B,\n }\n-\n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n-    0\n-}"}, {"sha": "86fab7b500af08030a7acca69d30b776a5724a3a", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,14 +1,12 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n //     FIXME: consider using an attribute instead of side-effects.\n \n #![feature(never_type)]\n-#![feature(start)]\n \n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n+pub fn test() {\n     let _x: Option<!> = None;\n     let _y: Result<u32, !> = Ok(42);\n     let _z: Result<!, !> = loop {};"}, {"sha": "5a3020520265db95a15f4857f10cfa2f0655e1ba", "filename": "src/test/ui/print_type_sizes/variants.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n \n // This file illustrates two things:\n@@ -9,18 +9,10 @@\n // 2. For an enum, the print-type-sizes output will also include the\n //    size of each variant.\n \n-#![feature(start)]\n-\n pub struct SevenBytes([u8;  7]);\n pub struct FiftyBytes([u8; 50]);\n \n pub enum Enum {\n     Small(SevenBytes),\n     Large(FiftyBytes),\n }\n-\n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n-    let _e: Enum;\n-    0\n-}"}, {"sha": "09415824d5df00835f9cda3dabbd4f5b9c4bc467", "filename": "src/test/ui/print_type_sizes/zero-sized-fields.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fzero-sized-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc3c4bf553ca10a1cbaeee8af061eef79417379/src%2Ftest%2Fui%2Fprint_type_sizes%2Fzero-sized-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fzero-sized-fields.rs?ref=bdc3c4bf553ca10a1cbaeee8af061eef79417379", "patch": "@@ -1,12 +1,10 @@\n-// compile-flags: -Z print-type-sizes\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n // build-pass\n // ignore-pass\n \n // At one point, zero-sized fields such as those in this file were causing\n // incorrect output from `-Z print-type-sizes`.\n \n-#![feature(start)]\n-\n struct S1 {\n     x: u32,\n     y: u32,\n@@ -28,8 +26,7 @@ struct S5<TagW, TagZ> {\n     tagz: TagZ,\n }\n \n-#[start]\n-fn start(_: isize, _: *const *const u8) -> isize {\n+pub fn test() {\n     let _s1: S1 = S1 { x: 0, y: 0, tag: () };\n \n     let _s5: S5<(), Empty> = S5 {\n@@ -43,5 +40,4 @@ fn start(_: isize, _: *const *const u8) -> isize {\n         z: 4,\n         tagz: Empty {},\n     };\n-    0\n }"}]}