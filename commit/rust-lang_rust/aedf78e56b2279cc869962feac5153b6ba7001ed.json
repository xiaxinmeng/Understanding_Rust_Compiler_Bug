{"sha": "aedf78e56b2279cc869962feac5153b6ba7001ed", "node_id": "C_kwDOAAsO6NoAKGFlZGY3OGU1NmIyMjc5Y2M4Njk5NjJmZWFjNTE1M2I2YmE3MDAxZWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T08:39:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T08:39:20Z"}, "message": "Auto merge of #98802 - Dylan-DPC:rollup-u6mwx27, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #98639 (Factor out `hir::Node::Binding`)\n - #98653 (Add regression test for #79494)\n - #98763 (bootstrap: illumos platform flags for split-debuginfo)\n - #98766 (cleanup mir visitor for `rustc::pass_by_value`)\n - #98783 (interpret: make a comment less scary)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "81f5cf43d47148fd3f4970fa76270109cf43ae18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81f5cf43d47148fd3f4970fa76270109cf43ae18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aedf78e56b2279cc869962feac5153b6ba7001ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aedf78e56b2279cc869962feac5153b6ba7001ed", "html_url": "https://github.com/rust-lang/rust/commit/aedf78e56b2279cc869962feac5153b6ba7001ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aedf78e56b2279cc869962feac5153b6ba7001ed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4118ad24d6c41cca330dc3f9e8f218690944d0ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/4118ad24d6c41cca330dc3f9e8f218690944d0ff", "html_url": "https://github.com/rust-lang/rust/commit/4118ad24d6c41cca330dc3f9e8f218690944d0ff"}, {"sha": "7a4f33bec9c8613e87d50a8faf4902e4a3c875ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4f33bec9c8613e87d50a8faf4902e4a3c875ff", "html_url": "https://github.com/rust-lang/rust/commit/7a4f33bec9c8613e87d50a8faf4902e4a3c875ff"}], "stats": {"total": 424, "additions": 235, "deletions": 189}, "files": [{"sha": "ddd54f7c2089dd906154b67b7bf6133a8cef3d6e", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -192,9 +192,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_pat(&mut self, pat: &'hir Pat<'hir>) {\n-        let node =\n-            if let PatKind::Binding(..) = pat.kind { Node::Binding(pat) } else { Node::Pat(pat) };\n-        self.insert(pat.span, pat.hir_id, node);\n+        self.insert(pat.span, pat.hir_id, Node::Pat(pat));\n \n         self.with_parent(pat.hir_id, |this| {\n             intravisit::walk_pat(this, pat);"}, {"sha": "41279588e633460af12450b463bfad4f7b3b27ea", "filename": "compiler/rustc_borrowck/src/borrow_set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -92,9 +92,9 @@ impl LocalsStateAtExit {\n         struct HasStorageDead(BitSet<Local>);\n \n         impl<'tcx> Visitor<'tcx> for HasStorageDead {\n-            fn visit_local(&mut self, local: &Local, ctx: PlaceContext, _: Location) {\n+            fn visit_local(&mut self, local: Local, ctx: PlaceContext, _: Location) {\n                 if ctx == PlaceContext::NonUse(NonUseContext::StorageDead) {\n-                    self.0.insert(*local);\n+                    self.0.insert(local);\n                 }\n             }\n         }\n@@ -223,7 +223,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'tcx> {\n         self.super_assign(assigned_place, rvalue, location)\n     }\n \n-    fn visit_local(&mut self, temp: &Local, context: PlaceContext, location: Location) {\n+    fn visit_local(&mut self, temp: Local, context: PlaceContext, location: Location) {\n         if !context.is_use() {\n             return;\n         }\n@@ -232,7 +232,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'tcx> {\n         // check whether we (earlier) saw a 2-phase borrow like\n         //\n         //     TMP = &mut place\n-        if let Some(&borrow_index) = self.pending_activations.get(temp) {\n+        if let Some(&borrow_index) = self.pending_activations.get(&temp) {\n             let borrow_data = &mut self.location_map[borrow_index.as_usize()];\n \n             // Watch out: the use of TMP in the borrow itself"}, {"sha": "b3edc35dc3642cc7c5963bcec53782801dd22656", "filename": "compiler/rustc_borrowck/src/diagnostics/find_all_local_uses.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_all_local_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_all_local_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_all_local_uses.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -18,8 +18,8 @@ struct AllLocalUsesVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for AllLocalUsesVisitor {\n-    fn visit_local(&mut self, local: &Local, _context: PlaceContext, location: Location) {\n-        if *local == self.for_local {\n+    fn visit_local(&mut self, local: Local, _context: PlaceContext, location: Location) {\n+        if local == self.for_local {\n             self.uses.insert(location);\n         }\n     }"}, {"sha": "b5a3081e56a7a50f9899603b8b2797fef13c1bb9", "filename": "compiler/rustc_borrowck/src/diagnostics/find_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -106,7 +106,7 @@ enum DefUseResult {\n }\n \n impl<'cx, 'tcx> Visitor<'tcx> for DefUseVisitor<'cx, 'tcx> {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, _: Location) {\n         let local_ty = self.body.local_decls[local].ty;\n \n         let mut found_it = false;"}, {"sha": "3c5dd32d2816ecea37208d1bbac1aa0c80d13531", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -362,7 +362,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 let upvar_hir_id = captured_place.get_root_variable();\n \n-                if let Some(Node::Binding(pat)) = self.infcx.tcx.hir().find(upvar_hir_id)\n+                if let Some(Node::Pat(pat)) = self.infcx.tcx.hir().find(upvar_hir_id)\n                     && let hir::PatKind::Binding(\n                         hir::BindingAnnotation::Unannotated,\n                         _,"}, {"sha": "fda2cee43fbf1dde8e3f746ec86b025b493a4eb5", "filename": "compiler/rustc_borrowck/src/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -157,7 +157,7 @@ impl LocalUseMapBuild<'_> {\n }\n \n impl Visitor<'_> for LocalUseMapBuild<'_> {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, location: Location) {\n         if self.locals_with_use_data[local] {\n             match def_use::categorize(context) {\n                 Some(DefUse::Def) => self.insert_def(local, location),"}, {"sha": "bc76a465e3c3a638662f08564a104c46f21cbf78", "filename": "compiler/rustc_borrowck/src/type_check/liveness/polonius.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -54,7 +54,7 @@ impl UseFactsExtractor<'_, '_> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UseFactsExtractor<'a, 'tcx> {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, location: Location) {\n         match def_use::categorize(context) {\n             Some(DefUse::Def) => self.insert_def(local, location),\n             Some(DefUse::Use) => self.insert_use(local, location),"}, {"sha": "a21a8dd48be2b7375c34b2013dc369be5be5856c", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -333,9 +333,9 @@ struct TypeVerifier<'a, 'b, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n-    fn visit_span(&mut self, span: &Span) {\n+    fn visit_span(&mut self, span: Span) {\n         if !span.is_dummy() {\n-            self.last_span = *span;\n+            self.last_span = span;\n         }\n     }\n "}, {"sha": "8833753b12c5d53da2c6b77ce1386999bbb97d4f", "filename": "compiler/rustc_borrowck/src/used_muts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -91,8 +91,8 @@ impl<'visit, 'cx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'tc\n         self.super_statement(statement, location);\n     }\n \n-    fn visit_local(&mut self, local: &Local, place_context: PlaceContext, location: Location) {\n-        if place_context.is_place_assignment() && self.temporary_used_locals.contains(local) {\n+    fn visit_local(&mut self, local: Local, place_context: PlaceContext, location: Location) {\n+        if place_context.is_place_assignment() && self.temporary_used_locals.contains(&local) {\n             // Propagate the Local assigned at this Location as a used mutable local variable\n             for moi in &self.mbcx.move_data.loc_map[location] {\n                 let mpi = &self.mbcx.move_data.moves[*moi].path;"}, {"sha": "5c26168b50d65808cc006d75f8b6cd9a0bbeb0c3", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -143,13 +143,13 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx,\n             // now that we have moved to the \"slice of projections\" representation.\n             if let mir::ProjectionElem::Index(local) = elem {\n                 self.visit_local(\n-                    &local,\n+                    local,\n                     PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n                     location,\n                 );\n             }\n         } else {\n-            self.visit_local(&place_ref.local, context, location);\n+            self.visit_local(place_ref.local, context, location);\n         }\n     }\n }\n@@ -185,7 +185,7 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n         self.process_place(&place.as_ref(), context, location);\n     }\n \n-    fn visit_local(&mut self, &local: &mir::Local, context: PlaceContext, location: Location) {\n+    fn visit_local(&mut self, local: mir::Local, context: PlaceContext, location: Location) {\n         match context {\n             PlaceContext::MutatingUse(MutatingUseContext::Call)\n             | PlaceContext::MutatingUse(MutatingUseContext::Yield) => {"}, {"sha": "2e6c7f47ac1db0c980a98c5b2345a27dd81a00a9", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -202,7 +202,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let ptr = self.scalar_to_ptr(scalar)?;\n         match ptr.into_pointer_or_addr() {\n             Ok(ptr) => M::expose_ptr(self, ptr)?,\n-            Err(_) => {} // do nothing, exposing an invalid pointer has no meaning\n+            Err(_) => {} // Do nothing, exposing an invalid pointer (`None` provenance) is a NOP.\n         };\n         Ok(self.cast_from_int_like(scalar, src.layout, cast_ty)?.into())\n     }"}, {"sha": "847694cbd10cbaa2ad09859f5634cb15583a0fdb", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -244,7 +244,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                         // for a generator).\n                         let var_hir_id = captured_place.get_root_variable();\n                         let node = self.ecx.tcx.hir().get(var_hir_id);\n-                        if let hir::Node::Binding(pat) = node {\n+                        if let hir::Node::Pat(pat) = node {\n                             if let hir::PatKind::Binding(_, _, ident, _) = pat.kind {\n                                 name = Some(ident.name);\n                             }"}, {"sha": "dc46583d5afbeefb7a47061191039ece099563c1", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -418,7 +418,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                             PlaceContext::MutatingUse(MutatingUseContext::Borrow)\n                         }\n                     };\n-                    self.visit_local(&reborrowed_place_ref.local, ctx, location);\n+                    self.visit_local(reborrowed_place_ref.local, ctx, location);\n                     self.visit_projection(reborrowed_place_ref, ctx, location);\n                     return;\n                 }\n@@ -431,7 +431,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                         }\n                         Mutability::Mut => PlaceContext::MutatingUse(MutatingUseContext::AddressOf),\n                     };\n-                    self.visit_local(&reborrowed_place_ref.local, ctx, location);\n+                    self.visit_local(reborrowed_place_ref.local, ctx, location);\n                     self.visit_projection(reborrowed_place_ref, ctx, location);\n                     return;\n                 }"}, {"sha": "8eee13196fcb3b0496448169622dfb52bc4f200c", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -106,7 +106,7 @@ struct Collector<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n-    fn visit_local(&mut self, &index: &Local, context: PlaceContext, location: Location) {\n+    fn visit_local(&mut self, index: Local, context: PlaceContext, location: Location) {\n         debug!(\"visit_local: index={:?} context={:?} location={:?}\", index, context, location);\n         // We're only interested in temporaries and the return place\n         match self.ccx.body.local_kind(index) {"}, {"sha": "c9cb01701cfd259bbb1f185873f5fb7cd20f81c2", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -196,8 +196,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n-    fn visit_local(&mut self, local: &Local, context: PlaceContext, location: Location) {\n-        if self.body.local_decls.get(*local).is_none() {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, location: Location) {\n+        if self.body.local_decls.get(local).is_none() {\n             self.fail(\n                 location,\n                 format!(\"local {:?} has no corresponding declaration in `body.local_decls`\", local),\n@@ -208,7 +208,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             // Uses of locals must occur while the local's storage is allocated.\n             self.storage_liveness.seek_after_primary_effect(location);\n             let locals_with_storage = self.storage_liveness.get();\n-            if !locals_with_storage.contains(*local) {\n+            if !locals_with_storage.contains(local) {\n                 self.fail(location, format!(\"use of local {:?}, which has no storage here\", local));\n             }\n         }\n@@ -823,8 +823,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n         self.super_terminator(terminator, location);\n     }\n \n-    fn visit_source_scope(&mut self, scope: &SourceScope) {\n-        if self.body.source_scopes.get(*scope).is_none() {\n+    fn visit_source_scope(&mut self, scope: SourceScope) {\n+        if self.body.source_scopes.get(scope).is_none() {\n             self.tcx.sess.diagnostic().delay_span_bug(\n                 self.body.span,\n                 &format!("}, {"sha": "8d92bb359385780cdccebde4885f6c141640dc9b", "filename": "compiler/rustc_const_eval/src/util/collect_writes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcollect_writes.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -24,8 +24,8 @@ struct FindLocalAssignmentVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for FindLocalAssignmentVisitor {\n-    fn visit_local(&mut self, local: &Local, place_context: PlaceContext, location: Location) {\n-        if self.needle != *local {\n+    fn visit_local(&mut self, local: Local, place_context: PlaceContext, location: Location) {\n+        if self.needle != local {\n             return;\n         }\n "}, {"sha": "a2ef158ce8d324cd1338fc704764954d4a617440", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -3326,7 +3326,6 @@ pub enum Node<'hir> {\n     Ty(&'hir Ty<'hir>),\n     TypeBinding(&'hir TypeBinding<'hir>),\n     TraitRef(&'hir TraitRef<'hir>),\n-    Binding(&'hir Pat<'hir>),\n     Pat(&'hir Pat<'hir>),\n     Arm(&'hir Arm<'hir>),\n     Block(&'hir Block<'hir>),\n@@ -3378,7 +3377,6 @@ impl<'hir> Node<'hir> {\n             | Node::Block(..)\n             | Node::Ctor(..)\n             | Node::Pat(..)\n-            | Node::Binding(..)\n             | Node::Arm(..)\n             | Node::Local(..)\n             | Node::Crate(..)"}, {"sha": "fd843b0c403a6f8af3c76412bd20b84c59f04fa2", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -87,7 +87,7 @@ impl<'a> State<'a> {\n             Node::Ty(a) => self.print_type(&a),\n             Node::TypeBinding(a) => self.print_type_binding(&a),\n             Node::TraitRef(a) => self.print_trait_ref(&a),\n-            Node::Binding(a) | Node::Pat(a) => self.print_pat(&a),\n+            Node::Pat(a) => self.print_pat(&a),\n             Node::Arm(a) => self.print_arm(&a),\n             Node::Infer(_) => self.word(\"_\"),\n             Node::Block(a) => {"}, {"sha": "26b4348840820517681f25114b76e1f1e628ae26", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -302,7 +302,6 @@ impl<'hir> Map<'hir> {\n             | Node::Infer(_)\n             | Node::TraitRef(_)\n             | Node::Pat(_)\n-            | Node::Binding(_)\n             | Node::Local(_)\n             | Node::Param(_)\n             | Node::Arm(_)\n@@ -901,7 +900,7 @@ impl<'hir> Map<'hir> {\n     #[inline]\n     fn opt_ident(self, id: HirId) -> Option<Ident> {\n         match self.get(id) {\n-            Node::Binding(&Pat { kind: PatKind::Binding(_, _, ident, _), .. }) => Some(ident),\n+            Node::Pat(&Pat { kind: PatKind::Binding(_, _, ident, _), .. }) => Some(ident),\n             // A `Ctor` doesn't have an identifier itself, but its parent\n             // struct/variant does. Compare with `hir::Map::opt_span`.\n             Node::Ctor(..) => match self.find(self.get_parent_node(id))? {\n@@ -1046,7 +1045,6 @@ impl<'hir> Map<'hir> {\n             Node::Ty(ty) => ty.span,\n             Node::TypeBinding(tb) => tb.span,\n             Node::TraitRef(tr) => tr.path.span,\n-            Node::Binding(pat) => pat.span,\n             Node::Pat(pat) => pat.span,\n             Node::Arm(arm) => arm.span,\n             Node::Block(block) => block.span,\n@@ -1263,7 +1261,6 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n         Some(Node::Ty(_)) => node_str(\"type\"),\n         Some(Node::TypeBinding(_)) => node_str(\"type binding\"),\n         Some(Node::TraitRef(_)) => node_str(\"trait ref\"),\n-        Some(Node::Binding(_)) => node_str(\"local\"),\n         Some(Node::Pat(_)) => node_str(\"pat\"),\n         Some(Node::Param(_)) => node_str(\"param\"),\n         Some(Node::Arm(_)) => node_str(\"arm\"),"}, {"sha": "9285246eb797c8d535cfa1ba5cc19547b9e7bc2b", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 149, "deletions": 106, "changes": 255, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -30,9 +30,11 @@\n //! For example, the `super_basic_block_data` method begins like this:\n //!\n //! ```ignore (pseudo-rust)\n-//! fn super_basic_block_data(&mut self,\n-//!                           block: BasicBlock,\n-//!                           data: & $($mutability)? BasicBlockData<'tcx>) {\n+//! fn super_basic_block_data(\n+//!     &mut self,\n+//!     block: BasicBlock,\n+//!     data: & $($mutability)? BasicBlockData<'tcx>\n+//! ) {\n //!     let BasicBlockData {\n //!         statements,\n //!         terminator,\n@@ -78,106 +80,135 @@ macro_rules! make_mir_visitor {\n                 self.super_body(body);\n             }\n \n-            fn visit_basic_block_data(&mut self,\n-                                      block: BasicBlock,\n-                                      data: & $($mutability)? BasicBlockData<'tcx>) {\n+            fn visit_basic_block_data(\n+                &mut self,\n+                block: BasicBlock,\n+                data: & $($mutability)? BasicBlockData<'tcx>,\n+            ) {\n                 self.super_basic_block_data(block, data);\n             }\n \n-            fn visit_source_scope_data(&mut self,\n-                                           scope_data: & $($mutability)? SourceScopeData<'tcx>) {\n+            fn visit_source_scope_data(\n+                &mut self,\n+                scope_data: & $($mutability)? SourceScopeData<'tcx>,\n+            ) {\n                 self.super_source_scope_data(scope_data);\n             }\n \n-            fn visit_statement(&mut self,\n-                               statement: & $($mutability)? Statement<'tcx>,\n-                               location: Location) {\n+            fn visit_statement(\n+                &mut self,\n+                statement: & $($mutability)? Statement<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_statement(statement, location);\n             }\n \n-            fn visit_assign(&mut self,\n-                            place: & $($mutability)? Place<'tcx>,\n-                            rvalue: & $($mutability)? Rvalue<'tcx>,\n-                            location: Location) {\n+            fn visit_assign(\n+                &mut self,\n+                place: & $($mutability)? Place<'tcx>,\n+                rvalue: & $($mutability)? Rvalue<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_assign(place, rvalue, location);\n             }\n \n-            fn visit_terminator(&mut self,\n-                                terminator: & $($mutability)? Terminator<'tcx>,\n-                                location: Location) {\n+            fn visit_terminator(\n+                &mut self,\n+                terminator: & $($mutability)? Terminator<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_terminator(terminator, location);\n             }\n \n-            fn visit_assert_message(&mut self,\n-                                    msg: & $($mutability)? AssertMessage<'tcx>,\n-                                    location: Location) {\n+            fn visit_assert_message(\n+                &mut self,\n+                msg: & $($mutability)? AssertMessage<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_assert_message(msg, location);\n             }\n \n-            fn visit_rvalue(&mut self,\n-                            rvalue: & $($mutability)? Rvalue<'tcx>,\n-                            location: Location) {\n+            fn visit_rvalue(\n+                &mut self,\n+                rvalue: & $($mutability)? Rvalue<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_rvalue(rvalue, location);\n             }\n \n-            fn visit_operand(&mut self,\n-                             operand: & $($mutability)? Operand<'tcx>,\n-                             location: Location) {\n+            fn visit_operand(\n+                &mut self,\n+                operand: & $($mutability)? Operand<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_operand(operand, location);\n             }\n \n-            fn visit_ascribe_user_ty(&mut self,\n-                                     place: & $($mutability)? Place<'tcx>,\n-                                     variance: & $($mutability)? ty::Variance,\n-                                     user_ty: & $($mutability)? UserTypeProjection,\n-                                     location: Location) {\n+            fn visit_ascribe_user_ty(\n+                &mut self,\n+                place: & $($mutability)? Place<'tcx>,\n+                variance: & $($mutability)? ty::Variance,\n+                user_ty: & $($mutability)? UserTypeProjection,\n+                location: Location,\n+            ) {\n                 self.super_ascribe_user_ty(place, variance, user_ty, location);\n             }\n \n-            fn visit_coverage(&mut self,\n-                              coverage: & $($mutability)? Coverage,\n-                              location: Location) {\n+            fn visit_coverage(\n+                &mut self,\n+                coverage: & $($mutability)? Coverage,\n+                location: Location,\n+            ) {\n                 self.super_coverage(coverage, location);\n             }\n \n-            fn visit_retag(&mut self,\n-                           kind: & $($mutability)? RetagKind,\n-                           place: & $($mutability)? Place<'tcx>,\n-                           location: Location) {\n+            fn visit_retag(\n+                &mut self,\n+                kind: & $($mutability)? RetagKind,\n+                place: & $($mutability)? Place<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_retag(kind, place, location);\n             }\n \n-            fn visit_place(&mut self,\n-                            place: & $($mutability)? Place<'tcx>,\n-                            context: PlaceContext,\n-                            location: Location) {\n+            fn visit_place(\n+                &mut self,\n+                place: & $($mutability)? Place<'tcx>,\n+                context: PlaceContext,\n+                location: Location,\n+            ) {\n                 self.super_place(place, context, location);\n             }\n \n             visit_place_fns!($($mutability)?);\n \n-            fn visit_constant(&mut self,\n-                              constant: & $($mutability)? Constant<'tcx>,\n-                              location: Location) {\n+            fn visit_constant(\n+                &mut self,\n+                constant: & $($mutability)? Constant<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_constant(constant, location);\n             }\n \n-            // The macro results in a false positive of sorts, where &mut Span\n-            // is fine, but &Span is not; just allow the lint.\n-            #[allow(rustc::pass_by_value)]\n-            fn visit_span(&mut self,\n-                          span: & $($mutability)? Span) {\n+            fn visit_span(\n+                &mut self,\n+                span: $(& $mutability)? Span,\n+            ) {\n                 self.super_span(span);\n             }\n \n-            fn visit_source_info(&mut self,\n-                                 source_info: & $($mutability)? SourceInfo) {\n+            fn visit_source_info(\n+                &mut self,\n+                source_info: & $($mutability)? SourceInfo,\n+            ) {\n                 self.super_source_info(source_info);\n             }\n \n-            fn visit_ty(&mut self,\n-                        ty: $(& $mutability)? Ty<'tcx>,\n-                        _: TyContext) {\n+            fn visit_ty(\n+                &mut self,\n+                ty: $(& $mutability)? Ty<'tcx>,\n+                _: TyContext,\n+            ) {\n                 self.super_ty(ty);\n             }\n \n@@ -196,45 +227,56 @@ macro_rules! make_mir_visitor {\n                 self.super_user_type_annotation(index, ty);\n             }\n \n-            fn visit_region(&mut self,\n-                            region: $(& $mutability)? ty::Region<'tcx>,\n-                            _: Location) {\n+            fn visit_region(\n+                &mut self,\n+                region: $(& $mutability)? ty::Region<'tcx>,\n+                _: Location,\n+            ) {\n                 self.super_region(region);\n             }\n \n-            fn visit_const(&mut self,\n-                           constant: $(& $mutability)? ty::Const<'tcx>,\n-                           _: Location) {\n+            fn visit_const(\n+                &mut self,\n+                constant: $(& $mutability)? ty::Const<'tcx>,\n+                _: Location,\n+            ) {\n                 self.super_const(constant);\n             }\n \n-            fn visit_substs(&mut self,\n-                            substs: & $($mutability)? SubstsRef<'tcx>,\n-                            _: Location) {\n+            fn visit_substs(\n+                &mut self,\n+                substs: & $($mutability)? SubstsRef<'tcx>,\n+                _: Location,\n+            ) {\n                 self.super_substs(substs);\n             }\n \n-            fn visit_local_decl(&mut self,\n-                                local: Local,\n-                                local_decl: & $($mutability)? LocalDecl<'tcx>) {\n+            fn visit_local_decl(\n+                &mut self,\n+                local: Local,\n+                local_decl: & $($mutability)? LocalDecl<'tcx>,\n+            ) {\n                 self.super_local_decl(local, local_decl);\n             }\n \n-            fn visit_var_debug_info(&mut self,\n-                                    var_debug_info: & $($mutability)* VarDebugInfo<'tcx>) {\n+            fn visit_var_debug_info(\n+                &mut self,\n+                var_debug_info: & $($mutability)* VarDebugInfo<'tcx>,\n+            ) {\n                 self.super_var_debug_info(var_debug_info);\n             }\n \n-            #[allow(rustc::pass_by_value)]\n-            fn visit_local(&mut self,\n-                            _local: & $($mutability)? Local,\n-                            _context: PlaceContext,\n-                            _location: Location) {\n-            }\n+            fn visit_local(\n+                &mut self,\n+                _local: $(& $mutability)? Local,\n+                _context: PlaceContext,\n+                _location: Location,\n+            ) {}\n \n-            #[allow(rustc::pass_by_value)]\n-            fn visit_source_scope(&mut self,\n-                                      scope: & $($mutability)? SourceScope) {\n+            fn visit_source_scope(\n+                &mut self,\n+                scope: $(& $mutability)? SourceScope,\n+            ) {\n                 self.super_source_scope(scope);\n             }\n \n@@ -296,7 +338,7 @@ macro_rules! make_mir_visitor {\n                     self.visit_var_debug_info(var_debug_info);\n                 }\n \n-                self.visit_span(&$($mutability)? body.span);\n+                self.visit_span($(& $mutability)? body.span);\n \n                 for const_ in &$($mutability)? body.required_consts {\n                     let location = START_BLOCK.start_location();\n@@ -338,14 +380,14 @@ macro_rules! make_mir_visitor {\n                     local_data: _,\n                 } = scope_data;\n \n-                self.visit_span(span);\n+                self.visit_span($(& $mutability)? *span);\n                 if let Some(parent_scope) = parent_scope {\n-                    self.visit_source_scope(parent_scope);\n+                    self.visit_source_scope($(& $mutability)? *parent_scope);\n                 }\n                 if let Some((callee, callsite_span)) = inlined {\n                     let location = START_BLOCK.start_location();\n \n-                    self.visit_span(callsite_span);\n+                    self.visit_span($(& $mutability)? *callsite_span);\n \n                     let ty::Instance { def: callee_def, substs: callee_substs } = callee;\n                     match callee_def {\n@@ -368,7 +410,7 @@ macro_rules! make_mir_visitor {\n                     self.visit_substs(callee_substs, location);\n                 }\n                 if let Some(inlined_parent_scope) = inlined_parent_scope {\n-                    self.visit_source_scope(inlined_parent_scope);\n+                    self.visit_source_scope($(& $mutability)? *inlined_parent_scope);\n                 }\n             }\n \n@@ -410,14 +452,14 @@ macro_rules! make_mir_visitor {\n                     }\n                     StatementKind::StorageLive(local) => {\n                         self.visit_local(\n-                            local,\n+                            $(& $mutability)? *local,\n                             PlaceContext::NonUse(NonUseContext::StorageLive),\n                             location\n                         );\n                     }\n                     StatementKind::StorageDead(local) => {\n                         self.visit_local(\n-                            local,\n+                            $(& $mutability)? *local,\n                             PlaceContext::NonUse(NonUseContext::StorageDead),\n                             location\n                         );\n@@ -483,7 +525,7 @@ macro_rules! make_mir_visitor {\n                         // cannot be changed by any visitor, though.\n                         let $($mutability)? local = RETURN_PLACE;\n                         self.visit_local(\n-                            & $($mutability)? local,\n+                            $(& $mutability)? local,\n                             PlaceContext::NonMutatingUse(NonMutatingUseContext::Move),\n                             location,\n                         );\n@@ -840,8 +882,10 @@ macro_rules! make_mir_visitor {\n                 self.visit_source_info(source_info);\n             }\n \n-            fn super_var_debug_info(&mut self,\n-                                    var_debug_info: & $($mutability)? VarDebugInfo<'tcx>) {\n+            fn super_var_debug_info(\n+                &mut self,\n+                var_debug_info: & $($mutability)? VarDebugInfo<'tcx>\n+            ) {\n                 let VarDebugInfo {\n                     name: _,\n                     source_info,\n@@ -861,32 +905,31 @@ macro_rules! make_mir_visitor {\n                 }\n             }\n \n-            #[allow(rustc::pass_by_value)]\n-            fn super_source_scope(&mut self,\n-                                      _scope: & $($mutability)? SourceScope) {\n-            }\n+            fn super_source_scope(\n+                &mut self,\n+                _scope: $(& $mutability)? SourceScope\n+            ) {}\n \n-            fn super_constant(&mut self,\n-                              constant: & $($mutability)? Constant<'tcx>,\n-                              location: Location) {\n+            fn super_constant(\n+                &mut self,\n+                constant: & $($mutability)? Constant<'tcx>,\n+                location: Location\n+            ) {\n                 let Constant {\n                     span,\n                     user_ty,\n                     literal,\n                 } = constant;\n \n-                self.visit_span(span);\n+                self.visit_span($(& $mutability)? *span);\n                 drop(user_ty); // no visit method for this\n                 match literal {\n                     ConstantKind::Ty(ct) => self.visit_const($(& $mutability)? *ct, location),\n                     ConstantKind::Val(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),\n                 }\n             }\n \n-            // The macro results in a false positive of sorts, where &mut Span\n-            // is fine, but &Span is not; just allow the lint.\n-            #[allow(rustc::pass_by_value)]\n-            fn super_span(&mut self, _span: & $($mutability)? Span) {\n+            fn super_span(&mut self, _span: $(& $mutability)? Span) {\n             }\n \n             fn super_source_info(&mut self, source_info: & $($mutability)? SourceInfo) {\n@@ -895,8 +938,8 @@ macro_rules! make_mir_visitor {\n                     scope,\n                 } = source_info;\n \n-                self.visit_span(span);\n-                self.visit_source_scope(scope);\n+                self.visit_span($(& $mutability)? *span);\n+                self.visit_source_scope($(& $mutability)? *scope);\n             }\n \n             fn super_user_type_projection(\n@@ -910,7 +953,7 @@ macro_rules! make_mir_visitor {\n                 _index: UserTypeAnnotationIndex,\n                 ty: & $($mutability)? CanonicalUserTypeAnnotation<'tcx>,\n             ) {\n-                self.visit_span(& $($mutability)? ty.span);\n+                self.visit_span($(& $mutability)? ty.span);\n                 self.visit_ty($(& $mutability)? ty.inferred_ty, TyContext::UserTy(ty.span));\n             }\n \n@@ -1058,7 +1101,7 @@ macro_rules! visit_place_fns {\n                 }\n             }\n \n-            self.visit_local(&place.local, context, location);\n+            self.visit_local(place.local, context, location);\n \n             self.visit_projection(place.as_ref(), context, location);\n         }\n@@ -1091,7 +1134,7 @@ macro_rules! visit_place_fns {\n                 }\n                 ProjectionElem::Index(local) => {\n                     self.visit_local(\n-                        &local,\n+                        local,\n                         PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n                         location,\n                     );"}, {"sha": "e27761381f6331b5d1d156230a8b7474870373ee", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -997,7 +997,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 continue;\n             };\n             let pat = match tcx.hir().get(arg.pat.hir_id) {\n-                Node::Pat(pat) | Node::Binding(pat) => pat,\n+                Node::Pat(pat) => pat,\n                 node => bug!(\"pattern became {:?}\", node),\n             };\n             let pattern = pat_from_hir(tcx, self.param_env, self.typeck_results, pat);"}, {"sha": "35a0afd6813a89c0e7195f87caa63b95ccfdb922", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -80,7 +80,7 @@ impl<'tcx> Cx<'tcx> {\n     #[tracing::instrument(level = \"debug\", skip(self))]\n     pub(crate) fn pattern_from_hir(&mut self, p: &hir::Pat<'_>) -> Pat<'tcx> {\n         let p = match self.tcx.hir().get(p.hir_id) {\n-            Node::Pat(p) | Node::Binding(p) => p,\n+            Node::Pat(p) => p,\n             node => bug!(\"pattern became {:?}\", node),\n         };\n         pat_from_hir(self.tcx, self.param_env, self.typeck_results(), p)"}, {"sha": "83ce4c44b7144e5cfa97c5d5c67feb5f55364396", "filename": "compiler/rustc_mir_dataflow/src/impls/init_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -81,7 +81,7 @@ where\n     // deinitialized, although clearly it is only partially deinitialized. This analysis is not\n     // actually used anywhere at the moment, so this is not critical, but this does need to be fixed\n     // before it starts being used again.\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, _: Location) {\n         use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, NonUseContext};\n         match context {\n             // These are handled specially in `call_return_effect` and `yield_resume_effect`."}, {"sha": "e64136928cce8af34e7712b95160b7c993982a5d", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -111,7 +111,7 @@ where\n         }\n     }\n \n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, _: Location) {\n         // Because we do not call `super_place` above, `visit_local` is only called for locals that\n         // do not appear as part of  a `Place` in the MIR. This handles cases like the implicit use\n         // of the return place in a `Return` terminator or the index in an `Index` projection."}, {"sha": "eae9313b77138258934a48f6e94152e387168c52", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -288,12 +288,12 @@ impl<'a, 'mir, 'tcx, T> Visitor<'tcx> for MoveVisitor<'a, 'mir, 'tcx, T>\n where\n     T: GenKill<Local>,\n {\n-    fn visit_local(&mut self, local: &Local, context: PlaceContext, loc: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, loc: Location) {\n         if PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) == context {\n             let mut borrowed_locals = self.borrowed_locals.borrow_mut();\n             borrowed_locals.seek_before_primary_effect(loc);\n-            if !borrowed_locals.contains(*local) {\n-                self.trans.kill(*local);\n+            if !borrowed_locals.contains(local) {\n+                self.trans.kill(local);\n             }\n         }\n     }"}, {"sha": "48aea61b19186c4b1e3b741071d006bd888d7f9e", "filename": "compiler/rustc_mir_transform/src/const_debuginfo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -88,12 +88,12 @@ fn find_optimization_oportunities<'tcx>(body: &Body<'tcx>) -> Vec<(Local, Consta\n }\n \n impl Visitor<'_> for LocalUseVisitor {\n-    fn visit_local(&mut self, local: &Local, context: PlaceContext, location: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, location: Location) {\n         if context.is_mutating_use() {\n-            self.local_mutating_uses[*local] = self.local_mutating_uses[*local].saturating_add(1);\n+            self.local_mutating_uses[local] = self.local_mutating_uses[local].saturating_add(1);\n \n             if context.is_place_assignment() {\n-                self.local_assignment_locations[*local] = Some(location);\n+                self.local_assignment_locations[local] = Some(location);\n             }\n         }\n     }"}, {"sha": "36844d5f6cfae0b51c0821669f0bc14d17024b83", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -882,7 +882,7 @@ impl CanConstProp {\n }\n \n impl Visitor<'_> for CanConstProp {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, _: Location) {\n         use rustc_middle::mir::visit::PlaceContext::*;\n         match context {\n             // Projections are fine, because `&mut foo.x` will be caught by"}, {"sha": "dc3cb282c7328285b64a8ee20ef6edb2d2ff7b6e", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -773,7 +773,7 @@ impl CanConstProp {\n }\n \n impl Visitor<'_> for CanConstProp {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, _: Location) {\n         use rustc_middle::mir::visit::PlaceContext::*;\n         match context {\n             // Projections are fine, because `&mut foo.x` will be caught by"}, {"sha": "d29d17399af3a64ca81c19153de0ed0c18b0c2d5", "filename": "compiler/rustc_mir_transform/src/nrvo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -219,7 +219,7 @@ impl IsReturnPlaceRead {\n }\n \n impl<'tcx> Visitor<'tcx> for IsReturnPlaceRead {\n-    fn visit_local(&mut self, &l: &Local, ctxt: PlaceContext, _: Location) {\n+    fn visit_local(&mut self, l: Local, ctxt: PlaceContext, _: Location) {\n         if l == mir::RETURN_PLACE && ctxt.is_use() && !ctxt.is_place_assignment() {\n             self.0 = true;\n         }"}, {"sha": "980af98436281133cd1cdc78d6d0dcf30ecb3ee4", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -509,12 +509,12 @@ impl<'tcx> Visitor<'tcx> for UsedLocals {\n         }\n     }\n \n-    fn visit_local(&mut self, local: &Local, _ctx: PlaceContext, _location: Location) {\n+    fn visit_local(&mut self, local: Local, _ctx: PlaceContext, _location: Location) {\n         if self.increment {\n-            self.use_count[*local] += 1;\n+            self.use_count[local] += 1;\n         } else {\n-            assert_ne!(self.use_count[*local], 0);\n-            self.use_count[*local] -= 1;\n+            assert_ne!(self.use_count[local], 0);\n+            self.use_count[local] -= 1;\n         }\n     }\n }"}, {"sha": "6902213ddad4ff28843ff6655ed9f45633dd4948", "filename": "compiler/rustc_mir_transform/src/simplify_try.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -462,14 +462,14 @@ impl LocalUseCounter {\n }\n \n impl Visitor<'_> for LocalUseCounter {\n-    fn visit_local(&mut self, local: &Local, context: PlaceContext, _location: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, _location: Location) {\n         if context.is_storage_marker()\n             || context == PlaceContext::NonUse(NonUseContext::VarDebugInfo)\n         {\n             return;\n         }\n \n-        self.local_uses[*local] += 1;\n+        self.local_uses[local] += 1;\n     }\n }\n "}, {"sha": "3f082896ccfd4d5878951266e087ed0f91ff130a", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -928,7 +928,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n     fn visit_local(\n         &mut self,\n-        _place_local: &Local,\n+        _place_local: Local,\n         _context: mir::visit::PlaceContext,\n         _location: Location,\n     ) {"}, {"sha": "0a0c674d179e9596ba3f779402297585cab68837", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -623,9 +623,9 @@ impl<'tcx> SaveContext<'tcx> {\n                 }\n             },\n \n-            Node::Binding(&hir::Pat {\n-                kind: hir::PatKind::Binding(_, canonical_id, ..), ..\n-            }) => Res::Local(canonical_id),\n+            Node::Pat(&hir::Pat { kind: hir::PatKind::Binding(_, canonical_id, ..), .. }) => {\n+                Res::Local(canonical_id)\n+            }\n \n             _ => Res::Err,\n         }"}, {"sha": "53ca027bb57f52f3dc5539560401426f6088fd88", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -223,7 +223,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         None,\n                         hir::Path { res: hir::def::Res::Local(hir_id), .. },\n                     )) => {\n-                        if let Some(hir::Node::Binding(pat)) = self.tcx.hir().find(*hir_id) {\n+                        if let Some(hir::Node::Pat(pat)) = self.tcx.hir().find(*hir_id) {\n                             let parent = self.tcx.hir().get_parent_node(pat.hir_id);\n                             primary_span = pat.span;\n                             secondary_span = pat.span;"}, {"sha": "365ff429243f1ed1b0b8b2a68e7d56b3e4a86622", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -251,7 +251,6 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n                 | hir::Node::Ty(..)\n                 | hir::Node::TypeBinding(..)\n                 | hir::Node::TraitRef(..)\n-                | hir::Node::Binding(..)\n                 | hir::Node::Pat(..)\n                 | hir::Node::Arm(..)\n                 | hir::Node::Local(..)"}, {"sha": "755c532ab3260d74cfc21809fcd686b08c8359c5", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -1760,7 +1760,8 @@ impl<'a> Builder<'a> {\n             let needs_unstable_opts = target.contains(\"linux\")\n                 || target.contains(\"windows\")\n                 || target.contains(\"bsd\")\n-                || target.contains(\"dragonfly\");\n+                || target.contains(\"dragonfly\")\n+                || target.contains(\"illumos\");\n \n             if needs_unstable_opts {\n                 rustflags.arg(\"-Zunstable-options\");"}, {"sha": "fc39424b793f640c2d4174028e7731958033adf1", "filename": "src/test/rustdoc-ui/issue-79494.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftest%2Frustdoc-ui%2Fissue-79494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftest%2Frustdoc-ui%2Fissue-79494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-79494.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -0,0 +1,5 @@\n+// only-x86_64-unknown-linux-gnu\n+\n+#![feature(const_transmute)]\n+\n+const ZST: &[u8] = unsafe { std::mem::transmute(1usize) }; //~ ERROR cannot transmute between types of different sizes, or dependently-sized types"}, {"sha": "7ed5ed38247160d88ee0245662a485a8130fd8b1", "filename": "src/test/rustdoc-ui/issue-79494.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftest%2Frustdoc-ui%2Fissue-79494.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftest%2Frustdoc-ui%2Fissue-79494.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-79494.stderr?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -0,0 +1,12 @@\n+error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n+  --> $DIR/issue-79494.rs:5:29\n+   |\n+LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n+   |                             ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: `usize` (64 bits)\n+   = note: target type: `&[u8]` (128 bits)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0512`."}, {"sha": "1ac7bfba06ba217a38c4d23560be1ac841116126", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_hir;\n use clippy_utils::ty::contains_ty;\n use rustc_hir::intravisit;\n-use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node};\n+use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node, Pat, PatKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n@@ -132,7 +132,10 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n // TODO: Replace with Map::is_argument(..) when it's fixed\n fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n     match map.find(id) {\n-        Some(Node::Binding(_)) => (),\n+        Some(Node::Pat(Pat {\n+            kind: PatKind::Binding(..),\n+            ..\n+        })) => (),\n         _ => return false,\n     }\n \n@@ -144,15 +147,6 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         if cmt.place.projections.is_empty() {\n             if let PlaceBase::Local(lid) = cmt.place.base {\n                 self.set.remove(&lid);\n-                let map = &self.cx.tcx.hir();\n-                if let Some(Node::Binding(_)) = map.find(cmt.hir_id) {\n-                    if self.set.contains(&lid) {\n-                        // let y = x where x is known\n-                        // remove x, insert y\n-                        self.set.insert(cmt.hir_id);\n-                        self.set.remove(&lid);\n-                    }\n-                }\n             }\n         }\n     }"}, {"sha": "5bf4313b41a49ae062fa7e8faf6f55ef83f52b9b", "filename": "src/tools/clippy/clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -125,7 +125,7 @@ fn look_in_block<'tcx, 'hir>(cx: &LateContext<'tcx>, kind: &'tcx ExprKind<'hir>)\n         // Find id of the local that expr_end_of_block resolves to\n         if let ExprKind::Path(QPath::Resolved(None, expr_path)) = expr_end_of_block.kind;\n         if let Res::Local(expr_res) = expr_path.res;\n-        if let Some(Node::Binding(res_pat)) = cx.tcx.hir().find(expr_res);\n+        if let Some(Node::Pat(res_pat)) = cx.tcx.hir().find(expr_res);\n \n         // Find id of the local we found in the block\n         if let PatKind::Binding(BindingAnnotation::Unannotated, local_hir_id, _ident, None) = local.pat.kind;"}, {"sha": "aedf3810b23e95c88de5d867eea3c03d446d0e24", "filename": "src/tools/clippy/clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -43,7 +43,7 @@ fn mut_warn_with_span(cx: &LateContext<'_>, span: Option<Span>) {\n fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId> {\n     if_chain! {\n         if let Some(hir_id) = path_to_local(bound);\n-        if let Node::Binding(pat) = cx.tcx.hir().get(hir_id);\n+        if let Node::Pat(pat) = cx.tcx.hir().get(hir_id);\n         if let PatKind::Binding(BindingAnnotation::Mutable, ..) = pat.kind;\n         then {\n             return Some(hir_id);"}, {"sha": "1439f1f4c75d5b03555c10edc1c2d67166c46d86", "filename": "src/tools/clippy/clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -63,7 +63,7 @@ pub(super) fn check<'tcx>(\n                         Res::Local(hir_id) => {\n                             let node = cx.tcx.hir().get(hir_id);\n                             if_chain! {\n-                                if let Node::Binding(pat) = node;\n+                                if let Node::Pat(pat) = node;\n                                 if let PatKind::Binding(bind_ann, ..) = pat.kind;\n                                 if !matches!(bind_ann, BindingAnnotation::RefMut | BindingAnnotation::Mutable);\n                                 let parent_node = cx.tcx.hir().get_parent_node(hir_id);"}, {"sha": "2ce9d0e77c1fd167f093fd0cb2613bfaf9bab27b", "filename": "src/tools/clippy/clippy_lints/src/manual_rem_euclid.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -71,8 +71,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n             && let Some(const3) = check_for_unsigned_int_constant(cx, right)\n             // Also ensures the const is nonzero since zero can't be a divisor\n             && const1 == const2 && const2 == const3\n-            && let Some(hir_id) = path_to_local(expr3)\n-            && let Some(Node::Binding(_)) = cx.tcx.hir().find(hir_id) {\n+            && let Some(hir_id) = path_to_local(expr3) {\n                 // Apply only to params or locals with annotated types\n                 match cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n                     Some(Node::Param(..)) => (),"}, {"sha": "43e9451f7d37eb4f42b24e2b1bb39d2c5b8c74e8", "filename": "src/tools/clippy/clippy_lints/src/methods/iter_skip_next.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n             |diag| {\n                 if_chain! {\n                     if let Some(id) = path_to_local(recv);\n-                    if let Node::Binding(pat) = cx.tcx.hir().get(id);\n+                    if let Node::Pat(pat) = cx.tcx.hir().get(id);\n                     if let PatKind::Binding(ann, _, _, _)  = pat.kind;\n                     if ann != BindingAnnotation::Mutable;\n                     then {"}, {"sha": "5cfd02232dec68e95e28ffd7d4e24f2712e90d34", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedf78e56b2279cc869962feac5153b6ba7001ed/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=aedf78e56b2279cc869962feac5153b6ba7001ed", "patch": "@@ -183,7 +183,7 @@ pub fn expr_or_init<'a, 'b, 'tcx: 'b>(cx: &LateContext<'tcx>, mut expr: &'a Expr\n pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<&'tcx Expr<'tcx>> {\n     let hir = cx.tcx.hir();\n     if_chain! {\n-        if let Some(Node::Binding(pat)) = hir.find(hir_id);\n+        if let Some(Node::Pat(pat)) = hir.find(hir_id);\n         if matches!(pat.kind, PatKind::Binding(BindingAnnotation::Unannotated, ..));\n         let parent = hir.get_parent_node(hir_id);\n         if let Some(Node::Local(local)) = hir.find(parent);"}]}