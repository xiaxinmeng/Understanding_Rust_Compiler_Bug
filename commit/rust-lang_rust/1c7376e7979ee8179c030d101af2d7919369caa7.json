{"sha": "1c7376e7979ee8179c030d101af2d7919369caa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNzM3NmU3OTc5ZWU4MTc5YzAzMGQxMDFhZjJkNzkxOTM2OWNhYTc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-07T16:32:07Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-05-01T12:37:12Z"}, "message": "Monomorphise try_start.", "tree": {"sha": "f3df693e38eec1457d394bb3a36efbdbdd26e7c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3df693e38eec1457d394bb3a36efbdbdd26e7c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c7376e7979ee8179c030d101af2d7919369caa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7376e7979ee8179c030d101af2d7919369caa7", "html_url": "https://github.com/rust-lang/rust/commit/1c7376e7979ee8179c030d101af2d7919369caa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c7376e7979ee8179c030d101af2d7919369caa7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d56085cbc96aafe9ac2403201edc0a9728a4fea8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d56085cbc96aafe9ac2403201edc0a9728a4fea8", "html_url": "https://github.com/rust-lang/rust/commit/d56085cbc96aafe9ac2403201edc0a9728a4fea8"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "48fbdfb153eeee6a752432c32b0062bd79585253", "filename": "src/librustc_query_system/query/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7376e7979ee8179c030d101af2d7919369caa7/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7376e7979ee8179c030d101af2d7919369caa7/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs?ref=1c7376e7979ee8179c030d101af2d7919369caa7", "patch": "@@ -33,6 +33,7 @@ pub(crate) struct QueryVtable<CTX: QueryContext, K, V> {\n     pub compute: fn(CTX, K) -> V,\n \n     pub hash_result: fn(&mut CTX::StableHashingContext, &V) -> Option<Fingerprint>,\n+    pub handle_cycle_error: fn(CTX, CycleError<CTX::Query>) -> V,\n     pub cache_on_disk: fn(CTX, &K, Option<&V>) -> bool,\n     pub try_load_from_disk: fn(CTX, SerializedDepNodeIndex) -> Option<V>,\n }\n@@ -50,6 +51,10 @@ impl<CTX: QueryContext, K, V> QueryVtable<CTX, K, V> {\n         (self.hash_result)(hcx, value)\n     }\n \n+    pub(crate) fn handle_cycle_error(&self, tcx: CTX, error: CycleError<CTX::Query>) -> V {\n+        (self.handle_cycle_error)(tcx, error)\n+    }\n+\n     pub(crate) fn cache_on_disk(&self, tcx: CTX, key: &K, value: Option<&V>) -> bool {\n         (self.cache_on_disk)(tcx, key, value)\n     }\n@@ -110,6 +115,7 @@ where\n         eval_always: Q::EVAL_ALWAYS,\n         compute: Q::compute,\n         hash_result: Q::hash_result,\n+        handle_cycle_error: Q::handle_cycle_error,\n         cache_on_disk: Q::cache_on_disk,\n         try_load_from_disk: Q::try_load_from_disk,\n     };"}, {"sha": "ff01538d95e4c563a7ab724a2591a8a702b0b750", "filename": "src/librustc_query_system/query/plumbing.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1c7376e7979ee8179c030d101af2d7919369caa7/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7376e7979ee8179c030d101af2d7919369caa7/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs?ref=1c7376e7979ee8179c030d101af2d7919369caa7", "patch": "@@ -168,14 +168,15 @@ where\n     /// This function is inlined because that results in a noticeable speed-up\n     /// for some compile-time benchmarks.\n     #[inline(always)]\n-    fn try_start<'a, 'b, Q>(\n+    fn try_start<'a, 'b>(\n         tcx: CTX,\n+        state: &'b QueryState<CTX, C>,\n         span: Span,\n         key: &C::Key,\n         mut lookup: QueryLookup<'a, CTX, C::Key, C::Sharded>,\n+        query: &QueryVtable<CTX, C::Key, C::Value>,\n     ) -> TryGetJob<'b, CTX, C>\n     where\n-        Q: QueryDescription<CTX, Key = C::Key, Stored = C::Stored, Value = C::Value, Cache = C>,\n         CTX: QueryContext,\n     {\n         let lock = &mut *lookup.lock;\n@@ -194,7 +195,7 @@ where\n                         };\n \n                         // Create the id of the job we're waiting for\n-                        let id = QueryJobId::new(job.id, lookup.shard, Q::DEP_KIND);\n+                        let id = QueryJobId::new(job.id, lookup.shard, query.dep_kind);\n \n                         (job.latch(id), _query_blocked_prof_timer)\n                     }\n@@ -209,15 +210,14 @@ where\n                 lock.jobs = id;\n                 let id = QueryShardJobId(NonZeroU32::new(id).unwrap());\n \n-                let global_id = QueryJobId::new(id, lookup.shard, Q::DEP_KIND);\n+                let global_id = QueryJobId::new(id, lookup.shard, query.dep_kind);\n \n                 let job = tcx.current_query_job();\n                 let job = QueryJob::new(id, span, job);\n \n                 entry.insert(QueryResult::Started(job));\n \n-                let owner =\n-                    JobOwner { state: Q::query_state(tcx), id: global_id, key: (*key).clone() };\n+                let owner = JobOwner { state, id: global_id, key: (*key).clone() };\n                 return TryGetJob::NotYetStarted(owner);\n             }\n         };\n@@ -227,8 +227,8 @@ where\n         // so we just return the error.\n         #[cfg(not(parallel_compiler))]\n         return TryGetJob::Cycle(cold_path(|| {\n-            let value = Q::handle_cycle_error(tcx, latch.find_cycle_in_stack(tcx, span));\n-            Q::query_state(tcx).cache.store_nocache(value)\n+            let value = query.handle_cycle_error(tcx, latch.find_cycle_in_stack(tcx, span));\n+            state.cache.store_nocache(value)\n         }));\n \n         // With parallel queries we might just have to wait on some other\n@@ -238,14 +238,14 @@ where\n             let result = latch.wait_on(tcx, span);\n \n             if let Err(cycle) = result {\n-                let value = Q::handle_cycle_error(tcx, cycle);\n-                let value = Q::query_state(tcx).cache.store_nocache(value);\n+                let value = query.handle_cycle_error(tcx, cycle);\n+                let value = state.cache.store_nocache(value);\n                 return TryGetJob::Cycle(value);\n             }\n \n             let cached = try_get_cached(\n                 tcx,\n-                Q::query_state(tcx),\n+                state,\n                 (*key).clone(),\n                 |value, index| (value.clone(), index),\n                 |_, _| panic!(\"value must be in cache after waiting\"),\n@@ -392,7 +392,7 @@ where\n     Q: QueryDescription<CTX>,\n     CTX: QueryContext,\n {\n-    let job = match JobOwner::try_start::<Q>(tcx, span, &key, lookup) {\n+    let job = match JobOwner::try_start(tcx, Q::query_state(tcx), span, &key, lookup, &Q::VTABLE) {\n         TryGetJob::NotYetStarted(job) => job,\n         TryGetJob::Cycle(result) => return result,\n         #[cfg(parallel_compiler)]\n@@ -697,12 +697,14 @@ where\n             // Cache hit, do nothing\n         },\n         |key, lookup| {\n-            let job = match JobOwner::try_start::<Q>(tcx, span, &key, lookup) {\n-                TryGetJob::NotYetStarted(job) => job,\n-                TryGetJob::Cycle(_) => return,\n-                #[cfg(parallel_compiler)]\n-                TryGetJob::JobCompleted(_) => return,\n-            };\n+            let job =\n+                match JobOwner::try_start(tcx, Q::query_state(tcx), span, &key, lookup, &Q::VTABLE)\n+                {\n+                    TryGetJob::NotYetStarted(job) => job,\n+                    TryGetJob::Cycle(_) => return,\n+                    #[cfg(parallel_compiler)]\n+                    TryGetJob::JobCompleted(_) => return,\n+                };\n             force_query_with_job(tcx, key, job, dep_node, &Q::VTABLE);\n         },\n     );"}]}