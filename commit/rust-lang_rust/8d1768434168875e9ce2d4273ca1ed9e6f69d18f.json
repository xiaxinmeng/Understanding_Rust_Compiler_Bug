{"sha": "8d1768434168875e9ce2d4273ca1ed9e6f69d18f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMTc2ODQzNDE2ODg3NWU5Y2UyZDQyNzNjYTFlZDllNmY2OWQxOGY=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-05T10:38:44Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T16:32:22Z"}, "message": "rustc_codegen_llvm: remove _opaque suffix.", "tree": {"sha": "3cd113225f3415463611635d173a88b05a65847b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cd113225f3415463611635d173a88b05a65847b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d1768434168875e9ce2d4273ca1ed9e6f69d18f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1768434168875e9ce2d4273ca1ed9e6f69d18f", "html_url": "https://github.com/rust-lang/rust/commit/8d1768434168875e9ce2d4273ca1ed9e6f69d18f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d1768434168875e9ce2d4273ca1ed9e6f69d18f/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1da26707d6ef6eb703001157a7a9a7bd20d17c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/1da26707d6ef6eb703001157a7a9a7bd20d17c83", "html_url": "https://github.com/rust-lang/rust/commit/1da26707d6ef6eb703001157a7a9a7bd20d17c83"}], "stats": {"total": 98, "additions": 49, "deletions": 49}, "files": [{"sha": "63f09a7e53a201cc37fec6aa188b9ea04a01dddb", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/8d1768434168875e9ce2d4273ca1ed9e6f69d18f/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1768434168875e9ce2d4273ca1ed9e6f69d18f/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=8d1768434168875e9ce2d4273ca1ed9e6f69d18f", "patch": "@@ -378,48 +378,48 @@ pub enum ThreadLocalMode {\n extern { pub type Module; }\n extern { pub type Context; }\n extern { pub type Type; }\n-extern { pub type Value_opaque; }\n-pub type ValueRef = *mut Value_opaque;\n+extern { pub type Value; }\n+pub type ValueRef = *mut Value;\n extern { pub type Metadata; }\n-extern { pub type BasicBlock_opaque; }\n-pub type BasicBlockRef = *mut BasicBlock_opaque;\n+extern { pub type BasicBlock; }\n+pub type BasicBlockRef = *mut BasicBlock;\n extern { pub type Builder; }\n-extern { pub type MemoryBuffer_opaque; }\n-pub type MemoryBufferRef = *mut MemoryBuffer_opaque;\n-extern { pub type PassManager_opaque; }\n-pub type PassManagerRef = *mut PassManager_opaque;\n-extern { pub type PassManagerBuilder_opaque; }\n-pub type PassManagerBuilderRef = *mut PassManagerBuilder_opaque;\n-extern { pub type Use_opaque; }\n-pub type UseRef = *mut Use_opaque;\n-extern { pub type ObjectFile_opaque; }\n-pub type ObjectFileRef = *mut ObjectFile_opaque;\n-extern { pub type SectionIterator_opaque; }\n-pub type SectionIteratorRef = *mut SectionIterator_opaque;\n-extern { pub type Pass_opaque; }\n-pub type PassRef = *mut Pass_opaque;\n+extern { pub type MemoryBuffer; }\n+pub type MemoryBufferRef = *mut MemoryBuffer;\n+extern { pub type PassManager; }\n+pub type PassManagerRef = *mut PassManager;\n+extern { pub type PassManagerBuilder; }\n+pub type PassManagerBuilderRef = *mut PassManagerBuilder;\n+extern { pub type Use; }\n+pub type UseRef = *mut Use;\n+extern { pub type ObjectFile; }\n+pub type ObjectFileRef = *mut ObjectFile;\n+extern { pub type SectionIterator; }\n+pub type SectionIteratorRef = *mut SectionIterator;\n+extern { pub type Pass; }\n+pub type PassRef = *mut Pass;\n extern { pub type TargetMachine; }\n pub type TargetMachineRef = *const TargetMachine;\n-extern { pub type Archive_opaque; }\n-pub type ArchiveRef = *mut Archive_opaque;\n-extern { pub type ArchiveIterator_opaque; }\n-pub type ArchiveIteratorRef = *mut ArchiveIterator_opaque;\n-extern { pub type ArchiveChild_opaque; }\n-pub type ArchiveChildRef = *mut ArchiveChild_opaque;\n-extern { pub type Twine_opaque; }\n-pub type TwineRef = *mut Twine_opaque;\n-extern { pub type DiagnosticInfo_opaque; }\n-pub type DiagnosticInfoRef = *mut DiagnosticInfo_opaque;\n-extern { pub type DebugLoc_opaque; }\n-pub type DebugLocRef = *mut DebugLoc_opaque;\n-extern { pub type SMDiagnostic_opaque; }\n-pub type SMDiagnosticRef = *mut SMDiagnostic_opaque;\n-extern { pub type RustArchiveMember_opaque; }\n-pub type RustArchiveMemberRef = *mut RustArchiveMember_opaque;\n-extern { pub type OperandBundleDef_opaque; }\n-pub type OperandBundleDefRef = *mut OperandBundleDef_opaque;\n-extern { pub type Linker_opaque; }\n-pub type LinkerRef = *mut Linker_opaque;\n+extern { pub type Archive; }\n+pub type ArchiveRef = *mut Archive;\n+extern { pub type ArchiveIterator; }\n+pub type ArchiveIteratorRef = *mut ArchiveIterator;\n+extern { pub type ArchiveChild; }\n+pub type ArchiveChildRef = *mut ArchiveChild;\n+extern { pub type Twine; }\n+pub type TwineRef = *mut Twine;\n+extern { pub type DiagnosticInfo; }\n+pub type DiagnosticInfoRef = *mut DiagnosticInfo;\n+extern { pub type DebugLoc; }\n+pub type DebugLocRef = *mut DebugLoc;\n+extern { pub type SMDiagnostic; }\n+pub type SMDiagnosticRef = *mut SMDiagnostic;\n+extern { pub type RustArchiveMember; }\n+pub type RustArchiveMemberRef = *mut RustArchiveMember;\n+extern { pub type OperandBundleDef; }\n+pub type OperandBundleDefRef = *mut OperandBundleDef;\n+extern { pub type Linker; }\n+pub type LinkerRef = *mut Linker;\n \n pub type DiagnosticHandler = unsafe extern \"C\" fn(DiagnosticInfoRef, *mut c_void);\n pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(SMDiagnosticRef, *const c_void, c_uint);\n@@ -552,7 +552,7 @@ extern \"C\" {\n     pub fn LLVMRustMetadataTypeInContext(C: &Context) -> &Type;\n \n     // Operations on all values\n-    pub fn LLVMTypeOf(Val: &Value_opaque) -> &Type;\n+    pub fn LLVMTypeOf(Val: &Value) -> &Type;\n     pub fn LLVMGetValueName(Val: ValueRef) -> *const c_char;\n     pub fn LLVMSetValueName(Val: ValueRef, Name: *const c_char);\n     pub fn LLVMReplaceAllUsesWith(OldVal: ValueRef, NewVal: ValueRef);\n@@ -758,7 +758,7 @@ extern \"C\" {\n     pub fn LLVMDisposeBuilder(Builder: &Builder);\n \n     // Metadata\n-    pub fn LLVMSetCurrentDebugLocation(Builder: &Builder, L: Option<NonNull<Value_opaque>>);\n+    pub fn LLVMSetCurrentDebugLocation(Builder: &Builder, L: Option<NonNull<Value>>);\n     pub fn LLVMGetCurrentDebugLocation(Builder: &Builder) -> ValueRef;\n     pub fn LLVMSetInstDebugLocation(Builder: &Builder, Inst: ValueRef);\n \n@@ -784,7 +784,7 @@ extern \"C\" {\n                                NumArgs: c_uint,\n                                Then: BasicBlockRef,\n                                Catch: BasicBlockRef,\n-                               Bundle: Option<NonNull<OperandBundleDef_opaque>>,\n+                               Bundle: Option<NonNull<OperandBundleDef>>,\n                                Name: *const c_char)\n                                -> ValueRef;\n     pub fn LLVMBuildLandingPad(B: &'a Builder,\n@@ -797,14 +797,14 @@ extern \"C\" {\n     pub fn LLVMBuildUnreachable(B: &Builder) -> ValueRef;\n \n     pub fn LLVMRustBuildCleanupPad(B: &Builder,\n-                                   ParentPad: Option<NonNull<Value_opaque>>,\n+                                   ParentPad: Option<NonNull<Value>>,\n                                    ArgCnt: c_uint,\n                                    Args: *const ValueRef,\n                                    Name: *const c_char)\n                                    -> ValueRef;\n     pub fn LLVMRustBuildCleanupRet(B: &Builder,\n                                    CleanupPad: ValueRef,\n-                                   UnwindBB: Option<NonNull<BasicBlock_opaque>>)\n+                                   UnwindBB: Option<NonNull<BasicBlock>>)\n                                    -> ValueRef;\n     pub fn LLVMRustBuildCatchPad(B: &Builder,\n                                  ParentPad: ValueRef,\n@@ -814,8 +814,8 @@ extern \"C\" {\n                                  -> ValueRef;\n     pub fn LLVMRustBuildCatchRet(B: &Builder, Pad: ValueRef, BB: BasicBlockRef) -> ValueRef;\n     pub fn LLVMRustBuildCatchSwitch(Builder: &Builder,\n-                                    ParentPad: Option<NonNull<Value_opaque>>,\n-                                    BB: Option<NonNull<BasicBlock_opaque>>,\n+                                    ParentPad: Option<NonNull<Value>>,\n+                                    BB: Option<NonNull<BasicBlock>>,\n                                     NumHandlers: c_uint,\n                                     Name: *const c_char)\n                                     -> ValueRef;\n@@ -1126,7 +1126,7 @@ extern \"C\" {\n                              Fn: ValueRef,\n                              Args: *const ValueRef,\n                              NumArgs: c_uint,\n-                             Bundle: Option<NonNull<OperandBundleDef_opaque>>,\n+                             Bundle: Option<NonNull<OperandBundleDef>>,\n                              Name: *const c_char)\n                              -> ValueRef;\n     pub fn LLVMBuildSelect(B: &Builder,\n@@ -1680,7 +1680,7 @@ extern \"C\" {\n                                 -> LLVMRustResult;\n     pub fn LLVMRustArchiveMemberNew(Filename: *const c_char,\n                                     Name: *const c_char,\n-                                    Child: Option<NonNull<ArchiveChild_opaque>>)\n+                                    Child: Option<NonNull<ArchiveChild>>)\n                                     -> RustArchiveMemberRef;\n     pub fn LLVMRustArchiveMemberFree(Member: RustArchiveMemberRef);\n "}, {"sha": "cf06e9532216a88f3e78526c0e0b905c5b139b4a", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d1768434168875e9ce2d4273ca1ed9e6f69d18f/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1768434168875e9ce2d4273ca1ed9e6f69d18f/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=8d1768434168875e9ce2d4273ca1ed9e6f69d18f", "patch": "@@ -93,8 +93,8 @@ impl FromStr for ArchiveKind {\n }\n \n #[allow(missing_copy_implementations)]\n-pub enum RustString_opaque {}\n-type RustStringRef = *mut RustString_opaque;\n+extern { pub type RustString; }\n+type RustStringRef = *mut RustString;\n type RustStringRepr = *mut RefCell<Vec<u8>>;\n \n /// Appending to a Rust string -- used by RawRustStringOstream."}]}