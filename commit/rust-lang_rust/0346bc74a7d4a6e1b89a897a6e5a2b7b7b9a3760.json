{"sha": "0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760", "node_id": "C_kwDOAAsO6NoAKDAzNDZiYzc0YTdkNGE2ZTFiODlhODk3YTZlNWEyYjdiN2I5YTM3NjA", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-12-20T22:40:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-20T22:40:50Z"}, "message": "Merge pull request #5140 from calebcartwright/subtree-sync-2021-12-19\n\nSubtree sync", "tree": {"sha": "309f1779252548e18f0a733ad8494900faade512", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/309f1779252548e18f0a733ad8494900faade512"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhwQZyCRBK7hj4Ov3rIwAALaIIAD6gkZAn02tk6iFJM8xQQSAV\ndag3lUSkFH/IBr+tUMNXUBDgQxxSqwRTsry5yQshq8VozU+Qy+vkKL8Lm/yVz62L\nAjPPuHURuw4Z9la8RODyNEj4h5LR+z8tblPdDqUVVNEngOT696iBOtFNRj2z+d3r\n+wnp0wA4qQ7NhnP2lb74A6RNiJdACMetukGHFKu7h0tOMXNOD084t/q6RcYHA455\n7hFQPVkz4HxC456b1V5jpjyLT936lv0vWDaq/Y5Lm+e/rb1s+yVgvev7UHLleqnM\nLILjDuz9jA9Ka4G7Abb4hsMrai359MIArE2CHzDF/mf+yUNxmTk1s/pZdsufV2E=\n=1ejS\n-----END PGP SIGNATURE-----\n", "payload": "tree 309f1779252548e18f0a733ad8494900faade512\nparent 57ac92bf1658a576fdc066b82a37aa3a7de2c96b\nparent b214938ff3fcd82f568d9eae0b0bda5d528a15ae\nauthor Caleb Cartwright <calebcartwright@users.noreply.github.com> 1640040050 -0600\ncommitter GitHub <noreply@github.com> 1640040050 -0600\n\nMerge pull request #5140 from calebcartwright/subtree-sync-2021-12-19\n\nSubtree sync"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760", "html_url": "https://github.com/rust-lang/rust/commit/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ac92bf1658a576fdc066b82a37aa3a7de2c96b", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ac92bf1658a576fdc066b82a37aa3a7de2c96b", "html_url": "https://github.com/rust-lang/rust/commit/57ac92bf1658a576fdc066b82a37aa3a7de2c96b"}, {"sha": "b214938ff3fcd82f568d9eae0b0bda5d528a15ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/b214938ff3fcd82f568d9eae0b0bda5d528a15ae", "html_url": "https://github.com/rust-lang/rust/commit/b214938ff3fcd82f568d9eae0b0bda5d528a15ae"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "c97b5ec6609bebe5afc29b806c380f999776346a", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-11-08\"\n+channel = \"nightly-2021-12-20\"\n components = [\"rustc-dev\"]"}, {"sha": "3887a8051f20995efc83e20c88b789e8d162ef84", "filename": "src/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760", "patch": "@@ -337,7 +337,7 @@ impl Rewrite for ast::Attribute {\n         } else {\n             let should_skip = self\n                 .ident()\n-                .map(|s| context.skip_context.skip_attribute(&s.name.as_str()))\n+                .map(|s| context.skip_context.skip_attribute(s.name.as_str()))\n                 .unwrap_or(false);\n             let prefix = attr_prefix(self);\n \n@@ -356,7 +356,7 @@ impl Rewrite for ast::Attribute {\n \n                         let literal_str = literal.as_str();\n                         let doc_comment_formatter =\n-                            DocCommentFormatter::new(&*literal_str, comment_style);\n+                            DocCommentFormatter::new(literal_str, comment_style);\n                         let doc_comment = format!(\"{}\", doc_comment_formatter);\n                         return rewrite_doc_comment(\n                             &doc_comment,"}, {"sha": "babc56f86edc6db1a23ce47472563b9a2d71d10e", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760", "patch": "@@ -616,10 +616,10 @@ impl<'a> FmtVisitor<'a> {\n                 (TyAlias(lty), TyAlias(rty))\n                     if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n                 {\n-                    a.ident.as_str().cmp(&b.ident.as_str())\n+                    a.ident.as_str().cmp(b.ident.as_str())\n                 }\n                 (Const(..), Const(..)) | (MacCall(..), MacCall(..)) => {\n-                    a.ident.as_str().cmp(&b.ident.as_str())\n+                    a.ident.as_str().cmp(b.ident.as_str())\n                 }\n                 (Fn(..), Fn(..)) => a.span.lo().cmp(&b.span.lo()),\n                 (TyAlias(ty), _) if is_type(&ty.ty) => Ordering::Less,\n@@ -1029,7 +1029,7 @@ pub(crate) fn format_trait(\n         if !bounds.is_empty() {\n             let ident_hi = context\n                 .snippet_provider\n-                .span_after(item.span, &item.ident.as_str());\n+                .span_after(item.span, item.ident.as_str());\n             let bound_hi = bounds.last().unwrap().span().hi();\n             let snippet = context.snippet(mk_sp(ident_hi, bound_hi));\n             if contains_comment(snippet) {"}, {"sha": "9d438a80d942f8aca16f74f7412a01e23ca1d11e", "filename": "src/modules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760", "patch": "@@ -455,7 +455,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n \n     fn push_inline_mod_directory(&mut self, id: symbol::Ident, attrs: &[ast::Attribute]) {\n         if let Some(path) = find_path_value(attrs) {\n-            self.directory.path.push(&*path.as_str());\n+            self.directory.path.push(path.as_str());\n             self.directory.ownership = DirectoryOwnership::Owned { relative: None };\n         } else {\n             // We have to push on the current module name in the case of relative\n@@ -467,10 +467,10 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             if let DirectoryOwnership::Owned { relative } = &mut self.directory.ownership {\n                 if let Some(ident) = relative.take() {\n                     // remove the relative offset\n-                    self.directory.path.push(&*ident.as_str());\n+                    self.directory.path.push(ident.as_str());\n                 }\n             }\n-            self.directory.path.push(&*id.as_str());\n+            self.directory.path.push(id.as_str());\n         }\n     }\n "}, {"sha": "13bfc92507d0a9d5d676cc0c50874f6923d16c95", "filename": "src/reorder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760", "patch": "@@ -26,14 +26,14 @@ use crate::visitor::FmtVisitor;\n fn compare_items(a: &ast::Item, b: &ast::Item) -> Ordering {\n     match (&a.kind, &b.kind) {\n         (&ast::ItemKind::Mod(..), &ast::ItemKind::Mod(..)) => {\n-            a.ident.as_str().cmp(&b.ident.as_str())\n+            a.ident.as_str().cmp(b.ident.as_str())\n         }\n         (&ast::ItemKind::ExternCrate(ref a_name), &ast::ItemKind::ExternCrate(ref b_name)) => {\n             // `extern crate foo as bar;`\n             //               ^^^ Comparing this.\n-            let a_orig_name = a_name.map_or_else(|| a.ident.as_str(), rustc_span::Symbol::as_str);\n-            let b_orig_name = b_name.map_or_else(|| b.ident.as_str(), rustc_span::Symbol::as_str);\n-            let result = a_orig_name.cmp(&b_orig_name);\n+            let a_orig_name = a_name.unwrap_or(a.ident.name);\n+            let b_orig_name = b_name.unwrap_or(b.ident.name);\n+            let result = a_orig_name.as_str().cmp(b_orig_name.as_str());\n             if result != Ordering::Equal {\n                 return result;\n             }\n@@ -44,7 +44,7 @@ fn compare_items(a: &ast::Item, b: &ast::Item) -> Ordering {\n                 (Some(..), None) => Ordering::Greater,\n                 (None, Some(..)) => Ordering::Less,\n                 (None, None) => Ordering::Equal,\n-                (Some(..), Some(..)) => a.ident.as_str().cmp(&b.ident.as_str()),\n+                (Some(..), Some(..)) => a.ident.as_str().cmp(b.ident.as_str()),\n             }\n         }\n         _ => unreachable!(),"}, {"sha": "23d065c9cc95ae3113ddf12a53e5a12f8fc3cd03", "filename": "src/syntux/parser.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760/src%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760/src%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fparser.rs?ref=0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760", "patch": "@@ -95,15 +95,17 @@ pub(crate) enum ParserError {\n \n impl<'a> Parser<'a> {\n     pub(crate) fn submod_path_from_attr(attrs: &[ast::Attribute], path: &Path) -> Option<PathBuf> {\n-        let path_string = first_attr_value_str_by_name(attrs, sym::path)?.as_str();\n+        let path_sym = first_attr_value_str_by_name(attrs, sym::path)?;\n+        let path_str = path_sym.as_str();\n+\n         // On windows, the base path might have the form\n         // `\\\\?\\foo\\bar` in which case it does not tolerate\n         // mixed `/` and `\\` separators, so canonicalize\n         // `/` to `\\`.\n         #[cfg(windows)]\n-        let path_string = path_string.replace(\"/\", \"\\\\\");\n+        let path_str = path_str.replace(\"/\", \"\\\\\");\n \n-        Some(path.join(&*path_string))\n+        Some(path.join(path_str))\n     }\n \n     pub(crate) fn parse_file_as_module("}, {"sha": "0c0b789a6efd1a63614621af60b8c89aa21753f0", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=0346bc74a7d4a6e1b89a897a6e5a2b7b7b9a3760", "patch": "@@ -260,7 +260,7 @@ fn is_skip(meta_item: &MetaItem) -> bool {\n     match meta_item.kind {\n         MetaItemKind::Word => {\n             let path_str = pprust::path_to_string(&meta_item.path);\n-            path_str == *skip_annotation().as_str() || path_str == *depr_skip_annotation().as_str()\n+            path_str == skip_annotation().as_str() || path_str == depr_skip_annotation().as_str()\n         }\n         MetaItemKind::List(ref l) => {\n             meta_item.has_name(sym::cfg_attr) && l.len() == 2 && is_skip_nested(&l[1])"}]}