{"sha": "2d313fe5011acfa28b8771c5975be37e1c84fd73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMzEzZmU1MDExYWNmYTI4Yjg3NzFjNTk3NWJlMzdlMWM4NGZkNzM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-12-20T03:38:28Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-12-20T03:38:28Z"}, "message": "Update docs to mention trait constraints; also fix failing doc tests\n\n/cc #4217", "tree": {"sha": "9f7f4ae8b617697ebda7102eaecd41efe3061c21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f7f4ae8b617697ebda7102eaecd41efe3061c21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d313fe5011acfa28b8771c5975be37e1c84fd73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d313fe5011acfa28b8771c5975be37e1c84fd73", "html_url": "https://github.com/rust-lang/rust/commit/2d313fe5011acfa28b8771c5975be37e1c84fd73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d313fe5011acfa28b8771c5975be37e1c84fd73/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b865b4b70df27a1e19e7a0cdfedf51d0096da25b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b865b4b70df27a1e19e7a0cdfedf51d0096da25b", "html_url": "https://github.com/rust-lang/rust/commit/b865b4b70df27a1e19e7a0cdfedf51d0096da25b"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "8bff1aa37afc1a95afaa64c99715876423292dac", "filename": "doc/rust.md", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2d313fe5011acfa28b8771c5975be37e1c84fd73/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d313fe5011acfa28b8771c5975be37e1c84fd73/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=2d313fe5011acfa28b8771c5975be37e1c84fd73", "patch": "@@ -1195,8 +1195,19 @@ Values with a trait type can have [methods called](#method-call-expressions) on\n for any method in the trait,\n and can be used to instantiate type parameters that are bounded by the trait.\n \n-Trait methods may be static. Currently implementations of static methods behave like\n-functions declared in the implentation's module.\n+Trait methods may be static.\n+Currently, implementations of static methods behave like functions declared in the implementation's module.\n+\n+Traits can have _constraints_ for example, in\n+\n+~~~~\n+trait Shape { fn area() -> float; }\n+trait Circle : Shape { fn radius() -> float; }\n+~~~~\n+\n+the syntax `Circle : Shape` means that types that implement `Circle` must also have an implementation for `Shape`.\n+In an implementation of `Circle` for a given type `T`, methods can refer to `Shape` methods,\n+since the typechecker checks that any type with an implementation of `Circle` also has an implementation of `Shape`.\n \n ### Implementations\n \n@@ -1520,8 +1531,11 @@ To indicate that a field is mutable, the `mut` keyword is written before its nam\n The following are examples of structure expressions:\n \n ~~~~\n+# struct Point { x: float, y: float }\n+# mod game { pub struct User { name: &str, age: uint, mut score: uint } } \n+# use game;\n Point {x: 10f, y: 20f};\n-game::User {name: \"Joe\", age: 35u, mut score: 100_000};\n+let u = game::User {name: \"Joe\", age: 35u, mut score: 100_000};\n ~~~~\n \n A structure expression forms a new value of the named structure type.\n@@ -1532,6 +1546,7 @@ A new structure will be created, of the same type as the base expression, with t\n and the values in the base record for all other fields.\n \n ~~~~\n+# struct Point3d { x: int, y: int, z: int }\n let base = Point3d {x: 1, y: 2, z: 3};\n Point3d {y: 0, z: 10, .. base};\n ~~~~"}, {"sha": "c7b75993f11e3a53b1e3fe79aba677c74b062229", "filename": "doc/tutorial.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2d313fe5011acfa28b8771c5975be37e1c84fd73/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d313fe5011acfa28b8771c5975be37e1c84fd73/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=2d313fe5011acfa28b8771c5975be37e1c84fd73", "patch": "@@ -2076,6 +2076,39 @@ the preferred way to use traits polymorphically.\n \n This usage of traits is similar to Haskell type classes.\n \n+## Trait constraints\n+\n+We can write a trait declaration that is _constrained_ to only be implementable on types that\n+also implement some other trait.\n+\n+For example, we can define a `Circle` trait that only types that also have the `Shape` trait can have:\n+\n+~~~~\n+trait Shape { fn area() -> float; }\n+trait Circle : Shape { fn radius() -> float; }\n+~~~~\n+\n+Now, implementations of `Circle` methods can call `Shape` methods:\n+\n+~~~~\n+# trait Shape { fn area() -> float; }\n+# trait Circle : Shape { fn radius() -> float; }\n+# struct Point { x: float, y: float }\n+# use float::consts::pi;\n+# use float::sqrt;\n+# fn square(x: float) -> float { x * x }\n+struct CircleStruct { center: Point, radius: float }\n+impl CircleStruct: Circle {\n+     fn radius() -> float { sqrt(self.area() / pi) }\n+}\n+impl CircleStruct: Shape {\n+     fn area() -> float { pi * square(self.radius) }\n+}   \n+~~~~\n+\n+This is a silly way to compute the radius of a circle\n+(since we could just return the `circle` field), but you get the idea.\n+\n ## Trait objects and dynamic method dispatch\n \n The above allows us to define functions that polymorphically act on"}]}