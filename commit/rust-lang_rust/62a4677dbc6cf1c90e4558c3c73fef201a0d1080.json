{"sha": "62a4677dbc6cf1c90e4558c3c73fef201a0d1080", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYTQ2NzdkYmM2Y2YxYzkwZTQ1NThjM2M3M2ZlZjIwMWEwZDEwODA=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-21T00:00:09Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-21T00:02:22Z"}, "message": "Add label completion", "tree": {"sha": "22b7fc20e5b44d2378d0b0a055866378f194340f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22b7fc20e5b44d2378d0b0a055866378f194340f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62a4677dbc6cf1c90e4558c3c73fef201a0d1080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62a4677dbc6cf1c90e4558c3c73fef201a0d1080", "html_url": "https://github.com/rust-lang/rust/commit/62a4677dbc6cf1c90e4558c3c73fef201a0d1080", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62a4677dbc6cf1c90e4558c3c73fef201a0d1080/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd325707bc44c08f60ee3312af815cfb96ee86a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd325707bc44c08f60ee3312af815cfb96ee86a", "html_url": "https://github.com/rust-lang/rust/commit/cbd325707bc44c08f60ee3312af815cfb96ee86a"}], "stats": {"total": 107, "additions": 100, "deletions": 7}, "files": [{"sha": "07be28e9c41f72003d9508e6a33a5965a97f73b9", "filename": "crates/ide_completion/src/completions/lifetime.rs", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/62a4677dbc6cf1c90e4558c3c73fef201a0d1080/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a4677dbc6cf1c90e4558c3c73fef201a0d1080/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=62a4677dbc6cf1c90e4558c3c73fef201a0d1080", "patch": "@@ -1,4 +1,4 @@\n-//! Completes lifetimes.\n+//! Completes lifetimes and labels.\n use hir::ScopeDef;\n \n use crate::{completions::Completions, context::CompletionContext};\n@@ -29,6 +29,18 @@ pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext)\n     }\n }\n \n+/// Completes labels.\n+pub(crate) fn complete_label(acc: &mut Completions, ctx: &CompletionContext) {\n+    if !ctx.is_label_ref {\n+        return;\n+    }\n+    ctx.scope.process_all_names(&mut |name, res| {\n+        if let ScopeDef::Label(_) = res {\n+            acc.add_resolution(ctx, name.to_string(), &res);\n+        }\n+    });\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n@@ -178,4 +190,67 @@ fn foo<'footime, 'lifetime: 'a$0>() {}\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn complete_label_in_loop() {\n+        check(\n+            r#\"\n+fn foo() {\n+    'foop: loop {\n+        break '$0\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                lb 'foop\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+fn foo() {\n+    'foop: loop {\n+        continue '$0\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                lb 'foop\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_label_in_block_nested() {\n+        check(\n+            r#\"\n+fn foo() {\n+    'foop: {\n+        'baap: {\n+            break '$0\n+        }\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                lb 'baap\n+                lb 'foop\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_label_in_loop_with_value() {\n+        check(\n+            r#\"\n+fn foo() {\n+    'foop: loop {\n+        break '$0 i32;\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                lb 'foop\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "6cb7e526454a935ab3cc3ebcd0820907abcf53a1", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/62a4677dbc6cf1c90e4558c3c73fef201a0d1080/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a4677dbc6cf1c90e4558c3c73fef201a0d1080/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=62a4677dbc6cf1c90e4558c3c73fef201a0d1080", "patch": "@@ -53,6 +53,7 @@ pub(crate) struct CompletionContext<'a> {\n     /// FIXME: `ActiveParameter` is string-based, which is very very wrong\n     pub(super) active_parameter: Option<ActiveParameter>,\n     pub(super) is_param: bool,\n+    pub(super) is_label_ref: bool,\n     /// If a name-binding or reference to a const in a pattern.\n     /// Irrefutable patterns (like let) are excluded.\n     pub(super) is_pat_binding_or_const: bool,\n@@ -155,6 +156,7 @@ impl<'a> CompletionContext<'a> {\n             record_field_syntax: None,\n             impl_def: None,\n             active_parameter: ActiveParameter::at(db, position),\n+            is_label_ref: false,\n             is_param: false,\n             is_pat_binding_or_const: false,\n             is_irrefutable_pat_binding: false,\n@@ -468,12 +470,26 @@ impl<'a> CompletionContext<'a> {\n     ) {\n         self.lifetime_syntax =\n             find_node_at_offset(original_file, lifetime.syntax().text_range().start());\n-        if lifetime.syntax().parent().map_or(false, |p| p.kind() != syntax::SyntaxKind::ERROR) {\n-            self.lifetime_allowed = true;\n-        }\n-        if let Some(_) = lifetime.syntax().parent().and_then(ast::LifetimeParam::cast) {\n-            self.lifetime_param_syntax =\n-                self.sema.find_node_at_offset_with_macros(original_file, offset);\n+        if let Some(parent) = lifetime.syntax().parent() {\n+            if parent.kind() == syntax::SyntaxKind::ERROR {\n+                return;\n+            }\n+\n+            if parent.kind() != syntax::SyntaxKind::LABEL {\n+                match_ast! {\n+                    match parent {\n+                        ast::LifetimeParam(_it) => {\n+                            self.lifetime_allowed = true;\n+                            self.lifetime_param_syntax =\n+                                self.sema.find_node_at_offset_with_macros(original_file, offset);\n+                        },\n+                        ast::BreakExpr(_it) => self.is_label_ref = true,\n+                        ast::ContinueExpr(_it) => self.is_label_ref = true,\n+                        ast::Label(_it) => (),\n+                        _ => self.lifetime_allowed = true,\n+                    }\n+                }\n+            }\n         }\n     }\n "}, {"sha": "995970fcab8cc5c8be15b966c776b4c7300390b5", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62a4677dbc6cf1c90e4558c3c73fef201a0d1080/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a4677dbc6cf1c90e4558c3c73fef201a0d1080/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=62a4677dbc6cf1c90e4558c3c73fef201a0d1080", "patch": "@@ -131,6 +131,7 @@ pub fn completions(\n     completions::mod_::complete_mod(&mut acc, &ctx);\n     completions::flyimport::import_on_the_fly(&mut acc, &ctx);\n     completions::lifetime::complete_lifetime(&mut acc, &ctx);\n+    completions::lifetime::complete_label(&mut acc, &ctx);\n \n     Some(acc)\n }"}, {"sha": "23e00aa471a359c3a390b1a8393fa1d5570eedcc", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62a4677dbc6cf1c90e4558c3c73fef201a0d1080/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a4677dbc6cf1c90e4558c3c73fef201a0d1080/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=62a4677dbc6cf1c90e4558c3c73fef201a0d1080", "patch": "@@ -219,6 +219,7 @@ impl<'a> Render<'a> {\n                 hir::GenericParam::ConstParam(_) => SymbolKind::ConstParam,\n             }),\n             ScopeDef::Local(..) => CompletionItemKind::SymbolKind(SymbolKind::Local),\n+            ScopeDef::Label(..) => CompletionItemKind::SymbolKind(SymbolKind::Label),\n             ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => {\n                 CompletionItemKind::SymbolKind(SymbolKind::SelfParam)\n             }"}]}