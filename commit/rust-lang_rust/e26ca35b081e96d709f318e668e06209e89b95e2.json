{"sha": "e26ca35b081e96d709f318e668e06209e89b95e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNmNhMzViMDgxZTk2ZDcwOWYzMThlNjY4ZTA2MjA5ZTg5Yjk1ZTI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-28T01:53:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-28T01:53:04Z"}, "message": "librustc: Fix the test runner, the condition system, and core test. rs=bustage", "tree": {"sha": "2ad76c644d465bc9a6007df2c0ee78ad5cc4cd07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ad76c644d465bc9a6007df2c0ee78ad5cc4cd07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e26ca35b081e96d709f318e668e06209e89b95e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e26ca35b081e96d709f318e668e06209e89b95e2", "html_url": "https://github.com/rust-lang/rust/commit/e26ca35b081e96d709f318e668e06209e89b95e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e26ca35b081e96d709f318e668e06209e89b95e2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84ce55e5427d0d36dbf6e330537175ab4162b6f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/84ce55e5427d0d36dbf6e330537175ab4162b6f2", "html_url": "https://github.com/rust-lang/rust/commit/84ce55e5427d0d36dbf6e330537175ab4162b6f2"}], "stats": {"total": 104, "additions": 91, "deletions": 13}, "files": [{"sha": "3181cb24ea787af23f582a6b8e62d176543676e0", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -16,6 +16,7 @@\n \n //! Boolean logic\n \n+use bool;\n use cmp;\n use cmp::Eq;\n "}, {"sha": "4fe60810dc39bc93fc9af56c903a588c7ef22085", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -14,6 +14,7 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+use char;\n use cmp::Eq;\n use str;\n use u32;"}, {"sha": "89789a38b24da2a8b0ce682d23deeeab3eb6e379", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -473,6 +473,10 @@ impl<T: Copy> DList<T> {\n #[cfg(test)]\n mod tests {\n     #[legacy_exports];\n+\n+    use iter;\n+    use vec;\n+\n     #[test]\n     fn test_dlist_concat() {\n         let a = from_vec(~[1,2]);"}, {"sha": "220b1a653af080fd5275d6f4aec6d74b88bbad92", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -21,6 +21,7 @@ Simple compression\n use libc;\n use libc::{c_void, size_t, c_int};\n use ptr;\n+use rand;\n use vec;\n \n extern mod rustrt {\n@@ -91,8 +92,8 @@ fn test_flate_round_trip() {\n         }\n         debug!(\"de/inflate of %u bytes of random word-sequences\",\n                in.len());\n-        let cmp = flate::deflate_bytes(in);\n-        let out = flate::inflate_bytes(cmp);\n+        let cmp = deflate_bytes(in);\n+        let out = inflate_bytes(cmp);\n         debug!(\"%u bytes deflated to %u (%.1f%% size)\",\n                in.len(), cmp.len(),\n                100.0 * ((cmp.len() as float) / (in.len() as float)));"}, {"sha": "34269b88748991ad7cdc84d4438ac1f52fc22ca9", "filename": "src/libcore/float.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -27,6 +27,7 @@\n use m_float = f64;\n \n use cmp::{Eq, Ord};\n+use cmp;\n use f64;\n use num;\n use num::Num::from_int;"}, {"sha": "d04123fdb2b2b778a4a34d285122d25d128f50f0", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -16,6 +16,7 @@ use T = self::inst::T;\n \n use char;\n use cmp::{Eq, Ord};\n+use cmp;\n use from_str::FromStr;\n use iter;\n use num;"}, {"sha": "ade4f9d7fc82b67cbbac31576981f757acda72cf", "filename": "src/libcore/io.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -1113,6 +1113,12 @@ pub mod fsync {\n \n #[cfg(test)]\n mod tests {\n+    use i32;\n+    use io;\n+    use result;\n+    use str;\n+    use u64;\n+    use vec;\n \n     #[test]\n     fn test_simple() {"}, {"sha": "2ce2c323cbffe9012bf75cdd67869d46597ac2a8", "filename": "src/libcore/oldcomm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Foldcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Foldcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foldcomm.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -49,9 +49,11 @@ will once again be the preferred module for intertask communication.\n use cast;\n use either;\n use either::Either;\n+use iter;\n use libc;\n use libc::size_t;\n use ptr;\n+use result;\n use sys;\n use task;\n use vec;"}, {"sha": "e7c82cb8f662189b878a87a84a40092dc458d8bb", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -46,6 +46,8 @@ let unwrapped_msg = match move msg {\n \n use cmp::Eq;\n use option;\n+use ptr;\n+use str;\n use util;\n \n /// The option type"}, {"sha": "3b340d6de791d006768340ae2470473a48cd4aa8", "filename": "src/libcore/os.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -920,6 +920,13 @@ pub fn arch() -> str { ~\"arm\" }\n #[cfg(test)]\n #[allow(non_implicitly_copyable_typarams)]\n mod tests {\n+    use libc;\n+    use option;\n+    use os;\n+    use rand;\n+    use run;\n+    use str;\n+    use vec;\n \n     #[test]\n     pub fn last_os_error() {"}, {"sha": "14c7c288bddfbf0ee220cfe7030c3fb03fb2ae89", "filename": "src/libcore/path.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -748,7 +748,7 @@ pub pure fn normalize(components: &[~str]) -> ~[~str] {\n }\n \n // Various windows helpers, and tests for the impl.\n-mod windows {\n+pub mod windows {\n     use libc;\n \n     #[inline(always)]\n@@ -792,6 +792,9 @@ mod windows {\n \n #[cfg(test)]\n mod tests {\n+    use path::windows;\n+    use str;\n+\n     #[test]\n     fn test_double_slash_collapsing() {\n         let path = PosixPath(\"tmp/\");"}, {"sha": "a129a9f4c5af8d04e6d43dea6224eec9a4be7e2b", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -1246,6 +1246,9 @@ pub mod rt {\n \n #[cfg(test)]\n pub mod test {\n+    use pipes::oneshot;\n+    use pipes;\n+\n     #[test]\n     pub fn test_select2() {\n         let (p1, c1) = pipes::stream();"}, {"sha": "efa5062ad98eb69b01bffede0371cafda176aed6", "filename": "src/libcore/private.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -16,13 +16,16 @@\n #[doc(hidden)];\n \n use cast;\n+use iter;\n use libc;\n use oldcomm;\n use option;\n use pipes;\n use ptr;\n+use result;\n use task;\n use task::{TaskBuilder, atomically};\n+use uint;\n \n extern mod rustrt {\n     #[legacy_exports];\n@@ -577,6 +580,12 @@ pub fn unwrap_exclusive<T: Owned>(arc: Exclusive<T>) -> T {\n \n #[cfg(test)]\n pub mod tests {\n+    use option;\n+    use pipes;\n+    use result;\n+    use task;\n+    use uint;\n+\n     #[test]\n     pub fn exclusive_arc() {\n         let mut futures = ~[];"}, {"sha": "0bca8729d970d37ad0514193f322c27b45d798fb", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -17,7 +17,10 @@ use cast;\n use cmp::{Eq, Ord};\n use libc;\n use libc::{c_void, size_t};\n+use ptr;\n+use str;\n use sys;\n+use vec;\n \n #[nolink]\n #[abi = \"cdecl\"]"}, {"sha": "d816f23d4c0ad198d25c0b007c2641e7f8478fc4", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -362,6 +362,9 @@ pub fn random() -> uint {\n \n #[cfg(test)]\n pub mod tests {\n+    use option::Option;\n+    use rand;\n+\n     #[test]\n     pub fn rng_seeded() {\n         let seed = rand::seed();"}, {"sha": "9e9886e66ab18fc1d387276e8b38b825ca141c26", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -381,6 +381,9 @@ pub pure fn unwrap_err<T, U>(res: Result<T, U>) -> U {\n #[allow(non_implicitly_copyable_typarams)]\n mod tests {\n     #[legacy_exports];\n+\n+    use result;\n+\n     fn op1() -> result::Result<int, ~str> { result::Ok(666) }\n \n     fn op2(i: int) -> result::Result<uint, ~str> {"}, {"sha": "b753c647627aece78eef6ebafbd872aeb4b5903b", "filename": "src/libcore/run.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -418,6 +418,8 @@ pub fn waitpid(pid: pid_t) -> int {\n #[cfg(test)]\n mod tests {\n     use io::WriterUtil;\n+    use os;\n+    use run;\n \n     // Regression test for memory leaks\n     #[ignore(cfg(windows))] // FIXME (#2626)"}, {"sha": "8be220e76d79ebfe53467f12882bd50a2c65c212", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -458,6 +458,8 @@ pub mod linear {\n #[test]\n pub mod test {\n     use send_map::linear::LinearMap;\n+    use send_map::linear;\n+    use uint;\n \n     #[test]\n     pub fn inserts() {"}, {"sha": "a1595e4135ed27ea15152125582a083fa7d6ea39", "filename": "src/libcore/str.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -2307,8 +2307,12 @@ impl &str: StrSlice {\n \n #[cfg(test)]\n mod tests {\n-\n+    use char;\n     use libc::c_char;\n+    use libc;\n+    use ptr;\n+    use str::raw;\n+    use vec;\n \n     #[test]\n     fn test_eq() {"}, {"sha": "d79fa3a86ff75244558fa6672ae6ca39c8f49e02", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -145,6 +145,7 @@ pub pure fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n \n #[cfg(test)]\n pub mod tests {\n+    use cast;\n \n     #[test]\n     pub fn size_of_basic() {"}, {"sha": "0cfceb6358a6500b6d5eae1626da95c488fa3a3e", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -28,6 +28,7 @@ magic.\n \n use rt;\n use task::local_data_priv::{local_get, local_pop, local_modify, local_set};\n+use task;\n \n /**\n  * Indexes a task-local data slot. The function's code pointer is used for"}, {"sha": "245b955c8711a29c2ede0f179d1aa3d88615bbfe", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -38,15 +38,21 @@\n  * ~~~\n  */\n \n+use cast;\n use cmp;\n use cmp::Eq;\n+use iter;\n+use libc;\n use oldcomm;\n use option;\n use result::Result;\n use pipes::{stream, Chan, Port};\n+use pipes;\n+use ptr;\n use result;\n use task::local_data_priv::{local_get, local_set};\n use task::rt::{task_id, rust_task};\n+use task;\n use util;\n use util::replace;\n "}, {"sha": "a904cbec3e592d7fd1e1a02f85a2d9fd386f4258", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -74,7 +74,9 @@\n #[warn(deprecated_mode)];\n \n use cast;\n+use oldcomm;\n use option;\n+use pipes;\n use private;\n use ptr;\n use send_map;"}, {"sha": "ec28056828228dd5cd58417861576025ba94abe4", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -20,6 +20,7 @@ use from_str::FromStr;\n use iter;\n use num;\n use str;\n+use uint;\n use vec;\n \n pub const bits : uint = inst::bits;"}, {"sha": "4d2da7180ef2e0b6dfc73219464f92f117d5fc8d", "filename": "src/libcore/uint-template/uint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fuint.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -17,6 +17,7 @@ pub use self::inst::{\n \n mod inst {\n     use sys;\n+    use uint;\n \n     pub type T = uint;\n "}, {"sha": "1920edc8253e38f9a94af08166ba88b5e3bf8ab1", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -2245,6 +2245,8 @@ impl<A:Copy> @[A] : iter::CopyableNonstrictIter<A> {\n \n #[cfg(test)]\n mod tests {\n+    use option;\n+    use vec::raw;\n \n     fn square(n: uint) -> uint { return n * n; }\n \n@@ -2597,7 +2599,9 @@ mod tests {\n         fn halve(i: &int) -> Option<int> {\n             if *i % 2 == 0 {\n                 return option::Some::<int>(*i / 2);\n-            } else { return option::None::<int>; }\n+            } else {\n+                return option::None::<int>;\n+            }\n         }\n         fn halve_for_sure(i: &int) -> int { return *i / 2; }\n         let all_even: ~[int] = ~[0, 2, 8, 6];"}, {"sha": "c1e940d6f245f3fd9eb28c909872a9c6afc46bbe", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -238,6 +238,10 @@ fn nospan<T: Copy>(t: T) -> ast::spanned<T> {\n }\n \n fn path_node(ids: ~[ast::ident]) -> @ast::path {\n+    @{span: dummy_sp(), global: false, idents: ids, rp: None, types: ~[]}\n+}\n+\n+fn path_node_global(ids: ~[ast::ident]) -> @ast::path {\n     @{span: dummy_sp(), global: true, idents: ids, rp: None, types: ~[]}\n }\n \n@@ -284,8 +288,8 @@ fn mk_path(cx: test_ctxt, path: ~[ast::ident]) -> ~[ast::ident] {\n // The ast::Ty of ~[std::test::test_desc]\n fn mk_test_desc_vec_ty(cx: test_ctxt) -> @ast::Ty {\n     let test_desc_ty_path =\n-        path_node(mk_path(cx, ~[cx.sess.ident_of(~\"test\"),\n-                                cx.sess.ident_of(~\"TestDesc\")]));\n+        path_node_global(mk_path(cx, ~[cx.sess.ident_of(~\"test\"),\n+                                       cx.sess.ident_of(~\"TestDesc\")]));\n \n     let test_desc_ty: ast::Ty =\n         {id: cx.sess.next_node_id(),\n@@ -345,7 +349,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n         nospan({mutbl: ast::m_imm, ident: cx.sess.ident_of(~\"name\"),\n                 expr: @name_expr});\n \n-    let fn_path = path_node(path);\n+    let fn_path = path_node_global(path);\n \n     let fn_expr: ast::expr =\n         {id: cx.sess.next_node_id(),\n@@ -464,7 +468,7 @@ fn mk_main(cx: test_ctxt) -> @ast::item {\n \n fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n     // Call os::args to generate the vector of test_descs\n-    let args_path = path_node(~[\n+    let args_path = path_node_global(~[\n         cx.sess.ident_of(~\"os\"),\n         cx.sess.ident_of(~\"args\")\n     ]);\n@@ -497,7 +501,7 @@ fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n          node: test_call_expr_, span: dummy_sp()};\n \n     // Call std::test::test_main\n-    let test_main_path = path_node(\n+    let test_main_path = path_node_global(\n         mk_path(cx, ~[cx.sess.ident_of(~\"test\"),\n                       cx.sess.ident_of(~\"test_main\")]));\n "}, {"sha": "27565b44c6db2ad8b41f783c17f175abf6364a04", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26ca35b081e96d709f318e668e06209e89b95e2/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e26ca35b081e96d709f318e668e06209e89b95e2", "patch": "@@ -298,10 +298,10 @@ fn core_macros() -> ~str {\n         { $c:ident: $in:ty -> $out:ty; } => {\n \n             mod $c {\n-                fn key(_x: @core::condition::Handler<$in,$out>) { }\n+                fn key(_x: @::core::condition::Handler<$in,$out>) { }\n \n-                pub const cond : core::condition::Condition<$in,$out> =\n-                    core::condition::Condition {\n+                pub const cond : ::core::condition::Condition<$in,$out> =\n+                    ::core::condition::Condition {\n                     name: stringify!(c),\n                     key: key\n                 };"}]}