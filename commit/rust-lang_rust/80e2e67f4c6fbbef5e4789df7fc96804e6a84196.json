{"sha": "80e2e67f4c6fbbef5e4789df7fc96804e6a84196", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZTJlNjdmNGM2ZmJiZWY1ZTQ3ODlkZjdmYzk2ODA0ZTZhODQxOTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-14T00:42:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-14T00:42:11Z"}, "message": "Auto merge of #46832 - Diggsey:bufread-cheaper-seek, r=alexcrichton\n\nBufRead: Only flush the internal buffer if seeking outside of it.\n\nFixes #31100\n\nr? @dtolnay", "tree": {"sha": "cf6a0db2e93141482275f32a9dd83eb499ef9625", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf6a0db2e93141482275f32a9dd83eb499ef9625"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80e2e67f4c6fbbef5e4789df7fc96804e6a84196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80e2e67f4c6fbbef5e4789df7fc96804e6a84196", "html_url": "https://github.com/rust-lang/rust/commit/80e2e67f4c6fbbef5e4789df7fc96804e6a84196", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80e2e67f4c6fbbef5e4789df7fc96804e6a84196/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf4c3cbe5524608fd3a8fcd626f3c73223022be7", "html_url": "https://github.com/rust-lang/rust/commit/cf4c3cbe5524608fd3a8fcd626f3c73223022be7"}, {"sha": "c96f30257aa7e86fd5b7f657d7b0bc21dcf45b1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c96f30257aa7e86fd5b7f657d7b0bc21dcf45b1f", "html_url": "https://github.com/rust-lang/rust/commit/c96f30257aa7e86fd5b7f657d7b0bc21dcf45b1f"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "16fbf0c6ba69eb03a08945b8da8f3a107154f2cf", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/80e2e67f4c6fbbef5e4789df7fc96804e6a84196/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e2e67f4c6fbbef5e4789df7fc96804e6a84196/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=80e2e67f4c6fbbef5e4789df7fc96804e6a84196", "patch": "@@ -194,6 +194,31 @@ impl<R: Read> BufReader<R> {\n     pub fn into_inner(self) -> R { self.inner }\n }\n \n+impl<R: Seek> BufReader<R> {\n+    /// Seeks relative to the current position. If the new position lies within the buffer,\n+    /// the buffer will not be flushed, allowing for more efficient seeks.\n+    /// This method does not return the location of the underlying reader, so the caller\n+    /// must track this information themselves if it is required.\n+    #[unstable(feature = \"bufreader_seek_relative\", issue = \"31100\")]\n+    pub fn seek_relative(&mut self, offset: i64) -> io::Result<()> {\n+        let pos = self.pos as u64;\n+        if offset < 0 {\n+            if let Some(new_pos) = pos.checked_sub((-offset) as u64) {\n+                self.pos = new_pos as usize;\n+                return Ok(())\n+            }\n+        } else {\n+            if let Some(new_pos) = pos.checked_add(offset as u64) {\n+                if new_pos <= self.cap as u64 {\n+                    self.pos = new_pos as usize;\n+                    return Ok(())\n+                }\n+            }\n+        }\n+        self.seek(SeekFrom::Current(offset)).map(|_|())\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<R: Read> Read for BufReader<R> {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n@@ -260,13 +285,17 @@ impl<R: Seek> Seek for BufReader<R> {\n     /// `.into_inner()` immediately after a seek yields the underlying reader\n     /// at the same position.\n     ///\n+    /// To seek without discarding the internal buffer, use [`seek_relative`].\n+    ///\n     /// See `std::io::Seek` for more details.\n     ///\n     /// Note: In the edge case where you're seeking with `SeekFrom::Current(n)`\n     /// where `n` minus the internal buffer length overflows an `i64`, two\n     /// seeks will be performed instead of one. If the second seek returns\n     /// `Err`, the underlying reader will be left at the same position it would\n     /// have if you seeked to `SeekFrom::Current(0)`.\n+    ///\n+    /// [`seek_relative`]: #method.seek_relative\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n         let result: u64;\n         if let SeekFrom::Current(n) = pos {\n@@ -953,6 +982,23 @@ mod tests {\n         assert_eq!(reader.seek(SeekFrom::Current(-2)).ok(), Some(3));\n     }\n \n+    #[test]\n+    fn test_buffered_reader_seek_relative() {\n+        let inner: &[u8] = &[5, 6, 7, 0, 1, 2, 3, 4];\n+        let mut reader = BufReader::with_capacity(2, io::Cursor::new(inner));\n+\n+        assert!(reader.seek_relative(3).is_ok());\n+        assert_eq!(reader.fill_buf().ok(), Some(&[0, 1][..]));\n+        assert!(reader.seek_relative(0).is_ok());\n+        assert_eq!(reader.fill_buf().ok(), Some(&[0, 1][..]));\n+        assert!(reader.seek_relative(1).is_ok());\n+        assert_eq!(reader.fill_buf().ok(), Some(&[1][..]));\n+        assert!(reader.seek_relative(-1).is_ok());\n+        assert_eq!(reader.fill_buf().ok(), Some(&[0, 1][..]));\n+        assert!(reader.seek_relative(2).is_ok());\n+        assert_eq!(reader.fill_buf().ok(), Some(&[2, 3][..]));\n+    }\n+\n     #[test]\n     fn test_buffered_reader_seek_underflow() {\n         // gimmick reader that yields its position modulo 256 for each byte"}]}