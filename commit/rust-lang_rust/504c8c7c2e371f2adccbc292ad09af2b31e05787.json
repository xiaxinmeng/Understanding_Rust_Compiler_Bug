{"sha": "504c8c7c2e371f2adccbc292ad09af2b31e05787", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNGM4YzdjMmUzNzFmMmFkY2NiYzI5MmFkMDlhZjJiMzFlMDU3ODc=", "commit": {"author": {"name": "yanchith", "email": "yanchi.toth@gmail.com", "date": "2019-03-22T09:09:35Z"}, "committer": {"name": "yanchith", "email": "yanchi.toth@gmail.com", "date": "2019-03-22T09:09:35Z"}, "message": "Refactor primitive types into more orthogonal representation", "tree": {"sha": "e8682a3f3a5017932dd31decc979daca7d9a2daa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8682a3f3a5017932dd31decc979daca7d9a2daa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/504c8c7c2e371f2adccbc292ad09af2b31e05787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/504c8c7c2e371f2adccbc292ad09af2b31e05787", "html_url": "https://github.com/rust-lang/rust/commit/504c8c7c2e371f2adccbc292ad09af2b31e05787", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/504c8c7c2e371f2adccbc292ad09af2b31e05787/comments", "author": {"login": "yanchith", "id": 1099245, "node_id": "MDQ6VXNlcjEwOTkyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1099245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchith", "html_url": "https://github.com/yanchith", "followers_url": "https://api.github.com/users/yanchith/followers", "following_url": "https://api.github.com/users/yanchith/following{/other_user}", "gists_url": "https://api.github.com/users/yanchith/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchith/subscriptions", "organizations_url": "https://api.github.com/users/yanchith/orgs", "repos_url": "https://api.github.com/users/yanchith/repos", "events_url": "https://api.github.com/users/yanchith/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchith/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yanchith", "id": 1099245, "node_id": "MDQ6VXNlcjEwOTkyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1099245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchith", "html_url": "https://github.com/yanchith", "followers_url": "https://api.github.com/users/yanchith/followers", "following_url": "https://api.github.com/users/yanchith/following{/other_user}", "gists_url": "https://api.github.com/users/yanchith/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchith/subscriptions", "organizations_url": "https://api.github.com/users/yanchith/orgs", "repos_url": "https://api.github.com/users/yanchith/repos", "events_url": "https://api.github.com/users/yanchith/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchith/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "html_url": "https://github.com/rust-lang/rust/commit/2a6544f906818263e2791bc4cdf4fcbdf7260ab9"}], "stats": {"total": 299, "additions": 155, "deletions": 144}, "files": [{"sha": "0fadab560eec9c647b7fdef2bd94d3c3aec11e53", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/504c8c7c2e371f2adccbc292ad09af2b31e05787/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/504c8c7c2e371f2adccbc292ad09af2b31e05787/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=504c8c7c2e371f2adccbc292ad09af2b31e05787", "patch": "@@ -14,7 +14,7 @@ use crate::{\n     name::AsName,\n     type_ref::{Mutability, TypeRef},\n };\n-use crate::{ path::GenericArgs, ty::primitive::{UintTy, UncertainIntTy, UncertainFloatTy}};\n+use crate::{ path::GenericArgs, ty::primitive::{IntTy, UncertainIntTy, FloatTy, UncertainFloatTy}};\n \n pub use self::scope::{ExprScopes, ScopesWithSourceMap, ScopeEntryWithSyntax};\n \n@@ -723,15 +723,17 @@ impl ExprCollector {\n \n                 let lit = match child.flavor() {\n                     LiteralFlavor::IntNumber { suffix } => {\n-                        let known_name = suffix.and_then(|it| UncertainIntTy::from_suffix(&it));\n+                        let known_name = suffix\n+                            .and_then(|it| IntTy::from_suffix(&it).map(UncertainIntTy::Known));\n \n                         Literal::Int(\n                             Default::default(),\n                             known_name.unwrap_or(UncertainIntTy::Unknown),\n                         )\n                     }\n                     LiteralFlavor::FloatNumber { suffix } => {\n-                        let known_name = suffix.and_then(|it| UncertainFloatTy::from_suffix(&it));\n+                        let known_name = suffix\n+                            .and_then(|it| FloatTy::from_suffix(&it).map(UncertainFloatTy::Known));\n \n                         Literal::Float(\n                             Default::default(),\n@@ -741,7 +743,7 @@ impl ExprCollector {\n                     LiteralFlavor::ByteString => Literal::ByteString(Default::default()),\n                     LiteralFlavor::String => Literal::String(Default::default()),\n                     LiteralFlavor::Byte => {\n-                        Literal::Int(Default::default(), UncertainIntTy::Unsigned(UintTy::U8))\n+                        Literal::Int(Default::default(), UncertainIntTy::Known(IntTy::u8()))\n                     }\n                     LiteralFlavor::Bool => Literal::Bool(Default::default()),\n                     LiteralFlavor::Char => Literal::Char(Default::default()),"}, {"sha": "7cf465266c73bf7f309a48f023423061ecf24129", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/504c8c7c2e371f2adccbc292ad09af2b31e05787/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/504c8c7c2e371f2adccbc292ad09af2b31e05787/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=504c8c7c2e371f2adccbc292ad09af2b31e05787", "patch": "@@ -990,7 +990,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         match &inner_ty {\n                             Ty::Apply(a_ty) => match a_ty.ctor {\n                                 TypeCtor::Int(primitive::UncertainIntTy::Unknown)\n-                                | TypeCtor::Int(primitive::UncertainIntTy::Signed(..))\n+                                | TypeCtor::Int(primitive::UncertainIntTy::Known(\n+                                    primitive::IntTy {\n+                                        signedness: primitive::Signedness::Signed,\n+                                        ..\n+                                    },\n+                                ))\n                                 | TypeCtor::Float(..) => inner_ty,\n                                 _ => Ty::Unknown,\n                             },\n@@ -1064,8 +1069,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     Ty::apply_one(TypeCtor::Ref(Mutability::Shared), Ty::simple(TypeCtor::Str))\n                 }\n                 Literal::ByteString(..) => {\n-                    let byte_type = Ty::simple(TypeCtor::Int(primitive::UncertainIntTy::Unsigned(\n-                        primitive::UintTy::U8,\n+                    let byte_type = Ty::simple(TypeCtor::Int(primitive::UncertainIntTy::Known(\n+                        primitive::IntTy::u8(),\n                     )));\n                     let slice_type = Ty::apply_one(TypeCtor::Slice, byte_type);\n                     Ty::apply_one(TypeCtor::Ref(Mutability::Shared), slice_type)\n@@ -1208,10 +1213,10 @@ impl InferTy {\n         match self {\n             InferTy::TypeVar(..) => Ty::Unknown,\n             InferTy::IntVar(..) => {\n-                Ty::simple(TypeCtor::Int(primitive::UncertainIntTy::Signed(primitive::IntTy::I32)))\n+                Ty::simple(TypeCtor::Int(primitive::UncertainIntTy::Known(primitive::IntTy::i32())))\n             }\n             InferTy::FloatVar(..) => Ty::simple(TypeCtor::Float(\n-                primitive::UncertainFloatTy::Known(primitive::FloatTy::F64),\n+                primitive::UncertainFloatTy::Known(primitive::FloatTy::f64()),\n             )),\n         }\n     }"}, {"sha": "7f9af307bff721bb5e49b81c73344581d1d92011", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/504c8c7c2e371f2adccbc292ad09af2b31e05787/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/504c8c7c2e371f2adccbc292ad09af2b31e05787/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=504c8c7c2e371f2adccbc292ad09af2b31e05787", "patch": "@@ -61,10 +61,10 @@ impl Ty {\n     pub(crate) fn from_hir_path(db: &impl HirDatabase, resolver: &Resolver, path: &Path) -> Self {\n         if let Some(name) = path.as_ident() {\n             // TODO handle primitive type names in resolver as well?\n-            if let Some(int_ty) = primitive::UncertainIntTy::from_type_name(name) {\n-                return Ty::simple(TypeCtor::Int(int_ty));\n-            } else if let Some(float_ty) = primitive::UncertainFloatTy::from_type_name(name) {\n-                return Ty::simple(TypeCtor::Float(float_ty));\n+            if let Some(int_ty) = primitive::IntTy::from_type_name(name) {\n+                return Ty::simple(TypeCtor::Int(primitive::UncertainIntTy::Known(int_ty)));\n+            } else if let Some(float_ty) = primitive::FloatTy::from_type_name(name) {\n+                return Ty::simple(TypeCtor::Float(primitive::UncertainFloatTy::Known(float_ty)));\n             } else if let Some(known) = name.as_known_name() {\n                 match known {\n                     KnownName::Bool => return Ty::simple(TypeCtor::Bool),"}, {"sha": "b37326db7b36c44a4d5f43e047b873e0f79e72c8", "filename": "crates/ra_hir/src/ty/primitive.rs", "status": "modified", "additions": 135, "deletions": 131, "changes": 266, "blob_url": "https://github.com/rust-lang/rust/blob/504c8c7c2e371f2adccbc292ad09af2b31e05787/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/504c8c7c2e371f2adccbc292ad09af2b31e05787/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs?ref=504c8c7c2e371f2adccbc292ad09af2b31e05787", "patch": "@@ -2,61 +2,49 @@ use std::fmt;\n \n use crate::{Name, KnownName};\n \n-#[derive(Debug, Clone, Eq, PartialEq, Hash, Copy)]\n-pub enum UncertainIntTy {\n-    Unknown,\n-    Unsigned(UintTy),\n-    Signed(IntTy),\n+#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n+pub enum Signedness {\n+    Signed,\n+    Unsigned,\n }\n \n-impl UncertainIntTy {\n-    pub(crate) fn from_type_name(name: &Name) -> Option<UncertainIntTy> {\n-        if let Some(ty) = IntTy::from_type_name(name) {\n-            Some(UncertainIntTy::Signed(ty))\n-        } else if let Some(ty) = UintTy::from_type_name(name) {\n-            Some(UncertainIntTy::Unsigned(ty))\n-        } else {\n-            None\n-        }\n-    }\n+#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n+pub enum IntBitness {\n+    Xsize,\n+    X8,\n+    X16,\n+    X32,\n+    X64,\n+    X128,\n+}\n \n-    pub(crate) fn from_suffix(suffix: &str) -> Option<UncertainIntTy> {\n-        if let Some(ty) = IntTy::from_suffix(suffix) {\n-            Some(UncertainIntTy::Signed(ty))\n-        } else if let Some(ty) = UintTy::from_suffix(suffix) {\n-            Some(UncertainIntTy::Unsigned(ty))\n-        } else {\n-            None\n-        }\n-    }\n+#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n+pub enum FloatBitness {\n+    X32,\n+    X64,\n+}\n+\n+#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n+pub enum UncertainIntTy {\n+    Unknown,\n+    Known(IntTy),\n }\n \n impl fmt::Display for UncertainIntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             UncertainIntTy::Unknown => write!(f, \"{{integer}}\"),\n-            UncertainIntTy::Signed(ty) => write!(f, \"{}\", ty),\n-            UncertainIntTy::Unsigned(ty) => write!(f, \"{}\", ty),\n+            UncertainIntTy::Known(ty) => write!(f, \"{}\", ty),\n         }\n     }\n }\n \n-#[derive(Debug, Clone, Eq, PartialEq, Hash, Copy)]\n+#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n pub enum UncertainFloatTy {\n     Unknown,\n     Known(FloatTy),\n }\n \n-impl UncertainFloatTy {\n-    pub(crate) fn from_type_name(name: &Name) -> Option<UncertainFloatTy> {\n-        FloatTy::from_type_name(name).map(UncertainFloatTy::Known)\n-    }\n-\n-    pub(crate) fn from_suffix(suffix: &str) -> Option<UncertainFloatTy> {\n-        FloatTy::from_suffix(suffix).map(UncertainFloatTy::Known)\n-    }\n-}\n-\n impl fmt::Display for UncertainFloatTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -66,14 +54,10 @@ impl fmt::Display for UncertainFloatTy {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n-pub enum IntTy {\n-    Isize,\n-    I8,\n-    I16,\n-    I32,\n-    I64,\n-    I128,\n+#[derive(Copy, Clone, Eq, PartialEq, Hash)]\n+pub struct IntTy {\n+    pub signedness: Signedness,\n+    pub bitness: IntBitness,\n }\n \n impl fmt::Debug for IntTy {\n@@ -84,104 +68,116 @@ impl fmt::Debug for IntTy {\n \n impl fmt::Display for IntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let s = match *self {\n-            IntTy::Isize => \"isize\",\n-            IntTy::I8 => \"i8\",\n-            IntTy::I16 => \"i16\",\n-            IntTy::I32 => \"i32\",\n-            IntTy::I64 => \"i64\",\n-            IntTy::I128 => \"i128\",\n-        };\n-        write!(f, \"{}\", s)\n+        write!(f, \"{}\", self.ty_to_string())\n     }\n }\n \n impl IntTy {\n-    fn from_type_name(name: &Name) -> Option<IntTy> {\n-        match name.as_known_name()? {\n-            KnownName::Isize => Some(IntTy::Isize),\n-            KnownName::I8 => Some(IntTy::I8),\n-            KnownName::I16 => Some(IntTy::I16),\n-            KnownName::I32 => Some(IntTy::I32),\n-            KnownName::I64 => Some(IntTy::I64),\n-            KnownName::I128 => Some(IntTy::I128),\n-            _ => None,\n-        }\n+    pub fn isize() -> IntTy {\n+        IntTy { signedness: Signedness::Signed, bitness: IntBitness::Xsize }\n     }\n \n-    fn from_suffix(suffix: &str) -> Option<IntTy> {\n-        match suffix {\n-            \"isize\" => Some(IntTy::Isize),\n-            \"i8\" => Some(IntTy::I8),\n-            \"i16\" => Some(IntTy::I16),\n-            \"i32\" => Some(IntTy::I32),\n-            \"i64\" => Some(IntTy::I64),\n-            \"i128\" => Some(IntTy::I128),\n-            _ => None,\n-        }\n+    pub fn i8() -> IntTy {\n+        IntTy { signedness: Signedness::Signed, bitness: IntBitness::X8 }\n     }\n-}\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n-pub enum UintTy {\n-    Usize,\n-    U8,\n-    U16,\n-    U32,\n-    U64,\n-    U128,\n-}\n+    pub fn i16() -> IntTy {\n+        IntTy { signedness: Signedness::Signed, bitness: IntBitness::X16 }\n+    }\n \n-impl fmt::Display for UintTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let s = match *self {\n-            UintTy::Usize => \"usize\",\n-            UintTy::U8 => \"u8\",\n-            UintTy::U16 => \"u16\",\n-            UintTy::U32 => \"u32\",\n-            UintTy::U64 => \"u64\",\n-            UintTy::U128 => \"u128\",\n-        };\n-        write!(f, \"{}\", s)\n+    pub fn i32() -> IntTy {\n+        IntTy { signedness: Signedness::Signed, bitness: IntBitness::X32 }\n     }\n-}\n \n-impl UintTy {\n-    fn from_type_name(name: &Name) -> Option<UintTy> {\n+    pub fn i64() -> IntTy {\n+        IntTy { signedness: Signedness::Signed, bitness: IntBitness::X64 }\n+    }\n+\n+    pub fn i128() -> IntTy {\n+        IntTy { signedness: Signedness::Signed, bitness: IntBitness::X128 }\n+    }\n+\n+    pub fn usize() -> IntTy {\n+        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::Xsize }\n+    }\n+\n+    pub fn u8() -> IntTy {\n+        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X8 }\n+    }\n+\n+    pub fn u16() -> IntTy {\n+        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X16 }\n+    }\n+\n+    pub fn u32() -> IntTy {\n+        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X32 }\n+    }\n+\n+    pub fn u64() -> IntTy {\n+        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X64 }\n+    }\n+\n+    pub fn u128() -> IntTy {\n+        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X128 }\n+    }\n+\n+    pub(crate) fn ty_to_string(&self) -> &'static str {\n+        match (self.signedness, self.bitness) {\n+            (Signedness::Signed, IntBitness::Xsize) => \"isize\",\n+            (Signedness::Signed, IntBitness::X8) => \"i8\",\n+            (Signedness::Signed, IntBitness::X16) => \"i16\",\n+            (Signedness::Signed, IntBitness::X32) => \"i32\",\n+            (Signedness::Signed, IntBitness::X64) => \"i64\",\n+            (Signedness::Signed, IntBitness::X128) => \"i128\",\n+            (Signedness::Unsigned, IntBitness::Xsize) => \"usize\",\n+            (Signedness::Unsigned, IntBitness::X8) => \"u8\",\n+            (Signedness::Unsigned, IntBitness::X16) => \"u16\",\n+            (Signedness::Unsigned, IntBitness::X32) => \"u32\",\n+            (Signedness::Unsigned, IntBitness::X64) => \"u64\",\n+            (Signedness::Unsigned, IntBitness::X128) => \"u128\",\n+        }\n+    }\n+\n+    pub(crate) fn from_type_name(name: &Name) -> Option<IntTy> {\n         match name.as_known_name()? {\n-            KnownName::Usize => Some(UintTy::Usize),\n-            KnownName::U8 => Some(UintTy::U8),\n-            KnownName::U16 => Some(UintTy::U16),\n-            KnownName::U32 => Some(UintTy::U32),\n-            KnownName::U64 => Some(UintTy::U64),\n-            KnownName::U128 => Some(UintTy::U128),\n+            KnownName::Isize => Some(IntTy::isize()),\n+            KnownName::I8 => Some(IntTy::i8()),\n+            KnownName::I16 => Some(IntTy::i16()),\n+            KnownName::I32 => Some(IntTy::i32()),\n+            KnownName::I64 => Some(IntTy::i64()),\n+            KnownName::I128 => Some(IntTy::i128()),\n+            KnownName::Usize => Some(IntTy::usize()),\n+            KnownName::U8 => Some(IntTy::u8()),\n+            KnownName::U16 => Some(IntTy::u16()),\n+            KnownName::U32 => Some(IntTy::u32()),\n+            KnownName::U64 => Some(IntTy::u64()),\n+            KnownName::U128 => Some(IntTy::u128()),\n             _ => None,\n         }\n     }\n \n-    fn from_suffix(suffix: &str) -> Option<UintTy> {\n+    pub(crate) fn from_suffix(suffix: &str) -> Option<IntTy> {\n         match suffix {\n-            \"usize\" => Some(UintTy::Usize),\n-            \"u8\" => Some(UintTy::U8),\n-            \"u16\" => Some(UintTy::U16),\n-            \"u32\" => Some(UintTy::U32),\n-            \"u64\" => Some(UintTy::U64),\n-            \"u128\" => Some(UintTy::U128),\n+            \"isize\" => Some(IntTy::isize()),\n+            \"i8\" => Some(IntTy::i8()),\n+            \"i16\" => Some(IntTy::i16()),\n+            \"i32\" => Some(IntTy::i32()),\n+            \"i64\" => Some(IntTy::i64()),\n+            \"i128\" => Some(IntTy::i128()),\n+            \"usize\" => Some(IntTy::usize()),\n+            \"u8\" => Some(IntTy::u8()),\n+            \"u16\" => Some(IntTy::u16()),\n+            \"u32\" => Some(IntTy::u32()),\n+            \"u64\" => Some(IntTy::u64()),\n+            \"u128\" => Some(IntTy::u128()),\n             _ => None,\n         }\n     }\n }\n \n-impl fmt::Debug for UintTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n-    }\n-}\n-\n-#[derive(Clone, PartialEq, Eq, Hash, Copy, PartialOrd, Ord)]\n-pub enum FloatTy {\n-    F32,\n-    F64,\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct FloatTy {\n+    pub bitness: FloatBitness,\n }\n \n impl fmt::Debug for FloatTy {\n@@ -197,25 +193,33 @@ impl fmt::Display for FloatTy {\n }\n \n impl FloatTy {\n-    pub fn ty_to_string(self) -> &'static str {\n-        match self {\n-            FloatTy::F32 => \"f32\",\n-            FloatTy::F64 => \"f64\",\n+    pub fn f32() -> FloatTy {\n+        FloatTy { bitness: FloatBitness::X32 }\n+    }\n+\n+    pub fn f64() -> FloatTy {\n+        FloatTy { bitness: FloatBitness::X64 }\n+    }\n+\n+    pub(crate) fn ty_to_string(self) -> &'static str {\n+        match self.bitness {\n+            FloatBitness::X32 => \"f32\",\n+            FloatBitness::X64 => \"f64\",\n         }\n     }\n \n-    fn from_type_name(name: &Name) -> Option<FloatTy> {\n+    pub(crate) fn from_type_name(name: &Name) -> Option<FloatTy> {\n         match name.as_known_name()? {\n-            KnownName::F32 => Some(FloatTy::F32),\n-            KnownName::F64 => Some(FloatTy::F64),\n+            KnownName::F32 => Some(FloatTy::f32()),\n+            KnownName::F64 => Some(FloatTy::f64()),\n             _ => None,\n         }\n     }\n \n-    fn from_suffix(suffix: &str) -> Option<FloatTy> {\n+    pub(crate) fn from_suffix(suffix: &str) -> Option<FloatTy> {\n         match suffix {\n-            \"f32\" => Some(FloatTy::F32),\n-            \"f64\" => Some(FloatTy::F64),\n+            \"f32\" => Some(FloatTy::f32()),\n+            \"f64\" => Some(FloatTy::f64()),\n             _ => None,\n         }\n     }"}]}