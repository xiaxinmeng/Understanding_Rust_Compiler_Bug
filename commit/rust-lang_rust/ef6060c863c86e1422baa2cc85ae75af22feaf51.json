{"sha": "ef6060c863c86e1422baa2cc85ae75af22feaf51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNjA2MGM4NjNjODZlMTQyMmJhYTJjYzg1YWU3NWFmMjJmZWFmNTE=", "commit": {"author": {"name": "C Jones", "email": "code@calebjones.net", "date": "2018-04-30T21:34:14Z"}, "committer": {"name": "C Jones", "email": "code@calebjones.net", "date": "2018-05-08T02:14:20Z"}, "message": "Add a statically allocated empty node for empty maps\n\nThis gives a pointer to that static empty node instead of allocating\na new node, and then whenever inserting makes sure that the root\nisn't that empty node.", "tree": {"sha": "4244bc3dd335bd172b97b11fe4e8c70eb238db78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4244bc3dd335bd172b97b11fe4e8c70eb238db78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef6060c863c86e1422baa2cc85ae75af22feaf51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6060c863c86e1422baa2cc85ae75af22feaf51", "html_url": "https://github.com/rust-lang/rust/commit/ef6060c863c86e1422baa2cc85ae75af22feaf51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef6060c863c86e1422baa2cc85ae75af22feaf51/comments", "author": {"login": "porglezomp", "id": 1690225, "node_id": "MDQ6VXNlcjE2OTAyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1690225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/porglezomp", "html_url": "https://github.com/porglezomp", "followers_url": "https://api.github.com/users/porglezomp/followers", "following_url": "https://api.github.com/users/porglezomp/following{/other_user}", "gists_url": "https://api.github.com/users/porglezomp/gists{/gist_id}", "starred_url": "https://api.github.com/users/porglezomp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/porglezomp/subscriptions", "organizations_url": "https://api.github.com/users/porglezomp/orgs", "repos_url": "https://api.github.com/users/porglezomp/repos", "events_url": "https://api.github.com/users/porglezomp/events{/privacy}", "received_events_url": "https://api.github.com/users/porglezomp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "porglezomp", "id": 1690225, "node_id": "MDQ6VXNlcjE2OTAyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1690225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/porglezomp", "html_url": "https://github.com/porglezomp", "followers_url": "https://api.github.com/users/porglezomp/followers", "following_url": "https://api.github.com/users/porglezomp/following{/other_user}", "gists_url": "https://api.github.com/users/porglezomp/gists{/gist_id}", "starred_url": "https://api.github.com/users/porglezomp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/porglezomp/subscriptions", "organizations_url": "https://api.github.com/users/porglezomp/orgs", "repos_url": "https://api.github.com/users/porglezomp/repos", "events_url": "https://api.github.com/users/porglezomp/events{/privacy}", "received_events_url": "https://api.github.com/users/porglezomp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "669bd8223bf159d757d0c552a4c413a137bc6b10", "url": "https://api.github.com/repos/rust-lang/rust/commits/669bd8223bf159d757d0c552a4c413a137bc6b10", "html_url": "https://github.com/rust-lang/rust/commit/669bd8223bf159d757d0c552a4c413a137bc6b10"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "985a41722d7cf46c9d45deeef48e9bfca3776af8", "filename": "src/liballoc/btree/map.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ef6060c863c86e1422baa2cc85ae75af22feaf51/src%2Fliballoc%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6060c863c86e1422baa2cc85ae75af22feaf51/src%2Fliballoc%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fmap.rs?ref=ef6060c863c86e1422baa2cc85ae75af22feaf51", "patch": "@@ -523,7 +523,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> BTreeMap<K, V> {\n         BTreeMap {\n-            root: node::Root::new_leaf(),\n+            root: node::Root::shared_empty_root(),\n             length: 0,\n         }\n     }\n@@ -544,7 +544,6 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn clear(&mut self) {\n-        // FIXME(gereeter) .clear() allocates\n         *self = BTreeMap::new();\n     }\n \n@@ -687,6 +686,10 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn insert(&mut self, key: K, value: V) -> Option<V> {\n+        if self.root.is_shared_root() {\n+            self.root = node::Root::new_leaf();\n+        }\n+\n         match self.entry(key) {\n             Occupied(mut entry) => Some(entry.insert(value)),\n             Vacant(entry) => {\n@@ -890,6 +893,10 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn entry(&mut self, key: K) -> Entry<K, V> {\n+        if self.root.is_shared_root() {\n+            self.root = node::Root::new_leaf();\n+        }\n+\n         match search::search_tree(self.root.as_mut(), &key) {\n             Found(handle) => {\n                 Occupied(OccupiedEntry {\n@@ -910,6 +917,10 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     }\n \n     fn from_sorted_iter<I: Iterator<Item = (K, V)>>(&mut self, iter: I) {\n+        if self.root.is_shared_root() {\n+            self.root = node::Root::new_leaf();\n+        }\n+\n         let mut cur_node = last_leaf_edge(self.root.as_mut()).into_node();\n         // Iterate through all key-value pairs, pushing them into nodes at the right level.\n         for (key, value) in iter {"}, {"sha": "6381006e7fced7235a040433b2a2c9e42f5be2c0", "filename": "src/liballoc/btree/node.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ef6060c863c86e1422baa2cc85ae75af22feaf51/src%2Fliballoc%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6060c863c86e1422baa2cc85ae75af22feaf51/src%2Fliballoc%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fnode.rs?ref=ef6060c863c86e1422baa2cc85ae75af22feaf51", "patch": "@@ -103,6 +103,18 @@ impl<K, V> LeafNode<K, V> {\n     }\n }\n \n+// We need to implement Sync here in order to make a static instance\n+unsafe impl Sync for LeafNode<(), ()> {}\n+\n+// An empty node used as a placeholder for the root node, to avoid allocations\n+static EMPTY_ROOT_NODE: LeafNode<(), ()> = LeafNode {\n+    parent: ptr::null(),\n+    parent_idx: 0,\n+    len: 0,\n+    keys: [(); CAPACITY],\n+    vals: [(); CAPACITY],\n+};\n+\n /// The underlying representation of internal nodes. As with `LeafNode`s, these should be hidden\n /// behind `BoxedNode`s to prevent dropping uninitialized keys and values. Any pointer to an\n /// `InternalNode` can be directly casted to a pointer to the underlying `LeafNode` portion of the\n@@ -172,6 +184,24 @@ unsafe impl<K: Sync, V: Sync> Sync for Root<K, V> { }\n unsafe impl<K: Send, V: Send> Send for Root<K, V> { }\n \n impl<K, V> Root<K, V> {\n+    pub fn is_shared_root(&self) -> bool {\n+        ptr::eq(\n+            self.node.as_ptr().as_ptr(),\n+            &EMPTY_ROOT_NODE as *const _ as *const LeafNode<K, V>,\n+        )\n+    }\n+\n+    pub fn shared_empty_root() -> Self {\n+        Root {\n+            node: unsafe {\n+                BoxedNode::from_ptr(NonNull::new_unchecked(\n+                    &EMPTY_ROOT_NODE as *const _ as *const LeafNode<K, V> as *mut _\n+                ))\n+            },\n+            height: 0,\n+        }\n+    }\n+\n     pub fn new_leaf() -> Self {\n         Root {\n             node: BoxedNode::from_leaf(Box::new(unsafe { LeafNode::new() })),"}]}