{"sha": "50754d05138a93434397245746d0dcdfbf29e2a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNzU0ZDA1MTM4YTkzNDM0Mzk3MjQ1NzQ2ZDBkY2RmYmYyOWUyYTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-31T22:34:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-10T12:22:31Z"}, "message": "add a `AscribeUserType` pattern, largely ignored", "tree": {"sha": "cc5d1120ffc4f066a21bd0ddbdd9cd4575fda604", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc5d1120ffc4f066a21bd0ddbdd9cd4575fda604"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50754d05138a93434397245746d0dcdfbf29e2a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50754d05138a93434397245746d0dcdfbf29e2a4", "html_url": "https://github.com/rust-lang/rust/commit/50754d05138a93434397245746d0dcdfbf29e2a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50754d05138a93434397245746d0dcdfbf29e2a4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3", "html_url": "https://github.com/rust-lang/rust/commit/4b5f19a0b0495cf97e602b4c8e3b82d8e8f246a3"}], "stats": {"total": 78, "additions": 71, "deletions": 7}, "files": [{"sha": "21b837f1db93e4ae17280ca78e5d9e63e1951f58", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/50754d05138a93434397245746d0dcdfbf29e2a4/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50754d05138a93434397245746d0dcdfbf29e2a4/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=50754d05138a93434397245746d0dcdfbf29e2a4", "patch": "@@ -19,7 +19,7 @@ use build::ForGuard::{self, OutsideGuard, RefWithinGuard, ValWithinGuard};\n use build::scope::{CachedBlock, DropKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::bitvec::BitArray;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, CanonicalTy, Ty};\n use rustc::mir::*;\n use rustc::hir;\n use hair::*;\n@@ -168,6 +168,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         span: pattern.span,\n                         match_pairs: vec![MatchPair::new(discriminant_place.clone(), pattern)],\n                         bindings: vec![],\n+                        ascriptions: vec![],\n                         guard,\n                         arm_index,\n                         pat_index,\n@@ -253,6 +254,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             span: irrefutable_pat.span,\n             match_pairs: vec![MatchPair::new(initializer.clone(), &irrefutable_pat)],\n             bindings: vec![],\n+            ascriptions: vec![],\n             guard: None,\n \n             // since we don't call `match_candidates`, next fields is unused\n@@ -398,6 +400,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n             PatternKind::Constant { .. } | PatternKind::Range { .. } | PatternKind::Wild => {\n             }\n+            PatternKind::AscribeUserType { ref subpattern, .. } |\n             PatternKind::Deref { ref subpattern } => {\n                 self.visit_bindings(subpattern, f);\n             }\n@@ -429,6 +432,9 @@ pub struct Candidate<'pat, 'tcx:'pat> {\n     // ...these bindings established...\n     bindings: Vec<Binding<'tcx>>,\n \n+    // ...these types asserted...\n+    ascriptions: Vec<Ascription<'tcx>>,\n+\n     // ...and the guard must be evaluated...\n     guard: Option<Guard<'tcx>>,\n \n@@ -454,6 +460,16 @@ struct Binding<'tcx> {\n     binding_mode: BindingMode<'tcx>,\n }\n \n+/// Indicates that the type of `source` must be a subtype of the\n+/// user-given type `user_ty`; this is basically a no-op but can\n+/// influence region inference.\n+#[derive(Clone, Debug)]\n+struct Ascription<'tcx> {\n+    span: Span,\n+    source: Place<'tcx>,\n+    user_ty: CanonicalTy<'tcx>,\n+}\n+\n #[derive(Clone, Debug)]\n pub struct MatchPair<'pat, 'tcx:'pat> {\n     // this place..."}, {"sha": "14da8e9083892fb435c743a83573f5fc412f4839", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/50754d05138a93434397245746d0dcdfbf29e2a4/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50754d05138a93434397245746d0dcdfbf29e2a4/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=50754d05138a93434397245746d0dcdfbf29e2a4", "patch": "@@ -23,7 +23,7 @@\n //! testing a value against a constant.\n \n use build::{BlockAnd, BlockAndExtension, Builder};\n-use build::matches::{Binding, MatchPair, Candidate};\n+use build::matches::{Ascription, Binding, MatchPair, Candidate};\n use hair::*;\n use rustc::mir::*;\n \n@@ -63,6 +63,18 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                  candidate: &mut Candidate<'pat, 'tcx>)\n                                  -> Result<(), MatchPair<'pat, 'tcx>> {\n         match *match_pair.pattern.kind {\n+            PatternKind::AscribeUserType { ref subpattern, user_ty } => {\n+                candidate.ascriptions.push(Ascription {\n+                    span: match_pair.pattern.span,\n+                    user_ty,\n+                    source: match_pair.place.clone(),\n+                });\n+\n+                candidate.match_pairs.push(MatchPair::new(match_pair.place, subpattern));\n+\n+                Ok(())\n+            }\n+\n             PatternKind::Wild => {\n                 // nothing left to do\n                 Ok(())"}, {"sha": "2c606ebf322a844ce1d851bbd21a340bec3e7915", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50754d05138a93434397245746d0dcdfbf29e2a4/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50754d05138a93434397245746d0dcdfbf29e2a4/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=50754d05138a93434397245746d0dcdfbf29e2a4", "patch": "@@ -96,6 +96,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n+            PatternKind::AscribeUserType { .. } |\n             PatternKind::Array { .. } |\n             PatternKind::Slice { .. } |\n             PatternKind::Wild |\n@@ -138,6 +139,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             PatternKind::Array { .. } |\n             PatternKind::Wild |\n             PatternKind::Binding { .. } |\n+            PatternKind::AscribeUserType { .. } |\n             PatternKind::Leaf { .. } |\n             PatternKind::Deref { .. } => {\n                 // don't know how to add these patterns to a switch\n@@ -638,6 +640,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             span: candidate.span,\n             match_pairs: other_match_pairs,\n             bindings: candidate.bindings.clone(),\n+            ascriptions: candidate.ascriptions.clone(),\n             guard: candidate.guard.clone(),\n             arm_index: candidate.arm_index,\n             pat_index: candidate.pat_index,\n@@ -702,6 +705,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             span: candidate.span,\n             match_pairs: all_match_pairs,\n             bindings: candidate.bindings.clone(),\n+            ascriptions: candidate.ascriptions.clone(),\n             guard: candidate.guard.clone(),\n             arm_index: candidate.arm_index,\n             pat_index: candidate.pat_index,"}, {"sha": "85a9734a601011234096a268834990f9b37ee5bc", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/50754d05138a93434397245746d0dcdfbf29e2a4/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50754d05138a93434397245746d0dcdfbf29e2a4/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=50754d05138a93434397245746d0dcdfbf29e2a4", "patch": "@@ -76,14 +76,26 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                             first_statement_index: region::FirstStatementIndex::new(index),\n                         });\n \n-                        let ty = local.ty.clone().map(|ty| ty.hir_id);\n-                        let pattern = cx.pattern_from_hir(&local.pat);\n+                        let mut pattern = cx.pattern_from_hir(&local.pat);\n+\n+                        if let Some(ty) = &local.ty {\n+                            if let Some(user_ty) = cx.tables.user_provided_tys().get(ty.hir_id) {\n+                                pattern = Pattern {\n+                                    ty: pattern.ty,\n+                                    span: pattern.span,\n+                                    kind: Box::new(PatternKind::AscribeUserType {\n+                                        user_ty: *user_ty,\n+                                        subpattern: pattern\n+                                    })\n+                                };\n+                            }\n+                        }\n+\n                         result.push(StmtRef::Mirror(Box::new(Stmt {\n                             kind: StmtKind::Let {\n                                 remainder_scope: remainder_scope,\n                                 init_scope: region::Scope::Node(hir_id.local_id),\n                                 pattern,\n-                                ty,\n                                 initializer: local.init.to_ref(),\n                                 lint_level: cx.lint_level_of(local.id),\n                             },"}, {"sha": "d86aee5431267b1e3e1fb7044dab29a64867c279", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50754d05138a93434397245746d0dcdfbf29e2a4/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50754d05138a93434397245746d0dcdfbf29e2a4/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=50754d05138a93434397245746d0dcdfbf29e2a4", "patch": "@@ -94,6 +94,8 @@ pub enum StmtKind<'tcx> {\n         init_scope: region::Scope,\n \n         /// `let <PAT> = ...`\n+        ///\n+        /// if a type is included, it is added as an ascription pattern\n         pattern: Pattern<'tcx>,\n \n         /// let pat: ty = <INIT> ..."}, {"sha": "a29c81e38e5a45927de24cdda0802ca7e048b121", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50754d05138a93434397245746d0dcdfbf29e2a4/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50754d05138a93434397245746d0dcdfbf29e2a4/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=50754d05138a93434397245746d0dcdfbf29e2a4", "patch": "@@ -1235,6 +1235,7 @@ fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt,\n                           -> Option<Vec<Constructor<'tcx>>>\n {\n     match *pat.kind {\n+        PatternKind::AscribeUserType { ref subpattern, .. } => pat_constructors(cx, subpattern, pcx),\n         PatternKind::Binding { .. } | PatternKind::Wild => None,\n         PatternKind::Leaf { .. } | PatternKind::Deref { .. } => Some(vec![Single]),\n         PatternKind::Variant { adt_def, variant_index, .. } => {\n@@ -1606,6 +1607,9 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n     let pat = &r[0];\n \n     let head: Option<Vec<&Pattern>> = match *pat.kind {\n+        PatternKind::AscribeUserType { ref subpattern, .. } =>\n+            specialize(cx, ::std::slice::from_ref(&subpattern), constructor, wild_patterns),\n+\n         PatternKind::Binding { .. } | PatternKind::Wild => {\n             Some(wild_patterns.to_owned())\n         }"}, {"sha": "cd44869211a7d9f62d6a32d9568cd46f04c23c91", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/50754d05138a93434397245746d0dcdfbf29e2a4/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50754d05138a93434397245746d0dcdfbf29e2a4/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=50754d05138a93434397245746d0dcdfbf29e2a4", "patch": "@@ -20,7 +20,7 @@ use interpret::{const_field, const_variant_index};\n \n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};\n-use rustc::ty::{self, TyCtxt, AdtDef, Ty, Region};\n+use rustc::ty::{self, CanonicalTy, TyCtxt, AdtDef, Ty, Region};\n use rustc::ty::subst::{Substs, Kind};\n use rustc::hir::{self, PatKind, RangeEnd};\n use rustc::hir::def::{Def, CtorKind};\n@@ -66,6 +66,11 @@ pub struct Pattern<'tcx> {\n pub enum PatternKind<'tcx> {\n     Wild,\n \n+    AscribeUserType {\n+        user_ty: CanonicalTy<'tcx>,\n+        subpattern: Pattern<'tcx>,\n+    },\n+\n     /// x, ref x, x @ P, etc\n     Binding {\n         mutability: Mutability,\n@@ -125,6 +130,8 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self.kind {\n             PatternKind::Wild => write!(f, \"_\"),\n+            PatternKind::AscribeUserType { ref subpattern, .. } =>\n+                write!(f, \"{}: _\", subpattern),\n             PatternKind::Binding { mutability, name, mode, ref subpattern, .. } => {\n                 let is_mut = match mode {\n                     BindingMode::ByValue => mutability == Mutability::Mut,\n@@ -939,7 +946,7 @@ macro_rules! CloneImpls {\n CloneImpls!{ <'tcx>\n     Span, Field, Mutability, ast::Name, ast::NodeId, usize, &'tcx ty::Const<'tcx>,\n     Region<'tcx>, Ty<'tcx>, BindingMode<'tcx>, &'tcx AdtDef,\n-    &'tcx Substs<'tcx>, &'tcx Kind<'tcx>\n+    &'tcx Substs<'tcx>, &'tcx Kind<'tcx>, CanonicalTy<'tcx>\n }\n \n impl<'tcx> PatternFoldable<'tcx> for FieldPattern<'tcx> {\n@@ -973,6 +980,13 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n     fn super_fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n             PatternKind::Wild => PatternKind::Wild,\n+            PatternKind::AscribeUserType {\n+                ref subpattern,\n+                user_ty,\n+            } => PatternKind::AscribeUserType {\n+                subpattern: subpattern.fold_with(folder),\n+                user_ty: user_ty.fold_with(folder),\n+            },\n             PatternKind::Binding {\n                 mutability,\n                 name,"}]}