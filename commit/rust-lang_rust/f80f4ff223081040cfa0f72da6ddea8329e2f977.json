{"sha": "f80f4ff223081040cfa0f72da6ddea8329e2f977", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MGY0ZmYyMjMwODEwNDBjZmEwZjcyZGE2ZGRlYTgzMjllMmY5Nzc=", "commit": {"author": {"name": "Arnaud", "email": "arnaud.golfouse@free.fr", "date": "2021-01-07T11:08:11Z"}, "committer": {"name": "Arnaud", "email": "arnaud.golfouse@free.fr", "date": "2021-01-07T11:17:38Z"}, "message": "Use intra-doc links in `vfs` crate documentation", "tree": {"sha": "e3ce3970158b01fc94786d504aa25467a7bf1582", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3ce3970158b01fc94786d504aa25467a7bf1582"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f80f4ff223081040cfa0f72da6ddea8329e2f977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f80f4ff223081040cfa0f72da6ddea8329e2f977", "html_url": "https://github.com/rust-lang/rust/commit/f80f4ff223081040cfa0f72da6ddea8329e2f977", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f80f4ff223081040cfa0f72da6ddea8329e2f977/comments", "author": null, "committer": null, "parents": [{"sha": "b6669b1c9b59c62c3347b0ed8e79d80831a8af66", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6669b1c9b59c62c3347b0ed8e79d80831a8af66", "html_url": "https://github.com/rust-lang/rust/commit/b6669b1c9b59c62c3347b0ed8e79d80831a8af66"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "8c8d1114d9899f8ac208d2dc21eab3fc03bf5b58", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f80f4ff223081040cfa0f72da6ddea8329e2f977/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80f4ff223081040cfa0f72da6ddea8329e2f977/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=f80f4ff223081040cfa0f72da6ddea8329e2f977", "patch": "@@ -2,40 +2,46 @@\n //!\n //! VFS stores all files read by rust-analyzer. Reading file contents from VFS\n //! always returns the same contents, unless VFS was explicitly modified with\n-//! `set_file_contents`. All changes to VFS are logged, and can be retrieved via\n-//! `take_changes` method. The pack of changes is then pushed to `salsa` and\n+//! [`set_file_contents`]. All changes to VFS are logged, and can be retrieved via\n+//! [`take_changes`] method. The pack of changes is then pushed to `salsa` and\n //! triggers incremental recomputation.\n //!\n-//! Files in VFS are identified with `FileId`s -- interned paths. The notion of\n-//! the path, `VfsPath` is somewhat abstract: at the moment, it is represented\n-//! as an `std::path::PathBuf` internally, but this is an implementation detail.\n+//! Files in VFS are identified with [`FileId`]s -- interned paths. The notion of\n+//! the path, [`VfsPath`] is somewhat abstract: at the moment, it is represented\n+//! as an [`std::path::PathBuf`] internally, but this is an implementation detail.\n //!\n-//! VFS doesn't do IO or file watching itself. For that, see the `loader`\n-//! module. `loader::Handle` is an object-safe trait which abstracts both file\n-//! loading and file watching. `Handle` is dynamically configured with a set of\n-//! directory entries which should be scanned and watched. `Handle` then\n+//! VFS doesn't do IO or file watching itself. For that, see the [`loader`]\n+//! module. [`loader::Handle`] is an object-safe trait which abstracts both file\n+//! loading and file watching. [`Handle`] is dynamically configured with a set of\n+//! directory entries which should be scanned and watched. [`Handle`] then\n //! asynchronously pushes file changes. Directory entries are configured in\n-//! free-form via list of globs, it's up to the `Handle` to interpret the globs\n+//! free-form via list of globs, it's up to the [`Handle`] to interpret the globs\n //! in any specific way.\n //!\n-//! VFS stores a flat list of files. `FileSet` can partition this list of files\n+//! VFS stores a flat list of files. [`FileSet`] can partition this list of files\n //! into disjoint sets of files. Traversal-like operations (including getting\n-//! the neighbor file by the relative path) are handled by the `FileSet`.\n-//! `FileSet`s are also pushed to salsa and cause it to re-check `mod foo;`\n+//! the neighbor file by the relative path) are handled by the [`FileSet`].\n+//! [`FileSet`]s are also pushed to salsa and cause it to re-check `mod foo;`\n //! declarations when files are created or deleted.\n //!\n-//! `file_set::FileSet` and `loader::Entry` play similar, but different roles.\n+//! [`file_set::FileSet`] and [`loader::Entry`] play similar, but different roles.\n //! Both specify the \"set of paths/files\", one is geared towards file watching,\n-//! the other towards salsa changes. In particular, single `file_set::FileSet`\n-//! may correspond to several `loader::Entry`. For example, a crate from\n-//! crates.io which uses code generation would have two `Entries` -- for sources\n+//! the other towards salsa changes. In particular, single [`file_set::FileSet`]\n+//! may correspond to several [`loader::Entry`]. For example, a crate from\n+//! crates.io which uses code generation would have two [`Entries`] -- for sources\n //! in `~/.cargo`, and for generated code in `./target/debug/build`. It will\n-//! have a single `FileSet` which unions the two sources.\n-mod vfs_path;\n-mod path_interner;\n+//! have a single [`FileSet`] which unions the two sources.\n+//!\n+//! [`set_file_contents`]: Vfs::set_file_contents\n+//! [`take_changes`]: Vfs::take_changes\n+//! [`FileSet`]: file_set::FileSet\n+//! [`Handle`]: loader::Handle\n+//! [`Entries`]: loader::Entry\n mod anchored_path;\n pub mod file_set;\n pub mod loader;\n+mod path_interner;\n+mod vfs_path;\n \n use std::{fmt, mem};\n "}]}