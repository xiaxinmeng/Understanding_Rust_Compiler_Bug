{"sha": "f392479de6b003e72f93cb8f9955b3cf4135c2cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOTI0NzlkZTZiMDAzZTcyZjkzY2I4Zjk5NTViM2NmNDEzNWMyY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-25T11:35:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-25T11:35:26Z"}, "message": "Auto merge of #78350 - JohnTitor:rollup-vbbm5wf, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #77984 (Compute proper module parent during resolution)\n - #78085 (MIR validation should check `SwitchInt` values are valid for the type)\n - #78208 (replace `#[allow_internal_unstable]` with `#[rustc_allow_const_fn_unstable]` for `const fn`s)\n - #78209 (Update `compiler_builtins` to 0.1.36)\n - #78276 (Bump backtrace-rs to enable Mach-O support on iOS.)\n - #78320 (Link to cargo's `build-std` feature instead of `xargo` in custom target docs)\n - #78322 (BTreeMap: stop mistaking node::MIN_LEN for a node level constraint)\n - #78326 (Split out statement attributes changes from #78306)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "057548a962b16b3c490cf339db151d1e0eeba81c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/057548a962b16b3c490cf339db151d1e0eeba81c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f392479de6b003e72f93cb8f9955b3cf4135c2cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f392479de6b003e72f93cb8f9955b3cf4135c2cd", "html_url": "https://github.com/rust-lang/rust/commit/f392479de6b003e72f93cb8f9955b3cf4135c2cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f392479de6b003e72f93cb8f9955b3cf4135c2cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5171cc76c264fd46f32e140c2e460c77ca87d5e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5171cc76c264fd46f32e140c2e460c77ca87d5e5", "html_url": "https://github.com/rust-lang/rust/commit/5171cc76c264fd46f32e140c2e460c77ca87d5e5"}, {"sha": "0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "html_url": "https://github.com/rust-lang/rust/commit/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae"}], "stats": {"total": 558, "additions": 427, "deletions": 131}, "files": [{"sha": "98e7e34faf76fdede7bfeec8dab67c1bba093ea5", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -636,9 +636,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.35\"\n+version = \"0.1.36\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e3fcd8aba10d17504c87ef12d4f62ef404c6a4703d16682a9eb5543e6cf24455\"\n+checksum = \"7cd0782e0a7da7598164153173e5a5d4d9b1da094473c98dce0ff91406112369\"\n dependencies = [\n  \"cc\",\n  \"rustc-std-workspace-core\","}, {"sha": "70ad43ecad219a32d4ba6dae82805dee51006ed5", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -629,7 +629,8 @@ impl HasAttrs for StmtKind {\n         match *self {\n             StmtKind::Local(ref local) => local.attrs(),\n             StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => expr.attrs(),\n-            StmtKind::Empty | StmtKind::Item(..) => &[],\n+            StmtKind::Item(ref item) => item.attrs(),\n+            StmtKind::Empty => &[],\n             StmtKind::MacCall(ref mac) => mac.attrs.attrs(),\n         }\n     }\n@@ -638,7 +639,8 @@ impl HasAttrs for StmtKind {\n         match self {\n             StmtKind::Local(local) => local.visit_attrs(f),\n             StmtKind::Expr(expr) | StmtKind::Semi(expr) => expr.visit_attrs(f),\n-            StmtKind::Empty | StmtKind::Item(..) => {}\n+            StmtKind::Item(item) => item.visit_attrs(f),\n+            StmtKind::Empty => {}\n             StmtKind::MacCall(mac) => {\n                 mac.attrs.visit_attrs(f);\n             }"}, {"sha": "218a9b229e0df0fb2605606c0d609b9edd4d6e60", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -1013,13 +1013,28 @@ pub fn allow_internal_unstable<'a>(\n     sess: &'a Session,\n     attrs: &'a [Attribute],\n ) -> Option<impl Iterator<Item = Symbol> + 'a> {\n-    let attrs = sess.filter_by_name(attrs, sym::allow_internal_unstable);\n+    allow_unstable(sess, attrs, sym::allow_internal_unstable)\n+}\n+\n+pub fn rustc_allow_const_fn_unstable<'a>(\n+    sess: &'a Session,\n+    attrs: &'a [Attribute],\n+) -> Option<impl Iterator<Item = Symbol> + 'a> {\n+    allow_unstable(sess, attrs, sym::rustc_allow_const_fn_unstable)\n+}\n+\n+fn allow_unstable<'a>(\n+    sess: &'a Session,\n+    attrs: &'a [Attribute],\n+    symbol: Symbol,\n+) -> Option<impl Iterator<Item = Symbol> + 'a> {\n+    let attrs = sess.filter_by_name(attrs, symbol);\n     let list = attrs\n         .filter_map(move |attr| {\n             attr.meta_item_list().or_else(|| {\n                 sess.diagnostic().span_err(\n                     attr.span,\n-                    \"`allow_internal_unstable` expects a list of feature names\",\n+                    &format!(\"`{}` expects a list of feature names\", symbol.to_ident_string()),\n                 );\n                 None\n             })\n@@ -1029,8 +1044,10 @@ pub fn allow_internal_unstable<'a>(\n     Some(list.into_iter().filter_map(move |it| {\n         let name = it.ident().map(|ident| ident.name);\n         if name.is_none() {\n-            sess.diagnostic()\n-                .span_err(it.span(), \"`allow_internal_unstable` expects feature names\");\n+            sess.diagnostic().span_err(\n+                it.span(),\n+                &format!(\"`{}` expects feature names\", symbol.to_ident_string()),\n+            );\n         }\n         name\n     }))"}, {"sha": "3e5762ab992f48a470c89d0abe6b272986beacf9", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -1357,7 +1357,8 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         // we'll expand attributes on expressions separately\n         if !stmt.is_expr() {\n             let (attr, derives, after_derive) = if stmt.is_item() {\n-                self.classify_item(&mut stmt)\n+                // FIXME: Handle custom attributes on statements (#15701)\n+                (None, vec![], false)\n             } else {\n                 // ignore derives on non-item statements so it falls through\n                 // to the unused-attributes lint"}, {"sha": "d111ce7abb4c0f00dfcf32ad7aaff03ef0d520ae", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -210,6 +210,11 @@ declare_features! (\n     /// it is not on path for eventual stabilization).\n     (active, no_niche, \"1.42.0\", None, None),\n \n+    /// Allows using `#[rustc_allow_const_fn_unstable]`.\n+    /// This is an attribute on `const fn` for the same\n+    /// purpose as `#[allow_internal_unstable]`.\n+    (active, rustc_allow_const_fn_unstable, \"1.49.0\", Some(69399), None),\n+\n     // no-tracking-issue-end\n \n     // -------------------------------------------------------------------------"}, {"sha": "f73363cbccc25808e91f19c42c76118002277ae5", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -379,6 +379,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         allow_internal_unstable, AssumedUsed, template!(Word, List: \"feat1, feat2, ...\"),\n         \"allow_internal_unstable side-steps feature gating and stability checks\",\n     ),\n+    gated!(\n+        rustc_allow_const_fn_unstable, AssumedUsed, template!(Word, List: \"feat1, feat2, ...\"),\n+        \"rustc_allow_const_fn_unstable side-steps feature gating and stability checks\"\n+    ),\n     gated!(\n         allow_internal_unsafe, Normal, template!(Word),\n         \"allow_internal_unsafe side-steps the unsafe_code lint\","}, {"sha": "fc15bb324c1d881fa77c7b074932c82eb8109531", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -1101,11 +1101,11 @@ pub enum StmtKind<'hir> {\n     Semi(&'hir Expr<'hir>),\n }\n \n-impl StmtKind<'hir> {\n-    pub fn attrs(&self) -> &'hir [Attribute] {\n+impl<'hir> StmtKind<'hir> {\n+    pub fn attrs(&self, get_item: impl FnOnce(ItemId) -> &'hir Item<'hir>) -> &'hir [Attribute] {\n         match *self {\n             StmtKind::Local(ref l) => &l.attrs,\n-            StmtKind::Item(_) => &[],\n+            StmtKind::Item(ref item_id) => &get_item(*item_id).attrs,\n             StmtKind::Expr(ref e) | StmtKind::Semi(ref e) => &e.attrs,\n         }\n     }"}, {"sha": "e5f66611d0f9b382471319ce3776c6d8b90e5b47", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -994,7 +994,8 @@ impl EarlyLintPass for UnusedDocComment {\n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &ast::Stmt) {\n         let kind = match stmt.kind {\n             ast::StmtKind::Local(..) => \"statements\",\n-            ast::StmtKind::Item(..) => \"inner items\",\n+            // Disabled pending discussion in #78306\n+            ast::StmtKind::Item(..) => return,\n             // expressions will be reported by `check_expr`.\n             ast::StmtKind::Empty\n             | ast::StmtKind::Semi(_)"}, {"sha": "9aeeb6277924ec12ce2b3c68a5737233093accfc", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -18,6 +18,7 @@ use crate::context::{EarlyContext, LintContext, LintStore};\n use crate::passes::{EarlyLintPass, EarlyLintPassObject};\n use rustc_ast as ast;\n use rustc_ast::visit as ast_visit;\n+use rustc_attr::HasAttrs;\n use rustc_session::lint::{BufferedEarlyLint, LintBuffer, LintPass};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n@@ -119,8 +120,22 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_stmt(&mut self, s: &'a ast::Stmt) {\n-        run_early_pass!(self, check_stmt, s);\n-        self.check_id(s.id);\n+        // Add the statement's lint attributes to our\n+        // current state when checking the statement itself.\n+        // This allows us to handle attributes like\n+        // `#[allow(unused_doc_comments)]`, which apply to\n+        // sibling attributes on the same target\n+        //\n+        // Note that statements get their attributes from\n+        // the AST struct that they wrap (e.g. an item)\n+        self.with_lint_attrs(s.id, s.attrs(), |cx| {\n+            run_early_pass!(cx, check_stmt, s);\n+            cx.check_id(s.id);\n+        });\n+        // The visitor for the AST struct wrapped\n+        // by the statement (e.g. `Item`) will call\n+        // `with_lint_attrs`, so do this walk\n+        // outside of the above `with_lint_attrs` call\n         ast_visit::walk_stmt(self, s);\n     }\n "}, {"sha": "015e10987118296d7094272459059efe9eb1b3bb", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -174,12 +174,13 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_stmt(&mut self, s: &'tcx hir::Stmt<'tcx>) {\n-        // statement attributes are actually just attributes on one of\n-        // - item\n-        // - local\n-        // - expression\n-        // so we keep track of lint levels there\n-        lint_callback!(self, check_stmt, s);\n+        let get_item = |id: hir::ItemId| self.context.tcx.hir().item(id.id);\n+        let attrs = &s.kind.attrs(get_item);\n+        // See `EarlyContextAndPass::visit_stmt` for an explanation\n+        // of why we call `walk_stmt` outside of `with_lint_attrs`\n+        self.with_lint_attrs(s.hir_id, attrs, |cx| {\n+            lint_callback!(cx, check_stmt, s);\n+        });\n         hir_visit::walk_stmt(self, s);\n     }\n "}, {"sha": "f36f598ade2def1c0e1d557cbf52853616c22d06", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -562,6 +562,13 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n         })\n     }\n \n+    fn visit_stmt(&mut self, e: &'tcx hir::Stmt<'tcx>) {\n+        // We will call `with_lint_attrs` when we walk\n+        // the `StmtKind`. The outer statement itself doesn't\n+        // define the lint levels.\n+        intravisit::walk_stmt(self, e);\n+    }\n+\n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n         self.with_lint_attrs(e.hir_id, &e.attrs, |builder| {\n             intravisit::walk_expr(builder, e);"}, {"sha": "68faf9c7a629d98b9f5a6907c11b994513ac0616", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -8,6 +8,7 @@ use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_middle::hir::exports::Export;\n@@ -487,6 +488,10 @@ impl CrateStore for CStore {\n         self.get_crate_data(def.krate).def_key(def.index)\n     }\n \n+    fn def_kind(&self, def: DefId) -> DefKind {\n+        self.get_crate_data(def.krate).def_kind(def.index)\n+    }\n+\n     fn def_path(&self, def: DefId) -> DefPath {\n         self.get_crate_data(def.krate).def_path(def.index)\n     }"}, {"sha": "106fa8c78fa286a158ea1a3d11e845a731ca2258", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -816,7 +816,7 @@ impl<'hir> Map<'hir> {\n             Some(Node::Variant(ref v)) => Some(&v.attrs[..]),\n             Some(Node::Field(ref f)) => Some(&f.attrs[..]),\n             Some(Node::Expr(ref e)) => Some(&*e.attrs),\n-            Some(Node::Stmt(ref s)) => Some(s.kind.attrs()),\n+            Some(Node::Stmt(ref s)) => Some(s.kind.attrs(|id| self.item(id.id))),\n             Some(Node::Arm(ref a)) => Some(&*a.attrs),\n             Some(Node::GenericParam(param)) => Some(&param.attrs[..]),\n             // Unit/tuple structs/variants take the attributes straight from"}, {"sha": "ae9e4d364d3cb749e88c7224e7e40f8398652816", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -8,6 +8,7 @@ use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{self, MetadataRef};\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_macros::HashStable;\n@@ -185,6 +186,7 @@ pub trait CrateStore {\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey;\n+    fn def_kind(&self, def: DefId) -> DefKind;\n     fn def_path(&self, def: DefId) -> DefPath;\n     fn def_path_hash(&self, def: DefId) -> DefPathHash;\n     fn all_def_path_hashes_and_def_ids(&self, cnum: CrateNum) -> Vec<(DefPathHash, DefId)>;"}, {"sha": "ba7bea4ac54e15b1a206055a7ae9d1c26c43f462", "filename": "compiler/rustc_mir/src/transform/check_consts/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -79,9 +79,13 @@ pub fn is_lang_panic_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n         || Some(def_id) == tcx.lang_items().begin_panic_fn()\n }\n \n-pub fn allow_internal_unstable(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -> bool {\n+pub fn rustc_allow_const_fn_unstable(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    feature_gate: Symbol,\n+) -> bool {\n     let attrs = tcx.get_attrs(def_id);\n-    attr::allow_internal_unstable(&tcx.sess, attrs)\n+    attr::rustc_allow_const_fn_unstable(&tcx.sess, attrs)\n         .map_or(false, |mut features| features.any(|name| name == feature_gate))\n }\n "}, {"sha": "4139b544998faeb724ce2ff79596e7ea5495aeb8", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -292,7 +292,11 @@ impl Validator<'mir, 'tcx> {\n \n             Status::Unstable(gate) if self.tcx.features().enabled(gate) => {\n                 let unstable_in_stable = self.ccx.is_const_stable_const_fn()\n-                    && !super::allow_internal_unstable(self.tcx, self.def_id().to_def_id(), gate);\n+                    && !super::rustc_allow_const_fn_unstable(\n+                        self.tcx,\n+                        self.def_id().to_def_id(),\n+                        gate,\n+                    );\n                 if unstable_in_stable {\n                     emit_unstable_in_stable_error(self.ccx, span, gate);\n                 }\n@@ -807,7 +811,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     }\n \n                     // Calling an unstable function *always* requires that the corresponding gate\n-                    // be enabled, even if the function has `#[allow_internal_unstable(the_gate)]`.\n+                    // be enabled, even if the function has `#[rustc_allow_const_fn_unstable(the_gate)]`.\n                     if !tcx.features().declared_lib_features.iter().any(|&(sym, _)| sym == gate) {\n                         self.check_op(ops::FnCallUnstable(callee, Some(gate)));\n                         return;\n@@ -821,7 +825,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n \n                     // Otherwise, we are something const-stable calling a const-unstable fn.\n \n-                    if super::allow_internal_unstable(tcx, caller, gate) {\n+                    if super::rustc_allow_const_fn_unstable(tcx, caller, gate) {\n                         return;\n                     }\n \n@@ -967,8 +971,8 @@ fn emit_unstable_in_stable_error(ccx: &ConstCx<'_, '_>, span: Span, gate: Symbol\n         )\n         .span_suggestion(\n             attr_span,\n-            \"otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\",\n-            format!(\"#[allow_internal_unstable({})]\\n\", gate),\n+            \"otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\",\n+            format!(\"#[rustc_allow_const_fn_unstable({})]\\n\", gate),\n             Applicability::MaybeIncorrect,\n         )\n         .emit();"}, {"sha": "7b22d643ab646c9e193d28ca2824a748d49b22fd", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -5,13 +5,17 @@ use crate::dataflow::{Analysis, ResultsCursor};\n use crate::util::storage::AlwaysLiveLocals;\n \n use super::MirPass;\n-use rustc_middle::mir::visit::{PlaceContext, Visitor};\n+use rustc_middle::mir::{\n+    interpret::Scalar,\n+    visit::{PlaceContext, Visitor},\n+};\n use rustc_middle::mir::{\n     AggregateKind, BasicBlock, Body, BorrowKind, Local, Location, MirPhase, Operand, Rvalue,\n     SourceScope, Statement, StatementKind, Terminator, TerminatorKind, VarDebugInfo,\n };\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt};\n+use rustc_target::abi::Size;\n \n #[derive(Copy, Clone, Debug)]\n enum EdgeKind {\n@@ -346,7 +350,25 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                         ),\n                     );\n                 }\n-                for (_, target) in targets.iter() {\n+\n+                let target_width = self.tcx.sess.target.pointer_width;\n+\n+                let size = Size::from_bits(match switch_ty.kind() {\n+                    ty::Uint(uint) => uint.normalize(target_width).bit_width().unwrap(),\n+                    ty::Int(int) => int.normalize(target_width).bit_width().unwrap(),\n+                    ty::Char => 32,\n+                    ty::Bool => 1,\n+                    other => bug!(\"unhandled type: {:?}\", other),\n+                });\n+\n+                for (value, target) in targets.iter() {\n+                    if Scalar::<()>::try_from_uint(value, size).is_none() {\n+                        self.fail(\n+                            location,\n+                            format!(\"the value {:#x} is not a proper {:?}\", value, switch_ty),\n+                        )\n+                    }\n+\n                     self.check_edge(location, target, EdgeKind::Normal);\n                 }\n                 self.check_edge(location, targets.otherwise(), EdgeKind::Normal);"}, {"sha": "7679582f8811e39b2534d0f79f4e8ab1d7f46188", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -85,6 +85,10 @@ impl CheckAttrVisitor<'tcx> {\n                 self.check_export_name(&attr, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::rustc_args_required_const) {\n                 self.check_rustc_args_required_const(&attr, span, target, item)\n+            } else if self.tcx.sess.check_name(attr, sym::allow_internal_unstable) {\n+                self.check_allow_internal_unstable(&attr, span, target, &attrs)\n+            } else if self.tcx.sess.check_name(attr, sym::rustc_allow_const_fn_unstable) {\n+                self.check_rustc_allow_const_fn_unstable(hir_id, &attr, span, target)\n             } else {\n                 // lint-only checks\n                 if self.tcx.sess.check_name(attr, sym::cold) {\n@@ -719,6 +723,55 @@ impl CheckAttrVisitor<'tcx> {\n             }\n         }\n     }\n+\n+    /// Outputs an error for `#[allow_internal_unstable]` which can only be applied to macros.\n+    /// (Allows proc_macro functions)\n+    fn check_allow_internal_unstable(\n+        &self,\n+        attr: &Attribute,\n+        span: &Span,\n+        target: Target,\n+        attrs: &[Attribute],\n+    ) -> bool {\n+        debug!(\"Checking target: {:?}\", target);\n+        if target == Target::Fn {\n+            for attr in attrs {\n+                if self.tcx.sess.is_proc_macro_attr(attr) {\n+                    debug!(\"Is proc macro attr\");\n+                    return true;\n+                }\n+            }\n+            debug!(\"Is not proc macro attr\");\n+        }\n+        self.tcx\n+            .sess\n+            .struct_span_err(attr.span, \"attribute should be applied to a macro\")\n+            .span_label(*span, \"not a macro\")\n+            .emit();\n+        false\n+    }\n+\n+    /// Outputs an error for `#[allow_internal_unstable]` which can only be applied to macros.\n+    /// (Allows proc_macro functions)\n+    fn check_rustc_allow_const_fn_unstable(\n+        &self,\n+        hir_id: HirId,\n+        attr: &Attribute,\n+        span: &Span,\n+        target: Target,\n+    ) -> bool {\n+        if let Target::Fn | Target::Method(_) = target {\n+            if self.tcx.is_const_fn_raw(self.tcx.hir().local_def_id(hir_id)) {\n+                return true;\n+            }\n+        }\n+        self.tcx\n+            .sess\n+            .struct_span_err(attr.span, \"attribute should be applied to `const fn`\")\n+            .span_label(*span, \"not a `const fn`\")\n+            .emit();\n+        false\n+    }\n }\n \n impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {"}, {"sha": "b24c62b971a468a31ca5e32b36a8051cb68b1dc1", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n \n         let is_feature_allowed = |feature_gate| {\n             // All features require that the corresponding gate be enabled,\n-            // even if the function has `#[allow_internal_unstable(the_gate)]`.\n+            // even if the function has `#[rustc_allow_const_fn_unstable(the_gate)]`.\n             if !tcx.features().enabled(feature_gate) {\n                 return false;\n             }\n@@ -105,8 +105,8 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n             }\n \n             // However, we cannot allow stable `const fn`s to use unstable features without an explicit\n-            // opt-in via `allow_internal_unstable`.\n-            attr::allow_internal_unstable(&tcx.sess, &tcx.get_attrs(def_id))\n+            // opt-in via `rustc_allow_const_fn_unstable`.\n+            attr::rustc_allow_const_fn_unstable(&tcx.sess, &tcx.get_attrs(def_id))\n                 .map_or(false, |mut features| features.any(|name| name == feature_gate))\n         };\n "}, {"sha": "feeea726f4c1bde0de1f7c96abc37caa66306a64", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -95,6 +95,27 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    /// Walks up the tree of definitions starting at `def_id`,\n+    /// stopping at the first `DefKind::Mod` encountered\n+    fn nearest_mod_parent(&mut self, def_id: DefId) -> Module<'a> {\n+        let def_key = self.cstore().def_key(def_id);\n+\n+        let mut parent_id = DefId {\n+            krate: def_id.krate,\n+            index: def_key.parent.expect(\"failed to get parent for module\"),\n+        };\n+        // The immediate parent may not be a module\n+        // (e.g. `const _: () =  { #[path = \"foo.rs\"] mod foo; };`)\n+        // Walk up the tree until we hit a module or the crate root.\n+        while parent_id.index != CRATE_DEF_INDEX\n+            && self.cstore().def_kind(parent_id) != DefKind::Mod\n+        {\n+            let parent_def_key = self.cstore().def_key(parent_id);\n+            parent_id.index = parent_def_key.parent.expect(\"failed to get parent for module\");\n+        }\n+        self.get_module(parent_id)\n+    }\n+\n     crate fn get_module(&mut self, def_id: DefId) -> Module<'a> {\n         // If this is a local module, it will be in `module_map`, no need to recalculate it.\n         if let Some(def_id) = def_id.as_local() {\n@@ -116,11 +137,8 @@ impl<'a> Resolver<'a> {\n                 .data\n                 .get_opt_name()\n                 .expect(\"given a DefId that wasn't a module\");\n-            // This unwrap is safe since we know this isn't the root\n-            let parent = Some(self.get_module(DefId {\n-                index: def_key.parent.expect(\"failed to get parent for module\"),\n-                ..def_id\n-            }));\n+\n+            let parent = Some(self.nearest_mod_parent(def_id));\n             (name, parent)\n         };\n \n@@ -145,8 +163,24 @@ impl<'a> Resolver<'a> {\n         if let Some(id) = def_id.as_local() {\n             self.local_macro_def_scopes[&id]\n         } else {\n-            let module_def_id = ty::DefIdTree::parent(&*self, def_id).unwrap();\n-            self.get_module(module_def_id)\n+            // This is not entirely correct - a `macro_rules!` macro may occur\n+            // inside a 'block' module:\n+            //\n+            // ```rust\n+            // const _: () = {\n+            // #[macro_export]\n+            // macro_rules! my_macro {\n+            //     () => {};\n+            // }\n+            // `\n+            // We don't record this information for external crates, so\n+            // the module we compute here will be the closest 'mod' item\n+            // (not necesssarily the actual parent of the `macro_rules!`\n+            // macro). `macro_rules!` macros can't use def-site hygiene,\n+            // so this hopefully won't be a problem.\n+            //\n+            // See https://github.com/rust-lang/rust/pull/77984#issuecomment-712445508\n+            self.nearest_mod_parent(def_id)\n         }\n     }\n "}, {"sha": "bae1e4f314c01e3360e4c4653e7da12c47063adc", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -894,6 +894,7 @@ symbols! {\n         rustc,\n         rustc_allocator,\n         rustc_allocator_nounwind,\n+        rustc_allow_const_fn_unstable,\n         rustc_args_required_const,\n         rustc_attrs,\n         rustc_builtin_macro,"}, {"sha": "4f9aa44b6b510b78d7dbc9ebaf5f0a998d3f7a1b", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -17,6 +17,10 @@ mod entry;\n pub use entry::{Entry, OccupiedEntry, VacantEntry};\n use Entry::*;\n \n+/// Minimum number of elements in nodes that are not a root.\n+/// We might temporarily have fewer elements during methods.\n+pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n+\n /// A map based on a B-Tree.\n ///\n /// B-Trees represent a fundamental compromise between cache-efficiency and actually minimizing\n@@ -1094,13 +1098,13 @@ impl<K: Ord, V> BTreeMap<K, V> {\n             // Check if right-most child is underfull.\n             let mut last_edge = internal.last_edge();\n             let right_child_len = last_edge.reborrow().descend().len();\n-            if right_child_len < node::MIN_LEN {\n+            if right_child_len < MIN_LEN {\n                 // We need to steal.\n                 let mut last_kv = match last_edge.left_kv() {\n                     Ok(left) => left,\n                     Err(_) => unreachable!(),\n                 };\n-                last_kv.bulk_steal_left(node::MIN_LEN - right_child_len);\n+                last_kv.bulk_steal_left(MIN_LEN - right_child_len);\n                 last_edge = last_kv.right_edge();\n             }\n "}, {"sha": "adb94972f5bb63de616f644fe79aaac7d564d2dd", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -50,10 +50,15 @@ impl<'a, K: 'a, V: 'a> BTreeMap<K, V> {\n     {\n         if let Some(root) = &self.root {\n             let root_node = root.node_as_ref();\n+\n             assert!(root_node.ascend().is_err());\n             root_node.assert_back_pointers();\n-            root_node.assert_ascending();\n-            assert_eq!(self.length, root_node.assert_and_add_lengths());\n+\n+            let counted = root_node.assert_ascending();\n+            assert_eq!(self.length, counted);\n+            assert_eq!(self.length, root_node.calc_length());\n+\n+            root_node.assert_min_len(if root_node.height() > 0 { 1 } else { 0 });\n         } else {\n             assert_eq!(self.length, 0);\n         }\n@@ -76,6 +81,18 @@ impl<'a, K: 'a, V: 'a> BTreeMap<K, V> {\n     }\n }\n \n+impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal> {\n+    pub fn assert_min_len(self, min_len: usize) {\n+        assert!(self.len() >= min_len, \"{} < {}\", self.len(), min_len);\n+        if let node::ForceResult::Internal(node) = self.force() {\n+            for idx in 0..=node.len() {\n+                let edge = unsafe { Handle::new_edge(node, idx) };\n+                edge.descend().assert_min_len(MIN_LEN);\n+            }\n+        }\n+    }\n+}\n+\n // Test our value of MIN_INSERTS_HEIGHT_2. It may change according to the\n // implementation of insertion, but it's best to be aware of when it does.\n #[test]"}, {"sha": "f5aff9bf494e9d0ca4f6adb95cedf5f656e6dec0", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -38,8 +38,8 @@ use crate::alloc::{AllocRef, Global, Layout};\n use crate::boxed::Box;\n \n const B: usize = 6;\n-pub const MIN_LEN: usize = B - 1;\n pub const CAPACITY: usize = 2 * B - 1;\n+pub const MIN_LEN_AFTER_SPLIT: usize = B - 1;\n const KV_IDX_CENTER: usize = B - 1;\n const EDGE_IDX_LEFT_OF_CENTER: usize = B - 1;\n const EDGE_IDX_RIGHT_OF_CENTER: usize = B;"}, {"sha": "d6527057c5d772f9789f20d9fb53474d8cad8f7d", "filename": "library/alloc/src/collections/btree/node/tests.rs", "status": "modified", "additions": 16, "deletions": 40, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -5,25 +5,26 @@ use crate::string::String;\n use core::cmp::Ordering::*;\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal> {\n+    /// Asserts that the back pointer in each reachable node points to its parent.\n     pub fn assert_back_pointers(self) {\n-        match self.force() {\n-            ForceResult::Leaf(_) => {}\n-            ForceResult::Internal(node) => {\n-                for idx in 0..=node.len() {\n-                    let edge = unsafe { Handle::new_edge(node, idx) };\n-                    let child = edge.descend();\n-                    assert!(child.ascend().ok() == Some(edge));\n-                    child.assert_back_pointers();\n-                }\n+        if let ForceResult::Internal(node) = self.force() {\n+            for idx in 0..=node.len() {\n+                let edge = unsafe { Handle::new_edge(node, idx) };\n+                let child = edge.descend();\n+                assert!(child.ascend().ok() == Some(edge));\n+                child.assert_back_pointers();\n             }\n         }\n     }\n \n-    pub fn assert_ascending(self)\n+    /// Asserts that the keys are in strictly ascending order.\n+    /// Returns how many keys it encountered.\n+    pub fn assert_ascending(self) -> usize\n     where\n         K: Copy + Debug + Ord,\n     {\n         struct SeriesChecker<T> {\n+            num_seen: usize,\n             previous: Option<T>,\n         }\n         impl<T: Copy + Debug + Ord> SeriesChecker<T> {\n@@ -32,10 +33,11 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>\n                     assert!(previous < next, \"{:?} >= {:?}\", previous, next);\n                 }\n                 self.previous = Some(next);\n+                self.num_seen += 1;\n             }\n         }\n \n-        let mut checker = SeriesChecker { previous: None };\n+        let mut checker = SeriesChecker { num_seen: 0, previous: None };\n         self.visit_nodes_in_order(|pos| match pos {\n             navigate::Position::Leaf(node) => {\n                 for idx in 0..node.len() {\n@@ -49,33 +51,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>\n             }\n             navigate::Position::Internal(_) => {}\n         });\n-    }\n-\n-    pub fn assert_and_add_lengths(self) -> usize {\n-        let mut internal_length = 0;\n-        let mut internal_kv_count = 0;\n-        let mut leaf_length = 0;\n-        self.visit_nodes_in_order(|pos| match pos {\n-            navigate::Position::Leaf(node) => {\n-                let is_root = self.height() == 0;\n-                let min_len = if is_root { 0 } else { MIN_LEN };\n-                assert!(node.len() >= min_len, \"{} < {}\", node.len(), min_len);\n-                leaf_length += node.len();\n-            }\n-            navigate::Position::Internal(node) => {\n-                let is_root = self.height() == node.height();\n-                let min_len = if is_root { 1 } else { MIN_LEN };\n-                assert!(node.len() >= min_len, \"{} < {}\", node.len(), min_len);\n-                internal_length += node.len();\n-            }\n-            navigate::Position::InternalKV(_) => {\n-                internal_kv_count += 1;\n-            }\n-        });\n-        assert_eq!(internal_length, internal_kv_count);\n-        let total = internal_length + leaf_length;\n-        assert_eq!(self.calc_length(), total);\n-        total\n+        checker.num_seen\n     }\n \n     pub fn dump_keys(self) -> String\n@@ -124,8 +100,8 @@ fn test_splitpoint() {\n                 right_len += 1;\n             }\n         }\n-        assert!(left_len >= MIN_LEN);\n-        assert!(right_len >= MIN_LEN);\n+        assert!(left_len >= MIN_LEN_AFTER_SPLIT);\n+        assert!(right_len >= MIN_LEN_AFTER_SPLIT);\n         assert!(left_len + right_len == CAPACITY);\n     }\n }"}, {"sha": "99655d3e2bf64f35c2bc0f52b1427f7e81b92fa1", "filename": "library/alloc/src/collections/btree/remove.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -1,4 +1,5 @@\n-use super::node::{self, marker, ForceResult, Handle, NodeRef};\n+use super::map::MIN_LEN;\n+use super::node::{marker, ForceResult, Handle, NodeRef};\n use super::unwrap_unchecked;\n use core::mem;\n use core::ptr;\n@@ -40,7 +41,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInter\n         // Handle underflow\n         let mut cur_node = unsafe { ptr::read(&pos).into_node().forget_type() };\n         let mut at_leaf = true;\n-        while cur_node.len() < node::MIN_LEN {\n+        while cur_node.len() < MIN_LEN {\n             match handle_underfull_node(cur_node) {\n                 UnderflowResult::AtRoot => break,\n                 UnderflowResult::Merged(edge, merged_with_left, offset) => {"}, {"sha": "5f00a5a25abad5bf2a091c8f9ea024b6e304a713", "filename": "library/alloc/src/collections/btree/split.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -1,5 +1,6 @@\n-use super::node::{self, ForceResult::*, Root};\n-use super::search::{self, SearchResult::*};\n+use super::map::MIN_LEN;\n+use super::node::{ForceResult::*, Root};\n+use super::search::{search_node, SearchResult::*};\n use core::borrow::Borrow;\n \n impl<K, V> Root<K, V> {\n@@ -20,7 +21,7 @@ impl<K, V> Root<K, V> {\n             let mut right_node = right_root.node_as_mut();\n \n             loop {\n-                let mut split_edge = match search::search_node(left_node, key) {\n+                let mut split_edge = match search_node(left_node, key) {\n                     // key is going to the right tree\n                     Found(handle) => handle.left_edge(),\n                     GoDown(handle) => handle,\n@@ -65,9 +66,9 @@ impl<K, V> Root<K, V> {\n                     cur_node = last_kv.merge().descend();\n                 } else {\n                     let right_len = last_kv.reborrow().right_edge().descend().len();\n-                    // `MINLEN + 1` to avoid readjust if merge happens on the next level.\n-                    if right_len < node::MIN_LEN + 1 {\n-                        last_kv.bulk_steal_left(node::MIN_LEN + 1 - right_len);\n+                    // `MIN_LEN + 1` to avoid readjust if merge happens on the next level.\n+                    if right_len < MIN_LEN + 1 {\n+                        last_kv.bulk_steal_left(MIN_LEN + 1 - right_len);\n                     }\n                     cur_node = last_kv.right_edge().descend();\n                 }\n@@ -91,8 +92,9 @@ impl<K, V> Root<K, V> {\n                     cur_node = first_kv.merge().descend();\n                 } else {\n                     let left_len = first_kv.reborrow().left_edge().descend().len();\n-                    if left_len < node::MIN_LEN + 1 {\n-                        first_kv.bulk_steal_right(node::MIN_LEN + 1 - left_len);\n+                    // `MIN_LEN + 1` to avoid readjust if merge happens on the next level.\n+                    if left_len < MIN_LEN + 1 {\n+                        first_kv.bulk_steal_right(MIN_LEN + 1 - left_len);\n                     }\n                     cur_node = first_kv.left_edge().descend();\n                 }"}, {"sha": "0fe15958076c53ad1b1054083bcdad4c9ffdaa88", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -72,6 +72,7 @@\n #![allow(explicit_outlives_requirements)]\n #![allow(incomplete_features)]\n #![deny(unsafe_op_in_unsafe_fn)]\n+#![cfg_attr(not(bootstrap), feature(rustc_allow_const_fn_unstable))]\n #![cfg_attr(not(test), feature(generator_trait))]\n #![cfg_attr(test, feature(test))]\n #![cfg_attr(test, feature(new_uninit))]"}, {"sha": "657b568e7f6f6b5cd35770f85334fe9128ad87d3", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -150,7 +150,8 @@ impl<T> RawVec<T, Global> {\n impl<T, A: AllocRef> RawVec<T, A> {\n     /// Like `new`, but parameterized over the choice of allocator for\n     /// the returned `RawVec`.\n-    #[allow_internal_unstable(const_fn)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n     pub const fn new_in(alloc: A) -> Self {\n         // `cap: 0` means \"unallocated\". zero-sized types are ignored.\n         Self { ptr: Unique::dangling(), cap: 0, alloc }"}, {"sha": "8b8ea53b56f519dd7780defdd4254daaec892584", "filename": "library/backtrace", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fbacktrace?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -1 +1 @@\n-Subproject commit a6dd47bd588c882e735675a1379d2b61719fa380\n+Subproject commit 8b8ea53b56f519dd7780defdd4254daaec892584"}, {"sha": "6cb240d1730edf4a1797fae4d98571c66065bba6", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -63,6 +63,7 @@\n #![warn(missing_debug_implementations)]\n #![allow(explicit_outlives_requirements)]\n #![allow(incomplete_features)]\n+#![cfg_attr(not(bootstrap), feature(rustc_allow_const_fn_unstable))]\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n #![feature(asm)]"}, {"sha": "295a876773c48779255894975912de187d5b6c16", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -2045,7 +2045,8 @@ assert_eq!(\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n-            #[allow_internal_unstable(const_fn_transmute)]\n+            #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -2193,7 +2194,8 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n-            #[allow_internal_unstable(const_fn_transmute)]\n+            #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them"}, {"sha": "bdea0ea3b08c026aaf518462aa941c96987544b9", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -1803,7 +1803,8 @@ assert_eq!(\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n-            #[allow_internal_unstable(const_fn_transmute)]\n+            #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -1951,7 +1952,8 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n-            #[allow_internal_unstable(const_fn_transmute)]\n+            #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them"}, {"sha": "b6fd0c4986b64b59ec5b4c73d257fc91c0edccf5", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -88,7 +88,8 @@ impl<T> [T] {\n     #[rustc_const_stable(feature = \"const_slice_len\", since = \"1.32.0\")]\n     #[inline]\n     // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n-    #[allow_internal_unstable(const_fn_union)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_union))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_union))]\n     pub const fn len(&self) -> usize {\n         // SAFETY: this is safe because `&[T]` and `FatPtr<T>` have the same layout.\n         // Only `std` can make this guarantee."}, {"sha": "952d0598a7c5b961366bb3aceda9a66b1c37edb8", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -157,7 +157,8 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_str_from_utf8_unchecked\", issue = \"75196\")]\n-#[allow_internal_unstable(const_fn_transmute)]\n+#[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n+#[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n     // SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.\n     // Also relies on `&str` and `&[u8]` having the same layout."}, {"sha": "ee9c09fe186c7491e9864bc4f70146c0610222ce", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -219,7 +219,8 @@ impl str {\n     #[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.32.0\")]\n     #[inline(always)]\n     #[allow(unused_attributes)]\n-    #[allow_internal_unstable(const_fn_transmute)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n     pub const fn as_bytes(&self) -> &[u8] {\n         // SAFETY: const sound because we transmute two types with the same layout\n         unsafe { mem::transmute(self) }"}, {"sha": "d3c0d9b784139c08974ba0c9e0cce3aa27f7257b", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -130,7 +130,8 @@ impl RawWakerVTable {\n     #[rustc_promotable]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\")]\n-    #[allow_internal_unstable(const_fn_fn_ptr_basics)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_fn_ptr_basics))]\n     pub const fn new(\n         clone: unsafe fn(*const ()) -> RawWaker,\n         wake: unsafe fn(*const ()),"}, {"sha": "dfe5df965cfacc043d518f9ddcaa509f7a5cfd5c", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -401,7 +401,8 @@ fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(\n }\n \n impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n-    #[allow_internal_unstable(const_fn)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n     pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {\n         extern \"C\" fn run(\n             bridge: Bridge<'_>,\n@@ -414,7 +415,8 @@ impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n }\n \n impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {\n-    #[allow_internal_unstable(const_fn)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n     pub const fn expand2(\n         f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n@@ -459,7 +461,8 @@ impl ProcMacro {\n         }\n     }\n \n-    #[allow_internal_unstable(const_fn)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n     pub const fn custom_derive(\n         trait_name: &'static str,\n         attributes: &'static [&'static str],\n@@ -468,15 +471,17 @@ impl ProcMacro {\n         ProcMacro::CustomDerive { trait_name, attributes, client: Client::expand1(expand) }\n     }\n \n-    #[allow_internal_unstable(const_fn)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n     pub const fn attr(\n         name: &'static str,\n         expand: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n         ProcMacro::Attr { name, client: Client::expand2(expand) }\n     }\n \n-    #[allow_internal_unstable(const_fn)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n     pub const fn bang(\n         name: &'static str,\n         expand: fn(crate::TokenStream) -> crate::TokenStream,"}, {"sha": "e7c32b10384d4afdcbafad435a220c92f6df50be", "filename": "library/proc_macro/src/bridge/scoped_cell.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -35,7 +35,8 @@ impl<'a, 'b, T: LambdaL> DerefMut for RefMutL<'a, 'b, T> {\n pub struct ScopedCell<T: LambdaL>(Cell<<T as ApplyL<'static>>::Out>);\n \n impl<T: LambdaL> ScopedCell<T> {\n-    #[allow_internal_unstable(const_fn)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n     pub const fn new(value: <T as ApplyL<'static>>::Out) -> Self {\n         ScopedCell(Cell::new(value))\n     }"}, {"sha": "5a4b69cf6fc1b294b2380ad70f630b813dec1682", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -18,6 +18,7 @@\n     test(no_crate_inject, attr(deny(warnings))),\n     test(attr(allow(dead_code, deprecated, unused_variables, unused_mut)))\n )]\n+#![cfg_attr(not(bootstrap), feature(rustc_allow_const_fn_unstable))]\n #![feature(nll)]\n #![feature(staged_api)]\n #![feature(const_fn)]"}, {"sha": "96a7755c688219d6a1a30c1448e21745e1273cbb", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -206,6 +206,7 @@\n #![needs_panic_runtime]\n // std may use features in a platform-specific way\n #![allow(unused_features)]\n+#![cfg_attr(not(bootstrap), feature(rustc_allow_const_fn_unstable))]\n #![cfg_attr(test, feature(print_internals, set_stdio, update_panic_count))]\n #![cfg_attr(\n     all(target_vendor = \"fortanix\", target_env = \"sgx\"),"}, {"sha": "bb3ece4c2739f239883ffe5402fa81d66baf3fe2", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -1043,7 +1043,8 @@ impl Ipv6Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n-    #[allow_internal_unstable(const_fn_transmute)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n     pub const fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16, g: u16, h: u16) -> Ipv6Addr {\n         let addr16 = [\n             a.to_be(),"}, {"sha": "98e113a663b53dfb45e965ee31ecc7641ffc76dd", "filename": "src/doc/rustc/src/targets/custom.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fcustom.md", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fcustom.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fcustom.md?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -14,4 +14,4 @@ To see it for a different target, add the `--target` flag:\n $ rustc +nightly -Z unstable-options --target=wasm32-unknown-unknown --print target-spec-json\n ```\n \n-To use a custom target, see [`xargo`](https://github.com/japaric/xargo).\n\\ No newline at end of file\n+To use a custom target, see the (unstable) [`build-std` feature](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std) of `cargo`."}, {"sha": "53ade85bfd2e7de6adf302a250744b365a5a7f4f", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_attrs, staged_api, allow_internal_unstable)]\n+#![feature(rustc_attrs, staged_api, rustc_allow_const_fn_unstable)]\n #![feature(const_fn_fn_ptr_basics)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -8,7 +8,7 @@ const fn error(_: fn()) {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n-#[allow_internal_unstable(const_fn_fn_ptr_basics)]\n+#[rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics)]\n const fn compiles(_: fn()) {}\n \n fn main() {}"}, {"sha": "6f89225719f842ba9f8277981ea3ae0781fe079b", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -8,9 +8,9 @@ help: if it is not part of the public API, make this function unstably const\n    |\n LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n    |\n-help: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n+help: otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n    |\n-LL | #[allow_internal_unstable(const_fn_fn_ptr_basics)]\n+LL | #[rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics)]\n    |\n \n error: aborting due to previous error"}, {"sha": "430e911aacdee7fb09785b067fd9e0fd906337f3", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -1,13 +1,13 @@\n // run-pass\n-#![feature(allow_internal_unstable)]\n+#![feature(rustc_allow_const_fn_unstable)]\n #![feature(const_fn_fn_ptr_basics)]\n \n #![feature(rustc_attrs, staged_api)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n-#[allow_internal_unstable(const_fn_fn_ptr_basics)]\n+#[rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics)]\n const fn takes_fn_ptr(_: fn()) {}\n \n const FN: fn() = || ();"}, {"sha": "d3017c5602a8c1ece32329c85158e957bdaad127", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -24,9 +24,9 @@ help: if it is not part of the public API, make this function unstably const\n    |\n LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n    |\n-help: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n+help: otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n    |\n-LL | #[allow_internal_unstable(const_fn_floating_point_arithmetic)]\n+LL | #[rustc_allow_const_fn_unstable(const_fn_floating_point_arithmetic)]\n    |\n \n error: `foo2_gated` is not yet stable as a const fn"}, {"sha": "53a59467e3d20bcb0e6deaa4f599b49d3b7ced2c", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -24,9 +24,9 @@ help: if it is not part of the public API, make this function unstably const\n    |\n LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n    |\n-help: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n+help: otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n    |\n-LL | #[allow_internal_unstable(const_fn_floating_point_arithmetic)]\n+LL | #[rustc_allow_const_fn_unstable(const_fn_floating_point_arithmetic)]\n    |\n \n error: `foo2_gated` is not yet stable as a const fn"}, {"sha": "8b13f1bf2788e60868d6498c516dd80b0e95813e", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unstable-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -2,6 +2,7 @@\n // this needs a different test since this is done after expansion\n \n #[allow_internal_unstable()] //~ ERROR allow_internal_unstable side-steps\n+//~| ERROR attribute should\n struct S;\n \n fn main() {}"}, {"sha": "df7773ba4fb65a7ccb23b9041244d52412d1c092", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unstable-struct.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.stderr?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -6,6 +6,15 @@ LL | #[allow_internal_unstable()]\n    |\n    = help: add `#![feature(allow_internal_unstable)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: attribute should be applied to a macro\n+  --> $DIR/feature-gate-allow-internal-unstable-struct.rs:4:1\n+   |\n+LL | #[allow_internal_unstable()]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | struct S;\n+   | --------- not a macro\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "19d8fa87f55365646623c3692e82e59b7e5762ed", "filename": "src/test/ui/feature-gates/feature-gate-rustc-allow-const-fn-unstable.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-allow-const-fn-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-allow-const-fn-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-allow-const-fn-unstable.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -0,0 +1,6 @@\n+#![allow(unused_macros)]\n+\n+#[rustc_allow_const_fn_unstable()] //~ ERROR rustc_allow_const_fn_unstable side-steps\n+const fn foo() { }\n+\n+fn main() {}"}, {"sha": "a549cb64e0cb63bf9c444e7e4b7689da92a35dd1", "filename": "src/test/ui/feature-gates/feature-gate-rustc-allow-const-fn-unstable.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-allow-const-fn-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-allow-const-fn-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-allow-const-fn-unstable.stderr?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: rustc_allow_const_fn_unstable side-steps feature gating and stability checks\n+  --> $DIR/feature-gate-rustc-allow-const-fn-unstable.rs:3:1\n+   |\n+LL | #[rustc_allow_const_fn_unstable()]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69399 <https://github.com/rust-lang/rust/issues/69399> for more information\n+   = help: add `#![feature(rustc_allow_const_fn_unstable)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "5f6764c789d0061a2abcba89bd19c247d1c94dfe", "filename": "src/test/ui/lint/reasons-forbidden.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -5,6 +5,9 @@\n     //~^ NOTE `forbid` level set here\n     //~| NOTE `forbid` level set here\n     //~| NOTE `forbid` level set here\n+    //~| NOTE `forbid` level set here\n+    //~| NOTE `forbid` level set here\n+    //~| NOTE `forbid` level set here\n     reason = \"our errors & omissions insurance policy doesn't cover unsafe Rust\"\n )]\n \n@@ -17,9 +20,18 @@ fn main() {\n     //~^ ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n     //~| ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n     //~| ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+    //~| ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+    //~| ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+    //~| ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n     //~| NOTE overruled by previous forbid\n     //~| NOTE overruled by previous forbid\n     //~| NOTE overruled by previous forbid\n+    //~| NOTE overruled by previous forbid\n+    //~| NOTE overruled by previous forbid\n+    //~| NOTE overruled by previous forbid\n+    //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust\n+    //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust\n+    //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust\n     //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust\n     //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust\n     //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust"}, {"sha": "eed9c8d566ecda7f373333627687302df1db0066", "filename": "src/test/ui/lint/reasons-forbidden.stderr", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.stderr?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -1,5 +1,5 @@\n error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n-  --> $DIR/reasons-forbidden.rs:16:13\n+  --> $DIR/reasons-forbidden.rs:19:13\n    |\n LL |     unsafe_code,\n    |     ----------- `forbid` level set here\n@@ -10,7 +10,7 @@ LL |     #[allow(unsafe_code)]\n    = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n \n error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n-  --> $DIR/reasons-forbidden.rs:16:13\n+  --> $DIR/reasons-forbidden.rs:19:13\n    |\n LL |     unsafe_code,\n    |     ----------- `forbid` level set here\n@@ -21,7 +21,7 @@ LL |     #[allow(unsafe_code)]\n    = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n \n error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n-  --> $DIR/reasons-forbidden.rs:16:13\n+  --> $DIR/reasons-forbidden.rs:19:13\n    |\n LL |     unsafe_code,\n    |     ----------- `forbid` level set here\n@@ -31,6 +31,39 @@ LL |     #[allow(unsafe_code)]\n    |\n    = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n \n-error: aborting due to 3 previous errors\n+error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+  --> $DIR/reasons-forbidden.rs:19:13\n+   |\n+LL |     unsafe_code,\n+   |     ----------- `forbid` level set here\n+...\n+LL |     #[allow(unsafe_code)]\n+   |             ^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n+\n+error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+  --> $DIR/reasons-forbidden.rs:19:13\n+   |\n+LL |     unsafe_code,\n+   |     ----------- `forbid` level set here\n+...\n+LL |     #[allow(unsafe_code)]\n+   |             ^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n+\n+error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+  --> $DIR/reasons-forbidden.rs:19:13\n+   |\n+LL |     unsafe_code,\n+   |     ----------- `forbid` level set here\n+...\n+LL |     #[allow(unsafe_code)]\n+   |             ^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0453`."}, {"sha": "1e1a6126a10cf23890d3091c6bfb6b8084dc7780", "filename": "src/test/ui/macros/auxiliary/issue-75982.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fissue-75982.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fissue-75982.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fissue-75982.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -0,0 +1,12 @@\n+const _: () = {\n+    #[macro_export]\n+    macro_rules! first_macro {\n+        () => {}\n+    }\n+    mod foo {\n+        #[macro_export]\n+        macro_rules! second_macro {\n+            () => {}\n+        }\n+    }\n+};"}, {"sha": "e76b09d4bb94712b75873068931247463c59745b", "filename": "src/test/ui/macros/issue-75982-foreign-macro-weird-mod.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Fmacros%2Fissue-75982-foreign-macro-weird-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftest%2Fui%2Fmacros%2Fissue-75982-foreign-macro-weird-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-75982-foreign-macro-weird-mod.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -0,0 +1,13 @@\n+// aux-build:issue-75982.rs\n+// check-pass\n+\n+// Regression test for issue #75982\n+// Tests that don't ICE when invoking a foreign macro\n+// that occurs inside a module with a weird parent.\n+\n+extern crate issue_75982;\n+\n+fn main() {\n+    issue_75982::first_macro!();\n+    issue_75982::second_macro!();\n+}"}, {"sha": "7250de3a41c0430c71579b057e4e97314e9a583b", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -130,7 +130,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if !has_attr(cx.sess(), stmt.kind.attrs()) {\n+        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id.id))) {\n             return;\n         }\n         prelude();"}, {"sha": "4fbfb3be32cbff9e821171c9d3d9112a977fdd3b", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f392479de6b003e72f93cb8f9955b3cf4135c2cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=f392479de6b003e72f93cb8f9955b3cf4135c2cd", "patch": "@@ -109,7 +109,7 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if !has_attr(cx.sess(), stmt.kind.attrs()) {\n+        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id.id))) {\n             return;\n         }\n         match stmt.kind {"}]}