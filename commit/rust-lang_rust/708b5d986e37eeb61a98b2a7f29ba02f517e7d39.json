{"sha": "708b5d986e37eeb61a98b2a7f29ba02f517e7d39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOGI1ZDk4NmUzN2VlYjYxYTk4YjJhN2YyOWJhMDJmNTE3ZTdkMzk=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-06-10T15:30:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-29T22:41:55Z"}, "message": "core: str::as_slice is unneeded, yay! fixes std::net::tcp socket_buf test\n\ni mistook an \"unconstrained type\" error, due to type-inference messup\nbecause i didnt have return vals in some closure wired-up right, for being\ndue to not having a str as a str/& (a str will actually auto-coerce to a\nstr/&, so str::as_slice was erroneously added. my bad).", "tree": {"sha": "c13450db18b257d7339d152263aa2116d7b3f569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c13450db18b257d7339d152263aa2116d7b3f569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/708b5d986e37eeb61a98b2a7f29ba02f517e7d39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/708b5d986e37eeb61a98b2a7f29ba02f517e7d39", "html_url": "https://github.com/rust-lang/rust/commit/708b5d986e37eeb61a98b2a7f29ba02f517e7d39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/708b5d986e37eeb61a98b2a7f29ba02f517e7d39/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "942d3b527e1a8d9ed2ee976e82d1242bbe7ff78e", "url": "https://api.github.com/repos/rust-lang/rust/commits/942d3b527e1a8d9ed2ee976e82d1242bbe7ff78e", "html_url": "https://github.com/rust-lang/rust/commit/942d3b527e1a8d9ed2ee976e82d1242bbe7ff78e"}], "stats": {"total": 23, "additions": 5, "deletions": 18}, "files": [{"sha": "35d2edd608ae55597fa1b3dba61b0730169884d9", "filename": "src/libcore/str.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/708b5d986e37eeb61a98b2a7f29ba02f517e7d39/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708b5d986e37eeb61a98b2a7f29ba02f517e7d39/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=708b5d986e37eeb61a98b2a7f29ba02f517e7d39", "patch": "@@ -23,7 +23,6 @@ export\n    as_buf,\n    as_c_str,\n    unpack_slice,\n-   as_slice,\n \n    // Adding things to and removing things from a string\n    push_char,\n@@ -1621,16 +1620,6 @@ pure fn unpack_slice<T>(s: str/&, f: fn(*u8, uint) -> T) -> T {\n     }\n }\n \n-pure fn as_slice<T>(s: str,\n-                    start: uint, end: uint,\n-                    f: fn(str/&) -> T) -> T unsafe {\n-    assert (start <= end);\n-    assert (end <= len(s));\n-    let p = ptr::addr_of(s);\n-    f(::unsafe::reinterpret_cast(\n-        (ptr::offset(p, start), (end - start) * sys::size_of::<u8>())))\n-}\n-\n #[doc = \"\n Reserves capacity for exactly `n` bytes in the given string, not including\n the null terminator."}, {"sha": "6718e3729f74a270ea901e601851b207812e98e2", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/708b5d986e37eeb61a98b2a7f29ba02f517e7d39/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/708b5d986e37eeb61a98b2a7f29ba02f517e7d39/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=708b5d986e37eeb61a98b2a7f29ba02f517e7d39", "patch": "@@ -1456,7 +1456,7 @@ mod test {\n             buf_read(sock_buf as io::reader,\n                      vec::len(resp_buf))\n         };\n-        \n+\n         let actual_req = comm::recv(server_result_po);\n         log(debug, #fmt(\"REQ: expected: '%s' actual: '%s'\",\n                        expected_req, actual_req));\n@@ -1468,12 +1468,10 @@ mod test {\n \n     fn buf_write(+w: io::writer, val: str) {\n         log(debug, #fmt(\"BUF_WRITE: val len %?\", str::len(val)));\n-        str::as_slice(val, 0u, str::len(val) -1u) {|val_slice|\n-            str::byte_slice(val_slice) {|b_slice|\n-                log(debug, #fmt(\"BUF_WRITE: b_slice len %?\",\n-                                vec::len(b_slice)));\n-                w.write(b_slice)\n-            }\n+        str::byte_slice(val) {|b_slice|\n+            log(debug, #fmt(\"BUF_WRITE: b_slice len %?\",\n+                            vec::len(b_slice)));\n+            w.write(b_slice)\n         }\n     }\n "}]}