{"sha": "f1f721e64014863f41c1a386b04af04c2de25321", "node_id": "C_kwDOAAsO6NoAKGYxZjcyMWU2NDAxNDg2M2Y0MWMxYTM4NmIwNGFmMDRjMmRlMjUzMjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-13T20:26:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-13T20:26:04Z"}, "message": "Auto merge of #97013 - matthiaskrgr:rollup-c1pc6pc, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #96154 (Expand core::hint::unreachable_unchecked() docs)\n - #96615 (Add a regression test for #54779)\n - #96982 (fix clippy expect_fun_call)\n - #97003 (Remove some unnecessary `rustc_allow_const_fn_unstable` attributes.)\n - #97011 (Add regression test for #28935)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2cebc9438cb68e6435c51f9b4c61f675047f853f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cebc9438cb68e6435c51f9b4c61f675047f853f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1f721e64014863f41c1a386b04af04c2de25321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f721e64014863f41c1a386b04af04c2de25321", "html_url": "https://github.com/rust-lang/rust/commit/f1f721e64014863f41c1a386b04af04c2de25321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1f721e64014863f41c1a386b04af04c2de25321/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad4bde042cfaf56f7579160c60ebd8550a720ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad4bde042cfaf56f7579160c60ebd8550a720ab", "html_url": "https://github.com/rust-lang/rust/commit/9ad4bde042cfaf56f7579160c60ebd8550a720ab"}, {"sha": "cc357bd0005bc27b60802c66d50f5c993b2ce25d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc357bd0005bc27b60802c66d50f5c993b2ce25d", "html_url": "https://github.com/rust-lang/rust/commit/cc357bd0005bc27b60802c66d50f5c993b2ce25d"}], "stats": {"total": 166, "additions": 140, "deletions": 26}, "files": [{"sha": "f57f25c19f90fb7c4c5291ea6082ff7c74eeb655", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1f721e64014863f41c1a386b04af04c2de25321/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f721e64014863f41c1a386b04af04c2de25321/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=f1f721e64014863f41c1a386b04af04c2de25321", "patch": "@@ -58,7 +58,9 @@ fn slice_branches<'tcx>(\n     ecx: &CompileTimeEvalContext<'tcx, 'tcx>,\n     place: &MPlaceTy<'tcx>,\n ) -> Option<ty::ValTree<'tcx>> {\n-    let n = place.len(&ecx.tcx.tcx).expect(&format!(\"expected to use len of place {:?}\", place));\n+    let n = place\n+        .len(&ecx.tcx.tcx)\n+        .unwrap_or_else(|_| panic!(\"expected to use len of place {:?}\", place));\n     let branches = (0..n).map(|i| {\n         let place_elem = ecx.mplace_index(place, i).unwrap();\n         const_to_valtree_inner(ecx, &place_elem)"}, {"sha": "4be5f6cf9ca514773cf8857dce2058e43c46b5fd", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1f721e64014863f41c1a386b04af04c2de25321/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f721e64014863f41c1a386b04af04c2de25321/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=f1f721e64014863f41c1a386b04af04c2de25321", "patch": "@@ -118,7 +118,6 @@ impl<T, A: Allocator> RawVec<T, A> {\n \n     /// Like `new`, but parameterized over the choice of allocator for\n     /// the returned `RawVec`.\n-    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn new_in(alloc: A) -> Self {\n         // `cap: 0` means \"unallocated\". zero-sized types are ignored.\n         Self { ptr: Unique::dangling(), cap: 0, alloc }"}, {"sha": "7ae1bfd4f351a1331d8fd14ddadaa2cefcd12ec9", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 66, "deletions": 15, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f1f721e64014863f41c1a386b04af04c2de25321/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f721e64014863f41c1a386b04af04c2de25321/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=f1f721e64014863f41c1a386b04af04c2de25321", "patch": "@@ -5,27 +5,78 @@\n \n use crate::intrinsics;\n \n-/// Informs the compiler that this point in the code is not reachable, enabling\n-/// further optimizations.\n+/// Informs the compiler that the site which is calling this function is not\n+/// reachable, possibly enabling further optimizations.\n ///\n /// # Safety\n ///\n-/// Reaching this function is completely *undefined behavior* (UB). In\n-/// particular, the compiler assumes that all UB must never happen, and\n-/// therefore will eliminate all branches that reach to a call to\n-/// `unreachable_unchecked()`.\n+/// Reaching this function is *Undefined Behavior*.\n ///\n-/// Like all instances of UB, if this assumption turns out to be wrong, i.e., the\n-/// `unreachable_unchecked()` call is actually reachable among all possible\n-/// control flow, the compiler will apply the wrong optimization strategy, and\n-/// may sometimes even corrupt seemingly unrelated code, causing\n-/// difficult-to-debug problems.\n+/// As the compiler assumes that all forms of Undefined Behavior can never\n+/// happen, it will eliminate all branches in the surrounding code that it can\n+/// determine will invariably lead to a call to `unreachable_unchecked()`.\n ///\n-/// Use this function only when you can prove that the code will never call it.\n-/// Otherwise, consider using the [`unreachable!`] macro, which does not allow\n-/// optimizations but will panic when executed.\n+/// If the assumptions embedded in using this function turn out to be wrong -\n+/// that is, if the site which is calling `unreachable_unchecked()` is actually\n+/// reachable at runtime - the compiler may have generated nonsensical machine\n+/// instructions for this situation, including in seemingly unrelated code,\n+/// causing difficult-to-debug problems.\n ///\n-/// # Example\n+/// Use this function sparingly. Consider using the [`unreachable!`] macro,\n+/// which may prevent some optimizations but will safely panic in case it is\n+/// actually reached at runtime. Benchmark your code to find out if using\n+/// `unreachable_unchecked()` comes with a performance benefit.\n+///\n+/// # Examples\n+///\n+/// `unreachable_unchecked()` can be used in situations where the compiler\n+/// can't prove invariants that were previously established. Such situations\n+/// have a higher chance of occuring if those invariants are upheld by\n+/// external code that the compiler can't analyze.\n+/// ```\n+/// fn prepare_inputs(divisors: &mut Vec<u32>) {\n+///     // Note to future-self when making changes: The invariant established\n+///     // here is NOT checked in `do_computation()`; if this changes, you HAVE\n+///     // to change `do_computation()`.\n+///     divisors.retain(|divisor| *divisor != 0)\n+/// }\n+///\n+/// /// # Safety\n+/// /// All elements of `divisor` must be non-zero.\n+/// unsafe fn do_computation(i: u32, divisors: &[u32]) -> u32 {\n+///     divisors.iter().fold(i, |acc, divisor| {\n+///         // Convince the compiler that a division by zero can't happen here\n+///         // and a check is not needed below.\n+///         if *divisor == 0 {\n+///             // Safety: `divisor` can't be zero because of `prepare_inputs`,\n+///             // but the compiler does not know about this. We *promise*\n+///             // that we always call `prepare_inputs`.\n+///             std::hint::unreachable_unchecked()\n+///         }\n+///         // The compiler would normally introduce a check here that prevents\n+///         // a division by zero. However, if `divisor` was zero, the branch\n+///         // above would reach what we explicitly marked as unreachable.\n+///         // The compiler concludes that `divisor` can't be zero at this point\n+///         // and removes the - now proven useless - check.\n+///         acc / divisor\n+///     })\n+/// }\n+///\n+/// let mut divisors = vec![2, 0, 4];\n+/// prepare_inputs(&mut divisors);\n+/// let result = unsafe {\n+///     // Safety: prepare_inputs() guarantees that divisors is non-zero\n+///     do_computation(100, &divisors)\n+/// };\n+/// assert_eq!(result, 12);\n+///\n+/// ```\n+///\n+/// While using `unreachable_unchecked()` is perfectly sound in the following\n+/// example, the compiler is able to prove that a division by zero is not\n+/// possible. Benchmarking reveals that `unreachable_unchecked()` provides\n+/// no benefit over using [`unreachable!`], while the latter does not introduce\n+/// the possibility of Undefined Behavior.\n ///\n /// ```\n /// fn div_1(a: u32, b: u32) -> u32 {"}, {"sha": "70969edd6eaf7019ad371f50336ef1a0a0a1a38d", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1f721e64014863f41c1a386b04af04c2de25321/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f721e64014863f41c1a386b04af04c2de25321/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=f1f721e64014863f41c1a386b04af04c2de25321", "patch": "@@ -52,7 +52,6 @@ macro_rules! nonzero_integers {\n                 #[$const_new_unchecked_stability]\n                 #[must_use]\n                 #[inline]\n-                #[rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics)] // required by assert_unsafe_precondition\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n                     // SAFETY: this is guaranteed to be safe by the caller.\n                     unsafe {"}, {"sha": "d0746698f40131940c281155cfafd0daa7de16f1", "filename": "library/core/src/option.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1f721e64014863f41c1a386b04af04c2de25321/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f721e64014863f41c1a386b04af04c2de25321/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=f1f721e64014863f41c1a386b04af04c2de25321", "patch": "@@ -1486,7 +1486,6 @@ impl<T> Option<T> {\n     where\n         T: ~const Default,\n     {\n-        #[rustc_allow_const_fn_unstable(const_fn_trait_bound)]\n         const fn default<T: ~const Default>() -> T {\n             T::default()\n         }"}, {"sha": "413fe7e6cc40f7303f48673b1f083ae0b7c3a1d5", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1f721e64014863f41c1a386b04af04c2de25321/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f721e64014863f41c1a386b04af04c2de25321/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=f1f721e64014863f41c1a386b04af04c2de25321", "patch": "@@ -147,7 +147,6 @@ impl RawWakerVTable {\n     #[rustc_promotable]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\")]\n-    #[rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics)]\n     pub const fn new(\n         clone: unsafe fn(*const ()) -> RawWaker,\n         wake: unsafe fn(*const ()),"}, {"sha": "cdb2bac2607572c8ffce7f7d1e5d254b9eb89b84", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1f721e64014863f41c1a386b04af04c2de25321/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f721e64014863f41c1a386b04af04c2de25321/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=f1f721e64014863f41c1a386b04af04c2de25321", "patch": "@@ -416,7 +416,6 @@ fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(\n }\n \n impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n-    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {\n         extern \"C\" fn run(\n             bridge: Bridge<'_>,\n@@ -429,7 +428,6 @@ impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n }\n \n impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {\n-    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn expand2(\n         f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n@@ -474,7 +472,6 @@ impl ProcMacro {\n         }\n     }\n \n-    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn custom_derive(\n         trait_name: &'static str,\n         attributes: &'static [&'static str],\n@@ -483,15 +480,13 @@ impl ProcMacro {\n         ProcMacro::CustomDerive { trait_name, attributes, client: Client::expand1(expand) }\n     }\n \n-    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn attr(\n         name: &'static str,\n         expand: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n         ProcMacro::Attr { name, client: Client::expand2(expand) }\n     }\n \n-    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn bang(\n         name: &'static str,\n         expand: fn(crate::TokenStream) -> crate::TokenStream,"}, {"sha": "2cde1f65adf9c484ab0aee45fe6c978fda30cbb9", "filename": "library/proc_macro/src/bridge/scoped_cell.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1f721e64014863f41c1a386b04af04c2de25321/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f721e64014863f41c1a386b04af04c2de25321/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs?ref=f1f721e64014863f41c1a386b04af04c2de25321", "patch": "@@ -35,7 +35,6 @@ impl<'a, 'b, T: LambdaL> DerefMut for RefMutL<'a, 'b, T> {\n pub struct ScopedCell<T: LambdaL>(Cell<<T as ApplyL<'static>>::Out>);\n \n impl<T: LambdaL> ScopedCell<T> {\n-    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn new(value: <T as ApplyL<'static>>::Out) -> Self {\n         ScopedCell(Cell::new(value))\n     }"}, {"sha": "872822dbd0f661b70681bde8902afa74c1ef2bff", "filename": "src/test/ui/inference/issue-28935.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f1f721e64014863f41c1a386b04af04c2de25321/src%2Ftest%2Fui%2Finference%2Fissue-28935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f721e64014863f41c1a386b04af04c2de25321/src%2Ftest%2Fui%2Finference%2Fissue-28935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-28935.rs?ref=f1f721e64014863f41c1a386b04af04c2de25321", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+use std::cell::RefCell;\n+\n+pub fn f(v: Vec<RefCell<u8>>) {\n+    let _t = &mut *v[0].borrow_mut();\n+}\n+\n+fn main() {}"}, {"sha": "4bb983dd3581d9fe025c1596cd94292597a0f0cc", "filename": "src/test/ui/nll/issue-54779-anon-static-lifetime.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f1f721e64014863f41c1a386b04af04c2de25321/src%2Ftest%2Fui%2Fnll%2Fissue-54779-anon-static-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f721e64014863f41c1a386b04af04c2de25321/src%2Ftest%2Fui%2Fnll%2Fissue-54779-anon-static-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54779-anon-static-lifetime.rs?ref=f1f721e64014863f41c1a386b04af04c2de25321", "patch": "@@ -0,0 +1,51 @@\n+// Regression test for #54779, checks if the diagnostics are confusing.\n+\n+#![feature(nll)]\n+\n+trait DebugWith<Cx: ?Sized> {\n+    fn debug_with<'me>(&'me self, cx: &'me Cx) -> DebugCxPair<'me, Self, Cx> {\n+        DebugCxPair { value: self, cx }\n+    }\n+\n+    fn fmt_with(&self, cx: &Cx, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result;\n+}\n+\n+struct DebugCxPair<'me, Value: ?Sized, Cx: ?Sized>\n+where\n+    Value: DebugWith<Cx>,\n+{\n+    value: &'me Value,\n+    cx: &'me Cx,\n+}\n+\n+trait DebugContext {}\n+\n+struct Foo {\n+    bar: Bar,\n+}\n+\n+impl DebugWith<dyn DebugContext> for Foo {\n+    fn fmt_with(\n+        &self,\n+        cx: &dyn DebugContext,\n+        fmt: &mut std::fmt::Formatter<'_>,\n+    ) -> std::fmt::Result {\n+        let Foo { bar } = self;\n+        bar.debug_with(cx); //~ ERROR: lifetime may not live long enough\n+        Ok(())\n+    }\n+}\n+\n+struct Bar {}\n+\n+impl DebugWith<dyn DebugContext> for Bar {\n+    fn fmt_with(\n+        &self,\n+        cx: &dyn DebugContext,\n+        fmt: &mut std::fmt::Formatter<'_>,\n+    ) -> std::fmt::Result {\n+        Ok(())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9dc9bdbab8d095225b06cb5ddd28aac32385620f", "filename": "src/test/ui/nll/issue-54779-anon-static-lifetime.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f1f721e64014863f41c1a386b04af04c2de25321/src%2Ftest%2Fui%2Fnll%2Fissue-54779-anon-static-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1f721e64014863f41c1a386b04af04c2de25321/src%2Ftest%2Fui%2Fnll%2Fissue-54779-anon-static-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54779-anon-static-lifetime.stderr?ref=f1f721e64014863f41c1a386b04af04c2de25321", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-54779-anon-static-lifetime.rs:34:24\n+   |\n+LL |         cx: &dyn DebugContext,\n+   |             - let's call the lifetime of this reference `'1`\n+...\n+LL |         bar.debug_with(cx);\n+   |                        ^^ cast requires that `'1` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}]}