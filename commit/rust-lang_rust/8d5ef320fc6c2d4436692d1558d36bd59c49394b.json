{"sha": "8d5ef320fc6c2d4436692d1558d36bd59c49394b", "node_id": "C_kwDOAAsO6NoAKDhkNWVmMzIwZmM2YzJkNDQzNjY5MmQxNTU4ZDM2YmQ1OWM0OTM5NGI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-11-09T13:45:05Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-11-10T10:13:52Z"}, "message": "Remove potential useless data for search index", "tree": {"sha": "7d1ea726d3c33f8e2d8e94eea567c2024e0a84ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d1ea726d3c33f8e2d8e94eea567c2024e0a84ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d5ef320fc6c2d4436692d1558d36bd59c49394b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5ef320fc6c2d4436692d1558d36bd59c49394b", "html_url": "https://github.com/rust-lang/rust/commit/8d5ef320fc6c2d4436692d1558d36bd59c49394b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d5ef320fc6c2d4436692d1558d36bd59c49394b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "495322d776fd6f679cd8cd4ca02b8fa834da654b", "url": "https://api.github.com/repos/rust-lang/rust/commits/495322d776fd6f679cd8cd4ca02b8fa834da654b", "html_url": "https://github.com/rust-lang/rust/commit/495322d776fd6f679cd8cd4ca02b8fa834da654b"}], "stats": {"total": 85, "additions": 46, "deletions": 39}, "files": [{"sha": "79421c128bcf8eea5056cfc4f4dce4c09201a988", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 46, "deletions": 39, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/8d5ef320fc6c2d4436692d1558d36bd59c49394b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5ef320fc6c2d4436692d1558d36bd59c49394b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=8d5ef320fc6c2d4436692d1558d36bd59c49394b", "patch": "@@ -258,45 +258,52 @@ crate fn get_real_types<'tcx>(\n     ) {\n         let is_full_generic = ty.is_full_generic();\n \n-        if is_full_generic && generics.len() == 1 {\n-            // In this case, no need to go through an intermediate state if the generics\n-            // contains only one element.\n-            //\n-            // For example:\n-            //\n-            // fn foo<T: Display>(r: Option<T>) {}\n-            //\n-            // In this case, it would contain:\n-            //\n-            // ```\n-            // [{\n-            //     name: \"option\",\n-            //     generics: [{\n-            //         name: \"\",\n-            //         generics: [\n-            //             name: \"Display\",\n-            //             generics: []\n-            //         }]\n-            //     }]\n-            // }]\n-            // ```\n-            //\n-            // After removing the intermediate (unnecessary) full generic, it'll become:\n-            //\n-            // ```\n-            // [{\n-            //     name: \"option\",\n-            //     generics: [{\n-            //         name: \"Display\",\n-            //         generics: []\n-            //     }]\n-            // }]\n-            // ```\n-            //\n-            // To be noted that it can work if there is ONLY ONE generic, otherwise we still\n-            // need to keep it as is!\n-            res.push(generics.pop().unwrap());\n-            return;\n+        if is_full_generic {\n+            if generics.is_empty() {\n+                // This is a type parameter with no trait bounds (for example: `T` in\n+                // `fn f<T>(p: T)`, so not useful for the rustdoc search because we would end up\n+                // with an empty type with an empty name. Let's just discard it.\n+                return;\n+            } else if generics.len() == 1 {\n+                // In this case, no need to go through an intermediate state if the type parameter\n+                // contains only one trait bound.\n+                //\n+                // For example:\n+                //\n+                // `fn foo<T: Display>(r: Option<T>) {}`\n+                //\n+                // In this case, it would contain:\n+                //\n+                // ```\n+                // [{\n+                //     name: \"option\",\n+                //     generics: [{\n+                //         name: \"\",\n+                //         generics: [\n+                //             name: \"Display\",\n+                //             generics: []\n+                //         }]\n+                //     }]\n+                // }]\n+                // ```\n+                //\n+                // After removing the intermediate (unnecessary) type parameter, it'll become:\n+                //\n+                // ```\n+                // [{\n+                //     name: \"option\",\n+                //     generics: [{\n+                //         name: \"Display\",\n+                //         generics: []\n+                //     }]\n+                // }]\n+                // ```\n+                //\n+                // To be noted that it can work if there is ONLY ONE trait bound, otherwise we still\n+                // need to keep it as is!\n+                res.push(generics.pop().unwrap());\n+                return;\n+            }\n         }\n         let mut index_ty = get_index_type(&ty, generics);\n         if index_ty.name.as_ref().map(|s| s.is_empty()).unwrap_or(true) {"}]}