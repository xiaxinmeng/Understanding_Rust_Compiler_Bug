{"sha": "bbc22e2ef3081b757d089737e5752b9e413d27ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYzIyZTJlZjMwODFiNzU3ZDA4OTczN2U1NzUyYjllNDEzZDI3YmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-21T13:58:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-21T13:58:53Z"}, "message": "Auto merge of #7083 - GuillaumeGomez:bool-assert-eq, r=camsteffen\n\nAdd lint to check for boolean comparison in assert macro calls\n\nThis PR adds a lint to check if an assert macro is using a boolean as \"comparison value\". For example:\n\n```rust\nassert_eq!(\"a\".is_empty(), false);\n```\n\nCould be rewritten as:\n\n```rust\nassert!(!\"a\".is_empty());\n```\n\nPS: The dev guidelines are amazing. Thanks a lot for writing them!\n\nchangelog: Add `bool_assert_comparison` lint", "tree": {"sha": "9b838d685a6435f945a44f692f965ca45a971a01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b838d685a6435f945a44f692f965ca45a971a01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbc22e2ef3081b757d089737e5752b9e413d27ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc22e2ef3081b757d089737e5752b9e413d27ba", "html_url": "https://github.com/rust-lang/rust/commit/bbc22e2ef3081b757d089737e5752b9e413d27ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbc22e2ef3081b757d089737e5752b9e413d27ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "926286acfeeec25a423d550083c4e2dacb027e51", "url": "https://api.github.com/repos/rust-lang/rust/commits/926286acfeeec25a423d550083c4e2dacb027e51", "html_url": "https://github.com/rust-lang/rust/commit/926286acfeeec25a423d550083c4e2dacb027e51"}, {"sha": "e2e104b993277a8096299a2d2eb99d4641f1e318", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e104b993277a8096299a2d2eb99d4641f1e318", "html_url": "https://github.com/rust-lang/rust/commit/e2e104b993277a8096299a2d2eb99d4641f1e318"}], "stats": {"total": 284, "additions": 284, "deletions": 0}, "files": [{"sha": "fc60432369d1edcad4008df8f594243d143c950b", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbc22e2ef3081b757d089737e5752b9e413d27ba/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/bbc22e2ef3081b757d089737e5752b9e413d27ba/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=bbc22e2ef3081b757d089737e5752b9e413d27ba", "patch": "@@ -2124,6 +2124,7 @@ Released 2018-09-13\n [`blacklisted_name`]: https://rust-lang.github.io/rust-clippy/master/index.html#blacklisted_name\n [`blanket_clippy_restriction_lints`]: https://rust-lang.github.io/rust-clippy/master/index.html#blanket_clippy_restriction_lints\n [`blocks_in_if_conditions`]: https://rust-lang.github.io/rust-clippy/master/index.html#blocks_in_if_conditions\n+[`bool_assert_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_assert_comparison\n [`bool_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_comparison\n [`borrow_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const\n [`borrowed_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box"}, {"sha": "bee706ed402156423b62f63fe4853ddfc685acb1", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/bbc22e2ef3081b757d089737e5752b9e413d27ba/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc22e2ef3081b757d089737e5752b9e413d27ba/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=bbc22e2ef3081b757d089737e5752b9e413d27ba", "patch": "@@ -0,0 +1,75 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::{ast_utils, is_direct_expn_of};\n+use rustc_ast::ast::{Expr, ExprKind, Lit, LitKind};\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** This lint warns about boolean comparisons in assert-like macros.\n+    ///\n+    /// **Why is this bad?** It is shorter to use the equivalent.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // Bad\n+    /// assert_eq!(\"a\".is_empty(), false);\n+    /// assert_ne!(\"a\".is_empty(), true);\n+    ///\n+    /// // Good\n+    /// assert!(!\"a\".is_empty());\n+    /// ```\n+    pub BOOL_ASSERT_COMPARISON,\n+    style,\n+    \"Using a boolean as comparison value in an assert_* macro when there is no need\"\n+}\n+\n+declare_lint_pass!(BoolAssertComparison => [BOOL_ASSERT_COMPARISON]);\n+\n+fn is_bool_lit(e: &Expr) -> bool {\n+    matches!(\n+        e.kind,\n+        ExprKind::Lit(Lit {\n+            kind: LitKind::Bool(_),\n+            ..\n+        })\n+    ) && !e.span.from_expansion()\n+}\n+\n+impl EarlyLintPass for BoolAssertComparison {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &Expr) {\n+        let macros = [\"assert_eq\", \"debug_assert_eq\"];\n+        let inverted_macros = [\"assert_ne\", \"debug_assert_ne\"];\n+\n+        for mac in macros.iter().chain(inverted_macros.iter()) {\n+            if let Some(span) = is_direct_expn_of(e.span, mac) {\n+                if let Some([a, b]) = ast_utils::extract_assert_macro_args(e) {\n+                    let nb_bool_args = is_bool_lit(a) as usize + is_bool_lit(b) as usize;\n+\n+                    if nb_bool_args != 1 {\n+                        // If there are two boolean arguments, we definitely don't understand\n+                        // what's going on, so better leave things as is...\n+                        //\n+                        // Or there is simply no boolean and then we can leave things as is!\n+                        return;\n+                    }\n+\n+                    let non_eq_mac = &mac[..mac.len() - 3];\n+                    span_lint_and_sugg(\n+                        cx,\n+                        BOOL_ASSERT_COMPARISON,\n+                        span,\n+                        &format!(\"used `{}!` with a literal bool\", mac),\n+                        \"replace it with\",\n+                        format!(\"{}!(..)\", non_eq_mac),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    return;\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "b18001d0f26758c5a44c55b910028c50ea1af241", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbc22e2ef3081b757d089737e5752b9e413d27ba/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc22e2ef3081b757d089737e5752b9e413d27ba/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=bbc22e2ef3081b757d089737e5752b9e413d27ba", "patch": "@@ -178,6 +178,7 @@ mod await_holding_invalid;\n mod bit_mask;\n mod blacklisted_name;\n mod blocks_in_if_conditions;\n+mod bool_assert_comparison;\n mod booleans;\n mod bytecount;\n mod cargo_common_metadata;\n@@ -568,6 +569,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         bit_mask::VERBOSE_BIT_MASK,\n         blacklisted_name::BLACKLISTED_NAME,\n         blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS,\n+        bool_assert_comparison::BOOL_ASSERT_COMPARISON,\n         booleans::LOGIC_BUG,\n         booleans::NONMINIMAL_BOOL,\n         bytecount::NAIVE_BYTECOUNT,\n@@ -1273,6 +1275,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box from_str_radix_10::FromStrRadix10);\n     store.register_late_pass(|| box manual_map::ManualMap);\n     store.register_late_pass(move || box if_then_some_else_none::IfThenSomeElseNone::new(msrv));\n+    store.register_early_pass(|| box bool_assert_comparison::BoolAssertComparison);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(arithmetic::FLOAT_ARITHMETIC),\n@@ -1453,6 +1456,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(bit_mask::INEFFECTIVE_BIT_MASK),\n         LintId::of(blacklisted_name::BLACKLISTED_NAME),\n         LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n+        LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n         LintId::of(booleans::LOGIC_BUG),\n         LintId::of(booleans::NONMINIMAL_BOOL),\n         LintId::of(casts::CAST_REF_TO_MUT),\n@@ -1739,6 +1743,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n         LintId::of(blacklisted_name::BLACKLISTED_NAME),\n         LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n+        LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n         LintId::of(casts::FN_TO_NUMERIC_CAST),\n         LintId::of(casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n         LintId::of(collapsible_if::COLLAPSIBLE_ELSE_IF),"}, {"sha": "93e10c836cc7ffbb785f963694246c26f24313fe", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bbc22e2ef3081b757d089737e5752b9e413d27ba/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc22e2ef3081b757d089737e5752b9e413d27ba/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=bbc22e2ef3081b757d089737e5752b9e413d27ba", "patch": "@@ -5,6 +5,7 @@\n #![allow(clippy::similar_names, clippy::wildcard_imports, clippy::enum_glob_use)]\n \n use crate::{both, over};\n+use if_chain::if_chain;\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, *};\n use rustc_span::symbol::Ident;\n@@ -571,3 +572,34 @@ pub fn eq_mac_args(l: &MacArgs, r: &MacArgs) -> bool {\n         _ => false,\n     }\n }\n+\n+/// Extract args from an assert-like macro.\n+///\n+/// Currently working with:\n+/// - `assert_eq!` and `assert_ne!`\n+/// - `debug_assert_eq!` and `debug_assert_ne!`\n+///\n+/// For example:\n+///\n+/// `debug_assert_eq!(a, b)` will return Some([a, b])\n+pub fn extract_assert_macro_args(mut expr: &Expr) -> Option<[&Expr; 2]> {\n+    if_chain! {\n+        if let ExprKind::If(_, ref block, _) = expr.kind;\n+        if let StmtKind::Semi(ref e) = block.stmts.get(0)?.kind;\n+        then {\n+            expr = e;\n+        }\n+    }\n+    if_chain! {\n+        if let ExprKind::Block(ref block, _) = expr.kind;\n+        if let StmtKind::Expr(ref expr) = block.stmts.get(0)?.kind;\n+        if let ExprKind::Match(ref match_expr, _) = expr.kind;\n+        if let ExprKind::Tup(ref tup) = match_expr.kind;\n+        if let [a, b, ..] = tup.as_slice();\n+        if let (&ExprKind::AddrOf(_, _, ref a), &ExprKind::AddrOf(_, _, ref b)) = (&a.kind, &b.kind);\n+        then {\n+            return Some([&*a, &*b]);\n+        }\n+    }\n+    None\n+}"}, {"sha": "2de402fae8c7de0d05f04a50f65ce5e3976bca61", "filename": "tests/ui/bool_assert_comparison.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bbc22e2ef3081b757d089737e5752b9e413d27ba/tests%2Fui%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc22e2ef3081b757d089737e5752b9e413d27ba/tests%2Fui%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.rs?ref=bbc22e2ef3081b757d089737e5752b9e413d27ba", "patch": "@@ -0,0 +1,59 @@\n+#![warn(clippy::bool_assert_comparison)]\n+\n+macro_rules! a {\n+    () => {\n+        true\n+    };\n+}\n+macro_rules! b {\n+    () => {\n+        true\n+    };\n+}\n+\n+fn main() {\n+    assert_eq!(\"a\".len(), 1);\n+    assert_eq!(\"a\".is_empty(), false);\n+    assert_eq!(\"\".is_empty(), true);\n+    assert_eq!(true, \"\".is_empty());\n+    assert_eq!(a!(), b!());\n+    assert_eq!(a!(), \"\".is_empty());\n+    assert_eq!(\"\".is_empty(), b!());\n+\n+    assert_ne!(\"a\".len(), 1);\n+    assert_ne!(\"a\".is_empty(), false);\n+    assert_ne!(\"\".is_empty(), true);\n+    assert_ne!(true, \"\".is_empty());\n+    assert_ne!(a!(), b!());\n+    assert_ne!(a!(), \"\".is_empty());\n+    assert_ne!(\"\".is_empty(), b!());\n+\n+    debug_assert_eq!(\"a\".len(), 1);\n+    debug_assert_eq!(\"a\".is_empty(), false);\n+    debug_assert_eq!(\"\".is_empty(), true);\n+    debug_assert_eq!(true, \"\".is_empty());\n+    debug_assert_eq!(a!(), b!());\n+    debug_assert_eq!(a!(), \"\".is_empty());\n+    debug_assert_eq!(\"\".is_empty(), b!());\n+\n+    debug_assert_ne!(\"a\".len(), 1);\n+    debug_assert_ne!(\"a\".is_empty(), false);\n+    debug_assert_ne!(\"\".is_empty(), true);\n+    debug_assert_ne!(true, \"\".is_empty());\n+    debug_assert_ne!(a!(), b!());\n+    debug_assert_ne!(a!(), \"\".is_empty());\n+    debug_assert_ne!(\"\".is_empty(), b!());\n+\n+    // assert with error messages\n+    assert_eq!(\"a\".len(), 1, \"tadam {}\", 1);\n+    assert_eq!(\"a\".len(), 1, \"tadam {}\", true);\n+    assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n+    assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n+    assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n+\n+    debug_assert_eq!(\"a\".len(), 1, \"tadam {}\", 1);\n+    debug_assert_eq!(\"a\".len(), 1, \"tadam {}\", true);\n+    debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n+    debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n+    debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n+}"}, {"sha": "f57acf520d5f12e111ce76b150fd4ad98768f1c4", "filename": "tests/ui/bool_assert_comparison.stderr", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/bbc22e2ef3081b757d089737e5752b9e413d27ba/tests%2Fui%2Fbool_assert_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbc22e2ef3081b757d089737e5752b9e413d27ba/tests%2Fui%2Fbool_assert_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.stderr?ref=bbc22e2ef3081b757d089737e5752b9e413d27ba", "patch": "@@ -0,0 +1,112 @@\n+error: used `assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:16:5\n+   |\n+LL |     assert_eq!(\"a\".is_empty(), false);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |\n+   = note: `-D clippy::bool-assert-comparison` implied by `-D warnings`\n+\n+error: used `assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:17:5\n+   |\n+LL |     assert_eq!(\"\".is_empty(), true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+\n+error: used `assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:18:5\n+   |\n+LL |     assert_eq!(true, \"\".is_empty());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+\n+error: used `assert_ne!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:24:5\n+   |\n+LL |     assert_ne!(\"a\".is_empty(), false);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+\n+error: used `assert_ne!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:25:5\n+   |\n+LL |     assert_ne!(\"\".is_empty(), true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+\n+error: used `assert_ne!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:26:5\n+   |\n+LL |     assert_ne!(true, \"\".is_empty());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+\n+error: used `debug_assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:32:5\n+   |\n+LL |     debug_assert_eq!(\"a\".is_empty(), false);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+\n+error: used `debug_assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:33:5\n+   |\n+LL |     debug_assert_eq!(\"\".is_empty(), true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+\n+error: used `debug_assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:34:5\n+   |\n+LL |     debug_assert_eq!(true, \"\".is_empty());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+\n+error: used `debug_assert_ne!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:40:5\n+   |\n+LL |     debug_assert_ne!(\"a\".is_empty(), false);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+\n+error: used `debug_assert_ne!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:41:5\n+   |\n+LL |     debug_assert_ne!(\"\".is_empty(), true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+\n+error: used `debug_assert_ne!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:42:5\n+   |\n+LL |     debug_assert_ne!(true, \"\".is_empty());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+\n+error: used `assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:50:5\n+   |\n+LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+\n+error: used `assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:51:5\n+   |\n+LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+\n+error: used `assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:52:5\n+   |\n+LL |     assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+\n+error: used `debug_assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:56:5\n+   |\n+LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+\n+error: used `debug_assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:57:5\n+   |\n+LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+\n+error: used `debug_assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:58:5\n+   |\n+LL |     debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+\n+error: aborting due to 18 previous errors\n+"}]}