{"sha": "e70105f9719351990fe026c1c0777b1d685ed744", "node_id": "C_kwDOAAsO6NoAKGU3MDEwNWY5NzE5MzUxOTkwZmUwMjZjMWMwNzc3YjFkNjg1ZWQ3NDQ", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-03T04:19:06Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-03T18:41:39Z"}, "message": "Keep spans for generics in `#[derive(_)]` desugaring\n\nKeep the spans for generics coming from a `derive`d Item, so that errors\nand suggestions have better detail.\n\nFix #84003.", "tree": {"sha": "3e4b0a663614d3ae392cb7eaa72120ba077a3c76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e4b0a663614d3ae392cb7eaa72120ba077a3c76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e70105f9719351990fe026c1c0777b1d685ed744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e70105f9719351990fe026c1c0777b1d685ed744", "html_url": "https://github.com/rust-lang/rust/commit/e70105f9719351990fe026c1c0777b1d685ed744", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e70105f9719351990fe026c1c0777b1d685ed744/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5038e20999eef35260b070189883edc2a8a34b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5038e20999eef35260b070189883edc2a8a34b2", "html_url": "https://github.com/rust-lang/rust/commit/e5038e20999eef35260b070189883edc2a8a34b2"}], "stats": {"total": 365, "additions": 312, "deletions": 53}, "files": [{"sha": "0cdb86ea475cc35b3083e34d8e13faac93c875b3", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e70105f9719351990fe026c1c0777b1d685ed744/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70105f9719351990fe026c1c0777b1d685ed744/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=e70105f9719351990fe026c1c0777b1d685ed744", "patch": "@@ -567,8 +567,10 @@ impl<'a> TraitDef<'a> {\n             })\n         });\n \n-        let Generics { mut params, mut where_clause, span } =\n+        let Generics { mut params, mut where_clause, .. } =\n             self.generics.to_generics(cx, self.span, type_ident, generics);\n+        where_clause.span = generics.where_clause.span;\n+        let span = generics.span;\n \n         // Create the generic parameters\n         params.extend(generics.params.iter().map(|param| match &param.kind {\n@@ -589,7 +591,7 @@ impl<'a> TraitDef<'a> {\n                         param.bounds.iter().cloned()\n                     ).collect();\n \n-                cx.typaram(self.span, param.ident, vec![], bounds, None)\n+                cx.typaram(param.ident.span, param.ident, vec![], bounds, None)\n             }\n             GenericParamKind::Const { ty, kw_span, .. } => {\n                 let const_nodefault_kind = GenericParamKind::Const {\n@@ -610,23 +612,23 @@ impl<'a> TraitDef<'a> {\n             match *clause {\n                 ast::WherePredicate::BoundPredicate(ref wb) => {\n                     ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate {\n-                        span: self.span,\n+                        span: wb.span,\n                         bound_generic_params: wb.bound_generic_params.clone(),\n                         bounded_ty: wb.bounded_ty.clone(),\n                         bounds: wb.bounds.to_vec(),\n                     })\n                 }\n                 ast::WherePredicate::RegionPredicate(ref rb) => {\n                     ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n-                        span: self.span,\n+                        span: rb.span,\n                         lifetime: rb.lifetime,\n                         bounds: rb.bounds.to_vec(),\n                     })\n                 }\n                 ast::WherePredicate::EqPredicate(ref we) => {\n                     ast::WherePredicate::EqPredicate(ast::WhereEqPredicate {\n                         id: ast::DUMMY_NODE_ID,\n-                        span: self.span,\n+                        span: we.span,\n                         lhs_ty: we.lhs_ty.clone(),\n                         rhs_ty: we.rhs_ty.clone(),\n                     })\n@@ -691,13 +693,13 @@ impl<'a> TraitDef<'a> {\n             .iter()\n             .map(|param| match param.kind {\n                 GenericParamKind::Lifetime { .. } => {\n-                    GenericArg::Lifetime(cx.lifetime(self.span, param.ident))\n+                    GenericArg::Lifetime(cx.lifetime(param.ident.span, param.ident))\n                 }\n                 GenericParamKind::Type { .. } => {\n-                    GenericArg::Type(cx.ty_ident(self.span, param.ident))\n+                    GenericArg::Type(cx.ty_ident(param.ident.span, param.ident))\n                 }\n                 GenericParamKind::Const { .. } => {\n-                    GenericArg::Const(cx.const_ident(self.span, param.ident))\n+                    GenericArg::Const(cx.const_ident(param.ident.span, param.ident))\n                 }\n             })\n             .collect();\n@@ -1556,11 +1558,9 @@ impl<'a> TraitDef<'a> {\n \n         let is_tuple = matches!(struct_def, ast::VariantData::Tuple(..));\n         match (just_spans.is_empty(), named_idents.is_empty()) {\n-            (false, false) => cx.span_bug(\n-                self.span,\n-                \"a struct with named and unnamed \\\n-                                          fields in generic `derive`\",\n-            ),\n+            (false, false) => {\n+                cx.span_bug(self.span, \"a struct with named and unnamed fields in generic `derive`\")\n+            }\n             // named fields\n             (_, false) => Named(named_idents),\n             // unnamed fields"}, {"sha": "7a418003250841fdb2e1fbe71777a495f3b5c4c6", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/ty.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e70105f9719351990fe026c1c0777b1d685ed744/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70105f9719351990fe026c1c0777b1d685ed744/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs?ref=e70105f9719351990fe026c1c0777b1d685ed744", "patch": "@@ -211,14 +211,6 @@ fn mk_ty_param(\n     cx.typaram(span, Ident::new(name, span), attrs.to_owned(), bounds, None)\n }\n \n-fn mk_generics(params: Vec<ast::GenericParam>, span: Span) -> Generics {\n-    Generics {\n-        params,\n-        where_clause: ast::WhereClause { has_where_token: false, predicates: Vec::new(), span },\n-        span,\n-    }\n-}\n-\n /// Bounds on type parameters.\n #[derive(Clone)]\n pub struct Bounds {\n@@ -236,7 +228,7 @@ impl Bounds {\n         self_ty: Ident,\n         self_generics: &Generics,\n     ) -> Generics {\n-        let generic_params = self\n+        let params = self\n             .bounds\n             .iter()\n             .map(|t| {\n@@ -245,7 +237,11 @@ impl Bounds {\n             })\n             .collect();\n \n-        mk_generics(generic_params, span)\n+        Generics {\n+            params,\n+            where_clause: ast::WhereClause { has_where_token: false, predicates: Vec::new(), span },\n+            span,\n+        }\n     }\n }\n "}, {"sha": "69f770265dda0d7c7ac899a0f780a5b879c98355", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e70105f9719351990fe026c1c0777b1d685ed744/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70105f9719351990fe026c1c0777b1d685ed744/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=e70105f9719351990fe026c1c0777b1d685ed744", "patch": "@@ -17,8 +17,7 @@ use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable_Generic;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{def_id::LocalDefId, BytePos};\n-use rustc_span::{MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{def_id::LocalDefId, BytePos, MultiSpan, Span, DUMMY_SP};\n use rustc_target::asm::InlineAsmRegOrRegClass;\n use rustc_target::spec::abi::Abi;\n \n@@ -529,7 +528,6 @@ impl GenericParam<'hir> {\n     pub fn bounds_span(&self) -> Option<Span> {\n         self.bounds.iter().fold(None, |span, bound| {\n             let span = span.map(|s| s.to(bound.span())).unwrap_or_else(|| bound.span());\n-\n             Some(span)\n         })\n     }"}, {"sha": "4e071d69e368f2c68bc9f974a4828012eafbe10e", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e70105f9719351990fe026c1c0777b1d685ed744/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70105f9719351990fe026c1c0777b1d685ed744/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e70105f9719351990fe026c1c0777b1d685ed744", "patch": "@@ -1803,7 +1803,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         );\n         err.span_label(lifetime_ref.span, \"undeclared lifetime\");\n         let mut suggests_in_band = false;\n-        let mut suggest_note = true;\n+        let mut suggested_spans = vec![];\n         for missing in &self.missing_named_lifetime_spots {\n             match missing {\n                 MissingLifetimeSpot::Generics(generics) => {\n@@ -1821,23 +1821,17 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         suggests_in_band = true;\n                         (generics.span, format!(\"<{}>\", lifetime_ref))\n                     };\n+                    if suggested_spans.contains(&span) {\n+                        continue;\n+                    }\n+                    suggested_spans.push(span);\n                     if !span.from_expansion() {\n                         err.span_suggestion(\n                             span,\n                             &format!(\"consider introducing lifetime `{}` here\", lifetime_ref),\n                             sugg,\n                             Applicability::MaybeIncorrect,\n                         );\n-                    } else if suggest_note {\n-                        suggest_note = false; // Avoid displaying the same help multiple times.\n-                        err.span_label(\n-                            span,\n-                            &format!(\n-                                \"lifetime `{}` is missing in item created through this procedural \\\n-                                 macro\",\n-                                lifetime_ref,\n-                            ),\n-                        );\n                     }\n                 }\n                 MissingLifetimeSpot::HigherRanked { span, span_type } => {"}, {"sha": "3a8b69224d3f120f66bc45315f35ad1365776b5f", "filename": "src/test/ui/issues/issue-38821.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e70105f9719351990fe026c1c0777b1d685ed744/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e70105f9719351990fe026c1c0777b1d685ed744/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr?ref=e70105f9719351990fe026c1c0777b1d685ed744", "patch": "@@ -10,6 +10,10 @@ note: required because of the requirements on the impl of `IntoNullable` for `<C\n LL | impl<T: NotNull> IntoNullable for T {\n    |                  ^^^^^^^^^^^^     ^\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider further restricting the associated type\n+   |\n+LL |     Expr: Expression<SqlType=<Col::SqlType as IntoNullable>::Nullable>, <Col as Expression>::SqlType: NotNull\n+   |                                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "10597caf5b2dc09759e2a3430a26f592b7938e68", "filename": "src/test/ui/issues/issue-50480.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e70105f9719351990fe026c1c0777b1d685ed744/src%2Ftest%2Fui%2Fissues%2Fissue-50480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70105f9719351990fe026c1c0777b1d685ed744/src%2Ftest%2Fui%2Fissues%2Fissue-50480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50480.rs?ref=e70105f9719351990fe026c1c0777b1d685ed744", "patch": "@@ -1,8 +1,17 @@\n #[derive(Clone, Copy)]\n //~^ ERROR the trait `Copy` may not be implemented for this type\n-struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n //~^ ERROR cannot find type `NotDefined` in this scope\n //~| ERROR cannot find type `NotDefined` in this scope\n+//~| ERROR cannot find type `N` in this scope\n+//~| ERROR cannot find type `N` in this scope\n+//~| ERROR `i32` is not an iterator\n+\n+#[derive(Clone, Copy)]\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+//~^ ERROR cannot find type `NotDefined` in this scope\n+//~| ERROR cannot find type `N` in this scope\n //~| ERROR `i32` is not an iterator\n \n fn main() {}"}, {"sha": "0bb1f9ae03500236017838440ae4aa0125dd5801", "filename": "src/test/ui/issues/issue-50480.stderr", "status": "modified", "additions": 76, "deletions": 13, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/e70105f9719351990fe026c1c0777b1d685ed744/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e70105f9719351990fe026c1c0777b1d685ed744/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr?ref=e70105f9719351990fe026c1c0777b1d685ed744", "patch": "@@ -1,20 +1,61 @@\n-error[E0412]: cannot find type `NotDefined` in this scope\n+error[E0412]: cannot find type `N` in this scope\n   --> $DIR/issue-50480.rs:3:12\n    |\n-LL | struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n-   |            ^^^^^^^^^^ not found in this scope\n+LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |           -^ not found in this scope\n+   |           |\n+   |           help: you might be missing a type parameter: `<N>`\n \n error[E0412]: cannot find type `NotDefined` in this scope\n+  --> $DIR/issue-50480.rs:3:15\n+   |\n+LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |               ^^^^^^^^^^ not found in this scope\n+\n+error[E0412]: cannot find type `N` in this scope\n   --> $DIR/issue-50480.rs:3:12\n    |\n-LL | struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n-   |            ^^^^^^^^^^ not found in this scope\n+LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |           -^ not found in this scope\n+   |           |\n+   |           help: you might be missing a type parameter: `<N>`\n+\n+error[E0412]: cannot find type `NotDefined` in this scope\n+  --> $DIR/issue-50480.rs:3:15\n+   |\n+LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |           -   ^^^^^^^^^^ not found in this scope\n+   |           |\n+   |           help: you might be missing a type parameter: `<NotDefined>`\n+\n+error[E0412]: cannot find type `N` in this scope\n+  --> $DIR/issue-50480.rs:12:18\n+   |\n+LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |            -     ^\n+   |            |\n+   |            similarly named type parameter `T` defined here\n+   |\n+help: a type parameter with a similar name exists\n+   |\n+LL | struct Bar<T>(T, T, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |                  ~\n+help: you might be missing a type parameter\n+   |\n+LL | struct Bar<T, N>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |             +++\n+\n+error[E0412]: cannot find type `NotDefined` in this scope\n+  --> $DIR/issue-50480.rs:12:21\n+   |\n+LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |                     ^^^^^^^^^^ not found in this scope\n \n error[E0277]: `i32` is not an iterator\n-  --> $DIR/issue-50480.rs:3:24\n+  --> $DIR/issue-50480.rs:3:27\n    |\n-LL | struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^ `i32` is not an iterator\n+LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^ `i32` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `i32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n@@ -25,14 +66,36 @@ error[E0204]: the trait `Copy` may not be implemented for this type\n LL | #[derive(Clone, Copy)]\n    |                 ^^^^\n LL |\n-LL | struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n-   |                                                 --------  ------ this field does not implement `Copy`\n-   |                                                 |\n-   |                                                 this field does not implement `Copy`\n+LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |                                                    --------  ------ this field does not implement `Copy`\n+   |                                                    |\n+   |                                                    this field does not implement `Copy`\n+   |\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: `i32` is not an iterator\n+  --> $DIR/issue-50480.rs:12:33\n+   |\n+LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^ `i32` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `i32`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/issue-50480.rs:10:17\n+   |\n+LL | #[derive(Clone, Copy)]\n+   |                 ^^^^\n+LL |\n+LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |                                                          --------  ------ this field does not implement `Copy`\n+   |                                                          |\n+   |                                                          this field does not implement `Copy`\n    |\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 10 previous errors\n \n Some errors have detailed explanations: E0204, E0277, E0412.\n For more information about an error, try `rustc --explain E0204`."}, {"sha": "a208689523401ad3f5a6947174a518dbc3e86532", "filename": "src/test/ui/lifetimes/undeclared-lifetime-used-in-debug-macro-issue-70152.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e70105f9719351990fe026c1c0777b1d685ed744/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e70105f9719351990fe026c1c0777b1d685ed744/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.stderr?ref=e70105f9719351990fe026c1c0777b1d685ed744", "patch": "@@ -11,9 +11,8 @@ LL |     a: &'b str,\n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/undeclared-lifetime-used-in-debug-macro-issue-70152.rs:3:9\n    |\n-LL | #[derive(Eq, PartialEq)]\n-   |          -- lifetime `'b` is missing in item created through this procedural macro\n LL | struct Test {\n+   |            - help: consider introducing lifetime `'b` here: `<'b>`\n LL |     a: &'b str,\n    |         ^^ undeclared lifetime\n    |"}, {"sha": "56c218f97ebf8cab45c1a3cc1fdf024e4162ec97", "filename": "src/test/ui/suggestions/derive-macro-missing-bounds.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/e70105f9719351990fe026c1c0777b1d685ed744/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70105f9719351990fe026c1c0777b1d685ed744/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.rs?ref=e70105f9719351990fe026c1c0777b1d685ed744", "patch": "@@ -0,0 +1,89 @@\n+mod a {\n+    use std::fmt::{Debug, Formatter, Result};\n+    struct Inner<T>(T);\n+\n+    impl Debug for Inner<()> {\n+        fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n+            todo!()\n+        }\n+    }\n+\n+    #[derive(Debug)]\n+    struct Outer<T>(Inner<T>); //~ ERROR `a::Inner<T>` doesn't implement `Debug`\n+}\n+\n+mod b {\n+    use std::fmt::{Debug, Formatter, Result};\n+    struct Inner<T>(T);\n+\n+    impl<T: Debug> Debug for Inner<T> {\n+        fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n+            todo!()\n+        }\n+    }\n+\n+    #[derive(Debug)]\n+    struct Outer<T>(Inner<T>);\n+}\n+\n+mod c {\n+    use std::fmt::{Debug, Formatter, Result};\n+    struct Inner<T>(T);\n+    trait Trait {}\n+\n+    impl<T: Debug + Trait> Debug for Inner<T> {\n+        fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n+            todo!()\n+        }\n+    }\n+\n+    #[derive(Debug)]\n+    struct Outer<T>(Inner<T>); //~ ERROR the trait bound `T: c::Trait` is not satisfied\n+}\n+\n+mod d {\n+    use std::fmt::{Debug, Formatter, Result};\n+    struct Inner<T>(T);\n+    trait Trait {}\n+\n+    impl<T> Debug for Inner<T> where T: Debug, T: Trait {\n+        fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n+            todo!()\n+        }\n+    }\n+\n+    #[derive(Debug)]\n+    struct Outer<T>(Inner<T>); //~ ERROR the trait bound `T: d::Trait` is not satisfied\n+}\n+\n+mod e {\n+    use std::fmt::{Debug, Formatter, Result};\n+    struct Inner<T>(T);\n+    trait Trait {}\n+\n+    impl<T> Debug for Inner<T> where T: Debug + Trait {\n+        fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n+            todo!()\n+        }\n+    }\n+\n+    #[derive(Debug)]\n+    struct Outer<T>(Inner<T>); //~ ERROR the trait bound `T: e::Trait` is not satisfied\n+}\n+\n+mod f {\n+    use std::fmt::{Debug, Formatter, Result};\n+    struct Inner<T>(T);\n+    trait Trait {}\n+\n+    impl<T: Debug> Debug for Inner<T> where T: Trait {\n+        fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n+            todo!()\n+        }\n+    }\n+\n+    #[derive(Debug)]\n+    struct Outer<T>(Inner<T>); //~ ERROR the trait bound `T: f::Trait` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "396781059309be79239c0015d5ecec63105cb135", "filename": "src/test/ui/suggestions/derive-macro-missing-bounds.stderr", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/e70105f9719351990fe026c1c0777b1d685ed744/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e70105f9719351990fe026c1c0777b1d685ed744/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr?ref=e70105f9719351990fe026c1c0777b1d685ed744", "patch": "@@ -0,0 +1,107 @@\n+error[E0277]: `a::Inner<T>` doesn't implement `Debug`\n+  --> $DIR/derive-macro-missing-bounds.rs:12:21\n+   |\n+LL |     #[derive(Debug)]\n+   |              ----- in this derive macro expansion\n+LL |     struct Outer<T>(Inner<T>);\n+   |                     ^^^^^^^^ `a::Inner<T>` cannot be formatted using `{:?}`\n+   |\n+   = help: the trait `Debug` is not implemented for `a::Inner<T>`\n+   = note: add `#[derive(Debug)]` to `a::Inner<T>` or manually `impl Debug for a::Inner<T>`\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+   |\n+LL |     struct Outer<T>(Inner<T>) where a::Inner<T>: Debug;\n+   |                               ++++++++++++++++++++++++\n+\n+error[E0277]: the trait bound `T: c::Trait` is not satisfied\n+  --> $DIR/derive-macro-missing-bounds.rs:41:21\n+   |\n+LL |     #[derive(Debug)]\n+   |              ----- in this derive macro expansion\n+LL |     struct Outer<T>(Inner<T>);\n+   |                     ^^^^^^^^ the trait `c::Trait` is not implemented for `T`\n+   |\n+note: required because of the requirements on the impl of `Debug` for `c::Inner<T>`\n+  --> $DIR/derive-macro-missing-bounds.rs:34:28\n+   |\n+LL |     impl<T: Debug + Trait> Debug for Inner<T> {\n+   |                            ^^^^^     ^^^^^^^^\n+   = note: 1 redundant requirement hidden\n+   = note: required because of the requirements on the impl of `Debug` for `&c::Inner<T>`\n+   = note: required for the cast to the object type `dyn Debug`\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider further restricting this bound\n+   |\n+LL |     #[derive(Debug + c::Trait)]\n+   |                    ++++++++++\n+\n+error[E0277]: the trait bound `T: d::Trait` is not satisfied\n+  --> $DIR/derive-macro-missing-bounds.rs:56:21\n+   |\n+LL |     #[derive(Debug)]\n+   |              ----- in this derive macro expansion\n+LL |     struct Outer<T>(Inner<T>);\n+   |                     ^^^^^^^^ the trait `d::Trait` is not implemented for `T`\n+   |\n+note: required because of the requirements on the impl of `Debug` for `d::Inner<T>`\n+  --> $DIR/derive-macro-missing-bounds.rs:49:13\n+   |\n+LL |     impl<T> Debug for Inner<T> where T: Debug, T: Trait {\n+   |             ^^^^^     ^^^^^^^^\n+   = note: 1 redundant requirement hidden\n+   = note: required because of the requirements on the impl of `Debug` for `&d::Inner<T>`\n+   = note: required for the cast to the object type `dyn Debug`\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider further restricting this bound\n+   |\n+LL |     #[derive(Debug + d::Trait)]\n+   |                    ++++++++++\n+\n+error[E0277]: the trait bound `T: e::Trait` is not satisfied\n+  --> $DIR/derive-macro-missing-bounds.rs:71:21\n+   |\n+LL |     #[derive(Debug)]\n+   |              ----- in this derive macro expansion\n+LL |     struct Outer<T>(Inner<T>);\n+   |                     ^^^^^^^^ the trait `e::Trait` is not implemented for `T`\n+   |\n+note: required because of the requirements on the impl of `Debug` for `e::Inner<T>`\n+  --> $DIR/derive-macro-missing-bounds.rs:64:13\n+   |\n+LL |     impl<T> Debug for Inner<T> where T: Debug + Trait {\n+   |             ^^^^^     ^^^^^^^^\n+   = note: 1 redundant requirement hidden\n+   = note: required because of the requirements on the impl of `Debug` for `&e::Inner<T>`\n+   = note: required for the cast to the object type `dyn Debug`\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider further restricting this bound\n+   |\n+LL |     #[derive(Debug + e::Trait)]\n+   |                    ++++++++++\n+\n+error[E0277]: the trait bound `T: f::Trait` is not satisfied\n+  --> $DIR/derive-macro-missing-bounds.rs:86:21\n+   |\n+LL |     #[derive(Debug)]\n+   |              ----- in this derive macro expansion\n+LL |     struct Outer<T>(Inner<T>);\n+   |                     ^^^^^^^^ the trait `f::Trait` is not implemented for `T`\n+   |\n+note: required because of the requirements on the impl of `Debug` for `f::Inner<T>`\n+  --> $DIR/derive-macro-missing-bounds.rs:79:20\n+   |\n+LL |     impl<T: Debug> Debug for Inner<T> where T: Trait {\n+   |                    ^^^^^     ^^^^^^^^\n+   = note: 1 redundant requirement hidden\n+   = note: required because of the requirements on the impl of `Debug` for `&f::Inner<T>`\n+   = note: required for the cast to the object type `dyn Debug`\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider further restricting this bound\n+   |\n+LL |     #[derive(Debug + f::Trait)]\n+   |                    ++++++++++\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}