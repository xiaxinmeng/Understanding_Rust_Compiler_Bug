{"sha": "e8339e820b0c4e7c9a26a3e3495b7655e60bd102", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MzM5ZTgyMGIwYzRlN2M5YTI2YTNlMzQ5NWI3NjU1ZTYwYmQxMDI=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-03-20T22:28:26Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-04-06T22:50:59Z"}, "message": "Use split_at in slice's ToOwned::clone_into\n\nIt appears to codegen slightly more efficiently with `split_at` taking\ntwo slices at once, rather than slicing across different calls.", "tree": {"sha": "b74d61092274bfd11ac9d2861fb6b8ce821a253e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b74d61092274bfd11ac9d2861fb6b8ce821a253e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8339e820b0c4e7c9a26a3e3495b7655e60bd102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8339e820b0c4e7c9a26a3e3495b7655e60bd102", "html_url": "https://github.com/rust-lang/rust/commit/e8339e820b0c4e7c9a26a3e3495b7655e60bd102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8339e820b0c4e7c9a26a3e3495b7655e60bd102/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dee5f1126dfd5c9314ee5ae9d9eb010e35ef257", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dee5f1126dfd5c9314ee5ae9d9eb010e35ef257", "html_url": "https://github.com/rust-lang/rust/commit/6dee5f1126dfd5c9314ee5ae9d9eb010e35ef257"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "cd750d2558035f8ace5078b10cb5f10f70d6dfc0", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8339e820b0c4e7c9a26a3e3495b7655e60bd102/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8339e820b0c4e7c9a26a3e3495b7655e60bd102/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=e8339e820b0c4e7c9a26a3e3495b7655e60bd102", "patch": "@@ -733,14 +733,14 @@ impl<T: Clone> ToOwned for [T] {\n     fn clone_into(&self, target: &mut Vec<T>) {\n         // drop anything in target that will not be overwritten\n         target.truncate(self.len());\n-        let len = target.len();\n-\n-        // reuse the contained values' allocations/resources.\n-        target.clone_from_slice(&self[..len]);\n \n         // target.len <= self.len due to the truncate above, so the\n-        // slice here is always in-bounds.\n-        target.extend_from_slice(&self[len..]);\n+        // slices here are always in-bounds.\n+        let (init, tail) = self.split_at(target.len());\n+\n+        // reuse the contained values' allocations/resources.\n+        target.clone_from_slice(init);\n+        target.extend_from_slice(tail);\n     }\n }\n "}]}