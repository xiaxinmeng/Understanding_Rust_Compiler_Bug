{"sha": "17790570373a7f560950d53ea4d67807232db255", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NzkwNTcwMzczYTdmNTYwOTUwZDUzZWE0ZDY3ODA3MjMyZGIyNTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-08T22:36:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-08T22:36:34Z"}, "message": "Auto merge of #32751 - alexcrichton:dist-docs, r=brson\n\nrustbuild: Support cross rust-docs packages\n\nRight now if you configure multiple hosts rustbuild will only build\ndocumentation for the build triple, but we've got all the support necessary to\nbuild documentation for different architectures as well. This commit\nreinterprets the `target` field of doc `Step` instances to be the target of the\ndocumentation rather than the target of the rustdoc/tool being run.\n\nThis should enable `make dist` to start producing a bunch of `rust-docs`\npackages for all the cross architectures that rustbuild is producing now.", "tree": {"sha": "fc7f6152bffea751aec87bb3fa153a87366ddc71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc7f6152bffea751aec87bb3fa153a87366ddc71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17790570373a7f560950d53ea4d67807232db255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17790570373a7f560950d53ea4d67807232db255", "html_url": "https://github.com/rust-lang/rust/commit/17790570373a7f560950d53ea4d67807232db255", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17790570373a7f560950d53ea4d67807232db255/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf44003c970719743a9a9b199f6f22fa8e7fae85", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf44003c970719743a9a9b199f6f22fa8e7fae85", "html_url": "https://github.com/rust-lang/rust/commit/bf44003c970719743a9a9b199f6f22fa8e7fae85"}, {"sha": "5b29f9a9b069fb7b7ef5adaaa6ca0549e8f3aa14", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b29f9a9b069fb7b7ef5adaaa6ca0549e8f3aa14", "html_url": "https://github.com/rust-lang/rust/commit/5b29f9a9b069fb7b7ef5adaaa6ca0549e8f3aa14"}], "stats": {"total": 168, "additions": 100, "deletions": 68}, "files": [{"sha": "c33838a146c2c570f01f8ab1d81e76a0fe71139f", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/17790570373a7f560950d53ea4d67807232db255/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/17790570373a7f560950d53ea4d67807232db255/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=17790570373a7f560950d53ea4d67807232db255", "patch": "@@ -3,16 +3,16 @@ name = \"bootstrap\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -21,23 +21,23 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"cmake\"\n-version = \"0.1.13\"\n+version = \"0.1.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"filetime\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"gcc\"\n-version = \"0.3.25\"\n+version = \"0.3.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -50,39 +50,39 @@ name = \"kernel32-sys\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"winapi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.7\"\n+version = \"0.2.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"num_cpus\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-serialize\"\n-version = \"0.3.18\"\n+version = \"0.3.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"toml\"\n-version = \"0.1.27\"\n+version = \"0.1.28\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-serialize 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"winapi\"\n-version = \"0.2.5\"\n+version = \"0.2.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]"}, {"sha": "a67f1ba48b560acbf36a5c33bd6d47163de1a1a0", "filename": "src/bootstrap/build/compile.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/17790570373a7f560950d53ea4d67807232db255/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17790570373a7f560950d53ea4d67807232db255/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcompile.rs?ref=17790570373a7f560950d53ea4d67807232db255", "patch": "@@ -15,7 +15,7 @@ use std::process::Command;\n \n use build_helper::output;\n \n-use build::util::{exe, staticlib, libdir, mtime, is_dylib};\n+use build::util::{exe, staticlib, libdir, mtime, is_dylib, copy};\n use build::{Build, Compiler, Mode};\n \n /// Build the standard library.\n@@ -32,8 +32,8 @@ pub fn std<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n     let libdir = build.sysroot_libdir(compiler, target);\n     let _ = fs::remove_dir_all(&libdir);\n     t!(fs::create_dir_all(&libdir));\n-    t!(fs::hard_link(&build.compiler_rt_built.borrow()[target],\n-                     libdir.join(staticlib(\"compiler-rt\", target))));\n+    copy(&build.compiler_rt_built.borrow()[target],\n+         &libdir.join(staticlib(\"compiler-rt\", target)));\n \n     build_startup_objects(build, target, &libdir);\n \n@@ -77,8 +77,8 @@ pub fn std_link(build: &Build,\n     if host != compiler.host {\n         let _ = fs::remove_dir_all(&libdir);\n         t!(fs::create_dir_all(&libdir));\n-        t!(fs::hard_link(&build.compiler_rt_built.borrow()[target],\n-                         libdir.join(staticlib(\"compiler-rt\", target))));\n+        copy(&build.compiler_rt_built.borrow()[target],\n+             &libdir.join(staticlib(\"compiler-rt\", target)));\n     }\n     add_to_sysroot(&out_dir, &libdir);\n \n@@ -93,7 +93,7 @@ pub fn std_link(build: &Build,\n /// Only required for musl targets that statically link to libc\n fn copy_third_party_objects(build: &Build, target: &str, into: &Path) {\n     for &obj in &[\"crt1.o\", \"crti.o\", \"crtn.o\"] {\n-        t!(fs::copy(compiler_file(build.cc(target), obj), into.join(obj)));\n+        copy(&compiler_file(build.cc(target), obj), &into.join(obj));\n     }\n }\n \n@@ -119,7 +119,7 @@ fn build_startup_objects(build: &Build, target: &str, into: &Path) {\n     }\n \n     for obj in [\"crt2.o\", \"dllcrt2.o\"].iter() {\n-        t!(fs::copy(compiler_file(build.cc(target), obj), into.join(obj)));\n+        copy(&compiler_file(build.cc(target), obj), &into.join(obj));\n     }\n }\n \n@@ -240,9 +240,10 @@ fn libtest_shim(build: &Build, compiler: &Compiler, target: &str) -> PathBuf {\n     build.cargo_out(compiler, Mode::Libtest, target).join(\"libtest_shim.rlib\")\n }\n \n-fn compiler_file(compiler: &Path, file: &str) -> String {\n-    output(Command::new(compiler)\n-                   .arg(format!(\"-print-file-name={}\", file))).trim().to_string()\n+fn compiler_file(compiler: &Path, file: &str) -> PathBuf {\n+    let out = output(Command::new(compiler)\n+                            .arg(format!(\"-print-file-name={}\", file)));\n+    PathBuf::from(out.trim())\n }\n \n /// Prepare a new compiler from the artifacts in `stage`\n@@ -270,7 +271,7 @@ pub fn assemble_rustc(build: &Build, stage: u32, host: &str) {\n     for f in t!(fs::read_dir(&src_libdir)).map(|f| t!(f)) {\n         let filename = f.file_name().into_string().unwrap();\n         if is_dylib(&filename) {\n-            t!(fs::hard_link(&f.path(), sysroot_libdir.join(&filename)));\n+            copy(&f.path(), &sysroot_libdir.join(&filename));\n         }\n     }\n \n@@ -282,15 +283,15 @@ pub fn assemble_rustc(build: &Build, stage: u32, host: &str) {\n     t!(fs::create_dir_all(&bindir));\n     let compiler = build.compiler_path(&Compiler::new(stage, host));\n     let _ = fs::remove_file(&compiler);\n-    t!(fs::hard_link(rustc, compiler));\n+    copy(&rustc, &compiler);\n \n     // See if rustdoc exists to link it into place\n     let rustdoc = exe(\"rustdoc\", host);\n     let rustdoc_src = out_dir.join(&rustdoc);\n     let rustdoc_dst = bindir.join(&rustdoc);\n     if fs::metadata(&rustdoc_src).is_ok() {\n         let _ = fs::remove_file(&rustdoc_dst);\n-        t!(fs::hard_link(&rustdoc_src, &rustdoc_dst));\n+        copy(&rustdoc_src, &rustdoc_dst);\n     }\n }\n \n@@ -329,8 +330,7 @@ fn add_to_sysroot(out_dir: &Path, sysroot_dst: &Path) {\n         let (_, path) = paths.iter().map(|path| {\n             (mtime(&path).seconds(), path)\n         }).max().unwrap();\n-        t!(fs::hard_link(&path,\n-                         sysroot_dst.join(path.file_name().unwrap())));\n+        copy(&path, &sysroot_dst.join(path.file_name().unwrap()));\n     }\n }\n "}, {"sha": "6ae652bd66da6f9df687c0918deb7c5cd2e15b97", "filename": "src/bootstrap/build/dist.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17790570373a7f560950d53ea4d67807232db255/src%2Fbootstrap%2Fbuild%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17790570373a7f560950d53ea4d67807232db255/src%2Fbootstrap%2Fbuild%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fdist.rs?ref=17790570373a7f560950d53ea4d67807232db255", "patch": "@@ -52,7 +52,7 @@ pub fn docs(build: &Build, stage: u32, host: &str) {\n        .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n        .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n        .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n-       .arg(format!(\"--package-name={}\", name))\n+       .arg(format!(\"--package-name={}-{}\", name, host))\n        .arg(\"--component-name=rust-docs\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n        .arg(\"--bulk-dirs=share/doc/rust/html\");\n@@ -61,9 +61,11 @@ pub fn docs(build: &Build, stage: u32, host: &str) {\n \n     // As part of this step, *also* copy the docs directory to a directory which\n     // buildbot typically uploads.\n-    let dst = distdir(build).join(\"doc\").join(&build.package_vers);\n-    t!(fs::create_dir_all(&dst));\n-    cp_r(&src, &dst);\n+    if host == build.config.build {\n+        let dst = distdir(build).join(\"doc\").join(&build.package_vers);\n+        t!(fs::create_dir_all(&dst));\n+        cp_r(&src, &dst);\n+    }\n }\n \n pub fn mingw(build: &Build, host: &str) {"}, {"sha": "5782dd5ec28dd0c23b98ee9fc0e5b75e17458774", "filename": "src/bootstrap/build/doc.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/17790570373a7f560950d53ea4d67807232db255/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17790570373a7f560950d53ea4d67807232db255/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fdoc.rs?ref=17790570373a7f560950d53ea4d67807232db255", "patch": "@@ -16,30 +16,30 @@ use std::process::Command;\n use build::{Build, Compiler, Mode};\n use build::util::{up_to_date, cp_r};\n \n-pub fn rustbook(build: &Build, stage: u32, host: &str, name: &str, out: &Path) {\n+pub fn rustbook(build: &Build, stage: u32, target: &str, name: &str, out: &Path) {\n     t!(fs::create_dir_all(out));\n \n     let out = out.join(name);\n-    let compiler = Compiler::new(stage, host);\n+    let compiler = Compiler::new(stage, &build.config.build);\n     let src = build.src.join(\"src/doc\").join(name);\n     let index = out.join(\"index.html\");\n     let rustbook = build.tool(&compiler, \"rustbook\");\n     if up_to_date(&src, &index) && up_to_date(&rustbook, &index) {\n         return\n     }\n-    println!(\"Rustbook stage{} ({}) - {}\", stage, host, name);\n+    println!(\"Rustbook stage{} ({}) - {}\", stage, target, name);\n     let _ = fs::remove_dir_all(&out);\n     build.run(build.tool_cmd(&compiler, \"rustbook\")\n                    .arg(\"build\")\n                    .arg(&src)\n                    .arg(out));\n }\n \n-pub fn standalone(build: &Build, stage: u32, host: &str, out: &Path) {\n-    println!(\"Documenting stage{} standalone ({})\", stage, host);\n+pub fn standalone(build: &Build, stage: u32, target: &str, out: &Path) {\n+    println!(\"Documenting stage{} standalone ({})\", stage, target);\n     t!(fs::create_dir_all(out));\n \n-    let compiler = Compiler::new(stage, host);\n+    let compiler = Compiler::new(stage, &build.config.build);\n \n     let favicon = build.src.join(\"src/doc/favicon.inc\");\n     let footer = build.src.join(\"src/doc/footer.inc\");\n@@ -105,59 +105,61 @@ pub fn standalone(build: &Build, stage: u32, host: &str, out: &Path) {\n     }\n }\n \n-pub fn std(build: &Build, stage: u32, host: &str, out: &Path) {\n-    println!(\"Documenting stage{} std ({})\", stage, host);\n-    let compiler = Compiler::new(stage, host);\n+pub fn std(build: &Build, stage: u32, target: &str, out: &Path) {\n+    println!(\"Documenting stage{} std ({})\", stage, target);\n+    t!(fs::create_dir_all(out));\n+    let compiler = Compiler::new(stage, &build.config.build);\n     let out_dir = build.stage_out(&compiler, Mode::Libstd)\n-                       .join(host).join(\"doc\");\n+                       .join(target).join(\"doc\");\n     let rustdoc = build.rustdoc(&compiler);\n \n     build.clear_if_dirty(&out_dir, &rustdoc);\n \n-    let mut cargo = build.cargo(&compiler, Mode::Libstd, host, \"doc\");\n+    let mut cargo = build.cargo(&compiler, Mode::Libstd, target, \"doc\");\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/std_shim/Cargo.toml\"))\n          .arg(\"--features\").arg(build.std_features());\n     build.run(&mut cargo);\n     cp_r(&out_dir, out)\n }\n \n-pub fn test(build: &Build, stage: u32, host: &str, out: &Path) {\n-    println!(\"Documenting stage{} test ({})\", stage, host);\n-    let compiler = Compiler::new(stage, host);\n+pub fn test(build: &Build, stage: u32, target: &str, out: &Path) {\n+    println!(\"Documenting stage{} test ({})\", stage, target);\n+    let compiler = Compiler::new(stage, &build.config.build);\n     let out_dir = build.stage_out(&compiler, Mode::Libtest)\n-                       .join(host).join(\"doc\");\n+                       .join(target).join(\"doc\");\n     let rustdoc = build.rustdoc(&compiler);\n \n     build.clear_if_dirty(&out_dir, &rustdoc);\n \n-    let mut cargo = build.cargo(&compiler, Mode::Libtest, host, \"doc\");\n+    let mut cargo = build.cargo(&compiler, Mode::Libtest, target, \"doc\");\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/test_shim/Cargo.toml\"));\n     build.run(&mut cargo);\n     cp_r(&out_dir, out)\n }\n \n-pub fn rustc(build: &Build, stage: u32, host: &str, out: &Path) {\n-    println!(\"Documenting stage{} compiler ({})\", stage, host);\n-    let compiler = Compiler::new(stage, host);\n+pub fn rustc(build: &Build, stage: u32, target: &str, out: &Path) {\n+    println!(\"Documenting stage{} compiler ({})\", stage, target);\n+    let compiler = Compiler::new(stage, &build.config.build);\n     let out_dir = build.stage_out(&compiler, Mode::Librustc)\n-                       .join(host).join(\"doc\");\n+                       .join(target).join(\"doc\");\n     let rustdoc = build.rustdoc(&compiler);\n     if !up_to_date(&rustdoc, &out_dir.join(\"rustc/index.html\")) {\n         t!(fs::remove_dir_all(&out_dir));\n     }\n-    let mut cargo = build.cargo(&compiler, Mode::Librustc, host, \"doc\");\n+    let mut cargo = build.cargo(&compiler, Mode::Librustc, target, \"doc\");\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/Cargo.toml\"))\n          .arg(\"--features\").arg(build.rustc_features());\n     build.run(&mut cargo);\n     cp_r(&out_dir, out)\n }\n \n-pub fn error_index(build: &Build, stage: u32, host: &str, out: &Path) {\n-    println!(\"Documenting stage{} error index ({})\", stage, host);\n-    let compiler = Compiler::new(stage, host);\n+pub fn error_index(build: &Build, stage: u32, target: &str, out: &Path) {\n+    println!(\"Documenting stage{} error index ({})\", stage, target);\n+    t!(fs::create_dir_all(out));\n+    let compiler = Compiler::new(stage, &build.config.build);\n     let mut index = build.tool_cmd(&compiler, \"error_index_generator\");\n     index.arg(\"html\");\n     index.arg(out.join(\"error-index.html\"));"}, {"sha": "6ce2749638841b4e86cdc9dd64b56926bb9d257c", "filename": "src/bootstrap/build/sanity.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17790570373a7f560950d53ea4d67807232db255/src%2Fbootstrap%2Fbuild%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17790570373a7f560950d53ea4d67807232db255/src%2Fbootstrap%2Fbuild%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fsanity.rs?ref=17790570373a7f560950d53ea4d67807232db255", "patch": "@@ -119,4 +119,16 @@ $ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n             }\n         }\n     }\n+\n+    for host in build.flags.host.iter() {\n+        if !build.config.host.contains(host) {\n+            panic!(\"specified host `{}` is not in the ./configure list\", host);\n+        }\n+    }\n+    for target in build.flags.target.iter() {\n+        if !build.config.target.contains(target) {\n+            panic!(\"specified target `{}` is not in the ./configure list\",\n+                   target);\n+        }\n+    }\n }"}, {"sha": "a185a65975fdd445ea636355de7611c2cfb4a62b", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/17790570373a7f560950d53ea4d67807232db255/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17790570373a7f560950d53ea4d67807232db255/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=17790570373a7f560950d53ea4d67807232db255", "patch": "@@ -274,22 +274,28 @@ impl<'a> Step<'a> {\n                 vec![self.llvm(()).target(&build.config.build)]\n             }\n             Source::Llvm { _dummy } => Vec::new(),\n+\n+            // Note that all doc targets depend on artifacts from the build\n+            // architecture, not the target (which is where we're generating\n+            // docs into).\n             Source::DocStd { stage } => {\n-                vec![self.libstd(self.compiler(stage))]\n+                let compiler = self.target(&build.config.build).compiler(stage);\n+                vec![self.libstd(compiler)]\n             }\n             Source::DocTest { stage } => {\n-                vec![self.libtest(self.compiler(stage))]\n+                let compiler = self.target(&build.config.build).compiler(stage);\n+                vec![self.libtest(compiler)]\n             }\n             Source::DocBook { stage } |\n             Source::DocNomicon { stage } |\n             Source::DocStyle { stage } => {\n-                vec![self.tool_rustbook(stage)]\n+                vec![self.target(&build.config.build).tool_rustbook(stage)]\n             }\n             Source::DocErrorIndex { stage } => {\n-                vec![self.tool_error_index(stage)]\n+                vec![self.target(&build.config.build).tool_error_index(stage)]\n             }\n             Source::DocStandalone { stage } => {\n-                vec![self.rustc(stage)]\n+                vec![self.target(&build.config.build).rustc(stage)]\n             }\n             Source::DocRustc { stage } => {\n                 vec![self.doc_test(stage)]\n@@ -333,7 +339,6 @@ impl<'a> Step<'a> {\n \n             Source::Dist { stage } => {\n                 let mut base = Vec::new();\n-                base.push(self.dist_docs(stage));\n \n                 for host in build.config.host.iter() {\n                     let host = self.target(host);\n@@ -344,7 +349,9 @@ impl<'a> Step<'a> {\n \n                     let compiler = self.compiler(stage);\n                     for target in build.config.target.iter() {\n-                        base.push(self.target(target).dist_std(compiler));\n+                        let target = self.target(target);\n+                        base.push(target.dist_docs(stage));\n+                        base.push(target.dist_std(compiler));\n                     }\n                 }\n                 return base"}, {"sha": "41cf924d44a92dcf85ddce41ff058e3c5040398c", "filename": "src/bootstrap/build/util.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17790570373a7f560950d53ea4d67807232db255/src%2Fbootstrap%2Fbuild%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17790570373a7f560950d53ea4d67807232db255/src%2Fbootstrap%2Fbuild%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Futil.rs?ref=17790570373a7f560950d53ea4d67807232db255", "patch": "@@ -30,6 +30,15 @@ pub fn mtime(path: &Path) -> FileTime {\n     }).unwrap_or(FileTime::zero())\n }\n \n+pub fn copy(src: &Path, dst: &Path) {\n+    let res = fs::hard_link(src, dst);\n+    let res = res.or_else(|_| fs::copy(src, dst).map(|_| ()));\n+    if let Err(e) = res {\n+        panic!(\"failed to copy `{}` to `{}`: {}\", src.display(),\n+               dst.display(), e)\n+    }\n+}\n+\n pub fn cp_r(src: &Path, dst: &Path) {\n     for f in t!(fs::read_dir(src)) {\n         let f = t!(f);\n@@ -42,7 +51,7 @@ pub fn cp_r(src: &Path, dst: &Path) {\n             cp_r(&path, &dst);\n         } else {\n             let _ = fs::remove_file(&dst);\n-            t!(fs::hard_link(&path, dst));\n+            copy(&path, &dst);\n         }\n     }\n }"}]}