{"sha": "03f49502391a45e4b021c332dc9f38a05087b84a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZjQ5NTAyMzkxYTQ1ZTRiMDIxYzMzMmRjOWYzOGEwNTA4N2I4NGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-07T14:22:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-07T14:22:49Z"}, "message": "Auto merge of #30734 - tsion:mir-pretty, r=nikomatsakis\n\n* Put `const` in front of every `ConstVal`.\n* Pretty-print bytestrings as they appear in Rust source.\n* Pretty-print `ConstVal::{Struct, Tuple, Array, Repeat}` by pretty-printing the `ast::NodeId`. This is a temporary measure, and probably not perfect, but I'm avoiding anything more complex since I hear the const evaluator might not be AST-based in the near future.\n\n```rust\n\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn consts() {\n    let _float = 3.14159;\n    let _non_const_int = -42;\n    const INT: i32 = -42;\n    let _int = INT;\n    let _uint = 42u32;\n    let _str = \"a string\";\n    let _bytestr = b\"a bytes\\xFF\\n\\ttri\\'\\\"\\\\ng\";\n    let _bool = true;\n    const STRUCT: Point = Point { x: 42, y: 42 };\n    let _struct = STRUCT;\n    const EXTERNAL_STRUCT: std::sync::atomic::AtomicUsize = std::sync::atomic::ATOMIC_USIZE_INIT;\n    let _external_struct = EXTERNAL_STRUCT;\n    const TUPLE: (i32, &'static str, &'static [u8; 5]) = (1, \"two\", b\"three\");\n    let _tuple = TUPLE;\n    const FUNC: fn() = consts;\n    let _function = FUNC;\n    let _non_const_function = consts;\n    const ARRAY: [&'static str; 3] = [\"a\", \"b\", \"c\"];\n    let _array = ARRAY;\n    const REPEAT: [&'static [u8; 3]; 10] = [b\"foo\"; 10];\n    let _repeat = REPEAT;\n}\n```\n\n```diff\n--- consts-old.mir\t2016-01-05 23:23:14.163807017 -0600\n+++ consts-new.mir\t2016-01-05 23:04:51.121386151 -0600\n@@ -1,45 +1,45 @@\n fn() -> () {\n     let var0: f64; // _float\n     let var1: i32; // _non_const_int\n     let var2: i32; // _int\n     let var3: u32; // _uint\n     let var4: &str; // _str\n     let var5: &[u8; 18]; // _bytestr\n     let var6: bool; // _bool\n     let var7: Point; // _struct\n     let var8: core::sync::atomic::AtomicUsize; // _external_struct\n     let var9: (i32, &str, &[u8; 5]); // _tuple\n     let var10: fn(); // _function\n     let var11: fn() {consts}; // _non_const_function\n     let var12: [&str; 3]; // _array\n     let var13: [&[u8; 3]; 10]; // _repeat\n     let mut tmp0: ();\n\n     bb0: {\n-        var0 = 3.14159;\n-        var1 = Neg(42);\n-        var2 = -42;\n-        var3 = 42;\n-        var4 = Str(\"a string\");\n-        var5 = ByteStr[97, 32, 98, 121, 116, 101, 115, 255, 10, 9, 116, 114, 105, 39, 34, 92, 110, 103];\n-        var6 = true;\n-        var7 = Struct(51);\n+        var0 = const 3.14159;\n+        var1 = Neg(const 42);\n+        var2 = const -42;\n+        var3 = const 42;\n+        var4 = const \"a string\";\n+        var5 = const b\"a bytes\\xff\\n\\ttri\\'\\\"\\\\ng\";\n+        var6 = const true;\n+        var7 = const expr Point{x: 42, y: 42,};\n         var8 = consts::EXTERNAL_STRUCT;\n-        var9 = Tuple(78);\n-        var10 = Function(DefId { krate: 0, node: DefIndex(7) => consts });\n+        var9 = const expr (1, \"two\", b\"three\");\n+        var10 = const consts;\n         var11 = consts;\n-        var12 = Array(105, 3);\n-        var13 = Repeat(122, 10);\n+        var12 = const expr [\"a\", \"b\", \"c\"];\n+        var13 = const expr [b\"foo\"; 10];\n         drop var8;\n         drop var7;\n         goto -> bb1;\n     }\n\n     bb1: {\n         return;\n     }\n\n     bb2: {\n         diverge;\n     }\n }\n```", "tree": {"sha": "b3756ecfc6fdcf8439e0d9a44f5ad040bb9864b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3756ecfc6fdcf8439e0d9a44f5ad040bb9864b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03f49502391a45e4b021c332dc9f38a05087b84a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03f49502391a45e4b021c332dc9f38a05087b84a", "html_url": "https://github.com/rust-lang/rust/commit/03f49502391a45e4b021c332dc9f38a05087b84a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03f49502391a45e4b021c332dc9f38a05087b84a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e8350387c57582561874aa2a5aeb4d5370cfc04", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e8350387c57582561874aa2a5aeb4d5370cfc04", "html_url": "https://github.com/rust-lang/rust/commit/1e8350387c57582561874aa2a5aeb4d5370cfc04"}, {"sha": "b2903d87c90709e5ae45e225718b23a91bfbd0eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2903d87c90709e5ae45e225718b23a91bfbd0eb", "html_url": "https://github.com/rust-lang/rust/commit/b2903d87c90709e5ae45e225718b23a91bfbd0eb"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "1572040e234ce4c0c7b0f258991fb5c024f6020b", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/03f49502391a45e4b021c332dc9f38a05087b84a/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f49502391a45e4b021c332dc9f38a05087b84a/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=03f49502391a45e4b021c332dc9f38a05087b84a", "patch": "@@ -15,8 +15,9 @@ use middle::ty::{self, AdtDef, ClosureSubsts, FnOutput, Region, Ty};\n use rustc_back::slice;\n use rustc_data_structures::tuple_slice::TupleSlice;\n use rustc_front::hir::InlineAsm;\n-use syntax::ast::Name;\n+use syntax::ast::{self, Name};\n use syntax::codemap::Span;\n+use std::ascii;\n use std::borrow::{Cow, IntoCow};\n use std::fmt::{self, Debug, Formatter, Write};\n use std::{iter, u32};\n@@ -547,13 +548,11 @@ pub enum ProjectionElem<'tcx, V> {\n \n /// Alias for projections as they appear in lvalues, where the base is an lvalue\n /// and the index is an operand.\n-pub type LvalueProjection<'tcx> =\n-    Projection<'tcx,Lvalue<'tcx>,Operand<'tcx>>;\n+pub type LvalueProjection<'tcx> = Projection<'tcx, Lvalue<'tcx>, Operand<'tcx>>;\n \n /// Alias for projections as they appear in lvalues, where the base is an lvalue\n /// and the index is an operand.\n-pub type LvalueElem<'tcx> =\n-    ProjectionElem<'tcx,Operand<'tcx>>;\n+pub type LvalueElem<'tcx> = ProjectionElem<'tcx, Operand<'tcx>>;\n \n /// Index into the list of fields found in a `VariantDef`\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n@@ -597,11 +596,11 @@ impl<'tcx> Debug for Lvalue<'tcx> {\n \n         match *self {\n             Var(id) =>\n-                write!(fmt,\"var{:?}\", id),\n+                write!(fmt, \"var{:?}\", id),\n             Arg(id) =>\n-                write!(fmt,\"arg{:?}\", id),\n+                write!(fmt, \"arg{:?}\", id),\n             Temp(id) =>\n-                write!(fmt,\"tmp{:?}\", id),\n+                write!(fmt, \"tmp{:?}\", id),\n             Static(def_id) =>\n                 write!(fmt, \"{}\", ty::tls::with(|tcx| tcx.item_path_str(def_id))),\n             ReturnPointer =>\n@@ -897,26 +896,41 @@ impl<'tcx> Debug for Literal<'tcx> {\n         use self::Literal::*;\n         match *self {\n             Item { def_id, .. } =>\n-                write!(fmt, \"{}\", ty::tls::with(|tcx| tcx.item_path_str(def_id))),\n-            Value { ref value } => fmt_const_val(fmt, value),\n+                write!(fmt, \"{}\", item_path_str(def_id)),\n+            Value { ref value } => {\n+                try!(write!(fmt, \"const \"));\n+                fmt_const_val(fmt, value)\n+            }\n         }\n     }\n }\n \n /// Write a `ConstVal` in a way closer to the original source code than the `Debug` output.\n-pub fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ConstVal) -> fmt::Result {\n+fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ConstVal) -> fmt::Result {\n     use middle::const_eval::ConstVal::*;\n     match *const_val {\n         Float(f) => write!(fmt, \"{:?}\", f),\n         Int(n) => write!(fmt, \"{:?}\", n),\n         Uint(n) => write!(fmt, \"{:?}\", n),\n-        Str(ref s) => write!(fmt, \"Str({:?})\", s),\n-        ByteStr(ref bytes) => write!(fmt, \"ByteStr{:?}\", bytes),\n+        Str(ref s) => write!(fmt, \"{:?}\", s),\n+        ByteStr(ref bytes) => {\n+            let escaped: String = bytes\n+                .iter()\n+                .flat_map(|&ch| ascii::escape_default(ch).map(|c| c as char))\n+                .collect();\n+            write!(fmt, \"b\\\"{}\\\"\", escaped)\n+        }\n         Bool(b) => write!(fmt, \"{:?}\", b),\n-        Struct(id) => write!(fmt, \"Struct({:?})\", id),\n-        Tuple(id) => write!(fmt, \"Tuple({:?})\", id),\n-        Function(def_id) => write!(fmt, \"Function({:?})\", def_id),\n-        Array(id, n) => write!(fmt, \"Array({:?}, {:?})\", id, n),\n-        Repeat(id, n) => write!(fmt, \"Repeat({:?}, {:?})\", id, n),\n+        Function(def_id) => write!(fmt, \"{}\", item_path_str(def_id)),\n+        Struct(node_id) | Tuple(node_id) | Array(node_id, _) | Repeat(node_id, _) =>\n+            write!(fmt, \"{}\", node_to_string(node_id)),\n     }\n }\n+\n+fn node_to_string(node_id: ast::NodeId) -> String {\n+    ty::tls::with(|tcx| tcx.map.node_to_user_string(node_id))\n+}\n+\n+fn item_path_str(def_id: DefId) -> String {\n+    ty::tls::with(|tcx| tcx.item_path_str(def_id))\n+}"}]}