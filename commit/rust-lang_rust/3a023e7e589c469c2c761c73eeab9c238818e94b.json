{"sha": "3a023e7e589c469c2c761c73eeab9c238818e94b", "node_id": "C_kwDOAAsO6NoAKDNhMDIzZTdlNTg5YzQ2OWMyYzc2MWM3M2VlYWI5YzIzODgxOGU5NGI", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-10T03:14:24Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-19T09:32:56Z"}, "message": "collapse dead code warnings into a single diagnostic\n\nadd comments in `store_dead_field_or_variant`\n\nsupport multiple log level\n\nadd a item ident label\n\nfix ui tests\n\nfix a ui test\n\nfix a rustdoc ui test\n\nuse let chain\n\nrefactor: remove `store_dead_field_or_variant`\n\nfix a tiny bug", "tree": {"sha": "9fa0d5340d69da74b08768b1d9b77d8a946b3958", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fa0d5340d69da74b08768b1d9b77d8a946b3958"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a023e7e589c469c2c761c73eeab9c238818e94b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a023e7e589c469c2c761c73eeab9c238818e94b", "html_url": "https://github.com/rust-lang/rust/commit/3a023e7e589c469c2c761c73eeab9c238818e94b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a023e7e589c469c2c761c73eeab9c238818e94b/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da27551f3ab25b395fa96709c7a559d04748d718", "url": "https://api.github.com/repos/rust-lang/rust/commits/da27551f3ab25b395fa96709c7a559d04748d718", "html_url": "https://github.com/rust-lang/rust/commit/da27551f3ab25b395fa96709c7a559d04748d718"}], "stats": {"total": 903, "additions": 565, "deletions": 338}, "files": [{"sha": "5a0c94d3b68c45cba969b592a0f52b1647d89d64", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -4286,6 +4286,7 @@ dependencies = [\n name = \"rustc_passes\"\n version = \"0.0.0\"\n dependencies = [\n+ \"itertools\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n  \"rustc_attr\","}, {"sha": "676812db59ae50031ab499aedcf8489bb5c3d10b", "filename": "compiler/rustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/compiler%2Frustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/compiler%2Frustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2FCargo.toml?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -5,6 +5,7 @@ edition = \"2021\"\n \n [dependencies]\n tracing = \"0.1\"\n+itertools = \"0.10.1\"\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }"}, {"sha": "01d93f6ff0c08025d708663893e454b5a450006f", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 181, "deletions": 70, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -2,8 +2,9 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n+use itertools::Itertools;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::pluralize;\n+use rustc_errors::{pluralize, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -164,9 +165,10 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                     if let (Res::Local(id_l), Res::Local(id_r)) = (\n                         typeck_results.qpath_res(qpath_l, lhs.hir_id),\n                         typeck_results.qpath_res(qpath_r, rhs.hir_id),\n-                    ) && id_l == id_r\n-                    {\n-                        return true;\n+                    ) {\n+                        if id_l == id_r {\n+                            return true;\n+                        }\n                     }\n                     return false;\n                 }\n@@ -269,13 +271,10 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n     }\n \n     fn visit_node(&mut self, node: Node<'tcx>) {\n-        match node {\n-            Node::ImplItem(hir::ImplItem { def_id, .. })\n-                if self.should_ignore_item(def_id.to_def_id()) =>\n-            {\n-                return;\n-            }\n-            _ => (),\n+        if let Node::ImplItem(hir::ImplItem { def_id, .. }) = node\n+            && self.should_ignore_item(def_id.to_def_id())\n+        {\n+            return;\n         }\n \n         let had_repr_c = self.repr_has_repr_c;\n@@ -624,11 +623,17 @@ fn live_symbols_and_ignored_derived_traits<'tcx>(\n     (symbol_visitor.live_symbols, symbol_visitor.ignored_derived_traits)\n }\n \n+struct DeadVariant {\n+    hir_id: hir::HirId,\n+    span: Span,\n+    name: Symbol,\n+    level: lint::Level,\n+}\n+\n struct DeadVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     live_symbols: &'tcx FxHashSet<LocalDefId>,\n     ignored_derived_traits: &'tcx FxHashMap<LocalDefId, Vec<(DefId, DefId)>>,\n-    ignored_struct_def: FxHashSet<LocalDefId>,\n }\n \n impl<'tcx> DeadVisitor<'tcx> {\n@@ -686,57 +691,119 @@ impl<'tcx> DeadVisitor<'tcx> {\n         false\n     }\n \n+    fn warn_multiple_dead_codes(\n+        &self,\n+        dead_codes: &[(hir::HirId, Span, Symbol)],\n+        participle: &str,\n+        parent_hir_id: Option<hir::HirId>,\n+    ) {\n+        if let Some((id, _, name)) = dead_codes.first()\n+            && !name.as_str().starts_with('_')\n+        {\n+            self.tcx.struct_span_lint_hir(\n+                lint::builtin::DEAD_CODE,\n+                *id,\n+                MultiSpan::from_spans(\n+                    dead_codes.iter().map(|(_, span, _)| *span).collect(),\n+                ),\n+                |lint| {\n+                    let def_id = self.tcx.hir().local_def_id(*id);\n+                    let descr = self.tcx.def_kind(def_id).descr(def_id.to_def_id());\n+                    let span_len = dead_codes.len();\n+                    let names = match &dead_codes.iter().map(|(_, _, n)| n.to_string()).collect::<Vec<_>>()[..]\n+                    {\n+                        _ if span_len > 6 => String::new(),\n+                        [name] => format!(\"`{name}` \"),\n+                        [names @ .., last] => {\n+                            format!(\"{} and `{last}` \", names.iter().map(|name| format!(\"`{name}`\")).join(\", \"))\n+                        }\n+                        [] => unreachable!(),\n+                    };\n+                    let mut err = lint.build(&format!(\n+                        \"{these}{descr}{s} {names}{are} never {participle}\",\n+                        these = if span_len > 6 { \"multiple \" } else { \"\" },\n+                        s = pluralize!(span_len),\n+                        are = pluralize!(\"is\", span_len),\n+                    ));\n+                    let hir = self.tcx.hir();\n+                    if let Some(parent_hir_id) = parent_hir_id\n+                        && let Some(parent_node) = hir.find(parent_hir_id)\n+                        && let Node::Item(item) = parent_node\n+                    {\n+                        let def_id = self.tcx.hir().local_def_id(parent_hir_id);\n+                        let parent_descr = self.tcx.def_kind(def_id).descr(def_id.to_def_id());\n+                        err.span_label(\n+                            item.ident.span,\n+                            format!(\n+                                \"{descr}{s} in this {parent_descr}\",\n+                                s = pluralize!(span_len)\n+                            ),\n+                        );\n+                    }\n+                    if let Some(encl_scope) = hir.get_enclosing_scope(*id)\n+                        && let Some(encl_def_id) = hir.opt_local_def_id(encl_scope)\n+                        && let Some(ign_traits) = self.ignored_derived_traits.get(&encl_def_id)\n+                    {\n+                        let traits_str = ign_traits\n+                            .iter()\n+                            .map(|(trait_id, _)| format!(\"`{}`\", self.tcx.item_name(*trait_id)))\n+                            .collect::<Vec<_>>()\n+                            .join(\" and \");\n+                        let plural_s = pluralize!(ign_traits.len());\n+                        let article = if ign_traits.len() > 1 { \"\" } else { \"a \" };\n+                        let is_are = if ign_traits.len() > 1 { \"these are\" } else { \"this is\" };\n+                        let msg = format!(\n+                            \"`{}` has {}derived impl{} for the trait{} {}, but {} \\\n+                            intentionally ignored during dead code analysis\",\n+                            self.tcx.item_name(encl_def_id.to_def_id()),\n+                            article,\n+                            plural_s,\n+                            plural_s,\n+                            traits_str,\n+                            is_are\n+                        );\n+                        err.note(&msg);\n+                    }\n+                        err.emit();\n+                    },\n+            );\n+        }\n+    }\n+\n+    fn warn_dead_fields_and_variants(\n+        &self,\n+        hir_id: hir::HirId,\n+        participle: &str,\n+        dead_codes: Vec<DeadVariant>,\n+    ) {\n+        let mut dead_codes = dead_codes\n+            .iter()\n+            .filter(|v| !v.name.as_str().starts_with('_'))\n+            .map(|v| v)\n+            .collect::<Vec<&DeadVariant>>();\n+        if dead_codes.is_empty() {\n+            return;\n+        }\n+        dead_codes.sort_by_key(|v| v.level);\n+        for (_, group) in &dead_codes.into_iter().group_by(|v| v.level) {\n+            self.warn_multiple_dead_codes(\n+                &group\n+                    .map(|v| (v.hir_id, v.span, v.name))\n+                    .collect::<Vec<(hir::HirId, Span, Symbol)>>(),\n+                participle,\n+                Some(hir_id),\n+            );\n+        }\n+    }\n+\n     fn warn_dead_code(\n         &mut self,\n         id: hir::HirId,\n         span: rustc_span::Span,\n         name: Symbol,\n         participle: &str,\n     ) {\n-        if !name.as_str().starts_with('_') {\n-            self.tcx.struct_span_lint_hir(lint::builtin::DEAD_CODE, id, span, |lint| {\n-                let def_id = self.tcx.hir().local_def_id(id);\n-                let descr = self.tcx.def_kind(def_id).descr(def_id.to_def_id());\n-                let mut err = lint.build(&format!(\"{descr} is never {participle}: `{name}`\"));\n-                let hir = self.tcx.hir();\n-                let is_field_in_same_struct =\n-                    if let Some(parent_hir_id) = self.tcx.hir().find_parent_node(id)\n-                        && let Some(parent_node) = self.tcx.hir().find(parent_hir_id)\n-                        && let Node::Item(hir::Item{kind: hir::ItemKind::Struct(..), ..}) = parent_node\n-                        && let Some(did) = self.tcx.hir().opt_local_def_id(parent_hir_id)\n-                    {\n-                        !self.ignored_struct_def.insert(did)\n-                    } else {\n-                        false\n-                    };\n-                if !is_field_in_same_struct\n-                    && let Some(encl_scope) = hir.get_enclosing_scope(id)\n-                    && let Some(encl_def_id) = hir.opt_local_def_id(encl_scope)\n-                    && let Some(ign_traits) = self.ignored_derived_traits.get(&encl_def_id)\n-                {\n-                    let traits_str = ign_traits\n-                        .iter()\n-                        .map(|(trait_id, _)| format!(\"`{}`\", self.tcx.item_name(*trait_id)))\n-                        .collect::<Vec<_>>()\n-                        .join(\" and \");\n-                    let plural_s = pluralize!(ign_traits.len());\n-                    let article = if ign_traits.len() > 1 { \"\" } else { \"a \" };\n-                    let is_are = if ign_traits.len() > 1 { \"these are\" } else { \"this is\" };\n-                    let msg = format!(\n-                        \"`{}` has {}derived impl{} for the trait{} {}, but {} \\\n-                        intentionally ignored during dead code analysis\",\n-                        self.tcx.item_name(encl_def_id.to_def_id()),\n-                        article,\n-                        plural_s,\n-                        plural_s,\n-                        traits_str,\n-                        is_are\n-                    );\n-                    err.note(&msg);\n-                }\n-                err.emit();\n-            });\n-        }\n+        self.warn_multiple_dead_codes(&[(id, span, name)], participle, None);\n     }\n }\n \n@@ -790,15 +857,40 @@ impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n     // This visitor should only visit a single module at a time.\n     fn visit_mod(&mut self, _: &'tcx hir::Mod<'tcx>, _: Span, _: hir::HirId) {}\n \n+    fn visit_enum_def(\n+        &mut self,\n+        enum_definition: &'tcx hir::EnumDef<'tcx>,\n+        generics: &'tcx hir::Generics<'tcx>,\n+        item_id: hir::HirId,\n+        _: Span,\n+    ) {\n+        intravisit::walk_enum_def(self, enum_definition, generics, item_id);\n+        let dead_variants = enum_definition\n+            .variants\n+            .iter()\n+            .filter_map(|variant| {\n+                if self.should_warn_about_variant(&variant) {\n+                    Some(DeadVariant {\n+                        hir_id: variant.id,\n+                        span: variant.span,\n+                        name: variant.ident.name,\n+                        level: self.tcx.lint_level_at_node(lint::builtin::DEAD_CODE, variant.id).0,\n+                    })\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect();\n+        self.warn_dead_fields_and_variants(item_id, \"constructed\", dead_variants)\n+    }\n+\n     fn visit_variant(\n         &mut self,\n         variant: &'tcx hir::Variant<'tcx>,\n         g: &'tcx hir::Generics<'tcx>,\n         id: hir::HirId,\n     ) {\n-        if self.should_warn_about_variant(&variant) {\n-            self.warn_dead_code(variant.id, variant.span, variant.ident.name, \"constructed\");\n-        } else {\n+        if !self.should_warn_about_variant(&variant) {\n             intravisit::walk_variant(self, variant, g, id);\n         }\n     }\n@@ -810,11 +902,35 @@ impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n         intravisit::walk_foreign_item(self, fi);\n     }\n \n-    fn visit_field_def(&mut self, field: &'tcx hir::FieldDef<'tcx>) {\n-        if self.should_warn_about_field(&field) {\n-            self.warn_dead_code(field.hir_id, field.span, field.ident.name, \"read\");\n-        }\n-        intravisit::walk_field_def(self, field);\n+    fn visit_variant_data(\n+        &mut self,\n+        def: &'tcx hir::VariantData<'tcx>,\n+        _: Symbol,\n+        _: &hir::Generics<'_>,\n+        id: hir::HirId,\n+        _: rustc_span::Span,\n+    ) {\n+        intravisit::walk_struct_def(self, def);\n+        let dead_fields = def\n+            .fields()\n+            .iter()\n+            .filter_map(|field| {\n+                if self.should_warn_about_field(&field) {\n+                    Some(DeadVariant {\n+                        hir_id: field.hir_id,\n+                        span: field.span,\n+                        name: field.ident.name,\n+                        level: self\n+                            .tcx\n+                            .lint_level_at_node(lint::builtin::DEAD_CODE, field.hir_id)\n+                            .0,\n+                    })\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect();\n+        self.warn_dead_fields_and_variants(id, \"read\", dead_fields)\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n@@ -867,12 +983,7 @@ impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n \n fn check_mod_deathness(tcx: TyCtxt<'_>, module: LocalDefId) {\n     let (live_symbols, ignored_derived_traits) = tcx.live_symbols_and_ignored_derived_traits(());\n-    let mut visitor = DeadVisitor {\n-        tcx,\n-        live_symbols,\n-        ignored_derived_traits,\n-        ignored_struct_def: FxHashSet::default(),\n-    };\n+    let mut visitor = DeadVisitor { tcx, live_symbols, ignored_derived_traits };\n     let (module, _, module_id) = tcx.hir().get_module(module);\n     // Do not use an ItemLikeVisitor since we may want to skip visiting some items\n     // when a surrounding one is warned against or `_`."}, {"sha": "ad25d1ce54140a0305d9902a26b347a44e8822b9", "filename": "src/test/rustdoc-ui/display-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.stdout?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -24,7 +24,7 @@ warning: unused variable: `x`\n LL | fn foo(x: &dyn std::fmt::Display) {}\n    |        ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n-warning: function is never used: `foo`\n+warning: function `foo` is never used\n   --> $DIR/display-output.rs:13:4\n    |\n LL | fn foo(x: &dyn std::fmt::Display) {}"}, {"sha": "f7b676418ff3656ad046bc806a27ca57ec901da7", "filename": "src/test/ui/associated-consts/associated-const-dead-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -4,7 +4,7 @@ struct MyFoo;\n \n impl MyFoo {\n     const BAR: u32 = 1;\n-    //~^ ERROR associated constant is never used: `BAR`\n+    //~^ ERROR associated constant `BAR` is never used\n }\n \n fn main() {"}, {"sha": "7a4dbfe087b5aad6d7a34b9522bcf85751ad3d27", "filename": "src/test/ui/associated-consts/associated-const-dead-code.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-error: associated constant is never used: `BAR`\n+error: associated constant `BAR` is never used\n   --> $DIR/associated-const-dead-code.rs:6:5\n    |\n LL |     const BAR: u32 = 1;"}, {"sha": "d26343c33cfbe1d9507533fa90f7437315ecebe3", "filename": "src/test/ui/closures/2229_closure_analysis/issue-87987.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -2,16 +2,13 @@\n // edition:2021\n \n struct Props {\n-    field_1: u32, //~ WARNING: field is never read: `field_1`\n-    field_2: u32, //~ WARNING: field is never read: `field_2`\n+    field_1: u32, //~ WARNING: fields `field_1` and `field_2` are never read\n+    field_2: u32,\n }\n \n fn main() {\n     // Test 1\n-    let props_2 = Props {\n-        field_1: 1,\n-        field_2: 1,\n-    };\n+    let props_2 = Props { field_1: 1, field_2: 1 };\n \n     let _ = || {\n         let _: Props = props_2;\n@@ -23,7 +20,7 @@ fn main() {\n     let mref = &mut arr;\n \n     let _c = || match arr {\n-        [_, _, _, _] => println!(\"A\")\n+        [_, _, _, _] => println!(\"A\"),\n     };\n \n     println!(\"{:#?}\", mref);"}, {"sha": "57b8f7ae60978274daeff53df27a25dfc4b7f99f", "filename": "src/test/ui/closures/2229_closure_analysis/issue-87987.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,16 +1,14 @@\n-warning: field is never read: `field_1`\n+warning: fields `field_1` and `field_2` are never read\n   --> $DIR/issue-87987.rs:5:5\n    |\n+LL | struct Props {\n+   |        ----- fields in this struct\n LL |     field_1: u32,\n    |     ^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(dead_code)]` on by default\n-\n-warning: field is never read: `field_2`\n-  --> $DIR/issue-87987.rs:6:5\n-   |\n LL |     field_2: u32,\n    |     ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(dead_code)]` on by default\n \n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "815fc0a719cfdebeaf4416daa990ffdb651d7f86", "filename": "src/test/ui/closures/2229_closure_analysis/match/issue-87097.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -3,7 +3,7 @@\n \n enum Variant {\n     A,\n-    B, //~ WARNING: variant is never constructed: `B`\n+    B, //~ WARNING: variant `B` is never constructed\n }\n \n struct A {"}, {"sha": "2a49ed4b5ff4493015b5dbbac0619887816c43ee", "filename": "src/test/ui/closures/2229_closure_analysis/match/issue-87097.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,6 +1,9 @@\n-warning: variant is never constructed: `B`\n+warning: variant `B` is never constructed\n   --> $DIR/issue-87097.rs:6:5\n    |\n+LL | enum Variant {\n+   |      ------- variant in this enum\n+LL |     A,\n LL |     B,\n    |     ^\n    |"}, {"sha": "0089453ef0f3991174aaf63b5be8246c5f8cb6f2", "filename": "src/test/ui/derive-uninhabited-enum-38885.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -10,7 +10,7 @@ enum Void {}\n #[derive(Debug)]\n enum Foo {\n     Bar(u8),\n-    Void(Void), //~ WARN never constructed\n+    Void(Void), //~ WARN variant `Void` is never constructed\n }\n \n fn main() {"}, {"sha": "4feaf3ac96185a9c28fac210f16454465a61040d", "filename": "src/test/ui/derive-uninhabited-enum-38885.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,6 +1,9 @@\n-warning: variant is never constructed: `Void`\n+warning: variant `Void` is never constructed\n   --> $DIR/derive-uninhabited-enum-38885.rs:13:5\n    |\n+LL | enum Foo {\n+   |      --- variant in this enum\n+LL |     Bar(u8),\n LL |     Void(Void),\n    |     ^^^^^^^^^^\n    |"}, {"sha": "15d06817577ea2bd51650b114ba024475280bef7", "filename": "src/test/ui/derives/clone-debug-dead-code-in-the-same-struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -3,10 +3,10 @@\n #[derive(Debug)]\n pub struct Whatever {\n     pub field0: (),\n-    field1: (), //~ERROR field is never read: `field1\n-    field2: (), //~ERROR field is never read: `field2\n-    field3: (), //~ERROR field is never read: `field3\n-    field4: (), //~ERROR field is never read: `field4\n+    field1: (), //~ ERROR fields `field1`, `field2`, `field3` and `field4` are never read\n+    field2: (),\n+    field3: (),\n+    field4: (),\n }\n \n fn main() {}"}, {"sha": "383e0b4b725db51c9f5592e162e60448d1e34cef", "filename": "src/test/ui/derives/clone-debug-dead-code-in-the-same-struct.stderr", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,8 +1,17 @@\n-error: field is never read: `field1`\n+error: fields `field1`, `field2`, `field3` and `field4` are never read\n   --> $DIR/clone-debug-dead-code-in-the-same-struct.rs:6:5\n    |\n+LL | pub struct Whatever {\n+   |            -------- fields in this struct\n+LL |     pub field0: (),\n LL |     field1: (),\n    |     ^^^^^^^^^^\n+LL |     field2: (),\n+   |     ^^^^^^^^^^\n+LL |     field3: (),\n+   |     ^^^^^^^^^^\n+LL |     field4: (),\n+   |     ^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/clone-debug-dead-code-in-the-same-struct.rs:1:11\n@@ -11,23 +20,5 @@ LL | #![forbid(dead_code)]\n    |           ^^^^^^^^^\n    = note: `Whatever` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n \n-error: field is never read: `field2`\n-  --> $DIR/clone-debug-dead-code-in-the-same-struct.rs:7:5\n-   |\n-LL |     field2: (),\n-   |     ^^^^^^^^^^\n-\n-error: field is never read: `field3`\n-  --> $DIR/clone-debug-dead-code-in-the-same-struct.rs:8:5\n-   |\n-LL |     field3: (),\n-   |     ^^^^^^^^^^\n-\n-error: field is never read: `field4`\n-  --> $DIR/clone-debug-dead-code-in-the-same-struct.rs:9:5\n-   |\n-LL |     field4: (),\n-   |     ^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n "}, {"sha": "ab49260c01bab4dbb5f3f3a36c1565b465108c70", "filename": "src/test/ui/derives/clone-debug-dead-code.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -4,22 +4,22 @@\n #![forbid(dead_code)]\n \n struct A { f: () }\n-//~^ ERROR: field is never read: `f`\n+//~^ ERROR: field `f` is never read\n \n #[derive(Clone)]\n struct B { f: () }\n-//~^ ERROR: field is never read: `f`\n+//~^ ERROR: field `f` is never read\n \n #[derive(Debug)]\n struct C { f: () }\n-//~^ ERROR: field is never read: `f`\n+//~^ ERROR: field `f` is never read\n \n #[derive(Debug,Clone)]\n struct D { f: () }\n-//~^ ERROR: field is never read: `f`\n+//~^ ERROR: field `f` is never read\n \n struct E { f: () }\n-//~^ ERROR: field is never read: `f`\n+//~^ ERROR: field `f` is never read\n // Custom impl, still doesn't read f\n impl Clone for E {\n     fn clone(&self) -> Self {"}, {"sha": "73a002511884a68db4097ca321f5346c852f9a1b", "filename": "src/test/ui/derives/clone-debug-dead-code.stderr", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,44 +1,54 @@\n-error: field is never read: `f`\n+error: field `f` is never read\n   --> $DIR/clone-debug-dead-code.rs:6:12\n    |\n LL | struct A { f: () }\n-   |            ^^^^^\n+   |        -   ^^^^^\n+   |        |\n+   |        field in this struct\n    |\n note: the lint level is defined here\n   --> $DIR/clone-debug-dead-code.rs:4:11\n    |\n LL | #![forbid(dead_code)]\n    |           ^^^^^^^^^\n \n-error: field is never read: `f`\n+error: field `f` is never read\n   --> $DIR/clone-debug-dead-code.rs:10:12\n    |\n LL | struct B { f: () }\n-   |            ^^^^^\n+   |        -   ^^^^^\n+   |        |\n+   |        field in this struct\n    |\n    = note: `B` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n \n-error: field is never read: `f`\n+error: field `f` is never read\n   --> $DIR/clone-debug-dead-code.rs:14:12\n    |\n LL | struct C { f: () }\n-   |            ^^^^^\n+   |        -   ^^^^^\n+   |        |\n+   |        field in this struct\n    |\n    = note: `C` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n \n-error: field is never read: `f`\n+error: field `f` is never read\n   --> $DIR/clone-debug-dead-code.rs:18:12\n    |\n LL | struct D { f: () }\n-   |            ^^^^^\n+   |        -   ^^^^^\n+   |        |\n+   |        field in this struct\n    |\n    = note: `D` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n \n-error: field is never read: `f`\n+error: field `f` is never read\n   --> $DIR/clone-debug-dead-code.rs:21:12\n    |\n LL | struct E { f: () }\n-   |            ^^^^^\n+   |        -   ^^^^^\n+   |        |\n+   |        field in this struct\n \n error: aborting due to 5 previous errors\n "}, {"sha": "b3a870d505a2d9d887b285e6f24f4852093f5cc5", "filename": "src/test/ui/issues/issue-37515.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fissues%2Fissue-37515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fissues%2Fissue-37515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37515.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -3,6 +3,6 @@\n #![warn(unused)]\n \n type Z = dyn for<'x> Send;\n-//~^ WARN type alias is never used\n+//~^ WARN type alias `Z` is never used\n \n fn main() {}"}, {"sha": "c9bb4c10010f5448121a8bef6969009b84c92591", "filename": "src/test/ui/issues/issue-37515.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-warning: type alias is never used: `Z`\n+warning: type alias `Z` is never used\n   --> $DIR/issue-37515.rs:5:1\n    |\n LL | type Z = dyn for<'x> Send;"}, {"sha": "3b8ffd58cb54ec1d5b81064c2aaaf190d8ec6a27", "filename": "src/test/ui/lint/dead-code/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fbasic.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,7 +1,7 @@\n #![deny(dead_code)]\n #![allow(unreachable_code)]\n \n-fn foo() { //~ ERROR function is never used\n+fn foo() { //~ ERROR function `foo` is never used\n \n     // none of these should have any dead_code exposed to the user\n     panic!();"}, {"sha": "7d068cead44b17bd6b86aa66d9821e58d72d896f", "filename": "src/test/ui/lint/dead-code/basic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fbasic.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-error: function is never used: `foo`\n+error: function `foo` is never used\n   --> $DIR/basic.rs:4:4\n    |\n LL | fn foo() {"}, {"sha": "5c96e4d0ecb9e1cbda05e13b6511f02eebd90c5e", "filename": "src/test/ui/lint/dead-code/const-and-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fconst-and-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fconst-and-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fconst-and-self.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -30,8 +30,8 @@ impl Foo<Y> for X {\n \n enum E {\n     A,\n-    B, //~ WARN variant is never constructed: `B`\n-    C, //~ WARN variant is never constructed: `C`\n+    B, //~ WARN variants `B` and `C` are never constructed\n+    C,\n }\n \n type F = E;"}, {"sha": "9d1d7d6ecde712214779c5af0a9e77eed321e69a", "filename": "src/test/ui/lint/dead-code/const-and-self.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fconst-and-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fconst-and-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fconst-and-self.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,20 +1,19 @@\n-warning: variant is never constructed: `B`\n+warning: variants `B` and `C` are never constructed\n   --> $DIR/const-and-self.rs:33:5\n    |\n+LL | enum E {\n+   |      - variants in this enum\n+LL |     A,\n LL |     B,\n    |     ^\n+LL |     C,\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/const-and-self.rs:3:9\n    |\n LL | #![warn(dead_code)]\n    |         ^^^^^^^^^\n \n-warning: variant is never constructed: `C`\n-  --> $DIR/const-and-self.rs:34:5\n-   |\n-LL |     C,\n-   |     ^\n-\n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "864501e94952c94bc4ad88d13eb08f7d6cb08c3b", "filename": "src/test/ui/lint/dead-code/empty-unused-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fempty-unused-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fempty-unused-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fempty-unused-enum.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,5 +1,5 @@\n #![deny(unused)]\n \n-enum E {} //~ ERROR enum is never used\n+enum E {} //~ ERROR enum `E` is never used\n \n fn main() {}"}, {"sha": "6391f0941c86f1477d9a2259af1d5601e86d39b1", "filename": "src/test/ui/lint/dead-code/empty-unused-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fempty-unused-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fempty-unused-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fempty-unused-enum.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-error: enum is never used: `E`\n+error: enum `E` is never used\n   --> $DIR/empty-unused-enum.rs:3:6\n    |\n LL | enum E {}"}, {"sha": "757b8f83ef0715e611bcb6711ae49179f9364a5f", "filename": "src/test/ui/lint/dead-code/impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fimpl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fimpl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fimpl-trait.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -9,7 +9,7 @@ impl Trait for () {\n }\n \n type Used = ();\n-type Unused = (); //~ ERROR type alias is never used\n+type Unused = (); //~ ERROR type alias `Unused` is never used\n \n fn foo() -> impl Trait<Type = Used> {}\n "}, {"sha": "9c47c1b53555f4464b3882d64f273c2f235f5694", "filename": "src/test/ui/lint/dead-code/impl-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fimpl-trait.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-error: type alias is never used: `Unused`\n+error: type alias `Unused` is never used\n   --> $DIR/impl-trait.rs:12:1\n    |\n LL | type Unused = ();"}, {"sha": "043f68137b81d54b7238874204801694e467fda0", "filename": "src/test/ui/lint/dead-code/issue-85255.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -4,39 +4,39 @@\n #![warn(dead_code)]\n \n struct Foo {\n-    a: i32, //~ WARNING: field is never read\n-    pub b: i32, //~ WARNING: field is never read\n+    a: i32, //~ WARNING: fields `a` and `b` are never read\n+    pub b: i32,\n }\n \n struct Bar;\n \n impl Bar {\n-    fn a(&self) -> i32 { 5 } //~ WARNING: associated function is never used\n-    pub fn b(&self) -> i32 { 6 } //~ WARNING: associated function is never used\n+    fn a(&self) -> i32 { 5 } //~ WARNING: associated function `a` is never used\n+    pub fn b(&self) -> i32 { 6 } //~ WARNING: associated function `b` is never used\n }\n \n pub(crate) struct Foo1 {\n-    a: i32, //~ WARNING: field is never read\n-    pub b: i32, //~ WARNING: field is never read\n+    a: i32, //~ WARNING: fields `a` and `b` are never read\n+    pub b: i32,\n }\n \n pub(crate) struct Bar1;\n \n impl Bar1 {\n-    fn a(&self) -> i32 { 5 } //~ WARNING: associated function is never used\n-    pub fn b(&self) -> i32 { 6 } //~ WARNING: associated function is never used\n+    fn a(&self) -> i32 { 5 } //~ WARNING: associated function `a` is never used\n+    pub fn b(&self) -> i32 { 6 } //~ WARNING: associated function `b` is never used\n }\n \n pub(crate) struct Foo2 {\n-    a: i32, //~ WARNING: field is never read\n-    pub b: i32, //~ WARNING: field is never read\n+    a: i32, //~ WARNING: fields `a` and `b` are never read\n+    pub b: i32,\n }\n \n pub(crate) struct Bar2;\n \n impl Bar2 {\n-    fn a(&self) -> i32 { 5 } //~ WARNING: associated function is never used\n-    pub fn b(&self) -> i32 { 6 } //~ WARNING: associated function is never used\n+    fn a(&self) -> i32 { 5 } //~ WARNING: associated function `a` is never used\n+    pub fn b(&self) -> i32 { 6 } //~ WARNING: associated function `b` is never used\n }\n \n "}, {"sha": "7ebbebb1abad7dc3617cd48bc665a70afe6be15b", "filename": "src/test/ui/lint/dead-code/issue-85255.stderr", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,80 +1,74 @@\n-warning: field is never read: `a`\n+warning: fields `a` and `b` are never read\n   --> $DIR/issue-85255.rs:7:5\n    |\n+LL | struct Foo {\n+   |        --- fields in this struct\n LL |     a: i32,\n    |     ^^^^^^\n+LL |     pub b: i32,\n+   |     ^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/issue-85255.rs:4:9\n    |\n LL | #![warn(dead_code)]\n    |         ^^^^^^^^^\n \n-warning: field is never read: `b`\n-  --> $DIR/issue-85255.rs:8:5\n-   |\n-LL |     pub b: i32,\n-   |     ^^^^^^^^^^\n-\n-warning: associated function is never used: `a`\n+warning: associated function `a` is never used\n   --> $DIR/issue-85255.rs:14:8\n    |\n LL |     fn a(&self) -> i32 { 5 }\n    |        ^\n \n-warning: associated function is never used: `b`\n+warning: associated function `b` is never used\n   --> $DIR/issue-85255.rs:15:12\n    |\n LL |     pub fn b(&self) -> i32 { 6 }\n    |            ^\n \n-warning: field is never read: `a`\n+warning: fields `a` and `b` are never read\n   --> $DIR/issue-85255.rs:19:5\n    |\n+LL | pub(crate) struct Foo1 {\n+   |                   ---- fields in this struct\n LL |     a: i32,\n    |     ^^^^^^\n-\n-warning: field is never read: `b`\n-  --> $DIR/issue-85255.rs:20:5\n-   |\n LL |     pub b: i32,\n    |     ^^^^^^^^^^\n \n-warning: associated function is never used: `a`\n+warning: associated function `a` is never used\n   --> $DIR/issue-85255.rs:26:8\n    |\n LL |     fn a(&self) -> i32 { 5 }\n    |        ^\n \n-warning: associated function is never used: `b`\n+warning: associated function `b` is never used\n   --> $DIR/issue-85255.rs:27:12\n    |\n LL |     pub fn b(&self) -> i32 { 6 }\n    |            ^\n \n-warning: field is never read: `a`\n+warning: fields `a` and `b` are never read\n   --> $DIR/issue-85255.rs:31:5\n    |\n+LL | pub(crate) struct Foo2 {\n+   |                   ---- fields in this struct\n LL |     a: i32,\n    |     ^^^^^^\n-\n-warning: field is never read: `b`\n-  --> $DIR/issue-85255.rs:32:5\n-   |\n LL |     pub b: i32,\n    |     ^^^^^^^^^^\n \n-warning: associated function is never used: `a`\n+warning: associated function `a` is never used\n   --> $DIR/issue-85255.rs:38:8\n    |\n LL |     fn a(&self) -> i32 { 5 }\n    |        ^\n \n-warning: associated function is never used: `b`\n+warning: associated function `b` is never used\n   --> $DIR/issue-85255.rs:39:12\n    |\n LL |     pub fn b(&self) -> i32 { 6 }\n    |            ^\n \n-warning: 12 warnings emitted\n+warning: 9 warnings emitted\n "}, {"sha": "8f5a4c41ef20dcd24e7312db76ca22a7ee0f4e4c", "filename": "src/test/ui/lint/dead-code/lint-dead-code-1.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -9,30 +9,30 @@\n pub use foo2::Bar2;\n \n mod foo {\n-    pub struct Bar; //~ ERROR: struct is never constructed\n+    pub struct Bar; //~ ERROR: struct `Bar` is never constructed\n }\n \n mod foo2 {\n     pub struct Bar2;\n }\n \n pub static pub_static: isize = 0;\n-static priv_static: isize = 0; //~ ERROR: static is never used\n+static priv_static: isize = 0; //~ ERROR: static `priv_static` is never used\n const used_static: isize = 0;\n pub static used_static2: isize = used_static;\n const USED_STATIC: isize = 0;\n const STATIC_USED_IN_ENUM_DISCRIMINANT: isize = 10;\n \n pub const pub_const: isize = 0;\n-const priv_const: isize = 0; //~ ERROR: constant is never used\n+const priv_const: isize = 0; //~ ERROR: constant `priv_const` is never used\n const used_const: isize = 0;\n pub const used_const2: isize = used_const;\n const USED_CONST: isize = 1;\n const CONST_USED_IN_ENUM_DISCRIMINANT: isize = 11;\n \n pub type typ = *const UsedStruct4;\n pub struct PubStruct;\n-struct PrivStruct; //~ ERROR: struct is never constructed\n+struct PrivStruct; //~ ERROR: struct `PrivStruct` is never constructed\n struct UsedStruct1 {\n     #[allow(dead_code)]\n     x: isize\n@@ -61,10 +61,10 @@ pub enum pub_enum3 {\n     Bar = CONST_USED_IN_ENUM_DISCRIMINANT,\n }\n \n-enum priv_enum { foo2, bar2 } //~ ERROR: enum is never used\n+enum priv_enum { foo2, bar2 } //~ ERROR: enum `priv_enum` is never used\n enum used_enum {\n     foo3,\n-    bar3 //~ ERROR variant is never constructed\n+    bar3 //~ ERROR variant `bar3` is never constructed\n }\n \n fn f<T>() {}\n@@ -85,21 +85,21 @@ pub fn pub_fn() {\n     }\n     f::<StructUsedInGeneric>();\n }\n-fn priv_fn() { //~ ERROR: function is never used\n+fn priv_fn() { //~ ERROR: function `priv_fn` is never used\n     let unused_struct = PrivStruct;\n }\n fn used_fn() {}\n \n-fn foo() { //~ ERROR: function is never used\n+fn foo() { //~ ERROR: function `foo` is never used\n     bar();\n     let unused_enum = priv_enum::foo2;\n }\n \n-fn bar() { //~ ERROR: function is never used\n+fn bar() { //~ ERROR: function `bar` is never used\n     foo();\n }\n \n-fn baz() -> impl Copy { //~ ERROR: function is never used\n+fn baz() -> impl Copy { //~ ERROR: function `baz` is never used\n     \"I'm unused, too\"\n }\n "}, {"sha": "2eddc4ce21cd513e2e8a7d1147c01007e23b54a3", "filename": "src/test/ui/lint/dead-code/lint-dead-code-1.stderr", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-error: static is never used: `priv_static`\n+error: static `priv_static` is never used\n   --> $DIR/lint-dead-code-1.rs:20:1\n    |\n LL | static priv_static: isize = 0;\n@@ -10,55 +10,58 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: constant is never used: `priv_const`\n+error: constant `priv_const` is never used\n   --> $DIR/lint-dead-code-1.rs:27:1\n    |\n LL | const priv_const: isize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: struct is never constructed: `PrivStruct`\n+error: struct `PrivStruct` is never constructed\n   --> $DIR/lint-dead-code-1.rs:35:8\n    |\n LL | struct PrivStruct;\n    |        ^^^^^^^^^^\n \n-error: enum is never used: `priv_enum`\n+error: enum `priv_enum` is never used\n   --> $DIR/lint-dead-code-1.rs:64:6\n    |\n LL | enum priv_enum { foo2, bar2 }\n    |      ^^^^^^^^^\n \n-error: variant is never constructed: `bar3`\n+error: variant `bar3` is never constructed\n   --> $DIR/lint-dead-code-1.rs:67:5\n    |\n+LL | enum used_enum {\n+   |      --------- variant in this enum\n+LL |     foo3,\n LL |     bar3\n    |     ^^^^\n \n-error: function is never used: `priv_fn`\n+error: function `priv_fn` is never used\n   --> $DIR/lint-dead-code-1.rs:88:4\n    |\n LL | fn priv_fn() {\n    |    ^^^^^^^\n \n-error: function is never used: `foo`\n+error: function `foo` is never used\n   --> $DIR/lint-dead-code-1.rs:93:4\n    |\n LL | fn foo() {\n    |    ^^^\n \n-error: function is never used: `bar`\n+error: function `bar` is never used\n   --> $DIR/lint-dead-code-1.rs:98:4\n    |\n LL | fn bar() {\n    |    ^^^\n \n-error: function is never used: `baz`\n+error: function `baz` is never used\n   --> $DIR/lint-dead-code-1.rs:102:4\n    |\n LL | fn baz() -> impl Copy {\n    |    ^^^\n \n-error: struct is never constructed: `Bar`\n+error: struct `Bar` is never constructed\n   --> $DIR/lint-dead-code-1.rs:12:16\n    |\n LL |     pub struct Bar;"}, {"sha": "6bfa4d96f710b18e0d7f05d2fe0e81998dcb7afc", "filename": "src/test/ui/lint/dead-code/lint-dead-code-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-2.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -19,10 +19,10 @@ impl Bar for Foo {\n \n fn live_fn() {}\n \n-fn dead_fn() {} //~ ERROR: function is never used\n+fn dead_fn() {} //~ ERROR: function `dead_fn` is never used\n \n #[rustc_main]\n-fn dead_fn2() {} //~ ERROR: function is never used\n+fn dead_fn2() {} //~ ERROR: function `dead_fn2` is never used\n \n fn used_fn() {}\n \n@@ -35,7 +35,7 @@ fn start(_: isize, _: *const *const u8) -> isize {\n }\n \n // this is not main\n-fn main() { //~ ERROR: function is never used\n+fn main() { //~ ERROR: function `main` is never used\n     dead_fn();\n     dead_fn2();\n }"}, {"sha": "85af553c9867f6ff4e884659ac75ca92572a195d", "filename": "src/test/ui/lint/dead-code/lint-dead-code-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-2.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-error: function is never used: `dead_fn`\n+error: function `dead_fn` is never used\n   --> $DIR/lint-dead-code-2.rs:22:4\n    |\n LL | fn dead_fn() {}\n@@ -10,13 +10,13 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: function is never used: `dead_fn2`\n+error: function `dead_fn2` is never used\n   --> $DIR/lint-dead-code-2.rs:25:4\n    |\n LL | fn dead_fn2() {}\n    |    ^^^^^^^^\n \n-error: function is never used: `main`\n+error: function `main` is never used\n   --> $DIR/lint-dead-code-2.rs:38:4\n    |\n LL | fn main() {"}, {"sha": "c3e56063dc3db3503a8d3d9180c2cf03ced40186", "filename": "src/test/ui/lint/dead-code/lint-dead-code-3.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -11,14 +11,14 @@ extern \"C\" {\n     pub fn extern_foo();\n }\n \n-struct Foo; //~ ERROR: struct is never constructed\n+struct Foo; //~ ERROR: struct `Foo` is never constructed\n impl Foo {\n-    fn foo(&self) { //~ ERROR: associated function is never used\n+    fn foo(&self) { //~ ERROR: associated function `foo` is never used\n         bar()\n     }\n }\n \n-fn bar() { //~ ERROR: function is never used\n+fn bar() { //~ ERROR: function `bar` is never used\n     fn baz() {}\n \n     Foo.foo();\n@@ -57,9 +57,9 @@ mod blah {\n     }\n }\n \n-enum c_void {} //~ ERROR: enum is never used\n+enum c_void {} //~ ERROR: enum `c_void` is never used\n extern \"C\" {\n-    fn free(p: *const c_void); //~ ERROR: function is never used\n+    fn free(p: *const c_void); //~ ERROR: function `free` is never used\n }\n \n // Check provided method"}, {"sha": "af59c6fec1f8d897d21528baff166277a494e2c3", "filename": "src/test/ui/lint/dead-code/lint-dead-code-3.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-error: struct is never constructed: `Foo`\n+error: struct `Foo` is never constructed\n   --> $DIR/lint-dead-code-3.rs:14:8\n    |\n LL | struct Foo;\n@@ -10,25 +10,25 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: associated function is never used: `foo`\n+error: associated function `foo` is never used\n   --> $DIR/lint-dead-code-3.rs:16:8\n    |\n LL |     fn foo(&self) {\n    |        ^^^\n \n-error: function is never used: `bar`\n+error: function `bar` is never used\n   --> $DIR/lint-dead-code-3.rs:21:4\n    |\n LL | fn bar() {\n    |    ^^^\n \n-error: enum is never used: `c_void`\n+error: enum `c_void` is never used\n   --> $DIR/lint-dead-code-3.rs:60:6\n    |\n LL | enum c_void {}\n    |      ^^^^^^\n \n-error: function is never used: `free`\n+error: function `free` is never used\n   --> $DIR/lint-dead-code-3.rs:62:5\n    |\n LL |     fn free(p: *const c_void);"}, {"sha": "0fc6c6156fd93f63eaed4e64f51417df70763730", "filename": "src/test/ui/lint/dead-code/lint-dead-code-4.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -4,24 +4,24 @@\n \n struct Foo {\n     x: usize,\n-    b: bool, //~ ERROR: field is never read\n+    b: bool, //~ ERROR: field `b` is never read\n }\n \n fn field_read(f: Foo) -> usize {\n     f.x.pow(2)\n }\n \n enum XYZ {\n-    X, //~ ERROR variant is never constructed\n-    Y { //~ ERROR variant is never constructed\n+    X, //~ ERROR variants `X` and `Y` are never constructed\n+    Y {\n         a: String,\n         b: i32,\n         c: i32,\n     },\n     Z\n }\n \n-enum ABC { //~ ERROR enum is never used\n+enum ABC { //~ ERROR enum `ABC` is never used\n     A,\n     B {\n         a: String,\n@@ -33,13 +33,13 @@ enum ABC { //~ ERROR enum is never used\n \n // ensure struct variants get warning for their fields\n enum IJK {\n-    I, //~ ERROR variant is never constructed\n+    I, //~ ERROR variants `I` and `K` are never constructed\n     J {\n         a: String,\n-        b: i32, //~ ERROR field is never read\n-        c: i32, //~ ERROR field is never read\n+        b: i32, //~ ERROR fields `b` and `c` are never read\n+        c: i32,\n     },\n-    K //~ ERROR variant is never constructed\n+    K\n \n }\n \n@@ -58,9 +58,9 @@ fn field_match_in_patterns(b: XYZ) -> String {\n }\n \n struct Bar {\n-    x: usize, //~ ERROR: field is never read\n+    x: usize, //~ ERROR: fields `x` and `c` are never read\n     b: bool,\n-    c: bool, //~ ERROR: field is never read\n+    c: bool,\n     _guard: ()\n }\n "}, {"sha": "dcd810b3e48e49a7b883f919273a6c961c3cf6fa", "filename": "src/test/ui/lint/dead-code/lint-dead-code-4.stderr", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,6 +1,9 @@\n-error: field is never read: `b`\n+error: field `b` is never read\n   --> $DIR/lint-dead-code-4.rs:7:5\n    |\n+LL | struct Foo {\n+   |        --- field in this struct\n+LL |     x: usize,\n LL |     b: bool,\n    |     ^^^^^^^\n    |\n@@ -10,63 +13,58 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: variant is never constructed: `X`\n+error: variants `X` and `Y` are never constructed\n   --> $DIR/lint-dead-code-4.rs:15:5\n    |\n-LL |     X,\n-   |     ^\n-\n-error: variant is never constructed: `Y`\n-  --> $DIR/lint-dead-code-4.rs:16:5\n-   |\n+LL |   enum XYZ {\n+   |        --- variants in this enum\n+LL |       X,\n+   |       ^\n LL | /     Y {\n LL | |         a: String,\n LL | |         b: i32,\n LL | |         c: i32,\n LL | |     },\n    | |_____^\n \n-error: enum is never used: `ABC`\n+error: enum `ABC` is never used\n   --> $DIR/lint-dead-code-4.rs:24:6\n    |\n LL | enum ABC {\n    |      ^^^\n \n-error: variant is never constructed: `I`\n-  --> $DIR/lint-dead-code-4.rs:36:5\n-   |\n-LL |     I,\n-   |     ^\n-\n-error: field is never read: `b`\n+error: fields `b` and `c` are never read\n   --> $DIR/lint-dead-code-4.rs:39:9\n    |\n+LL | enum IJK {\n+   |      --- fields in this enum\n+...\n LL |         b: i32,\n    |         ^^^^^^\n-\n-error: field is never read: `c`\n-  --> $DIR/lint-dead-code-4.rs:40:9\n-   |\n LL |         c: i32,\n    |         ^^^^^^\n \n-error: variant is never constructed: `K`\n-  --> $DIR/lint-dead-code-4.rs:42:5\n+error: variants `I` and `K` are never constructed\n+  --> $DIR/lint-dead-code-4.rs:36:5\n    |\n+LL | enum IJK {\n+   |      --- variants in this enum\n+LL |     I,\n+   |     ^\n+...\n LL |     K\n    |     ^\n \n-error: field is never read: `x`\n+error: fields `x` and `c` are never read\n   --> $DIR/lint-dead-code-4.rs:61:5\n    |\n+LL | struct Bar {\n+   |        --- fields in this struct\n LL |     x: usize,\n    |     ^^^^^^^^\n-\n-error: field is never read: `c`\n-  --> $DIR/lint-dead-code-4.rs:63:5\n-   |\n+LL |     b: bool,\n LL |     c: bool,\n    |     ^^^^^^^\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "ed90fb46429bb64e08f4900bc4bb63ba918c4c47", "filename": "src/test/ui/lint/dead-code/lint-dead-code-5.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -3,15 +3,15 @@\n \n enum Enum1 {\n     Variant1(isize),\n-    Variant2 //~ ERROR: variant is never constructed\n+    Variant2 //~ ERROR: variant `Variant2` is never constructed\n }\n \n enum Enum2 {\n     Variant3(bool),\n     #[allow(dead_code)]\n     Variant4(isize),\n-    Variant5 { _x: isize }, //~ ERROR: variant is never constructed: `Variant5`\n-    Variant6(isize), //~ ERROR: variant is never constructed: `Variant6`\n+    Variant5 { _x: isize }, //~ ERROR: variants `Variant5` and `Variant6` are never constructed\n+    Variant6(isize),\n     _Variant7,\n     Variant8 { _field: bool },\n     Variant9,\n@@ -32,7 +32,7 @@ impl Enum2 {\n     }\n }\n \n-enum Enum3 { //~ ERROR: enum is never used\n+enum Enum3 { //~ ERROR: enum `Enum3` is never used\n     Variant8,\n     Variant9\n }"}, {"sha": "037a9be22ad86e25565ae4d78f2935e79ca0afb9", "filename": "src/test/ui/lint/dead-code/lint-dead-code-5.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,6 +1,9 @@\n-error: variant is never constructed: `Variant2`\n+error: variant `Variant2` is never constructed\n   --> $DIR/lint-dead-code-5.rs:6:5\n    |\n+LL | enum Enum1 {\n+   |      ----- variant in this enum\n+LL |     Variant1(isize),\n LL |     Variant2\n    |     ^^^^^^^^\n    |\n@@ -10,23 +13,22 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: variant is never constructed: `Variant5`\n+error: variants `Variant5` and `Variant6` are never constructed\n   --> $DIR/lint-dead-code-5.rs:13:5\n    |\n+LL | enum Enum2 {\n+   |      ----- variants in this enum\n+...\n LL |     Variant5 { _x: isize },\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: variant is never constructed: `Variant6`\n-  --> $DIR/lint-dead-code-5.rs:14:5\n-   |\n LL |     Variant6(isize),\n    |     ^^^^^^^^^^^^^^^\n \n-error: enum is never used: `Enum3`\n+error: enum `Enum3` is never used\n   --> $DIR/lint-dead-code-5.rs:35:6\n    |\n LL | enum Enum3 {\n    |      ^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "e3074acf129f6bc0e4327c92d573dd1268bea23a", "filename": "src/test/ui/lint/dead-code/lint-dead-code-6.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,16 +1,16 @@\n #![deny(dead_code)]\n \n-struct UnusedStruct; //~ ERROR struct is never constructed: `UnusedStruct`\n+struct UnusedStruct; //~ ERROR struct `UnusedStruct` is never constructed\n impl UnusedStruct {\n-    fn unused_impl_fn_1() { //~ ERROR associated function is never used: `unused_impl_fn_1`\n+    fn unused_impl_fn_1() { //~ ERROR associated function `unused_impl_fn_1` is never used\n         println!(\"blah\");\n     }\n \n-    fn unused_impl_fn_2(var: i32) { //~ ERROR associated function is never used: `unused_impl_fn_2`\n+    fn unused_impl_fn_2(var: i32) { //~ ERROR associated function `unused_impl_fn_2` is never used\n         println!(\"foo {}\", var);\n     }\n \n-    fn unused_impl_fn_3( //~ ERROR associated function is never used: `unused_impl_fn_3`\n+    fn unused_impl_fn_3( //~ ERROR associated function `unused_impl_fn_3` is never used\n         var: i32,\n     ) {\n         println!(\"bar {}\", var);"}, {"sha": "f9d83308a3de34097b10d69b2e4d0be229489416", "filename": "src/test/ui/lint/dead-code/lint-dead-code-6.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-error: struct is never constructed: `UnusedStruct`\n+error: struct `UnusedStruct` is never constructed\n   --> $DIR/lint-dead-code-6.rs:3:8\n    |\n LL | struct UnusedStruct;\n@@ -10,19 +10,19 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: associated function is never used: `unused_impl_fn_1`\n+error: associated function `unused_impl_fn_1` is never used\n   --> $DIR/lint-dead-code-6.rs:5:8\n    |\n LL |     fn unused_impl_fn_1() {\n    |        ^^^^^^^^^^^^^^^^\n \n-error: associated function is never used: `unused_impl_fn_2`\n+error: associated function `unused_impl_fn_2` is never used\n   --> $DIR/lint-dead-code-6.rs:9:8\n    |\n LL |     fn unused_impl_fn_2(var: i32) {\n    |        ^^^^^^^^^^^^^^^^\n \n-error: associated function is never used: `unused_impl_fn_3`\n+error: associated function `unused_impl_fn_3` is never used\n   --> $DIR/lint-dead-code-6.rs:13:8\n    |\n LL |     fn unused_impl_fn_3("}, {"sha": "e3935cf9149bb63bfbaf923457434353b903586e", "filename": "src/test/ui/lint/dead-code/multiple-dead-codes-in-the-same-struct.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -0,0 +1,29 @@\n+#![warn(dead_code)]\n+\n+struct Bar {\n+    #[allow(dead_code)]\n+    a: usize,\n+    #[forbid(dead_code)]\n+    b: usize, //~ ERROR field `b` is never read\n+    #[deny(dead_code)]\n+    c: usize, //~ ERROR fields `c` and `e` are never read\n+    d: usize, //~ WARN fields `d`, `f` and `g` are never read\n+    #[deny(dead_code)]\n+    e: usize,\n+    f: usize,\n+    g: usize,\n+    _h: usize,\n+}\n+\n+fn main() {\n+    Bar {\n+        a: 1,\n+        b: 1,\n+        c: 1,\n+        d: 1,\n+        e: 1,\n+        f: 1,\n+        g: 1,\n+        _h: 1,\n+    };\n+}"}, {"sha": "5cc8e06c09d4e103d7828cd97f3b0ce5d3aed48f", "filename": "src/test/ui/lint/dead-code/multiple-dead-codes-in-the-same-struct.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -0,0 +1,55 @@\n+warning: fields `d`, `f` and `g` are never read\n+  --> $DIR/multiple-dead-codes-in-the-same-struct.rs:10:5\n+   |\n+LL | struct Bar {\n+   |        --- fields in this struct\n+...\n+LL |     d: usize,\n+   |     ^^^^^^^^\n+...\n+LL |     f: usize,\n+   |     ^^^^^^^^\n+LL |     g: usize,\n+   |     ^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/multiple-dead-codes-in-the-same-struct.rs:1:9\n+   |\n+LL | #![warn(dead_code)]\n+   |         ^^^^^^^^^\n+\n+error: fields `c` and `e` are never read\n+  --> $DIR/multiple-dead-codes-in-the-same-struct.rs:9:5\n+   |\n+LL | struct Bar {\n+   |        --- fields in this struct\n+...\n+LL |     c: usize,\n+   |     ^^^^^^^^\n+...\n+LL |     e: usize,\n+   |     ^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/multiple-dead-codes-in-the-same-struct.rs:8:12\n+   |\n+LL |     #[deny(dead_code)]\n+   |            ^^^^^^^^^\n+\n+error: field `b` is never read\n+  --> $DIR/multiple-dead-codes-in-the-same-struct.rs:7:5\n+   |\n+LL | struct Bar {\n+   |        --- field in this struct\n+...\n+LL |     b: usize,\n+   |     ^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/multiple-dead-codes-in-the-same-struct.rs:6:14\n+   |\n+LL |     #[forbid(dead_code)]\n+   |              ^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+"}, {"sha": "209c3cd937f9e8b5de4414fab448bef0a1b9f0ca", "filename": "src/test/ui/lint/dead-code/newline-span.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fnewline-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fnewline-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fnewline-span.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,14 +1,14 @@\n #![deny(dead_code)]\n \n-fn unused() { //~ error: function is never used:\n+fn unused() { //~ error: function `unused` is never used\n     println!(\"blah\");\n }\n \n-fn unused2(var: i32) { //~ error: function is never used:\n+fn unused2(var: i32) { //~ error: function `unused2` is never used\n     println!(\"foo {}\", var);\n }\n \n-fn unused3( //~ error: function is never used:\n+fn unused3( //~ error: function `unused3` is never used\n     var: i32,\n ) {\n     println!(\"bar {}\", var);"}, {"sha": "4eeadccc823eb091c536b46a9ff5a0842b218465", "filename": "src/test/ui/lint/dead-code/newline-span.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fnewline-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fnewline-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fnewline-span.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-error: function is never used: `unused`\n+error: function `unused` is never used\n   --> $DIR/newline-span.rs:3:4\n    |\n LL | fn unused() {\n@@ -10,13 +10,13 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: function is never used: `unused2`\n+error: function `unused2` is never used\n   --> $DIR/newline-span.rs:7:4\n    |\n LL | fn unused2(var: i32) {\n    |    ^^^^^^^\n \n-error: function is never used: `unused3`\n+error: function `unused3` is never used\n   --> $DIR/newline-span.rs:11:4\n    |\n LL | fn unused3("}, {"sha": "35a7f125dda7696a4529d6b37b8310a252cb393d", "filename": "src/test/ui/lint/dead-code/type-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftype-alias.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,7 +1,7 @@\n #![deny(dead_code)]\n \n type Used = u8;\n-type Unused = u8; //~ ERROR type alias is never used\n+type Unused = u8; //~ ERROR type alias `Unused` is never used\n \n fn id(x: Used) -> Used { x }\n "}, {"sha": "80c6ba962b8069f82fcfc74acf95ca8c0322a40b", "filename": "src/test/ui/lint/dead-code/type-alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftype-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftype-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftype-alias.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-error: type alias is never used: `Unused`\n+error: type alias `Unused` is never used\n   --> $DIR/type-alias.rs:4:1\n    |\n LL | type Unused = u8;"}, {"sha": "20df3e1de6f326b8a91445e01f910d5be0083622", "filename": "src/test/ui/lint/dead-code/unused-enum.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-enum.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,9 +1,10 @@\n #![deny(unused)]\n \n-struct F; //~ ERROR struct is never constructed\n-struct B; //~ ERROR struct is never constructed\n+struct F; //~ ERROR struct `F` is never constructed\n+struct B; //~ ERROR struct `B` is never constructed\n \n-enum E { //~ ERROR enum is never used\n+enum E {\n+    //~^ ERROR enum `E` is never used\n     Foo(F),\n     Bar(B),\n }"}, {"sha": "d2602dbb3449780bf5270f3ca667f1f317c063dd", "filename": "src/test/ui/lint/dead-code/unused-enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-enum.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-error: struct is never constructed: `F`\n+error: struct `F` is never constructed\n   --> $DIR/unused-enum.rs:3:8\n    |\n LL | struct F;\n@@ -11,13 +11,13 @@ LL | #![deny(unused)]\n    |         ^^^^^^\n    = note: `#[deny(dead_code)]` implied by `#[deny(unused)]`\n \n-error: struct is never constructed: `B`\n+error: struct `B` is never constructed\n   --> $DIR/unused-enum.rs:4:8\n    |\n LL | struct B;\n    |        ^\n \n-error: enum is never used: `E`\n+error: enum `E` is never used\n   --> $DIR/unused-enum.rs:6:6\n    |\n LL | enum E {"}, {"sha": "a914e0c3301a4202dc2efb7065be577064a5f116", "filename": "src/test/ui/lint/dead-code/unused-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-struct-variant.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -5,7 +5,7 @@ struct B;\n \n enum E {\n     Foo(F),\n-    Bar(B), //~ ERROR variant is never constructed\n+    Bar(B), //~ ERROR variant `Bar` is never constructed\n }\n \n fn main() {"}, {"sha": "b08402b671b37ddc822c153c11a962f4c985116b", "filename": "src/test/ui/lint/dead-code/unused-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-struct-variant.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,6 +1,9 @@\n-error: variant is never constructed: `Bar`\n+error: variant `Bar` is never constructed\n   --> $DIR/unused-struct-variant.rs:8:5\n    |\n+LL | enum E {\n+   |      - variant in this enum\n+LL |     Foo(F),\n LL |     Bar(B),\n    |     ^^^^^^\n    |"}, {"sha": "82108fa9c13bfc44e8164f85f0152cb0e3e1f48c", "filename": "src/test/ui/lint/dead-code/unused-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -2,7 +2,7 @@\n \n #[derive(Clone)]\n enum Enum {\n-    Variant1, //~ ERROR: variant is never constructed\n+    Variant1, //~ ERROR: variant `Variant1` is never constructed\n     Variant2,\n }\n "}, {"sha": "a68f64775ad9ac4ad734d9c29c4595f97600133d", "filename": "src/test/ui/lint/dead-code/unused-variant.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,6 +1,8 @@\n-error: variant is never constructed: `Variant1`\n+error: variant `Variant1` is never constructed\n   --> $DIR/unused-variant.rs:5:5\n    |\n+LL | enum Enum {\n+   |      ---- variant in this enum\n LL |     Variant1,\n    |     ^^^^^^^^\n    |"}, {"sha": "0a94b528f3339945b2d3a9ca8fa81a06550e000f", "filename": "src/test/ui/lint/dead-code/with-core-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwith-core-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwith-core-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwith-core-crate.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -4,7 +4,7 @@\n #[macro_use]\n extern crate core;\n \n-fn foo() { //~ ERROR function is never used\n+fn foo() { //~ ERROR function `foo` is never used\n \n     // none of these should have any dead_code exposed to the user\n     panic!();"}, {"sha": "7adcf884886e785aa9df9739f4b3381f34ffcb65", "filename": "src/test/ui/lint/dead-code/with-core-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwith-core-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwith-core-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwith-core-crate.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-error: function is never used: `foo`\n+error: function `foo` is never used\n   --> $DIR/with-core-crate.rs:7:4\n    |\n LL | fn foo() {"}, {"sha": "0199381fcbb543b72c08c965d89550cc1886b4ab", "filename": "src/test/ui/lint/force-warn/allow-warnings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallow-warnings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallow-warnings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallow-warnings.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -6,6 +6,6 @@\n #![allow(warnings)]\n \n fn dead_function() {}\n-//~^ WARN function is never used\n+//~^ WARN function `dead_function` is never used\n \n fn main() {}"}, {"sha": "4de68a079e566c40000807e174f486a3c0758514", "filename": "src/test/ui/lint/force-warn/allow-warnings.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallow-warnings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallow-warnings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallow-warnings.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-warning: function is never used: `dead_function`\n+warning: function `dead_function` is never used\n   --> $DIR/allow-warnings.rs:8:4\n    |\n LL | fn dead_function() {}"}, {"sha": "06b372867767636f6c976af4dd4328a659cdbf2b", "filename": "src/test/ui/lint/force-warn/allowed-warn-by-default-lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-warn-by-default-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-warn-by-default-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-warn-by-default-lint.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -6,6 +6,6 @@\n #![allow(dead_code)]\n \n fn dead_function() {}\n-//~^ WARN function is never used\n+//~^ WARN function `dead_function` is never used\n \n fn main() {}"}, {"sha": "a6634e212bd67fb03bbb6dd4dab9a21318c234b9", "filename": "src/test/ui/lint/force-warn/allowed-warn-by-default-lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-warn-by-default-lint.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-warning: function is never used: `dead_function`\n+warning: function `dead_function` is never used\n   --> $DIR/allowed-warn-by-default-lint.rs:8:4\n    |\n LL | fn dead_function() {}"}, {"sha": "47a480ad7083ab92af4a60169490a43d057bdb9d", "filename": "src/test/ui/lint/force-warn/warn-by-default-lint-two-modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fwarn-by-default-lint-two-modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fwarn-by-default-lint-two-modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fwarn-by-default-lint-two-modules.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -7,12 +7,12 @@ mod one {\n     #![allow(dead_code)]\n \n     fn dead_function() {}\n-    //~^ WARN function is never used\n+    //~^ WARN function `dead_function` is never used\n }\n \n mod two {\n     fn dead_function() {}\n-    //~^ WARN function is never used\n+    //~^ WARN function `dead_function` is never used\n }\n \n fn main() {}"}, {"sha": "824bcccc05f824b4577b8dc9e542f3be8d9d960a", "filename": "src/test/ui/lint/force-warn/warn-by-default-lint-two-modules.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fwarn-by-default-lint-two-modules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fwarn-by-default-lint-two-modules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fwarn-by-default-lint-two-modules.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,12 +1,12 @@\n-warning: function is never used: `dead_function`\n+warning: function `dead_function` is never used\n   --> $DIR/warn-by-default-lint-two-modules.rs:9:8\n    |\n LL |     fn dead_function() {}\n    |        ^^^^^^^^^^^^^\n    |\n    = note: requested on the command line with `--force-warn dead-code`\n \n-warning: function is never used: `dead_function`\n+warning: function `dead_function` is never used\n   --> $DIR/warn-by-default-lint-two-modules.rs:14:8\n    |\n LL |     fn dead_function() {}"}, {"sha": "d7f0e72769b0560e946dca5f98b96802d4d3099d", "filename": "src/test/ui/lint/issue-17718-const-naming.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fissue-17718-const-naming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fissue-17718-const-naming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-17718-const-naming.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -3,6 +3,6 @@\n \n const foo: isize = 3;\n //~^ ERROR: should have an upper case name\n-//~^^ ERROR: constant is never used\n+//~^^ ERROR: constant `foo` is never used\n \n fn main() {}"}, {"sha": "4c97f6d63d4b678d5bd154d0043e8453fdee79a6", "filename": "src/test/ui/lint/issue-17718-const-naming.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fissue-17718-const-naming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Flint%2Fissue-17718-const-naming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-17718-const-naming.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-error: constant is never used: `foo`\n+error: constant `foo` is never used\n   --> $DIR/issue-17718-const-naming.rs:4:1\n    |\n LL | const foo: isize = 3;"}, {"sha": "66973c58d35cd66443455b59dd04f9065d1e2d3a", "filename": "src/test/ui/span/macro-span-replacement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -4,7 +4,7 @@\n \n macro_rules! m {\n     ($a:tt $b:tt) => {\n-        $b $a; //~ WARN struct is never constructed\n+        $b $a; //~ WARN struct `S` is never constructed\n     }\n }\n "}, {"sha": "433d02dcbe73e863fbc6a727a2f2cec832f1b18e", "filename": "src/test/ui/span/macro-span-replacement.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-warning: struct is never constructed: `S`\n+warning: struct `S` is never constructed\n   --> $DIR/macro-span-replacement.rs:7:14\n    |\n LL |         $b $a;"}, {"sha": "af4834503cd56f1528f3f244ce41b5af4a92d946", "filename": "src/test/ui/span/unused-warning-point-at-identifier.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fspan%2Funused-warning-point-at-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fspan%2Funused-warning-point-at-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Funused-warning-point-at-identifier.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -2,26 +2,26 @@\n \n #![warn(unused)]\n \n-enum Enum { //~ WARN enum is never used\n+enum Enum { //~ WARN enum `Enum` is never used\n     A,\n     B,\n     C,\n     D,\n }\n \n-struct Struct { //~ WARN struct is never constructed\n+struct Struct { //~ WARN struct `Struct` is never constructed\n     a: usize,\n     b: usize,\n     c: usize,\n     d: usize,\n }\n \n-fn func() -> usize { //~ WARN function is never used\n+fn func() -> usize { //~ WARN function `func` is never used\n     3\n }\n \n fn\n-func_complete_span() //~ WARN function is never used\n+func_complete_span() //~ WARN function `func_complete_span` is never used\n -> usize\n {\n     3"}, {"sha": "c2cb5623194c0ac74ed8df0d8136eee937f670a1", "filename": "src/test/ui/span/unused-warning-point-at-identifier.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fspan%2Funused-warning-point-at-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Fspan%2Funused-warning-point-at-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Funused-warning-point-at-identifier.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-warning: enum is never used: `Enum`\n+warning: enum `Enum` is never used\n   --> $DIR/unused-warning-point-at-identifier.rs:5:6\n    |\n LL | enum Enum {\n@@ -11,19 +11,19 @@ LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(dead_code)]` implied by `#[warn(unused)]`\n \n-warning: struct is never constructed: `Struct`\n+warning: struct `Struct` is never constructed\n   --> $DIR/unused-warning-point-at-identifier.rs:12:8\n    |\n LL | struct Struct {\n    |        ^^^^^^\n \n-warning: function is never used: `func`\n+warning: function `func` is never used\n   --> $DIR/unused-warning-point-at-identifier.rs:19:4\n    |\n LL | fn func() -> usize {\n    |    ^^^^\n \n-warning: function is never used: `func_complete_span`\n+warning: function `func_complete_span` is never used\n   --> $DIR/unused-warning-point-at-identifier.rs:24:1\n    |\n LL | func_complete_span()"}, {"sha": "4190885b6b214c29a1b0ea9725738072f4024d54", "filename": "src/test/ui/test-attrs/test-warns-dead-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-warns-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-warns-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-warns-dead-code.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -2,6 +2,6 @@\n \n #![deny(dead_code)]\n \n-fn dead() {} //~ error: function is never used: `dead`\n+fn dead() {} //~ error: function `dead` is never used\n \n fn main() {}"}, {"sha": "6c0f2884128468091914b51105287f4c23069f17", "filename": "src/test/ui/test-attrs/test-warns-dead-code.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-warns-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-warns-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-warns-dead-code.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,4 +1,4 @@\n-error: function is never used: `dead`\n+error: function `dead` is never used\n   --> $DIR/test-warns-dead-code.rs:5:4\n    |\n LL | fn dead() {}"}, {"sha": "5b932b9626c286e866ac9b4ed33ece9e5af306bc", "filename": "src/test/ui/union/union-fields-1.mirunsafeck.stderr", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Funion%2Funion-fields-1.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Funion%2Funion-fields-1.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-1.mirunsafeck.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,6 +1,9 @@\n-error: field is never read: `c`\n+error: field `c` is never read\n   --> $DIR/union-fields-1.rs:9:5\n    |\n+LL | union U1 {\n+   |       -- field in this union\n+...\n LL |     c: u8,\n    |     ^^^^^\n    |\n@@ -10,21 +13,28 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: field is never read: `a`\n+error: field `a` is never read\n   --> $DIR/union-fields-1.rs:12:5\n    |\n+LL | union U2 {\n+   |       -- field in this union\n LL |     a: u8,\n    |     ^^^^^\n \n-error: field is never read: `a`\n+error: field `a` is never read\n   --> $DIR/union-fields-1.rs:16:20\n    |\n LL | union NoDropLike { a: u8 }\n-   |                    ^^^^^\n+   |       ----------   ^^^^^\n+   |       |\n+   |       field in this union\n \n-error: field is never read: `c`\n+error: field `c` is never read\n   --> $DIR/union-fields-1.rs:21:5\n    |\n+LL | union U {\n+   |       - field in this union\n+...\n LL |     c: u8,\n    |     ^^^^^\n "}, {"sha": "cf2ef4c03d6894d5e72b2fcecb18c1a0ada7f150", "filename": "src/test/ui/union/union-fields-1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Funion%2Funion-fields-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Funion%2Funion-fields-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-1.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -6,19 +6,19 @@\n union U1 {\n     a: u8, // should not be reported\n     b: u8, // should not be reported\n-    c: u8, //~ ERROR field is never read\n+    c: u8, //~ ERROR field `c` is never read\n }\n union U2 {\n-    a: u8, //~ ERROR field is never read\n+    a: u8, //~ ERROR field `a` is never read\n     b: u8, // should not be reported\n     c: u8, // should not be reported\n }\n-union NoDropLike { a: u8 } //~ ERROR field is never read\n+union NoDropLike { a: u8 } //~ ERROR field `a` is never read\n \n union U {\n     a: u8, // should not be reported\n     b: u8, // should not be reported\n-    c: u8, //~ ERROR field is never read\n+    c: u8, //~ ERROR field `c` is never read\n }\n type A = U;\n "}, {"sha": "5b932b9626c286e866ac9b4ed33ece9e5af306bc", "filename": "src/test/ui/union/union-fields-1.thirunsafeck.stderr", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Funion%2Funion-fields-1.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Funion%2Funion-fields-1.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-1.thirunsafeck.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,6 +1,9 @@\n-error: field is never read: `c`\n+error: field `c` is never read\n   --> $DIR/union-fields-1.rs:9:5\n    |\n+LL | union U1 {\n+   |       -- field in this union\n+...\n LL |     c: u8,\n    |     ^^^^^\n    |\n@@ -10,21 +13,28 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: field is never read: `a`\n+error: field `a` is never read\n   --> $DIR/union-fields-1.rs:12:5\n    |\n+LL | union U2 {\n+   |       -- field in this union\n LL |     a: u8,\n    |     ^^^^^\n \n-error: field is never read: `a`\n+error: field `a` is never read\n   --> $DIR/union-fields-1.rs:16:20\n    |\n LL | union NoDropLike { a: u8 }\n-   |                    ^^^^^\n+   |       ----------   ^^^^^\n+   |       |\n+   |       field in this union\n \n-error: field is never read: `c`\n+error: field `c` is never read\n   --> $DIR/union-fields-1.rs:21:5\n    |\n+LL | union U {\n+   |       - field in this union\n+...\n LL |     c: u8,\n    |     ^^^^^\n "}, {"sha": "f6e515f8400686e13d7a06617e7e0426e4684936", "filename": "src/test/ui/union/union-lint-dead-code.mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.mirunsafeck.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,6 +1,9 @@\n-error: field is never read: `b`\n+error: field `b` is never read\n   --> $DIR/union-lint-dead-code.rs:8:5\n    |\n+LL | union Foo {\n+   |       --- field in this union\n+LL |     x: usize,\n LL |     b: bool,\n    |     ^^^^^^^\n    |"}, {"sha": "65aaf0a1d35dac7c34710c6f5ca1763c08951640", "filename": "src/test/ui/union/union-lint-dead-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.rs?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -5,7 +5,7 @@\n \n union Foo {\n     x: usize,\n-    b: bool, //~ ERROR: field is never read\n+    b: bool, //~ ERROR: field `b` is never read\n     _unused: u16,\n }\n "}, {"sha": "f6e515f8400686e13d7a06617e7e0426e4684936", "filename": "src/test/ui/union/union-lint-dead-code.thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a023e7e589c469c2c761c73eeab9c238818e94b/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.thirunsafeck.stderr?ref=3a023e7e589c469c2c761c73eeab9c238818e94b", "patch": "@@ -1,6 +1,9 @@\n-error: field is never read: `b`\n+error: field `b` is never read\n   --> $DIR/union-lint-dead-code.rs:8:5\n    |\n+LL | union Foo {\n+   |       --- field in this union\n+LL |     x: usize,\n LL |     b: bool,\n    |     ^^^^^^^\n    |"}]}