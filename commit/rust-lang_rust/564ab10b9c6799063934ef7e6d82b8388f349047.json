{"sha": "564ab10b9c6799063934ef7e6d82b8388f349047", "node_id": "C_kwDOAAsO6NoAKDU2NGFiMTBiOWM2Nzk5MDYzOTM0ZWY3ZTZkODJiODM4OGYzNDkwNDc", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-13T09:13:02Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T03:16:56Z"}, "message": "errors: generate typed identifiers in each crate\n\nInstead of loading the Fluent resources for every crate in\n`rustc_error_messages`, each crate generates typed identifiers for its\nown diagnostics and creates a static which are pulled together in the\n`rustc_driver` crate and provided to the diagnostic emitter.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "8969795a751fd6109eff449acf79c15b863786e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8969795a751fd6109eff449acf79c15b863786e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/564ab10b9c6799063934ef7e6d82b8388f349047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/564ab10b9c6799063934ef7e6d82b8388f349047", "html_url": "https://github.com/rust-lang/rust/commit/564ab10b9c6799063934ef7e6d82b8388f349047", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/564ab10b9c6799063934ef7e6d82b8388f349047/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae429e8cab135902df69135d8b4b4aca555f4ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae429e8cab135902df69135d8b4b4aca555f4ace", "html_url": "https://github.com/rust-lang/rust/commit/ae429e8cab135902df69135d8b4b4aca555f4ace"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "6101b28ab0cdde9a42b69834de91ea4bff2d6198", "filename": "locales/en-US.ftl", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/564ab10b9c6799063934ef7e6d82b8388f349047/locales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/564ab10b9c6799063934ef7e6d82b8388f349047/locales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/locales%2Fen-US.ftl?ref=564ab10b9c6799063934ef7e6d82b8388f349047", "patch": "@@ -0,0 +1,62 @@\n+codegen_gcc_unwinding_inline_asm =\n+    GCC backend does not support unwinding from inline asm\n+\n+codegen_gcc_lto_not_supported =\n+    LTO is not supported. You may get a linker error.\n+\n+codegen_gcc_invalid_monomorphization_basic_integer =\n+    invalid monomorphization of `{$name}` intrinsic: expected basic integer type, found `{$ty}`\n+\n+codegen_gcc_invalid_monomorphization_invalid_float_vector =\n+    invalid monomorphization of `{$name}` intrinsic: unsupported element type `{$elem_ty}` of floating-point vector `{$vec_ty}`\n+\n+codegen_gcc_invalid_monomorphization_not_float =\n+    invalid monomorphization of `{$name}` intrinsic: `{$ty}` is not a floating-point type\n+\n+codegen_gcc_invalid_monomorphization_unrecognized =\n+    invalid monomorphization of `{$name}` intrinsic: unrecognized intrinsic `{$name}`\n+\n+codegen_gcc_invalid_monomorphization_expected_signed_unsigned =\n+    invalid monomorphization of `{$name}` intrinsic: expected element type `{$elem_ty}` of vector type `{$vec_ty}` to be a signed or unsigned integer type\n+\n+codegen_gcc_invalid_monomorphization_unsupported_element =\n+    invalid monomorphization of `{$name}` intrinsic: unsupported {$name} from `{$in_ty}` with element `{$elem_ty}` to `{$ret_ty}`\n+\n+codegen_gcc_invalid_monomorphization_invalid_bitmask =\n+    invalid monomorphization of `{$name}` intrinsic: invalid bitmask `{$ty}`, expected `u{$expected_int_bits}` or `[u8; {$expected_bytes}]`\n+\n+codegen_gcc_invalid_monomorphization_simd_shuffle =\n+    invalid monomorphization of `{$name}` intrinsic: simd_shuffle index must be an array of `u32`, got `{$ty}`\n+\n+codegen_gcc_invalid_monomorphization_expected_simd =\n+    invalid monomorphization of `{$name}` intrinsic: expected SIMD {$expected_ty} type, found non-SIMD `{$found_ty}`\n+\n+codegen_gcc_invalid_monomorphization_mask_type =\n+    invalid monomorphization of `{$name}` intrinsic: mask element type is `{$ty}`, expected `i_`\n+\n+codegen_gcc_invalid_monomorphization_return_length =\n+    invalid monomorphization of `{$name}` intrinsic: expected return type of length {$in_len}, found `{$ret_ty}` with length {$out_len}\n+\n+codegen_gcc_invalid_monomorphization_return_length_input_type =\n+    invalid monomorphization of `{$name}` intrinsic: expected return type with length {$in_len} (same as input type `{$in_ty}`), found `{$ret_ty}` with length {$out_len}\n+\n+codegen_gcc_invalid_monomorphization_return_element =\n+    invalid monomorphization of `{$name}` intrinsic: expected return element type `{$in_elem}` (element of input `{$in_ty}`), found `{$ret_ty}` with element type `{$out_ty}`\n+\n+codegen_gcc_invalid_monomorphization_return_type =\n+    invalid monomorphization of `{$name}` intrinsic: expected return type `{$in_elem}` (element of input `{$in_ty}`), found `{$ret_ty}`\n+\n+codegen_gcc_invalid_monomorphization_inserted_type =\n+    invalid monomorphization of `{$name}` intrinsic: expected inserted type `{$in_elem}` (element of input `{$in_ty}`), found `{$out_ty}`\n+\n+codegen_gcc_invalid_monomorphization_return_integer_type =\n+    invalid monomorphization of `{$name}` intrinsic: expected return type with integer elements, found `{$ret_ty}` with non-integer `{$out_ty}`\n+\n+codegen_gcc_invalid_monomorphization_mismatched_lengths =\n+    invalid monomorphization of `{$name}` intrinsic: mismatched lengths: mask length `{$m_len}` != other vector length `{$v_len}`\n+\n+codegen_gcc_invalid_monomorphization_unsupported_cast =\n+    invalid monomorphization of `{$name}` intrinsic: unsupported cast from `{$in_ty}` with element `{$in_elem}` to `{$ret_ty}` with element `{$out_elem}`\n+\n+codegen_gcc_invalid_monomorphization_unsupported_operation =\n+    invalid monomorphization of `{$name}` intrinsic: unsupported operation on `{$in_ty}` with element `{$in_elem}`"}, {"sha": "c32c837d83a8bb5443bdd31796d506caf82309af", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/564ab10b9c6799063934ef7e6d82b8388f349047/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564ab10b9c6799063934ef7e6d82b8388f349047/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=564ab10b9c6799063934ef7e6d82b8388f349047", "patch": "@@ -75,7 +75,8 @@ use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModul\n use rustc_codegen_ssa::target_features::supported_target_features;\n use rustc_codegen_ssa::traits::{CodegenBackend, ExtraBackendMethods, ModuleBufferMethods, ThinBufferMethods, WriteBackendMethods};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{ErrorGuaranteed, Handler};\n+use rustc_errors::{DiagnosticMessage, ErrorGuaranteed, Handler, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::ty::TyCtxt;\n@@ -86,6 +87,8 @@ use rustc_span::Symbol;\n use rustc_span::fatal_error::FatalError;\n use tempfile::TempDir;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n pub struct PrintOnPanic<F: Fn() -> String>(pub F);\n \n impl<F: Fn() -> String> Drop for PrintOnPanic<F> {"}]}