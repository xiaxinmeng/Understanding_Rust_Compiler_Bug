{"sha": "b5127202b278cc87e7577cea4165b4e39c60f1e2", "node_id": "C_kwDOAAsO6NoAKGI1MTI3MjAyYjI3OGNjODdlNzU3N2NlYTQxNjViNGUzOWM2MGYxZTI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-10T18:00:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-10T18:00:06Z"}, "message": "Rollup merge of #94587 - JKAnderson409:issue-90107-fix, r=scottmcm\n\nDocument new recommended use of `FromIterator::from_iter`\n\n#90107\nMost of the added prose was paraphrased from the links provided in the issue. The suggested `VecDeque` example seemed to make the point well enough so I just used that.", "tree": {"sha": "195004ff4868e1aa446e41bdbfe150d3ab3a76ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/195004ff4868e1aa446e41bdbfe150d3ab3a76ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5127202b278cc87e7577cea4165b4e39c60f1e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiKjymCRBK7hj4Ov3rIwAAvJIIAILyIOariqFMTM51yIOX7FBV\nzDLc914rlEkjsLA6iosYf9ntnh3lYfDhcKF/kfeolGVJXTDM8ez0Glio5LZkmh7U\nUCsZn8kfoHdrCHz/5ves1uWUhRNJ69nRrguvIftJHitols4rzY1KykKKTGN/zClW\nd4tp4wF+AjY3itoBvLPVhTyvk2gc6fEan62TwcqoGdTmX+wAiwl9pdEOOyhwUHjd\n2CnSDoH+WU0ISSxLF8sah5L9q05n6FwYJk8ppGNlUyMNVA3ZZF47WteE5LQa9lcL\nMMBjR4vO8enMKNvGqxwo/SPV8U9HDTWflkJz/QeVFlRU0zDX+SeEGa6Ng7tVZAQ=\n=LE2V\n-----END PGP SIGNATURE-----\n", "payload": "tree 195004ff4868e1aa446e41bdbfe150d3ab3a76ca\nparent b41374598f3274e28273a447d2d7d82a6f26c1f3\nparent b363f130698dbc55fe594155bcb4df826ffad71e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646935206 +0100\ncommitter GitHub <noreply@github.com> 1646935206 +0100\n\nRollup merge of #94587 - JKAnderson409:issue-90107-fix, r=scottmcm\n\nDocument new recommended use of `FromIterator::from_iter`\n\n#90107\nMost of the added prose was paraphrased from the links provided in the issue. The suggested `VecDeque` example seemed to make the point well enough so I just used that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5127202b278cc87e7577cea4165b4e39c60f1e2", "html_url": "https://github.com/rust-lang/rust/commit/b5127202b278cc87e7577cea4165b4e39c60f1e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5127202b278cc87e7577cea4165b4e39c60f1e2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b41374598f3274e28273a447d2d7d82a6f26c1f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b41374598f3274e28273a447d2d7d82a6f26c1f3", "html_url": "https://github.com/rust-lang/rust/commit/b41374598f3274e28273a447d2d7d82a6f26c1f3"}, {"sha": "b363f130698dbc55fe594155bcb4df826ffad71e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b363f130698dbc55fe594155bcb4df826ffad71e", "html_url": "https://github.com/rust-lang/rust/commit/b363f130698dbc55fe594155bcb4df826ffad71e"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "dee66e6e0728382afc453fa9cec7f86925b09411", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b5127202b278cc87e7577cea4165b4e39c60f1e2/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5127202b278cc87e7577cea4165b4e39c60f1e2/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=b5127202b278cc87e7577cea4165b4e39c60f1e2", "patch": "@@ -4,9 +4,11 @@\n /// created from an iterator. This is common for types which describe a\n /// collection of some kind.\n ///\n-/// [`FromIterator::from_iter()`] is rarely called explicitly, and is instead\n-/// used through [`Iterator::collect()`] method. See [`Iterator::collect()`]'s\n-/// documentation for more examples.\n+/// If you want to create a collection from the contents of an iterator, the\n+/// [`Iterator::collect()`] method is preferred. However, when you need to\n+/// specify the container type, [`FromIterator::from_iter()`] can be more\n+/// readable than using a turbofish (e.g. `::<Vec<_>>()`). See the\n+/// [`Iterator::collect()`] documentation for more examples of its use.\n ///\n /// See also: [`IntoIterator`].\n ///\n@@ -32,6 +34,17 @@\n /// assert_eq!(v, vec![5, 5, 5, 5, 5]);\n /// ```\n ///\n+/// Using [`FromIterator::from_iter()`] as a more readable alternative to\n+/// [`Iterator::collect()`]:\n+///\n+/// ```\n+/// use std::collections::VecDeque;\n+/// let first = (0..10).collect::<VecDeque<i32>>();\n+/// let second = VecDeque::from_iter(0..10);\n+///\n+/// assert_eq!(first, second);\n+/// ```\n+///\n /// Implementing `FromIterator` for your type:\n ///\n /// ```"}]}