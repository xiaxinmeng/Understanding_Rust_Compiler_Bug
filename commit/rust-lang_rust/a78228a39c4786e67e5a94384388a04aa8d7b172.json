{"sha": "a78228a39c4786e67e5a94384388a04aa8d7b172", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ODIyOGEzOWM0Nzg2ZTY3ZTVhOTQzODQzODhhMDRhYThkN2IxNzI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-05T14:04:31Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-07T11:45:29Z"}, "message": "Turn `implements` into a query again", "tree": {"sha": "b7a22e89ff4fa3c28001794ae2414b423d0e0fec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7a22e89ff4fa3c28001794ae2414b423d0e0fec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a78228a39c4786e67e5a94384388a04aa8d7b172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a78228a39c4786e67e5a94384388a04aa8d7b172", "html_url": "https://github.com/rust-lang/rust/commit/a78228a39c4786e67e5a94384388a04aa8d7b172", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a78228a39c4786e67e5a94384388a04aa8d7b172/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef782adc293deb287128f005dbab2038ba3ccdc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef782adc293deb287128f005dbab2038ba3ccdc1", "html_url": "https://github.com/rust-lang/rust/commit/ef782adc293deb287128f005dbab2038ba3ccdc1"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "689dd6225cd7ccf86a75501627d30481b2a6af37", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a78228a39c4786e67e5a94384388a04aa8d7b172/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78228a39c4786e67e5a94384388a04aa8d7b172/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=a78228a39c4786e67e5a94384388a04aa8d7b172", "patch": "@@ -161,6 +161,13 @@ pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(crate::ty::traits::solver)]\n     #[salsa::volatile]\n     fn solver(&self, krate: Crate) -> Arc<Mutex<crate::ty::traits::Solver>>;\n+\n+    #[salsa::invoke(crate::ty::traits::implements)]\n+    fn implements(\n+        &self,\n+        krate: Crate,\n+        goal: crate::ty::Canonical<crate::ty::TraitRef>,\n+    ) -> Option<crate::ty::traits::Solution>;\n }\n \n #[test]"}, {"sha": "24c45d7286c327811fa9ba99bbfe3553fd7abff2", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a78228a39c4786e67e5a94384388a04aa8d7b172/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78228a39c4786e67e5a94384388a04aa8d7b172/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=a78228a39c4786e67e5a94384388a04aa8d7b172", "patch": "@@ -240,7 +240,7 @@ impl TraitRef {\n /// many there are. This is used to erase irrelevant differences between types\n /// before using them in queries.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub(crate) struct Canonical<T> {\n+pub struct Canonical<T> {\n     pub value: T,\n     pub num_vars: usize,\n }"}, {"sha": "1e7d97f51cc6dc4b74601203893b80ccb953698d", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a78228a39c4786e67e5a94384388a04aa8d7b172/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78228a39c4786e67e5a94384388a04aa8d7b172/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=a78228a39c4786e67e5a94384388a04aa8d7b172", "patch": "@@ -328,8 +328,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 Obligation::Trait(tr) => {\n                     let canonicalized = self.canonicalizer().canonicalize_trait_ref(tr.clone());\n                     (\n-                        super::traits::implements(\n-                            self.db,\n+                        self.db.implements(\n                             self.resolver.krate().unwrap(),\n                             canonicalized.value.clone(),\n                         ),"}, {"sha": "d8b8c836c85166e8f51a8a719adb7bfc58a3c265", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a78228a39c4786e67e5a94384388a04aa8d7b172/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78228a39c4786e67e5a94384388a04aa8d7b172/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=a78228a39c4786e67e5a94384388a04aa8d7b172", "patch": "@@ -196,8 +196,7 @@ fn iterate_trait_method_candidates<T>(\n                     if name.map_or(true, |name| sig.name() == name) && sig.has_self_param() {\n                         if !known_implemented {\n                             let trait_ref = canonical_trait_ref(db, t, ty.clone());\n-                            // FIXME cache this implements check (without solution) in a query?\n-                            if super::traits::implements(db, krate, trait_ref).is_none() {\n+                            if db.implements(krate, trait_ref).is_none() {\n                                 continue 'traits;\n                             }\n                         }"}, {"sha": "f70a32575efb2e9ba3e3a733ca52a02e45fcf664", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a78228a39c4786e67e5a94384388a04aa8d7b172/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78228a39c4786e67e5a94384388a04aa8d7b172/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=a78228a39c4786e67e5a94384388a04aa8d7b172", "patch": "@@ -125,11 +125,11 @@ fn solution_from_chalk(db: &impl HirDatabase, solution: chalk_solve::Solution) -\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n-pub(crate) struct SolutionVariables(pub Canonical<Vec<Ty>>);\n+pub struct SolutionVariables(pub Canonical<Vec<Ty>>);\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n /// A (possible) solution for a proposed goal.\n-pub(crate) enum Solution {\n+pub enum Solution {\n     /// The goal indeed holds, and there is a unique value for all existential\n     /// variables.\n     Unique(SolutionVariables),\n@@ -144,7 +144,7 @@ pub(crate) enum Solution {\n #[derive(Clone, Debug, PartialEq, Eq)]\n /// When a goal holds ambiguously (e.g., because there are multiple possible\n /// solutions), we issue a set of *guidance* back to type inference.\n-pub(crate) enum Guidance {\n+pub enum Guidance {\n     /// The existential variables *must* have the given values if the goal is\n     /// ever to hold, but that alone isn't enough to guarantee the goal will\n     /// actually hold."}]}