{"sha": "4d523a8149ff697ffe1770358291e2b8d8b58fd7", "node_id": "C_kwDOAAsO6NoAKDRkNTIzYTgxNDlmZjY5N2ZmZTE3NzAzNTgyOTFlMmI4ZDhiNThmZDc", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2022-05-13T23:58:28Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2022-05-16T20:46:08Z"}, "message": "Apply review feedback", "tree": {"sha": "3e3fa5ee19d8473b7f234218e6ff72f0138291f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e3fa5ee19d8473b7f234218e6ff72f0138291f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d523a8149ff697ffe1770358291e2b8d8b58fd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d523a8149ff697ffe1770358291e2b8d8b58fd7", "html_url": "https://github.com/rust-lang/rust/commit/4d523a8149ff697ffe1770358291e2b8d8b58fd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d523a8149ff697ffe1770358291e2b8d8b58fd7/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80e2957c60b4d148575b0d2ab94cbfe3f7ebbef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/80e2957c60b4d148575b0d2ab94cbfe3f7ebbef6", "html_url": "https://github.com/rust-lang/rust/commit/80e2957c60b4d148575b0d2ab94cbfe3f7ebbef6"}], "stats": {"total": 75, "additions": 41, "deletions": 34}, "files": [{"sha": "af9a071aeccfefcaee02cab2289234faa2d938b0", "filename": "RELEASES.md", "status": "modified", "additions": 41, "deletions": 34, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/4d523a8149ff697ffe1770358291e2b8d8b58fd7/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/4d523a8149ff697ffe1770358291e2b8d8b58fd7/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=4d523a8149ff697ffe1770358291e2b8d8b58fd7", "patch": "@@ -13,17 +13,14 @@ Compiler\n --------\n \n - [Linking modifier syntax in `#[link]` attributes and on the command line, as well as the `whole-archive` modifier specifically, are now supported][93901]\n-- [Update to LLVM 14.0.0][95247]\n - [The `char` type is now described as UTF-32 in debuginfo][89887]\n - The [`#[target_feature]`][target_feature] attribute [can now be used with aarch64 features][90621]\n - X86 [`#[target_feature = \"adx\"]` is now stable][93745]\n-- [Catching a second unwind from FFI code while cleaning up from a Rust panic now causes the process to abort][92911]\n \n Libraries\n ---------\n \n - [`ManuallyDrop<T>` is now documented to have the same layout as `T`][88375]\n-- [Windows paths longer than 260 chars are now supported in `process::Command` without needing explicit canonicalization][92519]\n - [`#[ignore = \"\u2026\"]` messages are printed when running tests][92714]\n - [Consistently present absent stdio handles on Windows as NULL handles][93263]\n - [Make `std::io::stdio::lock()` return `'static` handles.][93965] Previously, the creation of locked handles to stdin/stdout/stderr would borrow the handles being locked, which prevented writing `let out = std::io::stdout().lock();` because `out` would outlive the return value of `stdout()`. Such code now works, eliminating a common pitfall that affected many Rust users.\n@@ -33,28 +30,26 @@ Libraries\n Stabilized APIs\n ---------------\n \n-- [`From<&[T; N]>` for `Vec<T>`][95098]\n-- [`From<&mut [T; N]>` for `Vec<T>`][95098]\n-- [`Pin::static_mut`][93580]\n-- [`Pin::static_ref`][93580]\n-- [`Vec::retain_mut`][95491]\n-- [`VecDeque::retain_mut`][95491]\n-- [`Write` for `Cursor<[u8; N]>`][92663]\n-- [`std::os::unix::net::SocketAddr::from_pathname`][94356]\n-- [`std::process::ExitCode`][93840] and [`std::process::Termination`][93840]. The stabilization of these two APIs now makes it possible for programs to return errors from `main` with custom exit codes.\n-- [`std::thread::JoinHandle::is_finished`][95130]\n+- [`Pin::static_mut`]\n+- [`Pin::static_ref`]\n+- [`Vec::retain_mut`]\n+- [`VecDeque::retain_mut`]\n+- [`Write` for `Cursor<[u8; N]>`][cursor-write-array]\n+- [`std::os::unix::net::SocketAddr::from_pathname`]\n+- [`std::process::ExitCode`] and [`std::process::Termination`]. The stabilization of these two APIs now makes it possible for programs to return errors from `main` with custom exit codes.\n+- [`std::thread::JoinHandle::is_finished`]\n \n These APIs are now usable in const contexts:\n \n-- [`*const T::offset` and `*mut T::offset`][93957]\n-- [`*const T::wrapping_offset` and `*mut T::wrapping_offset`][93957]\n-- [`*const T::add` and `*mut T::add`][93957]\n-- [`*const T::sub` and `*mut T::sub`][93957]\n-- [`*const T::wrapping_add` and `*mut T::wrapping_add`][93957]\n-- [`*const T::wrapping_sub` and `*mut T::wrapping_sub`][93957]\n-- [`[T]::as_mut_ptr`][93957]\n-- [`[T]::as_ptr_range`][93957]\n-- [`[T]::as_mut_ptr_range`][93957]\n+- [`<*const T>::offset` and `<*mut T>::offset`][ptr-offset]\n+- [`<*const T>::wrapping_offset` and `<*mut T>::wrapping_offset`][ptr-wrapping_offset]\n+- [`<*const T>::add` and `<*mut T>::add`][ptr-add]\n+- [`<*const T>::sub` and `<*mut T>::sub`][ptr-sub]\n+- [`<*const T>::wrapping_add` and `<*mut T>::wrapping_add`][ptr-wrapping_add]\n+- [`<*const T>::wrapping_sub` and `<*mut T>::wrapping_sub`][ptr-wrapping_sub]\n+- [`<[T]>::as_mut_ptr`][slice-as_mut_ptr]\n+- [`<[T]>::as_ptr_range`][slice-as_ptr_range]\n+- [`<[T]>::as_mut_ptr_range`][slice-as_mut_ptr_range]\n \n Cargo\n -----\n@@ -64,7 +59,10 @@ No feature changes, but see compatibility notes.\n Compatibility Notes\n -------------------\n \n-- [Disable `#[thread_local]` support on i686-pc-windows-msvc][95430]\n+- Previously native static libraries were linked as `whole-archive` in some cases, but now rustc tries not to use `whole-archive` unless explicitly requested. This [change][93901] may result in linking errors in some cases. To fix such errors, native libraries linked from the command line, build scripts, or [`#[link]` attributes][link-attr] need to\n+  - (more common) either be reordered to respect dependencies between them (if `a` depends on `b` then `a` should go first and `b` second)\n+  - (less common) or be updated to use the [`+whole-archive`] modifier.\n+- [Catching a second unwind from FFI code while cleaning up from a Rust panic now causes the process to abort][92911]\n - [Proc macros no longer see `ident` matchers wrapped in groups][92472]\n - [The number of `#` in `r#` raw string literals is now required to be less than 256][95251]\n - [When checking that a dyn type satisfies a trait bound, supertrait bounds are now enforced][92285]\n@@ -87,33 +85,42 @@ and related tools.\n [90621]: https://github.com/rust-lang/rust/pull/90621/\n [92285]: https://github.com/rust-lang/rust/pull/92285/\n [92472]: https://github.com/rust-lang/rust/pull/92472/\n-[92519]: https://github.com/rust-lang/rust/pull/92519/\n-[92663]: https://github.com/rust-lang/rust/pull/92663/\n [92697]: https://github.com/rust-lang/rust/pull/92697/\n [92714]: https://github.com/rust-lang/rust/pull/92714/\n [92911]: https://github.com/rust-lang/rust/pull/92911/\n [93263]: https://github.com/rust-lang/rust/pull/93263/\n-[93580]: https://github.com/rust-lang/rust/pull/93580/\n [93745]: https://github.com/rust-lang/rust/pull/93745/\n [93827]: https://github.com/rust-lang/rust/pull/93827/\n-[93840]: https://github.com/rust-lang/rust/pull/93840/\n [93901]: https://github.com/rust-lang/rust/pull/93901/\n [93913]: https://github.com/rust-lang/rust/pull/93913/\n-[93957]: https://github.com/rust-lang/rust/pull/93957/\n [93965]: https://github.com/rust-lang/rust/pull/93965/\n [94081]: https://github.com/rust-lang/rust/pull/94081/\n [94261]: https://github.com/rust-lang/rust/pull/94261/\n [94295]: https://github.com/rust-lang/rust/pull/94295/\n-[94356]: https://github.com/rust-lang/rust/pull/94356/\n [94832]: https://github.com/rust-lang/rust/pull/94832/\n [95016]: https://github.com/rust-lang/rust/pull/95016/\n-[95098]: https://github.com/rust-lang/rust/pull/95098/\n-[95130]: https://github.com/rust-lang/rust/pull/95130/\n-[95247]: https://github.com/rust-lang/rust/pull/95247/\n [95251]: https://github.com/rust-lang/rust/pull/95251/\n-[95430]: https://github.com/rust-lang/rust/pull/95430/\n-[95491]: https://github.com/rust-lang/rust/pull/95491/\n+[`+whole-archive`]: https://doc.rust-lang.org/stable/rustc/command-line-arguments.html#linking-modifiers-whole-archive\n+[`Pin::static_mut`]: https://doc.rust-lang.org/stable/std/pin/struct.Pin.html#method.static_mut\n+[`Pin::static_ref`]: https://doc.rust-lang.org/stable/std/pin/struct.Pin.html#method.static_ref\n+[`Vec::retain_mut`]: https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.retain_mut\n+[`VecDeque::retain_mut`]: https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html#method.retain_mut\n+[`std::os::unix::net::SocketAddr::from_pathname`]: https://doc.rust-lang.org/stable/std/os/unix/net/struct.SocketAddr.html#method.from_pathname\n+[`std::process::ExitCode`]: https://doc.rust-lang.org/stable/std/process/struct.ExitCode.html\n+[`std::process::Termination`]: https://doc.rust-lang.org/stable/std/process/trait.Termination.html\n+[`std::thread::JoinHandle::is_finished`]: https://doc.rust-lang.org/stable/std/thread/struct.JoinHandle.html#method.is_finished\n [cargo/10448]: https://github.com/rust-lang/cargo/pull/10448/\n+[cursor-write-array]: https://doc.rust-lang.org/stable/std/io/struct.Cursor.html#impl-Write-4\n+[link-attr]: https://doc.rust-lang.org/stable/reference/items/external-blocks.html#the-link-attribute\n+[ptr-add]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.add\n+[ptr-offset]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset\n+[ptr-sub]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.sub\n+[ptr-wrapping_add]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.wrapping_add\n+[ptr-wrapping_offset]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.wrapping_offset\n+[ptr-wrapping_sub]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.wrapping_sub\n+[slice-as_mut_ptr]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr\n+[slice-as_mut_ptr_range]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr_range\n+[slice-as_ptr_range]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_ptr_range\n [target_feature]: https://doc.rust-lang.org/reference/attributes/codegen.html#the-target_feature-attribute\n \n "}]}