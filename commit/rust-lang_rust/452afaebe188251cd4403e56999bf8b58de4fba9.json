{"sha": "452afaebe188251cd4403e56999bf8b58de4fba9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MmFmYWViZTE4ODI1MWNkNDQwM2U1Njk5OWJmOGI1OGRlNGZiYTk=", "commit": {"author": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-08-25T04:40:43Z"}, "committer": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-08-25T04:40:43Z"}, "message": "Changes from review", "tree": {"sha": "88ba82f044248adb6ccc4da8931e26bbe9b345dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88ba82f044248adb6ccc4da8931e26bbe9b345dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/452afaebe188251cd4403e56999bf8b58de4fba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/452afaebe188251cd4403e56999bf8b58de4fba9", "html_url": "https://github.com/rust-lang/rust/commit/452afaebe188251cd4403e56999bf8b58de4fba9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/452afaebe188251cd4403e56999bf8b58de4fba9/comments", "author": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5452368fad8ee8d03d980de47604fa108111ea57", "url": "https://api.github.com/repos/rust-lang/rust/commits/5452368fad8ee8d03d980de47604fa108111ea57", "html_url": "https://github.com/rust-lang/rust/commit/5452368fad8ee8d03d980de47604fa108111ea57"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "94dd7f6f57d5ebd139a364f794b71b86e42a5896", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/452afaebe188251cd4403e56999bf8b58de4fba9/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452afaebe188251cd4403e56999bf8b58de4fba9/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=452afaebe188251cd4403e56999bf8b58de4fba9", "patch": "@@ -126,13 +126,16 @@ impl Crate {\n     }\n \n     /// Try to get the root URL of the documentation of a crate.\n-    pub fn get_doc_url(self: &Crate, db: &dyn HirDatabase) -> Option<String> {\n+    pub fn get_html_root_url(self: &Crate, db: &dyn HirDatabase) -> Option<String> {\n         // Look for #![doc(html_root_url = \"...\")]\n         let attrs = db.attrs(AttrDef::from(self.root_module(db)).into());\n         let doc_attr_q = attrs.by_key(\"doc\");\n \n-        let doc_url = if doc_attr_q.exists() {\n-            doc_attr_q.tt_values().map(|tt| {\n+        if !doc_attr_q.exists() {\n+            return None;\n+        }\n+\n+        let doc_url = doc_attr_q.tt_values().map(|tt| {\n             let name = tt.token_trees.iter()\n                 .skip_while(|tt| !matches!(tt, TokenTree::Leaf(Leaf::Ident(Ident{text: ref ident, ..})) if ident == \"html_root_url\"))\n                 .skip(2)\n@@ -142,14 +145,9 @@ impl Crate {\n                 Some(TokenTree::Leaf(Leaf::Literal(Literal{ref text, ..}))) => Some(text),\n                 _ => None\n             }\n-        }).flat_map(|t| t).next().map(|s| s.to_string())\n-        } else {\n-            None\n-        };\n+        }).flat_map(|t| t).next();\n \n-        doc_url\n-            .map(|s| s.trim_matches('\"').trim_end_matches(\"/\").to_owned() + \"/\")\n-            .map(|s| s.to_string())\n+        doc_url.map(|s| s.trim_matches('\"').trim_end_matches(\"/\").to_owned() + \"/\")\n     }\n }\n "}, {"sha": "dd2379bfc6668a26d77994bfcfc3491672946c7d", "filename": "crates/hir/src/doc_links.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/452afaebe188251cd4403e56999bf8b58de4fba9/crates%2Fhir%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452afaebe188251cd4403e56999bf8b58de4fba9/crates%2Fhir%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdoc_links.rs?ref=452afaebe188251cd4403e56999bf8b58de4fba9", "patch": "@@ -38,21 +38,17 @@ fn try_resolve_intra<T: Resolvable, D: DefDatabase + HirDatabase>(\n     let link_target =\n         if link_target.is_empty() { link_text.trim_matches('`') } else { link_target };\n \n-    // Namespace disambiguation\n-    let namespace = Namespace::from_intra_spec(link_target);\n-\n-    // Strip prefixes/suffixes\n-    let link_target = strip_prefixes_suffixes(link_target);\n+    let doclink = IntraDocLink::from(link_target);\n \n     // Parse link as a module path\n-    let path = Path::parse(link_target).ok()?;\n+    let path = Path::parse(doclink.path).ok()?;\n     let modpath = ModPath::from_src(path, &Hygiene::new_unhygienic()).unwrap();\n \n     // Resolve it relative to symbol's location (according to the RFC this should consider small scopes)\n     let resolver = definition.resolver(db)?;\n \n     let resolved = resolver.resolve_module_path_in_items(db, &modpath);\n-    let (defid, namespace) = match namespace {\n+    let (defid, namespace) = match doclink.namespace {\n         // FIXME: .or(resolved.macros)\n         None => resolved\n             .types\n@@ -133,7 +129,7 @@ fn strip_prefixes_suffixes(mut s: &str) -> &str {\n \n fn get_doc_url(db: &dyn HirDatabase, krate: &Crate) -> Option<Url> {\n     krate\n-        .get_doc_url(db)\n+        .get_html_root_url(db)\n         .or_else(||\n         // Fallback to docs.rs\n         // FIXME: Specify an exact version here. This may be difficult, as multiple versions of the same crate could exist.\n@@ -164,6 +160,17 @@ fn get_symbol_filename(db: &dyn HirDatabase, definition: &ModuleDef) -> Option<S\n     })\n }\n \n+struct IntraDocLink<'s> {\n+    path: &'s str,\n+    namespace: Option<Namespace>,\n+}\n+\n+impl<'s> From<&'s str> for IntraDocLink<'s> {\n+    fn from(s: &'s str) -> Self {\n+        Self { path: strip_prefixes_suffixes(s), namespace: Namespace::from_intra_spec(s) }\n+    }\n+}\n+\n #[derive(PartialEq, Eq, Hash, Copy, Clone, Debug)]\n enum Namespace {\n     Types,"}]}