{"sha": "406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d", "node_id": "C_kwDOAAsO6NoAKDQwNmViOTY0MzdkOWE3NWQxN2MwYWEzZGNjM2NlYzdjMGM4ZWI2OWQ", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-28T19:32:57Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-29T05:22:37Z"}, "message": "Move `mir::Field` \u2192 `abi::FieldIdx`\n\nThe first PR for https://github.com/rust-lang/compiler-team/issues/606\n\nThis is just the move-and-rename, because it's plenty big-and-bitrotty already.  Future PRs will start using `FieldIdx` more broadly, and concomitantly removing `FieldIdx::new`s.", "tree": {"sha": "17e442efaaf245e9c887ecad8545246f615c4ed4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17e442efaaf245e9c887ecad8545246f615c4ed4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d", "html_url": "https://github.com/rust-lang/rust/commit/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37ab4bd419ab7e87a6e6f592f9da62f35c4b9f98", "url": "https://api.github.com/repos/rust-lang/rust/commits/37ab4bd419ab7e87a6e6f592f9da62f35c4b9f98", "html_url": "https://github.com/rust-lang/rust/commit/37ab4bd419ab7e87a6e6f592f9da62f35c4b9f98"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "91c085d3d698684b0d2b4cbd13c84ba9d063256b", "filename": "src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d", "patch": "@@ -327,7 +327,7 @@ pub(crate) fn codegen_fn_prelude<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, start_\n             ArgKind::Spread(params) => {\n                 for (i, param) in params.into_iter().enumerate() {\n                     if let Some(param) = param {\n-                        place.place_field(fx, mir::Field::new(i)).write_cvalue(fx, param);\n+                        place.place_field(fx, FieldIdx::new(i)).write_cvalue(fx, param);\n                     }\n                 }\n             }\n@@ -460,7 +460,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         args.push(self_arg);\n         for i in 0..tupled_arguments.len() {\n             args.push(CallArgument {\n-                value: pack_arg.value.value_field(fx, mir::Field::new(i)),\n+                value: pack_arg.value.value_field(fx, FieldIdx::new(i)),\n                 is_owned: pack_arg.is_owned,\n             });\n         }"}, {"sha": "615ef58ff582922a740b6e834ba839125719668c", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d", "patch": "@@ -797,7 +797,7 @@ fn codegen_stmt<'tcx>(\n                             let index = fx.bcx.ins().iconst(fx.pointer_type, field_index as i64);\n                             variant_dest.place_index(fx, index)\n                         } else {\n-                            variant_dest.place_field(fx, mir::Field::new(field_index))\n+                            variant_dest.place_field(fx, FieldIdx::new(field_index))\n                         };\n                         to.write_cvalue(fx, operand);\n                     }"}, {"sha": "f740945a03c31578b8b025a062288d44d9ea6a16", "filename": "src/discriminant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d", "patch": "@@ -26,7 +26,7 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n             tag_encoding: TagEncoding::Direct,\n             variants: _,\n         } => {\n-            let ptr = place.place_field(fx, mir::Field::new(tag_field));\n+            let ptr = place.place_field(fx, FieldIdx::new(tag_field));\n             let to = layout.ty.discriminant_for_variant(fx.tcx, variant_index).unwrap().val;\n             let to = if ptr.layout().abi.is_signed() {\n                 ty::ScalarInt::try_from_int(\n@@ -47,7 +47,7 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n             variants: _,\n         } => {\n             if variant_index != untagged_variant {\n-                let niche = place.place_field(fx, mir::Field::new(tag_field));\n+                let niche = place.place_field(fx, FieldIdx::new(tag_field));\n                 let niche_type = fx.clif_type(niche.layout().ty).unwrap();\n                 let niche_value = variant_index.as_u32() - niche_variants.start().as_u32();\n                 let niche_value = (niche_value as u128).wrapping_add(niche_start);\n@@ -107,7 +107,7 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n     let cast_to = fx.clif_type(dest_layout.ty).unwrap();\n \n     // Read the tag/niche-encoded discriminant from memory.\n-    let tag = value.value_field(fx, mir::Field::new(tag_field));\n+    let tag = value.value_field(fx, FieldIdx::new(tag_field));\n     let tag = tag.load_scalar(fx);\n \n     // Decode the discriminant (specifically if it's niche-encoded)."}, {"sha": "0f32d1a25ffade75762b0c7b39f5cbbfcb411089", "filename": "src/intrinsics/llvm_x86.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Fintrinsics%2Fllvm_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Fintrinsics%2Fllvm_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm_x86.rs?ref=406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d", "patch": "@@ -179,8 +179,8 @@ fn llvm_add_sub<'tcx>(\n \n     // c + carry -> c + first intermediate carry or borrow respectively\n     let int0 = crate::num::codegen_checked_int_binop(fx, bin_op, a, b);\n-    let c = int0.value_field(fx, mir::Field::new(0));\n-    let cb0 = int0.value_field(fx, mir::Field::new(1)).load_scalar(fx);\n+    let c = int0.value_field(fx, FieldIdx::new(0));\n+    let cb0 = int0.value_field(fx, FieldIdx::new(1)).load_scalar(fx);\n \n     // c + carry -> c + second intermediate carry or borrow respectively\n     let cb_in_as_u64 = fx.bcx.ins().uextend(types::I64, cb_in);"}, {"sha": "6f54a8d49c8674d8b320d72b0ae84fa0a5387505", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d", "patch": "@@ -253,7 +253,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             }\n \n             ret.write_cvalue(fx, base);\n-            let ret_lane = ret.place_field(fx, mir::Field::new(idx.try_into().unwrap()));\n+            let ret_lane = ret.place_field(fx, FieldIdx::new(idx.try_into().unwrap()));\n             ret_lane.write_cvalue(fx, val);\n         }\n "}, {"sha": "8cc7f6c34b021ac8d7c9c06e166693228633f425", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d", "patch": "@@ -86,7 +86,7 @@ mod prelude {\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n         TypeFoldable, TypeVisitableExt, UintTy,\n     };\n-    pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx, FIRST_VARIANT};\n+    pub(crate) use rustc_target::abi::{Abi, FieldIdx, Scalar, Size, VariantIdx, FIRST_VARIANT};\n \n     pub(crate) use rustc_data_structures::fx::FxHashMap;\n "}, {"sha": "ff0e12410e7031498d13b61e02bc1e3525401055", "filename": "src/unsize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d", "patch": "@@ -147,8 +147,8 @@ pub(crate) fn coerce_unsized_into<'tcx>(\n             assert_eq!(def_a, def_b);\n \n             for i in 0..def_a.variant(FIRST_VARIANT).fields.len() {\n-                let src_f = src.value_field(fx, mir::Field::new(i));\n-                let dst_f = dst.place_field(fx, mir::Field::new(i));\n+                let src_f = src.value_field(fx, FieldIdx::new(i));\n+                let dst_f = dst.place_field(fx, FieldIdx::new(i));\n \n                 if dst_f.layout().is_zst() {\n                     continue;"}, {"sha": "ffe3ccb0eca0471099879d1fc9f8880a11320d5c", "filename": "src/value_and_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d", "patch": "@@ -10,7 +10,7 @@ fn codegen_field<'tcx>(\n     base: Pointer,\n     extra: Option<Value>,\n     layout: TyAndLayout<'tcx>,\n-    field: mir::Field,\n+    field: FieldIdx,\n ) -> (Pointer, TyAndLayout<'tcx>) {\n     let field_offset = layout.fields.offset(field.index());\n     let field_layout = layout.field(&*fx, field.index());\n@@ -210,7 +210,7 @@ impl<'tcx> CValue<'tcx> {\n     pub(crate) fn value_field(\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,\n-        field: mir::Field,\n+        field: FieldIdx,\n     ) -> CValue<'tcx> {\n         let layout = self.1;\n         match self.0 {\n@@ -687,7 +687,7 @@ impl<'tcx> CPlace<'tcx> {\n     pub(crate) fn place_field(\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,\n-        field: mir::Field,\n+        field: FieldIdx,\n     ) -> CPlace<'tcx> {\n         let layout = self.layout();\n "}, {"sha": "b309695c190f8b4b6489a251870fa04116c39957", "filename": "src/vtable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=406eb96437d9a75d17c0aa3dcc3cec7c0c8eb69d", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n         if let Abi::Scalar(_) = arg.layout().abi {\n             'descend_newtypes: while !arg.layout().ty.is_unsafe_ptr() && !arg.layout().ty.is_ref() {\n                 for i in 0..arg.layout().fields.count() {\n-                    let field = arg.value_field(fx, mir::Field::new(i));\n+                    let field = arg.value_field(fx, FieldIdx::new(i));\n                     if !field.layout().is_zst() {\n                         // we found the one non-zero-sized field that is allowed\n                         // now find *its* non-zero-sized field, or stop if it's a\n@@ -68,9 +68,9 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n             if ty.is_dyn_star() {\n                 let inner_layout = fx.layout_of(arg.layout().ty.builtin_deref(true).unwrap().ty);\n                 let dyn_star = CPlace::for_ptr(Pointer::new(arg.load_scalar(fx)), inner_layout);\n-                let ptr = dyn_star.place_field(fx, mir::Field::new(0)).to_ptr();\n+                let ptr = dyn_star.place_field(fx, FieldIdx::new(0)).to_ptr();\n                 let vtable =\n-                    dyn_star.place_field(fx, mir::Field::new(1)).to_cvalue(fx).load_scalar(fx);\n+                    dyn_star.place_field(fx, FieldIdx::new(1)).to_cvalue(fx).load_scalar(fx);\n                 break 'block (ptr, vtable);\n             }\n         }"}]}