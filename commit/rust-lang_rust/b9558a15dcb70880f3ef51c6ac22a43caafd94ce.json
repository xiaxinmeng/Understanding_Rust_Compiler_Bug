{"sha": "b9558a15dcb70880f3ef51c6ac22a43caafd94ce", "node_id": "C_kwDOAAsO6NoAKGI5NTU4YTE1ZGNiNzA4ODBmM2VmNTFjNmFjMjJhNDNjYWFmZDk0Y2U", "commit": {"author": {"name": "Trevor Gross", "email": "tmgross@umich.edu", "date": "2022-12-13T07:18:15Z"}, "committer": {"name": "Trevor Gross", "email": "tmgross@umich.edu", "date": "2022-12-13T07:18:15Z"}, "message": "Add #[inline] marker to OnceCell/LazyCell/OnceLock/LazyLock", "tree": {"sha": "2f79dd2663516d9cd3ab628dd59594c827d0c38f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f79dd2663516d9cd3ab628dd59594c827d0c38f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9558a15dcb70880f3ef51c6ac22a43caafd94ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9558a15dcb70880f3ef51c6ac22a43caafd94ce", "html_url": "https://github.com/rust-lang/rust/commit/b9558a15dcb70880f3ef51c6ac22a43caafd94ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9558a15dcb70880f3ef51c6ac22a43caafd94ce/comments", "author": {"login": "tgross35", "id": 13724985, "node_id": "MDQ6VXNlcjEzNzI0OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/13724985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgross35", "html_url": "https://github.com/tgross35", "followers_url": "https://api.github.com/users/tgross35/followers", "following_url": "https://api.github.com/users/tgross35/following{/other_user}", "gists_url": "https://api.github.com/users/tgross35/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgross35/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgross35/subscriptions", "organizations_url": "https://api.github.com/users/tgross35/orgs", "repos_url": "https://api.github.com/users/tgross35/repos", "events_url": "https://api.github.com/users/tgross35/events{/privacy}", "received_events_url": "https://api.github.com/users/tgross35/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tgross35", "id": 13724985, "node_id": "MDQ6VXNlcjEzNzI0OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/13724985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgross35", "html_url": "https://github.com/tgross35", "followers_url": "https://api.github.com/users/tgross35/followers", "following_url": "https://api.github.com/users/tgross35/following{/other_user}", "gists_url": "https://api.github.com/users/tgross35/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgross35/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgross35/subscriptions", "organizations_url": "https://api.github.com/users/tgross35/orgs", "repos_url": "https://api.github.com/users/tgross35/repos", "events_url": "https://api.github.com/users/tgross35/events{/privacy}", "received_events_url": "https://api.github.com/users/tgross35/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71ec1457ee9868a838e4521a3510cdd416c0c295", "url": "https://api.github.com/repos/rust-lang/rust/commits/71ec1457ee9868a838e4521a3510cdd416c0c295", "html_url": "https://github.com/rust-lang/rust/commit/71ec1457ee9868a838e4521a3510cdd416c0c295"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "08dcac6dbe6f160082e16b87a2702c74b3bcdbd0", "filename": "library/core/src/cell/lazy.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9558a15dcb70880f3ef51c6ac22a43caafd94ce/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9558a15dcb70880f3ef51c6ac22a43caafd94ce/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs?ref=b9558a15dcb70880f3ef51c6ac22a43caafd94ce", "patch": "@@ -51,6 +51,7 @@ impl<T, F> LazyCell<T, F> {\n     ///\n     /// assert_eq!(&*lazy, \"HELLO, WORLD!\");\n     /// ```\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub const fn new(init: F) -> LazyCell<T, F> {\n         LazyCell { cell: OnceCell::new(), init: Cell::new(Some(init)) }\n@@ -75,6 +76,7 @@ impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n     /// assert_eq!(LazyCell::force(&lazy), &92);\n     /// assert_eq!(&*lazy, &92);\n     /// ```\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn force(this: &LazyCell<T, F>) -> &T {\n         this.cell.get_or_init(|| match this.init.take() {\n@@ -87,6 +89,7 @@ impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T, F: FnOnce() -> T> Deref for LazyCell<T, F> {\n     type Target = T;\n+    #[inline]\n     fn deref(&self) -> &T {\n         LazyCell::force(self)\n     }\n@@ -95,6 +98,7 @@ impl<T, F: FnOnce() -> T> Deref for LazyCell<T, F> {\n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T: Default> Default for LazyCell<T> {\n     /// Creates a new lazy value using `Default` as the initializing function.\n+    #[inline]\n     fn default() -> LazyCell<T> {\n         LazyCell::new(T::default)\n     }"}, {"sha": "7757068a4f2b97cbdbf606c90078e1d0fc3925ff", "filename": "library/core/src/cell/once.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b9558a15dcb70880f3ef51c6ac22a43caafd94ce/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9558a15dcb70880f3ef51c6ac22a43caafd94ce/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs?ref=b9558a15dcb70880f3ef51c6ac22a43caafd94ce", "patch": "@@ -37,15 +37,17 @@ pub struct OnceCell<T> {\n \n impl<T> OnceCell<T> {\n     /// Creates a new empty cell.\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[inline]\n     #[must_use]\n+    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub const fn new() -> OnceCell<T> {\n         OnceCell { inner: UnsafeCell::new(None) }\n     }\n \n     /// Gets the reference to the underlying value.\n     ///\n     /// Returns `None` if the cell is empty.\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn get(&self) -> Option<&T> {\n         // SAFETY: Safe due to `inner`'s invariant\n@@ -55,6 +57,7 @@ impl<T> OnceCell<T> {\n     /// Gets the mutable reference to the underlying value.\n     ///\n     /// Returns `None` if the cell is empty.\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn get_mut(&mut self) -> Option<&mut T> {\n         self.inner.get_mut().as_mut()\n@@ -82,6 +85,7 @@ impl<T> OnceCell<T> {\n     ///\n     /// assert!(cell.get().is_some());\n     /// ```\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn set(&self, value: T) -> Result<(), T> {\n         // SAFETY: Safe because we cannot have overlapping mutable borrows\n@@ -123,6 +127,7 @@ impl<T> OnceCell<T> {\n     /// let value = cell.get_or_init(|| unreachable!());\n     /// assert_eq!(value, &92);\n     /// ```\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn get_or_init<F>(&self, f: F) -> &T\n     where\n@@ -205,6 +210,7 @@ impl<T> OnceCell<T> {\n     /// cell.set(\"hello\".to_string()).unwrap();\n     /// assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n     /// ```\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn into_inner(self) -> Option<T> {\n         // Because `into_inner` takes `self` by value, the compiler statically verifies\n@@ -233,6 +239,7 @@ impl<T> OnceCell<T> {\n     /// assert_eq!(cell.take(), Some(\"hello\".to_string()));\n     /// assert_eq!(cell.get(), None);\n     /// ```\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn take(&mut self) -> Option<T> {\n         mem::take(self).into_inner()\n@@ -241,6 +248,7 @@ impl<T> OnceCell<T> {\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T> Default for OnceCell<T> {\n+    #[inline]\n     fn default() -> Self {\n         Self::new()\n     }\n@@ -258,6 +266,7 @@ impl<T: fmt::Debug> fmt::Debug for OnceCell<T> {\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T: Clone> Clone for OnceCell<T> {\n+    #[inline]\n     fn clone(&self) -> OnceCell<T> {\n         let res = OnceCell::new();\n         if let Some(value) = self.get() {\n@@ -272,6 +281,7 @@ impl<T: Clone> Clone for OnceCell<T> {\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T: PartialEq> PartialEq for OnceCell<T> {\n+    #[inline]\n     fn eq(&self, other: &Self) -> bool {\n         self.get() == other.get()\n     }\n@@ -283,6 +293,7 @@ impl<T: Eq> Eq for OnceCell<T> {}\n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T> const From<T> for OnceCell<T> {\n     /// Creates a new `OnceCell<T>` which already contains the given `value`.\n+    #[inline]\n     fn from(value: T) -> Self {\n         OnceCell { inner: UnsafeCell::new(Some(value)) }\n     }"}, {"sha": "b63f16820b7738ef91c2ffba7d67665db96798cc", "filename": "library/std/src/sync/lazy_lock.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b9558a15dcb70880f3ef51c6ac22a43caafd94ce/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9558a15dcb70880f3ef51c6ac22a43caafd94ce/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs?ref=b9558a15dcb70880f3ef51c6ac22a43caafd94ce", "patch": "@@ -50,6 +50,7 @@ pub struct LazyLock<T, F = fn() -> T> {\n impl<T, F> LazyLock<T, F> {\n     /// Creates a new lazy value with the given initializing\n     /// function.\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub const fn new(f: F) -> LazyLock<T, F> {\n         LazyLock { cell: OnceLock::new(), init: Cell::new(Some(f)) }\n@@ -73,6 +74,7 @@ impl<T, F: FnOnce() -> T> LazyLock<T, F> {\n     /// assert_eq!(LazyLock::force(&lazy), &92);\n     /// assert_eq!(&*lazy, &92);\n     /// ```\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn force(this: &LazyLock<T, F>) -> &T {\n         this.cell.get_or_init(|| match this.init.take() {\n@@ -85,6 +87,8 @@ impl<T, F: FnOnce() -> T> LazyLock<T, F> {\n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T, F: FnOnce() -> T> Deref for LazyLock<T, F> {\n     type Target = T;\n+\n+    #[inline]\n     fn deref(&self) -> &T {\n         LazyLock::force(self)\n     }\n@@ -93,6 +97,7 @@ impl<T, F: FnOnce() -> T> Deref for LazyLock<T, F> {\n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T: Default> Default for LazyLock<T> {\n     /// Creates a new lazy value using `Default` as the initializing function.\n+    #[inline]\n     fn default() -> LazyLock<T> {\n         LazyLock::new(T::default)\n     }"}, {"sha": "ed339ca5df669991f3aec60d9e85f6e597918ad6", "filename": "library/std/src/sync/once_lock.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b9558a15dcb70880f3ef51c6ac22a43caafd94ce/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9558a15dcb70880f3ef51c6ac22a43caafd94ce/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock.rs?ref=b9558a15dcb70880f3ef51c6ac22a43caafd94ce", "patch": "@@ -61,8 +61,9 @@ pub struct OnceLock<T> {\n \n impl<T> OnceLock<T> {\n     /// Creates a new empty cell.\n-    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[inline]\n     #[must_use]\n+    #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub const fn new() -> OnceLock<T> {\n         OnceLock {\n             once: Once::new(),\n@@ -75,6 +76,7 @@ impl<T> OnceLock<T> {\n     ///\n     /// Returns `None` if the cell is empty, or being initialized. This\n     /// method never blocks.\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn get(&self) -> Option<&T> {\n         if self.is_initialized() {\n@@ -88,6 +90,7 @@ impl<T> OnceLock<T> {\n     /// Gets the mutable reference to the underlying value.\n     ///\n     /// Returns `None` if the cell is empty. This method never blocks.\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn get_mut(&mut self) -> Option<&mut T> {\n         if self.is_initialized() {\n@@ -125,6 +128,7 @@ impl<T> OnceLock<T> {\n     ///     assert_eq!(CELL.get(), Some(&92));\n     /// }\n     /// ```\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn set(&self, value: T) -> Result<(), T> {\n         let mut value = Some(value);\n@@ -164,6 +168,7 @@ impl<T> OnceLock<T> {\n     /// let value = cell.get_or_init(|| unreachable!());\n     /// assert_eq!(value, &92);\n     /// ```\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn get_or_init<F>(&self, f: F) -> &T\n     where\n@@ -203,6 +208,7 @@ impl<T> OnceLock<T> {\n     /// assert_eq!(value, Ok(&92));\n     /// assert_eq!(cell.get(), Some(&92))\n     /// ```\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n     where\n@@ -241,6 +247,7 @@ impl<T> OnceLock<T> {\n     /// cell.set(\"hello\".to_string()).unwrap();\n     /// assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n     /// ```\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn into_inner(mut self) -> Option<T> {\n         self.take()\n@@ -267,6 +274,7 @@ impl<T> OnceLock<T> {\n     /// assert_eq!(cell.take(), Some(\"hello\".to_string()));\n     /// assert_eq!(cell.get(), None);\n     /// ```\n+    #[inline]\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn take(&mut self) -> Option<T> {\n         if self.is_initialized() {\n@@ -315,6 +323,7 @@ impl<T> OnceLock<T> {\n     /// # Safety\n     ///\n     /// The value must be initialized\n+    #[inline]\n     unsafe fn get_unchecked(&self) -> &T {\n         debug_assert!(self.is_initialized());\n         (&*self.value.get()).assume_init_ref()\n@@ -323,6 +332,7 @@ impl<T> OnceLock<T> {\n     /// # Safety\n     ///\n     /// The value must be initialized\n+    #[inline]\n     unsafe fn get_unchecked_mut(&mut self) -> &mut T {\n         debug_assert!(self.is_initialized());\n         (&mut *self.value.get()).assume_init_mut()\n@@ -360,6 +370,7 @@ impl<T> const Default for OnceLock<T> {\n     ///     assert_eq!(OnceLock::<()>::new(), OnceLock::default());\n     /// }\n     /// ```\n+    #[inline]\n     fn default() -> OnceLock<T> {\n         OnceLock::new()\n     }\n@@ -377,6 +388,7 @@ impl<T: fmt::Debug> fmt::Debug for OnceLock<T> {\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T: Clone> Clone for OnceLock<T> {\n+    #[inline]\n     fn clone(&self) -> OnceLock<T> {\n         let cell = Self::new();\n         if let Some(value) = self.get() {\n@@ -408,6 +420,7 @@ impl<T> From<T> for OnceLock<T> {\n     /// Ok(())\n     /// # }\n     /// ```\n+    #[inline]\n     fn from(value: T) -> Self {\n         let cell = Self::new();\n         match cell.set(value) {\n@@ -419,6 +432,7 @@ impl<T> From<T> for OnceLock<T> {\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T: PartialEq> PartialEq for OnceLock<T> {\n+    #[inline]\n     fn eq(&self, other: &OnceLock<T>) -> bool {\n         self.get() == other.get()\n     }\n@@ -429,6 +443,7 @@ impl<T: Eq> Eq for OnceLock<T> {}\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n unsafe impl<#[may_dangle] T> Drop for OnceLock<T> {\n+    #[inline]\n     fn drop(&mut self) {\n         if self.is_initialized() {\n             // SAFETY: The cell is initialized and being dropped, so it can't"}]}