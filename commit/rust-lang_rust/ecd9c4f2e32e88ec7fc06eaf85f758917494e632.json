{"sha": "ecd9c4f2e32e88ec7fc06eaf85f758917494e632", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZDljNGYyZTMyZTg4ZWM3ZmMwNmVhZjg1Zjc1ODkxNzQ5NGU2MzI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-19T08:52:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-19T08:52:56Z"}, "message": "FIx review comments", "tree": {"sha": "18fbb0df2385c75a40b3c1f24b78f10597bbbaad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18fbb0df2385c75a40b3c1f24b78f10597bbbaad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecd9c4f2e32e88ec7fc06eaf85f758917494e632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd9c4f2e32e88ec7fc06eaf85f758917494e632", "html_url": "https://github.com/rust-lang/rust/commit/ecd9c4f2e32e88ec7fc06eaf85f758917494e632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecd9c4f2e32e88ec7fc06eaf85f758917494e632/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0471ed27766724e0bed9d96d4f107f3c12280828", "url": "https://api.github.com/repos/rust-lang/rust/commits/0471ed27766724e0bed9d96d4f107f3c12280828", "html_url": "https://github.com/rust-lang/rust/commit/0471ed27766724e0bed9d96d4f107f3c12280828"}], "stats": {"total": 46, "additions": 21, "deletions": 25}, "files": [{"sha": "60cf43da1b91fbfb6bc0d64e7bf79a83370bd7fe", "filename": "src/backend.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ecd9c4f2e32e88ec7fc06eaf85f758917494e632/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd9c4f2e32e88ec7fc06eaf85f758917494e632/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=ecd9c4f2e32e88ec7fc06eaf85f758917494e632", "patch": "@@ -42,24 +42,21 @@ impl WriteMetadata for faerie::Artifact {\n }\n \n impl WriteMetadata for object::write::Object {\n-    fn add_rustc_section(&mut self, symbol_name: String, data: Vec<u8>, is_like_osx: bool) {\n+    fn add_rustc_section(&mut self, symbol_name: String, data: Vec<u8>, _is_like_osx: bool) {\n         let segment = self.segment_name(object::write::StandardSegment::Data).to_vec();\n         let section_id = self.add_section(segment, b\".rustc\".to_vec(), object::SectionKind::Data);\n         let offset = self.append_section_data(section_id, &data, 1);\n-        // FIXME implement faerie elf backend section custom symbols\n-        // For MachO this is necessary to prevent the linker from throwing away the .rustc section,\n-        // but for ELF it isn't.\n-        if is_like_osx {\n-            self.add_symbol(object::write::Symbol {\n-                name: symbol_name.into_bytes(),\n-                value: offset,\n-                size: data.len() as u64,\n-                kind: object::SymbolKind::Data,\n-                scope: object::SymbolScope::Compilation,\n-                weak: false,\n-                section: Some(section_id),\n-            });\n-        }\n+        // For MachO and probably PE this is necessary to prevent the linker from throwing away the\n+        // .rustc section. For ELF this isn't necessary, but it also doesn't harm.\n+        self.add_symbol(object::write::Symbol {\n+            name: symbol_name.into_bytes(),\n+            value: offset,\n+            size: data.len() as u64,\n+            kind: object::SymbolKind::Data,\n+            scope: object::SymbolScope::Compilation,\n+            weak: false,\n+            section: Some(section_id),\n+        });\n     }\n }\n \n@@ -70,7 +67,7 @@ pub trait WriteDebugInfo {\n     fn add_debug_reloc(\n         &mut self,\n         section_map: &HashMap<SectionId, Self::SectionId>,\n-        symbol_map: &indexmap::IndexSet<(String, FuncId)>,\n+        symbol_map: &indexmap::IndexMap<FuncId, String>,\n         from: &Self::SectionId,\n         reloc: &DebugReloc,\n     );\n@@ -87,7 +84,7 @@ impl WriteDebugInfo for FaerieProduct {\n     fn add_debug_reloc(\n         &mut self,\n         _section_map: &HashMap<SectionId, Self::SectionId>,\n-        symbol_map: &indexmap::IndexSet<(String, FuncId)>,\n+        symbol_map: &indexmap::IndexMap<FuncId, String>,\n         from: &Self::SectionId,\n         reloc: &DebugReloc,\n     ) {\n@@ -98,7 +95,7 @@ impl WriteDebugInfo for FaerieProduct {\n                     from: from.name(),\n                     to: match reloc.name {\n                         DebugRelocName::Section(id) => id.name(),\n-                        DebugRelocName::Symbol(index) => &symbol_map.get_index(index).unwrap().0,\n+                        DebugRelocName::Symbol(index) => &symbol_map.get_index(index).unwrap().1,\n                     },\n                     at: u64::from(reloc.offset),\n                 },\n@@ -130,15 +127,14 @@ impl WriteDebugInfo for ObjectProduct {\n     fn add_debug_reloc(\n         &mut self,\n         section_map: &HashMap<SectionId, Self::SectionId>,\n-        symbol_map: &indexmap::IndexSet<(String, FuncId)>,\n+        symbol_map: &indexmap::IndexMap<FuncId, String>,\n         from: &Self::SectionId,\n         reloc: &DebugReloc,\n     ) {\n         let symbol = match reloc.name {\n             DebugRelocName::Section(id) => section_map.get(&id).unwrap().1,\n             DebugRelocName::Symbol(id) => {\n-                let (_func_name, func_id) = symbol_map.get_index(id).unwrap();\n-                self.function_symbol(*func_id)\n+                self.function_symbol(*symbol_map.get_index(id).unwrap().0)\n             }\n         };\n         self.object.add_relocation(from.0, Relocation {"}, {"sha": "762fa8668bfbadf5cb146a3c2450bd98b5200ed8", "filename": "src/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecd9c4f2e32e88ec7fc06eaf85f758917494e632/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd9c4f2e32e88ec7fc06eaf85f758917494e632/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=ecd9c4f2e32e88ec7fc06eaf85f758917494e632", "patch": "@@ -71,7 +71,7 @@ pub enum DebugRelocName {\n \n pub struct DebugContext<'tcx> {\n     endian: RunTimeEndian,\n-    symbols: indexmap::IndexSet<(String, FuncId)>,\n+    symbols: indexmap::IndexMap<FuncId, String>,\n \n     dwarf: DwarfUnit,\n     unit_range_list: RangeList,\n@@ -133,7 +133,7 @@ impl<'tcx> DebugContext<'tcx> {\n \n         DebugContext {\n             endian: target_endian(tcx),\n-            symbols: indexmap::IndexSet::new(),\n+            symbols: indexmap::IndexMap::new(),\n \n             dwarf,\n             unit_range_list: RangeList(Vec::new()),\n@@ -216,7 +216,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         name: &str,\n         _sig: &Signature,\n     ) -> Self {\n-        let (symbol, _) = debug_context.symbols.insert_full((name.to_string(), func_id));\n+        let (symbol, _) = debug_context.symbols.insert_full(func_id, name.to_string());\n \n         // FIXME: add to appropriate scope intead of root\n         let scope = debug_context.dwarf.unit.root();"}, {"sha": "215ae071c3f662df90cc4963823d2ea5b2365829", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd9c4f2e32e88ec7fc06eaf85f758917494e632/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd9c4f2e32e88ec7fc06eaf85f758917494e632/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=ecd9c4f2e32e88ec7fc06eaf85f758917494e632", "patch": "@@ -174,7 +174,7 @@ fn run_aot(\n             let obj = product.emit();\n             std::fs::write(&tmp_file, obj).unwrap();\n             CompiledModule {\n-                name: name,\n+                name,\n                 kind,\n                 object: Some(tmp_file),\n                 bytecode: None,"}]}