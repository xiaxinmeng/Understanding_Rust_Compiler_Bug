{"sha": "18aea4594b19b90c0809a56770d5cb5fd5db36e5", "node_id": "C_kwDOAAsO6NoAKDE4YWVhNDU5NGIxOWI5MGMwODA5YTU2NzcwZDVjYjVmZDVkYjM2ZTU", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-07-01T22:30:03Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-07-01T23:11:29Z"}, "message": "rustdoc-json-types: Clean up derives.\n\nCloses #96189\n\nCloses #96189\n\nEverything is `Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize`\nexcept `Crate` and `Item` which arn't `Hash`, as they have `HashMap`'s.\nSee linked issue for reasoning.", "tree": {"sha": "933dcee84613d23099b04d33d22bb8efbeab09cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/933dcee84613d23099b04d33d22bb8efbeab09cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18aea4594b19b90c0809a56770d5cb5fd5db36e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18aea4594b19b90c0809a56770d5cb5fd5db36e5", "html_url": "https://github.com/rust-lang/rust/commit/18aea4594b19b90c0809a56770d5cb5fd5db36e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18aea4594b19b90c0809a56770d5cb5fd5db36e5/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5018181c79a6fe37913fd931005ad2a63c85be7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5018181c79a6fe37913fd931005ad2a63c85be7b", "html_url": "https://github.com/rust-lang/rust/commit/5018181c79a6fe37913fd931005ad2a63c85be7b"}], "stats": {"total": 90, "additions": 45, "deletions": 45}, "files": [{"sha": "db2ad953f6aa084efd27fd4335785ab54b02c9d0", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18aea4594b19b90c0809a56770d5cb5fd5db36e5/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18aea4594b19b90c0809a56770d5cb5fd5db36e5/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=18aea4594b19b90c0809a56770d5cb5fd5db36e5", "patch": "@@ -624,7 +624,7 @@ impl FromWithTcx<clean::VariantStruct> for Struct {\n         let clean::VariantStruct { struct_type, fields } = struct_;\n         Struct {\n             struct_type: from_ctor_kind(struct_type),\n-            generics: Default::default(),\n+            generics: Generics { params: vec![], where_predicates: vec![] },\n             fields_stripped,\n             fields: ids(fields, tcx),\n             impls: Vec::new(),"}, {"sha": "1168a89a8b2bf672b62a7eccac37a64174e813f8", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/18aea4594b19b90c0809a56770d5cb5fd5db36e5/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18aea4594b19b90c0809a56770d5cb5fd5db36e5/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=18aea4594b19b90c0809a56770d5cb5fd5db36e5", "patch": "@@ -14,7 +14,7 @@ pub const FORMAT_VERSION: u32 = 15;\n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n /// tools to find or link to them.\n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]\n pub struct Crate {\n     /// The id of the root [`Module`] item of the local crate.\n     pub root: Id,\n@@ -34,7 +34,7 @@ pub struct Crate {\n     pub format_version: u32,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct ExternalCrate {\n     pub name: String,\n     pub html_root_url: Option<String>,\n@@ -44,7 +44,7 @@ pub struct ExternalCrate {\n /// information. This struct should contain enough to generate a link/reference to the item in\n /// question, or can be used by a tool that takes the json output of multiple crates to find\n /// the actual item definition with all the relevant info.\n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct ItemSummary {\n     /// Can be used to look up the name and html_root_url of the crate this item came from in the\n     /// `external_crates` map.\n@@ -56,7 +56,7 @@ pub struct ItemSummary {\n     pub kind: ItemKind,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]\n pub struct Item {\n     /// The unique identifier of this item. Can be used to find this item in various mappings.\n     pub id: Id,\n@@ -83,7 +83,7 @@ pub struct Item {\n     pub inner: ItemEnum,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Span {\n     /// The path to the source file for this span relative to the path `rustdoc` was invoked with.\n     pub filename: PathBuf,\n@@ -93,13 +93,13 @@ pub struct Span {\n     pub end: (usize, usize),\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Deprecation {\n     pub since: Option<String>,\n     pub note: Option<String>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum Visibility {\n     Public,\n@@ -115,7 +115,7 @@ pub enum Visibility {\n     },\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum GenericArgs {\n     /// <'a, 32, B: Copy, C = u32>\n@@ -124,7 +124,7 @@ pub enum GenericArgs {\n     Parenthesized { inputs: Vec<Type>, output: Option<Type> },\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum GenericArg {\n     Lifetime(String),\n@@ -133,7 +133,7 @@ pub enum GenericArg {\n     Infer,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Constant {\n     #[serde(rename = \"type\")]\n     pub type_: Type,\n@@ -142,14 +142,14 @@ pub struct Constant {\n     pub is_literal: bool,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct TypeBinding {\n     pub name: String,\n     pub args: GenericArgs,\n     pub binding: TypeBindingKind,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum TypeBindingKind {\n     Equality(Term),\n@@ -159,7 +159,7 @@ pub enum TypeBindingKind {\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Id(pub String);\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum ItemKind {\n     Module,\n@@ -189,7 +189,7 @@ pub enum ItemKind {\n     Keyword,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(tag = \"kind\", content = \"inner\", rename_all = \"snake_case\")]\n pub enum ItemEnum {\n     Module(Module),\n@@ -241,21 +241,21 @@ pub enum ItemEnum {\n     },\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Module {\n     pub is_crate: bool,\n     pub items: Vec<Id>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Union {\n     pub generics: Generics,\n     pub fields_stripped: bool,\n     pub fields: Vec<Id>,\n     pub impls: Vec<Id>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Struct {\n     pub struct_type: StructType,\n     pub generics: Generics,\n@@ -264,15 +264,15 @@ pub struct Struct {\n     pub impls: Vec<Id>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Enum {\n     pub generics: Generics,\n     pub variants_stripped: bool,\n     pub variants: Vec<Id>,\n     pub impls: Vec<Id>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n #[serde(tag = \"variant_kind\", content = \"variant_inner\")]\n pub enum Variant {\n@@ -281,15 +281,15 @@ pub enum Variant {\n     Struct(Vec<Id>),\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum StructType {\n     Plain,\n     Tuple,\n     Unit,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Header {\n     #[serde(rename = \"const\")]\n     pub const_: bool,\n@@ -300,7 +300,7 @@ pub struct Header {\n     pub abi: Abi,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub enum Abi {\n     // We only have a concrete listing here for stable ABI's because their are so many\n     // See rustc_ast_passes::feature_gate::PostExpansionVisitor::check_abi for the list\n@@ -316,34 +316,34 @@ pub enum Abi {\n     Other(String),\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n     pub header: Header,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Method {\n     pub decl: FnDecl,\n     pub generics: Generics,\n     pub header: Header,\n     pub has_body: bool,\n }\n \n-#[derive(Clone, Debug, Default, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Generics {\n     pub params: Vec<GenericParamDef>,\n     pub where_predicates: Vec<WherePredicate>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct GenericParamDef {\n     pub name: String,\n     pub kind: GenericParamDefKind,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum GenericParamDefKind {\n     Lifetime {\n@@ -384,7 +384,7 @@ pub enum GenericParamDefKind {\n     },\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum WherePredicate {\n     BoundPredicate {\n@@ -410,7 +410,7 @@ pub enum WherePredicate {\n     },\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum GenericBound {\n     TraitBound {\n@@ -429,22 +429,22 @@ pub enum GenericBound {\n     Outlives(String),\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum TraitBoundModifier {\n     None,\n     Maybe,\n     MaybeConst,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum Term {\n     Type(Type),\n     Constant(Constant),\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n #[serde(tag = \"kind\", content = \"inner\")]\n pub enum Type {\n@@ -498,7 +498,7 @@ pub enum Type {\n     },\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct FunctionPointer {\n     pub decl: FnDecl,\n     /// Used for Higher-Rank Trait Bounds (HRTBs)\n@@ -512,14 +512,14 @@ pub struct FunctionPointer {\n     pub header: Header,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct FnDecl {\n     pub inputs: Vec<(String, Type)>,\n     pub output: Option<Type>,\n     pub c_variadic: bool,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Trait {\n     pub is_auto: bool,\n     pub is_unsafe: bool,\n@@ -529,13 +529,13 @@ pub struct Trait {\n     pub implementations: Vec<Id>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct TraitAlias {\n     pub generics: Generics,\n     pub params: Vec<GenericBound>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Impl {\n     pub is_unsafe: bool,\n     pub generics: Generics,\n@@ -550,7 +550,7 @@ pub struct Impl {\n     pub blanket_impl: Option<Type>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub struct Import {\n     /// The full path being imported.\n@@ -564,37 +564,37 @@ pub struct Import {\n     pub glob: bool,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct ProcMacro {\n     pub kind: MacroKind,\n     pub helpers: Vec<String>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum MacroKind {\n     /// A bang macro `foo!()`.\n     Bang,\n     /// An attribute macro `#[foo]`.\n     Attr,\n-    /// A derive macro `#[derive(Foo)]`\n+    /// A derive macro `#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]`\n     Derive,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Typedef {\n     #[serde(rename = \"type\")]\n     pub type_: Type,\n     pub generics: Generics,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct OpaqueTy {\n     pub bounds: Vec<GenericBound>,\n     pub generics: Generics,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Static {\n     #[serde(rename = \"type\")]\n     pub type_: Type,"}]}