{"sha": "21dd704b6b28374ea7bd2d1e13469be6807c4a8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZGQ3MDRiNmIyODM3NGVhN2JkMmQxZTEzNDY5YmU2ODA3YzRhOGQ=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-03T12:02:46Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-12T07:59:54Z"}, "message": "Check structure fields to be snake_case", "tree": {"sha": "e264fa53197cb3a6c3a59e48a7dc18b38dfdd111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e264fa53197cb3a6c3a59e48a7dc18b38dfdd111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21dd704b6b28374ea7bd2d1e13469be6807c4a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21dd704b6b28374ea7bd2d1e13469be6807c4a8d", "html_url": "https://github.com/rust-lang/rust/commit/21dd704b6b28374ea7bd2d1e13469be6807c4a8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21dd704b6b28374ea7bd2d1e13469be6807c4a8d/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "329626124f360feadb47e83be5690861c62a4b70", "url": "https://api.github.com/repos/rust-lang/rust/commits/329626124f360feadb47e83be5690861c62a4b70", "html_url": "https://github.com/rust-lang/rust/commit/329626124f360feadb47e83be5690861c62a4b70"}], "stats": {"total": 111, "additions": 65, "deletions": 46}, "files": [{"sha": "260aa9607ccf93570b533e10183d29131f5c32fb", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 65, "deletions": 46, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/21dd704b6b28374ea7bd2d1e13469be6807c4a8d/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dd704b6b28374ea7bd2d1e13469be6807c4a8d/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=21dd704b6b28374ea7bd2d1e13469be6807c4a8d", "patch": "@@ -23,7 +23,10 @@ use hir_def::{\n     src::HasSource,\n     AdtId, EnumId, FunctionId, Lookup, ModuleDefId, StructId,\n };\n-use hir_expand::{diagnostics::DiagnosticSink, name::Name};\n+use hir_expand::{\n+    diagnostics::DiagnosticSink,\n+    name::{AsName, Name},\n+};\n use syntax::{\n     ast::{self, NameOwner},\n     AstPtr,\n@@ -288,58 +291,64 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             self.sink.push(diagnostic);\n         }\n \n-        // let fn_params_list = match fn_src.value.param_list() {\n-        //     Some(params) => params,\n-        //     None => {\n-        //         if !fn_param_replacements.is_empty() {\n-        //             log::error!(\n-        //                 \"Replacements ({:?}) were generated for a function parameters which had no parameters list: {:?}\",\n-        //                 fn_param_replacements, fn_src\n-        //             );\n-        //         }\n-        //         return;\n-        //     }\n-        // };\n-        // let mut fn_params_iter = fn_params_list.params();\n-        // for param_to_rename in fn_param_replacements {\n-        //     // We assume that parameters in replacement are in the same order as in the\n-        //     // actual params list, but just some of them (ones that named correctly) are skipped.\n-        //     let ast_ptr = loop {\n-        //         match fn_params_iter.next() {\n-        //             Some(element)\n-        //                 if pat_equals_to_name(element.pat(), &param_to_rename.current_name) =>\n-        //             {\n-        //                 break element.pat().unwrap()\n-        //             }\n-        //             Some(_) => {}\n-        //             None => {\n-        //                 log::error!(\n-        //                     \"Replacement ({:?}) was generated for a function parameter which was not found: {:?}\",\n-        //                     param_to_rename, fn_src\n-        //                 );\n-        //                 return;\n-        //             }\n-        //         }\n-        //     };\n-\n-        //     let diagnostic = IncorrectCase {\n-        //         file: fn_src.file_id,\n-        //         ident_type: \"Argument\".to_string(),\n-        //         ident: AstPtr::new(&ast_ptr).into(),\n-        //         expected_case: param_to_rename.expected_case,\n-        //         ident_text: param_to_rename.current_name.to_string(),\n-        //         suggested_text: param_to_rename.suggested_text,\n-        //     };\n-\n-        //     self.sink.push(diagnostic);\n-        // }\n+        let struct_fields_list = match struct_src.value.field_list() {\n+            Some(ast::FieldList::RecordFieldList(fields)) => fields,\n+            _ => {\n+                if !struct_fields_replacements.is_empty() {\n+                    log::error!(\n+                        \"Replacements ({:?}) were generated for a structure fields which had no fields list: {:?}\",\n+                        struct_fields_replacements, struct_src\n+                    );\n+                }\n+                return;\n+            }\n+        };\n+        let mut struct_fields_iter = struct_fields_list.fields();\n+        for field_to_rename in struct_fields_replacements {\n+            // We assume that parameters in replacement are in the same order as in the\n+            // actual params list, but just some of them (ones that named correctly) are skipped.\n+            let ast_ptr = loop {\n+                match struct_fields_iter.next() {\n+                    Some(element) if names_equal(element.name(), &field_to_rename.current_name) => {\n+                        break element.name().unwrap()\n+                    }\n+                    Some(_) => {}\n+                    None => {\n+                        log::error!(\n+                            \"Replacement ({:?}) was generated for a function parameter which was not found: {:?}\",\n+                            field_to_rename, struct_src\n+                        );\n+                        return;\n+                    }\n+                }\n+            };\n+\n+            let diagnostic = IncorrectCase {\n+                file: struct_src.file_id,\n+                ident_type: \"Field\".to_string(),\n+                ident: AstPtr::new(&ast_ptr).into(),\n+                expected_case: field_to_rename.expected_case,\n+                ident_text: field_to_rename.current_name.to_string(),\n+                suggested_text: field_to_rename.suggested_text,\n+            };\n+\n+            self.sink.push(diagnostic);\n+        }\n     }\n \n     fn validate_enum(&mut self, db: &dyn HirDatabase, enum_id: EnumId) {\n         let data = db.enum_data(enum_id);\n     }\n }\n \n+fn names_equal(left: Option<ast::Name>, right: &Name) -> bool {\n+    if let Some(left) = left {\n+        &left.as_name() == right\n+    } else {\n+        false\n+    }\n+}\n+\n fn pat_equals_to_name(pat: Option<ast::Pat>, name: &Name) -> bool {\n     if let Some(ast::Pat::IdentPat(ident)) = pat {\n         ident.to_string() == name.to_string()\n@@ -381,6 +390,16 @@ fn foo2(ok_param: &str, CAPS_PARAM: u8) {}\n             r#\"\n struct non_camel_case_name {}\n     // ^^^^^^^^^^^^^^^^^^^ Structure `non_camel_case_name` should have a CamelCase name, e.g. `NonCamelCaseName`\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn incorrect_struct_field() {\n+        check_diagnostics(\n+            r#\"\n+struct SomeStruct { SomeField: u8 }\n+                 // ^^^^^^^^^ Field `SomeField` should have a snake_case name, e.g. `some_field`\n \"#,\n         );\n     }"}]}