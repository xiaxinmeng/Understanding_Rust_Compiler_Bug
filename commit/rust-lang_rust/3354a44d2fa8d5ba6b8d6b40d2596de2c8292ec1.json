{"sha": "3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNTRhNDRkMmZhOGQ1YmE2YjhkNmI0MGQyNTk2ZGUyYzgyOTJlYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-03T08:00:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-03T08:00:30Z"}, "message": "Auto merge of #87033 - FabianWolff:issue-87017, r=estebank\n\nProvide a suggestion when trying to destructure a `Vec` as a slice\n\nFixes #87017.\n\nr? `@estebank`", "tree": {"sha": "51638ef9c1f25a859c4a21e810e39517610187c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51638ef9c1f25a859c4a21e810e39517610187c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1", "html_url": "https://github.com/rust-lang/rust/commit/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91405b9d5c8dabb3e488bafb314147f1050f9b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91405b9d5c8dabb3e488bafb314147f1050f9b9", "html_url": "https://github.com/rust-lang/rust/commit/e91405b9d5c8dabb3e488bafb314147f1050f9b9"}, {"sha": "7b26f76cb50d8509e83d7ca5ad5def80066f5b09", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b26f76cb50d8509e83d7ca5ad5def80066f5b09", "html_url": "https://github.com/rust-lang/rust/commit/7b26f76cb50d8509e83d7ca5ad5def80066f5b09"}], "stats": {"total": 112, "additions": 110, "deletions": 2}, "files": [{"sha": "db77d155a2bae1bebf17736745f2b8ea6cb155ee", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1", "patch": "@@ -16,6 +16,7 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::Ident;\n use rustc_span::{BytePos, DUMMY_SP};\n+use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n use ty::VariantDef;\n \n@@ -1769,7 +1770,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // The expected type must be an array or slice, but was neither, so error.\n             _ => {\n                 if !expected.references_error() {\n-                    self.error_expected_array_or_slice(span, expected);\n+                    self.error_expected_array_or_slice(span, expected, ti);\n                 }\n                 let err = self.tcx.ty_error();\n                 (err, Some(err), err)\n@@ -1882,7 +1883,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         .emit();\n     }\n \n-    fn error_expected_array_or_slice(&self, span: Span, expected_ty: Ty<'tcx>) {\n+    fn error_expected_array_or_slice(&self, span: Span, expected_ty: Ty<'tcx>, ti: TopInfo<'tcx>) {\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n             span,\n@@ -1894,6 +1895,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let ty::Array(..) | ty::Slice(..) = ty.kind() {\n                 err.help(\"the semantics of slice patterns changed recently; see issue #62254\");\n             }\n+        } else if Autoderef::new(&self.infcx, self.param_env, self.body_id, span, expected_ty, span)\n+            .any(|(ty, _)| matches!(ty.kind(), ty::Slice(..)))\n+        {\n+            if let (Some(span), true) = (ti.span, ti.origin_expr) {\n+                if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                    err.span_suggestion(\n+                        span,\n+                        \"consider slicing here\",\n+                        format!(\"{}[..]\", snippet),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n         }\n         err.span_label(span, format!(\"pattern cannot match with input type `{}`\", expected_ty));\n         err.emit();"}, {"sha": "4eab2df30801e4e0ef5b40d123a43a07e8ef009f", "filename": "src/test/ui/suggestions/match-ergonomics.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr?ref=3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1", "patch": "@@ -15,12 +15,16 @@ LL |         [&v] => {},\n error[E0529]: expected an array or slice, found `Vec<i32>`\n   --> $DIR/match-ergonomics.rs:8:9\n    |\n+LL |     match x {\n+   |           - help: consider slicing here: `x[..]`\n LL |         [&v] => {},\n    |         ^^^^ pattern cannot match with input type `Vec<i32>`\n \n error[E0529]: expected an array or slice, found `Vec<i32>`\n   --> $DIR/match-ergonomics.rs:20:9\n    |\n+LL |     match x {\n+   |           - help: consider slicing here: `x[..]`\n LL |         [v] => {},\n    |         ^^^ pattern cannot match with input type `Vec<i32>`\n "}, {"sha": "447337c39c4c4bf0dee4e4e75dd354b037d006c4", "filename": "src/test/ui/suggestions/pattern-slice-vec.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.fixed?ref=3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1", "patch": "@@ -0,0 +1,27 @@\n+// Regression test for #87017.\n+\n+// run-rustfix\n+\n+fn main() {\n+    fn foo() -> Vec<i32> { vec![1, 2, 3] }\n+\n+    if let [_, _, _] = foo()[..] {}\n+    //~^ ERROR: expected an array or slice\n+    //~| HELP: consider slicing here\n+\n+    if let [] = &foo()[..] {}\n+    //~^ ERROR: expected an array or slice\n+    //~| HELP: consider slicing here\n+\n+    if let [] = foo()[..] {}\n+    //~^ ERROR: expected an array or slice\n+    //~| HELP: consider slicing here\n+\n+    let v = vec![];\n+    match &v[..] {\n+    //~^ HELP: consider slicing here\n+        [5] => {}\n+        //~^ ERROR: expected an array or slice\n+        _ => {}\n+    }\n+}"}, {"sha": "1153ca026bb2faae0d3756315f3686dc3ad31326", "filename": "src/test/ui/suggestions/pattern-slice-vec.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.rs?ref=3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1", "patch": "@@ -0,0 +1,27 @@\n+// Regression test for #87017.\n+\n+// run-rustfix\n+\n+fn main() {\n+    fn foo() -> Vec<i32> { vec![1, 2, 3] }\n+\n+    if let [_, _, _] = foo() {}\n+    //~^ ERROR: expected an array or slice\n+    //~| HELP: consider slicing here\n+\n+    if let [] = &foo() {}\n+    //~^ ERROR: expected an array or slice\n+    //~| HELP: consider slicing here\n+\n+    if let [] = foo() {}\n+    //~^ ERROR: expected an array or slice\n+    //~| HELP: consider slicing here\n+\n+    let v = vec![];\n+    match &v {\n+    //~^ HELP: consider slicing here\n+        [5] => {}\n+        //~^ ERROR: expected an array or slice\n+        _ => {}\n+    }\n+}"}, {"sha": "403a816ba11ff0e143693179d9b8026db8794258", "filename": "src/test/ui/suggestions/pattern-slice-vec.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.stderr?ref=3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1", "patch": "@@ -0,0 +1,36 @@\n+error[E0529]: expected an array or slice, found `Vec<i32>`\n+  --> $DIR/pattern-slice-vec.rs:8:12\n+   |\n+LL |     if let [_, _, _] = foo() {}\n+   |            ^^^^^^^^^   ----- help: consider slicing here: `foo()[..]`\n+   |            |\n+   |            pattern cannot match with input type `Vec<i32>`\n+\n+error[E0529]: expected an array or slice, found `Vec<i32>`\n+  --> $DIR/pattern-slice-vec.rs:12:12\n+   |\n+LL |     if let [] = &foo() {}\n+   |            ^^   ------ help: consider slicing here: `&foo()[..]`\n+   |            |\n+   |            pattern cannot match with input type `Vec<i32>`\n+\n+error[E0529]: expected an array or slice, found `Vec<i32>`\n+  --> $DIR/pattern-slice-vec.rs:16:12\n+   |\n+LL |     if let [] = foo() {}\n+   |            ^^   ----- help: consider slicing here: `foo()[..]`\n+   |            |\n+   |            pattern cannot match with input type `Vec<i32>`\n+\n+error[E0529]: expected an array or slice, found `Vec<_>`\n+  --> $DIR/pattern-slice-vec.rs:23:9\n+   |\n+LL |     match &v {\n+   |           -- help: consider slicing here: `&v[..]`\n+LL |\n+LL |         [5] => {}\n+   |         ^^^ pattern cannot match with input type `Vec<_>`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0529`."}]}