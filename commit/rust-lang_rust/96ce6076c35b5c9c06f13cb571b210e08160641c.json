{"sha": "96ce6076c35b5c9c06f13cb571b210e08160641c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2Y2U2MDc2YzM1YjVjOWMwNmYxM2NiNTcxYjIxMGUwODE2MDY0MWM=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2019-12-29T20:19:05Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2019-12-30T03:55:46Z"}, "message": "fix review comment", "tree": {"sha": "e80e8defd121fa8fd53582af3361d0ecdfdb7d45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e80e8defd121fa8fd53582af3361d0ecdfdb7d45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96ce6076c35b5c9c06f13cb571b210e08160641c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96ce6076c35b5c9c06f13cb571b210e08160641c", "html_url": "https://github.com/rust-lang/rust/commit/96ce6076c35b5c9c06f13cb571b210e08160641c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96ce6076c35b5c9c06f13cb571b210e08160641c/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb218fc8f0f7b3ff500227e68c8f384d8fd9c294", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb218fc8f0f7b3ff500227e68c8f384d8fd9c294", "html_url": "https://github.com/rust-lang/rust/commit/eb218fc8f0f7b3ff500227e68c8f384d8fd9c294"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "2c480b8e9dc4fbf7d04b833b66f7b4926b1173ac", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/96ce6076c35b5c9c06f13cb571b210e08160641c/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ce6076c35b5c9c06f13cb571b210e08160641c/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=96ce6076c35b5c9c06f13cb571b210e08160641c", "patch": "@@ -228,11 +228,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) -> Option<RegionName> {\n         let error_region = self.to_error_region(fr)?;\n \n+        let tcx = mbcx.infcx.tcx;\n+\n         debug!(\"give_region_a_name: error_region = {:?}\", error_region);\n         match error_region {\n             ty::ReEarlyBound(ebr) => {\n                 if ebr.has_name() {\n-                    let span = mbcx.infcx.tcx.hir().span_if_local(ebr.def_id).unwrap_or(DUMMY_SP);\n+                    let span = tcx.hir().span_if_local(ebr.def_id).unwrap_or(DUMMY_SP);\n                     Some(RegionName {\n                         name: ebr.name,\n                         source: RegionNameSource::NamedEarlyBoundRegion(span),\n@@ -249,8 +251,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             ty::ReFree(free_region) => match free_region.bound_region {\n                 ty::BoundRegion::BrNamed(region_def_id, name) => {\n                     // Get the span to point to, even if we don't use the name.\n-                    let span =\n-                        mbcx.infcx.tcx.hir().span_if_local(region_def_id).unwrap_or(DUMMY_SP);\n+                    let span = tcx.hir().span_if_local(region_def_id).unwrap_or(DUMMY_SP);\n                     debug!(\n                         \"bound region named: {:?}, is_named: {:?}\",\n                         name,\n@@ -285,15 +286,15 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n                     if let DefiningTy::Closure(def_id, substs) = def_ty {\n                         let args_span = if let hir::ExprKind::Closure(_, _, _, span, _) =\n-                            mbcx.infcx.tcx.hir().expect_expr(mir_hir_id).kind\n+                            tcx.hir().expect_expr(mir_hir_id).kind\n                         {\n                             span\n                         } else {\n                             bug!(\"Closure is not defined by a closure expr\");\n                         };\n                         let region_name = renctx.synthesize_region_name();\n \n-                        let closure_kind_ty = substs.as_closure().kind_ty(def_id, mbcx.infcx.tcx);\n+                        let closure_kind_ty = substs.as_closure().kind_ty(def_id, tcx);\n                         let note = match closure_kind_ty.to_opt_closure_kind() {\n                             Some(ty::ClosureKind::Fn) => {\n                                 \"closure implements `Fn`, so references to captured variables \\"}]}