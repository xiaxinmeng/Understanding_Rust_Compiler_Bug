{"sha": "8d9961b75377a7bd2656b5aa1451710de8c86f60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkOTk2MWI3NTM3N2E3YmQyNjU2YjVhYTE0NTE3MTBkZThjODZmNjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-28T10:07:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-28T10:07:10Z"}, "message": "Migrate to text-unit", "tree": {"sha": "c2dcedf487d2ad4674edb012dd579aa74173d8c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2dcedf487d2ad4674edb012dd579aa74173d8c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d9961b75377a7bd2656b5aa1451710de8c86f60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9961b75377a7bd2656b5aa1451710de8c86f60", "html_url": "https://github.com/rust-lang/rust/commit/8d9961b75377a7bd2656b5aa1451710de8c86f60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d9961b75377a7bd2656b5aa1451710de8c86f60/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52dc0ddc84544a59d3a2580d9944d0482a633349", "url": "https://api.github.com/repos/rust-lang/rust/commits/52dc0ddc84544a59d3a2580d9944d0482a633349", "html_url": "https://github.com/rust-lang/rust/commit/52dc0ddc84544a59d3a2580d9944d0482a633349"}], "stats": {"total": 171, "additions": 18, "deletions": 153}, "files": [{"sha": "954f3e94b0a4477addb0e6ac931e7853e78c5d21", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d9961b75377a7bd2656b5aa1451710de8c86f60/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8d9961b75377a7bd2656b5aa1451710de8c86f60/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=8d9961b75377a7bd2656b5aa1451710de8c86f60", "patch": "@@ -9,6 +9,7 @@ members = [ \"tools\" ]\n \n [dependencies]\n unicode-xid = \"0.1.0\"\n+text_unit = \"0.1.1\"\n \n [dev-dependencies]\n testutils = { path = \"./tests/testutils\" }"}, {"sha": "d1391fd5f2c30207d9dd43bd41a20964bef39495", "filename": "src/lexer/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d9961b75377a7bd2656b5aa1451710de8c86f60/src%2Flexer%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9961b75377a7bd2656b5aa1451710de8c86f60/src%2Flexer%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fptr.rs?ref=8d9961b75377a7bd2656b5aa1451710de8c86f60", "patch": "@@ -11,7 +11,7 @@ impl<'s> Ptr<'s> {\n     pub fn new(text: &'s str) -> Ptr<'s> {\n         Ptr {\n             text,\n-            len: TextUnit::new(0),\n+            len: 0.into(),\n         }\n     }\n \n@@ -47,7 +47,7 @@ impl<'s> Ptr<'s> {\n \n     pub fn bump(&mut self) -> Option<char> {\n         let ch = self.chars().next()?;\n-        self.len += TextUnit::len_of_char(ch);\n+        self.len += TextUnit::of_char(ch);\n         Some(ch)\n     }\n "}, {"sha": "b90b70c050be6cc8b4669dd12cf12b5bf53e799b", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d9961b75377a7bd2656b5aa1451710de8c86f60/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9961b75377a7bd2656b5aa1451710de8c86f60/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8d9961b75377a7bd2656b5aa1451710de8c86f60", "patch": "@@ -16,14 +16,14 @@\n //#![warn(unreachable_pub)] // rust-lang/rust#47816\n \n extern crate unicode_xid;\n+extern crate text_unit;\n \n-mod text;\n mod tree;\n mod lexer;\n mod parser;\n \n pub mod syntax_kinds;\n-pub use text::{TextRange, TextUnit};\n+pub use text_unit::{TextRange, TextUnit};\n pub use tree::{File, Node, SyntaxKind, Token};\n pub(crate) use tree::{ErrorMsg, FileBuilder, Sink};\n pub use lexer::{next_token, tokenize};"}, {"sha": "ac8a55de9743d773de5f368aaa989b9f7ee1d53f", "filename": "src/parser/event.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d9961b75377a7bd2656b5aa1451710de8c86f60/src%2Fparser%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9961b75377a7bd2656b5aa1451710de8c86f60/src%2Fparser%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent.rs?ref=8d9961b75377a7bd2656b5aa1451710de8c86f60", "patch": "@@ -1,5 +1,7 @@\n-use {ErrorMsg, File, FileBuilder, Sink, SyntaxKind, TextUnit, Token};\n-use syntax_kinds::TOMBSTONE;\n+use {\n+    ErrorMsg, File, FileBuilder, Sink, SyntaxKind, Token,\n+    syntax_kinds::TOMBSTONE,\n+};\n use super::is_insignificant;\n \n /// `Parser` produces a flat list of `Event`s.\n@@ -133,7 +135,7 @@ pub(super) fn to_file(text: String, tokens: &[Token], events: Vec<Event>) -> Fil\n                     builder.leaf(token.kind, token.len);\n                     idx += 1\n                 }\n-                let mut len = TextUnit::new(0);\n+                let mut len = 0.into();\n                 for _ in 0..n_raw_tokens {\n                     len += tokens[idx].len;\n                     idx += 1;"}, {"sha": "9b400b959b39b5ac443c7fc2d27abf56d2679add", "filename": "src/parser/input.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d9961b75377a7bd2656b5aa1451710de8c86f60/src%2Fparser%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9961b75377a7bd2656b5aa1451710de8c86f60/src%2Fparser%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Finput.rs?ref=8d9961b75377a7bd2656b5aa1451710de8c86f60", "patch": "@@ -14,7 +14,7 @@ impl<'t> ParserInput<'t> {\n     pub fn new(text: &'t str, raw_tokens: &'t [Token]) -> ParserInput<'t> {\n         let mut tokens = Vec::new();\n         let mut start_offsets = Vec::new();\n-        let mut len = TextUnit::new(0);\n+        let mut len = 0.into();\n         for &token in raw_tokens.iter() {\n             if !is_insignificant(token.kind) {\n                 tokens.push(token);\n@@ -44,7 +44,7 @@ impl<'t> ParserInput<'t> {\n         if !(idx < self.tokens.len()) {\n             return \"\";\n         }\n-        let range = TextRange::from_len(self.start_offsets[idx], self.tokens[idx].len);\n+        let range = TextRange::offset_len(self.start_offsets[idx], self.tokens[idx].len);\n         &self.text[range]\n     }\n }"}, {"sha": "4084bf44e8f98fced29a1b75b45c592449bfdde4", "filename": "src/text.rs", "status": "removed", "additions": 0, "deletions": 136, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/52dc0ddc84544a59d3a2580d9944d0482a633349/src%2Ftext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dc0ddc84544a59d3a2580d9944d0482a633349/src%2Ftext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftext.rs?ref=52dc0ddc84544a59d3a2580d9944d0482a633349", "patch": "@@ -1,136 +0,0 @@\n-use std::fmt;\n-use std::ops;\n-\n-/// An text position in a source file\n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct TextUnit(u32);\n-\n-impl TextUnit {\n-    /// The positional offset required for one character\n-    pub fn len_of_char(c: char) -> TextUnit {\n-        TextUnit(c.len_utf8() as u32)\n-    }\n-\n-    #[allow(missing_docs)]\n-    pub fn new(val: u32) -> TextUnit {\n-        TextUnit(val)\n-    }\n-}\n-\n-impl fmt::Debug for TextUnit {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        <Self as fmt::Display>::fmt(self, f)\n-    }\n-}\n-\n-impl fmt::Display for TextUnit {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.0.fmt(f)\n-    }\n-}\n-\n-impl From<TextUnit> for u32 {\n-    fn from(tu: TextUnit) -> u32 {\n-        tu.0\n-    }\n-}\n-\n-impl From<u32> for TextUnit {\n-    fn from(tu: u32) -> TextUnit {\n-        TextUnit::new(tu)\n-    }\n-}\n-\n-impl ops::Add<TextUnit> for TextUnit {\n-    type Output = TextUnit;\n-    fn add(self, rhs: TextUnit) -> TextUnit {\n-        TextUnit(self.0 + rhs.0)\n-    }\n-}\n-\n-impl ops::AddAssign<TextUnit> for TextUnit {\n-    fn add_assign(&mut self, rhs: TextUnit) {\n-        self.0 += rhs.0\n-    }\n-}\n-\n-impl ops::Sub<TextUnit> for TextUnit {\n-    type Output = TextUnit;\n-    fn sub(self, rhs: TextUnit) -> TextUnit {\n-        TextUnit(self.0 - rhs.0)\n-    }\n-}\n-\n-impl ops::SubAssign<TextUnit> for TextUnit {\n-    fn sub_assign(&mut self, rhs: TextUnit) {\n-        self.0 -= rhs.0\n-    }\n-}\n-\n-/// A range of text in a source file\n-#[derive(Clone, Copy, PartialEq, Eq)]\n-pub struct TextRange {\n-    start: TextUnit,\n-    end: TextUnit,\n-}\n-\n-impl fmt::Debug for TextRange {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        <Self as fmt::Display>::fmt(self, f)\n-    }\n-}\n-\n-impl fmt::Display for TextRange {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"[{}; {})\", self.start(), self.end())\n-    }\n-}\n-\n-impl TextRange {\n-    /// An length-0 range of text\n-    pub fn empty() -> TextRange {\n-        TextRange::from_to(TextUnit::new(0), TextUnit::new(0))\n-    }\n-\n-    /// The left-inclusive range (`[from..to)`) between to points in the text\n-    pub fn from_to(from: TextUnit, to: TextUnit) -> TextRange {\n-        assert!(from <= to, \"Invalid text range [{}; {})\", from, to);\n-        TextRange {\n-            start: from,\n-            end: to,\n-        }\n-    }\n-\n-    /// The range from some point over some length\n-    pub fn from_len(from: TextUnit, len: TextUnit) -> TextRange {\n-        TextRange::from_to(from, from + len)\n-    }\n-\n-    /// The starting position of this range\n-    pub fn start(&self) -> TextUnit {\n-        self.start\n-    }\n-\n-    /// The end position of this range\n-    pub fn end(&self) -> TextUnit {\n-        self.end\n-    }\n-\n-    /// The length of this range\n-    pub fn len(&self) -> TextUnit {\n-        self.end - self.start\n-    }\n-\n-    /// Is this range empty of any content?\n-    pub fn is_empty(&self) -> bool {\n-        self.start() == self.end()\n-    }\n-}\n-\n-impl ops::Index<TextRange> for str {\n-    type Output = str;\n-\n-    fn index(&self, index: TextRange) -> &str {\n-        &self[index.start().0 as usize..index.end().0 as usize]\n-    }\n-}"}, {"sha": "712602168408e69ea38243511870cd34e6bd19cd", "filename": "src/tree/file_builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d9961b75377a7bd2656b5aa1451710de8c86f60/src%2Ftree%2Ffile_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9961b75377a7bd2656b5aa1451710de8c86f60/src%2Ftree%2Ffile_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Ffile_builder.rs?ref=8d9961b75377a7bd2656b5aa1451710de8c86f60", "patch": "@@ -31,7 +31,7 @@ impl Sink for FileBuilder {\n     fn leaf(&mut self, kind: SyntaxKind, len: TextUnit) {\n         let leaf = NodeData {\n             kind,\n-            range: TextRange::from_len(self.pos, len),\n+            range: TextRange::offset_len(self.pos, len),\n             parent: None,\n             first_child: None,\n             next_sibling: None,\n@@ -44,7 +44,7 @@ impl Sink for FileBuilder {\n     fn start_internal(&mut self, kind: SyntaxKind) {\n         let node = NodeData {\n             kind,\n-            range: TextRange::from_len(self.pos, 0.into()),\n+            range: TextRange::offset_len(self.pos, 0.into()),\n             parent: None,\n             first_child: None,\n             next_sibling: None,\n@@ -83,7 +83,7 @@ impl FileBuilder {\n             nodes: Vec::new(),\n             errors: Vec::new(),\n             in_progress: Vec::new(),\n-            pos: TextUnit::new(0),\n+            pos: 0.into(),\n         }\n     }\n "}, {"sha": "f7b16d7b527c9377df765da4ee25ea2033859bac", "filename": "src/tree/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d9961b75377a7bd2656b5aa1451710de8c86f60/src%2Ftree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9961b75377a7bd2656b5aa1451710de8c86f60/src%2Ftree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Fmod.rs?ref=8d9961b75377a7bd2656b5aa1451710de8c86f60", "patch": "@@ -1,9 +1,7 @@\n-use text::{TextRange, TextUnit};\n-\n-use std::fmt;\n-use std::cmp;\n-\n mod file_builder;\n+\n+use ::{TextRange, TextUnit};\n+use std::{fmt, cmp};\n pub(crate) use self::file_builder::{ErrorMsg, FileBuilder, Sink};\n \n pub use syntax_kinds::SyntaxKind;"}]}