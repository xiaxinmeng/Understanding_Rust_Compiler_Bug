{"sha": "43fabfbe36820efa0448f5cb8aba091201ca2b33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZmFiZmJlMzY4MjBlZmEwNDQ4ZjVjYjhhYmEwOTEyMDFjYTJiMzM=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-01-24T14:06:55Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-01-25T14:46:03Z"}, "message": "Add --no-buffering flag for the file logging.", "tree": {"sha": "487cffd7c99b2aab0b3a742657203d17cc7703b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/487cffd7c99b2aab0b3a742657203d17cc7703b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43fabfbe36820efa0448f5cb8aba091201ca2b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43fabfbe36820efa0448f5cb8aba091201ca2b33", "html_url": "https://github.com/rust-lang/rust/commit/43fabfbe36820efa0448f5cb8aba091201ca2b33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43fabfbe36820efa0448f5cb8aba091201ca2b33/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c735ed734be9b9041921478e0049fffd7160f78", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c735ed734be9b9041921478e0049fffd7160f78", "html_url": "https://github.com/rust-lang/rust/commit/2c735ed734be9b9041921478e0049fffd7160f78"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "4ec755769322953a3f9bd35ace816ab1eaa9ca24", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43fabfbe36820efa0448f5cb8aba091201ca2b33/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fabfbe36820efa0448f5cb8aba091201ca2b33/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=43fabfbe36820efa0448f5cb8aba091201ca2b33", "patch": "@@ -14,6 +14,7 @@ use vfs::AbsPathBuf;\n pub(crate) struct Args {\n     pub(crate) verbosity: Verbosity,\n     pub(crate) log_file: Option<PathBuf>,\n+    pub(crate) no_buffering: bool,\n     pub(crate) command: Command,\n }\n \n@@ -47,7 +48,8 @@ FLAGS:\n     -vv, --spammy\n     -q,  --quiet      Set verbosity\n \n-    --log-file <PATH> Log to the specified filed instead of stderr\n+    --log-file <PATH> Log to the specified file instead of stderr\n+    --no-buffering    Flush log records to the file immediatly\n \n ENVIRONMENTAL VARIABLES:\n     RA_LOG            Set log filter in env_logger format\n@@ -114,6 +116,7 @@ impl Args {\n                 verbosity: Verbosity::Normal,\n                 log_file: None,\n                 command: Command::Version,\n+                no_buffering: false,\n             });\n         }\n \n@@ -130,21 +133,22 @@ impl Args {\n             (false, true, true) => bail!(\"Invalid flags: -q conflicts with -v\"),\n         };\n         let log_file = matches.opt_value_from_str(\"--log-file\")?;\n+        let no_buffering = matches.contains(\"--no-buffering\");\n \n         if matches.contains([\"-h\", \"--help\"]) {\n             eprintln!(\"{}\", HELP);\n-            return Ok(Args { verbosity, log_file: None, command: Command::Help });\n+            return Ok(Args { verbosity, log_file: None, command: Command::Help, no_buffering });\n         }\n \n         if matches.contains(\"--print-config-schema\") {\n-            return Ok(Args { verbosity, log_file, command: Command::PrintConfigSchema });\n+            return Ok(Args { verbosity, log_file, command: Command::PrintConfigSchema, no_buffering }, );\n         }\n \n         let subcommand = match matches.subcommand()? {\n             Some(it) => it,\n             None => {\n                 finish_args(matches)?;\n-                return Ok(Args { verbosity, log_file, command: Command::RunServer });\n+                return Ok(Args { verbosity, log_file, command: Command::RunServer, no_buffering });\n             }\n         };\n         let command = match subcommand.as_str() {\n@@ -219,11 +223,11 @@ impl Args {\n             },\n             _ => {\n                 eprintln!(\"{}\", HELP);\n-                return Ok(Args { verbosity, log_file: None, command: Command::Help });\n+                return Ok(Args { verbosity, log_file: None, command: Command::Help, no_buffering });\n             }\n         };\n         finish_args(matches)?;\n-        Ok(Args { verbosity, log_file, command })\n+        Ok(Args { verbosity, log_file, command, no_buffering })\n     }\n }\n "}, {"sha": "4ea4ffafb66cad7267f9efb6434bb7e55f248570", "filename": "crates/rust-analyzer/src/bin/logger.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/43fabfbe36820efa0448f5cb8aba091201ca2b33/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fabfbe36820efa0448f5cb8aba091201ca2b33/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs?ref=43fabfbe36820efa0448f5cb8aba091201ca2b33", "patch": "@@ -2,10 +2,7 @@\n //! filter syntax. Amusingly, there's no crates.io crate that can do this and\n //! only this.\n \n-use std::{\n-    fs::File,\n-    io::{BufWriter, Write},\n-};\n+use std::{borrow::BorrowMut, fs::File, io::{BufWriter, Write}};\n \n use env_logger::filter::{Builder, Filter};\n use log::{Log, Metadata, Record};\n@@ -14,10 +11,11 @@ use parking_lot::Mutex;\n pub(crate) struct Logger {\n     filter: Filter,\n     file: Option<Mutex<BufWriter<File>>>,\n+    no_buffering: bool,\n }\n \n impl Logger {\n-    pub(crate) fn new(log_file: Option<File>, filter: Option<&str>) -> Logger {\n+    pub(crate) fn new(log_file: Option<File>, no_buffering: bool, filter: Option<&str>) -> Logger {\n         let filter = {\n             let mut builder = Builder::new();\n             if let Some(filter) = filter {\n@@ -28,7 +26,7 @@ impl Logger {\n \n         let file = log_file.map(|it| Mutex::new(BufWriter::new(it)));\n \n-        Logger { filter, file }\n+        Logger { filter, file, no_buffering }\n     }\n \n     pub(crate) fn install(self) {\n@@ -55,6 +53,10 @@ impl Log for Logger {\n                     record.module_path().unwrap_or_default(),\n                     record.args(),\n                 );\n+\n+                if self.no_buffering {\n+                    w.lock().borrow_mut().flush().unwrap();\n+                }\n             }\n             None => eprintln!(\n                 \"[{} {}] {}\","}, {"sha": "9a54193f60f6468c5771f354e98a6049161cae16", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43fabfbe36820efa0448f5cb8aba091201ca2b33/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fabfbe36820efa0448f5cb8aba091201ca2b33/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=43fabfbe36820efa0448f5cb8aba091201ca2b33", "patch": "@@ -28,7 +28,7 @@ fn main() {\n \n fn try_main() -> Result<()> {\n     let args = args::Args::parse()?;\n-    setup_logging(args.log_file)?;\n+    setup_logging(args.log_file, args.no_buffering)?;\n     match args.command {\n         args::Command::RunServer => run_server()?,\n         args::Command::PrintConfigSchema => {\n@@ -56,7 +56,7 @@ fn try_main() -> Result<()> {\n     Ok(())\n }\n \n-fn setup_logging(log_file: Option<PathBuf>) -> Result<()> {\n+fn setup_logging(log_file: Option<PathBuf>, flush_file: bool) -> Result<()> {\n     env::set_var(\"RUST_BACKTRACE\", \"short\");\n \n     let log_file = match log_file {\n@@ -69,7 +69,7 @@ fn setup_logging(log_file: Option<PathBuf>) -> Result<()> {\n         None => None,\n     };\n     let filter = env::var(\"RA_LOG\").ok();\n-    logger::Logger::new(log_file, filter.as_deref()).install();\n+    logger::Logger::new(log_file, flush_file, filter.as_deref()).install();\n \n     tracing_setup::setup_tracing()?;\n "}]}