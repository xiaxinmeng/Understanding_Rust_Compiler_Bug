{"sha": "7cf09c57a21110a4ef76ee4fe1cba960806fd42d", "node_id": "C_kwDOAAsO6NoAKDdjZjA5YzU3YTIxMTEwYTRlZjc2ZWU0ZmUxY2JhOTYwODA2ZmQ0MmQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-14T10:49:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-14T10:49:16Z"}, "message": "Rollup merge of #103031 - est31:match_guard_irrefutable_let, r=oli-obk\n\nSuppress irrefutable let patterns lint for prefixes in match guards\n\nIn match guards, irrefutable prefixes might use the bindings created by the match pattern. Ideally, we check for this, but we can do the next best thing and just not lint for irrefutable prefixes in match guards.\n\nFixes #98361", "tree": {"sha": "b95ae3a4db742d337565230878b5ca00b86008e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b95ae3a4db742d337565230878b5ca00b86008e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cf09c57a21110a4ef76ee4fe1cba960806fd42d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjST6sCRBK7hj4Ov3rIwAAezkIAJY4D4aH6gOZ2o8plO7ODzO3\nIFidUzqmY5enwfdtNwSDdwfJvCz66VWMULvuf8HdaCLxPqI17qn8hyq1hOuGvxKJ\nzNnObd2BZN86urOACectkPlPYeWk4wQvtMfLRSs5iqLSF/v9wDTMJa2RiGJEcYUP\npmUjCayvX3gNFS7yeNWRwNEolKy1Rlk5VdFE1OutPMrDpyCCBL1HbSvSvGvl7sDS\nenTBybYWin5TXjif5ZtyTwjvqzTAO89dtg5axVvD0BxqTpO1+gOB9vmdFpvqAmq8\nbA1eMk5x2HttodN02JO5qyEt48za/oNOoDK3yMK5grKcHG9mgr3xivU2gTLHwDU=\n=DaiR\n-----END PGP SIGNATURE-----\n", "payload": "tree b95ae3a4db742d337565230878b5ca00b86008e5\nparent 587b9c1a978e4f73ba1696ceb12a25c4b46af5fe\nparent eab41a136a86d98f8f4cc87b5c76583f58daca8d\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1665744556 +0530\ncommitter GitHub <noreply@github.com> 1665744556 +0530\n\nRollup merge of #103031 - est31:match_guard_irrefutable_let, r=oli-obk\n\nSuppress irrefutable let patterns lint for prefixes in match guards\n\nIn match guards, irrefutable prefixes might use the bindings created by the match pattern. Ideally, we check for this, but we can do the next best thing and just not lint for irrefutable prefixes in match guards.\n\nFixes #98361\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cf09c57a21110a4ef76ee4fe1cba960806fd42d", "html_url": "https://github.com/rust-lang/rust/commit/7cf09c57a21110a4ef76ee4fe1cba960806fd42d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cf09c57a21110a4ef76ee4fe1cba960806fd42d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "587b9c1a978e4f73ba1696ceb12a25c4b46af5fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/587b9c1a978e4f73ba1696ceb12a25c4b46af5fe", "html_url": "https://github.com/rust-lang/rust/commit/587b9c1a978e4f73ba1696ceb12a25c4b46af5fe"}, {"sha": "eab41a136a86d98f8f4cc87b5c76583f58daca8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab41a136a86d98f8f4cc87b5c76583f58daca8d", "html_url": "https://github.com/rust-lang/rust/commit/eab41a136a86d98f8f4cc87b5c76583f58daca8d"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "5984c800d8381ee16e026d849e589247cf6d19c8", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7cf09c57a21110a4ef76ee4fe1cba960806fd42d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf09c57a21110a4ef76ee4fe1cba960806fd42d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=7cf09c57a21110a4ef76ee4fe1cba960806fd42d", "patch": "@@ -370,8 +370,12 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n \n             // Check if the let source is while, for there is no alternative place to put a prefix,\n             // and we shouldn't lint.\n+            // For let guards inside a match, prefixes might use bindings of the match pattern,\n+            // so can't always be moved out.\n+            // FIXME: Add checking whether the bindings are actually used in the prefix,\n+            // and lint if they are not.\n             let let_source = let_source_parent(self.tcx, top, None);\n-            if !matches!(let_source, LetSource::WhileLet) {\n+            if !matches!(let_source, LetSource::WhileLet | LetSource::IfLetGuard) {\n                 // Emit the lint\n                 let prefix = &chain_refutabilities[..until];\n                 lint_affix(prefix, \"leading\", \"outside of the construct\");\n@@ -1151,10 +1155,14 @@ fn let_source_parent(tcx: TyCtxt<'_>, parent: HirId, pat_id: Option<HirId>) -> L\n \n     let parent_parent = hir.get_parent_node(parent);\n     let parent_parent_node = hir.get(parent_parent);\n-    if let hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(_), span, .. }) =\n-        parent_parent_node\n-    {\n-        return LetSource::LetElse(*span);\n+    match parent_parent_node {\n+        hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(_), span, .. }) => {\n+            return LetSource::LetElse(*span);\n+        }\n+        hir::Node::Arm(hir::Arm { guard: Some(hir::Guard::If(_)), .. }) => {\n+            return LetSource::IfLetGuard;\n+        }\n+        _ => {}\n     }\n \n     let parent_parent_parent = hir.get_parent_node(parent_parent);"}, {"sha": "be4a523155825a0795e9c9fb4c89ef434dd020db", "filename": "src/test/ui/rfc-2497-if-let-chains/irrefutable-lets.disallowed.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7cf09c57a21110a4ef76ee4fe1cba960806fd42d/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.disallowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cf09c57a21110a4ef76ee4fe1cba960806fd42d/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.disallowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.disallowed.stderr?ref=7cf09c57a21110a4ef76ee4fe1cba960806fd42d", "patch": "@@ -75,26 +75,26 @@ LL |     if let first = &opt && let None = Some(1) {}\n    = note: this pattern will always match\n    = help: consider moving it outside of the construct\n \n-error: irrefutable `let` patterns\n+error: irrefutable `if let` guard patterns\n   --> $DIR/irrefutable-lets.rs:44:28\n    |\n LL |         Some(ref first) if let second = first && let _third = second && let v = 4 + 4 => {},\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: these patterns will always match, so the `let` is useless\n-   = help: consider removing `let`\n+   = note: these patterns will always match, so the guard is useless\n+   = help: consider removing the guard and adding a `let` inside the match arm\n \n-error: leading irrefutable pattern in let chain\n-  --> $DIR/irrefutable-lets.rs:50:28\n+error: trailing irrefutable patterns in let chain\n+  --> $DIR/irrefutable-lets.rs:59:16\n    |\n-LL |         Some(ref first) if let Range { start: local_start, end: _ } = first\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |             && let v = local_end && let w = v => {},\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this pattern will always match\n-   = help: consider moving it outside of the construct\n+   = note: these patterns will always match\n+   = help: consider moving them into the body\n \n error: irrefutable `while let` patterns\n-  --> $DIR/irrefutable-lets.rs:59:11\n+  --> $DIR/irrefutable-lets.rs:68:11\n    |\n LL |     while let first = &opt && let (a, b) = (1, 2) {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -103,7 +103,7 @@ LL |     while let first = &opt && let (a, b) = (1, 2) {}\n    = help: consider instead using a `loop { ... }` with a `let` inside it\n \n error: trailing irrefutable patterns in let chain\n-  --> $DIR/irrefutable-lets.rs:62:40\n+  --> $DIR/irrefutable-lets.rs:71:40\n    |\n LL |     while let Some(ref first) = opt && let second = first && let _third = second {}\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "9afb6853b362752bc954bba811dae86aaf1babba", "filename": "src/test/ui/rfc-2497-if-let-chains/irrefutable-lets.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7cf09c57a21110a4ef76ee4fe1cba960806fd42d/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf09c57a21110a4ef76ee4fe1cba960806fd42d/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.rs?ref=7cf09c57a21110a4ef76ee4fe1cba960806fd42d", "patch": "@@ -42,18 +42,27 @@ fn main() {\n \n     match opt {\n         Some(ref first) if let second = first && let _third = second && let v = 4 + 4 => {},\n-        //[disallowed]~^ ERROR irrefutable `let` patterns\n+        //[disallowed]~^ ERROR irrefutable `if let` guard patterns\n         _ => {}\n     }\n \n+    // No error about leading irrefutable patterns: the expr on the rhs might\n+    // use the bindings created by the match.\n     match opt {\n         Some(ref first) if let Range { start: local_start, end: _ } = first\n-        //[disallowed]~^ ERROR leading irrefutable pattern in let chain\n             && let None = local_start => {},\n         _ => {}\n     }\n \n-    // No error, despite the prefix being irrefutable\n+    match opt {\n+        Some(ref first) if let Range { start: Some(_), end: local_end } = first\n+            && let v = local_end && let w = v => {},\n+        //[disallowed]~^ ERROR trailing irrefutable patterns in let chain\n+        _ => {}\n+    }\n+\n+    // No error, despite the prefix being irrefutable: moving out could change the behaviour,\n+    // due to possible side effects of the operation.\n     while let first = &opt && let Some(ref second) = first && let None = second.start {}\n \n     while let first = &opt && let (a, b) = (1, 2) {}"}]}