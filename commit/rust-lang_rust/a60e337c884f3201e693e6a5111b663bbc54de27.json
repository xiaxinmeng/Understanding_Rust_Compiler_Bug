{"sha": "a60e337c884f3201e693e6a5111b663bbc54de27", "node_id": "C_kwDOAAsO6NoAKGE2MGUzMzdjODg0ZjMyMDFlNjkzZTZhNTExMWI2NjNiYmM1NGRlMjc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-24T04:00:09Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-28T04:18:53Z"}, "message": "Rename `NestedMetaItem::[Ll]iteral` as `NestedMetaItem::[Ll]it`.\n\nWe already use a mix of `Literal` and `Lit`. The latter is better\nbecause it is shorter without causing any ambiguity.", "tree": {"sha": "77b4d972c4bff44fba887c5e1bd8f47ad6a71174", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77b4d972c4bff44fba887c5e1bd8f47ad6a71174"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a60e337c884f3201e693e6a5111b663bbc54de27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a60e337c884f3201e693e6a5111b663bbc54de27", "html_url": "https://github.com/rust-lang/rust/commit/a60e337c884f3201e693e6a5111b663bbc54de27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a60e337c884f3201e693e6a5111b663bbc54de27/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c65264f3cbfb9b6e4b06ff0a89fc706f2d20a85", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c65264f3cbfb9b6e4b06ff0a89fc706f2d20a85", "html_url": "https://github.com/rust-lang/rust/commit/1c65264f3cbfb9b6e4b06ff0a89fc706f2d20a85"}], "stats": {"total": 75, "additions": 34, "deletions": 41}, "files": [{"sha": "d0bb05c36549b09a5b2db238644895fca7aca18c", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -489,7 +489,7 @@ pub enum NestedMetaItem {\n     /// A literal.\n     ///\n     /// E.g., `\"foo\"`, `64`, `true`.\n-    Literal(MetaItemLit),\n+    Lit(MetaItemLit),\n }\n \n /// A spanned compile-time attribute item."}, {"sha": "7a86b471ba298a988f7f61b89ecbf8d6b56c3e29", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -51,9 +51,9 @@ impl NestedMetaItem {\n     }\n \n     /// Returns the `MetaItemLit` if `self` is a `NestedMetaItem::Literal`s.\n-    pub fn literal(&self) -> Option<&MetaItemLit> {\n+    pub fn lit(&self) -> Option<&MetaItemLit> {\n         match self {\n-            NestedMetaItem::Literal(lit) => Some(lit),\n+            NestedMetaItem::Lit(lit) => Some(lit),\n             _ => None,\n         }\n     }\n@@ -83,7 +83,7 @@ impl NestedMetaItem {\n             meta_item.meta_item_list().and_then(|meta_item_list| {\n                 if meta_item_list.len() == 1\n                     && let Some(ident) = meta_item.ident()\n-                    && let Some(lit) = meta_item_list[0].literal()\n+                    && let Some(lit) = meta_item_list[0].lit()\n                 {\n                     return Some((ident.name, lit));\n                 }\n@@ -655,14 +655,14 @@ impl NestedMetaItem {\n     pub fn span(&self) -> Span {\n         match self {\n             NestedMetaItem::MetaItem(item) => item.span,\n-            NestedMetaItem::Literal(lit) => lit.span,\n+            NestedMetaItem::Lit(lit) => lit.span,\n         }\n     }\n \n     fn token_trees(&self) -> Vec<TokenTree> {\n         match self {\n             NestedMetaItem::MetaItem(item) => item.token_trees(),\n-            NestedMetaItem::Literal(lit) => {\n+            NestedMetaItem::Lit(lit) => {\n                 vec![TokenTree::Token(lit.to_token(), Spacing::Alone)]\n             }\n         }\n@@ -677,7 +677,7 @@ impl NestedMetaItem {\n                 if let Some(lit) = MetaItemLit::from_token(token) =>\n             {\n                 tokens.next();\n-                return Some(NestedMetaItem::Literal(lit));\n+                return Some(NestedMetaItem::Lit(lit));\n             }\n             Some(TokenTree::Delimited(_, Delimiter::Invisible, inner_tokens)) => {\n                 let inner_tokens = inner_tokens.clone();"}, {"sha": "cb3c54fa03ce56dd4395d543179bdd1842d4fcb7", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -628,7 +628,7 @@ pub fn noop_visit_macro_def<T: MutVisitor>(macro_def: &mut MacroDef, vis: &mut T\n pub fn noop_visit_meta_list_item<T: MutVisitor>(li: &mut NestedMetaItem, vis: &mut T) {\n     match li {\n         NestedMetaItem::MetaItem(mi) => vis.visit_meta_item(mi),\n-        NestedMetaItem::Literal(_lit) => {}\n+        NestedMetaItem::Lit(_lit) => {}\n     }\n }\n "}, {"sha": "7a9243c511b921c068edc1d1491ae8f2da0740ee", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -498,7 +498,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     fn print_meta_list_item(&mut self, item: &ast::NestedMetaItem) {\n         match item {\n             ast::NestedMetaItem::MetaItem(ref mi) => self.print_meta_item(mi),\n-            ast::NestedMetaItem::Literal(ref lit) => self.print_meta_item_lit(lit),\n+            ast::NestedMetaItem::Lit(ref lit) => self.print_meta_item_lit(lit),\n         }\n     }\n "}, {"sha": "13b48d8f89ab4a6eea6f60a986d88369be7235d4", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -486,7 +486,7 @@ where\n                                     continue 'outer;\n                                 }\n                             },\n-                            NestedMetaItem::Literal(lit) => {\n+                            NestedMetaItem::Lit(lit) => {\n                                 handle_errors(\n                                     &sess.parse_sess,\n                                     lit.span,\n@@ -658,13 +658,11 @@ pub fn eval_condition(\n         ast::MetaItemKind::List(ref mis) if cfg.name_or_empty() == sym::version => {\n             try_gate_cfg(sym::version, cfg.span, sess, features);\n             let (min_version, span) = match &mis[..] {\n+                [NestedMetaItem::Lit(MetaItemLit { kind: LitKind::Str(sym, ..), span, .. })] => {\n+                    (sym, span)\n+                }\n                 [\n-                    NestedMetaItem::Literal(MetaItemLit {\n-                        kind: LitKind::Str(sym, ..), span, ..\n-                    }),\n-                ] => (sym, span),\n-                [\n-                    NestedMetaItem::Literal(MetaItemLit { span, .. })\n+                    NestedMetaItem::Lit(MetaItemLit { span, .. })\n                     | NestedMetaItem::MetaItem(MetaItem { span, .. }),\n                 ] => {\n                     sess.emit_err(session_diagnostics::ExpectedVersionLiteral { span: *span });\n@@ -901,7 +899,7 @@ where\n                                 continue 'outer;\n                             }\n                         },\n-                        NestedMetaItem::Literal(lit) => {\n+                        NestedMetaItem::Lit(lit) => {\n                             handle_errors(\n                                 &sess.parse_sess,\n                                 lit.span,"}, {"sha": "c8a2fca00e800efacb597aea3744e2275f2d6e48", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -48,7 +48,7 @@ impl MultiItemModifier for Expander {\n                     .into_iter()\n                     .filter_map(|nested_meta| match nested_meta {\n                         NestedMetaItem::MetaItem(meta) => Some(meta),\n-                        NestedMetaItem::Literal(lit) => {\n+                        NestedMetaItem::Lit(lit) => {\n                             // Reject `#[derive(\"Debug\")]`.\n                             report_unexpected_meta_item_lit(sess, &lit);\n                             None"}, {"sha": "638dd6d756b58177ec5225df67a1668599406f44", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -2158,7 +2158,7 @@ fn check_link_ordinal(tcx: TyCtxt<'_>, attr: &ast::Attribute) -> Option<u16> {\n     let meta_item_list = attr.meta_item_list();\n     let meta_item_list = meta_item_list.as_deref();\n     let sole_meta_list = match meta_item_list {\n-        Some([item]) => item.literal(),\n+        Some([item]) => item.lit(),\n         Some(_) => {\n             tcx.sess\n                 .struct_span_err(attr.span, \"incorrect number of arguments to `#[link_ordinal]`\")"}, {"sha": "4c22ab68a5681f227aa4a644c64a346be1689311", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -194,7 +194,7 @@ pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n \n                                         for val in values {\n                                             if let Some(LitKind::Str(s, _)) =\n-                                                val.literal().map(|lit| &lit.kind)\n+                                                val.lit().map(|lit| &lit.kind)\n                                             {\n                                                 ident_values.insert(s.to_string());\n                                             } else {"}, {"sha": "a6c7e819482c25c992f4f125a4d6f6ae530875f7", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -462,8 +462,8 @@ impl LateLintPass<'_> for BadOptAccess {\n                 let Some(attr) = cx.tcx.get_attr(field.did, sym::rustc_lint_opt_deny_field_access) &&\n                 let Some(items) = attr.meta_item_list()  &&\n                 let Some(item) = items.first()  &&\n-                let Some(literal) = item.literal()  &&\n-                let ast::LitKind::Str(val, _) = literal.kind\n+                let Some(lit) = item.lit()  &&\n+                let ast::LitKind::Str(val, _) = lit.kind\n             {\n                 cx.struct_span_lint(BAD_OPT_ACCESS, expr.span, val.as_str(), |lint|\n                     lint"}, {"sha": "297433d37c4f369b19dff3f1eab83694a4fb5426", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -1191,7 +1191,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             debug!(\"layout_scalar_valid_range: attr={:?}\", attr);\n             if let Some(\n                 &[\n-                    ast::NestedMetaItem::Literal(ast::MetaItemLit {\n+                    ast::NestedMetaItem::Lit(ast::MetaItemLit {\n                         kind: ast::LitKind::Int(a, _),\n                         ..\n                     }),"}, {"sha": "c7d239b647f35b2bc273fdc0185a5cf224f13ac9", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -405,7 +405,7 @@ impl<'a> Parser<'a> {\n     /// Matches `meta_item_inner : (meta_item | UNSUFFIXED_LIT) ;`.\n     fn parse_meta_item_inner(&mut self) -> PResult<'a, ast::NestedMetaItem> {\n         match self.parse_unsuffixed_meta_item_lit() {\n-            Ok(lit) => return Ok(ast::NestedMetaItem::Literal(lit)),\n+            Ok(lit) => return Ok(ast::NestedMetaItem::Lit(lit)),\n             Err(err) => err.cancel(),\n         }\n "}, {"sha": "2e2874dbccb9e4fb3749f901398f9310e9212f4b", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -715,7 +715,7 @@ impl CheckAttrVisitor<'_> {\n         if let Some(values) = meta.meta_item_list() {\n             let mut errors = 0;\n             for v in values {\n-                match v.literal() {\n+                match v.lit() {\n                     Some(l) => match l.kind {\n                         LitKind::Str(s, _) => {\n                             if !self.check_doc_alias_value(v, s, hir_id, target, true, aliases) {\n@@ -1355,10 +1355,7 @@ impl CheckAttrVisitor<'_> {\n             return false;\n         };\n \n-        if matches!(\n-            &list[..],\n-            &[NestedMetaItem::Literal(MetaItemLit { kind: LitKind::Int(..), .. })]\n-        ) {\n+        if matches!(&list[..], &[NestedMetaItem::Lit(MetaItemLit { kind: LitKind::Int(..), .. })]) {\n             true\n         } else {\n             self.tcx.sess.emit_err(errors::RustcLayoutScalarValidRangeArg { attr_span: attr.span });\n@@ -1421,7 +1418,7 @@ impl CheckAttrVisitor<'_> {\n         let arg_count = decl.inputs.len() as u128 + generics.params.len() as u128;\n         let mut invalid_args = vec![];\n         for meta in list {\n-            if let Some(LitKind::Int(val, _)) = meta.literal().map(|lit| &lit.kind) {\n+            if let Some(LitKind::Int(val, _)) = meta.lit().map(|lit| &lit.kind) {\n                 if *val >= arg_count {\n                     let span = meta.span();\n                     self.tcx.sess.emit_err(errors::RustcLegacyConstGenericsIndexExceed {"}, {"sha": "4ef89cfb2554fdbc13f0dde06cbb2582a81eeb30", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -1989,7 +1989,7 @@ impl<'a> Resolver<'a> {\n                     .find(|a| a.has_name(sym::rustc_legacy_const_generics))?;\n                 let mut ret = Vec::new();\n                 for meta in attr.meta_item_list()? {\n-                    match meta.literal()?.kind {\n+                    match meta.lit()?.kind {\n                         LitKind::Int(a, _) => ret.push(a as usize),\n                         _ => panic!(\"invalid arg index\"),\n                     }"}, {"sha": "1843a21205cfa65ef3de0f27c2b2391ac0b191b1", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -50,7 +50,7 @@ impl Cfg {\n     ) -> Result<Option<Cfg>, InvalidCfgError> {\n         match nested_cfg {\n             NestedMetaItem::MetaItem(ref cfg) => Cfg::parse_without(cfg, exclude),\n-            NestedMetaItem::Literal(ref lit) => {\n+            NestedMetaItem::Lit(ref lit) => {\n                 Err(InvalidCfgError { msg: \"unexpected literal\", span: lit.span })\n             }\n         }"}, {"sha": "42328222fd3820a0b8023c8bb11681d0fd93b16b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -893,7 +893,7 @@ fn clean_fn_decl_legacy_const_generics(func: &mut Function, attrs: &[ast::Attrib\n         .filter(|a| a.has_name(sym::rustc_legacy_const_generics))\n         .filter_map(|a| a.meta_item_list())\n     {\n-        for (pos, literal) in meta_item_list.iter().filter_map(|meta| meta.literal()).enumerate() {\n+        for (pos, literal) in meta_item_list.iter().filter_map(|meta| meta.lit()).enumerate() {\n             match literal.kind {\n                 ast::LitKind::Int(a, _) => {\n                     let gen = func.generics.params.remove(0);"}, {"sha": "ed4e9508f430999e603fb7417a1243d0fb88e6ce", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -1305,7 +1305,7 @@ impl Attributes {\n         for attr in self.other_attrs.lists(sym::doc).filter(|a| a.has_name(sym::alias)) {\n             if let Some(values) = attr.meta_item_list() {\n                 for l in values {\n-                    match l.literal().unwrap().kind {\n+                    match l.lit().unwrap().kind {\n                         ast::LitKind::Str(s, _) => {\n                             aliases.insert(s);\n                         }"}, {"sha": "2ac703b957b86456b1784119dfae6d31324af1c4", "filename": "src/tools/rustfmt/src/attr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -260,9 +260,7 @@ impl Rewrite for ast::NestedMetaItem {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         match self {\n             ast::NestedMetaItem::MetaItem(ref meta_item) => meta_item.rewrite(context, shape),\n-            ast::NestedMetaItem::Literal(ref l) => {\n-                rewrite_literal(context, l.token_lit, l.span, shape)\n-            }\n+            ast::NestedMetaItem::Lit(ref l) => rewrite_literal(context, l.token_lit, l.span, shape),\n         }\n     }\n }\n@@ -537,7 +535,7 @@ pub(crate) trait MetaVisitor<'ast> {\n     fn visit_nested_meta_item(&mut self, nm: &'ast ast::NestedMetaItem) {\n         match nm {\n             ast::NestedMetaItem::MetaItem(ref meta_item) => self.visit_meta_item(meta_item),\n-            ast::NestedMetaItem::Literal(ref lit) => self.visit_meta_item_lit(lit),\n+            ast::NestedMetaItem::Lit(ref lit) => self.visit_meta_item_lit(lit),\n         }\n     }\n "}, {"sha": "af0b95430a1979c9098d3facf79987cf453121ad", "filename": "src/tools/rustfmt/src/overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/src%2Ftools%2Frustfmt%2Fsrc%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/src%2Ftools%2Frustfmt%2Fsrc%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Foverflow.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -125,7 +125,7 @@ impl<'a> OverflowableItem<'a> {\n             OverflowableItem::MacroArg(MacroArg::Keyword(..)) => true,\n             OverflowableItem::MacroArg(MacroArg::Expr(expr)) => is_simple_expr(expr),\n             OverflowableItem::NestedMetaItem(nested_meta_item) => match nested_meta_item {\n-                ast::NestedMetaItem::Literal(..) => true,\n+                ast::NestedMetaItem::Lit(..) => true,\n                 ast::NestedMetaItem::MetaItem(ref meta_item) => {\n                     matches!(meta_item.kind, ast::MetaItemKind::Word)\n                 }\n@@ -169,7 +169,7 @@ impl<'a> OverflowableItem<'a> {\n             },\n             OverflowableItem::NestedMetaItem(nested_meta_item) if len == 1 => {\n                 match nested_meta_item {\n-                    ast::NestedMetaItem::Literal(..) => false,\n+                    ast::NestedMetaItem::Lit(..) => false,\n                     ast::NestedMetaItem::MetaItem(..) => true,\n                 }\n             }"}, {"sha": "3e884419f1a32c84406947b74ae678979577bfef", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a60e337c884f3201e693e6a5111b663bbc54de27/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60e337c884f3201e693e6a5111b663bbc54de27/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=a60e337c884f3201e693e6a5111b663bbc54de27", "patch": "@@ -263,7 +263,7 @@ fn is_skip(meta_item: &MetaItem) -> bool {\n fn is_skip_nested(meta_item: &NestedMetaItem) -> bool {\n     match meta_item {\n         NestedMetaItem::MetaItem(ref mi) => is_skip(mi),\n-        NestedMetaItem::Literal(_) => false,\n+        NestedMetaItem::Lit(_) => false,\n     }\n }\n "}]}