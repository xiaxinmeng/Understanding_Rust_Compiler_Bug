{"sha": "3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNWJlYjJjNmYxNjhiMjlmNGE4NmMwZDJhM2UxYzVlNzE3ZDkzODk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-28T21:26:56Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-28T21:26:56Z"}, "message": "rustc: rename Mir to mir::Body in comments and to MIR in error strings.", "tree": {"sha": "8397e2d3a35b28c931b86d4fdcf42f7f5f044d88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8397e2d3a35b28c931b86d4fdcf42f7f5f044d88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389", "html_url": "https://github.com/rust-lang/rust/commit/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e5e0daff2aee5ec5832ed22499417ffdf4b3827", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5e0daff2aee5ec5832ed22499417ffdf4b3827", "html_url": "https://github.com/rust-lang/rust/commit/6e5e0daff2aee5ec5832ed22499417ffdf4b3827"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "902dc59e67f098403e4cc1ae0e92cb40e9bf723d", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389", "patch": "@@ -47,7 +47,7 @@ pub struct GlobalId<'tcx> {\n     /// For a promoted global, the `Instance` of the function they belong to.\n     pub instance: ty::Instance<'tcx>,\n \n-    /// The index for promoted globals within their function's `Mir`.\n+    /// The index for promoted globals within their function's `mir::Body`.\n     pub promoted: Option<mir::Promoted>,\n }\n "}, {"sha": "dd33fae0d6197ed509cd86a7d0d863bff3ad65a2", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389", "patch": "@@ -261,7 +261,7 @@ macro_rules! make_mir_visitor {\n                 }\n \n                 // for best performance, we want to use an iterator rather\n-                // than a for-loop, to avoid calling Mir::invalidate for\n+                // than a for-loop, to avoid calling `mir::Body::invalidate` for\n                 // each basic block.\n                 macro_rules! basic_blocks {\n                     (mut) => (mir.basic_blocks_mut().iter_enumerated_mut());"}, {"sha": "81aa8d434d37fa04e918f53c9a1b2aa69e5933b7", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389", "patch": "@@ -88,7 +88,7 @@ rustc_queries! {\n             desc { \"getting a list of all mir_keys\" }\n         }\n \n-        /// Maps DefId's that have an associated Mir to the result\n+        /// Maps DefId's that have an associated `mir::Body` to the result\n         /// of the MIR qualify_consts pass. The actual meaning of\n         /// the value isn't known except to the pass itself.\n         query mir_const_qualif(key: DefId) -> (u8, &'tcx BitSet<mir::Local>) {"}, {"sha": "711e59dbcc9d2752b3c35b9a1b7bbcdb36fdc787", "filename": "src/librustc/ty/steal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc%2Fty%2Fsteal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc%2Fty%2Fsteal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsteal.rs?ref=3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389", "patch": "@@ -7,9 +7,9 @@ use rustc_data_structures::sync::{RwLock, ReadGuard, MappedReadGuard};\n /// optimization, but that'd be expensive. And yet we don't just want\n /// to mutate it in place, because that would spoil the idea that\n /// queries are these pure functions that produce an immutable value\n-/// (since if you did the query twice, you could observe the\n-/// mutations). So instead we have the query produce a `&'tcx\n-/// Steal<Body<'tcx>>` (to be very specific). Now we can read from this\n+/// (since if you did the query twice, you could observe the mutations).\n+/// So instead we have the query produce a `&'tcx Steal<mir::Body<'tcx>>`\n+/// (to be very specific). Now we can read from this\n /// as much as we want (using `borrow()`), but you can also\n /// `steal()`. Once you steal, any further attempt to read will panic.\n /// Therefore, we know that -- assuming no ICE -- nobody is observing"}, {"sha": "5797f9c34786617d01d834d833da6768e8212f74", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389", "patch": "@@ -164,7 +164,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Body<'\n             build::construct_const(cx, body_id, return_ty, return_ty_span)\n         };\n \n-        // Convert the Mir to global types.\n+        // Convert the `mir::Body` to global types.\n         let mut globalizer = GlobalizeMir {\n             tcx,\n             span: mir.span\n@@ -243,7 +243,7 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx.infer_ctxt().enter(|infcx| {\n             let mut mir = shim::build_adt_ctor(&infcx, ctor_id, fields, span);\n \n-            // Convert the Mir to global types.\n+            // Convert the `mir::Body` to global types.\n             let tcx = infcx.tcx.global_tcx();\n             let mut globalizer = GlobalizeMir {\n                 tcx,"}, {"sha": "80f64e85f9cf9201c11937dd66bbcfc24a8afaeb", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389", "patch": "@@ -44,7 +44,7 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     /// Whether this constant/function needs overflow checks.\n     check_overflow: bool,\n \n-    /// See field with the same name on `Mir`.\n+    /// See field with the same name on `mir::Body`.\n     control_flow_destroyed: Vec<(Span, String)>,\n }\n "}, {"sha": "22b96a9db4750cfbc9033f1c8c8146ddcd7d4117", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389", "patch": "@@ -100,7 +100,7 @@ fn mir_built<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Stea\n     tcx.alloc_steal_mir(mir)\n }\n \n-/// Where a specific Mir comes from.\n+/// Where a specific `mir::Body` comes from.\n #[derive(Debug, Copy, Clone)]\n pub struct MirSource<'tcx> {\n     pub instance: InstanceDef<'tcx>,\n@@ -228,7 +228,7 @@ fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n }\n \n fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n-    // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n+    // `mir_borrowck` uses `mir_validated`, so we have to force it to\n     // execute before we can steal.\n     tcx.ensure().mir_borrowck(def_id);\n "}, {"sha": "4b95fbf4b7d2f500cb2a6b100e6eeef33c38d339", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389", "patch": "@@ -393,7 +393,7 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Body<'tcx>,\n         }\n \n \n-        // Declare return place local so that `Body::new` doesn't complain.\n+        // Declare return place local so that `mir::Body::new` doesn't complain.\n         let initial_locals = iter::once(\n             LocalDecl::new_return_place(tcx.types.never, mir.span)\n         ).collect();"}, {"sha": "a416792101f73d5d3ac57015b6b9ff93a1ecda2a", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=3e5beb2c6f168b29f4a86c0d2a3e1c5e717d9389", "patch": "@@ -1431,7 +1431,7 @@ fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mir = &tcx.mir_const(def_id).borrow();\n \n     if mir.return_ty().references_error() {\n-        tcx.sess.delay_span_bug(mir.span, \"mir_const_qualif: Mir had errors\");\n+        tcx.sess.delay_span_bug(mir.span, \"mir_const_qualif: MIR had errors\");\n         return (1 << IsNotPromotable::IDX, tcx.arena.alloc(BitSet::new_empty(0)));\n     }\n \n@@ -1447,7 +1447,7 @@ impl MirPass for QualifyAndPromoteConstants {\n                           mir: &mut Body<'tcx>) {\n         // There's not really any point in promoting errorful MIR.\n         if mir.return_ty().references_error() {\n-            tcx.sess.delay_span_bug(mir.span, \"QualifyAndPromoteConstants: Mir had errors\");\n+            tcx.sess.delay_span_bug(mir.span, \"QualifyAndPromoteConstants: MIR had errors\");\n             return;\n         }\n "}]}