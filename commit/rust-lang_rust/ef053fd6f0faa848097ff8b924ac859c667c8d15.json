{"sha": "ef053fd6f0faa848097ff8b924ac859c667c8d15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMDUzZmQ2ZjBmYWE4NDgwOTdmZjhiOTI0YWM4NTljNjY3YzhkMTU=", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-05-20T17:58:13Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-06-02T14:23:12Z"}, "message": "Change the type name from `_enum<..>` to `enum$<..>`\n\nThis makes the type name inline with the proposed standard in #85269.", "tree": {"sha": "0309f2d825d221c9893c3d273e5fe671ad4d105b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0309f2d825d221c9893c3d273e5fe671ad4d105b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef053fd6f0faa848097ff8b924ac859c667c8d15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef053fd6f0faa848097ff8b924ac859c667c8d15", "html_url": "https://github.com/rust-lang/rust/commit/ef053fd6f0faa848097ff8b924ac859c667c8d15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef053fd6f0faa848097ff8b924ac859c667c8d15/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2d6fa852d22eb4e9259cd708e33e7afaa9211d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2d6fa852d22eb4e9259cd708e33e7afaa9211d0", "html_url": "https://github.com/rust-lang/rust/commit/d2d6fa852d22eb4e9259cd708e33e7afaa9211d0"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "f56dace0d33623ed5a7447bb5d2e9c27818f1889", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef053fd6f0faa848097ff8b924ac859c667c8d15/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef053fd6f0faa848097ff8b924ac859c667c8d15/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=ef053fd6f0faa848097ff8b924ac859c667c8d15", "patch": "@@ -1537,7 +1537,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     // For MSVC, we generate a union of structs for each variant with an explicit\n                     // discriminant field roughly equivalent to the following C:\n                     // ```c\n-                    // union _enum<{name}> {\n+                    // union enum$<{name}> {\n                     //   struct {variant 0 name} {\n                     //     tag$ variant$;\n                     //     <variant 0 fields>\n@@ -1628,7 +1628,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                 // make the discriminant field that type. We then use natvis to render the enum type correctly in Windbg/VS.\n                 // This will generate debuginfo roughly equivalent to the following C:\n                 // ```c\n-                // union _enum<{name}, {min niche}, {max niche}, {dataful variant name} {\n+                // union enum$<{name}, {min niche}, {max niche}, {dataful variant name} {\n                 //   struct dataful_variant {\n                 //     <fields in dataful variant>\n                 //   },\n@@ -1639,7 +1639,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                 //   }\n                 // }\n                 // ```\n-                // The natvis in `intrinsic.natvis` matches on the type name `_enum<*, *, *, *>`\n+                // The natvis in `intrinsic.natvis` matches on the type name `enum$<*, *, *, *>`\n                 // and evaluates `this.discriminant$.discriminant`. If the value is between\n                 // the min niche and max niche, then the enum is in the dataful variant and\n                 // `this.dataful_variant` is rendered. Otherwise, the enum is in one of the"}, {"sha": "0f8dc06f4ca707923b7c527d9932586bd393214a", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef053fd6f0faa848097ff8b924ac859c667c8d15/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef053fd6f0faa848097ff8b924ac859c667c8d15/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=ef053fd6f0faa848097ff8b924ac859c667c8d15", "patch": "@@ -267,15 +267,15 @@ pub fn push_debuginfo_type_name<'tcx>(\n             let max = dataful_discriminant_range.end();\n             let max = tag.value.size(&tcx).truncate(*max);\n \n-            output.push_str(\"_enum<\");\n+            output.push_str(\"enum$<\");\n             push_item_name(tcx, def.did, true, output);\n             push_type_params(tcx, substs, output, visited);\n \n             let dataful_variant_name = def.variants[*dataful_variant].ident.as_str();\n \n             output.push_str(&format!(\", {}, {}, {}>\", min, max, dataful_variant_name));\n         } else {\n-            output.push_str(\"_enum<\");\n+            output.push_str(\"enum$<\");\n             push_item_name(tcx, def.did, true, output);\n             push_type_params(tcx, substs, output, visited);\n             output.push('>');"}, {"sha": "09b5c9f091d70f793e5966bb619798a97e334a16", "filename": "src/etc/natvis/intrinsic.natvis", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef053fd6f0faa848097ff8b924ac859c667c8d15/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/ef053fd6f0faa848097ff8b924ac859c667c8d15/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fintrinsic.natvis?ref=ef053fd6f0faa848097ff8b924ac859c667c8d15", "patch": "@@ -149,7 +149,7 @@\n       <Synthetic Name=\"[...]\"><DisplayString>...</DisplayString></Synthetic>\n     </Expand>\n   </Type>\n-  <Type Name=\"_enum&lt;*&gt;\">\n+  <Type Name=\"enum$&lt;*&gt;\">\n     <Intrinsic Name=\"tag\" Expression=\"Variant0.variant$\" />\n     <DisplayString Condition=\"tag() == 0\">{tag(),en}</DisplayString>\n     <DisplayString Condition=\"tag() == 1\" Optional=\"true\">{tag(),en}</DisplayString>\n@@ -189,7 +189,7 @@\n   </Type>\n \n   <!-- $T1 is the name of the enum, $T2 is the low value of the dataful variant tag, $T3 is the high value of the dataful variant tag, $T4 is the name of the dataful variant -->\n-  <Type Name=\"_enum&lt;*, *, *, *&gt;\">\n+  <Type Name=\"enum$&lt;*, *, *, *&gt;\">\n     <Intrinsic Name=\"tag\" Expression=\"discriminant$.discriminant\" />\n     <Intrinsic Name=\"is_dataful\" Expression=\"tag() &gt;= $T2 &amp;&amp; tag() &lt;= $T3\" />\n     <DisplayString Condition=\"is_dataful()\">{\"$T4\",sb}({dataful_variant})</DisplayString>"}, {"sha": "e2a331ca17adb2248e4060cc8716f0174dd09ae9", "filename": "src/test/debuginfo/msvc-pretty-enums.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ef053fd6f0faa848097ff8b924ac859c667c8d15/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef053fd6f0faa848097ff8b924ac859c667c8d15/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs?ref=ef053fd6f0faa848097ff8b924ac859c667c8d15", "patch": "@@ -8,72 +8,72 @@\n //       so the best we can do is to make sure we are generating the right debuginfo\n \n // cdb-command: dx -r2 a,!\n-// cdb-check:a,!              [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::Some]\n+// cdb-check:a,!              [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::Some]\n // cdb-check:        [+0x000] __0              : Low (0x2) [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant$    [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : 0x2 [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::tag$]\n+// cdb-check:    [+0x000] discriminant$    [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : 0x2 [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::tag$]\n \n // cdb-command: dx -r2 b,!\n-// cdb-check:b,!              [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::Some]\n+// cdb-check:b,!              [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::Some]\n // cdb-check:        [+0x000] __0              : 0x11 [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant$    [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : None (0x11) [Type: _enum<core::option::Option<_enum<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::tag$]\n+// cdb-check:    [+0x000] discriminant$    [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : None (0x11) [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::tag$]\n \n // cdb-command: dx -r2 c,!\n-// cdb-check:c,!              [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n+// cdb-check:c,!              [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n // cdb-check:        [+0x000] my_data          : 0x11 [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant$    [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : Tag1 (0x11) [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::tag$]\n+// cdb-check:    [+0x000] discriminant$    [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : Tag1 (0x11) [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::tag$]\n \n // cdb-command: dx -r2 d,!\n-// cdb-check:d,!              [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n+// cdb-check:d,!              [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n // cdb-check:        [+0x000] my_data          : High (0x10) [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant$    [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : 0x10 [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::tag$]\n+// cdb-check:    [+0x000] discriminant$    [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : 0x10 [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::tag$]\n \n // cdb-command: dx -r2 e,!\n-// cdb-check:e,!              [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n+// cdb-check:e,!              [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n // cdb-check:        [+0x000] my_data          : 0x13 [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant$    [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : Tag2 (0x13) [Type: _enum<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::tag$]\n+// cdb-check:    [+0x000] discriminant$    [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : Tag2 (0x13) [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::tag$]\n \n // cdb-command: dx -r2 f,!\n-// cdb-check:f,!              [Type: _enum<core::option::Option<u32*>, 1, [...], Some>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: _enum<core::option::Option<u32*>, 1, [...], Some>::Some]\n+// cdb-check:f,!              [Type: enum$<core::option::Option<u32*>, 1, [...], Some>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::Some]\n // cdb-check:        [+0x000] __0              : 0x[...] : 0x1 [Type: unsigned int *]\n-// cdb-check:    [+0x000] discriminant$    [Type: _enum<core::option::Option<u32*>, 1, [...], Some>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : 0x[...] [Type: _enum<core::option::Option<u32*>, 1, [...], Some>::tag$]\n+// cdb-check:    [+0x000] discriminant$    [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : 0x[...] [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::tag$]\n \n // cdb-command: dx -r2 g,!\n-// cdb-check:g,!              [Type: _enum<core::option::Option<u32*>, 1, [...], Some>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: _enum<core::option::Option<u32*>, 1, [...], Some>::Some]\n+// cdb-check:g,!              [Type: enum$<core::option::Option<u32*>, 1, [...], Some>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::Some]\n // cdb-check:        [+0x000] __0              : 0x0 [Type: unsigned int *]\n-// cdb-check:    [+0x000] discriminant$    [Type: _enum<core::option::Option<u32*>, 1, [...], Some>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : None (0x0) [Type: _enum<core::option::Option<u32*>, 1, [...], Some>::tag$]\n+// cdb-check:    [+0x000] discriminant$    [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : None (0x0) [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::tag$]\n \n // cdb-command: dx h\n-// cdb-check:h                : Some [Type: _enum<core::option::Option<u32>>]\n+// cdb-check:h                : Some [Type: enum$<core::option::Option<u32>>]\n // cdb-check:    [+0x000] variant$         : Some (0x1) [Type: core::option::Option]\n // cdb-check:    [+0x004] __0              : 0xc [Type: unsigned int]\n \n // cdb-command: dx i\n-// cdb-check:i                : None [Type: _enum<core::option::Option<u32>>]\n+// cdb-check:i                : None [Type: enum$<core::option::Option<u32>>]\n // cdb-check:    [+0x000] variant$         : None (0x0) [Type: core::option::Option]\n \n // cdb-command: dx j\n // cdb-check:j                : High (0x10) [Type: msvc_pretty_enums::CStyleEnum]\n \n // cdb-command: dx -r2 k,!\n-// cdb-check:k,!              [Type: _enum<core::option::Option<alloc::string::String>, 1, [...], Some>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: _enum<core::option::Option<alloc::string::String>, 1, [...], Some>::Some]\n+// cdb-check:k,!              [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>::Some]\n // cdb-check:        [+0x000] __0              [Type: alloc::string::String]\n-// cdb-check:    [+0x000] discriminant$    [Type: _enum<core::option::Option<alloc::string::String>, 1, [...], Some>::discriminant$]\n-// cdb-check:        [+0x000] discriminant     : 0x[...] [Type: _enum<core::option::Option<alloc::string::String>, 1, [...], Some>::tag$]\n+// cdb-check:    [+0x000] discriminant$    [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>::discriminant$]\n+// cdb-check:        [+0x000] discriminant     : 0x[...] [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>::tag$]\n \n pub enum CStyleEnum {\n     Low = 2,"}, {"sha": "68e73b5f38da98024d6e5ce863e5e71d56b9dde1", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef053fd6f0faa848097ff8b924ac859c667c8d15/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef053fd6f0faa848097ff8b924ac859c667c8d15/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=ef053fd6f0faa848097ff8b924ac859c667c8d15", "patch": "@@ -112,11 +112,11 @@\n // NOTE: OsString doesn't have a .natvis entry yet.\n \n // cdb-command: dx some\n-// cdb-check:some             : Some [Type: _enum<core::option::Option<i16>>]\n+// cdb-check:some             : Some [Type: enum$<core::option::Option<i16>>]\n // cdb-command: dx none\n-// cdb-check:none             : None [Type: _enum<core::option::Option<i64>>]\n+// cdb-check:none             : None [Type: enum$<core::option::Option<i64>>]\n // cdb-command: dx some_string\n-// cdb-check:some_string      [Type: _enum<core::option::Option<alloc::string::String>, 1, [...], Some>]\n+// cdb-check:some_string      [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n \n #![allow(unused_variables)]\n use std::ffi::OsString;"}]}