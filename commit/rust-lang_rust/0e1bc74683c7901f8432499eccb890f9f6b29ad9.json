{"sha": "0e1bc74683c7901f8432499eccb890f9f6b29ad9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMWJjNzQ2ODNjNzkwMWY4NDMyNDk5ZWNjYjg5MGY5ZjZiMjlhZDk=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-10T06:51:14Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-10T06:51:14Z"}, "message": "additional macro check + more tests", "tree": {"sha": "903779029b6f80607e0728991af0a2a2b5c39d95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/903779029b6f80607e0728991af0a2a2b5c39d95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e1bc74683c7901f8432499eccb890f9f6b29ad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1bc74683c7901f8432499eccb890f9f6b29ad9", "html_url": "https://github.com/rust-lang/rust/commit/0e1bc74683c7901f8432499eccb890f9f6b29ad9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e1bc74683c7901f8432499eccb890f9f6b29ad9/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d82c13d92bb79777be6819ba7a153b94717c5d94", "url": "https://api.github.com/repos/rust-lang/rust/commits/d82c13d92bb79777be6819ba7a153b94717c5d94", "html_url": "https://github.com/rust-lang/rust/commit/d82c13d92bb79777be6819ba7a153b94717c5d94"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "08a8560fcd6c078b32c18f2f72fb21e0d397bee2", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e1bc74683c7901f8432499eccb890f9f6b29ad9/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1bc74683c7901f8432499eccb890f9f6b29ad9/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=0e1bc74683c7901f8432499eccb890f9f6b29ad9", "patch": "@@ -50,12 +50,12 @@ pub struct LetPass;\n declare_lint!(pub LET_UNIT_VALUE, Warn,\n               \"creating a let binding to a value of unit type, which usually can't be used afterwards\");\n \n-\n fn check_let_unit(cx: &Context, decl: &Decl) {\n     if let DeclLocal(ref local) = decl.node {\n         let bindtype = &cx.tcx.pat_ty(&local.pat).sty;\n         if *bindtype == ty::TyTuple(vec![]) {\n-            if in_external_macro(cx, decl.span) { return; }\n+            if in_external_macro(cx, decl.span) ||\n+                in_macro(cx, local.pat.span) { return; }\n             span_lint(cx, LET_UNIT_VALUE, decl.span, &format!(\n                 \"this let-binding has unit value. Consider omitting `let {} =`\",\n                 snippet(cx, local.pat.span, \"..\")));"}, {"sha": "a0143406e52d8e9eb78e25602a6702f299472de7", "filename": "tests/compile-fail/let_unit.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e1bc74683c7901f8432499eccb890f9f6b29ad9/tests%2Fcompile-fail%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1bc74683c7901f8432499eccb890f9f6b29ad9/tests%2Fcompile-fail%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flet_unit.rs?ref=0e1bc74683c7901f8432499eccb890f9f6b29ad9", "patch": "@@ -2,6 +2,13 @@\n #![plugin(clippy)]\n \n #![deny(let_unit_value)]\n+#![allow(unused_variables)]\n+\n+macro_rules! let_and_return {\n+    ($n:expr) => {{\n+        let ret = $n;\n+    }}\n+}\n \n fn main() {\n     let _x = println!(\"x\");  //~ERROR this let-binding has unit value\n@@ -10,4 +17,9 @@ fn main() {\n     if true {\n         let _a = ();  //~ERROR this let-binding has unit value\n     }\n+\n+    let_and_return!(()) // should be fine\n }\n+\n+#[derive(Copy, Clone)]\n+pub struct ContainsUnit(()); // should be fine"}, {"sha": "af28f849e8c6d6892b266b06fa46ed7c83ffc34b", "filename": "tests/compile-fail/unit_cmp.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e1bc74683c7901f8432499eccb890f9f6b29ad9/tests%2Fcompile-fail%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1bc74683c7901f8432499eccb890f9f6b29ad9/tests%2Fcompile-fail%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funit_cmp.rs?ref=0e1bc74683c7901f8432499eccb890f9f6b29ad9", "patch": "@@ -3,6 +3,9 @@\n \n #![deny(unit_cmp)]\n \n+#[derive(PartialEq)]\n+pub struct ContainsUnit(()); // should be fine\n+\n fn main() {\n     // this is fine\n     if true == false {"}]}