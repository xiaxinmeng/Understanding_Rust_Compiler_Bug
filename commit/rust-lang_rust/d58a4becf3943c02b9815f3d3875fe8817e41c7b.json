{"sha": "d58a4becf3943c02b9815f3d3875fe8817e41c7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1OGE0YmVjZjM5NDNjMDJiOTgxNWYzZDM4NzVmZTg4MTdlNDFjN2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-26T16:52:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-02T15:49:24Z"}, "message": "Nit: do not import variants from Style", "tree": {"sha": "6d05abcfafd70b5a9011cf2a569aa5ee75523b69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d05abcfafd70b5a9011cf2a569aa5ee75523b69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d58a4becf3943c02b9815f3d3875fe8817e41c7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d58a4becf3943c02b9815f3d3875fe8817e41c7b", "html_url": "https://github.com/rust-lang/rust/commit/d58a4becf3943c02b9815f3d3875fe8817e41c7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d58a4becf3943c02b9815f3d3875fe8817e41c7b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e56121c584893d8b46af5e4cd5d580d30f221d9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e56121c584893d8b46af5e4cd5d580d30f221d9f", "html_url": "https://github.com/rust-lang/rust/commit/e56121c584893d8b46af5e4cd5d580d30f221d9f"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "f86d4bdb147a675ebcf9ec3405a62f8425f30519", "filename": "src/libsyntax/errors/snippet/mod.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d58a4becf3943c02b9815f3d3875fe8817e41c7b/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d58a4becf3943c02b9815f3d3875fe8817e41c7b/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs?ref=d58a4becf3943c02b9815f3d3875fe8817e41c7b", "patch": "@@ -90,7 +90,6 @@ pub enum Style {\n     LabelSecondary,\n     NoStyle,\n }\n-use self::Style::*;\n \n #[derive(Debug, Clone)]\n pub enum RenderedLineKind {\n@@ -247,19 +246,19 @@ impl RenderedLineKind {\n             RLK::SourceText { file: _, line_index } =>\n                 StyledString {\n                     text: format!(\"{}\", line_index + 1),\n-                    style: LineNumber,\n+                    style: Style::LineNumber,\n                 },\n             RLK::Elision =>\n                 StyledString {\n                     text: String::from(\"...\"),\n-                    style: LineNumber,\n+                    style: Style::LineNumber,\n                 },\n             RLK::PrimaryFileName |\n             RLK::OtherFileName |\n             RLK::Annotations =>\n                 StyledString {\n                     text: String::from(\"\"),\n-                    style: LineNumber,\n+                    style: Style::LineNumber,\n                 },\n         }\n     }\n@@ -275,7 +274,7 @@ impl StyledBuffer {\n         let mut styled_vec: Vec<StyledString> = vec![];\n \n         for (row, row_style) in self.text.iter().zip(&self.styles) {\n-            let mut current_style = NoStyle;\n+            let mut current_style = Style::NoStyle;\n             let mut current_text = String::new();\n \n             for (&c, &s) in row.iter().zip(row_style) {\n@@ -316,7 +315,7 @@ impl StyledBuffer {\n         } else {\n             while self.text[line].len() < col {\n                 self.text[line].push(' ');\n-                self.styles[line].push(NoStyle);\n+                self.styles[line].push(Style::NoStyle);\n             }\n             self.text[line].push(chr);\n             self.styles[line].push(style);\n@@ -479,10 +478,10 @@ impl FileInfo {\n                 output.push(RenderedLine {\n                     text: vec![StyledString {\n                         text: lo.file.name.clone(),\n-                        style: FileNameStyle,\n+                        style: Style::FileNameStyle,\n                     }, StyledString {\n                         text: format!(\":{}:{}\", lo.line, lo.col.0 + 1),\n-                        style: LineAndColumn,\n+                        style: Style::LineAndColumn,\n                     }],\n                     kind: RLK::PrimaryFileName,\n                 });\n@@ -491,7 +490,7 @@ impl FileInfo {\n                 output.push(RenderedLine {\n                     text: vec![StyledString {\n                         text: self.file.name.clone(),\n-                        style: FileNameStyle,\n+                        style: Style::FileNameStyle,\n                     }],\n                     kind: RLK::OtherFileName,\n                 });\n@@ -534,7 +533,7 @@ impl FileInfo {\n                     if prev_ends_at_eol && is_single_unlabeled_annotated_line {\n                         if !elide_unlabeled_region {\n                             output.push(RenderedLine::from((String::new(),\n-                                NoStyle, RLK::Elision)));\n+                                Style::NoStyle, RLK::Elision)));\n                             elide_unlabeled_region = true;\n                             prev_ends_at_eol = true;\n                         }\n@@ -548,7 +547,7 @@ impl FileInfo {\n                 }\n             } else {\n                 if group.len() > 1 {\n-                    output.push(RenderedLine::from((String::new(), NoStyle, RLK::Elision)));\n+                    output.push(RenderedLine::from((String::new(), Style::NoStyle, RLK::Elision)));\n                 } else {\n                     let mut v: Vec<RenderedLine> =\n                         group.iter().flat_map(|line| self.render_line(line)).collect();\n@@ -571,7 +570,7 @@ impl FileInfo {\n         let mut styled_buffer = StyledBuffer::new();\n \n         // First create the source line we will highlight.\n-        styled_buffer.append(0, &source_string, Quotation);\n+        styled_buffer.append(0, &source_string, Style::Quotation);\n \n         if line.annotations.is_empty() {\n             return styled_buffer.render(source_kind);\n@@ -606,10 +605,10 @@ impl FileInfo {\n         for annotation in &annotations {\n             for p in annotation.start_col .. annotation.end_col {\n                 if annotation.is_primary {\n-                    styled_buffer.putc(1, p, '^', UnderlinePrimary);\n-                    styled_buffer.set_style(0, p, UnderlinePrimary);\n+                    styled_buffer.putc(1, p, '^', Style::UnderlinePrimary);\n+                    styled_buffer.set_style(0, p, Style::UnderlinePrimary);\n                 } else {\n-                    styled_buffer.putc(1, p, '-', UnderlineSecondary);\n+                    styled_buffer.putc(1, p, '-', Style::UnderlineSecondary);\n                 }\n             }\n         }\n@@ -671,9 +670,9 @@ impl FileInfo {\n                     // string\n                     let highlight_label: String = format!(\" {}\", last.label.as_ref().unwrap());\n                     if last.is_primary {\n-                        styled_buffer.append(1, &highlight_label, LabelPrimary);\n+                        styled_buffer.append(1, &highlight_label, Style::LabelPrimary);\n                     } else {\n-                        styled_buffer.append(1, &highlight_label, LabelSecondary);\n+                        styled_buffer.append(1, &highlight_label, Style::LabelSecondary);\n                     }\n                     labeled_annotations = previous;\n                 }\n@@ -696,18 +695,18 @@ impl FileInfo {\n             // text ought to be long enough for this.\n             for index in 2..blank_lines {\n                 if annotation.is_primary {\n-                    styled_buffer.putc(index, annotation.start_col, '|', UnderlinePrimary);\n+                    styled_buffer.putc(index, annotation.start_col, '|', Style::UnderlinePrimary);\n                 } else {\n-                    styled_buffer.putc(index, annotation.start_col, '|', UnderlineSecondary);\n+                    styled_buffer.putc(index, annotation.start_col, '|', Style::UnderlineSecondary);\n                 }\n             }\n \n             if annotation.is_primary {\n                 styled_buffer.puts(blank_lines, annotation.start_col,\n-                    annotation.label.as_ref().unwrap(), LabelPrimary);\n+                    annotation.label.as_ref().unwrap(), Style::LabelPrimary);\n             } else {\n                 styled_buffer.puts(blank_lines, annotation.start_col,\n-                    annotation.label.as_ref().unwrap(), LabelSecondary);\n+                    annotation.label.as_ref().unwrap(), Style::LabelSecondary);\n             }\n         }\n \n@@ -752,7 +751,7 @@ fn prepend_prefixes(rendered_lines: &mut [RenderedLine]) {\n                                                  .chain(Some('>'))\n                                                  .chain(Some(' '));\n                 line.text.insert(0, StyledString {text: dashes.collect(),\n-                                                  style: LineNumber})\n+                                                  style: Style::LineNumber})\n             }\n             RenderedLineKind::OtherFileName => {\n                 // >>>>> filename\n@@ -762,12 +761,12 @@ fn prepend_prefixes(rendered_lines: &mut [RenderedLine]) {\n                 let dashes = (0..padding_len + 2).map(|_| '>')\n                                                  .chain(Some(' '));\n                 line.text.insert(0, StyledString {text: dashes.collect(),\n-                                                  style: LineNumber})\n+                                                  style: Style::LineNumber})\n             }\n             _ => {\n                 line.text.insert(0, prefix);\n                 line.text.insert(1, StyledString {text: String::from(\"|> \"),\n-                                                  style: LineNumber})\n+                                                  style: Style::LineNumber})\n             }\n         }\n     }"}]}