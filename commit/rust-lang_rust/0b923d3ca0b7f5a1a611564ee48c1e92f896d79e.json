{"sha": "0b923d3ca0b7f5a1a611564ee48c1e92f896d79e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOTIzZDNjYTBiN2Y1YTFhNjExNTY0ZWU0OGMxZTkyZjg5NmQ3OWU=", "commit": {"author": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2020-10-01T17:06:44Z"}, "committer": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2020-10-01T19:53:15Z"}, "message": "add `str::{Split,RSplit}::as_str` methods\n\nThis commit introduses 2 methods under \"str_split_as_str\" gate with common\nsignature of `&Split<'a, _> -> &'a str'`. Both of them work like\n`Chars::as_str` - return unyield part of the inner string.", "tree": {"sha": "a48bb41e1e50e277b65e4bf8c47628a04449d126", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a48bb41e1e50e277b65e4bf8c47628a04449d126"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b923d3ca0b7f5a1a611564ee48c1e92f896d79e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b923d3ca0b7f5a1a611564ee48c1e92f896d79e", "html_url": "https://github.com/rust-lang/rust/commit/0b923d3ca0b7f5a1a611564ee48c1e92f896d79e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b923d3ca0b7f5a1a611564ee48c1e92f896d79e/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cba260df0f1c67ea3690035cd5611a7465a1560", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cba260df0f1c67ea3690035cd5611a7465a1560", "html_url": "https://github.com/rust-lang/rust/commit/9cba260df0f1c67ea3690035cd5611a7465a1560"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "c7588f618e133debae58179e3aa935d812467710", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b923d3ca0b7f5a1a611564ee48c1e92f896d79e/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b923d3ca0b7f5a1a611564ee48c1e92f896d79e/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=0b923d3ca0b7f5a1a611564ee48c1e92f896d79e", "patch": "@@ -125,6 +125,7 @@\n #![feature(staged_api)]\n #![feature(std_internals)]\n #![feature(stmt_expr_attributes)]\n+#![feature(str_split_as_str)]\n #![feature(transparent_unions)]\n #![feature(unboxed_closures)]\n #![feature(unsized_locals)]"}, {"sha": "1b71f54bd843ea6c4767b8f57e644317e452307a", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0b923d3ca0b7f5a1a611564ee48c1e92f896d79e/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b923d3ca0b7f5a1a611564ee48c1e92f896d79e/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=0b923d3ca0b7f5a1a611564ee48c1e92f896d79e", "patch": "@@ -690,6 +690,19 @@ impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {\n             },\n         }\n     }\n+\n+    #[inline]\n+    fn as_str(&self) -> &'a str {\n+        // `Self::get_end` doesn't change `self.start`\n+        if self.finished {\n+            return \"\";\n+        }\n+\n+        // SAFETY: `self.start` and `self.end` always lie on unicode boundaries.\n+        unsafe {\n+            self.matcher.haystack().get_unchecked(self.start..self.end)\n+        }\n+    }\n }\n \n generate_pattern_iterators! {\n@@ -710,6 +723,48 @@ generate_pattern_iterators! {\n     delegate double ended;\n }\n \n+impl<'a, P: Pattern<'a>> Split<'a, P> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_as_str)]\n+    /// let mut split = \"Mary had a little lamb\".split(' ');\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"none\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.0.as_str()\n+    }\n+}\n+\n+impl<'a, P: Pattern<'a>> RSplit<'a, P> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_as_str)]\n+    /// let mut split = \"Mary had a little lamb\".rsplit(' ');\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"Mary had a little\");\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"none\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.0.as_str()\n+    }\n+}\n+\n generate_pattern_iterators! {\n     forward:\n         /// Created with the method [`split_terminator`]."}]}