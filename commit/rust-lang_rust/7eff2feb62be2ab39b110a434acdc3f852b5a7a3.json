{"sha": "7eff2feb62be2ab39b110a434acdc3f852b5a7a3", "node_id": "C_kwDOAAsO6NoAKDdlZmYyZmViNjJiZTJhYjM5YjExMGE0MzRhY2RjM2Y4NTJiNWE3YTM", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2022-02-10T12:04:59Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2022-02-10T12:04:59Z"}, "message": "Remove further usage of `&hir::Map`", "tree": {"sha": "78eb6ca0292967bd77d03fca566efd1e1a13b984", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78eb6ca0292967bd77d03fca566efd1e1a13b984"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eff2feb62be2ab39b110a434acdc3f852b5a7a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eff2feb62be2ab39b110a434acdc3f852b5a7a3", "html_url": "https://github.com/rust-lang/rust/commit/7eff2feb62be2ab39b110a434acdc3f852b5a7a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eff2feb62be2ab39b110a434acdc3f852b5a7a3/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89ac81a6e6f2b5e81e418f544c1efb73cc06d6f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/89ac81a6e6f2b5e81e418f544c1efb73cc06d6f4", "html_url": "https://github.com/rust-lang/rust/commit/89ac81a6e6f2b5e81e418f544c1efb73cc06d6f4"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "e6c057cc8eea5daf2d9e15b1af58ed8502cfde25", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eff2feb62be2ab39b110a434acdc3f852b5a7a3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eff2feb62be2ab39b110a434acdc3f852b5a7a3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=7eff2feb62be2ab39b110a434acdc3f852b5a7a3", "patch": "@@ -763,7 +763,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             HirId, ImplItem, ImplItemKind, Item, ItemKind,\n         };\n \n-        fn maybe_body_id_of_fn(hir_map: &Map<'_>, id: HirId) -> Option<BodyId> {\n+        fn maybe_body_id_of_fn(hir_map: Map<'_>, id: HirId) -> Option<BodyId> {\n             match hir_map.find(id) {\n                 Some(Node::Item(Item { kind: ItemKind::Fn(_, _, body_id), .. }))\n                 | Some(Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(_, body_id), .. })) => {\n@@ -774,7 +774,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         }\n         let hir_map = self.infcx.tcx.hir();\n         let mir_body_hir_id = self.mir_hir_id();\n-        if let Some(fn_body_id) = maybe_body_id_of_fn(&hir_map, mir_body_hir_id) {\n+        if let Some(fn_body_id) = maybe_body_id_of_fn(hir_map, mir_body_hir_id) {\n             if let Block(\n                 hir::Block {\n                     expr:"}, {"sha": "b2de440084cc4e938a9b2a471cdfc432f2ea33c9", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eff2feb62be2ab39b110a434acdc3f852b5a7a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eff2feb62be2ab39b110a434acdc3f852b5a7a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7eff2feb62be2ab39b110a434acdc3f852b5a7a3", "patch": "@@ -2226,7 +2226,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         bound_kind: GenericKind<'tcx>,\n         sub: Region<'tcx>,\n     ) -> DiagnosticBuilder<'a> {\n-        let hir = &self.tcx.hir();\n+        let hir = self.tcx.hir();\n         // Attempt to obtain the span of the parameter so we can\n         // suggest adding an explicit lifetime bound to it.\n         let generics = self"}, {"sha": "ed9e43ae8d1bb5d8ada4edac0864d36b03837c0c", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7eff2feb62be2ab39b110a434acdc3f852b5a7a3/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eff2feb62be2ab39b110a434acdc3f852b5a7a3/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=7eff2feb62be2ab39b110a434acdc3f852b5a7a3", "patch": "@@ -41,9 +41,9 @@ pub enum LifetimeUseSet<'tcx> {\n }\n \n trait RegionExt {\n-    fn early(hir_map: &Map<'_>, index: &mut u32, param: &GenericParam<'_>) -> (ParamName, Region);\n+    fn early(hir_map: Map<'_>, index: &mut u32, param: &GenericParam<'_>) -> (ParamName, Region);\n \n-    fn late(index: u32, hir_map: &Map<'_>, param: &GenericParam<'_>) -> (ParamName, Region);\n+    fn late(index: u32, hir_map: Map<'_>, param: &GenericParam<'_>) -> (ParamName, Region);\n \n     fn late_anon(named_late_bound_vars: u32, index: &Cell<u32>) -> Region;\n \n@@ -59,7 +59,7 @@ trait RegionExt {\n }\n \n impl RegionExt for Region {\n-    fn early(hir_map: &Map<'_>, index: &mut u32, param: &GenericParam<'_>) -> (ParamName, Region) {\n+    fn early(hir_map: Map<'_>, index: &mut u32, param: &GenericParam<'_>) -> (ParamName, Region) {\n         let i = *index;\n         *index += 1;\n         let def_id = hir_map.local_def_id(param.hir_id);\n@@ -68,7 +68,7 @@ impl RegionExt for Region {\n         (param.name.normalize_to_macros_2_0(), Region::EarlyBound(i, def_id.to_def_id(), origin))\n     }\n \n-    fn late(idx: u32, hir_map: &Map<'_>, param: &GenericParam<'_>) -> (ParamName, Region) {\n+    fn late(idx: u32, hir_map: Map<'_>, param: &GenericParam<'_>) -> (ParamName, Region) {\n         let depth = ty::INNERMOST;\n         let def_id = hir_map.local_def_id(param.hir_id);\n         let origin = LifetimeDefOrigin::from_param(param);\n@@ -817,7 +817,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     .iter()\n                     .filter_map(|param| match param.kind {\n                         GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(&self.tcx.hir(), &mut index, param))\n+                            Some(Region::early(self.tcx.hir(), &mut index, param))\n                         }\n                         GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {\n                             non_lifetime_count += 1;\n@@ -888,7 +888,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     .filter(|param| matches!(param.kind, GenericParamKind::Lifetime { .. }))\n                     .enumerate()\n                     .map(|(late_bound_idx, param)| {\n-                        let pair = Region::late(late_bound_idx as u32, &self.tcx.hir(), param);\n+                        let pair = Region::late(late_bound_idx as u32, self.tcx.hir(), param);\n                         let r = late_region_as_bound_region(self.tcx, &pair.1);\n                         (pair, r)\n                     })\n@@ -1045,7 +1045,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 for param in generics.params {\n                     match param.kind {\n                         GenericParamKind::Lifetime { .. } => {\n-                            let (name, reg) = Region::early(&self.tcx.hir(), &mut index, &param);\n+                            let (name, reg) = Region::early(self.tcx.hir(), &mut index, &param);\n                             let Region::EarlyBound(_, def_id, _) = reg else {\n                                 bug!();\n                             };\n@@ -1145,7 +1145,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     .iter()\n                     .filter_map(|param| match param.kind {\n                         GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(&self.tcx.hir(), &mut index, param))\n+                            Some(Region::early(self.tcx.hir(), &mut index, param))\n                         }\n                         GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {\n                             non_lifetime_count += 1;\n@@ -1214,7 +1214,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     .iter()\n                     .filter_map(|param| match param.kind {\n                         GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(&self.tcx.hir(), &mut index, param))\n+                            Some(Region::early(self.tcx.hir(), &mut index, param))\n                         }\n                         GenericParamKind::Const { .. } | GenericParamKind::Type { .. } => {\n                             non_lifetime_count += 1;\n@@ -1368,7 +1368,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 .enumerate()\n                                 .map(|(late_bound_idx, param)| {\n                                     let pair =\n-                                        Region::late(late_bound_idx as u32, &this.tcx.hir(), param);\n+                                        Region::late(late_bound_idx as u32, this.tcx.hir(), param);\n                                     let r = late_region_as_bound_region(this.tcx, &pair.1);\n                                     (pair, r)\n                                 })\n@@ -1463,11 +1463,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             .filter(|param| matches!(param.kind, GenericParamKind::Lifetime { .. }))\n             .enumerate()\n             .map(|(late_bound_idx, param)| {\n-                let pair = Region::late(\n-                    initial_bound_vars + late_bound_idx as u32,\n-                    &self.tcx.hir(),\n-                    param,\n-                );\n+                let pair =\n+                    Region::late(initial_bound_vars + late_bound_idx as u32, self.tcx.hir(), param);\n                 let r = late_region_as_bound_region(self.tcx, &pair.1);\n                 lifetimes.insert(pair.0, pair.1);\n                 r\n@@ -2200,9 +2197,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     if self.map.late_bound.contains(&param.hir_id) {\n                         let late_bound_idx = named_late_bound_vars;\n                         named_late_bound_vars += 1;\n-                        Some(Region::late(late_bound_idx, &self.tcx.hir(), param))\n+                        Some(Region::late(late_bound_idx, self.tcx.hir(), param))\n                     } else {\n-                        Some(Region::early(&self.tcx.hir(), &mut next_early_index, param))\n+                        Some(Region::early(self.tcx.hir(), &mut next_early_index, param))\n                     }\n                 }\n                 GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {\n@@ -2222,7 +2219,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             })\n             .enumerate()\n             .map(|(late_bound_idx, param)| {\n-                let pair = Region::late(late_bound_idx as u32, &self.tcx.hir(), param);\n+                let pair = Region::late(late_bound_idx as u32, self.tcx.hir(), param);\n                 late_region_as_bound_region(self.tcx, &pair.1)\n             })\n             .collect();"}, {"sha": "79d55b297fd30b308cc0b4d7849db9a5009d6b5d", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7eff2feb62be2ab39b110a434acdc3f852b5a7a3/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eff2feb62be2ab39b110a434acdc3f852b5a7a3/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=7eff2feb62be2ab39b110a434acdc3f852b5a7a3", "patch": "@@ -262,7 +262,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n     ) {\n         debug!(\"process_method: {:?}:{}\", def_id, ident);\n \n-        let map = &self.tcx.hir();\n+        let map = self.tcx.hir();\n         let hir_id = map.local_def_id_to_hir_id(def_id);\n         self.nest_typeck_results(def_id, |v| {\n             if let Some(mut method_data) = v.save_ctxt.get_method_data(hir_id, ident, span) {\n@@ -361,7 +361,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n         ty_params: &'tcx hir::Generics<'tcx>,\n         body: hir::BodyId,\n     ) {\n-        let map = &self.tcx.hir();\n+        let map = self.tcx.hir();\n         self.nest_typeck_results(item.def_id, |v| {\n             let body = map.body(body);\n             if let Some(fn_data) = v.save_ctxt.get_item_data(item) {\n@@ -626,7 +626,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n             }\n         }\n \n-        let map = &self.tcx.hir();\n+        let map = self.tcx.hir();\n         self.nest_typeck_results(item.def_id, |v| {\n             v.visit_ty(&impl_.self_ty);\n             if let Some(trait_ref) = &impl_.of_trait {\n@@ -716,7 +716,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n         // walk generics and methods\n         self.process_generic_params(generics, &qualname, item.hir_id());\n         for method in methods {\n-            let map = &self.tcx.hir();\n+            let map = self.tcx.hir();\n             self.process_trait_item(map.trait_item(method.id), item.def_id.to_def_id())\n         }\n     }"}, {"sha": "4e7a34d5951113f7474180891ad2f2f58c9bfde0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eff2feb62be2ab39b110a434acdc3f852b5a7a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eff2feb62be2ab39b110a434acdc3f852b5a7a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=7eff2feb62be2ab39b110a434acdc3f852b5a7a3", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// Used to set on_unimplemented's `ItemContext`\n     /// to be the enclosing (async) block/function/closure\n     fn describe_enclosure(&self, hir_id: hir::HirId) -> Option<&'static str> {\n-        let hir = &self.tcx.hir();\n+        let hir = self.tcx.hir();\n         let node = hir.find(hir_id)?;\n         match &node {\n             hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, _, body_id), .. }) => {"}, {"sha": "a17553b920f03971056c1532fb49b300e822d0e4", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eff2feb62be2ab39b110a434acdc3f852b5a7a3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eff2feb62be2ab39b110a434acdc3f852b5a7a3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=7eff2feb62be2ab39b110a434acdc3f852b5a7a3", "patch": "@@ -1663,7 +1663,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let table_owner = table.borrow().hir_owner;\n                 let generics = self.tcx.generics_of(table_owner.to_def_id());\n                 let type_param = generics.type_param(param, self.tcx);\n-                let hir = &self.tcx.hir();\n+                let hir = self.tcx.hir();\n                 if let Some(def_id) = type_param.def_id.as_local() {\n                     let id = hir.local_def_id_to_hir_id(def_id);\n                     // Get the `hir::Param` to verify whether it already has any bounds."}]}