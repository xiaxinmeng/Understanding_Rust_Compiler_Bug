{"sha": "477cae3bd7d71c347b3031809a153cfbeecd1c23", "node_id": "C_kwDOAAsO6NoAKDQ3N2NhZTNiZDdkNzFjMzQ3YjMwMzE4MDlhMTUzY2ZiZWVjZDFjMjM", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-03-03T12:12:32Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-03-07T22:06:31Z"}, "message": "copy over `std::path::absolute` instead of adding `canonicalize` hacks\n\nthis also fixes a bug where bootstrap would try to use the fake `rustc` binary built by bootstrap -\ncargo puts it in a different directory when using `cargo run` instead of x.py", "tree": {"sha": "74b90001923342cbd2340fa81c17a42b1fb7934e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74b90001923342cbd2340fa81c17a42b1fb7934e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/477cae3bd7d71c347b3031809a153cfbeecd1c23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/477cae3bd7d71c347b3031809a153cfbeecd1c23", "html_url": "https://github.com/rust-lang/rust/commit/477cae3bd7d71c347b3031809a153cfbeecd1c23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/477cae3bd7d71c347b3031809a153cfbeecd1c23/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "984527f7bb49bd6e2d34e65d7629d2e0cdc464f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6", "html_url": "https://github.com/rust-lang/rust/commit/984527f7bb49bd6e2d34e65d7629d2e0cdc464f6"}], "stats": {"total": 164, "additions": 138, "deletions": 26}, "files": [{"sha": "9c41ab69c8be3784e4e07f12acc9c06d60b03844", "filename": "src/bootstrap/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fmain.rs?ref=477cae3bd7d71c347b3031809a153cfbeecd1c23", "patch": "@@ -11,7 +11,7 @@ use bootstrap::{Build, Config, Subcommand, VERSION};\n \n fn main() {\n     let args = env::args().skip(1).collect::<Vec<_>>();\n-    let config = Config::parse(&args, false);\n+    let config = Config::parse(&args);\n \n     // check_version warnings are not printed during setup\n     let changelog_suggestion ="}, {"sha": "1903f0baef1fae4d71a8f0ce3210e3a7e334965b", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=477cae3bd7d71c347b3031809a153cfbeecd1c23", "patch": "@@ -883,7 +883,7 @@ impl<'a> Builder<'a> {\n     }\n \n     pub fn rustdoc_cmd(&self, compiler: Compiler) -> Command {\n-        let mut cmd = Command::new(&self.out.join(\"bootstrap/debug/rustdoc\"));\n+        let mut cmd = Command::new(&self.bootstrap_out.join(\"rustdoc\"));\n         cmd.env(\"RUSTC_STAGE\", compiler.stage.to_string())\n             .env(\"RUSTC_SYSROOT\", self.sysroot(compiler))\n             // Note that this is *not* the sysroot_libdir because rustdoc must be linked\n@@ -1249,7 +1249,7 @@ impl<'a> Builder<'a> {\n             .env(\"RUSTC_STAGE\", stage.to_string())\n             .env(\"RUSTC_SYSROOT\", &sysroot)\n             .env(\"RUSTC_LIBDIR\", &libdir)\n-            .env(\"RUSTDOC\", self.out.join(\"bootstrap/debug/rustdoc\"))\n+            .env(\"RUSTDOC\", self.bootstrap_out.join(\"rustdoc\"))\n             .env(\n                 \"RUSTDOC_REAL\",\n                 if cmd == \"doc\" || cmd == \"rustdoc\" || (cmd == \"test\" && want_rustdoc) {\n@@ -1263,7 +1263,7 @@ impl<'a> Builder<'a> {\n         // Clippy support is a hack and uses the default `cargo-clippy` in path.\n         // Don't override RUSTC so that the `cargo-clippy` in path will be run.\n         if cmd != \"clippy\" {\n-            cargo.env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"));\n+            cargo.env(\"RUSTC\", self.bootstrap_out.join(\"rustc\"));\n         }\n \n         // Dealing with rpath here is a little special, so let's go into some"}, {"sha": "b76bb569852cdb9806b1f8664b619a258cf5c28f", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=477cae3bd7d71c347b3031809a153cfbeecd1c23", "patch": "@@ -3,7 +3,7 @@ use crate::config::{Config, TargetSelection};\n use std::thread;\n \n fn configure(cmd: &str, host: &[&str], target: &[&str]) -> Config {\n-    let mut config = Config::parse(&[cmd.to_owned()], true);\n+    let mut config = Config::parse(&[cmd.to_owned()]);\n     // don't save toolstates\n     config.save_toolstates = None;\n     config.dry_run = true;"}, {"sha": "73a855ae4d72aa38660d475725987524be3ac2e4", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=477cae3bd7d71c347b3031809a153cfbeecd1c23", "patch": "@@ -619,7 +619,7 @@ impl Config {\n         config\n     }\n \n-    pub fn parse(args: &[String], unit_test: bool) -> Config {\n+    pub fn parse(args: &[String]) -> Config {\n         let flags = Flags::parse(&args);\n \n         let mut config = Config::default_opts();\n@@ -681,26 +681,13 @@ impl Config {\n \n         let build = toml.build.unwrap_or_default();\n \n-        set(&mut config.out, build.build_dir.map(String::into));\n+        set(&mut config.initial_rustc, build.rustc.map(PathBuf::from));\n+        set(&mut config.out, build.build_dir.map(PathBuf::from));\n         // NOTE: Bootstrap spawns various commands with different working directories.\n         // To avoid writing to random places on the file system, `config.out` needs to be an absolute path.\n-\n-        // FIXME: using `canonicalize()` makes this a lot more complicated than it needs to be -\n-        // if/when `std::path::absolute` lands, we should use that instead.\n-\n-        // HACK: in tests, we override the build directory manually.\n-        // Avoid creating a directory we won't actually need.\n-        // (The original motivation for this is that CI uses read-only directories.)\n-        if !config.out.is_absolute() && !unit_test {\n-            // canonicalize() gives a hard error if the directory doesn't exist\n-            t!(\n-                fs::create_dir_all(&config.out),\n-                format!(\"failed to create build dir: {}\", config.out.display())\n-            );\n-            config.out = t!(\n-                config.out.canonicalize(),\n-                format!(\"failed to canonicalize {}\", config.out.display())\n-            );\n+        if !config.out.is_absolute() {\n+            // `canonicalize` requires the path to already exist. Use our vendored copy of `absolute` instead.\n+            config.out = crate::util::absolute(&config.out);\n         }\n \n         if config.dry_run {"}, {"sha": "1a4e6a9688803b544295aa7d1c7ba0d5d2d9c2d0", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=477cae3bd7d71c347b3031809a153cfbeecd1c23", "patch": "@@ -343,7 +343,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n \n             // All subcommands except `clean` can have an optional \"Available paths\" section\n             if verbose {\n-                let config = Config::parse(&[\"build\".to_string()], false);\n+                let config = Config::parse(&[\"build\".to_string()]);\n                 let build = Build::new(config);\n \n                 let maybe_rules_help = Builder::get_help(&build, subcommand.as_str());"}, {"sha": "2ae63858ff610bfba465b9e79b4ed80b660d7d82", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=477cae3bd7d71c347b3031809a153cfbeecd1c23", "patch": "@@ -261,6 +261,7 @@ pub struct Build {\n     // Properties derived from the above configuration\n     src: PathBuf,\n     out: PathBuf,\n+    bootstrap_out: PathBuf,\n     rust_info: channel::GitInfo,\n     cargo_info: channel::GitInfo,\n     rls_info: channel::GitInfo,\n@@ -435,6 +436,20 @@ impl Build {\n             .expect(\"failed to read src/version\");\n         let version = version.trim();\n \n+        let bootstrap_out = if std::env::var(\"BOOTSTRAP_PYTHON\").is_ok() {\n+            out.join(\"bootstrap\").join(\"debug\")\n+        } else {\n+            let workspace_target_dir = std::env::var(\"CARGO_TARGET_DIR\")\n+                .map(PathBuf::from)\n+                .unwrap_or_else(|_| src.join(\"target\"));\n+            let bootstrap_out = workspace_target_dir.join(\"debug\");\n+            if !bootstrap_out.join(\"rustc\").exists() {\n+                // this restriction can be lifted whenever https://github.com/rust-lang/rfcs/pull/3028 is implemented\n+                panic!(\"run `cargo build --bins` before `cargo run`\")\n+            }\n+            bootstrap_out\n+        };\n+\n         let mut build = Build {\n             initial_rustc: config.initial_rustc.clone(),\n             initial_cargo: config.initial_cargo.clone(),\n@@ -453,6 +468,7 @@ impl Build {\n             version: version.to_string(),\n             src,\n             out,\n+            bootstrap_out,\n \n             rust_info,\n             cargo_info,"}, {"sha": "58b73ebed5000118365eb8cbab5ce2ae3ff8f425", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=477cae3bd7d71c347b3031809a153cfbeecd1c23", "patch": "@@ -730,7 +730,7 @@ impl Step for RustdocTheme {\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n-        let rustdoc = builder.out.join(\"bootstrap/debug/rustdoc\");\n+        let rustdoc = builder.bootstrap_out.join(\"rustdoc\");\n         let mut cmd = builder.tool_cmd(Tool::RustdocTheme);\n         cmd.arg(rustdoc.to_str().unwrap())\n             .arg(builder.src.join(\"src/librustdoc/html/static/css/themes\").to_str().unwrap())"}, {"sha": "30d9665dd0f4ad98f2974c4796bf877b33db18fd", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477cae3bd7d71c347b3031809a153cfbeecd1c23/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=477cae3bd7d71c347b3031809a153cfbeecd1c23", "patch": "@@ -440,3 +440,112 @@ fn fail(s: &str) -> ! {\n     println!(\"\\n\\n{}\\n\\n\", s);\n     std::process::exit(1);\n }\n+\n+/// Copied from `std::path::absolute` until it stabilizes.\n+///\n+/// FIXME: this shouldn't exist.\n+pub(crate) fn absolute(path: &Path) -> PathBuf {\n+    if path.as_os_str().is_empty() {\n+        panic!(\"can't make empty path absolute\");\n+    }\n+    #[cfg(unix)]\n+    {\n+        t!(absolute_unix(path), format!(\"could not make path absolute: {}\", path.display()))\n+    }\n+    #[cfg(windows)]\n+    {\n+        t!(absolute_windows(path), format!(\"could not make path absolute: {}\", path.display()))\n+    }\n+    #[cfg(not(any(unix, windows)))]\n+    {\n+        println!(\"warning: bootstrap is not supported on non-unix platforms\");\n+        t!(std::fs::canonicalize(t!(std::env::current_dir()))).join(path)\n+    }\n+}\n+\n+#[cfg(unix)]\n+/// Make a POSIX path absolute without changing its semantics.\n+fn absolute_unix(path: &Path) -> io::Result<PathBuf> {\n+    // This is mostly a wrapper around collecting `Path::components`, with\n+    // exceptions made where this conflicts with the POSIX specification.\n+    // See 4.13 Pathname Resolution, IEEE Std 1003.1-2017\n+    // https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_13\n+\n+    use std::os::unix::prelude::OsStrExt;\n+    let mut components = path.components();\n+    let path_os = path.as_os_str().as_bytes();\n+\n+    let mut normalized = if path.is_absolute() {\n+        // \"If a pathname begins with two successive <slash> characters, the\n+        // first component following the leading <slash> characters may be\n+        // interpreted in an implementation-defined manner, although more than\n+        // two leading <slash> characters shall be treated as a single <slash>\n+        // character.\"\n+        if path_os.starts_with(b\"//\") && !path_os.starts_with(b\"///\") {\n+            components.next();\n+            PathBuf::from(\"//\")\n+        } else {\n+            PathBuf::new()\n+        }\n+    } else {\n+        env::current_dir()?\n+    };\n+    normalized.extend(components);\n+\n+    // \"Interfaces using pathname resolution may specify additional constraints\n+    // when a pathname that does not name an existing directory contains at\n+    // least one non- <slash> character and contains one or more trailing\n+    // <slash> characters\".\n+    // A trailing <slash> is also meaningful if \"a symbolic link is\n+    // encountered during pathname resolution\".\n+\n+    if path_os.ends_with(b\"/\") {\n+        normalized.push(\"\");\n+    }\n+\n+    Ok(normalized)\n+}\n+\n+#[cfg(windows)]\n+fn absolute_windows(path: &std::path::Path) -> std::io::Result<std::path::PathBuf> {\n+    use std::ffi::OsString;\n+    use std::io::Error;\n+    use std::os::windows::ffi::{OsStrExt, OsStringExt};\n+    use std::ptr::null_mut;\n+    #[link(name = \"kernel32\")]\n+    extern \"system\" {\n+        fn GetFullPathNameW(\n+            lpFileName: *const u16,\n+            nBufferLength: u32,\n+            lpBuffer: *mut u16,\n+            lpFilePart: *mut *const u16,\n+        ) -> u32;\n+    }\n+\n+    unsafe {\n+        // encode the path as UTF-16\n+        let path: Vec<u16> = path.as_os_str().encode_wide().chain([0]).collect();\n+        let mut buffer = Vec::new();\n+        // Loop until either success or failure.\n+        loop {\n+            // Try to get the absolute path\n+            let len = GetFullPathNameW(\n+                path.as_ptr(),\n+                buffer.len().try_into().unwrap(),\n+                buffer.as_mut_ptr(),\n+                null_mut(),\n+            );\n+            match len as usize {\n+                // Failure\n+                0 => return Err(Error::last_os_error()),\n+                // Buffer is too small, resize.\n+                len if len > buffer.len() => buffer.resize(len, 0),\n+                // Success!\n+                len => {\n+                    buffer.truncate(len);\n+                    return Ok(OsString::from_wide(&buffer).into());\n+                }\n+            }\n+        }\n+    }\n+}"}]}