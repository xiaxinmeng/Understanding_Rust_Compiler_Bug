{"sha": "61cbd07dec2d9670f170bed44f1815ea29a8a214", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxY2JkMDdkZWMyZDk2NzBmMTcwYmVkNDRmMTgxNWVhMjlhOGEyMTQ=", "commit": {"author": {"name": "Doug Goldstein", "email": "cardoe@cardoe.com", "date": "2016-04-20T22:29:33Z"}, "committer": {"name": "Doug Goldstein", "email": "cardoe@cardoe.com", "date": "2016-04-21T01:21:01Z"}, "message": "rand: add comments about getrandom() fallback\n\nAdd some comments so that people know why we are performing a fallback\nfrom getrandom() and what that fallback aims to achieve.\n\nSigned-off-by: Doug Goldstein <cardoe@cardoe.com>", "tree": {"sha": "324f3052bc59652f769bd80a722010f908706544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/324f3052bc59652f769bd80a722010f908706544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61cbd07dec2d9670f170bed44f1815ea29a8a214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61cbd07dec2d9670f170bed44f1815ea29a8a214", "html_url": "https://github.com/rust-lang/rust/commit/61cbd07dec2d9670f170bed44f1815ea29a8a214", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61cbd07dec2d9670f170bed44f1815ea29a8a214/comments", "author": {"login": "cardoe", "id": 8839, "node_id": "MDQ6VXNlcjg4Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cardoe", "html_url": "https://github.com/cardoe", "followers_url": "https://api.github.com/users/cardoe/followers", "following_url": "https://api.github.com/users/cardoe/following{/other_user}", "gists_url": "https://api.github.com/users/cardoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/cardoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cardoe/subscriptions", "organizations_url": "https://api.github.com/users/cardoe/orgs", "repos_url": "https://api.github.com/users/cardoe/repos", "events_url": "https://api.github.com/users/cardoe/events{/privacy}", "received_events_url": "https://api.github.com/users/cardoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cardoe", "id": 8839, "node_id": "MDQ6VXNlcjg4Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cardoe", "html_url": "https://github.com/cardoe", "followers_url": "https://api.github.com/users/cardoe/followers", "following_url": "https://api.github.com/users/cardoe/following{/other_user}", "gists_url": "https://api.github.com/users/cardoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/cardoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cardoe/subscriptions", "organizations_url": "https://api.github.com/users/cardoe/orgs", "repos_url": "https://api.github.com/users/cardoe/repos", "events_url": "https://api.github.com/users/cardoe/events{/privacy}", "received_events_url": "https://api.github.com/users/cardoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "121225f17d039e51ea462437189c7c5d229291a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/121225f17d039e51ea462437189c7c5d229291a8", "html_url": "https://github.com/rust-lang/rust/commit/121225f17d039e51ea462437189c7c5d229291a8"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "25a7a3ce50dc431a7d22c5cfd215d0c25de29f82", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61cbd07dec2d9670f170bed44f1815ea29a8a214/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cbd07dec2d9670f170bed44f1815ea29a8a214/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=61cbd07dec2d9670f170bed44f1815ea29a8a214", "patch": "@@ -66,6 +66,14 @@ mod imp {\n                 if err == libc::EINTR {\n                     continue;\n                 } else if err == libc::EAGAIN {\n+                    // if getrandom() returns EAGAIN it would have blocked\n+                    // because the non-blocking pool (urandom) has not\n+                    // initialized in the kernel yet due to a lack of entropy\n+                    // the fallback we do here is to avoid blocking applications\n+                    // which could depend on this call without ever knowing\n+                    // they do and don't have a work around. The PRNG of\n+                    // /dev/urandom will still be used but not over a completely\n+                    // full entropy pool\n                     let reader = File::open(\"/dev/urandom\").expect(\"Unable to open /dev/urandom\");\n                     let mut reader_rng = ReaderRng::new(reader);\n                     reader_rng.fill_bytes(& mut v[read..]);"}]}