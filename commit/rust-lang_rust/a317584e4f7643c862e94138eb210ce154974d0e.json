{"sha": "a317584e4f7643c862e94138eb210ce154974d0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMTc1ODRlNGY3NjQzYzg2MmU5NDEzOGViMjEwY2UxNTQ5NzRkMGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-16T16:31:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-16T16:31:28Z"}, "message": "auto merge of #7726 : omasanori/rust/semver-2.0.0, r=graydon\n\nThe Ord impl of Version refered to the algorithm in release candidate versions of semver. [Semantic Versioning 2.0.0](http://semver.org/spec/v2.0.0.html) says, \"Build metadata SHOULD be ignored when determining version precedence.\"\r\n\r\nNote that Version's `le` is not \"less than or equal to\" now, since `lt` ignores build metadata. I think the new ordering algorithm satisfies strict weak ordering which C++ STL requires, instead of strict total ordering.\r\n\r\nBTW, is `a || b || ... || x`-style code better or idiomatic in Rust than `if a { return true; } if b { return true; } ... if x { return true; } return false;`-style one?", "tree": {"sha": "78988a434c8f3e5a1490eb48b28059a886793894", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78988a434c8f3e5a1490eb48b28059a886793894"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a317584e4f7643c862e94138eb210ce154974d0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a317584e4f7643c862e94138eb210ce154974d0e", "html_url": "https://github.com/rust-lang/rust/commit/a317584e4f7643c862e94138eb210ce154974d0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a317584e4f7643c862e94138eb210ce154974d0e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "274e7a4e4999fe4e59a8ab0d71555f7f3eea3d6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/274e7a4e4999fe4e59a8ab0d71555f7f3eea3d6f", "html_url": "https://github.com/rust-lang/rust/commit/274e7a4e4999fe4e59a8ab0d71555f7f3eea3d6f"}, {"sha": "31d29d394f817580cacf0962bd8c2272c8b817db", "url": "https://api.github.com/repos/rust-lang/rust/commits/31d29d394f817580cacf0962bd8c2272c8b817db", "html_url": "https://github.com/rust-lang/rust/commit/31d29d394f817580cacf0962bd8c2272c8b817db"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "dc016c8117b4cd5281c28e99c44edbc8451e32fe", "filename": "src/libextra/semver.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a317584e4f7643c862e94138eb210ce154974d0e/src%2Flibextra%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a317584e4f7643c862e94138eb210ce154974d0e/src%2Flibextra%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsemver.rs?ref=a317584e4f7643c862e94138eb210ce154974d0e", "patch": "@@ -113,13 +113,7 @@ impl cmp::Ord for Version {\n                  (0, _) => false,\n                  (_, 0) => true,\n                  (_, _) => self.pre < other.pre\n-             })) ||\n-\n-            (self.major == other.major &&\n-             self.minor == other.minor &&\n-             self.patch == other.patch &&\n-             self.pre == other.pre &&\n-             self.build < other.build)\n+             }))\n     }\n \n     #[inline]\n@@ -324,6 +318,8 @@ fn test_parse() {\n fn test_eq() {\n     assert_eq!(parse(\"1.2.3\"), parse(\"1.2.3\"));\n     assert_eq!(parse(\"1.2.3-alpha1\"), parse(\"1.2.3-alpha1\"));\n+    assert_eq!(parse(\"1.2.3+build.42\"), parse(\"1.2.3+build.42\"));\n+    assert_eq!(parse(\"1.2.3-alpha1+42\"), parse(\"1.2.3-alpha1+42\"));\n }\n \n #[test]\n@@ -332,6 +328,7 @@ fn test_ne() {\n     assert!(parse(\"0.0.0\")       != parse(\"0.1.0\"));\n     assert!(parse(\"0.0.0\")       != parse(\"1.0.0\"));\n     assert!(parse(\"1.2.3-alpha\") != parse(\"1.2.3-beta\"));\n+    assert!(parse(\"1.2.3+23\")    != parse(\"1.2.3+42\"));\n }\n \n #[test]\n@@ -342,6 +339,7 @@ fn test_lt() {\n     assert!(parse(\"1.2.3-alpha1\") < parse(\"1.2.3\"));\n     assert!(parse(\"1.2.3-alpha1\") < parse(\"1.2.3-alpha2\"));\n     assert!(!(parse(\"1.2.3-alpha2\") < parse(\"1.2.3-alpha2\")));\n+    assert!(!(parse(\"1.2.3+23\")     < parse(\"1.2.3+42\")));\n }\n \n #[test]\n@@ -351,6 +349,7 @@ fn test_le() {\n     assert!(parse(\"1.2.0\")        <= parse(\"1.2.3-alpha2\"));\n     assert!(parse(\"1.2.3-alpha1\") <= parse(\"1.2.3-alpha2\"));\n     assert!(parse(\"1.2.3-alpha2\") <= parse(\"1.2.3-alpha2\"));\n+    assert!(parse(\"1.2.3+23\")     <= parse(\"1.2.3+42\"));\n }\n \n #[test]\n@@ -361,6 +360,7 @@ fn test_gt() {\n     assert!(parse(\"1.2.3-alpha2\") > parse(\"1.2.3-alpha1\"));\n     assert!(parse(\"1.2.3\")        > parse(\"1.2.3-alpha2\"));\n     assert!(!(parse(\"1.2.3-alpha2\") > parse(\"1.2.3-alpha2\")));\n+    assert!(!(parse(\"1.2.3+23\")     > parse(\"1.2.3+42\")));\n }\n \n #[test]\n@@ -370,22 +370,20 @@ fn test_ge() {\n     assert!(parse(\"1.2.3-alpha2\") >= parse(\"1.2.0\"));\n     assert!(parse(\"1.2.3-alpha2\") >= parse(\"1.2.3-alpha1\"));\n     assert!(parse(\"1.2.3-alpha2\") >= parse(\"1.2.3-alpha2\"));\n+    assert!(parse(\"1.2.3+23\")     >= parse(\"1.2.3+42\"));\n }\n \n #[test]\n fn test_spec_order() {\n \n     let vs = [\"1.0.0-alpha\",\n               \"1.0.0-alpha.1\",\n+              \"1.0.0-alpha.beta\",\n+              \"1.0.0-beta\",\n               \"1.0.0-beta.2\",\n               \"1.0.0-beta.11\",\n               \"1.0.0-rc.1\",\n-              \"1.0.0-rc.1+build.1\",\n-              \"1.0.0\",\n-              \"1.0.0+0.3.7\",\n-              \"1.3.7+build\",\n-              \"1.3.7+build.2.b8f12d7\",\n-              \"1.3.7+build.11.e0f985a\"];\n+              \"1.0.0\"];\n     let mut i = 1;\n     while i < vs.len() {\n         let a = parse(vs[i-1]).get();"}]}