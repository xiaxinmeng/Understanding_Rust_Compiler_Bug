{"sha": "97a7a3c9ea29b13ced87c4641e5aea10cfb89253", "node_id": "C_kwDOAAsO6NoAKDk3YTdhM2M5ZWEyOWIxM2NlZDg3YzQ2NDFlNWFlYTEwY2ZiODkyNTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-16T07:10:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-16T07:10:23Z"}, "message": "Rollup merge of #98147 - est31:bootstrap_cfg_flag, r=Mark-Simulacrum\n\nMake #[cfg(bootstrap)] not error in proc macros on later stages\n\nAs was discovered in https://github.com/rust-lang/rust/pull/93628#issuecomment-1154697627,\nadding #[cfg(bootstrap)] to a rust-internal proc macro crate\nwould yield an unexpected cfg name error, at least on later\nstages wher the bootstrap cfg arg wasn't set.\n\nrustc already passes arguments to mark bootstrap as expected,\nhowever the means of delivery through the RUSTFLAGS env var\nis unable to reach proc macro crates, as described\nin the issue linked in the code this commit touches.\n\nThis wouldn't be an issue for cfg args that get passed through\nRUSTFLAGS, as they would never become *active* either, so\nany usage of one of these flags in a proc macro's code would\nlegitimately yield a lint warning. But since dc30258,\nrust takes extra measures to pass --cfg=bootstrap even in\nproc macros, by passing it via the wrapper. Thus, we need\nto send the flags to mark bootstrap as expected also from the\nwrapper, so that #[cfg(bootstrap)] also works from proc macros.\n\nI want to thank `Urgau` and `jplatte` for helping me find the cause of this. :heart:", "tree": {"sha": "ea1f5e2be139050e0beac753cce53437201f38b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea1f5e2be139050e0beac753cce53437201f38b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97a7a3c9ea29b13ced87c4641e5aea10cfb89253", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiqtdfCRBK7hj4Ov3rIwAAPiEIAH9+qsR64/o4KoAuFnXwHE/R\naHgPRjKl1CtvHEAl1MY2l4ddcCzimBJam0g6m+dGRB5XWTTon4dz2URWAjBiU8r9\nISkJfkzxpgu34shYxVyDLoGcQaQp5S7UOrRuYQZ3SIwgjMIRfhuSDAnyaaEQLnoh\nDE3BQYYH4e5Nke6RkMY5MDaQDEVnVYMhP8UbPqcR07Fst4FW13dq2FylPT4aNEcR\ngi3kVtgul0viQbMDkfWpGvzWj+2CXA4uOWq8WTafRc42s/xrwLLV3Bc8vqOj45A/\no2khI9Szol85gzfc6zhq9Gg97p8MXDFNznDHL0VGgCdHCK8P/j0wVycUrDQna4A=\n=SasK\n-----END PGP SIGNATURE-----\n", "payload": "tree ea1f5e2be139050e0beac753cce53437201f38b8\nparent ae58a55d0348681c1b7c845ebfd20eb9ee554b2e\nparent 471fa05fef0b09e0430a80e3d7f205ef19fc4a86\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1655363423 +0200\ncommitter GitHub <noreply@github.com> 1655363423 +0200\n\nRollup merge of #98147 - est31:bootstrap_cfg_flag, r=Mark-Simulacrum\n\nMake #[cfg(bootstrap)] not error in proc macros on later stages\n\nAs was discovered in https://github.com/rust-lang/rust/pull/93628#issuecomment-1154697627,\nadding #[cfg(bootstrap)] to a rust-internal proc macro crate\nwould yield an unexpected cfg name error, at least on later\nstages wher the bootstrap cfg arg wasn't set.\n\nrustc already passes arguments to mark bootstrap as expected,\nhowever the means of delivery through the RUSTFLAGS env var\nis unable to reach proc macro crates, as described\nin the issue linked in the code this commit touches.\n\nThis wouldn't be an issue for cfg args that get passed through\nRUSTFLAGS, as they would never become *active* either, so\nany usage of one of these flags in a proc macro's code would\nlegitimately yield a lint warning. But since dc30258,\nrust takes extra measures to pass --cfg=bootstrap even in\nproc macros, by passing it via the wrapper. Thus, we need\nto send the flags to mark bootstrap as expected also from the\nwrapper, so that #[cfg(bootstrap)] also works from proc macros.\n\nI want to thank `Urgau` and `jplatte` for helping me find the cause of this. :heart:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97a7a3c9ea29b13ced87c4641e5aea10cfb89253", "html_url": "https://github.com/rust-lang/rust/commit/97a7a3c9ea29b13ced87c4641e5aea10cfb89253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97a7a3c9ea29b13ced87c4641e5aea10cfb89253/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae58a55d0348681c1b7c845ebfd20eb9ee554b2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae58a55d0348681c1b7c845ebfd20eb9ee554b2e", "html_url": "https://github.com/rust-lang/rust/commit/ae58a55d0348681c1b7c845ebfd20eb9ee554b2e"}, {"sha": "471fa05fef0b09e0430a80e3d7f205ef19fc4a86", "url": "https://api.github.com/repos/rust-lang/rust/commits/471fa05fef0b09e0430a80e3d7f205ef19fc4a86", "html_url": "https://github.com/rust-lang/rust/commit/471fa05fef0b09e0430a80e3d7f205ef19fc4a86"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "40a3cc6d12cac0b30ebda5d17b0d1a3b91b28404", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97a7a3c9ea29b13ced87c4641e5aea10cfb89253/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a7a3c9ea29b13ced87c4641e5aea10cfb89253/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=97a7a3c9ea29b13ced87c4641e5aea10cfb89253", "patch": "@@ -127,12 +127,18 @@ fn main() {\n             }\n         }\n \n+        // Cargo doesn't pass RUSTFLAGS to proc_macros:\n+        // https://github.com/rust-lang/cargo/issues/4423\n+        // Thus, if we are on stage 0, we explicitly set `--cfg=bootstrap`.\n+        // We also declare that the flag is expected, which is mainly needed for\n+        // later stages so that they don't warn about #[cfg(bootstrap)],\n+        // but enabling it for stage 0 too lets any warnings, if they occur,\n+        // occur more early on, e.g. about #[cfg(bootstrap = \"foo\")].\n         if stage == \"0\" {\n-            // Cargo doesn't pass RUSTFLAGS to proc_macros:\n-            // https://github.com/rust-lang/cargo/issues/4423\n-            // Set `--cfg=bootstrap` explicitly instead.\n             cmd.arg(\"--cfg=bootstrap\");\n         }\n+        cmd.arg(\"-Zunstable-options\");\n+        cmd.arg(\"--check-cfg=values(bootstrap)\");\n     }\n \n     if let Ok(map) = env::var(\"RUSTC_DEBUGINFO_MAP\") {"}]}