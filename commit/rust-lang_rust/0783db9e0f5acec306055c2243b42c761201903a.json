{"sha": "0783db9e0f5acec306055c2243b42c761201903a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ODNkYjllMGY1YWNlYzMwNjA1NWMyMjQzYjQyYzc2MTIwMTkwM2E=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-12-21T16:20:53Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-12-22T12:05:09Z"}, "message": "Convert warning about `*const _` to a future-compat lint", "tree": {"sha": "8bc28d2d5a80000fa2467d80ef69725a9797a02b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bc28d2d5a80000fa2467d80ef69725a9797a02b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0783db9e0f5acec306055c2243b42c761201903a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0783db9e0f5acec306055c2243b42c761201903a", "html_url": "https://github.com/rust-lang/rust/commit/0783db9e0f5acec306055c2243b42c761201903a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0783db9e0f5acec306055c2243b42c761201903a/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7b52cc8bf2bcc4cbd223a4b61fe3e35e798f6e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b52cc8bf2bcc4cbd223a4b61fe3e35e798f6e2", "html_url": "https://github.com/rust-lang/rust/commit/b7b52cc8bf2bcc4cbd223a4b61fe3e35e798f6e2"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "7410386c6f45b67f9fac90286149f5061571b45d", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0783db9e0f5acec306055c2243b42c761201903a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0783db9e0f5acec306055c2243b42c761201903a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=0783db9e0f5acec306055c2243b42c761201903a", "patch": "@@ -240,6 +240,12 @@ declare_lint! {\n    \"detects single use lifetimes\"\n }\n \n+declare_lint! {\n+    pub TYVAR_BEHIND_RAW_POINTER,\n+    Warn,\n+    \"raw pointer to an inference variable\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -284,7 +290,8 @@ impl LintPass for HardwiredLints {\n             UNUSED_UNSAFE,\n             UNUSED_MUT,\n             COERCE_NEVER,\n-            SINGLE_USE_LIFETIME\n+            SINGLE_USE_LIFETIME,\n+            TYVAR_BEHIND_RAW_POINTER\n         )\n     }\n }"}, {"sha": "3d7f05afefc1f65c0be2690906a0a1c131391b60", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0783db9e0f5acec306055c2243b42c761201903a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0783db9e0f5acec306055c2243b42c761201903a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=0783db9e0f5acec306055c2243b42c761201903a", "patch": "@@ -255,6 +255,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(COERCE_NEVER),\n             reference: \"issue #46325 <https://github.com/rust-lang/rust/issues/46325>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(TYVAR_BEHIND_RAW_POINTER),\n+            reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "53bb0e577a4b68405b95b9318cf1197e0af24e30", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0783db9e0f5acec306055c2243b42c761201903a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0783db9e0f5acec306055c2243b42c761201903a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=0783db9e0f5acec306055c2243b42c761201903a", "patch": "@@ -27,6 +27,7 @@ use syntax::ast;\n use syntax::util::lev_distance::{lev_distance, find_best_match_for_name};\n use syntax_pos::Span;\n use rustc::hir;\n+use rustc::lint;\n use std::mem;\n use std::ops::Deref;\n use std::rc::Rc;\n@@ -249,7 +250,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // think cause spurious errors. Really though this part should\n         // take place in the `self.probe` below.\n         let steps = if mode == Mode::MethodCall {\n-            match self.create_steps(span, self_ty, is_suggestion) {\n+            match self.create_steps(span, scope_expr_id, self_ty, is_suggestion) {\n                 Some(steps) => steps,\n                 None => {\n                     return Err(MethodError::NoMatch(NoMatchData::new(Vec::new(),\n@@ -291,6 +292,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     fn create_steps(&self,\n                     span: Span,\n+                    scope_expr_id: ast::NodeId,\n                     self_ty: Ty<'tcx>,\n                     is_suggestion: IsSuggestion)\n                     -> Option<Vec<CandidateStep<'tcx>>> {\n@@ -318,18 +320,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match final_ty.sty {\n             ty::TyInfer(ty::TyVar(_)) => {\n                 // Ended in an inference variable. If we are doing\n-                // a real method lookup, this is a hard error (it's an\n-                // ambiguity and we can't make progress).\n+                // a real method lookup, this is a hard error because it's\n+                // possible that there will be multiple applicable methods.\n                 if !is_suggestion.0 {\n                     if reached_raw_pointer\n                     && !self.tcx.sess.features.borrow().arbitrary_self_types {\n-                        // only produce a warning in this case, because inference variables used to\n-                        // be allowed here in some cases for raw pointers\n-                        struct_span_warn!(self.tcx.sess, span, E0619,\n-                            \"the type of this value must be known in this context\")\n-                        .note(\"this will be made into a hard error in a future version of \\\n-                               the compiler\")\n-                        .emit();\n+                        // this case used to be allowed by the compiler,\n+                        // so we do a future-compat lint here\n+                        // (see https://github.com/rust-lang/rust/issues/46906)\n+                        self.tcx.lint_node(\n+                            lint::builtin::TYVAR_BEHIND_RAW_POINTER,\n+                            scope_expr_id,\n+                            span,\n+                            &format!(\"the type of this value must be known in this context\"));\n                     } else {\n                         let t = self.structurally_resolved_type(span, final_ty);\n                         assert_eq!(t, self.tcx.types.err);"}, {"sha": "d0ee55c092b284476ad1a48e7facb0432266ae91", "filename": "src/test/ui/inference-variable-behind-raw-pointer.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0783db9e0f5acec306055c2243b42c761201903a/src%2Ftest%2Fui%2Finference-variable-behind-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0783db9e0f5acec306055c2243b42c761201903a/src%2Ftest%2Fui%2Finference-variable-behind-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference-variable-behind-raw-pointer.stderr?ref=0783db9e0f5acec306055c2243b42c761201903a", "patch": "@@ -1,8 +1,10 @@\n-warning[E0619]: the type of this value must be known in this context\n+warning: the type of this value must be known in this context\n   --> $DIR/inference-variable-behind-raw-pointer.rs:18:13\n    |\n 18 |     if data.is_null() {}\n    |             ^^^^^^^\n    |\n-   = note: this will be made into a hard error in a future version of the compiler\n+   = note: #[warn(tyvar_behind_raw_pointer)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n "}]}