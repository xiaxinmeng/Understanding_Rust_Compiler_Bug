{"sha": "c21b4ad7d46118c1fd0747b52dd3f052aee79021", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMWI0YWQ3ZDQ2MTE4YzFmZDA3NDdiNTJkZDNmMDUyYWVlNzkwMjE=", "commit": {"author": {"name": "Daniel Wagner-Hall", "email": "dawagner@gmail.com", "date": "2019-12-22T02:13:39Z"}, "committer": {"name": "Daniel Wagner-Hall", "email": "dawagner@gmail.com", "date": "2019-12-22T02:13:39Z"}, "message": "Update wildcard enum match lint for non_exhaustive enums", "tree": {"sha": "6980cf9e0572984788ce70b02be6d7fd0d4b330d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6980cf9e0572984788ce70b02be6d7fd0d4b330d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c21b4ad7d46118c1fd0747b52dd3f052aee79021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c21b4ad7d46118c1fd0747b52dd3f052aee79021", "html_url": "https://github.com/rust-lang/rust/commit/c21b4ad7d46118c1fd0747b52dd3f052aee79021", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c21b4ad7d46118c1fd0747b52dd3f052aee79021/comments", "author": {"login": "illicitonion", "id": 1131704, "node_id": "MDQ6VXNlcjExMzE3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1131704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/illicitonion", "html_url": "https://github.com/illicitonion", "followers_url": "https://api.github.com/users/illicitonion/followers", "following_url": "https://api.github.com/users/illicitonion/following{/other_user}", "gists_url": "https://api.github.com/users/illicitonion/gists{/gist_id}", "starred_url": "https://api.github.com/users/illicitonion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/illicitonion/subscriptions", "organizations_url": "https://api.github.com/users/illicitonion/orgs", "repos_url": "https://api.github.com/users/illicitonion/repos", "events_url": "https://api.github.com/users/illicitonion/events{/privacy}", "received_events_url": "https://api.github.com/users/illicitonion/received_events", "type": "User", "site_admin": false}, "committer": {"login": "illicitonion", "id": 1131704, "node_id": "MDQ6VXNlcjExMzE3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1131704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/illicitonion", "html_url": "https://github.com/illicitonion", "followers_url": "https://api.github.com/users/illicitonion/followers", "following_url": "https://api.github.com/users/illicitonion/following{/other_user}", "gists_url": "https://api.github.com/users/illicitonion/gists{/gist_id}", "starred_url": "https://api.github.com/users/illicitonion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/illicitonion/subscriptions", "organizations_url": "https://api.github.com/users/illicitonion/orgs", "repos_url": "https://api.github.com/users/illicitonion/repos", "events_url": "https://api.github.com/users/illicitonion/events{/privacy}", "received_events_url": "https://api.github.com/users/illicitonion/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfb332005845883f2abb50fe183fc91221bad9d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb332005845883f2abb50fe183fc91221bad9d1", "html_url": "https://github.com/rust-lang/rust/commit/cfb332005845883f2abb50fe183fc91221bad9d1"}], "stats": {"total": 93, "additions": 84, "deletions": 9}, "files": [{"sha": "4c4a64f4ac114e133b66d6e907e988ab2a5d885a", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c21b4ad7d46118c1fd0747b52dd3f052aee79021/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21b4ad7d46118c1fd0747b52dd3f052aee79021/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=c21b4ad7d46118c1fd0747b52dd3f052aee79021", "patch": "@@ -522,7 +522,7 @@ fn check_wild_enum_match(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm]) {\n             }\n         }\n \n-        let suggestion: Vec<String> = missing_variants\n+        let mut suggestion: Vec<String> = missing_variants\n             .iter()\n             .map(|v| {\n                 let suffix = match v.ctor_kind {\n@@ -543,11 +543,20 @@ fn check_wild_enum_match(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm]) {\n             return;\n         }\n \n+        let mut message = \"wildcard match will miss any future added variants.\";\n+\n+        if let ty::Adt(def, _) = ty.kind {\n+            if def.is_variant_list_non_exhaustive() {\n+                message = \"match on non-exhaustive enum doesn't explicitly match all known variants.\";\n+                suggestion.push(String::from(\"_\"));\n+            }\n+        }\n+\n         span_lint_and_sugg(\n             cx,\n             WILDCARD_ENUM_MATCH_ARM,\n             wildcard_span,\n-            \"wildcard match will miss any future added variants.\",\n+            message,\n             \"try this\",\n             suggestion.join(\" | \"),\n             Applicability::MachineApplicable,"}, {"sha": "1da2833e260557f0ea231f9d63de311d0d6fa49e", "filename": "tests/ui/wildcard_enum_match_arm.fixed", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c21b4ad7d46118c1fd0747b52dd3f052aee79021/tests%2Fui%2Fwildcard_enum_match_arm.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c21b4ad7d46118c1fd0747b52dd3f052aee79021/tests%2Fui%2Fwildcard_enum_match_arm.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.fixed?ref=c21b4ad7d46118c1fd0747b52dd3f052aee79021", "patch": "@@ -1,7 +1,9 @@\n // run-rustfix\n \n #![deny(clippy::wildcard_enum_match_arm)]\n-#![allow(unreachable_code, unused_variables, dead_code)]\n+#![allow(unreachable_code, unused_variables, dead_code, clippy::single_match)]\n+\n+use std::io::ErrorKind;\n \n #[derive(Clone, Copy, Debug, Eq, PartialEq)]\n enum Color {\n@@ -62,4 +64,32 @@ fn main() {\n         140 => {},\n         _ => {},\n     };\n+    // We need to use an enum not defined in this test because non_exhaustive is ignored for the\n+    // purposes of dead code analysis within a crate.\n+    let error_kind = ErrorKind::NotFound;\n+    match error_kind {\n+        ErrorKind::NotFound => {},\n+        std::io::ErrorKind::PermissionDenied | std::io::ErrorKind::ConnectionRefused | std::io::ErrorKind::ConnectionReset | std::io::ErrorKind::ConnectionAborted | std::io::ErrorKind::NotConnected | std::io::ErrorKind::AddrInUse | std::io::ErrorKind::AddrNotAvailable | std::io::ErrorKind::BrokenPipe | std::io::ErrorKind::AlreadyExists | std::io::ErrorKind::WouldBlock | std::io::ErrorKind::InvalidInput | std::io::ErrorKind::InvalidData | std::io::ErrorKind::TimedOut | std::io::ErrorKind::WriteZero | std::io::ErrorKind::Interrupted | std::io::ErrorKind::Other | std::io::ErrorKind::UnexpectedEof | _ => {},\n+    }\n+    match error_kind {\n+        ErrorKind::NotFound => {},\n+        ErrorKind::PermissionDenied => {},\n+        ErrorKind::ConnectionRefused => {},\n+        ErrorKind::ConnectionReset => {},\n+        ErrorKind::ConnectionAborted => {},\n+        ErrorKind::NotConnected => {},\n+        ErrorKind::AddrInUse => {},\n+        ErrorKind::AddrNotAvailable => {},\n+        ErrorKind::BrokenPipe => {},\n+        ErrorKind::AlreadyExists => {},\n+        ErrorKind::WouldBlock => {},\n+        ErrorKind::InvalidInput => {},\n+        ErrorKind::InvalidData => {},\n+        ErrorKind::TimedOut => {},\n+        ErrorKind::WriteZero => {},\n+        ErrorKind::Interrupted => {},\n+        ErrorKind::Other => {},\n+        ErrorKind::UnexpectedEof => {},\n+        _ => {},\n+    }\n }"}, {"sha": "c2eb4b308024e69ac10ed065933a3c28866353a9", "filename": "tests/ui/wildcard_enum_match_arm.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c21b4ad7d46118c1fd0747b52dd3f052aee79021/tests%2Fui%2Fwildcard_enum_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21b4ad7d46118c1fd0747b52dd3f052aee79021/tests%2Fui%2Fwildcard_enum_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.rs?ref=c21b4ad7d46118c1fd0747b52dd3f052aee79021", "patch": "@@ -1,7 +1,9 @@\n // run-rustfix\n \n #![deny(clippy::wildcard_enum_match_arm)]\n-#![allow(unreachable_code, unused_variables, dead_code)]\n+#![allow(unreachable_code, unused_variables, dead_code, clippy::single_match)]\n+\n+use std::io::ErrorKind;\n \n #[derive(Clone, Copy, Debug, Eq, PartialEq)]\n enum Color {\n@@ -62,4 +64,32 @@ fn main() {\n         140 => {},\n         _ => {},\n     };\n+    // We need to use an enum not defined in this test because non_exhaustive is ignored for the\n+    // purposes of dead code analysis within a crate.\n+    let error_kind = ErrorKind::NotFound;\n+    match error_kind {\n+        ErrorKind::NotFound => {},\n+        _ => {},\n+    }\n+    match error_kind {\n+        ErrorKind::NotFound => {},\n+        ErrorKind::PermissionDenied => {},\n+        ErrorKind::ConnectionRefused => {},\n+        ErrorKind::ConnectionReset => {},\n+        ErrorKind::ConnectionAborted => {},\n+        ErrorKind::NotConnected => {},\n+        ErrorKind::AddrInUse => {},\n+        ErrorKind::AddrNotAvailable => {},\n+        ErrorKind::BrokenPipe => {},\n+        ErrorKind::AlreadyExists => {},\n+        ErrorKind::WouldBlock => {},\n+        ErrorKind::InvalidInput => {},\n+        ErrorKind::InvalidData => {},\n+        ErrorKind::TimedOut => {},\n+        ErrorKind::WriteZero => {},\n+        ErrorKind::Interrupted => {},\n+        ErrorKind::Other => {},\n+        ErrorKind::UnexpectedEof => {},\n+        _ => {},\n+    }\n }"}, {"sha": "1020542c1e7ec03c3ac79e72fa142012e40523b8", "filename": "tests/ui/wildcard_enum_match_arm.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c21b4ad7d46118c1fd0747b52dd3f052aee79021/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21b4ad7d46118c1fd0747b52dd3f052aee79021/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.stderr?ref=c21b4ad7d46118c1fd0747b52dd3f052aee79021", "patch": "@@ -1,5 +1,5 @@\n error: wildcard match will miss any future added variants.\n-  --> $DIR/wildcard_enum_match_arm.rs:29:9\n+  --> $DIR/wildcard_enum_match_arm.rs:31:9\n    |\n LL |         _ => eprintln!(\"Not red\"),\n    |         ^ help: try this: `Color::Green | Color::Blue | Color::Rgb(..) | Color::Cyan`\n@@ -11,22 +11,28 @@ LL | #![deny(clippy::wildcard_enum_match_arm)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: wildcard match will miss any future added variants.\n-  --> $DIR/wildcard_enum_match_arm.rs:33:9\n+  --> $DIR/wildcard_enum_match_arm.rs:35:9\n    |\n LL |         _not_red => eprintln!(\"Not red\"),\n    |         ^^^^^^^^ help: try this: `_not_red @ Color::Green | _not_red @ Color::Blue | _not_red @ Color::Rgb(..) | _not_red @ Color::Cyan`\n \n error: wildcard match will miss any future added variants.\n-  --> $DIR/wildcard_enum_match_arm.rs:37:9\n+  --> $DIR/wildcard_enum_match_arm.rs:39:9\n    |\n LL |         not_red => format!(\"{:?}\", not_red),\n    |         ^^^^^^^ help: try this: `not_red @ Color::Green | not_red @ Color::Blue | not_red @ Color::Rgb(..) | not_red @ Color::Cyan`\n \n error: wildcard match will miss any future added variants.\n-  --> $DIR/wildcard_enum_match_arm.rs:53:9\n+  --> $DIR/wildcard_enum_match_arm.rs:55:9\n    |\n LL |         _ => \"No red\",\n    |         ^ help: try this: `Color::Red | Color::Green | Color::Blue | Color::Rgb(..) | Color::Cyan`\n \n-error: aborting due to 4 previous errors\n+error: match on non-exhaustive enum doesn't explicitly match all known variants.\n+  --> $DIR/wildcard_enum_match_arm.rs:72:9\n+   |\n+LL |         _ => {},\n+   |         ^ help: try this: `std::io::ErrorKind::PermissionDenied | std::io::ErrorKind::ConnectionRefused | std::io::ErrorKind::ConnectionReset | std::io::ErrorKind::ConnectionAborted | std::io::ErrorKind::NotConnected | std::io::ErrorKind::AddrInUse | std::io::ErrorKind::AddrNotAvailable | std::io::ErrorKind::BrokenPipe | std::io::ErrorKind::AlreadyExists | std::io::ErrorKind::WouldBlock | std::io::ErrorKind::InvalidInput | std::io::ErrorKind::InvalidData | std::io::ErrorKind::TimedOut | std::io::ErrorKind::WriteZero | std::io::ErrorKind::Interrupted | std::io::ErrorKind::Other | std::io::ErrorKind::UnexpectedEof | _`\n+\n+error: aborting due to 5 previous errors\n "}]}