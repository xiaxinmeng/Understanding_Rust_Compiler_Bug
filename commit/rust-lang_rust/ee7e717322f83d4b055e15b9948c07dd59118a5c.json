{"sha": "ee7e717322f83d4b055e15b9948c07dd59118a5c", "node_id": "C_kwDOAAsO6NoAKGVlN2U3MTczMjJmODNkNGIwNTVlMTViOTk0OGMwN2RkNTkxMThhNWM", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-06-14T08:03:35Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-06-15T10:00:57Z"}, "message": "tweak suggestion for argument-position `impl ?Sized`", "tree": {"sha": "bfe36a3d02f50d0bdc18e8ba3f038efe7ec05ad2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfe36a3d02f50d0bdc18e8ba3f038efe7ec05ad2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee7e717322f83d4b055e15b9948c07dd59118a5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7e717322f83d4b055e15b9948c07dd59118a5c", "html_url": "https://github.com/rust-lang/rust/commit/ee7e717322f83d4b055e15b9948c07dd59118a5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee7e717322f83d4b055e15b9948c07dd59118a5c/comments", "author": null, "committer": null, "parents": [{"sha": "5a65be815211a059b08ee3b786583308377372fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a65be815211a059b08ee3b786583308377372fa", "html_url": "https://github.com/rust-lang/rust/commit/5a65be815211a059b08ee3b786583308377372fa"}], "stats": {"total": 86, "additions": 74, "deletions": 12}, "files": [{"sha": "1c80692c306eb3c357438829c44b6beb8010254d", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ee7e717322f83d4b055e15b9948c07dd59118a5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7e717322f83d4b055e15b9948c07dd59118a5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=ee7e717322f83d4b055e15b9948c07dd59118a5c", "patch": "@@ -14,8 +14,8 @@ use rustc_errors::{Applicability, Diagnostic, DiagnosticArgValue, IntoDiagnostic\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::WherePredicate;\n-use rustc_span::Span;\n+use rustc_hir::{PredicateOrigin, WherePredicate};\n+use rustc_span::{BytePos, Span};\n use rustc_type_ir::sty::TyKind::*;\n \n impl<'tcx> IntoDiagnosticArg for Ty<'tcx> {\n@@ -156,10 +156,11 @@ enum SuggestChangingConstraintsMessage<'a> {\n     RestrictBoundFurther,\n     RestrictType { ty: &'a str },\n     RestrictTypeFurther { ty: &'a str },\n-    RemovingQSized,\n+    RemoveMaybeUnsized,\n+    ReplaceMaybeUnsizedWithSized,\n }\n \n-fn suggest_removing_unsized_bound(\n+fn suggest_changing_unsized_bound(\n     generics: &hir::Generics<'_>,\n     suggestions: &mut Vec<(Span, String, SuggestChangingConstraintsMessage<'_>)>,\n     param: &hir::GenericParam<'_>,\n@@ -183,12 +184,25 @@ fn suggest_removing_unsized_bound(\n             if poly.trait_ref.trait_def_id() != def_id {\n                 continue;\n             }\n-            let sp = generics.span_for_bound_removal(where_pos, pos);\n-            suggestions.push((\n-                sp,\n-                String::new(),\n-                SuggestChangingConstraintsMessage::RemovingQSized,\n-            ));\n+            if predicate.origin == PredicateOrigin::ImplTrait && predicate.bounds.len() == 1 {\n+                // For `impl ?Sized` with no other bounds, suggest `impl Sized` instead.\n+                let bound_span = bound.span();\n+                if bound_span.can_be_used_for_suggestions() {\n+                    let question_span = bound_span.with_hi(bound_span.lo() + BytePos(1));\n+                    suggestions.push((\n+                        question_span,\n+                        String::new(),\n+                        SuggestChangingConstraintsMessage::ReplaceMaybeUnsizedWithSized,\n+                    ));\n+                }\n+            } else {\n+                let sp = generics.span_for_bound_removal(where_pos, pos);\n+                suggestions.push((\n+                    sp,\n+                    String::new(),\n+                    SuggestChangingConstraintsMessage::RemoveMaybeUnsized,\n+                ));\n+            }\n         }\n     }\n }\n@@ -245,7 +259,7 @@ pub fn suggest_constraining_type_params<'a>(\n                     param.span,\n                     format!(\"this type parameter needs to be `{}`\", constraint),\n                 );\n-                suggest_removing_unsized_bound(generics, &mut suggestions, param, def_id);\n+                suggest_changing_unsized_bound(generics, &mut suggestions, param, def_id);\n             }\n         }\n \n@@ -395,9 +409,12 @@ pub fn suggest_constraining_type_params<'a>(\n             SuggestChangingConstraintsMessage::RestrictTypeFurther { ty } => {\n                 Cow::from(format!(\"consider further restricting type parameter `{}`\", ty))\n             }\n-            SuggestChangingConstraintsMessage::RemovingQSized => {\n+            SuggestChangingConstraintsMessage::RemoveMaybeUnsized => {\n                 Cow::from(\"consider removing the `?Sized` bound to make the type parameter `Sized`\")\n             }\n+            SuggestChangingConstraintsMessage::ReplaceMaybeUnsizedWithSized => {\n+                Cow::from(\"consider replacing `?Sized` with `Sized`\")\n+            }\n         };\n \n         err.span_suggestion_verbose(span, msg, suggestion, applicability);"}, {"sha": "469d6a6345ed969571561583ad017001355e1fe0", "filename": "tests/ui/trait-bounds/apit-unsized.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee7e717322f83d4b055e15b9948c07dd59118a5c/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7e717322f83d4b055e15b9948c07dd59118a5c/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.rs?ref=ee7e717322f83d4b055e15b9948c07dd59118a5c", "patch": "@@ -0,0 +1,4 @@\n+fn foo(_: impl Iterator<Item = i32> + ?Sized) {} //~ ERROR [E0277]\n+fn bar(_: impl ?Sized) {} //~ ERROR [E0277]\n+\n+fn main() {}"}, {"sha": "7a4a2274d4498d51627c52ef089751ca468472d5", "filename": "tests/ui/trait-bounds/apit-unsized.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ee7e717322f83d4b055e15b9948c07dd59118a5c/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee7e717322f83d4b055e15b9948c07dd59118a5c/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.stderr?ref=ee7e717322f83d4b055e15b9948c07dd59118a5c", "patch": "@@ -0,0 +1,41 @@\n+error[E0277]: the size for values of type `impl Iterator<Item = i32> + ?Sized` cannot be known at compilation time\n+  --> $DIR/apit-unsized.rs:1:8\n+   |\n+LL | fn foo(_: impl Iterator<Item = i32> + ?Sized) {}\n+   |        ^  ---------------------------------- this type parameter needs to be `std::marker::Sized`\n+   |        |\n+   |        doesn't have a size known at compile-time\n+   |\n+   = help: unsized fn params are gated as an unstable feature\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL - fn foo(_: impl Iterator<Item = i32> + ?Sized) {}\n+LL + fn foo(_: impl Iterator<Item = i32>) {}\n+   |\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn foo(_: &impl Iterator<Item = i32> + ?Sized) {}\n+   |           +\n+\n+error[E0277]: the size for values of type `impl ?Sized` cannot be known at compilation time\n+  --> $DIR/apit-unsized.rs:2:8\n+   |\n+LL | fn bar(_: impl ?Sized) {}\n+   |        ^  ----------- this type parameter needs to be `std::marker::Sized`\n+   |        |\n+   |        doesn't have a size known at compile-time\n+   |\n+   = help: unsized fn params are gated as an unstable feature\n+help: consider replacing `?Sized` with `Sized`\n+   |\n+LL - fn bar(_: impl ?Sized) {}\n+LL + fn bar(_: impl Sized) {}\n+   |\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn bar(_: &impl ?Sized) {}\n+   |           +\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}