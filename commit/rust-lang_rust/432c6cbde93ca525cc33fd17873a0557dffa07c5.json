{"sha": "432c6cbde93ca525cc33fd17873a0557dffa07c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMmM2Y2JkZTkzY2E1MjVjYzMzZmQxNzg3M2EwNTU3ZGZmYTA3YzU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-26T07:32:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-26T09:28:00Z"}, "message": "core: Make range follow the for loop protocol", "tree": {"sha": "f3b887343ed4473be3cfc7782bd3715175e316c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3b887343ed4473be3cfc7782bd3715175e316c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/432c6cbde93ca525cc33fd17873a0557dffa07c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/432c6cbde93ca525cc33fd17873a0557dffa07c5", "html_url": "https://github.com/rust-lang/rust/commit/432c6cbde93ca525cc33fd17873a0557dffa07c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/432c6cbde93ca525cc33fd17873a0557dffa07c5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5281db2bc273f089a872175f935c01f33dfa4326", "url": "https://api.github.com/repos/rust-lang/rust/commits/5281db2bc273f089a872175f935c01f33dfa4326", "html_url": "https://github.com/rust-lang/rust/commit/5281db2bc273f089a872175f935c01f33dfa4326"}], "stats": {"total": 190, "additions": 102, "deletions": 88}, "files": [{"sha": "0b24ca6c10247678554dfd8e2ac4f39baa71dd01", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -277,7 +277,7 @@ fn check_expected_errors(expected_errors: [errors::expected_error],\n         }\n     }\n \n-    uint::range(0u, vec::len(found_flags)) {|i|\n+    for uint::range(0u, vec::len(found_flags)) {|i|\n         if !found_flags[i] {\n             let ee = expected_errors[i];\n             fatal_procres(#fmt[\"expected %s on line %u not found: %s\","}, {"sha": "07c3cc9011e280d58fd47146c463d61dd60ba285", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -36,9 +36,12 @@ pure fn is_nonpositive(x: T) -> bool { x <= 0 as T }\n pure fn is_nonnegative(x: T) -> bool { x >= 0 as T }\n \n #[doc = \"Iterate over the range [`lo`..`hi`)\"]\n-fn range(lo: T, hi: T, it: fn(T)) {\n+fn range(lo: T, hi: T, it: fn(T) -> bool) {\n     let mut i = lo;\n-    while i < hi { it(i); i += 1 as T; }\n+    while i < hi {\n+        if !it(i) { break }\n+        i += 1 as T;\n+    }\n }\n \n #[doc = \"Computes the bitwise complement\"]"}, {"sha": "d43fc27a019d794c72f126dab1acb2f42c34acbf", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -127,12 +127,12 @@ fn test_from_global_chan2() unsafe {\n \n         // Spawn a bunch of tasks that all want to compete to\n         // create the global channel\n-        uint::range(0u, 10u) {|i|\n+        for uint::range(0u, 10u) {|i|\n             task::spawn() {||\n                 let ch = chan_from_global_ptr(\n                     globchanp, task::builder) {|po|\n \n-                    uint::range(0u, 10u) {|_j|\n+                    for uint::range(0u, 10u) {|_j|\n                         let ch = comm::recv(po);\n                         comm::send(ch, {i});\n                     }\n@@ -147,7 +147,7 @@ fn test_from_global_chan2() unsafe {\n         }\n         // There should be only one winner\n         let mut winners = 0u;\n-        uint::range(0u, 10u) {|_i|\n+        for uint::range(0u, 10u) {|_i|\n             let res = comm::recv(resultpo);\n             if res { winners += 1u };\n         }"}, {"sha": "592124767ff905b017cfe94a3dd0f2ab6812a08d", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -202,7 +202,7 @@ impl extensions for rng {\n     fn weighted_vec<T:copy>(v: [weighted<T>]) -> [T] {\n         let mut r = [];\n         for v.each {|item|\n-            uint::range(0u, item.weight) {|_i|\n+            for uint::range(0u, item.weight) {|_i|\n                 r += [item.item];\n             }\n         }"}, {"sha": "e34fb145336ac10c81bb2c6e3d0abbde4b3c7874", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -35,9 +35,12 @@ pure fn is_nonpositive(x: T) -> bool { x <= 0 as T }\n pure fn is_nonnegative(x: T) -> bool { x >= 0 as T }\n \n #[doc = \"Iterate over the range [`lo`..`hi`)\"]\n-fn range(lo: T, hi: T, it: fn(T)) {\n+fn range(lo: T, hi: T, it: fn(T) -> bool) {\n     let mut i = lo;\n-    while i < hi { it(i); i += 1 as T; }\n+    while i < hi {\n+        if !it(i) { break }\n+        i += 1 as T;\n+    }\n }\n \n #[doc = \"Computes the bitwise complement\"]"}, {"sha": "fdc8b1ed248a501d3570f3fe385f279a0dac0ddc", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -892,7 +892,7 @@ Both vectors must have the same length\n #[inline]\n fn iter2<U, T>(v1: [const U], v2: [const T], f: fn(U, T)) {\n     assert len(v1) == len(v2);\n-    uint::range(0u, len(v1)) {|i|\n+    for uint::range(0u, len(v1)) {|i|\n         f(v1[i], v2[i])\n     }\n }"}, {"sha": "259041959d4c7263a9595e676aca1fe71f6398fe", "filename": "src/librustsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibrustsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibrustsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fcodemap.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -183,7 +183,7 @@ fn span_to_lines(sp: span, cm: codemap::codemap) -> @file_lines {\n     let lo = lookup_char_pos(cm, sp.lo);\n     let hi = lookup_char_pos(cm, sp.hi);\n     let mut lines = [];\n-    uint::range(lo.line - 1u, hi.line as uint) {|i| lines += [i]; };\n+    for uint::range(lo.line - 1u, hi.line as uint) {|i| lines += [i]; };\n     ret @{file: lo.file, lines: lines};\n }\n "}, {"sha": "a6e08439356dd3aadfad372c4d0aaef0bbe171e3", "filename": "src/librustsyntax/ext/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibrustsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibrustsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fqquote.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -193,7 +193,7 @@ fn finish<T: qq_helper>\n     let qcx = gather_anti_quotes(sp.lo, node);\n     let cx = qcx;\n \n-    uint::range(1u, cx.gather.len()) {|i|\n+    for uint::range(1u, cx.gather.len()) {|i|\n         assert cx.gather[i-1u].lo < cx.gather[i].lo;\n         // ^^ check that the vector is sorted\n         assert cx.gather[i-1u].hi <= cx.gather[i].lo;"}, {"sha": "11bf0b4ccb1907fd7bebd8231107cd0511fde225", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -46,7 +46,7 @@ fn process(v0: bitv, v1: bitv, op: fn(uint, uint) -> uint) -> bool {\n     assert (vec::len(v0.storage) == len);\n     assert (v0.nbits == v1.nbits);\n     let mut changed = false;\n-    uint::range(0u, len) {|i|\n+    for uint::range(0u, len) {|i|\n         let w0 = v0.storage[i];\n         let w1 = v1.storage[i];\n         let w = op(w0, w1);\n@@ -90,7 +90,7 @@ fn assign(v0: bitv, v1: bitv) -> bool {\n fn clone(v: bitv) -> bitv {\n     let storage = vec::to_mut(vec::from_elem(v.nbits / uint_bits + 1u, 0u));\n     let len = vec::len(v.storage);\n-    uint::range(0u, len) {|i| storage[i] = v.storage[i]; };\n+    for uint::range(0u, len) {|i| storage[i] = v.storage[i]; };\n     ret @{storage: storage, nbits: v.nbits};\n }\n \n@@ -121,17 +121,17 @@ fn equal(v0: bitv, v1: bitv) -> bool {\n \n #[doc = \"Set all bits to 0\"]\n fn clear(v: bitv) {\n-    uint::range(0u, vec::len(v.storage)) {|i| v.storage[i] = 0u; };\n+    for uint::range(0u, vec::len(v.storage)) {|i| v.storage[i] = 0u; };\n }\n \n #[doc = \"Set all bits to 1\"]\n fn set_all(v: bitv) {\n-    uint::range(0u, v.nbits) {|i| set(v, i, true); };\n+    for uint::range(0u, v.nbits) {|i| set(v, i, true); };\n }\n \n #[doc = \"Invert all bits\"]\n fn invert(v: bitv) {\n-    uint::range(0u, vec::len(v.storage)) {|i|\n+    for uint::range(0u, vec::len(v.storage)) {|i|\n         v.storage[i] = !v.storage[i];\n     };\n }"}, {"sha": "56fa619d7552670b45beb4f3c97c5e10691bd1dc", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -158,13 +158,13 @@ fn concat(v: [rope]) -> rope {\n     let mut len = vec::len(v);\n     if len == 0u { ret node::empty; }\n     let ropes = vec::to_mut(vec::from_elem(len, v[0]));\n-    uint::range(1u, len) {|i|\n+    for uint::range(1u, len) {|i|\n        ropes[i] = v[i];\n     }\n \n     //Merge progresively\n     while len > 1u {\n-        uint::range(0u, len/2u) {|i|\n+        for uint::range(0u, len/2u) {|i|\n             ropes[i] = append_rope(ropes[2u*i], ropes[2u*i+1u]);\n         }\n         if len%2u != 0u {\n@@ -1352,19 +1352,19 @@ mod tests {\n     fn char_at1() {\n         //Generate a large rope\n         let mut r = of_str(@ \"123456789\");\n-        uint::range(0u, 10u){|_i|\n+        for uint::range(0u, 10u){|_i|\n             r = append_rope(r, r);\n         }\n \n         //Copy it in the slowest possible way\n         let mut r2 = empty();\n-        uint::range(0u, char_len(r)){|i|\n+        for uint::range(0u, char_len(r)){|i|\n             r2 = append_char(r2, char_at(r, i));\n         }\n         assert eq(r, r2);\n \n         let mut r3 = empty();\n-        uint::range(0u, char_len(r)){|i|\n+        for uint::range(0u, char_len(r)){|i|\n             r3 = prepend_char(r3, char_at(r, char_len(r) - i - 1u));\n         }\n         assert eq(r, r3);\n@@ -1385,7 +1385,7 @@ mod tests {\n         //Generate a reasonable rope\n         let chunk = of_str(@ \"123456789\");\n         let mut r = empty();\n-        uint::range(0u, 10u){|_i|\n+        for uint::range(0u, 10u){|_i|\n             r = append_rope(r, chunk);\n         }\n "}, {"sha": "7c5a2edf68f256e2a7d715e49605265345c8e63c", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -137,7 +137,7 @@ fn get_relative_to(abs1: path::path, abs2: path::path) -> path::path {\n     }\n \n     let mut path = [];\n-    uint::range(start_idx, len1 - 1u) {|_i| path += [\"..\"]; };\n+    for uint::range(start_idx, len1 - 1u) {|_i| path += [\"..\"]; };\n \n     path += vec::slice(split2, start_idx, len2 - 1u);\n "}, {"sha": "5a429f6f7d2d11c14edb651625e1501c1506bc92", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -840,7 +840,7 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: ebml::writer,\n fn create_index<T: copy>(index: [entry<T>], hash_fn: fn@(T) -> uint) ->\n    [@[entry<T>]] {\n     let mut buckets: [@mut [entry<T>]] = [];\n-    uint::range(0u, 256u) {|_i| buckets += [@mut []]; };\n+    for uint::range(0u, 256u) {|_i| buckets += [@mut []]; };\n     for index.each {|elt|\n         let h = hash_fn(elt.val);\n         *buckets[h % 256u] += [elt];"}, {"sha": "9b732d080521e8539c3fd20a9aebe4c9fa787192", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -595,7 +595,7 @@ class liveness {\n \n     fn indices(ln: live_node, op: fn(uint)) {\n         let node_base_idx = self.idx(ln, variable(0u));\n-        uint::range(0u, self.ir.num_vars) { |var_idx|\n+        for uint::range(0u, self.ir.num_vars) { |var_idx|\n             op(node_base_idx + var_idx)\n         }\n     }\n@@ -604,7 +604,7 @@ class liveness {\n                 op: fn(uint, uint)) {\n         let node_base_idx = self.idx(ln, variable(0u));\n         let succ_base_idx = self.idx(succ_ln, variable(0u));\n-        uint::range(0u, self.ir.num_vars) { |var_idx|\n+        for uint::range(0u, self.ir.num_vars) { |var_idx|\n             op(node_base_idx + var_idx, succ_base_idx + var_idx);\n         }\n     }\n@@ -613,7 +613,7 @@ class liveness {\n                   ln: live_node,\n                   test: fn(uint) -> live_node) {\n         let node_base_idx = self.idx(ln, variable(0u));\n-        uint::range(0u, self.ir.num_vars) { |var_idx|\n+        for uint::range(0u, self.ir.num_vars) { |var_idx|\n             let idx = node_base_idx + var_idx;\n             if test(idx).is_valid() {\n                 wr.write_str(\" \");\n@@ -743,7 +743,7 @@ class liveness {\n         // hack to skip the loop unless #debug is enabled:\n         #debug[\"^^ liveness computation results for body %d (entry=%s)\",\n                {\n-                   uint::range(0u, self.ir.num_live_nodes) { |ln_idx|\n+                   for uint::range(0u, self.ir.num_live_nodes) { |ln_idx|\n                        #debug[\"%s\", self.ln_str(live_node(ln_idx))];\n                    }\n                    body.node.id"}, {"sha": "98c5dc567bd483d53e42567216fa93ae92e48154", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -945,7 +945,7 @@ fn trans_crust_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n                 _ {\n                     let llretptr = alloca(bcx, tys.ret_ty);\n                     let n = vec::len(tys.arg_tys);\n-                    uint::range(0u, n) {|i|\n+                    for uint::range(0u, n) {|i|\n                         let llargval = get_param(llwrapfn, i);\n                         store_inbounds(bcx, llargval, llargbundle,\n                                                       [0u, i]);"}, {"sha": "931cd891718812319ddb81263ec3b97210b1024d", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -588,7 +588,7 @@ fn gen_enum_shapes(ccx: @crate_ctxt) -> ValueRef {\n fn gen_resource_shapes(ccx: @crate_ctxt) -> ValueRef {\n     let mut dtors = [];\n     let len = interner::len(ccx.shape_cx.resources);\n-    uint::range(0u, len) {|i|\n+    for uint::range(0u, len) {|i|\n       let ri = interner::get(ccx.shape_cx.resources, i);\n       dtors += [trans::base::get_res_dtor(ccx, ri.did, ri.tps)];\n     }"}, {"sha": "4d85b6700027b5c1e66881068bc68a4d4d1a7bc2", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -73,7 +73,7 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n       }\n       ast_map::node_ctor(_, _, ast_map::res_ctor(_, _, _), _) |\n       ast_map::node_variant(_, _, _) {\n-        uint::range(0u, n_tps) {|n| cx.uses[n] |= use_repr;}\n+        for uint::range(0u, n_tps) {|n| cx.uses[n] |= use_repr;}\n       }\n       ast_map::node_native_item(i@@{node: native_item_fn(_, _), _}, abi, _) {\n         if abi == native_abi_rust_intrinsic {\n@@ -84,7 +84,7 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n               \"get_tydesc\" | \"needs_drop\" { use_tydesc }\n               \"forget\" | \"addr_of\" { 0u }\n             };\n-            uint::range(0u, n_tps) {|n| cx.uses[n] |= flags;}\n+            for uint::range(0u, n_tps) {|n| cx.uses[n] |= flags;}\n         }\n       }\n       ast_map::node_ctor(_, _, ast_map::class_ctor(ctor, _), _){"}, {"sha": "3fdadcda68d661e0fb2d8dbc05fbc6670f68ad41", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -3,7 +3,7 @@ mod kitties {\n class cat {\n   priv {\n     let mut meows : uint;\n-    fn nap() { uint::range(1u, 10000u) {|_i|}}\n+    fn nap() { for uint::range(1u, 10000u) {|_i|}}\n   }\n \n   let how_hungry : int;"}, {"sha": "79fe5eeb1799eaa855e19377c3892b9102d98310", "filename": "src/test/bench/core-vec-append.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-vec-append.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -6,15 +6,15 @@ import io::writer_util;\n \n fn collect_raw(num: uint) -> [uint] {\n     let mut result = [];\n-    uint::range(0u, num) { |i|\n+    for uint::range(0u, num) { |i|\n         result += [i];\n     }\n     ret result;\n }\n \n fn collect_dvec(num: uint) -> [mut uint] {\n     let result = dvec();\n-    uint::range(0u, num) { |i|\n+    for uint::range(0u, num) { |i|\n         result.push(i);\n     }\n     ret dvec::unwrap(result);"}, {"sha": "aaeb070ce346435307b0083f4bc06fb9c58ef5ef", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -38,11 +38,11 @@ fn run(args: [str]) {\n     let start = std::time::precise_time_s();\n     let to_child = to_child;\n     let mut worker_results = [];\n-    uint::range(0u, workers) {|_i|\n+    for uint::range(0u, workers) {|_i|\n         let builder = task::builder();\n         worker_results += [task::future_result(builder)];\n         task::run(builder) {||\n-            uint::range(0u, size / workers) {|_i|\n+            for uint::range(0u, size / workers) {|_i|\n                 comm::send(to_child, bytes(100u));\n             }\n         };"}, {"sha": "0c11a46c67bd45ef00c3b2411992ceee8e2ee1ab", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -46,7 +46,7 @@ fn make_random_fasta(id: str, desc: str, genelist: [aminoacids], n: int) {\n     log(debug, \">\" + id + \" \" + desc);\n     let rng = @{mut last: std::rand::rng().next()};\n     let mut op: str = \"\";\n-    uint::range(0u, n as uint) {|_i|\n+    for uint::range(0u, n as uint) {|_i|\n         str::push_char(op, select_random(myrandom_next(rng, 100u32),\n                                          genelist));\n         if str::len(op) >= LINE_LENGTH() {\n@@ -61,7 +61,7 @@ fn make_repeat_fasta(id: str, desc: str, s: str, n: int) unsafe {\n     log(debug, \">\" + id + \" \" + desc);\n     let mut op: str = \"\";\n     let sl: uint = str::len(s);\n-    uint::range(0u, n as uint) {|i|\n+    for uint::range(0u, n as uint) {|i|\n         str::unsafe::push_byte(op, s[i % sl]);\n         if str::len(op) >= LINE_LENGTH() {\n             log(debug, op);"}, {"sha": "c48e229e4d21f28473721ee0b989e3efd0e84491", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -69,7 +69,7 @@ fn chanmb(i: uint, size: uint, ch: comm::chan<line>) -> ()\n     let incr = 2./(size as f64);\n     let y = incr*(i as f64) - 1.;\n     let xincr = 8.*incr;\n-    uint::range(0_u, size/8_u) {\n+    for uint::range(0_u, size/8_u) {\n         |j|\n         let x = {re: xincr*(j as f64) - 1.5, im: y};\n         crv += [fillbyte(x, incr)];\n@@ -161,7 +161,7 @@ fn main(args: [str]) {\n         writer(path, writech, size);\n     };\n     let ch = comm::recv(writep);\n-    uint::range(0_u, size) {|j|\n+    for uint::range(0_u, size) {|j|\n         task::spawn {|| chanmb(j, size, ch);};\n         if j % yieldevery == 0_u {\n             #debug(\"Y %u\", j);"}, {"sha": "bb922c93e612927595ce010bf7cfc56f696e3a0c", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -70,7 +70,7 @@ fn stress_task(&&id: int) {\n \n fn stress(num_tasks: int) {\n     let mut results = [];\n-    range(0, num_tasks) {|i|\n+    for range(0, num_tasks) {|i|\n         let builder = task::builder();\n         results += [task::future_result(builder)];\n         task::run(builder) {|| stress_task(i); }\n@@ -99,8 +99,8 @@ fn main(args: [str]) {\n \n         let out = io::stdout();\n \n-        range(1, max + 1) {|n|\n-            range(0, num_trials) {|i|\n+        for range(1, max + 1) {|n|\n+            for range(0, num_trials) {|i|\n                 let start = time::precise_time_ns();\n                 let fibn = fib(n);\n                 let stop = time::precise_time_ns();"}, {"sha": "580a40637483983cce5577c29a45bfca44234e0a", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -8,7 +8,7 @@ fn start(+token: int) {\n \n     let p = comm::port();\n     let mut ch = comm::chan(p);\n-    int::range(2, n_threads + 1) { |i|\n+    for int::range(2, n_threads + 1) { |i|\n         let id = n_threads + 2 - i;\n         let to_child = task::spawn_listener::<int> {|p, copy ch|\n             roundtrip(id, p, ch)"}, {"sha": "cd056594ba6ffcbdbc3dac5eb48c5fba8d3f46d6", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -6,13 +6,13 @@ import std::smallintmap::{smallintmap, map};\n import io::writer_util;\n \n fn append_sequential(min: uint, max: uint, map: smallintmap<uint>) {\n-    uint::range(min, max) { |i|\n+    for uint::range(min, max) { |i|\n         map.insert(i, i + 22u);\n     }\n }\n \n fn check_sequential(min: uint, max: uint, map: smallintmap<uint>) {\n-    uint::range(min, max) { |i|\n+    for uint::range(min, max) { |i|\n         assert map.get(i) == i + 22u;\n     }\n }\n@@ -31,7 +31,7 @@ fn main(args: [str]) {\n     let mut checkf = 0.0;\n     let mut appendf = 0.0;\n \n-    uint::range(0u, rep) {|_r|\n+    for uint::range(0u, rep) {|_r|\n         let map = smallintmap::mk();\n         let start = std::time::precise_time_s();\n         append_sequential(0u, max, map);"}, {"sha": "082b93d2e0c932f1facebcbc55fd0196b73c03cc", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -51,7 +51,7 @@ fn solve_grid(g: grid_t) {\n         if start_color < 10u8 {\n             // colors not yet used\n             let avail = bitv::bitv(10u, false);\n-            u8::range(start_color, 10u8) { |color|\n+            for u8::range(start_color, 10u8) { |color|\n                 bitv::set(avail, color as uint, true);\n             }\n \n@@ -81,22 +81,22 @@ fn solve_grid(g: grid_t) {\n \n         let it = bind drop_color(g, avail, _, _);\n \n-        u8::range(0u8, 9u8) { |idx|\n+        for u8::range(0u8, 9u8) { |idx|\n             it(idx, col); /* check same column fields */\n             it(row, idx); /* check same row fields */\n         }\n \n         // check same block fields\n         let row0 = (row / 3u8) * 3u8;\n         let col0 = (col / 3u8) * 3u8;\n-        u8::range(row0, row0 + 3u8) { |alt_row|\n-            u8::range(col0, col0 + 3u8) { |alt_col| it(alt_row, alt_col); }\n+        for u8::range(row0, row0 + 3u8) { |alt_row|\n+            for u8::range(col0, col0 + 3u8) { |alt_col| it(alt_row, alt_col); }\n         }\n     }\n \n     let mut work: [(u8, u8)] = []; /* queue of uncolored fields */\n-    u8::range(0u8, 9u8) { |row|\n-        u8::range(0u8, 9u8) { |col|\n+    for u8::range(0u8, 9u8) { |row|\n+        for u8::range(0u8, 9u8) { |col|\n             let color = (*g)[row][col];\n             if color == 0u8 { work += [(row, col)]; }\n         }\n@@ -119,9 +119,9 @@ fn solve_grid(g: grid_t) {\n }\n \n fn write_grid(f: io::writer, g: grid_t) {\n-    u8::range(0u8, 9u8) { |row|\n+    for u8::range(0u8, 9u8) { |row|\n         f.write_str(#fmt(\"%u\", (*g)[row][0] as uint));\n-        u8::range(1u8, 9u8) { |col|\n+        for u8::range(1u8, 9u8) { |col|\n             f.write_str(#fmt(\" %u\", (*g)[row][col] as uint));\n         }\n         f.write_char('\\n');"}, {"sha": "ecebd119722020ab15fbd4369505983de89339ea", "filename": "src/test/bench/task-perf-vector-party.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -4,7 +4,7 @@\n // allocating and freeing vectors.\n \n fn f(&&n: uint) {\n-    uint::range(0u, n) {|i|\n+    for uint::range(0u, n) {|i|\n         let mut v: [u8] = [];\n         vec::reserve(v, 1000u);\n     }\n@@ -19,5 +19,5 @@ fn main(args: [str]) {\n         args\n     };\n     let n = uint::from_str(args[1]).get();\n-    uint::range(0u, 100u) {|i| task::spawn {|| f(n); };}\n+    for uint::range(0u, 100u) {|i| task::spawn {|| f(n); };}\n }"}, {"sha": "def99033e5ef902fcb72e2df920690ea6dd3c467", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -65,7 +65,7 @@ fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n fn loop_in_block() {\n     let mut v = ~3, w = ~4;\n     let mut _x = &mut w;\n-    uint::range(0u, 10u) {|_i|\n+    for uint::range(0u, 10u) {|_i|\n         borrow(v); //! ERROR loan of mutable upvar as immutable conflicts with prior loan\n         _x = &mut v; //! NOTE prior loan as mutable granted here\n     }"}, {"sha": "c96fc5273779bb51a28a59ebf64eaf8b115eccdf", "filename": "src/test/compile-fail/issue-1965.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fcompile-fail%2Fissue-1965.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Fcompile-fail%2Fissue-1965.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1965.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -3,5 +3,5 @@ fn test(-x: uint) {}\n \n fn main() {\n     let i = 3u;\n-    uint::range(0u, 10u) {|_x| test(i)}\n+    for uint::range(0u, 10u) {|_x| test(i)}\n }\n\\ No newline at end of file"}, {"sha": "ad6f9feafc37cc4f569204c3376cf92a5ad5c85d", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -17,7 +17,7 @@ fn main() {\n \n     let map = map::hashmap(hash, eq);\n     let mut arr = [];\n-    uint::range(0u, 10u) {|i|\n+    for uint::range(0u, 10u) {|i|\n         arr += [@\"key stuff\"];\n         map.insert(arr, arr + [@\"value stuff\"]);\n     }"}, {"sha": "84bc53ac807fea2f8b7855bc153cf8f35cfcb695", "filename": "src/test/run-pass/class-cast-to-iface-multiple-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface-multiple-types.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -51,7 +51,7 @@ class cat implements noisy {\n }\n \n fn annoy_neighbors<T: noisy>(critter: T) {\n-  uint::range(0u, 10u) {|i| critter.speak(); }\n+  for uint::range(0u, 10u) {|i| critter.speak(); }\n }\n \n fn main() {"}, {"sha": "a8a08eabc932fe9e33ac4527a561285d536130bc", "filename": "src/test/run-pass/class-impl-parameterized-iface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-iface.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -61,7 +61,7 @@ class cat implements map<int, bool> {\n \n fn main() {\n   let nyan : cat = cat(0, 2, \"nyan\");\n-  uint::range(1u, 5u) {|_i| nyan.speak(); }\n+  for uint::range(1u, 5u) {|_i| nyan.speak(); }\n   // cat returns true if uint input is greater than\n   // the number of meows so far\n   assert(nyan.get(1));"}, {"sha": "62f8cdb39f8da1166f1acaecf32b8e8120255e2e", "filename": "src/test/run-pass/class-implement-iface-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fclass-implement-iface-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fclass-implement-iface-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-iface-cross-crate.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -40,6 +40,6 @@ fn main() {\n   let nyan = cat(0u, 2, \"nyan\");\n   nyan.eat();\n   assert(!nyan.eat());\n-  uint::range(1u, 10u, {|_i| nyan.speak(); });\n+  for uint::range(1u, 10u) {|_i| nyan.speak(); };\n   assert(nyan.eat());\n }\n\\ No newline at end of file"}, {"sha": "0dcf3c8104abb219b6a50080745b5b67efb456c8", "filename": "src/test/run-pass/class-implement-ifaces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fclass-implement-ifaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fclass-implement-ifaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-ifaces.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -43,6 +43,6 @@ fn main() {\n   let nyan = cat(0u, 2, \"nyan\");\n   nyan.eat();\n   assert(!nyan.eat());\n-  uint::range(1u, 10u, {|_i| make_speak(nyan); });\n+  for uint::range(1u, 10u) {|_i| make_speak(nyan); };\n   assert(nyan.eat());\n }\n\\ No newline at end of file"}, {"sha": "44cd125e1963e8f2018bd911d05bf25b58384a06", "filename": "src/test/run-pass/class-implements-multiple-ifaces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-ifaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-ifaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-ifaces.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -84,7 +84,7 @@ class cat implements noisy, scratchy, bitey {\n }\n \n fn annoy_neighbors<T: noisy>(critter: T) {\n-  uint::range(0u, 10u) {|i|\n+  for uint::range(0u, 10u) {|i|\n       let what = critter.speak();\n       #debug(\"%u %d\", i, what);\n   }"}, {"sha": "90407e77678ff02fba1aae2cf2e674f94e48d6f6", "filename": "src/test/run-pass/classes-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -7,6 +7,6 @@ fn main() {\n   let nyan = cat(0u, 2, \"nyan\");\n   nyan.eat();\n   assert(!nyan.eat());\n-  uint::range(1u, 10u, {|_i| nyan.speak(); });\n+  for uint::range(1u, 10u) {|_i| nyan.speak(); };\n   assert(nyan.eat());\n }\n\\ No newline at end of file"}, {"sha": "a8eaca96ac56d00e1beddae04135eea286807047", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -35,6 +35,6 @@ fn main() {\n   let nyan = cat(0u, 2, \"nyan\");\n   nyan.eat();\n   assert(!nyan.eat());\n-  uint::range(1u, 10u, {|_i| nyan.speak(); });\n+  for uint::range(1u, 10u) {|_i| nyan.speak(); };\n   assert(nyan.eat());\n }\n\\ No newline at end of file"}, {"sha": "34ad5a1ce3d1c4ded3be6af795db24d37ad90a4d", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -28,8 +28,16 @@ fn foldl<A,B,IA:iterable<A>>(self: IA, +b0: B, blk: fn(B, A) -> B) -> B {\n     ret b;\n }\n \n+fn range(lo: uint, hi: uint, it: fn(uint)) {\n+    let mut i = lo;\n+    while i < hi {\n+        it(i);\n+        i += 1u;\n+    }\n+}\n+\n fn main() {\n-    let range = bind uint::range(0u, 1000u, _);\n+    let range = bind range(0u, 1000u, _);\n     let filt = bind filter(\n         range,\n         {|&&n: uint| n % 3u != 0u && n % 5u != 0u },"}, {"sha": "820fe715b39ee937bb38846cbe9ed719b752aed7", "filename": "src/test/run-pass/lots-a-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flots-a-fail.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -13,7 +13,7 @@ fn iloop() {\n }\n \n fn main() {\n-    uint::range(0u, 100u) {|_i|\n+    for uint::range(0u, 100u) {|_i|\n         let builder = task::builder();\n         task::unsupervise(builder);\n         task::run(builder) {|| iloop(); };"}, {"sha": "a642b194aec762a0d8cb9019292160ce9de77529", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -10,7 +10,7 @@ fn test(x: bool, foo: ~{x: int, y: int, z: int}) -> int {\n \n fn main() {\n     let x = ~{x: 1, y: 2, z: 3};\n-    uint::range(0u, 10000u) {|_i|\n+    for uint::range(0u, 10000u) {|_i|\n         assert (test(true, x) == 2);\n     }\n     assert (test(false, x) == 5);"}, {"sha": "2e7c30dcf5dc4b9810bddbede8c2ae39ef9c015e", "filename": "src/test/run-pass/move-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fmove-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fmove-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -10,7 +10,7 @@ fn test(x: bool, foo: @{x: int, y: int, z: int}) -> int {\n \n fn main() {\n     let x = @{x: 1, y: 2, z: 3};\n-    uint::range(0u, 10000u) {|i|\n+    for uint::range(0u, 10000u) {|i|\n         assert (test(true, x) == 2);\n     }\n     assert (test(false, x) == 5);"}, {"sha": "a2f008660fd2bf5e0caaf6dac066b04de71891b9", "filename": "src/test/run-pass/pattern-bound-var-in-for-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -6,7 +6,7 @@ fn foo(src: uint) {\n \n     alt some(src) {\n       some(src_id) {\n-        uint::range(0u, 10u) {|i|\n+        for uint::range(0u, 10u) {|i|\n             let yyy = src_id;\n             assert (yyy == 0u);\n         }"}, {"sha": "cb14fd537b8927513c40e1425c2253eff292bf40", "filename": "src/test/run-pass/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-method.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -1,7 +1,7 @@\n class cat {\n   priv {\n     let mut meows : uint;\n-    fn nap() { uint::range(1u, 10u) {|_i|}}\n+    fn nap() { for uint::range(1u, 10u) {|_i|}}\n   }\n \n   let how_hungry : int;"}, {"sha": "b35927529fb57e0a1bb9f4f9b67867d523a3b772", "filename": "src/test/run-pass/rt-circular-buffer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -32,7 +32,7 @@ fn test_init() {\n fn test_grow() {\n     let myport = port();\n     let mychan = chan(myport);\n-    uint::range(0u, 100u) {|i|\n+    for uint::range(0u, 100u) {|i|\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n         comm::send(mychan, val);\n     }\n@@ -50,19 +50,19 @@ fn test_shrink1() {\n fn test_shrink2() {\n     let myport = port();\n     let mychan = chan(myport);\n-    uint::range(0u, 100u) {|_i|\n+    for uint::range(0u, 100u) {|_i|\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n         send(mychan, val);\n     }\n-    uint::range(0u, 100u) {|_i| let x = recv(myport); }\n+    for uint::range(0u, 100u) {|_i| let x = recv(myport); }\n }\n \n \n // Test rotating the buffer when the unit size is not a power of two\n fn test_rotate() {\n     let myport = port();\n     let mychan = chan(myport);\n-    uint::range(0u, 100u) {|i|\n+    for uint::range(0u, 100u) {|i|\n         let val = {val1: i as u32, val2: i as u32, val3: i as u32};\n         send(mychan, val);\n         let x = recv(myport);\n@@ -78,13 +78,13 @@ fn test_rotate() {\n fn test_rotate_grow() {\n     let myport = port::<record>();\n     let mychan = chan(myport);\n-    uint::range(0u, 10u) {|j|\n-        uint::range(0u, 10u) {|i|\n+    for uint::range(0u, 10u) {|j|\n+        for uint::range(0u, 10u) {|i|\n             let val: record =\n                 {val1: i as u32, val2: i as u32, val3: i as u32};\n             send(mychan, val);\n         }\n-        uint::range(0u, 10u) {|i|\n+        for uint::range(0u, 10u) {|i|\n             let x = recv(myport);\n             assert (x.val1 == i as u32);\n             assert (x.val2 == i as u32);"}, {"sha": "904eef7a2e8bdc007374c4c138f5e8b96e853202", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -21,7 +21,7 @@ fn iloop() {\n }\n \n fn main() {\n-    uint::range(0u, 16u) {|_i|\n+    for uint::range(0u, 16u) {|_i|\n         let builder = task::builder();\n         task::unsupervise(builder);\n         task::run(builder) {|| iloop(); }"}, {"sha": "7c32b978ae8cf7d93e314ecd749c42a1c814cd8c", "filename": "src/test/run-pass/task-comm-chan-cleanup4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup4.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -7,13 +7,13 @@ import task;\n // results in the string not being freed\n \n fn starship(&&ch: comm::chan<str>) {\n-    int::range(0, 10) { |_i|\n+    for int::range(0, 10) { |_i|\n         comm::send(ch, \"pew pew\");\n     }\n }\n \n fn starbase() {\n-    int::range(0, 10) { |_i|\n+    for int::range(0, 10) { |_i|\n         let p = comm::port();\n         let c = comm::chan(p);\n         task::spawn {|| starship(c);};\n@@ -22,7 +22,7 @@ fn starbase() {\n }\n \n fn main() {\n-    int::range(0, 10) { |_i|\n+    for int::range(0, 10) { |_i|\n         task::spawn {|| starbase();};\n     }\n }\n\\ No newline at end of file"}, {"sha": "9fce7de19c43da21db21673473bc35a6446bc1d3", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432c6cbde93ca525cc33fd17873a0557dffa07c5/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=432c6cbde93ca525cc33fd17873a0557dffa07c5", "patch": "@@ -12,13 +12,13 @@ fn main() {\n     let ch = comm::chan(p);\n     let n = 100u;\n     let mut expected = 0u;\n-    uint::range(0u, n) {|i|\n+    for uint::range(0u, n) {|i|\n         task::spawn {|| child(ch, i); };\n         expected += i;\n     }\n \n     let mut actual = 0u;\n-    uint::range(0u, n) {|_i|\n+    for uint::range(0u, n) {|_i|\n         let j = comm::recv(p);\n         actual += *j;\n     }"}]}