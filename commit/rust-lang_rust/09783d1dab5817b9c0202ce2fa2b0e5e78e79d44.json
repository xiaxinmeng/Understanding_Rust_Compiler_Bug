{"sha": "09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NzgzZDFkYWI1ODE3YjljMDIwMmNlMmZhMmIwZTVlNzhlNzlkNDQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-12T15:27:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-28T10:15:24Z"}, "message": "Update test files; mostly the problem is that they were using the\nexplicit form `Fn<A,B>` and now should use `Fn(A) -> B` or\n`Fn<A,Output=B>`, but in some cases we get duplicate error\nreports. This is mildly annoying and arises because of the main error\nand another error from the projection. Might be worth squashing those,\nbut seems like a separate problem.", "tree": {"sha": "b78386d9e2ae3bb4eb23f58c79ca0a1820cb22da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b78386d9e2ae3bb4eb23f58c79ca0a1820cb22da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "html_url": "https://github.com/rust-lang/rust/commit/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac94ae5883dd4efecebd9b5fece770910637b988", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac94ae5883dd4efecebd9b5fece770910637b988", "html_url": "https://github.com/rust-lang/rust/commit/ac94ae5883dd4efecebd9b5fece770910637b988"}], "stats": {"total": 327, "additions": 201, "deletions": 126}, "files": [{"sha": "04d73cc36f04cb2fd1d23945973a45c0a0aebd1c", "filename": "src/test/compile-fail/borrowck-overloaded-call.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -17,7 +17,9 @@ struct SFn {\n     y: isize,\n }\n \n-impl Fn<(isize,),isize> for SFn {\n+impl Fn<(isize,)> for SFn {\n+    type Output = isize;\n+\n     extern \"rust-call\" fn call(&self, (z,): (isize,)) -> isize {\n         self.x * self.y * z\n     }\n@@ -28,7 +30,9 @@ struct SFnMut {\n     y: isize,\n }\n \n-impl FnMut<(isize,),isize> for SFnMut {\n+impl FnMut<(isize,)> for SFnMut {\n+    type Output = isize;\n+\n     extern \"rust-call\" fn call_mut(&mut self, (z,): (isize,)) -> isize {\n         self.x * self.y * z\n     }\n@@ -38,7 +42,9 @@ struct SFnOnce {\n     x: String,\n }\n \n-impl FnOnce<(String,),usize> for SFnOnce {\n+impl FnOnce<(String,)> for SFnOnce {\n+    type Output = usize;\n+\n     extern \"rust-call\" fn call_once(self, (z,): (String,)) -> usize {\n         self.x.len() + z.len()\n     }"}, {"sha": "db3373ea02772285a8300795963091b2e992609b", "filename": "src/test/compile-fail/extern-wrong-value-type.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -16,5 +16,7 @@ fn is_fn<F>(_: F) where F: Fn() {}\n fn main() {\n     // extern functions are extern \"C\" fn\n     let _x: extern \"C\" fn() = f; // OK\n-    is_fn(f); //~ ERROR the trait `core::ops::Fn()` is not implemented for the type `extern \"C\" fn()\n+    is_fn(f);\n+    //~^ ERROR the trait `core::ops::Fn<()>` is not implemented for the type `extern \"C\" fn()\n+    //~| ERROR the trait `core::ops::Fn<()>` is not implemented for the type `extern \"C\" fn()\n }"}, {"sha": "e5e5ddadafccf8014d09b675f53a1b093c896e4c", "filename": "src/test/compile-fail/feature-gate-unboxed-closures-manual-impls.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-manual-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-manual-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-manual-impls.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -8,18 +8,38 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that manual impls of the `Fn` traits are not possible without\n+// a feature gate. In fact, the specialized check for these cases\n+// never triggers (yet), because they encounter other problems around\n+// angle bracket vs parentheses notation.\n+\n #![allow(dead_code)]\n \n struct Foo;\n-impl Fn() for Foo { //~ ERROR manual implementations of `Fn` are experimental\n+impl Fn<()> for Foo {\n+    //~^ ERROR angle-bracket notation is not stable when used with the `Fn` family of traits\n+    type Output = ();\n+\n+    extern \"rust-call\" fn call(&self, args: ()) -> () {}\n+}\n+struct Foo1;\n+impl Fn() for Foo1 {\n+    //~^ ERROR associated type bindings are not allowed here\n+\n     extern \"rust-call\" fn call(&self, args: ()) -> () {}\n }\n struct Bar;\n-impl FnMut() for Bar { //~ ERROR manual implementations of `FnMut` are experimental\n+impl FnMut<()> for Bar {\n+    //~^ ERROR angle-bracket notation is not stable when used with the `Fn` family of traits\n+    type Output = ();\n+\n     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n }\n struct Baz;\n-impl FnOnce() for Baz { //~ ERROR manual implementations of `FnOnce` are experimental\n+impl FnOnce<()> for Baz {\n+    //~^ ERROR angle-bracket notation is not stable when used with the `Fn` family of traits\n+    type Output = ();\n+\n     extern \"rust-call\" fn call_once(&self, args: ()) -> () {}\n }\n "}, {"sha": "460e05c8438cde27612d43a109ee762b1026e1c7", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -34,5 +34,7 @@ fn main() {\n     //~| expected ()\n     //~| found box\n \n-    needs_fn(1is); //~ ERROR `core::ops::Fn(isize) -> isize`\n+    needs_fn(1is);\n+    //~^ ERROR `core::ops::Fn<(isize,)>`\n+    //~| ERROR `core::ops::Fn<(isize,)>`\n }"}, {"sha": "977586483b031568c4f2ef08230daa3975b35aad", "filename": "src/test/compile-fail/issue-15094.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -16,7 +16,9 @@ struct Debuger<T> {\n     x: T\n }\n \n-impl<T: fmt::Debug> ops::Fn<(), ()> for Debuger<T> {\n+impl<T: fmt::Debug> ops::Fn<(),> for Debuger<T> {\n+    type Output = ();\n+\n     fn call(&self, _args: ()) {\n //~^ ERROR `call` has an incompatible type for trait: expected \"rust-call\" fn, found \"Rust\" fn\n         println!(\"{:?}\", self.x);"}, {"sha": "84800218efc9402065b41f21860d6fa1fb5a854c", "filename": "src/test/compile-fail/issue-17545.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Fissue-17545.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Fissue-17545.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17545.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(unboxed_closures)]\n \n-pub fn foo<'a, F: Fn<(&'a (),), ()>>(bar: F) {\n+pub fn foo<'a, F: Fn(&'a ())>(bar: F) {\n     bar.call((\n         &(), //~ ERROR borrowed value does not live long enough\n     ));"}, {"sha": "61752e62abdefe90e80100478f48b9f6c5246bba", "filename": "src/test/compile-fail/overloaded-calls-bad.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -17,7 +17,9 @@ struct S {\n     y: isize,\n }\n \n-impl FnMut<(isize,),isize> for S {\n+impl FnMut<(isize,)> for S {\n+    type Output = isize;\n+\n     extern \"rust-call\" fn call_mut(&mut self, (z,): (isize,)) -> isize {\n         self.x * self.y * z\n     }"}, {"sha": "41ecf7146138dbb8d7ba1503a4d02ce0fe608977", "filename": "src/test/compile-fail/overloaded-calls-nontuple.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-nontuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-nontuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-nontuple.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -17,7 +17,8 @@ struct S {\n     y: isize,\n }\n \n-impl FnMut<isize,isize> for S {\n+impl FnMut<isize> for S {\n+    type Output = isize;\n     extern \"rust-call\" fn call_mut(&mut self, z: isize) -> isize {\n         self.x + self.y + z\n     }"}, {"sha": "2a246124f6f9d5163eadf2b3d0960baa3ec266c2", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-4.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n \n-struct invariant<'a> {\n+struct Invariant<'a> {\n     f: Box<for<'b> FnOnce() -> &'b mut &'a isize + 'static>,\n }\n \n-fn to_same_lifetime<'r>(bi: invariant<'r>) {\n-    let bj: invariant<'r> = bi;\n+fn to_same_lifetime<'r>(bi: Invariant<'r>) {\n+    let bj: Invariant<'r> = bi;\n }\n \n-fn to_longer_lifetime<'r>(bi: invariant<'r>) -> invariant<'static> {\n+fn to_longer_lifetime<'r>(bi: Invariant<'r>) -> Invariant<'static> {\n     bi //~ ERROR mismatched types\n }\n "}, {"sha": "3536244f011654d482dc5f8544e5f01fa7e1a796", "filename": "src/test/compile-fail/unboxed-closure-feature-gate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-feature-gate.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -11,7 +11,8 @@\n // Check that parenthetical notation is feature-gated except with the\n // `Fn` traits.\n \n-trait Foo<A,R> {\n+trait Foo<A> {\n+    type Output;\n }\n \n fn main() {"}, {"sha": "870377bc1add760e811680f0e3e4740bbe549d6d", "filename": "src/test/compile-fail/unboxed-closure-sugar-default.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -14,8 +14,9 @@\n #![feature(unboxed_closures)]\n #![allow(dead_code)]\n \n-trait Foo<T,U,V=T> {\n-    fn dummy(&self, t: T, u: U, v: V);\n+trait Foo<T,V=T> {\n+    type Output;\n+    fn dummy(&self, t: T, v: V);\n }\n \n trait Eq<X: ?Sized> { }\n@@ -24,14 +25,14 @@ fn eq<A: ?Sized,B: ?Sized>() where A : Eq<B> { }\n \n fn test<'a,'b>() {\n     // Parens are equivalent to omitting default in angle.\n-    eq::< Foo<(isize,),()>,               Foo(isize)                      >();\n+    eq::< Foo<(isize,),Output=()>,                   Foo(isize)                      >();\n \n     // In angle version, we supply something other than the default\n-    eq::< Foo<(isize,),(),isize>,           Foo(isize)                      >();\n+    eq::< Foo<(isize,),isize,Output=()>,      Foo(isize)                      >();\n     //~^ ERROR not implemented\n \n     // Supply default explicitly.\n-    eq::< Foo<(isize,),(),(isize,)>,        Foo(isize)                      >();\n+    eq::< Foo<(isize,),(isize,),Output=()>,   Foo(isize)                      >();\n }\n \n fn main() { }"}, {"sha": "dc5576aee650a56ed814b9bbcd9abc09d5f24723", "filename": "src/test/compile-fail/unboxed-closure-sugar-equiv.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -16,8 +16,9 @@\n #![feature(unboxed_closures)]\n #![allow(dead_code)]\n \n-trait Foo<T,U> {\n-    fn dummy(&self, t: T, u: U);\n+trait Foo<T> {\n+    type Output;\n+    fn dummy(&self, t: T, u: Self::Output);\n }\n \n trait Eq<X: ?Sized> { }\n@@ -26,31 +27,32 @@ fn eq<A: ?Sized,B: ?Sized +Eq<A>>() { }\n \n fn test<'a,'b>() {\n     // No errors expected:\n-    eq::< Foo<(),()>,                   Foo()                         >();\n-    eq::< Foo<(isize,),()>,               Foo(isize)                      >();\n-    eq::< Foo<(isize,usize),()>,           Foo(isize,usize)                 >();\n-    eq::< Foo<(isize,usize),usize>,         Foo(isize,usize) -> usize         >();\n-    eq::< Foo<(&'a isize,&'b usize),usize>, Foo(&'a isize,&'b usize) -> usize >();\n+    eq::< Foo<(),Output=()>,                       Foo()                         >();\n+    eq::< Foo<(isize,),Output=()>,                 Foo(isize)                      >();\n+    eq::< Foo<(isize,usize),Output=()>,            Foo(isize,usize)                 >();\n+    eq::< Foo<(isize,usize),Output=usize>,         Foo(isize,usize) -> usize         >();\n+    eq::< Foo<(&'a isize,&'b usize),Output=usize>, Foo(&'a isize,&'b usize) -> usize >();\n \n     // Test that anonymous regions in `()` form are equivalent\n     // to fresh bound regions, and that we can intermingle\n     // named and anonymous as we choose:\n-    eq::< for<'x,'y> Foo<(&'x isize,&'y usize),usize>,\n+    eq::< for<'x,'y> Foo<(&'x isize,&'y usize),Output=usize>,\n           for<'x,'y> Foo(&'x isize,&'y usize) -> usize            >();\n-    eq::< for<'x,'y> Foo<(&'x isize,&'y usize),usize>,\n+    eq::< for<'x,'y> Foo<(&'x isize,&'y usize),Output=usize>,\n           for<'x> Foo(&'x isize,&usize) -> usize                  >();\n-    eq::< for<'x,'y> Foo<(&'x isize,&'y usize),usize>,\n+    eq::< for<'x,'y> Foo<(&'x isize,&'y usize),Output=usize>,\n           for<'y> Foo(&isize,&'y usize) -> usize                  >();\n-    eq::< for<'x,'y> Foo<(&'x isize,&'y usize),usize>,\n+    eq::< for<'x,'y> Foo<(&'x isize,&'y usize),Output=usize>,\n           Foo(&isize,&usize) -> usize                             >();\n \n     // lifetime elision\n-    eq::< for<'x> Foo<(&'x isize,), &'x isize>,\n+    eq::< for<'x> Foo<(&'x isize,), Output=&'x isize>,\n           Foo(&isize) -> &isize                                   >();\n \n     // Errors expected:\n-    eq::< Foo<(),()>,                   Foo(char)                     >();\n-    //~^ ERROR not implemented\n+    eq::< Foo<(),Output=()>,\n+          Foo(char)                                               >();\n+    //~^^ ERROR not implemented\n }\n \n fn main() { }"}, {"sha": "d2f781bba11eaa3d30d8c5121d05480a90540425", "filename": "src/test/compile-fail/unboxed-closure-sugar-lifetime-elision.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-lifetime-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-lifetime-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-lifetime-elision.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -16,18 +16,19 @@\n #![feature(unboxed_closures)]\n #![allow(dead_code)]\n \n-trait Foo<T,U> {\n-    fn dummy(&self, t: T, u: U);\n+trait Foo<T> {\n+    type Output;\n+    fn dummy(&self, t: T);\n }\n \n trait Eq<X: ?Sized> { }\n impl<X: ?Sized> Eq<X> for X { }\n fn eq<A: ?Sized,B: ?Sized +Eq<A>>() { }\n \n fn main() {\n-    eq::< for<'a> Foo<(&'a isize,), &'a isize>,\n+    eq::< for<'a> Foo<(&'a isize,), Output=&'a isize>,\n           Foo(&isize) -> &isize                                   >();\n-    eq::< for<'a> Foo<(&'a isize,), (&'a isize, &'a isize)>,\n+    eq::< for<'a> Foo<(&'a isize,), Output=(&'a isize, &'a isize)>,\n           Foo(&isize) -> (&isize, &isize)                           >();\n \n     let _: Foo(&isize, &usize) -> &usize; //~ ERROR missing lifetime specifier"}, {"sha": "1f0d5aae36db5abaefa64597eff7537312522474", "filename": "src/test/compile-fail/unboxed-closure-sugar-not-used-on-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-not-used-on-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-not-used-on-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-not-used-on-fn.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -11,11 +11,11 @@\n \n // Test that the `Fn` traits require `()` form without a feature gate.\n \n-fn bar1(x: &Fn<(),()>) {\n+fn bar1(x: &Fn<()>) {\n     //~^ ERROR angle-bracket notation is not stable when used with the `Fn` family\n }\n \n-fn bar2<T>(x: &T) where T: Fn<(),()> {\n+fn bar2<T>(x: &T) where T: Fn<()> {\n     //~^ ERROR angle-bracket notation is not stable when used with the `Fn` family\n }\n "}, {"sha": "75688e44e80761c2758012316a6cb6e655602c8f", "filename": "src/test/compile-fail/unboxed-closure-sugar-region.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -17,8 +17,9 @@\n \n use std::marker;\n \n-trait Foo<'a,T,U> {\n-    fn dummy(&'a self) -> &'a (T,U);\n+trait Foo<'a,T> {\n+    type Output;\n+    fn dummy(&'a self) -> &'a (T,Self::Output);\n }\n \n trait Eq<X: ?Sized> { }\n@@ -29,16 +30,17 @@ fn same_type<A,B:Eq<A>>(a: A, b: B) { }\n \n fn test<'a,'b>() {\n     // Parens are equivalent to omitting default in angle.\n-    eq::< Foo<(isize,),()>,               Foo(isize)                      >();\n+    eq::< Foo<(isize,),Output=()>,               Foo(isize)                      >();\n \n     // Here we specify 'static explicitly in angle-bracket version.\n     // Parenthesized winds up getting inferred.\n-    eq::< Foo<'static, (isize,),()>,      Foo(isize)                      >();\n+    eq::< Foo<'static, (isize,),Output=()>,      Foo(isize)                      >();\n }\n \n-fn test2(x: &Foo<(isize,),()>, y: &Foo(isize)) {\n+fn test2(x: &Foo<(isize,),Output=()>, y: &Foo(isize)) {\n     // Here, the omitted lifetimes are expanded to distinct things.\n     same_type(x, y) //~ ERROR cannot infer\n+                    //~^ ERROR cannot infer\n }\n \n fn main() { }"}, {"sha": "a3991a87b78f8a1caa47891adc7c43c2c5d3f4ee", "filename": "src/test/compile-fail/unboxed-closure-sugar-used-on-struct-1.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-used-on-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-used-on-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-used-on-struct-1.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -11,13 +11,14 @@\n \n // Test that parentheses form doesn't work with struct types appearing in local variables.\n \n-struct Bar<A,R> {\n-    f: A, r: R\n+struct Bar<A> {\n+    f: A\n }\n \n fn bar() {\n     let x: Box<Bar()> = panic!();\n     //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^^ ERROR associated type bindings are not allowed here\n }\n \n fn main() { }"}, {"sha": "ad85cdcaa03a15246be7261f407f6ab69ce5b4d9", "filename": "src/test/compile-fail/unboxed-closure-sugar-used-on-struct.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-used-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-used-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-used-on-struct.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -10,12 +10,13 @@\n \n // Test that parentheses form doesn't work with struct types appearing in argument types.\n \n-struct Bar<A,R> {\n-    f: A, r: R\n+struct Bar<A> {\n+    f: A\n }\n \n fn foo(b: Box<Bar()>) {\n     //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^^ ERROR associated type bindings are not allowed here\n }\n \n fn main() { }"}, {"sha": "c9837da58e75a1d4a86801075a806d1c873199bf", "filename": "src/test/compile-fail/unboxed-closure-sugar-wrong-number-number-type-parameters-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -12,7 +12,7 @@\n \n trait One<A> { fn foo(&self) -> A; }\n \n-fn foo(_: &One()) //~ ERROR wrong number of type arguments\n+fn foo(_: &One()) //~ ERROR no associated type `Output` defined in `One<()>`\n {}\n \n fn main() { }"}, {"sha": "e63f510b890d7902d248e491a2cb43097f291404", "filename": "src/test/compile-fail/unboxed-closure-sugar-wrong-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -13,7 +13,7 @@\n trait Trait {}\n \n fn f<F:Trait(isize) -> isize>(x: F) {}\n-//~^ ERROR wrong number of type arguments: expected 0, found 2\n+//~^ ERROR wrong number of type arguments: expected 0, found 1\n \n fn main() {}\n "}, {"sha": "bbafd5109edff0b25cbdf00b3ecfae7dd42b280d", "filename": "src/test/compile-fail/unboxed-closures-fnmut-as-fn.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -18,7 +18,9 @@ use std::ops::{Fn,FnMut,FnOnce};\n \n struct S;\n \n-impl FnMut<(isize,),isize> for S {\n+impl FnMut<(isize,)> for S {\n+    type Output = isize;\n+\n     extern \"rust-call\" fn call_mut(&mut self, (x,): (isize,)) -> isize {\n         x * x\n     }\n@@ -29,6 +31,8 @@ fn call_it<F:Fn(isize)->isize>(f: &F, x: isize) -> isize {\n }\n \n fn main() {\n-    let x = call_it(&S, 22); //~ ERROR not implemented\n+    let x = call_it(&S, 22);\n+    //~^ ERROR not implemented\n+    //~| ERROR not implemented\n }\n "}, {"sha": "23f7ee2b0101d78cca2d2db9fcaa4702ac8e33bd", "filename": "src/test/compile-fail/unboxed-closures-unsafe-extern-fn.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -21,7 +21,9 @@ fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n \n fn a() {\n-    let x = call_it(&square, 22); //~ ERROR not implemented\n+    let x = call_it(&square, 22);\n+    //~^ ERROR not implemented\n+    //~| ERROR not implemented\n }\n \n fn b() {"}, {"sha": "305dd33e5a05a950b03280e36cc29675ff027a6b", "filename": "src/test/compile-fail/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -12,13 +12,15 @@\n \n use std::ops::FnMut;\n \n-fn call_it<F:FnMut<(isize,isize),isize>>(y: isize, mut f: F) -> isize {\n+fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n     f(2, y)\n }\n \n pub fn main() {\n     let f = |&mut: x: usize, y: isize| -> isize { (x as isize) + y };\n-    let z = call_it(3, f);  //~ ERROR type mismatch\n+    let z = call_it(3, f);\n+    //~^ ERROR type mismatch\n+    //~| ERROR type mismatch\n     println!(\"{}\", z);\n }\n "}, {"sha": "96619bef36fd5fb400deeec4c343351183b7e74a", "filename": "src/test/compile-fail/unboxed-closures-wrong-abi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -21,7 +21,9 @@ fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n \n fn a() {\n-    let x = call_it(&square, 22); //~ ERROR not implemented\n+    let x = call_it(&square, 22);\n+    //~^ ERROR not implemented\n+    //~| ERROR not implemented\n }\n \n fn b() {"}, {"sha": "ebcbdbbc006df83585ba4d02dad8817285a1109d", "filename": "src/test/compile-fail/unboxed-closures-wrong-arg-type-extern-fn.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -22,7 +22,9 @@ fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n \n fn a() {\n-    let x = call_it(&square, 22); //~ ERROR not implemented\n+    let x = call_it(&square, 22);\n+    //~^ ERROR not implemented\n+    //~| ERROR not implemented\n }\n \n fn b() {"}, {"sha": "2ada0dd22e75f4a160cdbc28aa8972a451b6cac5", "filename": "src/test/compile-fail/unboxed-closures-wrong-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-trait.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -18,5 +18,6 @@ fn main() {\n     let z: isize = 7;\n     assert_eq!(c(|&mut: x: isize, y| x + y + z), 10);\n     //~^ ERROR not implemented\n+    //~| ERROR not implemented\n }\n "}, {"sha": "fae83d4aa6563632eca12028ad420553141ded4e", "filename": "src/test/run-pass/bare-fn-implements-fn-mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fbare-fn-implements-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fbare-fn-implements-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbare-fn-implements-fn-mut.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -12,15 +12,15 @@\n \n use std::ops::FnMut;\n \n-fn call_f<F:FnMut<(),()>>(mut f: F) {\n+fn call_f<F:FnMut()>(mut f: F) {\n     f();\n }\n \n fn f() {\n     println!(\"hello\");\n }\n \n-fn call_g<G:FnMut<(String,String),String>>(mut g: G, x: String, y: String)\n+fn call_g<G:FnMut(String,String) -> String>(mut g: G, x: String, y: String)\n           -> String {\n     g(x, y)\n }"}, {"sha": "d5307c09103a1351c01d24a2e5a71bd3658c9a7f", "filename": "src/test/run-pass/hrtb-parse.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -22,23 +22,23 @@ trait Get<A,R> {\n // Parse HRTB with explicit `for` in a where-clause:\n \n fn foo00<T>(t: T)\n-    where T : for<'a> Get<&'a int, &'a int>\n+    where T : for<'a> Get<&'a i32, &'a i32>\n {\n }\n \n-fn foo01<T: for<'a> Get<&'a int, &'a int>>(t: T)\n+fn foo01<T: for<'a> Get<&'a i32, &'a i32>>(t: T)\n {\n }\n \n // Parse HRTB with explicit `for` in various sorts of types:\n \n-fn foo10(t: Box<for<'a> Get<int, int>>) { }\n-fn foo11(t: Box<for<'a> Get(int) -> int>) { }\n+fn foo10(t: Box<for<'a> Get<i32, i32>>) { }\n+fn foo11(t: Box<for<'a> Fn(i32) -> i32>) { }\n \n-fn foo20(t: for<'a> fn(int) -> int) { }\n-fn foo21(t: for<'a> unsafe fn(int) -> int) { }\n-fn foo22(t: for<'a> extern \"C\" fn(int) -> int) { }\n-fn foo23(t: for<'a> unsafe extern \"C\" fn(int) -> int) { }\n+fn foo20(t: for<'a> fn(i32) -> i32) { }\n+fn foo21(t: for<'a> unsafe fn(i32) -> i32) { }\n+fn foo22(t: for<'a> extern \"C\" fn(i32) -> i32) { }\n+fn foo23(t: for<'a> unsafe extern \"C\" fn(i32) -> i32) { }\n \n fn main() {\n }"}, {"sha": "1b62a8e809c89dd2b4842ab4a96372f6a6ddbe5d", "filename": "src/test/run-pass/hrtb-trait-object-paren-notation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-paren-notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-paren-notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-paren-notation.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -16,7 +16,7 @@ trait FnLike<A,R> {\n     fn call(&self, arg: A) -> R;\n }\n \n-type FnObject<'b> = for<'a> FnLike(&'a int) -> (&'a int) + 'b;\n+type FnObject<'b> = for<'a> FnLike<(&'a i32,), &'a i32> + 'b;\n \n struct Identity;\n "}, {"sha": "81a8b29461c78a6a82abfa9ea8ec0a032ea79ac2", "filename": "src/test/run-pass/issue-13655.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fissue-13655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fissue-13655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13655.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -13,7 +13,8 @@ use std::ops::Fn;\n \n struct Foo<T>(T);\n \n-impl<T: Copy> Fn<(), T> for Foo<T> {\n+impl<T: Copy> Fn<()> for Foo<T> {\n+    type Output = T;\n     extern \"rust-call\" fn call(&self, _: ()) -> T {\n       match *self {\n         Foo(t) => t"}, {"sha": "814a743648d3f6b0534f5af80551a326816ae6b3", "filename": "src/test/run-pass/issue-14958.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fissue-14958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fissue-14958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14958.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -14,7 +14,8 @@ trait Foo {}\n \n struct Bar;\n \n-impl<'a> std::ops::Fn<(&'a (Foo+'a),), ()> for Bar {\n+impl<'a> std::ops::Fn<(&'a (Foo+'a),)> for Bar {\n+    type Output = ();\n     extern \"rust-call\" fn call(&self, _: (&'a Foo,)) {}\n }\n "}, {"sha": "33281d7d78ffb178b8bebb99ecf60ccab0eaaf24", "filename": "src/test/run-pass/issue-14959.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fissue-14959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fissue-14959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14959.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -33,7 +33,9 @@ impl Alloy {\n     }\n }\n \n-impl<'a, 'b> Fn<(&'b mut (Response+'b),),()> for SendFile<'a> {\n+impl<'a, 'b> Fn<(&'b mut (Response+'b),)> for SendFile<'a> {\n+    type Output = ();\n+\n     extern \"rust-call\" fn call(&self, (_res,): (&'b mut (Response+'b),)) {}\n }\n "}, {"sha": "e82add61aa3bb51aa1532b02379316915ade8925", "filename": "src/test/run-pass/issue-16668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16668.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -15,7 +15,7 @@\n #![feature(unboxed_closures)]\n \n struct Parser<'a, I, O> {\n-    parse: Box<FnMut<(I,), Result<O, String>> + 'a>\n+    parse: Box<FnMut(I) -> Result<O, String> + 'a>\n }\n \n impl<'a, I, O: 'a> Parser<'a, I, O> {"}, {"sha": "389baecafd14402eaa5776c593746d897035f428", "filename": "src/test/run-pass/issue-16739.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16739.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -15,27 +15,30 @@\n // Test that unboxing shim for calling rust-call ABI methods through a\n // trait box works and does not cause an ICE.\n \n-struct Foo { foo: uint }\n+struct Foo { foo: u32 }\n \n-impl FnMut<(), uint> for Foo {\n-    extern \"rust-call\" fn call_mut(&mut self, _: ()) -> uint { self.foo }\n+impl FnMut<()> for Foo {\n+    type Output = u32;\n+    extern \"rust-call\" fn call_mut(&mut self, _: ()) -> u32 { self.foo }\n }\n \n-impl FnMut<(uint,), uint> for Foo {\n-    extern \"rust-call\" fn call_mut(&mut self, (x,): (uint,)) -> uint { self.foo + x }\n+impl FnMut<(u32,)> for Foo {\n+    type Output = u32;\n+    extern \"rust-call\" fn call_mut(&mut self, (x,): (u32,)) -> u32 { self.foo + x }\n }\n \n-impl FnMut<(uint, uint), uint> for Foo {\n-    extern \"rust-call\" fn call_mut(&mut self, (x, y): (uint, uint)) -> uint { self.foo + x + y }\n+impl FnMut<(u32,u32)> for Foo {\n+    type Output = u32;\n+    extern \"rust-call\" fn call_mut(&mut self, (x, y): (u32, u32)) -> u32 { self.foo + x + y }\n }\n \n fn main() {\n-    let mut f = box Foo { foo: 42 } as Box<FnMut<(), uint>>;\n+    let mut f = box Foo { foo: 42 } as Box<FnMut() -> u32>;\n     assert_eq!(f.call_mut(()), 42);\n \n-    let mut f = box Foo { foo: 40 } as Box<FnMut<(uint,), uint>>;\n+    let mut f = box Foo { foo: 40 } as Box<FnMut(u32) -> u32>;\n     assert_eq!(f.call_mut((2,)), 42);\n \n-    let mut f = box Foo { foo: 40 } as Box<FnMut<(uint, uint), uint>>;\n+    let mut f = box Foo { foo: 40 } as Box<FnMut(u32, u32) -> u32>;\n     assert_eq!(f.call_mut((1, 1)), 42);\n }"}, {"sha": "2838909c1be625b16f102c1963932bd5f2257845", "filename": "src/test/run-pass/overloaded-calls-param-vtables.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -17,13 +17,15 @@ use std::ops::Add;\n \n struct G<A>;\n \n-impl<'a, A: Add<int, Output=int>> Fn<(A,), int> for G<A> {\n-    extern \"rust-call\" fn call(&self, (arg,): (A,)) -> int {\n+impl<'a, A: Add<i32, Output=i32>> Fn<(A,)> for G<A> {\n+    type Output = i32;\n+\n+    extern \"rust-call\" fn call(&self, (arg,): (A,)) -> i32 {\n         arg.add(1)\n     }\n }\n \n fn main() {\n     // ICE trigger\n-    G(1i);\n+    G(1_i32);\n }"}, {"sha": "f9e838d9b3d342cd9618a26b2b690eeb17b0d273", "filename": "src/test/run-pass/overloaded-calls-simple.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -13,34 +13,37 @@\n use std::ops::{Fn, FnMut, FnOnce};\n \n struct S1 {\n-    x: int,\n-    y: int,\n+    x: i32,\n+    y: i32,\n }\n \n-impl FnMut<(int,),int> for S1 {\n-    extern \"rust-call\" fn call_mut(&mut self, (z,): (int,)) -> int {\n+impl FnMut<(i32,)> for S1 {\n+    type Output = i32;\n+    extern \"rust-call\" fn call_mut(&mut self, (z,): (i32,)) -> i32 {\n         self.x * self.y * z\n     }\n }\n \n struct S2 {\n-    x: int,\n-    y: int,\n+    x: i32,\n+    y: i32,\n }\n \n-impl Fn<(int,),int> for S2 {\n-    extern \"rust-call\" fn call(&self, (z,): (int,)) -> int {\n+impl Fn<(i32,)> for S2 {\n+    type Output = i32;\n+    extern \"rust-call\" fn call(&self, (z,): (i32,)) -> i32 {\n         self.x * self.y * z\n     }\n }\n \n struct S3 {\n-    x: int,\n-    y: int,\n+    x: i32,\n+    y: i32,\n }\n \n-impl FnOnce<(int,int),int> for S3 {\n-    extern \"rust-call\" fn call_once(self, (z,zz): (int,int)) -> int {\n+impl FnOnce<(i32,i32)> for S3 {\n+    type Output = i32;\n+    extern \"rust-call\" fn call_once(self, (z,zz): (i32,i32)) -> i32 {\n         self.x * self.y * z * zz\n     }\n }"}, {"sha": "ce7395673b390a7c8ddd2199b59fe3ae675d21ad", "filename": "src/test/run-pass/overloaded-calls-zero-args.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Foverloaded-calls-zero-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Foverloaded-calls-zero-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-zero-args.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -13,12 +13,13 @@\n use std::ops::{FnMut};\n \n struct S {\n-    x: int,\n-    y: int,\n+    x: i32,\n+    y: i32,\n }\n \n-impl FnMut<(),int> for S {\n-    extern \"rust-call\" fn call_mut(&mut self, (): ()) -> int {\n+impl FnMut<()> for S {\n+    type Output = i32;\n+    extern \"rust-call\" fn call_mut(&mut self, (): ()) -> i32 {\n         self.x * self.y\n     }\n }"}, {"sha": "27528ca5d5663671c3a2fdfd4114385d6479b752", "filename": "src/test/run-pass/unboxed-closures-boxed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -14,9 +14,9 @@\n \n use std::ops::FnMut;\n \n- fn make_adder(x: int) -> Box<FnMut<(int,),int>+'static> {\n-    (box move |&mut: y: int| -> int { x + y }) as\n-        Box<FnMut<(int,),int>+'static>\n+ fn make_adder(x: i32) -> Box<FnMut(i32)->i32+'static> {\n+    (box move |&mut: y: i32| -> i32 { x + y }) as\n+        Box<FnMut(i32)->i32+'static>\n }\n \n pub fn main() {"}, {"sha": "5d6029e703b82bca13ea7affc4cd0cd50da7e06c", "filename": "src/test/run-pass/unboxed-closures-fn-as-fnmut-and-fnonce.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -18,21 +18,22 @@ use std::ops::{Fn,FnMut,FnOnce};\n \n struct S;\n \n-impl Fn<(int,),int> for S {\n-    extern \"rust-call\" fn call(&self, (x,): (int,)) -> int {\n+impl Fn<(i32,)> for S {\n+    type Output = i32;\n+    extern \"rust-call\" fn call(&self, (x,): (i32,)) -> i32 {\n         x * x\n     }\n }\n \n-fn call_it<F:Fn(int)->int>(f: &F, x: int) -> int {\n+fn call_it<F:Fn(i32)->i32>(f: &F, x: i32) -> i32 {\n     f(x)\n }\n \n-fn call_it_mut<F:FnMut(int)->int>(f: &mut F, x: int) -> int {\n+fn call_it_mut<F:FnMut(i32)->i32>(f: &mut F, x: i32) -> i32 {\n     f(x)\n }\n \n-fn call_it_once<F:FnOnce(int)->int>(f: F, x: int) -> int {\n+fn call_it_once<F:FnOnce(i32)->i32>(f: F, x: i32) -> i32 {\n     f(x)\n }\n "}, {"sha": "95dae41c6840e301240643dde94f97eb06e87797", "filename": "src/test/run-pass/unboxed-closures-fnmut-as-fnonce.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -18,17 +18,19 @@ use std::ops::{FnMut,FnOnce};\n \n struct S;\n \n-impl FnMut<(int,),int> for S {\n-    extern \"rust-call\" fn call_mut(&mut self, (x,): (int,)) -> int {\n+impl FnMut<(i32,)> for S {\n+    type Output = i32;\n+\n+    extern \"rust-call\" fn call_mut(&mut self, (x,): (i32,)) -> i32 {\n         x * x\n     }\n }\n \n-fn call_it_mut<F:FnMut(int)->int>(f: &mut F, x: int) -> int {\n+fn call_it_mut<F:FnMut(i32)->i32>(f: &mut F, x: i32) -> i32 {\n     f(x)\n }\n \n-fn call_it_once<F:FnOnce(int)->int>(f: F, x: int) -> int {\n+fn call_it_once<F:FnOnce(i32)->i32>(f: F, x: i32) -> i32 {\n     f(x)\n }\n "}, {"sha": "04c124946c9a1edb28697a81b62d3205e871ba22", "filename": "src/test/run-pass/unboxed-closures-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Funboxed-closures-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Funboxed-closures-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-generic.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -12,12 +12,12 @@\n \n use std::ops::FnMut;\n \n-fn call_it<F:FnMut<(int,int),int>>(y: int, mut f: F) -> int {\n+fn call_it<F:FnMut(i32,i32)->i32>(y: i32, mut f: F) -> i32 {\n     f(2, y)\n }\n \n pub fn main() {\n-    let f = |&mut: x: int, y: int| -> int { x + y };\n+    let f = |&mut: x: i32, y: i32| -> i32 { x + y };\n     let z = call_it(3, f);\n     println!(\"{}\", z);\n     assert_eq!(z, 5);"}, {"sha": "37075de0405ad884e303e244abad07db5fe83f98", "filename": "src/test/run-pass/unboxed-closures-manual-impl.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -15,17 +15,19 @@ use std::ops::FnMut;\n \n struct S;\n \n-impl FnMut<(int,),int> for S {\n-    extern \"rust-call\" fn call_mut(&mut self, (x,): (int,)) -> int {\n+impl FnMut<(i32,)> for S {\n+    type Output = i32;\n+\n+    extern \"rust-call\" fn call_mut(&mut self, (x,): (i32,)) -> i32 {\n         x * x\n     }\n }\n \n-fn call_it<F:FnMut(int)->int>(mut f: F, x: int) -> int {\n+fn call_it<F:FnMut(i32)->i32>(mut f: F, x: i32) -> i32 {\n     f(x) + 3\n }\n \n-fn call_box(f: &mut FnMut(int) -> int, x: int) -> int {\n+fn call_box(f: &mut FnMut(i32) -> i32, x: i32) -> i32 {\n     f(x) + 3\n }\n "}, {"sha": "6dfa4c124e24e91bea2629397fdbf5591eed62fc", "filename": "src/test/run-pass/unboxed-closures-monomorphization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -16,17 +16,17 @@\n #![feature(unboxed_closures)]\n \n fn main(){\n-    fn bar<'a, T:Clone+'a> (t: T) -> Box<FnMut<(),T> + 'a> {\n+    fn bar<'a, T:Clone+'a> (t: T) -> Box<FnMut()->T + 'a> {\n         box move |&mut:| t.clone()\n     }\n \n-    let mut f = bar(42u);\n+    let mut f = bar(42_u32);\n     assert_eq!(f.call_mut(()), 42);\n \n     let mut f = bar(\"forty-two\");\n     assert_eq!(f.call_mut(()), \"forty-two\");\n \n-    let x = 42u;\n+    let x = 42_u32;\n     let mut f = bar(&x);\n     assert_eq!(f.call_mut(()), &x);\n "}, {"sha": "fff841a2f052d6511b77e04b1364ab609b1e72d6", "filename": "src/test/run-pass/unboxed-closures-sugar-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Funboxed-closures-sugar-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09783d1dab5817b9c0202ce2fa2b0e5e78e79d44/src%2Ftest%2Frun-pass%2Funboxed-closures-sugar-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-sugar-object.rs?ref=09783d1dab5817b9c0202ce2fa2b0e5e78e79d44", "patch": "@@ -29,7 +29,7 @@ impl<X> Getter<X,X> for Identity {\n }\n \n fn main() {\n-    let x: &Getter(int) -> (int,) = &Identity;\n+    let x: &Getter<(i32,), (i32,)> = &Identity;\n     let (y,) = x.get((22,));\n     assert_eq!(y, 22);\n }"}]}