{"sha": "0270b4bc577ba57f211d25bab161a607b9b94ec5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNzBiNGJjNTc3YmE1N2YyMTFkMjViYWIxNjFhNjA3YjliOTRlYzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-23T22:48:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-23T22:48:44Z"}, "message": "reformat", "tree": {"sha": "068d6bddab6b25398d03bcf8f74bcb5f2b9a592a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/068d6bddab6b25398d03bcf8f74bcb5f2b9a592a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0270b4bc577ba57f211d25bab161a607b9b94ec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0270b4bc577ba57f211d25bab161a607b9b94ec5", "html_url": "https://github.com/rust-lang/rust/commit/0270b4bc577ba57f211d25bab161a607b9b94ec5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0270b4bc577ba57f211d25bab161a607b9b94ec5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ae63835da570c3419712141b34180ff9aae95c", "url": "https://api.github.com/repos/rust-lang/rust/commits/53ae63835da570c3419712141b34180ff9aae95c", "html_url": "https://github.com/rust-lang/rust/commit/53ae63835da570c3419712141b34180ff9aae95c"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "7718fbe6a195f91d9b13632ae0987f498f27a3c5", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0270b4bc577ba57f211d25bab161a607b9b94ec5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0270b4bc577ba57f211d25bab161a607b9b94ec5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=0270b4bc577ba57f211d25bab161a607b9b94ec5", "patch": "@@ -103,7 +103,7 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Resul\n         p.bump_remap(T![auto]);\n         has_mods = true;\n     }\n-    if p.at(IDENT) && p.at_contextual_kw(\"default\") && p.nth(1) == T![impl ] {\n+    if p.at(IDENT) && p.at_contextual_kw(\"default\") && p.nth(1) == T![impl] {\n         p.bump_remap(T![default]);\n         has_mods = true;\n     }\n@@ -161,7 +161,7 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Resul\n \n         // test unsafe_default_impl\n         // unsafe default impl Foo {}\n-        T![impl ] => {\n+        T![impl] => {\n             traits::impl_block(p);\n             m.complete(p, IMPL_BLOCK);\n         }"}, {"sha": "5fcacfbffcbc58455549c5ceb9353d8dd33e4129", "filename": "crates/ra_parser/src/grammar/items/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0270b4bc577ba57f211d25bab161a607b9b94ec5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0270b4bc577ba57f211d25bab161a607b9b94ec5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs?ref=0270b4bc577ba57f211d25bab161a607b9b94ec5", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn trait_item_list(p: &mut Parser) {\n // test impl_block\n // impl Foo {}\n pub(super) fn impl_block(p: &mut Parser) {\n-    assert!(p.at(T![impl ]));\n+    assert!(p.at(T![impl]));\n     p.bump();\n     if choose_type_params_over_qpath(p) {\n         type_params::opt_type_param_list(p);\n@@ -130,7 +130,7 @@ fn choose_type_params_over_qpath(p: &Parser) -> bool {\n // impl impl NotType {}\n // impl Trait2 for impl NotType {}\n pub(crate) fn impl_type(p: &mut Parser) {\n-    if p.at(T![impl ]) {\n+    if p.at(T![impl]) {\n         p.error(\"expected trait or type\");\n         return;\n     }"}, {"sha": "ef59b59d3eeda92fe41c7d222719e3e6a9af8a22", "filename": "crates/ra_parser/src/grammar/type_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0270b4bc577ba57f211d25bab161a607b9b94ec5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0270b4bc577ba57f211d25bab161a607b9b94ec5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=0270b4bc577ba57f211d25bab161a607b9b94ec5", "patch": "@@ -150,7 +150,7 @@ pub(super) fn opt_where_clause(p: &mut Parser) {\n fn is_where_predicate(p: &mut Parser) -> bool {\n     match p.current() {\n         LIFETIME => true,\n-        T![impl ] => false,\n+        T![impl] => false,\n         token => types::TYPE_FIRST.contains(token),\n     }\n }\n@@ -170,7 +170,7 @@ fn where_predicate(p: &mut Parser) {\n                 p.error(\"expected colon\");\n             }\n         }\n-        T![impl ] => {\n+        T![impl] => {\n             p.error(\"expected lifetime or type\");\n         }\n         _ => {"}, {"sha": "c0b722569679da4870fc1b052d1eae7d10935e0d", "filename": "crates/ra_parser/src/grammar/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0270b4bc577ba57f211d25bab161a607b9b94ec5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0270b4bc577ba57f211d25bab161a607b9b94ec5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=0270b4bc577ba57f211d25bab161a607b9b94ec5", "patch": "@@ -25,7 +25,7 @@ fn type_with_bounds_cond(p: &mut Parser, allow_bounds: bool) {\n         T![_] => placeholder_type(p),\n         T![fn] | T![unsafe] | T![extern] => fn_pointer_type(p),\n         T![for] => for_type(p),\n-        T![impl ] => impl_trait_type(p),\n+        T![impl] => impl_trait_type(p),\n         T![dyn ] => dyn_trait_type(p),\n         // Some path types are not allowed to have bounds (no plus)\n         T![<] => path_type_(p, allow_bounds),\n@@ -221,7 +221,7 @@ pub(super) fn for_type(p: &mut Parser) {\n // test impl_trait_type\n // type A = impl Iterator<Item=Foo<'a>> + 'a;\n fn impl_trait_type(p: &mut Parser) {\n-    assert!(p.at(T![impl ]));\n+    assert!(p.at(T![impl]));\n     let m = p.start();\n     p.bump();\n     type_params::bounds_without_colon(p);"}]}