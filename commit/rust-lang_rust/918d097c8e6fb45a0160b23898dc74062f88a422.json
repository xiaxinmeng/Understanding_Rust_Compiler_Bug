{"sha": "918d097c8e6fb45a0160b23898dc74062f88a422", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxOGQwOTdjOGU2ZmI0NWEwMTYwYjIzODk4ZGM3NDA2MmY4OGE0MjI=", "commit": {"author": {"name": "Ingo Blechschmidt", "email": "iblech@web.de", "date": "2015-02-16T22:13:58Z"}, "committer": {"name": "Ingo Blechschmidt", "email": "iblech@web.de", "date": "2015-02-16T22:13:58Z"}, "message": "Tiny typo changes (per discussion in pull request #22027)", "tree": {"sha": "aa34cfee9f8101f7694c86b81f17ec458fdaaa2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa34cfee9f8101f7694c86b81f17ec458fdaaa2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/918d097c8e6fb45a0160b23898dc74062f88a422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/918d097c8e6fb45a0160b23898dc74062f88a422", "html_url": "https://github.com/rust-lang/rust/commit/918d097c8e6fb45a0160b23898dc74062f88a422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/918d097c8e6fb45a0160b23898dc74062f88a422/comments", "author": {"login": "iblech", "id": 3661115, "node_id": "MDQ6VXNlcjM2NjExMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3661115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iblech", "html_url": "https://github.com/iblech", "followers_url": "https://api.github.com/users/iblech/followers", "following_url": "https://api.github.com/users/iblech/following{/other_user}", "gists_url": "https://api.github.com/users/iblech/gists{/gist_id}", "starred_url": "https://api.github.com/users/iblech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iblech/subscriptions", "organizations_url": "https://api.github.com/users/iblech/orgs", "repos_url": "https://api.github.com/users/iblech/repos", "events_url": "https://api.github.com/users/iblech/events{/privacy}", "received_events_url": "https://api.github.com/users/iblech/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iblech", "id": 3661115, "node_id": "MDQ6VXNlcjM2NjExMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3661115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iblech", "html_url": "https://github.com/iblech", "followers_url": "https://api.github.com/users/iblech/followers", "following_url": "https://api.github.com/users/iblech/following{/other_user}", "gists_url": "https://api.github.com/users/iblech/gists{/gist_id}", "starred_url": "https://api.github.com/users/iblech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iblech/subscriptions", "organizations_url": "https://api.github.com/users/iblech/orgs", "repos_url": "https://api.github.com/users/iblech/repos", "events_url": "https://api.github.com/users/iblech/events{/privacy}", "received_events_url": "https://api.github.com/users/iblech/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "526e74884640ded4e7d32d3b73a03c395f10991b", "url": "https://api.github.com/repos/rust-lang/rust/commits/526e74884640ded4e7d32d3b73a03c395f10991b", "html_url": "https://github.com/rust-lang/rust/commit/526e74884640ded4e7d32d3b73a03c395f10991b"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "0de15f52e192ddb4fd84aa1b4cfff287341959a3", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918d097c8e6fb45a0160b23898dc74062f88a422/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/918d097c8e6fb45a0160b23898dc74062f88a422/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=918d097c8e6fb45a0160b23898dc74062f88a422", "patch": "@@ -15,7 +15,7 @@ comments\":\n // the \"link\" crate attribute is currently required for rustdoc, but normally\n // isn't needed.\n #![crate_id = \"universe\"]\n-#![crate_type = \"lib\"]\n+#![crate_type= lib\"]\n \n //! Tools for dealing with universes (this is a doc comment, and is shown on\n //! the crate index page. The ! makes it apply to the parent of the comment,"}, {"sha": "d0ecb6067955da7cc74cffbe08dc62708500a9f1", "filename": "src/doc/trpl/functions.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/918d097c8e6fb45a0160b23898dc74062f88a422/src%2Fdoc%2Ftrpl%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/918d097c8e6fb45a0160b23898dc74062f88a422/src%2Fdoc%2Ftrpl%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ffunctions.md?ref=918d097c8e6fb45a0160b23898dc74062f88a422", "patch": "@@ -75,8 +75,7 @@ This is a deliberate design decision. While full-program inference is possible,\n languages which have it, like Haskell, often suggest that documenting your\n types explicitly is a best-practice. We agree that forcing functions to declare\n types while allowing for inference inside of function bodies is a wonderful\n-sweet spot between full inference and no inference. (For closures, i.e. unnamed\n-functions, types do not have to be declared.)\n+sweet spot between full inference and no inference.\n \n What about returning a value? Here's a function that adds one to an integer:\n "}, {"sha": "73bc775a1b29063fc9a384d3870b12f47490bd32", "filename": "src/doc/trpl/match.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918d097c8e6fb45a0160b23898dc74062f88a422/src%2Fdoc%2Ftrpl%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/918d097c8e6fb45a0160b23898dc74062f88a422/src%2Fdoc%2Ftrpl%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmatch.md?ref=918d097c8e6fb45a0160b23898dc74062f88a422", "patch": "@@ -23,7 +23,7 @@ match x {\n `match` takes an expression and then branches based on its value. Each *arm* of\n the branch is of the form `val => expression`. When the value matches, that arm's\n expression will be evaluated. It's called `match` because of the term 'pattern\n-matching,' which `match` is an implementation of.\n+matching', which `match` is an implementation of.\n \n So what's the big advantage here? Well, there are a few. First of all, `match`\n enforces *exhaustiveness checking*. Do you see that last arm, the one with the"}, {"sha": "e6570c2ee74c8d649faaf8afec41cf76358d30ba", "filename": "src/doc/trpl/method-syntax.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918d097c8e6fb45a0160b23898dc74062f88a422/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/918d097c8e6fb45a0160b23898dc74062f88a422/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md?ref=918d097c8e6fb45a0160b23898dc74062f88a422", "patch": "@@ -61,7 +61,7 @@ multiplications later, and we have our area.\n ## Chaining method calls\n \n So, now we know how to call a method, such as `foo.bar()`. But what about our\n-original example, `foo.bar().baz()`? This is called 'method chaining,' and we\n+original example, `foo.bar().baz()`? This is called 'method chaining', and we\n can do it by returning `self`.\n \n ```"}, {"sha": "986ad23c665a705a9b34a9fb11abd3c39ffcae00", "filename": "src/doc/trpl/more-strings.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918d097c8e6fb45a0160b23898dc74062f88a422/src%2Fdoc%2Ftrpl%2Fmore-strings.md", "raw_url": "https://github.com/rust-lang/rust/raw/918d097c8e6fb45a0160b23898dc74062f88a422/src%2Fdoc%2Ftrpl%2Fmore-strings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmore-strings.md?ref=918d097c8e6fb45a0160b23898dc74062f88a422", "patch": "@@ -14,7 +14,7 @@ Rust has two main types of strings: `&str` and `String`.\n \n # &str\n \n-The first kind is a `&str`. This is pronounced a 'string slice.'\n+The first kind is a `&str`. This is pronounced a 'string slice'.\n String literals are of the type `&str`:\n \n ```"}, {"sha": "1d4b0cb0e1f3534ed41170aef1599a9cf77c6558", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/918d097c8e6fb45a0160b23898dc74062f88a422/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/918d097c8e6fb45a0160b23898dc74062f88a422/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=918d097c8e6fb45a0160b23898dc74062f88a422", "patch": "@@ -648,8 +648,8 @@ The `rustc` compiler has certain pluggable operations, that is,\n functionality that isn't hard-coded into the language, but is\n implemented in libraries, with a special marker to tell the compiler\n it exists. The marker is the attribute `#[lang=\"...\"]` and there are\n-various different values of `...`, i.e. various different \"lang\n-items.\"\n+various different values of `...`, i.e. various different 'lang\n+items'.\n \n For example, `Box` pointers require two lang items, one for allocation\n and one for deallocation. A freestanding program that uses the `Box`"}]}