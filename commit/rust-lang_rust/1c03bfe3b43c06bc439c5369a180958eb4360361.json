{"sha": "1c03bfe3b43c06bc439c5369a180958eb4360361", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMDNiZmUzYjQzYzA2YmM0MzljNTM2OWExODA5NThlYjQzNjAzNjE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-06-10T23:06:21Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-07-08T14:42:48Z"}, "message": "trans: Adjust linkage assignment so that we don't need weak linkage.", "tree": {"sha": "c8b1e1ac5aef1f85808c552e4413eedc320558a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b1e1ac5aef1f85808c552e4413eedc320558a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c03bfe3b43c06bc439c5369a180958eb4360361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c03bfe3b43c06bc439c5369a180958eb4360361", "html_url": "https://github.com/rust-lang/rust/commit/1c03bfe3b43c06bc439c5369a180958eb4360361", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c03bfe3b43c06bc439c5369a180958eb4360361/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "051d391f2d45c8e7e59bf1bff6cab3b276b76335", "url": "https://api.github.com/repos/rust-lang/rust/commits/051d391f2d45c8e7e59bf1bff6cab3b276b76335", "html_url": "https://github.com/rust-lang/rust/commit/051d391f2d45c8e7e59bf1bff6cab3b276b76335"}], "stats": {"total": 145, "additions": 85, "deletions": 60}, "files": [{"sha": "ef7d0ea165d609d4487e50ece1e65a2869d61940", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=1c03bfe3b43c06bc439c5369a180958eb4360361", "patch": "@@ -255,7 +255,7 @@ fn get_drop_glue_core<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // on MIR. Thus, we'll instantiate the missing function on demand in\n     // this codegen unit, so that things keep working.\n \n-    TransItem::DropGlue(g).predefine(ccx, llvm::LinkOnceODRLinkage);\n+    TransItem::DropGlue(g).predefine(ccx, llvm::InternalLinkage);\n     TransItem::DropGlue(g).define(ccx);\n \n     // Now that we made sure that the glue function is in ccx.drop_glues,"}, {"sha": "00c0e91103500d21a26f02eff544778948f2befd", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=1c03bfe3b43c06bc439c5369a180958eb4360361", "patch": "@@ -137,7 +137,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                 ccx.stats().n_fallback_instantiations.set(ccx.stats()\n                                                              .n_fallback_instantiations\n                                                              .get() + 1);\n-                trans_item.predefine(ccx, llvm::PrivateLinkage);\n+                trans_item.predefine(ccx, llvm::InternalLinkage);\n                 trans_item.define(ccx);\n             }\n         }"}, {"sha": "8073359ede87ebc058689e317e484ac862390aac", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 54, "deletions": 34, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=1c03bfe3b43c06bc439c5369a180958eb4360361", "patch": "@@ -265,15 +265,11 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut codegen_units = FnvHashMap();\n \n     for trans_item in trans_items {\n-        let is_root = match trans_item {\n-            TransItem::Static(..) => true,\n-            TransItem::DropGlue(..) => false,\n-            TransItem::Fn(_) => !trans_item.is_from_extern_crate(),\n-        };\n+        let is_root = !trans_item.is_instantiated_only_on_demand();\n \n         if is_root {\n             let characteristic_def_id = characteristic_def_id_of_trans_item(tcx, trans_item);\n-            let is_volatile = trans_item.is_lazily_instantiated();\n+            let is_volatile = trans_item.is_generic_fn();\n \n             let codegen_unit_name = match characteristic_def_id {\n                 Some(def_id) => compute_codegen_unit_name(tcx, def_id, is_volatile),\n@@ -304,9 +300,9 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 // it might be used in another codegen unit.\n                                 llvm::ExternalLinkage\n                             } else {\n-                                // Monomorphizations of generic functions are\n-                                // always weak-odr\n-                                llvm::WeakODRLinkage\n+                                // In the current setup, generic functions cannot\n+                                // be roots.\n+                                unreachable!()\n                             }\n                         }\n                     }\n@@ -395,25 +391,30 @@ fn place_inlined_translation_items<'tcx>(initial_partitioning: PreInliningPartit\n             if let Some(linkage) = codegen_unit.items.get(&trans_item) {\n                 // This is a root, just copy it over\n                 new_codegen_unit.items.insert(trans_item, *linkage);\n+            } else if initial_partitioning.roots.contains(&trans_item) {\n+                // This item will be instantiated in some other codegen unit,\n+                // so we just add it here with AvailableExternallyLinkage\n+                // FIXME(mw): I have not seen it happening yet but having\n+                //            available_externally here could potentially lead\n+                //            to the same problem with exception handling tables\n+                //            as in the case below.\n+                new_codegen_unit.items.insert(trans_item,\n+                                              llvm::AvailableExternallyLinkage);\n+            } else if trans_item.is_from_extern_crate() && !trans_item.is_generic_fn() {\n+                // FIXME(mw): It would be nice if we could mark these as\n+                // `AvailableExternallyLinkage`, since they should have\n+                // been instantiated in the extern crate. But this\n+                // sometimes leads to crashes on Windows because LLVM\n+                // does not handle exception handling table instantiation\n+                // reliably in that case.\n+                new_codegen_unit.items.insert(trans_item, llvm::InternalLinkage);\n             } else {\n-                if initial_partitioning.roots.contains(&trans_item) {\n-                    // This item will be instantiated in some other codegen unit,\n-                    // so we just add it here with AvailableExternallyLinkage\n-                    new_codegen_unit.items.insert(trans_item,\n-                                                  llvm::AvailableExternallyLinkage);\n-                } else if trans_item.is_from_extern_crate() && !trans_item.is_generic_fn() {\n-                    // An instantiation of this item is always available in the\n-                    // crate it was imported from.\n-                    new_codegen_unit.items.insert(trans_item,\n-                                                  llvm::AvailableExternallyLinkage);\n-                } else {\n-                    // We can't be sure if this will also be instantiated\n-                    // somewhere else, so we add an instance here with\n-                    // LinkOnceODRLinkage. That way the item can be discarded if\n-                    // it's not needed (inlined) after all.\n-                    new_codegen_unit.items.insert(trans_item,\n-                                                  llvm::LinkOnceODRLinkage);\n-                }\n+                assert!(trans_item.is_instantiated_only_on_demand());\n+                // We can't be sure if this will also be instantiated\n+                // somewhere else, so we add an instance here with\n+                // InternalLinkage so we don't get any conflicts.\n+                new_codegen_unit.items.insert(trans_item,\n+                                              llvm::InternalLinkage);\n             }\n         }\n \n@@ -521,17 +522,36 @@ fn single_codegen_unit<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     }\n                 }\n                 TransItem::DropGlue(_) => {\n-                    llvm::PrivateLinkage\n+                    llvm::InternalLinkage\n                 }\n                 TransItem::Fn(instance) => {\n-                    if trans_item.is_generic_fn() ||\n-                       trans_item.is_from_extern_crate() ||\n-                       !reachable.contains(&tcx.map\n-                                               .as_local_node_id(instance.def)\n-                                               .unwrap()) {\n+                    if trans_item.is_generic_fn() {\n+                        // FIXME(mw): Assigning internal linkage to all\n+                        // monomorphizations is potentially a waste of space\n+                        // since monomorphizations could be shared between\n+                        // crates. The main reason for making them internal is\n+                        // a limitation in MingW's binutils that cannot deal\n+                        // with COFF object that have more than 2^15 sections,\n+                        // which is something that can happen for large programs\n+                        // when every function gets put into its own COMDAT\n+                        // section.\n                         llvm::InternalLinkage\n-                    } else {\n+                    } else if trans_item.is_from_extern_crate() {\n+                        // FIXME(mw): It would be nice if we could mark these as\n+                        // `AvailableExternallyLinkage`, since they should have\n+                        // been instantiated in the extern crate. But this\n+                        // sometimes leads to crashes on Windows because LLVM\n+                        // does not handle exception handling table instantiation\n+                        // reliably in that case.\n+                        llvm::InternalLinkage\n+                    } else if reachable.contains(&tcx.map\n+                                                     .as_local_node_id(instance.def)\n+                                                     .unwrap()) {\n                         llvm::ExternalLinkage\n+                    } else {\n+                        // Functions that are not visible outside this crate can\n+                        // be marked as internal.\n+                        llvm::InternalLinkage\n                     }\n                 }\n             }"}, {"sha": "b7b18b2631bee91f5148405b28713265fa0b9758", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=1c03bfe3b43c06bc439c5369a180958eb4360361", "patch": "@@ -256,8 +256,10 @@ impl<'a, 'tcx> TransItem<'tcx> {\n     pub fn requests_inline(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> bool {\n         match *self {\n             TransItem::Fn(ref instance) => {\n-                let attributes = tcx.get_attrs(instance.def);\n-                attr::requests_inline(&attributes[..])\n+                !instance.substs.types.is_empty() || {\n+                    let attributes = tcx.get_attrs(instance.def);\n+                    attr::requests_inline(&attributes[..])\n+                }\n             }\n             TransItem::DropGlue(..) => true,\n             TransItem::Static(..)   => false,\n@@ -272,9 +274,10 @@ impl<'a, 'tcx> TransItem<'tcx> {\n         }\n     }\n \n-    pub fn is_lazily_instantiated(&self) -> bool {\n+    pub fn is_instantiated_only_on_demand(&self) -> bool {\n         match *self {\n-            TransItem::Fn(ref instance) => !instance.substs.types.is_empty(),\n+            TransItem::Fn(ref instance) => !instance.def.is_local() ||\n+                                           !instance.substs.types.is_empty(),\n             TransItem::DropGlue(..) => true,\n             TransItem::Static(..)   => false,\n         }"}, {"sha": "910ffd2959ed089400ec7691b95710e808db1631", "filename": "src/test/codegen-units/partitioning/extern-drop-glue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs?ref=1c03bfe3b43c06bc439c5369a180958eb4360361", "patch": "@@ -20,15 +20,15 @@\n // aux-build:cgu_extern_drop_glue.rs\n extern crate cgu_extern_drop_glue;\n \n-//~ TRANS_ITEM drop-glue cgu_extern_drop_glue::Struct[0] @@ extern_drop_glue[OnceODR] extern_drop_glue-mod1[OnceODR]\n-//~ TRANS_ITEM drop-glue-contents cgu_extern_drop_glue::Struct[0] @@ extern_drop_glue[OnceODR] extern_drop_glue-mod1[OnceODR]\n+//~ TRANS_ITEM drop-glue cgu_extern_drop_glue::Struct[0] @@ extern_drop_glue[Internal] extern_drop_glue-mod1[Internal]\n+//~ TRANS_ITEM drop-glue-contents cgu_extern_drop_glue::Struct[0] @@ extern_drop_glue[Internal] extern_drop_glue-mod1[Internal]\n \n struct LocalStruct(cgu_extern_drop_glue::Struct);\n \n //~ TRANS_ITEM fn extern_drop_glue::user[0] @@ extern_drop_glue[External]\n fn user()\n {\n-    //~ TRANS_ITEM drop-glue extern_drop_glue::LocalStruct[0] @@ extern_drop_glue[OnceODR]\n+    //~ TRANS_ITEM drop-glue extern_drop_glue::LocalStruct[0] @@ extern_drop_glue[Internal]\n     let _ = LocalStruct(cgu_extern_drop_glue::Struct(0));\n }\n \n@@ -40,7 +40,7 @@ mod mod1 {\n     //~ TRANS_ITEM fn extern_drop_glue::mod1[0]::user[0] @@ extern_drop_glue-mod1[External]\n     fn user()\n     {\n-        //~ TRANS_ITEM drop-glue extern_drop_glue::mod1[0]::LocalStruct[0] @@ extern_drop_glue-mod1[OnceODR]\n+        //~ TRANS_ITEM drop-glue extern_drop_glue::mod1[0]::LocalStruct[0] @@ extern_drop_glue-mod1[Internal]\n         let _ = LocalStruct(cgu_extern_drop_glue::Struct(0));\n     }\n }"}, {"sha": "58f904f48a17dad25d5d4625182610bec2fbffce", "filename": "src/test/codegen-units/partitioning/extern-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs?ref=1c03bfe3b43c06bc439c5369a180958eb4360361", "patch": "@@ -58,7 +58,7 @@ mod mod3 {\n \n // Make sure the two generic functions from the extern crate get instantiated\n // privately in every module they are use in.\n-//~ TRANS_ITEM fn cgu_generic_function::foo[0]<&str> @@ extern_generic[OnceODR] extern_generic-mod1[OnceODR] extern_generic-mod2[OnceODR] extern_generic-mod1-mod1[OnceODR]\n-//~ TRANS_ITEM fn cgu_generic_function::bar[0]<&str> @@ extern_generic[OnceODR] extern_generic-mod1[OnceODR] extern_generic-mod2[OnceODR] extern_generic-mod1-mod1[OnceODR]\n+//~ TRANS_ITEM fn cgu_generic_function::foo[0]<&str> @@ extern_generic[Internal] extern_generic-mod1[Internal] extern_generic-mod2[Internal] extern_generic-mod1-mod1[Internal]\n+//~ TRANS_ITEM fn cgu_generic_function::bar[0]<&str> @@ extern_generic[Internal] extern_generic-mod1[Internal] extern_generic-mod2[Internal] extern_generic-mod1-mod1[Internal]\n \n //~ TRANS_ITEM drop-glue i8"}, {"sha": "118513f65541b30e046a4c8a882b368e28eb19e3", "filename": "src/test/codegen-units/partitioning/inlining-from-extern-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs?ref=1c03bfe3b43c06bc439c5369a180958eb4360361", "patch": "@@ -21,8 +21,8 @@ extern crate cgu_explicit_inlining;\n // This test makes sure that items inlined from external crates are privately\n // instantiated in every codegen unit they are used in.\n \n-//~ TRANS_ITEM fn cgu_explicit_inlining::inlined[0] @@ inlining_from_extern_crate[Available] inlining_from_extern_crate-mod1[Available]\n-//~ TRANS_ITEM fn cgu_explicit_inlining::always_inlined[0] @@ inlining_from_extern_crate[Available] inlining_from_extern_crate-mod2[Available]\n+//~ TRANS_ITEM fn cgu_explicit_inlining::inlined[0] @@ inlining_from_extern_crate[Internal] inlining_from_extern_crate-mod1[Internal]\n+//~ TRANS_ITEM fn cgu_explicit_inlining::always_inlined[0] @@ inlining_from_extern_crate[Internal] inlining_from_extern_crate-mod2[Internal]\n \n //~ TRANS_ITEM fn inlining_from_extern_crate::user[0] @@ inlining_from_extern_crate[External]\n pub fn user()"}, {"sha": "f61e3fe12931e0ddb6041ca5d240f3f804b01236", "filename": "src/test/codegen-units/partitioning/local-drop-glue.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs?ref=1c03bfe3b43c06bc439c5369a180958eb4360361", "patch": "@@ -16,8 +16,8 @@\n #![allow(dead_code)]\n #![crate_type=\"lib\"]\n \n-//~ TRANS_ITEM drop-glue local_drop_glue::Struct[0] @@ local_drop_glue[OnceODR] local_drop_glue-mod1[OnceODR]\n-//~ TRANS_ITEM drop-glue-contents local_drop_glue::Struct[0] @@ local_drop_glue[OnceODR] local_drop_glue-mod1[OnceODR]\n+//~ TRANS_ITEM drop-glue local_drop_glue::Struct[0] @@ local_drop_glue[Internal] local_drop_glue-mod1[Internal]\n+//~ TRANS_ITEM drop-glue-contents local_drop_glue::Struct[0] @@ local_drop_glue[Internal] local_drop_glue-mod1[Internal]\n struct Struct {\n     _a: u32\n }\n@@ -27,7 +27,7 @@ impl Drop for Struct {\n     fn drop(&mut self) {}\n }\n \n-//~ TRANS_ITEM drop-glue local_drop_glue::Outer[0] @@ local_drop_glue[OnceODR]\n+//~ TRANS_ITEM drop-glue local_drop_glue::Outer[0] @@ local_drop_glue[Internal]\n struct Outer {\n     _a: Struct\n }\n@@ -46,10 +46,10 @@ mod mod1\n {\n     use super::Struct;\n \n-    //~ TRANS_ITEM drop-glue local_drop_glue::mod1[0]::Struct2[0] @@ local_drop_glue-mod1[OnceODR]\n+    //~ TRANS_ITEM drop-glue local_drop_glue::mod1[0]::Struct2[0] @@ local_drop_glue-mod1[Internal]\n     struct Struct2 {\n         _a: Struct,\n-        //~ TRANS_ITEM drop-glue (u32, local_drop_glue::Struct[0]) @@ local_drop_glue-mod1[OnceODR]\n+        //~ TRANS_ITEM drop-glue (u32, local_drop_glue::Struct[0]) @@ local_drop_glue-mod1[Internal]\n         _b: (u32, Struct),\n     }\n "}, {"sha": "2d744169d3f8e5800a086956b8201953ba66347c", "filename": "src/test/codegen-units/partitioning/local-generic.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-generic.rs?ref=1c03bfe3b43c06bc439c5369a180958eb4360361", "patch": "@@ -16,13 +16,10 @@\n #![allow(dead_code)]\n #![crate_type=\"lib\"]\n \n-// Used in different modules/codegen units but always instantiated in the same\n-// codegen unit.\n-\n-//~ TRANS_ITEM fn local_generic::generic[0]<u32> @@ local_generic.volatile[WeakODR]\n-//~ TRANS_ITEM fn local_generic::generic[0]<u64> @@ local_generic.volatile[WeakODR]\n-//~ TRANS_ITEM fn local_generic::generic[0]<char> @@ local_generic.volatile[WeakODR]\n-//~ TRANS_ITEM fn local_generic::generic[0]<&str> @@ local_generic.volatile[WeakODR]\n+//~ TRANS_ITEM fn local_generic::generic[0]<u32> @@ local_generic[Internal]\n+//~ TRANS_ITEM fn local_generic::generic[0]<u64> @@ local_generic-mod1[Internal]\n+//~ TRANS_ITEM fn local_generic::generic[0]<char> @@ local_generic-mod1-mod1[Internal]\n+//~ TRANS_ITEM fn local_generic::generic[0]<&str> @@ local_generic-mod2[Internal]\n pub fn generic<T>(x: T) -> T { x }\n \n //~ TRANS_ITEM fn local_generic::user[0] @@ local_generic[External]"}, {"sha": "1ea5aafd401d20cff73e7d507e10e0e111510e1b", "filename": "src/test/codegen-units/partitioning/methods-are-with-self-type.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03bfe3b43c06bc439c5369a180958eb4360361/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs?ref=1c03bfe3b43c06bc439c5369a180958eb4360361", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Currently, all generic functions are instantiated in each codegen unit that\n+// uses them, even those not marked with #[inline], so this test does not make\n+// much sense at the moment.\n+// ignore-test\n+\n // ignore-tidy-linelength\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation"}]}