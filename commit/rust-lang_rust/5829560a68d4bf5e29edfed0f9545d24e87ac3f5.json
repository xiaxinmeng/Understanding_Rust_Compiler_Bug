{"sha": "5829560a68d4bf5e29edfed0f9545d24e87ac3f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4Mjk1NjBhNjhkNGJmNWUyOWVkZmVkMGY5NTQ1ZDI0ZTg3YWMzZjU=", "commit": {"author": {"name": "Jacob Hughes", "email": "j@jacobhughes.me", "date": "2020-09-24T22:10:56Z"}, "committer": {"name": "Jacob Hughes", "email": "j@jacobhughes.me", "date": "2020-09-28T18:51:03Z"}, "message": "Rename AllocErr to AllocError", "tree": {"sha": "4af9a11d9ea568fc1e3a07071113f064d704adcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4af9a11d9ea568fc1e3a07071113f064d704adcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5829560a68d4bf5e29edfed0f9545d24e87ac3f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5829560a68d4bf5e29edfed0f9545d24e87ac3f5", "html_url": "https://github.com/rust-lang/rust/commit/5829560a68d4bf5e29edfed0f9545d24e87ac3f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/comments", "author": {"login": "exrook", "id": 534850, "node_id": "MDQ6VXNlcjUzNDg1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/534850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exrook", "html_url": "https://github.com/exrook", "followers_url": "https://api.github.com/users/exrook/followers", "following_url": "https://api.github.com/users/exrook/following{/other_user}", "gists_url": "https://api.github.com/users/exrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/exrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exrook/subscriptions", "organizations_url": "https://api.github.com/users/exrook/orgs", "repos_url": "https://api.github.com/users/exrook/repos", "events_url": "https://api.github.com/users/exrook/events{/privacy}", "received_events_url": "https://api.github.com/users/exrook/received_events", "type": "User", "site_admin": false}, "committer": {"login": "exrook", "id": 534850, "node_id": "MDQ6VXNlcjUzNDg1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/534850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exrook", "html_url": "https://github.com/exrook", "followers_url": "https://api.github.com/users/exrook/followers", "following_url": "https://api.github.com/users/exrook/following{/other_user}", "gists_url": "https://api.github.com/users/exrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/exrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exrook/subscriptions", "organizations_url": "https://api.github.com/users/exrook/orgs", "repos_url": "https://api.github.com/users/exrook/repos", "events_url": "https://api.github.com/users/exrook/events{/privacy}", "received_events_url": "https://api.github.com/users/exrook/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d62d3f7fa9a91d933213cc10e20e740608983f64", "url": "https://api.github.com/repos/rust-lang/rust/commits/d62d3f7fa9a91d933213cc10e20e740608983f64", "html_url": "https://github.com/rust-lang/rust/commit/d62d3f7fa9a91d933213cc10e20e740608983f64"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "75158eefcac28c11e1d62dd8a90cc9257f038964", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=5829560a68d4bf5e29edfed0f9545d24e87ac3f5", "patch": "@@ -145,13 +145,13 @@ pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {\n \n impl Global {\n     #[inline]\n-    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {\n         match layout.size() {\n             0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),\n             // SAFETY: `layout` is non-zero in size,\n             size => unsafe {\n                 let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };\n-                let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;\n+                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;\n                 Ok(NonNull::slice_from_raw_parts(ptr, size))\n             },\n         }\n@@ -165,7 +165,7 @@ impl Global {\n         old_layout: Layout,\n         new_layout: Layout,\n         zeroed: bool,\n-    ) -> Result<NonNull<[u8]>, AllocErr> {\n+    ) -> Result<NonNull<[u8]>, AllocError> {\n         debug_assert!(\n             new_layout.size() >= old_layout.size(),\n             \"`new_layout.size()` must be greater than or equal to `old_layout.size()`\"\n@@ -183,7 +183,7 @@ impl Global {\n                 intrinsics::assume(new_size >= old_layout.size());\n \n                 let raw_ptr = realloc(ptr.as_ptr(), old_layout, new_size);\n-                let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;\n+                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;\n                 if zeroed {\n                     raw_ptr.add(old_size).write_bytes(0, new_size - old_size);\n                 }\n@@ -208,12 +208,12 @@ impl Global {\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n unsafe impl AllocRef for Global {\n     #[inline]\n-    fn alloc(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {\n         self.alloc_impl(layout, false)\n     }\n \n     #[inline]\n-    fn alloc_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {\n         self.alloc_impl(layout, true)\n     }\n \n@@ -232,7 +232,7 @@ unsafe impl AllocRef for Global {\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n-    ) -> Result<NonNull<[u8]>, AllocErr> {\n+    ) -> Result<NonNull<[u8]>, AllocError> {\n         // SAFETY: all conditions must be upheld by the caller\n         unsafe { self.grow_impl(ptr, old_layout, new_layout, false) }\n     }\n@@ -243,7 +243,7 @@ unsafe impl AllocRef for Global {\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n-    ) -> Result<NonNull<[u8]>, AllocErr> {\n+    ) -> Result<NonNull<[u8]>, AllocError> {\n         // SAFETY: all conditions must be upheld by the caller\n         unsafe { self.grow_impl(ptr, old_layout, new_layout, true) }\n     }\n@@ -254,7 +254,7 @@ unsafe impl AllocRef for Global {\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n-    ) -> Result<NonNull<[u8]>, AllocErr> {\n+    ) -> Result<NonNull<[u8]>, AllocError> {\n         debug_assert!(\n             new_layout.size() <= old_layout.size(),\n             \"`new_layout.size()` must be smaller than or equal to `old_layout.size()`\"\n@@ -273,7 +273,7 @@ unsafe impl AllocRef for Global {\n                 intrinsics::assume(new_size <= old_layout.size());\n \n                 let raw_ptr = realloc(ptr.as_ptr(), old_layout, new_size);\n-                let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;\n+                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;\n                 Ok(NonNull::slice_from_raw_parts(ptr, new_size))\n             },\n "}, {"sha": "cb4fe1b46cd75161048476850159ae358013e90d", "filename": "library/alloc/src/raw_vec/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Falloc%2Fsrc%2Fraw_vec%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Falloc%2Fsrc%2Fraw_vec%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec%2Ftests.rs?ref=5829560a68d4bf5e29edfed0f9545d24e87ac3f5", "patch": "@@ -3,7 +3,7 @@ use std::cell::Cell;\n \n #[test]\n fn allocator_param() {\n-    use crate::alloc::AllocErr;\n+    use crate::alloc::AllocError;\n \n     // Writing a test of integration between third-party\n     // allocators and `RawVec` is a little tricky because the `RawVec`\n@@ -21,10 +21,10 @@ fn allocator_param() {\n         fuel: Cell<usize>,\n     }\n     unsafe impl AllocRef for BoundedAlloc {\n-        fn alloc(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+        fn alloc(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {\n             let size = layout.size();\n             if size > self.fuel.get() {\n-                return Err(AllocErr);\n+                return Err(AllocError);\n             }\n             match Global.alloc(layout) {\n                 ok @ Ok(_) => {"}, {"sha": "5dbc42cc97d5b3f85d0bf0ec30f44c190afda307", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=5829560a68d4bf5e29edfed0f9545d24e87ac3f5", "patch": "@@ -247,7 +247,7 @@ use core::pin::Pin;\n use core::ptr::{self, NonNull};\n use core::slice::from_raw_parts_mut;\n \n-use crate::alloc::{box_free, handle_alloc_error, AllocErr, AllocRef, Global, Layout};\n+use crate::alloc::{box_free, handle_alloc_error, AllocError, AllocRef, Global, Layout};\n use crate::borrow::{Cow, ToOwned};\n use crate::string::String;\n use crate::vec::Vec;\n@@ -996,7 +996,7 @@ impl<T: ?Sized> Rc<T> {\n     /// and must return back a (potentially fat)-pointer for the `RcBox<T>`.\n     unsafe fn allocate_for_layout(\n         value_layout: Layout,\n-        allocate: impl FnOnce(Layout) -> Result<NonNull<[u8]>, AllocErr>,\n+        allocate: impl FnOnce(Layout) -> Result<NonNull<[u8]>, AllocError>,\n         mem_to_rcbox: impl FnOnce(*mut u8) -> *mut RcBox<T>,\n     ) -> *mut RcBox<T> {\n         // Calculate layout using the given value layout."}, {"sha": "3d7411c79dc4f8831175ec53dfcc785296f66115", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=5829560a68d4bf5e29edfed0f9545d24e87ac3f5", "patch": "@@ -21,7 +21,7 @@ use core::slice::from_raw_parts_mut;\n use core::sync::atomic;\n use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n \n-use crate::alloc::{box_free, handle_alloc_error, AllocErr, AllocRef, Global, Layout};\n+use crate::alloc::{box_free, handle_alloc_error, AllocError, AllocRef, Global, Layout};\n use crate::borrow::{Cow, ToOwned};\n use crate::boxed::Box;\n use crate::rc::is_dangling;\n@@ -969,7 +969,7 @@ impl<T: ?Sized> Arc<T> {\n     /// and must return back a (potentially fat)-pointer for the `ArcInner<T>`.\n     unsafe fn allocate_for_layout(\n         value_layout: Layout,\n-        allocate: impl FnOnce(Layout) -> Result<NonNull<[u8]>, AllocErr>,\n+        allocate: impl FnOnce(Layout) -> Result<NonNull<[u8]>, AllocError>,\n         mem_to_arcinner: impl FnOnce(*mut u8) -> *mut ArcInner<T>,\n     ) -> *mut ArcInner<T> {\n         // Calculate layout using the given value layout."}, {"sha": "94ba6d4233f9c935c69a3dec9833f3ba0b00f768", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=5829560a68d4bf5e29edfed0f9545d24e87ac3f5", "patch": "@@ -13,17 +13,17 @@ pub use self::layout::{Layout, LayoutErr};\n use crate::fmt;\n use crate::ptr::{self, NonNull};\n \n-/// The `AllocErr` error indicates an allocation failure\n+/// The `AllocError` error indicates an allocation failure\n /// that may be due to resource exhaustion or to\n /// something wrong when combining the given input arguments with this\n /// allocator.\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-pub struct AllocErr;\n+pub struct AllocError;\n \n // (we need this for downstream impl of trait Error)\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-impl fmt::Display for AllocErr {\n+impl fmt::Display for AllocError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(\"memory allocation failed\")\n     }\n@@ -109,7 +109,7 @@ pub unsafe trait AllocRef {\n     /// call the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n     ///\n     /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html\n-    fn alloc(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr>;\n+    fn alloc(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError>;\n \n     /// Behaves like `alloc`, but also ensures that the returned memory is zero-initialized.\n     ///\n@@ -126,7 +126,7 @@ pub unsafe trait AllocRef {\n     /// call the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n     ///\n     /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html\n-    fn alloc_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {\n         let ptr = self.alloc(layout)?;\n         // SAFETY: `alloc` returns a valid memory block\n         unsafe { ptr.as_non_null_ptr().as_ptr().write_bytes(0, ptr.len()) }\n@@ -187,7 +187,7 @@ pub unsafe trait AllocRef {\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n-    ) -> Result<NonNull<[u8]>, AllocErr> {\n+    ) -> Result<NonNull<[u8]>, AllocError> {\n         debug_assert!(\n             new_layout.size() >= old_layout.size(),\n             \"`new_layout.size()` must be greater than or equal to `old_layout.size()`\"\n@@ -248,7 +248,7 @@ pub unsafe trait AllocRef {\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n-    ) -> Result<NonNull<[u8]>, AllocErr> {\n+    ) -> Result<NonNull<[u8]>, AllocError> {\n         debug_assert!(\n             new_layout.size() >= old_layout.size(),\n             \"`new_layout.size()` must be greater than or equal to `old_layout.size()`\"\n@@ -312,7 +312,7 @@ pub unsafe trait AllocRef {\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n-    ) -> Result<NonNull<[u8]>, AllocErr> {\n+    ) -> Result<NonNull<[u8]>, AllocError> {\n         debug_assert!(\n             new_layout.size() <= old_layout.size(),\n             \"`new_layout.size()` must be smaller than or equal to `old_layout.size()`\"\n@@ -348,12 +348,12 @@ where\n     A: AllocRef + ?Sized,\n {\n     #[inline]\n-    fn alloc(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {\n         (**self).alloc(layout)\n     }\n \n     #[inline]\n-    fn alloc_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {\n         (**self).alloc_zeroed(layout)\n     }\n \n@@ -369,7 +369,7 @@ where\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n-    ) -> Result<NonNull<[u8]>, AllocErr> {\n+    ) -> Result<NonNull<[u8]>, AllocError> {\n         // SAFETY: the safety contract must be upheld by the caller\n         unsafe { (**self).grow(ptr, old_layout, new_layout) }\n     }\n@@ -380,7 +380,7 @@ where\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n-    ) -> Result<NonNull<[u8]>, AllocErr> {\n+    ) -> Result<NonNull<[u8]>, AllocError> {\n         // SAFETY: the safety contract must be upheld by the caller\n         unsafe { (**self).grow_zeroed(ptr, old_layout, new_layout) }\n     }\n@@ -391,7 +391,7 @@ where\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n-    ) -> Result<NonNull<[u8]>, AllocErr> {\n+    ) -> Result<NonNull<[u8]>, AllocError> {\n         // SAFETY: the safety contract must be upheld by the caller\n         unsafe { (**self).shrink(ptr, old_layout, new_layout) }\n     }"}, {"sha": "5dc7171a7dc26c4ac3cb474d7bce98d4f8e27dfa", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=5829560a68d4bf5e29edfed0f9545d24e87ac3f5", "patch": "@@ -448,7 +448,7 @@ impl<T> NonNull<[T]> {\n     /// // Note that calling `memory.as_mut()` is not allowed here as the content may be uninitialized.\n     /// # #[allow(unused_variables)]\n     /// let slice: &mut [MaybeUninit<u8>] = unsafe { memory.as_uninit_slice_mut() };\n-    /// # Ok::<_, std::alloc::AllocErr>(())\n+    /// # Ok::<_, std::alloc::AllocError>(())\n     /// ```\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]"}, {"sha": "dd7600623801f86ec3daacf93a2cfd669a0767be", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=5829560a68d4bf5e29edfed0f9545d24e87ac3f5", "patch": "@@ -133,7 +133,7 @@ pub struct System;\n \n impl System {\n     #[inline]\n-    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {\n         match layout.size() {\n             0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),\n             // SAFETY: `layout` is non-zero in size,\n@@ -143,7 +143,7 @@ impl System {\n                 } else {\n                     GlobalAlloc::alloc(self, layout)\n                 };\n-                let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;\n+                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;\n                 Ok(NonNull::slice_from_raw_parts(ptr, size))\n             },\n         }\n@@ -157,7 +157,7 @@ impl System {\n         old_layout: Layout,\n         new_layout: Layout,\n         zeroed: bool,\n-    ) -> Result<NonNull<[u8]>, AllocErr> {\n+    ) -> Result<NonNull<[u8]>, AllocError> {\n         debug_assert!(\n             new_layout.size() >= old_layout.size(),\n             \"`new_layout.size()` must be greater than or equal to `old_layout.size()`\"\n@@ -175,7 +175,7 @@ impl System {\n                 intrinsics::assume(new_size >= old_layout.size());\n \n                 let raw_ptr = GlobalAlloc::realloc(self, ptr.as_ptr(), old_layout, new_size);\n-                let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;\n+                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;\n                 if zeroed {\n                     raw_ptr.add(old_size).write_bytes(0, new_size - old_size);\n                 }\n@@ -202,12 +202,12 @@ impl System {\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n unsafe impl AllocRef for System {\n     #[inline]\n-    fn alloc(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {\n         self.alloc_impl(layout, false)\n     }\n \n     #[inline]\n-    fn alloc_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {\n         self.alloc_impl(layout, true)\n     }\n \n@@ -226,7 +226,7 @@ unsafe impl AllocRef for System {\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n-    ) -> Result<NonNull<[u8]>, AllocErr> {\n+    ) -> Result<NonNull<[u8]>, AllocError> {\n         // SAFETY: all conditions must be upheld by the caller\n         unsafe { self.grow_impl(ptr, old_layout, new_layout, false) }\n     }\n@@ -237,7 +237,7 @@ unsafe impl AllocRef for System {\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n-    ) -> Result<NonNull<[u8]>, AllocErr> {\n+    ) -> Result<NonNull<[u8]>, AllocError> {\n         // SAFETY: all conditions must be upheld by the caller\n         unsafe { self.grow_impl(ptr, old_layout, new_layout, true) }\n     }\n@@ -248,7 +248,7 @@ unsafe impl AllocRef for System {\n         ptr: NonNull<u8>,\n         old_layout: Layout,\n         new_layout: Layout,\n-    ) -> Result<NonNull<[u8]>, AllocErr> {\n+    ) -> Result<NonNull<[u8]>, AllocError> {\n         debug_assert!(\n             new_layout.size() <= old_layout.size(),\n             \"`new_layout.size()` must be smaller than or equal to `old_layout.size()`\"\n@@ -267,7 +267,7 @@ unsafe impl AllocRef for System {\n                 intrinsics::assume(new_size <= old_layout.size());\n \n                 let raw_ptr = GlobalAlloc::realloc(self, ptr.as_ptr(), old_layout, new_size);\n-                let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;\n+                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;\n                 Ok(NonNull::slice_from_raw_parts(ptr, new_size))\n             },\n "}, {"sha": "5771ca758afb0bb90c81716ef09d7d204ad71032", "filename": "library/std/src/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5829560a68d4bf5e29edfed0f9545d24e87ac3f5/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=5829560a68d4bf5e29edfed0f9545d24e87ac3f5", "patch": "@@ -19,7 +19,7 @@ mod tests;\n use core::array;\n use core::convert::Infallible;\n \n-use crate::alloc::{AllocErr, LayoutErr};\n+use crate::alloc::{AllocError, LayoutErr};\n use crate::any::TypeId;\n use crate::backtrace::Backtrace;\n use crate::borrow::Cow;\n@@ -387,7 +387,7 @@ impl Error for ! {}\n     reason = \"the precise API and guarantees it provides may be tweaked.\",\n     issue = \"32838\"\n )]\n-impl Error for AllocErr {}\n+impl Error for AllocError {}\n \n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n impl Error for LayoutErr {}"}]}