{"sha": "78761d64a990a58c7c99688717e77ed0ea477e2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NzYxZDY0YTk5MGE1OGM3Yzk5Njg4NzE3ZTc3ZWQwZWE0NzdlMmE=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-07-06T15:46:03Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-07-06T15:58:54Z"}, "message": "don't use type_parameter_def during astconv\n\nastconv is called when converting the type-parameter, which leads to\na crash.\n\nFixes #26812.", "tree": {"sha": "6d79c6c8bc26c0351b5a18915df0aa48fbe7f325", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d79c6c8bc26c0351b5a18915df0aa48fbe7f325"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78761d64a990a58c7c99688717e77ed0ea477e2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78761d64a990a58c7c99688717e77ed0ea477e2a", "html_url": "https://github.com/rust-lang/rust/commit/78761d64a990a58c7c99688717e77ed0ea477e2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78761d64a990a58c7c99688717e77ed0ea477e2a/comments", "author": null, "committer": null, "parents": [{"sha": "a2b927c5a41ded169a0919ff8193b5357c850217", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b927c5a41ded169a0919ff8193b5357c850217", "html_url": "https://github.com/rust-lang/rust/commit/a2b927c5a41ded169a0919ff8193b5357c850217"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "046e83bf3fcbc32fe2ec4013dde8afc9a1fbded5", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/78761d64a990a58c7c99688717e77ed0ea477e2a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78761d64a990a58c7c99688717e77ed0ea477e2a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=78761d64a990a58c7c99688717e77ed0ea477e2a", "patch": "@@ -1113,6 +1113,7 @@ fn report_ambiguous_associated_type(tcx: &ty::ctxt,\n // any ambiguity.\n fn find_bound_for_assoc_item<'tcx>(this: &AstConv<'tcx>,\n                                    ty_param_node_id: ast::NodeId,\n+                                   ty_param_name: Option<ast::Name>,\n                                    assoc_name: ast::Name,\n                                    span: Span)\n                                    -> Result<ty::PolyTraitRef<'tcx>, ErrorReported>\n@@ -1138,12 +1139,21 @@ fn find_bound_for_assoc_item<'tcx>(this: &AstConv<'tcx>,\n         .filter(|b| this.trait_defines_associated_type_named(b.def_id(), assoc_name))\n         .collect();\n \n-    let ty_param_name = tcx.type_parameter_def(ty_param_node_id).name;\n-    one_bound_for_assoc_type(tcx,\n-                             suitable_bounds,\n-                             &token::get_name(ty_param_name),\n-                             &token::get_name(assoc_name),\n-                             span)\n+    if let Some(s) = ty_param_name {\n+        // borrowck doesn't like this any other way\n+        one_bound_for_assoc_type(tcx,\n+                                 suitable_bounds,\n+                                 &token::get_name(s),\n+                                 &token::get_name(assoc_name),\n+                                 span)\n+    } else {\n+        one_bound_for_assoc_type(tcx,\n+                                 suitable_bounds,\n+                                 \"Self\",\n+                                 &token::get_name(assoc_name),\n+                                 span)\n+\n+    }\n }\n \n \n@@ -1240,12 +1250,20 @@ fn associated_path_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n                 _ => unreachable!()\n             }\n         }\n-        (&ty::TyParam(_), def::DefTyParam(..)) |\n-        (&ty::TyParam(_), def::DefSelfTy(Some(_), None)) => {\n-            // A type parameter or Self, we need to find the associated item from\n-            // a bound.\n-            let ty_param_node_id = ty_path_def.local_node_id();\n-            match find_bound_for_assoc_item(this, ty_param_node_id, assoc_name, span) {\n+        (&ty::TyParam(_), def::DefSelfTy(Some(trait_did),  None)) => {\n+            assert_eq!(trait_did.krate, ast::LOCAL_CRATE);\n+            match find_bound_for_assoc_item(this, trait_did.node, None, assoc_name, span) {\n+                Ok(bound) => bound,\n+                Err(ErrorReported) => return (tcx.types.err, ty_path_def),\n+            }\n+        }\n+        (&ty::TyParam(_), def::DefTyParam(_, _, param_did, param_name)) => {\n+            assert_eq!(param_did.krate, ast::LOCAL_CRATE);\n+            match find_bound_for_assoc_item(this,\n+                                            param_did.node,\n+                                            Some(param_name),\n+                                            assoc_name,\n+                                            span) {\n                 Ok(bound) => bound,\n                 Err(ErrorReported) => return (tcx.types.err, ty_path_def),\n             }"}, {"sha": "c1ccfe269cdd3c49cd81977e114461e864102f12", "filename": "src/test/compile-fail/issue-26812.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78761d64a990a58c7c99688717e77ed0ea477e2a/src%2Ftest%2Fcompile-fail%2Fissue-26812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78761d64a990a58c7c99688717e77ed0ea477e2a/src%2Ftest%2Fcompile-fail%2Fissue-26812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26812.rs?ref=78761d64a990a58c7c99688717e77ed0ea477e2a", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn avg<T=T::Item>(_: T) {} //~ ERROR associated type `Item` not found for `T`\n+fn main() {}"}]}