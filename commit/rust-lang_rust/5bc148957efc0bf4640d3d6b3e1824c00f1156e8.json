{"sha": "5bc148957efc0bf4640d3d6b3e1824c00f1156e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYzE0ODk1N2VmYzBiZjQ2NDBkM2Q2YjNlMTgyNGMwMGYxMTU2ZTg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-09-28T09:40:31Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-03T12:16:24Z"}, "message": "Correctly handle unicode characters and tags being open just before the end of the doc comment", "tree": {"sha": "b2b87b4e49c288f1bee17f3bdf08ef743e135746", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2b87b4e49c288f1bee17f3bdf08ef743e135746"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bc148957efc0bf4640d3d6b3e1824c00f1156e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bc148957efc0bf4640d3d6b3e1824c00f1156e8", "html_url": "https://github.com/rust-lang/rust/commit/5bc148957efc0bf4640d3d6b3e1824c00f1156e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bc148957efc0bf4640d3d6b3e1824c00f1156e8/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30cabfd215f374b855f6d6473b00a55c3511c3e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/30cabfd215f374b855f6d6473b00a55c3511c3e2", "html_url": "https://github.com/rust-lang/rust/commit/30cabfd215f374b855f6d6473b00a55c3511c3e2"}], "stats": {"total": 101, "additions": 72, "deletions": 29}, "files": [{"sha": "f8869a41eb601b9d279fc24279e55dffe57329a9", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5bc148957efc0bf4640d3d6b3e1824c00f1156e8/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc148957efc0bf4640d3d6b3e1824c00f1156e8/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=5bc148957efc0bf4640d3d6b3e1824c00f1156e8", "patch": "@@ -45,14 +45,22 @@ fn drop_tag(\n     range: Range<usize>,\n     f: &impl Fn(&str, &Range<usize>),\n ) {\n-    if let Some(pos) = tags.iter().rev().position(|(t, _)| *t == tag_name) {\n+    let tag_name_low = tag_name.to_lowercase();\n+    if let Some(pos) = tags.iter().rev().position(|(t, _)| t.to_lowercase() == tag_name_low) {\n         // Because this is from a `rev` iterator, the position is reversed as well!\n         let pos = tags.len() - 1 - pos;\n-        // If the tag is nested inside a \"<script>\", not warning should be emitted.\n-        let should_not_warn =\n-            tags.iter().take(pos + 1).any(|(at, _)| at == \"script\" || at == \"style\");\n+        // If the tag is nested inside a \"<script>\" or a \"<style>\" tag, no warning should\n+        // be emitted.\n+        let should_not_warn = tags.iter().take(pos + 1).any(|(at, _)| {\n+            let at = at.to_lowercase();\n+            at == \"script\" || at == \"style\"\n+        });\n         for (last_tag_name, last_tag_span) in tags.drain(pos + 1..) {\n-            if should_not_warn || ALLOWED_UNCLOSED.iter().any(|&at| at == &last_tag_name) {\n+            if should_not_warn {\n+                continue;\n+            }\n+            let last_tag_name_low = last_tag_name.to_lowercase();\n+            if ALLOWED_UNCLOSED.iter().any(|&at| at == &last_tag_name_low) {\n                 continue;\n             }\n             // `tags` is used as a queue, meaning that everything after `pos` is included inside it.\n@@ -77,21 +85,29 @@ fn extract_tag(\n ) {\n     let mut iter = text.chars().enumerate().peekable();\n \n-    while let Some((start_pos, c)) = iter.next() {\n+    'top: while let Some((start_pos, c)) = iter.next() {\n         if c == '<' {\n             let mut tag_name = String::new();\n             let mut is_closing = false;\n-            while let Some((pos, c)) = iter.peek() {\n+            let mut prev_pos = start_pos;\n+            loop {\n+                let (pos, c) = match iter.peek() {\n+                    Some((pos, c)) => (*pos, *c),\n+                    // In case we reached the of the doc comment, we want to check that it's an\n+                    // unclosed HTML tag. For example \"/// <h3\".\n+                    None => (prev_pos, '\\0'),\n+                };\n+                prev_pos = pos;\n                 // Checking if this is a closing tag (like `</a>` for `<a>`).\n-                if *c == '/' && tag_name.is_empty() {\n+                if c == '/' && tag_name.is_empty() {\n                     is_closing = true;\n-                } else if c.is_ascii_alphanumeric() && !c.is_ascii_uppercase() {\n-                    tag_name.push(*c);\n+                } else if c.is_ascii_alphanumeric() {\n+                    tag_name.push(c);\n                 } else {\n                     if !tag_name.is_empty() {\n                         let mut r =\n                             Range { start: range.start + start_pos, end: range.start + pos };\n-                        if *c == '>' {\n+                        if c == '>' {\n                             // In case we have a tag without attribute, we can consider the span to\n                             // refer to it fully.\n                             r.end += 1;\n@@ -102,11 +118,20 @@ fn extract_tag(\n                             tags.push((tag_name, r));\n                         }\n                     }\n-                    break;\n+                    continue 'top;\n+                }\n+                // Some chars like \ud83d\udca9 are longer than 1 character, so we need to skip the other\n+                // bytes as well to prevent stopping \"in the middle\" of a char.\n+                for _ in 0..c.len_utf8() {\n+                    iter.next();\n                 }\n-                iter.next();\n             }\n         }\n+        // Some chars like \ud83d\udca9 are longer than 1 character, so we need to skip the other\n+        // bytes as well to prevent stopping \"in the middle\" of a char.\n+        for _ in 0..c.len_utf8() - 1 {\n+            iter.next();\n+        }\n     }\n }\n \n@@ -143,9 +168,10 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n                 }\n             }\n \n-            for (tag, range) in\n-                tags.iter().filter(|(t, _)| ALLOWED_UNCLOSED.iter().find(|&at| at == t).is_none())\n-            {\n+            for (tag, range) in tags.iter().filter(|(t, _)| {\n+                let t = t.to_lowercase();\n+                ALLOWED_UNCLOSED.iter().find(|&&at| at == t).is_none()\n+            }) {\n                 report_diag(&format!(\"unclosed HTML tag `{}`\", tag), range);\n             }\n         }"}, {"sha": "a318b8ceca261d2557e66a883d33d40c2c701551", "filename": "src/test/rustdoc-ui/invalid-html-tags.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5bc148957efc0bf4640d3d6b3e1824c00f1156e8/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc148957efc0bf4640d3d6b3e1824c00f1156e8/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs?ref=5bc148957efc0bf4640d3d6b3e1824c00f1156e8", "patch": "@@ -1,5 +1,8 @@\n #![deny(invalid_html_tags)]\n \n+//! <p>\ud83d\udca9<p>\n+//~^ ERROR unclosed HTML tag `p`\n+\n /// <img><input>\n /// <script>\n /// <img><input>\n@@ -38,6 +41,8 @@ pub fn b() {}\n //~^ ERROR unclosed HTML tag `div`\n ///   <h3>\n //~^ ERROR unclosed HTML tag `h3`\n+/// <script\n+//~^ ERROR unclosed HTML tag `script`\n pub fn c() {}\n \n // Unclosed tags shouldn't warn if they are nested inside a <script> elem.\n@@ -55,7 +60,7 @@ pub fn d() {}\n /// <style>\n ///   <h3><div>\n /// </style>\n-/// <style>\n+/// <stYle>\n ///   <div>\n ///     <p>\n ///   </div>"}, {"sha": "70d577bbfa9207f2d090f0380d4a2480d2a9a57b", "filename": "src/test/rustdoc-ui/invalid-html-tags.stderr", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5bc148957efc0bf4640d3d6b3e1824c00f1156e8/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bc148957efc0bf4640d3d6b3e1824c00f1156e8/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr?ref=5bc148957efc0bf4640d3d6b3e1824c00f1156e8", "patch": "@@ -1,56 +1,68 @@\n-error: unclosed HTML tag `unknown`\n-  --> $DIR/invalid-html-tags.rs:7:5\n+error: unclosed HTML tag `p`\n+  --> $DIR/invalid-html-tags.rs:3:5\n    |\n-LL | /// <unknown>\n-   |     ^^^^^^^^^\n+LL | //! <p>\ud83d\udca9<p>\n+   |     ^^^\n    |\n note: the lint level is defined here\n   --> $DIR/invalid-html-tags.rs:1:9\n    |\n LL | #![deny(invalid_html_tags)]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: unclosed HTML tag `script`\n+error: unclosed HTML tag `unknown`\n   --> $DIR/invalid-html-tags.rs:10:5\n    |\n+LL | /// <unknown>\n+   |     ^^^^^^^^^\n+\n+error: unclosed HTML tag `script`\n+  --> $DIR/invalid-html-tags.rs:13:5\n+   |\n LL | /// <script>\n    |     ^^^^^^^^\n \n error: unclosed HTML tag `h2`\n-  --> $DIR/invalid-html-tags.rs:15:7\n+  --> $DIR/invalid-html-tags.rs:18:7\n    |\n LL | ///   <h2>\n    |       ^^^^\n \n error: unclosed HTML tag `h3`\n-  --> $DIR/invalid-html-tags.rs:17:9\n+  --> $DIR/invalid-html-tags.rs:20:9\n    |\n LL | ///     <h3>\n    |         ^^^^\n \n error: unopened HTML tag `hello`\n-  --> $DIR/invalid-html-tags.rs:20:5\n+  --> $DIR/invalid-html-tags.rs:23:5\n    |\n LL | /// </hello>\n    |     ^^^^^^^^\n \n error: unclosed HTML tag `p`\n-  --> $DIR/invalid-html-tags.rs:25:14\n+  --> $DIR/invalid-html-tags.rs:28:14\n    |\n LL | ///    <br/> <p>\n    |              ^^^\n \n error: unclosed HTML tag `div`\n-  --> $DIR/invalid-html-tags.rs:37:5\n+  --> $DIR/invalid-html-tags.rs:40:5\n    |\n LL | /// <div style=\"hello\">\n    |     ^^^^\n \n error: unclosed HTML tag `h3`\n-  --> $DIR/invalid-html-tags.rs:39:7\n+  --> $DIR/invalid-html-tags.rs:42:7\n    |\n LL | ///   <h3>\n    |       ^^^^\n \n-error: aborting due to 8 previous errors\n+error: unclosed HTML tag `script`\n+  --> $DIR/invalid-html-tags.rs:44:5\n+   |\n+LL | /// <script\n+   |     ^^^^^^\n+\n+error: aborting due to 10 previous errors\n "}]}