{"sha": "a849857bda0a474c16b4cd36a10c1ef4adf3caed", "node_id": "C_kwDOAAsO6NoAKGE4NDk4NTdiZGEwYTQ3NGMxNmI0Y2QzNmExMGMxZWY0YWRmM2NhZWQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-02-22T14:20:57Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-02-22T15:18:18Z"}, "message": "Prevent generation of infinite redirections", "tree": {"sha": "7a3c91f40731fc83cfa2591972d67226d7eff25f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a3c91f40731fc83cfa2591972d67226d7eff25f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a849857bda0a474c16b4cd36a10c1ef4adf3caed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a849857bda0a474c16b4cd36a10c1ef4adf3caed", "html_url": "https://github.com/rust-lang/rust/commit/a849857bda0a474c16b4cd36a10c1ef4adf3caed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a849857bda0a474c16b4cd36a10c1ef4adf3caed/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8967b0d52a2ba5f0c9da0da03e78ccba5534e4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8967b0d52a2ba5f0c9da0da03e78ccba5534e4a", "html_url": "https://github.com/rust-lang/rust/commit/b8967b0d52a2ba5f0c9da0da03e78ccba5534e4a"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "3f71a53f963e40d7a451ac0beb215f15e4a0e3c5", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 34, "deletions": 26, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a849857bda0a474c16b4cd36a10c1ef4adf3caed/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a849857bda0a474c16b4cd36a10c1ef4adf3caed/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=a849857bda0a474c16b4cd36a10c1ef4adf3caed", "patch": "@@ -201,19 +201,19 @@ impl<'tcx> Context<'tcx> {\n         } else {\n             tyname.as_str()\n         };\n-        let page = layout::Page {\n-            css_class: tyname_s,\n-            root_path: &self.root_path(),\n-            static_root_path: self.shared.static_root_path.as_deref(),\n-            title: &title,\n-            description: &desc,\n-            keywords: &keywords,\n-            resource_suffix: &self.shared.resource_suffix,\n-            extra_scripts: &[],\n-            static_extra_scripts: &[],\n-        };\n \n         if !self.render_redirect_pages {\n+            let page = layout::Page {\n+                css_class: tyname_s,\n+                root_path: &self.root_path(),\n+                static_root_path: self.shared.static_root_path.as_deref(),\n+                title: &title,\n+                description: &desc,\n+                keywords: &keywords,\n+                resource_suffix: &self.shared.resource_suffix,\n+                extra_scripts: &[],\n+                static_extra_scripts: &[],\n+            };\n             layout::render(\n                 &self.shared.layout,\n                 &page,\n@@ -223,23 +223,31 @@ impl<'tcx> Context<'tcx> {\n             )\n         } else {\n             if let Some(&(ref names, ty)) = self.cache().paths.get(&it.def_id.expect_def_id()) {\n-                let mut path = String::new();\n-                for name in &names[..names.len() - 1] {\n-                    path.push_str(&name.as_str());\n-                    path.push('/');\n-                }\n-                path.push_str(&item_path(ty, &names.last().unwrap().as_str()));\n-                match self.shared.redirections {\n-                    Some(ref redirections) => {\n-                        let mut current_path = String::new();\n-                        for name in &self.current {\n-                            current_path.push_str(&name.as_str());\n-                            current_path.push('/');\n+                if self.current.len() + 1 != names.len()\n+                    || self.current.iter().zip(names.iter()).any(|(a, b)| a != b)\n+                {\n+                    // We checked that the redirection isn't pointing to the current file,\n+                    // preventing an infinite redirection loop in the generated\n+                    // documentation.\n+\n+                    let mut path = String::new();\n+                    for name in &names[..names.len() - 1] {\n+                        path.push_str(&name.as_str());\n+                        path.push('/');\n+                    }\n+                    path.push_str(&item_path(ty, &names.last().unwrap().as_str()));\n+                    match self.shared.redirections {\n+                        Some(ref redirections) => {\n+                            let mut current_path = String::new();\n+                            for name in &self.current {\n+                                current_path.push_str(&name.as_str());\n+                                current_path.push('/');\n+                            }\n+                            current_path.push_str(&item_path(ty, &names.last().unwrap().as_str()));\n+                            redirections.borrow_mut().insert(current_path, path);\n                         }\n-                        current_path.push_str(&item_path(ty, &names.last().unwrap().as_str()));\n-                        redirections.borrow_mut().insert(current_path, path);\n+                        None => return layout::redirect(&format!(\"{}{}\", self.root_path(), path)),\n                     }\n-                    None => return layout::redirect(&format!(\"{}{}\", self.root_path(), path)),\n                 }\n             }\n             String::new()"}]}