{"sha": "db93ca28e27e544184200f116725b8bb1b0ed72b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiOTNjYTI4ZTI3ZTU0NDE4NDIwMGYxMTY3MjViOGJiMWIwZWQ3MmI=", "commit": {"author": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2014-05-09T23:34:06Z"}, "committer": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2014-05-10T18:32:31Z"}, "message": "shootout-nbody improvements\n\n- minimize bound check\n- factorise operations\n- use x, y, z instead of [f64, ..3]\n- ~1.15 faster", "tree": {"sha": "aa29a047fe3044ab1aa9e0579f8ddeba10189a8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa29a047fe3044ab1aa9e0579f8ddeba10189a8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db93ca28e27e544184200f116725b8bb1b0ed72b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db93ca28e27e544184200f116725b8bb1b0ed72b", "html_url": "https://github.com/rust-lang/rust/commit/db93ca28e27e544184200f116725b8bb1b0ed72b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db93ca28e27e544184200f116725b8bb1b0ed72b/comments", "author": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66f4f558cbe1df6a3ceff6c58ed7d994bed17cd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/66f4f558cbe1df6a3ceff6c58ed7d994bed17cd5", "html_url": "https://github.com/rust-lang/rust/commit/66f4f558cbe1df6a3ceff6c58ed7d994bed17cd5"}], "stats": {"total": 184, "additions": 87, "deletions": 97}, "files": [{"sha": "319b5dbabc8146997157f06761f81a6886a11c6d", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 87, "deletions": 97, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/db93ca28e27e544184200f116725b8bb1b0ed72b/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db93ca28e27e544184200f116725b8bb1b0ed72b/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=db93ca28e27e544184200f116725b8bb1b0ed72b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::os;\n-\n static PI: f64 = 3.141592653589793;\n static SOLAR_MASS: f64 = 4.0 * PI * PI;\n static YEAR: f64 = 365.24;\n@@ -18,151 +16,143 @@ static N_BODIES: uint = 5;\n static BODIES: [Planet, ..N_BODIES] = [\n     // Sun\n     Planet {\n-        x: [ 0.0, 0.0, 0.0 ],\n-        v: [ 0.0, 0.0, 0.0 ],\n+        x: 0.0, y: 0.0, z: 0.0,\n+        vx: 0.0, vy: 0.0, vz: 0.0,\n         mass: SOLAR_MASS,\n     },\n     // Jupiter\n     Planet {\n-        x: [\n-            4.84143144246472090e+00,\n-            -1.16032004402742839e+00,\n-            -1.03622044471123109e-01,\n-        ],\n-        v: [\n-            1.66007664274403694e-03 * YEAR,\n-            7.69901118419740425e-03 * YEAR,\n-            -6.90460016972063023e-05 * YEAR,\n-        ],\n+        x: 4.84143144246472090e+00,\n+        y: -1.16032004402742839e+00,\n+        z: -1.03622044471123109e-01,\n+        vx: 1.66007664274403694e-03 * YEAR,\n+        vy: 7.69901118419740425e-03 * YEAR,\n+        vz: -6.90460016972063023e-05 * YEAR,\n         mass: 9.54791938424326609e-04 * SOLAR_MASS,\n     },\n     // Saturn\n     Planet {\n-        x: [\n-            8.34336671824457987e+00,\n-            4.12479856412430479e+00,\n-            -4.03523417114321381e-01,\n-        ],\n-        v: [\n-            -2.76742510726862411e-03 * YEAR,\n-            4.99852801234917238e-03 * YEAR,\n-            2.30417297573763929e-05 * YEAR,\n-        ],\n+        x: 8.34336671824457987e+00,\n+        y: 4.12479856412430479e+00,\n+        z: -4.03523417114321381e-01,\n+        vx: -2.76742510726862411e-03 * YEAR,\n+        vy: 4.99852801234917238e-03 * YEAR,\n+        vz: 2.30417297573763929e-05 * YEAR,\n         mass: 2.85885980666130812e-04 * SOLAR_MASS,\n     },\n     // Uranus\n     Planet {\n-        x: [\n-            1.28943695621391310e+01,\n-            -1.51111514016986312e+01,\n-            -2.23307578892655734e-01,\n-        ],\n-        v: [\n-            2.96460137564761618e-03 * YEAR,\n-            2.37847173959480950e-03 * YEAR,\n-            -2.96589568540237556e-05 * YEAR,\n-        ],\n+        x: 1.28943695621391310e+01,\n+        y: -1.51111514016986312e+01,\n+        z: -2.23307578892655734e-01,\n+        vx: 2.96460137564761618e-03 * YEAR,\n+        vy: 2.37847173959480950e-03 * YEAR,\n+        vz: -2.96589568540237556e-05 * YEAR,\n         mass: 4.36624404335156298e-05 * SOLAR_MASS,\n     },\n     // Neptune\n     Planet {\n-        x: [\n-            1.53796971148509165e+01,\n-            -2.59193146099879641e+01,\n-            1.79258772950371181e-01,\n-        ],\n-        v: [\n-            2.68067772490389322e-03 * YEAR,\n-            1.62824170038242295e-03 * YEAR,\n-            -9.51592254519715870e-05 * YEAR,\n-        ],\n+        x: 1.53796971148509165e+01,\n+        y: -2.59193146099879641e+01,\n+        z: 1.79258772950371181e-01,\n+        vx: 2.68067772490389322e-03 * YEAR,\n+        vy: 1.62824170038242295e-03 * YEAR,\n+        vz: -9.51592254519715870e-05 * YEAR,\n         mass: 5.15138902046611451e-05 * SOLAR_MASS,\n     },\n ];\n \n struct Planet {\n-    x: [f64, ..3],\n-    v: [f64, ..3],\n+    x: f64, y: f64, z: f64,\n+    vx: f64, vy: f64, vz: f64,\n     mass: f64,\n }\n \n-fn advance(bodies: &mut [Planet, ..N_BODIES], dt: f64, steps: i32) {\n-    let mut d = [ 0.0, ..3 ];\n+fn advance(bodies: &mut [Planet, ..N_BODIES], dt: f64, steps: int) {\n     for _ in range(0, steps) {\n-        for i in range(0u, N_BODIES) {\n-            for j in range(i + 1, N_BODIES) {\n-                d[0] = bodies[i].x[0] - bodies[j].x[0];\n-                d[1] = bodies[i].x[1] - bodies[j].x[1];\n-                d[2] = bodies[i].x[2] - bodies[j].x[2];\n-\n-                let d2 = d[0]*d[0] + d[1]*d[1] + d[2]*d[2];\n-                let mag = dt / (d2 * d2.sqrt());\n-\n-                let a_mass = bodies[i].mass;\n-                let b_mass = bodies[j].mass;\n-                bodies[i].v[0] -= d[0] * b_mass * mag;\n-                bodies[i].v[1] -= d[1] * b_mass * mag;\n-                bodies[i].v[2] -= d[2] * b_mass * mag;\n-\n-                bodies[j].v[0] += d[0] * a_mass * mag;\n-                bodies[j].v[1] += d[1] * a_mass * mag;\n-                bodies[j].v[2] += d[2] * a_mass * mag;\n+        {\n+            let mut b_slice = bodies.as_mut_slice();\n+            loop {\n+                let bi = match b_slice.mut_shift_ref() {\n+                    Some(bi) => bi,\n+                    None => break\n+                };\n+                for bj in b_slice.mut_iter() {\n+                    let dx = bi.x - bj.x;\n+                    let dy = bi.y - bj.y;\n+                    let dz = bi.z - bj.z;\n+\n+                    let d2 = dx * dx + dy * dy + dz * dz;\n+                    let mag = dt / (d2 * d2.sqrt());\n+\n+                    bi.vx -= dx * bj.mass * mag;\n+                    bi.vy -= dy * bj.mass * mag;\n+                    bi.vz -= dz * bj.mass * mag;\n+\n+                    bj.vx += dx * bi.mass * mag;\n+                    bj.vy += dy * bi.mass * mag;\n+                    bj.vz += dz * bi.mass * mag;\n+                }\n             }\n         }\n \n-        for a in bodies.mut_iter() {\n-            a.x[0] += dt * a.v[0];\n-            a.x[1] += dt * a.v[1];\n-            a.x[2] += dt * a.v[2];\n+        for bi in bodies.mut_iter() {\n+            bi.x += dt * bi.vx;\n+            bi.y += dt * bi.vy;\n+            bi.z += dt * bi.vz;\n         }\n     }\n }\n \n fn energy(bodies: &[Planet, ..N_BODIES]) -> f64 {\n     let mut e = 0.0;\n-    let mut d = [ 0.0, ..3 ];\n-    for i in range(0u, N_BODIES) {\n-        for k in range(0u, 3) {\n-            e += bodies[i].mass * bodies[i].v[k] * bodies[i].v[k] / 2.0;\n-        }\n-\n-        for j in range(i + 1, N_BODIES) {\n-            for k in range(0u, 3) {\n-                d[k] = bodies[i].x[k] - bodies[j].x[k];\n-            }\n-            let dist = (d[0]*d[0] + d[1]*d[1] + d[2]*d[2]).sqrt();\n-            e -= bodies[i].mass * bodies[j].mass / dist;\n+    let mut bodies = bodies.as_slice();\n+    loop {\n+        let bi = match bodies.shift_ref() {\n+            Some(bi) => bi,\n+            None => break\n+        };\n+        e += (bi.vx * bi.vx + bi.vy * bi.vy + bi.vz * bi.vz) * bi.mass / 2.0;\n+        for bj in bodies.iter() {\n+            let dx = bi.x - bj.x;\n+            let dy = bi.y - bj.y;\n+            let dz = bi.z - bj.z;\n+            let dist = (dx * dx + dy * dy + dz * dz).sqrt();\n+            e -= bi.mass * bj.mass / dist;\n         }\n     }\n     e\n }\n \n fn offset_momentum(bodies: &mut [Planet, ..N_BODIES]) {\n-    for i in range(0u, N_BODIES) {\n-        for k in range(0u, 3) {\n-            bodies[0].v[k] -= bodies[i].v[k] * bodies[i].mass / SOLAR_MASS;\n-        }\n+    let mut px = 0.0;\n+    let mut py = 0.0;\n+    let mut pz = 0.0;\n+    for bi in bodies.iter() {\n+        px += bi.vx * bi.mass;\n+        py += bi.vy * bi.mass;\n+        pz += bi.vz * bi.mass;\n     }\n+    let sun = &mut bodies[0];\n+    sun.vx = - px / SOLAR_MASS;\n+    sun.vy = - py / SOLAR_MASS;\n+    sun.vz = - pz / SOLAR_MASS;\n }\n \n fn main() {\n-    let args = os::args();\n-    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        vec!(\"\".to_owned(), \"1000\".to_owned())\n-    } else if args.len() <= 1u {\n-        vec!(\"\".to_owned(), \"1000\".to_owned())\n+    let n = if std::os::getenv(\"RUST_BENCH\").is_some() {\n+        5000000\n     } else {\n-        args.move_iter().collect()\n+        std::os::args().as_slice().get(1)\n+            .and_then(|arg| from_str(*arg))\n+            .unwrap_or(1000)\n     };\n-\n-    let n: i32 = from_str::<i32>(*args.get(1)).unwrap();\n     let mut bodies = BODIES;\n \n     offset_momentum(&mut bodies);\n-    println!(\"{:.9f}\", energy(&bodies) as f64);\n+    println!(\"{:.9f}\", energy(&bodies));\n \n     advance(&mut bodies, 0.01, n);\n \n-    println!(\"{:.9f}\", energy(&bodies) as f64);\n+    println!(\"{:.9f}\", energy(&bodies));\n }\n-"}]}