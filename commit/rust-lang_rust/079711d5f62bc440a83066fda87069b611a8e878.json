{"sha": "079711d5f62bc440a83066fda87069b611a8e878", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3OTcxMWQ1ZjYyYmM0NDBhODMwNjZmZGE4NzA2OWI2MTFhOGU4Nzg=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-21T23:59:32Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-22T06:10:09Z"}, "message": "stdlib: Add regression tests for std::getopts", "tree": {"sha": "2b39c2f8c51887374d5b3e6dbc9a25020527eb11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b39c2f8c51887374d5b3e6dbc9a25020527eb11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/079711d5f62bc440a83066fda87069b611a8e878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/079711d5f62bc440a83066fda87069b611a8e878", "html_url": "https://github.com/rust-lang/rust/commit/079711d5f62bc440a83066fda87069b611a8e878", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/079711d5f62bc440a83066fda87069b611a8e878/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1a6c2e6c23edcc88483a17d0dcc30bf19dce455", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a6c2e6c23edcc88483a17d0dcc30bf19dce455", "html_url": "https://github.com/rust-lang/rust/commit/c1a6c2e6c23edcc88483a17d0dcc30bf19dce455"}], "stats": {"total": 538, "additions": 538, "deletions": 0}, "files": [{"sha": "fe2d3b7f1c62a023b371fc721ce64d0a648ab81f", "filename": "src/test/run-pass/lib-getopts.rs", "status": "added", "additions": 538, "deletions": 0, "changes": 538, "blob_url": "https://github.com/rust-lang/rust/blob/079711d5f62bc440a83066fda87069b611a8e878/src%2Ftest%2Frun-pass%2Flib-getopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079711d5f62bc440a83066fda87069b611a8e878/src%2Ftest%2Frun-pass%2Flib-getopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-getopts.rs?ref=079711d5f62bc440a83066fda87069b611a8e878", "patch": "@@ -0,0 +1,538 @@\n+use std;\n+\n+import std::vec;\n+import std::option;\n+import opt = std::getopts;\n+\n+tag fail_type {\n+  argument_missing;\n+  unrecognized_option;\n+  option_missing;\n+  option_duplicated;\n+}\n+\n+fn check_fail_type(opt::fail_ f, fail_type ft) {\n+  alt (f) {\n+    case (opt::argument_missing(_)) {\n+      assert (ft == argument_missing);\n+    }\n+    case (opt::unrecognized_option(_)) {\n+      assert (ft == unrecognized_option);\n+    }\n+    case (opt::option_missing(_)) {\n+      assert (ft == option_missing);\n+    }\n+    case (opt::option_duplicated(_)) {\n+      assert (ft == option_duplicated);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+// Tests for reqopt\n+\n+fn test_reqopt_long() {\n+  auto args = [\"--test=20\"];\n+  auto opts = [opt::reqopt(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (opt::opt_present(m, \"test\"));\n+      assert (opt::opt_str(m, \"test\") == \"20\");\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_reqopt_long_missing() {\n+  auto args = [\"blah\"];\n+  auto opts = [opt::reqopt(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, option_missing);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_reqopt_long_no_arg() {\n+  auto args = [\"--test\"];\n+  auto opts = [opt::reqopt(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, argument_missing);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_reqopt_long_multi() {\n+  auto args = [\"--test=20\", \"--test=30\"];\n+  auto opts = [opt::reqopt(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, option_duplicated);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_reqopt_short() {\n+  auto args = [\"-t\", \"20\"];\n+  auto opts = [opt::reqopt(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (opt::opt_present(m, \"t\"));\n+      assert (opt::opt_str(m, \"t\") == \"20\");\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_reqopt_short_missing() {\n+  auto args = [\"blah\"];\n+  auto opts = [opt::reqopt(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, option_missing);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_reqopt_short_no_arg() {\n+  auto args = [\"-t\"];\n+  auto opts = [opt::reqopt(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, argument_missing);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_reqopt_short_multi() {\n+  auto args = [\"-t\", \"20\", \"-t\", \"30\"];\n+  auto opts = [opt::reqopt(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, option_duplicated);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+\n+// Tests for optopt\n+\n+fn test_optopt_long() {\n+  auto args = [\"--test=20\"];\n+  auto opts = [opt::optopt(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (opt::opt_present(m, \"test\"));\n+      assert (opt::opt_str(m, \"test\") == \"20\");\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optopt_long_missing() {\n+  auto args = [\"blah\"];\n+  auto opts = [opt::optopt(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (!opt::opt_present(m, \"test\"));\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optopt_long_no_arg() {\n+  auto args = [\"--test\"];\n+  auto opts = [opt::optopt(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, argument_missing);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optopt_long_multi() {\n+  auto args = [\"--test=20\", \"--test=30\"];\n+  auto opts = [opt::optopt(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, option_duplicated);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optopt_short() {\n+  auto args = [\"-t\", \"20\"];\n+  auto opts = [opt::optopt(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (opt::opt_present(m, \"t\"));\n+      assert (opt::opt_str(m, \"t\") == \"20\");\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optopt_short_missing() {\n+  auto args = [\"blah\"];\n+  auto opts = [opt::optopt(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (!opt::opt_present(m, \"t\"));\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optopt_short_no_arg() {\n+  auto args = [\"-t\"];\n+  auto opts = [opt::optopt(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, argument_missing);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optopt_short_multi() {\n+  auto args = [\"-t\", \"20\", \"-t\", \"30\"];\n+  auto opts = [opt::optopt(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, option_duplicated);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+\n+// Tests for optflag\n+\n+fn test_optflag_long() {\n+  auto args = [\"--test\"];\n+  auto opts = [opt::optflag(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (opt::opt_present(m, \"test\"));\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optflag_long_missing() {\n+  auto args = [\"blah\"];\n+  auto opts = [opt::optflag(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (!opt::opt_present(m, \"test\"));\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optflag_long_arg() {\n+  auto args = [\"--test=20\"];\n+  auto opts = [opt::optflag(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) { log_err opt::fail_str(f); }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optflag_long_multi() {\n+  auto args = [\"--test\", \"--test\"];\n+  auto opts = [opt::optflag(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, option_duplicated);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optflag_short() {\n+  auto args = [\"-t\"];\n+  auto opts = [opt::optflag(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (opt::opt_present(m, \"t\"));\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optflag_short_missing() {\n+  auto args = [\"blah\"];\n+  auto opts = [opt::optflag(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (!opt::opt_present(m, \"t\"));\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optflag_short_arg() {\n+  auto args = [\"-t\", \"20\"];\n+  auto opts = [opt::optflag(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      // The next variable after the flag is just a free argument\n+      assert (m.free.(0) == \"20\");\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optflag_short_multi() {\n+  auto args = [\"-t\", \"-t\"];\n+  auto opts = [opt::optflag(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, option_duplicated);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+\n+// Tests for optmulti\n+\n+fn test_optmulti_long() {\n+  auto args = [\"--test=20\"];\n+  auto opts = [opt::optmulti(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (opt::opt_present(m, \"test\"));\n+      assert (opt::opt_str(m, \"test\") == \"20\");\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optmulti_long_missing() {\n+  auto args = [\"blah\"];\n+  auto opts = [opt::optmulti(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (!opt::opt_present(m, \"test\"));\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optmulti_long_no_arg() {\n+  auto args = [\"--test\"];\n+  auto opts = [opt::optmulti(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, argument_missing);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optmulti_long_multi() {\n+  auto args = [\"--test=20\", \"--test=30\"];\n+  auto opts = [opt::optmulti(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (opt::opt_present(m, \"test\"));\n+      assert (opt::opt_str(m, \"test\") == \"20\");\n+      assert (opt::opt_strs(m, \"test\").(0) == \"20\");\n+      assert (opt::opt_strs(m, \"test\").(1) == \"30\");\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optmulti_short() {\n+  auto args = [\"-t\", \"20\"];\n+  auto opts = [opt::optmulti(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (opt::opt_present(m, \"t\"));\n+      assert (opt::opt_str(m, \"t\") == \"20\");\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optmulti_short_missing() {\n+  auto args = [\"blah\"];\n+  auto opts = [opt::optmulti(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (!opt::opt_present(m, \"t\"));\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optmulti_short_no_arg() {\n+  auto args = [\"-t\"];\n+  auto opts = [opt::optmulti(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, argument_missing);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_optmulti_short_multi() {\n+  auto args = [\"-t\", \"20\", \"-t\", \"30\"];\n+  auto opts = [opt::optmulti(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (opt::opt_present(m, \"t\"));\n+      assert (opt::opt_str(m, \"t\") == \"20\");\n+      assert (opt::opt_strs(m, \"t\").(0) == \"20\");\n+      assert (opt::opt_strs(m, \"t\").(1) == \"30\");\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_unrecognized_option_long() {\n+  auto args = [\"--untest\"];\n+  auto opts = [opt::optmulti(\"t\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, unrecognized_option);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_unrecognized_option_short() {\n+  auto args = [\"-t\"];\n+  auto opts = [opt::optmulti(\"test\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::failure(?f)) {\n+      check_fail_type(f, unrecognized_option);\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn test_combined() {\n+  auto args = [\"prog\", \"free1\", \"-s\", \"20\",\n+               \"free2\", \"--flag\", \"--long=30\", \"-f\",\n+               \"-m\", \"40\", \"-m\", \"50\"];\n+  auto opts = [opt::optopt(\"s\"),\n+               opt::optflag(\"flag\"),\n+               opt::reqopt(\"long\"),\n+               opt::optflag(\"f\"),\n+               opt::optmulti(\"m\"),\n+               opt::optopt(\"notpresent\")];\n+  auto res = opt::getopts(args, opts);\n+  alt (res) {\n+    case (opt::success(?m)) {\n+      assert (m.free.(0) == \"prog\");\n+      assert (m.free.(1) == \"free1\");\n+      assert (opt::opt_str(m, \"s\") == \"20\");\n+      assert (m.free.(2) == \"free2\");\n+      assert (opt::opt_present(m, \"flag\"));\n+      assert (opt::opt_str(m, \"long\") == \"30\");\n+      assert (opt::opt_present(m, \"f\"));\n+      assert (opt::opt_strs(m, \"m\").(0) == \"40\");\n+      assert (opt::opt_strs(m, \"m\").(1) == \"50\");\n+      assert (!opt::opt_present(m, \"notpresent\"));\n+    }\n+    case (_) { fail; }\n+  }\n+}\n+\n+fn main() {\n+\n+  test_reqopt_long();\n+  test_reqopt_long_missing();\n+  test_reqopt_long_no_arg();\n+  test_reqopt_long_multi();\n+\n+  test_reqopt_short();\n+  test_reqopt_short_missing();\n+  test_reqopt_short_no_arg();\n+  test_reqopt_short_multi();\n+\n+  test_optopt_long();\n+  test_optopt_long_missing();\n+  test_optopt_long_no_arg();\n+  test_optopt_long_multi();\n+\n+  test_optopt_short();\n+  test_optopt_short_missing();\n+  test_optopt_short_no_arg();\n+  test_optopt_short_multi();\n+\n+  test_optflag_long();\n+  test_optflag_long_missing();\n+  // FIXME: Currently long flags will silently accept arguments\n+  // when it should probably report an error\n+  //test_optflag_long_arg();\n+  test_optflag_long_multi();\n+\n+  test_optflag_short();\n+  test_optflag_short_missing();\n+  test_optflag_short_arg();\n+  test_optflag_short_multi();\n+\n+  test_optmulti_long();\n+  test_optmulti_long_missing();\n+  test_optmulti_long_no_arg();\n+  test_optmulti_long_multi();\n+\n+  test_optmulti_short();\n+  test_optmulti_short_missing();\n+  test_optmulti_short_no_arg();\n+  test_optmulti_short_multi();\n+\n+  test_unrecognized_option_long();\n+  test_unrecognized_option_short();\n+\n+  test_combined();\n+}"}]}