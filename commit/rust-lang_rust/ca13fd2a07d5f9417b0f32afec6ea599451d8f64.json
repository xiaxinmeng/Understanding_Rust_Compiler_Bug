{"sha": "ca13fd2a07d5f9417b0f32afec6ea599451d8f64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMTNmZDJhMDdkNWY5NDE3YjBmMzJhZmVjNmVhNTk5NDUxZDhmNjQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-04T16:33:47Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-05T07:08:34Z"}, "message": "Rollup merge of #22973 - djmally:coll_docs, r=Gankro", "tree": {"sha": "3d4934ab27a81ba88220d692f1e283dcd17e7ba2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d4934ab27a81ba88220d692f1e283dcd17e7ba2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca13fd2a07d5f9417b0f32afec6ea599451d8f64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca13fd2a07d5f9417b0f32afec6ea599451d8f64", "html_url": "https://github.com/rust-lang/rust/commit/ca13fd2a07d5f9417b0f32afec6ea599451d8f64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca13fd2a07d5f9417b0f32afec6ea599451d8f64/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "145b83e63355c672f8e43129f8e7833fac35dce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/145b83e63355c672f8e43129f8e7833fac35dce2", "html_url": "https://github.com/rust-lang/rust/commit/145b83e63355c672f8e43129f8e7833fac35dce2"}, {"sha": "0a1776495c48db19a8e1fe27acc81bab908e256a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1776495c48db19a8e1fe27acc81bab908e256a", "html_url": "https://github.com/rust-lang/rust/commit/0a1776495c48db19a8e1fe27acc81bab908e256a"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "caada8ae50f74aa30a4f0c7373674ddbb5ad191b", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ca13fd2a07d5f9417b0f32afec6ea599451d8f64/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca13fd2a07d5f9417b0f32afec6ea599451d8f64/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=ca13fd2a07d5f9417b0f32afec6ea599451d8f64", "patch": "@@ -78,7 +78,7 @@\n //! * You want a bit vector.\n //!\n //! ### Use a `BitSet` when:\n-//! * You want a `VecSet`.\n+//! * You want a `BitVec`, but want `Set` properties\n //!\n //! ### Use a `BinaryHeap` when:\n //! * You want to store a bunch of elements, but only ever want to process the \"biggest\"\n@@ -89,7 +89,8 @@\n //!\n //! Choosing the right collection for the job requires an understanding of what each collection\n //! is good at. Here we briefly summarize the performance of different collections for certain\n-//! important operations. For further details, see each type's documentation.\n+//! important operations. For further details, see each type's documentation, and note that the\n+//! names of actual methods may differ from the tables below on certain collections.\n //!\n //! Throughout the documentation, we will follow a few conventions. For all operations,\n //! the collection's size is denoted by n. If another collection is involved in the operation, it\n@@ -280,16 +281,16 @@\n //! a variant of the `Entry` enum.\n //!\n //! If a `Vacant(entry)` is yielded, then the key *was not* found. In this case the\n-//! only valid operation is to `set` the value of the entry. When this is done,\n+//! only valid operation is to `insert` a value into the entry. When this is done,\n //! the vacant entry is consumed and converted into a mutable reference to the\n //! the value that was inserted. This allows for further manipulation of the value\n //! beyond the lifetime of the search itself. This is useful if complex logic needs to\n //! be performed on the value regardless of whether the value was just inserted.\n //!\n //! If an `Occupied(entry)` is yielded, then the key *was* found. In this case, the user\n-//! has several options: they can `get`, `set`, or `take` the value of the occupied\n+//! has several options: they can `get`, `insert`, or `remove` the value of the occupied\n //! entry. Additionally, they can convert the occupied entry into a mutable reference\n-//! to its value, providing symmetry to the vacant `set` case.\n+//! to its value, providing symmetry to the vacant `insert` case.\n //!\n //! ### Examples\n //!\n@@ -329,7 +330,7 @@\n //! use std::collections::btree_map::{BTreeMap, Entry};\n //!\n //! // A client of the bar. They have an id and a blood alcohol level.\n-//! struct Person { id: u32, blood_alcohol: f32 };\n+//! struct Person { id: u32, blood_alcohol: f32 }\n //!\n //! // All the orders made to the bar, by client id.\n //! let orders = vec![1,2,1,2,3,4,1,2,2,3,4,1,1,1];"}]}