{"sha": "3143472863c473d246ffb741c1bc46f2697706ec", "node_id": "C_kwDOAAsO6NoAKDMxNDM0NzI4NjNjNDczZDI0NmZmYjc0MWMxYmM0NmYyNjk3NzA2ZWM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-30T06:20:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-30T06:20:26Z"}, "message": "Rollup merge of #103560 - zbyrn:issue-103358-fix, r=cjgillot\n\nPoint only to the identifiers in the typo suggestions of shadowed names instead of the entire struct\n\nFixes #103358.\n\nAs discussed in the issue, the `Span` of the candidate `Ident` for a typo replacement is stored alongside its `Symbol` in `TypoSuggestion`. Then, the span of the identifier is what the \"you might have meant to refer to\" note is pointed at, rather than the entire struct definition.\n\nComments in #103111 and the issue both suggest that it is desirable to:\n1. include names defined in the same crate as the typo,\n2. ignore names defined elsewhere such as in `std`, _and_\n3. include names introduced indirectly via `use`.\n\nSince a name from another crate but introduced via `use` has non-local `def_id`, to achieve this, a suggestion is displayed if either the `def_id` of the suggested name is local, or the `span` of the suggested name is in the same file as the typo itself.\n\nSome UI tests have also been modified to reflect this change.\n\nr? `@cjgillot`", "tree": {"sha": "72747385204335066221e6b42b394dbe368be6ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72747385204335066221e6b42b394dbe368be6ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3143472863c473d246ffb741c1bc46f2697706ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjXheqCRBK7hj4Ov3rIwAAm0oIAIJk89QjjeZKTLfP+WXPyKD/\nEEmYRfQ6NQMGg3N66JwgqiATQIJBzAVzbjMs8zssaapsq4veeh/WoP0nui7yy8xi\nN+C+5+mkwz+uQepVQQ26a+/jFUhR3b3sS2EORDwSxvGlH14kGRDTQydGqMdNnFCN\nsRQEzR/Gpd678C2fBiwakowTlmS4hiGN6bMyiq9zQFAUBcZQsrZfGgmoFK15Ve4M\nbca0uVAgwutjswzeCfA8XNgCxdnlt4wYEWmC74oJIYnmGbLvxkjjvLs1z+GW9TdA\ny61+0fnVQmpdx/DJZEQS5NjKppgKtwr1NGk2gTuy0ZpnoZX/juxNRX32WxECABw=\n=WiBV\n-----END PGP SIGNATURE-----\n", "payload": "tree 72747385204335066221e6b42b394dbe368be6ad\nparent b4cf523cb5aee9f65bbc53bb19931e9a64838982\nparent 0eaf6d518026ccc4bd97444cd6a485accdc79878\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1667110826 +0530\ncommitter GitHub <noreply@github.com> 1667110826 +0530\n\nRollup merge of #103560 - zbyrn:issue-103358-fix, r=cjgillot\n\nPoint only to the identifiers in the typo suggestions of shadowed names instead of the entire struct\n\nFixes #103358.\n\nAs discussed in the issue, the `Span` of the candidate `Ident` for a typo replacement is stored alongside its `Symbol` in `TypoSuggestion`. Then, the span of the identifier is what the \"you might have meant to refer to\" note is pointed at, rather than the entire struct definition.\n\nComments in #103111 and the issue both suggest that it is desirable to:\n1. include names defined in the same crate as the typo,\n2. ignore names defined elsewhere such as in `std`, _and_\n3. include names introduced indirectly via `use`.\n\nSince a name from another crate but introduced via `use` has non-local `def_id`, to achieve this, a suggestion is displayed if either the `def_id` of the suggested name is local, or the `span` of the suggested name is in the same file as the typo itself.\n\nSome UI tests have also been modified to reflect this change.\n\nr? `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3143472863c473d246ffb741c1bc46f2697706ec", "html_url": "https://github.com/rust-lang/rust/commit/3143472863c473d246ffb741c1bc46f2697706ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3143472863c473d246ffb741c1bc46f2697706ec/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4cf523cb5aee9f65bbc53bb19931e9a64838982", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4cf523cb5aee9f65bbc53bb19931e9a64838982", "html_url": "https://github.com/rust-lang/rust/commit/b4cf523cb5aee9f65bbc53bb19931e9a64838982"}, {"sha": "0eaf6d518026ccc4bd97444cd6a485accdc79878", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eaf6d518026ccc4bd97444cd6a485accdc79878", "html_url": "https://github.com/rust-lang/rust/commit/0eaf6d518026ccc4bd97444cd6a485accdc79878"}], "stats": {"total": 102, "additions": 63, "deletions": 39}, "files": [{"sha": "5029c33996329eb00fbfa6c888a1828413619405", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3143472863c473d246ffb741c1bc46f2697706ec/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3143472863c473d246ffb741c1bc46f2697706ec/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=3143472863c473d246ffb741c1bc46f2697706ec", "patch": "@@ -58,16 +58,32 @@ pub(crate) enum SuggestionTarget {\n #[derive(Debug)]\n pub(crate) struct TypoSuggestion {\n     pub candidate: Symbol,\n+    /// The source location where the name is defined; None if the name is not defined\n+    /// in source e.g. primitives\n+    pub span: Option<Span>,\n     pub res: Res,\n     pub target: SuggestionTarget,\n }\n \n impl TypoSuggestion {\n-    pub(crate) fn typo_from_res(candidate: Symbol, res: Res) -> TypoSuggestion {\n-        Self { candidate, res, target: SuggestionTarget::SimilarlyNamed }\n+    pub(crate) fn typo_from_ident(ident: Ident, res: Res) -> TypoSuggestion {\n+        Self {\n+            candidate: ident.name,\n+            span: Some(ident.span),\n+            res,\n+            target: SuggestionTarget::SimilarlyNamed,\n+        }\n+    }\n+    pub(crate) fn typo_from_name(candidate: Symbol, res: Res) -> TypoSuggestion {\n+        Self { candidate, span: None, res, target: SuggestionTarget::SimilarlyNamed }\n     }\n-    pub(crate) fn single_item_from_res(candidate: Symbol, res: Res) -> TypoSuggestion {\n-        Self { candidate, res, target: SuggestionTarget::SingleItem }\n+    pub(crate) fn single_item_from_ident(ident: Ident, res: Res) -> TypoSuggestion {\n+        Self {\n+            candidate: ident.name,\n+            span: Some(ident.span),\n+            res,\n+            target: SuggestionTarget::SingleItem,\n+        }\n     }\n }\n \n@@ -490,7 +506,7 @@ impl<'a> Resolver<'a> {\n             if let Some(binding) = resolution.borrow().binding {\n                 let res = binding.res();\n                 if filter_fn(res) && ctxt.map_or(true, |ctxt| ctxt == key.ident.span.ctxt()) {\n-                    names.push(TypoSuggestion::typo_from_res(key.ident.name, res));\n+                    names.push(TypoSuggestion::typo_from_ident(key.ident, res));\n                 }\n             }\n         }\n@@ -1145,7 +1161,7 @@ impl<'a> Resolver<'a> {\n                                 .get(&expn_id)\n                                 .into_iter()\n                                 .flatten()\n-                                .map(|ident| TypoSuggestion::typo_from_res(ident.name, res)),\n+                                .map(|ident| TypoSuggestion::typo_from_ident(*ident, res)),\n                         );\n                     }\n                 }\n@@ -1164,7 +1180,7 @@ impl<'a> Resolver<'a> {\n                                 suggestions.extend(\n                                     ext.helper_attrs\n                                         .iter()\n-                                        .map(|name| TypoSuggestion::typo_from_res(*name, res)),\n+                                        .map(|name| TypoSuggestion::typo_from_name(*name, res)),\n                                 );\n                             }\n                         }\n@@ -1174,8 +1190,8 @@ impl<'a> Resolver<'a> {\n                     if let MacroRulesScope::Binding(macro_rules_binding) = macro_rules_scope.get() {\n                         let res = macro_rules_binding.binding.res();\n                         if filter_fn(res) {\n-                            suggestions.push(TypoSuggestion::typo_from_res(\n-                                macro_rules_binding.ident.name,\n+                            suggestions.push(TypoSuggestion::typo_from_ident(\n+                                macro_rules_binding.ident,\n                                 res,\n                             ))\n                         }\n@@ -1193,7 +1209,7 @@ impl<'a> Resolver<'a> {\n                     suggestions.extend(this.macro_use_prelude.iter().filter_map(\n                         |(name, binding)| {\n                             let res = binding.res();\n-                            filter_fn(res).then_some(TypoSuggestion::typo_from_res(*name, res))\n+                            filter_fn(res).then_some(TypoSuggestion::typo_from_name(*name, res))\n                         },\n                     ));\n                 }\n@@ -1203,22 +1219,22 @@ impl<'a> Resolver<'a> {\n                         suggestions.extend(\n                             BUILTIN_ATTRIBUTES\n                                 .iter()\n-                                .map(|attr| TypoSuggestion::typo_from_res(attr.name, res)),\n+                                .map(|attr| TypoSuggestion::typo_from_name(attr.name, res)),\n                         );\n                     }\n                 }\n                 Scope::ExternPrelude => {\n                     suggestions.extend(this.extern_prelude.iter().filter_map(|(ident, _)| {\n                         let res = Res::Def(DefKind::Mod, CRATE_DEF_ID.to_def_id());\n-                        filter_fn(res).then_some(TypoSuggestion::typo_from_res(ident.name, res))\n+                        filter_fn(res).then_some(TypoSuggestion::typo_from_ident(*ident, res))\n                     }));\n                 }\n                 Scope::ToolPrelude => {\n                     let res = Res::NonMacroAttr(NonMacroAttrKind::Tool);\n                     suggestions.extend(\n                         this.registered_tools\n                             .iter()\n-                            .map(|ident| TypoSuggestion::typo_from_res(ident.name, res)),\n+                            .map(|ident| TypoSuggestion::typo_from_ident(*ident, res)),\n                     );\n                 }\n                 Scope::StdLibPrelude => {\n@@ -1235,7 +1251,8 @@ impl<'a> Resolver<'a> {\n                 Scope::BuiltinTypes => {\n                     suggestions.extend(PrimTy::ALL.iter().filter_map(|prim_ty| {\n                         let res = Res::PrimTy(*prim_ty);\n-                        filter_fn(res).then_some(TypoSuggestion::typo_from_res(prim_ty.name(), res))\n+                        filter_fn(res)\n+                            .then_some(TypoSuggestion::typo_from_name(prim_ty.name(), res))\n                     }))\n                 }\n             }"}, {"sha": "103187b00d1b7391788fb377a10e8e17ed864229", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3143472863c473d246ffb741c1bc46f2697706ec/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3143472863c473d246ffb741c1bc46f2697706ec/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=3143472863c473d246ffb741c1bc46f2697706ec", "patch": "@@ -150,15 +150,15 @@ struct BaseError {\n #[derive(Debug)]\n enum TypoCandidate {\n     Typo(TypoSuggestion),\n-    Shadowed(Res),\n+    Shadowed(Res, Option<Span>),\n     None,\n }\n \n impl TypoCandidate {\n     fn to_opt_suggestion(self) -> Option<TypoSuggestion> {\n         match self {\n             TypoCandidate::Typo(sugg) => Some(sugg),\n-            TypoCandidate::Shadowed(_) | TypoCandidate::None => None,\n+            TypoCandidate::Shadowed(_, _) | TypoCandidate::None => None,\n         }\n     }\n }\n@@ -691,9 +691,20 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let is_expected = &|res| source.is_expected(res);\n         let ident_span = path.last().map_or(span, |ident| ident.ident.span);\n         let typo_sugg = self.lookup_typo_candidate(path, source.namespace(), is_expected);\n-        if let TypoCandidate::Shadowed(res) = typo_sugg\n-            && let Some(id) = res.opt_def_id()\n-            && let Some(sugg_span) = self.r.opt_span(id)\n+        let is_in_same_file = &|sp1, sp2| {\n+            let source_map = self.r.session.source_map();\n+            let file1 = source_map.span_to_filename(sp1);\n+            let file2 = source_map.span_to_filename(sp2);\n+            file1 == file2\n+        };\n+        // print 'you might have meant' if the candidate is (1) is a shadowed name with\n+        // accessible definition and (2) either defined in the same crate as the typo\n+        // (could be in a different file) or introduced in the same file as the typo\n+        // (could belong to a different crate)\n+        if let TypoCandidate::Shadowed(res, Some(sugg_span)) = typo_sugg\n+            && res\n+                .opt_def_id()\n+                .map_or(false, |id| id.is_local() || is_in_same_file(span, sugg_span))\n         {\n             err.span_label(\n                 sugg_span,\n@@ -970,10 +981,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         .collect();\n                 if targets.len() == 1 {\n                     let target = targets[0];\n-                    return Some(TypoSuggestion::single_item_from_res(\n-                        target.0.ident.name,\n-                        target.1,\n-                    ));\n+                    return Some(TypoSuggestion::single_item_from_ident(target.0.ident, target.1));\n                 }\n             }\n         }\n@@ -1615,7 +1623,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 // Locals and type parameters\n                 for (ident, &res) in &rib.bindings {\n                     if filter_fn(res) && ident.span.ctxt() == rib_ctxt {\n-                        names.push(TypoSuggestion::typo_from_res(ident.name, res));\n+                        names.push(TypoSuggestion::typo_from_ident(*ident, res));\n                     }\n                 }\n \n@@ -1644,9 +1652,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                                             Res::Def(DefKind::Mod, crate_id.as_def_id());\n \n                                         if filter_fn(crate_mod) {\n-                                            Some(TypoSuggestion::typo_from_res(\n-                                                ident.name, crate_mod,\n-                                            ))\n+                                            Some(TypoSuggestion::typo_from_ident(*ident, crate_mod))\n                                         } else {\n                                             None\n                                         }\n@@ -1665,7 +1671,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             // Add primitive types to the mix\n             if filter_fn(Res::PrimTy(PrimTy::Bool)) {\n                 names.extend(PrimTy::ALL.iter().map(|prim_ty| {\n-                    TypoSuggestion::typo_from_res(prim_ty.name(), Res::PrimTy(*prim_ty))\n+                    TypoSuggestion::typo_from_name(prim_ty.name(), Res::PrimTy(*prim_ty))\n                 }))\n             }\n         } else {\n@@ -1692,7 +1698,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     return TypoCandidate::None;\n                 };\n                 if found == name {\n-                    TypoCandidate::Shadowed(sugg.res)\n+                    TypoCandidate::Shadowed(sugg.res, sugg.span)\n                 } else {\n                     TypoCandidate::Typo(sugg)\n                 }"}, {"sha": "f0eaa1a5c64c475d79f63a5d460e9c8c7956c1cb", "filename": "src/test/ui/lexical-scopes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3143472863c473d246ffb741c1bc46f2697706ec/src%2Ftest%2Fui%2Flexical-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3143472863c473d246ffb741c1bc46f2697706ec/src%2Ftest%2Fui%2Flexical-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexical-scopes.stderr?ref=3143472863c473d246ffb741c1bc46f2697706ec", "patch": "@@ -2,7 +2,7 @@ error[E0574]: expected struct, variant or union type, found type parameter `T`\n   --> $DIR/lexical-scopes.rs:3:13\n    |\n LL | struct T { i: i32 }\n-   | ------------------- you might have meant to refer to this struct\n+   |        - you might have meant to refer to this struct\n LL | fn f<T>() {\n    |      - found this type parameter\n LL |     let t = T { i: 0 };"}, {"sha": "5790e425c0a2352b48f31e24d2d6e139bff16aa0", "filename": "src/test/ui/resolve/point-at-type-parameter-shadowing-another-type.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3143472863c473d246ffb741c1bc46f2697706ec/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3143472863c473d246ffb741c1bc46f2697706ec/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr?ref=3143472863c473d246ffb741c1bc46f2697706ec", "patch": "@@ -1,16 +1,14 @@\n error[E0574]: expected struct, variant or union type, found type parameter `Baz`\n   --> $DIR/point-at-type-parameter-shadowing-another-type.rs:16:13\n    |\n-LL | / struct Baz {\n-LL | |     num: usize,\n-LL | | }\n-   | |_- you might have meant to refer to this struct\n-LL |\n-LL |   impl<Baz> Foo<Baz> for Bar {\n-   |        --- found this type parameter\n+LL | struct Baz {\n+   |        --- you might have meant to refer to this struct\n ...\n-LL |               Baz { num } => num,\n-   |               ^^^ not a struct, variant or union type\n+LL | impl<Baz> Foo<Baz> for Bar {\n+   |      --- found this type parameter\n+...\n+LL |             Baz { num } => num,\n+   |             ^^^ not a struct, variant or union type\n \n error: aborting due to previous error\n "}, {"sha": "057d40ac0cb92028f024f175166d33e7257f4b12", "filename": "src/test/ui/span/issue-35987.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3143472863c473d246ffb741c1bc46f2697706ec/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3143472863c473d246ffb741c1bc46f2697706ec/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr?ref=3143472863c473d246ffb741c1bc46f2697706ec", "patch": "@@ -1,6 +1,9 @@\n error[E0404]: expected trait, found type parameter `Add`\n   --> $DIR/issue-35987.rs:5:21\n    |\n+LL | use std::ops::Add;\n+   |               --- you might have meant to refer to this trait\n+LL |\n LL | impl<T: Clone, Add> Add for Foo<T> {\n    |                ---  ^^^ not a trait\n    |                |"}]}