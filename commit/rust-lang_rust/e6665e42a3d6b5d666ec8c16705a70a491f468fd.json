{"sha": "e6665e42a3d6b5d666ec8c16705a70a491f468fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NjY1ZTQyYTNkNmI1ZDY2NmVjOGMxNjcwNWE3MGE0OTFmNDY4ZmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-20T10:26:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-20T10:26:01Z"}, "message": "Auto merge of #6475 - matsujika:capitalized_acronyms, r=flip1995\n\nAdd new lint `upper_case_acronyms`\n\nClose #1335\nI need some reviews on the English sentences because I feel they're messed up. ;)\n\nchangelog: Add new lint `upper_case_acronyms`", "tree": {"sha": "5d61a734be78b20358ae28f9530597e695a2bec6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d61a734be78b20358ae28f9530597e695a2bec6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6665e42a3d6b5d666ec8c16705a70a491f468fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6665e42a3d6b5d666ec8c16705a70a491f468fd", "html_url": "https://github.com/rust-lang/rust/commit/e6665e42a3d6b5d666ec8c16705a70a491f468fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6665e42a3d6b5d666ec8c16705a70a491f468fd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97", "html_url": "https://github.com/rust-lang/rust/commit/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97"}, {"sha": "0ccb491caa668d55522c1bc78e368329a310db4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ccb491caa668d55522c1bc78e368329a310db4c", "html_url": "https://github.com/rust-lang/rust/commit/0ccb491caa668d55522c1bc78e368329a310db4c"}], "stats": {"total": 307, "additions": 255, "deletions": 52}, "files": [{"sha": "04f042b2debf2375b3f174a46e35512f4d2d4e76", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -2274,6 +2274,7 @@ Released 2018-09-13\n [`unusual_byte_groupings`]: https://rust-lang.github.io/rust-clippy/master/index.html#unusual_byte_groupings\n [`unwrap_in_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_in_result\n [`unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\n+[`upper_case_acronyms`]: https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n [`use_debug`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_debug\n [`use_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_self\n [`used_underscore_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding"}, {"sha": "f21a734bb439fb4cbc273207d6638aacccbfc8de", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -57,9 +57,9 @@ impl CognitiveComplexity {\n \n         let expr = &body.value;\n \n-        let mut helper = CCHelper { cc: 1, returns: 0 };\n+        let mut helper = CcHelper { cc: 1, returns: 0 };\n         helper.visit_expr(expr);\n-        let CCHelper { cc, returns } = helper;\n+        let CcHelper { cc, returns } = helper;\n         let ret_ty = cx.typeck_results().node_type(expr.hir_id);\n         let ret_adjust = if is_type_diagnostic_item(cx, ret_ty, sym::result_type) {\n             returns\n@@ -136,12 +136,12 @@ impl<'tcx> LateLintPass<'tcx> for CognitiveComplexity {\n     }\n }\n \n-struct CCHelper {\n+struct CcHelper {\n     cc: u64,\n     returns: u64,\n }\n \n-impl<'tcx> Visitor<'tcx> for CCHelper {\n+impl<'tcx> Visitor<'tcx> for CcHelper {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, e: &'tcx Expr<'_>) {"}, {"sha": "260b8988d371113adf83b4801033215edc05e5c3", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -46,8 +46,8 @@ declare_lint_pass!(IntPlusOne => [INT_PLUS_ONE]);\n \n #[derive(Copy, Clone)]\n enum Side {\n-    LHS,\n-    RHS,\n+    Lhs,\n+    Rhs,\n }\n \n impl IntPlusOne {\n@@ -66,11 +66,11 @@ impl IntPlusOne {\n                 match (lhskind.node, &lhslhs.kind, &lhsrhs.kind) {\n                     // `-1 + x`\n                     (BinOpKind::Add, &ExprKind::Lit(ref lit), _) if Self::check_lit(lit, -1) => {\n-                        Self::generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS)\n+                        Self::generate_recommendation(cx, binop, lhsrhs, rhs, Side::Lhs)\n                     },\n                     // `x - 1`\n                     (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n-                        Self::generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS)\n+                        Self::generate_recommendation(cx, binop, lhslhs, rhs, Side::Lhs)\n                     },\n                     _ => None,\n                 }\n@@ -82,10 +82,10 @@ impl IntPlusOne {\n                 match (&rhslhs.kind, &rhsrhs.kind) {\n                     // `y + 1` and `1 + y`\n                     (&ExprKind::Lit(ref lit), _) if Self::check_lit(lit, 1) => {\n-                        Self::generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS)\n+                        Self::generate_recommendation(cx, binop, rhsrhs, lhs, Side::Rhs)\n                     },\n                     (_, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n-                        Self::generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS)\n+                        Self::generate_recommendation(cx, binop, rhslhs, lhs, Side::Rhs)\n                     },\n                     _ => None,\n                 }\n@@ -97,10 +97,10 @@ impl IntPlusOne {\n                 match (&lhslhs.kind, &lhsrhs.kind) {\n                     // `1 + x` and `x + 1`\n                     (&ExprKind::Lit(ref lit), _) if Self::check_lit(lit, 1) => {\n-                        Self::generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS)\n+                        Self::generate_recommendation(cx, binop, lhsrhs, rhs, Side::Lhs)\n                     },\n                     (_, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n-                        Self::generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS)\n+                        Self::generate_recommendation(cx, binop, lhslhs, rhs, Side::Lhs)\n                     },\n                     _ => None,\n                 }\n@@ -110,11 +110,11 @@ impl IntPlusOne {\n                 match (rhskind.node, &rhslhs.kind, &rhsrhs.kind) {\n                     // `-1 + y`\n                     (BinOpKind::Add, &ExprKind::Lit(ref lit), _) if Self::check_lit(lit, -1) => {\n-                        Self::generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS)\n+                        Self::generate_recommendation(cx, binop, rhsrhs, lhs, Side::Rhs)\n                     },\n                     // `y - 1`\n                     (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n-                        Self::generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS)\n+                        Self::generate_recommendation(cx, binop, rhslhs, lhs, Side::Rhs)\n                     },\n                     _ => None,\n                 }\n@@ -138,8 +138,8 @@ impl IntPlusOne {\n         if let Some(snippet) = snippet_opt(cx, node.span) {\n             if let Some(other_side_snippet) = snippet_opt(cx, other_side.span) {\n                 let rec = match side {\n-                    Side::LHS => Some(format!(\"{} {} {}\", snippet, binop_string, other_side_snippet)),\n-                    Side::RHS => Some(format!(\"{} {} {}\", other_side_snippet, binop_string, snippet)),\n+                    Side::Lhs => Some(format!(\"{} {} {}\", snippet, binop_string, other_side_snippet)),\n+                    Side::Rhs => Some(format!(\"{} {} {}\", other_side_snippet, binop_string, snippet)),\n                 };\n                 return rec;\n             }"}, {"sha": "53764bb73903adbafbc0900554f5840db5f8482c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -341,6 +341,7 @@ mod unused_self;\n mod unused_unit;\n mod unwrap;\n mod unwrap_in_result;\n+mod upper_case_acronyms;\n mod use_self;\n mod useless_conversion;\n mod vec;\n@@ -944,6 +945,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unwrap::PANICKING_UNWRAP,\n         &unwrap::UNNECESSARY_UNWRAP,\n         &unwrap_in_result::UNWRAP_IN_RESULT,\n+        &upper_case_acronyms::UPPER_CASE_ACRONYMS,\n         &use_self::USE_SELF,\n         &useless_conversion::USELESS_CONVERSION,\n         &vec::USELESS_VEC,\n@@ -983,7 +985,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     }\n     store.register_late_pass(|| box utils::author::Author);\n     store.register_late_pass(|| box await_holding_invalid::AwaitHolding);\n-    store.register_late_pass(|| box serde_api::SerdeAPI);\n+    store.register_late_pass(|| box serde_api::SerdeApi);\n     let vec_box_size_threshold = conf.vec_box_size_threshold;\n     store.register_late_pass(move || box types::Types::new(vec_box_size_threshold));\n     store.register_late_pass(|| box booleans::NonminimalBool);\n@@ -1174,6 +1176,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n     store.register_early_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold));\n     store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n+    store.register_early_pass(|| box upper_case_acronyms::UpperCaseAcronyms);\n     store.register_late_pass(|| box default::Default::default());\n     store.register_late_pass(|| box unused_self::UnusedSelf);\n     store.register_late_pass(|| box mutable_debug_assertion::DebugAssertWithMutCall);\n@@ -1659,6 +1662,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unused_unit::UNUSED_UNIT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n         LintId::of(&unwrap::UNNECESSARY_UNWRAP),\n+        LintId::of(&upper_case_acronyms::UPPER_CASE_ACRONYMS),\n         LintId::of(&useless_conversion::USELESS_CONVERSION),\n         LintId::of(&vec::USELESS_VEC),\n         LintId::of(&vec_init_then_push::VEC_INIT_THEN_PUSH),\n@@ -1776,6 +1780,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&unused_unit::UNUSED_UNIT),\n+        LintId::of(&upper_case_acronyms::UPPER_CASE_ACRONYMS),\n         LintId::of(&write::PRINTLN_EMPTY_STRING),\n         LintId::of(&write::PRINT_LITERAL),\n         LintId::of(&write::PRINT_WITH_NEWLINE),"}, {"sha": "90cf1b6c8613577bbf31d523844a05494dbd5169", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -18,9 +18,9 @@ declare_clippy_lint! {\n     \"various things that will negatively affect your serde experience\"\n }\n \n-declare_lint_pass!(SerdeAPI => [SERDE_API_MISUSE]);\n+declare_lint_pass!(SerdeApi => [SERDE_API_MISUSE]);\n \n-impl<'tcx> LateLintPass<'tcx> for SerdeAPI {\n+impl<'tcx> LateLintPass<'tcx> for SerdeApi {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if let ItemKind::Impl(Impl {\n             of_trait: Some(ref trait_ref),"}, {"sha": "61e7031716a9d8098f1fd9288700c699b75d3309", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -0,0 +1,93 @@\n+use crate::utils::span_lint_and_sugg;\n+use if_chain::if_chain;\n+use itertools::Itertools;\n+use rustc_ast::ast::{Item, ItemKind, Variant};\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::Ident;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for camel case name containing a capitalized acronym.\n+    ///\n+    /// **Why is this bad?** In CamelCase, acronyms count as one word.\n+    /// See [naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#casing-conforms-to-rfc-430-c-case)\n+    /// for more.\n+    ///\n+    /// **Known problems:** When two acronyms are contiguous, the lint can't tell where\n+    /// the first acronym ends and the second starts, so it suggests to lowercase all of\n+    /// the letters in the second acronym.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// struct HTTPResponse;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct HttpResponse;\n+    /// ```\n+    pub UPPER_CASE_ACRONYMS,\n+    style,\n+    \"capitalized acronyms are against the naming convention\"\n+}\n+\n+declare_lint_pass!(UpperCaseAcronyms => [UPPER_CASE_ACRONYMS]);\n+\n+fn correct_ident(ident: &str) -> String {\n+    let ident = ident.chars().rev().collect::<String>();\n+    let fragments = ident\n+        .split_inclusive(|x: char| !x.is_ascii_lowercase())\n+        .rev()\n+        .map(|x| x.chars().rev().collect::<String>());\n+\n+    let mut ident = fragments.clone().next().unwrap();\n+    for (ref prev, ref curr) in fragments.tuple_windows() {\n+        if [prev, curr]\n+            .iter()\n+            .all(|s| s.len() == 1 && s.chars().next().unwrap().is_ascii_uppercase())\n+        {\n+            ident.push_str(&curr.to_ascii_lowercase());\n+        } else {\n+            ident.push_str(curr);\n+        }\n+    }\n+    ident\n+}\n+\n+fn check_ident(cx: &EarlyContext<'_>, ident: &Ident) {\n+    let span = ident.span;\n+    let ident = &ident.as_str();\n+    let corrected = correct_ident(ident);\n+    if ident != &corrected {\n+        span_lint_and_sugg(\n+            cx,\n+            UPPER_CASE_ACRONYMS,\n+            span,\n+            &format!(\"name `{}` contains a capitalized acronym\", ident),\n+            \"consider making the acronym lowercase, except the initial letter\",\n+            corrected,\n+            Applicability::MaybeIncorrect,\n+        )\n+    }\n+}\n+\n+impl EarlyLintPass for UpperCaseAcronyms {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, it: &Item) {\n+        if_chain! {\n+            if !in_external_macro(cx.sess(), it.span);\n+            if matches!(\n+                it.kind,\n+                ItemKind::TyAlias(..) | ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Trait(..)\n+            );\n+            then {\n+                check_ident(cx, &it.ident);\n+            }\n+        }\n+    }\n+\n+    fn check_variant(&mut self, cx: &EarlyContext<'_>, v: &Variant) {\n+        check_ident(cx, &v.ident);\n+    }\n+}"}, {"sha": "383bbb49dbe88567b7b271fe7ce6a749b4a2c937", "filename": "tests/ui/complex_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.rs?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -11,7 +11,7 @@ struct S {\n     f: Vec<Vec<Box<(u32, u32, u32, u32)>>>,\n }\n \n-struct TS(Vec<Vec<Box<(u32, u32, u32, u32)>>>);\n+struct Ts(Vec<Vec<Box<(u32, u32, u32, u32)>>>);\n \n enum E {\n     Tuple(Vec<Vec<Box<(u32, u32, u32, u32)>>>),"}, {"sha": "7fcbb4bce88365bde1e56cb33b223555adbbf5b8", "filename": "tests/ui/complex_types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fcomplex_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fcomplex_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.stderr?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -21,7 +21,7 @@ LL |     f: Vec<Vec<Box<(u32, u32, u32, u32)>>>,\n error: very complex type used. Consider factoring parts into `type` definitions\n   --> $DIR/complex_types.rs:14:11\n    |\n-LL | struct TS(Vec<Vec<Box<(u32, u32, u32, u32)>>>);\n+LL | struct Ts(Vec<Vec<Box<(u32, u32, u32, u32)>>>);\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: very complex type used. Consider factoring parts into `type` definitions"}, {"sha": "5409f36b3f1ede4e5046f3dd881c3e57ae21928f", "filename": "tests/ui/crashes/ice-6256.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fcrashes%2Fice-6256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fcrashes%2Fice-6256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6256.rs?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -1,5 +1,6 @@\n // originally from rustc ./src/test/ui/regions/issue-78262.rs\n // ICE: to get the signature of a closure, use substs.as_closure().sig() not fn_sig()\n+#![allow(clippy::upper_case_acronyms)]\n \n trait TT {}\n "}, {"sha": "d1a8bdc3c8d8c867c1700dd4d58dc16ed1f58925", "filename": "tests/ui/crashes/ice-6256.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6256.stderr?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/ice-6256.rs:11:28\n+  --> $DIR/ice-6256.rs:12:28\n    |\n LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n    |                            ^^^^ lifetime mismatch\n    |\n    = note: expected reference `&(dyn TT + 'static)`\n               found reference `&dyn TT`\n-note: the anonymous lifetime #1 defined on the body at 11:13...\n-  --> $DIR/ice-6256.rs:11:13\n+note: the anonymous lifetime #1 defined on the body at 12:13...\n+  --> $DIR/ice-6256.rs:12:13\n    |\n LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n    |             ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "89d99dcf0c867b7ccaec389dd674c2841ea042df", "filename": "tests/ui/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.rs?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -1,6 +1,6 @@\n #![feature(non_ascii_idents)]\n #![warn(clippy::enum_variant_names, clippy::pub_enum_variant_names)]\n-#![allow(non_camel_case_types)]\n+#![allow(non_camel_case_types, clippy::upper_case_acronyms)]\n \n enum FakeCallType {\n     CALL,"}, {"sha": "71fb3565224e44534757a84d4916c6212a73d9b9", "filename": "tests/ui/needless_question_mark.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fneedless_question_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fneedless_question_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.fixed?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -1,7 +1,13 @@\n // run-rustfix\n \n #![warn(clippy::needless_question_mark)]\n-#![allow(clippy::needless_return, clippy::unnecessary_unwrap, dead_code, unused_must_use)]\n+#![allow(\n+    clippy::needless_return,\n+    clippy::unnecessary_unwrap,\n+    clippy::upper_case_acronyms,\n+    dead_code,\n+    unused_must_use\n+)]\n #![feature(custom_inner_attributes)]\n \n struct TO {"}, {"sha": "e31f6f48fa7c7dc9a474419a3b23a082deea2296", "filename": "tests/ui/needless_question_mark.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.rs?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -1,7 +1,13 @@\n // run-rustfix\n \n #![warn(clippy::needless_question_mark)]\n-#![allow(clippy::needless_return, clippy::unnecessary_unwrap, dead_code, unused_must_use)]\n+#![allow(\n+    clippy::needless_return,\n+    clippy::unnecessary_unwrap,\n+    clippy::upper_case_acronyms,\n+    dead_code,\n+    unused_must_use\n+)]\n #![feature(custom_inner_attributes)]\n \n struct TO {"}, {"sha": "567bc518a3fda1003c5a6ee35dbf0596e9ffa93a", "filename": "tests/ui/needless_question_mark.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fneedless_question_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fneedless_question_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.stderr?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -1,85 +1,85 @@\n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:17:12\n+  --> $DIR/needless_question_mark.rs:23:12\n    |\n LL |     return Some(to.magic?);\n    |            ^^^^^^^^^^^^^^^ help: try: `to.magic`\n    |\n    = note: `-D clippy::needless-question-mark` implied by `-D warnings`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:25:12\n+  --> $DIR/needless_question_mark.rs:31:12\n    |\n LL |     return Some(to.magic?)\n    |            ^^^^^^^^^^^^^^^ help: try: `to.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:30:5\n+  --> $DIR/needless_question_mark.rs:36:5\n    |\n LL |     Some(to.magic?)\n    |     ^^^^^^^^^^^^^^^ help: try: `to.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:35:21\n+  --> $DIR/needless_question_mark.rs:41:21\n    |\n LL |     to.and_then(|t| Some(t.magic?))\n    |                     ^^^^^^^^^^^^^^ help: try: `t.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:44:9\n+  --> $DIR/needless_question_mark.rs:50:9\n    |\n LL |         Some(t.magic?)\n    |         ^^^^^^^^^^^^^^ help: try: `t.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:49:12\n+  --> $DIR/needless_question_mark.rs:55:12\n    |\n LL |     return Ok(tr.magic?);\n    |            ^^^^^^^^^^^^^ help: try: `tr.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:56:12\n+  --> $DIR/needless_question_mark.rs:62:12\n    |\n LL |     return Ok(tr.magic?)\n    |            ^^^^^^^^^^^^^ help: try: `tr.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:60:5\n+  --> $DIR/needless_question_mark.rs:66:5\n    |\n LL |     Ok(tr.magic?)\n    |     ^^^^^^^^^^^^^ help: try: `tr.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:64:21\n+  --> $DIR/needless_question_mark.rs:70:21\n    |\n LL |     tr.and_then(|t| Ok(t.magic?))\n    |                     ^^^^^^^^^^^^ help: try: `t.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:72:9\n+  --> $DIR/needless_question_mark.rs:78:9\n    |\n LL |         Ok(t.magic?)\n    |         ^^^^^^^^^^^^ help: try: `t.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:79:16\n+  --> $DIR/needless_question_mark.rs:85:16\n    |\n LL |         return Ok(t.magic?);\n    |                ^^^^^^^^^^^^ help: try: `t.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:132:9\n+  --> $DIR/needless_question_mark.rs:138:9\n    |\n LL |         Ok(to.magic?) // should be triggered\n    |         ^^^^^^^^^^^^^ help: try: `to.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:148:9\n+  --> $DIR/needless_question_mark.rs:154:9\n    |\n LL |         Some(to.magic?) // should be triggered\n    |         ^^^^^^^^^^^^^^^ help: try: `to.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:156:9\n+  --> $DIR/needless_question_mark.rs:162:9\n    |\n LL |         Ok(to.magic?) // should be triggered\n    |         ^^^^^^^^^^^^^ help: try: `to.magic`"}, {"sha": "2f8c7cec50f8ec47f1802a554e3d381a859ba3a3", "filename": "tests/ui/suspicious_operation_groupings.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_operation_groupings.rs?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -27,7 +27,7 @@ fn buggy_ab_cmp(s1: &S, s2: &S) -> bool {\n     s1.a < s2.a && s1.a < s2.b\n }\n \n-struct SAOnly {\n+struct SaOnly {\n     a: i32,\n }\n \n@@ -37,13 +37,13 @@ impl S {\n     }\n }\n \n-fn do_not_give_bad_suggestions_for_this_unusual_expr(s1: &S, s2: &SAOnly) -> bool {\n+fn do_not_give_bad_suggestions_for_this_unusual_expr(s1: &S, s2: &SaOnly) -> bool {\n     // This is superficially similar to `buggy_ab_cmp`, but we should not suggest\n     // `s2.b` since that is invalid.\n     s1.a < s2.a && s1.a() < s1.b\n }\n \n-fn do_not_give_bad_suggestions_for_this_macro_expr(s1: &S, s2: &SAOnly) -> bool {\n+fn do_not_give_bad_suggestions_for_this_macro_expr(s1: &S, s2: &SaOnly) -> bool {\n     macro_rules! s1 {\n         () => {\n             S {\n@@ -60,7 +60,7 @@ fn do_not_give_bad_suggestions_for_this_macro_expr(s1: &S, s2: &SAOnly) -> bool\n     s1.a < s2.a && s1!().a < s1.b\n }\n \n-fn do_not_give_bad_suggestions_for_this_incorrect_expr(s1: &S, s2: &SAOnly) -> bool {\n+fn do_not_give_bad_suggestions_for_this_incorrect_expr(s1: &S, s2: &SaOnly) -> bool {\n     // There's two `s1.b`, but we should not suggest `s2.b` since that is invalid\n     s1.a < s2.a && s1.b < s1.b\n }"}, {"sha": "9e213aab68c5704a2d2079391a6e0a56a7e2bc6f", "filename": "tests/ui/transmute_ptr_to_ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Ftransmute_ptr_to_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Ftransmute_ptr_to_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ptr.rs?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -53,10 +53,10 @@ fn transmute_ptr_to_ptr() {\n \n // dereferencing raw pointers in const contexts, should not lint as it's unstable (issue 5959)\n const _: &() = {\n-    struct ZST;\n-    let zst = &ZST;\n+    struct Zst;\n+    let zst = &Zst;\n \n-    unsafe { std::mem::transmute::<&'static ZST, &'static ()>(zst) }\n+    unsafe { std::mem::transmute::<&'static Zst, &'static ()>(zst) }\n };\n \n fn main() {}"}, {"sha": "13a036cd800bca172efefc5c8af8b50ec90a5e97", "filename": "tests/ui/unnested_or_patterns.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Funnested_or_patterns.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Funnested_or_patterns.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns.fixed?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -3,7 +3,7 @@\n #![feature(or_patterns)]\n #![feature(box_patterns)]\n #![warn(clippy::unnested_or_patterns)]\n-#![allow(clippy::cognitive_complexity, clippy::match_ref_pats)]\n+#![allow(clippy::cognitive_complexity, clippy::match_ref_pats, clippy::upper_case_acronyms)]\n #![allow(unreachable_patterns, irrefutable_let_patterns, unused_variables)]\n \n fn main() {"}, {"sha": "4a10cc702c401adf2a027ec11dba521a2bff7a27", "filename": "tests/ui/unnested_or_patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns.rs?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -3,7 +3,7 @@\n #![feature(or_patterns)]\n #![feature(box_patterns)]\n #![warn(clippy::unnested_or_patterns)]\n-#![allow(clippy::cognitive_complexity, clippy::match_ref_pats)]\n+#![allow(clippy::cognitive_complexity, clippy::match_ref_pats, clippy::upper_case_acronyms)]\n #![allow(unreachable_patterns, irrefutable_let_patterns, unused_variables)]\n \n fn main() {"}, {"sha": "af0b577634863b26356d271f9cd0d0c04545290a", "filename": "tests/ui/upper_case_acronyms.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupper_case_acronyms.rs?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -0,0 +1,21 @@\n+#![warn(clippy::upper_case_acronyms)]\n+\n+struct HTTPResponse; // linted\n+\n+struct CString; // not linted\n+\n+enum Flags {\n+    NS, // linted\n+    CWR,\n+    ECE,\n+    URG,\n+    ACK,\n+    PSH,\n+    RST,\n+    SYN,\n+    FIN,\n+}\n+\n+struct GCCLLVMSomething; // linted, beware that lint suggests `GccllvmSomething` instead of `GccLlvmSomething`\n+\n+fn main() {}"}, {"sha": "2065fe10bb151cdcdf905df38f9a7d7ddbaaab13", "filename": "tests/ui/upper_case_acronyms.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fupper_case_acronyms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fupper_case_acronyms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupper_case_acronyms.stderr?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -0,0 +1,70 @@\n+error: name `HTTPResponse` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:3:8\n+   |\n+LL | struct HTTPResponse; // linted\n+   |        ^^^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `HttpResponse`\n+   |\n+   = note: `-D clippy::upper-case-acronyms` implied by `-D warnings`\n+\n+error: name `NS` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:8:5\n+   |\n+LL |     NS, // linted\n+   |     ^^ help: consider making the acronym lowercase, except the initial letter (notice the capitalization): `Ns`\n+\n+error: name `CWR` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:9:5\n+   |\n+LL |     CWR,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Cwr`\n+\n+error: name `ECE` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:10:5\n+   |\n+LL |     ECE,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Ece`\n+\n+error: name `URG` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:11:5\n+   |\n+LL |     URG,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Urg`\n+\n+error: name `ACK` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:12:5\n+   |\n+LL |     ACK,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter (notice the capitalization): `Ack`\n+\n+error: name `PSH` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:13:5\n+   |\n+LL |     PSH,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Psh`\n+\n+error: name `RST` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:14:5\n+   |\n+LL |     RST,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Rst`\n+\n+error: name `SYN` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:15:5\n+   |\n+LL |     SYN,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Syn`\n+\n+error: name `FIN` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:16:5\n+   |\n+LL |     FIN,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Fin`\n+\n+error: name `GCCLLVMSomething` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:19:8\n+   |\n+LL | struct GCCLLVMSomething; // linted, beware that lint suggests `GccllvmSomething` instead of `GccLlvmSomething`\n+   |        ^^^^^^^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `GccllvmSomething`\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "bb2012441d90c591cbcb1d21e61fb5f5cc896a9b", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -3,7 +3,7 @@\n \n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n-#![allow(clippy::should_implement_trait)]\n+#![allow(clippy::should_implement_trait, clippy::upper_case_acronyms)]\n \n fn main() {}\n "}, {"sha": "ddfd2beba31078a9c2b2e36a3a74699965e5bb47", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6665e42a3d6b5d666ec8c16705a70a491f468fd/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=e6665e42a3d6b5d666ec8c16705a70a491f468fd", "patch": "@@ -3,7 +3,7 @@\n \n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n-#![allow(clippy::should_implement_trait)]\n+#![allow(clippy::should_implement_trait, clippy::upper_case_acronyms)]\n \n fn main() {}\n "}]}