{"sha": "69f74df4294cea8c8bb0095e2d73cc677f16fc48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5Zjc0ZGY0Mjk0Y2VhOGM4YmIwMDk1ZTJkNzNjYzY3N2YxNmZjNDg=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-03-31T13:01:46Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-03T16:24:21Z"}, "message": "Deny internal lints in librustc", "tree": {"sha": "a0a6a38c89b66762da770d23406169d1a1ea01c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0a6a38c89b66762da770d23406169d1a1ea01c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69f74df4294cea8c8bb0095e2d73cc677f16fc48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlyk3jUACgkQaTCGhp1Q\nZjdqqBAApwJMhxqHQOAnszWJfIb4EXZeJrpld8mxkQnTalVLB/aafe4GS6o2uo/Y\n19JLyfXzsOtlPjE+0Wf3wDPdmdvDVb9WqN0Lv5b+wnrnBh6LGLvxT5Pbd65mjPtt\nVy3dQ893KQan2blnEE+82l2uSqV7zHClESiCH0oQiYfpdL2ydp+j6jFIunv/964a\nerkcsIWPr53uK+RxDH50dlm6o1PUw7c6ua5ZBx9JmrUAtKSpn7r0Lk5tGYARpJQf\ngVnOkYMUW65Gb0qlRquA3lazbn8uf3OJDei2TdxrSVYW7ghbZFoHxnfyM7xtwDb1\n8QiFQj6Wb0q52/KJNACk3A1qkXYtzBDbGyVNxvZYy8P+oorBAB1rZ0NQVvXYjcb3\nHiuADcCkJIs5SgEMb9GtBTEQbP5xslwE3kmNXw01fghNoCKBUdjIchgDTWp5W93y\nBMCe7w8GAioatyaZ+IZ4/WCmhfDtJr2bHUzBnUBgNXHwM/vMZJ7KDUBmscXcB2kN\nN2VdkbTVI0UUbT+fo5AdENhhfwkgxsx2Izac+oVHKydrPrAcTHOv1Uhn6Jg95Iri\n3Cnldv1RA/ol0ljMxO2c2M8UDyy3QnROGLtyBVE5rEONaTgGZ476WZjKasQZULWw\nEhdjb2NcuBSLOyJNs1A8a13Gsza7Z6/7Do3O08EldEIPgV7/Un4=\n=sE4s\n-----END PGP SIGNATURE-----", "payload": "tree a0a6a38c89b66762da770d23406169d1a1ea01c7\nparent dfcd1ef102b78768351e3c31ed3c6c15c3af38e4\nauthor flip1995 <hello@philkrones.com> 1554037306 +0200\ncommitter flip1995 <hello@philkrones.com> 1554308661 +0200\n\nDeny internal lints in librustc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69f74df4294cea8c8bb0095e2d73cc677f16fc48", "html_url": "https://github.com/rust-lang/rust/commit/69f74df4294cea8c8bb0095e2d73cc677f16fc48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69f74df4294cea8c8bb0095e2d73cc677f16fc48/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfcd1ef102b78768351e3c31ed3c6c15c3af38e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfcd1ef102b78768351e3c31ed3c6c15c3af38e4", "html_url": "https://github.com/rust-lang/rust/commit/dfcd1ef102b78768351e3c31ed3c6c15c3af38e4"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "a8e5db26eadc137c36789c59d45261ec4326264d", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69f74df4294cea8c8bb0095e2d73cc677f16fc48/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f74df4294cea8c8bb0095e2d73cc677f16fc48/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=69f74df4294cea8c8bb0095e2d73cc677f16fc48", "patch": "@@ -9,7 +9,6 @@ use crate::session::Session;\n \n use std::cmp::Ord;\n use std::hash as std_hash;\n-use std::collections::HashMap;\n use std::cell::RefCell;\n \n use syntax::ast;\n@@ -394,13 +393,12 @@ impl<'a> HashStable<StableHashingContext<'a>> for DelimSpan {\n     }\n }\n \n-pub fn hash_stable_trait_impls<'a, 'gcx, W, R>(\n+pub fn hash_stable_trait_impls<'a, 'gcx, W>(\n     hcx: &mut StableHashingContext<'a>,\n     hasher: &mut StableHasher<W>,\n     blanket_impls: &[DefId],\n-    non_blanket_impls: &HashMap<fast_reject::SimplifiedType, Vec<DefId>, R>)\n-    where W: StableHasherResult,\n-          R: std_hash::BuildHasher,\n+    non_blanket_impls: &FxHashMap<fast_reject::SimplifiedType, Vec<DefId>>)\n+    where W: StableHasherResult\n {\n     {\n         let mut blanket_impls: SmallVec<[_; 8]> = blanket_impls"}, {"sha": "19663161fe3fa45bd5f49811a9e916cf433156b5", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/69f74df4294cea8c8bb0095e2d73cc677f16fc48/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f74df4294cea8c8bb0095e2d73cc677f16fc48/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=69f74df4294cea8c8bb0095e2d73cc677f16fc48", "patch": "@@ -56,7 +56,7 @@ use crate::hir::Node;\n use crate::middle::region;\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty::error::TypeError;\n-use crate::ty::{self, subst::{Subst, SubstsRef}, Region, Ty, TyCtxt, TyKind, TypeFoldable};\n+use crate::ty::{self, subst::{Subst, SubstsRef}, Region, Ty, TyCtxt, TypeFoldable};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use std::{cmp, fmt};\n use syntax_pos::{Pos, Span};\n@@ -1094,14 +1094,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 (_, false, _) => {\n                     if let Some(exp_found) = exp_found {\n                         let (def_id, ret_ty) = match exp_found.found.sty {\n-                            TyKind::FnDef(def, _) => {\n+                            ty::FnDef(def, _) => {\n                                 (Some(def), Some(self.tcx.fn_sig(def).output()))\n                             }\n                             _ => (None, None),\n                         };\n \n                         let exp_is_struct = match exp_found.expected.sty {\n-                            TyKind::Adt(def, _) => def.is_struct(),\n+                            ty::Adt(def, _) => def.is_struct(),\n                             _ => false,\n                         };\n \n@@ -1140,8 +1140,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         diag: &mut DiagnosticBuilder<'tcx>,\n     ) {\n         match (&exp_found.expected.sty, &exp_found.found.sty) {\n-            (TyKind::Adt(exp_def, exp_substs), TyKind::Ref(_, found_ty, _)) => {\n-                if let TyKind::Adt(found_def, found_substs) = found_ty.sty {\n+            (ty::Adt(exp_def, exp_substs), ty::Ref(_, found_ty, _)) => {\n+                if let ty::Adt(found_def, found_substs) = found_ty.sty {\n                     let path_str = format!(\"{:?}\", exp_def);\n                     if exp_def == &found_def {\n                         let opt_msg = \"you can convert from `&Option<T>` to `Option<&T>` using \\\n@@ -1164,17 +1164,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             let mut show_suggestion = true;\n                             for (exp_ty, found_ty) in exp_substs.types().zip(found_substs.types()) {\n                                 match exp_ty.sty {\n-                                    TyKind::Ref(_, exp_ty, _) => {\n+                                    ty::Ref(_, exp_ty, _) => {\n                                         match (&exp_ty.sty, &found_ty.sty) {\n-                                            (_, TyKind::Param(_)) |\n-                                            (_, TyKind::Infer(_)) |\n-                                            (TyKind::Param(_), _) |\n-                                            (TyKind::Infer(_), _) => {}\n+                                            (_, ty::Param(_)) |\n+                                            (_, ty::Infer(_)) |\n+                                            (ty::Param(_), _) |\n+                                            (ty::Infer(_), _) => {}\n                                             _ if ty::TyS::same_type(exp_ty, found_ty) => {}\n                                             _ => show_suggestion = false,\n                                         };\n                                     }\n-                                    TyKind::Param(_) | TyKind::Infer(_) => {}\n+                                    ty::Param(_) | ty::Infer(_) => {}\n                                     _ => show_suggestion = false,\n                                 }\n                             }"}, {"sha": "0b75cb6c8a3e29b7c18f79cb805302d484e67957", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69f74df4294cea8c8bb0095e2d73cc677f16fc48/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f74df4294cea8c8bb0095e2d73cc677f16fc48/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=69f74df4294cea8c8bb0095e2d73cc677f16fc48", "patch": "@@ -29,6 +29,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n #![allow(explicit_outlives_requirements)]\n \n #![feature(arbitrary_self_types)]"}, {"sha": "23be1bbf6c6877c2eb323bf6828a13c25f77f783", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69f74df4294cea8c8bb0095e2d73cc677f16fc48/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f74df4294cea8c8bb0095e2d73cc677f16fc48/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=69f74df4294cea8c8bb0095e2d73cc677f16fc48", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n     pub fn field_ty(self, tcx: TyCtxt<'a, 'gcx, 'tcx>, f: &Field) -> Ty<'tcx>\n     {\n         let answer = match self.ty.sty {\n-            ty::TyKind::Adt(adt_def, substs) => {\n+            ty::Adt(adt_def, substs) => {\n                 let variant_def = match self.variant_index {\n                     None => adt_def.non_enum_variant(),\n                     Some(variant_index) => {"}, {"sha": "7d47867cea12573b2ba5e34f821acf777ba58097", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69f74df4294cea8c8bb0095e2d73cc677f16fc48/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f74df4294cea8c8bb0095e2d73cc677f16fc48/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=69f74df4294cea8c8bb0095e2d73cc677f16fc48", "patch": "@@ -1,3 +1,5 @@\n+#![cfg_attr(not(stage0), allow(usage_of_ty_tykind))]\n+\n pub use self::Variance::*;\n pub use self::AssociatedItemContainer::*;\n pub use self::BorrowKind::*;"}, {"sha": "26194176350ac2a177e36a8c61649675d2a5db38", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69f74df4294cea8c8bb0095e2d73cc677f16fc48/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f74df4294cea8c8bb0095e2d73cc677f16fc48/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=69f74df4294cea8c8bb0095e2d73cc677f16fc48", "patch": "@@ -1,11 +1,10 @@\n #![allow(non_camel_case_types)]\n \n-use rustc_data_structures::sync::Lock;\n+use rustc_data_structures::{fx::FxHashMap, sync::Lock};\n \n use std::cell::{RefCell, Cell};\n-use std::collections::HashMap;\n use std::fmt::Debug;\n-use std::hash::{Hash, BuildHasher};\n+use std::hash::Hash;\n use std::panic;\n use std::env;\n use std::time::{Duration, Instant};\n@@ -341,8 +340,8 @@ pub trait MemoizationMap {\n         where OP: FnOnce() -> Self::Value;\n }\n \n-impl<K, V, S> MemoizationMap for RefCell<HashMap<K,V,S>>\n-    where K: Hash+Eq+Clone, V: Clone, S: BuildHasher\n+impl<K, V> MemoizationMap for RefCell<FxHashMap<K,V>>\n+    where K: Hash+Eq+Clone, V: Clone\n {\n     type Key = K;\n     type Value = V;"}]}