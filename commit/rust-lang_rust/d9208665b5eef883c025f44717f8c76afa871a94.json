{"sha": "d9208665b5eef883c025f44717f8c76afa871a94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MjA4NjY1YjVlZWY4ODNjMDI1ZjQ0NzE3ZjhjNzZhZmE4NzFhOTQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-31T02:17:24Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-31T02:17:24Z"}, "message": "Add `-Z proc-macro-backtrace` to allow showing proc-macro panics\n\nFixes #75050\n\nPreviously, we would unconditionally suppress the panic hook during\nproc-macro execution. This commit adds a new flag\n-Z proc-macro-backtrace, which allows running the panic hook for\neasier debugging.", "tree": {"sha": "176013005f76e7122dcf00a1de9a9a0d20e9db47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/176013005f76e7122dcf00a1de9a9a0d20e9db47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9208665b5eef883c025f44717f8c76afa871a94", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl9MXc8ACgkQtAh+UQ6Y\nsWTXoQ//bZnb/Lm3Ial0Rwmi54xrCYqgJla6OxcGjRViueQQ4Z96UqQx2e9TpOFu\nCT53lwxUcvCkZarwX9vmhTe4JWRRLzumAkCXvVwO0q9s0R6naQTivAl8NxsKRdr5\nS3eB5hpqEobV5UFPodl53J16EeA0wgujokYtG7xJHfUpnon+FbKL4SKgD25+fNsJ\nSbKhEQoV+d+G1yN18TRkN28ClhmEcy+cqT8GvI+vFE4wjZ06cXjG8Q5D0FlcNayO\nVx41LPjMDoO4aqsikBnryAxVWvnGFkI6rKrvIfYujPc257anra6k6AbUBNO3C3f2\ncJCApmZ1KGl2C4ELudhaYsQ7LH7DxPvwLqT0btxVqnOorXSsErPJVdEyje/4ai0E\nhA2tlRLbFCVYJQ2A7S5LpDiByUhdgUNJXGkelhRVaU3NC7S2mgNEYuEst8rDDdg7\nZPfq8d/cbX0flbUVamx6A56g2xUbgitdLVBdYubwtURGMk06fT5KirDm/WQ/uvrK\n3s3S/hr41SweIhEcl251GnCfGmpMtXZT0Ph+qi5JRp+KoJ0kePfaVJ2CMbUl9F37\nwxYoPJ6ySck1TdzP7dnu69kUowjbnS+sWEmkCN8vMNaWfRKq5EcB4zd/0NvVaVpk\naOqNZmHNYgSnR3N8Zg5ab5XiwY4C2tBQy6FfZYUYhJ5WSbeNp/Q=\n=Gb6w\n-----END PGP SIGNATURE-----", "payload": "tree 176013005f76e7122dcf00a1de9a9a0d20e9db47\nparent 36b0d7e25769e88fec85e1d073196065a7f2d7c4\nauthor Aaron Hill <aa1ronham@gmail.com> 1598840244 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1598840244 -0400\n\nAdd `-Z proc-macro-backtrace` to allow showing proc-macro panics\n\nFixes #75050\n\nPreviously, we would unconditionally suppress the panic hook during\nproc-macro execution. This commit adds a new flag\n-Z proc-macro-backtrace, which allows running the panic hook for\neasier debugging.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9208665b5eef883c025f44717f8c76afa871a94", "html_url": "https://github.com/rust-lang/rust/commit/d9208665b5eef883c025f44717f8c76afa871a94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9208665b5eef883c025f44717f8c76afa871a94/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36b0d7e25769e88fec85e1d073196065a7f2d7c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b0d7e25769e88fec85e1d073196065a7f2d7c4", "html_url": "https://github.com/rust-lang/rust/commit/36b0d7e25769e88fec85e1d073196065a7f2d7c4"}], "stats": {"total": 126, "additions": 99, "deletions": 27}, "files": [{"sha": "6243e9676de0cceb6133234574fa39c9623b99e6", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9208665b5eef883c025f44717f8c76afa871a94/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9208665b5eef883c025f44717f8c76afa871a94/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=d9208665b5eef883c025f44717f8c76afa871a94", "patch": "@@ -1788,6 +1788,7 @@ pub struct ExpansionConfig<'feat> {\n     pub should_test: bool, // If false, strip `#[test]` nodes\n     pub keep_macs: bool,\n     pub span_debug: bool, // If true, use verbose debugging for `proc_macro::Span`\n+    pub proc_macro_backtrace: bool, // If true, show backtraces for proc-macro panics\n }\n \n impl<'feat> ExpansionConfig<'feat> {\n@@ -1800,6 +1801,7 @@ impl<'feat> ExpansionConfig<'feat> {\n             should_test: false,\n             keep_macs: false,\n             span_debug: false,\n+            proc_macro_backtrace: false,\n         }\n     }\n "}, {"sha": "94b3fcf2850d23670cf90636d3ee66ef6a2ca1f7", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d9208665b5eef883c025f44717f8c76afa871a94/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9208665b5eef883c025f44717f8c76afa871a94/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=d9208665b5eef883c025f44717f8c76afa871a94", "patch": "@@ -24,7 +24,7 @@ impl base::ProcMacro for BangProcMacro {\n         input: TokenStream,\n     ) -> Result<TokenStream, ErrorReported> {\n         let server = proc_macro_server::Rustc::new(ecx);\n-        self.client.run(&EXEC_STRATEGY, server, input).map_err(|e| {\n+        self.client.run(&EXEC_STRATEGY, server, input, ecx.ecfg.proc_macro_backtrace).map_err(|e| {\n             let mut err = ecx.struct_span_err(span, \"proc macro panicked\");\n             if let Some(s) = e.as_str() {\n                 err.help(&format!(\"message: {}\", s));\n@@ -48,14 +48,16 @@ impl base::AttrProcMacro for AttrProcMacro {\n         annotated: TokenStream,\n     ) -> Result<TokenStream, ErrorReported> {\n         let server = proc_macro_server::Rustc::new(ecx);\n-        self.client.run(&EXEC_STRATEGY, server, annotation, annotated).map_err(|e| {\n-            let mut err = ecx.struct_span_err(span, \"custom attribute panicked\");\n-            if let Some(s) = e.as_str() {\n-                err.help(&format!(\"message: {}\", s));\n-            }\n-            err.emit();\n-            ErrorReported\n-        })\n+        self.client\n+            .run(&EXEC_STRATEGY, server, annotation, annotated, ecx.ecfg.proc_macro_backtrace)\n+            .map_err(|e| {\n+                let mut err = ecx.struct_span_err(span, \"custom attribute panicked\");\n+                if let Some(s) = e.as_str() {\n+                    err.help(&format!(\"message: {}\", s));\n+                }\n+                err.emit();\n+                ErrorReported\n+            })\n     }\n }\n \n@@ -111,17 +113,18 @@ impl MultiItemModifier for ProcMacroDerive {\n         };\n \n         let server = proc_macro_server::Rustc::new(ecx);\n-        let stream = match self.client.run(&EXEC_STRATEGY, server, input) {\n-            Ok(stream) => stream,\n-            Err(e) => {\n-                let mut err = ecx.struct_span_err(span, \"proc-macro derive panicked\");\n-                if let Some(s) = e.as_str() {\n-                    err.help(&format!(\"message: {}\", s));\n+        let stream =\n+            match self.client.run(&EXEC_STRATEGY, server, input, ecx.ecfg.proc_macro_backtrace) {\n+                Ok(stream) => stream,\n+                Err(e) => {\n+                    let mut err = ecx.struct_span_err(span, \"proc-macro derive panicked\");\n+                    if let Some(s) = e.as_str() {\n+                        err.help(&format!(\"message: {}\", s));\n+                    }\n+                    err.emit();\n+                    return ExpandResult::Ready(vec![]);\n                 }\n-                err.emit();\n-                return ExpandResult::Ready(vec![]);\n-            }\n-        };\n+            };\n \n         let error_count_before = ecx.sess.parse_sess.span_diagnostic.err_count();\n         let mut parser ="}, {"sha": "f33dcec8ba70063829ee9c87cde14f8ed7b6fdb3", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9208665b5eef883c025f44717f8c76afa871a94/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9208665b5eef883c025f44717f8c76afa871a94/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=d9208665b5eef883c025f44717f8c76afa871a94", "patch": "@@ -291,6 +291,7 @@ fn configure_and_expand_inner<'a>(\n             trace_mac: sess.opts.debugging_opts.trace_macros,\n             should_test: sess.opts.test,\n             span_debug: sess.opts.debugging_opts.span_debug,\n+            proc_macro_backtrace: sess.opts.debugging_opts.proc_macro_backtrace,\n             ..rustc_expand::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n "}, {"sha": "cb906b3d911640bbe01605a3c5f1fab9698ecd50", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9208665b5eef883c025f44717f8c76afa871a94/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9208665b5eef883c025f44717f8c76afa871a94/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=d9208665b5eef883c025f44717f8c76afa871a94", "patch": "@@ -502,6 +502,7 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(print_llvm_passes, true);\n     untracked!(print_mono_items, Some(String::from(\"abc\")));\n     untracked!(print_type_sizes, true);\n+    untracked!(proc_macro_backtrace, true);\n     untracked!(query_dep_graph, true);\n     untracked!(query_stats, true);\n     untracked!(save_analysis, true);"}, {"sha": "82330d9a5331ab579646280a8584c60ebe6e69fa", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9208665b5eef883c025f44717f8c76afa871a94/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9208665b5eef883c025f44717f8c76afa871a94/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=d9208665b5eef883c025f44717f8c76afa871a94", "patch": "@@ -967,6 +967,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"print the result of the monomorphization collection pass\"),\n     print_type_sizes: bool = (false, parse_bool, [UNTRACKED],\n         \"print layout information for each type encountered (default: no)\"),\n+    proc_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n+         \"show backtraces for panics during proc-macro execution (default: no)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n         \"insert profiling code (default: no)\"),\n     profile_emit: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],"}, {"sha": "3d9016293b80d673004fd34c88b9ed22165bb439", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9208665b5eef883c025f44717f8c76afa871a94/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9208665b5eef883c025f44717f8c76afa871a94/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=d9208665b5eef883c025f44717f8c76afa871a94", "patch": "@@ -311,11 +311,13 @@ impl Bridge<'_> {\n         HIDE_PANICS_DURING_EXPANSION.call_once(|| {\n             let prev = panic::take_hook();\n             panic::set_hook(Box::new(move |info| {\n-                let hide = BridgeState::with(|state| match state {\n-                    BridgeState::NotConnected => false,\n-                    BridgeState::Connected(_) | BridgeState::InUse => true,\n+                let show = BridgeState::with(|state| match state {\n+                    BridgeState::NotConnected => true,\n+                    // Something weird is going on, so don't suppress any backtraces\n+                    BridgeState::InUse => true,\n+                    BridgeState::Connected(bridge) => bridge.force_show_panics,\n                 });\n-                if !hide {\n+                if show {\n                     prev(info)\n                 }\n             }));"}, {"sha": "c898d483a8ba2e84ccea7ab324796eb49c11d425", "filename": "library/proc_macro/src/bridge/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9208665b5eef883c025f44717f8c76afa871a94/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9208665b5eef883c025f44717f8c76afa871a94/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs?ref=d9208665b5eef883c025f44717f8c76afa871a94", "patch": "@@ -220,6 +220,9 @@ pub struct Bridge<'a> {\n \n     /// Server-side function that the client uses to make requests.\n     dispatch: closure::Closure<'a, Buffer<u8>, Buffer<u8>>,\n+\n+    /// If 'true', always invoke the default panic hook\n+    force_show_panics: bool,\n }\n \n impl<'a> !Sync for Bridge<'a> {}"}, {"sha": "1b3ccf4c18e702bf20be3c0624c417618c4b128a", "filename": "library/proc_macro/src/bridge/server.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d9208665b5eef883c025f44717f8c76afa871a94/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9208665b5eef883c025f44717f8c76afa871a94/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs?ref=d9208665b5eef883c025f44717f8c76afa871a94", "patch": "@@ -135,6 +135,7 @@ pub trait ExecutionStrategy {\n         input: Buffer<u8>,\n         run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n+        force_show_panics: bool,\n     ) -> Buffer<u8>;\n }\n \n@@ -147,10 +148,14 @@ impl ExecutionStrategy for SameThread {\n         input: Buffer<u8>,\n         run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n+        force_show_panics: bool,\n     ) -> Buffer<u8> {\n         let mut dispatch = |b| dispatcher.dispatch(b);\n \n-        run_client(Bridge { cached_buffer: input, dispatch: (&mut dispatch).into() }, client_data)\n+        run_client(\n+            Bridge { cached_buffer: input, dispatch: (&mut dispatch).into(), force_show_panics },\n+            client_data,\n+        )\n     }\n }\n \n@@ -166,6 +171,7 @@ impl ExecutionStrategy for CrossThread1 {\n         input: Buffer<u8>,\n         run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n+        force_show_panics: bool,\n     ) -> Buffer<u8> {\n         use std::sync::mpsc::channel;\n \n@@ -179,7 +185,11 @@ impl ExecutionStrategy for CrossThread1 {\n             };\n \n             run_client(\n-                Bridge { cached_buffer: input, dispatch: (&mut dispatch).into() },\n+                Bridge {\n+                    cached_buffer: input,\n+                    dispatch: (&mut dispatch).into(),\n+                    force_show_panics,\n+                },\n                 client_data,\n             )\n         });\n@@ -201,6 +211,7 @@ impl ExecutionStrategy for CrossThread2 {\n         input: Buffer<u8>,\n         run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n+        force_show_panics: bool,\n     ) -> Buffer<u8> {\n         use std::sync::{Arc, Mutex};\n \n@@ -226,7 +237,11 @@ impl ExecutionStrategy for CrossThread2 {\n             };\n \n             let r = run_client(\n-                Bridge { cached_buffer: input, dispatch: (&mut dispatch).into() },\n+                Bridge {\n+                    cached_buffer: input,\n+                    dispatch: (&mut dispatch).into(),\n+                    force_show_panics,\n+                },\n                 client_data,\n             );\n \n@@ -265,14 +280,21 @@ fn run_server<\n     input: I,\n     run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n     client_data: D,\n+    force_show_panics: bool,\n ) -> Result<O, PanicMessage> {\n     let mut dispatcher =\n         Dispatcher { handle_store: HandleStore::new(handle_counters), server: MarkedTypes(server) };\n \n     let mut b = Buffer::new();\n     input.encode(&mut b, &mut dispatcher.handle_store);\n \n-    b = strategy.run_bridge_and_client(&mut dispatcher, b, run_client, client_data);\n+    b = strategy.run_bridge_and_client(\n+        &mut dispatcher,\n+        b,\n+        run_client,\n+        client_data,\n+        force_show_panics,\n+    );\n \n     Result::decode(&mut &b[..], &mut dispatcher.handle_store)\n }\n@@ -283,6 +305,7 @@ impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {\n         strategy: &impl ExecutionStrategy,\n         server: S,\n         input: S::TokenStream,\n+        force_show_panics: bool,\n     ) -> Result<S::TokenStream, PanicMessage> {\n         let client::Client { get_handle_counters, run, f } = *self;\n         run_server(\n@@ -292,6 +315,7 @@ impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {\n             <MarkedTypes<S> as Types>::TokenStream::mark(input),\n             run,\n             f,\n+            force_show_panics,\n         )\n         .map(<MarkedTypes<S> as Types>::TokenStream::unmark)\n     }\n@@ -304,6 +328,7 @@ impl client::Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenSt\n         server: S,\n         input: S::TokenStream,\n         input2: S::TokenStream,\n+        force_show_panics: bool,\n     ) -> Result<S::TokenStream, PanicMessage> {\n         let client::Client { get_handle_counters, run, f } = *self;\n         run_server(\n@@ -316,6 +341,7 @@ impl client::Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenSt\n             ),\n             run,\n             f,\n+            force_show_panics,\n         )\n         .map(<MarkedTypes<S> as Types>::TokenStream::unmark)\n     }"}, {"sha": "90fe109abb8f0e398d0da53d567ead9a5eacd53e", "filename": "src/test/ui/proc-macro/load-panic-backtrace.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d9208665b5eef883c025f44717f8c76afa871a94/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic-backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9208665b5eef883c025f44717f8c76afa871a94/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic-backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic-backtrace.rs?ref=d9208665b5eef883c025f44717f8c76afa871a94", "patch": "@@ -0,0 +1,21 @@\n+// aux-build:test-macros.rs\n+// compile-flags: -Z proc-macro-backtrace\n+// rustc-env:RUST_BACKTRACE=0\n+\n+// FIXME https://github.com/rust-lang/rust/issues/59998\n+// normalize-stderr-test \"thread '.*' panicked \" -> \"\"\n+// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n+// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+#[derive(Panic)]\n+//~^ ERROR: proc-macro derive panicked\n+struct Foo;\n+\n+fn main() {}"}, {"sha": "63378b5735a3c7639d35de052ee6e4f4d7cf9a8a", "filename": "src/test/ui/proc-macro/load-panic-backtrace.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d9208665b5eef883c025f44717f8c76afa871a94/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic-backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9208665b5eef883c025f44717f8c76afa871a94/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic-backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic-backtrace.stderr?ref=d9208665b5eef883c025f44717f8c76afa871a94", "patch": "@@ -0,0 +1,11 @@\n+at 'panic-derive', $DIR/auxiliary/test-macros.rs:43:5\n+error: proc-macro derive panicked\n+  --> $DIR/load-panic-backtrace.rs:17:10\n+   |\n+LL | #[derive(Panic)]\n+   |          ^^^^^\n+   |\n+   = help: message: panic-derive\n+\n+error: aborting due to previous error\n+"}]}