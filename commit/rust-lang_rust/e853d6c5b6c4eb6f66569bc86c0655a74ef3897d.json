{"sha": "e853d6c5b6c4eb6f66569bc86c0655a74ef3897d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NTNkNmM1YjZjNGViNmY2NjU2OWJjODZjMDY1NWE3NGVmMzg5N2Q=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-08T14:28:24Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-13T19:33:21Z"}, "message": "Implement `ProjectionEq-Normalize`", "tree": {"sha": "1f1ba4e50789f38a7b491abeb45b9d05df038535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f1ba4e50789f38a7b491abeb45b9d05df038535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e853d6c5b6c4eb6f66569bc86c0655a74ef3897d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e853d6c5b6c4eb6f66569bc86c0655a74ef3897d", "html_url": "https://github.com/rust-lang/rust/commit/e853d6c5b6c4eb6f66569bc86c0655a74ef3897d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e853d6c5b6c4eb6f66569bc86c0655a74ef3897d/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c9f7dcd8307f92931bc7e5534b467063b4ecc76", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c9f7dcd8307f92931bc7e5534b467063b4ecc76", "html_url": "https://github.com/rust-lang/rust/commit/5c9f7dcd8307f92931bc7e5534b467063b4ecc76"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "83b90cf1bf2041216f706f5683494488e4fceec1", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e853d6c5b6c4eb6f66569bc86c0655a74ef3897d/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e853d6c5b6c4eb6f66569bc86c0655a74ef3897d/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=e853d6c5b6c4eb6f66569bc86c0655a74ef3897d", "patch": "@@ -496,9 +496,51 @@ pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n     };\n     let from_env_clause = Clause::ForAll(ty::Binder::bind(from_env_clause));\n \n+    // Rule ProjectionEq-Normalize\n+    //\n+    // ProjectionEq can succeed by normalizing:\n+    // ```\n+    // forall<Self, P1..Pn, Pn+1..Pm, U> {\n+    //   ProjectionEq(<Self as Trait<P1..Pn>>::AssocType<Pn+1..Pm> = U) :-\n+    //       Normalize(<Self as Trait<P1..Pn>>::AssocType<Pn+1..Pm> -> U)\n+    // }\n+    // ```\n+\n+    let offset = tcx.generics_of(trait_id).params\n+        .iter()\n+        .map(|p| p.index)\n+        .max()\n+        .unwrap_or(0);\n+    // Add a new type param after the existing ones (`U` in the comment above).\n+    let ty_var = ty::Bound(\n+        ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from_u32(offset + 1))\n+    );\n+\n+    // `ProjectionEq(<Self as Trait<P1..Pn>>::AssocType<Pn+1..Pm> = U)`\n+    let projection = ty::ProjectionPredicate {\n+        projection_ty,\n+        ty: tcx.mk_ty(ty_var),\n+    };\n+\n+    // `Normalize(<A0 as Trait<A1..An>>::AssocType<Pn+1..Pm> -> U)`\n+    let hypothesis = tcx.mk_goal(\n+        DomainGoal::Normalize(projection).into_goal()\n+    );\n+\n+    //  ProjectionEq(<Self as Trait<P1..Pn>>::AssocType<Pn+1..Pm> = U) :-\n+    //      Normalize(<Self as Trait<P1..Pn>>::AssocType<Pn+1..Pm> -> U)\n+    let normalize_clause = ProgramClause {\n+        goal: DomainGoal::Holds(WhereClause::ProjectionEq(projection)),\n+        hypotheses: tcx.mk_goals(iter::once(hypothesis)),\n+        category: ProgramClauseCategory::Other,\n+    };\n+    let normalize_clause = Clause::ForAll(ty::Binder::bind(normalize_clause));\n+\n     let clauses = iter::once(projection_eq_clause)\n         .chain(iter::once(wf_clause))\n-        .chain(iter::once(from_env_clause));\n+        .chain(iter::once(from_env_clause))\n+        .chain(iter::once(normalize_clause));\n+\n     tcx.mk_clauses(clauses)\n }\n "}, {"sha": "c957a2ac7e7644039b39380cc7c582bbe5051cc7", "filename": "src/test/ui/chalkify/lower_trait.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e853d6c5b6c4eb6f66569bc86c0655a74ef3897d/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e853d6c5b6c4eb6f66569bc86c0655a74ef3897d/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr?ref=e853d6c5b6c4eb6f66569bc86c0655a74ef3897d", "patch": "@@ -15,6 +15,7 @@ error: program clause dump\n LL |     #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: forall<Self, S, T, ^3> { ProjectionEq(<Self as Foo<S, T>>::Assoc == ^3) :- Normalize(<Self as Foo<S, T>>::Assoc -> ^3). }\n    = note: forall<Self, S, T> { FromEnv(Self: Foo<S, T>) :- FromEnv(Unnormalized(<Self as Foo<S, T>>::Assoc)). }\n    = note: forall<Self, S, T> { ProjectionEq(<Self as Foo<S, T>>::Assoc == Unnormalized(<Self as Foo<S, T>>::Assoc)). }\n    = note: forall<Self, S, T> { WellFormed(Unnormalized(<Self as Foo<S, T>>::Assoc)) :- Implemented(Self: Foo<S, T>). }"}]}