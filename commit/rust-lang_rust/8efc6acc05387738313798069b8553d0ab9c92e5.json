{"sha": "8efc6acc05387738313798069b8553d0ab9c92e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZmM2YWNjMDUzODc3MzgzMTM3OTgwNjliODU1M2QwYWI5YzkyZTU=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-01-16T13:04:14Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-04-05T11:33:45Z"}, "message": "Improved shared_code_in_if_blocks output readability and added tests", "tree": {"sha": "17be2bc4727c8393c2b5d57050b8500c2cab33fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17be2bc4727c8393c2b5d57050b8500c2cab33fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8efc6acc05387738313798069b8553d0ab9c92e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8efc6acc05387738313798069b8553d0ab9c92e5", "html_url": "https://github.com/rust-lang/rust/commit/8efc6acc05387738313798069b8553d0ab9c92e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8efc6acc05387738313798069b8553d0ab9c92e5/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "469ff96db3cc397be46ea9d19c72148c6a95eb6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/469ff96db3cc397be46ea9d19c72148c6a95eb6a", "html_url": "https://github.com/rust-lang/rust/commit/469ff96db3cc397be46ea9d19c72148c6a95eb6a"}], "stats": {"total": 202, "additions": 161, "deletions": 41}, "files": [{"sha": "089f8c3ab0defb4093b5a6afc92199c28510b5b2", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 43, "deletions": 26, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/8efc6acc05387738313798069b8553d0ab9c92e5/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8efc6acc05387738313798069b8553d0ab9c92e5/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=8efc6acc05387738313798069b8553d0ab9c92e5", "patch": "@@ -1,16 +1,16 @@\n use crate::utils::{both, count_eq, eq_expr_value, in_macro, search_same, SpanlessEq, SpanlessHash};\n use crate::utils::{\n-    first_line_of_span, get_parent_expr, higher, if_sequence, indent_of, parent_node_is_if_expr, reindent_multiline,\n-    snippet, span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n+    first_line_of_span, get_parent_expr, if_sequence, indent_of, parent_node_is_if_expr, reindent_multiline, snippet,\n+    snippet_opt, span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n };\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{Block, Expr, HirId};\n+use rustc_hir::{Block, Expr, ExprKind, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Span;\n+use rustc_span::{source_map::Span, BytePos};\n use std::borrow::Cow;\n \n declare_clippy_lint! {\n@@ -218,14 +218,6 @@ fn lint_same_then_else<'tcx>(\n             );\n \n             return;\n-        } else {\n-            println!(\n-                \"{:?}\\n - expr_eq: {:10}, l_stmts.len(): {:10}, r_stmts.len(): {:10}\",\n-                win[0].span,\n-                block_expr_eq,\n-                l_stmts.len(),\n-                r_stmts.len()\n-            )\n         }\n \n         start_eq = start_eq.min(current_start_eq);\n@@ -328,7 +320,7 @@ fn emit_shared_code_in_if_blocks_lint(\n         let suggestion = reindent_multiline(Cow::Borrowed(&suggestion), true, cond_indent);\n \n         let span = span_start.to(span_end);\n-        suggestions.push((\"START HELP\", span, suggestion.to_string()));\n+        suggestions.push((\"start\", span, suggestion.to_string()));\n     }\n \n     if lint_end {\n@@ -354,31 +346,56 @@ fn emit_shared_code_in_if_blocks_lint(\n         let suggestion = \"}\\n\".to_string() + &moved_snipped;\n         let suggestion = reindent_multiline(Cow::Borrowed(&suggestion), true, indent);\n \n-        let span = moved_start.to(span_end);\n-        suggestions.push((\"END_RANGE\", span, suggestion.to_string()));\n+        let mut span = moved_start.to(span_end);\n+        // Improve formatting if the inner block has indention (i.e. normal Rust formatting)\n+        let test_span = Span::new(span.lo() - BytePos(4), span.lo(), span.ctxt());\n+        if snippet_opt(cx, test_span)\n+            .map(|snip| snip == \"    \")\n+            .unwrap_or_default()\n+        {\n+            span = span.with_lo(test_span.lo());\n+        }\n+\n+        suggestions.push((\"end\", span, suggestion.to_string()));\n     }\n \n     if suggestions.len() == 1 {\n-        let (_, span, sugg) = &suggestions[0];\n+        let (place_str, span, sugg) = suggestions.pop().unwrap();\n+        let msg = format!(\"All if blocks contain the same code at the {}\", place_str);\n+        let help = format!(\"Consider moving the {} statements out like this\", place_str);\n         span_lint_and_sugg(\n             cx,\n             SHARED_CODE_IN_IF_BLOCKS,\n-            *span,\n-            \"All code blocks contain the same code\",\n-            \"Consider moving the statements out like this\",\n-            sugg.clone(),\n+            span,\n+            msg.as_str(),\n+            help.as_str(),\n+            sugg,\n             Applicability::Unspecified,\n         );\n-    } else {\n+    } else if suggestions.len() == 2 {\n+        let (_, end_span, end_sugg) = suggestions.pop().unwrap();\n+        let (_, start_span, start_sugg) = suggestions.pop().unwrap();\n         span_lint_and_then(\n             cx,\n             SHARED_CODE_IN_IF_BLOCKS,\n-            if_expr.span,\n-            \"All if blocks contain the same code\",\n+            start_span,\n+            \"All if blocks contain the same code at the start and the end. Here at the start:\",\n             move |diag| {\n-                for (help, span, sugg) in suggestions {\n-                    diag.span_suggestion(span, help, sugg, Applicability::Unspecified);\n-                }\n+                diag.span_note(end_span, \"And here at the end:\");\n+\n+                diag.span_suggestion(\n+                    start_span,\n+                    \"Consider moving the start statements out like this:\",\n+                    start_sugg,\n+                    Applicability::Unspecified,\n+                );\n+\n+                diag.span_suggestion(\n+                    end_span,\n+                    \"And consider moving the end statements out like this:\",\n+                    end_sugg,\n+                    Applicability::Unspecified,\n+                );\n             },\n         );\n     }"}, {"sha": "a586a1c9d45a5b2edba8a85d75917535cb9e81e6", "filename": "tests/ui/shared_code_in_if_blocks/shared_at_bot.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8efc6acc05387738313798069b8553d0ab9c92e5/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8efc6acc05387738313798069b8553d0ab9c92e5/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_bot.rs?ref=8efc6acc05387738313798069b8553d0ab9c92e5", "patch": "@@ -33,16 +33,40 @@ fn simple_examples() {\n         result\n     };\n \n+    // Else if block\n     if x == 9 {\n         println!(\"The index is: 6\");\n \n         println!(\"Same end of block\");\n     } else if x == 8 {\n         println!(\"The index is: 4\");\n \n+        // We should only get a lint trigger for the last statement\n+        println!(\"This is also eq with the else block\");\n         println!(\"Same end of block\");\n     } else {\n         println!(\"Same end of block\");\n+        println!(\"This is also eq with the else block\");\n+    }\n+\n+    // Use of outer scope value\n+    let outer_scope_value = \"I'm outside the if block\";\n+    if x < 99 {\n+        let z = \"How are you\";\n+        println!(\"I'm a local because I use the value `z`: `{}`\", z);\n+\n+        println!(\n+            \"I'm moveable because I know: `outer_scope_value`: '{}'\",\n+            outer_scope_value\n+        );\n+    } else {\n+        let z = 45678000;\n+        println!(\"I'm a local because I use the value `z`: `{}`\", z);\n+\n+        println!(\n+            \"I'm moveable because I know: `outer_scope_value`: '{}'\",\n+            outer_scope_value\n+        );\n     }\n \n     // TODO xFrednet 2021-01.13: Fix lint for `if let`\n@@ -147,4 +171,15 @@ fn not_moveable_due_to_value_scope() {\n     };\n }\n \n+#[rustfmt::skip]\n+fn test_suggestion_with_weird_formatting() {\n+    let x = 9;\n+    let mut a = 0;\n+    let mut b = 0;\n+\n+    // The error message still looks weird tbh but this is the best I can do\n+    // for weird formatting\n+    if x == 17 { b = 1; a = 0x99; } else { a = 0x99; }\n+}\n+\n fn main() {}"}, {"sha": "70f969aaf2ef966520da8ce01f305d4c262cd526", "filename": "tests/ui/shared_code_in_if_blocks/shared_at_top_and_bot.rs", "status": "modified", "additions": 83, "deletions": 15, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/8efc6acc05387738313798069b8553d0ab9c92e5/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_top_and_bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8efc6acc05387738313798069b8553d0ab9c92e5/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_top_and_bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_top_and_bot.rs?ref=8efc6acc05387738313798069b8553d0ab9c92e5", "patch": "@@ -3,20 +3,88 @@\n \n // shared_code_in_if_blocks at the top and bottom of the if blocks\n \n-fn main() {\n-    // TODO xFrednet 2021-01-12: This\n+struct DataPack {\n+    id: u32,\n+    name: String,\n+    some_data: Vec<u8>,\n }\n \n-// General TODOs By xFrednet:\n-\n-// \n-// * Make a test with overlapping eq regions (else ifs)\n-// * Test if as function parameter, tuple constructor, index, while loop condition\n-// * Test where only the expression is the same\n-// * Test where the block only has an expression\n-// * Test with let on a previous line let _ = \\n if...\n-// * Tests with unreadable formatting (Inline if, Not indented)\n-// * Test multiline condition if x == 9 \\n x == 8 {}\n-// * Test if for return/break (Only move to front)\n-// * Test in inline closures\n-// * Test with structs and tuples\n+fn overlapping_eq_regions() {\n+    let x = 9;\n+\n+    // Overlap with separator\n+    if x == 7 {\n+        let t = 7;\n+        let _overlap_start = t * 2;\n+        let _overlap_end = 2 * t;\n+        let _u = 9;\n+    } else {\n+        let t = 7;\n+        let _overlap_start = t * 2;\n+        let _overlap_end = 2 * t;\n+        println!(\"Overlap separator\");\n+        let _overlap_start = t * 2;\n+        let _overlap_end = 2 * t;\n+        let _u = 9;\n+    }\n+\n+    // Overlap with separator\n+    if x == 99 {\n+        let r = 7;\n+        let _overlap_start = r;\n+        let _overlap_middle = r * r;\n+        let _overlap_end = r * r * r;\n+        let z = \"end\";\n+    } else {\n+        let r = 7;\n+        let _overlap_start = r;\n+        let _overlap_middle = r * r;\n+        let _overlap_middle = r * r;\n+        let _overlap_end = r * r * r;\n+        let z = \"end\";\n+    }\n+}\n+\n+fn complexer_example() {\n+    fn gen_id(x: u32, y: u32) -> u32 {\n+        let x = x & 0x0000_ffff;\n+        let y = (y & 0xffff_0000) << 16;\n+        x | y\n+    }\n+\n+    fn process_data(data: DataPack) {\n+        let _ = data;\n+    }\n+\n+    let x = 8;\n+    let y = 9;\n+    if (x > 7 && y < 13) || (x + y) % 2 == 1 {\n+        let a = 0xcafe;\n+        let b = 0xffff00ff;\n+        let e_id = gen_id(a, b);\n+\n+        println!(\"From the a `{}` to the b `{}`\", a, b);\n+\n+        let pack = DataPack {\n+            id: e_id,\n+            name: \"Player 1\".to_string(),\n+            some_data: vec![0x12, 0x34, 0x56, 0x78, 0x90],\n+        };\n+        process_data(pack);\n+    } else {\n+        let a = 0xcafe;\n+        let b = 0xffff00ff;\n+        let e_id = gen_id(a, b);\n+\n+        println!(\"The new ID is '{}'\", e_id);\n+\n+        let pack = DataPack {\n+            id: e_id,\n+            name: \"Player 1\".to_string(),\n+            some_data: vec![0x12, 0x34, 0x56, 0x78, 0x90],\n+        };\n+        process_data(pack);\n+    }\n+}\n+\n+fn main() {}"}]}