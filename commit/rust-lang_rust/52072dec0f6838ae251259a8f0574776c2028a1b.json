{"sha": "52072dec0f6838ae251259a8f0574776c2028a1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMDcyZGVjMGY2ODM4YWUyNTEyNTlhOGYwNTc0Nzc2YzIwMjhhMWI=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-24T11:59:23Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-26T16:26:33Z"}, "message": "Add a Racy type to bench tests", "tree": {"sha": "6c6ab87cb882027daa99506be4f6c11d61495198", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c6ab87cb882027daa99506be4f6c11d61495198"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52072dec0f6838ae251259a8f0574776c2028a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52072dec0f6838ae251259a8f0574776c2028a1b", "html_url": "https://github.com/rust-lang/rust/commit/52072dec0f6838ae251259a8f0574776c2028a1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52072dec0f6838ae251259a8f0574776c2028a1b/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b3698f7faf5257b44b51cd2d00438e927434b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/29b3698f7faf5257b44b51cd2d00438e927434b7", "html_url": "https://github.com/rust-lang/rust/commit/29b3698f7faf5257b44b51cd2d00438e927434b7"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "66965110f73eeb824cb64eabcc4f87b846b72c9b", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/52072dec0f6838ae251259a8f0574776c2028a1b/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52072dec0f6838ae251259a8f0574776c2028a1b/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=52072dec0f6838ae251259a8f0574776c2028a1b", "patch": "@@ -46,7 +46,7 @@ extern crate libc;\n \n use std::io::stdio::{stdin_raw, stdout_raw};\n use std::num::{div_rem};\n-use std::ptr::{copy_memory};\n+use std::ptr::{copy_memory, Unique};\n use std::io::{IoResult, EndOfFile};\n \n struct Tables {\n@@ -219,10 +219,15 @@ fn reverse_complement(seq: &mut [u8], tables: &Tables) {\n     }\n }\n \n+\n+struct Racy<T>(T);\n+\n+unsafe impl<T: 'static> Send for Racy<T> {}\n+\n /// Executes a closure in parallel over the given iterator over mutable slice.\n /// The closure `f` is run in parallel with an element of `iter`.\n fn parallel<'a, I, T, F>(mut iter: I, f: F)\n-        where T: Send + Sync,\n+        where T: 'a+Send + Sync,\n               I: Iterator<&'a mut [T]>,\n               F: Fn(&'a mut [T]) + Sync {\n     use std::mem;\n@@ -234,11 +239,11 @@ fn parallel<'a, I, T, F>(mut iter: I, f: F)\n \n         // Need to convert `f` and `chunk` to something that can cross the task\n         // boundary.\n-        let f = &f as *const F as *const uint;\n-        let raw = chunk.repr();\n+        let f = Racy(&f as *const F as *const uint);\n+        let raw = Racy(chunk.repr());\n         spawn(move|| {\n-            let f = f as *const F;\n-            unsafe { (*f)(mem::transmute(raw)) }\n+            let f = f.0 as *const F;\n+            unsafe { (*f)(mem::transmute(raw.0)) }\n             drop(tx)\n         });\n     }"}, {"sha": "df388fbdde54fd6a89866087186bbba5b279ebcc", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/52072dec0f6838ae251259a8f0574776c2028a1b/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52072dec0f6838ae251259a8f0574776c2028a1b/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=52072dec0f6838ae251259a8f0574776c2028a1b", "patch": "@@ -108,6 +108,11 @@ fn dot(v: &[f64], u: &[f64]) -> f64 {\n     v.iter().zip(u.iter()).map(|(a, b)| *a * *b).sum()\n }\n \n+\n+struct Racy<T>(T);\n+\n+unsafe impl<T: 'static> Send for Racy<T> {}\n+\n // Executes a closure in parallel over the given mutable slice. The closure `f`\n // is run in parallel and yielded the starting index within `v` as well as a\n // sub-slice of `v`.\n@@ -122,11 +127,11 @@ fn parallel<'a, T, F>(v: &'a mut [T], f: F)\n \n         // Need to convert `f` and `chunk` to something that can cross the task\n         // boundary.\n-        let f = &f as *const _ as *const uint;\n-        let raw = chunk.repr();\n+        let f = Racy(&f as *const _ as *const uint);\n+        let raw = Racy(chunk.repr());\n         spawn(move|| {\n-            let f = f as *const F;\n-            unsafe { (*f)(i * size, mem::transmute(raw)) }\n+            let f = f.0 as *const F;\n+            unsafe { (*f)(i * size, mem::transmute(raw.0)) }\n             drop(tx)\n         });\n     }"}]}