{"sha": "b8157cc67fa25f2944b24f4306151d53d1b80b56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MTU3Y2M2N2ZhMjVmMjk0NGIyNGY0MzA2MTUxZDUzZDFiODBiNTY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-01T07:59:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-16T14:12:35Z"}, "message": "Implement type ascription.", "tree": {"sha": "0d9ddf074f25fec3fa9f56fc5c69c118f6dcd3af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d9ddf074f25fec3fa9f56fc5c69c118f6dcd3af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8157cc67fa25f2944b24f4306151d53d1b80b56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8157cc67fa25f2944b24f4306151d53d1b80b56", "html_url": "https://github.com/rust-lang/rust/commit/b8157cc67fa25f2944b24f4306151d53d1b80b56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8157cc67fa25f2944b24f4306151d53d1b80b56/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce7bc51933e2facb4eca029ac17b398f372f5b41", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce7bc51933e2facb4eca029ac17b398f372f5b41", "html_url": "https://github.com/rust-lang/rust/commit/ce7bc51933e2facb4eca029ac17b398f372f5b41"}], "stats": {"total": 124, "additions": 112, "deletions": 12}, "files": [{"sha": "abe85125215708f38abd8038f0295e6efb8df76b", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -352,6 +352,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             hir::ExprBox(ref e) |\n             hir::ExprAddrOf(_, ref e) |\n             hir::ExprCast(ref e, _) |\n+            hir::ExprType(ref e, _) |\n             hir::ExprUnary(_, ref e) |\n             hir::ExprField(ref e, _) |\n             hir::ExprTupField(ref e, _) => {"}, {"sha": "d6f05ffd8a513013a6e36ebeb886fcb97492154f", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -784,6 +784,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n         hir::ExprField(..) |\n         hir::ExprTupField(..) |\n         hir::ExprVec(_) |\n+        hir::ExprType(..) |\n         hir::ExprTup(..) => {}\n \n         // Conditional control flow (possible to implement)."}, {"sha": "f5d5fe1a73472ee7ef06a46322efd5cd6c52585b", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -1126,6 +1126,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n             None => unreachable!(),\n         }\n       }\n+      hir::ExprType(ref e, _) => try!(eval_const_expr_partial(tcx, &**e, ety)),\n       hir::ExprTup(_) => Tuple(e.id),\n       hir::ExprStruct(..) => Struct(e.id),\n       hir::ExprIndex(ref arr, ref idx) => {"}, {"sha": "73efd6a19fe1b70edbf953e6f65c892488764ed6", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -373,6 +373,10 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         match expr.node {\n             hir::ExprPath(..) => { }\n \n+            hir::ExprType(ref subexpr, _) => {\n+                self.walk_expr(&**subexpr)\n+            }\n+\n             hir::ExprUnary(hir::UnDeref, ref base) => {      // *base\n                 if !self.walk_overloaded_operator(expr, &**base, Vec::new(), PassArgs::ByRef) {\n                     self.select_from_expr(&**base);"}, {"sha": "01f76a5051fa961f83a961fc6878150aa11f0979", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -496,7 +496,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n       hir::ExprBlock(..) | hir::ExprAssign(..) | hir::ExprAssignOp(..) |\n       hir::ExprStruct(..) | hir::ExprRepeat(..) |\n       hir::ExprInlineAsm(..) | hir::ExprBox(..) |\n-      hir::ExprRange(..) => {\n+      hir::ExprRange(..) | hir::ExprType(..) => {\n           intravisit::walk_expr(ir, expr);\n       }\n     }\n@@ -1160,6 +1160,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n           hir::ExprBox(ref e) |\n           hir::ExprAddrOf(_, ref e) |\n           hir::ExprCast(ref e, _) |\n+          hir::ExprType(ref e, _) |\n           hir::ExprUnary(_, ref e) => {\n             self.propagate_through_expr(&**e, succ)\n           }\n@@ -1443,7 +1444,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       hir::ExprBlock(..) | hir::ExprAddrOf(..) |\n       hir::ExprStruct(..) | hir::ExprRepeat(..) |\n       hir::ExprClosure(..) | hir::ExprPath(..) | hir::ExprBox(..) |\n-      hir::ExprRange(..) => {\n+      hir::ExprRange(..) | hir::ExprType(..) => {\n         intravisit::walk_expr(this, expr);\n       }\n     }"}, {"sha": "d280f28dae1c3a0be8232071c42d5cad977d0115", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -518,6 +518,10 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n             self.cat_def(expr.id, expr.span, expr_ty, def)\n           }\n \n+          hir::ExprType(ref e, _) => {\n+            self.cat_expr(&**e)\n+          }\n+\n           hir::ExprAddrOf(..) | hir::ExprCall(..) |\n           hir::ExprAssign(..) | hir::ExprAssignOp(..) |\n           hir::ExprClosure(..) | hir::ExprRet(..) |"}, {"sha": "2532882d0127d22721541632b919ea8e759ad056", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -234,6 +234,7 @@ mod svh_visitor {\n         SawExprUnary(hir::UnOp),\n         SawExprLit(ast::Lit_),\n         SawExprCast,\n+        SawExprType,\n         SawExprIf,\n         SawExprWhile,\n         SawExprMatch,\n@@ -262,6 +263,7 @@ mod svh_visitor {\n             ExprUnary(op, _)         => SawExprUnary(op),\n             ExprLit(ref lit)         => SawExprLit(lit.node.clone()),\n             ExprCast(..)             => SawExprCast,\n+            ExprType(..)             => SawExprType,\n             ExprIf(..)               => SawExprIf,\n             ExprWhile(..)            => SawExprWhile,\n             ExprLoop(_, id)          => SawExprLoop(id.map(|id| id.name.as_str())),"}, {"sha": "dc5659ca46539c5081ade385067ef2e3ca52a081", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -1004,6 +1004,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             try!(const_fn_call(cx, MethodCallKey(method_call),\n                                method_did, &arg_vals, param_substs, trueconst))\n         },\n+        hir::ExprType(ref e, _) => const_expr(cx, &**e, param_substs).0,\n         hir::ExprBlock(ref block) => {\n             match block.expr {\n                 Some(ref expr) => try!(const_expr("}, {"sha": "e73afc46174fdc959c9d231771e1a1c5f7625099", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -656,6 +656,9 @@ fn trans_datum_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let _icx = push_ctxt(\"trans_datum_unadjusted\");\n \n     match expr.node {\n+        hir::ExprType(ref e, _) => {\n+            trans(bcx, &**e)\n+        }\n         hir::ExprPath(..) => {\n             trans_def(bcx, expr, bcx.def(expr.id))\n         }\n@@ -941,6 +944,9 @@ fn trans_rvalue_stmt_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         hir::ExprBreak(label_opt) => {\n             controlflow::trans_break(bcx, expr, label_opt.map(|l| l.node.name))\n         }\n+        hir::ExprType(ref e, _) => {\n+            trans_into(bcx, &**e, Ignore)\n+        }\n         hir::ExprAgain(label_opt) => {\n             controlflow::trans_cont(bcx, expr, label_opt.map(|l| l.node.name))\n         }\n@@ -1064,6 +1070,9 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     debuginfo::set_source_location(bcx.fcx, expr.id, expr.span);\n \n     match expr.node {\n+        hir::ExprType(ref e, _) => {\n+            trans_into(bcx, &**e, dest)\n+        }\n         hir::ExprPath(..) => {\n             trans_def_dps_unadjusted(bcx, expr, bcx.def(expr.id), dest)\n         }"}, {"sha": "eafbfe37e48788717e8a0fc0e8383b06e8301d6d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -3525,6 +3525,11 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n             deferred_cast_checks.push(cast_check);\n         }\n       }\n+      hir::ExprType(ref e, ref t) => {\n+        let typ = fcx.to_ty(&**t);\n+        check_expr_coercable_to_type(fcx, &**e, typ);\n+        fcx.write_ty(id, typ);\n+      }\n       hir::ExprVec(ref args) => {\n         let uty = expected.to_option(fcx).and_then(|uty| {\n             match uty.sty {"}, {"sha": "38cea3ea64ba38806154433d5ffb20a2d661f2ea", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -943,6 +943,7 @@ pub enum Expr_ {\n     ExprLit(P<Lit>),\n     /// A cast (`foo as f64`)\n     ExprCast(P<Expr>, P<Ty>),\n+    ExprType(P<Expr>, P<Ty>),\n     /// An `if` block, with an optional else block\n     ///\n     /// `if expr { block } else { expr }`"}, {"sha": "72314a35a9c9c308b9221257c56caa9550d5e436", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -1203,6 +1203,9 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n             ExprCast(expr, ty) => {\n                 ExprCast(folder.fold_expr(expr), folder.fold_ty(ty))\n             }\n+            ExprType(expr, ty) => {\n+                ExprType(folder.fold_expr(expr), folder.fold_ty(ty))\n+            }\n             ExprAddrOf(m, ohs) => ExprAddrOf(m, folder.fold_expr(ohs)),\n             ExprIf(cond, tr, fl) => {\n                 ExprIf(folder.fold_expr(cond),"}, {"sha": "e81f9a2a166f391b93984835b4cdd8da41a3095d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -26,7 +26,7 @@ use ast::{ExprBreak, ExprCall, ExprCast, ExprInPlace};\n use ast::{ExprField, ExprTupField, ExprClosure, ExprIf, ExprIfLet, ExprIndex};\n use ast::{ExprLit, ExprLoop, ExprMac, ExprRange};\n use ast::{ExprMethodCall, ExprParen, ExprPath};\n-use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprUnary};\n+use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprType, ExprUnary};\n use ast::{ExprVec, ExprWhile, ExprWhileLet, ExprForLoop, Field, FnDecl};\n use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, ForeignMod, FunctionRetTy};\n use ast::{Ident, Inherited, ImplItem, Item, Item_, ItemStatic};\n@@ -2811,7 +2811,6 @@ impl<'a> Parser<'a> {\n                     break\n             }\n \n-\n             let rhs = try!(match op.fixity() {\n                 Fixity::Right => self.with_res(restrictions, |this|{\n                     this.parse_assoc_expr_with(op.precedence(), LhsExpr::NotYetParsed)"}, {"sha": "2c11be3cea38580e7d7de29d750a6f7160a93345", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -445,7 +445,7 @@ fn needs_parentheses(expr: &ast::Expr) -> bool {\n         ast::ExprAssign(..) | ast::ExprBinary(..) |\n         ast::ExprClosure(..) |\n         ast::ExprAssignOp(..) | ast::ExprCast(..) |\n-        ast::ExprInPlace(..) => true,\n+        ast::ExprInPlace(..) | ast::ExprType(..) => true,\n         _ => false,\n     }\n }\n@@ -2036,6 +2036,11 @@ impl<'a> State<'a> {\n                 try!(self.word_space(\"as\"));\n                 try!(self.print_type(&**ty));\n             }\n+            ast::ExprType(ref expr, ref ty) => {\n+                try!(self.print_expr(&**expr));\n+                try!(self.word_space(\":\"));\n+                try!(self.print_type(&**ty));\n+            }\n             ast::ExprIf(ref test, ref blk, ref elseopt) => {\n                 try!(self.print_if(&**test, &**blk, elseopt.as_ref().map(|e| &**e)));\n             }"}, {"sha": "3c66220ae58f7a9f65eacfe4e50b968aa72e0df5", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -697,6 +697,10 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             visitor.visit_expr(subexpression);\n             visitor.visit_ty(typ)\n         }\n+        ExprType(ref subexpression, ref typ) => {\n+            visitor.visit_expr(&**subexpression);\n+            visitor.visit_ty(&**typ)\n+        }\n         ExprIf(ref head_expression, ref if_block, ref optional_else) => {\n             visitor.visit_expr(head_expression);\n             visitor.visit_block(if_block);"}, {"sha": "20b89b0e9db4d476cf63a6736c09d0f85e31e5ff", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -20,7 +20,7 @@ use syntax::ext::base;\n use syntax::ext::base::*;\n use syntax::feature_gate;\n use syntax::parse::token::{intern, InternedString};\n-use syntax::parse::token;\n+use syntax::parse::{self, token};\n use syntax::ptr::P;\n use syntax::ast::AsmDialect;\n \n@@ -58,8 +58,17 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         return DummyResult::expr(sp);\n     }\n \n-    let mut p = cx.new_parser_from_tts(tts);\n-    let mut asm = InternedString::new(\"\");\n+    // Split the tts before the first colon, to avoid `asm!(\"x\": y)`  being\n+    // parsed as `asm!(z)` with `z = \"x\": y` which is type ascription.\n+    let first_colon = tts.iter().position(|tt| {\n+        match *tt {\n+            ast::TtToken(_, token::Colon) |\n+            ast::TtToken(_, token::ModSep) => true,\n+            _ => false\n+        }\n+    }).unwrap_or(tts.len());\n+    let mut p = cx.new_parser_from_tts(&tts[first_colon..]);\n+    let mut asm = token::InternedString::new(\"\");\n     let mut asm_str_style = None;\n     let mut outputs = Vec::new();\n     let mut inputs = Vec::new();\n@@ -79,12 +88,22 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                     cx.span_err(sp, \"malformed inline assembly\");\n                     return DummyResult::expr(sp);\n                 }\n-                let (s, style) = match expr_to_string(cx, panictry!(p.parse_expr()),\n+                // Nested parser, stop before the first colon (see above).\n+                let mut p2 = cx.new_parser_from_tts(&tts[..first_colon]);\n+                let (s, style) = match expr_to_string(cx, panictry!(p2.parse_expr()),\n                                                    \"inline assembly must be a string literal\") {\n                     Some((s, st)) => (s, st),\n                     // let compilation continue\n                     None => return DummyResult::expr(sp),\n                 };\n+\n+                // This is most likely malformed.\n+                if p2.token != token::Eof {\n+                    let mut extra_tts = p2.parse_all_token_trees();\n+                    extra_tts.extend(tts[first_colon..].iter().cloned());\n+                    p = parse::tts_to_parser(cx.parse_sess, extra_tts, cx.cfg());\n+                }\n+\n                 asm = s;\n                 asm_str_style = Some(style);\n             }"}, {"sha": "107b836d160a5669bbb47bed4b4090795e923205", "filename": "src/test/parse-fail/struct-literal-in-for.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-for.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -22,7 +22,7 @@ impl Foo {\n \n fn main() {\n     for x in Foo {\n-        x: 3    //~ ERROR expected one of `!`, `.`, `::`, `;`, `{`, `}`, or an operator, found `:`\n+        x: 3    //~ ERROR expected type, found `3`\n     }.hi() {\n         println!(\"yo\");\n     }"}, {"sha": "b1cccc51d7bb9acc70bb389e09a4a83047d0c277", "filename": "src/test/parse-fail/struct-literal-in-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-if.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -22,7 +22,7 @@ impl Foo {\n \n fn main() {\n     if Foo {\n-        x: 3    //~ ERROR expected one of `!`, `.`, `::`, `;`, `{`, `}`, or an operator, found `:`\n+        x: 3    //~ ERROR expected type, found `3`\n     }.hi() {\n         println!(\"yo\");\n     }"}, {"sha": "1c52dc48ccd1ac125f4271f00b7810006f806e47", "filename": "src/test/parse-fail/struct-literal-in-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fstruct-literal-in-while.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -22,7 +22,7 @@ impl Foo {\n \n fn main() {\n     while Foo {\n-        x: 3    //~ ERROR expected one of `!`, `.`, `::`, `;`, `{`, `}`, or an operator, found `:`\n+        x: 3    //~ ERROR expected type, found `3`\n     }.hi() {\n         println!(\"yo\");\n     }"}, {"sha": "2b1204483ba07156d12ad0e3cad9033d3c599bf0", "filename": "src/test/run-pass/coerce-expect-unsized-ascribed.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized-ascribed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8157cc67fa25f2944b24f4306151d53d1b80b56/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized-ascribed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized-ascribed.rs?ref=b8157cc67fa25f2944b24f4306151d53d1b80b56", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n+use std::fmt::Debug;\n+\n+// A version of coerce-expect-unsized that uses type ascription.\n+\n+pub fn main() {\n+    let _ = box { [1, 2, 3] }: Box<[int]>;\n+    let _ = box if true { [1, 2, 3] } else { [1, 3, 4] }: Box<[int]>;\n+    let _ = box match true { true => [1, 2, 3], false => [1, 3, 4] }: Box<[int]>;\n+    let _ = box { |x| (x as u8) }: Box<Fn(int) -> _>;\n+    let _ = box if true { false } else { true }: Box<Debug>;\n+    let _ = box match true { true => 'a', false => 'b' }: Box<Debug>;\n+\n+    let _ = &{ [1, 2, 3] }: &[int];\n+    let _ = &if true { [1, 2, 3] } else { [1, 3, 4] }: &[int];\n+    let _ = &match true { true => [1, 2, 3], false => [1, 3, 4] }: &[int];\n+    let _ = &{ |x| (x as u8) }: &Fn(int) -> _;\n+    let _ = &if true { false } else { true }: &Debug;\n+    let _ = &match true { true => 'a', false => 'b' }: &Debug;\n+\n+    let _ = Box::new([1, 2, 3]): Box<[int]>;\n+    let _ = Box::new(|x| (x as u8)): Box<Fn(int) -> _>;\n+\n+    let _ = vec![\n+        Box::new(|x| (x as u8)),\n+        box |x| (x as i16 as u8),\n+    ]: Vec<Box<Fn(int) -> _>>;\n+}"}]}