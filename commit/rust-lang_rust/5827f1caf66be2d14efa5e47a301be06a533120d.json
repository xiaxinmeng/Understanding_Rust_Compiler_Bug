{"sha": "5827f1caf66be2d14efa5e47a301be06a533120d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MjdmMWNhZjY2YmUyZDE0ZWZhNWU0N2EzMDFiZTA2YTUzMzEyMGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-18T04:23:09Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-18T04:23:09Z"}, "message": "Fix build breakage", "tree": {"sha": "c7b4532eede8e5dec614795cd6cb815946318555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7b4532eede8e5dec614795cd6cb815946318555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5827f1caf66be2d14efa5e47a301be06a533120d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5827f1caf66be2d14efa5e47a301be06a533120d", "html_url": "https://github.com/rust-lang/rust/commit/5827f1caf66be2d14efa5e47a301be06a533120d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5827f1caf66be2d14efa5e47a301be06a533120d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8650c6f683cf43e9ced27e81945c20234d2bb61c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8650c6f683cf43e9ced27e81945c20234d2bb61c", "html_url": "https://github.com/rust-lang/rust/commit/8650c6f683cf43e9ced27e81945c20234d2bb61c"}], "stats": {"total": 108, "additions": 54, "deletions": 54}, "files": [{"sha": "de7fda4ef823345a716ece3202be9619a186e639", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/5827f1caf66be2d14efa5e47a301be06a533120d/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5827f1caf66be2d14efa5e47a301be06a533120d/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=5827f1caf66be2d14efa5e47a301be06a533120d", "patch": "@@ -70,73 +70,73 @@ Constructors for flat pipes that using serialization-based flattening.\n */\n pub mod serial {\n \n-    pub use DefaultSerializer = ebml::writer::Serializer;\n-    pub use DefaultDeserializer = ebml::reader::Deserializer;\n+    pub use DefaultEncoder = ebml::writer::Encoder;\n+    pub use DefaultDecoder = ebml::reader::Decoder;\n \n     use core::io::{Reader, Writer};\n     use core::pipes::{Port, Chan};\n-    use serialization::{Deserializable, Serializable};\n+    use serialize::{Decodable, Encodable};\n     use flatpipes::flatteners::{DeserializingUnflattener,\n                                 SerializingFlattener};\n     use flatpipes::flatteners::{deserialize_buffer, serialize_value};\n     use flatpipes::bytepipes::{ReaderBytePort, WriterByteChan};\n     use flatpipes::bytepipes::{PipeBytePort, PipeByteChan};\n \n     pub type ReaderPort<T, R> = FlatPort<\n-        T, DeserializingUnflattener<DefaultDeserializer, T>,\n+        T, DeserializingUnflattener<DefaultDecoder, T>,\n         ReaderBytePort<R>>;\n     pub type WriterChan<T, W> = FlatChan<\n-        T, SerializingFlattener<DefaultSerializer, T>, WriterByteChan<W>>;\n+        T, SerializingFlattener<DefaultEncoder, T>, WriterByteChan<W>>;\n     pub type PipePort<T> = FlatPort<\n-        T, DeserializingUnflattener<DefaultDeserializer, T>, PipeBytePort>;\n+        T, DeserializingUnflattener<DefaultDecoder, T>, PipeBytePort>;\n     pub type PipeChan<T> = FlatChan<\n-        T, SerializingFlattener<DefaultSerializer, T>, PipeByteChan>;\n+        T, SerializingFlattener<DefaultEncoder, T>, PipeByteChan>;\n \n     /// Create a `FlatPort` from a `Reader`\n-    pub fn reader_port<T: Deserializable<DefaultDeserializer>,\n+    pub fn reader_port<T: Decodable<DefaultDecoder>,\n                        R: Reader>(reader: R) -> ReaderPort<T, R> {\n-        let unflat: DeserializingUnflattener<DefaultDeserializer, T> =\n+        let unflat: DeserializingUnflattener<DefaultDecoder, T> =\n             DeserializingUnflattener::new(\n-                deserialize_buffer::<DefaultDeserializer, T>);\n+                deserialize_buffer::<DefaultDecoder, T>);\n         let byte_port = ReaderBytePort::new(move reader);\n         FlatPort::new(move unflat, move byte_port)\n     }\n \n     /// Create a `FlatChan` from a `Writer`\n-    pub fn writer_chan<T: Serializable<DefaultSerializer>,\n+    pub fn writer_chan<T: Encodable<DefaultEncoder>,\n                        W: Writer>(writer: W) -> WriterChan<T, W> {\n-        let flat: SerializingFlattener<DefaultSerializer, T> =\n+        let flat: SerializingFlattener<DefaultEncoder, T> =\n             SerializingFlattener::new(\n-                serialize_value::<DefaultSerializer, T>);\n+                serialize_value::<DefaultEncoder, T>);\n         let byte_chan = WriterByteChan::new(move writer);\n         FlatChan::new(move flat, move byte_chan)\n     }\n \n     /// Create a `FlatPort` from a `Port<~[u8]>`\n-    pub fn pipe_port<T: Deserializable<DefaultDeserializer>>(\n+    pub fn pipe_port<T: Decodable<DefaultDecoder>>(\n         port: Port<~[u8]>\n     ) -> PipePort<T> {\n-        let unflat: DeserializingUnflattener<DefaultDeserializer, T> =\n+        let unflat: DeserializingUnflattener<DefaultDecoder, T> =\n             DeserializingUnflattener::new(\n-                deserialize_buffer::<DefaultDeserializer, T>);\n+                deserialize_buffer::<DefaultDecoder, T>);\n         let byte_port = PipeBytePort::new(move port);\n         FlatPort::new(move unflat, move byte_port)\n     }\n \n     /// Create a `FlatChan` from a `Chan<~[u8]>`\n-    pub fn pipe_chan<T: Serializable<DefaultSerializer>>(\n+    pub fn pipe_chan<T: Encodable<DefaultEncoder>>(\n         chan: Chan<~[u8]>\n     ) -> PipeChan<T> {\n-        let flat: SerializingFlattener<DefaultSerializer, T> =\n+        let flat: SerializingFlattener<DefaultEncoder, T> =\n             SerializingFlattener::new(\n-                serialize_value::<DefaultSerializer, T>);\n+                serialize_value::<DefaultEncoder, T>);\n         let byte_chan = PipeByteChan::new(move chan);\n         FlatChan::new(move flat, move byte_chan)\n     }\n \n     /// Create a pair of `FlatChan` and `FlatPort`, backed by pipes\n-    pub fn pipe_stream<T: Serializable<DefaultSerializer>\n-                          Deserializable<DefaultDeserializer>>(\n+    pub fn pipe_stream<T: Encodable<DefaultEncoder>\n+                          Decodable<DefaultDecoder>>(\n                           ) -> (PipePort<T>, PipeChan<T>) {\n         let (port, chan) = pipes::stream();\n         return (pipe_port(move port), pipe_chan(move chan));\n@@ -322,9 +322,9 @@ pub mod flatteners {\n \n     use core::sys::size_of;\n \n-    use serialization::{Serializer, Deserializer,\n-                        Serializable, Deserializable};\n-    use serialization::deserialize;\n+    use serialize::{Encoder, Decoder,\n+                        Encodable, Decodable};\n+    use serialize::decode;\n \n     use core::io::{Writer, Reader, BytesWriter, ReaderUtil};\n     use flatpipes::util::BufReader;\n@@ -376,32 +376,32 @@ pub mod flatteners {\n \n     pub type DeserializeBuffer<T> = ~fn(buf: &[u8]) -> T;\n \n-    pub struct DeserializingUnflattener<D: Deserializer,\n-                                        T: Deserializable<D>> {\n+    pub struct DeserializingUnflattener<D: Decoder,\n+                                        T: Decodable<D>> {\n         deserialize_buffer: DeserializeBuffer<T>\n     }\n \n     pub type SerializeValue<T> = ~fn(val: &T) -> ~[u8];\n \n-    pub struct SerializingFlattener<S: Serializer, T: Serializable<S>> {\n+    pub struct SerializingFlattener<S: Encoder, T: Encodable<S>> {\n         serialize_value: SerializeValue<T>\n     }\n \n-    pub impl<D: Deserializer, T: Deserializable<D>>\n+    pub impl<D: Decoder, T: Decodable<D>>\n         DeserializingUnflattener<D, T>: Unflattener<T> {\n         fn unflatten(&self, buf: ~[u8]) -> T {\n             (self.deserialize_buffer)(buf)\n         }\n     }\n \n-    pub impl<S: Serializer, T: Serializable<S>>\n+    pub impl<S: Encoder, T: Encodable<S>>\n         SerializingFlattener<S, T>: Flattener<T> {\n         fn flatten(&self, val: T) -> ~[u8] {\n             (self.serialize_value)(&val)\n         }\n     }\n \n-    pub impl<D: Deserializer, T: Deserializable<D>>\n+    pub impl<D: Decoder, T: Decodable<D>>\n         DeserializingUnflattener<D, T> {\n \n         static fn new(deserialize_buffer: DeserializeBuffer<T>\n@@ -412,7 +412,7 @@ pub mod flatteners {\n         }\n     }\n \n-    pub impl<S: Serializer, T: Serializable<S>>\n+    pub impl<S: Encoder, T: Encodable<S>>\n         SerializingFlattener<S, T> {\n \n         static fn new(serialize_value: SerializeValue<T>\n@@ -428,21 +428,21 @@ pub mod flatteners {\n     SerializingFlattener\n     */\n \n-    pub fn deserialize_buffer<D: Deserializer FromReader,\n-                          T: Deserializable<D>>(buf: &[u8]) -> T {\n+    pub fn deserialize_buffer<D: Decoder FromReader,\n+                          T: Decodable<D>>(buf: &[u8]) -> T {\n         let buf = vec::from_slice(buf);\n         let buf_reader = @BufReader::new(move buf);\n         let reader = buf_reader as @Reader;\n         let deser: D = from_reader(reader);\n-        deserialize(&deser)\n+        decode(&deser)\n     }\n \n-    pub fn serialize_value<D: Serializer FromWriter,\n-                       T: Serializable<D>>(val: &T) -> ~[u8] {\n+    pub fn serialize_value<D: Encoder FromWriter,\n+                       T: Encodable<D>>(val: &T) -> ~[u8] {\n         let bytes_writer = @BytesWriter();\n         let writer = bytes_writer as @Writer;\n         let ser = from_writer(writer);\n-        val.serialize(&ser);\n+        val.encode(&ser);\n         let bytes = bytes_writer.bytes.check_out(|bytes| move bytes);\n         return move bytes;\n     }\n@@ -455,34 +455,34 @@ pub mod flatteners {\n         static fn from_writer(w: Writer) -> self;\n     }\n \n-    impl json::Deserializer: FromReader {\n-        static fn from_reader(r: Reader) -> json::Deserializer {\n+    impl json::Decoder: FromReader {\n+        static fn from_reader(r: Reader) -> json::Decoder {\n             match json::from_reader(r) {\n                 Ok(move json) => {\n-                    json::Deserializer(move json)\n+                    json::Decoder(move json)\n                 }\n                 Err(e) => fail fmt!(\"flatpipe: can't parse json: %?\", e)\n             }\n         }\n     }\n \n-    impl json::Serializer: FromWriter {\n-        static fn from_writer(w: Writer) -> json::Serializer {\n-            json::Serializer(move w)\n+    impl json::Encoder: FromWriter {\n+        static fn from_writer(w: Writer) -> json::Encoder {\n+            json::Encoder(move w)\n         }\n     }\n \n-    impl ebml::reader::Deserializer: FromReader {\n-        static fn from_reader(r: Reader) -> ebml::reader::Deserializer {\n+    impl ebml::reader::Decoder: FromReader {\n+        static fn from_reader(r: Reader) -> ebml::reader::Decoder {\n             let buf = @r.read_whole_stream();\n             let doc = ebml::reader::Doc(buf);\n-            ebml::reader::Deserializer(move doc)\n+            ebml::reader::Decoder(move doc)\n         }\n     }\n \n-    impl ebml::writer::Serializer: FromWriter {\n-        static fn from_writer(w: Writer) -> ebml::writer::Serializer {\n-            ebml::writer::Serializer(move w)\n+    impl ebml::writer::Encoder: FromWriter {\n+        static fn from_writer(w: Writer) -> ebml::writer::Encoder {\n+            ebml::writer::Encoder(move w)\n         }\n     }\n \n@@ -669,12 +669,12 @@ mod util {\n #[cfg(test)]\n mod test {\n \n-    // XXX: json::Deserializer doesn't work because of problems related to\n+    // XXX: json::Decoder doesn't work because of problems related to\n     // its interior pointers\n-    //use DefaultSerializer = json::Serializer;\n-    //use DefaultDeserializer = json::Deserializer;\n-    use DefaultSerializer = ebml::writer::Serializer;\n-    use DefaultDeserializer = ebml::reader::Deserializer;\n+    //use DefaultEncoder = json::Encoder;\n+    //use DefaultDecoder = json::Decoder;\n+    use DefaultEncoder = ebml::writer::Encoder;\n+    use DefaultDecoder = ebml::reader::Decoder;\n \n     use flatpipes::flatteners::*;\n     use flatpipes::bytepipes::*;"}]}