{"sha": "5565241f65cf402c3dbcb55dd492f172c473d4ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NjUyNDFmNjVjZjQwMmMzZGJjYjU1ZGQ0OTJmMTcyYzQ3M2Q0Y2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-14T06:43:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-14T06:43:10Z"}, "message": "Auto merge of #77741 - JohnTitor:add-tests, r=matthewjasper\n\nAdd some regression tests\n\nThey're fixed since nightly-2020-10-07:\nCloses #52843\nCloses #53448\nCloses #54108\nCloses #65581\nCloses #65934\nCloses #70292\nCloses #71443", "tree": {"sha": "3e6c5a4f7d81f2f5bace2e183f851c5ee01d58e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e6c5a4f7d81f2f5bace2e183f851c5ee01d58e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5565241f65cf402c3dbcb55dd492f172c473d4ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5565241f65cf402c3dbcb55dd492f172c473d4ce", "html_url": "https://github.com/rust-lang/rust/commit/5565241f65cf402c3dbcb55dd492f172c473d4ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5565241f65cf402c3dbcb55dd492f172c473d4ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31e4087b9098c6174a22b294bea960d54013fe22", "url": "https://api.github.com/repos/rust-lang/rust/commits/31e4087b9098c6174a22b294bea960d54013fe22", "html_url": "https://github.com/rust-lang/rust/commit/31e4087b9098c6174a22b294bea960d54013fe22"}, {"sha": "9f7eab4548388cc93fed635aacc1d59475bed89f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f7eab4548388cc93fed635aacc1d59475bed89f", "html_url": "https://github.com/rust-lang/rust/commit/9f7eab4548388cc93fed635aacc1d59475bed89f"}], "stats": {"total": 227, "additions": 226, "deletions": 1}, "files": [{"sha": "683707470f406af0f28ee31f9c2e4127e68043d3", "filename": "compiler/rustc_typeck/src/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5565241f65cf402c3dbcb55dd492f172c473d4ce/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5565241f65cf402c3dbcb55dd492f172c473d4ce/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs?ref=5565241f65cf402c3dbcb55dd492f172c473d4ce", "patch": "@@ -72,7 +72,7 @@ impl<'tcx> Bounds<'tcx> {\n                     .iter()\n                     .map(|&(region_bound, span)| {\n                         let outlives = ty::OutlivesPredicate(param_ty, region_bound);\n-                        (ty::Binder::dummy(outlives).to_predicate(tcx), span)\n+                        (ty::Binder::bind(outlives).to_predicate(tcx), span)\n                     })\n                     .chain(self.trait_bounds.iter().map(|&(bound_trait_ref, span, constness)| {\n                         let predicate = bound_trait_ref.with_constness(constness).to_predicate(tcx);"}, {"sha": "945d7688ce65f215bdfe9659f1bdbae31ad88505", "filename": "src/test/ui/associated-type-bounds/issue-70292.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-70292.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-70292.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-70292.rs?ref=5565241f65cf402c3dbcb55dd492f172c473d4ce", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+#![feature(associated_type_bounds)]\n+\n+fn foo<F>(_: F)\n+where\n+    F: for<'a> Trait<Output: 'a>,\n+{\n+}\n+\n+trait Trait {\n+    type Output;\n+}\n+\n+impl<T> Trait for T {\n+    type Output = ();\n+}\n+\n+fn main() {\n+    foo(());\n+}"}, {"sha": "5d2a3e6cbad12207bc26c1d9c001501293ef21f1", "filename": "src/test/ui/associated-type-bounds/issue-71443-1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-71443-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-71443-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-71443-1.rs?ref=5565241f65cf402c3dbcb55dd492f172c473d4ce", "patch": "@@ -0,0 +1,9 @@\n+#![feature(associated_type_bounds)]\n+\n+struct Incorrect;\n+\n+fn hello<F: for<'a> Iterator<Item: 'a>>() {\n+    Incorrect //~ERROR: mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "a9459ee7432831845a8a4c45b85b90a0d208d8a2", "filename": "src/test/ui/associated-type-bounds/issue-71443-1.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-71443-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-71443-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-71443-1.stderr?ref=5565241f65cf402c3dbcb55dd492f172c473d4ce", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-71443-1.rs:6:5\n+   |\n+LL | fn hello<F: for<'a> Iterator<Item: 'a>>() {\n+   |                                           - help: try adding a return type: `-> Incorrect`\n+LL |     Incorrect\n+   |     ^^^^^^^^^ expected `()`, found struct `Incorrect`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "813dcd60ad1058e853384286b196d2988c67b641", "filename": "src/test/ui/associated-type-bounds/issue-71443-2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-71443-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-71443-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-71443-2.rs?ref=5565241f65cf402c3dbcb55dd492f172c473d4ce", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+\n+#![feature(associated_type_bounds)]\n+\n+fn hello<'b, F>()\n+where\n+    for<'a> F: Iterator<Item: 'a> + 'b,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "87f67ce4b527a6fca58e85e2ed8009d20d6bc42d", "filename": "src/test/ui/associated-types/issue-54108.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54108.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54108.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54108.rs?ref=5565241f65cf402c3dbcb55dd492f172c473d4ce", "patch": "@@ -0,0 +1,41 @@\n+use std::ops::Add;\n+\n+pub trait Encoder {\n+    type Size: Add<Output = Self::Size>;\n+\n+    fn foo(&self) -> Self::Size;\n+}\n+\n+pub trait SubEncoder: Encoder {\n+    type ActualSize;\n+\n+    fn bar(&self) -> Self::Size;\n+}\n+\n+impl<T> Encoder for T\n+where\n+    T: SubEncoder,\n+{\n+    type Size = <Self as SubEncoder>::ActualSize;\n+    //~^ ERROR: cannot add `<T as SubEncoder>::ActualSize` to `<T as SubEncoder>::ActualSize`\n+\n+    fn foo(&self) -> Self::Size {\n+        self.bar() + self.bar()\n+    }\n+}\n+\n+pub struct UnitEncoder;\n+\n+impl SubEncoder for UnitEncoder {\n+    type ActualSize = ();\n+\n+    fn bar(&self) {}\n+}\n+\n+pub fn fun<R: Encoder>(encoder: &R) {\n+    encoder.foo();\n+}\n+\n+fn main() {\n+    fun(&UnitEncoder {});\n+}"}, {"sha": "927a2de996561f6100527306a116cea6bd698325", "filename": "src/test/ui/associated-types/issue-54108.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54108.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54108.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54108.stderr?ref=5565241f65cf402c3dbcb55dd492f172c473d4ce", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: cannot add `<T as SubEncoder>::ActualSize` to `<T as SubEncoder>::ActualSize`\n+  --> $DIR/issue-54108.rs:19:5\n+   |\n+LL |     type Size: Add<Output = Self::Size>;\n+   |                ------------------------ required by this bound in `Encoder::Size`\n+...\n+LL |     type Size = <Self as SubEncoder>::ActualSize;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `<T as SubEncoder>::ActualSize + <T as SubEncoder>::ActualSize`\n+   |\n+   = help: the trait `Add` is not implemented for `<T as SubEncoder>::ActualSize`\n+help: consider further restricting the associated type\n+   |\n+LL |     T: SubEncoder, <T as SubEncoder>::ActualSize: Add\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "e17b11c5eae1c0fa9da921c8b8b358db1c81c5cd", "filename": "src/test/ui/associated-types/issue-65934.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65934.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65934.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65934.rs?ref=5565241f65cf402c3dbcb55dd492f172c473d4ce", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+trait Trait {\n+    type Assoc;\n+}\n+\n+impl Trait for () {\n+    type Assoc = ();\n+}\n+\n+fn unit() -> impl Into<<() as Trait>::Assoc> {}\n+\n+pub fn ice() {\n+    Into::into(unit());\n+}\n+\n+fn main() {}"}, {"sha": "af65b79d3e838b58464797920d81d463decc68c6", "filename": "src/test/ui/impl-trait/issues/issue-65581.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-65581.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-65581.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-65581.rs?ref=5565241f65cf402c3dbcb55dd492f172c473d4ce", "patch": "@@ -0,0 +1,33 @@\n+// check-pass\n+\n+#![allow(dead_code)]\n+\n+trait Trait1<T, U> {\n+    fn f1(self) -> U;\n+}\n+\n+trait Trait2 {\n+    type T;\n+    type U: Trait2<T = Self::T>;\n+    fn f2(f: impl FnOnce(&Self::U));\n+}\n+\n+fn f3<T: Trait2>() -> impl Trait1<T, T::T> {\n+    Struct1\n+}\n+\n+struct Struct1;\n+\n+impl<T: Trait2> Trait1<T, T::T> for Struct1 {\n+    fn f1(self) -> T::T {\n+        unimplemented!()\n+    }\n+}\n+\n+fn f4<T: Trait2>() {\n+    T::f2(|_| {\n+        f3::<T::U>().f1();\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "b24959d7207200afdd2a19c2fce03982b42ee843", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs?ref=5565241f65cf402c3dbcb55dd492f172c473d4ce", "patch": "@@ -0,0 +1,15 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Foo<T> = impl Default;\n+//~^ ERROR: the trait bound `T: Default` is not satisfied\n+\n+#[allow(unused)]\n+fn foo<T: Default>(t: T) -> Foo<T> {\n+    t\n+}\n+\n+struct NotDefault;\n+\n+fn main() {\n+    let _ = Foo::<NotDefault>::default();\n+}"}, {"sha": "25db8dfabfc29d34b52dc1d06e436a5aa4d6bf6c", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.stderr?ref=5565241f65cf402c3dbcb55dd492f172c473d4ce", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the trait bound `T: Default` is not satisfied\n+  --> $DIR/issue-52843.rs:3:15\n+   |\n+LL | type Foo<T> = impl Default;\n+   |               ^^^^^^^^^^^^ the trait `Default` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Foo<T: Default> = impl Default;\n+   |           ^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "5c82a56e77e141731ded61892979bc2829a5f485", "filename": "src/test/ui/unboxed-closures/issue-53448.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-53448.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-53448.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-53448.rs?ref=5565241f65cf402c3dbcb55dd492f172c473d4ce", "patch": "@@ -0,0 +1,15 @@\n+#![feature(unboxed_closures)]\n+\n+trait Lt<'a> {\n+    type T;\n+}\n+impl<'a> Lt<'a> for () {\n+    type T = ();\n+}\n+\n+fn main() {\n+    let v: <() as Lt<'_>>::T = ();\n+    let f: &mut dyn FnMut<(_,), Output = ()> = &mut |_: <() as Lt<'_>>::T| {};\n+    //~^ ERROR: the size for values of type `<() as Lt<'_>>::T` cannot be known\n+    f(v);\n+}"}, {"sha": "bece9eedc7ffa09bd7135782a3297e9909570004", "filename": "src/test/ui/unboxed-closures/issue-53448.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-53448.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5565241f65cf402c3dbcb55dd492f172c473d4ce/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-53448.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-53448.stderr?ref=5565241f65cf402c3dbcb55dd492f172c473d4ce", "patch": "@@ -0,0 +1,20 @@\n+error[E0277]: the size for values of type `<() as Lt<'_>>::T` cannot be known at compilation time\n+  --> $DIR/issue-53448.rs:12:54\n+   |\n+LL |     let f: &mut dyn FnMut<(_,), Output = ()> = &mut |_: <() as Lt<'_>>::T| {};\n+   |                                                      ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `<() as Lt<'_>>::T`\n+   = help: unsized locals are gated as an unstable feature\n+help: consider further restricting the associated type\n+   |\n+LL | fn main() where <() as Lt<'_>>::T: Sized {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL |     let f: &mut dyn FnMut<(_,), Output = ()> = &mut |_: &<() as Lt<'_>>::T| {};\n+   |                                                         ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}