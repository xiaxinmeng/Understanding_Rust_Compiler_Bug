{"sha": "825f0888cc168c767e3f6c071831963ddebbb78a", "node_id": "C_kwDOAAsO6NoAKDgyNWYwODg4Y2MxNjhjNzY3ZTNmNmMwNzE4MzE5NjNkZGViYmI3OGE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-22T14:38:58Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-22T15:05:20Z"}, "message": "Move useless_anynous_reexport lint into unused_imports", "tree": {"sha": "be9956147695b6ee384fcdec56e7bfd07217d63e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be9956147695b6ee384fcdec56e7bfd07217d63e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/825f0888cc168c767e3f6c071831963ddebbb78a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/825f0888cc168c767e3f6c071831963ddebbb78a", "html_url": "https://github.com/rust-lang/rust/commit/825f0888cc168c767e3f6c071831963ddebbb78a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/825f0888cc168c767e3f6c071831963ddebbb78a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef03fda339923e659d3d3ca3321de887316d2807", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef03fda339923e659d3d3ca3321de887316d2807", "html_url": "https://github.com/rust-lang/rust/commit/ef03fda339923e659d3d3ca3321de887316d2807"}], "stats": {"total": 146, "additions": 44, "deletions": 102}, "files": [{"sha": "68e62c9789aed9fda1e5a0118d1642cd4f8c6f95", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/825f0888cc168c767e3f6c071831963ddebbb78a/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/825f0888cc168c767e3f6c071831963ddebbb78a/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=825f0888cc168c767e3f6c071831963ddebbb78a", "patch": "@@ -508,6 +508,3 @@ lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its ass\n     .specifically = this associated type bound is unsatisfied for `{$proj_ty}`\n \n lint_opaque_hidden_inferred_bound_sugg = add this bound\n-\n-lint_useless_anonymous_reexport = useless anonymous re-export\n-    .note = only anonymous re-exports of traits are useful, this is {$article} `{$desc}`"}, {"sha": "b3578540516d000b98495ca9044220d37720318d", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/825f0888cc168c767e3f6c071831963ddebbb78a/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825f0888cc168c767e3f6c071831963ddebbb78a/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=825f0888cc168c767e3f6c071831963ddebbb78a", "patch": "@@ -74,7 +74,6 @@ mod opaque_hidden_inferred_bound;\n mod pass_by_value;\n mod passes;\n mod redundant_semicolon;\n-mod reexports;\n mod traits;\n mod types;\n mod unused;\n@@ -112,7 +111,6 @@ use noop_method_call::*;\n use opaque_hidden_inferred_bound::*;\n use pass_by_value::*;\n use redundant_semicolon::*;\n-use reexports::*;\n use traits::*;\n use types::*;\n use unused::*;\n@@ -244,7 +242,6 @@ late_lint_methods!(\n             OpaqueHiddenInferredBound: OpaqueHiddenInferredBound,\n             MultipleSupertraitUpcastable: MultipleSupertraitUpcastable,\n             MapUnitFn: MapUnitFn,\n-            UselessAnonymousReexport: UselessAnonymousReexport,\n         ]\n     ]\n );"}, {"sha": "308c02929ca42b2e469d5c01caf5a3ff55b3c086", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/825f0888cc168c767e3f6c071831963ddebbb78a/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825f0888cc168c767e3f6c071831963ddebbb78a/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=825f0888cc168c767e3f6c071831963ddebbb78a", "patch": "@@ -1528,11 +1528,3 @@ pub struct UnusedAllocationDiag;\n #[derive(LintDiagnostic)]\n #[diag(lint_unused_allocation_mut)]\n pub struct UnusedAllocationMutDiag;\n-\n-#[derive(LintDiagnostic)]\n-#[diag(lint_useless_anonymous_reexport)]\n-#[note]\n-pub struct UselessAnonymousReexportDiag {\n-    pub article: &'static str,\n-    pub desc: &'static str,\n-}"}, {"sha": "8737a57ea0264cddb1476d51411acbed456d027f", "filename": "compiler/rustc_lint/src/reexports.rs", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ef03fda339923e659d3d3ca3321de887316d2807/compiler%2Frustc_lint%2Fsrc%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef03fda339923e659d3d3ca3321de887316d2807/compiler%2Frustc_lint%2Fsrc%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Freexports.rs?ref=ef03fda339923e659d3d3ca3321de887316d2807", "patch": "@@ -1,82 +0,0 @@\n-use crate::lints::UselessAnonymousReexportDiag;\n-use crate::{LateContext, LateLintPass, LintContext};\n-use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::DefId;\n-use rustc_hir::{Item, ItemKind, UseKind};\n-use rustc_middle::ty::Visibility;\n-use rustc_span::symbol::kw;\n-use rustc_span::Span;\n-\n-declare_lint! {\n-    /// The `useless_anonymous_reexport` lint checks if anonymous re-exports\n-    /// are re-exports of traits.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,compile_fail\n-    /// #![deny(useless_anonymous_reexport)]\n-    ///\n-    /// mod sub {\n-    ///     pub struct Bar;\n-    /// }\n-    ///\n-    /// pub use self::sub::Bar as _;\n-    /// # fn main() {}\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// Anonymous re-exports are only useful if it's a re-export of a trait\n-    /// in case you want to give access to it. If you re-export any other kind,\n-    /// you won't be able to use it since its name won't be accessible.\n-    pub USELESS_ANONYMOUS_REEXPORT,\n-    Warn,\n-    \"useless anonymous re-export\"\n-}\n-\n-declare_lint_pass!(UselessAnonymousReexport => [USELESS_ANONYMOUS_REEXPORT]);\n-\n-fn emit_err(cx: &LateContext<'_>, span: Span, def_id: DefId) {\n-    let article = cx.tcx.def_descr_article(def_id);\n-    let desc = cx.tcx.def_descr(def_id);\n-    cx.emit_spanned_lint(\n-        USELESS_ANONYMOUS_REEXPORT,\n-        span,\n-        UselessAnonymousReexportDiag { article, desc },\n-    );\n-}\n-\n-impl<'tcx> LateLintPass<'tcx> for UselessAnonymousReexport {\n-    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n-        if let ItemKind::Use(path, kind) = item.kind &&\n-            !matches!(kind, UseKind::Glob) &&\n-            item.ident.name == kw::Underscore &&\n-            // We only want re-exports. If it's just a `use X;`, then we ignore it.\n-            match cx.tcx.local_visibility(item.owner_id.def_id) {\n-                Visibility::Public => true,\n-                Visibility::Restricted(level) => {\n-                    level != cx.tcx.parent_module_from_def_id(item.owner_id.def_id)\n-                }\n-            }\n-        {\n-            for def_id in path.res.iter().filter_map(|r| r.opt_def_id()) {\n-                match cx.tcx.def_kind(def_id) {\n-                    DefKind::Trait | DefKind::TraitAlias => {}\n-                    DefKind::TyAlias => {\n-                        let ty = cx.tcx.type_of(def_id);\n-                        if !ty.0.is_trait() {\n-                            emit_err(cx, item.span, def_id);\n-                            break;\n-                        }\n-                    }\n-                    _ => {\n-                        emit_err(cx, item.span, def_id);\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}"}, {"sha": "dbf6cec788b5a15aebe0e8dd0c25a8180348845c", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/825f0888cc168c767e3f6c071831963ddebbb78a/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825f0888cc168c767e3f6c071831963ddebbb78a/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=825f0888cc168c767e3f6c071831963ddebbb78a", "patch": "@@ -32,9 +32,10 @@ use rustc_ast::visit::{self, Visitor};\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_data_structures::unord::UnordSet;\n use rustc_errors::{pluralize, MultiSpan};\n+use rustc_hir::def::{DefKind, Res};\n use rustc_session::lint::builtin::{MACRO_USE_EXTERN_CRATE, UNUSED_EXTERN_CRATES, UNUSED_IMPORTS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n-use rustc_span::symbol::Ident;\n+use rustc_span::symbol::{kw, Ident};\n use rustc_span::{Span, DUMMY_SP};\n \n struct UnusedImport<'a> {\n@@ -58,6 +59,7 @@ struct UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     base_use_tree: Option<&'a ast::UseTree>,\n     base_id: ast::NodeId,\n     item_span: Span,\n+    base_use_is_pub: bool,\n }\n \n struct ExternCrateToLint {\n@@ -110,6 +112,35 @@ impl<'a, 'b, 'tcx> UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n             unused: Default::default(),\n         })\n     }\n+\n+    fn check_import_as_underscore(&mut self, item: &ast::UseTree, id: ast::NodeId) {\n+        match item.kind {\n+            ast::UseTreeKind::Simple(Some(ident)) => {\n+                if ident.name == kw::Underscore\n+                    && !self\n+                        .r\n+                        .import_res_map\n+                        .get(&id)\n+                        .map(|per_ns| {\n+                            per_ns.iter().filter_map(|res| res.as_ref()).any(|res| {\n+                                matches!(res, Res::Def(DefKind::Trait | DefKind::TraitAlias, _))\n+                            })\n+                        })\n+                        .unwrap_or(false)\n+                {\n+                    self.unused_import(self.base_id).add(id);\n+                }\n+            }\n+            ast::UseTreeKind::Nested(ref items) => self.check_imports_as_underscore(items),\n+            _ => {}\n+        }\n+    }\n+\n+    fn check_imports_as_underscore(&mut self, items: &[(ast::UseTree, ast::NodeId)]) {\n+        for (item, id) in items {\n+            self.check_import_as_underscore(item, *id);\n+        }\n+    }\n }\n \n impl<'a, 'b, 'tcx> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n@@ -119,7 +150,8 @@ impl<'a, 'b, 'tcx> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n             // whether they're used or not. Also ignore imports with a dummy span\n             // because this means that they were generated in some fashion by the\n             // compiler and we don't need to consider them.\n-            ast::ItemKind::Use(..) if item.vis.kind.is_pub() || item.span.is_dummy() => return,\n+            ast::ItemKind::Use(..) if item.span.is_dummy() => return,\n+            ast::ItemKind::Use(..) => self.base_use_is_pub = item.vis.kind.is_pub(),\n             ast::ItemKind::ExternCrate(orig_name) => {\n                 self.extern_crate_items.push(ExternCrateToLint {\n                     id: item.id,\n@@ -146,6 +178,11 @@ impl<'a, 'b, 'tcx> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n             self.base_use_tree = Some(use_tree);\n         }\n \n+        if self.base_use_is_pub {\n+            self.check_import_as_underscore(use_tree, id);\n+            return;\n+        }\n+\n         if let ast::UseTreeKind::Nested(ref items) = use_tree.kind {\n             if items.is_empty() {\n                 self.unused_import(self.base_id).add(id);\n@@ -300,6 +337,7 @@ impl Resolver<'_, '_> {\n             base_use_tree: None,\n             base_id: ast::DUMMY_NODE_ID,\n             item_span: DUMMY_SP,\n+            base_use_is_pub: false,\n         };\n         visit::walk_crate(&mut visitor, krate);\n "}, {"sha": "0e60c73b67a44e274dfc886d4d33e1b26f9262bb", "filename": "tests/ui/imports/issue-99695-b.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/825f0888cc168c767e3f6c071831963ddebbb78a/tests%2Fui%2Fimports%2Fissue-99695-b.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/825f0888cc168c767e3f6c071831963ddebbb78a/tests%2Fui%2Fimports%2Fissue-99695-b.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695-b.fixed?ref=825f0888cc168c767e3f6c071831963ddebbb78a", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n+#![allow(unused, nonstandard_style)]\n mod m {\n \n     mod p {"}, {"sha": "031443a1f5df892f2bd5300112d66866cdae0d59", "filename": "tests/ui/imports/issue-99695-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/825f0888cc168c767e3f6c071831963ddebbb78a/tests%2Fui%2Fimports%2Fissue-99695-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825f0888cc168c767e3f6c071831963ddebbb78a/tests%2Fui%2Fimports%2Fissue-99695-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695-b.rs?ref=825f0888cc168c767e3f6c071831963ddebbb78a", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n+#![allow(unused, nonstandard_style)]\n mod m {\n \n     mod p {"}, {"sha": "6bf228b23aad221d8fbf1a798186f38fb3ebd061", "filename": "tests/ui/imports/issue-99695.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/825f0888cc168c767e3f6c071831963ddebbb78a/tests%2Fui%2Fimports%2Fissue-99695.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/825f0888cc168c767e3f6c071831963ddebbb78a/tests%2Fui%2Fimports%2Fissue-99695.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695.fixed?ref=825f0888cc168c767e3f6c071831963ddebbb78a", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n+#![allow(unused, nonstandard_style)]\n mod m {\n     #[macro_export]\n     macro_rules! nu {"}, {"sha": "f7199f1497ab0877b12d9d9e8bb6520dc09fa75d", "filename": "tests/ui/imports/issue-99695.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/825f0888cc168c767e3f6c071831963ddebbb78a/tests%2Fui%2Fimports%2Fissue-99695.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825f0888cc168c767e3f6c071831963ddebbb78a/tests%2Fui%2Fimports%2Fissue-99695.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695.rs?ref=825f0888cc168c767e3f6c071831963ddebbb78a", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n+#![allow(unused, nonstandard_style)]\n mod m {\n     #[macro_export]\n     macro_rules! nu {"}]}