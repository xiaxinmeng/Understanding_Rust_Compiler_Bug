{"sha": "004208fc46467c5e171e739559f77c0fafbbe87a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNDIwOGZjNDY0NjdjNWUxNzFlNzM5NTU5Zjc3YzBmYWZiYmU4N2E=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-05-01T13:52:08Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-05-01T13:52:08Z"}, "message": "Move recursion check for zsts back to read site instead of access check site.", "tree": {"sha": "d31df1114e7298b5763124cb8e50a636c3c07b7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d31df1114e7298b5763124cb8e50a636c3c07b7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/004208fc46467c5e171e739559f77c0fafbbe87a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/004208fc46467c5e171e739559f77c0fafbbe87a", "html_url": "https://github.com/rust-lang/rust/commit/004208fc46467c5e171e739559f77c0fafbbe87a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/004208fc46467c5e171e739559f77c0fafbbe87a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd61d06772d17c6242265d860fbfb5eafd282caa", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd61d06772d17c6242265d860fbfb5eafd282caa", "html_url": "https://github.com/rust-lang/rust/commit/fd61d06772d17c6242265d860fbfb5eafd282caa"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "39e428cee1d7bee2088cab7227383326f615150b", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/004208fc46467c5e171e739559f77c0fafbbe87a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004208fc46467c5e171e739559f77c0fafbbe87a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=004208fc46467c5e171e739559f77c0fafbbe87a", "patch": "@@ -400,18 +400,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n                 // We can still be zero-sized in this branch, in which case we have to\n                 // return `None`.\n-                if size.bytes() == 0 {\n-                    // We may be reading from a static.\n-                    // In order to ensure that `static FOO: Type = FOO;` causes a cycle error\n-                    // instead of magically pulling *any* ZST value from the ether, we need to\n-                    // actually access the referenced allocation. The caller is likely\n-                    // to short-circuit on `None`, so we trigger the access here to\n-                    // make sure it happens.\n-                    self.get_raw(ptr.alloc_id)?;\n-                    None\n-                } else {\n-                    Some(ptr)\n-                }\n+                if size.bytes() == 0 { None } else { Some(ptr) }\n             }\n         })\n     }"}, {"sha": "05844eb126c59bec3d2f57a32d4efcee91975614", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/004208fc46467c5e171e739559f77c0fafbbe87a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004208fc46467c5e171e739559f77c0fafbbe87a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=004208fc46467c5e171e739559f77c0fafbbe87a", "patch": "@@ -240,6 +240,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         {\n             Some(ptr) => ptr,\n             None => {\n+                if let Scalar::Ptr(ptr) = mplace.ptr {\n+                    // We may be reading from a static.\n+                    // In order to ensure that `static FOO: Type = FOO;` causes a cycle error\n+                    // instead of magically pulling *any* ZST value from the ether, we need to\n+                    // actually access the referenced allocation. The caller is likely\n+                    // to short-circuit on `None`, so we trigger the access here to\n+                    // make sure it happens.\n+                    self.memory.get_raw(ptr.alloc_id)?;\n+                }\n                 return Ok(Some(ImmTy {\n                     // zero-sized type\n                     imm: Scalar::zst().into(),"}, {"sha": "a6d90e44e3407fc888dbf2aa9ae3b5ecaf8020a6", "filename": "src/test/ui/consts/static-ice.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/004208fc46467c5e171e739559f77c0fafbbe87a/src%2Ftest%2Fui%2Fconsts%2Fstatic-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004208fc46467c5e171e739559f77c0fafbbe87a/src%2Ftest%2Fui%2Fconsts%2Fstatic-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic-ice.rs?ref=004208fc46467c5e171e739559f77c0fafbbe87a", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+\n+#[derive(Copy, Clone)]\n+pub struct Glfw;\n+\n+static mut GLFW: Option<Glfw> = None;\n+pub fn new() -> Glfw {\n+    unsafe {\n+        if let Some(glfw) = GLFW {\n+            return glfw;\n+        } else {\n+            todo!()\n+        }\n+    };\n+}\n+\n+extern \"C\" {\n+    static _dispatch_queue_attr_concurrent: [u8; 0];\n+}\n+\n+static DISPATCH_QUEUE_CONCURRENT: &'static [u8; 0] =\n+    unsafe { &_dispatch_queue_attr_concurrent };\n+\n+fn main() {\n+    *DISPATCH_QUEUE_CONCURRENT;\n+    new();\n+}"}]}