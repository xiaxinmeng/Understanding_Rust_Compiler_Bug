{"sha": "d6689fdc616fd3e7af9946072cb0aaceb2bb26b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2Njg5ZmRjNjE2ZmQzZTdhZjk5NDYwNzJjYjBhYWNlYjJiYjI2Yjk=", "commit": {"author": {"name": "Josh Driver", "email": "keeperofdakeys@gmail.com", "date": "2016-11-13T09:09:27Z"}, "committer": {"name": "Josh Driver", "email": "keeperofdakeys@gmail.com", "date": "2016-11-14T11:52:17Z"}, "message": "Add warnings when the #[should_panic] attribute is invalid", "tree": {"sha": "4a78e61ce34cd00ed57d5f4f55b9ad938003c058", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a78e61ce34cd00ed57d5f4f55b9ad938003c058"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6689fdc616fd3e7af9946072cb0aaceb2bb26b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6689fdc616fd3e7af9946072cb0aaceb2bb26b9", "html_url": "https://github.com/rust-lang/rust/commit/d6689fdc616fd3e7af9946072cb0aaceb2bb26b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6689fdc616fd3e7af9946072cb0aaceb2bb26b9/comments", "author": {"login": "keeperofdakeys", "id": 141626, "node_id": "MDQ6VXNlcjE0MTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/141626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keeperofdakeys", "html_url": "https://github.com/keeperofdakeys", "followers_url": "https://api.github.com/users/keeperofdakeys/followers", "following_url": "https://api.github.com/users/keeperofdakeys/following{/other_user}", "gists_url": "https://api.github.com/users/keeperofdakeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/keeperofdakeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keeperofdakeys/subscriptions", "organizations_url": "https://api.github.com/users/keeperofdakeys/orgs", "repos_url": "https://api.github.com/users/keeperofdakeys/repos", "events_url": "https://api.github.com/users/keeperofdakeys/events{/privacy}", "received_events_url": "https://api.github.com/users/keeperofdakeys/received_events", "type": "User", "site_admin": false}, "committer": {"login": "keeperofdakeys", "id": 141626, "node_id": "MDQ6VXNlcjE0MTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/141626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keeperofdakeys", "html_url": "https://github.com/keeperofdakeys", "followers_url": "https://api.github.com/users/keeperofdakeys/followers", "following_url": "https://api.github.com/users/keeperofdakeys/following{/other_user}", "gists_url": "https://api.github.com/users/keeperofdakeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/keeperofdakeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keeperofdakeys/subscriptions", "organizations_url": "https://api.github.com/users/keeperofdakeys/orgs", "repos_url": "https://api.github.com/users/keeperofdakeys/repos", "events_url": "https://api.github.com/users/keeperofdakeys/events{/privacy}", "received_events_url": "https://api.github.com/users/keeperofdakeys/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a277f9deb0bcccc096334447b0e57765110707c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a277f9deb0bcccc096334447b0e57765110707c7", "html_url": "https://github.com/rust-lang/rust/commit/a277f9deb0bcccc096334447b0e57765110707c7"}], "stats": {"total": 90, "additions": 83, "deletions": 7}, "files": [{"sha": "59a7e75d12557039c10813c7dd1b88c67dfc76bb", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d6689fdc616fd3e7af9946072cb0aaceb2bb26b9/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6689fdc616fd3e7af9946072cb0aaceb2bb26b9/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=d6689fdc616fd3e7af9946072cb0aaceb2bb26b9", "patch": "@@ -132,7 +132,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n                         path: self.cx.path.clone(),\n                         bench: is_bench_fn(&self.cx, &i),\n                         ignore: is_ignored(&i),\n-                        should_panic: should_panic(&i)\n+                        should_panic: should_panic(&i, &self.cx)\n                     };\n                     self.cx.testfns.push(test);\n                     self.tests.push(i.ident);\n@@ -395,14 +395,44 @@ fn is_ignored(i: &ast::Item) -> bool {\n     i.attrs.iter().any(|attr| attr.check_name(\"ignore\"))\n }\n \n-fn should_panic(i: &ast::Item) -> ShouldPanic {\n+fn should_panic(i: &ast::Item, cx: &TestCtxt) -> ShouldPanic {\n     match i.attrs.iter().find(|attr| attr.check_name(\"should_panic\")) {\n         Some(attr) => {\n-            let msg = attr.meta_item_list()\n-                .and_then(|list| list.iter().find(|mi| mi.check_name(\"expected\")))\n-                .and_then(|li| li.meta_item())\n-                .and_then(|mi| mi.value_str());\n-            ShouldPanic::Yes(msg)\n+            let sd = cx.span_diagnostic;\n+            if attr.is_value_str() {\n+                sd.struct_span_warn(\n+                    attr.span(),\n+                    \"attribute must be of the form: \\\n+                     `#[should_panic]` or \\\n+                     `#[should_panic(expected = \\\"error message\\\")]`\"\n+                ).note(\"Errors in this attribute were erroneously allowed \\\n+                        and will become a hard error in a future release.\")\n+                .emit();\n+                return ShouldPanic::Yes(None);\n+            }\n+            match attr.meta_item_list() {\n+                // Handle #[should_panic]\n+                None => ShouldPanic::Yes(None),\n+                // Handle #[should_panic(expected = \"foo\")]\n+                Some(list) => {\n+                    let msg = list.iter()\n+                        .find(|mi| mi.check_name(\"expected\"))\n+                        .and_then(|mi| mi.meta_item())\n+                        .and_then(|mi| mi.value_str());\n+                    if list.len() != 1 || msg.is_none() {\n+                        sd.struct_span_warn(\n+                            attr.span(),\n+                            \"argument must be of the form: \\\n+                             `expected = \\\"error message\\\"`\"\n+                        ).note(\"Errors in this attribute were erroneously \\\n+                                allowed and will become a hard error in a \\\n+                                future release.\").emit();\n+                        ShouldPanic::Yes(None)\n+                    } else {\n+                        ShouldPanic::Yes(msg)\n+                    }\n+                },\n+            }\n         }\n         None => ShouldPanic::No,\n     }"}, {"sha": "2d068872a4d3dfbe634dd384e999dd330e0a8d27", "filename": "src/test/run-pass/test-should-panic-attr.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d6689fdc616fd3e7af9946072cb0aaceb2bb26b9/src%2Ftest%2Frun-pass%2Ftest-should-panic-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6689fdc616fd3e7af9946072cb0aaceb2bb26b9/src%2Ftest%2Frun-pass%2Ftest-should-panic-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-should-panic-attr.rs?ref=d6689fdc616fd3e7af9946072cb0aaceb2bb26b9", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+#[test]\n+#[should_panic = \"foo\"]\n+//~^ WARN: attribute must be of the form:\n+fn test1() {\n+    panic!();\n+}\n+\n+#[test]\n+#[should_panic(expected)]\n+//~^ WARN: argument must be of the form:\n+fn test2() {\n+    panic!();\n+}\n+\n+#[test]\n+#[should_panic(expect)]\n+//~^ WARN: argument must be of the form:\n+fn test3() {\n+    panic!();\n+}\n+\n+#[test]\n+#[should_panic(expected(foo, bar))]\n+//~^ WARN: argument must be of the form:\n+fn test4() {\n+    panic!();\n+}\n+\n+#[test]\n+#[should_panic(expected = \"foo\", bar)]\n+//~^ WARN: argument must be of the form:\n+fn test5() {\n+    panic!();\n+}"}]}