{"sha": "e45f6000a0bd46d4b7580db59c86f3d30adbc270", "node_id": "C_kwDOAAsO6NoAKGU0NWY2MDAwYTBiZDQ2ZDRiNzU4MGRiNTljODZmM2QzMGFkYmMyNzA", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T12:27:47Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T12:27:47Z"}, "message": "Remove the partial linking hack for global asm support", "tree": {"sha": "ce327ebdff50d6a26b5a644d8b27e8a9ff822e19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce327ebdff50d6a26b5a644d8b27e8a9ff822e19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e45f6000a0bd46d4b7580db59c86f3d30adbc270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e45f6000a0bd46d4b7580db59c86f3d30adbc270", "html_url": "https://github.com/rust-lang/rust/commit/e45f6000a0bd46d4b7580db59c86f3d30adbc270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e45f6000a0bd46d4b7580db59c86f3d30adbc270/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48b312f04a89c72cf6db2cbb08bbc7fe6fce9bdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/48b312f04a89c72cf6db2cbb08bbc7fe6fce9bdb", "html_url": "https://github.com/rust-lang/rust/commit/48b312f04a89c72cf6db2cbb08bbc7fe6fce9bdb"}], "stats": {"total": 136, "additions": 87, "deletions": 49}, "files": [{"sha": "4122ce1822406982d604a0c8513902f2ac933d8c", "filename": "src/driver/aot.rs", "status": "modified", "additions": 82, "deletions": 20, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/e45f6000a0bd46d4b7580db59c86f3d30adbc270/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45f6000a0bd46d4b7580db59c86f3d30adbc270/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=e45f6000a0bd46d4b7580db59c86f3d30adbc270", "patch": "@@ -1,6 +1,7 @@\n //! The AOT driver uses [`cranelift_object`] to write object files suitable for linking into a\n //! standalone executable.\n \n+use std::path::PathBuf;\n use std::sync::Arc;\n \n use rustc_codegen_ssa::back::metadata::create_compressed_metadata_file;\n@@ -19,7 +20,11 @@ use cranelift_object::{ObjectBuilder, ObjectModule};\n use crate::global_asm::GlobalAsmConfig;\n use crate::{prelude::*, BackendConfig};\n \n-struct ModuleCodegenResult(CompiledModule, Option<(WorkProductId, WorkProduct)>);\n+struct ModuleCodegenResult(\n+    CompiledModule,\n+    Option<CompiledModule>,\n+    Option<(WorkProductId, WorkProduct)>,\n+);\n \n impl<HCX> HashStable<HCX> for ModuleCodegenResult {\n     fn hash_stable(&self, _: &mut HCX, _: &mut StableHasher) {\n@@ -42,11 +47,15 @@ impl OngoingCodegen {\n         let mut modules = vec![];\n \n         for module_codegen_result in self.modules {\n-            let ModuleCodegenResult(module, work_product) = module_codegen_result;\n+            let ModuleCodegenResult(module_regular, module_global_asm, work_product) =\n+                module_codegen_result;\n             if let Some((work_product_id, work_product)) = work_product {\n                 work_products.insert(work_product_id, work_product);\n             }\n-            modules.push(module);\n+            modules.push(module_regular);\n+            if let Some(module_global_asm) = module_global_asm {\n+                modules.push(module_global_asm);\n+            }\n         }\n \n         (\n@@ -80,6 +89,7 @@ fn emit_module(\n     module: ObjectModule,\n     debug: Option<DebugContext<'_>>,\n     unwind_context: UnwindContext,\n+    global_asm_object_file: Option<PathBuf>,\n ) -> ModuleCodegenResult {\n     let mut product = module.finish();\n \n@@ -100,6 +110,12 @@ fn emit_module(\n \n     let work_product = if backend_config.disable_incr_cache {\n         None\n+    } else if let Some(global_asm_object_file) = &global_asm_object_file {\n+        rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(\n+            tcx.sess,\n+            &name,\n+            &[(\"o\", &tmp_file), (\"asm.o\", global_asm_object_file)],\n+        )\n     } else {\n         rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(\n             tcx.sess,\n@@ -109,35 +125,78 @@ fn emit_module(\n     };\n \n     ModuleCodegenResult(\n-        CompiledModule { name, kind, object: Some(tmp_file), dwarf_object: None, bytecode: None },\n+        CompiledModule {\n+            name: name.clone(),\n+            kind,\n+            object: Some(tmp_file),\n+            dwarf_object: None,\n+            bytecode: None,\n+        },\n+        global_asm_object_file.map(|global_asm_object_file| CompiledModule {\n+            name: format!(\"{name}.asm\"),\n+            kind,\n+            object: Some(global_asm_object_file),\n+            dwarf_object: None,\n+            bytecode: None,\n+        }),\n         work_product,\n     )\n }\n \n fn reuse_workproduct_for_cgu(tcx: TyCtxt<'_>, cgu: &CodegenUnit<'_>) -> ModuleCodegenResult {\n     let work_product = cgu.previous_work_product(tcx);\n-    let obj_out = tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu.name().as_str()));\n-    let source_file = rustc_incremental::in_incr_comp_dir_sess(\n+    let obj_out_regular =\n+        tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu.name().as_str()));\n+    let source_file_regular = rustc_incremental::in_incr_comp_dir_sess(\n         &tcx.sess,\n         &work_product.saved_files.get(\"o\").expect(\"no saved object file in work product\"),\n     );\n-    if let Err(err) = rustc_fs_util::link_or_copy(&source_file, &obj_out) {\n+\n+    if let Err(err) = rustc_fs_util::link_or_copy(&source_file_regular, &obj_out_regular) {\n         tcx.sess.err(&format!(\n             \"unable to copy {} to {}: {}\",\n-            source_file.display(),\n-            obj_out.display(),\n+            source_file_regular.display(),\n+            obj_out_regular.display(),\n             err\n         ));\n     }\n+    let obj_out_global_asm =\n+        crate::global_asm::add_file_stem_postfix(obj_out_regular.clone(), \".asm\");\n+    let has_global_asm = if let Some(asm_o) = work_product.saved_files.get(\"asm.o\") {\n+        let source_file_global_asm = rustc_incremental::in_incr_comp_dir_sess(&tcx.sess, asm_o);\n+        if let Err(err) = rustc_fs_util::link_or_copy(&source_file_global_asm, &obj_out_global_asm)\n+        {\n+            tcx.sess.err(&format!(\n+                \"unable to copy {} to {}: {}\",\n+                source_file_regular.display(),\n+                obj_out_regular.display(),\n+                err\n+            ));\n+        }\n+        true\n+    } else {\n+        false\n+    };\n \n     ModuleCodegenResult(\n         CompiledModule {\n             name: cgu.name().to_string(),\n             kind: ModuleKind::Regular,\n-            object: Some(obj_out),\n+            object: Some(obj_out_regular),\n             dwarf_object: None,\n             bytecode: None,\n         },\n+        if has_global_asm {\n+            Some(CompiledModule {\n+                name: cgu.name().to_string(),\n+                kind: ModuleKind::Regular,\n+                object: Some(obj_out_global_asm),\n+                dwarf_object: None,\n+                bytecode: None,\n+            })\n+        } else {\n+            None\n+        },\n         Some((cgu.work_product_id(), work_product)),\n     )\n }\n@@ -191,6 +250,15 @@ fn module_codegen(\n         cgu.is_primary(),\n     );\n \n+    let global_asm_object_file = match crate::global_asm::compile_global_asm(\n+        &global_asm_config,\n+        cgu.name().as_str(),\n+        &cx.global_asm,\n+    ) {\n+        Ok(global_asm_object_file) => global_asm_object_file,\n+        Err(err) => tcx.sess.fatal(&err),\n+    };\n+\n     let debug_context = cx.debug_context;\n     let unwind_context = cx.unwind_context;\n     let codegen_result = tcx.sess.time(\"write object file\", || {\n@@ -202,18 +270,10 @@ fn module_codegen(\n             module,\n             debug_context,\n             unwind_context,\n+            global_asm_object_file,\n         )\n     });\n \n-    match crate::global_asm::compile_global_asm(\n-        &global_asm_config,\n-        cgu.name().as_str(),\n-        &cx.global_asm,\n-    ) {\n-        Ok(()) => {}\n-        Err(err) => tcx.sess.fatal(&err),\n-    }\n-\n     codegen_result\n }\n \n@@ -281,15 +341,17 @@ pub(crate) fn run_aot(\n         crate::allocator::codegen(tcx, &mut allocator_module, &mut allocator_unwind_context);\n \n     let allocator_module = if created_alloc_shim {\n-        let ModuleCodegenResult(module, work_product) = emit_module(\n+        let ModuleCodegenResult(module, module_global_asm, work_product) = emit_module(\n             tcx,\n             &backend_config,\n             \"allocator_shim\".to_string(),\n             ModuleKind::Allocator,\n             allocator_module,\n             None,\n             allocator_unwind_context,\n+            None,\n         );\n+        assert!(module_global_asm.is_none());\n         if let Some((id, product)) = work_product {\n             work_products.insert(id, product);\n         }"}, {"sha": "8e711988f814d74ef04d769032b6573bdca49330", "filename": "src/global_asm.rs", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e45f6000a0bd46d4b7580db59c86f3d30adbc270/src%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45f6000a0bd46d4b7580db59c86f3d30adbc270/src%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fglobal_asm.rs?ref=e45f6000a0bd46d4b7580db59c86f3d30adbc270", "patch": "@@ -36,7 +36,6 @@ pub(crate) fn codegen_global_asm_item(tcx: TyCtxt<'_>, global_asm: &mut String,\n pub(crate) struct GlobalAsmConfig {\n     asm_enabled: bool,\n     assembler: PathBuf,\n-    linker: PathBuf,\n     output_filenames: Arc<OutputFilenames>,\n }\n \n@@ -49,7 +48,6 @@ impl GlobalAsmConfig {\n         GlobalAsmConfig {\n             asm_enabled,\n             assembler: crate::toolchain::get_toolchain_binary(tcx.sess, \"as\"),\n-            linker: crate::toolchain::get_toolchain_binary(tcx.sess, \"ld\"),\n             output_filenames: tcx.output_filenames(()).clone(),\n         }\n     }\n@@ -59,14 +57,14 @@ pub(crate) fn compile_global_asm(\n     config: &GlobalAsmConfig,\n     cgu_name: &str,\n     global_asm: &str,\n-) -> Result<(), String> {\n+) -> Result<Option<PathBuf>, String> {\n     if global_asm.is_empty() {\n-        return Ok(());\n+        return Ok(None);\n     }\n \n     if !config.asm_enabled {\n         if global_asm.contains(\"__rust_probestack\") {\n-            return Ok(());\n+            return Ok(None);\n         }\n \n         // FIXME fix linker error on macOS\n@@ -105,32 +103,10 @@ pub(crate) fn compile_global_asm(\n         return Err(format!(\"Failed to assemble `{}`\", global_asm));\n     }\n \n-    // Link the global asm and main object file together\n-    let main_object_file = add_file_stem_postfix(output_object_file.clone(), \".main\");\n-    std::fs::rename(&output_object_file, &main_object_file).unwrap();\n-    let status = Command::new(&config.linker)\n-        .arg(\"-r\") // Create a new object file\n-        .arg(\"-o\")\n-        .arg(output_object_file)\n-        .arg(&main_object_file)\n-        .arg(&global_asm_object_file)\n-        .status()\n-        .unwrap();\n-    if !status.success() {\n-        return Err(format!(\n-            \"Failed to link `{}` and `{}` together\",\n-            main_object_file.display(),\n-            global_asm_object_file.display(),\n-        ));\n-    }\n-\n-    std::fs::remove_file(global_asm_object_file).unwrap();\n-    std::fs::remove_file(main_object_file).unwrap();\n-\n-    Ok(())\n+    Ok(Some(global_asm_object_file))\n }\n \n-fn add_file_stem_postfix(mut path: PathBuf, postfix: &str) -> PathBuf {\n+pub(crate) fn add_file_stem_postfix(mut path: PathBuf, postfix: &str) -> PathBuf {\n     let mut new_filename = path.file_stem().unwrap().to_owned();\n     new_filename.push(postfix);\n     if let Some(extension) = path.extension() {"}]}