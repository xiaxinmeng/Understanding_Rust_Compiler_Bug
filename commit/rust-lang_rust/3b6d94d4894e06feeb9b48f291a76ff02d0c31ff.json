{"sha": "3b6d94d4894e06feeb9b48f291a76ff02d0c31ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNmQ5NGQ0ODk0ZTA2ZmVlYjliNDhmMjkxYTc2ZmYwMmQwYzMxZmY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-21T21:01:08Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-21T21:11:00Z"}, "message": "Move names and ids of native items into their recs, rather than their tags", "tree": {"sha": "c9cef8afdf0cf60015a24b26b9105120ce521451", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9cef8afdf0cf60015a24b26b9105120ce521451"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff", "html_url": "https://github.com/rust-lang/rust/commit/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26d8eaefa7c668ff337dde4942c5102de50b0fc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/26d8eaefa7c668ff337dde4942c5102de50b0fc1", "html_url": "https://github.com/rust-lang/rust/commit/26d8eaefa7c668ff337dde4942c5102de50b0fc1"}], "stats": {"total": 130, "additions": 56, "deletions": 74}, "files": [{"sha": "359244441b5b4708a4ff0c0affd2256790767975", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=3b6d94d4894e06feeb9b48f291a76ff02d0c31ff", "patch": "@@ -484,15 +484,14 @@ tag item_ {\n     item_obj(_obj, vec[ty_param], node_id /* constructor id */);\n }\n \n-type native_item = spanned[native_item_];\n+type native_item = rec(ident ident,\n+                       native_item_ node,\n+                       node_id id,\n+                       span span);\n \n tag native_item_ {\n-    native_item_ty(ident, node_id);\n-    native_item_fn(ident,\n-                   option::t[str],\n-                   fn_decl,\n-                   vec[ty_param],\n-                   node_id);\n+    native_item_ty;\n+    native_item_fn(option::t[str], fn_decl, vec[ty_param]);\n }\n \n fn is_exported(ident i, _mod m) -> bool {"}, {"sha": "2a7fb8d6cde112fd0384a56813858018e50e22c8", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=3b6d94d4894e06feeb9b48f291a76ff02d0c31ff", "patch": "@@ -1841,8 +1841,10 @@ fn parse_item_native_type(&parser p) -> @ast::native_item {\n     auto t = parse_type_decl(p);\n     auto hi = p.get_hi_pos();\n     expect(p, token::SEMI);\n-    auto item = ast::native_item_ty(t._1, p.get_id());\n-    ret @spanned(t._0, hi, item);\n+    ret @rec(ident=t._1,\n+             node=ast::native_item_ty,\n+             id=p.get_id(),\n+             span=rec(lo=t._0, hi=hi));\n }\n \n fn parse_item_native_fn(&parser p) -> @ast::native_item {\n@@ -1856,9 +1858,10 @@ fn parse_item_native_fn(&parser p) -> @ast::native_item {\n     }\n     auto hi = p.get_hi_pos();\n     expect(p, token::SEMI);\n-    auto item =\n-        ast::native_item_fn(t._0, link_name, decl, t._1, p.get_id());\n-    ret @spanned(lo, hi, item);\n+    ret @rec(ident=t._0,\n+             node=ast::native_item_fn(link_name, decl, t._1),\n+             id=p.get_id(),\n+             span=rec(lo=lo, hi=hi));\n }\n \n fn parse_native_item(&parser p) -> @ast::native_item {"}, {"sha": "fd62faf16efb097e0a7d89cb9f857c406117d71e", "filename": "src/comp/middle/ast_map.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fast_map.rs?ref=3b6d94d4894e06feeb9b48f291a76ff02d0c31ff", "patch": "@@ -33,11 +33,7 @@ fn map_item(&map map, &@item i, &() e, &vt[()] v) {\n }\n \n fn map_native_item(&map map, &@native_item i, &() e, &vt[()] v) {\n-    auto id = alt (i.node) {\n-        case (native_item_ty(_, ?id)) { id }\n-        case (native_item_fn(_, _, _, _, ?id)) { id }\n-    };\n-    map.insert(id, node_native_item(i));\n+    map.insert(i.id, node_native_item(i));\n     visit::visit_native_item(i, e, v);\n }\n "}, {"sha": "c438ddef0117e343cfc989c0c7ebcf0807e36e2f", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=3b6d94d4894e06feeb9b48f291a76ff02d0c31ff", "patch": "@@ -337,22 +337,11 @@ fn encode_native_module_item_paths(&ebml::writer ebml_w,\n                                    &native_mod nmod, &vec[str] path,\n                                    &mutable vec[tup(str, uint)] index) {\n     for (@native_item nitem in nmod.items) {\n-        alt (nitem.node) {\n-            case (native_item_ty(?ident, ?id)) {\n-                add_to_index(ebml_w, path, index, ident);\n-                ebml::start_tag(ebml_w, tag_paths_data_item);\n-                encode_name(ebml_w, ident);\n-                encode_def_id(ebml_w, local_def(id));\n-                ebml::end_tag(ebml_w);\n-            }\n-            case (native_item_fn(?ident, _, _, _, ?id)) {\n-                add_to_index(ebml_w, path, index, ident);\n-                ebml::start_tag(ebml_w, tag_paths_data_item);\n-                encode_name(ebml_w, ident);\n-                encode_def_id(ebml_w, local_def(id));\n-                ebml::end_tag(ebml_w);\n-            }\n-        }\n+        add_to_index(ebml_w, path, index, nitem.ident);\n+        ebml::start_tag(ebml_w, tag_paths_data_item);\n+        encode_name(ebml_w, nitem.ident);\n+        encode_def_id(ebml_w, local_def(nitem.id));\n+        ebml::end_tag(ebml_w);\n     }\n }\n \n@@ -583,17 +572,17 @@ fn encode_info_for_native_item(&@trans::crate_ctxt cx, &ebml::writer ebml_w,\n                                &@native_item nitem) {\n     ebml::start_tag(ebml_w, tag_items_data_item);\n     alt (nitem.node) {\n-        case (native_item_ty(_, ?id)) {\n-            encode_def_id(ebml_w, local_def(id));\n+        case (native_item_ty) {\n+            encode_def_id(ebml_w, local_def(nitem.id));\n             encode_kind(ebml_w, 'T' as u8);\n             encode_type(cx, ebml_w, ty::mk_native(cx.tcx));\n         }\n-        case (native_item_fn(_, _, _, ?tps, ?id)) {\n-            encode_def_id(ebml_w, local_def(id));\n+        case (native_item_fn(_, _, ?tps)) {\n+            encode_def_id(ebml_w, local_def(nitem.id));\n             encode_kind(ebml_w, 'F' as u8);\n             encode_type_param_count(ebml_w, tps);\n-            encode_type(cx, ebml_w, trans::node_id_type(cx, id));\n-            encode_symbol(cx, ebml_w, id);\n+            encode_type(cx, ebml_w, trans::node_id_type(cx, nitem.id));\n+            encode_symbol(cx, ebml_w, nitem.id);\n         }\n     }\n     ebml::end_tag(ebml_w);"}, {"sha": "7bc9d9b801879a9653b80008d0f1d7343960f51e", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=3b6d94d4894e06feeb9b48f291a76ff02d0c31ff", "patch": "@@ -630,7 +630,7 @@ fn lookup_in_scope(&env e, scopes sc, &span sp, &ident name, namespace ns) ->\n             }\n             case (scope_native_item(?it)) {\n                 alt (it.node) {\n-                    case (ast::native_item_fn(_, _, ?decl, ?ty_params, _))\n+                    case (ast::native_item_fn(_, ?decl, ?ty_params))\n                          {\n                         ret lookup_in_fn(name, decl, ty_params, ns);\n                     }\n@@ -1021,14 +1021,16 @@ fn lookup_in_mie(&env e, &mod_index_entry mie, namespace ns) ->\n         }\n         case (mie_native_item(?native_item)) {\n             alt (native_item.node) {\n-                case (ast::native_item_ty(_, ?id)) {\n+                case (ast::native_item_ty) {\n                     if (ns == ns_type) {\n-                        ret some(ast::def_native_ty(local_def(id)));\n+                        ret some(ast::def_native_ty\n+                                 (local_def(native_item.id)));\n                     }\n                 }\n-                case (ast::native_item_fn(_, _, _, _, ?id)) {\n+                case (ast::native_item_fn(_, _, _)) {\n                     if (ns == ns_value) {\n-                        ret some(ast::def_native_fn(local_def(id)));\n+                        ret some(ast::def_native_fn\n+                                 (local_def(native_item.id)));\n                     }\n                 }\n             }\n@@ -1111,14 +1113,7 @@ fn index_nmod(&ast::native_mod md) -> mod_index {\n         }\n     }\n     for (@ast::native_item it in md.items) {\n-        alt (it.node) {\n-            case (ast::native_item_ty(?ident, _)) {\n-                add_to_index(index, ident, mie_native_item(it));\n-            }\n-            case (ast::native_item_fn(?ident, _, _, _, _)) {\n-                add_to_index(index, ident, mie_native_item(it));\n-            }\n-        }\n+        add_to_index(index, it.ident, mie_native_item(it));\n     }\n     ret index;\n }"}, {"sha": "9468ef8fa4863fa6980873e565900bc321794a4e", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3b6d94d4894e06feeb9b48f291a76ff02d0c31ff", "patch": "@@ -7780,11 +7780,11 @@ fn native_fn_ty_param_count(&@crate_ctxt cx, ast::node_id id) -> uint {\n         case (ast_map::node_native_item(?i)) { i }\n     };\n     alt (native_item.node) {\n-        case (ast::native_item_ty(_, _)) {\n+        case (ast::native_item_ty) {\n             cx.sess.bug(\"decl_native_fn_and_pair(): native fn isn't \" +\n                             \"actually a fn\");\n         }\n-        case (ast::native_item_fn(_, _, _, ?tps, _)) {\n+        case (ast::native_item_fn(_, _, ?tps)) {\n             count = vec::len[ast::ty_param](tps);\n         }\n     }\n@@ -7961,9 +7961,9 @@ fn item_path(&@ast::item item) -> vec[str] { ret [item.ident]; }\n fn collect_native_item(@crate_ctxt ccx, &@ast::native_item i, &vec[str] pt,\n                        &vt[vec[str]] v) {\n     alt (i.node) {\n-        case (ast::native_item_fn(?name, _, _, _, ?id)) {\n-            if (!ccx.obj_methods.contains_key(id)) {\n-                decl_native_fn_and_pair(ccx, i.span, pt, name, id);\n+        case (ast::native_item_fn(_, _, _)) {\n+            if (!ccx.obj_methods.contains_key(i.id)) {\n+                decl_native_fn_and_pair(ccx, i.span, pt, i.ident, i.id);\n             }\n         }\n         case (_) {}"}, {"sha": "48fe6aee529635b7114df7a0c74d1ba479bd0678", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=3b6d94d4894e06feeb9b48f291a76ff02d0c31ff", "patch": "@@ -610,21 +610,21 @@ mod collect {\n     fn ty_of_native_item(&@ctxt cx, &@ast::native_item it,\n                          ast::native_abi abi) -> ty::ty_param_count_and_ty {\n         alt (it.node) {\n-            case (ast::native_item_fn(_, _, ?fn_decl, ?params, ?id)) {\n+            case (ast::native_item_fn(_, ?fn_decl, ?params)) {\n                 auto get = bind getter(cx, _);\n                 auto convert = bind ast_ty_to_ty(cx.tcx, get, _);\n                 auto f = bind ty_of_arg(cx, _);\n                 ret ty_of_native_fn_decl(cx, convert, f, fn_decl, abi, params,\n-                                         ast::local_def(id));\n+                                         ast::local_def(it.id));\n             }\n-            case (ast::native_item_ty(?tpt, ?id)) {\n-                alt (cx.tcx.tcache.find(local_def(id))) {\n+            case (ast::native_item_ty) {\n+                alt (cx.tcx.tcache.find(local_def(it.id))) {\n                     case (some(?tpt)) { ret tpt; }\n                     case (none) { }\n                 }\n                 auto t = ty::mk_native(cx.tcx);\n                 auto tpt = tup(0u, t);\n-                cx.tcx.tcache.insert(local_def(id), tpt);\n+                cx.tcx.tcache.insert(local_def(it.id), tpt);\n                 ret tpt;\n             }\n         }\n@@ -757,12 +757,12 @@ mod collect {\n         auto tpt =\n             ty_of_native_item(cx, i, option::get[ast::native_abi]({ *abi }));\n         alt (i.node) {\n-            case (ast::native_item_ty(_, _)) {\n+            case (ast::native_item_ty) {\n                 // FIXME: Native types have no annotation. Should they? --pcw\n \n             }\n-            case (ast::native_item_fn(_, _, _, _, ?id)) {\n-                write::ty_only(cx.tcx, id, tpt._1);\n+            case (ast::native_item_fn(_, _, _)) {\n+                write::ty_only(cx.tcx, i.id, tpt._1);\n             }\n         }\n     }"}, {"sha": "a88a6b4c3d00043ab971916620f497875d72169b", "filename": "src/comp/middle/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fmiddle%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fmiddle%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fvisit.rs?ref=3b6d94d4894e06feeb9b48f291a76ff02d0c31ff", "patch": "@@ -202,8 +202,8 @@ fn visit_pat[E](&@pat p, &E e, &vt[E] v) {\n \n fn visit_native_item[E](&@native_item ni, &E e, &vt[E] v) {\n     alt (ni.node) {\n-        case (native_item_fn(_, _, ?fd, _, _)) { visit_fn_decl(fd, e, v); }\n-        case (native_item_ty(_, _)) { }\n+        case (native_item_fn(_, ?fd, _)) { visit_fn_decl(fd, e, v); }\n+        case (native_item_ty) { }\n     }\n }\n "}, {"sha": "b54a49f95c27445ae5c6590cfaacab3912ea9cbb", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=3b6d94d4894e06feeb9b48f291a76ff02d0c31ff", "patch": "@@ -203,10 +203,10 @@ fn walk_native_item(&ast_visitor v, @ast::native_item ni) {\n     if (!v.keep_going()) { ret; }\n     v.visit_native_item_pre(ni);\n     alt (ni.node) {\n-        case (ast::native_item_fn(_, _, ?fd, _, _)) {\n+        case (ast::native_item_fn(_, ?fd, _)) {\n             walk_fn_decl(v, fd);\n         }\n-        case (ast::native_item_ty(_, _)) { }\n+        case (ast::native_item_ty) { }\n     }\n     v.visit_native_item_post(ni);\n }"}, {"sha": "ea82213cac4f41060afe12d49d7646465b6900eb", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6d94d4894e06feeb9b48f291a76ff02d0c31ff/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=3b6d94d4894e06feeb9b48f291a76ff02d0c31ff", "patch": "@@ -320,13 +320,13 @@ fn print_item(&ps s, &@ast::item item) {\n                 ibox(s, indent_unit);\n                 maybe_print_comment(s, item.span.lo);\n                 alt (item.node) {\n-                    case (ast::native_item_ty(?id, _)) {\n+                    case (ast::native_item_ty) {\n                         word_nbsp(s, \"type\");\n-                        word(s.s, id);\n+                        word(s.s, item.ident);\n                     }\n-                    case (ast::native_item_fn(?id, ?lname, ?decl,\n-                                              ?typarams, _)) {\n-                        print_fn(s, decl, ast::proto_fn, id, typarams);\n+                    case (ast::native_item_fn(?lname, ?decl, ?typarams)) {\n+                        print_fn(s, decl, ast::proto_fn, item.ident,\n+                                 typarams);\n                         alt (lname) {\n                             case (none) { }\n                             case (some(?ss)) {"}]}