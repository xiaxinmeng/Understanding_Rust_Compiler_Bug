{"sha": "2c55902e3cb3da8192ca5e4811896bf3f00b3faf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNTU5MDJlM2NiM2RhODE5MmNhNWU0ODExODk2YmYzZjAwYjNmYWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T02:13:14Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T21:18:57Z"}, "message": "add_elided_lifetime_in_path_suggestion -> rustc_session", "tree": {"sha": "21ea7f10fa4e7a9722df23c0920fa3205fdeadf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21ea7f10fa4e7a9722df23c0920fa3205fdeadf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c55902e3cb3da8192ca5e4811896bf3f00b3faf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c55902e3cb3da8192ca5e4811896bf3f00b3faf", "html_url": "https://github.com/rust-lang/rust/commit/2c55902e3cb3da8192ca5e4811896bf3f00b3faf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c55902e3cb3da8192ca5e4811896bf3f00b3faf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0403bcde362ec85cbc2ca2a7bbf2ef6fecefcfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0403bcde362ec85cbc2ca2a7bbf2ef6fecefcfa", "html_url": "https://github.com/rust-lang/rust/commit/e0403bcde362ec85cbc2ca2a7bbf2ef6fecefcfa"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "53061436de07a72d1abf647c451bb061f15f4c6d", "filename": "src/librustc/lint.rs", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2c55902e3cb3da8192ca5e4811896bf3f00b3faf/src%2Flibrustc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c55902e3cb3da8192ca5e4811896bf3f00b3faf/src%2Flibrustc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint.rs?ref=2c55902e3cb3da8192ca5e4811896bf3f00b3faf", "patch": "@@ -3,7 +3,7 @@ use std::cmp;\n use crate::ich::StableHashingContext;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n use rustc_session::lint::{builtin, Level, Lint, LintId};\n use rustc_session::{DiagnosticMessageId, Session};\n@@ -350,45 +350,3 @@ pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n         ExpnKind::Macro(..) => true, // definitely a plugin\n     }\n }\n-\n-pub fn add_elided_lifetime_in_path_suggestion(\n-    sess: &Session,\n-    db: &mut DiagnosticBuilder<'_>,\n-    n: usize,\n-    path_span: Span,\n-    incl_angl_brckt: bool,\n-    insertion_span: Span,\n-    anon_lts: String,\n-) {\n-    let (replace_span, suggestion) = if incl_angl_brckt {\n-        (insertion_span, anon_lts)\n-    } else {\n-        // When possible, prefer a suggestion that replaces the whole\n-        // `Path<T>` expression with `Path<'_, T>`, rather than inserting `'_, `\n-        // at a point (which makes for an ugly/confusing label)\n-        if let Ok(snippet) = sess.source_map().span_to_snippet(path_span) {\n-            // But our spans can get out of whack due to macros; if the place we think\n-            // we want to insert `'_` isn't even within the path expression's span, we\n-            // should bail out of making any suggestion rather than panicking on a\n-            // subtract-with-overflow or string-slice-out-out-bounds (!)\n-            // FIXME: can we do better?\n-            if insertion_span.lo().0 < path_span.lo().0 {\n-                return;\n-            }\n-            let insertion_index = (insertion_span.lo().0 - path_span.lo().0) as usize;\n-            if insertion_index > snippet.len() {\n-                return;\n-            }\n-            let (before, after) = snippet.split_at(insertion_index);\n-            (path_span, format!(\"{}{}{}\", before, anon_lts, after))\n-        } else {\n-            (insertion_span, anon_lts)\n-        }\n-    };\n-    db.span_suggestion(\n-        replace_span,\n-        &format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n-        suggestion,\n-        Applicability::MachineApplicable,\n-    );\n-}"}, {"sha": "3c529603d6c62fb24103f7568a0c3d282f78e390", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c55902e3cb3da8192ca5e4811896bf3f00b3faf/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c55902e3cb3da8192ca5e4811896bf3f00b3faf/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=2c55902e3cb3da8192ca5e4811896bf3f00b3faf", "patch": "@@ -306,7 +306,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             E0726,\n                             \"implicit elided lifetime not allowed here\"\n                         );\n-                        rustc::lint::add_elided_lifetime_in_path_suggestion(\n+                        rustc_session::lint::add_elided_lifetime_in_path_suggestion(\n                             &self.sess,\n                             &mut err,\n                             expected_lifetimes,"}, {"sha": "b7d5f1b81eb9d155188a40d19b87309fe561c3da", "filename": "src/librustc_lint/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c55902e3cb3da8192ca5e4811896bf3f00b3faf/src%2Flibrustc_lint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c55902e3cb3da8192ca5e4811896bf3f00b3faf/src%2Flibrustc_lint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fcontext.rs?ref=2c55902e3cb3da8192ca5e4811896bf3f00b3faf", "patch": "@@ -19,7 +19,6 @@ use self::TargetLint::*;\n use crate::levels::LintLevelsBuilder;\n use crate::passes::{EarlyLintPassObject, LateLintPassObject};\n use rustc::hir::map::definitions::{DefPathData, DisambiguatedDefPathData};\n-use rustc::lint::add_elided_lifetime_in_path_suggestion;\n use rustc::lint::LintDiagnosticBuilder;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n@@ -32,7 +31,7 @@ use rustc_data_structures::sync;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n-use rustc_session::lint::BuiltinLintDiagnostics;\n+use rustc_session::lint::{add_elided_lifetime_in_path_suggestion, BuiltinLintDiagnostics};\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_session::Session;\n use rustc_span::{symbol::Symbol, MultiSpan, Span, DUMMY_SP};"}, {"sha": "1162cff4e0b2b6a099173dde68fd2f8065a2aff3", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2c55902e3cb3da8192ca5e4811896bf3f00b3faf/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c55902e3cb3da8192ca5e4811896bf3f00b3faf/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=2c55902e3cb3da8192ca5e4811896bf3f00b3faf", "patch": "@@ -1,6 +1,7 @@\n pub use self::Level::*;\n use rustc_ast::node_id::{NodeId, NodeMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_span::edition::Edition;\n use rustc_span::{sym, symbol::Ident, MultiSpan, Span, Symbol};\n \n@@ -367,3 +368,45 @@ macro_rules! declare_lint_pass {\n         $crate::impl_lint_pass!($name => [$($lint),*]);\n     };\n }\n+\n+pub fn add_elided_lifetime_in_path_suggestion(\n+    sess: &crate::Session,\n+    db: &mut DiagnosticBuilder<'_>,\n+    n: usize,\n+    path_span: Span,\n+    incl_angl_brckt: bool,\n+    insertion_span: Span,\n+    anon_lts: String,\n+) {\n+    let (replace_span, suggestion) = if incl_angl_brckt {\n+        (insertion_span, anon_lts)\n+    } else {\n+        // When possible, prefer a suggestion that replaces the whole\n+        // `Path<T>` expression with `Path<'_, T>`, rather than inserting `'_, `\n+        // at a point (which makes for an ugly/confusing label)\n+        if let Ok(snippet) = sess.source_map().span_to_snippet(path_span) {\n+            // But our spans can get out of whack due to macros; if the place we think\n+            // we want to insert `'_` isn't even within the path expression's span, we\n+            // should bail out of making any suggestion rather than panicking on a\n+            // subtract-with-overflow or string-slice-out-out-bounds (!)\n+            // FIXME: can we do better?\n+            if insertion_span.lo().0 < path_span.lo().0 {\n+                return;\n+            }\n+            let insertion_index = (insertion_span.lo().0 - path_span.lo().0) as usize;\n+            if insertion_index > snippet.len() {\n+                return;\n+            }\n+            let (before, after) = snippet.split_at(insertion_index);\n+            (path_span, format!(\"{}{}{}\", before, anon_lts, after))\n+        } else {\n+            (insertion_span, anon_lts)\n+        }\n+    };\n+    db.span_suggestion(\n+        replace_span,\n+        &format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n+        suggestion,\n+        Applicability::MachineApplicable,\n+    );\n+}"}]}