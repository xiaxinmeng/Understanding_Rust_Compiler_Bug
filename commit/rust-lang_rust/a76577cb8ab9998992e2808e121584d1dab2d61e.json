{"sha": "a76577cb8ab9998992e2808e121584d1dab2d61e", "node_id": "C_kwDOAAsO6NoAKGE3NjU3N2NiOGFiOTk5ODk5MmUyODA4ZTEyMTU4NGQxZGFiMmQ2MWU", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-01-12T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-01-12T17:51:31Z"}, "message": "Remove LLVM-style inline assembly from unstable book", "tree": {"sha": "1b5f81f2f9d040bef2c25d2901110be3d0197ae5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b5f81f2f9d040bef2c25d2901110be3d0197ae5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a76577cb8ab9998992e2808e121584d1dab2d61e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a76577cb8ab9998992e2808e121584d1dab2d61e", "html_url": "https://github.com/rust-lang/rust/commit/a76577cb8ab9998992e2808e121584d1dab2d61e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a76577cb8ab9998992e2808e121584d1dab2d61e/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "279c9d3d9f4aa80a4e7efac8dba731dbce870df3", "url": "https://api.github.com/repos/rust-lang/rust/commits/279c9d3d9f4aa80a4e7efac8dba731dbce870df3", "html_url": "https://github.com/rust-lang/rust/commit/279c9d3d9f4aa80a4e7efac8dba731dbce870df3"}], "stats": {"total": 190, "additions": 0, "deletions": 190}, "files": [{"sha": "094124998b6e738686a98c6400dc1c663efc0c16", "filename": "src/doc/unstable-book/src/library-features/llvm-asm.md", "status": "removed", "additions": 0, "deletions": 190, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/279c9d3d9f4aa80a4e7efac8dba731dbce870df3/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/279c9d3d9f4aa80a4e7efac8dba731dbce870df3/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md?ref=279c9d3d9f4aa80a4e7efac8dba731dbce870df3", "patch": "@@ -1,190 +0,0 @@\n-# `llvm_asm`\n-\n-The tracking issue for this feature is: [#70173]\n-\n-[#70173]: https://github.com/rust-lang/rust/issues/70173\n-\n-------------------------\n-\n-For extremely low-level manipulations and performance reasons, one\n-might wish to control the CPU directly. Rust supports using inline\n-assembly to do this via the `llvm_asm!` macro.\n-\n-```rust,ignore (pseudo-code)\n-llvm_asm!(assembly template\n-   : output operands\n-   : input operands\n-   : clobbers\n-   : options\n-   );\n-```\n-\n-Any use of `llvm_asm` is feature gated (requires `#![feature(llvm_asm)]` on the\n-crate to allow) and of course requires an `unsafe` block.\n-\n-> **Note**: the examples here are given in x86/x86-64 assembly, but\n-> all platforms are supported.\n-\n-## Assembly template\n-\n-The `assembly template` is the only required parameter and must be a\n-literal string (i.e. `\"\"`)\n-\n-```rust\n-#![feature(llvm_asm)]\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn foo() {\n-    unsafe {\n-        llvm_asm!(\"NOP\");\n-    }\n-}\n-\n-// Other platforms:\n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-fn foo() { /* ... */ }\n-\n-fn main() {\n-    // ...\n-    foo();\n-    // ...\n-}\n-```\n-\n-(The `feature(llvm_asm)` and `#[cfg]`s are omitted from now on.)\n-\n-Output operands, input operands, clobbers and options are all optional\n-but you must add the right number of `:` if you skip them:\n-\n-```rust\n-# #![feature(llvm_asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-# fn main() { unsafe {\n-llvm_asm!(\"xor %eax, %eax\"\n-    :\n-    :\n-    : \"eax\"\n-   );\n-# } }\n-# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-# fn main() {}\n-```\n-\n-Whitespace also doesn't matter:\n-\n-```rust\n-# #![feature(llvm_asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-# fn main() { unsafe {\n-llvm_asm!(\"xor %eax, %eax\" ::: \"eax\");\n-# } }\n-# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-# fn main() {}\n-```\n-\n-## Operands\n-\n-Input and output operands follow the same format: `:\n-\"constraints1\"(expr1), \"constraints2\"(expr2), ...\"`. Output operand\n-expressions must be mutable place, or not yet assigned:\n-\n-```rust\n-# #![feature(llvm_asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn add(a: i32, b: i32) -> i32 {\n-    let c: i32;\n-    unsafe {\n-        llvm_asm!(\"add $2, $0\"\n-             : \"=r\"(c)\n-             : \"0\"(a), \"r\"(b)\n-             );\n-    }\n-    c\n-}\n-# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-# fn add(a: i32, b: i32) -> i32 { a + b }\n-\n-fn main() {\n-    assert_eq!(add(3, 14159), 14162)\n-}\n-```\n-\n-If you would like to use real operands in this position, however,\n-you are required to put curly braces `{}` around the register that\n-you want, and you are required to put the specific size of the\n-operand. This is useful for very low level programming, where\n-which register you use is important:\n-\n-```rust\n-# #![feature(llvm_asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-# unsafe fn read_byte_in(port: u16) -> u8 {\n-let result: u8;\n-llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(port));\n-result\n-# }\n-```\n-\n-## Clobbers\n-\n-Some instructions modify registers which might otherwise have held\n-different values so we use the clobbers list to indicate to the\n-compiler not to assume any values loaded into those registers will\n-stay valid.\n-\n-```rust\n-# #![feature(llvm_asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-# fn main() { unsafe {\n-// Put the value 0x200 in eax:\n-llvm_asm!(\"mov $$0x200, %eax\" : /* no outputs */ : /* no inputs */ : \"eax\");\n-# } }\n-# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-# fn main() {}\n-```\n-\n-Input and output registers need not be listed since that information\n-is already communicated by the given constraints. Otherwise, any other\n-registers used either implicitly or explicitly should be listed.\n-\n-If the assembly changes the condition code register `cc` should be\n-specified as one of the clobbers. Similarly, if the assembly modifies\n-memory, `memory` should also be specified.\n-\n-## Options\n-\n-The last section, `options` is specific to Rust. The format is comma\n-separated literal strings (i.e. `:\"foo\", \"bar\", \"baz\"`). It's used to\n-specify some extra info about the inline assembly:\n-\n-Current valid options are:\n-\n-1. `volatile` - specifying this is analogous to\n-   `__asm__ __volatile__ (...)` in gcc/clang.\n-2. `alignstack` - certain instructions expect the stack to be\n-   aligned a certain way (i.e. SSE) and specifying this indicates to\n-   the compiler to insert its usual stack alignment code\n-3. `intel` - use intel syntax instead of the default AT&T.\n-\n-```rust\n-# #![feature(llvm_asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-# fn main() {\n-let result: i32;\n-unsafe {\n-   llvm_asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")\n-}\n-println!(\"eax is currently {}\", result);\n-# }\n-# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-# fn main() {}\n-```\n-\n-## More Information\n-\n-The current implementation of the `llvm_asm!` macro is a direct binding to [LLVM's\n-inline assembler expressions][llvm-docs], so be sure to check out [their\n-documentation as well][llvm-docs] for more information about clobbers,\n-constraints, etc.\n-\n-[llvm-docs]: http://llvm.org/docs/LangRef.html#inline-assembler-expressions"}]}