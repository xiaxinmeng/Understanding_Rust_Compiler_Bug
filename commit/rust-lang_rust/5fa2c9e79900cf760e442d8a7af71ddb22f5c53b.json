{"sha": "5fa2c9e79900cf760e442d8a7af71ddb22f5c53b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYTJjOWU3OTkwMGNmNzYwZTQ0MmQ4YTdhZjcxZGRiMjJmNWM1M2I=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-18T18:03:00Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-27T18:53:00Z"}, "message": "Port `MaybeStorageLive` to new dataflow framework", "tree": {"sha": "38dfc283319c09ef1db8a18fb6e098650fdc810c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38dfc283319c09ef1db8a18fb6e098650fdc810c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fa2c9e79900cf760e442d8a7af71ddb22f5c53b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa2c9e79900cf760e442d8a7af71ddb22f5c53b", "html_url": "https://github.com/rust-lang/rust/commit/5fa2c9e79900cf760e442d8a7af71ddb22f5c53b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fa2c9e79900cf760e442d8a7af71ddb22f5c53b/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "html_url": "https://github.com/rust-lang/rust/commit/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0"}], "stats": {"total": 78, "additions": 37, "deletions": 41}, "files": [{"sha": "fdc34f2204b1db9a7fd504d41e81c6f8cb498da8", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5fa2c9e79900cf760e442d8a7af71ddb22f5c53b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa2c9e79900cf760e442d8a7af71ddb22f5c53b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=5fa2c9e79900cf760e442d8a7af71ddb22f5c53b", "patch": "@@ -1,70 +1,68 @@\n pub use super::*;\n \n-use crate::dataflow::generic::{Results, ResultsRefCursor};\n-use crate::dataflow::BitDenotation;\n-use crate::dataflow::MaybeBorrowedLocals;\n+use crate::dataflow::generic::{self as dataflow, GenKill, Results, ResultsRefCursor};\n+use crate::dataflow::BottomValue;\n use rustc::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc::mir::*;\n use std::cell::RefCell;\n \n #[derive(Copy, Clone)]\n-pub struct MaybeStorageLive<'a, 'tcx> {\n-    body: &'a Body<'tcx>,\n-}\n+pub struct MaybeStorageLive;\n \n-impl<'a, 'tcx> MaybeStorageLive<'a, 'tcx> {\n-    pub fn new(body: &'a Body<'tcx>) -> Self {\n-        MaybeStorageLive { body }\n-    }\n+impl dataflow::AnalysisDomain<'tcx> for MaybeStorageLive {\n+    type Idx = Local;\n \n-    pub fn body(&self) -> &Body<'tcx> {\n-        self.body\n-    }\n-}\n+    const NAME: &'static str = \"maybe_storage_live\";\n \n-impl<'a, 'tcx> BitDenotation<'tcx> for MaybeStorageLive<'a, 'tcx> {\n-    type Idx = Local;\n-    fn name() -> &'static str {\n-        \"maybe_storage_live\"\n-    }\n-    fn bits_per_block(&self) -> usize {\n-        self.body.local_decls.len()\n+    fn bits_per_block(&self, body: &mir::Body<'tcx>) -> usize {\n+        body.local_decls.len()\n     }\n \n-    fn start_block_effect(&self, on_entry: &mut BitSet<Local>) {\n+    fn initialize_start_block(&self, body: &mir::Body<'tcx>, on_entry: &mut BitSet<Self::Idx>) {\n         // The resume argument is live on function entry (we don't care about\n         // the `self` argument)\n-        for arg in self.body.args_iter().skip(1) {\n+        for arg in body.args_iter().skip(1) {\n             on_entry.insert(arg);\n         }\n     }\n+}\n \n-    fn statement_effect(&self, trans: &mut GenKillSet<Local>, loc: Location) {\n-        let stmt = &self.body[loc.block].statements[loc.statement_index];\n-\n+impl dataflow::GenKillAnalysis<'tcx> for MaybeStorageLive {\n+    fn statement_effect(\n+        &self,\n+        trans: &mut impl GenKill<Self::Idx>,\n+        stmt: &mir::Statement<'tcx>,\n+        _: Location,\n+    ) {\n         match stmt.kind {\n             StatementKind::StorageLive(l) => trans.gen(l),\n             StatementKind::StorageDead(l) => trans.kill(l),\n             _ => (),\n         }\n     }\n \n-    fn terminator_effect(&self, _trans: &mut GenKillSet<Local>, _loc: Location) {\n+    fn terminator_effect(\n+        &self,\n+        _trans: &mut impl GenKill<Self::Idx>,\n+        _: &mir::Terminator<'tcx>,\n+        _: Location,\n+    ) {\n         // Terminators have no effect\n     }\n \n-    fn propagate_call_return(\n+    fn call_return_effect(\n         &self,\n-        _in_out: &mut BitSet<Local>,\n-        _call_bb: mir::BasicBlock,\n-        _dest_bb: mir::BasicBlock,\n-        _dest_place: &mir::Place<'tcx>,\n+        _trans: &mut impl GenKill<Self::Idx>,\n+        _block: BasicBlock,\n+        _func: &mir::Operand<'tcx>,\n+        _args: &[mir::Operand<'tcx>],\n+        _return_place: &mir::Place<'tcx>,\n     ) {\n         // Nothing to do when a call returns successfully\n     }\n }\n \n-impl<'a, 'tcx> BottomValue for MaybeStorageLive<'a, 'tcx> {\n+impl BottomValue for MaybeStorageLive {\n     /// bottom = dead\n     const BOTTOM_VALUE: bool = false;\n }"}, {"sha": "de9710452ee13e38d5094e977068cf3e902a5ea1", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5fa2c9e79900cf760e442d8a7af71ddb22f5c53b/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa2c9e79900cf760e442d8a7af71ddb22f5c53b/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=5fa2c9e79900cf760e442d8a7af71ddb22f5c53b", "patch": "@@ -473,12 +473,10 @@ fn locals_live_across_suspend_points(\n \n     // Calculate when MIR locals have live storage. This gives us an upper bound of their\n     // lifetimes.\n-    let storage_live_analysis = MaybeStorageLive::new(body_ref);\n-    let storage_live_results =\n-        do_dataflow(tcx, body_ref, def_id, &[], &dead_unwinds, storage_live_analysis, |bd, p| {\n-            DebugFormatted::new(&bd.body().local_decls[p])\n-        });\n-    let mut storage_live_cursor = DataflowResultsCursor::new(&storage_live_results, body_ref);\n+    let mut storage_live = MaybeStorageLive\n+        .into_engine(tcx, body_ref, def_id)\n+        .iterate_to_fixpoint()\n+        .into_results_cursor(body_ref);\n \n     // Find the MIR locals which do not use StorageLive/StorageDead statements.\n     // The storage of these locals are always live.\n@@ -534,8 +532,8 @@ fn locals_live_across_suspend_points(\n                 liveness.outs[block].union(borrowed_locals_cursor.get());\n             }\n \n-            storage_live_cursor.seek(loc);\n-            let storage_liveness = storage_live_cursor.get();\n+            storage_live.seek_before(loc);\n+            let storage_liveness = storage_live.get();\n \n             // Store the storage liveness for later use so we can restore the state\n             // after a suspension point"}]}