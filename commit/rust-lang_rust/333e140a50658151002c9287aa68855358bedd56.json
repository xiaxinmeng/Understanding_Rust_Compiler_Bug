{"sha": "333e140a50658151002c9287aa68855358bedd56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzM2UxNDBhNTA2NTgxNTEwMDJjOTI4N2FhNjg4NTUzNThiZWRkNTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T12:25:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T12:25:52Z"}, "message": "Mior", "tree": {"sha": "21cd482ab080b00d5b93ebaf8e9096644bafa4b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21cd482ab080b00d5b93ebaf8e9096644bafa4b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/333e140a50658151002c9287aa68855358bedd56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/333e140a50658151002c9287aa68855358bedd56", "html_url": "https://github.com/rust-lang/rust/commit/333e140a50658151002c9287aa68855358bedd56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/333e140a50658151002c9287aa68855358bedd56/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d30a2e4fac9267066dc53d71c4695843f95e6269", "url": "https://api.github.com/repos/rust-lang/rust/commits/d30a2e4fac9267066dc53d71c4695843f95e6269", "html_url": "https://github.com/rust-lang/rust/commit/d30a2e4fac9267066dc53d71c4695843f95e6269"}], "stats": {"total": 124, "additions": 61, "deletions": 63}, "files": [{"sha": "9e513edb23b4f21f1060ced02cc78f5ef6c034fa", "filename": "src/bin/cli.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/333e140a50658151002c9287aa68855358bedd56/src%2Fbin%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333e140a50658151002c9287aa68855358bedd56/src%2Fbin%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcli.rs?ref=333e140a50658151002c9287aa68855358bedd56", "patch": "@@ -3,13 +3,13 @@ extern crate libsyntax2;\n use std::io::Read;\n \n use libsyntax2::{\n-    parse, utils::dump_tree_green\n+    parse, utils::dump_tree\n };\n \n fn main() {\n     let text = read_input();\n     let file = parse(text);\n-    let tree = dump_tree_green(&file);\n+    let tree = dump_tree(&file);\n     println!(\"{}\", tree);\n }\n ", "previous_filename": "src/bin/cli/parse.rs"}, {"sha": "f85ee1eefaf4975d43e58916d986745793f49a4d", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 50, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/333e140a50658151002c9287aa68855358bedd56/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333e140a50658151002c9287aa68855358bedd56/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=333e140a50658151002c9287aa68855358bedd56", "patch": "@@ -27,6 +27,8 @@ mod lexer;\n mod parser;\n mod syntax_kinds;\n mod yellow;\n+/// Utilities for simple uses of the parser.\n+pub mod utils;\n \n pub use {\n     lexer::{tokenize, Token},\n@@ -42,53 +44,3 @@ pub fn parse(text: String) -> SyntaxNode {\n     parser::parse::<yellow::GreenBuilder>(text, &tokens)\n }\n \n-/// Utilities for simple uses of the parser.\n-pub mod utils {\n-    use std::{collections::BTreeSet, fmt::Write};\n-\n-    use {SyntaxError, SyntaxNode, SyntaxNodeRef};\n-\n-    /// Parse a file and create a string representation of the resulting parse tree.\n-    pub fn dump_tree_green(syntax: &SyntaxNode) -> String {\n-        let syntax = syntax.borrow();\n-        let mut errors: BTreeSet<_> = syntax.root.errors.iter().cloned().collect();\n-        let mut result = String::new();\n-        go(syntax, &mut result, 0, &mut errors);\n-        return result;\n-\n-        fn go(\n-            node: SyntaxNodeRef,\n-            buff: &mut String,\n-            level: usize,\n-            errors: &mut BTreeSet<SyntaxError>,\n-        ) {\n-            buff.push_str(&String::from(\"  \").repeat(level));\n-            write!(buff, \"{:?}\\n\", node).unwrap();\n-            let my_errors: Vec<_> = errors\n-                .iter()\n-                .filter(|e| e.offset == node.range().start())\n-                .cloned()\n-                .collect();\n-            for err in my_errors {\n-                errors.remove(&err);\n-                buff.push_str(&String::from(\"  \").repeat(level));\n-                write!(buff, \"err: `{}`\\n\", err.message).unwrap();\n-            }\n-\n-            for child in node.children() {\n-                go(child, buff, level + 1, errors)\n-            }\n-\n-            let my_errors: Vec<_> = errors\n-                .iter()\n-                .filter(|e| e.offset == node.range().end())\n-                .cloned()\n-                .collect();\n-            for err in my_errors {\n-                errors.remove(&err);\n-                buff.push_str(&String::from(\"  \").repeat(level));\n-                write!(buff, \"err: `{}`\\n\", err.message).unwrap();\n-            }\n-        }\n-    }\n-}"}, {"sha": "20991659a6acf54703a7256bf6f0aac5582f2103", "filename": "src/utils.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/333e140a50658151002c9287aa68855358bedd56/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333e140a50658151002c9287aa68855358bedd56/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=333e140a50658151002c9287aa68855358bedd56", "patch": "@@ -0,0 +1,46 @@\n+use std::{collections::BTreeSet, fmt::Write};\n+use {SyntaxError, SyntaxNode, SyntaxNodeRef};\n+\n+/// Parse a file and create a string representation of the resulting parse tree.\n+pub fn dump_tree(syntax: &SyntaxNode) -> String {\n+    let syntax = syntax.borrow();\n+    let mut errors: BTreeSet<_> = syntax.root.errors.iter().cloned().collect();\n+    let mut result = String::new();\n+    go(syntax, &mut result, 0, &mut errors);\n+    return result;\n+\n+    fn go(\n+        node: SyntaxNodeRef,\n+        buff: &mut String,\n+        level: usize,\n+        errors: &mut BTreeSet<SyntaxError>,\n+    ) {\n+        buff.push_str(&String::from(\"  \").repeat(level));\n+        write!(buff, \"{:?}\\n\", node).unwrap();\n+        let my_errors: Vec<_> = errors\n+            .iter()\n+            .filter(|e| e.offset == node.range().start())\n+            .cloned()\n+            .collect();\n+        for err in my_errors {\n+            errors.remove(&err);\n+            buff.push_str(&String::from(\"  \").repeat(level));\n+            write!(buff, \"err: `{}`\\n\", err.message).unwrap();\n+        }\n+\n+        for child in node.children() {\n+            go(child, buff, level + 1, errors)\n+        }\n+\n+        let my_errors: Vec<_> = errors\n+            .iter()\n+            .filter(|e| e.offset == node.range().end())\n+            .cloned()\n+            .collect();\n+        for err in my_errors {\n+            errors.remove(&err);\n+            buff.push_str(&String::from(\"  \").repeat(level));\n+            write!(buff, \"err: `{}`\\n\", err.message).unwrap();\n+        }\n+    }\n+}"}, {"sha": "770610974eb27f1cefaad4da0b78b06ae26401fa", "filename": "tests/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/333e140a50658151002c9287aa68855358bedd56/tests%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333e140a50658151002c9287aa68855358bedd56/tests%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser.rs?ref=333e140a50658151002c9287aa68855358bedd56", "patch": "@@ -2,13 +2,13 @@ extern crate libsyntax2;\n extern crate testutils;\n \n use libsyntax2::parse;\n-use libsyntax2::utils::dump_tree_green;\n+use libsyntax2::utils::dump_tree;\n use testutils::dir_tests;\n \n #[test]\n fn parser_tests() {\n     dir_tests(&[\"parser/inline\", \"parser/ok\", \"parser/err\"], |text| {\n         let file = parse(text.to_string());\n-        dump_tree_green(&file)\n+        dump_tree(&file)\n     })\n }"}, {"sha": "53b20f17bca92d99e7f4f05f369a6c5b137540d7", "filename": "tests/testutils/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/333e140a50658151002c9287aa68855358bedd56/tests%2Ftestutils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/333e140a50658151002c9287aa68855358bedd56/tests%2Ftestutils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftestutils%2FCargo.toml?ref=333e140a50658151002c9287aa68855358bedd56", "patch": "@@ -4,5 +4,4 @@ version = \"0.1.0\"\n authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n \n [dependencies]\n-file = \"1.0\"\n difference = \"2.0.0\""}, {"sha": "7c481156f2b39dd9fd99112ed8b39d2357e05098", "filename": "tests/testutils/src/lib.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/333e140a50658151002c9287aa68855358bedd56/tests%2Ftestutils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333e140a50658151002c9287aa68855358bedd56/tests%2Ftestutils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftestutils%2Fsrc%2Flib.rs?ref=333e140a50658151002c9287aa68855358bedd56", "patch": "@@ -1,8 +1,9 @@\n extern crate difference;\n-extern crate file;\n \n-use std::fs::read_dir;\n-use std::path::{Path, PathBuf};\n+use std::{\n+    fs,\n+    path::{Path, PathBuf}\n+};\n \n use difference::Changeset;\n \n@@ -18,7 +19,7 @@ use difference::Changeset;\n ///\n /// so this should always be correct.\n fn read_text(path: &Path) -> String {\n-    file::get_text(path).unwrap().replace(\"\\r\\n\", \"\\n\")\n+    fs::read_to_string(path).unwrap().replace(\"\\r\\n\", \"\\n\")\n }\n \n pub fn dir_tests<F>(paths: &[&str], f: F)\n@@ -33,7 +34,7 @@ where\n             println!(\"\\nfile: {}\", path.display());\n             println!(\"No .txt file with expected result, creating...\\n\");\n             println!(\"{}\\n{}\", input_code, parse_tree);\n-            file::put_text(&path, parse_tree).unwrap();\n+            fs::write(&path, parse_tree).unwrap();\n             panic!(\"No expected result\")\n         }\n         let expected = read_text(&path);\n@@ -61,7 +62,7 @@ fn collect_tests(paths: &[&str]) -> Vec<PathBuf> {\n \n fn test_from_dir(dir: &Path) -> Vec<PathBuf> {\n     let mut acc = Vec::new();\n-    for file in read_dir(&dir).unwrap() {\n+    for file in fs::read_dir(&dir).unwrap() {\n         let file = file.unwrap();\n         let path = file.path();\n         if path.extension().unwrap_or_default() == \"rs\" {\n@@ -80,12 +81,12 @@ fn print_difference(expected: &str, actual: &str, path: &Path) {\n     if expected.trim() == actual.trim() {\n         println!(\"whitespace difference, rewriting\");\n         println!(\"file: {}\\n\", path.display());\n-        file::put_text(path, actual).unwrap();\n+        fs::write(path, actual).unwrap();\n         return;\n     }\n     if REWRITE {\n         println!(\"rewriting {}\", path.display());\n-        file::put_text(path, actual).unwrap();\n+        fs::write(path, actual).unwrap();\n         return;\n     }\n     let changeset = Changeset::new(actual, expected, \"\\n\");"}]}