{"sha": "6136a86291b12f5441910d56d5bc0dfbc7eecdeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMzZhODYyOTFiMTJmNTQ0MTkxMGQ1NmQ1YmMwZGZiYzdlZWNkZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-13T11:18:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-13T11:18:36Z"}, "message": "Auto merge of #32817 - jseyfried:warn_impl_param_defaults, r=nikomatsakis\n\nWarn for type parameter defaults on impl blocks\n\nWarn for type parameter defaults on impl blocks (fixes #31543).\nr? @nikomatsakis", "tree": {"sha": "99bc1c92680c19af35147ebd8debd283c7d82a04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99bc1c92680c19af35147ebd8debd283c7d82a04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6136a86291b12f5441910d56d5bc0dfbc7eecdeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6136a86291b12f5441910d56d5bc0dfbc7eecdeb", "html_url": "https://github.com/rust-lang/rust/commit/6136a86291b12f5441910d56d5bc0dfbc7eecdeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6136a86291b12f5441910d56d5bc0dfbc7eecdeb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d4d3cb0bea2ea86c7b6eb2322779fa0031b508c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d4d3cb0bea2ea86c7b6eb2322779fa0031b508c", "html_url": "https://github.com/rust-lang/rust/commit/7d4d3cb0bea2ea86c7b6eb2322779fa0031b508c"}, {"sha": "7c73b9eaae24b7045c85af4b95fc0e32e67efbf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c73b9eaae24b7045c85af4b95fc0e32e67efbf2", "html_url": "https://github.com/rust-lang/rust/commit/7c73b9eaae24b7045c85af4b95fc0e32e67efbf2"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "95cb2269a1fef516b6ef11742e7bce1fa8cec239", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6136a86291b12f5441910d56d5bc0dfbc7eecdeb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6136a86291b12f5441910d56d5bc0dfbc7eecdeb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6136a86291b12f5441910d56d5bc0dfbc7eecdeb", "patch": "@@ -715,7 +715,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n             // Create generics from the generics specified in the impl head.\n             debug!(\"convert: ast_generics={:?}\", generics);\n             let def_id = ccx.tcx.map.local_def_id(it.id);\n-            let ty_generics = ty_generics_for_type_or_impl(ccx, generics);\n+            let ty_generics = ty_generics_for_impl(ccx, generics);\n             let mut ty_predicates = ty_generic_predicates_for_type_or_impl(ccx, generics);\n \n             debug!(\"convert: impl_bounds={:?}\", ty_predicates);\n@@ -1455,19 +1455,19 @@ fn compute_type_scheme_of_item<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n             ty::TypeScheme { ty: ty, generics: ty_generics }\n         }\n         hir::ItemTy(ref t, ref generics) => {\n-            let ty_generics = ty_generics_for_type_or_impl(ccx, generics);\n+            let ty_generics = ty_generics_for_type(ccx, generics);\n             let ty = ccx.icx(generics).to_ty(&ExplicitRscope, &t);\n             ty::TypeScheme { ty: ty, generics: ty_generics }\n         }\n         hir::ItemEnum(ref ei, ref generics) => {\n-            let ty_generics = ty_generics_for_type_or_impl(ccx, generics);\n+            let ty_generics = ty_generics_for_type(ccx, generics);\n             let substs = mk_item_substs(ccx, &ty_generics);\n             let def = convert_enum_def(tcx, it, ei);\n             let t = tcx.mk_enum(def, tcx.mk_substs(substs));\n             ty::TypeScheme { ty: t, generics: ty_generics }\n         }\n         hir::ItemStruct(ref si, ref generics) => {\n-            let ty_generics = ty_generics_for_type_or_impl(ccx, generics);\n+            let ty_generics = ty_generics_for_type(ccx, generics);\n             let substs = mk_item_substs(ccx, &ty_generics);\n             let def = convert_struct_def(tcx, it, si);\n             let t = tcx.mk_struct(def, tcx.mk_substs(substs));\n@@ -1611,10 +1611,14 @@ fn convert_foreign_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     assert!(prev_predicates.is_none());\n }\n \n-fn ty_generics_for_type_or_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n-                                          generics: &hir::Generics)\n-                                          -> ty::Generics<'tcx> {\n-    ty_generics(ccx, TypeSpace, generics, &ty::Generics::empty())\n+fn ty_generics_for_type<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, generics: &hir::Generics)\n+                                  -> ty::Generics<'tcx> {\n+    ty_generics(ccx, TypeSpace, generics, &ty::Generics::empty(), true)\n+}\n+\n+fn ty_generics_for_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, generics: &hir::Generics)\n+                                  -> ty::Generics<'tcx> {\n+    ty_generics(ccx, TypeSpace, generics, &ty::Generics::empty(), false)\n }\n \n fn ty_generic_predicates_for_type_or_impl<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n@@ -1633,7 +1637,7 @@ fn ty_generics_for_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     debug!(\"ty_generics_for_trait(trait_id={:?}, substs={:?})\",\n            ccx.tcx.map.local_def_id(trait_id), substs);\n \n-    let mut generics = ty_generics_for_type_or_impl(ccx, ast_generics);\n+    let mut generics = ty_generics_for_type(ccx, ast_generics);\n \n     // Add in the self type parameter.\n     //\n@@ -1665,7 +1669,7 @@ fn ty_generics_for_fn<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                                base_generics: &ty::Generics<'tcx>)\n                                -> ty::Generics<'tcx>\n {\n-    ty_generics(ccx, FnSpace, generics, base_generics)\n+    ty_generics(ccx, FnSpace, generics, base_generics, false)\n }\n \n fn ty_generic_predicates_for_fn<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n@@ -1840,7 +1844,8 @@ fn ty_generic_predicates<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n fn ty_generics<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                         space: ParamSpace,\n                         ast_generics: &hir::Generics,\n-                        base_generics: &ty::Generics<'tcx>)\n+                        base_generics: &ty::Generics<'tcx>,\n+                        allow_defaults: bool)\n                         -> ty::Generics<'tcx>\n {\n     let tcx = ccx.tcx;\n@@ -1863,7 +1868,8 @@ fn ty_generics<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n \n     // Now create the real type parameters.\n     for i in 0..ast_generics.ty_params.len() {\n-        let def = get_or_create_type_parameter_def(ccx, ast_generics, space, i as u32);\n+        let def =\n+            get_or_create_type_parameter_def(ccx, ast_generics, space, i as u32, allow_defaults);\n         debug!(\"ty_generics: def for type param: {:?}, {:?}\", def, space);\n         result.types.push(space, def);\n     }\n@@ -1897,7 +1903,8 @@ fn convert_default_type_parameter<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                                              ast_generics: &hir::Generics,\n                                              space: ParamSpace,\n-                                             index: u32)\n+                                             index: u32,\n+                                             allow_defaults: bool)\n                                              -> ty::TypeParameterDef<'tcx>\n {\n     let param = &ast_generics.ty_params[index as usize];\n@@ -1918,7 +1925,7 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n \n     let parent = tcx.map.get_parent(param.id);\n \n-    if space != TypeSpace && default.is_some() {\n+    if !allow_defaults && default.is_some() {\n         if !tcx.sess.features.borrow().default_type_parameter_fallback {\n             tcx.sess.add_lint(\n                 lint::builtin::INVALID_TYPE_PARAM_DEFAULT,"}, {"sha": "b99ef9258049aa86e2e33df840b106fd884d7e75", "filename": "src/test/compile-fail/type-parameter-invalid-lint.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6136a86291b12f5441910d56d5bc0dfbc7eecdeb/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6136a86291b12f5441910d56d5bc0dfbc7eecdeb/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs?ref=6136a86291b12f5441910d56d5bc0dfbc7eecdeb", "patch": "@@ -14,4 +14,10 @@\n fn avg<T=i32>(_: T) {}\n //~^ ERROR defaults for type parameters are only allowed\n //~| WARNING hard error\n+\n+struct S<T>(T);\n+impl<T=i32> S<T> {}\n+//~^ ERROR defaults for type parameters are only allowed\n+//~| WARNING hard error\n+\n fn main() {}"}]}