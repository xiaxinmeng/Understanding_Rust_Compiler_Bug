{"sha": "5676f6084bd0a5d1211b3afab93177747bf64fc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NzZmNjA4NGJkMGE1ZDEyMTFiM2FmYWI5MzE3Nzc0N2JmNjRmYzQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-24T01:46:55Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-24T06:38:35Z"}, "message": "Rollup merge of #22301 - nikomatsakis:object-safe-sized-methods, r=huonw\n\n RFC 817 is not yet accepted, but I wanted to put this code up so people can see how it works. And to be ready lest it should be accepted.\n\ncc rust-lang/rfcs#817", "tree": {"sha": "bdf9be9498292bb27f62513130900b331a25d24d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdf9be9498292bb27f62513130900b331a25d24d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5676f6084bd0a5d1211b3afab93177747bf64fc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5676f6084bd0a5d1211b3afab93177747bf64fc4", "html_url": "https://github.com/rust-lang/rust/commit/5676f6084bd0a5d1211b3afab93177747bf64fc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5676f6084bd0a5d1211b3afab93177747bf64fc4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e88762a83ac06450f7455ecc5432b30bfb42f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e88762a83ac06450f7455ecc5432b30bfb42f24", "html_url": "https://github.com/rust-lang/rust/commit/8e88762a83ac06450f7455ecc5432b30bfb42f24"}, {"sha": "fd9f7da68ed23934ace0ae86b39d47f6078011a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd9f7da68ed23934ace0ae86b39d47f6078011a0", "html_url": "https://github.com/rust-lang/rust/commit/fd9f7da68ed23934ace0ae86b39d47f6078011a0"}], "stats": {"total": 318, "additions": 252, "deletions": 66}, "files": [{"sha": "64835a666faef46d6fe23c518d88108d5dbe7663", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=5676f6084bd0a5d1211b3afab93177747bf64fc4", "patch": "@@ -42,9 +42,6 @@ pub enum ObjectSafetyViolation<'tcx> {\n /// Reasons a method might not be object-safe.\n #[derive(Copy,Clone,Debug)]\n pub enum MethodViolationCode {\n-    /// e.g., `fn(self)`\n-    ByValueSelf,\n-\n     /// e.g., `fn foo()`\n     StaticMethod,\n \n@@ -157,19 +154,25 @@ fn supertraits_reference_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n fn trait_has_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n                               trait_def_id: ast::DefId)\n                               -> bool\n+{\n+    let trait_def = ty::lookup_trait_def(tcx, trait_def_id);\n+    let trait_predicates = ty::lookup_predicates(tcx, trait_def_id);\n+    generics_require_sized_self(tcx, &trait_def.generics, &trait_predicates)\n+}\n+\n+fn generics_require_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                     generics: &ty::Generics<'tcx>,\n+                                     predicates: &ty::GenericPredicates<'tcx>)\n+                                     -> bool\n {\n     let sized_def_id = match tcx.lang_items.sized_trait() {\n         Some(def_id) => def_id,\n         None => { return false; /* No Sized trait, can't require it! */ }\n     };\n \n     // Search for a predicate like `Self : Sized` amongst the trait bounds.\n-    let trait_def = ty::lookup_trait_def(tcx, trait_def_id);\n-    let free_substs = ty::construct_free_substs(tcx, &trait_def.generics, ast::DUMMY_NODE_ID);\n-\n-    let trait_predicates = ty::lookup_predicates(tcx, trait_def_id);\n-    let predicates = trait_predicates.instantiate(tcx, &free_substs).predicates.into_vec();\n-\n+    let free_substs = ty::construct_free_substs(tcx, generics, ast::DUMMY_NODE_ID);\n+    let predicates = predicates.instantiate(tcx, &free_substs).predicates.into_vec();\n     elaborate_predicates(tcx, predicates)\n         .any(|predicate| {\n             match predicate {\n@@ -192,17 +195,21 @@ fn object_safety_violations_for_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                              method: &ty::Method<'tcx>)\n                                              -> Option<MethodViolationCode>\n {\n-    // The method's first parameter must be something that derefs to\n-    // `&self`. For now, we only accept `&self` and `Box<Self>`.\n-    match method.explicit_self {\n-        ty::ByValueExplicitSelfCategory => {\n-            return Some(MethodViolationCode::ByValueSelf);\n-        }\n+    // Any method that has a `Self : Sized` requisite is otherwise\n+    // exempt from the regulations.\n+    if generics_require_sized_self(tcx, &method.generics, &method.predicates) {\n+        return None;\n+    }\n \n+    // The method's first parameter must be something that derefs (or\n+    // autorefs) to `&self`. For now, we only accept `self`, `&self`\n+    // and `Box<Self>`.\n+    match method.explicit_self {\n         ty::StaticExplicitSelfCategory => {\n             return Some(MethodViolationCode::StaticMethod);\n         }\n \n+        ty::ByValueExplicitSelfCategory |\n         ty::ByReferenceExplicitSelfCategory(..) |\n         ty::ByBoxExplicitSelfCategory => {\n         }"}, {"sha": "3411f12886d2266c959bfecb0f1a5d6975045e6b", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=5676f6084bd0a5d1211b3afab93177747bf64fc4", "patch": "@@ -818,9 +818,6 @@ fn emit_vtable_methods<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                         param_substs,\n                         substs.clone()).val;\n \n-                    // currently, at least, by-value self is not object safe\n-                    assert!(m.explicit_self != ty::ByValueExplicitSelfCategory);\n-\n                     Some(fn_ref).into_iter()\n                 }\n             }"}, {"sha": "d7db21f3a2f762350f94f0636886695f8b203fbf", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=5676f6084bd0a5d1211b3afab93177747bf64fc4", "patch": "@@ -404,26 +404,9 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                all_substs.repr(self.tcx()));\n \n         // Instantiate the bounds on the method with the\n-        // type/early-bound-regions substitutions performed.  The only\n-        // late-bound-regions that can appear in bounds are from the\n-        // impl, and those were already instantiated above.\n-        //\n-        // FIXME(DST). Super hack. For a method on a trait object\n-        // `Trait`, the generic signature requires that\n-        // `Self:Trait`. Since, for an object, we bind `Self` to the\n-        // type `Trait`, this leads to an obligation\n-        // `Trait:Trait`. Until such time we DST is fully implemented,\n-        // that obligation is not necessarily satisfied. (In the\n-        // future, it would be.) But we know that the true `Self` DOES implement\n-        // the trait. So we just delete this requirement. Hack hack hack.\n-        let mut method_predicates = pick.method_ty.predicates.instantiate(self.tcx(), &all_substs);\n-        match pick.kind {\n-            probe::ObjectPick(..) => {\n-                assert_eq!(method_predicates.predicates.get_slice(subst::SelfSpace).len(), 1);\n-                method_predicates.predicates.pop(subst::SelfSpace);\n-            }\n-            _ => { }\n-        }\n+        // type/early-bound-regions substitutions performed. There can\n+        // be no late-bound regions appearing here.\n+        let method_predicates = pick.method_ty.predicates.instantiate(self.tcx(), &all_substs);\n         let method_predicates = self.fcx.normalize_associated_types_in(self.span,\n                                                                        &method_predicates);\n "}, {"sha": "630530cf11f841186dcb2e0c899e2b6d1ab28661", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=5676f6084bd0a5d1211b3afab93177747bf64fc4", "patch": "@@ -133,14 +133,6 @@ pub fn check_object_safety<'tcx>(tcx: &ty::ctxt<'tcx>,\n                      in the supertrait listing\");\n             }\n \n-            ObjectSafetyViolation::Method(method, MethodViolationCode::ByValueSelf) => {\n-                tcx.sess.span_note(\n-                    span,\n-                    &format!(\"method `{}` has a receiver type of `Self`, \\\n-                              which cannot be used with a trait object\",\n-                             method.name.user_string(tcx)));\n-            }\n-\n             ObjectSafetyViolation::Method(method, MethodViolationCode::StaticMethod) => {\n                 tcx.sess.span_note(\n                     span,"}, {"sha": "d682ef7d70c9db931e5cbb28f74bee4b2c3ed41c", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=5676f6084bd0a5d1211b3afab93177747bf64fc4", "patch": "@@ -15,8 +15,7 @@ fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n \n fn main() {\n     let _: () = (box |_: isize| {}) as Box<FnOnce(isize)>;\n-    //~^ ERROR object-safe\n-    //~| ERROR mismatched types\n+    //~^ ERROR mismatched types\n     //~| expected `()`\n     //~| found `Box<core::ops::FnOnce(isize)>`\n     //~| expected ()"}, {"sha": "8fb543fb96703cda1a50fc7c0731dfc11288656f", "filename": "src/test/compile-fail/issue-18959.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs?ref=5676f6084bd0a5d1211b3afab93177747bf64fc4", "patch": "@@ -17,7 +17,11 @@ impl Foo for Thing {\n     fn foo<T>(&self, _: &T) {}\n }\n \n-#[inline(never)] fn foo(b: &Bar) { b.foo(&0_usize) }\n+#[inline(never)]\n+fn foo(b: &Bar) {\n+    b.foo(&0usize)\n+    //~^ ERROR the trait `Foo` is not implemented for the type `Bar`\n+}\n \n fn main() {\n     let mut thing = Thing;"}, {"sha": "1b20a902c9d527c7bc3ac6a204847d2939e415bc", "filename": "src/test/compile-fail/object-safety-by-value-self-use.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self-use.rs?ref=5676f6084bd0a5d1211b3afab93177747bf64fc4", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that while a trait with by-value self is object-safe, we\n+// can't actually invoke it from an object (yet...?).\n+\n+#![feature(rustc_attrs)]\n+\n+trait Bar {\n+    fn bar(self);\n+}\n+\n+trait Baz {\n+    fn baz(self: Self);\n+}\n+\n+fn use_bar(t: Box<Bar>) {\n+    t.bar() //~ ERROR cannot move a value of type Bar\n+}\n+\n+fn main() { }\n+"}, {"sha": "976717249e8eb2400fe6e307b625bd0fc8e73e18", "filename": "src/test/compile-fail/object-safety-by-value-self.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self.rs?ref=5676f6084bd0a5d1211b3afab93177747bf64fc4", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Check that we correctly prevent users from making trait objects\n-// from traits with a `fn(self)` method.\n+// Check that a trait with by-value self is considered object-safe.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n \n trait Bar {\n     fn bar(self);\n@@ -19,29 +21,35 @@ trait Baz {\n     fn baz(self: Self);\n }\n \n+trait Quux {\n+    // Legal because of the where clause:\n+    fn baz(self: Self) where Self : Sized;\n+}\n+\n fn make_bar<T:Bar>(t: &T) -> &Bar {\n-    t\n-        //~^ ERROR `Bar` is not object-safe\n-        //~| NOTE method `bar` has a receiver type of `Self`\n+    t // legal\n }\n \n fn make_bar_explicit<T:Bar>(t: &T) -> &Bar {\n-    t as &Bar\n-        //~^ ERROR `Bar` is not object-safe\n-        //~| NOTE method `bar` has a receiver type of `Self`\n+    t as &Bar // legal\n }\n \n fn make_baz<T:Baz>(t: &T) -> &Baz {\n-    t\n-        //~^ ERROR `Baz` is not object-safe\n-        //~| NOTE method `baz` has a receiver type of `Self`\n+    t // legal\n }\n \n fn make_baz_explicit<T:Baz>(t: &T) -> &Baz {\n-    t as &Baz\n-        //~^ ERROR `Baz` is not object-safe\n-        //~| NOTE method `baz` has a receiver type of `Self`\n+    t as &Baz // legal\n+}\n+\n+fn make_quux<T:Quux>(t: &T) -> &Quux {\n+    t\n+}\n+\n+fn make_quux_explicit<T:Quux>(t: &T) -> &Quux {\n+    t as &Quux\n }\n \n-fn main() {\n+#[rustc_error]\n+fn main() { //~ ERROR compilation successful\n }"}, {"sha": "fd20accfa1e6b562bd319e86b3a987a86baefcaf", "filename": "src/test/compile-fail/object-safety-generics.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Fcompile-fail%2Fobject-safety-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Fcompile-fail%2Fobject-safety-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-generics.rs?ref=5676f6084bd0a5d1211b3afab93177747bf64fc4", "patch": "@@ -9,12 +9,18 @@\n // except according to those terms.\n \n // Check that we correctly prevent users from making trait objects\n-// from traits with generic methods.\n+// from traits with generic methods, unless `where Self : Sized` is\n+// present.\n \n trait Bar {\n     fn bar<T>(&self, t: T);\n }\n \n+trait Quux {\n+    fn bar<T>(&self, t: T)\n+        where Self : Sized;\n+}\n+\n fn make_bar<T:Bar>(t: &T) -> &Bar {\n     t\n         //~^ ERROR `Bar` is not object-safe\n@@ -27,5 +33,13 @@ fn make_bar_explicit<T:Bar>(t: &T) -> &Bar {\n         //~| NOTE method `bar` has generic type parameters\n }\n \n+fn make_quux<T:Quux>(t: &T) -> &Quux {\n+    t\n+}\n+\n+fn make_quux_explicit<T:Quux>(t: &T) -> &Quux {\n+    t as &Quux\n+}\n+\n fn main() {\n }"}, {"sha": "b546774ccbd8cae8deb49bb638bf3e8fa886fac1", "filename": "src/test/compile-fail/object-safety-mentions-Self.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Fcompile-fail%2Fobject-safety-mentions-Self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Fcompile-fail%2Fobject-safety-mentions-Self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-mentions-Self.rs?ref=5676f6084bd0a5d1211b3afab93177747bf64fc4", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n // Check that we correctly prevent users from making trait objects\n-// form traits that make use of `Self` in an argument or return position.\n+// form traits that make use of `Self` in an argument or return\n+// position, unless `where Self : Sized` is present..\n \n trait Bar {\n     fn bar(&self, x: &Self);\n@@ -19,6 +20,10 @@ trait Baz {\n     fn bar(&self) -> Self;\n }\n \n+trait Quux {\n+    fn get(&self, s: &Self) -> Self where Self : Sized;\n+}\n+\n fn make_bar<T:Bar>(t: &T) -> &Bar {\n     t\n         //~^ ERROR `Bar` is not object-safe\n@@ -43,5 +48,13 @@ fn make_baz_explicit<T:Baz>(t: &T) -> &Baz {\n         //~| NOTE method `bar` references the `Self` type in its arguments or return type\n }\n \n+fn make_quux<T:Quux>(t: &T) -> &Quux {\n+    t\n+}\n+\n+fn make_quux_explicit<T:Quux>(t: &T) -> &Quux {\n+    t as &Quux\n+}\n+\n fn main() {\n }"}, {"sha": "b09b10ffa0aad9dc22572e47f9348b44d7d7e7ac", "filename": "src/test/compile-fail/trait-test-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs?ref=5676f6084bd0a5d1211b3afab93177747bf64fc4", "patch": "@@ -18,4 +18,5 @@ fn main() {\n     10.dup::<i32>(); //~ ERROR does not take type parameters\n     10.blah::<i32, i32>(); //~ ERROR incorrect number of type parameters\n     (box 10 as Box<bar>).dup(); //~ ERROR cannot convert to a trait object\n+    //~^ ERROR the trait `bar` is not implemented for the type `bar`\n }"}, {"sha": "ae092333134ea0f0b53c988058387c4bfdb41c18", "filename": "src/test/run-pass/object-safety-sized-self-by-value-self.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-by-value-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-by-value-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-by-value-self.rs?ref=5676f6084bd0a5d1211b3afab93177747bf64fc4", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that a trait is still object-safe (and usable) if it has\n+// methods with by-value self so long as they require `Self : Sized`.\n+\n+trait Counter {\n+    fn tick(&mut self) -> u32;\n+    fn get(self) -> u32 where Self : Sized;\n+}\n+\n+struct CCounter {\n+    c: u32\n+}\n+\n+impl Counter for CCounter {\n+    fn tick(&mut self) -> u32 { self.c += 1; self.c }\n+    fn get(self) -> u32 where Self : Sized { self.c }\n+}\n+\n+fn tick1<C:Counter>(mut c: C) -> u32 {\n+    tick2(&mut c);\n+    c.get()\n+}\n+\n+fn tick2(c: &mut Counter) {\n+    tick3(c);\n+}\n+\n+fn tick3<C:?Sized+Counter>(c: &mut C) {\n+    c.tick();\n+    c.tick();\n+}\n+\n+fn main() {\n+    let mut c = CCounter { c: 0 };\n+    let value = tick1(c);\n+    assert_eq!(value, 2);\n+}"}, {"sha": "1a42c4b6ef6649be36b0e8bae0b765c4e2b1b150", "filename": "src/test/run-pass/object-safety-sized-self-generic-method.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-generic-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-generic-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-generic-method.rs?ref=5676f6084bd0a5d1211b3afab93177747bf64fc4", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that a trait is still object-safe (and usable) if it has\n+// generic methods so long as they require `Self : Sized`.\n+\n+trait Counter {\n+    fn tick(&mut self) -> u32;\n+    fn with<F:FnOnce(u32)>(&self, f: F) where Self : Sized;\n+}\n+\n+struct CCounter {\n+    c: u32\n+}\n+\n+impl Counter for CCounter {\n+    fn tick(&mut self) -> u32 { self.c += 1; self.c }\n+    fn with<F:FnOnce(u32)>(&self, f: F) { f(self.c); }\n+}\n+\n+fn tick1<C:Counter>(c: &mut C) {\n+    tick2(c);\n+    c.with(|i| ());\n+}\n+\n+fn tick2(c: &mut Counter) {\n+    tick3(c);\n+}\n+\n+fn tick3<C:?Sized+Counter>(c: &mut C) {\n+    c.tick();\n+    c.tick();\n+}\n+\n+fn main() {\n+    let mut c = CCounter { c: 0 };\n+    tick1(&mut c);\n+    assert_eq!(c.tick(), 3);\n+}"}, {"sha": "7f075bbb6c2f226bb1a38ef4b1cd9193e737fdf3", "filename": "src/test/run-pass/object-safety-sized-self-return-Self.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-return-Self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5676f6084bd0a5d1211b3afab93177747bf64fc4/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-return-Self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-safety-sized-self-return-Self.rs?ref=5676f6084bd0a5d1211b3afab93177747bf64fc4", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that a trait is still object-safe (and usable) if it has\n+// methods that return `Self` so long as they require `Self : Sized`.\n+\n+trait Counter {\n+    fn new() -> Self where Self : Sized;\n+    fn tick(&mut self) -> u32;\n+}\n+\n+struct CCounter {\n+    c: u32\n+}\n+\n+impl Counter for CCounter {\n+    fn new() -> CCounter { CCounter { c: 0 } }\n+    fn tick(&mut self) -> u32 { self.c += 1; self.c }\n+}\n+\n+fn preticked<C:Counter>() -> C {\n+    let mut c: C = Counter::new();\n+    tick(&mut c);\n+    c\n+}\n+\n+fn tick(c: &mut Counter) {\n+    tick_generic(c);\n+}\n+\n+fn tick_generic<C:?Sized+Counter>(c: &mut C) {\n+    c.tick();\n+    c.tick();\n+}\n+\n+fn main() {\n+    let mut c = preticked::<CCounter>();\n+    tick(&mut c);\n+    assert_eq!(c.tick(), 5);\n+}"}]}