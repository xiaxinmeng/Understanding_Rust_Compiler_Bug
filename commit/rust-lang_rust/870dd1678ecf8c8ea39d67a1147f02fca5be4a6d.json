{"sha": "870dd1678ecf8c8ea39d67a1147f02fca5be4a6d", "node_id": "C_kwDOAAsO6NoAKDg3MGRkMTY3OGVjZjhjOGVhMzlkNjdhMTE0N2YwMmZjYTViZTRhNmQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-28T12:38:22Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-28T12:38:22Z"}, "message": "Use OnDrop.", "tree": {"sha": "197ae192e8e0978cb47f129706fd76e95fa0160c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/197ae192e8e0978cb47f129706fd76e95fa0160c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/870dd1678ecf8c8ea39d67a1147f02fca5be4a6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/870dd1678ecf8c8ea39d67a1147f02fca5be4a6d", "html_url": "https://github.com/rust-lang/rust/commit/870dd1678ecf8c8ea39d67a1147f02fca5be4a6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/870dd1678ecf8c8ea39d67a1147f02fca5be4a6d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e33e2d6e9e29a159b1774cc47775d19fc74bbc80", "url": "https://api.github.com/repos/rust-lang/rust/commits/e33e2d6e9e29a159b1774cc47775d19fc74bbc80", "html_url": "https://github.com/rust-lang/rust/commit/e33e2d6e9e29a159b1774cc47775d19fc74bbc80"}], "stats": {"total": 71, "additions": 32, "deletions": 39}, "files": [{"sha": "29f94304da1d72ccab37f8a683735026f791a9cc", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 32, "deletions": 39, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/870dd1678ecf8c8ea39d67a1147f02fca5be4a6d/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870dd1678ecf8c8ea39d67a1147f02fca5be4a6d/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=870dd1678ecf8c8ea39d67a1147f02fca5be4a6d", "patch": "@@ -6,6 +6,7 @@ use rustc_data_structures::sharded::{self, Sharded};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{AtomicU32, AtomicU64, Lock, Lrc, Ordering};\n+use rustc_data_structures::OnDrop;\n use rustc_index::vec::IndexVec;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use smallvec::{smallvec, SmallVec};\n@@ -676,49 +677,19 @@ impl<K: DepKind> DepGraph<K> {\n             None => {}\n         }\n \n-        let mut stack = smallvec![prev_index];\n-        let _backtrace_print =\n-            MarkingStack { stack: &mut stack, sess: qcx.dep_context().sess(), graph: data };\n+        let backtrace = backtrace_printer(qcx.dep_context().sess(), data, prev_index);\n \n         // This DepNode and the corresponding query invocation existed\n         // in the previous compilation session too, so we can try to\n         // mark it as green by recursively marking all of its\n         // dependencies green.\n         let ret = self\n-            .try_mark_previous_green(qcx, data, prev_index, &dep_node, _backtrace_print.stack)\n+            .try_mark_previous_green(qcx, data, prev_index, &dep_node)\n             .map(|dep_node_index| (prev_index, dep_node_index));\n \n         // We succeeded, no backtrace.\n-        std::mem::forget(_backtrace_print);\n+        backtrace.disable();\n         return ret;\n-\n-        /// Remember the stack of queries we are forcing in the event of an incr. comp. panic.\n-        struct MarkingStack<'a, 'v, K: DepKind> {\n-            stack: &'v mut SmallVec<[SerializedDepNodeIndex; 8]>,\n-            sess: &'a rustc_session::Session,\n-            graph: &'a DepGraphData<K>,\n-        }\n-\n-        impl<'a, 'v, K: DepKind> Drop for MarkingStack<'a, 'v, K> {\n-            /// Print the forcing backtrace.\n-            #[inline(never)]\n-            #[cold]\n-            fn drop(&mut self) {\n-                for &frame in self.stack.iter().rev() {\n-                    let node = self.graph.previous.index_to_node(frame);\n-                    // Do not try to rely on DepNode's Debug implementation,\n-                    // since it may panic.\n-                    let diag = rustc_errors::Diagnostic::new(\n-                        rustc_errors::Level::FailureNote,\n-                        &format!(\n-                            \"encountered while trying to mark dependency green: {:?}({})\",\n-                            node.kind, node.hash\n-                        ),\n-                    );\n-                    self.sess.diagnostic().force_print_diagnostic(diag);\n-                }\n-            }\n-        }\n     }\n \n     #[instrument(skip(self, qcx, data, parent_dep_node_index), level = \"debug\")]\n@@ -728,7 +699,6 @@ impl<K: DepKind> DepGraph<K> {\n         data: &DepGraphData<K>,\n         parent_dep_node_index: SerializedDepNodeIndex,\n         dep_node: &DepNode<K>,\n-        stack: &mut SmallVec<[SerializedDepNodeIndex; 8]>,\n     ) -> Option<()> {\n         let dep_dep_node_color = data.colors.get(parent_dep_node_index);\n         let dep_dep_node = &data.previous.index_to_node(parent_dep_node_index);\n@@ -761,7 +731,7 @@ impl<K: DepKind> DepGraph<K> {\n             );\n \n             let node_index =\n-                self.try_mark_previous_green(qcx, data, parent_dep_node_index, dep_dep_node, stack);\n+                self.try_mark_previous_green(qcx, data, parent_dep_node_index, dep_dep_node);\n \n             if node_index.is_some() {\n                 debug!(\"managed to MARK dependency {dep_dep_node:?} as green\",);\n@@ -817,7 +787,6 @@ impl<K: DepKind> DepGraph<K> {\n         data: &DepGraphData<K>,\n         prev_dep_node_index: SerializedDepNodeIndex,\n         dep_node: &DepNode<K>,\n-        stack: &mut SmallVec<[SerializedDepNodeIndex; 8]>,\n     ) -> Option<DepNodeIndex> {\n         #[cfg(not(parallel_compiler))]\n         {\n@@ -833,9 +802,10 @@ impl<K: DepKind> DepGraph<K> {\n         let prev_deps = data.previous.edge_targets_from(prev_dep_node_index);\n \n         for &dep_dep_node_index in prev_deps {\n-            stack.push(dep_dep_node_index);\n-            self.try_mark_parent_green(qcx, data, dep_dep_node_index, dep_node, stack)?;\n-            stack.pop();\n+            let backtrace = backtrace_printer(qcx.dep_context().sess(), data, dep_dep_node_index);\n+            let success = self.try_mark_parent_green(qcx, data, dep_dep_node_index, dep_node);\n+            backtrace.disable();\n+            success?;\n         }\n \n         // If we got here without hitting a `return` that means that all\n@@ -1405,3 +1375,26 @@ impl DepNodeColorMap {\n         )\n     }\n }\n+\n+fn backtrace_printer<'a, K: DepKind>(\n+    sess: &'a rustc_session::Session,\n+    graph: &'a DepGraphData<K>,\n+    node: SerializedDepNodeIndex,\n+) -> OnDrop<impl Fn() + 'a> {\n+    OnDrop(\n+        #[inline(never)]\n+        #[cold]\n+        move || {\n+            let node = graph.previous.index_to_node(node);\n+            // Do not try to rely on DepNode's Debug implementation, since it may panic.\n+            let diag = rustc_errors::Diagnostic::new(\n+                rustc_errors::Level::FailureNote,\n+                &format!(\n+                    \"encountered while trying to mark dependency green: {:?}({})\",\n+                    node.kind, node.hash\n+                ),\n+            );\n+            sess.diagnostic().force_print_diagnostic(diag);\n+        },\n+    )\n+}"}]}