{"sha": "c118b17953a8e29b850b8ed8fe0d3aaf2917a9da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMThiMTc5NTNhOGUyOWI4NTBiOGVkOGZlMGQzYWFmMjkxN2E5ZGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-27T13:25:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-27T13:25:05Z"}, "message": "use a better way to get at the type parameter", "tree": {"sha": "f7209f08e328f0956c2df8d2d0c77e42cc2f5839", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7209f08e328f0956c2df8d2d0c77e42cc2f5839"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c118b17953a8e29b850b8ed8fe0d3aaf2917a9da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c118b17953a8e29b850b8ed8fe0d3aaf2917a9da", "html_url": "https://github.com/rust-lang/rust/commit/c118b17953a8e29b850b8ed8fe0d3aaf2917a9da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c118b17953a8e29b850b8ed8fe0d3aaf2917a9da/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fff905bc698c0b6ee8b407273e7151d7b9a7a89a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fff905bc698c0b6ee8b407273e7151d7b9a7a89a", "html_url": "https://github.com/rust-lang/rust/commit/fff905bc698c0b6ee8b407273e7151d7b9a7a89a"}], "stats": {"total": 7, "additions": 1, "deletions": 6}, "files": [{"sha": "aa82c853257a3f0d45c2e8e490f030e80a879be1", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c118b17953a8e29b850b8ed8fe0d3aaf2917a9da/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c118b17953a8e29b850b8ed8fe0d3aaf2917a9da/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=c118b17953a8e29b850b8ed8fe0d3aaf2917a9da", "patch": "@@ -502,12 +502,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n                 // emit a panic or a NOP for `panic_if_uninhabited`\n                 if intrinsic == Some(\"panic_if_uninhabited\") {\n-                    let ty = match callee.layout.ty.sty {\n-                        ty::FnDef(_, substs) => {\n-                            substs.type_at(0)\n-                        }\n-                        _ => bug!(\"{} is not callable as intrinsic\", callee.layout.ty)\n-                    };\n+                    let ty = instance.unwrap().substs.type_at(0);\n                     let layout = bx.layout_of(ty);\n                     if layout.abi.is_uninhabited() {\n                         let loc = bx.sess().source_map().lookup_char_pos(span.lo());"}]}