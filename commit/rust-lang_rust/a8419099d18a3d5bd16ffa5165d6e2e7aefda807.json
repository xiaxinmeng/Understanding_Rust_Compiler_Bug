{"sha": "a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NDE5MDk5ZDE4YTNkNWJkMTZmZmE1MTY1ZDZlMmU3YWVmZGE4MDc=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-03T17:13:39Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T10:58:32Z"}, "message": "InstanceDef::Item", "tree": {"sha": "eb745b34140cc61b5968b6c286a1a8655fdd0a13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb745b34140cc61b5968b6c286a1a8655fdd0a13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "html_url": "https://github.com/rust-lang/rust/commit/a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "178c6507f6f8bb8a8713151b12f29dfa650262ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/178c6507f6f8bb8a8713151b12f29dfa650262ed", "html_url": "https://github.com/rust-lang/rust/commit/178c6507f6f8bb8a8713151b12f29dfa650262ed"}], "stats": {"total": 138, "additions": 80, "deletions": 58}, "files": [{"sha": "4f2d592ffc6a69132709711814771a3389e72ddf", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "patch": "@@ -249,9 +249,9 @@ fn exported_symbols_provider_local(\n             }\n \n             match *mono_item {\n-                MonoItem::Fn(Instance { def: InstanceDef::Item(def_id), substs }) => {\n+                MonoItem::Fn(Instance { def: InstanceDef::Item(def), substs }) => {\n                     if substs.non_erasable_generics().next().is_some() {\n-                        let symbol = ExportedSymbol::Generic(def_id, substs);\n+                        let symbol = ExportedSymbol::Generic(def.did, substs);\n                         symbols.push((symbol, SymbolExportLevel::Rust));\n                     }\n                 }"}, {"sha": "b7e3500ede428e47177fe4eeae48f3b709577a70", "filename": "src/librustc_middle/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmono.rs?ref=a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "patch": "@@ -346,8 +346,8 @@ impl<'tcx> CodegenUnit<'tcx> {\n                             // instances into account. The others don't matter for\n                             // the codegen tests and can even make item order\n                             // unstable.\n-                            InstanceDef::Item(def_id) => {\n-                                def_id.as_local().map(|def_id| tcx.hir().as_local_hir_id(def_id))\n+                            InstanceDef::Item(def) => {\n+                                def.did.as_local().map(|def_id| tcx.hir().as_local_hir_id(def_id))\n                             }\n                             InstanceDef::VtableShim(..)\n                             | InstanceDef::ReifyShim(..)"}, {"sha": "4c96e1f965f7fbeb42364181d1f23d4d8036fe16", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "patch": "@@ -29,7 +29,7 @@ pub enum InstanceDef<'tcx> {\n     /// - `fn` items\n     /// - closures\n     /// - generators\n-    Item(DefId),\n+    Item(ty::WithOptParam<DefId>),\n \n     /// An intrinsic `fn` item (with `\"rust-intrinsic\"` or `\"platform-intrinsic\"` ABI).\n     ///\n@@ -160,8 +160,8 @@ impl<'tcx> Instance<'tcx> {\n         self.substs.non_erasable_generics().next()?;\n \n         match self.def {\n-            InstanceDef::Item(def_id) => tcx\n-                .upstream_monomorphizations_for(def_id)\n+            InstanceDef::Item(def) => tcx\n+                .upstream_monomorphizations_for(def.did)\n                 .and_then(|monos| monos.get(&self.substs).cloned()),\n             InstanceDef::DropGlue(_, Some(_)) => tcx.upstream_drop_glue_for(self.substs),\n             _ => None,\n@@ -171,10 +171,10 @@ impl<'tcx> Instance<'tcx> {\n \n impl<'tcx> InstanceDef<'tcx> {\n     #[inline]\n-    pub fn def_id(&self) -> DefId {\n-        match *self {\n-            InstanceDef::Item(def_id)\n-            | InstanceDef::VtableShim(def_id)\n+    pub fn def_id(self) -> DefId {\n+        match self {\n+            InstanceDef::Item(def) => def.did,\n+            InstanceDef::VtableShim(def_id)\n             | InstanceDef::ReifyShim(def_id)\n             | InstanceDef::FnPtrShim(def_id, _)\n             | InstanceDef::Virtual(def_id, _)\n@@ -185,6 +185,21 @@ impl<'tcx> InstanceDef<'tcx> {\n         }\n     }\n \n+    #[inline]\n+    pub fn with_opt_param(self) -> ty::WithOptParam<DefId> {\n+        match self {\n+            InstanceDef::Item(def) => def,\n+            InstanceDef::VtableShim(def_id)\n+            | InstanceDef::ReifyShim(def_id)\n+            | InstanceDef::FnPtrShim(def_id, _)\n+            | InstanceDef::Virtual(def_id, _)\n+            | InstanceDef::Intrinsic(def_id)\n+            | InstanceDef::ClosureOnceShim { call_once: def_id }\n+            | InstanceDef::DropGlue(def_id, _)\n+            | InstanceDef::CloneShim(def_id, _) => ty::WithOptParam::dummy(def_id),\n+        }\n+    }\n+\n     #[inline]\n     pub fn attrs(&self, tcx: TyCtxt<'tcx>) -> ty::Attributes<'tcx> {\n         tcx.get_attrs(self.def_id())\n@@ -198,7 +213,7 @@ impl<'tcx> InstanceDef<'tcx> {\n     pub fn requires_inline(&self, tcx: TyCtxt<'tcx>) -> bool {\n         use rustc_hir::definitions::DefPathData;\n         let def_id = match *self {\n-            ty::InstanceDef::Item(def_id) => def_id,\n+            ty::InstanceDef::Item(def) => def.did,\n             ty::InstanceDef::DropGlue(_, Some(_)) => return false,\n             _ => return true,\n         };\n@@ -244,8 +259,8 @@ impl<'tcx> InstanceDef<'tcx> {\n \n     pub fn requires_caller_location(&self, tcx: TyCtxt<'_>) -> bool {\n         match *self {\n-            InstanceDef::Item(def_id) => {\n-                tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::TRACK_CALLER)\n+            InstanceDef::Item(def) => {\n+                tcx.codegen_fn_attrs(def.did).flags.contains(CodegenFnAttrFlags::TRACK_CALLER)\n             }\n             _ => false,\n         }\n@@ -283,7 +298,7 @@ impl<'tcx> Instance<'tcx> {\n             def_id,\n             substs\n         );\n-        Instance { def: InstanceDef::Item(def_id), substs }\n+        Instance { def: InstanceDef::Item(ty::WithOptParam::dummy(def_id)), substs }\n     }\n \n     pub fn mono(tcx: TyCtxt<'tcx>, def_id: DefId) -> Instance<'tcx> {\n@@ -356,9 +371,9 @@ impl<'tcx> Instance<'tcx> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n         Instance::resolve(tcx, param_env, def_id, substs).ok().flatten().map(|mut resolved| {\n             match resolved.def {\n-                InstanceDef::Item(def_id) if resolved.def.requires_caller_location(tcx) => {\n+                InstanceDef::Item(def) if resolved.def.requires_caller_location(tcx) => {\n                     debug!(\" => fn pointer created for function with #[track_caller]\");\n-                    resolved.def = InstanceDef::ReifyShim(def_id);\n+                    resolved.def = InstanceDef::ReifyShim(def.did);\n                 }\n                 InstanceDef::Virtual(def_id, _) => {\n                     debug!(\" => fn pointer created for virtual call\");"}, {"sha": "ce76a3bef832f22035681603f3cc03cf7219e9fb", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "patch": "@@ -2880,7 +2880,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.\n     pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {\n         match instance {\n-            ty::InstanceDef::Item(did) => self.optimized_mir(did),\n+            ty::InstanceDef::Item(def) => self.optimized_mir(def.did),\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n             | ty::InstanceDef::Intrinsic(..)"}, {"sha": "67d0030dea8fc8d3ae13af656adeaeb7ae42fc91", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "patch": "@@ -838,7 +838,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n         Self {\n             substs: self.substs.fold_with(folder),\n             def: match self.def {\n-                Item(did) => Item(did.fold_with(folder)),\n+                Item(def) => Item(def.fold_with(folder)),\n                 VtableShim(did) => VtableShim(did.fold_with(folder)),\n                 ReifyShim(did) => ReifyShim(did.fold_with(folder)),\n                 Intrinsic(did) => Intrinsic(did.fold_with(folder)),\n@@ -857,7 +857,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n         use crate::ty::InstanceDef::*;\n         self.substs.visit_with(visitor)\n             || match self.def {\n-                Item(did) | VtableShim(did) | ReifyShim(did) | Intrinsic(did) | Virtual(did, _) => {\n+                Item(def) => def.visit_with(visitor),\n+                VtableShim(did) | ReifyShim(did) | Intrinsic(did) | Virtual(did, _) => {\n                     did.visit_with(visitor)\n                 }\n                 FnPtrShim(did, ty) | CloneShim(did, ty) => {"}, {"sha": "a8f0de68f22f77d3dc9c95607db35b0b2280580f", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "patch": "@@ -288,21 +288,21 @@ pub fn const_eval_raw_provider<'tcx>(\n     }\n \n     let cid = key.value;\n-    let def_id = cid.instance.def.def_id();\n+    let def = cid.instance.def.with_opt_param();\n \n-    if let Some(def_id) = def_id.as_local() {\n-        if tcx.has_typeck_tables(def_id) {\n-            if let Some(error_reported) = tcx.typeck_tables_of(def_id).tainted_by_errors {\n+    if let Some(def) = def.as_local() {\n+        if tcx.has_typeck_tables(def.did) {\n+            if let Some(error_reported) = tcx.typeck_tables_of_const_arg(def).tainted_by_errors {\n                 return Err(ErrorHandled::Reported(error_reported));\n             }\n         }\n     }\n \n-    let is_static = tcx.is_static(def_id);\n+    let is_static = tcx.is_static(def.did);\n \n     let mut ecx = InterpCx::new(\n         tcx,\n-        tcx.def_span(cid.instance.def_id()),\n+        tcx.def_span(def.did),\n         key.param_env,\n         CompileTimeInterpreter::new(tcx.sess.const_eval_limit()),\n         MemoryExtra { can_access_statics: is_static },\n@@ -334,9 +334,9 @@ pub fn const_eval_raw_provider<'tcx>(\n                 }\n \n                 v\n-            } else if let Some(def_id) = def_id.as_local() {\n+            } else if let Some(def) = def.as_local() {\n                 // constant defined in this crate, we can figure out a lint level!\n-                match tcx.def_kind(def_id.to_def_id()) {\n+                match tcx.def_kind(def.did.to_def_id()) {\n                     // constants never produce a hard error at the definition site. Anything else is\n                     // a backwards compatibility hazard (and will break old versions of winapi for\n                     // sure)\n@@ -346,9 +346,9 @@ pub fn const_eval_raw_provider<'tcx>(\n                     // validation thus preventing such a hard error from being a backwards\n                     // compatibility hazard\n                     DefKind::Const | DefKind::AssocConst => {\n-                        let hir_id = tcx.hir().as_local_hir_id(def_id);\n+                        let hir_id = tcx.hir().as_local_hir_id(def.did);\n                         err.report_as_lint(\n-                            tcx.at(tcx.def_span(def_id)),\n+                            tcx.at(tcx.def_span(def.did)),\n                             \"any use of this value will cause an error\",\n                             hir_id,\n                             Some(err.span),\n@@ -359,7 +359,7 @@ pub fn const_eval_raw_provider<'tcx>(\n                     // deny-by-default lint\n                     _ => {\n                         if let Some(p) = cid.promoted {\n-                            let span = tcx.promoted_mir(def_id)[p].span;\n+                            let span = tcx.promoted_mir(def.did)[p].span;\n                             if let err_inval!(ReferencedConstant) = err.error {\n                                 err.report_as_error(\n                                     tcx.at(span),\n@@ -369,7 +369,7 @@ pub fn const_eval_raw_provider<'tcx>(\n                                 err.report_as_lint(\n                                     tcx.at(span),\n                                     \"reaching this expression at runtime will panic or abort\",\n-                                    tcx.hir().as_local_hir_id(def_id),\n+                                    tcx.hir().as_local_hir_id(def.did),\n                                     Some(err.span),\n                                 )\n                             }"}, {"sha": "6453630bb92ba07f03a178ed34d0f99e1823436c", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "patch": "@@ -191,11 +191,11 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         debug!(\"find_mir_or_eval_fn: {:?}\", instance);\n \n         // Only check non-glue functions\n-        if let ty::InstanceDef::Item(def_id) = instance.def {\n+        if let ty::InstanceDef::Item(def) = instance.def {\n             // Execution might have wandered off into other crates, so we cannot do a stability-\n             // sensitive check here.  But we can at least rule out functions that are not const\n             // at all.\n-            if ecx.tcx.is_const_fn_raw(def_id) {\n+            if ecx.tcx.is_const_fn_raw(def.did) {\n                 // If this function is a `const fn` then under certain circumstances we\n                 // can evaluate call via the query system, thus memoizing all future calls.\n                 if ecx.try_eval_const_fn_call(instance, ret, args)? {"}, {"sha": "641b8cce5e419b2681387eacd9d0c53f4885800e", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "patch": "@@ -394,24 +394,26 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         promoted: Option<mir::Promoted>,\n     ) -> InterpResult<'tcx, &'tcx mir::Body<'tcx>> {\n         // do not continue if typeck errors occurred (can only occur in local crate)\n-        let did = instance.def_id();\n-        if let Some(did) = did.as_local() {\n-            if self.tcx.has_typeck_tables(did) {\n-                if let Some(error_reported) = self.tcx.typeck_tables_of(did).tainted_by_errors {\n+        let def = instance.with_opt_param();\n+        if let Some(def) = def.as_local() {\n+            if self.tcx.has_typeck_tables(def.did) {\n+                if let Some(error_reported) =\n+                    self.tcx.typeck_tables_of_const_arg(def).tainted_by_errors\n+                {\n                     throw_inval!(TypeckError(error_reported))\n                 }\n             }\n         }\n         trace!(\"load mir(instance={:?}, promoted={:?})\", instance, promoted);\n         if let Some(promoted) = promoted {\n-            return Ok(&self.tcx.promoted_mir(did)[promoted]);\n+            return Ok(&self.tcx.promoted_mir(def.did)[promoted]);\n         }\n         match instance {\n-            ty::InstanceDef::Item(def_id) => {\n-                if self.tcx.is_mir_available(did) {\n-                    Ok(self.tcx.optimized_mir(did))\n+            ty::InstanceDef::Item(def) => {\n+                if self.tcx.is_mir_available(def.did) {\n+                    Ok(self.tcx.optimized_mir(def.did))\n                 } else {\n-                    throw_unsup!(NoMirFor(def_id))\n+                    throw_unsup!(NoMirFor(def.did))\n                 }\n             }\n             _ => Ok(self.tcx.instance_mir(instance)),"}, {"sha": "35fb950ce66b9397eeb632da6c2dd240f9d07184", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "patch": "@@ -768,8 +768,8 @@ fn visit_instance_use<'tcx>(\n // need a mono item.\n fn should_monomorphize_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx>) -> bool {\n     let def_id = match instance.def {\n-        ty::InstanceDef::Item(def_id) | ty::InstanceDef::DropGlue(def_id, Some(_)) => def_id,\n-\n+        ty::InstanceDef::Item(def) => def.did,\n+        ty::InstanceDef::DropGlue(def_id, Some(_)) => def_id,\n         ty::InstanceDef::VtableShim(..)\n         | ty::InstanceDef::ReifyShim(..)\n         | ty::InstanceDef::ClosureOnceShim { .. }"}, {"sha": "208d2820581301043020e772c0271f87d25dcfac", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "patch": "@@ -314,7 +314,8 @@ fn mono_item_visibility(\n     };\n \n     let def_id = match instance.def {\n-        InstanceDef::Item(def_id) | InstanceDef::DropGlue(def_id, Some(_)) => def_id,\n+        InstanceDef::Item(def) => def.did,\n+        InstanceDef::DropGlue(def_id, Some(_)) => def_id,\n \n         // These are all compiler glue and such, never exported, always hidden.\n         InstanceDef::VtableShim(..)\n@@ -704,7 +705,7 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n     match mono_item {\n         MonoItem::Fn(instance) => {\n             let def_id = match instance.def {\n-                ty::InstanceDef::Item(def_id) => def_id,\n+                ty::InstanceDef::Item(def) => def.did,\n                 ty::InstanceDef::VtableShim(..)\n                 | ty::InstanceDef::ReifyShim(..)\n                 | ty::InstanceDef::FnPtrShim(..)"}, {"sha": "f64c72e7b362dfce3c0621308d4d1f3951fef38a", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "patch": "@@ -520,8 +520,8 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     let instance = Instance::resolve(self.tcx, self.param_env, def_id, substs);\n                     debug!(\"Resolving ({:?}) -> {:?}\", def_id, instance);\n                     if let Ok(Some(func)) = instance {\n-                        if let InstanceDef::Item(def_id) = func.def {\n-                            if is_const_fn(self.tcx, def_id) {\n+                        if let InstanceDef::Item(def) = func.def {\n+                            if is_const_fn(self.tcx, def.did) {\n                                 return;\n                             }\n                         }"}, {"sha": "e5d6ff4a3fb96fee06208b08fccaf00afabe37ed", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::mir::visit::Visitor as _;\n use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::steal::Steal;\n-use rustc_middle::ty::{InstanceDef, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, InstanceDef, TyCtxt, TypeFoldable};\n use rustc_span::{Span, Symbol};\n use std::borrow::Cow;\n \n@@ -116,7 +116,7 @@ pub struct MirSource<'tcx> {\n \n impl<'tcx> MirSource<'tcx> {\n     pub fn item(def_id: DefId) -> Self {\n-        MirSource { instance: InstanceDef::Item(def_id), promoted: None }\n+        MirSource { instance: InstanceDef::Item(ty::WithOptParam::dummy(def_id)), promoted: None }\n     }\n \n     #[inline]\n@@ -249,7 +249,7 @@ fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> Steal<Body<'_>> {\n     run_passes(\n         tcx,\n         &mut body,\n-        InstanceDef::Item(def_id.to_def_id()),\n+        InstanceDef::Item(ty::WithOptParam::dummy(def_id.to_def_id())),\n         None,\n         MirPhase::Const,\n         &[&[\n@@ -284,7 +284,7 @@ fn mir_validated(\n     run_passes(\n         tcx,\n         &mut body,\n-        InstanceDef::Item(def_id.to_def_id()),\n+        InstanceDef::Item(ty::WithOptParam::dummy(def_id.to_def_id())),\n         None,\n         MirPhase::Validated,\n         &[&[\n@@ -350,7 +350,7 @@ fn run_post_borrowck_cleanup_passes<'tcx>(\n     run_passes(\n         tcx,\n         body,\n-        InstanceDef::Item(def_id.to_def_id()),\n+        InstanceDef::Item(ty::WithOptParam::dummy(def_id.to_def_id())),\n         promoted,\n         MirPhase::DropElab,\n         &[post_borrowck_cleanup],\n@@ -414,7 +414,7 @@ fn run_optimization_passes<'tcx>(\n     run_passes(\n         tcx,\n         body,\n-        InstanceDef::Item(def_id.to_def_id()),\n+        InstanceDef::Item(ty::WithOptParam::dummy(def_id.to_def_id())),\n         promoted,\n         MirPhase::Optimized,\n         &["}, {"sha": "9b6dd2dc268a1e31f3b9efccc008732a84029209", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "patch": "@@ -248,7 +248,10 @@ pub fn write_mir_pretty<'tcx>(\n \n         for (i, body) in tcx.promoted_mir(def_id).iter_enumerated() {\n             writeln!(w)?;\n-            let src = MirSource { instance: ty::InstanceDef::Item(def_id), promoted: Some(i) };\n+            let src = MirSource {\n+                instance: ty::InstanceDef::Item(ty::WithOptParam::dummy(def_id)),\n+                promoted: Some(i),\n+            };\n             write_mir_fn(tcx, src, body, &mut |_, _| Ok(()), w)?;\n         }\n     }"}, {"sha": "7c58963fccc85d5231a659329711324fd99af35e", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8419099d18a3d5bd16ffa5165d6e2e7aefda807/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "patch": "@@ -86,7 +86,7 @@ fn inner_resolve_instance<'tcx>(\n             }\n             _ => {\n                 debug!(\" => free item\");\n-                ty::InstanceDef::Item(def.did)\n+                ty::InstanceDef::Item(def)\n             }\n         };\n         Ok(Some(Instance { def, substs }))\n@@ -215,7 +215,7 @@ fn resolve_associated_item<'tcx>(\n             Some(ty::Instance::new(leaf_def.item.def_id, substs))\n         }\n         traits::ImplSourceGenerator(generator_data) => Some(Instance {\n-            def: ty::InstanceDef::Item(generator_data.generator_def_id),\n+            def: ty::InstanceDef::Item(ty::WithOptParam::dummy(generator_data.generator_def_id)),\n             substs: generator_data.substs,\n         }),\n         traits::ImplSourceClosure(closure_data) => {"}]}