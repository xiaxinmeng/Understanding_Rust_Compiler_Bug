{"sha": "1aadd9da92624f758ceff02571d6d87420980b13", "node_id": "C_kwDOAAsO6NoAKDFhYWRkOWRhOTI2MjRmNzU4Y2VmZjAyNTcxZDZkODc0MjA5ODBiMTM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-21T06:48:13Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-21T06:48:13Z"}, "message": "internal: Use itemtree for variant and field attribute collection", "tree": {"sha": "54d6c414d31d70eec1956ba8c02cab1a06bd6790", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54d6c414d31d70eec1956ba8c02cab1a06bd6790"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aadd9da92624f758ceff02571d6d87420980b13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aadd9da92624f758ceff02571d6d87420980b13", "html_url": "https://github.com/rust-lang/rust/commit/1aadd9da92624f758ceff02571d6d87420980b13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aadd9da92624f758ceff02571d6d87420980b13/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10c7ee7068bfcb97081b6ed1bb5454d83c46ce63", "url": "https://api.github.com/repos/rust-lang/rust/commits/10c7ee7068bfcb97081b6ed1bb5454d83c46ce63", "html_url": "https://github.com/rust-lang/rust/commit/10c7ee7068bfcb97081b6ed1bb5454d83c46ce63"}], "stats": {"total": 98, "additions": 75, "deletions": 23}, "files": [{"sha": "277135d6dc4288798700d48e66712f5add18cc6f", "filename": "crates/hir-def/src/adt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1aadd9da92624f758ceff02571d6d87420980b13/crates%2Fhir-def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aadd9da92624f758ceff02571d6d87420980b13/crates%2Fhir-def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fadt.rs?ref=1aadd9da92624f758ceff02571d6d87420980b13", "patch": "@@ -136,9 +136,9 @@ impl EnumData {\n \n         let enum_ = &item_tree[loc.id.value];\n         let mut variants = Arena::new();\n-        for var_id in enum_.variants.clone() {\n-            if item_tree.attrs(db, krate, var_id.into()).is_cfg_enabled(&cfg_options) {\n-                let var = &item_tree[var_id];\n+        for tree_id in enum_.variants.clone() {\n+            if item_tree.attrs(db, krate, tree_id.into()).is_cfg_enabled(&cfg_options) {\n+                let var = &item_tree[tree_id];\n                 let var_data = lower_fields(\n                     db,\n                     krate,"}, {"sha": "7fbb5ebb01b0b073d4843db3899a348d1e4594fa", "filename": "crates/hir-def/src/attr.rs", "status": "modified", "additions": 72, "deletions": 20, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/1aadd9da92624f758ceff02571d6d87420980b13/crates%2Fhir-def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aadd9da92624f758ceff02571d6d87420980b13/crates%2Fhir-def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fattr.rs?ref=1aadd9da92624f758ceff02571d6d87420980b13", "patch": "@@ -7,7 +7,7 @@ use cfg::{CfgExpr, CfgOptions};\n use either::Either;\n use hir_expand::{hygiene::Hygiene, name::AsName, HirFileId, InFile};\n use itertools::Itertools;\n-use la_arena::ArenaMap;\n+use la_arena::{ArenaMap, Idx, RawIdx};\n use mbe::{syntax_node_to_token_tree, DelimiterKind, Punct};\n use smallvec::{smallvec, SmallVec};\n use syntax::{\n@@ -19,12 +19,12 @@ use tt::Subtree;\n use crate::{\n     db::DefDatabase,\n     intern::Interned,\n-    item_tree::{ItemTreeId, ItemTreeNode},\n+    item_tree::{Fields, ItemTreeId, ItemTreeNode},\n     nameres::ModuleSource,\n     path::{ModPath, PathKind},\n     src::{HasChildSource, HasSource},\n-    AdtId, AttrDefId, EnumId, GenericParamId, HasModule, LocalEnumVariantId, LocalFieldId, Lookup,\n-    MacroId, VariantId,\n+    AdtId, AttrDefId, EnumId, GenericParamId, LocalEnumVariantId, LocalFieldId, Lookup, MacroId,\n+    VariantId,\n };\n \n /// Holds documentation\n@@ -201,15 +201,22 @@ impl Attrs {\n         db: &dyn DefDatabase,\n         e: EnumId,\n     ) -> Arc<ArenaMap<LocalEnumVariantId, Attrs>> {\n-        let krate = e.lookup(db).container.krate;\n-        let src = e.child_source(db);\n         let mut res = ArenaMap::default();\n \n-        for (id, var) in src.value.iter() {\n-            let attrs = RawAttrs::from_attrs_owner(db, src.with_value(var as &dyn ast::HasAttrs))\n-                .filter(db, krate);\n-\n-            res.insert(id, attrs)\n+        let loc = e.lookup(db);\n+        let krate = loc.container.krate;\n+        let item_tree = loc.id.item_tree(db);\n+        let enum_ = &item_tree[loc.id.value];\n+        let crate_graph = db.crate_graph();\n+        let cfg_options = &crate_graph[krate].cfg_options;\n+\n+        let mut idx = 0;\n+        for variant in enum_.variants.clone() {\n+            let attrs = item_tree.attrs(db, krate, variant.into());\n+            if attrs.is_cfg_enabled(cfg_options) {\n+                res.insert(Idx::from_raw(RawIdx::from(idx)), attrs);\n+                idx += 1;\n+            }\n         }\n \n         Arc::new(res)\n@@ -219,18 +226,63 @@ impl Attrs {\n         db: &dyn DefDatabase,\n         v: VariantId,\n     ) -> Arc<ArenaMap<LocalFieldId, Attrs>> {\n-        let krate = v.module(db).krate;\n-        let src = v.child_source(db);\n         let mut res = ArenaMap::default();\n \n-        for (id, fld) in src.value.iter() {\n-            let owner: &dyn HasAttrs = match fld {\n-                Either::Left(tuple) => tuple,\n-                Either::Right(record) => record,\n-            };\n-            let attrs = RawAttrs::from_attrs_owner(db, src.with_value(owner)).filter(db, krate);\n+        let crate_graph = db.crate_graph();\n+        let (fields, item_tree, krate) = match v {\n+            VariantId::EnumVariantId(it) => {\n+                let e = it.parent;\n+                let loc = e.lookup(db);\n+                let krate = loc.container.krate;\n+                let item_tree = loc.id.item_tree(db);\n+                let enum_ = &item_tree[loc.id.value];\n+\n+                let cfg_options = &crate_graph[krate].cfg_options;\n+                let variant = 'tri: loop {\n+                    let mut idx = 0;\n+                    for variant in enum_.variants.clone() {\n+                        let attrs = item_tree.attrs(db, krate, variant.into());\n+                        if attrs.is_cfg_enabled(cfg_options) {\n+                            if it.local_id == Idx::from_raw(RawIdx::from(idx)) {\n+                                break 'tri variant;\n+                            }\n+                            idx += 1;\n+                        }\n+                    }\n+                    return Arc::new(res);\n+                };\n+                (item_tree[variant].fields.clone(), item_tree, krate)\n+            }\n+            VariantId::StructId(it) => {\n+                let loc = it.lookup(db);\n+                let krate = loc.container.krate;\n+                let item_tree = loc.id.item_tree(db);\n+                let struct_ = &item_tree[loc.id.value];\n+                (struct_.fields.clone(), item_tree, krate)\n+            }\n+            VariantId::UnionId(it) => {\n+                let loc = it.lookup(db);\n+                let krate = loc.container.krate;\n+                let item_tree = loc.id.item_tree(db);\n+                let union_ = &item_tree[loc.id.value];\n+                (union_.fields.clone(), item_tree, krate)\n+            }\n+        };\n \n-            res.insert(id, attrs);\n+        let fields = match fields {\n+            Fields::Record(fields) | Fields::Tuple(fields) => fields,\n+            Fields::Unit => return Arc::new(res),\n+        };\n+\n+        let cfg_options = &crate_graph[krate].cfg_options;\n+\n+        let mut idx = 0;\n+        for field in fields {\n+            let attrs = item_tree.attrs(db, krate, field.into());\n+            if attrs.is_cfg_enabled(cfg_options) {\n+                res.insert(Idx::from_raw(RawIdx::from(idx)), attrs);\n+                idx += 1;\n+            }\n         }\n \n         Arc::new(res)"}]}