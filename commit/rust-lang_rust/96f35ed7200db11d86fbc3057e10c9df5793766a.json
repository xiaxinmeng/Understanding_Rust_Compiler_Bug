{"sha": "96f35ed7200db11d86fbc3057e10c9df5793766a", "node_id": "C_kwDOAAsO6NoAKDk2ZjM1ZWQ3MjAwZGIxMWQ4NmZiYzMwNTdlMTBjOWRmNTc5Mzc2NmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-21T18:00:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-21T18:00:14Z"}, "message": "Rollup merge of #109415 - nnethercote:refactor-handle_missing_lit, r=petrochenkov\n\nRefactor `handle_missing_lit`.\n\nA small code readability improvement.\n\nr? ```@petrochenkov```", "tree": {"sha": "c80c2b6181f24a74223c84f46b3f36e1656913cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c80c2b6181f24a74223c84f46b3f36e1656913cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96f35ed7200db11d86fbc3057e10c9df5793766a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkGfCuCRBK7hj4Ov3rIwAAULsIAEK/WPxlx/DfNxV5pzdc7zd3\nEgKVbj5MPZWhwPlk/M6zTaMmKOnzfW4Sx3g3Be5O7OTu9NPqdTdUFDagOVMUOvWP\n7oC5TxlatQq9K7PsAyZtpAIlk3F1S2bar9DILH72dyyMicaDVZctWnPu3XO01GN2\nxLuFzBQgiMUOGR44jJEwRoBV9hZ1UOCG22OA5xSoPvMj06zbfDwuxGmjIa0K7Qqx\n8A/vpAwAVWrGg/gp9Zj6ekWeKSEmC3fJd923YEMnjt75caMZExhJaNLlnNmwkQgq\nmmrENDrpdFZRs9M9Ir86MimioUmTcpETiG4WRVLhxRY4131sZ4mA98zBl8wHg3g=\n=AOOQ\n-----END PGP SIGNATURE-----\n", "payload": "tree c80c2b6181f24a74223c84f46b3f36e1656913cd\nparent 25b062d586118b2c58e151ed4f0aa467271b03d9\nparent 93eeb127241928a2c64b0bd8c81d5ed859b864aa\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679421614 +0100\ncommitter GitHub <noreply@github.com> 1679421614 +0100\n\nRollup merge of #109415 - nnethercote:refactor-handle_missing_lit, r=petrochenkov\n\nRefactor `handle_missing_lit`.\n\nA small code readability improvement.\n\nr? ```@petrochenkov```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96f35ed7200db11d86fbc3057e10c9df5793766a", "html_url": "https://github.com/rust-lang/rust/commit/96f35ed7200db11d86fbc3057e10c9df5793766a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96f35ed7200db11d86fbc3057e10c9df5793766a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25b062d586118b2c58e151ed4f0aa467271b03d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/25b062d586118b2c58e151ed4f0aa467271b03d9", "html_url": "https://github.com/rust-lang/rust/commit/25b062d586118b2c58e151ed4f0aa467271b03d9"}, {"sha": "93eeb127241928a2c64b0bd8c81d5ed859b864aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/93eeb127241928a2c64b0bd8c81d5ed859b864aa", "html_url": "https://github.com/rust-lang/rust/commit/93eeb127241928a2c64b0bd8c81d5ed859b864aa"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "8b69b3cb03683fd34beb71478b34ca44e2fec322", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/96f35ed7200db11d86fbc3057e10c9df5793766a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f35ed7200db11d86fbc3057e10c9df5793766a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=96f35ed7200db11d86fbc3057e10c9df5793766a", "patch": "@@ -1843,20 +1843,14 @@ impl<'a> Parser<'a> {\n         &mut self,\n         mk_lit_char: impl FnOnce(Symbol, Span) -> L,\n     ) -> PResult<'a, L> {\n-        if let token::Interpolated(inner) = &self.token.kind {\n-            let expr = match inner.as_ref() {\n-                token::NtExpr(expr) => Some(expr),\n-                token::NtLiteral(expr) => Some(expr),\n-                _ => None,\n-            };\n-            if let Some(expr) = expr {\n-                if matches!(expr.kind, ExprKind::Err) {\n-                    let mut err = errors::InvalidInterpolatedExpression { span: self.token.span }\n-                        .into_diagnostic(&self.sess.span_diagnostic);\n-                    err.downgrade_to_delayed_bug();\n-                    return Err(err);\n-                }\n-            }\n+        if let token::Interpolated(nt) = &self.token.kind\n+            && let token::NtExpr(e) | token::NtLiteral(e) = &**nt\n+            && matches!(e.kind, ExprKind::Err)\n+        {\n+            let mut err = errors::InvalidInterpolatedExpression { span: self.token.span }\n+                .into_diagnostic(&self.sess.span_diagnostic);\n+            err.downgrade_to_delayed_bug();\n+            return Err(err);\n         }\n         let token = self.token.clone();\n         let err = |self_: &Self| {"}]}