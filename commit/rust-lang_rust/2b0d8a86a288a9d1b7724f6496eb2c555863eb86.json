{"sha": "2b0d8a86a288a9d1b7724f6496eb2c555863eb86", "node_id": "C_kwDOAAsO6NoAKDJiMGQ4YTg2YTI4OGE5ZDFiNzcyNGY2NDk2ZWIyYzU1NTg2M2ViODY", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2022-01-14T09:25:45Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2022-01-14T09:25:45Z"}, "message": "fix warnings", "tree": {"sha": "f1627e549c61972eb5de7e33193abcf3d31de42e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1627e549c61972eb5de7e33193abcf3d31de42e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b0d8a86a288a9d1b7724f6496eb2c555863eb86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b0d8a86a288a9d1b7724f6496eb2c555863eb86", "html_url": "https://github.com/rust-lang/rust/commit/2b0d8a86a288a9d1b7724f6496eb2c555863eb86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b0d8a86a288a9d1b7724f6496eb2c555863eb86/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "343b0ccfb9e7dd341c1badbb9fb4583ceba85fd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/343b0ccfb9e7dd341c1badbb9fb4583ceba85fd4", "html_url": "https://github.com/rust-lang/rust/commit/343b0ccfb9e7dd341c1badbb9fb4583ceba85fd4"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "f5bf6de21442c2a5623bf37e3c7c0e117b9675c7", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b0d8a86a288a9d1b7724f6496eb2c555863eb86/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0d8a86a288a9d1b7724f6496eb2c555863eb86/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=2b0d8a86a288a9d1b7724f6496eb2c555863eb86", "patch": "@@ -7,7 +7,7 @@ mod topologic_sort;\n use hir::db::DefDatabase;\n use ide_db::base_db::{\n     salsa::{Database, ParallelDatabase, Snapshot},\n-    Cancelled, CrateGraph, CrateId, SourceDatabase, SourceDatabaseExt,\n+    CrateGraph, CrateId, SourceDatabase, SourceDatabaseExt,\n };\n use rustc_hash::{FxHashMap, FxHashSet};\n \n@@ -104,7 +104,6 @@ where\n \n         let crates_total = crates_to_prime.len();\n         let mut crates_done = 0;\n-\n         let mut crates_currently_indexing =\n             FxHashMap::with_capacity_and_hasher(num_worker_threads as _, Default::default());\n "}, {"sha": "859c454283bac7fe667a933826fa76c335db4694", "filename": "crates/ide/src/prime_caches/topologic_sort.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2b0d8a86a288a9d1b7724f6496eb2c555863eb86/crates%2Fide%2Fsrc%2Fprime_caches%2Ftopologic_sort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0d8a86a288a9d1b7724f6496eb2c555863eb86/crates%2Fide%2Fsrc%2Fprime_caches%2Ftopologic_sort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches%2Ftopologic_sort.rs?ref=2b0d8a86a288a9d1b7724f6496eb2c555863eb86", "patch": "@@ -2,7 +2,7 @@ use std::{collections::VecDeque, hash::Hash};\n \n use rustc_hash::FxHashMap;\n \n-pub struct TopologicSortIterBuilder<T> {\n+pub(crate) struct TopologicSortIterBuilder<T> {\n     nodes: FxHashMap<T, Entry<T>>,\n }\n \n@@ -18,7 +18,7 @@ where\n         self.nodes.entry(item).or_default()\n     }\n \n-    pub fn add(&mut self, item: T, predecessors: impl IntoIterator<Item = T>) {\n+    pub(crate) fn add(&mut self, item: T, predecessors: impl IntoIterator<Item = T>) {\n         let mut num_predecessors = 0;\n \n         for predecessor in predecessors.into_iter() {\n@@ -30,7 +30,7 @@ where\n         entry.num_predecessors += num_predecessors;\n     }\n \n-    pub fn build(self) -> TopologicalSortIter<T> {\n+    pub(crate) fn build(self) -> TopologicalSortIter<T> {\n         let ready = self\n             .nodes\n             .iter()\n@@ -43,7 +43,7 @@ where\n     }\n }\n \n-pub struct TopologicalSortIter<T> {\n+pub(crate) struct TopologicalSortIter<T> {\n     ready: VecDeque<T>,\n     nodes: FxHashMap<T, Entry<T>>,\n }\n@@ -52,19 +52,19 @@ impl<T> TopologicalSortIter<T>\n where\n     T: Copy + Eq + PartialEq + Hash,\n {\n-    pub fn builder() -> TopologicSortIterBuilder<T> {\n+    pub(crate) fn builder() -> TopologicSortIterBuilder<T> {\n         TopologicSortIterBuilder::new()\n     }\n \n-    pub fn len(&self) -> usize {\n+    pub(crate) fn len(&self) -> usize {\n         self.nodes.len()\n     }\n \n-    pub fn is_empty(&self) -> bool {\n+    pub(crate) fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n \n-    pub fn mark_done(&mut self, item: T) {\n+    pub(crate) fn mark_done(&mut self, item: T) {\n         let entry = self.nodes.remove(&item).expect(\"invariant: unknown item marked as done\");\n \n         for successor in entry.successors {"}]}