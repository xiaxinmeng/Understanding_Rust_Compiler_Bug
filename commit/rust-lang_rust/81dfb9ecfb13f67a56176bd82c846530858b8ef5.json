{"sha": "81dfb9ecfb13f67a56176bd82c846530858b8ef5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZGZiOWVjZmIxM2Y2N2E1NjE3NmJkODJjODQ2NTMwODU4YjhlZjU=", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-04-04T12:21:02Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-04-04T12:25:05Z"}, "message": "Check path imports per module", "tree": {"sha": "790c7225567734582589c024322b30a79fe63374", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/790c7225567734582589c024322b30a79fe63374"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81dfb9ecfb13f67a56176bd82c846530858b8ef5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81dfb9ecfb13f67a56176bd82c846530858b8ef5", "html_url": "https://github.com/rust-lang/rust/commit/81dfb9ecfb13f67a56176bd82c846530858b8ef5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81dfb9ecfb13f67a56176bd82c846530858b8ef5/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6985d13a9783bb7181b6c43e83465e7630e48ec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6985d13a9783bb7181b6c43e83465e7630e48ec2", "html_url": "https://github.com/rust-lang/rust/commit/6985d13a9783bb7181b6c43e83465e7630e48ec2"}], "stats": {"total": 178, "additions": 96, "deletions": 82}, "files": [{"sha": "f013613119cf198e48a21f9fbe4722ea0df81861", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81dfb9ecfb13f67a56176bd82c846530858b8ef5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81dfb9ecfb13f67a56176bd82c846530858b8ef5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=81dfb9ecfb13f67a56176bd82c846530858b8ef5", "patch": "@@ -1232,7 +1232,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box as_conversions::AsConversions);\n     store.register_late_pass(|| box let_underscore::LetUnderscore);\n     store.register_late_pass(|| box atomic_ordering::AtomicOrdering);\n-    store.register_early_pass(|| box single_component_path_imports::SingleComponentPathImports::default());\n+    store.register_early_pass(|| box single_component_path_imports::SingleComponentPathImports);\n     let max_fn_params_bools = conf.max_fn_params_bools;\n     let max_struct_bools = conf.max_struct_bools;\n     store.register_early_pass(move || box excessive_bools::ExcessiveBools::new(max_struct_bools, max_fn_params_bools));"}, {"sha": "adf0d7998f808623ff4b3faebc8b3dabe32bf65f", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 75, "deletions": 75, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/81dfb9ecfb13f67a56176bd82c846530858b8ef5/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81dfb9ecfb13f67a56176bd82c846530858b8ef5/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=81dfb9ecfb13f67a56176bd82c846530858b8ef5", "patch": "@@ -1,12 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::in_macro;\n-use rustc_ast::{Crate, Item, ItemKind, ModKind, UseTreeKind};\n+use rustc_ast::{ptr::P, Crate, Item, ItemKind, ModKind, UseTreeKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::edition::Edition;\n-use rustc_span::symbol::kw;\n-use rustc_span::{Span, Symbol};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{edition::Edition, symbol::kw, Span, Symbol};\n \n declare_clippy_lint! {\n     /// **What it does:** Checking for imports with single component use path.\n@@ -36,94 +34,96 @@ declare_clippy_lint! {\n     \"imports with single component path are redundant\"\n }\n \n-#[derive(Default)]\n-pub struct SingleComponentPathImports {\n-    /// keep track of imports reused with `self` keyword,\n-    /// such as `self::crypto_hash` in the example below\n-    ///\n-    /// ```rust,ignore\n-    /// use self::crypto_hash::{Algorithm, Hasher};\n-    /// ```\n-    imports_reused_with_self: Vec<Symbol>,\n-    /// keep track of single use statements\n-    /// such as `crypto_hash` in the example below\n-    ///\n-    /// ```rust,ignore\n-    /// use crypto_hash;\n-    /// ```\n-    single_use_usages: Vec<(Symbol, Span)>,\n-}\n-\n-impl_lint_pass!(SingleComponentPathImports => [SINGLE_COMPONENT_PATH_IMPORTS]);\n+declare_lint_pass!(SingleComponentPathImports => [SINGLE_COMPONENT_PATH_IMPORTS]);\n \n impl EarlyLintPass for SingleComponentPathImports {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &Crate) {\n         if cx.sess.opts.edition < Edition::Edition2018 {\n             return;\n         }\n-        for item in &krate.items {\n-            self.track_uses(&item);\n-        }\n-        for single_use in &self.single_use_usages {\n-            if !self.imports_reused_with_self.contains(&single_use.0) {\n-                span_lint_and_sugg(\n-                    cx,\n-                    SINGLE_COMPONENT_PATH_IMPORTS,\n-                    single_use.1,\n-                    \"this import is redundant\",\n-                    \"remove it entirely\",\n-                    String::new(),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-        }\n+        check_mod(cx, &krate.items);\n     }\n }\n \n-impl SingleComponentPathImports {\n-    fn track_uses(&mut self, item: &Item) {\n-        if in_macro(item.span) || item.vis.kind.is_pub() {\n-            return;\n+fn check_mod(cx: &EarlyContext<'_>, items: &[P<Item>]) {\n+    // keep track of imports reused with `self` keyword,\n+    // such as `self::crypto_hash` in the example below\n+    // ```rust,ignore\n+    // use self::crypto_hash::{Algorithm, Hasher};\n+    // ```\n+    let mut imports_reused_with_self = Vec::new();\n+\n+    // keep track of single use statements\n+    // such as `crypto_hash` in the example below\n+    // ```rust,ignore\n+    // use crypto_hash;\n+    // ```\n+    let mut single_use_usages = Vec::new();\n+\n+    for item in items {\n+        track_uses(cx, &item, &mut imports_reused_with_self, &mut single_use_usages);\n+    }\n+\n+    for single_use in &single_use_usages {\n+        if !imports_reused_with_self.contains(&single_use.0) {\n+            span_lint_and_sugg(\n+                cx,\n+                SINGLE_COMPONENT_PATH_IMPORTS,\n+                single_use.1,\n+                \"this import is redundant\",\n+                \"remove it entirely\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            );\n         }\n+    }\n+}\n+\n+fn track_uses(\n+    cx: &EarlyContext<'_>,\n+    item: &Item,\n+    imports_reused_with_self: &mut Vec<Symbol>,\n+    single_use_usages: &mut Vec<(Symbol, Span)>,\n+) {\n+    if in_macro(item.span) || item.vis.kind.is_pub() {\n+        return;\n+    }\n+\n+    match &item.kind {\n+        ItemKind::Mod(_, ModKind::Loaded(ref items, ..)) => {\n+            check_mod(cx, &items);\n+        },\n+        ItemKind::Use(use_tree) => {\n+            let segments = &use_tree.prefix.segments;\n \n-        match &item.kind {\n-            ItemKind::Mod(_, ModKind::Loaded(ref items, ..)) => {\n-                for item in items.iter() {\n-                    self.track_uses(&item);\n+            // keep track of `use some_module;` usages\n+            if segments.len() == 1 {\n+                if let UseTreeKind::Simple(None, _, _) = use_tree.kind {\n+                    let ident = &segments[0].ident;\n+                    single_use_usages.push((ident.name, item.span));\n                 }\n-            },\n-            ItemKind::Use(use_tree) => {\n-                let segments = &use_tree.prefix.segments;\n+                return;\n+            }\n \n-                // keep track of `use some_module;` usages\n-                if segments.len() == 1 {\n-                    if let UseTreeKind::Simple(None, _, _) = use_tree.kind {\n-                        let ident = &segments[0].ident;\n-                        self.single_use_usages.push((ident.name, item.span));\n-                    }\n+            // keep track of `use self::some_module` usages\n+            if segments[0].ident.name == kw::SelfLower {\n+                // simple case such as `use self::module::SomeStruct`\n+                if segments.len() > 1 {\n+                    imports_reused_with_self.push(segments[1].ident.name);\n                     return;\n                 }\n \n-                // keep track of `use self::some_module` usages\n-                if segments[0].ident.name == kw::SelfLower {\n-                    // simple case such as `use self::module::SomeStruct`\n-                    if segments.len() > 1 {\n-                        self.imports_reused_with_self.push(segments[1].ident.name);\n-                        return;\n-                    }\n-\n-                    // nested case such as `use self::{module1::Struct1, module2::Struct2}`\n-                    if let UseTreeKind::Nested(trees) = &use_tree.kind {\n-                        for tree in trees {\n-                            let segments = &tree.0.prefix.segments;\n-                            if !segments.is_empty() {\n-                                self.imports_reused_with_self.push(segments[0].ident.name);\n-                            }\n+                // nested case such as `use self::{module1::Struct1, module2::Struct2}`\n+                if let UseTreeKind::Nested(trees) = &use_tree.kind {\n+                    for tree in trees {\n+                        let segments = &tree.0.prefix.segments;\n+                        if !segments.is_empty() {\n+                            imports_reused_with_self.push(segments[0].ident.name);\n                         }\n                     }\n                 }\n-            },\n-            _ => {},\n-        }\n+            }\n+        },\n+        _ => {},\n     }\n }"}, {"sha": "f66b445b7b6a35249600338185df6d6bb7774bb6", "filename": "tests/ui/single_component_path_imports.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81dfb9ecfb13f67a56176bd82c846530858b8ef5/tests%2Fui%2Fsingle_component_path_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/81dfb9ecfb13f67a56176bd82c846530858b8ef5/tests%2Fui%2Fsingle_component_path_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports.fixed?ref=81dfb9ecfb13f67a56176bd82c846530858b8ef5", "patch": "@@ -25,3 +25,10 @@ mod hello_mod {\n     #[allow(dead_code)]\n     fn hello_mod() {}\n }\n+\n+mod hi_mod {\n+    use self::regex::{Regex, RegexSet};\n+    use regex;\n+    #[allow(dead_code)]\n+    fn hi_mod() {}\n+}"}, {"sha": "09d4865859584ed792063e9e6bb510a1b679c012", "filename": "tests/ui/single_component_path_imports.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81dfb9ecfb13f67a56176bd82c846530858b8ef5/tests%2Fui%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81dfb9ecfb13f67a56176bd82c846530858b8ef5/tests%2Fui%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports.rs?ref=81dfb9ecfb13f67a56176bd82c846530858b8ef5", "patch": "@@ -25,3 +25,10 @@ mod hello_mod {\n     #[allow(dead_code)]\n     fn hello_mod() {}\n }\n+\n+mod hi_mod {\n+    use self::regex::{Regex, RegexSet};\n+    use regex;\n+    #[allow(dead_code)]\n+    fn hi_mod() {}\n+}"}, {"sha": "7005fa8f125d36255c12bf6c8b93cf6644f64eba", "filename": "tests/ui/single_component_path_imports.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81dfb9ecfb13f67a56176bd82c846530858b8ef5/tests%2Fui%2Fsingle_component_path_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81dfb9ecfb13f67a56176bd82c846530858b8ef5/tests%2Fui%2Fsingle_component_path_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports.stderr?ref=81dfb9ecfb13f67a56176bd82c846530858b8ef5", "patch": "@@ -1,16 +1,16 @@\n error: this import is redundant\n-  --> $DIR/single_component_path_imports.rs:6:1\n+  --> $DIR/single_component_path_imports.rs:24:5\n    |\n-LL | use regex;\n-   | ^^^^^^^^^^ help: remove it entirely\n+LL |     use regex;\n+   |     ^^^^^^^^^^ help: remove it entirely\n    |\n    = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n \n error: this import is redundant\n-  --> $DIR/single_component_path_imports.rs:24:5\n+  --> $DIR/single_component_path_imports.rs:6:1\n    |\n-LL |     use regex;\n-   |     ^^^^^^^^^^ help: remove it entirely\n+LL | use regex;\n+   | ^^^^^^^^^^ help: remove it entirely\n \n error: aborting due to 2 previous errors\n "}]}