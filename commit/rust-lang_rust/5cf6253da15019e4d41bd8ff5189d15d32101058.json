{"sha": "5cf6253da15019e4d41bd8ff5189d15d32101058", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZjYyNTNkYTE1MDE5ZTRkNDFiZDhmZjUxODlkMTVkMzIxMDEwNTg=", "commit": {"author": {"name": "Chris Buchholz", "email": "chris@chrisbuchholz.me", "date": "2015-12-14T17:42:24Z"}, "committer": {"name": "Chris Buchholz", "email": "chris@chrisbuchholz.me", "date": "2015-12-14T17:42:24Z"}, "message": "make scan() usage more explanatory", "tree": {"sha": "eeaeee52cb65e5a2b92e70c412717ed80879666b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeaeee52cb65e5a2b92e70c412717ed80879666b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cf6253da15019e4d41bd8ff5189d15d32101058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf6253da15019e4d41bd8ff5189d15d32101058", "html_url": "https://github.com/rust-lang/rust/commit/5cf6253da15019e4d41bd8ff5189d15d32101058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cf6253da15019e4d41bd8ff5189d15d32101058/comments", "author": null, "committer": null, "parents": [{"sha": "6b3a3f270219819f8f98c2b6807ff70b92a941ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b3a3f270219819f8f98c2b6807ff70b92a941ac", "html_url": "https://github.com/rust-lang/rust/commit/6b3a3f270219819f8f98c2b6807ff70b92a941ac"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "4baeec9f754b0046eace9f92709058a6dc3e4cb8", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5cf6253da15019e4d41bd8ff5189d15d32101058/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf6253da15019e4d41bd8ff5189d15d32101058/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=5cf6253da15019e4d41bd8ff5189d15d32101058", "patch": "@@ -1113,16 +1113,22 @@ pub trait Iterator {\n         Take{iter: self, n: n}\n     }\n \n-    /// An iterator similar to `fold()`, with internal state.\n-    ///\n-    /// `scan()` accumulates a final value, similar to [`fold()`], but instead\n-    /// of passing along an accumulator, it maintains the accumulator internally.\n+    /// An iterator adaptor similar to [`fold()`] but different because it holds\n+    /// internal state and produces a new iterator.\n     ///\n     /// [`fold()`]: #method.fold\n     ///\n-    /// On each iteraton of `scan()`, you can assign to the internal state, and\n-    /// a mutable reference to the state is passed as the first argument to the\n-    /// closure, allowing you to modify it on each iteration.\n+    /// `scan()` takes two arguments: an initial value which seeds the internal\n+    /// state, and a closure with two arguments, the first being a mutable\n+    /// reference to the internal state and the second an iterator element.\n+    /// The closure can assign to the internal state to share state between\n+    /// iterations.\n+    ///\n+    /// On iteration, the closure will be applied to each element of the\n+    /// iterator and the return value from the closure, an [`Option`], is\n+    /// yielded by the iterator.\n+    ///\n+    /// [`Option`]: ../option/enum.Option.html\n     ///\n     /// # Examples\n     ///"}]}