{"sha": "342251cb64dcd048c35e668a54c2f5f7ff1a3ad6", "node_id": "C_kwDOAAsO6NoAKDM0MjI1MWNiNjRkY2QwNDhjMzVlNjY4YTU0YzJmNWY3ZmYxYTNhZDY", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2022-10-18T07:48:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-20T20:19:06Z"}, "message": "add test for init once", "tree": {"sha": "aa746b3d1cb7c12e39af4bda58cc50c1f4f3ccb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa746b3d1cb7c12e39af4bda58cc50c1f4f3ccb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/342251cb64dcd048c35e668a54c2f5f7ff1a3ad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/342251cb64dcd048c35e668a54c2f5f7ff1a3ad6", "html_url": "https://github.com/rust-lang/rust/commit/342251cb64dcd048c35e668a54c2f5f7ff1a3ad6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/342251cb64dcd048c35e668a54c2f5f7ff1a3ad6/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3244c117f8b17c27203a625c5b9e3b281ea5debf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3244c117f8b17c27203a625c5b9e3b281ea5debf", "html_url": "https://github.com/rust-lang/rust/commit/3244c117f8b17c27203a625c5b9e3b281ea5debf"}], "stats": {"total": 144, "additions": 144, "deletions": 0}, "files": [{"sha": "d3c72c3d028cf70e6b4da81aaa88f3a0226e6169", "filename": "src/tools/miri/tests/pass/concurrency/windows_init_once.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/342251cb64dcd048c35e668a54c2f5f7ff1a3ad6/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_init_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342251cb64dcd048c35e668a54c2f5f7ff1a3ad6/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_init_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_init_once.rs?ref=342251cb64dcd048c35e668a54c2f5f7ff1a3ad6", "patch": "@@ -0,0 +1,138 @@\n+//@only-target-windows: Uses win32 api functions\n+// We are making scheduler assumptions here.\n+//@compile-flags: -Zmiri-preemption-rate=0\n+\n+use std::ffi::c_void;\n+use std::ptr::null_mut;\n+use std::thread;\n+\n+#[derive(Copy, Clone)]\n+struct SendPtr<T>(*mut T);\n+\n+unsafe impl<T> Send for SendPtr<T> {}\n+\n+extern \"system\" {\n+    fn InitOnceBeginInitialize(\n+        init: *mut *mut c_void,\n+        flags: u32,\n+        pending: *mut i32,\n+        context: *mut c_void,\n+    ) -> i32;\n+\n+    fn InitOnceComplete(init: *mut *mut c_void, flags: u32, context: *mut c_void) -> i32;\n+}\n+\n+const TRUE: i32 = 1;\n+const FALSE: i32 = 0;\n+\n+const INIT_ONCE_INIT_FAILED: u32 = 4;\n+\n+fn single_thread() {\n+    let mut init_once = null_mut();\n+    let mut pending = 0;\n+\n+    unsafe {\n+        assert_eq!(InitOnceBeginInitialize(&mut init_once, 0, &mut pending, null_mut()), TRUE);\n+        assert_eq!(pending, TRUE);\n+\n+        assert_eq!(InitOnceComplete(&mut init_once, 0, null_mut()), TRUE);\n+\n+        assert_eq!(InitOnceBeginInitialize(&mut init_once, 0, &mut pending, null_mut()), TRUE);\n+        assert_eq!(pending, FALSE);\n+    }\n+\n+    let mut init_once = null_mut();\n+\n+    unsafe {\n+        assert_eq!(InitOnceBeginInitialize(&mut init_once, 0, &mut pending, null_mut()), TRUE);\n+        assert_eq!(pending, TRUE);\n+\n+        assert_eq!(InitOnceComplete(&mut init_once, INIT_ONCE_INIT_FAILED, null_mut()), TRUE);\n+\n+        assert_eq!(InitOnceBeginInitialize(&mut init_once, 0, &mut pending, null_mut()), TRUE);\n+        assert_eq!(pending, TRUE);\n+    }\n+}\n+\n+fn block_until_complete() {\n+    let mut init_once = null_mut();\n+    let mut pending = 0;\n+\n+    unsafe {\n+        assert_eq!(InitOnceBeginInitialize(&mut init_once, 0, &mut pending, null_mut()), TRUE);\n+        assert_eq!(pending, TRUE);\n+    }\n+\n+    let init_once_ptr = SendPtr(&mut init_once);\n+\n+    let waiter = move || unsafe {\n+        let mut pending = 0;\n+\n+        assert_eq!(InitOnceBeginInitialize(init_once_ptr.0, 0, &mut pending, null_mut()), TRUE);\n+        assert_eq!(pending, FALSE);\n+\n+        println!(\"finished waiting for initialization\");\n+    };\n+\n+    let waiter1 = thread::spawn(waiter);\n+    let waiter2 = thread::spawn(waiter);\n+\n+    // this yield ensures `waiter1` & `waiter2` are blocked on the main thread\n+    thread::yield_now();\n+\n+    println!(\"completing initialization\");\n+\n+    unsafe {\n+        assert_eq!(InitOnceComplete(init_once_ptr.0, 0, null_mut()), TRUE);\n+    }\n+\n+    waiter1.join().unwrap();\n+    waiter2.join().unwrap();\n+}\n+\n+fn retry_on_fail() {\n+    let mut init_once = null_mut();\n+    let mut pending = 0;\n+\n+    unsafe {\n+        assert_eq!(InitOnceBeginInitialize(&mut init_once, 0, &mut pending, null_mut()), TRUE);\n+        assert_eq!(pending, TRUE);\n+    }\n+\n+    let init_once_ptr = SendPtr(&mut init_once);\n+\n+    let waiter = move || unsafe {\n+        let mut pending = 0;\n+\n+        assert_eq!(InitOnceBeginInitialize(init_once_ptr.0, 0, &mut pending, null_mut()), TRUE);\n+\n+        if pending == 1 {\n+            println!(\"retrying initialization\");\n+\n+            assert_eq!(InitOnceComplete(init_once_ptr.0, 0, null_mut()), TRUE);\n+        } else {\n+            println!(\"finished waiting for initialization\");\n+        }\n+    };\n+\n+    let waiter1 = thread::spawn(waiter);\n+    let waiter2 = thread::spawn(waiter);\n+\n+    // this yield ensures `waiter1` & `waiter2` are blocked on the main thread\n+    thread::yield_now();\n+\n+    println!(\"failing initialization\");\n+\n+    unsafe {\n+        assert_eq!(InitOnceComplete(init_once_ptr.0, INIT_ONCE_INIT_FAILED, null_mut()), TRUE);\n+    }\n+\n+    waiter1.join().unwrap();\n+    waiter2.join().unwrap();\n+}\n+\n+fn main() {\n+    single_thread();\n+    block_until_complete();\n+    retry_on_fail();\n+}"}, {"sha": "f3d5aad8edce24ea33735f11e88daf70663bdbfa", "filename": "src/tools/miri/tests/pass/concurrency/windows_init_once.stdout", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/342251cb64dcd048c35e668a54c2f5f7ff1a3ad6/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_init_once.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/342251cb64dcd048c35e668a54c2f5f7ff1a3ad6/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_init_once.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_init_once.stdout?ref=342251cb64dcd048c35e668a54c2f5f7ff1a3ad6", "patch": "@@ -0,0 +1,6 @@\n+completing initialization\n+finished waiting for initialization\n+finished waiting for initialization\n+failing initialization\n+retrying initialization\n+finished waiting for initialization"}]}