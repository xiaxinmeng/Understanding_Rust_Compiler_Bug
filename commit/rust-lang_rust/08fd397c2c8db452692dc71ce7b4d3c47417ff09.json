{"sha": "08fd397c2c8db452692dc71ce7b4d3c47417ff09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZmQzOTdjMmM4ZGI0NTI2OTJkYzcxY2U3YjRkM2M0NzQxN2ZmMDk=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-11-07T12:44:57Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-11-07T13:04:29Z"}, "message": "Deprecate `into_iter_on_array` lint\n\nThis lint was uplifted/reimplemented by rustc.\nRustup to rust-lang/rust#66017", "tree": {"sha": "a8cc1c95a1b4116125a0ceeda2d517276df1f9f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8cc1c95a1b4116125a0ceeda2d517276df1f9f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08fd397c2c8db452692dc71ce7b4d3c47417ff09", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl3EFl0ACgkQaTCGhp1Q\nZjcyaA/+OrKJEB40/Mm4rPwqzE+BVEWTIp26QB5aXrx7B3cbrkiwMDOtd0wdpT9X\nk8gtwFr6v4+ufvmyRZFZfUY08EovI8DGSi0FDlTOwzI/zC7d5ufOA3UkqvHnjPPm\nTVhwnV3DZrVR1VZ/lTOZqV/GyzeZ8bJg5fEIj37e+txkAk1oVbfTS/HijdX2SUmY\nUMJ9sRkmPBHOjfPbxprHwdCb9F7NVKrOPpBcEuWO7Ep1s6y3j1MejCNX4Fz0jz6l\n2gHcwJl8aGU0mIPO9i96gca3zpERFSWBYb4Jzoe5JhyjpFkIQSdvf2ATDhvGyGOz\n4OV/ssWbKakHaZbNBZ8v8SUZ7cYtTz3n8ROawx9EXR2UIMYo8WOyXmLslqNrk+mO\n8t20/ofFEB9/5yS651A/Jmoo0i6SUdSMMzG8OgCLtx0ln2IKQjqee83c7a3NwkW0\n3ECHFe2rUT9s+TUoxWKf+HvyOvk/RhC5Qhdw38AvmHJXBn24kCHOqeEumfk/JJT2\njCsEeGdYXGGw0E1X5WsQN6ISedOImMU6YaCRdzljJPZmEUp9Mh9GRIB2aBrEvuX0\nhRkAOXMEdP8p08B08xlzf1nexB0j4wvWCmhaD68y51bVg+ReSmcr/5hHu79g81qa\nenxvdWyitokf9GqJOn7MW/Z6ahFqLjETbGhDlvqvFSWZjEhXWog=\n=hW3h\n-----END PGP SIGNATURE-----", "payload": "tree a8cc1c95a1b4116125a0ceeda2d517276df1f9f0\nparent e917b012865d67f05e69da8d741f2be91f4e9a26\nauthor flip1995 <hello@philkrones.com> 1573130697 +0100\ncommitter flip1995 <hello@philkrones.com> 1573131869 +0100\n\nDeprecate `into_iter_on_array` lint\n\nThis lint was uplifted/reimplemented by rustc.\nRustup to rust-lang/rust#66017\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08fd397c2c8db452692dc71ce7b4d3c47417ff09", "html_url": "https://github.com/rust-lang/rust/commit/08fd397c2c8db452692dc71ce7b4d3c47417ff09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08fd397c2c8db452692dc71ce7b4d3c47417ff09/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e917b012865d67f05e69da8d741f2be91f4e9a26", "url": "https://api.github.com/repos/rust-lang/rust/commits/e917b012865d67f05e69da8d741f2be91f4e9a26", "html_url": "https://github.com/rust-lang/rust/commit/e917b012865d67f05e69da8d741f2be91f4e9a26"}], "stats": {"total": 197, "additions": 67, "deletions": 130}, "files": [{"sha": "41b8b4199ec5d3203997092d991919072572244a", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08fd397c2c8db452692dc71ce7b4d3c47417ff09/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/08fd397c2c8db452692dc71ce7b4d3c47417ff09/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=08fd397c2c8db452692dc71ce7b4d3c47417ff09", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 332 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 331 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "2ac5dca8c2ee23ae2c5e7fd458668f4d3d5d7951", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/08fd397c2c8db452692dc71ce7b4d3c47417ff09/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08fd397c2c8db452692dc71ce7b4d3c47417ff09/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=08fd397c2c8db452692dc71ce7b4d3c47417ff09", "patch": "@@ -130,3 +130,12 @@ declare_deprecated_lint! {\n     pub UNUSED_COLLECT,\n     \"`collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\"\n }\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been uplifted to rustc and is now called\n+    /// `array_into_iter`.\n+    pub INTO_ITER_ON_ARRAY,\n+    \"this lint has been uplifted to rustc and is now called `array_into_iter`\"\n+}"}, {"sha": "1bd117dae943951f7d4d6b254f81352168ff9236", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/08fd397c2c8db452692dc71ce7b4d3c47417ff09/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08fd397c2c8db452692dc71ce7b4d3c47417ff09/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=08fd397c2c8db452692dc71ce7b4d3c47417ff09", "patch": "@@ -430,6 +430,10 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         \"clippy::unused_collect\",\n         \"`collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\",\n     );\n+    store.register_removed(\n+        \"clippy::into_iter_on_array\",\n+        \"this lint has been uplifted to rustc and is now called `array_into_iter`\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -584,7 +588,6 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &methods::FLAT_MAP_IDENTITY,\n         &methods::GET_UNWRAP,\n         &methods::INEFFICIENT_TO_STRING,\n-        &methods::INTO_ITER_ON_ARRAY,\n         &methods::INTO_ITER_ON_REF,\n         &methods::ITER_CLONED_COLLECT,\n         &methods::ITER_NTH,\n@@ -1142,7 +1145,6 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&methods::FILTER_NEXT),\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n         LintId::of(&methods::INEFFICIENT_TO_STRING),\n-        LintId::of(&methods::INTO_ITER_ON_ARRAY),\n         LintId::of(&methods::INTO_ITER_ON_REF),\n         LintId::of(&methods::ITER_CLONED_COLLECT),\n         LintId::of(&methods::ITER_NTH),\n@@ -1481,7 +1483,6 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_UNINIT),\n         LintId::of(&methods::CLONE_DOUBLE_REF),\n-        LintId::of(&methods::INTO_ITER_ON_ARRAY),\n         LintId::of(&methods::TEMPORARY_CSTRING_AS_PTR),\n         LintId::of(&methods::UNINIT_ASSUMED_INIT),\n         LintId::of(&minmax::MIN_MAX),"}, {"sha": "c71324ea4725433ae529aa5d42c23bb73c07c707", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/08fd397c2c8db452692dc71ce7b4d3c47417ff09/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08fd397c2c8db452692dc71ce7b4d3c47417ff09/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=08fd397c2c8db452692dc71ce7b4d3c47417ff09", "patch": "@@ -968,34 +968,6 @@ declare_clippy_lint! {\n     \"using `filter_map` when a more succinct alternative exists\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for `into_iter` calls on types which should be replaced by `iter` or\n-    /// `iter_mut`.\n-    ///\n-    /// **Why is this bad?** Arrays and `PathBuf` do not yet have an `into_iter` method which move out\n-    /// their content into an iterator. Auto-referencing resolves the `into_iter` call to its reference\n-    /// instead, like `<&[T; N] as IntoIterator>::into_iter`, which just iterates over item references\n-    /// like calling `iter` would. Furthermore, when the standard library actually\n-    /// [implements the `into_iter` method](https://github.com/rust-lang/rust/issues/25725) which moves\n-    /// the content out of the array, the original use of `into_iter` got inferred with the wrong type\n-    /// and the code will be broken.\n-    ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n-    ///\n-    /// ```rust\n-    /// let _ = [1, 2, 3].into_iter().map(|x| *x).collect::<Vec<u32>>();\n-    /// ```\n-    /// Could be written as:\n-    /// ```rust\n-    /// let _ = [1, 2, 3].iter().map(|x| *x).collect::<Vec<u32>>();\n-    /// ```\n-    pub INTO_ITER_ON_ARRAY,\n-    correctness,\n-    \"using `.into_iter()` on an array\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for `into_iter` calls on references which should be replaced by `iter`\n     /// or `iter_mut`.\n@@ -1133,7 +1105,6 @@ declare_lint_pass!(Methods => [\n     USELESS_ASREF,\n     UNNECESSARY_FOLD,\n     UNNECESSARY_FILTER_MAP,\n-    INTO_ITER_ON_ARRAY,\n     INTO_ITER_ON_REF,\n     SUSPICIOUS_MAP,\n     UNINIT_ASSUMED_INIT,\n@@ -2786,16 +2757,8 @@ fn lint_asref(cx: &LateContext<'_, '_>, expr: &hir::Expr, call_name: &str, as_re\n     }\n }\n \n-fn ty_has_iter_method(\n-    cx: &LateContext<'_, '_>,\n-    self_ref_ty: Ty<'_>,\n-) -> Option<(&'static Lint, &'static str, &'static str)> {\n+fn ty_has_iter_method(cx: &LateContext<'_, '_>, self_ref_ty: Ty<'_>) -> Option<(&'static str, &'static str)> {\n     has_iter_method(cx, self_ref_ty).map(|ty_name| {\n-        let lint = if ty_name == \"array\" || ty_name == \"PathBuf\" {\n-            INTO_ITER_ON_ARRAY\n-        } else {\n-            INTO_ITER_ON_REF\n-        };\n         let mutbl = match self_ref_ty.kind {\n             ty::Ref(_, _, mutbl) => mutbl,\n             _ => unreachable!(),\n@@ -2804,18 +2767,18 @@ fn ty_has_iter_method(\n             hir::MutImmutable => \"iter\",\n             hir::MutMutable => \"iter_mut\",\n         };\n-        (lint, ty_name, method_name)\n+        (ty_name, method_name)\n     })\n }\n \n fn lint_into_iter(cx: &LateContext<'_, '_>, expr: &hir::Expr, self_ref_ty: Ty<'_>, method_span: Span) {\n     if !match_trait_method(cx, expr, &paths::INTO_ITERATOR) {\n         return;\n     }\n-    if let Some((lint, kind, method_name)) = ty_has_iter_method(cx, self_ref_ty) {\n+    if let Some((kind, method_name)) = ty_has_iter_method(cx, self_ref_ty) {\n         span_lint_and_sugg(\n             cx,\n-            lint,\n+            INTO_ITER_ON_REF,\n             method_span,\n             &format!(\n                 \"this .into_iter() call is equivalent to .{}() and will not move the {}\","}, {"sha": "35cbeae39889334bea2a760bc426f8330c6ad505", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/08fd397c2c8db452692dc71ce7b4d3c47417ff09/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08fd397c2c8db452692dc71ce7b4d3c47417ff09/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=08fd397c2c8db452692dc71ce7b4d3c47417ff09", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 332] = [\n+pub const ALL_LINTS: [Lint; 331] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -812,13 +812,6 @@ pub const ALL_LINTS: [Lint; 332] = [\n         deprecation: None,\n         module: \"integer_division\",\n     },\n-    Lint {\n-        name: \"into_iter_on_array\",\n-        group: \"correctness\",\n-        desc: \"using `.into_iter()` on an array\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"into_iter_on_ref\",\n         group: \"style\","}, {"sha": "91d43758ab0a9d74ed2fafc68d71d08b40972f28", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=08fd397c2c8db452692dc71ce7b4d3c47417ff09", "patch": "@@ -5,5 +5,6 @@\n #[warn(clippy::misaligned_transmute)]\n #[warn(clippy::unused_collect)]\n #[warn(clippy::invalid_ref)]\n+#[warn(clippy::into_iter_on_array)]\n \n fn main() {}"}, {"sha": "d353b26e5376dcee02c4790b5664182964c4f69f", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=08fd397c2c8db452692dc71ce7b4d3c47417ff09", "patch": "@@ -42,11 +42,17 @@ error: lint `clippy::invalid_ref` has been removed: `superseded by rustc lint `i\n LL | #[warn(clippy::invalid_ref)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n+error: lint `clippy::into_iter_on_array` has been removed: `this lint has been uplifted to rustc and is now called `array_into_iter``\n+  --> $DIR/deprecated.rs:8:8\n+   |\n+LL | #[warn(clippy::into_iter_on_array)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: lint `clippy::str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n   --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::str_to_string)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "ec5ff1aeeef48950a0d5680061db67cf7443f35c", "filename": "tests/ui/for_loop_fixable.fixed", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Ffor_loop_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Ffor_loop_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.fixed?ref=08fd397c2c8db452692dc71ce7b4d3c47417ff09", "patch": "@@ -31,7 +31,7 @@ impl Unrelated {\n     clippy::cognitive_complexity,\n     clippy::similar_names\n )]\n-#[allow(clippy::many_single_char_names, unused_variables, clippy::into_iter_on_array)]\n+#[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n     const MAX_LEN: usize = 42;\n     let mut vec = vec![1, 2, 3, 4];\n@@ -102,9 +102,6 @@ fn main() {\n     let out_vec = vec![1, 2, 3];\n     for _v in out_vec {}\n \n-    let array = [1, 2, 3];\n-    for _v in &array {}\n-\n     for _v in &vec {} // these are fine\n     for _v in &mut vec {} // these are fine\n "}, {"sha": "2f42ea3ca417e280f9b3ec2b8e73e6093035e899", "filename": "tests/ui/for_loop_fixable.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Ffor_loop_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Ffor_loop_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.rs?ref=08fd397c2c8db452692dc71ce7b4d3c47417ff09", "patch": "@@ -31,7 +31,7 @@ impl Unrelated {\n     clippy::cognitive_complexity,\n     clippy::similar_names\n )]\n-#[allow(clippy::many_single_char_names, unused_variables, clippy::into_iter_on_array)]\n+#[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n     const MAX_LEN: usize = 42;\n     let mut vec = vec![1, 2, 3, 4];\n@@ -102,9 +102,6 @@ fn main() {\n     let out_vec = vec![1, 2, 3];\n     for _v in out_vec.into_iter() {}\n \n-    let array = [1, 2, 3];\n-    for _v in array.into_iter() {}\n-\n     for _v in &vec {} // these are fine\n     for _v in &mut vec {} // these are fine\n "}, {"sha": "485ba1ee7b3aacdc7b3e76c5955b9ca4bd1130fc", "filename": "tests/ui/for_loop_fixable.stderr", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Ffor_loop_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Ffor_loop_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.stderr?ref=08fd397c2c8db452692dc71ce7b4d3c47417ff09", "patch": "@@ -77,64 +77,58 @@ LL |     for _v in out_vec.into_iter() {}\n    = note: `-D clippy::explicit-into-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:106:15\n-   |\n-LL |     for _v in array.into_iter() {}\n-   |               ^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&array`\n-\n-error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:111:15\n+  --> $DIR/for_loop_fixable.rs:108:15\n    |\n LL |     for _v in [1, 2, 3].iter() {}\n    |               ^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[1, 2, 3]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:115:15\n+  --> $DIR/for_loop_fixable.rs:112:15\n    |\n LL |     for _v in [0; 32].iter() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[0; 32]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:120:15\n+  --> $DIR/for_loop_fixable.rs:117:15\n    |\n LL |     for _v in ll.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&ll`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:123:15\n+  --> $DIR/for_loop_fixable.rs:120:15\n    |\n LL |     for _v in vd.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&vd`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:126:15\n+  --> $DIR/for_loop_fixable.rs:123:15\n    |\n LL |     for _v in bh.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bh`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:129:15\n+  --> $DIR/for_loop_fixable.rs:126:15\n    |\n LL |     for _v in hm.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hm`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:132:15\n+  --> $DIR/for_loop_fixable.rs:129:15\n    |\n LL |     for _v in bt.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bt`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:135:15\n+  --> $DIR/for_loop_fixable.rs:132:15\n    |\n LL |     for _v in hs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hs`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:138:15\n+  --> $DIR/for_loop_fixable.rs:135:15\n    |\n LL |     for _v in bs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bs`\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 17 previous errors\n "}, {"sha": "20a93a222829953bdbc7f8e2f69c66aa37b36cf6", "filename": "tests/ui/for_loop_unfixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Ffor_loop_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Ffor_loop_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.rs?ref=08fd397c2c8db452692dc71ce7b4d3c47417ff09", "patch": "@@ -17,7 +17,7 @@\n     unused,\n     dead_code\n )]\n-#[allow(clippy::many_single_char_names, unused_variables, clippy::into_iter_on_array)]\n+#[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n     for i in 5..5 {\n         println!(\"{}\", i);"}, {"sha": "c30d23de3f86921a891dbce97af00cea427cb71d", "filename": "tests/ui/into_iter_on_ref.fixed", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Finto_iter_on_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Finto_iter_on_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.fixed?ref=08fd397c2c8db452692dc71ce7b4d3c47417ff09", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n #![allow(clippy::useless_vec)]\n #![warn(clippy::into_iter_on_ref)]\n-#![deny(clippy::into_iter_on_array)]\n \n struct X;\n use std::collections::*;\n@@ -10,9 +9,7 @@ fn main() {\n     for _ in &[1, 2, 3] {}\n     for _ in vec![X, X] {}\n     for _ in &vec![X, X] {}\n-    for _ in [1, 2, 3].iter() {} //~ ERROR equivalent to .iter()\n \n-    let _ = [1, 2, 3].iter(); //~ ERROR equivalent to .iter()\n     let _ = vec![1, 2, 3].into_iter();\n     let _ = (&vec![1, 2, 3]).iter(); //~ WARN equivalent to .iter()\n     let _ = vec![1, 2, 3].into_boxed_slice().iter(); //~ WARN equivalent to .iter()"}, {"sha": "94bc1689619a297b84116d0efebcc14c7e74f5e1", "filename": "tests/ui/into_iter_on_ref.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Finto_iter_on_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Finto_iter_on_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.rs?ref=08fd397c2c8db452692dc71ce7b4d3c47417ff09", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n #![allow(clippy::useless_vec)]\n #![warn(clippy::into_iter_on_ref)]\n-#![deny(clippy::into_iter_on_array)]\n \n struct X;\n use std::collections::*;\n@@ -10,9 +9,7 @@ fn main() {\n     for _ in &[1, 2, 3] {}\n     for _ in vec![X, X] {}\n     for _ in &vec![X, X] {}\n-    for _ in [1, 2, 3].into_iter() {} //~ ERROR equivalent to .iter()\n \n-    let _ = [1, 2, 3].into_iter(); //~ ERROR equivalent to .iter()\n     let _ = vec![1, 2, 3].into_iter();\n     let _ = (&vec![1, 2, 3]).into_iter(); //~ WARN equivalent to .iter()\n     let _ = vec![1, 2, 3].into_boxed_slice().into_iter(); //~ WARN equivalent to .iter()"}, {"sha": "a5be50f64052712254ac02bcb2cb5187d6c4eb21", "filename": "tests/ui/into_iter_on_ref.stderr", "status": "modified", "additions": 27, "deletions": 45, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Finto_iter_on_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08fd397c2c8db452692dc71ce7b4d3c47417ff09/tests%2Fui%2Finto_iter_on_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.stderr?ref=08fd397c2c8db452692dc71ce7b4d3c47417ff09", "patch": "@@ -1,178 +1,160 @@\n-error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:13:24\n-   |\n-LL |     for _ in [1, 2, 3].into_iter() {} //~ ERROR equivalent to .iter()\n-   |                        ^^^^^^^^^ help: call directly: `iter`\n-   |\n-note: lint level defined here\n-  --> $DIR/into_iter_on_ref.rs:4:9\n-   |\n-LL | #![deny(clippy::into_iter_on_array)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:15:23\n-   |\n-LL |     let _ = [1, 2, 3].into_iter(); //~ ERROR equivalent to .iter()\n-   |                       ^^^^^^^^^ help: call directly: `iter`\n-\n error: this .into_iter() call is equivalent to .iter() and will not move the Vec\n-  --> $DIR/into_iter_on_ref.rs:17:30\n+  --> $DIR/into_iter_on_ref.rs:14:30\n    |\n LL |     let _ = (&vec![1, 2, 3]).into_iter(); //~ WARN equivalent to .iter()\n    |                              ^^^^^^^^^ help: call directly: `iter`\n    |\n    = note: `-D clippy::into-iter-on-ref` implied by `-D warnings`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the slice\n-  --> $DIR/into_iter_on_ref.rs:18:46\n+  --> $DIR/into_iter_on_ref.rs:15:46\n    |\n LL |     let _ = vec![1, 2, 3].into_boxed_slice().into_iter(); //~ WARN equivalent to .iter()\n    |                                              ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the slice\n-  --> $DIR/into_iter_on_ref.rs:19:41\n+  --> $DIR/into_iter_on_ref.rs:16:41\n    |\n LL |     let _ = std::rc::Rc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the slice\n-  --> $DIR/into_iter_on_ref.rs:20:44\n+  --> $DIR/into_iter_on_ref.rs:17:44\n    |\n LL |     let _ = std::sync::Arc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n    |                                            ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:22:32\n+  --> $DIR/into_iter_on_ref.rs:19:32\n    |\n LL |     let _ = (&&&&&&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n    |                                ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:23:36\n+  --> $DIR/into_iter_on_ref.rs:20:36\n    |\n LL |     let _ = (&&&&mut &&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n    |                                    ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:24:40\n+  --> $DIR/into_iter_on_ref.rs:21:40\n    |\n LL |     let _ = (&mut &mut &mut [1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter_mut()\n    |                                        ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Option\n-  --> $DIR/into_iter_on_ref.rs:26:24\n+  --> $DIR/into_iter_on_ref.rs:23:24\n    |\n LL |     let _ = (&Some(4)).into_iter(); //~ WARN equivalent to .iter()\n    |                        ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the Option\n-  --> $DIR/into_iter_on_ref.rs:27:28\n+  --> $DIR/into_iter_on_ref.rs:24:28\n    |\n LL |     let _ = (&mut Some(5)).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                            ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Result\n-  --> $DIR/into_iter_on_ref.rs:28:32\n+  --> $DIR/into_iter_on_ref.rs:25:32\n    |\n LL |     let _ = (&Ok::<_, i32>(6)).into_iter(); //~ WARN equivalent to .iter()\n    |                                ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the Result\n-  --> $DIR/into_iter_on_ref.rs:29:37\n+  --> $DIR/into_iter_on_ref.rs:26:37\n    |\n LL |     let _ = (&mut Err::<i32, _>(7)).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                     ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Vec\n-  --> $DIR/into_iter_on_ref.rs:30:34\n+  --> $DIR/into_iter_on_ref.rs:27:34\n    |\n LL |     let _ = (&Vec::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                  ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the Vec\n-  --> $DIR/into_iter_on_ref.rs:31:38\n+  --> $DIR/into_iter_on_ref.rs:28:38\n    |\n LL |     let _ = (&mut Vec::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                      ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the BTreeMap\n-  --> $DIR/into_iter_on_ref.rs:32:44\n+  --> $DIR/into_iter_on_ref.rs:29:44\n    |\n LL |     let _ = (&BTreeMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                            ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the BTreeMap\n-  --> $DIR/into_iter_on_ref.rs:33:48\n+  --> $DIR/into_iter_on_ref.rs:30:48\n    |\n LL |     let _ = (&mut BTreeMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                                ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the VecDeque\n-  --> $DIR/into_iter_on_ref.rs:34:39\n+  --> $DIR/into_iter_on_ref.rs:31:39\n    |\n LL |     let _ = (&VecDeque::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                       ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the VecDeque\n-  --> $DIR/into_iter_on_ref.rs:35:43\n+  --> $DIR/into_iter_on_ref.rs:32:43\n    |\n LL |     let _ = (&mut VecDeque::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                           ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the LinkedList\n-  --> $DIR/into_iter_on_ref.rs:36:41\n+  --> $DIR/into_iter_on_ref.rs:33:41\n    |\n LL |     let _ = (&LinkedList::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the LinkedList\n-  --> $DIR/into_iter_on_ref.rs:37:45\n+  --> $DIR/into_iter_on_ref.rs:34:45\n    |\n LL |     let _ = (&mut LinkedList::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                             ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the HashMap\n-  --> $DIR/into_iter_on_ref.rs:38:43\n+  --> $DIR/into_iter_on_ref.rs:35:43\n    |\n LL |     let _ = (&HashMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                           ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the HashMap\n-  --> $DIR/into_iter_on_ref.rs:39:47\n+  --> $DIR/into_iter_on_ref.rs:36:47\n    |\n LL |     let _ = (&mut HashMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                               ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the BTreeSet\n-  --> $DIR/into_iter_on_ref.rs:41:39\n+  --> $DIR/into_iter_on_ref.rs:38:39\n    |\n LL |     let _ = (&BTreeSet::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                       ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the BinaryHeap\n-  --> $DIR/into_iter_on_ref.rs:42:41\n+  --> $DIR/into_iter_on_ref.rs:39:41\n    |\n LL |     let _ = (&BinaryHeap::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the HashSet\n-  --> $DIR/into_iter_on_ref.rs:43:38\n+  --> $DIR/into_iter_on_ref.rs:40:38\n    |\n LL |     let _ = (&HashSet::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                      ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Path\n-  --> $DIR/into_iter_on_ref.rs:44:43\n+  --> $DIR/into_iter_on_ref.rs:41:43\n    |\n LL |     let _ = std::path::Path::new(\"12/34\").into_iter(); //~ WARN equivalent to .iter()\n    |                                           ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the PathBuf\n-  --> $DIR/into_iter_on_ref.rs:45:47\n+  --> $DIR/into_iter_on_ref.rs:42:47\n    |\n LL |     let _ = std::path::PathBuf::from(\"12/34\").into_iter(); //~ ERROR equivalent to .iter()\n    |                                               ^^^^^^^^^ help: call directly: `iter`\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 26 previous errors\n "}]}