{"sha": "f3d73865d6ce6989018b3ebee8e199853253bfd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZDczODY1ZDZjZTY5ODkwMThiM2ViZWU4ZTE5OTg1MzI1M2JmZDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-12T12:49:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-12T12:49:30Z"}, "message": "Merge #4855\n\n4855: Use more idiomatic style for lifetimes in generated code r=matklad a=Veetaha\n\n\n\nCo-authored-by: Veetaha <veetaha2@gmail.com>", "tree": {"sha": "a08275bbaa5d4b56b05ba01cd18429f1acb0857e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a08275bbaa5d4b56b05ba01cd18429f1acb0857e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3d73865d6ce6989018b3ebee8e199853253bfd7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe43naCRBK7hj4Ov3rIwAAdHIIAAPbK5gkr11oo/NXiBTdHbdi\nUf+QKsR4T5+pKjVHZJLr8XwPQPn7zgly+cVuekQ1rUOn3hpdlOhXnbx0vzhZM8cV\n6L8cxkcukMhZVcKFJtAbQpDNpqIhckQqSk5gNZKNRYLmd1JC8Ghm2r4tWFAmmvXR\nN23YhRXZ3yfr9SZhgdjgIDq4ePkad0aaVZ+Ml0x8opSyhZV6x7d1loQRFq0jb3hr\niFx7fE/C5ahiPWVldVcgQINtPk4bP3VLq5p/3AQHfpmWo7pYF5e43WPnli1ShQPl\n67yCDfXWcSG2OptrrcTVErXUsdXoRwH9VyhtF5jc08chrl/ixsVHCKuEtS3KQGo=\n=GfG5\n-----END PGP SIGNATURE-----\n", "payload": "tree a08275bbaa5d4b56b05ba01cd18429f1acb0857e\nparent 1906655070f943f70d21fdbe54227d9b4521096b\nparent c514060600ac6787da4bcfa0bbd8b74bb4cf7d18\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591966170 +0000\ncommitter GitHub <noreply@github.com> 1591966170 +0000\n\nMerge #4855\n\n4855: Use more idiomatic style for lifetimes in generated code r=matklad a=Veetaha\n\n\n\nCo-authored-by: Veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d73865d6ce6989018b3ebee8e199853253bfd7", "html_url": "https://github.com/rust-lang/rust/commit/f3d73865d6ce6989018b3ebee8e199853253bfd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3d73865d6ce6989018b3ebee8e199853253bfd7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1906655070f943f70d21fdbe54227d9b4521096b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1906655070f943f70d21fdbe54227d9b4521096b", "html_url": "https://github.com/rust-lang/rust/commit/1906655070f943f70d21fdbe54227d9b4521096b"}, {"sha": "c514060600ac6787da4bcfa0bbd8b74bb4cf7d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/c514060600ac6787da4bcfa0bbd8b74bb4cf7d18", "html_url": "https://github.com/rust-lang/rust/commit/c514060600ac6787da4bcfa0bbd8b74bb4cf7d18"}], "stats": {"total": 286, "additions": 143, "deletions": 143}, "files": [{"sha": "58141da11426579788040106a2395307fdaa58a8", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 137, "deletions": 137, "changes": 274, "blob_url": "https://github.com/rust-lang/rust/blob/f3d73865d6ce6989018b3ebee8e199853253bfd7/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d73865d6ce6989018b3ebee8e199853253bfd7/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=f3d73865d6ce6989018b3ebee8e199853253bfd7", "patch": "@@ -4851,687 +4851,687 @@ impl AstNode for FieldDefList {\n     }\n }\n impl std::fmt::Display for NominalDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for GenericParam {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for GenericArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TypeRef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ModuleItem {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for AssocItem {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ExternItem {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for Expr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for Pat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for RecordInnerPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for AttrInput {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for Stmt {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for FieldDefList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for SourceFile {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for FnDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for RetType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for StructDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for UnionDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for RecordFieldDefList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for RecordFieldDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TupleFieldDefList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TupleFieldDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for EnumDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for EnumVariantList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for EnumVariant {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TraitDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for Module {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ItemList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ConstDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for StaticDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TypeAliasDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ImplDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ParenType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TupleType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for NeverType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for PathType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for PointerType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ArrayType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for SliceType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ReferenceType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for PlaceholderType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for FnPointerType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ForType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ImplTraitType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for DynTraitType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TupleExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ArrayExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ParenExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for PathExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for LambdaExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for IfExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for LoopExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for EffectExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ForExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for WhileExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ContinueExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for BreakExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for Label {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for BlockExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ReturnExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for CallExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for MethodCallExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for IndexExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for FieldExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for AwaitExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TryExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for CastExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for RefExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for PrefixExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for BoxExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for RangeExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for BinExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for Literal {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for MatchExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for MatchArmList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for MatchArm {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for MatchGuard {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for RecordLit {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for RecordFieldList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for RecordField {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for OrPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ParenPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for RefPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for BoxPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for BindPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for PlaceholderPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for DotDotPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for PathPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for SlicePat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for RangePat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for LiteralPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for MacroPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for RecordPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for RecordFieldPatList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for RecordFieldPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TupleStructPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TuplePat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for Visibility {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for Name {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for NameRef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for MacroCall {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for Attr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TokenTree {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TypeParamList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TypeParam {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ConstParam {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for LifetimeParam {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TypeBound {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TypeBoundList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for WherePred {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for WhereClause {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for Abi {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ExprStmt {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for LetStmt {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for Condition {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ParamList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for SelfParam {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for Param {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for UseItem {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for UseTree {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for Alias {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for UseTreeList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ExternCrateItem {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ArgList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for Path {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for PathSegment {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TypeArgList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for TypeArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for AssocTypeArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for LifetimeArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ConstArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for MacroItems {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for MacroStmts {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ExternItemList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for ExternBlock {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for MetaItem {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n impl std::fmt::Display for MacroDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }"}, {"sha": "abadd0b61c6f3dd7f3c8d0a1004e4a5d878c10f0", "filename": "crates/ra_syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3d73865d6ce6989018b3ebee8e199853253bfd7/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d73865d6ce6989018b3ebee8e199853253bfd7/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=f3d73865d6ce6989018b3ebee8e199853253bfd7", "patch": "@@ -11,7 +11,7 @@ pub struct Whitespace {\n     pub(crate) syntax: SyntaxToken,\n }\n impl std::fmt::Display for Whitespace {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(&self.syntax, f)\n     }\n }\n@@ -32,7 +32,7 @@ pub struct Comment {\n     pub(crate) syntax: SyntaxToken,\n }\n impl std::fmt::Display for Comment {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(&self.syntax, f)\n     }\n }\n@@ -53,7 +53,7 @@ pub struct String {\n     pub(crate) syntax: SyntaxToken,\n }\n impl std::fmt::Display for String {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(&self.syntax, f)\n     }\n }\n@@ -74,7 +74,7 @@ pub struct RawString {\n     pub(crate) syntax: SyntaxToken,\n }\n impl std::fmt::Display for RawString {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(&self.syntax, f)\n     }\n }"}, {"sha": "745a25862b6890a2b09a74ad756be5f74a6062d6", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3d73865d6ce6989018b3ebee8e199853253bfd7/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d73865d6ce6989018b3ebee8e199853253bfd7/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=f3d73865d6ce6989018b3ebee8e199853253bfd7", "patch": "@@ -40,7 +40,7 @@ fn generate_tokens(grammar: AstSrc<'_>) -> Result<String> {\n                 pub(crate) syntax: SyntaxToken,\n             }\n             impl std::fmt::Display for #name {\n-                fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n                     std::fmt::Display::fmt(&self.syntax, f)\n                 }\n             }\n@@ -199,7 +199,7 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n         enum_names.chain(node_names.clone()).map(|it| format_ident!(\"{}\", it)).map(|name| {\n             quote! {\n                 impl std::fmt::Display for #name {\n-                    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+                    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n                         std::fmt::Display::fmt(self.syntax(), f)\n                     }\n                 }"}]}