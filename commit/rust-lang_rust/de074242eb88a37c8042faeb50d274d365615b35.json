{"sha": "de074242eb88a37c8042faeb50d274d365615b35", "node_id": "C_kwDOAAsO6NoAKGRlMDc0MjQyZWI4OGEzN2M4MDQyZmFlYjUwZDI3NGQzNjU2MTViMzU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2023-05-20T13:37:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-20T13:37:23Z"}, "message": "Rollup merge of #111450 - compiler-errors:opaque-ty-key, r=oli-obk\n\nUse `OpaqueTypeKey` in query response\n\nMakes it a bit clearer that at least one of the types being returned from a canonical query is an opaque.", "tree": {"sha": "dd06d8258e391dfb3af4895d95039253ce4b6056", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd06d8258e391dfb3af4895d95039253ce4b6056"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de074242eb88a37c8042faeb50d274d365615b35", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkaM0TCRBK7hj4Ov3rIwAA5NgIADU2SZ4cjl1ABTayQtALUb18\nReQXpbnhS50bmboeVELigebxuSKt6PgSnrtAtoRy4Bs5e3bFObnEkp/sC12xhboM\nWObh0WBNXBe0gj69X7EnFfG23ss7vDpfbuO9fTsqzr3QLfXDUURjhgSy2/zbX4UZ\naW7XMg3XNL6rVj8XjCR+K2JBPVDlsse1n8YOtqAF/wZXi1t0Mx8FSZ5s6IKwTCK8\n/H3R6h+EmPvUIdFqf8im9Ccv5LRAsmQstdHOz0mkxyeLz1iHJL6r9nE0QrYB9UB/\nXBiVSUdFjpQWyKxgRomM3iLJSXM2RScQI81cgqPlQHJlwgOizy/liQ8OvBi12iQ=\n=rBDw\n-----END PGP SIGNATURE-----\n", "payload": "tree dd06d8258e391dfb3af4895d95039253ce4b6056\nparent 6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284\nparent 6f27876f62975b9d520f9da7348d8eab15929574\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1684589843 +0200\ncommitter GitHub <noreply@github.com> 1684589843 +0200\n\nRollup merge of #111450 - compiler-errors:opaque-ty-key, r=oli-obk\n\nUse `OpaqueTypeKey` in query response\n\nMakes it a bit clearer that at least one of the types being returned from a canonical query is an opaque.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de074242eb88a37c8042faeb50d274d365615b35", "html_url": "https://github.com/rust-lang/rust/commit/de074242eb88a37c8042faeb50d274d365615b35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de074242eb88a37c8042faeb50d274d365615b35/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "html_url": "https://github.com/rust-lang/rust/commit/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284"}, {"sha": "6f27876f62975b9d520f9da7348d8eab15929574", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f27876f62975b9d520f9da7348d8eab15929574", "html_url": "https://github.com/rust-lang/rust/commit/6f27876f62975b9d520f9da7348d8eab15929574"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "de9afbbcaabbd3f433c6eb8dd47a6b8dd851af3d", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/de074242eb88a37c8042faeb50d274d365615b35/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de074242eb88a37c8042faeb50d274d365615b35/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=de074242eb88a37c8042faeb50d274d365615b35", "patch": "@@ -153,20 +153,22 @@ impl<'tcx> InferCtxt<'tcx> {\n \n     /// Used by the new solver as that one takes the opaque types at the end of a probe\n     /// to deal with multiple candidates without having to recompute them.\n-    pub fn clone_opaque_types_for_query_response(&self) -> Vec<(Ty<'tcx>, Ty<'tcx>)> {\n+    pub fn clone_opaque_types_for_query_response(\n+        &self,\n+    ) -> Vec<(ty::OpaqueTypeKey<'tcx>, Ty<'tcx>)> {\n         self.inner\n             .borrow()\n             .opaque_type_storage\n             .opaque_types\n             .iter()\n-            .map(|(k, v)| (self.tcx.mk_opaque(k.def_id.to_def_id(), k.substs), v.hidden_type.ty))\n+            .map(|(k, v)| (*k, v.hidden_type.ty))\n             .collect()\n     }\n \n-    fn take_opaque_types_for_query_response(&self) -> Vec<(Ty<'tcx>, Ty<'tcx>)> {\n+    fn take_opaque_types_for_query_response(&self) -> Vec<(ty::OpaqueTypeKey<'tcx>, Ty<'tcx>)> {\n         std::mem::take(&mut self.inner.borrow_mut().opaque_type_storage.opaque_types)\n             .into_iter()\n-            .map(|(k, v)| (self.tcx.mk_opaque(k.def_id.to_def_id(), k.substs), v.hidden_type.ty))\n+            .map(|(k, v)| (k, v.hidden_type.ty))\n             .collect()\n     }\n \n@@ -507,8 +509,22 @@ impl<'tcx> InferCtxt<'tcx> {\n             let a = substitute_value(self.tcx, &result_subst, a);\n             let b = substitute_value(self.tcx, &result_subst, b);\n             debug!(?a, ?b, \"constrain opaque type\");\n-            obligations\n-                .extend(self.at(cause, param_env).eq(DefineOpaqueTypes::Yes, a, b)?.obligations);\n+            // We use equate here instead of, for example, just registering the\n+            // opaque type's hidden value directly, because we may be instantiating\n+            // a query response that was canonicalized in an InferCtxt that had\n+            // a different defining anchor. In that case, we may have inferred\n+            // `NonLocalOpaque := LocalOpaque` but can only instantiate it in\n+            // the other direction as `LocalOpaque := NonLocalOpaque`. Using eq\n+            // here allows us to try both directions (in `InferCtxt::handle_opaque_type`).\n+            obligations.extend(\n+                self.at(cause, param_env)\n+                    .eq(\n+                        DefineOpaqueTypes::Yes,\n+                        self.tcx.mk_opaque(a.def_id.to_def_id(), a.substs),\n+                        b,\n+                    )?\n+                    .obligations,\n+            );\n         }\n \n         Ok(InferOk { value: result_subst, obligations })"}, {"sha": "56171314944cc6ba243fc2798e3101947352c074", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de074242eb88a37c8042faeb50d274d365615b35/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de074242eb88a37c8042faeb50d274d365615b35/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=de074242eb88a37c8042faeb50d274d365615b35", "patch": "@@ -280,7 +280,7 @@ pub struct QueryResponse<'tcx, R> {\n     /// should get its hidden type inferred. So we bubble the opaque type\n     /// and the type it was compared against upwards and let the query caller\n     /// handle it.\n-    pub opaque_types: Vec<(Ty<'tcx>, Ty<'tcx>)>,\n+    pub opaque_types: Vec<(ty::OpaqueTypeKey<'tcx>, Ty<'tcx>)>,\n     pub value: R,\n }\n "}, {"sha": "1511c906d1e86854e4bb8178731dbda5d6f4b202", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de074242eb88a37c8042faeb50d274d365615b35/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de074242eb88a37c8042faeb50d274d365615b35/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=de074242eb88a37c8042faeb50d274d365615b35", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> std::ops::Deref for ExternalConstraints<'tcx> {\n pub struct ExternalConstraintsData<'tcx> {\n     // FIXME: implement this.\n     pub region_constraints: QueryRegionConstraints<'tcx>,\n-    pub opaque_types: Vec<(Ty<'tcx>, Ty<'tcx>)>,\n+    pub opaque_types: Vec<(ty::OpaqueTypeKey<'tcx>, Ty<'tcx>)>,\n }\n \n // FIXME: Having to clone `region_constraints` for folding feels bad and"}]}