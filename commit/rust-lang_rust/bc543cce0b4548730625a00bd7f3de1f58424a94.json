{"sha": "bc543cce0b4548730625a00bd7f3de1f58424a94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNTQzY2NlMGI0NTQ4NzMwNjI1YTAwYmQ3ZjNkZTFmNTg0MjRhOTQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-14T14:42:31Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-14T14:42:31Z"}, "message": "Combine spaces_within_parens and spaces_within_brackets", "tree": {"sha": "a726f056fe643e210b45100d52cef1321ead15c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a726f056fe643e210b45100d52cef1321ead15c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc543cce0b4548730625a00bd7f3de1f58424a94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc543cce0b4548730625a00bd7f3de1f58424a94", "html_url": "https://github.com/rust-lang/rust/commit/bc543cce0b4548730625a00bd7f3de1f58424a94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc543cce0b4548730625a00bd7f3de1f58424a94/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94e22bb3340cf5056d79ee02674adda16c248aa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/94e22bb3340cf5056d79ee02674adda16c248aa7", "html_url": "https://github.com/rust-lang/rust/commit/94e22bb3340cf5056d79ee02674adda16c248aa7"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "c7b91625c9810b0ce5258484ce3a11c414c9e812", "filename": "src/chains.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=bc543cce0b4548730625a00bd7f3de1f58424a94", "patch": "@@ -485,11 +485,12 @@ fn rewrite_method_call(\n             .map(|ty| ty.rewrite(context, shape))\n             .collect::<Option<Vec<_>>>()?;\n \n-        let type_str = if context.config.spaces_within_angle_brackets() && !type_list.is_empty() {\n-            format!(\"::< {} >\", type_list.join(\", \"))\n-        } else {\n-            format!(\"::<{}>\", type_list.join(\", \"))\n-        };\n+        let type_str =\n+            if context.config.spaces_within_parens_and_brackets() && !type_list.is_empty() {\n+                format!(\"::< {} >\", type_list.join(\", \"))\n+            } else {\n+                format!(\"::<{}>\", type_list.join(\", \"))\n+            };\n \n         (types.last().unwrap().span.hi(), type_str)\n     };"}, {"sha": "c76933ca509773a805c67bf1b1123cf5b287d52b", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=bc543cce0b4548730625a00bd7f3de1f58424a94", "patch": "@@ -616,11 +616,8 @@ create_config! {\n     space_before_colon: bool, false, false, \"Leave a space before the colon\";\n     space_after_colon: bool, true, false, \"Leave a space after the colon\";\n     spaces_around_ranges: bool, false, false, \"Put spaces around the  .. and ... range operators\";\n-    spaces_within_angle_brackets: bool, false, false,\n-        \"Put spaces within non-empty generic arguments\";\n-    spaces_within_square_brackets: bool, false, false,\n-        \"Put spaces within non-empty square brackets\";\n-    spaces_within_parens: bool, false, false, \"Put spaces within non-empty parentheses\";\n+    spaces_within_parens_and_brackets: bool, false, false,\n+        \"Put spaces within non-empty parentheses or brackets\";\n     use_try_shorthand: bool, false, false, \"Replace uses of the try! macro by the ? shorthand\";\n     write_mode: WriteMode, WriteMode::Overwrite, false,\n         \"What Write Mode to use when none is supplied: \\"}, {"sha": "077ba5271a4bc3a5163032cbbcd34295bfda0583", "filename": "src/expr.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=bc543cce0b4548730625a00bd7f3de1f58424a94", "patch": "@@ -202,7 +202,7 @@ pub fn format_expr(\n             rewrite_index(&**expr, &**index, context, shape)\n         }\n         ast::ExprKind::Repeat(ref expr, ref repeats) => {\n-            let (lbr, rbr) = if context.config.spaces_within_square_brackets() {\n+            let (lbr, rbr) = if context.config.spaces_within_parens_and_brackets() {\n                 (\"[ \", \" ]\")\n             } else {\n                 (\"[\", \"]\")\n@@ -409,7 +409,7 @@ pub fn rewrite_array<'a, I>(\n where\n     I: Iterator<Item = &'a ast::Expr>,\n {\n-    let bracket_size = if context.config.spaces_within_square_brackets() {\n+    let bracket_size = if context.config.spaces_within_parens_and_brackets() {\n         2 // \"[ \"\n     } else {\n         1 // \"[\"\n@@ -439,7 +439,7 @@ where\n     ).collect::<Vec<_>>();\n \n     if items.is_empty() {\n-        if context.config.spaces_within_square_brackets() {\n+        if context.config.spaces_within_parens_and_brackets() {\n             return Some(\"[ ]\".to_string());\n         } else {\n             return Some(\"[]\".to_string());\n@@ -501,7 +501,7 @@ where\n     let result = if context.config.indent_style() == IndentStyle::Visual\n         || tactic == DefinitiveListTactic::Horizontal\n     {\n-        if context.config.spaces_within_square_brackets() && !list_str.is_empty() {\n+        if context.config.spaces_within_parens_and_brackets() && !list_str.is_empty() {\n             format!(\"[ {} ]\", list_str)\n         } else {\n             format!(\"[{}]\", list_str)\n@@ -1801,7 +1801,7 @@ where\n     T: Rewrite + Spanned + ToExpr + 'a,\n {\n     // 2 = `( `, 1 = `(`\n-    let paren_overhead = if context.config.spaces_within_parens() {\n+    let paren_overhead = if context.config.spaces_within_parens_and_brackets() {\n         2\n     } else {\n         1\n@@ -2098,7 +2098,7 @@ pub fn wrap_args_with_parens(\n         || (context.inside_macro && !args_str.contains('\\n')\n             && args_str.len() + paren_overhead(context) <= shape.width) || is_extendable\n     {\n-        if context.config.spaces_within_parens() && !args_str.is_empty() {\n+        if context.config.spaces_within_parens_and_brackets() && !args_str.is_empty() {\n             format!(\"( {} )\", args_str)\n         } else {\n             format!(\"({})\", args_str)\n@@ -2141,11 +2141,12 @@ fn rewrite_paren(context: &RewriteContext, subexpr: &ast::Expr, shape: Shape) ->\n         .offset_left(paren_overhead)\n         .and_then(|s| s.sub_width(paren_overhead))?;\n \n-    let paren_wrapper = |s: &str| if context.config.spaces_within_parens() && !s.is_empty() {\n-        format!(\"( {} )\", s)\n-    } else {\n-        format!(\"({})\", s)\n-    };\n+    let paren_wrapper =\n+        |s: &str| if context.config.spaces_within_parens_and_brackets() && !s.is_empty() {\n+            format!(\"( {} )\", s)\n+        } else {\n+            format!(\"({})\", s)\n+        };\n \n     let subexpr_str = subexpr.rewrite(context, sub_shape)?;\n     debug!(\"rewrite_paren, subexpr_str: `{:?}`\", subexpr_str);\n@@ -2167,7 +2168,7 @@ fn rewrite_index(\n ) -> Option<String> {\n     let expr_str = expr.rewrite(context, shape)?;\n \n-    let (lbr, rbr) = if context.config.spaces_within_square_brackets() {\n+    let (lbr, rbr) = if context.config.spaces_within_parens_and_brackets() {\n         (\"[ \", \" ]\")\n     } else {\n         (\"[\", \"]\")\n@@ -2436,7 +2437,7 @@ where\n             .unwrap()\n             .rewrite(context, nested_shape)\n             .map(|s| {\n-                if context.config.spaces_within_parens() {\n+                if context.config.spaces_within_parens_and_brackets() {\n                     format!(\"( {}, )\", s)\n                 } else {\n                     format!(\"({},)\", s)\n@@ -2476,7 +2477,7 @@ where\n     };\n     let list_str = write_list(&item_vec, &fmt)?;\n \n-    if context.config.spaces_within_parens() && !list_str.is_empty() {\n+    if context.config.spaces_within_parens_and_brackets() && !list_str.is_empty() {\n         Some(format!(\"( {} )\", list_str))\n     } else {\n         Some(format!(\"({})\", list_str))"}, {"sha": "fa697157ea32be1bcfd349295c223cf16647a9eb", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=bc543cce0b4548730625a00bd7f3de1f58424a94", "patch": "@@ -1882,7 +1882,9 @@ fn rewrite_fn_base(\n     } else {\n         result.push('(');\n     }\n-    if context.config.spaces_within_parens() && !fd.inputs.is_empty() && result.ends_with('(') {\n+    if context.config.spaces_within_parens_and_brackets() && !fd.inputs.is_empty()\n+        && result.ends_with('(')\n+    {\n         result.push(' ')\n     }\n \n@@ -1943,7 +1945,7 @@ fn rewrite_fn_base(\n         if fd.inputs.is_empty() && used_width + 1 > context.config.max_width() {\n             result.push('\\n');\n         }\n-        if context.config.spaces_within_parens() && !fd.inputs.is_empty() {\n+        if context.config.spaces_within_parens_and_brackets() && !fd.inputs.is_empty() {\n             result.push(' ')\n         }\n         // If the last line of args contains comment, we cannot put the closing paren\n@@ -2522,7 +2524,7 @@ pub fn wrap_generics_with_angle_brackets(\n                 .block_unindent(context.config)\n                 .to_string(context.config)\n         )\n-    } else if context.config.spaces_within_angle_brackets() {\n+    } else if context.config.spaces_within_parens_and_brackets() {\n         format!(\"< {} >\", list_str)\n     } else {\n         format!(\"<{}>\", list_str)"}, {"sha": "6e64a49361de107b459b7e0d4868dc2a8fe98250", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=bc543cce0b4548730625a00bd7f3de1f58424a94", "patch": "@@ -219,7 +219,7 @@ pub fn rewrite_macro(\n             let mac_shape = shape.offset_left(macro_name.len())?;\n             // Handle special case: `vec![expr; expr]`\n             if vec_with_semi {\n-                let (lbr, rbr) = if context.config.spaces_within_square_brackets() {\n+                let (lbr, rbr) = if context.config.spaces_within_parens_and_brackets() {\n                     (\"[ \", \" ]\")\n                 } else {\n                     (\"[\", \"]\")"}, {"sha": "20ea14a5dfeb7a585ea6db24d75700af7f9d5486", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=bc543cce0b4548730625a00bd7f3de1f58424a94", "patch": "@@ -109,7 +109,7 @@ impl Rewrite for Pat {\n                 let pats = pats?;\n \n                 // Unwrap all the sub-strings and join them with commas.\n-                let result = if context.config.spaces_within_square_brackets() {\n+                let result = if context.config.spaces_within_parens_and_brackets() {\n                     format!(\"[ {} ]\", pats.join(\", \"))\n                 } else {\n                     format!(\"[{}]\", pats.join(\", \"))"}, {"sha": "180a38b2f23a811a0806a463dff5833ab851abe1", "filename": "src/types.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=bc543cce0b4548730625a00bd7f3de1f58424a94", "patch": "@@ -54,7 +54,7 @@ pub fn rewrite_path(\n \n     if let Some(qself) = qself {\n         result.push('<');\n-        if context.config.spaces_within_angle_brackets() {\n+        if context.config.spaces_within_parens_and_brackets() {\n             result.push_str(\" \")\n         }\n \n@@ -81,7 +81,7 @@ pub fn rewrite_path(\n             )?;\n         }\n \n-        if context.config.spaces_within_angle_brackets() {\n+        if context.config.spaces_within_parens_and_brackets() {\n             result.push_str(\" \")\n         }\n \n@@ -434,7 +434,9 @@ impl Rewrite for ast::WherePredicate {\n                         .collect::<Option<Vec<_>>>()?;\n                     let bounds_str = join_bounds(context, ty_shape, &bounds);\n \n-                    if context.config.spaces_within_angle_brackets() && !lifetime_str.is_empty() {\n+                    if context.config.spaces_within_parens_and_brackets()\n+                        && !lifetime_str.is_empty()\n+                    {\n                         format!(\n                             \"for< {} > {}{}{}\",\n                             lifetime_str,\n@@ -600,7 +602,7 @@ impl Rewrite for ast::PolyTraitRef {\n                 .rewrite(context, shape.offset_left(extra_offset)?)?;\n \n             Some(\n-                if context.config.spaces_within_angle_brackets() && !lifetime_str.is_empty() {\n+                if context.config.spaces_within_parens_and_brackets() && !lifetime_str.is_empty() {\n                     format!(\"for< {} > {}\", lifetime_str, path_str)\n                 } else {\n                     format!(\"for<{}> {}\", lifetime_str, path_str)\n@@ -671,22 +673,22 @@ impl Rewrite for ast::Ty {\n                 let budget = shape.width.checked_sub(2)?;\n                 ty.rewrite(context, Shape::legacy(budget, shape.indent + 1))\n                     .map(|ty_str| {\n-                        if context.config.spaces_within_parens() {\n+                        if context.config.spaces_within_parens_and_brackets() {\n                             format!(\"( {} )\", ty_str)\n                         } else {\n                             format!(\"({})\", ty_str)\n                         }\n                     })\n             }\n             ast::TyKind::Slice(ref ty) => {\n-                let budget = if context.config.spaces_within_square_brackets() {\n+                let budget = if context.config.spaces_within_parens_and_brackets() {\n                     shape.width.checked_sub(4)?\n                 } else {\n                     shape.width.checked_sub(2)?\n                 };\n                 ty.rewrite(context, Shape::legacy(budget, shape.indent + 1))\n                     .map(|ty_str| {\n-                        if context.config.spaces_within_square_brackets() {\n+                        if context.config.spaces_within_parens_and_brackets() {\n                             format!(\"[ {} ]\", ty_str)\n                         } else {\n                             format!(\"[{}]\", ty_str)\n@@ -703,7 +705,7 @@ impl Rewrite for ast::Ty {\n                 rewrite_path(context, PathContext::Type, q_self.as_ref(), path, shape)\n             }\n             ast::TyKind::Array(ref ty, ref repeats) => {\n-                let use_spaces = context.config.spaces_within_square_brackets();\n+                let use_spaces = context.config.spaces_within_parens_and_brackets();\n                 let lbr = if use_spaces { \"[ \" } else { \"[\" };\n                 let rbr = if use_spaces { \" ]\" } else { \"]\" };\n                 rewrite_pair("}, {"sha": "88272ff0d385bf4d310bbe0a0298e67690f463b2", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc543cce0b4548730625a00bd7f3de1f58424a94/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=bc543cce0b4548730625a00bd7f3de1f58424a94", "patch": "@@ -441,7 +441,7 @@ pub fn colon_spaces(before: bool, after: bool) -> &'static str {\n \n #[inline]\n pub fn paren_overhead(context: &RewriteContext) -> usize {\n-    if context.config.spaces_within_parens() {\n+    if context.config.spaces_within_parens_and_brackets() {\n         4\n     } else {\n         2"}]}