{"sha": "be95dee5a11126f3da96d59c9bdbcc1874c82007", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOTVkZWU1YTExMTI2ZjNkYTk2ZDU5YzliZGJjYzE4NzRjODIwMDc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-02T00:00:44Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T06:33:09Z"}, "message": "or-patterns: adjust save_analysis wrt. `process_var_decl{_multi}`.", "tree": {"sha": "04a1991660b4ef0da4ea6d86c977af437a4fa372", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04a1991660b4ef0da4ea6d86c977af437a4fa372"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be95dee5a11126f3da96d59c9bdbcc1874c82007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be95dee5a11126f3da96d59c9bdbcc1874c82007", "html_url": "https://github.com/rust-lang/rust/commit/be95dee5a11126f3da96d59c9bdbcc1874c82007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be95dee5a11126f3da96d59c9bdbcc1874c82007/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a867c5f9cc0dcab87d9f1b591873a4681fd627cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a867c5f9cc0dcab87d9f1b591873a4681fd627cb", "html_url": "https://github.com/rust-lang/rust/commit/a867c5f9cc0dcab87d9f1b591873a4681fd627cb"}], "stats": {"total": 98, "additions": 15, "deletions": 83}, "files": [{"sha": "12c5ce12a0e8bc0dce1da59e2051dde180ab8a4c", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 14, "deletions": 83, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/be95dee5a11126f3da96d59c9bdbcc1874c82007/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be95dee5a11126f3da96d59c9bdbcc1874c82007/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=be95dee5a11126f3da96d59c9bdbcc1874c82007", "patch": "@@ -897,32 +897,23 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         }\n     }\n \n-    fn process_var_decl_multi(&mut self, pats: &'l [P<ast::Pat>]) {\n+    fn process_var_decl(&mut self, pat: &'l ast::Pat) {\n+        // The pattern could declare multiple new vars,\n+        // we must walk the pattern and collect them all.\n         let mut collector = PathCollector::new();\n-        for pattern in pats {\n-            // collect paths from the arm's patterns\n-            collector.visit_pat(&pattern);\n-            self.visit_pat(&pattern);\n-        }\n+        collector.visit_pat(&pat);\n+        self.visit_pat(&pat);\n \n-        // process collected paths\n-        for (id, ident, immut) in collector.collected_idents {\n+        // Process collected paths.\n+        for (id, ident, _) in collector.collected_idents {\n             match self.save_ctxt.get_path_res(id) {\n                 Res::Local(hir_id) => {\n-                    let mut value = if immut == ast::Mutability::Immutable {\n-                        self.span.snippet(ident.span)\n-                    } else {\n-                        \"<mutable>\".to_owned()\n-                    };\n                     let id = self.tcx.hir().hir_to_node_id(hir_id);\n-                    let typ = self.save_ctxt\n-                        .tables\n-                        .node_type_opt(hir_id)\n+                    let typ = self.save_ctxt.tables.node_type_opt(hir_id)\n                         .map(|t| t.to_string())\n                         .unwrap_or_default();\n-                    value.push_str(\": \");\n-                    value.push_str(&typ);\n \n+                    // Rust uses the id of the pattern for var lookups, so we'll use it too.\n                     if !self.span.filter_generated(ident.span) {\n                         let qualname = format!(\"{}${}\", ident.to_string(), id);\n                         let id = id_from_node_id(id, &self.save_ctxt);\n@@ -972,61 +963,6 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         }\n     }\n \n-    fn process_var_decl(&mut self, p: &'l ast::Pat, value: String) {\n-        // The local could declare multiple new vars, we must walk the\n-        // pattern and collect them all.\n-        let mut collector = PathCollector::new();\n-        collector.visit_pat(&p);\n-        self.visit_pat(&p);\n-\n-        for (id, ident, immut) in collector.collected_idents {\n-            let mut value = match immut {\n-                ast::Mutability::Immutable => value.to_string(),\n-                _ => String::new(),\n-            };\n-            let hir_id = self.tcx.hir().node_to_hir_id(id);\n-            let typ = match self.save_ctxt.tables.node_type_opt(hir_id) {\n-                Some(typ) => {\n-                    let typ = typ.to_string();\n-                    if !value.is_empty() {\n-                        value.push_str(\": \");\n-                    }\n-                    value.push_str(&typ);\n-                    typ\n-                }\n-                None => String::new(),\n-            };\n-\n-            // Rust uses the id of the pattern for var lookups, so we'll use it too.\n-            if !self.span.filter_generated(ident.span) {\n-                let qualname = format!(\"{}${}\", ident.to_string(), id);\n-                let id = id_from_node_id(id, &self.save_ctxt);\n-                let span = self.span_from_span(ident.span);\n-\n-                self.dumper.dump_def(\n-                    &Access {\n-                        public: false,\n-                        reachable: false,\n-                    },\n-                    Def {\n-                        kind: DefKind::Local,\n-                        id,\n-                        span,\n-                        name: ident.to_string(),\n-                        qualname,\n-                        value: typ,\n-                        parent: None,\n-                        children: vec![],\n-                        decl_id: None,\n-                        docs: String::new(),\n-                        sig: None,\n-                        attributes: vec![],\n-                    },\n-                );\n-            }\n-        }\n-    }\n-\n     /// Extracts macro use and definition information from the AST node defined\n     /// by the given NodeId, using the expansion information from the node's\n     /// span.\n@@ -1565,14 +1501,13 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                 });\n             }\n             ast::ExprKind::ForLoop(ref pattern, ref subexpression, ref block, _) => {\n-                let value = self.span.snippet(subexpression.span);\n-                self.process_var_decl(pattern, value);\n+                self.process_var_decl(pattern);\n                 debug!(\"for loop, walk sub-expr: {:?}\", subexpression.node);\n                 self.visit_expr(subexpression);\n                 visit::walk_block(self, block);\n             }\n-            ast::ExprKind::Let(ref pats, ref scrutinee) => {\n-                self.process_var_decl_multi(pats);\n+            ast::ExprKind::Let(ref pat, ref scrutinee) => {\n+                self.process_var_decl(pat);\n                 self.visit_expr(scrutinee);\n             }\n             ast::ExprKind::Repeat(ref element, ref count) => {\n@@ -1599,7 +1534,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n     }\n \n     fn visit_arm(&mut self, arm: &'l ast::Arm) {\n-        self.process_var_decl_multi(&arm.pats);\n+        self.process_var_decl(&arm.pat);\n         if let Some(expr) = &arm.guard {\n             self.visit_expr(expr);\n         }\n@@ -1617,11 +1552,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n \n     fn visit_local(&mut self, l: &'l ast::Local) {\n         self.process_macro_use(l.span);\n-        let value = l.init\n-            .as_ref()\n-            .map(|i| self.span.snippet(i.span))\n-            .unwrap_or_default();\n-        self.process_var_decl(&l.pat, value);\n+        self.process_var_decl(&l.pat);\n \n         // Just walk the initialiser and type (don't want to walk the pattern again).\n         walk_list!(self, visit_ty, &l.ty);"}, {"sha": "4bc098db68611b87ac8677031d100c599dcf50de", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be95dee5a11126f3da96d59c9bdbcc1874c82007/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be95dee5a11126f3da96d59c9bdbcc1874c82007/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=be95dee5a11126f3da96d59c9bdbcc1874c82007", "patch": "@@ -1,5 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(nll)]\n+#![feature(inner_deref)]\n \n #![recursion_limit=\"256\"]\n "}]}