{"sha": "91d25168cd85d712bbc3435ad8e9f76733b802b4", "node_id": "C_kwDOAAsO6NoAKDkxZDI1MTY4Y2Q4NWQ3MTJiYmMzNDM1YWQ4ZTlmNzY3MzNiODAyYjQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-02-14T13:55:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-02-14T13:55:50Z"}, "message": "interpret: rename Pointer::from_addr \u2192 from_addr_invalid", "tree": {"sha": "8469cb69c311317ec354fca010307eeab4984977", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8469cb69c311317ec354fca010307eeab4984977"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91d25168cd85d712bbc3435ad8e9f76733b802b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91d25168cd85d712bbc3435ad8e9f76733b802b4", "html_url": "https://github.com/rust-lang/rust/commit/91d25168cd85d712bbc3435ad8e9f76733b802b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91d25168cd85d712bbc3435ad8e9f76733b802b4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d91939bb7130a8e6c092a290b7d37f654e3c23c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d91939bb7130a8e6c092a290b7d37f654e3c23c", "html_url": "https://github.com/rust-lang/rust/commit/2d91939bb7130a8e6c092a290b7d37f654e3c23c"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "5b7b0dc66d1871fd5cfddc090893e92f98e5c14f", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91d25168cd85d712bbc3435ad8e9f76733b802b4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d25168cd85d712bbc3435ad8e9f76733b802b4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=91d25168cd85d712bbc3435ad8e9f76733b802b4", "patch": "@@ -517,7 +517,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         // Allow these casts, but make the pointer not dereferenceable.\n         // (I.e., they behave like transmutation.)\n         // This is correct because no pointers can ever be exposed in compile-time evaluation.\n-        Ok(Pointer::from_addr(addr))\n+        Ok(Pointer::from_addr_invalid(addr))\n     }\n \n     #[inline(always)]"}, {"sha": "f83e5ba59dc3e87bca3cc4ba31bbcee71067efb8", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91d25168cd85d712bbc3435ad8e9f76733b802b4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d25168cd85d712bbc3435ad8e9f76733b802b4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=91d25168cd85d712bbc3435ad8e9f76733b802b4", "patch": "@@ -178,7 +178,7 @@ impl<'tcx, Prov: Provenance> MPlaceTy<'tcx, Prov> {\n     pub fn fake_alloc_zst(layout: TyAndLayout<'tcx>) -> Self {\n         assert!(layout.is_zst());\n         let align = layout.align.abi;\n-        let ptr = Pointer::from_addr(align.bytes()); // no provenance, absolute address\n+        let ptr = Pointer::from_addr_invalid(align.bytes()); // no provenance, absolute address\n         MPlaceTy { mplace: MemPlace { ptr, meta: MemPlaceMeta::None }, layout, align }\n     }\n "}, {"sha": "c5137cf0666ea9e189d9261e1bc9b7871c2e473a", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91d25168cd85d712bbc3435ad8e9f76733b802b4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d25168cd85d712bbc3435ad8e9f76733b802b4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=91d25168cd85d712bbc3435ad8e9f76733b802b4", "patch": "@@ -323,7 +323,7 @@ impl fmt::Display for UndefinedBehaviorInfo {\n                 write!(\n                     f,\n                     \"{msg}{pointer} is a dangling pointer (it has no provenance)\",\n-                    pointer = Pointer::<Option<AllocId>>::from_addr(*i),\n+                    pointer = Pointer::<Option<AllocId>>::from_addr_invalid(*i),\n                 )\n             }\n             AlignmentCheckFailed { required, has } => write!("}, {"sha": "ab667c22a14534d6312fad598781a5651e72da6f", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91d25168cd85d712bbc3435ad8e9f76733b802b4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d25168cd85d712bbc3435ad8e9f76733b802b4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=91d25168cd85d712bbc3435ad8e9f76733b802b4", "patch": "@@ -251,14 +251,16 @@ impl<Prov> Pointer<Option<Prov>> {\n }\n \n impl<Prov> Pointer<Option<Prov>> {\n+    /// Creates a pointer to the given address, with invalid provenance (i.e., cannot be used for\n+    /// any memory access).\n     #[inline(always)]\n-    pub fn from_addr(addr: u64) -> Self {\n+    pub fn from_addr_invalid(addr: u64) -> Self {\n         Pointer { provenance: None, offset: Size::from_bytes(addr) }\n     }\n \n     #[inline(always)]\n     pub fn null() -> Self {\n-        Pointer::from_addr(0)\n+        Pointer::from_addr_invalid(0)\n     }\n }\n "}, {"sha": "77594e3440e3605f03679c4dc50f2929f0c2f02c", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91d25168cd85d712bbc3435ad8e9f76733b802b4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d25168cd85d712bbc3435ad8e9f76733b802b4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=91d25168cd85d712bbc3435ad8e9f76733b802b4", "patch": "@@ -322,7 +322,7 @@ impl<'tcx, Prov: Provenance> Scalar<Prov> {\n             Right(ptr) => Ok(ptr.into()),\n             Left(bits) => {\n                 let addr = u64::try_from(bits).unwrap();\n-                Ok(Pointer::from_addr(addr))\n+                Ok(Pointer::from_addr_invalid(addr))\n             }\n         }\n     }"}]}