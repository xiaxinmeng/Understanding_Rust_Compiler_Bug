{"sha": "775de8a62b3c19521543cb6b9130979eb6747c75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NWRlOGE2MmIzYzE5NTIxNTQzY2I2YjkxMzA5NzllYjY3NDdjNzU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-05-18T20:38:49Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2016-05-18T20:38:49Z"}, "message": "Optionally put short struct variants on one line (#997)\n\nCloses #418", "tree": {"sha": "51044338e46d7e6f0951aceec2faea394eba35d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51044338e46d7e6f0951aceec2faea394eba35d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/775de8a62b3c19521543cb6b9130979eb6747c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/775de8a62b3c19521543cb6b9130979eb6747c75", "html_url": "https://github.com/rust-lang/rust/commit/775de8a62b3c19521543cb6b9130979eb6747c75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/775de8a62b3c19521543cb6b9130979eb6747c75/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9589cac62d54fa199524b6110df67f626ed3bdfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9589cac62d54fa199524b6110df67f626ed3bdfa", "html_url": "https://github.com/rust-lang/rust/commit/9589cac62d54fa199524b6110df67f626ed3bdfa"}], "stats": {"total": 101, "additions": 44, "deletions": 57}, "files": [{"sha": "e4d0e4517c26ab67e098ebe7daf481d151d4104b", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/775de8a62b3c19521543cb6b9130979eb6747c75/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775de8a62b3c19521543cb6b9130979eb6747c75/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=775de8a62b3c19521543cb6b9130979eb6747c75", "patch": "@@ -334,6 +334,8 @@ create_config! {\n         \"Maximum width of the args of a function call before falling back to vertical formatting\";\n     struct_lit_width: usize, 16,\n         \"Maximum width in the body of a struct lit before falling back to vertical formatting\";\n+    struct_variant_width: usize, 35,\n+        \"Maximum width in the body of a struct variant before falling back to vertical formatting\";\n     force_explicit_abi: bool, true, \"Always print the abi for extern items\";\n     newline_style: NewlineStyle, NewlineStyle::Unix, \"Unix or Windows line endings\";\n     fn_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for functions\";"}, {"sha": "64797de2fdaaef0054d184286ef04ebeaf57ff18", "filename": "src/issues.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/775de8a62b3c19521543cb6b9130979eb6747c75/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775de8a62b3c19521543cb6b9130979eb6747c75/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=775de8a62b3c19521543cb6b9130979eb6747c75", "patch": "@@ -32,14 +32,8 @@ impl ReportTactic {\n \n #[derive(Clone, Copy)]\n enum Seeking {\n-    Issue {\n-        todo_idx: usize,\n-        fixme_idx: usize,\n-    },\n-    Number {\n-        issue: Issue,\n-        part: NumberPart,\n-    },\n+    Issue { todo_idx: usize, fixme_idx: usize },\n+    Number { issue: Issue, part: NumberPart },\n }\n \n #[derive(Clone, Copy)]"}, {"sha": "5c5e9923b322c5c0872250323062676d3c729d04", "filename": "src/items.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/775de8a62b3c19521543cb6b9130979eb6747c75/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775de8a62b3c19521543cb6b9130979eb6747c75/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=775de8a62b3c19521543cb6b9130979eb6747c75", "patch": "@@ -14,7 +14,7 @@ use Indent;\n use utils::{CodeMapSpanUtils, format_mutability, format_visibility, contains_skip, end_typaram,\n             wrap_str, last_line_width, semicolon_for_expr, format_unsafety, trim_newlines};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n-            DefinitiveListTactic, definitive_tactic, format_item_list};\n+            DefinitiveListTactic, ListTactic, definitive_tactic, format_item_list};\n use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs};\n use comment::{FindUncommented, contains_comment};\n use visitor::FmtVisitor;\n@@ -419,7 +419,8 @@ impl<'a> FmtVisitor<'a> {\n                               &field.node.data,\n                               None,\n                               field.span,\n-                              indent)\n+                              indent,\n+                              Some(self.config.struct_variant_width))\n             }\n             ast::VariantData::Unit(..) => {\n                 let tag = if let Some(ref expr) = field.node.disr_expr {\n@@ -588,7 +589,8 @@ pub fn format_struct(context: &RewriteContext,\n                      struct_def: &ast::VariantData,\n                      generics: Option<&ast::Generics>,\n                      span: Span,\n-                     offset: Indent)\n+                     offset: Indent,\n+                     one_line_width: Option<usize>)\n                      -> Option<String> {\n     match *struct_def {\n         ast::VariantData::Unit(..) => format_unit_struct(item_name, ident, vis),\n@@ -610,7 +612,8 @@ pub fn format_struct(context: &RewriteContext,\n                                  fields,\n                                  generics,\n                                  span,\n-                                 offset)\n+                                 offset,\n+                                 one_line_width)\n         }\n     }\n }\n@@ -758,7 +761,8 @@ fn format_struct_struct(context: &RewriteContext,\n                         fields: &[ast::StructField],\n                         generics: Option<&ast::Generics>,\n                         span: Span,\n-                        offset: Indent)\n+                        offset: Indent,\n+                        one_line_width: Option<usize>)\n                         -> Option<String> {\n     let mut result = String::with_capacity(1024);\n \n@@ -813,23 +817,35 @@ fn format_struct_struct(context: &RewriteContext,\n                              |field| field.ty.span.hi,\n                              |field| field.rewrite(context, item_budget, item_indent),\n                              context.codemap.span_after(span, \"{\"),\n-                             span.hi);\n+                             span.hi)\n+        .collect::<Vec<_>>();\n     // 1 = ,\n     let budget = context.config.max_width - offset.width() + context.config.tab_spaces - 1;\n+\n+    let tactic = match one_line_width {\n+        Some(w) => definitive_tactic(&items, ListTactic::LimitedHorizontalVertical(w), budget),\n+        None => DefinitiveListTactic::Vertical,\n+    };\n+\n     let fmt = ListFormatting {\n-        tactic: DefinitiveListTactic::Vertical,\n+        tactic: tactic,\n         separator: \",\",\n         trailing_separator: context.config.struct_trailing_comma,\n         indent: item_indent,\n         width: budget,\n         ends_with_newline: true,\n         config: context.config,\n     };\n-    Some(format!(\"{}\\n{}{}\\n{}}}\",\n-                 result,\n-                 offset.block_indent(context.config).to_string(context.config),\n-                 try_opt!(write_list(items, &fmt)),\n-                 offset.to_string(context.config)))\n+    let items_str = try_opt!(write_list(&items, &fmt));\n+    if one_line_width.is_some() && !items_str.contains('\\n') {\n+        Some(format!(\"{} {} }}\", result, items_str))\n+    } else {\n+        Some(format!(\"{}\\n{}{}\\n{}}}\",\n+                     result,\n+                     offset.block_indent(context.config).to_string(context.config),\n+                     items_str,\n+                     offset.to_string(context.config)))\n+    }\n }\n \n fn format_tuple_struct(context: &RewriteContext,"}, {"sha": "fb508f641641558906feff698acc9a9d627d8cce", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/775de8a62b3c19521543cb6b9130979eb6747c75/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775de8a62b3c19521543cb6b9130979eb6747c75/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=775de8a62b3c19521543cb6b9130979eb6747c75", "patch": "@@ -267,7 +267,8 @@ impl<'a> FmtVisitor<'a> {\n                                            def,\n                                            Some(generics),\n                                            item.span,\n-                                           indent)\n+                                           indent,\n+                                           None)\n                         .map(|s| {\n                             match *def {\n                                 ast::VariantData::Tuple(..) => s + \";\","}, {"sha": "2e5a5ad23e3ad927d8157640f947e961edea4af4", "filename": "tests/target/enum-no_trailing_comma.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/775de8a62b3c19521543cb6b9130979eb6747c75/tests%2Ftarget%2Fenum-no_trailing_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775de8a62b3c19521543cb6b9130979eb6747c75/tests%2Ftarget%2Fenum-no_trailing_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum-no_trailing_comma.rs?ref=775de8a62b3c19521543cb6b9130979eb6747c75", "patch": "@@ -21,21 +21,11 @@ enum TupY {\n }\n \n enum StructX {\n-    A {\n-        s: u16,\n-    },\n-    B {\n-        u: u32,\n-        i: i32,\n-    }\n+    A { s: u16 },\n+    B { u: u32, i: i32 }\n }\n \n enum StructY {\n-    A {\n-        s: u16,\n-    },\n-    B {\n-        u: u32,\n-        i: i32,\n-    }\n+    A { s: u16 },\n+    B { u: u32, i: i32 }\n }"}, {"sha": "aa51b90a79ed261245644843f7b2f35b2fca0cfd", "filename": "tests/target/enum.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/775de8a62b3c19521543cb6b9130979eb6747c75/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775de8a62b3c19521543cb6b9130979eb6747c75/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=775de8a62b3c19521543cb6b9130979eb6747c75", "patch": "@@ -42,9 +42,7 @@ enum StructLikeVariants {\n         #[Attr50]\n         y: SomeType, // Aanother Comment\n     },\n-    SL {\n-        a: A,\n-    },\n+    SL { a: A },\n }\n \n enum X {\n@@ -64,10 +62,7 @@ pub enum EnumWithAttributes {\n     SkippedItem(String,String,), // Post-comment\n     #[another_attr]\n     #[attr2]\n-    ItemStruct {\n-        x: usize,\n-        y: usize,\n-    }, /* Comment AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */\n+    ItemStruct { x: usize, y: usize }, /* Comment AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */\n     // And another\n     ForcedPreflight, /* AAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n                       * AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */\n@@ -81,24 +76,15 @@ pub enum SingleTuple {\n }\n \n pub enum SingleStruct {\n-    Match {\n-        name: String,\n-        loc: usize,\n-    }, // Post-comment\n+    Match { name: String, loc: usize }, // Post-comment\n }\n \n pub enum GenericEnum<I, T>\n     where I: Iterator<Item = T>\n {\n     // Pre Comment\n-    Left {\n-        list: I,\n-        root: T,\n-    }, // Post-comment\n-    Right {\n-        list: I,\n-        root: T,\n-    }, // Post Comment\n+    Left { list: I, root: T }, // Post-comment\n+    Right { list: I, root: T }, // Post Comment\n }\n \n "}, {"sha": "4d4d19cdef816c53dc1eec777069c37204afd821", "filename": "tests/target/where-trailing-comma.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/775de8a62b3c19521543cb6b9130979eb6747c75/tests%2Ftarget%2Fwhere-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775de8a62b3c19521543cb6b9130979eb6747c75/tests%2Ftarget%2Fwhere-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fwhere-trailing-comma.rs?ref=775de8a62b3c19521543cb6b9130979eb6747c75", "patch": "@@ -33,9 +33,7 @@ enum E<S, T>\n     where S: P,\n           T: P,\n {\n-    A {\n-        a: T,\n-    },\n+    A { a: T },\n }\n \n type Double<T>"}]}