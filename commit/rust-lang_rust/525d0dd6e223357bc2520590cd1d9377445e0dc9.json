{"sha": "525d0dd6e223357bc2520590cd1d9377445e0dc9", "node_id": "C_kwDOAAsO6NoAKDUyNWQwZGQ2ZTIyMzM1N2JjMjUyMDU5MGNkMWQ5Mzc3NDQ1ZTBkYzk", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2022-12-07T17:51:07Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2022-12-09T01:38:23Z"}, "message": "Factor out debuginfo offset calculation", "tree": {"sha": "d8d8da539f7628a78cc5ac9bfa382451eb793aac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8d8da539f7628a78cc5ac9bfa382451eb793aac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/525d0dd6e223357bc2520590cd1d9377445e0dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/525d0dd6e223357bc2520590cd1d9377445e0dc9", "html_url": "https://github.com/rust-lang/rust/commit/525d0dd6e223357bc2520590cd1d9377445e0dc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/525d0dd6e223357bc2520590cd1d9377445e0dc9/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34246f89e268bd3741e51d21253951e3ffd53d74", "url": "https://api.github.com/repos/rust-lang/rust/commits/34246f89e268bd3741e51d21253951e3ffd53d74", "html_url": "https://github.com/rust-lang/rust/commit/34246f89e268bd3741e51d21253951e3ffd53d74"}], "stats": {"total": 76, "additions": 49, "deletions": 27}, "files": [{"sha": "22e9eeea2551b04cfadc80fe0dab12587698bb06", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 49, "deletions": 27, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/525d0dd6e223357bc2520590cd1d9377445e0dc9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525d0dd6e223357bc2520590cd1d9377445e0dc9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=525d0dd6e223357bc2520590cd1d9377445e0dc9", "patch": "@@ -76,6 +76,53 @@ impl<'tcx, S: Copy, L: Copy> DebugScope<S, L> {\n     }\n }\n \n+struct DebugInfoOffset<T> {\n+    /// Offset from the `base` used to calculate the debuginfo offset.\n+    direct_offset: Size,\n+    /// Each offset in this vector indicates one level of indirection from the base or previous\n+    /// indirect offset plus a dereference.\n+    indirect_offsets: Vec<Size>,\n+    /// The final location debuginfo should point to.\n+    result: T,\n+}\n+\n+fn calculate_debuginfo_offset<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n+    bx: &mut Bx,\n+    local: mir::Local,\n+    var: &PerLocalVarDebugInfo<'tcx, Bx::DIVariable>,\n+    base: PlaceRef<'tcx, Bx::Value>,\n+) -> DebugInfoOffset<PlaceRef<'tcx, Bx::Value>> {\n+    let mut direct_offset = Size::ZERO;\n+    // FIXME(eddyb) use smallvec here.\n+    let mut indirect_offsets = vec![];\n+    let mut place = base;\n+\n+    for elem in &var.projection[..] {\n+        match *elem {\n+            mir::ProjectionElem::Deref => {\n+                indirect_offsets.push(Size::ZERO);\n+                place = bx.load_operand(place).deref(bx.cx());\n+            }\n+            mir::ProjectionElem::Field(field, _) => {\n+                let i = field.index();\n+                let offset = indirect_offsets.last_mut().unwrap_or(&mut direct_offset);\n+                *offset += place.layout.fields.offset(i);\n+                place = place.project_field(bx, i);\n+            }\n+            mir::ProjectionElem::Downcast(_, variant) => {\n+                place = place.project_downcast(bx, variant);\n+            }\n+            _ => span_bug!(\n+                var.source_info.span,\n+                \"unsupported var debuginfo place `{:?}`\",\n+                mir::Place { local, projection: var.projection },\n+            ),\n+        }\n+    }\n+\n+    DebugInfoOffset { direct_offset, indirect_offsets, result: place }\n+}\n+\n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn set_debug_loc(&self, bx: &mut Bx, source_info: mir::SourceInfo) {\n         bx.set_span(source_info.span);\n@@ -262,33 +309,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let Some(dbg_var) = var.dbg_var else { continue };\n             let Some(dbg_loc) = self.dbg_loc(var.source_info) else { continue };\n \n-            let mut direct_offset = Size::ZERO;\n-            // FIXME(eddyb) use smallvec here.\n-            let mut indirect_offsets = vec![];\n-            let mut place = base;\n-\n-            for elem in &var.projection[..] {\n-                match *elem {\n-                    mir::ProjectionElem::Deref => {\n-                        indirect_offsets.push(Size::ZERO);\n-                        place = bx.load_operand(place).deref(bx.cx());\n-                    }\n-                    mir::ProjectionElem::Field(field, _) => {\n-                        let i = field.index();\n-                        let offset = indirect_offsets.last_mut().unwrap_or(&mut direct_offset);\n-                        *offset += place.layout.fields.offset(i);\n-                        place = place.project_field(bx, i);\n-                    }\n-                    mir::ProjectionElem::Downcast(_, variant) => {\n-                        place = place.project_downcast(bx, variant);\n-                    }\n-                    _ => span_bug!(\n-                        var.source_info.span,\n-                        \"unsupported var debuginfo place `{:?}`\",\n-                        mir::Place { local, projection: var.projection },\n-                    ),\n-                }\n-            }\n+            let DebugInfoOffset { direct_offset, indirect_offsets, result: place } =\n+                calculate_debuginfo_offset(bx, local, &var, base);\n \n             // When targeting MSVC, create extra allocas for arguments instead of pointing multiple\n             // dbg_var_addr() calls into the same alloca with offsets. MSVC uses CodeView records"}]}