{"sha": "05981823bac91ba338110902fd435c6e3166f1d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1OTgxODIzYmFjOTFiYTMzODExMDkwMmZkNDM1YzZlMzE2NmYxZDY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-25T12:25:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-25T12:25:28Z"}, "message": "Merge #4135\n\n4135: Rename StructField -> Field r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "24b14acc3cfb37489c413c0dfba16dbc8b630869", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24b14acc3cfb37489c413c0dfba16dbc8b630869"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05981823bac91ba338110902fd435c6e3166f1d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepCw4CRBK7hj4Ov3rIwAAdHIIAEHnm4B6hRt6iBZvg/Vus0FN\n5bSbmfETSE+BUxCDixek7A43KKm7Uz2T0ZWrEX6TfmaPWwMJtt+8nEZJkcPYR0j9\nCKwsiwzFRuAx1arxh+w39iSRc1D0P4Sm8Wzvpo3eZrWzq26nxUXIqES49fzaZ/MY\nsJ5OmSnHGHPkBZEER3Brlu24NncHrMhQEf9zvOOO4phKY5FtV1qWiWdJnk7uEoS1\nPMYOMB9NuplpDO0mUa2LO+wujNtzRHK8uXrUargUOLqVwLT0ia6GRv/gXW50ogJW\naKNuaYRfpa9D8Usimt+ysrlib39KZE2Oh00mEsfH1xzSdxCmRmI8W3QTSKe3rmE=\n=f2wy\n-----END PGP SIGNATURE-----\n", "payload": "tree 24b14acc3cfb37489c413c0dfba16dbc8b630869\nparent 7bc71732300a57fad928393220ecbe5f751cc20f\nparent 970dbf871795650ecf49b7198d53bdcad9c612af\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587817528 +0000\ncommitter GitHub <noreply@github.com> 1587817528 +0000\n\nMerge #4135\n\n4135: Rename StructField -> Field r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05981823bac91ba338110902fd435c6e3166f1d6", "html_url": "https://github.com/rust-lang/rust/commit/05981823bac91ba338110902fd435c6e3166f1d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05981823bac91ba338110902fd435c6e3166f1d6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bc71732300a57fad928393220ecbe5f751cc20f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc71732300a57fad928393220ecbe5f751cc20f", "html_url": "https://github.com/rust-lang/rust/commit/7bc71732300a57fad928393220ecbe5f751cc20f"}, {"sha": "970dbf871795650ecf49b7198d53bdcad9c612af", "url": "https://api.github.com/repos/rust-lang/rust/commits/970dbf871795650ecf49b7198d53bdcad9c612af", "html_url": "https://github.com/rust-lang/rust/commit/970dbf871795650ecf49b7198d53bdcad9c612af"}], "stats": {"total": 280, "additions": 132, "deletions": 148}, "files": [{"sha": "3f645a1ddff3e4963a512a7f12e132d8a63bac5f", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -13,8 +13,8 @@ use hir_def::{\n     resolver::{HasResolver, Resolver},\n     type_ref::{Mutability, TypeRef},\n     AdtId, AssocContainerId, ConstId, DefWithBodyId, EnumId, FunctionId, GenericDefId, HasModule,\n-    ImplId, LocalEnumVariantId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId,\n-    StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n+    ImplId, LocalEnumVariantId, LocalFieldId, LocalModuleId, Lookup, ModuleId, StaticId, StructId,\n+    TraitId, TypeAliasId, TypeParamId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -294,9 +294,9 @@ impl Module {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct StructField {\n+pub struct Field {\n     pub(crate) parent: VariantDef,\n-    pub(crate) id: LocalStructFieldId,\n+    pub(crate) id: LocalFieldId,\n }\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -305,7 +305,7 @@ pub enum FieldSource {\n     Pos(ast::TupleFieldDef),\n }\n \n-impl StructField {\n+impl Field {\n     pub fn name(&self, db: &dyn HirDatabase) -> Name {\n         self.parent.variant_data(db).fields()[self.id].name.clone()\n     }\n@@ -331,7 +331,7 @@ impl StructField {\n     }\n }\n \n-impl HasVisibility for StructField {\n+impl HasVisibility for Field {\n     fn visibility(&self, db: &dyn HirDatabase) -> Visibility {\n         let variant_data = self.parent.variant_data(db);\n         let visibility = &variant_data.fields()[self.id].visibility;\n@@ -358,12 +358,12 @@ impl Struct {\n         db.struct_data(self.id).name.clone()\n     }\n \n-    pub fn fields(self, db: &dyn HirDatabase) -> Vec<StructField> {\n+    pub fn fields(self, db: &dyn HirDatabase) -> Vec<Field> {\n         db.struct_data(self.id)\n             .variant_data\n             .fields()\n             .iter()\n-            .map(|(id, _)| StructField { parent: self.into(), id })\n+            .map(|(id, _)| Field { parent: self.into(), id })\n             .collect()\n     }\n \n@@ -394,12 +394,12 @@ impl Union {\n         Type::from_def(db, self.id.lookup(db.upcast()).container.module(db.upcast()).krate, self.id)\n     }\n \n-    pub fn fields(self, db: &dyn HirDatabase) -> Vec<StructField> {\n+    pub fn fields(self, db: &dyn HirDatabase) -> Vec<Field> {\n         db.union_data(self.id)\n             .variant_data\n             .fields()\n             .iter()\n-            .map(|(id, _)| StructField { parent: self.into(), id })\n+            .map(|(id, _)| Field { parent: self.into(), id })\n             .collect()\n     }\n \n@@ -457,11 +457,11 @@ impl EnumVariant {\n         db.enum_data(self.parent.id).variants[self.id].name.clone()\n     }\n \n-    pub fn fields(self, db: &dyn HirDatabase) -> Vec<StructField> {\n+    pub fn fields(self, db: &dyn HirDatabase) -> Vec<Field> {\n         self.variant_data(db)\n             .fields()\n             .iter()\n-            .map(|(id, _)| StructField { parent: self.into(), id })\n+            .map(|(id, _)| Field { parent: self.into(), id })\n             .collect()\n     }\n \n@@ -527,7 +527,7 @@ pub enum VariantDef {\n impl_froms!(VariantDef: Struct, Union, EnumVariant);\n \n impl VariantDef {\n-    pub fn fields(self, db: &dyn HirDatabase) -> Vec<StructField> {\n+    pub fn fields(self, db: &dyn HirDatabase) -> Vec<Field> {\n         match self {\n             VariantDef::Struct(it) => it.fields(db),\n             VariantDef::Union(it) => it.fields(db),\n@@ -1148,15 +1148,15 @@ impl Type {\n         }\n     }\n \n-    pub fn fields(&self, db: &dyn HirDatabase) -> Vec<(StructField, Type)> {\n+    pub fn fields(&self, db: &dyn HirDatabase) -> Vec<(Field, Type)> {\n         if let Ty::Apply(a_ty) = &self.ty.value {\n             if let TypeCtor::Adt(AdtId::StructId(s)) = a_ty.ctor {\n                 let var_def = s.into();\n                 return db\n                     .field_types(var_def)\n                     .iter()\n                     .map(|(local_id, ty)| {\n-                        let def = StructField { parent: var_def.into(), id: local_id };\n+                        let def = Field { parent: var_def.into(), id: local_id };\n                         let ty = ty.clone().subst(&a_ty.parameters);\n                         (def, self.derived(ty))\n                     })\n@@ -1352,7 +1352,7 @@ impl ScopeDef {\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum AttrDef {\n     Module(Module),\n-    StructField(StructField),\n+    Field(Field),\n     Adt(Adt),\n     Function(Function),\n     EnumVariant(EnumVariant),\n@@ -1365,7 +1365,7 @@ pub enum AttrDef {\n \n impl_froms!(\n     AttrDef: Module,\n-    StructField,\n+    Field,\n     Adt(Struct, Enum, Union),\n     EnumVariant,\n     Static,"}, {"sha": "679ae8121569d78329558438d5901daa11c55bea", "filename": "crates/ra_hir/src/from_id.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -4,13 +4,13 @@\n //! are splitting the hir.\n \n use hir_def::{\n-    expr::PatId, AdtId, AssocItemId, AttrDefId, DefWithBodyId, EnumVariantId, GenericDefId,\n-    ModuleDefId, StructFieldId, VariantId,\n+    expr::PatId, AdtId, AssocItemId, AttrDefId, DefWithBodyId, EnumVariantId, FieldId,\n+    GenericDefId, ModuleDefId, VariantId,\n };\n \n use crate::{\n-    code_model::ItemInNs, Adt, AssocItem, AttrDef, DefWithBody, EnumVariant, GenericDef, Local,\n-    MacroDef, ModuleDef, StructField, VariantDef,\n+    code_model::ItemInNs, Adt, AssocItem, AttrDef, DefWithBody, EnumVariant, Field, GenericDef,\n+    Local, MacroDef, ModuleDef, VariantDef,\n };\n \n macro_rules! from_id {\n@@ -184,23 +184,23 @@ impl From<VariantDef> for VariantId {\n     }\n }\n \n-impl From<StructField> for StructFieldId {\n-    fn from(def: StructField) -> Self {\n-        StructFieldId { parent: def.parent.into(), local_id: def.id }\n+impl From<Field> for FieldId {\n+    fn from(def: Field) -> Self {\n+        FieldId { parent: def.parent.into(), local_id: def.id }\n     }\n }\n \n-impl From<StructFieldId> for StructField {\n-    fn from(def: StructFieldId) -> Self {\n-        StructField { parent: def.parent.into(), id: def.local_id }\n+impl From<FieldId> for Field {\n+    fn from(def: FieldId) -> Self {\n+        Field { parent: def.parent.into(), id: def.local_id }\n     }\n }\n \n impl From<AttrDef> for AttrDefId {\n     fn from(def: AttrDef) -> Self {\n         match def {\n             AttrDef::Module(it) => AttrDefId::ModuleId(it.id),\n-            AttrDef::StructField(it) => AttrDefId::StructFieldId(it.into()),\n+            AttrDef::Field(it) => AttrDefId::FieldId(it.into()),\n             AttrDef::Adt(it) => AttrDefId::AdtId(it.into()),\n             AttrDef::Function(it) => AttrDefId::FunctionId(it.id),\n             AttrDef::EnumVariant(it) => AttrDefId::EnumVariantId(it.into()),"}, {"sha": "63b8fd3694dada2a3112434fc37d3937af7e64e5", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -9,8 +9,8 @@ use hir_def::{\n use ra_syntax::ast;\n \n use crate::{\n-    db::HirDatabase, Const, Enum, EnumVariant, FieldSource, Function, ImplDef, MacroDef, Module,\n-    Static, Struct, StructField, Trait, TypeAlias, TypeParam, Union,\n+    db::HirDatabase, Const, Enum, EnumVariant, Field, FieldSource, Function, ImplDef, MacroDef,\n+    Module, Static, Struct, Trait, TypeAlias, TypeParam, Union,\n };\n \n pub use hir_expand::InFile;\n@@ -37,7 +37,7 @@ impl Module {\n     }\n }\n \n-impl HasSource for StructField {\n+impl HasSource for Field {\n     type Ast = FieldSource;\n     fn source(self, db: &dyn HirDatabase) -> InFile<FieldSource> {\n         let var = VariantId::from(self.parent);"}, {"sha": "312ef3814b32a12777129dbfdb1466380ffe32af", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -52,9 +52,9 @@ mod has_source;\n pub use crate::{\n     code_model::{\n         Adt, AsAssocItem, AssocItem, AssocItemContainer, AttrDef, Const, Crate, CrateDependency,\n-        DefWithBody, Docs, Enum, EnumVariant, FieldSource, Function, GenericDef, HasAttrs,\n+        DefWithBody, Docs, Enum, EnumVariant, Field, FieldSource, Function, GenericDef, HasAttrs,\n         HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, ScopeDef, Static, Struct,\n-        StructField, Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n+        Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n     },\n     has_source::HasSource,\n     semantics::{original_range, PathResolution, Semantics, SemanticsScope},"}, {"sha": "86bfb416c8864e0a45cf395c8dcb2ddc1b38546e", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -23,8 +23,8 @@ use crate::{\n     diagnostics::Diagnostic,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    AssocItem, Function, HirFileId, ImplDef, InFile, Local, MacroDef, Module, ModuleDef, Name,\n-    Origin, Path, ScopeDef, StructField, Trait, Type, TypeParam,\n+    AssocItem, Field, Function, HirFileId, ImplDef, InFile, Local, MacroDef, Module, ModuleDef,\n+    Name, Origin, Path, ScopeDef, Trait, Type, TypeParam,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -184,18 +184,15 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.analyze(call.syntax()).resolve_method_call(self.db, call)\n     }\n \n-    pub fn resolve_field(&self, field: &ast::FieldExpr) -> Option<StructField> {\n+    pub fn resolve_field(&self, field: &ast::FieldExpr) -> Option<Field> {\n         self.analyze(field.syntax()).resolve_field(self.db, field)\n     }\n \n-    pub fn resolve_record_field(\n-        &self,\n-        field: &ast::RecordField,\n-    ) -> Option<(StructField, Option<Local>)> {\n+    pub fn resolve_record_field(&self, field: &ast::RecordField) -> Option<(Field, Option<Local>)> {\n         self.analyze(field.syntax()).resolve_record_field(self.db, field)\n     }\n \n-    pub fn resolve_record_field_pat(&self, field: &ast::RecordFieldPat) -> Option<StructField> {\n+    pub fn resolve_record_field_pat(&self, field: &ast::RecordFieldPat) -> Option<Field> {\n         self.analyze(field.syntax()).resolve_record_field_pat(self.db, field)\n     }\n \n@@ -216,19 +213,13 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     // FIXME: use this instead?\n     // pub fn resolve_name_ref(&self, name_ref: &ast::NameRef) -> Option<???>;\n \n-    pub fn record_literal_missing_fields(\n-        &self,\n-        literal: &ast::RecordLit,\n-    ) -> Vec<(StructField, Type)> {\n+    pub fn record_literal_missing_fields(&self, literal: &ast::RecordLit) -> Vec<(Field, Type)> {\n         self.analyze(literal.syntax())\n             .record_literal_missing_fields(self.db, literal)\n             .unwrap_or_default()\n     }\n \n-    pub fn record_pattern_missing_fields(\n-        &self,\n-        pattern: &ast::RecordPat,\n-    ) -> Vec<(StructField, Type)> {\n+    pub fn record_pattern_missing_fields(&self, pattern: &ast::RecordPat) -> Vec<(Field, Type)> {\n         self.analyze(pattern.syntax())\n             .record_pattern_missing_fields(self.db, pattern)\n             .unwrap_or_default()\n@@ -359,8 +350,8 @@ to_def_impls![\n     (crate::Const, ast::ConstDef, const_to_def),\n     (crate::Static, ast::StaticDef, static_to_def),\n     (crate::Function, ast::FnDef, fn_to_def),\n-    (crate::StructField, ast::RecordFieldDef, record_field_to_def),\n-    (crate::StructField, ast::TupleFieldDef, tuple_field_to_def),\n+    (crate::Field, ast::RecordFieldDef, record_field_to_def),\n+    (crate::Field, ast::TupleFieldDef, tuple_field_to_def),\n     (crate::EnumVariant, ast::EnumVariant, enum_variant_to_def),\n     (crate::TypeParam, ast::TypeParam, type_param_to_def),\n     (crate::MacroDef, ast::MacroCall, macro_call_to_def), // this one is dubious, not all calls are macros"}, {"sha": "6f3b5b2da8695d49a7bd7d41f8dfc4f7441968c8", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -5,8 +5,8 @@ use hir_def::{\n     dyn_map::DynMap,\n     expr::PatId,\n     keys::{self, Key},\n-    ConstId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, GenericDefId, ImplId, ModuleId,\n-    StaticId, StructFieldId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId, VariantId,\n+    ConstId, DefWithBodyId, EnumId, EnumVariantId, FieldId, FunctionId, GenericDefId, ImplId,\n+    ModuleId, StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId, VariantId,\n };\n use hir_expand::{name::AsName, AstId, MacroDefKind};\n use ra_db::FileId;\n@@ -97,13 +97,13 @@ impl SourceToDefCtx<'_, '_> {\n     pub(super) fn record_field_to_def(\n         &mut self,\n         src: InFile<ast::RecordFieldDef>,\n-    ) -> Option<StructFieldId> {\n+    ) -> Option<FieldId> {\n         self.to_def(src, keys::RECORD_FIELD)\n     }\n     pub(super) fn tuple_field_to_def(\n         &mut self,\n         src: InFile<ast::TupleFieldDef>,\n-    ) -> Option<StructFieldId> {\n+    ) -> Option<FieldId> {\n         self.to_def(src, keys::TUPLE_FIELD)\n     }\n     pub(super) fn enum_variant_to_def("}, {"sha": "74d64c97d3148d318642f15cdb1440a29fe3cfeb", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -14,7 +14,7 @@ use hir_def::{\n     },\n     expr::{ExprId, Pat, PatId},\n     resolver::{resolver_for_scope, Resolver, TypeNs, ValueNs},\n-    AsMacroCall, DefWithBodyId, LocalStructFieldId, StructFieldId, VariantId,\n+    AsMacroCall, DefWithBodyId, FieldId, LocalFieldId, VariantId,\n };\n use hir_expand::{hygiene::Hygiene, name::AsName, HirFileId, InFile};\n use hir_ty::{\n@@ -27,8 +27,8 @@ use ra_syntax::{\n };\n \n use crate::{\n-    db::HirDatabase, semantics::PathResolution, Adt, Const, EnumVariant, Function, Local, MacroDef,\n-    ModPath, ModuleDef, Path, PathKind, Static, Struct, StructField, Trait, Type, TypeAlias,\n+    db::HirDatabase, semantics::PathResolution, Adt, Const, EnumVariant, Field, Function, Local,\n+    MacroDef, ModPath, ModuleDef, Path, PathKind, Static, Struct, Trait, Type, TypeAlias,\n     TypeParam,\n };\n use ra_db::CrateId;\n@@ -140,7 +140,7 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         field: &ast::FieldExpr,\n-    ) -> Option<StructField> {\n+    ) -> Option<Field> {\n         let expr_id = self.expr_id(db, &field.clone().into())?;\n         self.infer.as_ref()?.field_resolution(expr_id).map(|it| it.into())\n     }\n@@ -149,7 +149,7 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         field: &ast::RecordField,\n-    ) -> Option<(StructField, Option<Local>)> {\n+    ) -> Option<(Field, Option<Local>)> {\n         let expr = field.expr()?;\n         let expr_id = self.expr_id(db, &expr)?;\n         let local = if field.name_ref().is_some() {\n@@ -172,7 +172,7 @@ impl SourceAnalyzer {\n         &self,\n         _db: &dyn HirDatabase,\n         field: &ast::RecordFieldPat,\n-    ) -> Option<StructField> {\n+    ) -> Option<Field> {\n         let pat_id = self.pat_id(&field.pat()?)?;\n         let struct_field = self.infer.as_ref()?.record_field_pat_resolution(pat_id)?;\n         Some(struct_field.into())\n@@ -232,7 +232,7 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         literal: &ast::RecordLit,\n-    ) -> Option<Vec<(StructField, Type)>> {\n+    ) -> Option<Vec<(Field, Type)>> {\n         let krate = self.resolver.krate()?;\n         let body = self.body.as_ref()?;\n         let infer = self.infer.as_ref()?;\n@@ -253,7 +253,7 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         pattern: &ast::RecordPat,\n-    ) -> Option<Vec<(StructField, Type)>> {\n+    ) -> Option<Vec<(Field, Type)>> {\n         let krate = self.resolver.krate()?;\n         let body = self.body.as_ref()?;\n         let infer = self.infer.as_ref()?;\n@@ -276,14 +276,14 @@ impl SourceAnalyzer {\n         krate: CrateId,\n         substs: &Substs,\n         variant: VariantId,\n-        missing_fields: Vec<LocalStructFieldId>,\n-    ) -> Vec<(StructField, Type)> {\n+        missing_fields: Vec<LocalFieldId>,\n+    ) -> Vec<(Field, Type)> {\n         let field_types = db.field_types(variant);\n \n         missing_fields\n             .into_iter()\n             .map(|local_id| {\n-                let field = StructFieldId { parent: variant, local_id };\n+                let field = FieldId { parent: variant, local_id };\n                 let ty = field_types[local_id].clone().subst(substs);\n                 (field.into(), Type::new_with_resolver_inner(db, krate, &self.resolver, ty))\n             })"}, {"sha": "753becc3df7bce6b8950ada2c6c47760a9b1bc75", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -14,7 +14,7 @@ use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner, VisibilityOwner};\n use crate::{\n     body::CfgExpander, db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace,\n     type_ref::TypeRef, visibility::RawVisibility, EnumId, HasModule, LocalEnumVariantId,\n-    LocalStructFieldId, Lookup, ModuleId, StructId, UnionId, VariantId,\n+    LocalFieldId, Lookup, ModuleId, StructId, UnionId, VariantId,\n };\n \n /// Note that we use `StructData` for unions as well!\n@@ -38,14 +38,14 @@ pub struct EnumVariantData {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum VariantData {\n-    Record(Arena<StructFieldData>),\n-    Tuple(Arena<StructFieldData>),\n+    Record(Arena<FieldData>),\n+    Tuple(Arena<FieldData>),\n     Unit,\n }\n \n /// A single field of an enum variant or struct\n #[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct StructFieldData {\n+pub struct FieldData {\n     pub name: Name,\n     pub type_ref: TypeRef,\n     pub visibility: RawVisibility,\n@@ -133,15 +133,15 @@ impl VariantData {\n         }\n     }\n \n-    pub fn fields(&self) -> &Arena<StructFieldData> {\n-        const EMPTY: &Arena<StructFieldData> = &Arena::new();\n+    pub fn fields(&self) -> &Arena<FieldData> {\n+        const EMPTY: &Arena<FieldData> = &Arena::new();\n         match &self {\n             VariantData::Record(fields) | VariantData::Tuple(fields) => fields,\n             _ => EMPTY,\n         }\n     }\n \n-    pub fn field(&self, name: &Name) -> Option<LocalStructFieldId> {\n+    pub fn field(&self, name: &Name) -> Option<LocalFieldId> {\n         self.fields().iter().find_map(|(id, data)| if &data.name == name { Some(id) } else { None })\n     }\n \n@@ -155,7 +155,7 @@ impl VariantData {\n }\n \n impl HasChildSource for VariantId {\n-    type ChildId = LocalStructFieldId;\n+    type ChildId = LocalFieldId;\n     type Value = Either<ast::TupleFieldDef, ast::RecordFieldDef>;\n \n     fn child_source(&self, db: &dyn DefDatabase) -> InFile<ArenaMap<Self::ChildId, Self::Value>> {\n@@ -195,7 +195,7 @@ pub enum StructKind {\n fn lower_struct(\n     db: &dyn DefDatabase,\n     expander: &mut CfgExpander,\n-    trace: &mut Trace<StructFieldData, Either<ast::TupleFieldDef, ast::RecordFieldDef>>,\n+    trace: &mut Trace<FieldData, Either<ast::TupleFieldDef, ast::RecordFieldDef>>,\n     ast: &InFile<ast::StructKind>,\n ) -> StructKind {\n     match &ast.value {\n@@ -208,7 +208,7 @@ fn lower_struct(\n \n                 trace.alloc(\n                     || Either::Left(fd.clone()),\n-                    || StructFieldData {\n+                    || FieldData {\n                         name: Name::new_tuple_field(i),\n                         type_ref: TypeRef::from_ast_opt(fd.type_ref()),\n                         visibility: RawVisibility::from_ast(db, ast.with_value(fd.visibility())),\n@@ -226,7 +226,7 @@ fn lower_struct(\n \n                 trace.alloc(\n                     || Either::Right(fd.clone()),\n-                    || StructFieldData {\n+                    || FieldData {\n                         name: fd.name().map(|n| n.as_name()).unwrap_or_else(Name::missing),\n                         type_ref: TypeRef::from_ast_opt(fd.ascribed_type()),\n                         visibility: RawVisibility::from_ast(db, ast.with_value(fd.visibility())),"}, {"sha": "714a66b0276d05b5f36c4a411901820a7e12e62f", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -43,7 +43,7 @@ impl Attrs {\n                 };\n                 Attrs::from_attrs_owner(db, src.as_ref().map(|it| it as &dyn AttrsOwner))\n             }\n-            AttrDefId::StructFieldId(it) => {\n+            AttrDefId::FieldId(it) => {\n                 let src = it.parent.child_source(db);\n                 match &src.value[it.local_id] {\n                     Either::Left(_tuple) => Attrs::default(),"}, {"sha": "a885ec96d6b20bfad32887770c9e73904a3bad95", "filename": "crates/ra_hir_def/src/child_by_source.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -12,8 +12,8 @@ use crate::{\n     item_scope::ItemScope,\n     keys,\n     src::{HasChildSource, HasSource},\n-    AdtId, AssocItemId, DefWithBodyId, EnumId, EnumVariantId, ImplId, Lookup, ModuleDefId,\n-    ModuleId, StructFieldId, TraitId, VariantId,\n+    AdtId, AssocItemId, DefWithBodyId, EnumId, EnumVariantId, FieldId, ImplId, Lookup, ModuleDefId,\n+    ModuleId, TraitId, VariantId,\n };\n \n pub trait ChildBySource {\n@@ -140,7 +140,7 @@ impl ChildBySource for VariantId {\n         let arena_map = self.child_source(db);\n         let arena_map = arena_map.as_ref();\n         for (local_id, source) in arena_map.value.iter() {\n-            let id = StructFieldId { parent: *self, local_id };\n+            let id = FieldId { parent: *self, local_id };\n             match source {\n                 Either::Left(source) => {\n                     res[keys::TUPLE_FIELD].insert(arena_map.with_value(source.clone()), id)"}, {"sha": "b221ae1cece3fc9a44163382c302263d5ac2d408", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -43,7 +43,7 @@ impl Documentation {\n                 let src = def_map[module.local_id].declaration_source(db)?;\n                 docs_from_ast(&src.value)\n             }\n-            AttrDefId::StructFieldId(it) => {\n+            AttrDefId::FieldId(it) => {\n                 let src = it.parent.child_source(db);\n                 match &src.value[it.local_id] {\n                     Either::Left(_tuple) => None,"}, {"sha": "a7349a21dba6fdb39726d71c4425470ad28730af", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -8,7 +8,7 @@ use rustc_hash::FxHashMap;\n \n use crate::{\n     dyn_map::{DynMap, Policy},\n-    ConstId, EnumId, EnumVariantId, FunctionId, ImplId, StaticId, StructFieldId, StructId, TraitId,\n+    ConstId, EnumId, EnumVariantId, FieldId, FunctionId, ImplId, StaticId, StructId, TraitId,\n     TypeAliasId, TypeParamId, UnionId,\n };\n \n@@ -25,8 +25,8 @@ pub const UNION: Key<ast::UnionDef, UnionId> = Key::new();\n pub const ENUM: Key<ast::EnumDef, EnumId> = Key::new();\n \n pub const ENUM_VARIANT: Key<ast::EnumVariant, EnumVariantId> = Key::new();\n-pub const TUPLE_FIELD: Key<ast::TupleFieldDef, StructFieldId> = Key::new();\n-pub const RECORD_FIELD: Key<ast::RecordFieldDef, StructFieldId> = Key::new();\n+pub const TUPLE_FIELD: Key<ast::TupleFieldDef, FieldId> = Key::new();\n+pub const RECORD_FIELD: Key<ast::RecordFieldDef, FieldId> = Key::new();\n pub const TYPE_PARAM: Key<ast::TypeParam, TypeParamId> = Key::new();\n \n pub const MACRO: Key<ast::MacroCall, MacroDefId> = Key::new();"}, {"sha": "518772e8abd695a1a5517fab3f5023190c31e283", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -133,12 +133,12 @@ pub struct EnumVariantId {\n pub type LocalEnumVariantId = Idx<adt::EnumVariantData>;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct StructFieldId {\n+pub struct FieldId {\n     pub parent: VariantId,\n-    pub local_id: LocalStructFieldId,\n+    pub local_id: LocalFieldId,\n }\n \n-pub type LocalStructFieldId = Idx<adt::StructFieldData>;\n+pub type LocalFieldId = Idx<adt::FieldData>;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ConstId(salsa::InternId);\n@@ -299,7 +299,7 @@ impl From<AssocItemId> for GenericDefId {\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum AttrDefId {\n     ModuleId(ModuleId),\n-    StructFieldId(StructFieldId),\n+    FieldId(FieldId),\n     AdtId(AdtId),\n     FunctionId(FunctionId),\n     EnumVariantId(EnumVariantId),\n@@ -313,7 +313,7 @@ pub enum AttrDefId {\n \n impl_froms!(\n     AttrDefId: ModuleId,\n-    StructFieldId,\n+    FieldId,\n     AdtId(StructId, EnumId, UnionId),\n     EnumVariantId,\n     StaticId,"}, {"sha": "fdb49560bacb69c96c491c28dbe3cd933407d787", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -3,7 +3,7 @@\n use std::sync::Arc;\n \n use hir_def::{\n-    db::DefDatabase, DefWithBodyId, GenericDefId, ImplId, LocalStructFieldId, TraitId, TypeParamId,\n+    db::DefDatabase, DefWithBodyId, GenericDefId, ImplId, LocalFieldId, TraitId, TypeParamId,\n     VariantId,\n };\n use ra_arena::map::ArenaMap;\n@@ -43,7 +43,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn impl_trait(&self, def: ImplId) -> Option<Binders<TraitRef>>;\n \n     #[salsa::invoke(crate::lower::field_types_query)]\n-    fn field_types(&self, var: VariantId) -> Arc<ArenaMap<LocalStructFieldId, Binders<Ty>>>;\n+    fn field_types(&self, var: VariantId) -> Arc<ArenaMap<LocalFieldId, Binders<Ty>>>;\n \n     #[salsa::invoke(crate::callable_item_sig)]\n     fn callable_item_signature(&self, def: CallableDef) -> PolyFnSig;"}, {"sha": "f04968e145bdd769724251fc7d80d8ca9ad2a5c6", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -24,7 +24,7 @@ pub use hir_def::{\n         ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Literal, LogicOp,\n         MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement, UnaryOp,\n     },\n-    LocalStructFieldId, VariantId,\n+    LocalFieldId, VariantId,\n };\n \n pub struct ExprValidator<'a, 'b: 'a> {\n@@ -83,7 +83,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         id: ExprId,\n         db: &dyn HirDatabase,\n         variant_def: VariantId,\n-        missed_fields: Vec<LocalStructFieldId>,\n+        missed_fields: Vec<LocalFieldId>,\n     ) {\n         // XXX: only look at source_map if we do have missing fields\n         let (_, source_map) = db.body_with_source_map(self.func.into());\n@@ -112,7 +112,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         id: PatId,\n         db: &dyn HirDatabase,\n         variant_def: VariantId,\n-        missed_fields: Vec<LocalStructFieldId>,\n+        missed_fields: Vec<LocalFieldId>,\n     ) {\n         // XXX: only look at source_map if we do have missing fields\n         let (_, source_map) = db.body_with_source_map(self.func.into());\n@@ -256,7 +256,7 @@ pub fn record_literal_missing_fields(\n     infer: &InferenceResult,\n     id: ExprId,\n     expr: &Expr,\n-) -> Option<(VariantId, Vec<LocalStructFieldId>, /*exhaustive*/ bool)> {\n+) -> Option<(VariantId, Vec<LocalFieldId>, /*exhaustive*/ bool)> {\n     let (fields, exhausitve) = match expr {\n         Expr::RecordLit { path: _, fields, spread } => (fields, spread.is_none()),\n         _ => return None,\n@@ -270,7 +270,7 @@ pub fn record_literal_missing_fields(\n     let variant_data = variant_data(db.upcast(), variant_def);\n \n     let specified_fields: FxHashSet<_> = fields.iter().map(|f| &f.name).collect();\n-    let missed_fields: Vec<LocalStructFieldId> = variant_data\n+    let missed_fields: Vec<LocalFieldId> = variant_data\n         .fields()\n         .iter()\n         .filter_map(|(f, d)| if specified_fields.contains(&d.name) { None } else { Some(f) })\n@@ -286,7 +286,7 @@ pub fn record_pattern_missing_fields(\n     infer: &InferenceResult,\n     id: PatId,\n     pat: &Pat,\n-) -> Option<(VariantId, Vec<LocalStructFieldId>, /*exhaustive*/ bool)> {\n+) -> Option<(VariantId, Vec<LocalFieldId>, /*exhaustive*/ bool)> {\n     let (fields, exhaustive) = match pat {\n         Pat::Record { path: _, args, ellipsis } => (args, !ellipsis),\n         _ => return None,\n@@ -300,7 +300,7 @@ pub fn record_pattern_missing_fields(\n     let variant_data = variant_data(db.upcast(), variant_def);\n \n     let specified_fields: FxHashSet<_> = fields.iter().map(|f| &f.name).collect();\n-    let missed_fields: Vec<LocalStructFieldId> = variant_data\n+    let missed_fields: Vec<LocalFieldId> = variant_data\n         .fields()\n         .iter()\n         .filter_map(|(f, d)| if specified_fields.contains(&d.name) { None } else { Some(f) })"}, {"sha": "6a53be621d2752cf803d4f63e2a80e6bdf69f3bc", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -28,7 +28,7 @@ use hir_def::{\n     path::{path, Path},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{Mutability, TypeRef},\n-    AdtId, AssocItemId, DefWithBodyId, FunctionId, StructFieldId, TraitId, TypeAliasId, VariantId,\n+    AdtId, AssocItemId, DefWithBodyId, FieldId, FunctionId, TraitId, TypeAliasId, VariantId,\n };\n use hir_expand::{diagnostics::DiagnosticSink, name::name};\n use ra_arena::map::ArenaMap;\n@@ -124,10 +124,10 @@ pub struct InferenceResult {\n     /// For each method call expr, records the function it resolves to.\n     method_resolutions: FxHashMap<ExprId, FunctionId>,\n     /// For each field access expr, records the field it resolves to.\n-    field_resolutions: FxHashMap<ExprId, StructFieldId>,\n+    field_resolutions: FxHashMap<ExprId, FieldId>,\n     /// For each field in record literal, records the field it resolves to.\n-    record_field_resolutions: FxHashMap<ExprId, StructFieldId>,\n-    record_field_pat_resolutions: FxHashMap<PatId, StructFieldId>,\n+    record_field_resolutions: FxHashMap<ExprId, FieldId>,\n+    record_field_pat_resolutions: FxHashMap<PatId, FieldId>,\n     /// For each struct literal, records the variant it resolves to.\n     variant_resolutions: FxHashMap<ExprOrPatId, VariantId>,\n     /// For each associated item record what it resolves to\n@@ -142,13 +142,13 @@ impl InferenceResult {\n     pub fn method_resolution(&self, expr: ExprId) -> Option<FunctionId> {\n         self.method_resolutions.get(&expr).copied()\n     }\n-    pub fn field_resolution(&self, expr: ExprId) -> Option<StructFieldId> {\n+    pub fn field_resolution(&self, expr: ExprId) -> Option<FieldId> {\n         self.field_resolutions.get(&expr).copied()\n     }\n-    pub fn record_field_resolution(&self, expr: ExprId) -> Option<StructFieldId> {\n+    pub fn record_field_resolution(&self, expr: ExprId) -> Option<FieldId> {\n         self.record_field_resolutions.get(&expr).copied()\n     }\n-    pub fn record_field_pat_resolution(&self, pat: PatId) -> Option<StructFieldId> {\n+    pub fn record_field_pat_resolution(&self, pat: PatId) -> Option<FieldId> {\n         self.record_field_pat_resolutions.get(&pat).copied()\n     }\n     pub fn variant_resolution_for_expr(&self, id: ExprId) -> Option<VariantId> {\n@@ -249,7 +249,7 @@ impl<'a> InferenceContext<'a> {\n         self.result.method_resolutions.insert(expr, func);\n     }\n \n-    fn write_field_resolution(&mut self, expr: ExprId, field: StructFieldId) {\n+    fn write_field_resolution(&mut self, expr: ExprId, field: FieldId) {\n         self.result.field_resolutions.insert(expr, field);\n     }\n "}, {"sha": "83f946eeea0567155459f8931d878ac4cfa6188d", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -8,7 +8,7 @@ use hir_def::{\n     expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     path::{GenericArg, GenericArgs},\n     resolver::resolver_for_expr,\n-    AdtId, AssocContainerId, Lookup, StructFieldId,\n+    AdtId, AssocContainerId, FieldId, Lookup,\n };\n use hir_expand::name::Name;\n use ra_syntax::ast::RangeOp;\n@@ -216,9 +216,7 @@ impl<'a> InferenceContext<'a> {\n                 for (field_idx, field) in fields.iter().enumerate() {\n                     let field_def =\n                         variant_data.as_ref().and_then(|it| match it.field(&field.name) {\n-                            Some(local_id) => {\n-                                Some(StructFieldId { parent: def_id.unwrap(), local_id })\n-                            }\n+                            Some(local_id) => Some(FieldId { parent: def_id.unwrap(), local_id }),\n                             None => {\n                                 self.push_diagnostic(InferenceDiagnostic::NoSuchField {\n                                     expr: tgt_expr,\n@@ -257,7 +255,7 @@ impl<'a> InferenceContext<'a> {\n                             .and_then(|idx| a_ty.parameters.0.get(idx).cloned()),\n                         TypeCtor::Adt(AdtId::StructId(s)) => {\n                             self.db.struct_data(s).variant_data.field(name).map(|local_id| {\n-                                let field = StructFieldId { parent: s.into(), local_id };\n+                                let field = FieldId { parent: s.into(), local_id };\n                                 self.write_field_resolution(tgt_expr, field);\n                                 self.db.field_types(s.into())[field.local_id]\n                                     .clone()"}, {"sha": "54ec870dfc8a7362980a0127aad718fdd7424911", "filename": "crates/ra_hir_ty/src/infer/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -7,7 +7,7 @@ use hir_def::{\n     expr::{BindingAnnotation, Pat, PatId, RecordFieldPat},\n     path::Path,\n     type_ref::Mutability,\n-    StructFieldId,\n+    FieldId,\n };\n use hir_expand::name::Name;\n use test_utils::tested_by;\n@@ -69,7 +69,7 @@ impl<'a> InferenceContext<'a> {\n         for subpat in subpats {\n             let matching_field = var_data.as_ref().and_then(|it| it.field(&subpat.name));\n             if let Some(local_id) = matching_field {\n-                let field_def = StructFieldId { parent: def.unwrap(), local_id };\n+                let field_def = FieldId { parent: def.unwrap(), local_id };\n                 self.result.record_field_pat_resolutions.insert(subpat.pat, field_def);\n             }\n "}, {"sha": "b572142966165c96421d76343736aebcb6c5ddf6", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -18,8 +18,8 @@ use hir_def::{\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n     AdtId, AssocContainerId, ConstId, EnumId, EnumVariantId, FunctionId, GenericDefId, HasModule,\n-    ImplId, LocalStructFieldId, Lookup, StaticId, StructId, TraitId, TypeAliasId, TypeParamId,\n-    UnionId, VariantId,\n+    ImplId, LocalFieldId, Lookup, StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n+    VariantId,\n };\n use ra_arena::map::ArenaMap;\n use ra_db::CrateId;\n@@ -682,7 +682,7 @@ pub fn callable_item_sig(db: &dyn HirDatabase, def: CallableDef) -> PolyFnSig {\n pub(crate) fn field_types_query(\n     db: &dyn HirDatabase,\n     variant_id: VariantId,\n-) -> Arc<ArenaMap<LocalStructFieldId, Binders<Ty>>> {\n+) -> Arc<ArenaMap<LocalFieldId, Binders<Ty>>> {\n     let var_data = variant_data(db.upcast(), variant_id);\n     let (resolver, def): (_, GenericDefId) = match variant_id {\n         VariantId::StructId(it) => (it.resolver(db.upcast()), it.into()),"}, {"sha": "7633cd7fd6b278bc6698b07074b0e53eb27ca3fc", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -15,12 +15,7 @@ use crate::{\n };\n \n impl Completions {\n-    pub(crate) fn add_field(\n-        &mut self,\n-        ctx: &CompletionContext,\n-        field: hir::StructField,\n-        ty: &Type,\n-    ) {\n+    pub(crate) fn add_field(&mut self, ctx: &CompletionContext, field: hir::Field, ty: &Type) {\n         let is_deprecated = is_deprecated(field, ctx.db);\n         let ty = ty.display(ctx.db).to_string();\n         let name = field.name(ctx.db);"}, {"sha": "914a8b471e3f84bcb9484fd15fffdf1d7f1aa43a", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -189,7 +189,7 @@ impl TryToNav for Definition {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n         match self {\n             Definition::Macro(it) => Some(it.to_nav(db)),\n-            Definition::StructField(it) => Some(it.to_nav(db)),\n+            Definition::Field(it) => Some(it.to_nav(db)),\n             Definition::ModuleDef(it) => it.try_to_nav(db),\n             Definition::SelfType(it) => Some(it.to_nav(db)),\n             Definition::Local(it) => Some(it.to_nav(db)),\n@@ -286,7 +286,7 @@ impl ToNav for hir::ImplDef {\n     }\n }\n \n-impl ToNav for hir::StructField {\n+impl ToNav for hir::Field {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n "}, {"sha": "58c799eca7bdee37481dd49cbc42ff9abc99980f", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -76,7 +76,7 @@ fn hover_text(\n \n fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String> {\n     match def {\n-        Definition::StructField(f) => Some(f.parent_def(db).name(db)),\n+        Definition::Field(f) => Some(f.parent_def(db).name(db)),\n         Definition::Local(l) => l.parent(db).name(db),\n         Definition::ModuleDef(md) => match md {\n             ModuleDef::Function(f) => match f.as_assoc_item(db)?.container(db) {\n@@ -116,7 +116,7 @@ fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<Strin\n             let src = it.source(db);\n             hover_text(src.value.doc_comment_text(), Some(macro_label(&src.value)), mod_path)\n         }\n-        Definition::StructField(it) => {\n+        Definition::Field(it) => {\n             let src = it.source(db);\n             match src.value {\n                 FieldSource::Named(it) => {"}, {"sha": "555ccf2952d77bbc1627c62f14077ac618dc5270", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -144,7 +144,7 @@ fn find_name(\n \n fn decl_access(def: &Definition, syntax: &SyntaxNode, range: TextRange) -> Option<ReferenceAccess> {\n     match def {\n-        Definition::Local(_) | Definition::StructField(_) => {}\n+        Definition::Local(_) | Definition::Field(_) => {}\n         _ => return None,\n     };\n "}, {"sha": "fd17bc9f2fef2aa606036e56b82220803d74ac0e", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -51,12 +51,12 @@ fn source_edit_from_reference(reference: Reference, new_name: &str) -> SourceFil\n     let mut replacement_text = String::new();\n     let file_id = reference.file_range.file_id;\n     let range = match reference.kind {\n-        ReferenceKind::StructFieldShorthandForField => {\n+        ReferenceKind::FieldShorthandForField => {\n             replacement_text.push_str(new_name);\n             replacement_text.push_str(\": \");\n             TextRange::new(reference.file_range.range.start(), reference.file_range.range.start())\n         }\n-        ReferenceKind::StructFieldShorthandForLocal => {\n+        ReferenceKind::FieldShorthandForLocal => {\n             replacement_text.push_str(\": \");\n             replacement_text.push_str(new_name);\n             TextRange::new(reference.file_range.range.end(), reference.file_range.range.end())"}, {"sha": "be0f8c827aae97cdb89f51a448505452c2a8b3c2", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -422,7 +422,7 @@ fn highlight_element(\n fn highlight_name(db: &RootDatabase, def: Definition) -> Highlight {\n     match def {\n         Definition::Macro(_) => HighlightTag::Macro,\n-        Definition::StructField(_) => HighlightTag::Field,\n+        Definition::Field(_) => HighlightTag::Field,\n         Definition::ModuleDef(def) => match def {\n             hir::ModuleDef::Module(_) => HighlightTag::Module,\n             hir::ModuleDef::Function(_) => HighlightTag::Function,"}, {"sha": "7cd2384e9b5f824f89d4131cedf2d7c7e6e4b84e", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -6,8 +6,8 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution, Semantics,\n-    StructField, TypeParam, Visibility,\n+    Field, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n+    Semantics, TypeParam, Visibility,\n };\n use ra_prof::profile;\n use ra_syntax::{\n@@ -22,7 +22,7 @@ use crate::RootDatabase;\n #[derive(Debug, PartialEq, Eq)]\n pub enum Definition {\n     Macro(MacroDef),\n-    StructField(StructField),\n+    Field(Field),\n     ModuleDef(ModuleDef),\n     SelfType(ImplDef),\n     Local(Local),\n@@ -33,7 +33,7 @@ impl Definition {\n     pub fn module(&self, db: &RootDatabase) -> Option<Module> {\n         match self {\n             Definition::Macro(it) => it.module(db),\n-            Definition::StructField(it) => Some(it.parent_def(db).module(db)),\n+            Definition::Field(it) => Some(it.parent_def(db).module(db)),\n             Definition::ModuleDef(it) => it.module(db),\n             Definition::SelfType(it) => Some(it.module(db)),\n             Definition::Local(it) => Some(it.module(db)),\n@@ -46,7 +46,7 @@ impl Definition {\n \n         match self {\n             Definition::Macro(_) => None,\n-            Definition::StructField(sf) => Some(sf.visibility(db)),\n+            Definition::Field(sf) => Some(sf.visibility(db)),\n             Definition::ModuleDef(def) => module?.visibility_of(db, def),\n             Definition::SelfType(_) => None,\n             Definition::Local(_) => None,\n@@ -57,7 +57,7 @@ impl Definition {\n     pub fn name(&self, db: &RootDatabase) -> Option<Name> {\n         let name = match self {\n             Definition::Macro(it) => it.name(db)?,\n-            Definition::StructField(it) => it.name(db),\n+            Definition::Field(it) => it.name(db),\n             Definition::ModuleDef(def) => match def {\n                 hir::ModuleDef::Module(it) => it.name(db)?,\n                 hir::ModuleDef::Function(it) => it.name(db),\n@@ -124,8 +124,8 @@ fn classify_name_inner(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Opti\n                 Some(Definition::Local(local))\n             },\n             ast::RecordFieldDef(it) => {\n-                let field: hir::StructField = sema.to_def(&it)?;\n-                Some(Definition::StructField(field))\n+                let field: hir::Field = sema.to_def(&it)?;\n+                Some(Definition::Field(field))\n             },\n             ast::Module(it) => {\n                 let def = sema.to_def(&it)?;\n@@ -213,15 +213,15 @@ pub fn classify_name_ref(\n     if let Some(field_expr) = ast::FieldExpr::cast(parent.clone()) {\n         tested_by!(goto_def_for_fields; force);\n         if let Some(field) = sema.resolve_field(&field_expr) {\n-            return Some(NameRefClass::Definition(Definition::StructField(field)));\n+            return Some(NameRefClass::Definition(Definition::Field(field)));\n         }\n     }\n \n     if let Some(record_field) = ast::RecordField::for_field_name(name_ref) {\n         tested_by!(goto_def_for_record_fields; force);\n         tested_by!(goto_def_for_field_init_shorthand; force);\n         if let Some((field, local)) = sema.resolve_record_field(&record_field) {\n-            let field = Definition::StructField(field);\n+            let field = Definition::Field(field);\n             let res = match local {\n                 None => NameRefClass::Definition(field),\n                 Some(local) => NameRefClass::FieldShorthand { field, local },\n@@ -233,7 +233,7 @@ pub fn classify_name_ref(\n     if let Some(record_field_pat) = ast::RecordFieldPat::cast(parent.clone()) {\n         tested_by!(goto_def_for_record_field_pats; force);\n         if let Some(field) = sema.resolve_record_field_pat(&record_field_pat) {\n-            let field = Definition::StructField(field);\n+            let field = Definition::Field(field);\n             return Some(NameRefClass::Definition(field));\n         }\n     }"}, {"sha": "b464959fce0eb28da6c727fedf6fac2acd882182", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05981823bac91ba338110902fd435c6e3166f1d6/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=05981823bac91ba338110902fd435c6e3166f1d6", "patch": "@@ -28,8 +28,8 @@ pub struct Reference {\n \n #[derive(Debug, Clone, PartialEq)]\n pub enum ReferenceKind {\n-    StructFieldShorthandForField,\n-    StructFieldShorthandForLocal,\n+    FieldShorthandForField,\n+    FieldShorthandForLocal,\n     StructLiteral,\n     Other,\n }\n@@ -242,14 +242,14 @@ impl Definition {\n                     }\n                     Some(NameRefClass::FieldShorthand { local, field }) => {\n                         match self {\n-                            Definition::StructField(_) if &field == self => refs.push(Reference {\n+                            Definition::Field(_) if &field == self => refs.push(Reference {\n                                 file_range: sema.original_range(name_ref.syntax()),\n-                                kind: ReferenceKind::StructFieldShorthandForField,\n+                                kind: ReferenceKind::FieldShorthandForField,\n                                 access: reference_access(&field, &name_ref),\n                             }),\n                             Definition::Local(l) if &local == l => refs.push(Reference {\n                                 file_range: sema.original_range(name_ref.syntax()),\n-                                kind: ReferenceKind::StructFieldShorthandForLocal,\n+                                kind: ReferenceKind::FieldShorthandForLocal,\n                                 access: reference_access(&Definition::Local(local), &name_ref),\n                             }),\n \n@@ -267,7 +267,7 @@ impl Definition {\n fn reference_access(def: &Definition, name_ref: &ast::NameRef) -> Option<ReferenceAccess> {\n     // Only Locals and Fields have accesses for now.\n     match def {\n-        Definition::Local(_) | Definition::StructField(_) => {}\n+        Definition::Local(_) | Definition::Field(_) => {}\n         _ => return None,\n     };\n "}]}