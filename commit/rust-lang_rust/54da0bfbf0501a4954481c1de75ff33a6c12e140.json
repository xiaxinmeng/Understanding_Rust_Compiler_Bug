{"sha": "54da0bfbf0501a4954481c1de75ff33a6c12e140", "node_id": "C_kwDOAAsO6NoAKDU0ZGEwYmZiZjA1MDFhNDk1NDQ4MWMxZGU3NWZmMzNhNmMxMmUxNDA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-27T10:06:41Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-27T10:06:41Z"}, "message": "Record method resolution for call expressions", "tree": {"sha": "72fbd5843ec523d7a67d2afa2562edb4778cf88d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72fbd5843ec523d7a67d2afa2562edb4778cf88d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54da0bfbf0501a4954481c1de75ff33a6c12e140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54da0bfbf0501a4954481c1de75ff33a6c12e140", "html_url": "https://github.com/rust-lang/rust/commit/54da0bfbf0501a4954481c1de75ff33a6c12e140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54da0bfbf0501a4954481c1de75ff33a6c12e140/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9814d798411a4b1b258c710f86626bd1997e406f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9814d798411a4b1b258c710f86626bd1997e406f", "html_url": "https://github.com/rust-lang/rust/commit/9814d798411a4b1b258c710f86626bd1997e406f"}], "stats": {"total": 196, "additions": 119, "deletions": 77}, "files": [{"sha": "b3a71ca0a374677cf12865f630b0705e647d80c5", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=54da0bfbf0501a4954481c1de75ff33a6c12e140", "patch": "@@ -347,6 +347,7 @@ pub mod known {\n         recursion_limit,\n         feature,\n         // known methods of lang items\n+        call_once,\n         eq,\n         ne,\n         ge,"}, {"sha": "8faef7bf71e9815fd0dd3bd512c85332d31b9cb6", "filename": "crates/hir-ty/src/builder.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs?ref=54da0bfbf0501a4954481c1de75ff33a6c12e140", "patch": "@@ -63,7 +63,7 @@ impl<D> TyBuilder<D> {\n     }\n \n     fn build_internal(self) -> (D, Substitution) {\n-        assert_eq!(self.vec.len(), self.param_kinds.len());\n+        assert_eq!(self.vec.len(), self.param_kinds.len(), \"{:?}\", &self.param_kinds);\n         for (a, e) in self.vec.iter().zip(self.param_kinds.iter()) {\n             self.assert_match_kind(a, e);\n         }\n@@ -282,6 +282,21 @@ impl TyBuilder<Tuple> {\n         let (Tuple(size), subst) = self.build_internal();\n         TyKind::Tuple(size, subst).intern(Interner)\n     }\n+\n+    pub fn tuple_with<I>(elements: I) -> Ty\n+    where\n+        I: IntoIterator<Item = Ty>,\n+        <I as IntoIterator>::IntoIter: ExactSizeIterator,\n+    {\n+        let elements = elements.into_iter();\n+        let len = elements.len();\n+        let mut b =\n+            TyBuilder::new(Tuple(len), iter::repeat(ParamKind::Type).take(len).collect(), None);\n+        for e in elements {\n+            b = b.push(e);\n+        }\n+        b.build()\n+    }\n }\n \n impl TyBuilder<TraitId> {"}, {"sha": "334434c30caaac4283b90126960c51c513a9a892", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=54da0bfbf0501a4954481c1de75ff33a6c12e140", "patch": "@@ -331,11 +331,18 @@ impl<'a> InferenceContext<'a> {\n                     derefed_callee.callable_sig(self.db).map_or(false, |sig| sig.is_varargs)\n                         || res.is_none();\n                 let (param_tys, ret_ty) = match res {\n-                    Some(res) => {\n+                    Some((func, params, ret_ty)) => {\n                         let adjustments = auto_deref_adjust_steps(&derefs);\n                         // FIXME: Handle call adjustments for Fn/FnMut\n                         self.write_expr_adj(*callee, adjustments);\n-                        res\n+                        if let Some((trait_, func)) = func {\n+                            let subst = TyBuilder::subst_for_def(self.db, trait_, None)\n+                                .push(callee_ty.clone())\n+                                .push(TyBuilder::tuple_with(params.iter().cloned()))\n+                                .build();\n+                            self.write_method_resolution(tgt_expr, func, subst.clone());\n+                        }\n+                        (params, ret_ty)\n                     }\n                     None => (Vec::new(), self.err_ty()), // FIXME diagnostic\n                 };\n@@ -586,6 +593,7 @@ impl<'a> InferenceContext<'a> {\n                 self.resolve_associated_type(inner_ty, self.resolve_future_future_output())\n             }\n             Expr::Try { expr } => {\n+                // FIXME: Note down method resolution her\n                 let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n                 self.resolve_associated_type(inner_ty, self.resolve_ops_try_ok())\n             }\n@@ -626,6 +634,7 @@ impl<'a> InferenceContext<'a> {\n             Expr::UnaryOp { expr, op } => {\n                 let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n                 let inner_ty = self.resolve_ty_shallow(&inner_ty);\n+                // FIXME: Note down method resolution her\n                 match op {\n                     UnaryOp::Deref => {\n                         autoderef::deref(&mut self.table, inner_ty).unwrap_or_else(|| self.err_ty())\n@@ -732,6 +741,7 @@ impl<'a> InferenceContext<'a> {\n                 }\n             }\n             Expr::Index { base, index } => {\n+                // FIXME: note down method resolution for the `index`/`index_mut` function\n                 let base_ty = self.infer_expr_inner(*base, &Expectation::none());\n                 let index_ty = self.infer_expr(*index, &Expectation::none());\n "}, {"sha": "46ed3533c8c7b41d38aeb51f23bedcfa84c45409", "filename": "crates/hir-ty/src/infer/unify.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs?ref=54da0bfbf0501a4954481c1de75ff33a6c12e140", "patch": "@@ -8,6 +8,7 @@ use chalk_ir::{\n };\n use chalk_solve::infer::ParameterEnaVariableExt;\n use ena::unify::UnifyKey;\n+use hir_def::{FunctionId, TraitId};\n use hir_expand::name;\n use stdx::never;\n \n@@ -626,18 +627,26 @@ impl<'a> InferenceTable<'a> {\n         }\n     }\n \n-    pub(crate) fn callable_sig(&mut self, ty: &Ty, num_args: usize) -> Option<(Vec<Ty>, Ty)> {\n+    pub(crate) fn callable_sig(\n+        &mut self,\n+        ty: &Ty,\n+        num_args: usize,\n+    ) -> Option<(Option<(TraitId, FunctionId)>, Vec<Ty>, Ty)> {\n         match ty.callable_sig(self.db) {\n-            Some(sig) => Some((sig.params().to_vec(), sig.ret().clone())),\n+            Some(sig) => Some((None, sig.params().to_vec(), sig.ret().clone())),\n             None => self.callable_sig_from_fn_trait(ty, num_args),\n         }\n     }\n \n-    fn callable_sig_from_fn_trait(&mut self, ty: &Ty, num_args: usize) -> Option<(Vec<Ty>, Ty)> {\n+    fn callable_sig_from_fn_trait(\n+        &mut self,\n+        ty: &Ty,\n+        num_args: usize,\n+    ) -> Option<(Option<(TraitId, FunctionId)>, Vec<Ty>, Ty)> {\n         let krate = self.trait_env.krate;\n         let fn_once_trait = FnTrait::FnOnce.get_id(self.db, krate)?;\n-        let output_assoc_type =\n-            self.db.trait_data(fn_once_trait).associated_type_by_name(&name![Output])?;\n+        let trait_data = self.db.trait_data(fn_once_trait);\n+        let output_assoc_type = trait_data.associated_type_by_name(&name![Output])?;\n \n         let mut arg_tys = vec![];\n         let arg_ty = TyBuilder::tuple(num_args)\n@@ -675,7 +684,11 @@ impl<'a> InferenceTable<'a> {\n         if self.db.trait_solve(krate, canonical.value.cast(Interner)).is_some() {\n             self.register_obligation(obligation.goal);\n             let return_ty = self.normalize_projection_ty(projection);\n-            Some((arg_tys, return_ty))\n+            Some((\n+                Some(fn_once_trait).zip(trait_data.method_by_name(&name!(call_once))),\n+                arg_tys,\n+                return_ty,\n+            ))\n         } else {\n             None\n         }"}, {"sha": "fb736982ed09f7d48982e1c059ac6db3da69db86", "filename": "crates/hir-ty/src/tests/method_resolution.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=54da0bfbf0501a4954481c1de75ff33a6c12e140", "patch": "@@ -986,14 +986,13 @@ fn main() {\n }\n \n #[test]\n-fn method_resolution_encountering_fn_type() {\n+fn explicit_fn_once_call_fn_item() {\n     check_types(\n         r#\"\n-//- /main.rs\n+//- minicore: fn\n fn foo() {}\n-trait FnOnce { fn call(self); }\n-fn test() { foo.call(); }\n-          //^^^^^^^^^^ {unknown}\n+fn test() { foo.call_once(); }\n+          //^^^^^^^^^^^^^^^ ()\n \"#,\n     );\n }"}, {"sha": "d8c3588acf6359bed2b10e02be111fa553b91ea5", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 28, "deletions": 41, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=54da0bfbf0501a4954481c1de75ff33a6c12e140", "patch": "@@ -1757,25 +1757,19 @@ fn test() {\n fn fn_trait() {\n     check_infer_with_mismatches(\n         r#\"\n-trait FnOnce<Args> {\n-    type Output;\n-\n-    fn call_once(self, args: Args) -> <Self as FnOnce<Args>>::Output;\n-}\n+//- minicore: fn\n \n fn test<F: FnOnce(u32, u64) -> u128>(f: F) {\n     f.call_once((1, 2));\n }\"#,\n         expect![[r#\"\n-            56..60 'self': Self\n-            62..66 'args': Args\n-            149..150 'f': F\n-            155..183 '{     ...2)); }': ()\n-            161..162 'f': F\n-            161..180 'f.call...1, 2))': u128\n-            173..179 '(1, 2)': (u32, u64)\n-            174..175 '1': u32\n-            177..178 '2': u64\n+            38..39 'f': F\n+            44..72 '{     ...2)); }': ()\n+            50..51 'f': F\n+            50..69 'f.call...1, 2))': u128\n+            62..68 '(1, 2)': (u32, u64)\n+            63..64 '1': u32\n+            66..67 '2': u64\n         \"#]],\n     );\n }\n@@ -1784,12 +1778,7 @@ fn test<F: FnOnce(u32, u64) -> u128>(f: F) {\n fn fn_ptr_and_item() {\n     check_infer_with_mismatches(\n         r#\"\n-#[lang=\"fn_once\"]\n-trait FnOnce<Args> {\n-    type Output;\n-\n-    fn call_once(self, args: Args) -> Self::Output;\n-}\n+//- minicore: fn\n \n trait Foo<T> {\n     fn foo(&self) -> T;\n@@ -1815,27 +1804,25 @@ fn test() {\n     opt.map(f);\n }\"#,\n         expect![[r#\"\n-            74..78 'self': Self\n-            80..84 'args': Args\n-            139..143 'self': &Self\n-            243..247 'self': &Bar<F>\n-            260..271 '{ loop {} }': (A1, R)\n-            262..269 'loop {}': !\n-            267..269 '{}': ()\n-            355..359 'self': Opt<T>\n-            361..362 'f': F\n-            377..388 '{ loop {} }': Opt<U>\n-            379..386 'loop {}': !\n-            384..386 '{}': ()\n-            402..518 '{     ...(f); }': ()\n-            412..415 'bar': Bar<fn(u8) -> u32>\n-            441..444 'bar': Bar<fn(u8) -> u32>\n-            441..450 'bar.foo()': (u8, u32)\n-            461..464 'opt': Opt<u8>\n-            483..484 'f': fn(u8) -> u32\n-            505..508 'opt': Opt<u8>\n-            505..515 'opt.map(f)': Opt<u32>\n-            513..514 'f': fn(u8) -> u32\n+            28..32 'self': &Self\n+            132..136 'self': &Bar<F>\n+            149..160 '{ loop {} }': (A1, R)\n+            151..158 'loop {}': !\n+            156..158 '{}': ()\n+            244..248 'self': Opt<T>\n+            250..251 'f': F\n+            266..277 '{ loop {} }': Opt<U>\n+            268..275 'loop {}': !\n+            273..275 '{}': ()\n+            291..407 '{     ...(f); }': ()\n+            301..304 'bar': Bar<fn(u8) -> u32>\n+            330..333 'bar': Bar<fn(u8) -> u32>\n+            330..339 'bar.foo()': (u8, u32)\n+            350..353 'opt': Opt<u8>\n+            372..373 'f': fn(u8) -> u32\n+            394..397 'opt': Opt<u8>\n+            394..404 'opt.map(f)': Opt<u32>\n+            402..403 'f': fn(u8) -> u32\n         \"#]],\n     );\n }"}, {"sha": "39589bf8bc2a1519ad39dc641445ac3f22130a07", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=54da0bfbf0501a4954481c1de75ff33a6c12e140", "patch": "@@ -2411,7 +2411,7 @@ impl Local {\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct DeriveHelper {\n     pub(crate) derive: MacroId,\n-    pub(crate) idx: usize,\n+    pub(crate) idx: u32,\n }\n \n impl DeriveHelper {\n@@ -2421,15 +2421,18 @@ impl DeriveHelper {\n \n     pub fn name(&self, db: &dyn HirDatabase) -> Name {\n         match self.derive {\n-            MacroId::Macro2Id(it) => {\n-                db.macro2_data(it).helpers.as_deref().and_then(|it| it.get(self.idx)).cloned()\n-            }\n+            MacroId::Macro2Id(it) => db\n+                .macro2_data(it)\n+                .helpers\n+                .as_deref()\n+                .and_then(|it| it.get(self.idx as usize))\n+                .cloned(),\n             MacroId::MacroRulesId(_) => None,\n             MacroId::ProcMacroId(proc_macro) => db\n                 .proc_macro_data(proc_macro)\n                 .helpers\n                 .as_deref()\n-                .and_then(|it| it.get(self.idx))\n+                .and_then(|it| it.get(self.idx as usize))\n                 .cloned(),\n         }\n         .unwrap_or_else(|| Name::missing())\n@@ -2440,7 +2443,7 @@ impl DeriveHelper {\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct BuiltinAttr {\n     krate: Option<CrateId>,\n-    idx: usize,\n+    idx: u32,\n }\n \n impl BuiltinAttr {\n@@ -2449,37 +2452,38 @@ impl BuiltinAttr {\n         if let builtin @ Some(_) = Self::builtin(name) {\n             return builtin;\n         }\n-        let idx = db.crate_def_map(krate.id).registered_attrs().iter().position(|it| it == name)?;\n+        let idx =\n+            db.crate_def_map(krate.id).registered_attrs().iter().position(|it| it == name)? as u32;\n         Some(BuiltinAttr { krate: Some(krate.id), idx })\n     }\n \n     fn builtin(name: &str) -> Option<Self> {\n         hir_def::builtin_attr::INERT_ATTRIBUTES\n             .iter()\n             .position(|tool| tool.name == name)\n-            .map(|idx| BuiltinAttr { krate: None, idx })\n+            .map(|idx| BuiltinAttr { krate: None, idx: idx as u32 })\n     }\n \n     pub fn name(&self, db: &dyn HirDatabase) -> SmolStr {\n         // FIXME: Return a `Name` here\n         match self.krate {\n-            Some(krate) => db.crate_def_map(krate).registered_attrs()[self.idx].clone(),\n-            None => SmolStr::new(hir_def::builtin_attr::INERT_ATTRIBUTES[self.idx].name),\n+            Some(krate) => db.crate_def_map(krate).registered_attrs()[self.idx as usize].clone(),\n+            None => SmolStr::new(hir_def::builtin_attr::INERT_ATTRIBUTES[self.idx as usize].name),\n         }\n     }\n \n     pub fn template(&self, _: &dyn HirDatabase) -> Option<AttributeTemplate> {\n         match self.krate {\n             Some(_) => None,\n-            None => Some(hir_def::builtin_attr::INERT_ATTRIBUTES[self.idx].template),\n+            None => Some(hir_def::builtin_attr::INERT_ATTRIBUTES[self.idx as usize].template),\n         }\n     }\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct ToolModule {\n     krate: Option<CrateId>,\n-    idx: usize,\n+    idx: u32,\n }\n \n impl ToolModule {\n@@ -2488,22 +2492,23 @@ impl ToolModule {\n         if let builtin @ Some(_) = Self::builtin(name) {\n             return builtin;\n         }\n-        let idx = db.crate_def_map(krate.id).registered_tools().iter().position(|it| it == name)?;\n+        let idx =\n+            db.crate_def_map(krate.id).registered_tools().iter().position(|it| it == name)? as u32;\n         Some(ToolModule { krate: Some(krate.id), idx })\n     }\n \n     fn builtin(name: &str) -> Option<Self> {\n         hir_def::builtin_attr::TOOL_MODULES\n             .iter()\n             .position(|&tool| tool == name)\n-            .map(|idx| ToolModule { krate: None, idx })\n+            .map(|idx| ToolModule { krate: None, idx: idx as u32 })\n     }\n \n     pub fn name(&self, db: &dyn HirDatabase) -> SmolStr {\n         // FIXME: Return a `Name` here\n         match self.krate {\n-            Some(krate) => db.crate_def_map(krate).registered_tools()[self.idx].clone(),\n-            None => SmolStr::new(hir_def::builtin_attr::TOOL_MODULES[self.idx]),\n+            Some(krate) => db.crate_def_map(krate).registered_tools()[self.idx as usize].clone(),\n+            None => SmolStr::new(hir_def::builtin_attr::TOOL_MODULES[self.idx as usize]),\n         }\n     }\n }\n@@ -2831,7 +2836,7 @@ impl Impl {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct TraitRef {\n     env: Arc<TraitEnvironment>,\n     trait_ref: hir_ty::TraitRef,"}, {"sha": "3b39e9fa919a1b4e943fb7f195709c5df270aa70", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=54da0bfbf0501a4954481c1de75ff33a6c12e140", "patch": "@@ -628,7 +628,7 @@ impl SourceAnalyzer {\n                                 {\n                                     return Some(PathResolution::DeriveHelper(DeriveHelper {\n                                         derive: *macro_id,\n-                                        idx,\n+                                        idx: idx as u32,\n                                     }));\n                                 }\n                             }"}, {"sha": "ed7f04fd8e7fe56e9e86b8449e26b559506bb857", "filename": "crates/ide-db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fide-db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Fide-db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fdefs.rs?ref=54da0bfbf0501a4954481c1de75ff33a6c12e140", "patch": "@@ -34,8 +34,8 @@ pub enum Definition {\n     TypeAlias(TypeAlias),\n     BuiltinType(BuiltinType),\n     SelfType(Impl),\n-    Local(Local),\n     GenericParam(GenericParam),\n+    Local(Local),\n     Label(Label),\n     DeriveHelper(DeriveHelper),\n     BuiltinAttr(BuiltinAttr),"}, {"sha": "63fd1726cf3f66323bf5432c5ab5de082cbdc69e", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54da0bfbf0501a4954481c1de75ff33a6c12e140/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=54da0bfbf0501a4954481c1de75ff33a6c12e140", "patch": "@@ -106,6 +106,11 @@ pub mod marker {\n         impl<T: ?Sized> Copy for &T {}\n     }\n     // endregion:copy\n+\n+    // region:fn\n+    #[lang = \"tuple_trait\"]\n+    pub trait Tuple {}\n+    // endregion:fn\n }\n \n // region:default\n@@ -329,19 +334,26 @@ pub mod ops {\n \n     // region:fn\n     mod function {\n+        use crate::marker::Tuple;\n+\n         #[lang = \"fn\"]\n         #[fundamental]\n-        pub trait Fn<Args>: FnMut<Args> {}\n+        pub trait Fn<Args: Tuple>: FnMut<Args> {\n+            extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n+        }\n \n         #[lang = \"fn_mut\"]\n         #[fundamental]\n-        pub trait FnMut<Args>: FnOnce<Args> {}\n+        pub trait FnMut<Args: Tuple>: FnOnce<Args> {\n+            extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n+        }\n \n         #[lang = \"fn_once\"]\n         #[fundamental]\n-        pub trait FnOnce<Args> {\n+        pub trait FnOnce<Args: Tuple> {\n             #[lang = \"fn_once_output\"]\n             type Output;\n+            extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n         }\n     }\n     pub use self::function::{Fn, FnMut, FnOnce};"}]}