{"sha": "5e9d38ede0f0eff5fec3ad8713897c080211d5ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlOWQzOGVkZTBmMGVmZjVmZWMzYWQ4NzEzODk3YzA4MDIxMWQ1ZWE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-18T18:57:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-18T18:57:57Z"}, "message": "Remove 'unchecked' from docs", "tree": {"sha": "e857669fb01f2a53665d1c43ec761d15312391ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e857669fb01f2a53665d1c43ec761d15312391ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e9d38ede0f0eff5fec3ad8713897c080211d5ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9d38ede0f0eff5fec3ad8713897c080211d5ea", "html_url": "https://github.com/rust-lang/rust/commit/5e9d38ede0f0eff5fec3ad8713897c080211d5ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e9d38ede0f0eff5fec3ad8713897c080211d5ea/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76c8b83efad38b05c5f4d140b8084dcb7b75fc38", "url": "https://api.github.com/repos/rust-lang/rust/commits/76c8b83efad38b05c5f4d140b8084dcb7b75fc38", "html_url": "https://github.com/rust-lang/rust/commit/76c8b83efad38b05c5f4d140b8084dcb7b75fc38"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "d214588d6606ce9a759288a890f3c8698f08bbe1", "filename": "doc/rust.md", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5e9d38ede0f0eff5fec3ad8713897c080211d5ea/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/5e9d38ede0f0eff5fec3ad8713897c080211d5ea/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=5e9d38ede0f0eff5fec3ad8713897c080211d5ea", "patch": "@@ -222,7 +222,7 @@ pure\n return\n struct\n true trait type\n-unchecked unsafe\n+unsafe\n while\n ~~~~~~~~\n \n@@ -1035,23 +1035,24 @@ pure fn nonempty_list<T>(ls: List<T>) -> bool { pure_length(ls) > 0u }\n \n *TODO:* should actually define referential transparency.\n \n-The effect checking rules previously enumerated are a restricted set of\n-typechecking rules meant to approximate the universe of observably\n-referentially transparent Rust procedures conservatively. Sometimes, these\n-rules are *too* restrictive. Rust allows programmers to violate these rules by\n-writing pure functions that the compiler cannot prove to be referentially\n-transparent, using an escape-hatch feature called \"unchecked blocks\". When\n-writing code that uses unchecked blocks, programmers should always be aware\n-that they have an obligation to show that the code *behaves* referentially\n-transparently at all times, even if the compiler cannot *prove* automatically\n-that the code is referentially transparent. In the presence of unchecked\n-blocks, the compiler provides no static guarantee that the code will behave as\n-expected at runtime. Rather, the programmer has an independent obligation to\n-verify the semantics of the pure functions they write.\n+The effect checking rules previously enumerated are a restricted set\n+of typechecking rules meant to approximate the universe of observably\n+referentially transparent Rust procedures conservatively. Sometimes,\n+these rules are *too* restrictive. Rust allows programmers to violate\n+these rules by writing pure functions that the compiler cannot prove\n+to be referentially transparent, using \"unsafe blocks\". When writing\n+code that uses unsafe blocks, programmers should always be aware that\n+they have an obligation to show that the code *behaves* referentially\n+transparently at all times, even if the compiler cannot *prove*\n+automatically that the code is referentially transparent. In the\n+presence of unsafe blocks, the compiler provides no static guarantee\n+that the code will behave as expected at runtime. Rather, the\n+programmer has an independent obligation to verify the semantics of\n+the pure functions they write.\n \n *TODO:* last two sentences are vague.\n \n-An example of a pure function that uses an unchecked block:\n+An example of a pure function that uses an unsafe block:\n \n ~~~~\n # use std::list::*;\n@@ -1065,7 +1066,7 @@ fn pure_foldl<T, U: Copy>(ls: List<T>, u: U, f: fn(&&T, &&U) -> U) -> U {\n \n pure fn pure_length<T>(ls: List<T>) -> uint {\n     fn count<T>(_t: T, &&u: uint) -> uint { u + 1u }\n-    unchecked {\n+    unsafe {\n         pure_foldl(ls, 0u, count)\n     }\n }"}]}