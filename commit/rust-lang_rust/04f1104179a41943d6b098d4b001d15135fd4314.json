{"sha": "04f1104179a41943d6b098d4b001d15135fd4314", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZjExMDQxNzlhNDE5NDNkNmIwOThkNGIwMDFkMTUxMzVmZDQzMTQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-30T19:29:40Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-30T19:51:28Z"}, "message": "Don't classify NameRef paths inside attribute TokenTrees", "tree": {"sha": "b78acee88b9ef07885a881da2afed0e6da4f7ae8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b78acee88b9ef07885a881da2afed0e6da4f7ae8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04f1104179a41943d6b098d4b001d15135fd4314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04f1104179a41943d6b098d4b001d15135fd4314", "html_url": "https://github.com/rust-lang/rust/commit/04f1104179a41943d6b098d4b001d15135fd4314", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04f1104179a41943d6b098d4b001d15135fd4314/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a", "html_url": "https://github.com/rust-lang/rust/commit/1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "090df25cbde731b6cacb7b2ca33b7d7211efb3a9", "filename": "crates/ide_assists/src/handlers/split_import.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/04f1104179a41943d6b098d4b001d15135fd4314/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f1104179a41943d6b098d4b001d15135fd4314/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=04f1104179a41943d6b098d4b001d15135fd4314", "patch": "@@ -1,5 +1,3 @@\n-use std::iter::successors;\n-\n use syntax::{ast, AstNode, T};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -18,9 +16,8 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n pub(crate) fn split_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let colon_colon = ctx.find_token_syntax_at_offset(T![::])?;\n     let path = ast::Path::cast(colon_colon.parent()?)?.qualifier()?;\n-    let top_path = successors(Some(path.clone()), |it| it.parent_path()).last()?;\n \n-    let use_tree = top_path.syntax().ancestors().find_map(ast::UseTree::cast)?;\n+    let use_tree = path.top_path().syntax().ancestors().find_map(ast::UseTree::cast)?;\n \n     let new_tree = use_tree.split_prefix(&path);\n     if new_tree == use_tree {"}, {"sha": "02eb55ac35f28bfaa0070a82f5a189b167aa64f3", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/04f1104179a41943d6b098d4b001d15135fd4314/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f1104179a41943d6b098d4b001d15135fd4314/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=04f1104179a41943d6b098d4b001d15135fd4314", "patch": "@@ -383,25 +383,28 @@ impl NameRefClass {\n                     }\n                 }\n             }\n-\n-            if let Some(resolved) = sema.resolve_path(&path) {\n-                return if path.syntax().ancestors().find_map(ast::Attr::cast).is_some() {\n+            let top_path = path.top_path();\n+            let is_attribute_path = top_path\n+                .syntax()\n+                .ancestors()\n+                .find_map(ast::Attr::cast)\n+                .map(|attr| attr.path().as_ref() == Some(&top_path));\n+            return match is_attribute_path {\n+                Some(true) => sema.resolve_path(&path).and_then(|resolved| {\n                     match resolved {\n                         // Don't wanna collide with builtin attributes here like `test` hence guard\n-                        PathResolution::Def(module @ ModuleDef::Module(_))\n-                            if path.parent_path().is_some() =>\n-                        {\n+                        PathResolution::Def(module @ ModuleDef::Module(_)) if path == top_path => {\n                             Some(NameRefClass::Definition(Definition::ModuleDef(module)))\n                         }\n                         PathResolution::Macro(mac) if mac.kind() == hir::MacroKind::Attr => {\n                             Some(NameRefClass::Definition(Definition::Macro(mac)))\n                         }\n                         _ => None,\n                     }\n-                } else {\n-                    Some(NameRefClass::Definition(resolved.into()))\n-                };\n-            }\n+                }),\n+                Some(false) => None,\n+                None => sema.resolve_path(&path).map(Into::into).map(NameRefClass::Definition),\n+            };\n         }\n \n         let extern_crate = ast::ExternCrate::cast(parent)?;"}, {"sha": "49c478b817a04f1f36d8216cbbc37071c44e5a6a", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04f1104179a41943d6b098d4b001d15135fd4314/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f1104179a41943d6b098d4b001d15135fd4314/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=04f1104179a41943d6b098d4b001d15135fd4314", "patch": "@@ -336,6 +336,14 @@ impl ast::Path {\n     pub fn qualifiers(&self) -> impl Iterator<Item = ast::Path> + Clone {\n         successors(self.qualifier(), |p| p.qualifier())\n     }\n+\n+    pub fn top_path(&self) -> ast::Path {\n+        let mut this = self.clone();\n+        while let Some(path) = this.parent_path() {\n+            this = path;\n+        }\n+        this\n+    }\n }\n \n impl ast::Use {"}]}