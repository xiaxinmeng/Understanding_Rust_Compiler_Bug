{"sha": "f94eaeaf736e19b9249eb690a381202bcc5065b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NGVhZWFmNzM2ZTE5YjkyNDllYjY5MGEzODEyMDJiY2M1MDY1YjM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-10-07T23:14:45Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-21T18:41:22Z"}, "message": "Fix rebase damage", "tree": {"sha": "05a01deb4a0ea222601a74196aa2b3aad837cae2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05a01deb4a0ea222601a74196aa2b3aad837cae2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f94eaeaf736e19b9249eb690a381202bcc5065b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f94eaeaf736e19b9249eb690a381202bcc5065b3", "html_url": "https://github.com/rust-lang/rust/commit/f94eaeaf736e19b9249eb690a381202bcc5065b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f94eaeaf736e19b9249eb690a381202bcc5065b3/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ec364713daad4f5014a0921c3dbc1b59ade1ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ec364713daad4f5014a0921c3dbc1b59ade1ac", "html_url": "https://github.com/rust-lang/rust/commit/24ec364713daad4f5014a0921c3dbc1b59ade1ac"}], "stats": {"total": 174, "additions": 95, "deletions": 79}, "files": [{"sha": "a6189a346645dd51da74fbb7d0153b546388ff91", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=f94eaeaf736e19b9249eb690a381202bcc5065b3", "patch": "@@ -496,7 +496,7 @@ fn check_associated_type_defaults(\n         }\n \n         fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-            match t.sty {\n+            match t.kind {\n                 ty::Projection(proj_ty) => {\n                     if let Some(default) = self.map.get(&proj_ty) {\n                         default"}, {"sha": "9f2e8aca47712a0f2809d8b4e545c73427a51b82", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs?ref=f94eaeaf736e19b9249eb690a381202bcc5065b3", "patch": "@@ -10,7 +10,7 @@ trait Tr {\n         //~^ ERROR mismatched types\n         //~| NOTE expected associated type, found `()`\n         //~| NOTE expected associated type `<Self as Tr>::A`\n-        //~| NOTE consider constraining\n+        //~| NOTE consider constraining the associated type\n         //~| NOTE for more information, visit\n     }\n }\n@@ -38,7 +38,7 @@ trait AssocConst {\n     //~^ ERROR mismatched types\n     //~| NOTE expected associated type, found `u8`\n     //~| NOTE expected associated type `<Self as AssocConst>::Ty`\n-    //~| NOTE consider constraining\n+    //~| NOTE consider constraining the associated type\n     //~| NOTE for more information, visit\n }\n "}, {"sha": "b759276d2484b6151d44150c6008d1a8d9b13849", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr?ref=f94eaeaf736e19b9249eb690a381202bcc5065b3", "patch": "@@ -10,7 +10,7 @@ LL |         let () = p;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-in-other-trait-items.rs:37:25\n+  --> $DIR/defaults-in-other-trait-items.rs:39:25\n    |\n LL |     const C: Self::Ty = 0u8;\n    |                         ^^^ expected associated type, found `u8`"}, {"sha": "cb0d231bfcd7c1bfaee9d72f25fc57812ee4dad5", "filename": "src/test/ui/associated-types/defaults-specialization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.rs?ref=f94eaeaf736e19b9249eb690a381202bcc5065b3", "patch": "@@ -66,6 +66,7 @@ impl Tr for D<bool> {\n \n struct E<T>(T);\n impl<T> Tr for E<T> {\n+    default type Ty = bool;\n     default fn make() -> Self::Ty { panic!(); }\n }\n "}, {"sha": "9b10940cbc485fe621ab66a90fde299a5babfba4", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 49, "deletions": 31, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=f94eaeaf736e19b9249eb690a381202bcc5065b3", "patch": "@@ -5,10 +5,12 @@ LL |     fn make() -> Self::Ty {\n    |                  -------- type in trait\n ...\n LL |     fn make() -> u8 { 0 }\n-   |                  ^^ expected associated type, found u8\n+   |                  ^^ expected associated type, found `u8`\n    |\n-   = note: expected type `fn() -> <A<T> as Tr>::Ty`\n-              found type `fn() -> u8`\n+   = note: expected fn pointer `fn() -> <A<T> as Tr>::Ty`\n+              found fn pointer `fn() -> u8`\n+   = note: consider constraining the associated type `<A<T> as Tr>::Ty` to `u8` or calling a method that returns `<A<T> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0053]: method `make` has an incompatible type for trait\n   --> $DIR/defaults-specialization.rs:36:18\n@@ -17,79 +19,95 @@ LL |     fn make() -> Self::Ty {\n    |                  -------- type in trait\n ...\n LL |     fn make() -> bool { true }\n-   |                  ^^^^ expected associated type, found bool\n+   |                  ^^^^ expected associated type, found `bool`\n    |\n-   = note: expected type `fn() -> <B<T> as Tr>::Ty`\n-              found type `fn() -> bool`\n+   = note: expected fn pointer `fn() -> <B<T> as Tr>::Ty`\n+              found fn pointer `fn() -> bool`\n+   = note: consider constraining the associated type `<B<T> as Tr>::Ty` to `bool` or calling a method that returns `<B<T> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:11:9\n    |\n LL |     fn make() -> Self::Ty {\n    |                  -------- expected `<Self as Tr>::Ty` because of return type\n LL |         0u8\n-   |         ^^^ expected associated type, found u8\n+   |         ^^^ expected associated type, found `u8`\n    |\n-   = note: expected type `<Self as Tr>::Ty`\n-              found type `u8`\n+   = note: expected associated type `<Self as Tr>::Ty`\n+                         found type `u8`\n+   = note: consider constraining the associated type `<Self as Tr>::Ty` to `u8` or calling a method that returns `<Self as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:27:29\n    |\n LL |     fn make() -> Self::Ty { 0u8 }\n-   |                  --------   ^^^ expected associated type, found u8\n+   |                  --------   ^^^ expected associated type, found `u8`\n    |                  |\n    |                  expected `<A2<T> as Tr>::Ty` because of return type\n    |\n-   = note: expected type `<A2<T> as Tr>::Ty`\n-              found type `u8`\n+   = note: expected associated type `<A2<T> as Tr>::Ty`\n+                         found type `u8`\n+   = note: consider constraining the associated type `<A2<T> as Tr>::Ty` to `u8` or calling a method that returns `<A2<T> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:45:29\n    |\n LL |     fn make() -> Self::Ty { true }\n-   |                  --------   ^^^^ expected associated type, found bool\n+   |                  --------   ^^^^ expected associated type, found `bool`\n    |                  |\n    |                  expected `<B2<T> as Tr>::Ty` because of return type\n    |\n-   = note: expected type `<B2<T> as Tr>::Ty`\n-              found type `bool`\n+   = note: expected associated type `<B2<T> as Tr>::Ty`\n+                         found type `bool`\n+   = note: consider constraining the associated type `<B2<T> as Tr>::Ty` to `bool` or calling a method that returns `<B2<T> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:87:32\n+  --> $DIR/defaults-specialization.rs:88:32\n    |\n LL |     let _: <B<()> as Tr>::Ty = 0u8;\n-   |                                ^^^ expected associated type, found u8\n+   |                                ^^^ expected associated type, found `u8`\n    |\n-   = note: expected type `<B<()> as Tr>::Ty`\n-              found type `u8`\n+   = note: expected associated type `<B<()> as Tr>::Ty`\n+                         found type `u8`\n+   = note: consider constraining the associated type `<B<()> as Tr>::Ty` to `u8` or calling a method that returns `<B<()> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:88:32\n+  --> $DIR/defaults-specialization.rs:89:32\n    |\n LL |     let _: <B<()> as Tr>::Ty = true;\n-   |                                ^^^^ expected associated type, found bool\n+   |                                ^^^^ expected associated type, found `bool`\n    |\n-   = note: expected type `<B<()> as Tr>::Ty`\n-              found type `bool`\n+   = note: expected associated type `<B<()> as Tr>::Ty`\n+                         found type `bool`\n+   = note: consider constraining the associated type `<B<()> as Tr>::Ty` to `bool` or calling a method that returns `<B<()> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:89:33\n+  --> $DIR/defaults-specialization.rs:90:33\n    |\n LL |     let _: <B2<()> as Tr>::Ty = 0u8;\n-   |                                 ^^^ expected associated type, found u8\n+   |                                 ^^^ expected associated type, found `u8`\n    |\n-   = note: expected type `<B2<()> as Tr>::Ty`\n-              found type `u8`\n+   = note: expected associated type `<B2<()> as Tr>::Ty`\n+                         found type `u8`\n+   = note: consider constraining the associated type `<B2<()> as Tr>::Ty` to `u8` or calling a method that returns `<B2<()> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:90:33\n+  --> $DIR/defaults-specialization.rs:91:33\n    |\n LL |     let _: <B2<()> as Tr>::Ty = true;\n-   |                                 ^^^^ expected associated type, found bool\n+   |                                 ^^^^ expected associated type, found `bool`\n    |\n-   = note: expected type `<B2<()> as Tr>::Ty`\n-              found type `bool`\n+   = note: expected associated type `<B2<()> as Tr>::Ty`\n+                         found type `bool`\n+   = note: consider constraining the associated type `<B2<()> as Tr>::Ty` to `bool` or calling a method that returns `<B2<()> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 9 previous errors\n "}, {"sha": "861f178fd194a7fca1012446f2bd16676328e5bd", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=f94eaeaf736e19b9249eb690a381202bcc5065b3", "patch": "@@ -19,11 +19,13 @@ error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:35:15\n    |\n LL | trait Foo<T> {\n-   | ------------ required by `Foo`\n+   | ------------\n+   | |         |\n+   | |         help: consider restricting this bound: `T: std::clone::Clone`\n+   | required by `Foo`\n LL |     type Bar: Clone = Vec<T>;\n    |               ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n    |\n-   = help: consider adding a `where T: std::clone::Clone` bound\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<T>`\n \n error[E0277]: the trait bound `(): Foo<Self>` is not satisfied\n@@ -82,22 +84,24 @@ error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: std::clone::Clone` is not\n   --> $DIR/defaults-suitability.rs:74:15\n    |\n LL | trait Foo2<T> {\n-   | ------------- required by `Foo2`\n+   | -------------- help: consider further restricting the associated type: `where <Self as Foo2<T>>::Baz: std::clone::Clone`\n+   | |\n+   | required by `Foo2`\n LL |     type Bar: Clone = Vec<Self::Baz>;\n    |               ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n    |\n-   = help: consider adding a `where <Self as Foo2<T>>::Baz: std::clone::Clone` bound\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo2<T>>::Baz>`\n \n error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: std::clone::Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:83:15\n    |\n LL | trait Foo25<T: Clone> {\n-   | --------------------- required by `Foo25`\n+   | ---------------------- help: consider further restricting the associated type: `where <Self as Foo25<T>>::Baz: std::clone::Clone`\n+   | |\n+   | required by `Foo25`\n LL |     type Bar: Clone = Vec<Self::Baz>;\n    |               ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n    |\n-   = help: consider adding a `where <Self as Foo25<T>>::Baz: std::clone::Clone` bound\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo25<T>>::Baz>`\n \n error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n@@ -106,14 +110,14 @@ error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n LL | / trait Foo3<T> where\n LL | |     Self::Bar: Clone,\n LL | |     Self::Baz: Clone,\n-   | |                ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n+   | |                ^^^^^ - help: consider further restricting type parameter `T`: `, T: std::clone::Clone`\n+   | |                |\n+   | |                the trait `std::clone::Clone` is not implemented for `T`\n LL | |\n ...  |\n LL | |     type Baz = T;\n LL | | }\n    | |_- required by `Foo3`\n-   |\n-   = help: consider adding a `where T: std::clone::Clone` bound\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/defaults-suitability.rs:29:5"}, {"sha": "35164c4f3d37e5a73248bc50945a00592df505a4", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=f94eaeaf736e19b9249eb690a381202bcc5065b3", "patch": "@@ -6,8 +6,6 @@ LL | trait UncheckedCopy: Sized {\n ...\n LL |     type Output: Copy\n    |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::marker::Copy` bound\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-1.rs:27:7\n@@ -19,7 +17,6 @@ LL |     + AddAssign<&'static str>\n    |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n-   = help: consider adding a `where Self: std::ops::AddAssign<&'static str>` bound\n \n error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:25:7\n@@ -29,8 +26,6 @@ LL | trait UncheckedCopy: Sized {\n ...\n LL |     + Deref<Target = str>\n    |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::ops::Deref` bound\n \n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-1.rs:30:7\n@@ -43,42 +38,43 @@ LL |     + Display = Self;\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `Self`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-   = help: consider adding a `where Self: std::fmt::Display` bound\n \n error[E0277]: `T` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-1.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n+   |      -  ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n+   |      |\n+   |      help: consider restricting this bound: `T: std::fmt::Display`\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `T`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-   = help: consider adding a `where T: std::fmt::Display` bound\n \n error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::ops::Deref` bound\n+   |      -  ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n+   |      |\n+   |      help: consider restricting this bound: `T: std::ops::Deref`\n \n error[E0277]: cannot add-assign `&'static str` to `T`\n   --> $DIR/defaults-unsound-62211-1.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n+   |      -  ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n+   |      |\n+   |      help: consider restricting this bound: `T: std::ops::AddAssign<&'static str>`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n-   = help: consider adding a `where T: std::ops::AddAssign<&'static str>` bound\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n+   |      -  ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |      |\n+   |      help: consider restricting this bound: `T: std::marker::Copy`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "af66ee117a3a3d6cda7d02d691822a31b703669a", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=f94eaeaf736e19b9249eb690a381202bcc5065b3", "patch": "@@ -6,8 +6,6 @@ LL | trait UncheckedCopy: Sized {\n ...\n LL |     type Output: Copy\n    |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::marker::Copy` bound\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-2.rs:27:7\n@@ -19,7 +17,6 @@ LL |     + AddAssign<&'static str>\n    |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n-   = help: consider adding a `where Self: std::ops::AddAssign<&'static str>` bound\n \n error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:25:7\n@@ -29,8 +26,6 @@ LL | trait UncheckedCopy: Sized {\n ...\n LL |     + Deref<Target = str>\n    |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::ops::Deref` bound\n \n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-2.rs:30:7\n@@ -43,42 +38,43 @@ LL |     + Display = Self;\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `Self`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-   = help: consider adding a `where Self: std::fmt::Display` bound\n \n error[E0277]: `T` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-2.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n+   |      -  ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n+   |      |\n+   |      help: consider restricting this bound: `T: std::fmt::Display`\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `T`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-   = help: consider adding a `where T: std::fmt::Display` bound\n \n error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::ops::Deref` bound\n+   |      -  ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n+   |      |\n+   |      help: consider restricting this bound: `T: std::ops::Deref`\n \n error[E0277]: cannot add-assign `&'static str` to `T`\n   --> $DIR/defaults-unsound-62211-2.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n+   |      -  ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n+   |      |\n+   |      help: consider restricting this bound: `T: std::ops::AddAssign<&'static str>`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n-   = help: consider adding a `where T: std::ops::AddAssign<&'static str>` bound\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n+   |      -  ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |      |\n+   |      help: consider restricting this bound: `T: std::marker::Copy`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "da10933df92b0d044443cc497f9bc85139b6eebf", "filename": "src/test/ui/associated-types/issue-26681.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fissue-26681.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fissue-26681.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-26681.stderr?ref=f94eaeaf736e19b9249eb690a381202bcc5065b3", "patch": "@@ -4,8 +4,10 @@ error[E0308]: mismatched types\n LL |     const C: <Self::Fv as Foo>::Bar = 6665;\n    |                                       ^^^^ expected associated type, found integer\n    |\n-   = note: expected type `<<Self as Baz>::Fv as Foo>::Bar`\n-              found type `{integer}`\n+   = note: expected associated type `<<Self as Baz>::Fv as Foo>::Bar`\n+                         found type `{integer}`\n+   = note: consider constraining the associated type `<<Self as Baz>::Fv as Foo>::Bar` to `{integer}` or calling a method that returns `<<Self as Baz>::Fv as Foo>::Bar`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to previous error\n "}, {"sha": "c27800f5a3fb1350bfeaa261e4cfe1792c61dc37", "filename": "src/test/ui/associated-types/issue-63593.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f94eaeaf736e19b9249eb690a381202bcc5065b3/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr?ref=f94eaeaf736e19b9249eb690a381202bcc5065b3", "patch": "@@ -8,7 +8,6 @@ LL |     type This = Self;\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where Self: std::marker::Sized` bound\n \n error: aborting due to previous error\n "}]}