{"sha": "2cc278c6ffa900d9fba8e19c5a1fc6996fbe6639", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYzI3OGM2ZmZhOTAwZDlmYmE4ZTE5YzVhMWZjNjk5NmZiZTY2Mzk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-09T14:39:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-09T14:39:22Z"}, "message": "Fix bad names\n\n`res` should only be used for the result variable", "tree": {"sha": "927a604c36cd308d8aa39c3d098f31c4dbe5df22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/927a604c36cd308d8aa39c3d098f31c4dbe5df22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cc278c6ffa900d9fba8e19c5a1fc6996fbe6639", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cc278c6ffa900d9fba8e19c5a1fc6996fbe6639", "html_url": "https://github.com/rust-lang/rust/commit/2cc278c6ffa900d9fba8e19c5a1fc6996fbe6639", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cc278c6ffa900d9fba8e19c5a1fc6996fbe6639/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21913d0fdb848445a908021dbcd4c3accf2ca0a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/21913d0fdb848445a908021dbcd4c3accf2ca0a5", "html_url": "https://github.com/rust-lang/rust/commit/21913d0fdb848445a908021dbcd4c3accf2ca0a5"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "261d9fb180bf3114241cb87f40bd565b463f3af8", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2cc278c6ffa900d9fba8e19c5a1fc6996fbe6639/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc278c6ffa900d9fba8e19c5a1fc6996fbe6639/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=2cc278c6ffa900d9fba8e19c5a1fc6996fbe6639", "patch": "@@ -173,20 +173,20 @@ pub(crate) fn snippet_text_edit_vec(\n \n pub(crate) fn completion_item(\n     line_index: &LineIndex,\n-    completion_item: CompletionItem,\n+    item: CompletionItem,\n ) -> Vec<lsp_types::CompletionItem> {\n-    fn set_score(res: &mut lsp_types::CompletionItem, label: &str) {\n-        res.preselect = Some(true);\n+    fn set_score(lsp_item: &mut lsp_types::CompletionItem, label: &str) {\n+        lsp_item.preselect = Some(true);\n         // HACK: sort preselect items first\n-        res.sort_text = Some(format!(\" {}\", label));\n+        lsp_item.sort_text = Some(format!(\" {}\", label));\n     }\n \n     let mut additional_text_edits = Vec::new();\n     let mut text_edit = None;\n     // LSP does not allow arbitrary edits in completion, so we have to do a\n     // non-trivial mapping here.\n-    let source_range = completion_item.source_range();\n-    for indel in completion_item.text_edit().iter() {\n+    let source_range = item.source_range();\n+    for indel in item.text_edit().iter() {\n         if indel.delete.contains_range(source_range) {\n             text_edit = Some(if indel.delete == source_range {\n                 self::text_edit(line_index, indel.clone())\n@@ -207,46 +207,46 @@ pub(crate) fn completion_item(\n     }\n     let text_edit = text_edit.unwrap();\n \n-    let mut res = lsp_types::CompletionItem {\n-        label: completion_item.label().to_string(),\n-        detail: completion_item.detail().map(|it| it.to_string()),\n-        filter_text: Some(completion_item.lookup().to_string()),\n-        kind: completion_item.kind().map(completion_item_kind),\n+    let mut lsp_item = lsp_types::CompletionItem {\n+        label: item.label().to_string(),\n+        detail: item.detail().map(|it| it.to_string()),\n+        filter_text: Some(item.lookup().to_string()),\n+        kind: item.kind().map(completion_item_kind),\n         text_edit: Some(text_edit.into()),\n         additional_text_edits: Some(additional_text_edits),\n-        documentation: completion_item.documentation().map(documentation),\n-        deprecated: Some(completion_item.deprecated()),\n+        documentation: item.documentation().map(documentation),\n+        deprecated: Some(item.deprecated()),\n         ..Default::default()\n     };\n \n-    if completion_item.score().is_some() {\n-        set_score(&mut res, completion_item.label());\n+    if item.score().is_some() {\n+        set_score(&mut lsp_item, item.label());\n     }\n \n-    if completion_item.deprecated() {\n-        res.tags = Some(vec![lsp_types::CompletionItemTag::Deprecated])\n+    if item.deprecated() {\n+        lsp_item.tags = Some(vec![lsp_types::CompletionItemTag::Deprecated])\n     }\n \n-    if completion_item.trigger_call_info() {\n-        res.command = Some(command::trigger_parameter_hints());\n+    if item.trigger_call_info() {\n+        lsp_item.command = Some(command::trigger_parameter_hints());\n     }\n \n-    let mut all_results = match completion_item.ref_match() {\n+    let mut res = match item.ref_match() {\n         Some(ref_match) => {\n-            let mut refed = res.clone();\n+            let mut refed = lsp_item.clone();\n             let (mutability, _score) = ref_match;\n             let label = format!(\"&{}{}\", mutability.as_keyword_for_ref(), refed.label);\n             set_score(&mut refed, &label);\n             refed.label = label;\n-            vec![res, refed]\n+            vec![lsp_item, refed]\n         }\n-        None => vec![res],\n+        None => vec![lsp_item],\n     };\n \n-    for mut r in all_results.iter_mut() {\n-        r.insert_text_format = Some(insert_text_format(completion_item.insert_text_format()));\n+    for mut r in res.iter_mut() {\n+        r.insert_text_format = Some(insert_text_format(item.insert_text_format()));\n     }\n-    all_results\n+    res\n }\n \n pub(crate) fn signature_help("}]}