{"sha": "1cb78e736f89cf286d454d7af05b470d570be1a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYjc4ZTczNmY4OWNmMjg2ZDQ1NGQ3YWYwNWI0NzBkNTcwYmUxYTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-14T23:12:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-14T23:12:30Z"}, "message": "core::rt: Rename block_running_task_and_then to deschedul_...", "tree": {"sha": "9de9dfa533244bab170c61362c132d76985ca9bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9de9dfa533244bab170c61362c132d76985ca9bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cb78e736f89cf286d454d7af05b470d570be1a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cb78e736f89cf286d454d7af05b470d570be1a7", "html_url": "https://github.com/rust-lang/rust/commit/1cb78e736f89cf286d454d7af05b470d570be1a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cb78e736f89cf286d454d7af05b470d570be1a7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e966216c7c59c1b1de08561502f0b78589db59a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e966216c7c59c1b1de08561502f0b78589db59a", "html_url": "https://github.com/rust-lang/rust/commit/8e966216c7c59c1b1de08561502f0b78589db59a"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "2160d62fc537c7e524049e09ad42b18d27246906", "filename": "src/libcore/rt/sched.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cb78e736f89cf286d454d7af05b470d570be1a7/src%2Flibcore%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb78e736f89cf286d454d7af05b470d570be1a7/src%2Flibcore%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched.rs?ref=1cb78e736f89cf286d454d7af05b470d570be1a7", "patch": "@@ -195,7 +195,7 @@ pub impl Scheduler {\n     /// The closure here is a *stack* closure that lives in the\n     /// running task.  It gets transmuted to the scheduler's lifetime\n     /// and called while the task is blocked.\n-    fn block_running_task_and_then(&mut self, f: &fn(&mut Scheduler, ~Task)) {\n+    fn deschedule_running_task_and_then(&mut self, f: &fn(&mut Scheduler, ~Task)) {\n         assert!(self.in_task_context());\n \n         rtdebug!(\"blocking task\");\n@@ -566,7 +566,7 @@ fn test_block_task() {\n         let task = ~do Task::new(&mut sched.stack_pool) {\n             do Scheduler::local |sched| {\n                 assert!(sched.in_task_context());\n-                do sched.block_running_task_and_then() |sched, task| {\n+                do sched.deschedule_running_task_and_then() |sched, task| {\n                     assert!(!sched.in_task_context());\n                     sched.task_queue.push_back(task);\n                 }"}, {"sha": "97c65b39f9c921edb735a9dcf3ef726bc66c2044", "filename": "src/libcore/rt/uvio.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cb78e736f89cf286d454d7af05b470d570be1a7/src%2Flibcore%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb78e736f89cf286d454d7af05b470d570be1a7/src%2Flibcore%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvio.rs?ref=1cb78e736f89cf286d454d7af05b470d570be1a7", "patch": "@@ -108,7 +108,7 @@ impl IoFactory for UvIoFactory {\n             assert!(scheduler.in_task_context());\n \n             // Block this task and take ownership, switch to scheduler context\n-            do scheduler.block_running_task_and_then |scheduler, task| {\n+            do scheduler.deschedule_running_task_and_then |scheduler, task| {\n \n                 rtdebug!(\"connect: entered scheduler context\");\n                 assert!(!scheduler.in_task_context());\n@@ -181,7 +181,7 @@ impl TcpListener for UvTcpListener {\n         do Scheduler::local |scheduler| {\n             assert!(scheduler.in_task_context());\n \n-            do scheduler.block_running_task_and_then |_, task| {\n+            do scheduler.deschedule_running_task_and_then |_, task| {\n                 let task_cell = Cell(task);\n                 let mut server_tcp_watcher = server_tcp_watcher;\n                 do server_tcp_watcher.listen |server_stream_watcher, status| {\n@@ -247,7 +247,7 @@ impl Stream for UvStream {\n             assert!(scheduler.in_task_context());\n             let watcher = self.watcher();\n             let buf_ptr: *&mut [u8] = &buf;\n-            do scheduler.block_running_task_and_then |scheduler, task| {\n+            do scheduler.deschedule_running_task_and_then |scheduler, task| {\n                 rtdebug!(\"read: entered scheduler context\");\n                 assert!(!scheduler.in_task_context());\n                 let mut watcher = watcher;\n@@ -293,7 +293,7 @@ impl Stream for UvStream {\n             assert!(scheduler.in_task_context());\n             let watcher = self.watcher();\n             let buf_ptr: *&[u8] = &buf;\n-            do scheduler.block_running_task_and_then |_, task| {\n+            do scheduler.deschedule_running_task_and_then |_, task| {\n                 let mut watcher = watcher;\n                 let task_cell = Cell(task);\n                 let buf = unsafe { &*buf_ptr };\n@@ -420,7 +420,7 @@ fn test_read_and_block() {\n                         // Yield to the other task in hopes that it\n                         // will trigger a read callback while we are\n                         // not ready for it\n-                        do scheduler.block_running_task_and_then |scheduler, task| {\n+                        do scheduler.deschedule_running_task_and_then |scheduler, task| {\n                             scheduler.task_queue.push_back(task);\n                         }\n                     }"}]}