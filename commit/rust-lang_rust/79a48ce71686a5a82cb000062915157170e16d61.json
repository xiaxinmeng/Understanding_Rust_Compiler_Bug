{"sha": "79a48ce71686a5a82cb000062915157170e16d61", "node_id": "C_kwDOAAsO6NoAKDc5YTQ4Y2U3MTY4NmE1YTgyY2IwMDAwNjI5MTUxNTcxNzBlMTZkNjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-29T11:09:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-29T11:09:45Z"}, "message": "Auto merge of #2634 - RalfJung:miri-script, r=oli-obk\n\n./miri updates: toolchain, rustc-push, rustc-pull\n\nThis merges the `./rustup-toolchain` script into `./miri` as `./miri toolchain`, and adds two new commands for josh-based syncing.\n\nr? `@rust-lang/miri`", "tree": {"sha": "9ede59ac76ee73d57bb7ed8a6b087d26296f21f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ede59ac76ee73d57bb7ed8a6b087d26296f21f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79a48ce71686a5a82cb000062915157170e16d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79a48ce71686a5a82cb000062915157170e16d61", "html_url": "https://github.com/rust-lang/rust/commit/79a48ce71686a5a82cb000062915157170e16d61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79a48ce71686a5a82cb000062915157170e16d61/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18a23a5d03519eb5d4348a6d0e519b279af628ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/18a23a5d03519eb5d4348a6d0e519b279af628ca", "html_url": "https://github.com/rust-lang/rust/commit/18a23a5d03519eb5d4348a6d0e519b279af628ca"}, {"sha": "39598e46f6777e0f5eee8177c347fec431d2b591", "url": "https://api.github.com/repos/rust-lang/rust/commits/39598e46f6777e0f5eee8177c347fec431d2b591", "html_url": "https://github.com/rust-lang/rust/commit/39598e46f6777e0f5eee8177c347fec431d2b591"}], "stats": {"total": 257, "additions": 146, "deletions": 111}, "files": [{"sha": "607ffe0cc59feb11d3c735ea3bddd0d7b53aa0c3", "filename": "src/tools/miri/.github/workflows/ci.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79a48ce71686a5a82cb000062915157170e16d61/src%2Ftools%2Fmiri%2F.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/79a48ce71686a5a82cb000062915157170e16d61/src%2Ftools%2Fmiri%2F.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2F.github%2Fworkflows%2Fci.yml?ref=79a48ce71686a5a82cb000062915157170e16d61", "patch": "@@ -67,9 +67,9 @@ jobs:\n         shell: bash\n         run: |\n           if [[ ${{ github.event_name }} == 'schedule' ]]; then\n-            ./rustup-toolchain HEAD --host ${{ matrix.host_target }}\n+            ./miri toolchain HEAD --host ${{ matrix.host_target }}\n           else\n-            ./rustup-toolchain \"\" --host ${{ matrix.host_target }}\n+            ./miri toolchain \"\" --host ${{ matrix.host_target }}\n           fi\n \n       - name: Show Rust version\n@@ -118,7 +118,7 @@ jobs:\n       - name: Install \"master\" toolchain\n         shell: bash\n         run: |\n-          ./rustup-toolchain \"\" -c clippy\n+          ./miri toolchain\n \n       - name: Show Rust version\n         run: |"}, {"sha": "724cf26df2b9b3f85a26b45e7ea8144233dfea05", "filename": "src/tools/miri/.gitpod.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79a48ce71686a5a82cb000062915157170e16d61/src%2Ftools%2Fmiri%2F.gitpod.yml", "raw_url": "https://github.com/rust-lang/rust/raw/79a48ce71686a5a82cb000062915157170e16d61/src%2Ftools%2Fmiri%2F.gitpod.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2F.gitpod.yml?ref=79a48ce71686a5a82cb000062915157170e16d61", "patch": "@@ -4,6 +4,6 @@ tasks:\n   - before: echo \"...\"\n     init: |\n       cargo install rustup-toolchain-install-master\n-      ./rustup-toolchain\n+      ./miri toolchain\n       ./miri build\n-    command: echo \"Run tests with ./miri test\"\n\\ No newline at end of file\n+    command: echo \"Run tests with ./miri test\""}, {"sha": "5c41547616ec68d0e9c8d50673cbadf45f2ffef8", "filename": "src/tools/miri/CONTRIBUTING.md", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/79a48ce71686a5a82cb000062915157170e16d61/src%2Ftools%2Fmiri%2FCONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/79a48ce71686a5a82cb000062915157170e16d61/src%2Ftools%2Fmiri%2FCONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCONTRIBUTING.md?ref=79a48ce71686a5a82cb000062915157170e16d61", "patch": "@@ -23,13 +23,13 @@ tested against. Other versions will likely not work. After installing\n [`rustup-toolchain-install-master`], you can run the following command to\n install that exact version of rustc as a toolchain:\n ```\n-./rustup-toolchain\n+./miri toolchain\n ```\n This will set up a rustup toolchain called `miri` and set it as an override for\n the current directory.\n \n You can also create a `.auto-everything` file (contents don't matter, can be empty), which\n-will cause any `./miri` command to automatically call `rustup-toolchain`, `clippy` and `rustfmt`\n+will cause any `./miri` command to automatically call `./miri toolchain`, `clippy` and `rustfmt`\n for you. If you don't want all of these to happen, you can add individual `.auto-toolchain`,\n `.auto-clippy` and `.auto-fmt` files respectively.\n \n@@ -132,7 +132,7 @@ development version of Miri using\n and then you can use it as if it was installed by `rustup`.  Make sure you use\n the same toolchain when calling `cargo miri` that you used when installing Miri!\n Usually this means you have to write `cargo +miri miri ...` to select the `miri`\n-toolchain that was installed by `./rustup-toolchain`.\n+toolchain that was installed by `./miri toolchain`.\n \n There's a test for the cargo wrapper in the `test-cargo-miri` directory; run\n `./run-test.py` in there to execute it. Like `./miri test`, this respects the\n@@ -217,7 +217,7 @@ for changes in rustc. In both cases, `rustc-version` needs updating.\n \n To update the `rustc-version` file and install the latest rustc, you can run:\n ```\n-./rustup-toolchain HEAD\n+./miri toolchain HEAD\n ```\n \n Now edit Miri until `./miri test` passes, and submit a PR. Generally, it is\n@@ -293,16 +293,14 @@ cargo run --release -p josh-proxy -- --local=$(pwd)/local --remote=https://githu\n \n ### Importing changes from the rustc repo\n \n+Josh needs to be running, as described above.\n We assume we start on an up-to-date master branch in the Miri repo.\n \n ```sh\n-# Fetch rustc side of the history. Takes ca 5 min the first time.\n-# Do NOT change that commit ID, it needs to be exactly this!\n-git fetch http://localhost:8000/rust-lang/rust.git:at_commit=75dd959a3a40eb5b4574f8d2e23aa6efbeb33573[:prefix=src/tools/miri]:/src/tools/miri.git master\n-# Include that history into ours.\n-git merge FETCH_HEAD -m \"merge rustc history\"\n+# Fetch and merge rustc side of the history. Takes ca 5 min the first time.\n+./miri rustc-pull\n # Update toolchain reference and apply formatting.\n-./rustup-toolchain HEAD && ./miri fmt\n+./miri toolchain HEAD && ./miri fmt\n git commit -am \"rustup\"\n ```\n \n@@ -313,16 +311,15 @@ needed.\n \n ### Exporting changes to the rustc repo\n \n-We will use the josh proxy to push to your fork of rustc. You need to make sure\n-that the master branch of your fork is up-to-date. Also make sure that there\n-exists no branch called `miri` in your fork. Then run the following in the Miri\n-repo, assuming we are on an up-to-date master branch:\n+Josh needs to be running, as described above. We will use the josh proxy to push\n+to your fork of rustc. Run the following in the Miri repo, assuming we are on an\n+up-to-date master branch:\n \n ```sh\n # Push the Miri changes to your rustc fork (substitute your github handle for YOUR_NAME).\n-# Do NOT change that commit ID, it needs to be exactly this!\n-git push http://localhost:8000/YOUR_NAME/rust.git:at_commit=75dd959a3a40eb5b4574f8d2e23aa6efbeb33573[:prefix=src/tools/miri]:/src/tools/miri.git -o base=master HEAD:miri\n+./miri rustc-push YOUR_NAME miri\n ```\n \n-This will create a new branch in your fork, and the output should include a link\n-to create a rustc PR that will integrate those changes into the main repository.\n+This will create a new branch called 'miri' in your fork, and the output should\n+include a link to create a rustc PR that will integrate those changes into the\n+main repository."}, {"sha": "1b84d188c55db27c915204522039d7336670ff59", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79a48ce71686a5a82cb000062915157170e16d61/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/79a48ce71686a5a82cb000062915157170e16d61/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=79a48ce71686a5a82cb000062915157170e16d61", "patch": "@@ -419,9 +419,9 @@ Some native rustc `-Z` flags are also very relevant for Miri:\n \n Moreover, Miri recognizes some environment variables:\n \n-* `MIRI_AUTO_OPS` indicates whether the automatic execution of rustfmt, clippy and rustup-toolchain\n-  should be skipped. If it is set to any value, they are skipped. This is used for avoiding\n-  infinite recursion in `./miri` and to allow automated IDE actions to avoid the auto ops.\n+* `MIRI_AUTO_OPS` indicates whether the automatic execution of rustfmt, clippy and toolchain setup\n+  should be skipped. If it is set to any value, they are skipped. This is used for avoiding infinite\n+  recursion in `./miri` and to allow automated IDE actions to avoid the auto ops.\n * `MIRI_LOG`, `MIRI_BACKTRACE` control logging and backtrace printing during\n   Miri executions, also [see \"Testing the Miri driver\" in `CONTRIBUTING.md`][testing-miri].\n * `MIRIFLAGS` (recognized by `cargo miri` and the test suite) defines extra"}, {"sha": "52902410a6b2d598397703a4e59de35039af8daf", "filename": "src/tools/miri/miri", "status": "modified", "additions": 122, "deletions": 31, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/79a48ce71686a5a82cb000062915157170e16d61/src%2Ftools%2Fmiri%2Fmiri", "raw_url": "https://github.com/rust-lang/rust/raw/79a48ce71686a5a82cb000062915157170e16d61/src%2Ftools%2Fmiri%2Fmiri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fmiri?ref=79a48ce71686a5a82cb000062915157170e16d61", "patch": "@@ -42,6 +42,22 @@ many different seeds.\n Runs the benchmarks from bench-cargo-miri in hyperfine. hyperfine needs to be installed.\n <benches> can explicitly list the benchmarks to run; by default, all of them are run.\n \n+./miri rustc-pull:\n+Pull and merge Miri changes from the rustc repo.\n+\n+./miri rustc-push <github user> <branch>:\n+Push Miri changes back to the rustc repo. This will update the 'master' branch\n+in the Rust fork of the given user to upstream. It will also pull a copy of the\n+rustc history into the Miri repo, unless you set the RUSTC_GIT env var to an\n+existing clone of the rustc repo.\n+\n+./miri toolchain <commit> <flags>:\n+Update and activate the rustup toolchain 'miri'. If no commit is given, updates\n+to the commit given in the `rust-version` file. If the commit is `HEAD`, updates\n+to the latest upstream rustc commit.\n+`rustup-toolchain-install-master` must be installed for this to work. Any extra\n+flags are passed to `rustup-toolchain-install-master`.\n+\n   ENVIRONMENT VARIABLES\n \n MIRI_SYSROOT:\n@@ -52,37 +68,96 @@ Pass extra flags to all cargo invocations. (Ignored by `./miri cargo`.)\n EOF\n )\n \n-## We need to know where we are.\n+## We need to know which command to run and some global constants.\n+COMMAND=\"$1\"\n+if [ -z \"$COMMAND\" ]; then\n+    echo \"$USAGE\"\n+    exit 1\n+fi\n+shift\n # macOS does not have a useful readlink/realpath so we have to use Python instead...\n MIRIDIR=$(python3 -c 'import os, sys; print(os.path.dirname(os.path.realpath(sys.argv[1])))' \"$0\")\n+# Used for rustc syncs.\n+JOSH_FILTER=\":at_commit=75dd959a3a40eb5b4574f8d2e23aa6efbeb33573[:prefix=src/tools/miri]:/src/tools/miri\"\n \n-## Run the auto-things.\n-if [ -z \"$MIRI_AUTO_OPS\" ]; then\n-    export MIRI_AUTO_OPS=42\n-\n-    # Run this first, so that the toolchain doesn't change after\n-    # other code has run.\n-    if [ -f \"$MIRIDIR/.auto-everything\" ] || [ -f \"$MIRIDIR/.auto-toolchain\" ] ; then\n-        (cd \"$MIRIDIR\" && ./rustup-toolchain)\n+## Early commands, that don't do auto-things and don't want the environment-altering things happening below.\n+case \"$COMMAND\" in\n+toolchain)\n+    cd \"$MIRIDIR\"\n+    # Make sure rustup-toolchain-install-master is installed.\n+    if ! which rustup-toolchain-install-master >/dev/null; then\n+        echo \"Please install rustup-toolchain-install-master by running 'cargo install rustup-toolchain-install-master'\"\n+        exit 1\n     fi\n-\n-    if [ -f \"$MIRIDIR/.auto-everything\" ] || [ -f \"$MIRIDIR/.auto-fmt\" ] ; then\n-        $0 fmt\n+    # Determine new commit.\n+    if [[ \"$1\" == \"\" ]]; then\n+        NEW_COMMIT=$(cat rust-version)\n+    elif [[ \"$1\" == \"HEAD\" ]]; then\n+        NEW_COMMIT=$(git ls-remote https://github.com/rust-lang/rust/ HEAD | cut -f 1)\n+    else\n+        NEW_COMMIT=\"$1\"\n     fi\n-\n-    if [ -f \"$MIRIDIR/.auto-everything\" ] || [ -f \"$MIRIDIR/.auto-clippy\" ] ; then\n-        $0 clippy -- -D warnings\n+    echo \"$NEW_COMMIT\" > rust-version\n+    shift || true # don't fail if shifting fails because no commit was given\n+    # Check if we already are at that commit.\n+    CUR_COMMIT=$(rustc +miri --version -v 2>/dev/null | grep \"^commit-hash: \" | cut -d \" \" -f 2)\n+    if [[ \"$CUR_COMMIT\" == \"$NEW_COMMIT\" ]]; then\n+        echo \"miri toolchain is already at commit $CUR_COMMIT.\"\n+        rustup override set miri\n+        exit 0\n     fi\n-fi\n-\n-## Determine command and toolchain.\n-COMMAND=\"$1\"\n-[ $# -gt 0 ] && shift\n-# Doing this *after* auto-toolchain logic above, since that might change the toolchain.\n-TOOLCHAIN=$(cd \"$MIRIDIR\"; rustup show active-toolchain | head -n 1 | cut -d ' ' -f 1)\n-\n-## Handle some commands early, since they should *not* alter the environment.\n-case \"$COMMAND\" in\n+    # Install and setup new toolchain.\n+    rustup toolchain uninstall miri\n+    rustup-toolchain-install-master -n miri -c cargo -c rust-src -c rustc-dev -c llvm-tools -c rustfmt -c clippy \"$@\" -- \"$NEW_COMMIT\"\n+    rustup override set miri\n+    # Cleanup.\n+    cargo clean\n+    # Call 'cargo metadata' on the sources in case that changes the lockfile\n+    # (which fails under some setups when it is done from inside vscode).\n+    cargo metadata --format-version 1 --manifest-path \"$(rustc --print sysroot)/lib/rustlib/rustc-src/rust/compiler/rustc/Cargo.toml\" >/dev/null\n+    # Done!\n+    exit 0\n+    ;;\n+rustc-pull)\n+    cd \"$MIRIDIR\"\n+    git fetch http://localhost:8000/rust-lang/rust.git$JOSH_FILTER.git master\n+    git merge FETCH_HEAD\n+    exit 0\n+    ;;\n+rustc-push)\n+    USER=\"$1\"\n+    BRANCH=\"$2\"\n+    if [ -z \"$USER\" ] || [ -z \"$BRANCH\" ]; then\n+        echo \"Usage: $0 rustc-push <github user> <branch>\"\n+        exit 1\n+    fi\n+    if [ -n \"$RUSTC_GIT\" ]; then\n+        # Use an existing fork for the branch updates.\n+        cd \"$RUSTC_GIT\"\n+    else\n+        # Do this in the local Miri repo.\n+        echo \"This will pull a copy of the rust-lang/rust history into this Miri checkout, growing it by about 1GB.\"\n+        read -r -p \"To avoid that, abort now and set the RUSTC_GIT environment variable to an existing rustc checkout. Proceed? [y/N] \"\n+        if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n+            exit 1\n+        fi\n+        cd \"$MIRIDIR\"\n+    fi\n+    # Prepare the branches. For reliable pushing we need to push to a non-existent branch\n+    # and set `-o base` to a branch that holds current rustc master.\n+    echo \"Preparing $USER/rust...\"\n+    if git fetch https://github.com/$USER/rust $BRANCH &>/dev/null; then\n+        echo \"The '$BRANCH' seems to already exist in $USER/rust. Please delete it and try again.\"\n+        exit 1\n+    fi\n+    git fetch https://github.com/rust-lang/rust master\n+    git push https://github.com/$USER/rust FETCH_HEAD:master\n+    # Do the actual push.\n+    cd \"$MIRIDIR\"\n+    echo \"Pushing Miri changes...\"\n+    git push http://localhost:8000/$USER/rust.git$JOSH_FILTER.git HEAD:$BRANCH -o base=master\n+    exit 0\n+    ;;\n many-seeds)\n     for SEED in $({ echo obase=16; seq 0 255; } | bc); do\n         echo \"Trying seed: $SEED\"\n@@ -106,9 +181,28 @@ bench)\n     ;;\n esac\n \n+## Run the auto-things.\n+if [ -z \"$MIRI_AUTO_OPS\" ]; then\n+    export MIRI_AUTO_OPS=42\n+\n+    # Run this first, so that the toolchain doesn't change after\n+    # other code has run.\n+    if [ -f \"$MIRIDIR/.auto-everything\" ] || [ -f \"$MIRIDIR/.auto-toolchain\" ] ; then\n+        $0 toolchain\n+    fi\n+\n+    if [ -f \"$MIRIDIR/.auto-everything\" ] || [ -f \"$MIRIDIR/.auto-fmt\" ] ; then\n+        $0 fmt\n+    fi\n+\n+    if [ -f \"$MIRIDIR/.auto-everything\" ] || [ -f \"$MIRIDIR/.auto-clippy\" ] ; then\n+        $0 clippy -- -D warnings\n+    fi\n+fi\n+\n ## Prepare the environment\n # Determine some toolchain properties\n-# export the target so its available in miri\n+TOOLCHAIN=$(cd \"$MIRIDIR\"; rustup show active-toolchain | head -n 1 | cut -d ' ' -f 1)\n TARGET=$(rustc +$TOOLCHAIN --version --verbose | grep \"^host:\" | cut -d ' ' -f 2)\n SYSROOT=$(rustc +$TOOLCHAIN --print sysroot)\n LIBDIR=$SYSROOT/lib/rustlib/$TARGET/lib\n@@ -227,10 +321,7 @@ cargo)\n     $CARGO \"$@\"\n     ;;\n *)\n-    if [ -n \"$COMMAND\" ]; then\n-      echo \"Unknown command: $COMMAND\"\n-      echo\n-    fi\n-    echo \"$USAGE\"\n+    echo \"Unknown command: $COMMAND\"\n     exit 1\n+    ;;\n esac"}, {"sha": "e582bf35356d6d196030aa0363d6c6f38fc99d0d", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a48ce71686a5a82cb000062915157170e16d61/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/79a48ce71686a5a82cb000062915157170e16d61/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=79a48ce71686a5a82cb000062915157170e16d61", "patch": "@@ -1 +1 @@\n-85d089b41e2a0c0f07ab34f6c5a7c451389f25e6\n+607878d069267e1402ad792c9331b426e4c6d0f9"}, {"sha": "d7730f2b06d36a33cceb880461bef5213ff719c3", "filename": "src/tools/miri/rustup-toolchain", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/18a23a5d03519eb5d4348a6d0e519b279af628ca/src%2Ftools%2Fmiri%2Frustup-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/18a23a5d03519eb5d4348a6d0e519b279af628ca/src%2Ftools%2Fmiri%2Frustup-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frustup-toolchain?ref=18a23a5d03519eb5d4348a6d0e519b279af628ca", "patch": "@@ -1,53 +0,0 @@\n-#!/bin/bash\n-set -e\n-# Manages a rustup toolchain called \"miri\".\n-#\n-# All commands set \"miri\" as the override toolchain for the current directory,\n-# and make the `rust-version` file match that toolchain.\n-#\n-# USAGE:\n-#\n-# ./rustup-toolchain: Update \"miri\" toolchain to match `rust-version` (the known-good version for this commit).\n-#\n-# ./rustup-toolchain HEAD: Update \"miri\" toolchain and `rust-version` file to latest rustc HEAD.\n-#\n-# ./rustup-toolchain $COMMIT: Update \"miri\" toolchain and `rust-version` file to match that commit.\n-#\n-# Any extra parameters are passed to `rustup-toolchain-install-master`.\n-\n-# Make sure rustup-toolchain-install-master is installed.\n-if ! which rustup-toolchain-install-master >/dev/null; then\n-    echo \"Please install rustup-toolchain-install-master by running 'cargo install rustup-toolchain-install-master'\"\n-    exit 1\n-fi\n-\n-# Determine new commit.\n-if [[ \"$1\" == \"\" ]]; then\n-    NEW_COMMIT=$(cat rust-version)\n-elif [[ \"$1\" == \"HEAD\" ]]; then\n-    NEW_COMMIT=$(git ls-remote https://github.com/rust-lang/rust/ HEAD | cut -f 1)\n-else\n-    NEW_COMMIT=\"$1\"\n-fi\n-echo \"$NEW_COMMIT\" > rust-version\n-shift || true # don't fail if shifting fails\n-\n-# Check if we already are at that commit.\n-CUR_COMMIT=$(rustc +miri --version -v 2>/dev/null | grep \"^commit-hash: \" | cut -d \" \" -f 2)\n-if [[ \"$CUR_COMMIT\" == \"$NEW_COMMIT\" ]]; then\n-    echo \"miri toolchain is already at commit $CUR_COMMIT.\"\n-    rustup override set miri\n-    exit 0\n-fi\n-\n-# Install and setup new toolchain.\n-rustup toolchain uninstall miri\n-rustup-toolchain-install-master -n miri -c cargo -c rust-src -c rustc-dev -c llvm-tools -c rustfmt -c clippy \"$@\" -- \"$NEW_COMMIT\"\n-rustup override set miri\n-\n-# Cleanup.\n-cargo clean\n-\n-# Call 'cargo metadata' on the sources in case that changes the lockfile\n-# (which fails under some setups when it is done from inside vscode).\n-cargo metadata --format-version 1 --manifest-path \"$(rustc --print sysroot)/lib/rustlib/rustc-src/rust/compiler/rustc/Cargo.toml\" >/dev/null"}]}