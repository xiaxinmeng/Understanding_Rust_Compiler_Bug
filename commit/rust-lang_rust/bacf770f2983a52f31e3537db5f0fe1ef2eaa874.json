{"sha": "bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhY2Y3NzBmMjk4M2E1MmYzMWUzNTM3ZGI1ZjBmZTFlZjJlYWE4NzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-05T17:45:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-05T17:45:41Z"}, "message": "Auto merge of #84956 - RalfJung:rollup-m70mx2n, r=RalfJung\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #83553 (Update `ptr` docs with regards to `ptr::addr_of!`)\n - #84183 (Update RELEASES.md for 1.52.0)\n - #84709 (Add doc alias for `chdir` to `std::env::set_current_dir`)\n - #84803 (Reduce duplication in `impl_dep_tracking_hash` macros)\n - #84808 (Account for unsatisfied bounds in E0599)\n - #84843 (use else if in std library )\n - #84865 (rustbuild: Pass a `threads` flag that works to windows-gnu lld)\n - #84878 (Clarify documentation for `[T]::contains`)\n - #84882 (platform-support: Center the contents of the `std` and `host` columns)\n - #84903 (Remove `rustc_middle::mir::interpret::CheckInAllocMsg::NullPointerTest`)\n - #84913 (Do not ICE on invalid const param)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f35a4695fe4ea4a79e83c87b0fe6c8ea2e80f687", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f35a4695fe4ea4a79e83c87b0fe6c8ea2e80f687"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "html_url": "https://github.com/rust-lang/rust/commit/bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "html_url": "https://github.com/rust-lang/rust/commit/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb"}, {"sha": "2cbcfae6548e08fe079ae0b7db0d97ec30e006d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cbcfae6548e08fe079ae0b7db0d97ec30e006d8", "html_url": "https://github.com/rust-lang/rust/commit/2cbcfae6548e08fe079ae0b7db0d97ec30e006d8"}], "stats": {"total": 485, "additions": 362, "deletions": 123}, "files": [{"sha": "1f940e6bc2d3b6d8be4ee23c37c38802139b259c", "filename": "RELEASES.md", "status": "modified", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -1,3 +1,151 @@\n+Version 1.52.0 (2021-05-06)\n+============================\n+\n+Language\n+--------\n+- [Added the `unsafe_op_in_unsafe_fn` lint, which checks whether the unsafe code\n+  in an `unsafe fn` is wrapped in a `unsafe` block.][79208] This lint\n+  is allowed by default, and may become a warning or hard error in a\n+  future edition.\n+- [You can now cast mutable references to arrays to a pointer of the same type as\n+  the element.][81479]\n+\n+Compiler\n+--------\n+- [Upgraded the default LLVM to LLVM 12.][81451]\n+\n+Added tier 3\\* support for the following targets.\n+\n+- [`s390x-unknown-linux-musl`][82166]\n+- [`riscv32gc-unknown-linux-musl` & `riscv64gc-unknown-linux-musl`][82202]\n+- [`powerpc-unknown-openbsd`][82733]\n+\n+\\* Refer to Rust's [platform support page][platform-support-doc] for more\n+information on Rust's tiered platform support.\n+\n+Libraries\n+---------\n+- [`OsString` now implements `Extend` and `FromIterator`.][82121]\n+- [`cmp::Reverse` now has `#[repr(transparent)]` representation.][81879]\n+- [`Arc<impl Error>` now implements `error::Error`.][80553]\n+- [All integer division and remainder operations are now `const`.][80962]\n+\n+Stabilised APIs\n+-------------\n+- [`Arguments::as_str`]\n+- [`char::MAX`]\n+- [`char::REPLACEMENT_CHARACTER`]\n+- [`char::UNICODE_VERSION`]\n+- [`char::decode_utf16`]\n+- [`char::from_digit`]\n+- [`char::from_u32_unchecked`]\n+- [`char::from_u32`]\n+- [`slice::partition_point`]\n+- [`str::rsplit_once`]\n+- [`str::split_once`]\n+\n+The following previously stable APIs are now `const`.\n+\n+- [`char::len_utf8`]\n+- [`char::len_utf16`]\n+- [`char::to_ascii_uppercase`]\n+- [`char::to_ascii_lowercase`]\n+- [`char::eq_ignore_ascii_case`]\n+- [`u8::to_ascii_uppercase`]\n+- [`u8::to_ascii_lowercase`]\n+- [`u8::eq_ignore_ascii_case`]\n+\n+Rustdoc\n+-------\n+- [Rustdoc lints are now treated as a tool lint, meaning that\n+  lints are now prefixed with `rustdoc::` (e.g. `#[warn(rustdoc::non_autolinks)]`).][80527]\n+  Using the old style is still allowed, and will become a warning in\n+  a future release.\n+- [Rustdoc now supports argument files.][82261]\n+- [Rustdoc now generates smart punctuation for documentation.][79423]\n+- [You can now use \"task lists\" in Rustdoc Markdown.][81766] E.g.\n+  ```markdown\n+  - [x] Complete\n+  - [ ] Todo\n+  ```\n+\n+Misc\n+----\n+- [You can now pass multiple filters to tests.][81356] E.g.\n+  `cargo test -- foo bar` will run all tests that match `foo` and `bar`.\n+- [Rustup now distributes PDB symbols for the `std` library on Windows,\n+  allowing you to see `std` symbols when debugging.][82218]\n+\n+Internal Only\n+-------------\n+These changes provide no direct user facing benefits, but represent significant\n+improvements to the internals and overall performance of rustc and\n+related tools.\n+\n+- [Check the result cache before the DepGraph when ensuring queries][81855]\n+- [Try fast_reject::simplify_type in coherence before doing full check][81744]\n+- [Only store a LocalDefId in some HIR nodes][81611]\n+- [Store HIR attributes in a side table][79519]\n+\n+Compatibility Notes\n+-------------------\n+- [Cargo build scripts are now forbidden from setting `RUSTC_BOOTSTRAP`.][cargo/9181]\n+- [Removed support for the `x86_64-rumprun-netbsd` target.][82594]\n+- [Deprecated the `x86_64-sun-solaris` target in favor of `x86_64-pc-solaris`.][82216]\n+- [Rustdoc now only accepts `,`, ` `, and `\\t` as delimiters for specifying\n+  languages in code blocks.][78429]\n+- [Rustc now catches more cases of `pub_use_of_private_extern_crate`][80763]\n+- [Changes in how proc macros handle whitespace may lead to panics when used\n+  with older `proc-macro-hack` versions. A `cargo update` should be sufficient to fix this in all cases.][84136]\n+\n+[84136]: https://github.com/rust-lang/rust/issues/84136\n+[80763]: https://github.com/rust-lang/rust/pull/80763\n+[82166]: https://github.com/rust-lang/rust/pull/82166\n+[82121]: https://github.com/rust-lang/rust/pull/82121\n+[81879]: https://github.com/rust-lang/rust/pull/81879\n+[82261]: https://github.com/rust-lang/rust/pull/82261\n+[82218]: https://github.com/rust-lang/rust/pull/82218\n+[82216]: https://github.com/rust-lang/rust/pull/82216\n+[82202]: https://github.com/rust-lang/rust/pull/82202\n+[81855]: https://github.com/rust-lang/rust/pull/81855\n+[81766]: https://github.com/rust-lang/rust/pull/81766\n+[81744]: https://github.com/rust-lang/rust/pull/81744\n+[81611]: https://github.com/rust-lang/rust/pull/81611\n+[81479]: https://github.com/rust-lang/rust/pull/81479\n+[81451]: https://github.com/rust-lang/rust/pull/81451\n+[81356]: https://github.com/rust-lang/rust/pull/81356\n+[80962]: https://github.com/rust-lang/rust/pull/80962\n+[80553]: https://github.com/rust-lang/rust/pull/80553\n+[80527]: https://github.com/rust-lang/rust/pull/80527\n+[79519]: https://github.com/rust-lang/rust/pull/79519\n+[79423]: https://github.com/rust-lang/rust/pull/79423\n+[79208]: https://github.com/rust-lang/rust/pull/79208\n+[78429]: https://github.com/rust-lang/rust/pull/78429\n+[82733]: https://github.com/rust-lang/rust/pull/82733\n+[82594]: https://github.com/rust-lang/rust/pull/82594\n+[cargo/9181]: https://github.com/rust-lang/cargo/pull/9181\n+[`char::MAX`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.MAX\n+[`char::REPLACEMENT_CHARACTER`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.REPLACEMENT_CHARACTER\n+[`char::UNICODE_VERSION`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.UNICODE_VERSION\n+[`char::decode_utf16`]: https://doc.rust-lang.org/std/primitive.char.html#method.decode_utf16\n+[`char::from_u32`]: https://doc.rust-lang.org/std/primitive.char.html#method.from_u32\n+[`char::from_u32_unchecked`]: https://doc.rust-lang.org/std/primitive.char.html#method.from_u32_unchecked\n+[`char::from_digit`]: https://doc.rust-lang.org/std/primitive.char.html#method.from_digit\n+[`Peekable::next_if`]: https://doc.rust-lang.org/stable/std/iter/struct.Peekable.html#method.next_if\n+[`Peekable::next_if_eq`]: https://doc.rust-lang.org/stable/std/iter/struct.Peekable.html#method.next_if_eq\n+[`Arguments::as_str`]: https://doc.rust-lang.org/stable/std/fmt/struct.Arguments.html#method.as_str\n+[`str::split_once`]: https://doc.rust-lang.org/stable/std/primitive.str.html#method.split_once\n+[`str::rsplit_once`]: https://doc.rust-lang.org/stable/std/primitive.str.html#method.rsplit_once\n+[`slice::partition_point`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.partition_point\n+[`char::len_utf8`]: https://doc.rust-lang.org/stable/std/primitive.char.html#method.len_utf8\n+[`char::len_utf16`]: https://doc.rust-lang.org/stable/std/primitive.char.html#method.len_utf16\n+[`char::to_ascii_uppercase`]: https://doc.rust-lang.org/stable/std/primitive.char.html#method.to_ascii_uppercase\n+[`char::to_ascii_lowercase`]: https://doc.rust-lang.org/stable/std/primitive.char.html#method.to_ascii_lowercase\n+[`char::eq_ignore_ascii_case`]: https://doc.rust-lang.org/stable/std/primitive.char.html#method.eq_ignore_ascii_case\n+[`u8::to_ascii_uppercase`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.to_ascii_uppercase\n+[`u8::to_ascii_lowercase`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.to_ascii_lowercase\n+[`u8::eq_ignore_ascii_case`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.eq_ignore_ascii_case\n+\n Version 1.51.0 (2021-03-25)\n ============================\n "}, {"sha": "e452463fbf5de8beb1acf99bd5860e7b06da050f", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -171,7 +171,6 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n #[derive(Debug, Copy, Clone, TyEncodable, TyDecodable, HashStable)]\n pub enum CheckInAllocMsg {\n     MemoryAccessTest,\n-    NullPointerTest,\n     PointerArithmeticTest,\n     InboundsTest,\n }\n@@ -185,7 +184,6 @@ impl fmt::Display for CheckInAllocMsg {\n             \"{}\",\n             match *self {\n                 CheckInAllocMsg::MemoryAccessTest => \"memory access\",\n-                CheckInAllocMsg::NullPointerTest => \"null pointer test\",\n                 CheckInAllocMsg::PointerArithmeticTest => \"pointer arithmetic\",\n                 CheckInAllocMsg::InboundsTest => \"inbounds test\",\n             }\n@@ -308,9 +306,6 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n                 ptr.alloc_id,\n                 allocation_size.bytes()\n             ),\n-            DanglingIntPointer(_, CheckInAllocMsg::NullPointerTest) => {\n-                write!(f, \"null pointer is not allowed for this operation\")\n-            }\n             DanglingIntPointer(i, msg) => {\n                 write!(f, \"{} failed: 0x{:x} is not a valid pointer\", msg, i)\n             }"}, {"sha": "08d6f4a46fefeafb9a1da67843cd635ef4d1ce3c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 61, "deletions": 57, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -2332,17 +2332,17 @@ crate mod dep_tracking {\n     }\n \n     macro_rules! impl_dep_tracking_hash_via_hash {\n-        ($t:ty) => {\n+        ($($t:ty),+ $(,)?) => {$(\n             impl DepTrackingHash for $t {\n                 fn hash(&self, hasher: &mut DefaultHasher, _: ErrorOutputType) {\n                     Hash::hash(self, hasher);\n                 }\n             }\n-        };\n+        )+};\n     }\n \n     macro_rules! impl_dep_tracking_hash_for_sortable_vec_of {\n-        ($t:ty) => {\n+        ($($t:ty),+ $(,)?) => {$(\n             impl DepTrackingHash for Vec<$t> {\n                 fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n                     let mut elems: Vec<&$t> = self.iter().collect();\n@@ -2354,61 +2354,65 @@ crate mod dep_tracking {\n                     }\n                 }\n             }\n-        };\n-    }\n+        )+};\n+    }\n+\n+    impl_dep_tracking_hash_via_hash!(\n+        bool,\n+        usize,\n+        u64,\n+        String,\n+        PathBuf,\n+        lint::Level,\n+        Option<bool>,\n+        Option<u32>,\n+        Option<usize>,\n+        Option<NonZeroUsize>,\n+        Option<String>,\n+        Option<(String, u64)>,\n+        Option<Vec<String>>,\n+        Option<MergeFunctions>,\n+        Option<RelocModel>,\n+        Option<CodeModel>,\n+        Option<TlsModel>,\n+        Option<WasiExecModel>,\n+        Option<PanicStrategy>,\n+        Option<RelroLevel>,\n+        Option<InstrumentCoverage>,\n+        Option<lint::Level>,\n+        Option<PathBuf>,\n+        CrateType,\n+        MergeFunctions,\n+        PanicStrategy,\n+        RelroLevel,\n+        Passes,\n+        OptLevel,\n+        LtoCli,\n+        DebugInfo,\n+        UnstableFeatures,\n+        OutputTypes,\n+        NativeLibKind,\n+        SanitizerSet,\n+        CFGuard,\n+        TargetTriple,\n+        Edition,\n+        LinkerPluginLto,\n+        Option<SplitDebuginfo>,\n+        SwitchWithOptPath,\n+        Option<SymbolManglingVersion>,\n+        Option<SourceFileHashAlgorithm>,\n+        TrimmedDefPaths,\n+    );\n \n-    impl_dep_tracking_hash_via_hash!(bool);\n-    impl_dep_tracking_hash_via_hash!(usize);\n-    impl_dep_tracking_hash_via_hash!(u64);\n-    impl_dep_tracking_hash_via_hash!(String);\n-    impl_dep_tracking_hash_via_hash!(PathBuf);\n-    impl_dep_tracking_hash_via_hash!(lint::Level);\n-    impl_dep_tracking_hash_via_hash!(Option<bool>);\n-    impl_dep_tracking_hash_via_hash!(Option<u32>);\n-    impl_dep_tracking_hash_via_hash!(Option<usize>);\n-    impl_dep_tracking_hash_via_hash!(Option<NonZeroUsize>);\n-    impl_dep_tracking_hash_via_hash!(Option<String>);\n-    impl_dep_tracking_hash_via_hash!(Option<(String, u64)>);\n-    impl_dep_tracking_hash_via_hash!(Option<Vec<String>>);\n-    impl_dep_tracking_hash_via_hash!(Option<MergeFunctions>);\n-    impl_dep_tracking_hash_via_hash!(Option<RelocModel>);\n-    impl_dep_tracking_hash_via_hash!(Option<CodeModel>);\n-    impl_dep_tracking_hash_via_hash!(Option<TlsModel>);\n-    impl_dep_tracking_hash_via_hash!(Option<WasiExecModel>);\n-    impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n-    impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n-    impl_dep_tracking_hash_via_hash!(Option<InstrumentCoverage>);\n-    impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n-    impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n-    impl_dep_tracking_hash_via_hash!(CrateType);\n-    impl_dep_tracking_hash_via_hash!(MergeFunctions);\n-    impl_dep_tracking_hash_via_hash!(PanicStrategy);\n-    impl_dep_tracking_hash_via_hash!(RelroLevel);\n-    impl_dep_tracking_hash_via_hash!(Passes);\n-    impl_dep_tracking_hash_via_hash!(OptLevel);\n-    impl_dep_tracking_hash_via_hash!(LtoCli);\n-    impl_dep_tracking_hash_via_hash!(DebugInfo);\n-    impl_dep_tracking_hash_via_hash!(UnstableFeatures);\n-    impl_dep_tracking_hash_via_hash!(OutputTypes);\n-    impl_dep_tracking_hash_via_hash!(NativeLibKind);\n-    impl_dep_tracking_hash_via_hash!(SanitizerSet);\n-    impl_dep_tracking_hash_via_hash!(CFGuard);\n-    impl_dep_tracking_hash_via_hash!(TargetTriple);\n-    impl_dep_tracking_hash_via_hash!(Edition);\n-    impl_dep_tracking_hash_via_hash!(LinkerPluginLto);\n-    impl_dep_tracking_hash_via_hash!(Option<SplitDebuginfo>);\n-    impl_dep_tracking_hash_via_hash!(SwitchWithOptPath);\n-    impl_dep_tracking_hash_via_hash!(Option<SymbolManglingVersion>);\n-    impl_dep_tracking_hash_via_hash!(Option<SourceFileHashAlgorithm>);\n-    impl_dep_tracking_hash_via_hash!(TrimmedDefPaths);\n-\n-    impl_dep_tracking_hash_for_sortable_vec_of!(String);\n-    impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);\n-    impl_dep_tracking_hash_for_sortable_vec_of!((PathBuf, PathBuf));\n-    impl_dep_tracking_hash_for_sortable_vec_of!(CrateType);\n-    impl_dep_tracking_hash_for_sortable_vec_of!((String, lint::Level));\n-    impl_dep_tracking_hash_for_sortable_vec_of!((String, Option<String>, NativeLibKind));\n-    impl_dep_tracking_hash_for_sortable_vec_of!((String, u64));\n+    impl_dep_tracking_hash_for_sortable_vec_of!(\n+        String,\n+        PathBuf,\n+        (PathBuf, PathBuf),\n+        CrateType,\n+        (String, lint::Level),\n+        (String, Option<String>, NativeLibKind),\n+        (String, u64)\n+    );\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)\n     where"}, {"sha": "b2e4e7a981d201dfa1fe3c66132d97c0959bdf4a", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -579,6 +579,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n \n                 let mut restrict_type_params = false;\n+                let mut unsatisfied_bounds = false;\n                 if !unsatisfied_predicates.is_empty() {\n                     let def_span = |def_id| {\n                         self.tcx.sess.source_map().guess_head_span(self.tcx.def_span(def_id))\n@@ -739,6 +740,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         err.note(&format!(\n                             \"the following trait bounds were not satisfied:\\n{bound_list}\"\n                         ));\n+                        unsatisfied_bounds = true;\n                     }\n                 }\n \n@@ -752,6 +754,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         source,\n                         out_of_scope_traits,\n                         &unsatisfied_predicates,\n+                        unsatisfied_bounds,\n                     );\n                 }\n \n@@ -984,9 +987,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         source: SelfSource<'tcx>,\n         valid_out_of_scope_traits: Vec<DefId>,\n         unsatisfied_predicates: &[(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)],\n+        unsatisfied_bounds: bool,\n     ) {\n         let mut alt_rcvr_sugg = false;\n-        if let SelfSource::MethodCall(rcvr) = source {\n+        if let (SelfSource::MethodCall(rcvr), false) = (source, unsatisfied_bounds) {\n             debug!(?span, ?item_name, ?rcvr_ty, ?rcvr);\n             let skippable = [\n                 self.tcx.lang_items().clone_trait(),"}, {"sha": "97b6f5cf41211fb8873f22eb9c263b4f8383bcff", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -191,7 +191,25 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                     Res::Def(DefKind::Ctor(..), def_id) => {\n                         tcx.generics_of(tcx.parent(def_id).unwrap())\n                     }\n-                    Res::Def(_, def_id) => tcx.generics_of(def_id),\n+                    // Other `DefKind`s don't have generics and would ICE when calling\n+                    // `generics_of`.\n+                    Res::Def(\n+                        DefKind::Struct\n+                        | DefKind::Union\n+                        | DefKind::Enum\n+                        | DefKind::Variant\n+                        | DefKind::Trait\n+                        | DefKind::OpaqueTy\n+                        | DefKind::TyAlias\n+                        | DefKind::ForeignTy\n+                        | DefKind::TraitAlias\n+                        | DefKind::AssocTy\n+                        | DefKind::Fn\n+                        | DefKind::AssocFn\n+                        | DefKind::AssocConst\n+                        | DefKind::Impl,\n+                        def_id,\n+                    ) => tcx.generics_of(def_id),\n                     Res::Err => {\n                         tcx.sess.delay_span_bug(tcx.def_span(def_id), \"anon const with Res::Err\");\n                         return None;"}, {"sha": "2c324b15a1a1a75ed15c95fb922e06631328c3ff", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 23, "deletions": 38, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -720,9 +720,6 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n ///\n /// ## On `packed` structs\n ///\n-/// It is currently impossible to create raw pointers to unaligned fields\n-/// of a packed struct.\n-///\n /// Attempting to create a raw pointer to an `unaligned` struct field with\n /// an expression such as `&packed.unaligned as *const FieldType` creates an\n /// intermediate unaligned reference before converting that to a raw pointer.\n@@ -731,9 +728,13 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n /// As a result, using `&packed.unaligned as *const FieldType` causes immediate\n /// *undefined behavior* in your program.\n ///\n+/// Instead you must use the [`ptr::addr_of!`](addr_of) macro to\n+/// create the pointer. You may use that returned pointer together with this\n+/// function.\n+///\n /// An example of what not to do and how this relates to `read_unaligned` is:\n ///\n-/// ```no_run\n+/// ```\n /// #[repr(packed, C)]\n /// struct Packed {\n ///     _padding: u8,\n@@ -745,24 +746,15 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n ///     unaligned: 0x01020304,\n /// };\n ///\n-/// #[allow(unaligned_references)]\n-/// let v = unsafe {\n-///     // Here we attempt to take the address of a 32-bit integer which is not aligned.\n-///     let unaligned =\n-///         // A temporary unaligned reference is created here which results in\n-///         // undefined behavior regardless of whether the reference is used or not.\n-///         &packed.unaligned\n-///         // Casting to a raw pointer doesn't help; the mistake already happened.\n-///         as *const u32;\n+/// // Take the address of a 32-bit integer which is not aligned.\n+/// // In contrast to `&packed.unaligned as *const _`, this has no undefined behavior.\n+/// let unaligned = std::ptr::addr_of!(packed.unaligned);\n ///\n-///     let v = std::ptr::read_unaligned(unaligned);\n-///\n-///     v\n-/// };\n+/// let v = unsafe { std::ptr::read_unaligned(unaligned) };\n+/// assert_eq!(v, 0x01020304);\n /// ```\n ///\n /// Accessing unaligned fields directly with e.g. `packed.unaligned` is safe however.\n-// FIXME: Update docs based on outcome of RFC #2582 and friends.\n ///\n /// # Examples\n ///\n@@ -916,9 +908,6 @@ pub const unsafe fn write<T>(dst: *mut T, src: T) {\n ///\n /// ## On `packed` structs\n ///\n-/// It is currently impossible to create raw pointers to unaligned fields\n-/// of a packed struct.\n-///\n /// Attempting to create a raw pointer to an `unaligned` struct field with\n /// an expression such as `&packed.unaligned as *const FieldType` creates an\n /// intermediate unaligned reference before converting that to a raw pointer.\n@@ -927,36 +916,32 @@ pub const unsafe fn write<T>(dst: *mut T, src: T) {\n /// As a result, using `&packed.unaligned as *const FieldType` causes immediate\n /// *undefined behavior* in your program.\n ///\n-/// An example of what not to do and how this relates to `write_unaligned` is:\n+/// Instead you must use the [`ptr::addr_of_mut!`](addr_of_mut)\n+/// macro to create the pointer. You may use that returned pointer together with\n+/// this function.\n+///\n+/// An example of how to do it and how this relates to `write_unaligned` is:\n ///\n-/// ```no_run\n+/// ```\n /// #[repr(packed, C)]\n /// struct Packed {\n ///     _padding: u8,\n ///     unaligned: u32,\n /// }\n ///\n-/// let v = 0x01020304;\n /// let mut packed: Packed = unsafe { std::mem::zeroed() };\n ///\n-/// #[allow(unaligned_references)]\n-/// let v = unsafe {\n-///     // Here we attempt to take the address of a 32-bit integer which is not aligned.\n-///     let unaligned =\n-///         // A temporary unaligned reference is created here which results in\n-///         // undefined behavior regardless of whether the reference is used or not.\n-///         &mut packed.unaligned\n-///         // Casting to a raw pointer doesn't help; the mistake already happened.\n-///         as *mut u32;\n+/// // Take the address of a 32-bit integer which is not aligned.\n+/// // In contrast to `&packed.unaligned as *mut _`, this has no undefined behavior.\n+/// let unaligned = std::ptr::addr_of_mut!(packed.unaligned);\n ///\n-///     std::ptr::write_unaligned(unaligned, v);\n+/// unsafe { std::ptr::write_unaligned(unaligned, 42) };\n ///\n-///     v\n-/// };\n+/// assert_eq!({packed.unaligned}, 42); // `{...}` forces copying the field instead of creating a reference.\n /// ```\n ///\n-/// Accessing unaligned fields directly with e.g. `packed.unaligned` is safe however.\n-// FIXME: Update docs based on outcome of RFC #2582 and friends.\n+/// Accessing unaligned fields directly with e.g. `packed.unaligned` is safe however\n+/// (as can be seen in the `assert_eq!` above).\n ///\n /// # Examples\n ///"}, {"sha": "0923175414edd1786bac00de3575119ee25a0f7d", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -1948,8 +1948,9 @@ impl<T> [T] {\n     /// assert!(!v.contains(&50));\n     /// ```\n     ///\n-    /// If you do not have an `&T`, but just an `&U` such that `T: Borrow<U>`\n-    /// (e.g. `String: Borrow<str>`), you can use `iter().any`:\n+    /// If you do not have a `&T`, but some other value that you can compare\n+    /// with one (for example, `String` implements `PartialEq<str>`), you can\n+    /// use `iter().any`:\n     ///\n     /// ```\n     /// let v = [String::from(\"hello\"), String::from(\"world\")]; // slice of `String`"}, {"sha": "489b722440362fcbc11a173013f96eef17eb3861", "filename": "library/core/src/time.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -518,13 +518,11 @@ impl Duration {\n         if let Some(mut secs) = self.secs.checked_sub(rhs.secs) {\n             let nanos = if self.nanos >= rhs.nanos {\n                 self.nanos - rhs.nanos\n+            } else if let Some(sub_secs) = secs.checked_sub(1) {\n+                secs = sub_secs;\n+                self.nanos + NANOS_PER_SEC - rhs.nanos\n             } else {\n-                if let Some(sub_secs) = secs.checked_sub(1) {\n-                    secs = sub_secs;\n-                    self.nanos + NANOS_PER_SEC - rhs.nanos\n-                } else {\n-                    return None;\n-                }\n+                return None;\n             };\n             debug_assert!(nanos < NANOS_PER_SEC);\n             Some(Duration { secs, nanos })"}, {"sha": "11d052dae9e9094a745d2710fd8a720027778611", "filename": "library/std/src/env.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -61,6 +61,7 @@ pub fn current_dir() -> io::Result<PathBuf> {\n /// assert!(env::set_current_dir(&root).is_ok());\n /// println!(\"Successfully changed working directory to {}!\", root.display());\n /// ```\n+#[doc(alias = \"chdir\")]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn set_current_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n     os_imp::chdir(path.as_ref())"}, {"sha": "96ab32104ea2c0cffabfe6ca3f94fd6f14e9c7af", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -445,7 +445,27 @@ mod prim_unit {}\n /// Note that here the call to [`drop`] is for clarity - it indicates\n /// that we are done with the given value and it should be destroyed.\n ///\n-/// ## 3. Get it from C.\n+/// ## 3. Create it using `ptr::addr_of!`\n+///\n+/// Instead of coercing a reference to a raw pointer, you can use the macros\n+/// [`ptr::addr_of!`] (for `*const T`) and [`ptr::addr_of_mut!`] (for `*mut T`).\n+/// These macros allow you to create raw pointers to fields to which you cannot\n+/// create a reference (without causing undefined behaviour), such as an\n+/// unaligned field. This might be necessary if packed structs or uninitialized\n+/// memory is involved.\n+///\n+/// ```\n+/// #[derive(Debug, Default, Copy, Clone)]\n+/// #[repr(C, packed)]\n+/// struct S {\n+///     aligned: u8,\n+///     unaligned: u32,\n+/// }\n+/// let s = S::default();\n+/// let p = std::ptr::addr_of!(s.unaligned); // not allowed with coercion\n+/// ```\n+///\n+/// ## 4. Get it from C.\n ///\n /// ```\n /// # #![feature(rustc_private)]"}, {"sha": "db443756de3d007a8fd3b86e0f0c09ceeb611d78", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -1110,6 +1110,19 @@ struct Compiletest {\n     compare_mode: Option<&'static str>,\n }\n \n+impl Compiletest {\n+    fn add_lld_flags(builder: &Builder<'_>, target: TargetSelection, flags: &mut Vec<String>) {\n+        if builder.config.use_lld {\n+            if builder.is_fuse_ld_lld(target) {\n+                flags.push(\"-Clink-arg=-fuse-ld=lld\".to_string());\n+            }\n+\n+            let threads = if target.contains(\"windows\") { \"/threads:1\" } else { \"--threads=1\" };\n+            flags.push(format!(\"-Clink-arg=-Wl,{}\", threads));\n+        }\n+    }\n+}\n+\n impl Step for Compiletest {\n     type Output = ();\n \n@@ -1250,18 +1263,12 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         let mut hostflags = flags.clone();\n         hostflags.push(format!(\"-Lnative={}\", builder.test_helpers_out(compiler.host).display()));\n-        if builder.is_fuse_ld_lld(compiler.host) {\n-            hostflags.push(\"-Clink-args=-fuse-ld=lld\".to_string());\n-            hostflags.push(\"-Clink-arg=-Wl,--threads=1\".to_string());\n-        }\n+        Self::add_lld_flags(builder, compiler.host, &mut hostflags);\n         cmd.arg(\"--host-rustcflags\").arg(hostflags.join(\" \"));\n \n         let mut targetflags = flags;\n         targetflags.push(format!(\"-Lnative={}\", builder.test_helpers_out(target).display()));\n-        if builder.is_fuse_ld_lld(target) {\n-            targetflags.push(\"-Clink-args=-fuse-ld=lld\".to_string());\n-            targetflags.push(\"-Clink-arg=-Wl,--threads=1\".to_string());\n-        }\n+        Self::add_lld_flags(builder, target, &mut targetflags);\n         cmd.arg(\"--target-rustcflags\").arg(targetflags.join(\" \"));\n \n         cmd.arg(\"--docck-python\").arg(builder.python());"}, {"sha": "f9a7599c497449e05dadcadaa95a5e019f2c9bff", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -113,7 +113,7 @@ The `std` column in the table below has the following meanings:\n [`no_std`]: https://rust-embedded.github.io/book/intro/no-std.html\n \n target | std | notes\n--------|-----|-------\n+-------|:---:|-------\n `aarch64-apple-ios` | \u2713 | ARM64 iOS\n `aarch64-fuchsia` | \u2713 | ARM64 Fuchsia\n `aarch64-linux-android` | \u2713 | ARM64 Android\n@@ -194,7 +194,7 @@ The `host` column indicates whether the codebase includes support for building\n host tools.\n \n target | std | host | notes\n--------|-----|------|-------\n+-------|:---:|:----:|-------\n `aarch64-apple-ios-macabi` | ? |  | Apple Catalyst on ARM64\n `aarch64-apple-ios-sim` | ? |  | Apple iOS Simulator on ARM64\n `aarch64-apple-tvos` | * |  | ARM64 tvOS"}, {"sha": "4dbadbdf98206d8edefb96c27465533e7295cc03", "filename": "src/test/ui/suggestions/import-trait-for-method-call.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.rs?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -6,4 +6,11 @@ fn next_u64() -> u64 {\n     h.finish() //~ ERROR no method named `finish` found for struct `DefaultHasher`\n }\n \n-fn main() {}\n+trait Bar {}\n+impl Bar for String {}\n+\n+fn main() {\n+    let s = String::from(\"hey\");\n+    let x: &dyn Bar = &s;\n+    x.as_ref(); //~ ERROR the method `as_ref` exists for reference `&dyn Bar`, but its trait bounds\n+}"}, {"sha": "a2b9b9d14ab090f27d85d5ef0eb3c35ac4c7ccff", "filename": "src/test/ui/suggestions/import-trait-for-method-call.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -15,6 +15,22 @@ help: the following trait is implemented but not in scope; perhaps add a `use` f\n LL | use std::hash::Hasher;\n    |\n \n-error: aborting due to previous error\n+error[E0599]: the method `as_ref` exists for reference `&dyn Bar`, but its trait bounds were not satisfied\n+  --> $DIR/import-trait-for-method-call.rs:15:7\n+   |\n+LL | trait Bar {}\n+   | --------- doesn't satisfy `dyn Bar: AsRef<_>`\n+...\n+LL |     x.as_ref();\n+   |       ^^^^^^ method cannot be called on `&dyn Bar` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `dyn Bar: AsRef<_>`\n+           which is required by `&dyn Bar: AsRef<_>`\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `as_ref`, perhaps you need to implement it:\n+           candidate #1: `AsRef`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0599`."}, {"sha": "c646f71072532a4631ddfd8009793527b796ddcc", "filename": "src/test/ui/typeck/issue-84831.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/src%2Ftest%2Fui%2Ftypeck%2Fissue-84831.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/src%2Ftest%2Fui%2Ftypeck%2Fissue-84831.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-84831.rs?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -0,0 +1,9 @@\n+fn f() {\n+    std::<0>; //~ ERROR expected value\n+}\n+fn j() {\n+    std::<_ as _>; //~ ERROR expected value\n+    //~^ ERROR expected one of `,` or `>`, found keyword `as`\n+}\n+\n+fn main () {}"}, {"sha": "e3cce10a00fd1fc68cb81190b8fba7993322f3ad", "filename": "src/test/ui/typeck/issue-84831.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/src%2Ftest%2Fui%2Ftypeck%2Fissue-84831.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bacf770f2983a52f31e3537db5f0fe1ef2eaa874/src%2Ftest%2Fui%2Ftypeck%2Fissue-84831.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-84831.stderr?ref=bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "patch": "@@ -0,0 +1,26 @@\n+error: expected one of `,` or `>`, found keyword `as`\n+  --> $DIR/issue-84831.rs:5:13\n+   |\n+LL |     std::<_ as _>;\n+   |             ^^ expected one of `,` or `>`\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     std::<{ _ as _ }>;\n+   |           ^        ^\n+\n+error[E0423]: expected value, found crate `std`\n+  --> $DIR/issue-84831.rs:2:5\n+   |\n+LL |     std::<0>;\n+   |     ^^^^^^^^ not a value\n+\n+error[E0423]: expected value, found crate `std`\n+  --> $DIR/issue-84831.rs:5:5\n+   |\n+LL |     std::<_ as _>;\n+   |     ^^^^^^^^^^^^^ not a value\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0423`."}]}