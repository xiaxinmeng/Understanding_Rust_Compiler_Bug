{"sha": "cb3826d9adcb185fbf438602e82ae99ff1878779", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMzgyNmQ5YWRjYjE4NWZiZjQzODYwMmU4MmFlOTlmZjE4Nzg3Nzk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-12-21T17:39:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-12-21T22:00:17Z"}, "message": "std: Ensure AssertRecoverSafe indeed is more often\n\nTypes like `&AssertRecoverSafe<T>` and `Rc<AssertRecoverSafe<T>>` were\nmistakenly not considered recover safe, but the point of the assertion wrapper\nis that it indeed is! This was caused by an interaction between the\n`RecoverSafe` and `NoUnsafeCell` marker traits, and this is updated by adding an\nimpl of the `NoUnsafeCell` marker trait for `AssertRecoverSafe` to ensure that\nit never interacts with the other negative impls of `RecoverSafe`.\n\ncc #30510", "tree": {"sha": "e76bf3242b13d29bf488a2acdeabd4df9172d91c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e76bf3242b13d29bf488a2acdeabd4df9172d91c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb3826d9adcb185fbf438602e82ae99ff1878779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3826d9adcb185fbf438602e82ae99ff1878779", "html_url": "https://github.com/rust-lang/rust/commit/cb3826d9adcb185fbf438602e82ae99ff1878779", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb3826d9adcb185fbf438602e82ae99ff1878779/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2834a20e7c5bbfb1502f582545153dc6b25a70c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2834a20e7c5bbfb1502f582545153dc6b25a70c", "html_url": "https://github.com/rust-lang/rust/commit/e2834a20e7c5bbfb1502f582545153dc6b25a70c"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "0f5a08ba3ffe79dc8d621264ed8314892b66c1c6", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cb3826d9adcb185fbf438602e82ae99ff1878779/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3826d9adcb185fbf438602e82ae99ff1878779/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=cb3826d9adcb185fbf438602e82ae99ff1878779", "patch": "@@ -99,16 +99,19 @@ use thread::Result;\n                             across a recover boundary\"]\n pub trait RecoverSafe {}\n \n-/// A marker trait representing types which do not contain an `UnsafeCell` by\n-/// value internally.\n+/// A marker trait representing types where a shared reference is considered\n+/// recover safe.\n+///\n+/// This trait is namely not implemented by `UnsafeCell`, the root of all\n+/// interior mutability.\n ///\n /// This is a \"helper marker trait\" used to provide impl blocks for the\n /// `RecoverSafe` trait, for more information see that documentation.\n #[unstable(feature = \"recover\", reason = \"awaiting feedback\", issue = \"27719\")]\n #[rustc_on_unimplemented = \"the type {Self} contains interior mutability \\\n                             and a reference may not be safely transferrable \\\n                             across a recover boundary\"]\n-pub trait NoUnsafeCell {}\n+pub trait RefRecoverSafe {}\n \n /// A simple wrapper around a type to assert that it is panic safe.\n ///\n@@ -157,27 +160,28 @@ pub struct AssertRecoverSafe<T>(T);\n // * Our custom AssertRecoverSafe wrapper is indeed recover safe\n impl RecoverSafe for .. {}\n impl<'a, T: ?Sized> !RecoverSafe for &'a mut T {}\n-impl<'a, T: NoUnsafeCell + ?Sized> RecoverSafe for &'a T {}\n-impl<T: NoUnsafeCell + ?Sized> RecoverSafe for *const T {}\n-impl<T: NoUnsafeCell + ?Sized> RecoverSafe for *mut T {}\n+impl<'a, T: RefRecoverSafe + ?Sized> RecoverSafe for &'a T {}\n+impl<T: RefRecoverSafe + ?Sized> RecoverSafe for *const T {}\n+impl<T: RefRecoverSafe + ?Sized> RecoverSafe for *mut T {}\n impl<T: RecoverSafe> RecoverSafe for Unique<T> {}\n-impl<T: NoUnsafeCell + ?Sized> RecoverSafe for Shared<T> {}\n+impl<T: RefRecoverSafe + ?Sized> RecoverSafe for Shared<T> {}\n impl<T: ?Sized> RecoverSafe for Mutex<T> {}\n impl<T: ?Sized> RecoverSafe for RwLock<T> {}\n impl<T> RecoverSafe for AssertRecoverSafe<T> {}\n \n // not covered via the Shared impl above b/c the inner contents use\n // Cell/AtomicUsize, but the usage here is recover safe so we can lift the\n // impl up one level to Arc/Rc itself\n-impl<T: NoUnsafeCell + ?Sized> RecoverSafe for Rc<T> {}\n-impl<T: NoUnsafeCell + ?Sized> RecoverSafe for Arc<T> {}\n+impl<T: RefRecoverSafe + ?Sized> RecoverSafe for Rc<T> {}\n+impl<T: RefRecoverSafe + ?Sized> RecoverSafe for Arc<T> {}\n \n-// Pretty simple implementations for the `NoUnsafeCell` marker trait, basically\n-// just saying that this is a marker trait and `UnsafeCell` is the only thing\n-// which doesn't implement it (which then transitively applies to everything\n-// else.\n-impl NoUnsafeCell for .. {}\n-impl<T: ?Sized> !NoUnsafeCell for UnsafeCell<T> {}\n+// Pretty simple implementations for the `RefRecoverSafe` marker trait,\n+// basically just saying that this is a marker trait and `UnsafeCell` is the\n+// only thing which doesn't implement it (which then transitively applies to\n+// everything else.\n+impl RefRecoverSafe for .. {}\n+impl<T: ?Sized> !RefRecoverSafe for UnsafeCell<T> {}\n+impl<T> RefRecoverSafe for AssertRecoverSafe<T> {}\n \n impl<T> AssertRecoverSafe<T> {\n     /// Creates a new `AssertRecoverSafe` wrapper around the provided type."}, {"sha": "9949b79278c11a2ecb871557a17ce481302d57d1", "filename": "src/test/run-pass/panic-safe.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb3826d9adcb185fbf438602e82ae99ff1878779/src%2Ftest%2Frun-pass%2Fpanic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3826d9adcb185fbf438602e82ae99ff1878779/src%2Ftest%2Frun-pass%2Fpanic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-safe.rs?ref=cb3826d9adcb185fbf438602e82ae99ff1878779", "patch": "@@ -11,7 +11,7 @@\n #![allow(dead_code)]\n #![feature(recover)]\n \n-use std::panic::RecoverSafe;\n+use std::panic::{RecoverSafe, AssertRecoverSafe};\n use std::cell::RefCell;\n use std::sync::{Mutex, RwLock, Arc};\n use std::rc::Rc;\n@@ -47,5 +47,9 @@ fn main() {\n         assert::<Box<T>>();\n         assert::<Vec<T>>();\n         assert::<RefCell<T>>();\n+        assert::<AssertRecoverSafe<T>>();\n+        assert::<&AssertRecoverSafe<T>>();\n+        assert::<Rc<AssertRecoverSafe<T>>>();\n+        assert::<Arc<AssertRecoverSafe<T>>>();\n     }\n }"}]}