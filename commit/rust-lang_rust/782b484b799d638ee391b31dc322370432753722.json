{"sha": "782b484b799d638ee391b31dc322370432753722", "node_id": "C_kwDOAAsO6NoAKDc4MmI0ODRiNzk5ZDYzOGVlMzkxYjMxZGMzMjIzNzA0MzI3NTM3MjI", "commit": {"author": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2022-07-04T18:25:31Z"}, "committer": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2022-07-07T21:10:36Z"}, "message": "Fix ICE in sugg::DerefDelegate with (named) closures\n\nrustc comiler internals helpfully tell us how to fix the issue:\n\n  to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`\n\nFixes ICE in #9041", "tree": {"sha": "a2b39c581a3d6c6958bc4b6fb0a3f18f81839af3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2b39c581a3d6c6958bc4b6fb0a3f18f81839af3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/782b484b799d638ee391b31dc322370432753722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/782b484b799d638ee391b31dc322370432753722", "html_url": "https://github.com/rust-lang/rust/commit/782b484b799d638ee391b31dc322370432753722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/782b484b799d638ee391b31dc322370432753722/comments", "author": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7142a59674fc6faa5e76abdd47e2b516e9fd153b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7142a59674fc6faa5e76abdd47e2b516e9fd153b", "html_url": "https://github.com/rust-lang/rust/commit/7142a59674fc6faa5e76abdd47e2b516e9fd153b"}], "stats": {"total": 138, "additions": 129, "deletions": 9}, "files": [{"sha": "d0d056886cb8e0a04b9019a4f99fd15fd7ae422c", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/782b484b799d638ee391b31dc322370432753722/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/782b484b799d638ee391b31dc322370432753722/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=782b484b799d638ee391b31dc322370432753722", "patch": "@@ -2,6 +2,7 @@\n #![deny(clippy::missing_docs_in_private_items)]\n \n use crate::source::{snippet, snippet_opt, snippet_with_applicability, snippet_with_macro_callsite};\n+use crate::ty::expr_sig;\n use crate::{get_parent_expr_for_hir, higher};\n use rustc_ast::util::parser::AssocOp;\n use rustc_ast::{ast, token};\n@@ -18,7 +19,6 @@ use rustc_span::source_map::{BytePos, CharPos, Pos, Span, SyntaxContext};\n use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use std::borrow::Cow;\n use std::fmt::{Display, Write as _};\n-use std::iter;\n use std::ops::{Add, Neg, Not, Sub};\n \n /// A helper type to build suggestion correctly handling parentheses.\n@@ -861,23 +861,37 @@ impl<'tcx> DerefDelegate<'_, 'tcx> {\n \n     /// indicates whether the function from `parent_expr` takes its args by double reference\n     fn func_takes_arg_by_double_ref(&self, parent_expr: &'tcx hir::Expr<'_>, cmt_hir_id: HirId) -> bool {\n-        let (call_args, inputs) = match parent_expr.kind {\n+        let ty = match parent_expr.kind {\n             ExprKind::MethodCall(_, call_args, _) => {\n-                if let Some(method_did) = self.cx.typeck_results().type_dependent_def_id(parent_expr.hir_id) {\n-                    (call_args, self.cx.tcx.fn_sig(method_did).skip_binder().inputs())\n+                if let Some(sig) = self\n+                    .cx\n+                    .typeck_results()\n+                    .type_dependent_def_id(parent_expr.hir_id)\n+                    .map(|did| self.cx.tcx.fn_sig(did).skip_binder())\n+                {\n+                    call_args\n+                        .iter()\n+                        .position(|arg| arg.hir_id == cmt_hir_id)\n+                        .map(|i| sig.inputs()[i])\n                 } else {\n                     return false;\n                 }\n             },\n             ExprKind::Call(func, call_args) => {\n-                let typ = self.cx.typeck_results().expr_ty(func);\n-                (call_args, typ.fn_sig(self.cx.tcx).skip_binder().inputs())\n+                if let Some(sig) = expr_sig(self.cx, func) {\n+                    call_args\n+                        .iter()\n+                        .position(|arg| arg.hir_id == cmt_hir_id)\n+                        .and_then(|i| sig.input(i))\n+                        .map(ty::Binder::skip_binder)\n+                } else {\n+                    return false;\n+                }\n             },\n             _ => return false,\n         };\n \n-        iter::zip(call_args, inputs)\n-            .any(|(arg, ty)| arg.hir_id == cmt_hir_id && matches!(ty.kind(), ty::Ref(_, inner, _) if inner.is_ref()))\n+        ty.map_or(false, |ty| matches!(ty.kind(), ty::Ref(_, inner, _) if inner.is_ref()))\n     }\n }\n "}, {"sha": "cb3d91c0919935c4e901b92334aac807de02ab53", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/782b484b799d638ee391b31dc322370432753722/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/782b484b799d638ee391b31dc322370432753722/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=782b484b799d638ee391b31dc322370432753722", "patch": "@@ -565,6 +565,9 @@ pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnS\n }\n \n fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'tcx>> {\n+    if ty.is_box() {\n+        return ty_sig(cx, ty.boxed_ty());\n+    }\n     match *ty.kind() {\n         ty::Closure(id, subs) => {\n             let decl = id\n@@ -573,6 +576,7 @@ fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'tcx>>\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs))),\n+        ty::Opaque(id, _) => ty_sig(cx, cx.tcx.type_of(id)),\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig)),\n         ty::Dynamic(bounds, _) => {\n             let lang_items = cx.tcx.lang_items();"}, {"sha": "55cc9bc99a0ede4f1421de1b01f6b4018c224f8e", "filename": "tests/ui/crashes/ice-9041.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/782b484b799d638ee391b31dc322370432753722/tests%2Fui%2Fcrashes%2Fice-9041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/782b484b799d638ee391b31dc322370432753722/tests%2Fui%2Fcrashes%2Fice-9041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-9041.rs?ref=782b484b799d638ee391b31dc322370432753722", "patch": "@@ -0,0 +1,8 @@\n+pub struct Thing;\n+\n+pub fn has_thing(things: &[Thing]) -> bool {\n+    let is_thing_ready = |_peer: &Thing| -> bool { todo!() };\n+    things.iter().find(|p| is_thing_ready(p)).is_some()\n+}\n+\n+fn main() {}"}, {"sha": "f5038f0a84847ece291d92fd7cec1dd85acdfac6", "filename": "tests/ui/crashes/ice-9041.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/782b484b799d638ee391b31dc322370432753722/tests%2Fui%2Fcrashes%2Fice-9041.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/782b484b799d638ee391b31dc322370432753722/tests%2Fui%2Fcrashes%2Fice-9041.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-9041.stderr?ref=782b484b799d638ee391b31dc322370432753722", "patch": "@@ -0,0 +1,10 @@\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/ice-9041.rs:5:19\n+   |\n+LL |     things.iter().find(|p| is_thing_ready(p)).is_some()\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|p| is_thing_ready(&p))`\n+   |\n+   = note: `-D clippy::search-is-some` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "385a9986aba047bfdfe30cf1fc3818e340eca0ab", "filename": "tests/ui/search_is_some_fixable_some.fixed", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/782b484b799d638ee391b31dc322370432753722/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/782b484b799d638ee391b31dc322370432753722/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.fixed?ref=782b484b799d638ee391b31dc322370432753722", "patch": "@@ -216,3 +216,33 @@ mod issue7392 {\n         let _ = v.iter().any(|fp| test_u32_2(*fp.field));\n     }\n }\n+\n+mod issue9120 {\n+    fn make_arg_no_deref_impl() -> impl Fn(&&u32) -> bool {\n+        move |x: &&u32| **x == 78\n+    }\n+\n+    fn make_arg_no_deref_dyn() -> Box<dyn Fn(&&u32) -> bool> {\n+        Box::new(move |x: &&u32| **x == 78)\n+    }\n+\n+    fn wrapper<T: Fn(&&u32) -> bool>(v: Vec<u32>, func: T) -> bool {\n+        #[allow(clippy::redundant_closure)]\n+        v.iter().any(|x: &u32| func(&x))\n+    }\n+\n+    fn do_tests() {\n+        let v = vec![3, 2, 1, 0];\n+        let arg_no_deref_impl = make_arg_no_deref_impl();\n+        let arg_no_deref_dyn = make_arg_no_deref_dyn();\n+\n+        #[allow(clippy::redundant_closure)]\n+        let _ = v.iter().any(|x: &u32| arg_no_deref_impl(&x));\n+\n+        #[allow(clippy::redundant_closure)]\n+        let _ = v.iter().any(|x: &u32| arg_no_deref_dyn(&x));\n+\n+        #[allow(clippy::redundant_closure)]\n+        let _ = v.iter().any(|x: &u32| (*arg_no_deref_dyn)(&x));\n+    }\n+}"}, {"sha": "67e190ee37837d471b9c7eb7f5d05b859a04dafd", "filename": "tests/ui/search_is_some_fixable_some.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/782b484b799d638ee391b31dc322370432753722/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/782b484b799d638ee391b31dc322370432753722/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.rs?ref=782b484b799d638ee391b31dc322370432753722", "patch": "@@ -219,3 +219,33 @@ mod issue7392 {\n         let _ = v.iter().find(|fp| test_u32_2(*fp.field)).is_some();\n     }\n }\n+\n+mod issue9120 {\n+    fn make_arg_no_deref_impl() -> impl Fn(&&u32) -> bool {\n+        move |x: &&u32| **x == 78\n+    }\n+\n+    fn make_arg_no_deref_dyn() -> Box<dyn Fn(&&u32) -> bool> {\n+        Box::new(move |x: &&u32| **x == 78)\n+    }\n+\n+    fn wrapper<T: Fn(&&u32) -> bool>(v: Vec<u32>, func: T) -> bool {\n+        #[allow(clippy::redundant_closure)]\n+        v.iter().find(|x: &&u32| func(x)).is_some()\n+    }\n+\n+    fn do_tests() {\n+        let v = vec![3, 2, 1, 0];\n+        let arg_no_deref_impl = make_arg_no_deref_impl();\n+        let arg_no_deref_dyn = make_arg_no_deref_dyn();\n+\n+        #[allow(clippy::redundant_closure)]\n+        let _ = v.iter().find(|x: &&u32| arg_no_deref_impl(x)).is_some();\n+\n+        #[allow(clippy::redundant_closure)]\n+        let _ = v.iter().find(|x: &&u32| arg_no_deref_dyn(x)).is_some();\n+\n+        #[allow(clippy::redundant_closure)]\n+        let _ = v.iter().find(|x: &&u32| (*arg_no_deref_dyn)(x)).is_some();\n+    }\n+}"}, {"sha": "c5c3c92c9182fc32aa3de5c6f9bdda18dee8d126", "filename": "tests/ui/search_is_some_fixable_some.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/782b484b799d638ee391b31dc322370432753722/tests%2Fui%2Fsearch_is_some_fixable_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/782b484b799d638ee391b31dc322370432753722/tests%2Fui%2Fsearch_is_some_fixable_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.stderr?ref=782b484b799d638ee391b31dc322370432753722", "patch": "@@ -264,5 +264,29 @@ error: called `is_some()` after searching an `Iterator` with `find`\n LL |         let _ = v.iter().find(|fp| test_u32_2(*fp.field)).is_some();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|fp| test_u32_2(*fp.field))`\n \n-error: aborting due to 43 previous errors\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:234:18\n+   |\n+LL |         v.iter().find(|x: &&u32| func(x)).is_some()\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x: &u32| func(&x))`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:243:26\n+   |\n+LL |         let _ = v.iter().find(|x: &&u32| arg_no_deref_impl(x)).is_some();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x: &u32| arg_no_deref_impl(&x))`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:246:26\n+   |\n+LL |         let _ = v.iter().find(|x: &&u32| arg_no_deref_dyn(x)).is_some();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x: &u32| arg_no_deref_dyn(&x))`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:249:26\n+   |\n+LL |         let _ = v.iter().find(|x: &&u32| (*arg_no_deref_dyn)(x)).is_some();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x: &u32| (*arg_no_deref_dyn)(&x))`\n+\n+error: aborting due to 47 previous errors\n "}]}