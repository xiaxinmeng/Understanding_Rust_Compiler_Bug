{"sha": "f2895f314342814ff4ee87b73cf4b3eefcf13868", "node_id": "C_kwDOAAsO6NoAKGYyODk1ZjMxNDM0MjgxNGZmNGVlODdiNzNjZjRiM2VlZmNmMTM4Njg", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-06-15T17:37:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-15T17:37:23Z"}, "message": "Merge pull request #1357 from bjorn3/build_system_rework6\n\nSupport testing of cg_clif in rust's CI", "tree": {"sha": "5bc67aff79b182c57f006bdbe45e132e87f1ff2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bc67aff79b182c57f006bdbe45e132e87f1ff2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2895f314342814ff4ee87b73cf4b3eefcf13868", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJki0xTCRBK7hj4Ov3rIwAAppYIADdxWXMefnfGCXfemH232Auh\nqkqIU3pW/DJ9QtFXThG+FYzehGJjPwH4Eu5PwzKdWyf2PBzu7QxmaADhJR1XMUzI\nxNgSBBmSPa3oYf/+znG0zkjvEgOSpapPSBrUf7MsbLiHwr4kiSRu+eCQoiQg+BAD\nZ7f8Vmqt04vweuFSGJ9f0OmdtpW3oMtj15RolwPv+6c2eJ0WC1LmfQWm3t6JuZJP\nXkyKBittdw6reRfSkcmiD/oX9RcDi6sopPImN2AWOQRnHdNu/NvHnj54ONefu07Y\ni3CGy0FS3Ub052V4tNYLPxYAxenl8F7GusAh3MwZ7NXgrSeNbae1amwAwXeD1Oo=\n=fb+Q\n-----END PGP SIGNATURE-----\n", "payload": "tree 5bc67aff79b182c57f006bdbe45e132e87f1ff2e\nparent 45781e107c37524386478b02082700f09bd10d78\nparent e9bd63af3cfc192f0f998debbf5ab3e597781cec\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1686850643 +0200\ncommitter GitHub <noreply@github.com> 1686850643 +0200\n\nMerge pull request #1357 from bjorn3/build_system_rework6\n\nSupport testing of cg_clif in rust's CI"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2895f314342814ff4ee87b73cf4b3eefcf13868", "html_url": "https://github.com/rust-lang/rust/commit/f2895f314342814ff4ee87b73cf4b3eefcf13868", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2895f314342814ff4ee87b73cf4b3eefcf13868/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45781e107c37524386478b02082700f09bd10d78", "url": "https://api.github.com/repos/rust-lang/rust/commits/45781e107c37524386478b02082700f09bd10d78", "html_url": "https://github.com/rust-lang/rust/commit/45781e107c37524386478b02082700f09bd10d78"}, {"sha": "e9bd63af3cfc192f0f998debbf5ab3e597781cec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9bd63af3cfc192f0f998debbf5ab3e597781cec", "html_url": "https://github.com/rust-lang/rust/commit/e9bd63af3cfc192f0f998debbf5ab3e597781cec"}], "stats": {"total": 1860, "additions": 1602, "deletions": 258}, "files": [{"sha": "8b4efd4e394885eeebd4f1b7da1ff93760235cc6", "filename": ".cirrus.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/.cirrus.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/.cirrus.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cirrus.yml?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -10,7 +10,7 @@ task:\n     folder: target\n   prepare_script:\n     - . $HOME/.cargo/env\n-    - ./y.rs prepare\n+    - ./y.sh prepare\n   test_script:\n     - . $HOME/.cargo/env\n-    - ./y.rs test\n+    - ./y.sh test"}, {"sha": "12aa69d3c795618e3295988d0eba61add8daaf11", "filename": ".github/workflows/abi-cafe.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/.github%2Fworkflows%2Fabi-cafe.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/.github%2Fworkflows%2Fabi-cafe.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fabi-cafe.yml?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -46,12 +46,12 @@ jobs:\n       run: rustup set default-host x86_64-pc-windows-gnu\n \n     - name: Prepare dependencies\n-      run: ./y.rs prepare\n+      run: ./y.sh prepare\n \n     - name: Build\n-      run: ./y.rs build --sysroot none\n+      run: ./y.sh build --sysroot none\n \n     - name: Test abi-cafe\n       env:\n         TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}\n-      run: ./y.rs abi-cafe\n+      run: ./y.sh abi-cafe"}, {"sha": "8e6c1e8ade0152e5fe587d3b8d239b6ede4bfc17", "filename": ".github/workflows/main.yml", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmain.yml?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -19,7 +19,7 @@ jobs:\n     - name: Rustfmt\n       run: |\n         cargo fmt --check\n-        rustfmt --check build_system/mod.rs\n+        rustfmt --check build_system/main.rs\n         rustfmt --check example/*\n \n \n@@ -91,15 +91,15 @@ jobs:\n         sudo apt-get install -y gcc-s390x-linux-gnu qemu-user\n \n     - name: Prepare dependencies\n-      run: ./y.rs prepare\n+      run: ./y.sh prepare\n \n     - name: Build\n-      run: ./y.rs build --sysroot none\n+      run: ./y.sh build --sysroot none\n \n     - name: Test\n       env:\n         TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}\n-      run: ./y.rs test\n+      run: ./y.sh test\n \n     - name: Install LLVM standard library\n       run: rustup target add ${{ matrix.env.TARGET_TRIPLE }}\n@@ -111,7 +111,7 @@ jobs:\n       if: matrix.os != 'windows-latest' || matrix.env.TARGET_TRIPLE != 'x86_64-pc-windows-gnu'\n       env:\n         TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}\n-      run: ./y.rs test --sysroot llvm --no-unstable-features\n+      run: ./y.sh test --sysroot llvm --no-unstable-features\n \n \n   # This job doesn't use cg_clif in any way. It checks that all cg_clif tests work with cg_llvm too.\n@@ -165,13 +165,13 @@ jobs:\n       run: cargo install hyperfine || true\n \n     - name: Prepare dependencies\n-      run: ./y.rs prepare\n+      run: ./y.sh prepare\n \n     - name: Build\n-      run: CI_OPT=1 ./y.rs build --sysroot none\n+      run: CI_OPT=1 ./y.sh build --sysroot none\n \n     - name: Benchmark\n-      run: CI_OPT=1 ./y.rs bench\n+      run: CI_OPT=1 ./y.sh bench\n \n \n   dist:\n@@ -224,13 +224,13 @@ jobs:\n         sudo apt-get install -y gcc-mingw-w64-x86-64 wine-stable\n \n     - name: Prepare dependencies\n-      run: ./y.rs prepare\n+      run: ./y.sh prepare\n \n     - name: Build backend\n-      run: CI_OPT=1 ./y.rs build --sysroot none\n+      run: CI_OPT=1 ./y.sh build --sysroot none\n \n     - name: Build sysroot\n-      run: CI_OPT=1 ./y.rs build\n+      run: CI_OPT=1 ./y.sh build\n \n     - name: Package prebuilt cg_clif\n       run: tar cvfJ cg_clif.tar.xz dist"}, {"sha": "b49dc3aff7aaab8f267df0f49cfa94cef177c8c8", "filename": ".github/workflows/rustc.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/.github%2Fworkflows%2Frustc.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/.github%2Fworkflows%2Frustc.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frustc.yml?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -18,7 +18,7 @@ jobs:\n         key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n \n     - name: Prepare dependencies\n-      run: ./y.rs prepare\n+      run: ./y.sh prepare\n \n     - name: Test\n       run: ./scripts/test_bootstrap.sh\n@@ -38,7 +38,7 @@ jobs:\n         key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n \n     - name: Prepare dependencies\n-      run: ./y.rs prepare\n+      run: ./y.sh prepare\n \n     - name: Test\n       run: ./scripts/test_rustc_tests.sh"}, {"sha": "e6ac8c8408da62f972157acdff706c1f676cc6c8", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -1,4 +1,5 @@\n /target\n+/build_system/target\n **/*.rs.bk\n *.rlib\n *.o"}, {"sha": "60cb51d5663626225fcdf24013a5a6ff674c2898", "filename": ".vscode/settings.json", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/.vscode%2Fsettings.json", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/.vscode%2Fsettings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.vscode%2Fsettings.json?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -6,9 +6,10 @@\n     \"rust-analyzer.imports.granularity.enforce\": true,\n     \"rust-analyzer.imports.granularity.group\": \"module\",\n     \"rust-analyzer.imports.prefix\": \"crate\",\n-    \"rust-analyzer.cargo.features\": [\"unstable-features\", \"__check_build_system_using_ra\"],\n+    \"rust-analyzer.cargo.features\": [\"unstable-features\"],\n     \"rust-analyzer.linkedProjects\": [\n         \"./Cargo.toml\",\n+        \"./build_system/Cargo.toml\",\n         {\n             \"crates\": [\n                 {"}, {"sha": "1c1f2d8577bd6d23bea940cbe6588332358f34f9", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -3,13 +3,6 @@ name = \"rustc_codegen_cranelift\"\n version = \"0.1.0\"\n edition = \"2021\"\n \n-[[bin]]\n-# This is used just to teach rust-analyzer how to check the build system. required-features is used\n-# to disable it for regular builds.\n-name = \"y\"\n-path = \"./y.rs\"\n-required-features = [\"__check_build_system_using_ra\"]\n-\n [lib]\n crate-type = [\"dylib\"]\n \n@@ -45,7 +38,6 @@ smallvec = \"1.8.1\"\n unstable-features = [\"jit\", \"inline_asm\"]\n jit = [\"cranelift-jit\", \"libloading\"]\n inline_asm = []\n-__check_build_system_using_ra = []\n \n [package.metadata.rust-analyzer]\n rustc_private = true"}, {"sha": "9469feea0cbf89b87b0e330cda8aa163ad4db04e", "filename": "Readme.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -10,8 +10,8 @@ If not please open an issue.\n ```bash\n $ git clone https://github.com/bjorn3/rustc_codegen_cranelift\n $ cd rustc_codegen_cranelift\n-$ ./y.rs prepare\n-$ ./y.rs build\n+$ ./y.sh prepare\n+$ ./y.sh build\n ```\n \n To run the test suite replace the last command with:\n@@ -20,7 +20,7 @@ To run the test suite replace the last command with:\n $ ./test.sh\n ```\n \n-For more docs on how to build and test see [build_system/usage.txt](build_system/usage.txt) or the help message of `./y.rs`.\n+For more docs on how to build and test see [build_system/usage.txt](build_system/usage.txt) or the help message of `./y.sh`.\n \n ## Precompiled builds\n \n@@ -35,7 +35,7 @@ If you want to use `cargo clif build` instead of having to specify the full path\n \n rustc_codegen_cranelift can be used as a near-drop-in replacement for `cargo build` or `cargo run` for existing projects.\n \n-Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`y.rs prepare` and `y.rs build` or `test.sh`).\n+Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`y.sh prepare` and `y.sh build` or `test.sh`).\n \n In the directory with your project (where you can do the usual `cargo build`), run:\n "}, {"sha": "ea9d1c8df1cae0cc494b9eec10d70b4e6c5adc49", "filename": "build_sysroot/Cargo.toml", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/45781e107c37524386478b02082700f09bd10d78/build_sysroot%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/45781e107c37524386478b02082700f09bd10d78/build_sysroot%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.toml?ref=45781e107c37524386478b02082700f09bd10d78", "patch": "@@ -1,36 +0,0 @@\n-[package]\n-name = \"sysroot\"\n-version = \"0.0.0\"\n-\n-[dependencies]\n-core = { path = \"./sysroot_src/library/core\" }\n-alloc = { path = \"./sysroot_src/library/alloc\" }\n-std = { path = \"./sysroot_src/library/std\", features = [\"panic_unwind\", \"backtrace\"] }\n-test = { path = \"./sysroot_src/library/test\" }\n-proc_macro = { path = \"./sysroot_src/library/proc_macro\" }\n-\n-compiler_builtins = { version = \"0.1.87\", default-features = false, features = [\"no-asm\"] }\n-\n-[patch.crates-io]\n-rustc-std-workspace-core = { path = \"./sysroot_src/library/rustc-std-workspace-core\" }\n-rustc-std-workspace-alloc = { path = \"./sysroot_src/library/rustc-std-workspace-alloc\" }\n-rustc-std-workspace-std = { path = \"./sysroot_src/library/rustc-std-workspace-std\" }\n-\n-[profile.dev]\n-lto = \"off\"\n-\n-[profile.release]\n-debug = true\n-incremental = true\n-lto = \"off\"\n-\n-# Mandatory for correctly compiling compiler-builtins\n-[profile.dev.package.compiler_builtins]\n-debug-assertions = false\n-overflow-checks = false\n-codegen-units = 10000\n-\n-[profile.release.package.compiler_builtins]\n-debug-assertions = false\n-overflow-checks = false\n-codegen-units = 10000"}, {"sha": "0c9ac1ac8e4bd702086402213af792ae0636d192", "filename": "build_sysroot/src/lib.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45781e107c37524386478b02082700f09bd10d78/build_sysroot%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45781e107c37524386478b02082700f09bd10d78/build_sysroot%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fsrc%2Flib.rs?ref=45781e107c37524386478b02082700f09bd10d78", "patch": "@@ -1 +0,0 @@\n-#![no_std]"}, {"sha": "86268e19160302bb11e519e6e26b426e43c57c95", "filename": "build_system/Cargo.lock", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2FCargo.lock?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -0,0 +1,7 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"y\"\n+version = \"0.1.0\""}, {"sha": "f47b9bc55404170b8841d4233535740eb307615e", "filename": "build_system/Cargo.toml", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2FCargo.toml?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -0,0 +1,13 @@\n+[package]\n+name = \"y\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+\n+[[bin]]\n+name = \"y\"\n+path = \"main.rs\"\n+\n+[features]\n+unstable-features = [] # for rust-analyzer\n+\n+# Do not add any dependencies"}, {"sha": "29c127bf50ede3d6155b1b0b22e3b02862be28c5", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -4,10 +4,15 @@ use super::prepare::GitRepo;\n use super::utils::{spawn_and_wait, CargoProject, Compiler};\n use super::{CodegenBackend, SysrootKind};\n \n-static ABI_CAFE_REPO: GitRepo =\n-    GitRepo::github(\"Gankra\", \"abi-cafe\", \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\", \"abi-cafe\");\n+static ABI_CAFE_REPO: GitRepo = GitRepo::github(\n+    \"Gankra\",\n+    \"abi-cafe\",\n+    \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\",\n+    \"588df6d66abbe105\",\n+    \"abi-cafe\",\n+);\n \n-static ABI_CAFE: CargoProject = CargoProject::new(&ABI_CAFE_REPO.source_dir(), \"abi_cafe\");\n+static ABI_CAFE: CargoProject = CargoProject::new(&ABI_CAFE_REPO.source_dir(), \"abi_cafe_target\");\n \n pub(crate) fn run(\n     channel: &str,\n@@ -18,6 +23,7 @@ pub(crate) fn run(\n     bootstrap_host_compiler: &Compiler,\n ) {\n     ABI_CAFE_REPO.fetch(dirs);\n+    ABI_CAFE_REPO.patch(dirs);\n \n     eprintln!(\"Building sysroot for abi-cafe\");\n     build_sysroot::build_sysroot("}, {"sha": "2bb118000344874ca9b45f90847f02da78a99cc7", "filename": "build_system/bench.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbench.rs?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -10,6 +10,7 @@ static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n     \"ebobby\",\n     \"simple-raytracer\",\n     \"804a7a21b9e673a482797aa289a18ed480e4d813\",\n+    \"ad6f59a2331a3f56\",\n     \"<none>\",\n );\n \n@@ -24,9 +25,8 @@ fn benchmark_simple_raytracer(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n         std::process::exit(1);\n     }\n \n-    if !SIMPLE_RAYTRACER_REPO.source_dir().to_path(dirs).exists() {\n-        SIMPLE_RAYTRACER_REPO.fetch(dirs);\n-    }\n+    SIMPLE_RAYTRACER_REPO.fetch(dirs);\n+    SIMPLE_RAYTRACER_REPO.patch(dirs);\n \n     let bench_runs = env::var(\"BENCH_RUNS\").unwrap_or_else(|_| \"10\".to_string()).parse().unwrap();\n "}, {"sha": "6855c1a7fc5bf50d4efdbdee1d20cad620c77926", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -3,7 +3,7 @@ use std::path::PathBuf;\n \n use super::path::{Dirs, RelPath};\n use super::rustc_info::get_file_name;\n-use super::utils::{is_ci, is_ci_opt, CargoProject, Compiler};\n+use super::utils::{is_ci, is_ci_opt, maybe_incremental, CargoProject, Compiler};\n \n pub(crate) static CG_CLIF: CargoProject = CargoProject::new(&RelPath::SOURCE, \"cg_clif\");\n \n@@ -14,18 +14,14 @@ pub(crate) fn build_backend(\n     use_unstable_features: bool,\n ) -> PathBuf {\n     let mut cmd = CG_CLIF.build(&bootstrap_host_compiler, dirs);\n-\n-    cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"true\"); // Force incr comp even in release mode\n+    maybe_incremental(&mut cmd);\n \n     let mut rustflags = env::var(\"RUSTFLAGS\").unwrap_or_default();\n \n     if is_ci() {\n         // Deny warnings on CI\n         rustflags += \" -Dwarnings\";\n \n-        // Disabling incr comp reduces cache size and incr comp doesn't save as much on CI anyway\n-        cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"false\");\n-\n         if !is_ci_opt() {\n             cmd.env(\"CARGO_PROFILE_RELEASE_DEBUG_ASSERTIONS\", \"true\");\n             cmd.env(\"CARGO_PROFILE_RELEASE_OVERFLOW_CHECKS\", \"true\");"}, {"sha": "74bba9ed5eb886aaed2045989a4d855be4229d95", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 15, "deletions": 28, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -1,10 +1,12 @@\n use std::fs;\n use std::path::{Path, PathBuf};\n-use std::process::{self, Command};\n+use std::process::Command;\n \n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{get_file_name, get_rustc_version};\n-use super::utils::{remove_dir_if_exists, spawn_and_wait, try_hard_link, CargoProject, Compiler};\n+use super::rustc_info::get_file_name;\n+use super::utils::{\n+    maybe_incremental, remove_dir_if_exists, spawn_and_wait, try_hard_link, CargoProject, Compiler,\n+};\n use super::{CodegenBackend, SysrootKind};\n \n static DIST_DIR: RelPath = RelPath::DIST;\n@@ -155,12 +157,9 @@ impl SysrootTarget {\n     }\n }\n \n-pub(crate) static ORIG_BUILD_SYSROOT: RelPath = RelPath::SOURCE.join(\"build_sysroot\");\n-pub(crate) static BUILD_SYSROOT: RelPath = RelPath::DOWNLOAD.join(\"sysroot\");\n-pub(crate) static SYSROOT_RUSTC_VERSION: RelPath = BUILD_SYSROOT.join(\"rustc_version\");\n-pub(crate) static SYSROOT_SRC: RelPath = BUILD_SYSROOT.join(\"sysroot_src\");\n+pub(crate) static STDLIB_SRC: RelPath = RelPath::BUILD.join(\"stdlib\");\n pub(crate) static STANDARD_LIBRARY: CargoProject =\n-    CargoProject::new(&BUILD_SYSROOT, \"build_sysroot\");\n+    CargoProject::new(&STDLIB_SRC.join(\"library/sysroot\"), \"stdlib_target\");\n pub(crate) static RTSTARTUP_SYSROOT: RelPath = RelPath::BUILD.join(\"rtstartup\");\n \n #[must_use]\n@@ -222,24 +221,6 @@ fn build_clif_sysroot_for_triple(\n     mut compiler: Compiler,\n     cg_clif_dylib_path: &CodegenBackend,\n ) -> SysrootTarget {\n-    match fs::read_to_string(SYSROOT_RUSTC_VERSION.to_path(dirs)) {\n-        Err(e) => {\n-            eprintln!(\"Failed to get rustc version for patched sysroot source: {}\", e);\n-            eprintln!(\"Hint: Try `./y.rs prepare` to patch the sysroot source\");\n-            process::exit(1);\n-        }\n-        Ok(source_version) => {\n-            let rustc_version = get_rustc_version(&compiler.rustc);\n-            if source_version != rustc_version {\n-                eprintln!(\"The patched sysroot source is outdated\");\n-                eprintln!(\"Source version: {}\", source_version.trim());\n-                eprintln!(\"Rustc version:  {}\", rustc_version.trim());\n-                eprintln!(\"Hint: Try `./y.rs prepare` to update the patched sysroot source\");\n-                process::exit(1);\n-            }\n-        }\n-    }\n-\n     let mut target_libs = SysrootTarget { triple: compiler.triple.clone(), libs: vec![] };\n \n     if let Some(rtstartup_target_libs) = build_rtstartup(dirs, &compiler) {\n@@ -274,10 +255,12 @@ fn build_clif_sysroot_for_triple(\n     }\n     compiler.rustflags += &rustflags;\n     let mut build_cmd = STANDARD_LIBRARY.build(&compiler, dirs);\n+    maybe_incremental(&mut build_cmd);\n     if channel == \"release\" {\n         build_cmd.arg(\"--release\");\n     }\n-    build_cmd.arg(\"--locked\");\n+    build_cmd.arg(\"--features\").arg(\"compiler-builtins-no-asm backtrace panic-unwind\");\n+    build_cmd.env(\"CARGO_PROFILE_RELEASE_DEBUG\", \"true\");\n     build_cmd.env(\"__CARGO_DEFAULT_LIB_METADATA\", \"cg_clif\");\n     if compiler.triple.contains(\"apple\") {\n         build_cmd.env(\"CARGO_PROFILE_RELEASE_SPLIT_DEBUGINFO\", \"packed\");\n@@ -300,13 +283,17 @@ fn build_clif_sysroot_for_triple(\n }\n \n fn build_rtstartup(dirs: &Dirs, compiler: &Compiler) -> Option<SysrootTarget> {\n+    if !super::config::get_bool(\"keep_sysroot\") {\n+        super::prepare::prepare_stdlib(dirs, &compiler.rustc);\n+    }\n+\n     if !compiler.triple.ends_with(\"windows-gnu\") {\n         return None;\n     }\n \n     RTSTARTUP_SYSROOT.ensure_fresh(dirs);\n \n-    let rtstartup_src = SYSROOT_SRC.to_path(dirs).join(\"library\").join(\"rtstartup\");\n+    let rtstartup_src = STDLIB_SRC.to_path(dirs).join(\"library\").join(\"rtstartup\");\n     let mut target_libs = SysrootTarget { triple: compiler.triple.clone(), libs: vec![] };\n \n     for file in [\"rsbegin\", \"rsend\"] {"}, {"sha": "3bc78d5db94fab69075fb87dbbebd174084a4104", "filename": "build_system/main.rs", "status": "renamed", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmain.rs?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -1,3 +1,7 @@\n+#![warn(rust_2018_idioms)]\n+#![warn(unused_lifetimes)]\n+#![warn(unreachable_pub)]\n+\n use std::env;\n use std::path::PathBuf;\n use std::process;\n@@ -37,19 +41,19 @@ enum Command {\n }\n \n #[derive(Copy, Clone, Debug)]\n-pub(crate) enum SysrootKind {\n+enum SysrootKind {\n     None,\n     Clif,\n     Llvm,\n }\n \n #[derive(Clone, Debug)]\n-pub(crate) enum CodegenBackend {\n+enum CodegenBackend {\n     Local(PathBuf),\n     Builtin(String),\n }\n \n-pub(crate) fn main() {\n+fn main() {\n     if env::var(\"RUST_BACKTRACE\").is_err() {\n         env::set_var(\"RUST_BACKTRACE\", \"1\");\n     }\n@@ -81,17 +85,24 @@ pub(crate) fn main() {\n     };\n \n     let mut out_dir = PathBuf::from(\".\");\n+    let mut download_dir = None;\n     let mut channel = \"release\";\n     let mut sysroot_kind = SysrootKind::Clif;\n     let mut use_unstable_features = true;\n     let mut frozen = false;\n+    let mut skip_tests = vec![];\n     let mut use_backend = None;\n     while let Some(arg) = args.next().as_deref() {\n         match arg {\n             \"--out-dir\" => {\n                 out_dir = PathBuf::from(args.next().unwrap_or_else(|| {\n                     arg_error!(\"--out-dir requires argument\");\n-                }))\n+                }));\n+            }\n+            \"--download-dir\" => {\n+                download_dir = Some(PathBuf::from(args.next().unwrap_or_else(|| {\n+                    arg_error!(\"--download-dir requires argument\");\n+                })));\n             }\n             \"--debug\" => channel = \"debug\",\n             \"--sysroot\" => {\n@@ -105,6 +116,12 @@ pub(crate) fn main() {\n             }\n             \"--no-unstable-features\" => use_unstable_features = false,\n             \"--frozen\" => frozen = true,\n+            \"--skip-test\" => {\n+                // FIXME check that all passed in tests actually exist\n+                skip_tests.push(args.next().unwrap_or_else(|| {\n+                    arg_error!(\"--skip-test requires argument\");\n+                }));\n+            }\n             \"--use-backend\" => {\n                 use_backend = Some(match args.next() {\n                     Some(name) => name,\n@@ -116,6 +133,22 @@ pub(crate) fn main() {\n         }\n     }\n \n+    let current_dir = std::env::current_dir().unwrap();\n+    out_dir = current_dir.join(out_dir);\n+\n+    if command == Command::Prepare {\n+        prepare::prepare(&path::Dirs {\n+            source_dir: current_dir.clone(),\n+            download_dir: download_dir\n+                .map(|dir| current_dir.join(dir))\n+                .unwrap_or_else(|| out_dir.join(\"download\")),\n+            build_dir: PathBuf::from(\"dummy_do_not_use\"),\n+            dist_dir: PathBuf::from(\"dummy_do_not_use\"),\n+            frozen,\n+        });\n+        process::exit(0);\n+    }\n+\n     let rustup_toolchain_name = match (env::var(\"CARGO\"), env::var(\"RUSTC\"), env::var(\"RUSTDOC\")) {\n         (Ok(_), Ok(_), Ok(_)) => None,\n         (Err(_), Err(_), Err(_)) => Some(rustc_info::get_toolchain_name()),\n@@ -147,12 +180,11 @@ pub(crate) fn main() {\n         .or_else(|| config::get_value(\"target\"))\n         .unwrap_or_else(|| bootstrap_host_compiler.triple.clone());\n \n-    // FIXME allow changing the location of these dirs using cli arguments\n-    let current_dir = std::env::current_dir().unwrap();\n-    out_dir = current_dir.join(out_dir);\n     let dirs = path::Dirs {\n         source_dir: current_dir.clone(),\n-        download_dir: out_dir.join(\"download\"),\n+        download_dir: download_dir\n+            .map(|dir| current_dir.join(dir))\n+            .unwrap_or_else(|| out_dir.join(\"download\")),\n         build_dir: out_dir.join(\"build\"),\n         dist_dir: out_dir.join(\"dist\"),\n         frozen,\n@@ -169,11 +201,6 @@ pub(crate) fn main() {\n         std::fs::File::create(target).unwrap();\n     }\n \n-    if command == Command::Prepare {\n-        prepare::prepare(&dirs, &bootstrap_host_compiler.rustc);\n-        process::exit(0);\n-    }\n-\n     env::set_var(\"RUSTC\", \"rustc_should_be_set_explicitly\");\n     env::set_var(\"RUSTDOC\", \"rustdoc_should_be_set_explicitly\");\n \n@@ -197,6 +224,7 @@ pub(crate) fn main() {\n                 channel,\n                 sysroot_kind,\n                 use_unstable_features,\n+                &skip_tests.iter().map(|test| &**test).collect::<Vec<_>>(),\n                 &cg_clif_dylib,\n                 &bootstrap_host_compiler,\n                 rustup_toolchain_name.as_deref(),", "previous_filename": "build_system/mod.rs"}, {"sha": "e31e39a483fe302c9de85485625bec0e38b0f8fc", "filename": "build_system/prepare.rs", "status": "modified", "additions": 139, "deletions": 61, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -3,105 +3,168 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-use super::build_sysroot::{BUILD_SYSROOT, ORIG_BUILD_SYSROOT, SYSROOT_RUSTC_VERSION, SYSROOT_SRC};\n+use super::build_sysroot::STDLIB_SRC;\n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{get_default_sysroot, get_rustc_version};\n-use super::tests::LIBCORE_TESTS_SRC;\n-use super::utils::{copy_dir_recursively, git_command, retry_spawn_and_wait, spawn_and_wait};\n-\n-pub(crate) fn prepare(dirs: &Dirs, rustc: &Path) {\n-    RelPath::DOWNLOAD.ensure_fresh(dirs);\n-\n-    prepare_stdlib(dirs, rustc);\n-    prepare_coretests(dirs, rustc);\n+use super::rustc_info::get_default_sysroot;\n+use super::utils::{\n+    copy_dir_recursively, git_command, remove_dir_if_exists, retry_spawn_and_wait, spawn_and_wait,\n+};\n \n+pub(crate) fn prepare(dirs: &Dirs) {\n+    RelPath::DOWNLOAD.ensure_exists(dirs);\n     super::tests::RAND_REPO.fetch(dirs);\n     super::tests::REGEX_REPO.fetch(dirs);\n     super::tests::PORTABLE_SIMD_REPO.fetch(dirs);\n }\n \n-fn prepare_stdlib(dirs: &Dirs, rustc: &Path) {\n-    let sysroot_src_orig = get_default_sysroot(rustc).join(\"lib/rustlib/src/rust\");\n-    assert!(sysroot_src_orig.exists());\n-\n-    eprintln!(\"[COPY] stdlib src\");\n-\n-    // FIXME ensure builds error out or update the copy if any of the files copied here change\n-    BUILD_SYSROOT.ensure_fresh(dirs);\n-    copy_dir_recursively(&ORIG_BUILD_SYSROOT.to_path(dirs), &BUILD_SYSROOT.to_path(dirs));\n-\n-    fs::create_dir_all(SYSROOT_SRC.to_path(dirs).join(\"library\")).unwrap();\n-    copy_dir_recursively(\n-        &sysroot_src_orig.join(\"library\"),\n-        &SYSROOT_SRC.to_path(dirs).join(\"library\"),\n-    );\n-\n-    let rustc_version = get_rustc_version(rustc);\n-    fs::write(SYSROOT_RUSTC_VERSION.to_path(dirs), &rustc_version).unwrap();\n-\n-    eprintln!(\"[GIT] init\");\n-    init_git_repo(&SYSROOT_SRC.to_path(dirs));\n-\n-    apply_patches(dirs, \"stdlib\", &SYSROOT_SRC.to_path(dirs));\n-}\n-\n-fn prepare_coretests(dirs: &Dirs, rustc: &Path) {\n+pub(crate) fn prepare_stdlib(dirs: &Dirs, rustc: &Path) {\n     let sysroot_src_orig = get_default_sysroot(rustc).join(\"lib/rustlib/src/rust\");\n     assert!(sysroot_src_orig.exists());\n \n-    eprintln!(\"[COPY] coretests src\");\n-\n-    fs::create_dir_all(LIBCORE_TESTS_SRC.to_path(dirs)).unwrap();\n-    copy_dir_recursively(\n-        &sysroot_src_orig.join(\"library/core/tests\"),\n-        &LIBCORE_TESTS_SRC.to_path(dirs),\n-    );\n-\n-    eprintln!(\"[GIT] init\");\n-    init_git_repo(&LIBCORE_TESTS_SRC.to_path(dirs));\n-\n-    apply_patches(dirs, \"coretests\", &LIBCORE_TESTS_SRC.to_path(dirs));\n+    apply_patches(dirs, \"stdlib\", &sysroot_src_orig, &STDLIB_SRC.to_path(dirs));\n+\n+    std::fs::write(\n+        STDLIB_SRC.to_path(dirs).join(\"Cargo.toml\"),\n+        r#\"\n+[workspace]\n+members = [\"./library/sysroot\"]\n+\n+[patch.crates-io]\n+rustc-std-workspace-core = { path = \"./library/rustc-std-workspace-core\" }\n+rustc-std-workspace-alloc = { path = \"./library/rustc-std-workspace-alloc\" }\n+rustc-std-workspace-std = { path = \"./library/rustc-std-workspace-std\" }\n+\n+# Mandatory for correctly compiling compiler-builtins\n+[profile.dev.package.compiler_builtins]\n+debug-assertions = false\n+overflow-checks = false\n+codegen-units = 10000\n+\n+[profile.release.package.compiler_builtins]\n+debug-assertions = false\n+overflow-checks = false\n+codegen-units = 10000\n+\"#,\n+    )\n+    .unwrap();\n+\n+    let source_lockfile = RelPath::PATCHES.to_path(dirs).join(\"stdlib-lock.toml\");\n+    let target_lockfile = STDLIB_SRC.to_path(dirs).join(\"Cargo.lock\");\n+    fs::copy(source_lockfile, target_lockfile).unwrap();\n }\n \n pub(crate) struct GitRepo {\n     url: GitRepoUrl,\n     rev: &'static str,\n+    content_hash: &'static str,\n     patch_name: &'static str,\n }\n \n enum GitRepoUrl {\n     Github { user: &'static str, repo: &'static str },\n }\n \n+// Note: This uses a hasher which is not cryptographically secure. This is fine as the hash is meant\n+// to protect against accidental modification and outdated downloads, not against manipulation.\n+fn hash_file(file: &std::path::Path) -> u64 {\n+    let contents = std::fs::read(file).unwrap();\n+    #[allow(deprecated)]\n+    let mut hasher = std::hash::SipHasher::new();\n+    std::hash::Hash::hash(&contents, &mut hasher);\n+    std::hash::Hasher::finish(&hasher)\n+}\n+\n+fn hash_dir(dir: &std::path::Path) -> u64 {\n+    let mut sub_hashes = std::collections::BTreeMap::new();\n+    for entry in std::fs::read_dir(dir).unwrap() {\n+        let entry = entry.unwrap();\n+        if entry.file_type().unwrap().is_dir() {\n+            sub_hashes\n+                .insert(entry.file_name().to_str().unwrap().to_owned(), hash_dir(&entry.path()));\n+        } else {\n+            sub_hashes\n+                .insert(entry.file_name().to_str().unwrap().to_owned(), hash_file(&entry.path()));\n+        }\n+    }\n+    #[allow(deprecated)]\n+    let mut hasher = std::hash::SipHasher::new();\n+    std::hash::Hash::hash(&sub_hashes, &mut hasher);\n+    std::hash::Hasher::finish(&hasher)\n+}\n+\n impl GitRepo {\n     pub(crate) const fn github(\n         user: &'static str,\n         repo: &'static str,\n         rev: &'static str,\n+        content_hash: &'static str,\n         patch_name: &'static str,\n     ) -> GitRepo {\n-        GitRepo { url: GitRepoUrl::Github { user, repo }, rev, patch_name }\n+        GitRepo { url: GitRepoUrl::Github { user, repo }, rev, content_hash, patch_name }\n+    }\n+\n+    fn download_dir(&self, dirs: &Dirs) -> PathBuf {\n+        match self.url {\n+            GitRepoUrl::Github { user: _, repo } => RelPath::DOWNLOAD.join(repo).to_path(dirs),\n+        }\n     }\n \n     pub(crate) const fn source_dir(&self) -> RelPath {\n         match self.url {\n-            GitRepoUrl::Github { user: _, repo } => RelPath::DOWNLOAD.join(repo),\n+            GitRepoUrl::Github { user: _, repo } => RelPath::BUILD.join(repo),\n         }\n     }\n \n     pub(crate) fn fetch(&self, dirs: &Dirs) {\n+        let download_dir = self.download_dir(dirs);\n+\n+        if download_dir.exists() {\n+            let actual_hash = format!(\"{:016x}\", hash_dir(&download_dir));\n+            if actual_hash == self.content_hash {\n+                println!(\"[FRESH] {}\", download_dir.display());\n+                return;\n+            } else {\n+                println!(\n+                    \"Mismatched content hash for {download_dir}: {actual_hash} != {content_hash}. Downloading again.\",\n+                    download_dir = download_dir.display(),\n+                    content_hash = self.content_hash,\n+                );\n+            }\n+        }\n+\n         match self.url {\n             GitRepoUrl::Github { user, repo } => {\n-                clone_repo_shallow_github(\n-                    dirs,\n-                    &self.source_dir().to_path(dirs),\n-                    user,\n-                    repo,\n-                    self.rev,\n-                );\n+                clone_repo_shallow_github(dirs, &download_dir, user, repo, self.rev);\n             }\n         }\n-        apply_patches(dirs, self.patch_name, &self.source_dir().to_path(dirs));\n+\n+        let source_lockfile =\n+            RelPath::PATCHES.to_path(dirs).join(format!(\"{}-lock.toml\", self.patch_name));\n+        let target_lockfile = download_dir.join(\"Cargo.lock\");\n+        if source_lockfile.exists() {\n+            fs::copy(source_lockfile, target_lockfile).unwrap();\n+        } else {\n+            assert!(target_lockfile.exists());\n+        }\n+\n+        let actual_hash = format!(\"{:016x}\", hash_dir(&download_dir));\n+        if actual_hash != self.content_hash {\n+            println!(\n+                \"Download of {download_dir} failed with mismatched content hash: {actual_hash} != {content_hash}\",\n+                download_dir = download_dir.display(),\n+                content_hash = self.content_hash,\n+            );\n+            std::process::exit(1);\n+        }\n+    }\n+\n+    pub(crate) fn patch(&self, dirs: &Dirs) {\n+        apply_patches(\n+            dirs,\n+            self.patch_name,\n+            &self.download_dir(dirs),\n+            &self.source_dir().to_path(dirs),\n+        );\n     }\n }\n \n@@ -118,6 +181,8 @@ fn clone_repo(download_dir: &Path, repo: &str, rev: &str) {\n     let mut checkout_cmd = git_command(download_dir, \"checkout\");\n     checkout_cmd.arg(\"-q\").arg(rev);\n     spawn_and_wait(checkout_cmd);\n+\n+    std::fs::remove_dir_all(download_dir.join(\".git\")).unwrap();\n }\n \n fn clone_repo_shallow_github(dirs: &Dirs, download_dir: &Path, user: &str, repo: &str, rev: &str) {\n@@ -165,8 +230,6 @@ fn clone_repo_shallow_github(dirs: &Dirs, download_dir: &Path, user: &str, repo:\n     // Rename unpacked dir to the expected name\n     std::fs::rename(archive_dir, &download_dir).unwrap();\n \n-    init_git_repo(&download_dir);\n-\n     // Cleanup\n     std::fs::remove_file(archive_file).unwrap();\n }\n@@ -205,7 +268,22 @@ fn get_patches(dirs: &Dirs, crate_name: &str) -> Vec<PathBuf> {\n     patches\n }\n \n-fn apply_patches(dirs: &Dirs, crate_name: &str, target_dir: &Path) {\n+pub(crate) fn apply_patches(dirs: &Dirs, crate_name: &str, source_dir: &Path, target_dir: &Path) {\n+    // FIXME avoid copy and patch if src, patches and target are unchanged\n+\n+    eprintln!(\"[COPY] {crate_name} source\");\n+\n+    remove_dir_if_exists(target_dir);\n+    fs::create_dir_all(target_dir).unwrap();\n+    if crate_name == \"stdlib\" {\n+        fs::create_dir(target_dir.join(\"library\")).unwrap();\n+        copy_dir_recursively(&source_dir.join(\"library\"), &target_dir.join(\"library\"));\n+    } else {\n+        copy_dir_recursively(source_dir, target_dir);\n+    }\n+\n+    init_git_repo(target_dir);\n+\n     if crate_name == \"<none>\" {\n         return;\n     }"}, {"sha": "5b71504e90a4f122b22f212341930edee500cfd7", "filename": "build_system/rustc_info.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Frustc_info.rs?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -1,12 +1,6 @@\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n \n-pub(crate) fn get_rustc_version(rustc: &Path) -> String {\n-    let version_info =\n-        Command::new(rustc).stderr(Stdio::inherit()).args(&[\"-V\"]).output().unwrap().stdout;\n-    String::from_utf8(version_info).unwrap()\n-}\n-\n pub(crate) fn get_host_triple(rustc: &Path) -> String {\n     let version_info =\n         Command::new(rustc).stderr(Stdio::inherit()).args(&[\"-vV\"]).output().unwrap().stdout;"}, {"sha": "08d8f708c7da474e2b2bc987a1e0a6345dba8b8c", "filename": "build_system/tests.rs", "status": "modified", "additions": 77, "deletions": 19, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -1,12 +1,14 @@\n use super::build_sysroot;\n use super::config;\n use super::path::{Dirs, RelPath};\n-use super::prepare::GitRepo;\n+use super::prepare::{apply_patches, GitRepo};\n+use super::rustc_info::get_default_sysroot;\n use super::utils::{spawn_and_wait, spawn_and_wait_with_input, CargoProject, Compiler};\n use super::{CodegenBackend, SysrootKind};\n use std::env;\n use std::ffi::OsStr;\n use std::fs;\n+use std::path::PathBuf;\n use std::process::Command;\n \n static BUILD_EXAMPLE_OUT_DIR: RelPath = RelPath::BUILD.join(\"example\");\n@@ -17,15 +19,15 @@ struct TestCase {\n }\n \n enum TestCaseCmd {\n-    Custom { func: &'static dyn Fn(&TestRunner) },\n+    Custom { func: &'static dyn Fn(&TestRunner<'_>) },\n     BuildLib { source: &'static str, crate_types: &'static str },\n     BuildBinAndRun { source: &'static str, args: &'static [&'static str] },\n     JitBin { source: &'static str, args: &'static str },\n }\n \n impl TestCase {\n     // FIXME reduce usage of custom test case commands\n-    const fn custom(config: &'static str, func: &'static dyn Fn(&TestRunner)) -> Self {\n+    const fn custom(config: &'static str, func: &'static dyn Fn(&TestRunner<'_>)) -> Self {\n         Self { config, cmd: TestCaseCmd::Custom { func } }\n     }\n \n@@ -94,32 +96,45 @@ const BASE_SYSROOT_SUITE: &[TestCase] = &[\n \n // FIXME(rust-random/rand#1293): Newer rand versions fail to test on Windows. Update once this is\n // fixed.\n-pub(crate) static RAND_REPO: GitRepo =\n-    GitRepo::github(\"rust-random\", \"rand\", \"50b9a447410860af8d6db9a208c3576886955874\", \"rand\");\n+pub(crate) static RAND_REPO: GitRepo = GitRepo::github(\n+    \"rust-random\",\n+    \"rand\",\n+    \"50b9a447410860af8d6db9a208c3576886955874\",\n+    \"446203b96054891e\",\n+    \"rand\",\n+);\n \n-pub(crate) static RAND: CargoProject = CargoProject::new(&RAND_REPO.source_dir(), \"rand\");\n+pub(crate) static RAND: CargoProject = CargoProject::new(&RAND_REPO.source_dir(), \"rand_target\");\n \n-pub(crate) static REGEX_REPO: GitRepo =\n-    GitRepo::github(\"rust-lang\", \"regex\", \"32fed9429eafba0ae92a64b01796a0c5a75b88c8\", \"regex\");\n+pub(crate) static REGEX_REPO: GitRepo = GitRepo::github(\n+    \"rust-lang\",\n+    \"regex\",\n+    \"32fed9429eafba0ae92a64b01796a0c5a75b88c8\",\n+    \"fcc4df7c5b902633\",\n+    \"regex\",\n+);\n \n-pub(crate) static REGEX: CargoProject = CargoProject::new(&REGEX_REPO.source_dir(), \"regex\");\n+pub(crate) static REGEX: CargoProject = CargoProject::new(&REGEX_REPO.source_dir(), \"regex_target\");\n \n pub(crate) static PORTABLE_SIMD_REPO: GitRepo = GitRepo::github(\n     \"rust-lang\",\n     \"portable-simd\",\n     \"ad8afa8c81273b3b49acbea38cd3bcf17a34cf2b\",\n+    \"800548f8000e31bd\",\n     \"portable-simd\",\n );\n \n pub(crate) static PORTABLE_SIMD: CargoProject =\n-    CargoProject::new(&PORTABLE_SIMD_REPO.source_dir(), \"portable_simd\");\n+    CargoProject::new(&PORTABLE_SIMD_REPO.source_dir(), \"portable-simd_target\");\n \n-pub(crate) static LIBCORE_TESTS_SRC: RelPath = RelPath::DOWNLOAD.join(\"coretests_src\");\n+static LIBCORE_TESTS_SRC: RelPath = RelPath::BUILD.join(\"coretests\");\n \n-pub(crate) static LIBCORE_TESTS: CargoProject = CargoProject::new(&LIBCORE_TESTS_SRC, \"core_tests\");\n+static LIBCORE_TESTS: CargoProject = CargoProject::new(&LIBCORE_TESTS_SRC, \"coretests_target\");\n \n const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::custom(\"test.rust-random/rand\", &|runner| {\n+        RAND_REPO.patch(&runner.dirs);\n+\n         RAND.clean(&runner.dirs);\n \n         if runner.is_native {\n@@ -134,6 +149,17 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         }\n     }),\n     TestCase::custom(\"test.libcore\", &|runner| {\n+        apply_patches(\n+            &runner.dirs,\n+            \"coretests\",\n+            &runner.stdlib_source.join(\"library/core/tests\"),\n+            &LIBCORE_TESTS_SRC.to_path(&runner.dirs),\n+        );\n+\n+        let source_lockfile = RelPath::PATCHES.to_path(&runner.dirs).join(\"coretests-lock.toml\");\n+        let target_lockfile = LIBCORE_TESTS_SRC.to_path(&runner.dirs).join(\"Cargo.lock\");\n+        fs::copy(source_lockfile, target_lockfile).unwrap();\n+\n         LIBCORE_TESTS.clean(&runner.dirs);\n \n         if runner.is_native {\n@@ -148,6 +174,8 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         }\n     }),\n     TestCase::custom(\"test.regex-shootout-regex-dna\", &|runner| {\n+        REGEX_REPO.patch(&runner.dirs);\n+\n         REGEX.clean(&runner.dirs);\n \n         let mut build_cmd = REGEX.build(&runner.target_compiler, &runner.dirs);\n@@ -180,6 +208,8 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         }\n     }),\n     TestCase::custom(\"test.regex\", &|runner| {\n+        REGEX_REPO.patch(&runner.dirs);\n+\n         REGEX.clean(&runner.dirs);\n \n         if runner.is_native {\n@@ -196,6 +226,8 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         }\n     }),\n     TestCase::custom(\"test.portable-simd\", &|runner| {\n+        PORTABLE_SIMD_REPO.patch(&runner.dirs);\n+\n         PORTABLE_SIMD.clean(&runner.dirs);\n \n         let mut build_cmd = PORTABLE_SIMD.build(&runner.target_compiler, &runner.dirs);\n@@ -215,12 +247,17 @@ pub(crate) fn run_tests(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     use_unstable_features: bool,\n+    skip_tests: &[&str],\n     cg_clif_dylib: &CodegenBackend,\n     bootstrap_host_compiler: &Compiler,\n     rustup_toolchain_name: Option<&str>,\n     target_triple: String,\n ) {\n-    if config::get_bool(\"testsuite.no_sysroot\") {\n+    let stdlib_source =\n+        get_default_sysroot(&bootstrap_host_compiler.rustc).join(\"lib/rustlib/src/rust\");\n+    assert!(stdlib_source.exists());\n+\n+    if config::get_bool(\"testsuite.no_sysroot\") && !skip_tests.contains(&\"testsuite.no_sysroot\") {\n         let target_compiler = build_sysroot::build_sysroot(\n             dirs,\n             channel,\n@@ -235,7 +272,9 @@ pub(crate) fn run_tests(\n             dirs.clone(),\n             target_compiler,\n             use_unstable_features,\n+            skip_tests,\n             bootstrap_host_compiler.triple == target_triple,\n+            stdlib_source.clone(),\n         );\n \n         BUILD_EXAMPLE_OUT_DIR.ensure_fresh(dirs);\n@@ -244,8 +283,10 @@ pub(crate) fn run_tests(\n         eprintln!(\"[SKIP] no_sysroot tests\");\n     }\n \n-    let run_base_sysroot = config::get_bool(\"testsuite.base_sysroot\");\n-    let run_extended_sysroot = config::get_bool(\"testsuite.extended_sysroot\");\n+    let run_base_sysroot = config::get_bool(\"testsuite.base_sysroot\")\n+        && !skip_tests.contains(&\"testsuite.base_sysroot\");\n+    let run_extended_sysroot = config::get_bool(\"testsuite.extended_sysroot\")\n+        && !skip_tests.contains(&\"testsuite.extended_sysroot\");\n \n     if run_base_sysroot || run_extended_sysroot {\n         let mut target_compiler = build_sysroot::build_sysroot(\n@@ -265,7 +306,9 @@ pub(crate) fn run_tests(\n             dirs.clone(),\n             target_compiler,\n             use_unstable_features,\n+            skip_tests,\n             bootstrap_host_compiler.triple == target_triple,\n+            stdlib_source,\n         );\n \n         if run_base_sysroot {\n@@ -282,20 +325,24 @@ pub(crate) fn run_tests(\n     }\n }\n \n-struct TestRunner {\n+struct TestRunner<'a> {\n     is_native: bool,\n     jit_supported: bool,\n     use_unstable_features: bool,\n+    skip_tests: &'a [&'a str],\n     dirs: Dirs,\n     target_compiler: Compiler,\n+    stdlib_source: PathBuf,\n }\n \n-impl TestRunner {\n+impl<'a> TestRunner<'a> {\n     fn new(\n         dirs: Dirs,\n         mut target_compiler: Compiler,\n         use_unstable_features: bool,\n+        skip_tests: &'a [&'a str],\n         is_native: bool,\n+        stdlib_source: PathBuf,\n     ) -> Self {\n         if let Ok(rustflags) = env::var(\"RUSTFLAGS\") {\n             target_compiler.rustflags.push(' ');\n@@ -316,7 +363,15 @@ impl TestRunner {\n             && target_compiler.triple.contains(\"x86_64\")\n             && !target_compiler.triple.contains(\"windows\");\n \n-        Self { is_native, jit_supported, use_unstable_features, dirs, target_compiler }\n+        Self {\n+            is_native,\n+            jit_supported,\n+            use_unstable_features,\n+            skip_tests,\n+            dirs,\n+            target_compiler,\n+            stdlib_source,\n+        }\n     }\n \n     fn run_testsuite(&self, tests: &[TestCase]) {\n@@ -325,7 +380,10 @@ impl TestRunner {\n             let tag = tag.to_uppercase();\n             let is_jit_test = tag == \"JIT\";\n \n-            if !config::get_bool(config) || (is_jit_test && !self.jit_supported) {\n+            if !config::get_bool(config)\n+                || (is_jit_test && !self.jit_supported)\n+                || self.skip_tests.contains(&config)\n+            {\n                 eprintln!(\"[{tag}] {testname} (skipped)\");\n                 continue;\n             } else {"}, {"sha": "6d3b3a13d6e755a2966581b5835091a2005da307", "filename": "build_system/usage.txt", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Fusage.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Fusage.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fusage.txt?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -1,11 +1,11 @@\n The build system of cg_clif.\n \n USAGE:\n-    ./y.rs prepare [--out-dir DIR]\n-    ./y.rs build [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features] [--frozen]\n-    ./y.rs test [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features] [--frozen]\n-    ./y.rs abi-cafe [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features] [--frozen]\n-    ./y.rs bench [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features] [--frozen]\n+    ./y.sh prepare [--out-dir DIR] [--download-dir DIR]\n+    ./y.sh build [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]\n+    ./y.sh test [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen] [--skip-test TESTNAME]\n+    ./y.sh abi-cafe [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]\n+    ./y.sh bench [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]\n \n OPTIONS:\n     --debug\n@@ -22,13 +22,19 @@ OPTIONS:\n             Specify the directory in which the download, build and dist directories are stored.\n             By default this is the working directory.\n \n+    --download-dir DIR\n+            Specify the directory in which the download directory is stored. Overrides --out-dir.\n+\n     --no-unstable-features\n             Some features are not yet ready for production usage. This option will disable these\n             features. This includes the JIT mode and inline assembly support.\n \n     --frozen\n             Require Cargo.lock and cache are up to date\n \n+    --skip-test TESTNAME\n+            Skip testing the TESTNAME test. The test name format is the same as config.txt.\n+\n     --use-backend NAME\n             Use the existing Cranelift (or other) backend of the rustc with which we built.\n             Warning: This is meant for use in rust's CI only!\n@@ -37,7 +43,7 @@ REQUIREMENTS:\n     * Rustup: By default rustup is used to install the right nightly version. If you don't want to\n       use rustup, you can manually install the nightly version indicated by rust-toolchain.toml and\n       point the CARGO, RUSTC and RUSTDOC env vars to the right executables.\n-    * Git: `./y.rs prepare` uses git for applying patches and on Windows for downloading test repos.\n-    * Curl and tar (non-Windows only): Used by `./y.rs prepare` to download a single commit for\n+    * Git: `./y.sh prepare` uses git for applying patches and on Windows for downloading test repos.\n+    * Curl and tar (non-Windows only): Used by `./y.sh prepare` to download a single commit for\n       repos. Git will be used to clone the whole repo when using Windows.\n-    * [Hyperfine](https://github.com/sharkdp/hyperfine/): Used for benchmarking with `./y.rs bench`.\n+    * [Hyperfine](https://github.com/sharkdp/hyperfine/): Used for benchmarking with `./y.sh bench`."}, {"sha": "41fc366e2903c103b34e0766a32975ca6810a0bf", "filename": "build_system/utils.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -81,7 +81,8 @@ impl CargoProject {\n             .arg(\"--manifest-path\")\n             .arg(self.manifest_path(dirs))\n             .arg(\"--target-dir\")\n-            .arg(self.target_dir(dirs));\n+            .arg(self.target_dir(dirs))\n+            .arg(\"--locked\");\n \n         if dirs.frozen {\n             cmd.arg(\"--frozen\");\n@@ -257,3 +258,13 @@ pub(crate) fn is_ci() -> bool {\n pub(crate) fn is_ci_opt() -> bool {\n     env::var(\"CI_OPT\").is_ok()\n }\n+\n+pub(crate) fn maybe_incremental(cmd: &mut Command) {\n+    if is_ci() || std::env::var(\"CARGO_BUILD_INCREMENTAL\").map_or(false, |val| val == \"false\") {\n+        // Disabling incr comp reduces cache size and incr comp doesn't save as much on CI anyway\n+        cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"false\");\n+    } else {\n+        // Force incr comp even in release mode unless in CI or incremental builds are explicitly disabled\n+        cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"true\");\n+    }\n+}"}, {"sha": "19405a53d1c65ce1423eb44c7243ea5b88d25a6b", "filename": "clean_all.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/clean_all.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/clean_all.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clean_all.sh?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -1,7 +1,7 @@\n #!/usr/bin/env bash\n set -e\n \n-rm -rf target/ download/ build/ dist/ y.bin y.bin.dSYM y.exe y.pdb\n+rm -rf target/ build_system/target download/ build/ dist/ y.bin y.bin.dSYM y.exe y.pdb\n \n # Kept for now in case someone updates their checkout of cg_clif before running clean_all.sh\n # FIXME remove at some point in the future"}, {"sha": "c6210f958d6c12fc92838e27bd818046be38fa35", "filename": "docs/usage.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/docs%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/docs%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fusage.md?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -2,7 +2,7 @@\n \n rustc_codegen_cranelift can be used as a near-drop-in replacement for `cargo build` or `cargo run` for existing projects.\n \n-Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`y.rs prepare` and `y.rs build` or `test.sh`).\n+Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`y.sh prepare` and `y.sh build` or `test.sh`).\n \n ## Cargo\n "}, {"sha": "af8f28a193bcde6ef875701d8d9c1c9227751679", "filename": "patches/coretests-lock.toml", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/patches%2Fcoretests-lock.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/patches%2Fcoretests-lock.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2Fcoretests-lock.toml?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -0,0 +1,35 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"coretests\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"rand\",\n+ \"rand_xorshift\",\n+]\n+\n+[[package]]\n+name = \"rand\"\n+version = \"0.8.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\n+dependencies = [\n+ \"rand_core\",\n+]\n+\n+[[package]]\n+name = \"rand_core\"\n+version = \"0.6.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\n+\n+[[package]]\n+name = \"rand_xorshift\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d25bf25ec5ae4a3f1b92f929810509a2f53d7dca2f50b794ff57e3face536c8f\"\n+dependencies = [\n+ \"rand_core\",\n+]"}, {"sha": "e7db1fd2c7fb6dc7d5867973d4a80e6d69eac1ca", "filename": "patches/portable-simd-lock.toml", "status": "added", "additions": 304, "deletions": 0, "changes": 304, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/patches%2Fportable-simd-lock.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/patches%2Fportable-simd-lock.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2Fportable-simd-lock.toml?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -0,0 +1,304 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"autocfg\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n+\n+[[package]]\n+name = \"bitflags\"\n+version = \"1.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n+\n+[[package]]\n+name = \"bumpalo\"\n+version = \"3.13.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a3e2c3daef883ecc1b5d58c15adae93470a91d425f3532ba1695849656af3fc1\"\n+\n+[[package]]\n+name = \"byteorder\"\n+version = \"1.4.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"\n+\n+[[package]]\n+name = \"cfg-if\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n+\n+[[package]]\n+name = \"console_error_panic_hook\"\n+version = \"0.1.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a06aeb73f470f66dcdbf7223caeebb85984942f22f1adb2a088cf9668146bbbc\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"wasm-bindgen\",\n+]\n+\n+[[package]]\n+name = \"core_simd\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"proptest\",\n+ \"std_float\",\n+ \"test_helpers\",\n+ \"wasm-bindgen\",\n+ \"wasm-bindgen-test\",\n+]\n+\n+[[package]]\n+name = \"js-sys\"\n+version = \"0.3.63\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2f37a4a5928311ac501dee68b3c7613a1037d0edb30c8e5427bd832d55d1b790\"\n+dependencies = [\n+ \"wasm-bindgen\",\n+]\n+\n+[[package]]\n+name = \"log\"\n+version = \"0.4.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"518ef76f2f87365916b142844c16d8fefd85039bc5699050210a7778ee1cd1de\"\n+\n+[[package]]\n+name = \"num-traits\"\n+version = \"0.2.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd\"\n+dependencies = [\n+ \"autocfg\",\n+]\n+\n+[[package]]\n+name = \"once_cell\"\n+version = \"1.17.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9670a07f94779e00908f3e686eab508878ebb390ba6e604d3a284c00e8d0487b\"\n+\n+[[package]]\n+name = \"ppv-lite86\"\n+version = \"0.2.17\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.59\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6aeca18b86b413c660b781aa319e4e2648a3e6f9eadc9b47e9038e6fe9f3451b\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"proptest\"\n+version = \"0.10.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"12e6c80c1139113c28ee4670dc50cc42915228b51f56a9e407f0ec60f966646f\"\n+dependencies = [\n+ \"bitflags\",\n+ \"byteorder\",\n+ \"num-traits\",\n+ \"rand\",\n+ \"rand_chacha\",\n+ \"rand_xorshift\",\n+]\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.28\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1b9ab9c7eadfd8df19006f1cf1a4aed13540ed5cbc047010ece5826e10825488\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"rand\"\n+version = \"0.7.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\n+dependencies = [\n+ \"rand_chacha\",\n+ \"rand_core\",\n+ \"rand_hc\",\n+]\n+\n+[[package]]\n+name = \"rand_chacha\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402\"\n+dependencies = [\n+ \"ppv-lite86\",\n+ \"rand_core\",\n+]\n+\n+[[package]]\n+name = \"rand_core\"\n+version = \"0.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\n+\n+[[package]]\n+name = \"rand_hc\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\n+dependencies = [\n+ \"rand_core\",\n+]\n+\n+[[package]]\n+name = \"rand_xorshift\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"77d416b86801d23dde1aa643023b775c3a462efc0ed96443add11546cdf1dca8\"\n+dependencies = [\n+ \"rand_core\",\n+]\n+\n+[[package]]\n+name = \"scoped-tls\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294\"\n+\n+[[package]]\n+name = \"std_float\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"core_simd\",\n+]\n+\n+[[package]]\n+name = \"syn\"\n+version = \"2.0.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"32d41677bcbe24c20c52e7c70b0d8db04134c5d1066bf98662e2871ad200ea3e\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"test_helpers\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"proptest\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b15811caf2415fb889178633e7724bad2509101cde276048e013b9def5e51fa0\"\n+\n+[[package]]\n+name = \"wasm-bindgen\"\n+version = \"0.2.86\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5bba0e8cb82ba49ff4e229459ff22a191bbe9a1cb3a341610c9c33efc27ddf73\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"wasm-bindgen-macro\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-backend\"\n+version = \"0.2.86\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"19b04bc93f9d6bdee709f6bd2118f57dd6679cf1176a1af464fca3ab0d66d8fb\"\n+dependencies = [\n+ \"bumpalo\",\n+ \"log\",\n+ \"once_cell\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"wasm-bindgen-shared\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-futures\"\n+version = \"0.4.36\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2d1985d03709c53167ce907ff394f5316aa22cb4e12761295c5dc57dacb6297e\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"js-sys\",\n+ \"wasm-bindgen\",\n+ \"web-sys\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-macro\"\n+version = \"0.2.86\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"14d6b024f1a526bb0234f52840389927257beb670610081360e5a03c5df9c258\"\n+dependencies = [\n+ \"quote\",\n+ \"wasm-bindgen-macro-support\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-macro-support\"\n+version = \"0.2.86\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e128beba882dd1eb6200e1dc92ae6c5dbaa4311aa7bb211ca035779e5efc39f8\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"wasm-bindgen-backend\",\n+ \"wasm-bindgen-shared\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-shared\"\n+version = \"0.2.86\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ed9d5b4305409d1fc9482fee2d7f9bcbf24b3972bf59817ef757e23982242a93\"\n+\n+[[package]]\n+name = \"wasm-bindgen-test\"\n+version = \"0.3.36\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c9e636f3a428ff62b3742ebc3c70e254dfe12b8c2b469d688ea59cdd4abcf502\"\n+dependencies = [\n+ \"console_error_panic_hook\",\n+ \"js-sys\",\n+ \"scoped-tls\",\n+ \"wasm-bindgen\",\n+ \"wasm-bindgen-futures\",\n+ \"wasm-bindgen-test-macro\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-test-macro\"\n+version = \"0.3.36\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f18c1fad2f7c4958e7bcce014fa212f59a65d5e3721d0f77e6c0b27ede936ba3\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+]\n+\n+[[package]]\n+name = \"web-sys\"\n+version = \"0.3.63\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3bdd9ef4e984da1187bf8110c5cf5b845fbc87a23602cdf912386a76fcd3a7c2\"\n+dependencies = [\n+ \"js-sys\",\n+ \"wasm-bindgen\",\n+]"}, {"sha": "66c515731c5e32e051f753dd3127098cbaf61a35", "filename": "patches/rand-lock.toml", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/patches%2Frand-lock.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/patches%2Frand-lock.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2Frand-lock.toml?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -0,0 +1,346 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"autocfg\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n+\n+[[package]]\n+name = \"average\"\n+version = \"0.13.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"843ec791d3f24503bbf72bbd5e49a3ab4dbb4bcd0a8ef6b0c908efa73caa27b1\"\n+dependencies = [\n+ \"easy-cast\",\n+ \"float-ord\",\n+ \"num-traits\",\n+]\n+\n+[[package]]\n+name = \"bincode\"\n+version = \"1.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"cfg-if\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n+\n+[[package]]\n+name = \"crossbeam-channel\"\n+version = \"0.5.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a33c2bf77f2df06183c3aa30d1e96c0695a313d4f9c453cc3762a6db39f99200\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"crossbeam-utils\",\n+]\n+\n+[[package]]\n+name = \"crossbeam-deque\"\n+version = \"0.8.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ce6fd6f855243022dcecf8702fef0c297d4338e226845fe067f6341ad9fa0cef\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"crossbeam-epoch\",\n+ \"crossbeam-utils\",\n+]\n+\n+[[package]]\n+name = \"crossbeam-epoch\"\n+version = \"0.9.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"46bd5f3f85273295a9d14aedfb86f6aadbff6d8f5295c4a9edb08e819dcf5695\"\n+dependencies = [\n+ \"autocfg\",\n+ \"cfg-if\",\n+ \"crossbeam-utils\",\n+ \"memoffset\",\n+ \"scopeguard\",\n+]\n+\n+[[package]]\n+name = \"crossbeam-utils\"\n+version = \"0.8.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3c063cd8cc95f5c377ed0d4b49a4b21f632396ff690e8470c29b3359b346984b\"\n+dependencies = [\n+ \"cfg-if\",\n+]\n+\n+[[package]]\n+name = \"easy-cast\"\n+version = \"0.4.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4bd102ee8c418348759919b83b81cdbdc933ffe29740b903df448b4bafaa348e\"\n+dependencies = [\n+ \"libm\",\n+]\n+\n+[[package]]\n+name = \"either\"\n+version = \"1.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7fcaabb2fef8c910e7f4c7ce9f67a1283a1715879a7c230ca9d6d1ae31f16d91\"\n+\n+[[package]]\n+name = \"float-ord\"\n+version = \"0.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8ce81f49ae8a0482e4c55ea62ebbd7e5a686af544c00b9d090bba3ff9be97b3d\"\n+\n+[[package]]\n+name = \"getrandom\"\n+version = \"0.2.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c85e1d9ab2eadba7e5040d4e09cbd6d072b76a557ad64e797c2cb9d4da21d7e4\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"libc\",\n+ \"wasi\",\n+]\n+\n+[[package]]\n+name = \"hermit-abi\"\n+version = \"0.2.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ee512640fe35acbfb4bb779db6f0d80704c2cacfa2e39b601ef3e3f47d1ae4c7\"\n+dependencies = [\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"itoa\"\n+version = \"1.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"453ad9f582a441959e5f0d088b02ce04cfe8d51a8eaf077f12ac6d3e94164ca6\"\n+\n+[[package]]\n+name = \"libc\"\n+version = \"0.2.144\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2b00cc1c228a6782d0f076e7b232802e0c5689d41bb5df366f2a6b6621cfdfe1\"\n+\n+[[package]]\n+name = \"libm\"\n+version = \"0.2.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f7012b1bbb0719e1097c47611d3898568c546d597c2e74d66f6087edd5233ff4\"\n+\n+[[package]]\n+name = \"log\"\n+version = \"0.4.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"518ef76f2f87365916b142844c16d8fefd85039bc5699050210a7778ee1cd1de\"\n+\n+[[package]]\n+name = \"memoffset\"\n+version = \"0.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d61c719bcfbcf5d62b3a09efa6088de8c54bc0bfcd3ea7ae39fcc186108b8de1\"\n+dependencies = [\n+ \"autocfg\",\n+]\n+\n+[[package]]\n+name = \"num-traits\"\n+version = \"0.2.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd\"\n+dependencies = [\n+ \"autocfg\",\n+ \"libm\",\n+]\n+\n+[[package]]\n+name = \"num_cpus\"\n+version = \"1.15.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0fac9e2da13b5eb447a6ce3d392f23a29d8694bff781bf03a16cd9ac8697593b\"\n+dependencies = [\n+ \"hermit-abi\",\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"ppv-lite86\"\n+version = \"0.2.17\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.59\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6aeca18b86b413c660b781aa319e4e2648a3e6f9eadc9b47e9038e6fe9f3451b\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.28\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1b9ab9c7eadfd8df19006f1cf1a4aed13540ed5cbc047010ece5826e10825488\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"rand\"\n+version = \"0.9.0\"\n+dependencies = [\n+ \"bincode\",\n+ \"libc\",\n+ \"log\",\n+ \"rand_chacha\",\n+ \"rand_core\",\n+ \"rand_pcg\",\n+ \"rayon\",\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"rand_chacha\"\n+version = \"0.4.0\"\n+dependencies = [\n+ \"ppv-lite86\",\n+ \"rand_core\",\n+ \"serde\",\n+ \"serde_json\",\n+]\n+\n+[[package]]\n+name = \"rand_core\"\n+version = \"0.7.0\"\n+dependencies = [\n+ \"getrandom\",\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"rand_distr\"\n+version = \"0.5.0\"\n+dependencies = [\n+ \"average\",\n+ \"num-traits\",\n+ \"rand\",\n+ \"rand_pcg\",\n+ \"serde\",\n+ \"special\",\n+]\n+\n+[[package]]\n+name = \"rand_pcg\"\n+version = \"0.4.0\"\n+dependencies = [\n+ \"bincode\",\n+ \"rand_core\",\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"rayon\"\n+version = \"1.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1d2df5196e37bcc87abebc0053e20787d73847bb33134a69841207dd0a47f03b\"\n+dependencies = [\n+ \"either\",\n+ \"rayon-core\",\n+]\n+\n+[[package]]\n+name = \"rayon-core\"\n+version = \"1.11.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4b8f95bd6966f5c87776639160a66bd8ab9895d9d4ab01ddba9fc60661aebe8d\"\n+dependencies = [\n+ \"crossbeam-channel\",\n+ \"crossbeam-deque\",\n+ \"crossbeam-utils\",\n+ \"num_cpus\",\n+]\n+\n+[[package]]\n+name = \"ryu\"\n+version = \"1.0.13\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f91339c0467de62360649f8d3e185ca8de4224ff281f66000de5eb2a77a79041\"\n+\n+[[package]]\n+name = \"scopeguard\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n+\n+[[package]]\n+name = \"serde\"\n+version = \"1.0.163\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2113ab51b87a539ae008b5c6c02dc020ffa39afd2d83cffcb3f4eb2722cebec2\"\n+dependencies = [\n+ \"serde_derive\",\n+]\n+\n+[[package]]\n+name = \"serde_derive\"\n+version = \"1.0.163\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8c805777e3930c8883389c602315a24224bcc738b63905ef87cd1420353ea93e\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"serde_json\"\n+version = \"1.0.96\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"057d394a50403bcac12672b2b18fb387ab6d289d957dab67dd201875391e52f1\"\n+dependencies = [\n+ \"itoa\",\n+ \"ryu\",\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"special\"\n+version = \"0.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"24a65e074159b75dcf173a4733ab2188baac24967b5c8ec9ed87ae15fcbc7636\"\n+dependencies = [\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"syn\"\n+version = \"2.0.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"32d41677bcbe24c20c52e7c70b0d8db04134c5d1066bf98662e2871ad200ea3e\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b15811caf2415fb889178633e7724bad2509101cde276048e013b9def5e51fa0\"\n+\n+[[package]]\n+name = \"wasi\"\n+version = \"0.11.0+wasi-snapshot-preview1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\""}, {"sha": "0e4a33b90ea1fdf15a2eae1fb101455a1368d10d", "filename": "patches/regex-lock.toml", "status": "added", "additions": 439, "deletions": 0, "changes": 439, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/patches%2Fregex-lock.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/patches%2Fregex-lock.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2Fregex-lock.toml?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -0,0 +1,439 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"aho-corasick\"\n+version = \"0.7.20\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cc936419f96fa211c1b9166887b38e5e40b19958e5b895be7c1f93adec7071ac\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n+[[package]]\n+name = \"bitflags\"\n+version = \"1.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n+\n+[[package]]\n+name = \"bzip2\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"42b7c3cbf0fa9c1b82308d57191728ca0256cb821220f4e2fd410a72ade26e3b\"\n+dependencies = [\n+ \"bzip2-sys\",\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"bzip2-sys\"\n+version = \"0.1.11+1.0.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"736a955f3fa7875102d57c82b8cac37ec45224a07fd32d58f9f7a186b6cd4cdc\"\n+dependencies = [\n+ \"cc\",\n+ \"libc\",\n+ \"pkg-config\",\n+]\n+\n+[[package]]\n+name = \"cc\"\n+version = \"1.0.79\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f\"\n+\n+[[package]]\n+name = \"cfg-if\"\n+version = \"0.1.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n+\n+[[package]]\n+name = \"cfg-if\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n+\n+[[package]]\n+name = \"docopt\"\n+version = \"1.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7f3f119846c823f9eafcf953a8f6ffb6ed69bf6240883261a7f13b634579a51f\"\n+dependencies = [\n+ \"lazy_static\",\n+ \"regex 1.8.3\",\n+ \"serde\",\n+ \"strsim\",\n+]\n+\n+[[package]]\n+name = \"filetime\"\n+version = \"0.2.21\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5cbc844cecaee9d4443931972e1289c8ff485cb4cc2767cb03ca139ed6885153\"\n+dependencies = [\n+ \"cfg-if 1.0.0\",\n+ \"libc\",\n+ \"redox_syscall\",\n+ \"windows-sys\",\n+]\n+\n+[[package]]\n+name = \"getrandom\"\n+version = \"0.2.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c85e1d9ab2eadba7e5040d4e09cbd6d072b76a557ad64e797c2cb9d4da21d7e4\"\n+dependencies = [\n+ \"cfg-if 1.0.0\",\n+ \"libc\",\n+ \"wasi\",\n+]\n+\n+[[package]]\n+name = \"lazy_static\"\n+version = \"1.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n+\n+[[package]]\n+name = \"libc\"\n+version = \"0.2.144\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2b00cc1c228a6782d0f076e7b232802e0c5689d41bb5df366f2a6b6621cfdfe1\"\n+\n+[[package]]\n+name = \"libpcre-sys\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0ff3dd28ba96d6fe6752882f2f1b25ba8e1646448e79042442347cf3a92a6666\"\n+dependencies = [\n+ \"bzip2\",\n+ \"libc\",\n+ \"pkg-config\",\n+ \"tar\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"2.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d\"\n+\n+[[package]]\n+name = \"memmap\"\n+version = \"0.6.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e2ffa2c986de11a9df78620c01eeaaf27d94d3ff02bf81bfcca953102dd0c6ff\"\n+dependencies = [\n+ \"libc\",\n+ \"winapi\",\n+]\n+\n+[[package]]\n+name = \"onig\"\n+version = \"3.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f5eeb268a4620c74ea5768c6d2ccd492d60a47a8754666b91a46bfc35cd4d1ba\"\n+dependencies = [\n+ \"bitflags\",\n+ \"lazy_static\",\n+ \"libc\",\n+ \"onig_sys\",\n+]\n+\n+[[package]]\n+name = \"onig_sys\"\n+version = \"68.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"195ebddbb56740be48042ca117b8fb6e0d99fe392191a9362d82f5f69e510379\"\n+dependencies = [\n+ \"cc\",\n+ \"libc\",\n+ \"pkg-config\",\n+]\n+\n+[[package]]\n+name = \"pkg-config\"\n+version = \"0.3.27\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"26072860ba924cbfa98ea39c8c19b4dd6a4a25423dbdf219c1eca91aa0cf6964\"\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.59\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6aeca18b86b413c660b781aa319e4e2648a3e6f9eadc9b47e9038e6fe9f3451b\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"quickcheck\"\n+version = \"1.0.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"588f6378e4dd99458b60ec275b4477add41ce4fa9f64dcba6f15adccb19b50d6\"\n+dependencies = [\n+ \"rand\",\n+]\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.28\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1b9ab9c7eadfd8df19006f1cf1a4aed13540ed5cbc047010ece5826e10825488\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"rand\"\n+version = \"0.8.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\n+dependencies = [\n+ \"rand_core\",\n+]\n+\n+[[package]]\n+name = \"rand_core\"\n+version = \"0.6.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\n+dependencies = [\n+ \"getrandom\",\n+]\n+\n+[[package]]\n+name = \"redox_syscall\"\n+version = \"0.2.16\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a\"\n+dependencies = [\n+ \"bitflags\",\n+]\n+\n+[[package]]\n+name = \"regex\"\n+version = \"1.7.2\"\n+dependencies = [\n+ \"aho-corasick\",\n+ \"lazy_static\",\n+ \"memchr\",\n+ \"quickcheck\",\n+ \"rand\",\n+ \"regex-syntax 0.6.29\",\n+]\n+\n+[[package]]\n+name = \"regex\"\n+version = \"1.8.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"81ca098a9821bd52d6b24fd8b10bd081f47d39c22778cafaa75a2857a62c6390\"\n+dependencies = [\n+ \"regex-syntax 0.7.2\",\n+]\n+\n+[[package]]\n+name = \"regex-benchmark\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"cc\",\n+ \"cfg-if 0.1.10\",\n+ \"docopt\",\n+ \"lazy_static\",\n+ \"libc\",\n+ \"libpcre-sys\",\n+ \"memmap\",\n+ \"onig\",\n+ \"pkg-config\",\n+ \"regex 1.7.2\",\n+ \"regex-syntax 0.6.29\",\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"regex-debug\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"docopt\",\n+ \"regex 1.7.2\",\n+ \"regex-syntax 0.6.29\",\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"regex-syntax\"\n+version = \"0.6.29\"\n+\n+[[package]]\n+name = \"regex-syntax\"\n+version = \"0.7.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"436b050e76ed2903236f032a59761c1eb99e1b0aead2c257922771dab1fc8c78\"\n+\n+[[package]]\n+name = \"rure\"\n+version = \"0.2.2\"\n+dependencies = [\n+ \"libc\",\n+ \"regex 1.7.2\",\n+]\n+\n+[[package]]\n+name = \"serde\"\n+version = \"1.0.163\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2113ab51b87a539ae008b5c6c02dc020ffa39afd2d83cffcb3f4eb2722cebec2\"\n+dependencies = [\n+ \"serde_derive\",\n+]\n+\n+[[package]]\n+name = \"serde_derive\"\n+version = \"1.0.163\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8c805777e3930c8883389c602315a24224bcc738b63905ef87cd1420353ea93e\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"strsim\"\n+version = \"0.10.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n+\n+[[package]]\n+name = \"syn\"\n+version = \"2.0.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"32d41677bcbe24c20c52e7c70b0d8db04134c5d1066bf98662e2871ad200ea3e\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"tar\"\n+version = \"0.4.38\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4b55807c0344e1e6c04d7c965f5289c39a8d94ae23ed5c0b57aabac549f871c6\"\n+dependencies = [\n+ \"filetime\",\n+ \"libc\",\n+ \"xattr\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b15811caf2415fb889178633e7724bad2509101cde276048e013b9def5e51fa0\"\n+\n+[[package]]\n+name = \"wasi\"\n+version = \"0.11.0+wasi-snapshot-preview1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n+\n+[[package]]\n+name = \"winapi\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\n+dependencies = [\n+ \"winapi-i686-pc-windows-gnu\",\n+ \"winapi-x86_64-pc-windows-gnu\",\n+]\n+\n+[[package]]\n+name = \"winapi-i686-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n+\n+[[package]]\n+name = \"winapi-x86_64-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n+\n+[[package]]\n+name = \"windows-sys\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\n+dependencies = [\n+ \"windows-targets\",\n+]\n+\n+[[package]]\n+name = \"windows-targets\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7b1eb6f0cd7c80c79759c929114ef071b87354ce476d9d94271031c0497adfd5\"\n+dependencies = [\n+ \"windows_aarch64_gnullvm\",\n+ \"windows_aarch64_msvc\",\n+ \"windows_i686_gnu\",\n+ \"windows_i686_msvc\",\n+ \"windows_x86_64_gnu\",\n+ \"windows_x86_64_gnullvm\",\n+ \"windows_x86_64_msvc\",\n+]\n+\n+[[package]]\n+name = \"windows_aarch64_gnullvm\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc\"\n+\n+[[package]]\n+name = \"windows_aarch64_msvc\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3\"\n+\n+[[package]]\n+name = \"windows_i686_gnu\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241\"\n+\n+[[package]]\n+name = \"windows_i686_msvc\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnu\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnullvm\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953\"\n+\n+[[package]]\n+name = \"windows_x86_64_msvc\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a\"\n+\n+[[package]]\n+name = \"xattr\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6d1526bbe5aaeb5eb06885f4d987bcdfa5e23187055de9b83fe00156a821fabc\"\n+dependencies = [\n+ \"libc\",\n+]"}, {"sha": "1dde9e54d7ee0b1a128d451078d5a744cca78691", "filename": "patches/stdlib-lock.toml", "status": "renamed", "additions": 102, "deletions": 3, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/patches%2Fstdlib-lock.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/patches%2Fstdlib-lock.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2Fstdlib-lock.toml?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -30,8 +30,26 @@ version = \"0.0.0\"\n dependencies = [\n  \"compiler_builtins\",\n  \"core\",\n+ \"rand\",\n+ \"rand_xorshift\",\n ]\n \n+[[package]]\n+name = \"auxv\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e50430f9beb8effb02399fa81c76eeaa26b05e4f03b09285cad8d079c1af5a3d\"\n+dependencies = [\n+ \"byteorder\",\n+ \"gcc\",\n+]\n+\n+[[package]]\n+name = \"byteorder\"\n+version = \"1.4.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"\n+\n [[package]]\n name = \"cc\"\n version = \"1.0.79\"\n@@ -54,12 +72,27 @@ version = \"0.1.93\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"76630810d973ecea3dbf611e1b7aecfb1012751ef1ff8de3998f89014a166781\"\n dependencies = [\n+ \"cc\",\n  \"rustc-std-workspace-core\",\n ]\n \n [[package]]\n name = \"core\"\n version = \"0.0.0\"\n+dependencies = [\n+ \"rand\",\n+ \"rand_xorshift\",\n+]\n+\n+[[package]]\n+name = \"cupid\"\n+version = \"0.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8bad352a84b567cc38a5854e3aa8ee903cb8519a25d0b799b739bafffd1f91a1\"\n+dependencies = [\n+ \"gcc\",\n+ \"rustc_version\",\n+]\n \n [[package]]\n name = \"dlmalloc\"\n@@ -82,6 +115,12 @@ dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n+[[package]]\n+name = \"gcc\"\n+version = \"0.3.55\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8f5f3913fa0bfe7ee1fd8248b6b9f42a5af4b9d65ec2dd2c3c26132b950ecfc2\"\n+\n [[package]]\n name = \"getopts\"\n version = \"0.2.21\"\n@@ -200,6 +239,39 @@ dependencies = [\n  \"std\",\n ]\n \n+[[package]]\n+name = \"profiler_builtins\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"cc\",\n+ \"compiler_builtins\",\n+ \"core\",\n+]\n+\n+[[package]]\n+name = \"rand\"\n+version = \"0.8.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\n+dependencies = [\n+ \"rand_core\",\n+]\n+\n+[[package]]\n+name = \"rand_core\"\n+version = \"0.6.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\n+\n+[[package]]\n+name = \"rand_xorshift\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d25bf25ec5ae4a3f1b92f929810509a2f53d7dca2f50b794ff57e3face536c8f\"\n+dependencies = [\n+ \"rand_core\",\n+]\n+\n [[package]]\n name = \"rustc-demangle\"\n version = \"0.1.23\"\n@@ -231,6 +303,30 @@ dependencies = [\n  \"std\",\n ]\n \n+[[package]]\n+name = \"rustc_version\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n+dependencies = [\n+ \"semver\",\n+]\n+\n+[[package]]\n+name = \"semver\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n+dependencies = [\n+ \"semver-parser\",\n+]\n+\n+[[package]]\n+name = \"semver-parser\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n+\n [[package]]\n name = \"std\"\n version = \"0.0.0\"\n@@ -249,6 +345,9 @@ dependencies = [\n  \"object\",\n  \"panic_abort\",\n  \"panic_unwind\",\n+ \"profiler_builtins\",\n+ \"rand\",\n+ \"rand_xorshift\",\n  \"rustc-demangle\",\n  \"std_detect\",\n  \"unwind\",\n@@ -259,8 +358,11 @@ dependencies = [\n name = \"std_detect\"\n version = \"0.1.5\"\n dependencies = [\n+ \"auxv\",\n  \"cfg-if\",\n  \"compiler_builtins\",\n+ \"cupid\",\n+ \"libc\",\n  \"rustc-std-workspace-alloc\",\n  \"rustc-std-workspace-core\",\n ]\n@@ -269,9 +371,6 @@ dependencies = [\n name = \"sysroot\"\n version = \"0.0.0\"\n dependencies = [\n- \"alloc\",\n- \"compiler_builtins\",\n- \"core\",\n  \"proc_macro\",\n  \"std\",\n  \"test\",", "previous_filename": "build_sysroot/Cargo.lock"}, {"sha": "e62788f2e507dfe2430d7a6941a7b380a5107277", "filename": "scripts/rustup.sh", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/scripts%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/scripts%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Frustup.sh?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -32,12 +32,10 @@ case $1 in\n \n         ./clean_all.sh\n \n-        ./y.rs prepare\n-\n-        (cd download/sysroot && cargo update && cargo fetch && cp Cargo.lock ../../build_sysroot/)\n+        ./y.sh prepare\n         ;;\n     \"commit\")\n-        git add rust-toolchain build_sysroot/Cargo.lock\n+        git add rust-toolchain\n         git commit -m \"Rustup to $(rustc -V)\"\n         ;;\n     \"push\")"}, {"sha": "15b16b42be5b97f8d0e1b9b68babf71609fb3ec1", "filename": "scripts/setup_rust_fork.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/scripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/scripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fsetup_rust_fork.sh?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -1,7 +1,7 @@\n #!/usr/bin/env bash\n set -e\n \n-./y.rs build --no-unstable-features\n+./y.sh build --no-unstable-features\n \n echo \"[SETUP] Rust fork\"\n git clone https://github.com/rust-lang/rust.git || true"}, {"sha": "9e92d656c76efeb99fbc45ee8355acc70c81606c", "filename": "src/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -82,6 +82,11 @@ impl BackendConfig {\n \n         let mut config = BackendConfig::default();\n         for opt in opts {\n+            if opt.starts_with(\"-import-instr-limit\") {\n+                // Silently ignore -import-instr-limit. It is set by rust's build system even when\n+                // testing cg_clif.\n+                continue;\n+            }\n             if let Some((name, value)) = opt.split_once('=') {\n                 match name {\n                     \"mode\" => config.codegen_mode = value.parse()?,"}, {"sha": "6357eebf026966e8083fff945e11dd6f13262b76", "filename": "test.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -1,2 +1,2 @@\n #!/usr/bin/env bash\n-exec ./y.rs test \"$@\"\n+exec ./y.sh test \"$@\""}, {"sha": "e806a64d943448d9b4695b37ea56f36c2b11c514", "filename": "y.rs", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/y.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/y.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/y.rs?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -1,35 +1,6 @@\n #!/usr/bin/env bash\n #![deny(unsafe_code)] /*This line is ignored by bash\n # This block is ignored by rustc\n-set -e\n-echo \"[BUILD] y.rs\" 1>&2\n-rustc $0 -o ${0/.rs/.bin} -Cdebuginfo=1 --edition 2021\n-exec ${0/.rs/.bin} $@\n+echo \"Warning: y.rs is a deprecated alias for y.sh\" 1>&2\n+exec ./y.sh \"$@\"\n */\n-\n-#![warn(rust_2018_idioms)]\n-#![warn(unused_lifetimes)]\n-#![warn(unreachable_pub)]\n-\n-//! The build system for cg_clif\n-//!\n-//! # Manual compilation\n-//!\n-//! If your system doesn't support shell scripts you can manually compile and run this file using\n-//! for example:\n-//!\n-//! ```shell\n-//! $ rustc y.rs -o y.bin\n-//! $ ./y.bin\n-//! ```\n-//!\n-//! # Naming\n-//!\n-//! The name `y.rs` was chosen to not conflict with rustc's `x.py`.\n-\n-#[path = \"build_system/mod.rs\"]\n-mod build_system;\n-\n-fn main() {\n-    build_system::main();\n-}"}, {"sha": "bc925a23e2a88d866aa931d7147b57f5f7eca922", "filename": "y.sh", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2895f314342814ff4ee87b73cf4b3eefcf13868/y.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f2895f314342814ff4ee87b73cf4b3eefcf13868/y.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/y.sh?ref=f2895f314342814ff4ee87b73cf4b3eefcf13868", "patch": "@@ -0,0 +1,6 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+echo \"[BUILD] build system\" 1>&2\n+rustc build_system/main.rs -o y.bin -Cdebuginfo=1 --edition 2021\n+exec ./y.bin \"$@\""}]}