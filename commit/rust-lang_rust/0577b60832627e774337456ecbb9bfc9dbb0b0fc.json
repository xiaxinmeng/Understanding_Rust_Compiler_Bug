{"sha": "0577b60832627e774337456ecbb9bfc9dbb0b0fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NzdiNjA4MzI2MjdlNzc0MzM3NDU2ZWNiYjliZmM5ZGJiMGIwZmM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-10-16T00:20:01Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-10-16T00:22:17Z"}, "message": "Re-enable linker override for cross-compilation", "tree": {"sha": "a1243abb48b2a56e4fd68bbb4d3a76e5c2ad158b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1243abb48b2a56e4fd68bbb4d3a76e5c2ad158b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0577b60832627e774337456ecbb9bfc9dbb0b0fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0577b60832627e774337456ecbb9bfc9dbb0b0fc", "html_url": "https://github.com/rust-lang/rust/commit/0577b60832627e774337456ecbb9bfc9dbb0b0fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0577b60832627e774337456ecbb9bfc9dbb0b0fc/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89d9ce4ec3c134ab62e9eea18a9620face8f88b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/89d9ce4ec3c134ab62e9eea18a9620face8f88b7", "html_url": "https://github.com/rust-lang/rust/commit/89d9ce4ec3c134ab62e9eea18a9620face8f88b7"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "6ac919d3fbdda544922e5cf1ef678d9e75e53991", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0577b60832627e774337456ecbb9bfc9dbb0b0fc/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0577b60832627e774337456ecbb9bfc9dbb0b0fc/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=0577b60832627e774337456ecbb9bfc9dbb0b0fc", "patch": "@@ -661,8 +661,9 @@ impl Build {\n \n     /// Returns the path to the linker for the given target if it needs to be overriden.\n     fn linker(&self, target: Interned<String>) -> Option<&Path> {\n-        if let Some(config) = self.config.target_config.get(&target) {\n-            config.linker.as_ref().map(|p| &**p)\n+        if let Some(linker) = self.config.target_config.get(&target)\n+                                                       .and_then(|c| c.linker.as_ref()) {\n+            Some(linker)\n         } else if target != self.config.build &&\n                   !target.contains(\"msvc\") && !target.contains(\"emscripten\") {\n             Some(self.cc(target))"}]}