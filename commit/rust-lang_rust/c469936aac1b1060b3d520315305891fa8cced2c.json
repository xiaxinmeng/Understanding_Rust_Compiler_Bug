{"sha": "c469936aac1b1060b3d520315305891fa8cced2c", "node_id": "C_kwDOAAsO6NoAKGM0Njk5MzZhYWMxYjEwNjBiM2Q1MjAzMTUzMDU4OTFmYThjY2VkMmM", "commit": {"author": {"name": "hecatia-elegua", "email": "108802164+hecatia-elegua@users.noreply.github.com", "date": "2023-03-30T15:35:57Z"}, "committer": {"name": "hecatia-elegua", "email": "108802164+hecatia-elegua@users.noreply.github.com", "date": "2023-03-30T15:35:57Z"}, "message": "Address review comments part 1", "tree": {"sha": "99127c16c5873f1da79dba6242b1a1b010689cf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99127c16c5873f1da79dba6242b1a1b010689cf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c469936aac1b1060b3d520315305891fa8cced2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c469936aac1b1060b3d520315305891fa8cced2c", "html_url": "https://github.com/rust-lang/rust/commit/c469936aac1b1060b3d520315305891fa8cced2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c469936aac1b1060b3d520315305891fa8cced2c/comments", "author": {"login": "hecatia-elegua", "id": 108802164, "node_id": "U_kgDOBnwwdA", "avatar_url": "https://avatars.githubusercontent.com/u/108802164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hecatia-elegua", "html_url": "https://github.com/hecatia-elegua", "followers_url": "https://api.github.com/users/hecatia-elegua/followers", "following_url": "https://api.github.com/users/hecatia-elegua/following{/other_user}", "gists_url": "https://api.github.com/users/hecatia-elegua/gists{/gist_id}", "starred_url": "https://api.github.com/users/hecatia-elegua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hecatia-elegua/subscriptions", "organizations_url": "https://api.github.com/users/hecatia-elegua/orgs", "repos_url": "https://api.github.com/users/hecatia-elegua/repos", "events_url": "https://api.github.com/users/hecatia-elegua/events{/privacy}", "received_events_url": "https://api.github.com/users/hecatia-elegua/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hecatia-elegua", "id": 108802164, "node_id": "U_kgDOBnwwdA", "avatar_url": "https://avatars.githubusercontent.com/u/108802164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hecatia-elegua", "html_url": "https://github.com/hecatia-elegua", "followers_url": "https://api.github.com/users/hecatia-elegua/followers", "following_url": "https://api.github.com/users/hecatia-elegua/following{/other_user}", "gists_url": "https://api.github.com/users/hecatia-elegua/gists{/gist_id}", "starred_url": "https://api.github.com/users/hecatia-elegua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hecatia-elegua/subscriptions", "organizations_url": "https://api.github.com/users/hecatia-elegua/orgs", "repos_url": "https://api.github.com/users/hecatia-elegua/repos", "events_url": "https://api.github.com/users/hecatia-elegua/events{/privacy}", "received_events_url": "https://api.github.com/users/hecatia-elegua/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2b48d1b89f91e5c1df94326368038cf7df4146", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2b48d1b89f91e5c1df94326368038cf7df4146", "html_url": "https://github.com/rust-lang/rust/commit/ba2b48d1b89f91e5c1df94326368038cf7df4146"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "db1c6bc818151d21cbf9e906bde5838289c3ecde", "filename": "crates/hir-def/src/attr.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c469936aac1b1060b3d520315305891fa8cced2c/crates%2Fhir-def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c469936aac1b1060b3d520315305891fa8cced2c/crates%2Fhir-def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fattr.rs?ref=c469936aac1b1060b3d520315305891fa8cced2c", "patch": "@@ -1,5 +1,8 @@\n //! A higher level attributes based on TokenTree, with also some shortcuts.\n \n+#[cfg(test)]\n+mod tests;\n+\n use std::{hash::Hash, ops, sync::Arc};\n \n use base_db::CrateId;\n@@ -238,12 +241,12 @@ impl Attrs {\n         })\n     }\n \n-    pub fn doc_exprs(&self) -> Vec<DocExpr> {\n-        self.by_key(\"doc\").tt_values().map(DocExpr::parse).collect()\n+    pub fn doc_exprs(&self) -> impl Iterator<Item = DocExpr> + '_ {\n+        self.by_key(\"doc\").tt_values().map(DocExpr::parse)\n     }\n \n-    pub fn doc_aliases(&self) -> Vec<SmolStr> {\n-        self.doc_exprs().into_iter().flat_map(|doc_expr| doc_expr.aliases()).collect()\n+    pub fn doc_aliases(&self) -> impl Iterator<Item = SmolStr> + '_ {\n+        self.doc_exprs().flat_map(|doc_expr| doc_expr.aliases().to_vec())\n     }\n \n     pub fn is_proc_macro(&self) -> bool {\n@@ -288,17 +291,17 @@ impl From<DocAtom> for DocExpr {\n }\n \n impl DocExpr {\n-    pub fn parse<S>(tt: &tt::Subtree<S>) -> DocExpr {\n+    fn parse<S>(tt: &tt::Subtree<S>) -> DocExpr {\n         next_doc_expr(&mut tt.token_trees.iter()).unwrap_or(DocExpr::Invalid)\n     }\n \n-    pub fn aliases(self) -> Vec<SmolStr> {\n+    pub fn aliases(&self) -> &[SmolStr] {\n         match self {\n             DocExpr::Atom(DocAtom::KeyValue { key, value }) if key == \"alias\" => {\n-                vec![value]\n+                std::slice::from_ref(value)\n             }\n             DocExpr::Alias(aliases) => aliases,\n-            _ => vec![],\n+            _ => &[],\n         }\n     }\n }"}, {"sha": "e4c8d446af7bd762c60246e5adee44487200f353", "filename": "crates/hir-def/src/attr/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c469936aac1b1060b3d520315305891fa8cced2c/crates%2Fhir-def%2Fsrc%2Fattr%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c469936aac1b1060b3d520315305891fa8cced2c/crates%2Fhir-def%2Fsrc%2Fattr%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fattr%2Ftests.rs?ref=c469936aac1b1060b3d520315305891fa8cced2c", "previous_filename": "crates/hir-def/src/attr_tests.rs"}, {"sha": "8c2e93f09059756ed1e51f20081d55044ad884e4", "filename": "crates/hir-def/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c469936aac1b1060b3d520315305891fa8cced2c/crates%2Fhir-def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c469936aac1b1060b3d520315305891fa8cced2c/crates%2Fhir-def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flib.rs?ref=c469936aac1b1060b3d520315305891fa8cced2c", "patch": "@@ -53,8 +53,6 @@ pub mod import_map;\n mod test_db;\n #[cfg(test)]\n mod macro_expansion_tests;\n-#[cfg(test)]\n-mod attr_tests;\n mod pretty;\n \n use std::{"}, {"sha": "f6478d2ceb27b50577b067e6cf7413669c862352", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c469936aac1b1060b3d520315305891fa8cced2c/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c469936aac1b1060b3d520315305891fa8cced2c/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=c469936aac1b1060b3d520315305891fa8cced2c", "patch": "@@ -549,7 +549,7 @@ impl<'a> CompletionContext<'a> {\n \n     fn doc_aliases(&self, scope_def: ScopeDef) -> Vec<SmolStr> {\n         if let Some(attrs) = scope_def.attrs(self.db) {\n-            attrs.doc_aliases()\n+            attrs.doc_aliases().collect()\n         } else {\n             vec![]\n         }"}, {"sha": "c2c4a663c61239acce406a91eb3427b048ee1e3c", "filename": "crates/ide-completion/src/item.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c469936aac1b1060b3d520315305891fa8cced2c/crates%2Fide-completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c469936aac1b1060b3d520315305891fa8cced2c/crates%2Fide-completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fitem.rs?ref=c469936aac1b1060b3d520315305891fa8cced2c", "patch": "@@ -45,7 +45,7 @@ pub struct CompletionItem {\n     ///\n     /// That is, in `foo.bar$0` lookup of `abracadabra` will be accepted (it\n     /// contains `bar` sub sequence), and `quux` will rejected.\n-    pub lookup: Option<SmolStr>,\n+    pub lookup: SmolStr,\n \n     /// Additional info to show in the UI pop up.\n     pub detail: Option<String>,\n@@ -359,7 +359,7 @@ impl CompletionItem {\n \n     /// What string is used for filtering.\n     pub fn lookup(&self) -> &str {\n-        self.lookup.as_deref().unwrap_or(&self.label)\n+        self.lookup.as_str()\n     }\n \n     pub fn ref_match(&self) -> Option<(String, text_edit::Indel, CompletionRelevance)> {\n@@ -415,19 +415,20 @@ impl Builder {\n         let _p = profile::span(\"item::Builder::build\");\n \n         let mut label = self.label;\n-        let mut lookup = self.lookup;\n+        let mut lookup = self.lookup.unwrap_or_else(|| label.clone());\n         let insert_text = self.insert_text.unwrap_or_else(|| label.to_string());\n \n+        if let Some(doc_aliases) = self.doc_aliases {\n+            label = SmolStr::from(format!(\"{label} (alias {doc_aliases})\"));\n+            lookup = SmolStr::from(format!(\"{lookup} {doc_aliases}\"));\n+        }\n         if let [import_edit] = &*self.imports_to_add {\n             // snippets can have multiple imports, but normal completions only have up to one\n             if let Some(original_path) = import_edit.original_path.as_ref() {\n-                lookup = lookup.or_else(|| Some(label.clone()));\n                 label = SmolStr::from(format!(\"{label} (use {original_path})\"));\n             }\n         } else if let Some(trait_name) = self.trait_name {\n             label = SmolStr::from(format!(\"{label} (as {trait_name})\"));\n-        } else if let Some(doc_aliases) = self.doc_aliases {\n-            label = SmolStr::from(format!(\"{label} (alias {doc_aliases})\"));\n         }\n \n         let text_edit = match self.text_edit {"}]}