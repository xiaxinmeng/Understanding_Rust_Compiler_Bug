{"sha": "ef2f7bb2438e66fd046791bb67849b6c61d946ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMmY3YmIyNDM4ZTY2ZmQwNDY3OTFiYjY3ODQ5YjZjNjFkOTQ2YWI=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-10-28T11:29:42Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-10-28T13:07:12Z"}, "message": "do not use associated types placeholder for inlay hint\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "5a00c8683a031f026bddf2fb33645b4af2c5fdaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a00c8683a031f026bddf2fb33645b4af2c5fdaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef2f7bb2438e66fd046791bb67849b6c61d946ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef2f7bb2438e66fd046791bb67849b6c61d946ab", "html_url": "https://github.com/rust-lang/rust/commit/ef2f7bb2438e66fd046791bb67849b6c61d946ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef2f7bb2438e66fd046791bb67849b6c61d946ab/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8762b797fd37e9a9cab3e5fe534a9672f30e6022", "url": "https://api.github.com/repos/rust-lang/rust/commits/8762b797fd37e9a9cab3e5fe534a9672f30e6022", "html_url": "https://github.com/rust-lang/rust/commit/8762b797fd37e9a9cab3e5fe534a9672f30e6022"}], "stats": {"total": 263, "additions": 108, "deletions": 155}, "files": [{"sha": "ddfd8c8af7aee23f50624a06cbde017c43a245e1", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 50, "deletions": 54, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/ef2f7bb2438e66fd046791bb67849b6c61d946ab/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2f7bb2438e66fd046791bb67849b6c61d946ab/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=ef2f7bb2438e66fd046791bb67849b6c61d946ab", "patch": "@@ -74,9 +74,29 @@ pub trait HirDisplay {\n             curr_size: 0,\n             max_size: None,\n             omit_verbose_types: false,\n-            #[cfg(not(test))]\n             display_target: DisplayTarget::SourceCode { module_id },\n-            #[cfg(test)]\n+        }) {\n+            Ok(()) => {}\n+            Err(HirDisplayError::FmtError) => panic!(\"Writing to String can't fail!\"),\n+            Err(HirDisplayError::DisplaySourceCodeError(e)) => return Err(e),\n+        };\n+        Ok(result)\n+    }\n+\n+    /// Returns a String representation of `self` for test purposes\n+    fn display_test<'a>(\n+        &'a self,\n+        db: &'a dyn HirDatabase,\n+        module_id: ModuleId,\n+    ) -> Result<String, DisplaySourceCodeError> {\n+        let mut result = String::new();\n+        match self.hir_fmt(&mut HirFormatter {\n+            db,\n+            fmt: &mut result,\n+            buf: String::with_capacity(20),\n+            curr_size: 0,\n+            max_size: None,\n+            omit_verbose_types: false,\n             display_target: DisplayTarget::Test { module_id },\n         }) {\n             Ok(()) => {}\n@@ -138,7 +158,6 @@ enum DisplayTarget {\n     /// The generated code should compile, so paths need to be qualified.\n     SourceCode { module_id: ModuleId },\n     /// Only for test purpose to keep real types\n-    #[cfg(test)]\n     Test { module_id: ModuleId },\n }\n \n@@ -147,14 +166,7 @@ impl DisplayTarget {\n         matches!(self, Self::SourceCode {..})\n     }\n     fn is_test(&self) -> bool {\n-        #[cfg(test)]\n-        {\n-            matches!(self, Self::Test {..})\n-        }\n-        #[cfg(not(test))]\n-        {\n-            false\n-        }\n+        matches!(self, Self::Test {..})\n     }\n }\n \n@@ -344,21 +356,7 @@ impl HirDisplay for ApplicationTy {\n                         };\n                         write!(f, \"{}\", name)?;\n                     }\n-                    DisplayTarget::SourceCode { module_id } => {\n-                        if let Some(path) = find_path::find_path(\n-                            f.db.upcast(),\n-                            ItemInNs::Types(def_id.into()),\n-                            module_id,\n-                        ) {\n-                            write!(f, \"{}\", path)?;\n-                        } else {\n-                            return Err(HirDisplayError::DisplaySourceCodeError(\n-                                DisplaySourceCodeError::PathNotFound,\n-                            ));\n-                        }\n-                    }\n-                    #[cfg(test)]\n-                    DisplayTarget::Test { module_id } => {\n+                    DisplayTarget::SourceCode { module_id } | DisplayTarget::Test { module_id } => {\n                         if let Some(path) = find_path::find_path(\n                             f.db.upcast(),\n                             ItemInNs::Types(def_id.into()),\n@@ -374,40 +372,38 @@ impl HirDisplay for ApplicationTy {\n                 }\n \n                 if self.parameters.len() > 0 {\n-                    let parameters_to_write = if f.display_target.is_source_code()\n-                        || f.display_target.is_test()\n-                        || f.omit_verbose_types()\n-                    {\n-                        match self\n-                            .ctor\n-                            .as_generic_def()\n-                            .map(|generic_def_id| f.db.generic_defaults(generic_def_id))\n-                            .filter(|defaults| !defaults.is_empty())\n-                        {\n-                            None => self.parameters.0.as_ref(),\n-                            Some(default_parameters) => {\n-                                let mut default_from = 0;\n-                                for (i, parameter) in self.parameters.iter().enumerate() {\n-                                    match (parameter, default_parameters.get(i)) {\n-                                        (&Ty::Unknown, _) | (_, None) => {\n-                                            default_from = i + 1;\n-                                        }\n-                                        (_, Some(default_parameter)) => {\n-                                            let actual_default = default_parameter\n-                                                .clone()\n-                                                .subst(&self.parameters.prefix(i));\n-                                            if parameter != &actual_default {\n+                    let parameters_to_write =\n+                        if f.display_target.is_source_code() || f.omit_verbose_types() {\n+                            match self\n+                                .ctor\n+                                .as_generic_def()\n+                                .map(|generic_def_id| f.db.generic_defaults(generic_def_id))\n+                                .filter(|defaults| !defaults.is_empty())\n+                            {\n+                                None => self.parameters.0.as_ref(),\n+                                Some(default_parameters) => {\n+                                    let mut default_from = 0;\n+                                    for (i, parameter) in self.parameters.iter().enumerate() {\n+                                        match (parameter, default_parameters.get(i)) {\n+                                            (&Ty::Unknown, _) | (_, None) => {\n                                                 default_from = i + 1;\n                                             }\n+                                            (_, Some(default_parameter)) => {\n+                                                let actual_default = default_parameter\n+                                                    .clone()\n+                                                    .subst(&self.parameters.prefix(i));\n+                                                if parameter != &actual_default {\n+                                                    default_from = i + 1;\n+                                                }\n+                                            }\n                                         }\n                                     }\n+                                    &self.parameters.0[0..default_from]\n                                 }\n-                                &self.parameters.0[0..default_from]\n                             }\n-                        }\n-                    } else {\n-                        self.parameters.0.as_ref()\n-                    };\n+                        } else {\n+                            self.parameters.0.as_ref()\n+                        };\n                     if !parameters_to_write.is_empty() {\n                         write!(f, \"<\")?;\n                         f.write_joined(parameters_to_write, \", \")?;"}, {"sha": "510baadf2ed3697d7293c09a1375d36609f87e61", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef2f7bb2438e66fd046791bb67849b6c61d946ab/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2f7bb2438e66fd046791bb67849b6c61d946ab/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=ef2f7bb2438e66fd046791bb67849b6c61d946ab", "patch": "@@ -157,13 +157,14 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n                 (node.value.text_range(), node.value.text().to_string().replace(\"\\n\", \" \"))\n             };\n             let macro_prefix = if node.file_id != file_id.into() { \"!\" } else { \"\" };\n+            let module = db.module_for_file(node.file_id.original_file(&db));\n             format_to!(\n                 buf,\n                 \"{}{:?} '{}': {}\\n\",\n                 macro_prefix,\n                 range,\n                 ellipsize(text, 15),\n-                ty.display(&db)\n+                ty.display_test(&db, module).unwrap()\n             );\n         }\n         if include_mismatches {\n@@ -174,13 +175,14 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n             for (src_ptr, mismatch) in &mismatches {\n                 let range = src_ptr.value.text_range();\n                 let macro_prefix = if src_ptr.file_id != file_id.into() { \"!\" } else { \"\" };\n+                let module = db.module_for_file(src_ptr.file_id.original_file(&db));\n                 format_to!(\n                     buf,\n                     \"{}{:?}: expected {}, got {}\\n\",\n                     macro_prefix,\n                     range,\n-                    mismatch.expected.display(&db),\n-                    mismatch.actual.display(&db),\n+                    mismatch.expected.display_test(&db, module).unwrap(),\n+                    mismatch.actual.display_test(&db, module).unwrap(),\n                 );\n             }\n         }"}, {"sha": "596d4f182602c5299f084b6ebe6400dd70190ec4", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ef2f7bb2438e66fd046791bb67849b6c61d946ab/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2f7bb2438e66fd046791bb67849b6c61d946ab/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=ef2f7bb2438e66fd046791bb67849b6c61d946ab", "patch": "@@ -108,16 +108,16 @@ fn infer_associated_method_with_modules() {\n     check_infer(\n         r#\"\n         mod a {\n-            struct A;\n+            pub struct A;\n             impl A { pub fn thing() -> A { A {} }}\n         }\n \n         mod b {\n-            struct B;\n+            pub struct B;\n             impl B { pub fn thing() -> u32 { 99 }}\n \n-            mod c {\n-                struct C;\n+            pub mod c {\n+                pub struct C;\n                 impl C { pub fn thing() -> C { C {} }}\n             }\n         }\n@@ -130,22 +130,22 @@ fn infer_associated_method_with_modules() {\n         }\n         \"#,\n         expect![[r#\"\n-            55..63 '{ A {} }': A\n-            57..61 'A {}': A\n-            125..131 '{ 99 }': u32\n-            127..129 '99': u32\n-            201..209 '{ C {} }': C\n-            203..207 'C {}': C\n-            240..324 '{     ...g(); }': ()\n-            250..251 'x': A\n-            254..265 'a::A::thing': fn thing() -> A\n-            254..267 'a::A::thing()': A\n-            277..278 'y': u32\n-            281..292 'b::B::thing': fn thing() -> u32\n-            281..294 'b::B::thing()': u32\n-            304..305 'z': C\n-            308..319 'c::C::thing': fn thing() -> C\n-            308..321 'c::C::thing()': C\n+            59..67 '{ A {} }': a::A\n+            61..65 'A {}': a::A\n+            133..139 '{ 99 }': u32\n+            135..137 '99': u32\n+            217..225 '{ C {} }': c::C\n+            219..223 'C {}': c::C\n+            256..340 '{     ...g(); }': ()\n+            266..267 'x': a::A\n+            270..281 'a::A::thing': fn thing() -> A\n+            270..283 'a::A::thing()': a::A\n+            293..294 'y': u32\n+            297..308 'b::B::thing': fn thing() -> u32\n+            297..310 'b::B::thing()': u32\n+            320..321 'z': c::C\n+            324..335 'c::C::thing': fn thing() -> C\n+            324..337 'c::C::thing()': c::C\n         \"#]],\n     );\n }"}, {"sha": "42d08f12c7fc815bbe513231bd9d6d93a300fdbe", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef2f7bb2438e66fd046791bb67849b6c61d946ab/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2f7bb2438e66fd046791bb67849b6c61d946ab/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=ef2f7bb2438e66fd046791bb67849b6c61d946ab", "patch": "@@ -831,11 +831,11 @@ fn issue_4966() {\n             356..362 'repeat': Repeat<Map<|&f64| -> f64>>\n             365..390 'Repeat...nner }': Repeat<Map<|&f64| -> f64>>\n             383..388 'inner': Map<|&f64| -> f64>\n-            401..404 'vec': Vec<<Repeat<Map<|&f64| -> f64>> as IntoIterator>::Item>\n-            407..416 'from_iter': fn from_iter<<Repeat<Map<|&f64| -> f64>> as IntoIterator>::Item, Repeat<Map<|&f64| -> f64>>>(Repeat<Map<|&f64| -> f64>>) -> Vec<<Repeat<Map<|&f64| -> f64>> as IntoIterator>::Item>\n-            407..424 'from_i...epeat)': Vec<<Repeat<Map<|&f64| -> f64>> as IntoIterator>::Item>\n+            401..404 'vec': Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n+            407..416 'from_iter': fn from_iter<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>, Repeat<Map<|&f64| -> f64>>>(Repeat<Map<|&f64| -> f64>>) -> Vec<<Repeat<Map<|&f64| -> f64>> as IntoIterator>::Item>\n+            407..424 'from_i...epeat)': Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n             417..423 'repeat': Repeat<Map<|&f64| -> f64>>\n-            431..434 'vec': Vec<<Repeat<Map<|&f64| -> f64>> as IntoIterator>::Item>\n+            431..434 'vec': Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n             431..444 'vec.foo_bar()': {unknown}\n         \"#]],\n     );"}, {"sha": "4d193dea99b7e5f0dcc9f958ccde64c4d6fe4093", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 8, "deletions": 74, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ef2f7bb2438e66fd046791bb67849b6c61d946ab/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2f7bb2438e66fd046791bb67849b6c61d946ab/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=ef2f7bb2438e66fd046791bb67849b6c61d946ab", "patch": "@@ -1,7 +1,7 @@\n use expect_test::expect;\n use test_utils::mark;\n \n-use super::{check_infer, check_infer_with_mismatches, check_types, check_types_source_code};\n+use super::{check_infer, check_infer_with_mismatches, check_types};\n \n #[test]\n fn infer_await() {\n@@ -384,12 +384,12 @@ fn infer_project_associated_type() {\n             108..261 '{     ...ter; }': ()\n             118..119 'x': u32\n             145..146 '1': u32\n-            156..157 'y': <T as Iterable>::Item\n-            183..192 'no_matter': <T as Iterable>::Item\n-            202..203 'z': <T as Iterable>::Item\n-            215..224 'no_matter': <T as Iterable>::Item\n-            234..235 'a': <T as Iterable>::Item\n-            249..258 'no_matter': <T as Iterable>::Item\n+            156..157 'y': Iterable::Item<T>\n+            183..192 'no_matter': Iterable::Item<T>\n+            202..203 'z': Iterable::Item<T>\n+            215..224 'no_matter': Iterable::Item<T>\n+            234..235 'a': Iterable::Item<T>\n+            249..258 'no_matter': Iterable::Item<T>\n         \"#]],\n     );\n }\n@@ -945,45 +945,6 @@ fn test<T: ApplyL>(t: T) {\n     );\n }\n \n-#[test]\n-fn associated_type_placeholder() {\n-    check_types_source_code(\n-        r#\"\n-pub trait ApplyL {\n-    type Out;\n-}\n-\n-pub struct RefMutL<T>;\n-\n-impl<T> ApplyL for RefMutL<T> {\n-    type Out = <T as ApplyL>::Out;\n-}\n-\n-fn test<T: ApplyL>() {\n-    let y: <RefMutL<T> as ApplyL>::Out = no_matter;\n-    y;\n-} //^ ApplyL::Out<T>\n-\"#,\n-    );\n-}\n-\n-#[test]\n-fn associated_type_placeholder_2() {\n-    check_types_source_code(\n-        r#\"\n-pub trait ApplyL {\n-    type Out;\n-}\n-fn foo<T: ApplyL>(t: T) -> <T as ApplyL>::Out;\n-\n-fn test<T: ApplyL>(t: T) {\n-    let y = foo(t);\n-    y;\n-} //^ ApplyL::Out<T>\n-\"#,\n-    );\n-}\n-\n #[test]\n fn argument_impl_trait() {\n     check_infer_with_mismatches(\n@@ -2158,7 +2119,7 @@ fn unselected_projection_on_impl_self() {\n         \"#,\n         expect![[r#\"\n             40..44 'self': &Self\n-            46..47 'x': <Self as Trait>::Item\n+            46..47 'x': Trait::Item<Self>\n             126..130 'self': &S\n             132..133 'x': u32\n             147..161 '{ let y = x; }': ()\n@@ -3189,30 +3150,3 @@ fn test() {\n     \"#,\n     );\n }\n-\n-#[test]\n-fn infer_call_method_return_associated_types_with_generic() {\n-    check_infer(\n-        r#\"\n-        pub trait Default {\n-            fn default() -> Self;\n-        }\n-        pub trait Foo {\n-            type Bar: Default;\n-        }\n-\n-        pub fn quux<T: Foo>() -> T::Bar {\n-            let y = Default::default();\n-\n-            y\n-        }\n-        \"#,\n-        expect![[r#\"\n-            122..164 '{     ...   y }': <T as Foo>::Bar\n-            132..133 'y': <T as Foo>::Bar\n-            136..152 'Defaul...efault': fn default<<T as Foo>::Bar>() -> <T as Foo>::Bar\n-            136..154 'Defaul...ault()': <T as Foo>::Bar\n-            161..162 'y': <T as Foo>::Bar\n-        \"#]],\n-    );\n-}"}, {"sha": "adb93efd7e1b1140195ae3c4c2b1d978b1cefe2c", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ef2f7bb2438e66fd046791bb67849b6c61d946ab/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2f7bb2438e66fd046791bb67849b6c61d946ab/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=ef2f7bb2438e66fd046791bb67849b6c61d946ab", "patch": "@@ -1235,4 +1235,25 @@ fn main() {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn infer_call_method_return_associated_types_with_generic() {\n+        check(\n+            r#\"\n+            pub trait Default {\n+                fn default() -> Self;\n+            }\n+            pub trait Foo {\n+                type Bar: Default;\n+            }\n+\n+            pub fn quux<T: Foo>() -> T::Bar {\n+                let y = Default::default();\n+                  //^ <T as Foo>::Bar\n+\n+                y\n+            }\n+            \"#,\n+        );\n+    }\n }"}]}