{"sha": "7ec50dfee3f2c2562586a59d80d3d1e9d2d0c0cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYzUwZGZlZTNmMmMyNTYyNTg2YTU5ZDgwZDNkMWU5ZDJkMGMwY2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-27T03:51:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-30T08:11:59Z"}, "message": "also release/validate around non-Misc casts", "tree": {"sha": "a63b51a5f632c467de3b5ee0c781141169d2eb02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a63b51a5f632c467de3b5ee0c781141169d2eb02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ec50dfee3f2c2562586a59d80d3d1e9d2d0c0cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec50dfee3f2c2562586a59d80d3d1e9d2d0c0cd", "html_url": "https://github.com/rust-lang/rust/commit/7ec50dfee3f2c2562586a59d80d3d1e9d2d0c0cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ec50dfee3f2c2562586a59d80d3d1e9d2d0c0cd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b934506e681e00b803ca886122062916b41e0fbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b934506e681e00b803ca886122062916b41e0fbe", "html_url": "https://github.com/rust-lang/rust/commit/b934506e681e00b803ca886122062916b41e0fbe"}], "stats": {"total": 101, "additions": 71, "deletions": 30}, "files": [{"sha": "70ef08cf2d1811b630a6894c82956bbe44689100", "filename": "src/librustc_mir/transform/add_validation.rs", "status": "modified", "additions": 71, "deletions": 30, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/7ec50dfee3f2c2562586a59d80d3d1e9d2d0c0cd/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec50dfee3f2c2562586a59d80d3d1e9d2d0c0cd/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs?ref=7ec50dfee3f2c2562586a59d80d3d1e9d2d0c0cd", "patch": "@@ -171,42 +171,83 @@ impl MirPass for AddValidation {\n         }\n \n         // PART 3\n-        // Add ReleaseValid/AcquireValid around Ref.  Again an iterator does not seem very suited\n+        // Add ReleaseValid/AcquireValid around Ref and Cast.  Again an iterator does not seem very\n+        // suited\n         // as we need to add new statements before and after each Ref.\n         for block_data in mir.basic_blocks_mut() {\n             // We want to insert statements around Ref commands as we iterate.  To this end, we\n             // iterate backwards using indices.\n             for i in (0..block_data.statements.len()).rev() {\n-                let (dest_lval, re, src_lval) = match block_data.statements[i].kind {\n-                    StatementKind::Assign(ref dest_lval, Rvalue::Ref(re, _, ref src_lval)) => {\n-                        (dest_lval.clone(), re, src_lval.clone())\n-                    },\n-                    _ => continue,\n-                };\n-                // So this is a ref, and we got all the data we wanted.\n-                // Do an acquire of the result -- but only what it points to, so add a Deref\n-                // projection.\n-                let dest_lval = Projection { base: dest_lval, elem: ProjectionElem::Deref };\n-                let dest_lval = Lvalue::Projection(Box::new(dest_lval));\n-                let acquire_stmt = Statement {\n-                    source_info: block_data.statements[i].source_info,\n-                    kind: StatementKind::Validate(ValidationOp::Acquire,\n-                            vec![lval_to_operand(dest_lval)]),\n-                };\n-                block_data.statements.insert(i+1, acquire_stmt);\n+                match block_data.statements[i].kind {\n+                    // When the borrow of this ref expires, we need to recover validation.\n+                    StatementKind::Assign(_, Rvalue::Ref(_, _, _)) => {\n+                        // Due to a lack of NLL; we can't capture anything directly here.\n+                        // Instead, we have to re-match and clone there.\n+                        let (dest_lval, re, src_lval) = match block_data.statements[i].kind {\n+                            StatementKind::Assign(ref dest_lval,\n+                                                  Rvalue::Ref(re, _, ref src_lval)) => {\n+                                (dest_lval.clone(), re, src_lval.clone())\n+                            },\n+                            _ => bug!(\"We already matched this.\"),\n+                        };\n+                        // So this is a ref, and we got all the data we wanted.\n+                        // Do an acquire of the result -- but only what it points to, so add a Deref\n+                        // projection.\n+                        let dest_lval = Projection { base: dest_lval, elem: ProjectionElem::Deref };\n+                        let dest_lval = Lvalue::Projection(Box::new(dest_lval));\n+                        let acquire_stmt = Statement {\n+                            source_info: block_data.statements[i].source_info,\n+                            kind: StatementKind::Validate(ValidationOp::Acquire,\n+                                    vec![lval_to_operand(dest_lval)]),\n+                        };\n+                        block_data.statements.insert(i+1, acquire_stmt);\n \n-                // The source is released until the region of the borrow ends.\n-                let op = match re {\n-                    &RegionKind::ReScope(ce) => ValidationOp::Suspend(ce),\n-                    &RegionKind::ReErased =>\n-                        bug!(\"AddValidation pass must be run before erasing lifetimes\"),\n-                    _ => ValidationOp::Release,\n-                };\n-                let release_stmt = Statement {\n-                    source_info: block_data.statements[i].source_info,\n-                    kind: StatementKind::Validate(op, vec![lval_to_operand(src_lval)]),\n-                };\n-                block_data.statements.insert(i, release_stmt);\n+                        // The source is released until the region of the borrow ends.\n+                        let op = match re {\n+                            &RegionKind::ReScope(ce) => ValidationOp::Suspend(ce),\n+                            &RegionKind::ReErased =>\n+                                bug!(\"AddValidation pass must be run before erasing lifetimes\"),\n+                            _ => ValidationOp::Release,\n+                        };\n+                        let release_stmt = Statement {\n+                            source_info: block_data.statements[i].source_info,\n+                            kind: StatementKind::Validate(op, vec![lval_to_operand(src_lval)]),\n+                        };\n+                        block_data.statements.insert(i, release_stmt);\n+                    }\n+                    // Casts can change what validation does (e.g. unsizing)\n+                    StatementKind::Assign(_, Rvalue::Cast(kind, Operand::Consume(_), _))\n+                        if kind != CastKind::Misc =>\n+                    {\n+                        // Due to a lack of NLL; we can't capture anything directly here.\n+                        // Instead, we have to re-match and clone there.\n+                        let (dest_lval, src_lval) = match block_data.statements[i].kind {\n+                            StatementKind::Assign(ref dest_lval,\n+                                    Rvalue::Cast(_, Operand::Consume(ref src_lval), _)) =>\n+                            {\n+                                (dest_lval.clone(), src_lval.clone())\n+                            },\n+                            _ => bug!(\"We already matched this.\"),\n+                        };\n+\n+                        // Acquire of the result\n+                        let acquire_stmt = Statement {\n+                            source_info: block_data.statements[i].source_info,\n+                            kind: StatementKind::Validate(ValidationOp::Acquire,\n+                                    vec![lval_to_operand(dest_lval)]),\n+                        };\n+                        block_data.statements.insert(i+1, acquire_stmt);\n+\n+                        // Release of the input\n+                        let release_stmt = Statement {\n+                            source_info: block_data.statements[i].source_info,\n+                            kind: StatementKind::Validate(ValidationOp::Release,\n+                                                            vec![lval_to_operand(src_lval)]),\n+                        };\n+                        block_data.statements.insert(i, release_stmt);\n+                    }\n+                    _ => {},\n+                }\n             }\n         }\n     }"}]}