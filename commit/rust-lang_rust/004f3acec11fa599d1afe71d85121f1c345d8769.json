{"sha": "004f3acec11fa599d1afe71d85121f1c345d8769", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNGYzYWNlYzExZmE1OTlkMWFmZTcxZDg1MTIxZjFjMzQ1ZDg3Njk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-14T12:35:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-14T12:35:12Z"}, "message": "convert \\r\\n to \\n when loading files", "tree": {"sha": "f1f89111d2a5aa04612d9a5eb3256144807aa018", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1f89111d2a5aa04612d9a5eb3256144807aa018"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/004f3acec11fa599d1afe71d85121f1c345d8769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/004f3acec11fa599d1afe71d85121f1c345d8769", "html_url": "https://github.com/rust-lang/rust/commit/004f3acec11fa599d1afe71d85121f1c345d8769", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/004f3acec11fa599d1afe71d85121f1c345d8769/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60960a260f7b5c695fd0717311d72ce62dd4eb43", "url": "https://api.github.com/repos/rust-lang/rust/commits/60960a260f7b5c695fd0717311d72ce62dd4eb43", "html_url": "https://github.com/rust-lang/rust/commit/60960a260f7b5c695fd0717311d72ce62dd4eb43"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "57a16bef86eee4989943f8ebc92bc0698523d62c", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/004f3acec11fa599d1afe71d85121f1c345d8769/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004f3acec11fa599d1afe71d85121f1c345d8769/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=004f3acec11fa599d1afe71d85121f1c345d8769", "patch": "@@ -1045,6 +1045,7 @@ impl SourceFile {\n                mut src: String,\n                start_pos: BytePos) -> Result<SourceFile, OffsetOverflowError> {\n         remove_bom(&mut src);\n+        normalize_newlines(&mut src);\n \n         let src_hash = {\n             let mut hasher: StableHasher<u128> = StableHasher::new();\n@@ -1212,6 +1213,61 @@ fn remove_bom(src: &mut String) {\n     }\n }\n \n+\n+/// Replaces `\\r\\n` with `\\n` in-place in `src`.\n+///\n+/// Returns error if there's a lone `\\r` in the string\n+fn normalize_newlines(src: &mut String) {\n+    if !src.as_bytes().contains(&b'\\r') {\n+        return;\n+    }\n+\n+    // We replace `\\r\\n` with `\\n` in-place, which doesn't break utf-8 encoding.\n+    // While we *can* call `as_mut_vec` and do surgery on the live string\n+    // directly, let's rather steal the contents of `src`. This makes the code\n+    // safe even if a panic occurs.\n+\n+    let mut buf = std::mem::replace(src, String::new()).into_bytes();\n+    let mut gap_len = 0;\n+    let mut tail = buf.as_mut_slice();\n+    loop {\n+        let idx = match find_crlf(&tail[gap_len..]) {\n+            None => tail.len(),\n+            Some(idx) => idx + gap_len,\n+        };\n+        tail.copy_within(gap_len..idx, 0);\n+        tail = &mut tail[idx - gap_len..];\n+        if tail.len() == gap_len {\n+            break;\n+        }\n+        gap_len += 1;\n+    }\n+\n+    // Account for removed `\\r`.\n+    // After `set_len`, `buf` is guaranteed to contain utf-8 again.\n+    let new_len = buf.len() - gap_len;\n+    unsafe {\n+        buf.set_len(new_len);\n+        *src = String::from_utf8_unchecked(buf);\n+    }\n+\n+    fn find_crlf(src: &[u8]) -> Option<usize> {\n+        let mut search_idx = 0;\n+        while let Some(idx) = find_cr(&src[search_idx..]) {\n+            if src[search_idx..].get(idx + 1) != Some(&b'\\n') {\n+                search_idx += idx + 1;\n+                continue;\n+            }\n+            return Some(search_idx + idx);\n+        }\n+        None\n+    }\n+\n+    fn find_cr(src: &[u8]) -> Option<usize> {\n+        src.iter().position(|&b| b == b'\\r')\n+    }\n+}\n+\n // _____________________________________________________________________________\n // Pos, BytePos, CharPos\n //"}, {"sha": "6bd6016020a27a94ed6d9f75e7022b961389abc9", "filename": "src/libsyntax_pos/tests.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/004f3acec11fa599d1afe71d85121f1c345d8769/src%2Flibsyntax_pos%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004f3acec11fa599d1afe71d85121f1c345d8769/src%2Flibsyntax_pos%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Ftests.rs?ref=004f3acec11fa599d1afe71d85121f1c345d8769", "patch": "@@ -16,3 +16,23 @@ fn test_lookup_line() {\n     assert_eq!(lookup_line(lines, BytePos(28)), 2);\n     assert_eq!(lookup_line(lines, BytePos(29)), 2);\n }\n+\n+#[test]\n+fn test_normalize_newlines() {\n+    fn check(before: &str, after: &str) {\n+        let mut actual = before.to_string();\n+        normalize_newlines(&mut actual);\n+        assert_eq!(actual.as_str(), after);\n+    }\n+    check(\"\", \"\");\n+    check(\"\\n\", \"\\n\");\n+    check(\"\\r\", \"\\r\");\n+    check(\"\\r\\r\", \"\\r\\r\");\n+    check(\"\\r\\n\", \"\\n\");\n+    check(\"hello world\", \"hello world\");\n+    check(\"hello\\nworld\", \"hello\\nworld\");\n+    check(\"hello\\r\\nworld\", \"hello\\nworld\");\n+    check(\"\\r\\nhello\\r\\nworld\\r\\n\", \"\\nhello\\nworld\\n\");\n+    check(\"\\r\\r\\n\", \"\\r\\n\");\n+    check(\"hello\\rworld\", \"hello\\rworld\");\n+}"}]}