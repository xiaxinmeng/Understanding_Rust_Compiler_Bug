{"sha": "c20ad72323a17bd020f2fea7b8decf93e067c161", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMGFkNzIzMjNhMTdiZDAyMGYyZmVhN2I4ZGVjZjkzZTA2N2MxNjE=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2020-08-04T06:18:34Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2020-08-24T20:20:25Z"}, "message": "Stabilize Range[Inclusive]::is_empty\n\nI would like to propose these two simple methods for stabilization:\n- Knowing that a range is exhaused isn't otherwise trivial\n- Clippy would like to suggest them, but had to do extra work to disable that path <https://github.com/rust-lang/rust-clippy/issues/3807> because they're unstable\n- These work on `PartialOrd`, consistently with now-stable `contains`, and are thus more general than iterator-based approaches that need `Step`\n- They've been unchanged for some time, and have picked up uses in the compiler\n- Stabilizing them doesn't block any future iterator-based is_empty plans, as the inherent ones are preferred in name resolution", "tree": {"sha": "e992681676988b2a615bf44c5bf416a8e74b858d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e992681676988b2a615bf44c5bf416a8e74b858d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c20ad72323a17bd020f2fea7b8decf93e067c161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c20ad72323a17bd020f2fea7b8decf93e067c161", "html_url": "https://github.com/rust-lang/rust/commit/c20ad72323a17bd020f2fea7b8decf93e067c161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c20ad72323a17bd020f2fea7b8decf93e067c161/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6d85ea5cbdc376ae388e1079769b67b9eda911c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d85ea5cbdc376ae388e1079769b67b9eda911c", "html_url": "https://github.com/rust-lang/rust/commit/e6d85ea5cbdc376ae388e1079769b67b9eda911c"}], "stats": {"total": 19, "additions": 2, "deletions": 17}, "files": [{"sha": "d10829832dd169f3779b74528b5be99fcee3fb32", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c20ad72323a17bd020f2fea7b8decf93e067c161/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20ad72323a17bd020f2fea7b8decf93e067c161/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=c20ad72323a17bd020f2fea7b8decf93e067c161", "patch": "@@ -125,8 +125,6 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_is_empty)]\n-    ///\n     /// assert!(!(3..5).is_empty());\n     /// assert!( (3..3).is_empty());\n     /// assert!( (3..2).is_empty());\n@@ -135,13 +133,11 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// The range is empty if either side is incomparable:\n     ///\n     /// ```\n-    /// #![feature(range_is_empty)]\n-    ///\n     /// assert!(!(3.0..5.0).is_empty());\n     /// assert!( (3.0..f32::NAN).is_empty());\n     /// assert!( (f32::NAN..5.0).is_empty());\n     /// ```\n-    #[unstable(feature = \"range_is_empty\", reason = \"recently added\", issue = \"48111\")]\n+    #[stable(feature = \"range_is_empty\", since = \"1.47.0\")]\n     pub fn is_empty(&self) -> bool {\n         !(self.start < self.end)\n     }\n@@ -481,8 +477,6 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_is_empty)]\n-    ///\n     /// assert!(!(3..=5).is_empty());\n     /// assert!(!(3..=3).is_empty());\n     /// assert!( (3..=2).is_empty());\n@@ -491,8 +485,6 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// The range is empty if either side is incomparable:\n     ///\n     /// ```\n-    /// #![feature(range_is_empty)]\n-    ///\n     /// assert!(!(3.0..=5.0).is_empty());\n     /// assert!( (3.0..=f32::NAN).is_empty());\n     /// assert!( (f32::NAN..=5.0).is_empty());\n@@ -501,14 +493,12 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// This method returns `true` after iteration has finished:\n     ///\n     /// ```\n-    /// #![feature(range_is_empty)]\n-    ///\n     /// let mut r = 3..=5;\n     /// for _ in r.by_ref() {}\n     /// // Precise field values are unspecified here\n     /// assert!(r.is_empty());\n     /// ```\n-    #[unstable(feature = \"range_is_empty\", reason = \"recently added\", issue = \"48111\")]\n+    #[stable(feature = \"range_is_empty\", since = \"1.47.0\")]\n     #[inline]\n     pub fn is_empty(&self) -> bool {\n         self.exhausted || !(self.start <= self.end)"}, {"sha": "81e621318e14184b3903e7ea6011338ae4a2a4e9", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c20ad72323a17bd020f2fea7b8decf93e067c161/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20ad72323a17bd020f2fea7b8decf93e067c161/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=c20ad72323a17bd020f2fea7b8decf93e067c161", "patch": "@@ -17,7 +17,6 @@\n #![feature(try_find)]\n #![feature(is_sorted)]\n #![feature(pattern)]\n-#![feature(range_is_empty)]\n #![feature(raw)]\n #![feature(sort_internals)]\n #![feature(slice_partition_at_index)]"}, {"sha": "e05041d88460e3cf40fbd010f42f295fd8a12ec6", "filename": "src/librustc_infer/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c20ad72323a17bd020f2fea7b8decf93e067c161/src%2Flibrustc_infer%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20ad72323a17bd020f2fea7b8decf93e067c161/src%2Flibrustc_infer%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Flib.rs?ref=c20ad72323a17bd020f2fea7b8decf93e067c161", "patch": "@@ -22,7 +22,6 @@\n #![feature(extend_one)]\n #![feature(never_type)]\n #![feature(or_patterns)]\n-#![feature(range_is_empty)]\n #![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]\n #![recursion_limit = \"512\"] // For rustdoc"}, {"sha": "1b2dea8a378c33df1bfb1017ce063ba54ee441e3", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c20ad72323a17bd020f2fea7b8decf93e067c161/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20ad72323a17bd020f2fea7b8decf93e067c161/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=c20ad72323a17bd020f2fea7b8decf93e067c161", "patch": "@@ -40,7 +40,6 @@\n #![feature(nll)]\n #![feature(option_expect_none)]\n #![feature(or_patterns)]\n-#![feature(range_is_empty)]\n #![feature(min_specialization)]\n #![feature(trusted_len)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "2e3b508463540ca5472f407c14abe41394705572", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c20ad72323a17bd020f2fea7b8decf93e067c161/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20ad72323a17bd020f2fea7b8decf93e067c161/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=c20ad72323a17bd020f2fea7b8decf93e067c161", "patch": "@@ -22,7 +22,6 @@ Rust MIR: a lowered representation of Rust.\n #![feature(try_blocks)]\n #![feature(associated_type_bounds)]\n #![feature(associated_type_defaults)]\n-#![feature(range_is_empty)]\n #![feature(stmt_expr_attributes)]\n #![feature(trait_alias)]\n #![feature(option_expect_none)]"}, {"sha": "7e7a15924b7653128c9c5a2db10d6d7e28fd88f9", "filename": "src/test/ui/range_inclusive.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c20ad72323a17bd020f2fea7b8decf93e067c161/src%2Ftest%2Fui%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20ad72323a17bd020f2fea7b8decf93e067c161/src%2Ftest%2Fui%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange_inclusive.rs?ref=c20ad72323a17bd020f2fea7b8decf93e067c161", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // Test inclusive range syntax.\n-#![feature(range_is_empty)]\n #![allow(unused_braces)]\n #![allow(unused_comparisons)]\n "}]}