{"sha": "efc5714e59608b6f9f50481aca41a3ffa6160ea4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYzU3MTRlNTk2MDhiNmY5ZjUwNDgxYWNhNDFhM2ZmYTYxNjBlYTQ=", "commit": {"author": {"name": "marcusdunn", "email": "marcus.s.dunn@gmail.com", "date": "2021-05-18T04:14:06Z"}, "committer": {"name": "marcusdunn", "email": "marcus.s.dunn@gmail.com", "date": "2021-06-04T16:42:50Z"}, "message": "updated line #'s on ui tests and removed feature flag test", "tree": {"sha": "ae41bb8b16a2200dcef6bcfc47ba2120e8b18e35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae41bb8b16a2200dcef6bcfc47ba2120e8b18e35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efc5714e59608b6f9f50481aca41a3ffa6160ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efc5714e59608b6f9f50481aca41a3ffa6160ea4", "html_url": "https://github.com/rust-lang/rust/commit/efc5714e59608b6f9f50481aca41a3ffa6160ea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efc5714e59608b6f9f50481aca41a3ffa6160ea4/comments", "author": {"login": "MarcusDunn", "id": 51931484, "node_id": "MDQ6VXNlcjUxOTMxNDg0", "avatar_url": "https://avatars.githubusercontent.com/u/51931484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarcusDunn", "html_url": "https://github.com/MarcusDunn", "followers_url": "https://api.github.com/users/MarcusDunn/followers", "following_url": "https://api.github.com/users/MarcusDunn/following{/other_user}", "gists_url": "https://api.github.com/users/MarcusDunn/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarcusDunn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarcusDunn/subscriptions", "organizations_url": "https://api.github.com/users/MarcusDunn/orgs", "repos_url": "https://api.github.com/users/MarcusDunn/repos", "events_url": "https://api.github.com/users/MarcusDunn/events{/privacy}", "received_events_url": "https://api.github.com/users/MarcusDunn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MarcusDunn", "id": 51931484, "node_id": "MDQ6VXNlcjUxOTMxNDg0", "avatar_url": "https://avatars.githubusercontent.com/u/51931484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarcusDunn", "html_url": "https://github.com/MarcusDunn", "followers_url": "https://api.github.com/users/MarcusDunn/followers", "following_url": "https://api.github.com/users/MarcusDunn/following{/other_user}", "gists_url": "https://api.github.com/users/MarcusDunn/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarcusDunn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarcusDunn/subscriptions", "organizations_url": "https://api.github.com/users/MarcusDunn/orgs", "repos_url": "https://api.github.com/users/MarcusDunn/repos", "events_url": "https://api.github.com/users/MarcusDunn/events{/privacy}", "received_events_url": "https://api.github.com/users/MarcusDunn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43d8854b560d4ad6750c2057e922f20b47221b8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/43d8854b560d4ad6750c2057e922f20b47221b8b", "html_url": "https://github.com/rust-lang/rust/commit/43d8854b560d4ad6750c2057e922f20b47221b8b"}], "stats": {"total": 453, "additions": 219, "deletions": 234}, "files": [{"sha": "d4f81930843bfa5f52786449030dc0bc6fc2e393", "filename": "src/test/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,5 +1,5 @@\n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:37:9\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:36:9\n    |\n LL |         ref foo @ [.., ref mut bar] => (),\n    |         -------^^^^^^^^-----------^\n@@ -8,7 +8,7 @@ LL |         ref foo @ [.., ref mut bar] => (),\n    |         immutable borrow, by `foo`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:121:9\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:120:9\n    |\n LL |         ref foo @ Some(box ref mut s) => (),\n    |         -------^^^^^^^^^^^^---------^\n@@ -17,7 +17,7 @@ LL |         ref foo @ Some(box ref mut s) => (),\n    |         immutable borrow, by `foo`, occurs here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:19:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:18:5\n    |\n LL | fn bindings_after_at_slice_patterns_move_binding(x: [String; 4]) {\n    |                                                  - move occurs because `x` has type `[String; 4]`, which does not implement the `Copy` trait\n@@ -29,7 +29,7 @@ LL |     &x;\n    |     ^^ value borrowed here after move\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:29:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:28:5\n    |\n LL |         ref mut foo @ [.., _] => Some(foo),\n    |         --------------------- mutable borrow occurs here\n@@ -41,7 +41,7 @@ LL |     drop(r);\n    |          - mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:51:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:50:5\n    |\n LL |         [ref foo @ .., ref bar] => Some(foo),\n    |          ------------ immutable borrow occurs here\n@@ -53,7 +53,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:63:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:62:5\n    |\n LL |         ref foo @ [.., ref bar] => Some(foo),\n    |         ----------------------- immutable borrow occurs here\n@@ -65,7 +65,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:77:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:76:5\n    |\n LL | fn bindings_after_at_or_patterns_move(x: Option<Test>) {\n    |                                       - move occurs because `x` has type `Option<Test>`, which does not implement the `Copy` trait\n@@ -80,7 +80,7 @@ LL |     &x;\n    |     ^^ value borrowed here after move\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:87:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:86:5\n    |\n LL |         ref foo @ Some(Test::Foo | Test::Bar) => Some(foo),\n    |         ------------------------------------- immutable borrow occurs here\n@@ -92,7 +92,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:99:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:98:5\n    |\n LL |         ref mut foo @ Some(Test::Foo | Test::Bar) => Some(foo),\n    |         ----------------------------------------- mutable borrow occurs here\n@@ -104,7 +104,7 @@ LL |     drop(r);\n    |          - mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:113:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:112:5\n    |\n LL |         ref foo @ Some(box ref s) => Some(foo),\n    |         ------------------------- immutable borrow occurs here\n@@ -116,7 +116,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:135:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:134:5\n    |\n LL | fn bindings_after_at_slice_patterns_or_patterns_moves(x: [Option<Test>; 4]) {\n    |                                                       - move occurs because `x` has type `[Option<Test>; 4]`, which does not implement the `Copy` trait\n@@ -131,7 +131,7 @@ LL |     &x;\n    |     ^^ value borrowed here after move\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:145:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:144:5\n    |\n LL |         ref a @ [ref b @ .., Some(Test::Foo | Test::Bar)] => Some(a),\n    |         ------------------------------------------------- immutable borrow occurs here\n@@ -143,7 +143,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:157:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:156:5\n    |\n LL |         ref a @ [ref b @ .., Some(Test::Foo | Test::Bar)] => Some(b),\n    |                  ---------- immutable borrow occurs here\n@@ -155,7 +155,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:171:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:170:5\n    |\n LL |         [_, ref a @ Some(box ref b), ..] => Some(a),\n    |             ----------------------- immutable borrow occurs here\n@@ -167,7 +167,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:187:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:186:5\n    |\n LL |         [_, ref a @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n    |             ------------------------------------------- immutable borrow occurs here\n@@ -179,7 +179,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:201:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:200:5\n    |\n LL |         [_, ref mut a @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n    |             ----------------------------------------------- mutable borrow occurs here\n@@ -191,7 +191,7 @@ LL |     drop(r);\n    |          - mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:215:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:214:5\n    |\n LL |         ref a @ [_, ref b @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n    |         ------------------------------------------------------------ immutable borrow occurs here"}, {"sha": "6ff0dadf0d1f3da7e78b9caaf48996d2e457fe80", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,5 +1,5 @@\n error: cannot move out of value because it is borrowed\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:14:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:12:14\n    |\n LL |         Some(ref _y @ _z) => {}\n    |              ------^^^--\n@@ -8,7 +8,7 @@ LL |         Some(ref _y @ _z) => {}\n    |              value borrowed, by `_y`, here\n \n error: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:21:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:19:14\n    |\n LL |         Some(_z @ ref _y) => {}\n    |              --^^^------\n@@ -18,7 +18,7 @@ LL |         Some(_z @ ref _y) => {}\n    |              move occurs because `_z` has type `X` which does not implement the `Copy` trait\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:28:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:26:14\n    |\n LL |         Some(ref mut _y @ _z) => {}\n    |              ----------^^^--\n@@ -27,7 +27,7 @@ LL |         Some(ref mut _y @ _z) => {}\n    |              value borrowed, by `_y`, here\n \n error: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:35:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:33:14\n    |\n LL |         Some(_z @ ref mut _y) => {}\n    |              --^^^----------\n@@ -37,7 +37,7 @@ LL |         Some(_z @ ref mut _y) => {}\n    |              move occurs because `_z` has type `X` which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:14:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:12:14\n    |\n LL |         Some(ref _y @ _z) => {}\n    |              ^^^^^^^^^--\n@@ -52,7 +52,7 @@ LL |         Some(ref _y @ ref _z) => {}\n    |                       ^^^\n \n error[E0382]: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:28:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:26:14\n    |\n LL |         Some(ref mut _y @ _z) => {}\n    |              ^^^^^^^^^^^^^--"}, {"sha": "ee0885a014aa44c15ccdbb2d2f20d4e1b2584a55", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-no-subbindings-fun-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of partially moved value\n-  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:9:6\n+  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:7:6\n    |\n LL | fn f(a @ A(u): A) -> Box<u8> {\n    |      ^^^^^^-^"}, {"sha": "8e00bf5c328be6fcac7781d88d090c0447ceec45", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:13:9\n+  --> $DIR/borrowck-move-and-move.rs:11:9\n    |\n LL |     let a @ b = U;\n    |         ^^^^-   - move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -8,7 +8,7 @@ LL |     let a @ b = U;\n    |         value used here after move\n \n error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-move-and-move.rs:15:9\n+  --> $DIR/borrowck-move-and-move.rs:13:9\n    |\n LL |     let a @ (b, c) = (U, U);\n    |         ^^^^^^^^-^\n@@ -19,7 +19,7 @@ LL |     let a @ (b, c) = (U, U);\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-move-and-move.rs:17:9\n+  --> $DIR/borrowck-move-and-move.rs:15:9\n    |\n LL |     let a @ (b, c) = (u(), u());\n    |         ^^^^^^^^-^\n@@ -30,7 +30,7 @@ LL |     let a @ (b, c) = (u(), u());\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:20:16\n+  --> $DIR/borrowck-move-and-move.rs:18:16\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `Result<U, U>`, which does not implement the `Copy` trait\n@@ -41,7 +41,7 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:20:29\n+  --> $DIR/borrowck-move-and-move.rs:18:29\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `Result<U, U>`, which does not implement the `Copy` trait\n@@ -52,7 +52,7 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     value moved here\n \n error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-move-and-move.rs:27:9\n+  --> $DIR/borrowck-move-and-move.rs:25:9\n    |\n LL |         xs @ [a, .., b] => {}\n    |         ^^^^^^^^^^^^^-^\n@@ -63,7 +63,7 @@ LL |         xs @ [a, .., b] => {}\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-move-and-move.rs:31:9\n+  --> $DIR/borrowck-move-and-move.rs:29:9\n    |\n LL |         xs @ [_, ys @ .., _] => {}\n    |         ^^^^^^^^^-------^^^^\n@@ -74,7 +74,7 @@ LL |         xs @ [_, ys @ .., _] => {}\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:24:12\n+  --> $DIR/borrowck-move-and-move.rs:22:12\n    |\n LL |     fn fun(a @ b: U) {}\n    |            ^^^^-"}, {"sha": "4b2048855ebb42ea383307b3044892872c6e85d0", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,5 +1,5 @@\n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-at-and-box.rs:32:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:31:9\n    |\n LL |     let ref a @ box b = Box::new(NC);\n    |         -----^^^^^^^-\n@@ -8,7 +8,7 @@ LL |     let ref a @ box b = Box::new(NC);\n    |         value borrowed, by `a`, here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:35:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:34:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         -----^^^^^^^---------\n@@ -17,7 +17,7 @@ LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:37:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:36:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -26,7 +26,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:39:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:38:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -35,7 +35,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:43:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:42:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -44,7 +44,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:49:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:48:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ---------^^^^^^^-----\n@@ -53,7 +53,7 @@ LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:63:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:62:9\n    |\n LL |         ref mut a @ box ref b => {\n    |         ---------^^^^^^^-----\n@@ -62,7 +62,7 @@ LL |         ref mut a @ box ref b => {\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:55:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:54:11\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ---------^^^^^^^-----\n@@ -71,7 +71,7 @@ LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           mutable borrow, by `a`, occurs here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:32:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:31:9\n    |\n LL |     let ref a @ box b = Box::new(NC);\n    |         ^^^^^^^^^^^^-\n@@ -82,7 +82,7 @@ LL |     let ref a @ box b = Box::new(NC);\n    = note: move occurs because value has type `NC`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:39:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:38:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         ^^^^^^^^^^^^---------\n@@ -94,7 +94,7 @@ LL |     *b = NC;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:43:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:42:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         ^^^^^^^^^^^^---------\n@@ -106,7 +106,7 @@ LL |     *b = NC;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:49:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:48:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ^^^^^^^^^^^^^^^^-----\n@@ -118,7 +118,7 @@ LL |     drop(b);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:63:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:62:9\n    |\n LL |         ref mut a @ box ref b => {\n    |         ^^^^^^^^^^^^^^^^-----\n@@ -130,7 +130,7 @@ LL |             drop(b);\n    |                  - immutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:55:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:54:11\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ^^^^^^^^^^^^^^^^-----"}, {"sha": "be4e81c61aa626fb19ff70255e95c0251ceb9d61", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse-promotion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,5 +1,5 @@\n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse-promotion.rs:8:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse-promotion.rs:6:9\n    |\n LL |     let a @ ref b = U;\n    |         -^^^-----"}, {"sha": "bc2c1625fd0ef7275da5b1526ff92d4da7d45b9c", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,5 +1,5 @@\n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:22:9\n    |\n LL |     let a @ ref b = U;\n    |         -^^^-----\n@@ -9,7 +9,7 @@ LL |     let a @ ref b = U;\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:26:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         -^^^^^^^^^^^^---------^^^^^^-----^\n@@ -20,7 +20,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:26:14\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:14\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |              -----^^^---------\n@@ -30,7 +30,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |              move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:26:33\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:33\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |                                 -^^^-----\n@@ -40,7 +40,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:29:9\n    |\n LL |     let a @ [ref mut b, ref c] = [U, U];\n    |         -^^^^---------^^-----^\n@@ -51,7 +51,7 @@ LL |     let a @ [ref mut b, ref c] = [U, U];\n    |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:9\n    |\n LL |     let a @ ref b = u();\n    |         -^^^-----\n@@ -61,7 +61,7 @@ LL |     let a @ ref b = u();\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:35:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         -^^^^^^^^^^^^---------^^^^^^-----^\n@@ -72,7 +72,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:35:14\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:14\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |              -----^^^---------\n@@ -82,7 +82,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |              move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:35:33\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:33\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |                                 -^^^-----\n@@ -92,7 +92,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:40:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:38:9\n    |\n LL |     let a @ [ref mut b, ref c] = [u(), u()];\n    |         -^^^^---------^^-----^\n@@ -103,7 +103,7 @@ LL |     let a @ [ref mut b, ref c] = [u(), u()];\n    |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:42:9\n    |\n LL |         a @ Some(ref b) => {}\n    |         -^^^^^^^^-----^\n@@ -113,7 +113,7 @@ LL |         a @ Some(ref b) => {}\n    |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:49:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:9\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^\n@@ -124,7 +124,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:49:19\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:19\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   -----^^^---------\n@@ -134,7 +134,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:49:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:38\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      -^^^-----\n@@ -144,7 +144,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:57:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:55:9\n    |\n LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         -----^^^^^^^^^-----^^---------^^\n@@ -155,7 +155,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:63:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:9\n    |\n LL |         a @ Some(ref b) => {}\n    |         -^^^^^^^^-----^\n@@ -165,7 +165,7 @@ LL |         a @ Some(ref b) => {}\n    |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:9\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^\n@@ -176,7 +176,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:19\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:19\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   -----^^^---------\n@@ -186,7 +186,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:38\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      -^^^-----\n@@ -196,7 +196,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:77:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:75:9\n    |\n LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         -----^^^^^^^^^-----^^---------^^\n@@ -207,7 +207,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:13:11\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:11:11\n    |\n LL |     fn f1(a @ ref b: U) {}\n    |           -^^^-----\n@@ -217,7 +217,7 @@ LL |     fn f1(a @ ref b: U) {}\n    |           move occurs because `a` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:16:11\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           -----^^^^^^^^-----^^^^^^^^^^-----^\n@@ -228,7 +228,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:16:20\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:20\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                    -^^^-----\n@@ -238,7 +238,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                    move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:16:31\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:31\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                               -----^^^-----\n@@ -248,7 +248,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                               move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:21:11\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:19:11\n    |\n LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n    |           -^^^^---------^^-----^\n@@ -259,7 +259,7 @@ LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n    |           move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:26:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^---------^\n@@ -270,7 +270,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:35:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^---------^\n@@ -281,7 +281,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:49:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:38\n    |\n LL |     match Some((U, U)) {\n    |           ------------ move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n@@ -292,7 +292,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:57:30\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:55:30\n    |\n LL |     match Some([U, U]) {\n    |           ------------ move occurs because value has type `Option<[U; 2]>`, which does not implement the `Copy` trait\n@@ -303,7 +303,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:63:18\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:18\n    |\n LL |     match Some(u()) {\n    |           --------- move occurs because value has type `Option<U>`, which does not implement the `Copy` trait\n@@ -314,7 +314,7 @@ LL |         a @ Some(ref b) => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:38\n    |\n LL |     match Some((u(), u())) {\n    |           ---------------- move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n@@ -325,7 +325,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:77:30\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:75:30\n    |\n LL |     match Some([u(), u()]) {\n    |           ---------------- move occurs because value has type `Option<[U; 2]>`, which does not implement the `Copy` trait\n@@ -336,7 +336,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         value moved here\n \n error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:16:11\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           ^^^^^^^^^^^^^^^^^^^^-------------^"}, {"sha": "e6a1e5ef07ce41bc96b7d9c18d5dd4d637869e17", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,5 +1,5 @@\n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:26:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:24:9\n    |\n LL |     let ref a @ b = U;\n    |         -----^^^-\n@@ -8,7 +8,7 @@ LL |     let ref a @ b = U;\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:28:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:26:9\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n@@ -18,7 +18,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:28:18\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:26:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                  -----^^^-----\n@@ -27,7 +27,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                  value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:28:33\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:26:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                                 -----^^^-\n@@ -36,7 +36,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                                 value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:32:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:30:9\n    |\n LL |     let ref mut a @ [b, mut c] = [U, U];\n    |         ---------^^^^-^^-----^\n@@ -46,7 +46,7 @@ LL |     let ref mut a @ [b, mut c] = [U, U];\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:35:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:33:9\n    |\n LL |     let ref a @ b = u();\n    |         -----^^^-\n@@ -55,7 +55,7 @@ LL |     let ref a @ b = u();\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:38:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:36:9\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n@@ -65,7 +65,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:38:18\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:36:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                  -----^^^-----\n@@ -74,7 +74,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                  value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:38:33\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:36:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                                 -----^^^-\n@@ -83,7 +83,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                                 value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:44:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:42:9\n    |\n LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    |         ---------^^^^-^^-----^\n@@ -93,7 +93,7 @@ LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:49:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:47:9\n    |\n LL |         ref a @ Some(b) => {}\n    |         -----^^^^^^^^-^\n@@ -102,7 +102,7 @@ LL |         ref a @ Some(b) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:54:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:52:9\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n@@ -112,7 +112,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:54:23\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:52:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       -----^^^-----\n@@ -121,7 +121,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:54:38\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:52:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      -----^^^-\n@@ -130,7 +130,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:61:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:59:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n    |         ---------^^^^^^^^^-^^-----^^\n@@ -140,7 +140,7 @@ LL |         ref mut a @ Some([b, mut c]) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:66:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:64:9\n    |\n LL |         ref a @ Some(b) => {}\n    |         -----^^^^^^^^-^\n@@ -149,7 +149,7 @@ LL |         ref a @ Some(b) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:69:9\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n@@ -159,7 +159,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:23\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:69:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       -----^^^-----\n@@ -168,7 +168,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:38\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:69:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      -----^^^-\n@@ -177,7 +177,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:80:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:78:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n    |         ---------^^^^^^^^^-^^-----^^\n@@ -187,7 +187,7 @@ LL |         ref mut a @ Some([b, mut c]) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:13:11\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:11:11\n    |\n LL |     fn f1(ref a @ b: U) {}\n    |           -----^^^-\n@@ -196,7 +196,7 @@ LL |     fn f1(ref a @ b: U) {}\n    |           value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:11\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:11\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |           -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n@@ -206,7 +206,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |           value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:20\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:20\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                    -----^^^-----\n@@ -215,7 +215,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                    value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:35\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:35\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                                   -----^^^-\n@@ -224,7 +224,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                                   value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:22:11\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n    |\n LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n    |           ---------^^^^-^^-----^\n@@ -234,7 +234,7 @@ LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n    |           value borrowed, by `a`, here\n \n error[E0382]: borrow of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:32:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:30:9\n    |\n LL |     let ref mut a @ [b, mut c] = [U, U];\n    |         ^^^^^^^^^^^^^^^^-----^\n@@ -245,7 +245,7 @@ LL |     let ref mut a @ [b, mut c] = [U, U];\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:35:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:33:9\n    |\n LL |     let ref a @ b = u();\n    |         ^^^^^^^^-   --- move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -254,7 +254,7 @@ LL |     let ref a @ b = u();\n    |         value borrowed here after move\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:38:18\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:36:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                  ^^^^^^^^-----\n@@ -265,7 +265,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:38:33\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:36:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                                 ^^^^^^^^-\n@@ -276,7 +276,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:44:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:42:9\n    |\n LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    |         ^^^^^^^^^^^^^^^^-----^\n@@ -287,7 +287,7 @@ LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:23\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:69:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       ^^^^^^^^-----\n@@ -302,7 +302,7 @@ LL |         ref a @ Some((ref b @ ref mut c, ref d @ e)) => {}\n    |                               ^^^\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:38\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:69:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      ^^^^^^^^-\n@@ -317,7 +317,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ ref e)) => {}\n    |                                              ^^^\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:13:11\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:11:11\n    |\n LL |     fn f1(ref a @ b: U) {}\n    |           ^^^^^^^^-\n@@ -327,7 +327,7 @@ LL |     fn f1(ref a @ b: U) {}\n    |           move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:20\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:20\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                    ^^^^^^^^-----\n@@ -338,7 +338,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:35\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:35\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                                   ^^^^^^^^-\n@@ -349,7 +349,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:22:11\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n    |\n LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n    |           ^^^^^^^^^^^^^^^^-----^"}, {"sha": "2ae78d1084e0e4263eb423b8664cdb55b68f109d", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,5 +1,5 @@\n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:10:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:8:9\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ---------^^^^^^^^^^^^^-----^\n@@ -8,7 +8,7 @@ LL |         ref mut z @ &mut Some(ref a) => {\n    |         mutable borrow, by `z`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:33:9\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         ---------^^^^-----------------^\n@@ -18,7 +18,7 @@ LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:22\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:33:22\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      -----^^^---------\n@@ -27,7 +27,7 @@ LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      immutable borrow, by `b`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:37:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -36,7 +36,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -45,7 +45,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -55,7 +55,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:45:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -65,7 +65,7 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:48:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:46:9\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ---------^^^-----\n@@ -74,7 +74,7 @@ LL |     let ref mut a @ ref b = u();\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:53:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:51:9\n    |\n LL |     let ref a @ ref mut b = u();\n    |         -----^^^---------\n@@ -83,7 +83,7 @@ LL |     let ref a @ ref mut b = u();\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:59:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:57:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -92,7 +92,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:63:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:61:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -101,7 +101,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:69:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:67:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         ---------^^^^^^-----^\n@@ -110,7 +110,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:69:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:67:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 ---------^^^^^^^-----^\n@@ -119,7 +119,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----^^^^^^---------^\n@@ -128,7 +128,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 -----^^^^^^^---------^\n@@ -137,7 +137,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |         -----^^^^^^---------^\n@@ -146,7 +146,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -155,7 +155,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |                                 immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |         ---------^^^^^^-----^\n@@ -164,7 +164,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -173,7 +173,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |                                 mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |         -----^^^^^^---------^\n@@ -182,7 +182,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -191,7 +191,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |                                 immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:109:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |         ---------^^^^^^-----^\n@@ -200,7 +200,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:109:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -209,7 +209,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |                                 mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:117:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -219,7 +219,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:125:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -229,7 +229,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:129:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -239,7 +239,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:136:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:134:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -249,7 +249,7 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:24:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:22:11\n    |\n LL |     fn f1(ref a @ ref mut b: U) {}\n    |           -----^^^---------\n@@ -258,7 +258,7 @@ LL |     fn f1(ref a @ ref mut b: U) {}\n    |           immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:24:11\n    |\n LL |     fn f2(ref mut a @ ref b: U) {}\n    |           ---------^^^-----\n@@ -267,7 +267,7 @@ LL |     fn f2(ref mut a @ ref b: U) {}\n    |           mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:11\n    |\n LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n    |           -----^^^^^^^^^^^----------------^^^^^^^^\n@@ -276,7 +276,7 @@ LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n    |           immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:30:22\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:22\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                      -----^^^-------------\n@@ -286,7 +286,7 @@ LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                      immutable borrow, by `a`, occurs here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:30:30\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:30\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                              ---------^^^-\n@@ -295,7 +295,7 @@ LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                              value borrowed, by `b`, here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:10:31\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:8:31\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ----------------------^^^^^-\n@@ -307,7 +307,7 @@ LL |             **z = None;\n    |             ---------- mutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:48:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:46:9\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ^^^^^^^^^^^^-----\n@@ -319,7 +319,7 @@ LL |     drop(b);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:53:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:51:9\n    |\n LL |     let ref a @ ref mut b = u();\n    |         ^^^^^^^^---------\n@@ -331,7 +331,7 @@ LL |     *b = u();\n    |     -------- mutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:20\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:20\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----------^^^^^^^^^-\n@@ -343,7 +343,7 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:45\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:45\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 ------------^^^^^^^^^-\n@@ -355,55 +355,55 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0594]: cannot assign to `*b`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:61\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                                             ^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0594]: cannot assign to `*a`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:61\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                                             ^^^^^^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:109:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut Result<U, U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:109:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut Result<U, U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:117:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ^^^^^^^^^---------^^^^^^^^^^^^\n@@ -415,7 +415,7 @@ LL |     *b = U;\n    |     ------ mutable borrow later used here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:125:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ^^^^^^^^^---------^^^^^^^^^^^^\n@@ -427,7 +427,7 @@ LL |     *b = U;\n    |     ------ mutable borrow later used here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:129:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ^^^^^^^^^---------^^^^^^^^^^^^\n@@ -439,7 +439,7 @@ LL |     *b = U;\n    |     ------ mutable borrow later used here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:30:30\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:30\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                      --------^^^^^^^^^^^^-"}, {"sha": "aa02230419b5e4956577a2b7cb0319c66a98feb8", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,5 +1,5 @@\n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:28:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:26:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -8,7 +8,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:31:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -17,7 +17,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:35:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:33:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -26,7 +26,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:38:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:36:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -35,7 +35,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:41:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:39:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -44,7 +44,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:46:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:44:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -66,7 +66,7 @@ LL | |     ) = (U, [U, U, U]);\n    | |_____^\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:56:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:54:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -88,7 +88,7 @@ LL | |         ) = (u(), [u(), u(), u()]);\n    | |_________^\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:64:9\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         -^^^^---------^^---------^\n@@ -99,7 +99,7 @@ LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:69:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:67:9\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         -^^^^-^^^-^^-^^\n@@ -111,7 +111,7 @@ LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         move occurs because `a` has type `&mut (U, [U; 2])` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:72:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:70:9\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         -^^^^^^^^---------\n@@ -121,7 +121,7 @@ LL |     let a @ &mut ref mut b = &mut U;\n    |         move occurs because `a` has type `&mut U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:74:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:72:9\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         -^^^^^^^^^---------^^---------^\n@@ -132,7 +132,7 @@ LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         move occurs because `a` has type `&mut (U, U)` which does not implement the `Copy` trait\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:76:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -141,7 +141,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:76:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -150,7 +150,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:84:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:82:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -159,7 +159,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:84:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:82:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -168,7 +168,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:89:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -177,7 +177,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:89:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -186,7 +186,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:101:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -195,7 +195,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:101:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -204,7 +204,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:10:11\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:8:11\n    |\n LL |     fn f1(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n@@ -213,7 +213,7 @@ LL |     fn f1(ref mut a @ ref mut b: U) {}\n    |           first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:12:11\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:10:11\n    |\n LL |     fn f2(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n@@ -222,7 +222,7 @@ LL |     fn f2(ref mut a @ ref mut b: U) {}\n    |           first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:15:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:13:9\n    |\n LL |           ref mut a @ [\n    |           ^--------\n@@ -240,7 +240,7 @@ LL | |         ] : [[U; 4]; 5]\n    | |_________^\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:23:22\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:22\n    |\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                      ---------^^^-------------\n@@ -250,7 +250,7 @@ LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                      first mutable borrow, by `a`, occurs here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:23:34\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:34\n    |\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                                  ---------^^^-\n@@ -259,7 +259,7 @@ LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                                  value borrowed, by `b`, here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:31:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ^^^^^^^^^^^^---------\n@@ -271,7 +271,7 @@ LL |     drop(b);\n    |          - first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:41:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:39:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ^^^^^^^^^^^^---------\n@@ -283,7 +283,7 @@ LL |     *b = U;\n    |     ------ first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:89:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -295,7 +295,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:89:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -307,7 +307,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:101:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -319,7 +319,7 @@ LL |             drop(a);\n    |                  - first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:101:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -331,7 +331,7 @@ LL |             drop(a);\n    |                  - first borrow later used here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:23:34\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:34\n    |\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                      ------------^^^^^^^^^^^^-"}, {"sha": "d290144b6155a6fa9cbf449c530737a8460f3200", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of partially moved value\n-  --> $DIR/copy-and-move-mixed.rs:14:9\n+  --> $DIR/copy-and-move-mixed.rs:12:9\n    |\n LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n    |         ^^^^^^^^^^------------^"}, {"sha": "d78faa682b5078f5590a78e8743183de2597cd84", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,5 +1,5 @@\n error: cannot move out of value because it is borrowed\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:27:9\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:26:9\n    |\n LL |     let ref a @ b = NotCopy;\n    |         -----^^^-\n@@ -8,7 +8,7 @@ LL |     let ref a @ b = NotCopy;\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:30:9\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:29:9\n    |\n LL |     let ref mut a @ b = NotCopy;\n    |         ---------^^^-\n@@ -17,7 +17,7 @@ LL |     let ref mut a @ b = NotCopy;\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:35:12\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:34:12\n    |\n LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |            -----^^^-\n@@ -26,7 +26,7 @@ LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |            value borrowed, by `a`, here\n \n error: borrow of moved value\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:35:29\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:34:29\n    |\n LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |                             -^^^-----\n@@ -36,7 +36,7 @@ LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |                             move occurs because `b` has type `NotCopy` which does not implement the `Copy` trait\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:43:9\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:42:9\n    |\n LL |         ref a @ b => {\n    |         -----^^^-\n@@ -45,7 +45,7 @@ LL |         ref a @ b => {\n    |         value borrowed, by `a`, here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:30:9\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:29:9\n    |\n LL |     let ref mut a @ b = NotCopy;\n    |         ^^^^^^^^^^^^-   ------- move occurs because value has type `NotCopy`, which does not implement the `Copy` trait"}, {"sha": "d655f15af1ebab8300b94d8197dc707df7d05dbf", "filename": "src/test/ui/pattern/bindings-after-at/feature-gate-bindings_after_at.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/43d8854b560d4ad6750c2057e922f20b47221b8b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d8854b560d4ad6750c2057e922f20b47221b8b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.rs?ref=43d8854b560d4ad6750c2057e922f20b47221b8b", "patch": "@@ -1,3 +0,0 @@\n-fn main() {\n-    let x @ y = 0; //~ ERROR pattern bindings after an `@` are unstable\n-}"}, {"sha": "b976ef4861e3729aa49ed7d5ba4928ee7881764d", "filename": "src/test/ui/pattern/bindings-after-at/feature-gate-bindings_after_at.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43d8854b560d4ad6750c2057e922f20b47221b8b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43d8854b560d4ad6750c2057e922f20b47221b8b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.stderr?ref=43d8854b560d4ad6750c2057e922f20b47221b8b", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: pattern bindings after an `@` are unstable\n-  --> $DIR/feature-gate-bindings_after_at.rs:2:13\n-   |\n-LL |     let x @ y = 0;\n-   |             ^\n-   |\n-   = note: see issue #65490 <https://github.com/rust-lang/rust/issues/65490> for more information\n-   = help: add `#![feature(bindings_after_at)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "3180bd0afc10492fecd61808999343a6e57e4c58", "filename": "src/test/ui/pattern/bindings-after-at/nested-binding-modes-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-mut.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow `not_mut` as mutable, as it is not declared as mutable\n-  --> $DIR/nested-binding-modes-mut.rs:6:5\n+  --> $DIR/nested-binding-modes-mut.rs:4:5\n    |\n LL |     let mut is_mut @ not_mut = 42;\n    |                      ------- help: consider changing this to be mutable: `mut not_mut`\n@@ -8,7 +8,7 @@ LL |     &mut not_mut;\n    |     ^^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `not_mut` as mutable, as it is not declared as mutable\n-  --> $DIR/nested-binding-modes-mut.rs:11:5\n+  --> $DIR/nested-binding-modes-mut.rs:9:5\n    |\n LL |     let not_mut @ mut is_mut = 42;\n    |         -------------------- help: consider changing this to be mutable: `mut not_mut`"}, {"sha": "b378fe356ce102b8e339a3384245587cec3ce304", "filename": "src/test/ui/pattern/bindings-after-at/nested-binding-modes-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-ref.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,11 +1,11 @@\n error[E0614]: type `{integer}` cannot be dereferenced\n-  --> $DIR/nested-binding-modes-ref.rs:6:5\n+  --> $DIR/nested-binding-modes-ref.rs:4:5\n    |\n LL |     *is_val;\n    |     ^^^^^^^\n \n error[E0614]: type `{integer}` cannot be dereferenced\n-  --> $DIR/nested-binding-modes-ref.rs:11:5\n+  --> $DIR/nested-binding-modes-ref.rs:9:5\n    |\n LL |     *is_val;\n    |     ^^^^^^^"}, {"sha": "27660ae406e291b5cd6a7c219cc507172ae9903d", "filename": "src/test/ui/pattern/bindings-after-at/nested-type-ascription-syntactically-invalid.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,23 +1,23 @@\n error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `@`\n-  --> $DIR/nested-type-ascription-syntactically-invalid.rs:19:15\n+  --> $DIR/nested-type-ascription-syntactically-invalid.rs:18:15\n    |\n LL |     let a: u8 @ b = 0;\n    |               ^ expected one of 7 possible tokens\n \n error: expected one of `)`, `,`, `@`, or `|`, found `:`\n-  --> $DIR/nested-type-ascription-syntactically-invalid.rs:25:15\n+  --> $DIR/nested-type-ascription-syntactically-invalid.rs:24:15\n    |\n LL |     let a @ (b: u8);\n    |               ^ expected one of `)`, `,`, `@`, or `|`\n \n error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `)`\n-  --> $DIR/nested-type-ascription-syntactically-invalid.rs:25:19\n+  --> $DIR/nested-type-ascription-syntactically-invalid.rs:24:19\n    |\n LL |     let a @ (b: u8);\n    |                   ^ expected one of 7 possible tokens\n \n error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `@`\n-  --> $DIR/nested-type-ascription-syntactically-invalid.rs:32:15\n+  --> $DIR/nested-type-ascription-syntactically-invalid.rs:31:15\n    |\n LL |     let a: T1 @ Outer(b: T2);\n    |               ^ expected one of 7 possible tokens"}, {"sha": "a165549f6b436c85f97eac61aea7f2155e261fcb", "filename": "src/test/ui/pattern/bindings-after-at/pat-at-same-name-both.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc5714e59608b6f9f50481aca41a3ffa6160ea4/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr?ref=efc5714e59608b6f9f50481aca41a3ffa6160ea4", "patch": "@@ -1,59 +1,59 @@\n error[E0415]: identifier `a` is bound more than once in this parameter list\n-  --> $DIR/pat-at-same-name-both.rs:7:14\n+  --> $DIR/pat-at-same-name-both.rs:6:14\n    |\n LL |     fn f(a @ a @ a: ()) {}\n    |              ^ used as parameter more than once\n \n error[E0415]: identifier `a` is bound more than once in this parameter list\n-  --> $DIR/pat-at-same-name-both.rs:7:18\n+  --> $DIR/pat-at-same-name-both.rs:6:18\n    |\n LL |     fn f(a @ a @ a: ()) {}\n    |                  ^ used as parameter more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:12:20\n+  --> $DIR/pat-at-same-name-both.rs:11:20\n    |\n LL |         Ok(a @ b @ a)\n    |                    ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:14:23\n+  --> $DIR/pat-at-same-name-both.rs:13:23\n    |\n LL |         | Err(a @ b @ a)\n    |                       ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:19:13\n+  --> $DIR/pat-at-same-name-both.rs:18:13\n    |\n LL |     let a @ a @ a = ();\n    |             ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:19:17\n+  --> $DIR/pat-at-same-name-both.rs:18:17\n    |\n LL |     let a @ a @ a = ();\n    |                 ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:22:21\n+  --> $DIR/pat-at-same-name-both.rs:21:21\n    |\n LL |     let ref a @ ref a = ();\n    |                     ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:24:29\n+  --> $DIR/pat-at-same-name-both.rs:23:29\n    |\n LL |     let ref mut a @ ref mut a = ();\n    |                             ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:27:17\n+  --> $DIR/pat-at-same-name-both.rs:26:17\n    |\n LL |     let a @ (Ok(a) | Err(a)) = Ok(());\n    |                 ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:27:26\n+  --> $DIR/pat-at-same-name-both.rs:26:26\n    |\n LL |     let a @ (Ok(a) | Err(a)) = Ok(());\n    |                          ^ used in a pattern more than once"}]}