{"sha": "ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "node_id": "C_kwDOAAsO6NoAKGFiMTA5MDhlOGMzMmM0MzUwYjA3ZmM2ODkyYjllNWY3ZTlmZmE4ODE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-03T17:08:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-03T17:08:17Z"}, "message": "Auto merge of #106409 - matthiaskrgr:rollup-b58z1hz, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #104552 (warn newer available version of the x tool)\n - #105681 (some fixes/improvements to mir::visit module)\n - #106005 (Test the borrowck behavior of if-let guards)\n - #106356 (clean: Remove `ctor_kind` from `VariantStruct`.)\n - #106365 (Grammar : Missing \"is\" in format specifier diagnostic)\n - #106388 (rustdoc: remove legacy box-sizing CSS)\n - #106392 (`has_overflow` only if value is *not* within limit)\n - #106402 (Fix dupe word typos)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "79e8cbf6f4fa1d69911edb883cae3c13a0a8268c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79e8cbf6f4fa1d69911edb883cae3c13a0a8268c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "html_url": "https://github.com/rust-lang/rust/commit/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312c9a37f26d1f0a98fc410109abb961e945b85e", "url": "https://api.github.com/repos/rust-lang/rust/commits/312c9a37f26d1f0a98fc410109abb961e945b85e", "html_url": "https://github.com/rust-lang/rust/commit/312c9a37f26d1f0a98fc410109abb961e945b85e"}, {"sha": "e2f7108459baf3e3af1b7ed7d02c9100b2a413d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f7108459baf3e3af1b7ed7d02c9100b2a413d8", "html_url": "https://github.com/rust-lang/rust/commit/e2f7108459baf3e3af1b7ed7d02c9100b2a413d8"}], "stats": {"total": 866, "additions": 756, "deletions": 110}, "files": [{"sha": "4cb64882cb7e35f2c05a7a392621eb7965f55738", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -4805,18 +4805,18 @@ checksum = \"1ef965a420fe14fdac7dd018862966a4c14094f900e1650bbc71ddd7d580c8af\"\n \n [[package]]\n name = \"semver\"\n-version = \"1.0.12\"\n+version = \"1.0.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a2333e6df6d6598f2b1974829f853c2b4c5f4a6e503c10af918081aa6f8564e1\"\n+checksum = \"e25dfac463d778e353db5be2449d1cce89bd6fd23c9f1ea21310ce6e5a1b29c4\"\n dependencies = [\n  \"serde\",\n ]\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.147\"\n+version = \"1.0.152\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d193d69bae983fc11a79df82342761dfbf28a99fc8d203dca4c3c1b590948965\"\n+checksum = \"bb7d1f0d3021d347a83e556fc4683dea2ea09d87bccdf88ff5c12545d89d5efb\"\n dependencies = [\n  \"serde_derive\",\n ]\n@@ -4833,9 +4833,9 @@ dependencies = [\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.147\"\n+version = \"1.0.152\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4f1d362ca8fc9c3e3a7484440752472d68a6caa98f1ab81d99b5dfe517cec852\"\n+checksum = \"af487d118eecd09402d70a5d72551860e788df87b464af30e5ea6a38c75c541e\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -4853,9 +4853,9 @@ dependencies = [\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.85\"\n+version = \"1.0.91\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e55a28e3aaef9d5ce0506d0a14dbba8054ddc7e499ef522dd8b26859ec9d4a44\"\n+checksum = \"877c235533714907a8c2464236f5c4b2a17262ef1bd71f38f35ea592c8da6883\"\n dependencies = [\n  \"indexmap\",\n  \"itoa\",\n@@ -5133,9 +5133,9 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.102\"\n+version = \"1.0.107\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3fcd952facd492f9be3ef0d0b7032a6e442ee9b361d4acc2b1d0c4aaa5f613a1\"\n+checksum = \"1f4064b5b16e03ae50984a5a8ed5d4f8803e6bc1fd170a3cda91a1be4b18e3f5\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -5309,6 +5309,7 @@ dependencies = [\n  \"lazy_static\",\n  \"miropt-test-tools\",\n  \"regex\",\n+ \"semver\",\n  \"termcolor\",\n  \"walkdir\",\n ]"}, {"sha": "b2b7b9d75bd37163e9ac20a305ba9e19ac9366ef", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -638,7 +638,7 @@ fn report_missing_placeholders(\n                 if show_doc_note {\n                     diag.note(concat!(\n                         stringify!($kind),\n-                        \" formatting not supported; see the documentation for `std::fmt`\",\n+                        \" formatting is not supported; see the documentation for `std::fmt`\",\n                     ));\n                 }\n                 if suggestions.len() > 0 {"}, {"sha": "10d8db5393da94bb6cd64bb73a2f884c6194488d", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1392,7 +1392,7 @@ declare_lint! {\n     ///\n     /// The attribute must be used in conjunction with the\n     /// [`closure_track_caller` feature flag]. Otherwise, the `#[track_caller]`\n-    /// annotation will function as as no-op.\n+    /// annotation will function as a no-op.\n     ///\n     /// [`closure_track_caller` feature flag]: https://doc.rust-lang.org/beta/unstable-book/language-features/closure-track-caller.html\n     UNGATED_ASYNC_FN_TRACK_CALLER,"}, {"sha": "c18abaef8e2565e450bffb1959adfdf5dde7532b", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -29,7 +29,7 @@ macro_rules! lint_callback { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.pass.$f(&$cx.context, $($args),*);\n }) }\n \n-/// Implements the AST traversal for early lint passes. `T` provides the the\n+/// Implements the AST traversal for early lint passes. `T` provides the\n /// `check_*` methods.\n pub struct EarlyContextAndPass<'a, T: EarlyLintPass> {\n     context: EarlyContext<'a>,"}, {"sha": "b2a2656746eec8b45849ec4faf9ce905ef15ec69", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -40,7 +40,7 @@ macro_rules! lint_callback { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.pass.$f(&$cx.context, $($args),*);\n }) }\n \n-/// Implements the AST traversal for late lint passes. `T` provides the the\n+/// Implements the AST traversal for late lint passes. `T` provides the\n /// `check_*` methods.\n pub struct LateContextAndPass<'tcx, T: LateLintPass<'tcx>> {\n     context: LateContext<'tcx>,"}, {"sha": "1a264d2d5af9a0d6ab1d8eebc2aaba14b9bde5ed", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -3,15 +3,15 @@\n //! ## Overview\n //!\n //! There are two visitors, one for immutable and one for mutable references,\n-//! but both are generated by the following macro. The code is written according\n-//! to the following conventions:\n+//! but both are generated by the `make_mir_visitor` macro.\n+//! The code is written according to the following conventions:\n //!\n //! - introduce a `visit_foo` and a `super_foo` method for every MIR type\n //! - `visit_foo`, by default, calls `super_foo`\n //! - `super_foo`, by default, destructures the `foo` and calls `visit_foo`\n //!\n-//! This allows you as a user to override `visit_foo` for types are\n-//! interested in, and invoke (within that method) call\n+//! This allows you to override `visit_foo` for types you are\n+//! interested in, and invoke (within that method call)\n //! `self.super_foo` to get the default behavior. Just as in an OO\n //! language, you should never call `super` methods ordinarily except\n //! in that circumstance."}, {"sha": "fdd6adb681be4cba1aa43187d323db65e864b3b4", "filename": "compiler/rustc_trait_selection/src/solve/overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Foverflow.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -36,7 +36,7 @@ impl OverflowData {\n \n     #[inline]\n     pub(super) fn has_overflow(&self, depth: usize) -> bool {\n-        self.current_limit.value_within_limit(depth + self.additional_depth)\n+        !self.current_limit.value_within_limit(depth + self.additional_depth)\n     }\n \n     /// Updating the current limit when hitting overflow."}, {"sha": "f3998e98583ecd32d564590389104cb35d95d3ff", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -934,8 +934,7 @@ def main():\n     if len(sys.argv) > 1 and sys.argv[1] == 'help':\n         sys.argv = [sys.argv[0], '-h'] + sys.argv[2:]\n \n-    help_triggered = (\n-        '-h' in sys.argv) or ('--help' in sys.argv) or (len(sys.argv) == 1)\n+    help_triggered = len(sys.argv) == 1 or any(x in [\"-h\", \"--help\", \"--version\"] for x in sys.argv)\n     try:\n         bootstrap(help_triggered)\n         if not help_triggered:"}, {"sha": "025a4379f45a31a289177d6daad62200c3aa6302", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1960,7 +1960,6 @@ pub(crate) fn clean_variant_def<'tcx>(variant: &ty::VariantDef, cx: &mut DocCont\n             variant.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n         ),\n         None => VariantKind::Struct(VariantStruct {\n-            ctor_kind: None,\n             fields: variant.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n         }),\n     };\n@@ -1985,7 +1984,6 @@ fn clean_variant_data<'tcx>(\n \n     let kind = match variant {\n         hir::VariantData::Struct(..) => VariantKind::Struct(VariantStruct {\n-            ctor_kind: None,\n             fields: variant.fields().iter().map(|x| clean_field(x, cx)).collect(),\n         }),\n         hir::VariantData::Tuple(..) => {"}, {"sha": "6d55a6794f581ae329398373ddd1cb04a720294c", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -2111,7 +2111,6 @@ impl Union {\n /// only as a variant in an enum.\n #[derive(Clone, Debug)]\n pub(crate) struct VariantStruct {\n-    pub(crate) ctor_kind: Option<CtorKind>,\n     pub(crate) fields: Vec<Item>,\n }\n "}, {"sha": "c16d6477fc37978c736e7c7ddf296be56f98311e", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1229,16 +1229,7 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                                 w.write_str(\")\");\n                             }\n                             clean::VariantKind::Struct(ref s) => {\n-                                render_struct(\n-                                    w,\n-                                    v,\n-                                    None,\n-                                    s.ctor_kind,\n-                                    &s.fields,\n-                                    \"    \",\n-                                    false,\n-                                    cx,\n-                                );\n+                                render_struct(w, v, None, None, &s.fields, \"    \", false, cx);\n                             }\n                         },\n                         _ => unreachable!(),"}, {"sha": "6f8a306d665b1575a1398b25231e7e263437acf3", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -76,8 +76,6 @@\n }\n \n * {\n-\t-webkit-box-sizing: border-box;\n-\t-moz-box-sizing: border-box;\n \tbox-sizing: border-box;\n }\n "}, {"sha": "7db470359672f834fdaff1017f3a496a5979e28f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -410,7 +410,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     /// This method will create a new module and push it onto the \"modules stack\" then call\n     /// `visit_mod_contents`. Once done, it'll remove it from the \"modules stack\" and instead\n-    /// add into into the list of modules of the current module.\n+    /// add into the list of modules of the current module.\n     fn enter_mod(&mut self, id: hir::HirId, m: &'tcx hir::Mod<'tcx>, name: Symbol) {\n         self.modules.push(Module::new(name, id, m.spans.inner_span));\n "}, {"sha": "0f320af2657603bf20d82a7ab4f7e300974633ae", "filename": "src/test/ui/borrowck/borrowck-drop-from-guard.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,3 +1,5 @@\n+#![feature(if_let_guard)]\n+\n fn foo(_:String) {}\n \n fn main()\n@@ -8,4 +10,11 @@ fn main()\n         Some(_) => {}\n         None => { foo(my_str); } //~ ERROR [E0382]\n     }\n+\n+    let my_str = \"hello\".to_owned();\n+    match Some(42) {\n+        Some(_) if let Some(()) = { drop(my_str); None } => {}\n+        Some(_) => {}\n+        None => { foo(my_str); } //~ ERROR [E0382]\n+    }\n }"}, {"sha": "9fa28efd8554daeeb8344a7a91d0d25b03d88978", "filename": "src/test/ui/borrowck/borrowck-drop-from-guard.stderr", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `my_str`\n-  --> $DIR/borrowck-drop-from-guard.rs:9:23\n+  --> $DIR/borrowck-drop-from-guard.rs:11:23\n    |\n LL |     let my_str = \"hello\".to_owned();\n    |         ------ move occurs because `my_str` has type `String`, which does not implement the `Copy` trait\n@@ -15,6 +15,23 @@ help: consider cloning the value if the performance cost is acceptable\n LL |         Some(_) if { drop(my_str.clone()); false } => {}\n    |                                 ++++++++\n \n-error: aborting due to previous error\n+error[E0382]: use of moved value: `my_str`\n+  --> $DIR/borrowck-drop-from-guard.rs:18:23\n+   |\n+LL |     let my_str = \"hello\".to_owned();\n+   |         ------ move occurs because `my_str` has type `String`, which does not implement the `Copy` trait\n+LL |     match Some(42) {\n+LL |         Some(_) if let Some(()) = { drop(my_str); None } => {}\n+   |                                          ------ value moved here\n+LL |         Some(_) => {}\n+LL |         None => { foo(my_str); }\n+   |                       ^^^^^^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         Some(_) if let Some(()) = { drop(my_str.clone()); None } => {}\n+   |                                                ++++++++\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "d80a9e81576f49227034b0a895b192e823691067", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,9 +1,11 @@\n+#![feature(if_let_guard)]\n+\n enum Enum<'a> {\n     A(&'a isize),\n     B(bool),\n }\n \n-fn foo() -> isize {\n+fn if_guard() -> isize {\n     let mut n = 42;\n     let mut x = Enum::A(&mut n);\n     match x {\n@@ -16,6 +18,17 @@ fn foo() -> isize {\n     }\n }\n \n-fn main() {\n-    foo();\n+fn if_let_guard() -> isize {\n+    let mut n = 42;\n+    let mut x = Enum::A(&mut n);\n+    match x {\n+        Enum::A(_) if let Some(()) = { x = Enum::B(false); None } => 1,\n+        //~^ ERROR cannot assign `x` in match guard\n+        Enum::A(_) if let Some(()) = { let y = &mut x; *y = Enum::B(false); None } => 1,\n+        //~^ ERROR cannot mutably borrow `x` in match guard\n+        Enum::A(p) => *p,\n+        Enum::B(_) => 2,\n+    }\n }\n+\n+fn main() {}"}, {"sha": "dbb3272fdc351242b4de455ec9d086c38ea6ac33", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.stderr", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,20 +1,37 @@\n error[E0510]: cannot assign `x` in match guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:10:25\n+  --> $DIR/borrowck-mutate-in-guard.rs:12:25\n    |\n LL |     match x {\n    |           - value is immutable in match guard\n LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n    |                         ^^^^^^^^^^^^^^^^^^ cannot assign\n \n error[E0510]: cannot mutably borrow `x` in match guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:12:33\n+  --> $DIR/borrowck-mutate-in-guard.rs:14:33\n    |\n LL |     match x {\n    |           - value is immutable in match guard\n ...\n LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n    |                                 ^^^^^^ cannot mutably borrow\n \n-error: aborting due to 2 previous errors\n+error[E0510]: cannot assign `x` in match guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:25:40\n+   |\n+LL |     match x {\n+   |           - value is immutable in match guard\n+LL |         Enum::A(_) if let Some(()) = { x = Enum::B(false); None } => 1,\n+   |                                        ^^^^^^^^^^^^^^^^^^ cannot assign\n+\n+error[E0510]: cannot mutably borrow `x` in match guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:27:48\n+   |\n+LL |     match x {\n+   |           - value is immutable in match guard\n+...\n+LL |         Enum::A(_) if let Some(()) = { let y = &mut x; *y = Enum::B(false); None } => 1,\n+   |                                                ^^^^^^ cannot mutably borrow\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0510`."}, {"sha": "5b824adc6e2737647f4f739fb87ac8e8088baa93", "filename": "src/test/ui/borrowck/issue-31287-drop-in-guard.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,8 +1,15 @@\n+#![feature(if_let_guard)]\n+\n fn main() {\n     let a = Some(\"...\".to_owned());\n     let b = match a {\n         Some(_) if { drop(a); false } => None,\n         x => x, //~ ERROR use of moved value: `a`\n     };\n-    println!(\"{:?}\", b);\n+\n+    let a = Some(\"...\".to_owned());\n+    let b = match a {\n+        Some(_) if let Some(()) = { drop(a); None } => None,\n+        x => x, //~ ERROR use of moved value: `a`\n+    };\n }"}, {"sha": "18f371c20735a909dbbcbfa2a85baae1ba33b533", "filename": "src/test/ui/borrowck/issue-31287-drop-in-guard.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `a`\n-  --> $DIR/issue-31287-drop-in-guard.rs:5:9\n+  --> $DIR/issue-31287-drop-in-guard.rs:7:9\n    |\n LL |     let a = Some(\"...\".to_owned());\n    |         - move occurs because `a` has type `Option<String>`, which does not implement the `Copy` trait\n@@ -14,6 +14,22 @@ help: consider cloning the value if the performance cost is acceptable\n LL |         Some(_) if { drop(a.clone()); false } => None,\n    |                            ++++++++\n \n-error: aborting due to previous error\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/issue-31287-drop-in-guard.rs:13:9\n+   |\n+LL |     let a = Some(\"...\".to_owned());\n+   |         - move occurs because `a` has type `Option<String>`, which does not implement the `Copy` trait\n+LL |     let b = match a {\n+LL |         Some(_) if let Some(()) = { drop(a); None } => None,\n+   |                                          - value moved here\n+LL |         x => x,\n+   |         ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         Some(_) if let Some(()) = { drop(a.clone()); None } => None,\n+   |                                           ++++++++\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "c2619d6df58b31d0007903e5f1cf9ad600454a78", "filename": "src/test/ui/fmt/ifmt-bad-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -170,7 +170,7 @@ LL |     format!(\"foo %s baz\", \"bar\");\n    |                  |\n    |                  help: format specifiers use curly braces: `{}`\n    |\n-   = note: printf formatting not supported; see the documentation for `std::fmt`\n+   = note: printf formatting is not supported; see the documentation for `std::fmt`\n \n error: invalid format string: expected `'}'`, found `'t'`\n   --> $DIR/ifmt-bad-arg.rs:75:1"}, {"sha": "fc99af40859215a8b86ebf8dee42a0b14ff0634a", "filename": "src/test/ui/fmt/issue-89173.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     //~| NOTE: argument never used\n     //~| NOTE: argument never used\n     //~| NOTE: format specifiers use curly braces, and you have to use a positional or named parameter for the width\n-    //~| NOTE: printf formatting not supported\n+    //~| NOTE: printf formatting is not supported\n }"}, {"sha": "ddeb769eadc525ca951ff47ac5d00b5ff6979635", "filename": "src/test/ui/fmt/issue-89173.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -12,7 +12,7 @@ note: format specifiers use curly braces, and you have to use a positional or na\n    |\n LL |     print!(\"%0*x\", width, num);\n    |             ^^^^\n-   = note: printf formatting not supported; see the documentation for `std::fmt`\n+   = note: printf formatting is not supported; see the documentation for `std::fmt`\n \n error: aborting due to previous error\n "}, {"sha": "399e9ba0df73053982325f68abd8e5e324012092", "filename": "src/test/ui/issues/issue-29723.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fissues%2Fissue-29723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fissues%2Fissue-29723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29723.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,5 +1,7 @@\n // test for https://github.com/rust-lang/rust/issues/29723\n \n+#![feature(if_let_guard)]\n+\n fn main() {\n     let s = String::new();\n     let _s = match 0 {\n@@ -11,4 +13,10 @@ fn main() {\n             //~^ ERROR use of moved value: `s`\n         }\n     };\n+\n+    let s = String::new();\n+    let _s = match 0 {\n+        0 if let Some(()) = { drop(s); None } => String::from(\"oops\"),\n+        _ => s //~ ERROR use of moved value: `s`\n+    };\n }"}, {"sha": "044d8a9b5dd1d6a33b99033963cbf40162b18aed", "filename": "src/test/ui/issues/issue-29723.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `s`\n-  --> $DIR/issue-29723.rs:10:13\n+  --> $DIR/issue-29723.rs:12:13\n    |\n LL |     let s = String::new();\n    |         - move occurs because `s` has type `String`, which does not implement the `Copy` trait\n@@ -15,6 +15,22 @@ help: consider cloning the value if the performance cost is acceptable\n LL |         0 if { drop(s.clone()); false } => String::from(\"oops\"),\n    |                      ++++++++\n \n-error: aborting due to previous error\n+error[E0382]: use of moved value: `s`\n+  --> $DIR/issue-29723.rs:20:14\n+   |\n+LL |     let s = String::new();\n+   |         - move occurs because `s` has type `String`, which does not implement the `Copy` trait\n+LL |     let _s = match 0 {\n+LL |         0 if let Some(()) = { drop(s); None } => String::from(\"oops\"),\n+   |                                    - value moved here\n+LL |         _ => s\n+   |              ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         0 if let Some(()) = { drop(s.clone()); None } => String::from(\"oops\"),\n+   |                                     ++++++++\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "7971c2ab2b9b285357c957b1bd93d64ee04ce5c8", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -8,7 +8,7 @@ LL |     println!(\"%.*3$s %s!\\n\", \"Hello,\", \"World\", 4);\n    |              |               argument never used\n    |              multiple missing formatting specifiers\n    |\n-   = note: printf formatting not supported; see the documentation for `std::fmt`\n+   = note: printf formatting is not supported; see the documentation for `std::fmt`\n help: format specifiers use curly braces\n    |\n LL |     println!(\"{:.2$} {}!\\n\", \"Hello,\", \"World\", 4);\n@@ -22,7 +22,7 @@ LL |     println!(\"%1$*2$.*3$f\", 123.456);\n    |               |\n    |               help: format specifiers use curly braces: `{0:1$.2$}`\n    |\n-   = note: printf formatting not supported; see the documentation for `std::fmt`\n+   = note: printf formatting is not supported; see the documentation for `std::fmt`\n \n error: multiple unused formatting arguments\n   --> $DIR/format-foreign.rs:6:7\n@@ -37,7 +37,7 @@ LL | | \"###, \"Hello,\", \"World\", 4);\n    | |____|  argument never used\n    |      multiple missing formatting specifiers\n    |\n-   = note: printf formatting not supported; see the documentation for `std::fmt`\n+   = note: printf formatting is not supported; see the documentation for `std::fmt`\n help: format specifiers use curly braces\n    |\n LL ~     println!(r###\"{:.2$}\n@@ -60,7 +60,7 @@ LL |     println!(\"Hi there, $NAME.\", NAME=\"Tim\");\n    |                         |\n    |                         help: format specifiers use curly braces: `{NAME}`\n    |\n-   = note: shell formatting not supported; see the documentation for `std::fmt`\n+   = note: shell formatting is not supported; see the documentation for `std::fmt`\n \n error: multiple unused formatting arguments\n   --> $DIR/format-foreign.rs:15:32\n@@ -72,7 +72,7 @@ LL |     println!(\"$1 $0 $$ $NAME\", 1, 2, NAME=3);\n    |              |                 argument never used\n    |              multiple missing formatting specifiers\n    |\n-   = note: shell formatting not supported; see the documentation for `std::fmt`\n+   = note: shell formatting is not supported; see the documentation for `std::fmt`\n help: format specifiers use curly braces\n    |\n LL |     println!(\"{1} {0} $$ {NAME}\", 1, 2, NAME=3);"}, {"sha": "fad87fa2aeea8e4af81c4a66092fdc716811bd34", "filename": "src/test/ui/macros/format-unused-lables.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -44,7 +44,7 @@ LL |        \"things\"\n LL |              , UNUSED=\"args\");\n    |                       ^^^^^^ named argument never used\n    |\n-   = note: shell formatting not supported; see the documentation for `std::fmt`\n+   = note: shell formatting is not supported; see the documentation for `std::fmt`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "5359f68cd5517637140140913258401dba6cfed0", "filename": "src/test/ui/macros/issue-92267.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fmacros%2Fissue-92267.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fmacros%2Fissue-92267.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-92267.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -10,7 +10,7 @@ note: format specifiers use curly braces, and the conversion specifier `\n    |\n LL | pub fn main() { println!(\"\ud83e\udd80%%%\", 0) }\n    |                               ^^\n-   = note: printf formatting not supported; see the documentation for `std::fmt`\n+   = note: printf formatting is not supported; see the documentation for `std::fmt`\n \n error: aborting due to previous error\n "}, {"sha": "ccfc8937fd72e531002dcf3b673628348a917dc7", "filename": "src/test/ui/nll/issue-24535-allow-mutable-borrow-in-match-guard.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -5,6 +5,8 @@\n // See further discussion on rust-lang/rust#24535,\n // rust-lang/rfcs#1006, and rust-lang/rfcs#107\n \n+#![feature(if_let_guard)]\n+\n fn main() {\n     rust_issue_24535();\n     rfcs_issue_1006_1();\n@@ -23,6 +25,12 @@ fn rust_issue_24535() {\n         3 if compare(&a, &mut 3) => (),\n         _ => panic!(\"nope\"),\n     }\n+\n+    match a {\n+        0 => panic!(\"nope\"),\n+        3 if let true = compare(&a, &mut 3) => (),\n+        _ => panic!(\"nope\"),\n+    }\n }\n \n fn rfcs_issue_1006_1() {"}, {"sha": "85feda5824b408420932a7cd33e64f4d9075db59", "filename": "src/test/ui/nll/issue-27282-move-match-input-into-guard.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -7,6 +7,8 @@\n // reaches the panic code when executed, despite the compiler warning\n // about that match arm being unreachable.\n \n+#![feature(if_let_guard)]\n+\n fn main() {\n     let b = &mut true;\n     match b {\n@@ -17,4 +19,16 @@ fn main() {\n         &mut true => { println!(\"You might think we should get here\"); },\n         _ => panic!(\"surely we could never get here, since rustc warns it is unreachable.\"),\n     }\n+\n+    let b = &mut true;\n+    match b {\n+        //~^ ERROR use of moved value: `b` [E0382]\n+        &mut false => {}\n+        _ if let Some(()) = {\n+            (|| { let bar = b; *bar = false; })();\n+            None\n+        } => {}\n+        &mut true => {}\n+        _ => {}\n+    }\n }"}, {"sha": "ae7978004576b886be6cdad5b065fe2d5d307f2b", "filename": "src/test/ui/nll/issue-27282-move-match-input-into-guard.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `b`\n-  --> $DIR/issue-27282-move-match-input-into-guard.rs:12:5\n+  --> $DIR/issue-27282-move-match-input-into-guard.rs:14:5\n    |\n LL |     let b = &mut true;\n    |         - move occurs because `b` has type `&mut bool`, which does not implement the `Copy` trait\n@@ -11,6 +11,19 @@ LL |         _ if { (|| { let bar = b; *bar = false; })();\n    |                 |\n    |                 value moved into closure here\n \n-error: aborting due to previous error\n+error[E0382]: use of moved value: `b`\n+  --> $DIR/issue-27282-move-match-input-into-guard.rs:24:5\n+   |\n+LL |     let b = &mut true;\n+   |         - move occurs because `b` has type `&mut bool`, which does not implement the `Copy` trait\n+LL |     match b {\n+   |     ^^^^^^^ value used here after move\n+...\n+LL |             (|| { let bar = b; *bar = false; })();\n+   |              --             - variable moved due to use in closure\n+   |              |\n+   |              value moved into closure here\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "833ca8afd618e1e88815baa82589a87128bceb0f", "filename": "src/test/ui/nll/issue-27282-move-ref-mut-into-guard.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -2,6 +2,8 @@\n // mutable borrows in match guards by hiding the mutable borrow in a\n // guard behind a move (of the ref mut pattern id) within a closure.\n \n+#![feature(if_let_guard)]\n+\n fn main() {\n     match Some(&4) {\n         None => {},\n@@ -10,4 +12,12 @@ fn main() {\n         //~^ ERROR cannot move out of `foo` in pattern guard [E0507]\n         Some(s) => std::process::exit(*s),\n     }\n+\n+    match Some(&4) {\n+        None => {},\n+        ref mut foo\n+            if let Some(()) = { (|| { let bar = foo; bar.take() })(); None } => {},\n+        //~^ ERROR cannot move out of `foo` in pattern guard [E0507]\n+        Some(s) => std::process::exit(*s),\n+    }\n }"}, {"sha": "45119018d4e60570243a455dc0129f584db68403", "filename": "src/test/ui/nll/issue-27282-move-ref-mut-into-guard.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/issue-27282-move-ref-mut-into-guard.rs:9:19\n+  --> $DIR/issue-27282-move-ref-mut-into-guard.rs:11:19\n    |\n LL |             if { (|| { let bar = foo; bar.take() })(); false } => {},\n    |                   ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n@@ -8,6 +8,16 @@ LL |             if { (|| { let bar = foo; bar.take() })(); false } => {},\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `foo` in pattern guard\n+  --> $DIR/issue-27282-move-ref-mut-into-guard.rs:19:34\n+   |\n+LL |             if let Some(()) = { (|| { let bar = foo; bar.take() })(); None } => {},\n+   |                                  ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n+   |                                  |\n+   |                                  move out of `foo` occurs here\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "4f41fc23fc34be2632abef60f9734e03a71b39b4", "filename": "src/test/ui/nll/issue-27282-mutation-in-guard.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,3 +1,5 @@\n+#![feature(if_let_guard)]\n+\n fn main() {\n     match Some(&4) {\n         None => {},\n@@ -10,4 +12,15 @@ fn main() {\n         Some(ref _s) => println!(\"Note this arm is bogus; the `Some` became `None` in the guard.\"),\n         _ => println!(\"Here is some supposedly unreachable code.\"),\n     }\n+\n+    match Some(&4) {\n+        None => {},\n+        ref mut foo\n+            if let Some(()) = {\n+                (|| { let bar = foo; bar.take() })();\n+                //~^ ERROR cannot move out of `foo` in pattern guard\n+                None\n+            } => {},\n+        Some(_) => {},\n+    }\n }"}, {"sha": "1ba696593afffe4adafbac72bb0e1055fa4b4d71", "filename": "src/test/ui/nll/issue-27282-mutation-in-guard.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/issue-27282-mutation-in-guard.rs:6:18\n+  --> $DIR/issue-27282-mutation-in-guard.rs:8:18\n    |\n LL |                 (|| { let bar = foo; bar.take() })();\n    |                  ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n@@ -8,6 +8,16 @@ LL |                 (|| { let bar = foo; bar.take() })();\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `foo` in pattern guard\n+  --> $DIR/issue-27282-mutation-in-guard.rs:20:18\n+   |\n+LL |                 (|| { let bar = foo; bar.take() })();\n+   |                  ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n+   |                  |\n+   |                  move out of `foo` occurs here\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "ac06b2b01028f925fea29944249ebd79cf2a71db", "filename": "src/test/ui/nll/issue-27282-reborrow-ref-mut-in-guard.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -3,7 +3,9 @@\n // It reborrows instead of moving the `ref mut` pattern borrow. This\n // means that our conservative check for mutation in guards will\n // reject it. But I want to make sure that we continue to reject it\n-// (under NLL) even when that conservaive check goes away.\n+// (under NLL) even when that conservative check goes away.\n+\n+#![feature(if_let_guard)]\n \n fn main() {\n     let mut b = &mut true;\n@@ -15,4 +17,14 @@ fn main() {\n         &mut true => { println!(\"You might think we should get here\"); },\n         _ => panic!(\"surely we could never get here, since rustc warns it is unreachable.\"),\n     }\n+\n+    let mut b = &mut true;\n+    match b {\n+        &mut false => {},\n+        ref mut r if let Some(()) = { (|| { let bar = &mut *r; **bar = false; })();\n+        //~^ ERROR cannot borrow `r` as mutable, as it is immutable for the pattern guard\n+                             None } => { &mut *r; },\n+        &mut true => {},\n+        _ => {},\n+    }\n }"}, {"sha": "5eb7a25bf9f507357225d7cf9677648f6af26105", "filename": "src/test/ui/nll/issue-27282-reborrow-ref-mut-in-guard.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow `r` as mutable, as it is immutable for the pattern guard\n-  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:12:25\n+  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:14:25\n    |\n LL |         ref mut r if { (|| { let bar = &mut *r; **bar = false; })();\n    |                         ^^                  -- mutable borrow occurs due to use of `r` in closure\n@@ -8,6 +8,16 @@ LL |         ref mut r if { (|| { let bar = &mut *r; **bar = false; })();\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n-error: aborting due to previous error\n+error[E0596]: cannot borrow `r` as mutable, as it is immutable for the pattern guard\n+  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:24:40\n+   |\n+LL |         ref mut r if let Some(()) = { (|| { let bar = &mut *r; **bar = false; })();\n+   |                                        ^^                  -- mutable borrow occurs due to use of `r` in closure\n+   |                                        |\n+   |                                        cannot borrow as mutable\n+   |\n+   = note: variables bound in patterns are immutable until the end of the pattern guard\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "1afc7931a6b629732476a78077c816040ba2e477", "filename": "src/test/ui/nll/match-cfg-fake-edges.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,6 +1,8 @@\n // Test that we have enough false edges to avoid exposing the exact matching\n // algorithm in borrow checking.\n \n+#![feature(if_let_guard)]\n+\n fn guard_always_precedes_arm(y: i32) {\n     let mut x;\n     // x should always be initialized, as the only way to reach the arm is\n@@ -9,6 +11,12 @@ fn guard_always_precedes_arm(y: i32) {\n         0 | 2 if { x = 2; true } => x,\n         _ => 2,\n     };\n+\n+    let mut x;\n+    match y {\n+        0 | 2 if let Some(()) = { x = 2; Some(()) } => x,\n+        _ => 2,\n+    };\n }\n \n fn guard_may_be_skipped(y: i32) {\n@@ -23,6 +31,16 @@ fn guard_may_be_skipped(y: i32) {\n         } => 2,\n         _ => 3,\n     };\n+\n+    let x;\n+    match y {\n+        _ if let Some(()) = { x = 2; Some(()) } => 1,\n+        _ if let Some(()) = {\n+            x; //~ ERROR E0381\n+            None\n+        } => 2,\n+        _ => 3,\n+    };\n }\n \n fn guard_may_be_taken(y: bool) {\n@@ -37,6 +55,16 @@ fn guard_may_be_taken(y: bool) {\n         }\n         false => 3,\n     };\n+\n+    let x = String::new();\n+    match y {\n+        false if let Some(()) = { drop(x); Some(()) } => 1,\n+        true => {\n+            x; //~ ERROR use of moved value: `x`\n+            2\n+        }\n+        false => 3,\n+    };\n }\n \n fn main() {}"}, {"sha": "a6261345ceac7bc7fbcd92a666f98d0a506fa2f8", "filename": "src/test/ui/nll/match-cfg-fake-edges.stderr", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,5 +1,5 @@\n error[E0381]: used binding `x` isn't initialized\n-  --> $DIR/match-cfg-fake-edges.rs:21:13\n+  --> $DIR/match-cfg-fake-edges.rs:29:13\n    |\n LL |     let x;\n    |         - binding declared here but left uninitialized\n@@ -15,8 +15,25 @@ help: consider assigning a value\n LL |     let x = 0;\n    |           +++\n \n+error[E0381]: used binding `x` isn't initialized\n+  --> $DIR/match-cfg-fake-edges.rs:39:13\n+   |\n+LL |     let x;\n+   |         - binding declared here but left uninitialized\n+LL |     match y {\n+LL |         _ if let Some(()) = { x = 2; Some(()) } => 1,\n+   |                               ----- binding initialized here in some conditions\n+LL |         _ if let Some(()) = {\n+LL |             x;\n+   |             ^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x = 0;\n+   |           +++\n+\n error[E0382]: use of moved value: `x`\n-  --> $DIR/match-cfg-fake-edges.rs:35:13\n+  --> $DIR/match-cfg-fake-edges.rs:53:13\n    |\n LL |     let x = String::new();\n    |         - move occurs because `x` has type `String`, which does not implement the `Copy` trait\n@@ -32,7 +49,24 @@ help: consider cloning the value if the performance cost is acceptable\n LL |         false if { drop(x.clone()); true } => 1,\n    |                          ++++++++\n \n-error: aborting due to 2 previous errors\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/match-cfg-fake-edges.rs:63:13\n+   |\n+LL |     let x = String::new();\n+   |         - move occurs because `x` has type `String`, which does not implement the `Copy` trait\n+LL |     match y {\n+LL |         false if let Some(()) = { drop(x); Some(()) } => 1,\n+   |                                        - value moved here\n+LL |         true => {\n+LL |             x;\n+   |             ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         false if let Some(()) = { drop(x.clone()); Some(()) } => 1,\n+   |                                         ++++++++\n+\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0381, E0382.\n For more information about an error, try `rustc --explain E0381`."}, {"sha": "ff63cc092734a0211af6825597610f4bd921c42c", "filename": "src/test/ui/nll/match-guards-always-borrow.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,3 +1,5 @@\n+#![feature(if_let_guard)]\n+\n // Here is arielb1's basic example from rust-lang/rust#27282\n // that AST borrowck is flummoxed by:\n \n@@ -10,6 +12,15 @@ fn should_reject_destructive_mutate_in_guard() {\n             false } => { },\n         Some(s) => std::process::exit(*s),\n     }\n+\n+    match Some(&4) {\n+        None => {},\n+        ref mut foo if let Some(()) = {\n+            (|| { let bar = foo; bar.take() })();\n+            //~^ ERROR cannot move out of `foo` in pattern guard [E0507]\n+            None } => { },\n+        Some(s) => std::process::exit(*s),\n+    }\n }\n \n // Here below is a case that needs to keep working: we only use the\n@@ -18,7 +29,13 @@ fn should_reject_destructive_mutate_in_guard() {\n fn allow_mutate_in_arm_body() {\n     match Some(&4) {\n         None => {},\n-        ref mut foo if foo.is_some() && false => { foo.take(); () }\n+        ref mut foo if foo.is_some() => { foo.take(); () }\n+        Some(s) => std::process::exit(*s),\n+    }\n+\n+    match Some(&4) {\n+        None => {},\n+        ref mut foo if let Some(_) = foo => { foo.take(); () }\n         Some(s) => std::process::exit(*s),\n     }\n }\n@@ -29,7 +46,13 @@ fn allow_mutate_in_arm_body() {\n fn allow_move_into_arm_body() {\n     match Some(&4) {\n         None => {},\n-        mut foo if foo.is_some() && false => { foo.take(); () }\n+        mut foo if foo.is_some() => { foo.unwrap(); () }\n+        Some(s) => std::process::exit(*s),\n+    }\n+\n+    match Some(&4) {\n+        None => {},\n+        mut foo if let Some(_) = foo => { foo.unwrap(); () }\n         Some(s) => std::process::exit(*s),\n     }\n }"}, {"sha": "fa01d3a6fd1e0092a95e40c270c4f7b681626f97", "filename": "src/test/ui/nll/match-guards-always-borrow.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/match-guards-always-borrow.rs:8:14\n+  --> $DIR/match-guards-always-borrow.rs:10:14\n    |\n LL |             (|| { let bar = foo; bar.take() })();\n    |              ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n@@ -8,6 +8,16 @@ LL |             (|| { let bar = foo; bar.take() })();\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `foo` in pattern guard\n+  --> $DIR/match-guards-always-borrow.rs:19:14\n+   |\n+LL |             (|| { let bar = foo; bar.take() })();\n+   |              ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n+   |              |\n+   |              move out of `foo` occurs here\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "3a9e1654b1c2d985aa491f467ece89f0629ad422", "filename": "src/test/ui/nll/match-guards-partially-borrow.rs", "status": "modified", "additions": 178, "deletions": 15, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -5,15 +5,25 @@\n // Test that we don't allow mutating the value being matched on in a way that\n // changes which patterns it matches, until we have chosen an arm.\n \n-fn ok_mutation_in_guard(mut q: i32) {\n+#![feature(if_let_guard)]\n+\n+fn ok_mutation_in_if_guard(mut q: i32) {\n     match q {\n         // OK, mutation doesn't change which patterns g matches\n         _ if { q = 1; false } => (),\n         _ => (),\n     }\n }\n \n-fn ok_mutation_in_guard2(mut u: bool) {\n+fn ok_mutation_in_if_let_guard(mut q: i32) {\n+    match q {\n+        // OK, mutation doesn't change which patterns g matches\n+        _ if let Some(()) = { q = 1; None } => (),\n+        _ => (),\n+    }\n+}\n+\n+fn ok_mutation_in_if_guard2(mut u: bool) {\n     // OK value of u is unused before modification\n     match u {\n         _ => (),\n@@ -25,7 +35,19 @@ fn ok_mutation_in_guard2(mut u: bool) {\n     }\n }\n \n-fn ok_mutation_in_guard4(mut w: (&mut bool,)) {\n+fn ok_mutation_in_if_let_guard2(mut u: bool) {\n+    // OK value of u is unused before modification\n+    match u {\n+        _ => (),\n+        _ if let Some(()) = {\n+            u = true;\n+            None\n+        } => (),\n+        x => (),\n+    }\n+}\n+\n+fn ok_mutation_in_if_guard4(mut w: (&mut bool,)) {\n     // OK value of u is unused before modification\n     match w {\n         _ => (),\n@@ -37,7 +59,19 @@ fn ok_mutation_in_guard4(mut w: (&mut bool,)) {\n     }\n }\n \n-fn ok_indirect_mutation_in_guard(mut p: &bool) {\n+fn ok_mutation_in_if_let_guard4(mut w: (&mut bool,)) {\n+    // OK value of u is unused before modification\n+    match w {\n+        _ => (),\n+        _ if let Some(()) = {\n+            *w.0 = true;\n+            None\n+        } => (),\n+        x => (),\n+    }\n+}\n+\n+fn ok_indirect_mutation_in_if_guard(mut p: &bool) {\n     match *p {\n         // OK, mutation doesn't change which patterns s matches\n         _ if {\n@@ -48,7 +82,18 @@ fn ok_indirect_mutation_in_guard(mut p: &bool) {\n     }\n }\n \n-fn mutation_invalidates_pattern_in_guard(mut q: bool) {\n+fn ok_indirect_mutation_in_if_let_guard(mut p: &bool) {\n+    match *p {\n+        // OK, mutation doesn't change which patterns s matches\n+        _ if let Some(()) = {\n+            p = &true;\n+            None\n+        } => (),\n+        _ => (),\n+    }\n+}\n+\n+fn mutation_invalidates_pattern_in_if_guard(mut q: bool) {\n     match q {\n         // q doesn't match the pattern with the guard by the end of the guard.\n         false if {\n@@ -59,7 +104,18 @@ fn mutation_invalidates_pattern_in_guard(mut q: bool) {\n     }\n }\n \n-fn mutation_invalidates_previous_pattern_in_guard(mut r: bool) {\n+fn mutation_invalidates_pattern_in_if_let_guard(mut q: bool) {\n+    match q {\n+        // q doesn't match the pattern with the guard by the end of the guard.\n+        false if let Some(()) = {\n+            q = true; //~ ERROR\n+            Some(())\n+        } => (),\n+        _ => (),\n+    }\n+}\n+\n+fn mutation_invalidates_previous_pattern_in_if_guard(mut r: bool) {\n     match r {\n         // r matches a previous pattern by the end of the guard.\n         true => (),\n@@ -71,7 +127,19 @@ fn mutation_invalidates_previous_pattern_in_guard(mut r: bool) {\n     }\n }\n \n-fn match_on_borrowed_early_end(mut s: bool) {\n+fn mutation_invalidates_previous_pattern_in_if_let_guard(mut r: bool) {\n+    match r {\n+        // r matches a previous pattern by the end of the guard.\n+        true => (),\n+        _ if let Some(()) = {\n+            r = true; //~ ERROR\n+            Some(())\n+        } => (),\n+        _ => (),\n+    }\n+}\n+\n+fn match_on_borrowed_early_end_if_guard(mut s: bool) {\n     let h = &mut s;\n     // OK value of s is unused before modification.\n     match s {\n@@ -84,7 +152,20 @@ fn match_on_borrowed_early_end(mut s: bool) {\n     }\n }\n \n-fn bad_mutation_in_guard(mut t: bool) {\n+fn match_on_borrowed_early_end_if_let_guard(mut s: bool) {\n+    let h = &mut s;\n+    // OK value of s is unused before modification.\n+    match s {\n+        _ if let Some(()) = {\n+            *h = !*h;\n+            None\n+        } => (),\n+        true => (),\n+        false => (),\n+    }\n+}\n+\n+fn bad_mutation_in_if_guard(mut t: bool) {\n     match t {\n         true => (),\n         false if {\n@@ -95,7 +176,18 @@ fn bad_mutation_in_guard(mut t: bool) {\n     }\n }\n \n-fn bad_mutation_in_guard2(mut x: Option<Option<&i32>>) {\n+fn bad_mutation_in_if_let_guard(mut t: bool) {\n+    match t {\n+        true => (),\n+        false if let Some(()) = {\n+            t = true; //~ ERROR\n+            None\n+        } => (),\n+        false => (),\n+    }\n+}\n+\n+fn bad_mutation_in_if_guard2(mut x: Option<Option<&i32>>) {\n     // Check that nested patterns are checked.\n     match x {\n         None => (),\n@@ -111,7 +203,23 @@ fn bad_mutation_in_guard2(mut x: Option<Option<&i32>>) {\n     }\n }\n \n-fn bad_mutation_in_guard3(mut t: bool) {\n+fn bad_mutation_in_if_let_guard2(mut x: Option<Option<&i32>>) {\n+    // Check that nested patterns are checked.\n+    match x {\n+        None => (),\n+        Some(None) => (),\n+        _ if let Some(()) = {\n+            match x {\n+                Some(ref mut r) => *r = None, //~ ERROR\n+                _ => return,\n+            };\n+            None\n+        } => (),\n+        Some(Some(r)) => println!(\"{}\", r),\n+    }\n+}\n+\n+fn bad_mutation_in_if_guard3(mut t: bool) {\n     match t {\n         s if {\n             t = !t; //~ ERROR\n@@ -121,7 +229,17 @@ fn bad_mutation_in_guard3(mut t: bool) {\n     }\n }\n \n-fn bad_indirect_mutation_in_guard(mut y: &bool) {\n+fn bad_mutation_in_if_let_guard3(mut t: bool) {\n+    match t {\n+        s if let Some(()) = {\n+            t = !t; //~ ERROR\n+            None\n+        } => (), // What value should `s` have in the arm?\n+        _ => (),\n+    }\n+}\n+\n+fn bad_indirect_mutation_in_if_guard(mut y: &bool) {\n     match *y {\n         true => (),\n         false if {\n@@ -132,7 +250,18 @@ fn bad_indirect_mutation_in_guard(mut y: &bool) {\n     }\n }\n \n-fn bad_indirect_mutation_in_guard2(mut z: &bool) {\n+fn bad_indirect_mutation_in_if_let_guard(mut y: &bool) {\n+    match *y {\n+        true => (),\n+        false if let Some(()) = {\n+            y = &true; //~ ERROR\n+            None\n+        } => (),\n+        false => (),\n+    }\n+}\n+\n+fn bad_indirect_mutation_in_if_guard2(mut z: &bool) {\n     match z {\n         &true => (),\n         &false if {\n@@ -143,8 +272,19 @@ fn bad_indirect_mutation_in_guard2(mut z: &bool) {\n     }\n }\n \n-fn bad_indirect_mutation_in_guard3(mut a: &bool) {\n-    // Same as bad_indirect_mutation_in_guard2, but using match ergonomics\n+fn bad_indirect_mutation_in_if_let_guard2(mut z: &bool) {\n+    match z {\n+        &true => (),\n+        &false if let Some(()) = {\n+            z = &true; //~ ERROR\n+            None\n+        } => (),\n+        &false => (),\n+    }\n+}\n+\n+fn bad_indirect_mutation_in_if_guard3(mut a: &bool) {\n+    // Same as bad_indirect_mutation_in_if_guard2, but using match ergonomics\n     match a {\n         true => (),\n         false if {\n@@ -155,7 +295,19 @@ fn bad_indirect_mutation_in_guard3(mut a: &bool) {\n     }\n }\n \n-fn bad_indirect_mutation_in_guard4(mut b: &bool) {\n+fn bad_indirect_mutation_in_if_let_guard3(mut a: &bool) {\n+    // Same as bad_indirect_mutation_in_if_guard2, but using match ergonomics\n+    match a {\n+        true => (),\n+        false if let Some(()) = {\n+            a = &true; //~ ERROR\n+            None\n+        } => (),\n+        false => (),\n+    }\n+}\n+\n+fn bad_indirect_mutation_in_if_guard4(mut b: &bool) {\n     match b {\n         &_ => (),\n         &_ if {\n@@ -166,4 +318,15 @@ fn bad_indirect_mutation_in_guard4(mut b: &bool) {\n     }\n }\n \n+fn bad_indirect_mutation_in_if_let_guard4(mut b: &bool) {\n+    match b {\n+        &_ => (),\n+        &_ if let Some(()) = {\n+            b = &true; //~ ERROR\n+            None\n+        } => (),\n+        &b => (),\n+    }\n+}\n+\n fn main() {}"}, {"sha": "60b8dee71a8632e2866abc43561c1b0dd36bd25c", "filename": "src/test/ui/nll/match-guards-partially-borrow.stderr", "status": "modified", "additions": 93, "deletions": 10, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,14 +1,32 @@\n error[E0510]: cannot assign `q` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:55:13\n+  --> $DIR/match-guards-partially-borrow.rs:100:13\n    |\n LL |     match q {\n    |           - value is immutable in match guard\n ...\n LL |             q = true;\n    |             ^^^^^^^^ cannot assign\n \n+error[E0510]: cannot assign `q` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:111:13\n+   |\n+LL |     match q {\n+   |           - value is immutable in match guard\n+...\n+LL |             q = true;\n+   |             ^^^^^^^^ cannot assign\n+\n+error[E0510]: cannot assign `r` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:123:13\n+   |\n+LL |     match r {\n+   |           - value is immutable in match guard\n+...\n+LL |             r = true;\n+   |             ^^^^^^^^ cannot assign\n+\n error[E0510]: cannot assign `r` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:67:13\n+  --> $DIR/match-guards-partially-borrow.rs:135:13\n    |\n LL |     match r {\n    |           - value is immutable in match guard\n@@ -17,7 +35,16 @@ LL |             r = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `t` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:91:13\n+  --> $DIR/match-guards-partially-borrow.rs:172:13\n+   |\n+LL |     match t {\n+   |           - value is immutable in match guard\n+...\n+LL |             t = true;\n+   |             ^^^^^^^^ cannot assign\n+\n+error[E0510]: cannot assign `t` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:183:13\n    |\n LL |     match t {\n    |           - value is immutable in match guard\n@@ -26,7 +53,16 @@ LL |             t = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot mutably borrow `x.0` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:105:22\n+  --> $DIR/match-guards-partially-borrow.rs:197:22\n+   |\n+LL |     match x {\n+   |           - value is immutable in match guard\n+...\n+LL |                 Some(ref mut r) => *r = None,\n+   |                      ^^^^^^^^^ cannot mutably borrow\n+\n+error[E0510]: cannot mutably borrow `x.0` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:213:22\n    |\n LL |     match x {\n    |           - value is immutable in match guard\n@@ -35,7 +71,7 @@ LL |                 Some(ref mut r) => *r = None,\n    |                      ^^^^^^^^^ cannot mutably borrow\n \n error[E0506]: cannot assign to `t` because it is borrowed\n-  --> $DIR/match-guards-partially-borrow.rs:117:13\n+  --> $DIR/match-guards-partially-borrow.rs:225:13\n    |\n LL |         s if {\n    |         - borrow of `t` occurs here\n@@ -45,8 +81,28 @@ LL |             false\n LL |         } => (), // What value should `s` have in the arm?\n    |         - borrow later used here\n \n+error[E0506]: cannot assign to `t` because it is borrowed\n+  --> $DIR/match-guards-partially-borrow.rs:235:13\n+   |\n+LL |         s if let Some(()) = {\n+   |         - borrow of `t` occurs here\n+LL |             t = !t;\n+   |             ^^^^^^ assignment to borrowed `t` occurs here\n+LL |             None\n+LL |         } => (), // What value should `s` have in the arm?\n+   |         - borrow later used here\n+\n+error[E0510]: cannot assign `y` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:246:13\n+   |\n+LL |     match *y {\n+   |           -- value is immutable in match guard\n+...\n+LL |             y = &true;\n+   |             ^^^^^^^^^ cannot assign\n+\n error[E0510]: cannot assign `y` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:128:13\n+  --> $DIR/match-guards-partially-borrow.rs:257:13\n    |\n LL |     match *y {\n    |           -- value is immutable in match guard\n@@ -55,7 +111,16 @@ LL |             y = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `z` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:139:13\n+  --> $DIR/match-guards-partially-borrow.rs:268:13\n+   |\n+LL |     match z {\n+   |           - value is immutable in match guard\n+...\n+LL |             z = &true;\n+   |             ^^^^^^^^^ cannot assign\n+\n+error[E0510]: cannot assign `z` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:279:13\n    |\n LL |     match z {\n    |           - value is immutable in match guard\n@@ -64,7 +129,16 @@ LL |             z = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `a` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:151:13\n+  --> $DIR/match-guards-partially-borrow.rs:291:13\n+   |\n+LL |     match a {\n+   |           - value is immutable in match guard\n+...\n+LL |             a = &true;\n+   |             ^^^^^^^^^ cannot assign\n+\n+error[E0510]: cannot assign `a` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:303:13\n    |\n LL |     match a {\n    |           - value is immutable in match guard\n@@ -73,15 +147,24 @@ LL |             a = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `b` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:162:13\n+  --> $DIR/match-guards-partially-borrow.rs:314:13\n+   |\n+LL |     match b {\n+   |           - value is immutable in match guard\n+...\n+LL |             b = &true;\n+   |             ^^^^^^^^^ cannot assign\n+\n+error[E0510]: cannot assign `b` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:325:13\n    |\n LL |     match b {\n    |           - value is immutable in match guard\n ...\n LL |             b = &true;\n    |             ^^^^^^^^^ cannot assign\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 18 previous errors\n \n Some errors have detailed explanations: E0506, E0510.\n For more information about an error, try `rustc --explain E0506`."}, {"sha": "6f0d2b045918d6007ac206369c6f52724a4151cf", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,13 +1,24 @@\n+#![feature(if_let_guard)]\n+\n enum VecWrapper { A(Vec<i32>) }\n \n-fn foo(x: VecWrapper) -> usize {\n+fn if_guard(x: VecWrapper) -> usize {\n     match x {\n         VecWrapper::A(v) if { drop(v); false } => 1,\n         //~^ ERROR cannot move out of `v` in pattern guard\n         VecWrapper::A(v) => v.len()\n     }\n }\n \n+fn if_let_guard(x: VecWrapper) -> usize {\n+    match x {\n+        VecWrapper::A(v) if let Some(()) = { drop(v); None } => 1,\n+        //~^ ERROR cannot move out of `v` in pattern guard\n+        VecWrapper::A(v) => v.len()\n+    }\n+}\n+\n fn main() {\n-    foo(VecWrapper::A(vec![107]));\n+    if_guard(VecWrapper::A(vec![107]));\n+    if_let_guard(VecWrapper::A(vec![107]));\n }"}, {"sha": "a749361bf30ee10847d64615248d83dbc8332b6c", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,11 +1,19 @@\n error[E0507]: cannot move out of `v` in pattern guard\n-  --> $DIR/rfc-reject-double-move-across-arms.rs:5:36\n+  --> $DIR/rfc-reject-double-move-across-arms.rs:7:36\n    |\n LL |         VecWrapper::A(v) if { drop(v); false } => 1,\n    |                                    ^ move occurs because `v` has type `Vec<i32>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `v` in pattern guard\n+  --> $DIR/rfc-reject-double-move-across-arms.rs:15:51\n+   |\n+LL |         VecWrapper::A(v) if let Some(()) = { drop(v); None } => 1,\n+   |                                                   ^ move occurs because `v` has type `Vec<i32>`, which does not implement the `Copy` trait\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "827335f6a8494395fbea18f5f8d39c275cf49b78", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,6 +1,8 @@\n+#![feature(if_let_guard)]\n+\n struct A { a: Box<i32> }\n \n-fn foo(n: i32) {\n+fn if_guard(n: i32) {\n     let x = A { a: Box::new(n) };\n     let _y = match x {\n         A { a: v } if { drop(v); true } => v,\n@@ -9,6 +11,16 @@ fn foo(n: i32) {\n     };\n }\n \n+fn if_let_guard(n: i32) {\n+    let x = A { a: Box::new(n) };\n+    let _y = match x {\n+        A { a: v } if let Some(()) = { drop(v); Some(()) } => v,\n+        //~^ ERROR cannot move out of `v` in pattern guard\n+        _ => Box::new(0),\n+    };\n+}\n+\n fn main() {\n-    foo(107);\n+    if_guard(107);\n+    if_let_guard(107);\n }"}, {"sha": "9285492b224503305299266bc8cbac4ca2d692dd", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -1,11 +1,19 @@\n error[E0507]: cannot move out of `v` in pattern guard\n-  --> $DIR/rfc-reject-double-move-in-first-arm.rs:6:30\n+  --> $DIR/rfc-reject-double-move-in-first-arm.rs:8:30\n    |\n LL |         A { a: v } if { drop(v); true } => v,\n    |                              ^ move occurs because `v` has type `Box<i32>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `v` in pattern guard\n+  --> $DIR/rfc-reject-double-move-in-first-arm.rs:17:45\n+   |\n+LL |         A { a: v } if let Some(()) = { drop(v); Some(()) } => v,\n+   |                                             ^ move occurs because `v` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "5f5ae3a65efa81c34498c40c6de57fd59ddd81af", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -11,6 +11,7 @@ miropt-test-tools = { path = \"../miropt-test-tools\" }\n lazy_static = \"1\"\n walkdir = \"2\"\n ignore = \"0.4.18\"\n+semver = \"1.0.14\"\n termcolor = \"1.1.3\"\n \n [[bin]]"}, {"sha": "4075f2616b0fd726739410a0cc1ac9fcffb47f72", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -69,3 +69,4 @@ pub mod ui_tests;\n pub mod unit_tests;\n pub mod unstable_book;\n pub mod walk;\n+pub mod x_version;"}, {"sha": "7bb8ddc6949ef9f61254d2a0dcd065a26443ed02", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -58,7 +58,7 @@ fn main() {\n \n                 let handle = s.spawn(|| {\n                     let mut flag = false;\n-                    $p::check($($args),* , &mut flag);\n+                    $p::check($($args, )* &mut flag);\n                     if (flag) {\n                         bad.store(true, Ordering::Relaxed);\n                     }\n@@ -107,6 +107,8 @@ fn main() {\n         check!(alphabetical, &compiler_path);\n         check!(alphabetical, &library_path);\n \n+        check!(x_version, &root_path, &cargo);\n+\n         let collected = {\n             drain_handles(&mut handles);\n "}, {"sha": "5dc6a0588c32bc1dc10a9fba6ab0664db9699f66", "filename": "src/tools/tidy/src/x_version.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftools%2Ftidy%2Fsrc%2Fx_version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftools%2Ftidy%2Fsrc%2Fx_version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fx_version.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -0,0 +1,65 @@\n+use semver::Version;\n+use std::io::ErrorKind;\n+use std::path::Path;\n+use std::process::{Command, Stdio};\n+\n+pub fn check(root: &Path, cargo: &Path, bad: &mut bool) {\n+    let result = Command::new(\"x\").arg(\"--wrapper-version\").stdout(Stdio::piped()).spawn();\n+    // This runs the command inside a temporary directory.\n+    // This allows us to compare output of result to see if `--wrapper-version` is not a recognized argument to x.\n+    let temp_result = Command::new(\"x\")\n+        .arg(\"--wrapper-version\")\n+        .current_dir(std::env::temp_dir())\n+        .stdout(Stdio::piped())\n+        .spawn();\n+\n+    let (child, temp_child) = match (result, temp_result) {\n+        (Ok(child), Ok(temp_child)) => (child, temp_child),\n+        (Err(e), _) | (_, Err(e)) => match e.kind() {\n+            ErrorKind::NotFound => return,\n+            _ => return tidy_error!(bad, \"failed to run `x`: {}\", e),\n+        },\n+    };\n+\n+    let output = child.wait_with_output().unwrap();\n+    let temp_output = temp_child.wait_with_output().unwrap();\n+\n+    if output != temp_output {\n+        return tidy_error!(\n+            bad,\n+            \"Current version of x does not support the `--wrapper-version` argument\\nConsider updating to the newer version of x by running `cargo install --path src/tools/x`\"\n+        );\n+    }\n+\n+    if output.status.success() {\n+        let version = String::from_utf8_lossy(&output.stdout);\n+        let version = Version::parse(version.trim_end()).unwrap();\n+\n+        if let Some(expected) = get_x_wrapper_version(root, cargo) {\n+            if version < expected {\n+                return tidy_error!(\n+                    bad,\n+                    \"Current version of x is {version}, but the latest version is {expected}\\nConsider updating to the newer version of x by running `cargo install --path src/tools/x`\"\n+                );\n+            }\n+        } else {\n+            return tidy_error!(\n+                bad,\n+                \"Unable to parse the latest version of `x` at `src/tools/x/Cargo.toml`\"\n+            );\n+        }\n+    } else {\n+        return tidy_error!(bad, \"failed to check version of `x`: {}\", output.status);\n+    }\n+}\n+\n+// Parse latest version out of `x` Cargo.toml\n+fn get_x_wrapper_version(root: &Path, cargo: &Path) -> Option<Version> {\n+    let mut cmd = cargo_metadata::MetadataCommand::new();\n+    cmd.cargo_path(cargo)\n+        .manifest_path(root.join(\"src/tools/x/Cargo.toml\"))\n+        .no_deps()\n+        .features(cargo_metadata::CargoOpt::AllFeatures);\n+    let mut metadata = t!(cmd.exec());\n+    metadata.packages.pop().map(|x| x.version)\n+}"}, {"sha": "01f7187851e38d646d097b78a19f05c6564cc746", "filename": "src/tools/x/src/main.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab10908e8c32c4350b07fc6892b9e5f7e9ffa881/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2Fsrc%2Fmain.rs?ref=ab10908e8c32c4350b07fc6892b9e5f7e9ffa881", "patch": "@@ -52,6 +52,14 @@ fn exec_or_status(command: &mut Command) -> io::Result<ExitStatus> {\n }\n \n fn main() {\n+    match env::args().skip(1).next().as_deref() {\n+        Some(\"--wrapper-version\") => {\n+            let version = env!(\"CARGO_PKG_VERSION\");\n+            println!(\"{}\", version);\n+            return;\n+        }\n+        _ => {}\n+    }\n     let current = match env::current_dir() {\n         Ok(dir) => dir,\n         Err(err) => {"}]}