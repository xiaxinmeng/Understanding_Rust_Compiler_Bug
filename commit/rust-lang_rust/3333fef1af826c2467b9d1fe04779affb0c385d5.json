{"sha": "3333fef1af826c2467b9d1fe04779affb0c385d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMzNmZWYxYWY4MjZjMjQ2N2I5ZDFmZTA0Nzc5YWZmYjBjMzg1ZDU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-01-20T00:10:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-01-20T00:11:17Z"}, "message": "test: \"tag\" -> \"enum\" in run-pass and run-fail", "tree": {"sha": "fb9b8d3ed8732df541edaab59043c24b706f36c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb9b8d3ed8732df541edaab59043c24b706f36c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3333fef1af826c2467b9d1fe04779affb0c385d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3333fef1af826c2467b9d1fe04779affb0c385d5", "html_url": "https://github.com/rust-lang/rust/commit/3333fef1af826c2467b9d1fe04779affb0c385d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3333fef1af826c2467b9d1fe04779affb0c385d5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1461cfe4166b607b4059bc27a8ad96b28cc56a3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1461cfe4166b607b4059bc27a8ad96b28cc56a3b", "html_url": "https://github.com/rust-lang/rust/commit/1461cfe4166b607b4059bc27a8ad96b28cc56a3b"}], "stats": {"total": 168, "additions": 84, "deletions": 84}, "files": [{"sha": "4be3aec6490e95a9bcdfd5e2f612675c1e9ee50f", "filename": "src/test/run-fail/non-exhaustive-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fnon-exhaustive-match.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -4,6 +4,6 @@\n // -*- rust -*-\n \n // error-pattern:non-exhaustive match failure\n-tag t { a; b; }\n+enum t { a; b; }\n \n fn main() { let x = a; alt x { b { } } }"}, {"sha": "d023ec67b49db42f784c0a59137ec377d44a3a8f", "filename": "src/test/run-pass/alias-uninit-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -5,7 +5,7 @@ use std;\n import option;\n import option::none;\n \n-tag sty { ty_nil; }\n+enum sty { ty_nil; }\n \n type raw_t = {struct: sty, cname: option::t<str>, hash: uint};\n "}, {"sha": "8b7561c78b7595ef4b59b12f400a64b284d19859", "filename": "src/test/run-pass/alloca-from-derived-tydesc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag option<T> { some(T); none; }\n+enum option<T> { some(T); none; }\n \n type r<T> = {mutable v: [option<T>]};\n "}, {"sha": "c474b1d7df22fbdc2fdd7abe903742a72ca0b8a3", "filename": "src/test/run-pass/alt-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falt-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falt-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-path.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,7 +1,7 @@\n \n \n mod m1 {\n-    tag foo { foo1; foo2; }\n+    enum foo { foo1; foo2; }\n }\n \n fn bar(x: m1::foo) { alt x { m1::foo1 { } } }"}, {"sha": "73af1bacf575d903e5fca160c69435c1a13c2e43", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -5,7 +5,7 @@ use std;\n \n import std::dbg;\n \n-tag t { make_t(@int); clam; }\n+enum t { make_t(@int); clam; }\n \n fn foo(s: @int) {\n     let count = dbg::refcount(s);"}, {"sha": "1c5355f816a18c5fbd0af37b1772750789243b64", "filename": "src/test/run-pass/alt-pattern-no-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag maybe<T> { nothing; just(T); }\n+enum maybe<T> { nothing; just(T); }\n \n fn foo(x: maybe<int>) {\n     alt x { nothing { #error(\"A\"); } just(a) { #error(\"B\"); } }"}, {"sha": "fe7073d65f46560ce1805cfb8a474d2cdeceb297", "filename": "src/test/run-pass/alt-phi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falt-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falt-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-phi.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,6 +1,6 @@\n \n \n-tag thing { a; b; c; }\n+enum thing { a; b; c; }\n \n fn foo(it: block(int)) { it(10); }\n "}, {"sha": "9982da07d1e188146f80781505aa1c4652ce7f92", "filename": "src/test/run-pass/alt-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falt-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falt-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-str.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -3,7 +3,7 @@\n fn main() {\n     alt \"test\" { \"not-test\" { fail; } \"test\" { } _ { fail; } }\n \n-    tag t { tag1(str); tag2; }\n+    enum t { tag1(str); tag2; }\n \n \n     alt tag1(\"test\") {"}, {"sha": "42a3d2aa842cfe150018dfb4e2011f1c48cfd0d2", "filename": "src/test/run-pass/alt-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falt-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Falt-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-tag.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-tag color {\n+enum color {\n     rgb(int, int, int);\n     rgba(int, int, int, int);\n     hsl(int, int, int);"}, {"sha": "1b4f284c2a5363abfff1d2f2e8ffd835ecd9014e", "filename": "src/test/run-pass/box-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fbox-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fbox-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-pattern.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,5 +1,5 @@\n type foo = {a: int, b: uint};\n-tag bar { u(@foo); w(int); }\n+enum bar { u(@foo); w(int); }\n \n fn main() {\n     assert (alt u(@{a: 10, b: 40u}) {"}, {"sha": "effe019ccd39e8b504fbdf1e2f8c9b6aa2fc7d3f", "filename": "src/test/run-pass/chan-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-leak.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -8,7 +8,7 @@ import comm;\n import comm::port;\n import comm::recv;\n \n-tag request { quit; close(chan<bool>); }\n+enum request { quit; close(chan<bool>); }\n \n type ctx = chan<request>;\n "}, {"sha": "60955f88f27c8dd0fc10084abd650620569aaaa6", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -20,9 +20,9 @@ type t = int;\n type t = bool;\n \n #[cfg(bogus)]\n-tag tg { foo; }\n+enum tg { foo; }\n \n-tag tg { bar; }\n+enum tg { bar; }\n \n #[cfg(bogus)]\n resource r(i: int) { }"}, {"sha": "32602cd2e48401d7b9a8ef1eb76cbcb87923f1b5", "filename": "src/test/run-pass/constrained-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fconstrained-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fconstrained-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstrained-type.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,6 +1,6 @@\n // -*- rust -*-\n \n-tag list { cons(int, @list); nil; }\n+enum list { cons(int, @list); nil; }\n \n type bubu = {x: int, y: int};\n "}, {"sha": "d0c85d6774f584ff1cc998a9a696817fd5655853", "filename": "src/test/run-pass/cycle-collection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag taggy {\n+enum taggy {\n     cons(@mutable taggy);\n     nil;\n }"}, {"sha": "ec9627452cda746f424a4fa53a8d9e33573e700d", "filename": "src/test/run-pass/drop-on-empty-block-exit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,5 +1,5 @@\n \n \n-tag t { foo(@int); }\n+enum t { foo(@int); }\n \n fn main() { let tt = foo(@10); alt tt { foo(z) { } } }"}, {"sha": "ba7941e680e31ad711a5f316181cba7934d26c6b", "filename": "src/test/run-pass/empty-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-tag.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag chan { chan_t; }\n+enum chan { chan_t; }\n \n fn wrapper3(i: chan) {\n     assert i == chan_t;"}, {"sha": "cb820bc26cedb9c1eb3bebed52944aab5252aba6", "filename": "src/test/run-pass/export-abstract-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -5,7 +5,7 @@ mod foo {\n     export t;\n     export f;\n \n-    tag t { t1; }\n+    enum t { t1; }\n \n     fn f() -> t { ret t1; }\n }"}, {"sha": "630fb2919bf6779a7b615b6c027e13afc1b680dc", "filename": "src/test/run-pass/export-non-interference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -2,6 +2,6 @@\n export foo;\n export main;\n \n-tag list_cell<T> { cons(@list_cell<T>); }\n+enum list_cell<T> { cons(@list_cell<T>); }\n \n fn main() { }"}, {"sha": "9862fc1fbd7015cb7e3c25fbb6d7fcb64af226b3", "filename": "src/test/run-pass/export-tag-variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,8 +1,8 @@\n-// Export the tag variants, without the tag\n+// Export the enum variants, without the enum\n \n mod foo {\n     export t1;\n-    tag t { t1; }\n+    enum t { t1; }\n }\n \n fn main() { let v = foo::t1; }"}, {"sha": "71f2f9ca900388dc28a4d9404d6494d2b8c4b0b9", "filename": "src/test/run-pass/export-unexported-dep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -6,7 +6,7 @@ mod foo {\n     export g;\n \n     // not exported\n-    tag t { t1; t2; }\n+    enum t { t1; t2; }\n \n     fn f() -> t { ret t1; }\n "}, {"sha": "cee1bb22dee666324cfe08bb817aefa430ab86b8", "filename": "src/test/run-pass/expr-alt-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -10,7 +10,7 @@ fn test_rec() {\n }\n \n fn test_tag() {\n-    tag mood { happy; sad; }\n+    enum mood { happy; sad; }\n     let rs = alt true { true { happy } false { sad } };\n     assert (rs == happy);\n }"}, {"sha": "af19923d85d1c3e277fb7fadca0e2d336bc32e1e", "filename": "src/test/run-pass/expr-if-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -10,7 +10,7 @@ fn test_rec() {\n }\n \n fn test_tag() {\n-    tag mood { happy; sad; }\n+    enum mood { happy; sad; }\n     let rs = if true { happy } else { sad };\n     assert (rs == happy);\n }"}, {"sha": "fe7ca61121805393f8e85defb29cb52a201c0eaf", "filename": "src/test/run-pass/generic-ivec-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag wrapper<T> { wrapped(T); }\n+enum wrapper<T> { wrapped(T); }\n \n fn main() { let w = wrapped([1, 2, 3, 4, 5]); }\n "}, {"sha": "a39b5689970d3949be63399e8e3fb63b5e6eaf8a", "filename": "src/test/run-pass/generic-recursive-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,6 +1,6 @@\n \n \n-tag list<T> { cons(@T, @list<T>); nil; }\n+enum list<T> { cons(@T, @list<T>); nil; }\n \n fn main() {\n     let a: list<int> ="}, {"sha": "d3b0060a1ee1962ba22f70ef8c03f2a4a3269189", "filename": "src/test/run-pass/generic-tag-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,6 +1,6 @@\n \n \n-tag foo<T> { arm(T); }\n+enum foo<T> { arm(T); }\n \n fn altfoo<T>(f: foo<T>) {\n     let hit = false;"}, {"sha": "2487129ecae2a19af3998420248ef1ddb0600554", "filename": "src/test/run-pass/generic-tag-corruption.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -2,6 +2,6 @@\n \n \n // This causes memory corruption in stage0.\n-tag thing<K> { some(K); }\n+enum thing<K> { some(K); }\n \n fn main() { let x = some(\"hi\"); }"}, {"sha": "dd03f3852a9dc5edef01425084b46c8ae43ab655", "filename": "src/test/run-pass/generic-tag-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,5 +1,5 @@\n \n \n-tag clam<T> { a(T); }\n+enum clam<T> { a(T); }\n \n fn main() { let c = a(3); }"}, {"sha": "6bedc222024af398e5a4bcd498e52d6658a77146", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-tag noption<T> { some(T); }\n+enum noption<T> { some(T); }\n \n fn main() {\n     let nop: noption<int> = some::<int>(5);"}, {"sha": "88eda46ab1733489746b840e0840e6ab498c300e", "filename": "src/test/run-pass/generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,5 +1,5 @@\n \n \n-tag option<T> { some(@T); none; }\n+enum option<T> { some(@T); none; }\n \n fn main() { let a: option<int> = some::<int>(@10); a = none::<int>; }"}, {"sha": "333779fbc6db24bcf88fc14426f1cd5ac18ceb09", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -30,7 +30,7 @@ mod map_reduce {\n \n     type mapper = native fn(str, putter);\n \n-    tag ctrl_proto { find_reducer([u8], chan<int>); mapper_done; }\n+    enum ctrl_proto { find_reducer([u8], chan<int>); mapper_done; }\n \n     fn start_mappers(ctrl: chan<ctrl_proto>, inputs: [str]) {\n         for i: str in inputs {"}, {"sha": "94dbc3fcdb044e772a62510ad3ebd7b20521e8e4", "filename": "src/test/run-pass/iface-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fiface-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fiface-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiface-cast.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,6 +1,6 @@\n // Test cyclic detector when using iface instances.\n \n-tag Tree = TreeR;\n+enum Tree = TreeR;\n type TreeR = @{\n     mutable left: option<Tree>,\n     mutable right: option<Tree>,"}, {"sha": "556ad530c34d9128edfde9d55edecb997a78ab7d", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -22,7 +22,7 @@ fn test_rec() {\n }\n \n fn test_tag() {\n-    tag t {\n+    enum t {\n         t0(r);\n     }\n \n@@ -62,7 +62,7 @@ fn test_box_rec() {\n fn main() {\n     test_box();\n     test_rec();\n-    // FIXME: tag constructors don't optimize their arguments into moves\n+    // FIXME: enum constructors don't optimize their arguments into moves\n     // test_tag();\n     test_tup();\n     test_unique();"}, {"sha": "18f2978a018a8c85946c638328a8bbc7172eb803", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -7,7 +7,7 @@ import comm::port;\n import comm::recv;\n import comm::send;\n \n-tag msg { closed; received([u8]); }\n+enum msg { closed; received([u8]); }\n \n fn producer(c: chan<[u8]>) {\n     send(c, [1u8, 2u8, 3u8, 4u8]);"}, {"sha": "f256a936431ecbff97f7b7338bb3cf06273e3110", "filename": "src/test/run-pass/issue-970.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fissue-970.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fissue-970.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-970.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag maybe_ordered_pair {\n+enum maybe_ordered_pair {\n     yes({low: int, high: int} : less_than(*.low, *.high));\n     no;\n }"}, {"sha": "4f4ed283265f20ff0da66fd8188404327e6a664e", "filename": "src/test/run-pass/issue-980.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fissue-980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fissue-980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-980.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag maybe_pointy {\n+enum maybe_pointy {\n     no_pointy;\n     yes_pointy(@pointy);\n }"}, {"sha": "eca6134f94d9ab7c100371f33313a4970da5463b", "filename": "src/test/run-pass/leak-tag-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,5 +1,5 @@\n \n \n-tag t { a; b(@int); }\n+enum t { a; b(@int); }\n \n fn main() { let x = b(@10); x = a; }"}, {"sha": "932cd3f0bd0e45d981a77b40768d3e42a9e57b73", "filename": "src/test/run-pass/let-destruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Flet-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Flet-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-destruct.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag xx = int;\n+enum xx = int;\n \n fn main() {\n     let @{x: xx(x), y: y} = @{x: xx(10), y: 20};"}, {"sha": "e0f372cf7266f00f0bf1f95c72422ee4c5ac876f", "filename": "src/test/run-pass/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flist.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -2,6 +2,6 @@\n \n \n // -*- rust -*-\n-tag list { cons(int, @list); nil; }\n+enum list { cons(int, @list); nil; }\n \n fn main() { cons(10, @cons(11, @cons(12, @nil))); }"}, {"sha": "ca4a40074b6e1118c892b82993732b1f07899dc4", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,7 +1,7 @@\n use std;\n import std::list;\n \n-tag foo {\n+enum foo {\n   a(uint);\n   b(str);\n }"}, {"sha": "6850ad761e38bf26b3717128f069af540a55dc33", "filename": "src/test/run-pass/log-knows-the-names-of-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag foo {\n+enum foo {\n   a(uint);\n   b(str);\n   c;"}, {"sha": "725643f7317f5206153b56f1ad64fc6d4cee58cc", "filename": "src/test/run-pass/log-linearized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,6 +1,6 @@\n // Tests that shapes respect linearize_ty_params().\n \n-tag option<T> {\n+enum option<T> {\n     none;\n     some(T);\n }"}, {"sha": "b44514021a440bc09370bf7a091c928d188c89f7", "filename": "src/test/run-pass/mlist-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -4,7 +4,7 @@ use std;\n \n type cell = {mutable c: @list};\n \n-tag list { link(@cell); nil; }\n+enum list { link(@cell); nil; }\n \n fn main() {\n     let first: @cell = @{mutable c: @nil()};"}, {"sha": "8746dfc949df66e5b6fd59446ef131e0e50bba6c", "filename": "src/test/run-pass/mlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fmlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fmlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmlist.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n // -*- rust -*-\n-tag mlist { cons(int, @mlist); nil; }\n+enum mlist { cons(int, @mlist); nil; }\n \n fn main() { cons(10, @cons(11, @cons(12, @nil))); }"}, {"sha": "516a04203e33474aa3a9dc941265ffa540400bcb", "filename": "src/test/run-pass/mutual-recursion-group.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fmutual-recursion-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fmutual-recursion-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutual-recursion-group.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -2,12 +2,12 @@\n \n \n // -*- rust -*-\n-tag colour { red; green; blue; }\n+enum colour { red; green; blue; }\n \n-tag tree { children(@list); leaf(colour); }\n+enum tree { children(@list); leaf(colour); }\n \n-tag list { cons(@tree, @list); nil; }\n+enum list { cons(@tree, @list); nil; }\n \n-tag small_list { kons(int, @small_list); neel; }\n+enum small_list { kons(int, @small_list); neel; }\n \n fn main() { }"}, {"sha": "af8b2632ece7c3d29acdf582e9ee1f5e21c4805d", "filename": "src/test/run-pass/nested-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-pattern.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -6,7 +6,7 @@ import option;\n import option::some;\n import option::none;\n \n-tag t { foo(int, uint); bar(int, option::t<int>); }\n+enum t { foo(int, uint); bar(int, option::t<int>); }\n \n fn nested(o: t) {\n     alt o {"}, {"sha": "69efb129146700b8eb03dd735618a0f9f6e67ef2", "filename": "src/test/run-pass/newtype-polymorphic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag myvec<X> = [X];\n+enum myvec<X> = [X];\n \n fn myvec_deref<X: copy>(mv: myvec<X>) -> [X] { ret *mv; }\n "}, {"sha": "32fde0f4edc491bef41008c27af1f795cb3c14b0", "filename": "src/test/run-pass/newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag mytype = {compute: native fn(mytype) -> int, val: int};\n+enum mytype = {compute: native fn(mytype) -> int, val: int};\n \n fn compute(i: mytype) -> int { ret i.val + 20; }\n "}, {"sha": "2081dd3074887fdc41c1733f8338fbf5e1224101", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -13,7 +13,7 @@ pure fn nonempty_list<T: copy>(ls: list<T>) -> bool { pure_length(ls) > 0u }\n // Of course, the compiler can't take advantage of the\n // knowledge that ls is a cons node. Future work.\n // Also, this is pretty contrived since nonempty_list\n-// could be a \"tag refinement\", if we implement those.\n+// could be a \"enum refinement\", if we implement those.\n fn safe_head<T: copy>(ls: list<T>) : nonempty_list(ls) -> T {\n     check is_not_empty(ls);\n     ret head(ls);"}, {"sha": "6efbafa1c072227cd4af8b3786762f9e0bb98d4b", "filename": "src/test/run-pass/nullary-or-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fnullary-or-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fnullary-or-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullary-or-pattern.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag blah { a; b; }\n+enum blah { a; b; }\n \n fn or_alt(q: blah) -> int {\n   alt q { a | b { 42 } }"}, {"sha": "6b78b381f00b5126f6feeb64ebf456ad76649a4b", "filename": "src/test/run-pass/or-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2For-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2For-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2For-pattern.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag blah { a(int, int, uint); b(int, int); c; }\n+enum blah { a(int, int, uint); b(int, int); c; }\n \n fn or_alt(q: blah) -> int {\n     alt q { a(x, y, _) | b(x, y) { ret x + y; } c { ret 0; } }"}, {"sha": "d06bfe9c720009524dec3374c07cf12b682e69a3", "filename": "src/test/run-pass/record-pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Frecord-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Frecord-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frecord-pat.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,6 +1,6 @@\n-tag t1 { a(int); b(uint); }\n+enum t1 { a(int); b(uint); }\n type t2 = {x: t1, y: int};\n-tag t3 { c(t2, uint); }\n+enum t3 { c(t2, uint); }\n \n fn m(in: t3) -> int {\n     alt in {"}, {"sha": "81dc1680442dc8406a747a4f57a3f90bcb555e6f", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -5,7 +5,7 @@ type closable = @mutable bool;\n \n resource close_res(i: closable) { *i = false; }\n \n-tag option<T> { none; some(T); }\n+enum option<T> { none; some(T); }\n \n fn sink(res: option<close_res>) { }\n "}, {"sha": "a32e09c139e9e27a8cffa6d71ed3e2376efe97eb", "filename": "src/test/run-pass/ret-none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fret-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fret-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-none.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,6 +1,6 @@\n \n \n-tag option<T> { none; some(T); }\n+enum option<T> { none; some(T); }\n \n fn f<T: copy>() -> option<T> { ret none; }\n "}, {"sha": "05215d5e3f6d1864ac1361e552c730c294ed64e2", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -16,6 +16,6 @@ fn foo(c: [int]) {\n     }\n }\n \n-tag t<T> { none; some(T); }\n+enum t<T> { none; some(T); }\n \n fn main() { let x = 10; let x = x + 20; assert (x == 30); foo([]); }"}, {"sha": "f40309ec3a152a57b0efb9684e50125315512b91", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,13 +1,13 @@\n // Exercises a bug in the shape code that was exposed\n-// on x86_64: when there is a tag embedded in an\n+// on x86_64: when there is a enum embedded in an\n // interior record which is then itself interior to\n // something else, shape calculations were off.\n use std;\n import std::list;\n import std::list::list;\n import option;\n \n-tag opt_span {\n+enum opt_span {\n \n     //hack (as opposed to option::t), to make `span` compile\n     os_none;"}, {"sha": "3e7df3063614ce208e2971199d06ce6128f57c2e", "filename": "src/test/run-pass/simple-alt-generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,6 +1,6 @@\n \n \n-tag opt<T> { none; }\n+enum opt<T> { none; }\n \n fn main() {\n     let x = none::<int>;"}, {"sha": "743277d461c29ce7ef6912c6b3f6f6059fd15ba4", "filename": "src/test/run-pass/simple-generic-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fsimple-generic-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fsimple-generic-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-generic-alt.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,5 +1,5 @@\n \n \n-tag clam<T> { a(T); }\n+enum clam<T> { a(T); }\n \n fn main() { let c = a(2); alt c { a::<int>(_) { } } }"}, {"sha": "3a0843d8e919af3264782b7ff7f54a804e686c40", "filename": "src/test/run-pass/simple-generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fsimple-generic-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fsimple-generic-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-generic-tag.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,5 +1,5 @@\n \n \n-tag clam<T> { a(T); }\n+enum clam<T> { a(T); }\n \n fn main() { }"}, {"sha": "bb4afdb4c3de0ff4e13b4a0968d03e1646e8cc85", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-tag clam<T> { a(T, int); b; }\n+enum clam<T> { a(T, int); b; }\n \n fn uhoh<T>(v: [clam<T>]) {\n     alt v[1] {"}, {"sha": "72d75a33bf091c52a8ecabfec878d757e8dc5b5c", "filename": "src/test/run-pass/structured-compare-recursive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fstructured-compare-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fstructured-compare-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructured-compare-recursive.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,5 +1,5 @@\n \n \n-tag taggy { foo(@taggy); bar; }\n+enum taggy { foo(@taggy); bar; }\n \n fn main() { assert (bar <= bar); }"}, {"sha": "014196c87583f9271b2972f933095ab92556eba3", "filename": "src/test/run-pass/structured-compare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructured-compare.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,6 +1,6 @@\n \n \n-tag foo { large; small; }\n+enum foo { large; small; }\n \n fn main() {\n     let a = {x: 1, y: 2, z: 3};"}, {"sha": "0c8b23e3dc3f7c6c763597507fcbe7bd897902b9", "filename": "src/test/run-pass/tag-disr-val-shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,6 +1,6 @@\n // xfail-pretty Issue #1510\n \n-tag color {\n+enum color {\n     red = 0xff0000;\n     green = 0x00ff00;\n     blue = 0x0000ff;"}, {"sha": "fe74c1e5ed7c9140648beb82200c903f96ca13d2", "filename": "src/test/run-pass/tag-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Ftag-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Ftag-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-in-block.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -2,7 +2,7 @@\n \n fn foo() {\n     fn zed(z: bar) { }\n-    tag bar { nil; }\n+    enum bar { nil; }\n     fn baz() { zed(nil); }\n }\n "}, {"sha": "65deb3ed0cb1fc9a2ca400c286223e3acf159ef0", "filename": "src/test/run-pass/tag-variant-disr-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag color {\n+enum color {\n     red = 0xff0000;\n     green = 0x00ff00;\n     blue = 0x0000ff;"}, {"sha": "76d6b8069dbd24168b54b892b5fb19d6111e2721", "filename": "src/test/run-pass/tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Ftag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Ftag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-tag colour { red(int, int); green; }\n+enum colour { red(int, int); green; }\n \n fn f() { let x = red(1, 2); let y = green; assert (x != y); }\n "}, {"sha": "63e39789657ad3085c7d1a58aa6f0aaf93c09ab8", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -50,7 +50,7 @@ fn test_str() {\n }\n \n fn test_tag() {\n-    tag t { tag1; tag2(int); tag3(int, u8, char); }\n+    enum t { tag1; tag2(int); tag3(int, u8, char); }\n     let po = port();\n     let ch = chan(po);\n     send(ch, tag1);"}, {"sha": "b2069f3a265152c27d09f03dd95e1ff7f03e7954", "filename": "src/test/run-pass/unchecked-predicates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -26,7 +26,7 @@ pure fn nonempty_list<T: copy>(ls: list<T>) -> bool { pure_length(ls) > 0u }\n // Of course, the compiler can't take advantage of the\n // knowledge that ls is a cons node. Future work.\n // Also, this is pretty contrived since nonempty_list\n-// could be a \"tag refinement\", if we implement those.\n+// could be a \"enum refinement\", if we implement those.\n fn safe_head<T: copy>(ls: list<T>) : nonempty_list(ls) -> T {\n     check is_not_empty(ls);\n     ret head(ls)"}, {"sha": "536696d18d1cb76a5f0425d3dfd35f21e4185a4c", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag maybe_pointy {\n+enum maybe_pointy {\n     none;\n     p(@pointy);\n }"}, {"sha": "de3ef188fb3fa3246a3bc42ca23e373d777c0188", "filename": "src/test/run-pass/uniq-cc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,4 +1,4 @@\n-tag maybe_pointy {\n+enum maybe_pointy {\n     none;\n     p(@pointy);\n }"}, {"sha": "88afe81b926aa1bcdd4ded2c5860759d2cd8da8b", "filename": "src/test/run-pass/unique-containing-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    tag t { t1(int); t2(int); }\n+    enum t { t1(int); t2(int); }\n \n     let x = ~t1(10);\n "}, {"sha": "443193f342e7bc75055ac0cd28a464a8f400c1c2", "filename": "src/test/run-pass/unique-in-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-tag.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,5 +1,5 @@\n fn test1() {\n-    tag bar { u(~int); w(int); }\n+    enum bar { u(~int); w(int); }\n \n     let x = u(~10);\n     assert alt x {"}, {"sha": "f461560ff847d21369fcabd313629d4a1c6b57e3", "filename": "src/test/run-pass/unique-pat-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Funique-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Funique-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-2.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,6 +1,6 @@\n \n type foo = {a: int, b: uint};\n-tag bar { u(~foo); w(int); }\n+enum bar { u(~foo); w(int); }\n \n fn main() {\n     assert (alt u(~{a: 10, b: 40u}) {"}, {"sha": "cb744685b05d00b8dfed9daa2078aa37d5991b6e", "filename": "src/test/run-pass/unique-pat-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-3.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,5 +1,5 @@\n \n-tag bar { u(~int); w(int); }\n+enum bar { u(~int); w(int); }\n \n fn main() {\n     assert alt u(~10) {"}, {"sha": "b0a5e79c6f93d32c97cb466f491292171177deb2", "filename": "src/test/run-pass/use-uninit-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -6,6 +6,6 @@ fn foo<T>(o: myoption<T>) -> int {\n     ret x;\n }\n \n-tag myoption<T> { none; some(T); }\n+enum myoption<T> { none; some(T); }\n \n fn main() { log(debug, 5); }"}, {"sha": "106c9af5f4ccd2bdfd6eac492db88f8482215a3a", "filename": "src/test/run-pass/use-uninit-alt2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -6,6 +6,6 @@ fn foo<T>(o: myoption<T>) -> int {\n     ret x;\n }\n \n-tag myoption<T> { none; some(T); }\n+enum myoption<T> { none; some(T); }\n \n fn main() { log(debug, 5); }"}, {"sha": "c2f84ada888bca406a7a7bee680a11fa3b6faf63", "filename": "src/test/run-pass/while-prelude-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333fef1af826c2467b9d1fe04779affb0c385d5/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs?ref=3333fef1af826c2467b9d1fe04779affb0c385d5", "patch": "@@ -1,5 +1,5 @@\n \n-tag t { a; b(str); }\n+enum t { a; b(str); }\n \n fn make(i: int) -> t {\n     if i > 10 { ret a; }"}]}