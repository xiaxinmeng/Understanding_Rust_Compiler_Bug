{"sha": "194451345dc6b7d269a5ded6fde49883cb862d75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NDQ1MTM0NWRjNmI3ZDI2OWE1ZGVkNmZkZTQ5ODgzY2I4NjJkNzU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-28T11:23:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-28T11:23:35Z"}, "message": "add an option to track raw pointer tags in Stacked Borrows", "tree": {"sha": "e96c3942e30543ad160ea0984f6a562b58d40c19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e96c3942e30543ad160ea0984f6a562b58d40c19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/194451345dc6b7d269a5ded6fde49883cb862d75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/194451345dc6b7d269a5ded6fde49883cb862d75", "html_url": "https://github.com/rust-lang/rust/commit/194451345dc6b7d269a5ded6fde49883cb862d75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/194451345dc6b7d269a5ded6fde49883cb862d75/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f7b35327cd4747da1a20a187fbaf220ee4a09c", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f7b35327cd4747da1a20a187fbaf220ee4a09c", "html_url": "https://github.com/rust-lang/rust/commit/39f7b35327cd4747da1a20a187fbaf220ee4a09c"}], "stats": {"total": 82, "additions": 43, "deletions": 39}, "files": [{"sha": "0aa22a81ad5cb81f3ee29ca03cda06dca4416f43", "filename": "README.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/194451345dc6b7d269a5ded6fde49883cb862d75/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/194451345dc6b7d269a5ded6fde49883cb862d75/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=194451345dc6b7d269a5ded6fde49883cb862d75", "patch": "@@ -232,13 +232,17 @@ environment variable:\n * `-Zmiri-track-alloc-id=<id>` shows a backtrace when the given allocation is\n   being allocated or freed.  This helps in debugging memory leaks and\n   use after free bugs.\n+* `-Zmiri-track-call-id=<id>` shows a backtrace when the given call id is\n+  assigned to a stack frame.  This helps in debugging UB related to Stacked\n+  Borrows \"protectors\".\n * `-Zmiri-track-pointer-tag=<tag>` shows a backtrace when the given pointer tag\n   is popped from a borrow stack (which is where the tag becomes invalid and any\n   future use of it will error).  This helps you in finding out why UB is\n   happening and where in your code would be a good place to look for it.\n-* `-Zmiri-track-call-id=<id>` shows a backtrace when the given call id is\n-  assigned to a stack frame.  This helps in debugging UB related to Stacked\n-  Borrows \"protectors\".\n+* `-Zmiri-track-raw-pointers` makes Stacked Borrows track a pointer tag even for\n+  raw pointers. This can make valid code fail to pass the checks (when\n+  integer-pointer casts are involved), but also can help identify latent\n+  aliasing issues in code that Miri accepts by default.\n \n Some native rustc `-Z` flags are also very relevant for Miri:\n "}, {"sha": "ef1429a35020aa8674720b386bdb22bd44005af1", "filename": "src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/194451345dc6b7d269a5ded6fde49883cb862d75/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194451345dc6b7d269a5ded6fde49883cb862d75/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=194451345dc6b7d269a5ded6fde49883cb862d75", "patch": "@@ -207,6 +207,9 @@ fn main() {\n                 \"-Zmiri-ignore-leaks\" => {\n                     miri_config.ignore_leaks = true;\n                 }\n+                \"-Zmiri-track-raw-pointers\" => {\n+                    miri_config.track_raw = true;\n+                }\n                 \"--\" => {\n                     after_dashdash = true;\n                 }"}, {"sha": "54d06feec36dd256925afbb36f3b30eccfa38773", "filename": "src/eval.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/194451345dc6b7d269a5ded6fde49883cb862d75/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194451345dc6b7d269a5ded6fde49883cb862d75/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=194451345dc6b7d269a5ded6fde49883cb862d75", "patch": "@@ -3,8 +3,6 @@\n use std::convert::TryFrom;\n use std::ffi::OsStr;\n \n-use rand::rngs::StdRng;\n-use rand::SeedableRng;\n use log::info;\n \n use rustc_hir::def_id::DefId;\n@@ -48,6 +46,8 @@ pub struct MiriConfig {\n     pub tracked_call_id: Option<CallId>,\n     /// The allocation id to report about.\n     pub tracked_alloc_id: Option<AllocId>,\n+    /// Whether to track raw pointers in stacked borrows.\n+    pub track_raw: bool,\n }\n \n impl Default for MiriConfig {\n@@ -64,6 +64,7 @@ impl Default for MiriConfig {\n             tracked_pointer_tag: None,\n             tracked_call_id: None,\n             tracked_alloc_id: None,\n+            track_raw: false,\n         }\n     }\n }\n@@ -84,14 +85,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         rustc_span::source_map::DUMMY_SP,\n         param_env,\n         Evaluator::new(config.communicate, config.validate, layout_cx),\n-        MemoryExtra::new(\n-            StdRng::seed_from_u64(config.seed.unwrap_or(0)),\n-            config.stacked_borrows,\n-            config.tracked_pointer_tag,\n-            config.tracked_call_id,\n-            config.tracked_alloc_id,\n-            config.check_alignment,\n-        ),\n+        MemoryExtra::new(&config),\n     );\n     // Complete initialization.\n     EnvVars::init(&mut ecx, config.excluded_env_vars)?;"}, {"sha": "e9f9298e566c8d3d6a192e207d4cbee0b2258ba0", "filename": "src/machine.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/194451345dc6b7d269a5ded6fde49883cb862d75/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194451345dc6b7d269a5ded6fde49883cb862d75/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=194451345dc6b7d269a5ded6fde49883cb862d75", "patch": "@@ -10,6 +10,7 @@ use std::fmt;\n \n use log::trace;\n use rand::rngs::StdRng;\n+use rand::SeedableRng;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::{\n@@ -132,16 +133,14 @@ pub struct MemoryExtra {\n }\n \n impl MemoryExtra {\n-    pub fn new(\n-        rng: StdRng,\n-        stacked_borrows: bool,\n-        tracked_pointer_tag: Option<PtrId>,\n-        tracked_call_id: Option<CallId>,\n-        tracked_alloc_id: Option<AllocId>,\n-        check_alignment: AlignmentCheck,\n-    ) -> Self {\n-        let stacked_borrows = if stacked_borrows {\n-            Some(Rc::new(RefCell::new(stacked_borrows::GlobalState::new(tracked_pointer_tag, tracked_call_id))))\n+    pub fn new(config: &MiriConfig) -> Self {\n+        let rng = StdRng::seed_from_u64(config.seed.unwrap_or(0));\n+        let stacked_borrows = if config.stacked_borrows {\n+            Some(Rc::new(RefCell::new(stacked_borrows::GlobalState::new(\n+                config.tracked_pointer_tag,\n+                config.tracked_call_id,\n+                config.track_raw,\n+            ))))\n         } else {\n             None\n         };\n@@ -150,8 +149,8 @@ impl MemoryExtra {\n             intptrcast: Default::default(),\n             extern_statics: FxHashMap::default(),\n             rng: RefCell::new(rng),\n-            tracked_alloc_id,\n-            check_alignment,\n+            tracked_alloc_id: config.tracked_alloc_id,\n+            check_alignment: config.check_alignment,\n         }\n     }\n "}, {"sha": "616950eb0a0a44a5ca923ae78a7a68c3c2c6e9e3", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/194451345dc6b7d269a5ded6fde49883cb862d75/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194451345dc6b7d269a5ded6fde49883cb862d75/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=194451345dc6b7d269a5ded6fde49883cb862d75", "patch": "@@ -108,6 +108,8 @@ pub struct GlobalState {\n     tracked_pointer_tag: Option<PtrId>,\n     /// The call id to trace\n     tracked_call_id: Option<CallId>,\n+    /// Whether to track raw pointers.\n+    track_raw: bool,\n }\n /// Memory extra state gives us interior mutable access to the global state.\n pub type MemoryExtra = Rc<RefCell<GlobalState>>;\n@@ -155,14 +157,15 @@ impl fmt::Display for RefKind {\n \n /// Utilities for initialization and ID generation\n impl GlobalState {\n-    pub fn new(tracked_pointer_tag: Option<PtrId>, tracked_call_id: Option<CallId>) -> Self {\n+    pub fn new(tracked_pointer_tag: Option<PtrId>, tracked_call_id: Option<CallId>, track_raw: bool) -> Self {\n         GlobalState {\n             next_ptr_id: NonZeroU64::new(1).unwrap(),\n             base_ptr_ids: FxHashMap::default(),\n             next_call_id: NonZeroU64::new(1).unwrap(),\n             active_calls: FxHashSet::default(),\n             tracked_pointer_tag,\n             tracked_call_id,\n+            track_raw,\n         }\n     }\n \n@@ -479,9 +482,12 @@ impl Stacks {\n             // The base pointer is not unique, so the base permission is `SharedReadWrite`.\n             MemoryKind::Machine(MiriMemoryKind::Global | MiriMemoryKind::ExternStatic | MiriMemoryKind::Tls | MiriMemoryKind::Env) =>\n                 (extra.borrow_mut().global_base_ptr(id), Permission::SharedReadWrite),\n-            // Everything else we handle entirely untagged for now.\n-            // FIXME: experiment with more precise tracking.\n-            _ => (Tag::Untagged, Permission::SharedReadWrite),\n+            // Everything else we handle like raw pointers for now.\n+            _ => {\n+                let mut extra = extra.borrow_mut();\n+                let tag = if extra.track_raw { Tag::Tagged(extra.new_ptr()) } else { Tag::Untagged };\n+                (tag, Permission::SharedReadWrite)\n+            }\n         };\n         (Stacks::new(size, perm, tag, extra), tag)\n     }\n@@ -593,16 +599,14 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n \n         // Compute new borrow.\n-        let new_tag = match kind {\n-            // Give up tracking for raw pointers.\n-            // FIXME: Experiment with more precise tracking. Blocked on `&raw`\n-            // because `Rc::into_raw` currently creates intermediate references,\n-            // breaking `Rc::from_raw`.\n-            RefKind::Raw { .. } => Tag::Untagged,\n-            // All other pointesr are properly tracked.\n-            _ => Tag::Tagged(\n-                this.memory.extra.stacked_borrows.as_ref().unwrap().borrow_mut().new_ptr(),\n-            ),\n+        let new_tag = {\n+            let mut mem_extra = this.memory.extra.stacked_borrows.as_ref().unwrap().borrow_mut();\n+            match kind {\n+                // Give up tracking for raw pointers.\n+                RefKind::Raw { .. } if !mem_extra.track_raw => Tag::Untagged,\n+                // All other pointers are properly tracked.\n+                _ => Tag::Tagged(mem_extra.new_ptr()),\n+            }\n         };\n \n         // Reborrow."}]}