{"sha": "049e8ca7f7fc42501b98afcb9c32fd51080bd75a", "node_id": "C_kwDOAAsO6NoAKDA0OWU4Y2E3ZjdmYzQyNTAxYjk4YWZjYjljMzJmZDUxMDgwYmQ3NWE", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-12-09T01:31:19Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-12-09T02:09:46Z"}, "message": "Refactor float arith with `#[must_use]`", "tree": {"sha": "39dfd776d96b7e7efee8d0c70c6e6ebe7d10e451", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39dfd776d96b7e7efee8d0c70c6e6ebe7d10e451"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/049e8ca7f7fc42501b98afcb9c32fd51080bd75a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/049e8ca7f7fc42501b98afcb9c32fd51080bd75a", "html_url": "https://github.com/rust-lang/rust/commit/049e8ca7f7fc42501b98afcb9c32fd51080bd75a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/049e8ca7f7fc42501b98afcb9c32fd51080bd75a/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aef340b8b0658e34b54fdea59e5ffc5ec581106", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aef340b8b0658e34b54fdea59e5ffc5ec581106", "html_url": "https://github.com/rust-lang/rust/commit/8aef340b8b0658e34b54fdea59e5ffc5ec581106"}], "stats": {"total": 78, "additions": 64, "deletions": 14}, "files": [{"sha": "65b461d39818baed52294dbbf6e061657c106b69", "filename": "crates/core_simd/src/ops.rs", "status": "modified", "additions": 64, "deletions": 14, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/049e8ca7f7fc42501b98afcb9c32fd51080bd75a/crates%2Fcore_simd%2Fsrc%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049e8ca7f7fc42501b98afcb9c32fd51080bd75a/crates%2Fcore_simd%2Fsrc%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops.rs?ref=049e8ca7f7fc42501b98afcb9c32fd51080bd75a", "patch": "@@ -220,6 +220,70 @@ bitops! {\n     }\n }\n \n+macro_rules! float_arith {\n+    ($(impl<const LANES: usize> FloatArith for Simd<$float:ty, LANES> {\n+        fn add(self, rhs: Self) -> Self::Output;\n+        fn mul(self, rhs: Self) -> Self::Output;\n+        fn sub(self, rhs: Self) -> Self::Output;\n+        fn div(self, rhs: Self) -> Self::Output;\n+        fn rem(self, rhs: Self) -> Self::Output;\n+     })*) => {\n+        $(\n+            unsafe_base_op!{\n+                impl<const LANES: usize> Add for Simd<$float, LANES> {\n+                    fn add(self, rhs: Self) -> Self::Output {\n+                        unsafe { simd_add }\n+                    }\n+                }\n+\n+                impl<const LANES: usize> Mul for Simd<$float, LANES> {\n+                    fn mul(self, rhs: Self) -> Self::Output {\n+                        unsafe { simd_mul }\n+                    }\n+                }\n+\n+                impl<const LANES: usize> Sub for Simd<$float, LANES> {\n+                    fn sub(self, rhs: Self) -> Self::Output {\n+                        unsafe { simd_sub }\n+                    }\n+                }\n+\n+                impl<const LANES: usize> Div for Simd<$float, LANES> {\n+                    fn div(self, rhs: Self) -> Self::Output {\n+                        unsafe { simd_div }\n+                    }\n+                }\n+\n+                impl<const LANES: usize> Rem for Simd<$float, LANES> {\n+                    fn rem(self, rhs: Self) -> Self::Output {\n+                        unsafe { simd_rem }\n+                    }\n+                }\n+            }\n+        )*\n+    };\n+}\n+\n+// We don't need any special precautions here:\n+// Floats always accept arithmetic ops, but may become NaN.\n+float_arith! {\n+    impl<const LANES: usize> FloatArith for Simd<f32, LANES> {\n+        fn add(self, rhs: Self) -> Self::Output;\n+        fn mul(self, rhs: Self) -> Self::Output;\n+        fn sub(self, rhs: Self) -> Self::Output;\n+        fn div(self, rhs: Self) -> Self::Output;\n+        fn rem(self, rhs: Self) -> Self::Output;\n+    }\n+\n+    impl<const LANES: usize> FloatArith for Simd<f64, LANES> {\n+        fn add(self, rhs: Self) -> Self::Output;\n+        fn mul(self, rhs: Self) -> Self::Output;\n+        fn sub(self, rhs: Self) -> Self::Output;\n+        fn div(self, rhs: Self) -> Self::Output;\n+        fn rem(self, rhs: Self) -> Self::Output;\n+    }\n+}\n+\n /// Automatically implements operators over references in addition to the provided operator.\n macro_rules! impl_ref_ops {\n     // binary op\n@@ -284,19 +348,6 @@ macro_rules! impl_op {\n     };\n }\n \n-/// Implements floating-point operators for the provided types.\n-macro_rules! impl_float_ops {\n-    { $($scalar:ty),* } => {\n-        $(\n-            impl_op! { impl Add for $scalar }\n-            impl_op! { impl Sub for $scalar }\n-            impl_op! { impl Mul for $scalar }\n-            impl_op! { impl Div for $scalar }\n-            impl_op! { impl Rem for $scalar }\n-        )*\n-    };\n-}\n-\n /// Implements unsigned integer operators for the provided types.\n macro_rules! impl_unsigned_int_ops {\n     { $($scalar:ty),* } => {\n@@ -375,4 +426,3 @@ macro_rules! impl_signed_int_ops {\n \n impl_unsigned_int_ops! { u8, u16, u32, u64, usize }\n impl_signed_int_ops! { i8, i16, i32, i64, isize }\n-impl_float_ops! { f32, f64 }"}]}