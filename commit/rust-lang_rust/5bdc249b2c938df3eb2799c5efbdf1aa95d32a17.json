{"sha": "5bdc249b2c938df3eb2799c5efbdf1aa95d32a17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZGMyNDliMmM5MzhkZjNlYjI3OTljNWVmYmRmMWFhOTVkMzJhMTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-16T11:48:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-16T11:48:46Z"}, "message": "Merge #3587\n\n3587: Use WorkDoneProgress LSP API for initial load r=matklad a=slyngbaek\n\nAddresses #3283\r\n\r\nRather than using custom UI for showing the loaded state. Rely\r\non the WorkDoneProgress API in 3.15.0\r\nhttps://microsoft.github.io/language-server-protocol/specification#workDoneProgress.\r\n\r\nNo client-side work was necessary. The UI is not exactly what is\r\ndescribed in the issue but afaict that's how VS Code implements the LSP\r\nAPI.\r\n\r\n- The WorkDoneProgressEnd does not appear to display its message\r\n  contents (controlled by vscode)\n\nCo-authored-by: Steffen Lyngbaek <steffenlyngbaek@gmail.com>", "tree": {"sha": "8f3911d67773d8fc7af55234dfbdd4d0a7ad4f8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f3911d67773d8fc7af55234dfbdd4d0a7ad4f8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bdc249b2c938df3eb2799c5efbdf1aa95d32a17", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeb2eeCRBK7hj4Ov3rIwAAdHIIAEwtqlP7CCkX9vVrq50Eme9a\nHMwlmKw+UMZWZIkwmNfMRH5Gry7m073Vju7udRkOm/zZi43fvQbcYIsGWX33KTD2\nwqDQPxt42UFe0GQibc8qLm8+6ivZ0nebld+fCgn/LmVLEp9mL69EoaFo+CnY57rE\nZB3lu+maYjMC6ADy0NLzYLbcmTkb8s9Vv+1JDDhbuuu7PAVZoRyysjFv9v7DAKQX\ntdQqkizc8EJ4nbBahkeRxCa3caBfAGIaL+7O20K7KmpazuJmgNXvlsn4OBqotM95\nacsR7n6SgK4eIuFxyBg29v3nG1yphpKPgJpM3tU9NPAYND/WPmozlwxkYmk+jos=\n=j6yO\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f3911d67773d8fc7af55234dfbdd4d0a7ad4f8a\nparent 2eb1677b12f15a377111e877f6a09e1a1550c8be\nparent b6dec2eb1f8b84cbf892d43c7d4afc00e747328a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584359326 +0000\ncommitter GitHub <noreply@github.com> 1584359326 +0000\n\nMerge #3587\n\n3587: Use WorkDoneProgress LSP API for initial load r=matklad a=slyngbaek\n\nAddresses #3283\r\n\r\nRather than using custom UI for showing the loaded state. Rely\r\non the WorkDoneProgress API in 3.15.0\r\nhttps://microsoft.github.io/language-server-protocol/specification#workDoneProgress.\r\n\r\nNo client-side work was necessary. The UI is not exactly what is\r\ndescribed in the issue but afaict that's how VS Code implements the LSP\r\nAPI.\r\n\r\n- The WorkDoneProgressEnd does not appear to display its message\r\n  contents (controlled by vscode)\n\nCo-authored-by: Steffen Lyngbaek <steffenlyngbaek@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bdc249b2c938df3eb2799c5efbdf1aa95d32a17", "html_url": "https://github.com/rust-lang/rust/commit/5bdc249b2c938df3eb2799c5efbdf1aa95d32a17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bdc249b2c938df3eb2799c5efbdf1aa95d32a17/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eb1677b12f15a377111e877f6a09e1a1550c8be", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb1677b12f15a377111e877f6a09e1a1550c8be", "html_url": "https://github.com/rust-lang/rust/commit/2eb1677b12f15a377111e877f6a09e1a1550c8be"}, {"sha": "b6dec2eb1f8b84cbf892d43c7d4afc00e747328a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6dec2eb1f8b84cbf892d43c7d4afc00e747328a", "html_url": "https://github.com/rust-lang/rust/commit/b6dec2eb1f8b84cbf892d43c7d4afc00e747328a"}], "stats": {"total": 88, "additions": 77, "deletions": 11}, "files": [{"sha": "1fefc66aa3f74ecb840dfa6e3cb8b1559ef5e36c", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 67, "deletions": 6, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5bdc249b2c938df3eb2799c5efbdf1aa95d32a17/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bdc249b2c938df3eb2799c5efbdf1aa95d32a17/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=5bdc249b2c938df3eb2799c5efbdf1aa95d32a17", "patch": "@@ -16,7 +16,10 @@ use std::{\n \n use crossbeam_channel::{select, unbounded, RecvError, Sender};\n use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestId, Response};\n-use lsp_types::{ClientCapabilities, NumberOrString};\n+use lsp_types::{\n+    ClientCapabilities, NumberOrString, WorkDoneProgress, WorkDoneProgressBegin,\n+    WorkDoneProgressCreateParams, WorkDoneProgressEnd, WorkDoneProgressReport,\n+};\n use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckOptions, CheckTask};\n use ra_ide::{Canceled, FileId, InlayHintsOptions, LibraryData, SourceRootId};\n use ra_prof::profile;\n@@ -330,6 +333,7 @@ struct LoopState {\n     in_flight_libraries: usize,\n     pending_libraries: Vec<(SourceRootId, Vec<(FileId, RelativePathBuf, Arc<String>)>)>,\n     workspace_loaded: bool,\n+    roots_scanned_progress: Option<usize>,\n }\n \n impl LoopState {\n@@ -429,17 +433,15 @@ fn loop_turn(\n         && loop_state.in_flight_libraries == 0\n     {\n         loop_state.workspace_loaded = true;\n-        let n_packages: usize = world_state.workspaces.iter().map(|it| it.n_packages()).sum();\n-        if world_state.feature_flags.get(\"notifications.workspace-loaded\") {\n-            let msg = format!(\"workspace loaded, {} rust packages\", n_packages);\n-            show_message(req::MessageType::Info, msg, &connection.sender);\n-        }\n         world_state.check_watcher.update();\n         pool.execute({\n             let subs = loop_state.subscriptions.subscriptions();\n             let snap = world_state.snapshot();\n             move || snap.analysis().prime_caches(subs).unwrap_or_else(|_: Canceled| ())\n         });\n+        send_startup_progress(&connection.sender, loop_state, world_state);\n+    } else if !loop_state.workspace_loaded {\n+        send_startup_progress(&connection.sender, loop_state, world_state);\n     }\n \n     if state_changed {\n@@ -704,6 +706,65 @@ fn on_diagnostic_task(task: DiagnosticTask, msg_sender: &Sender<Message>, state:\n     }\n }\n \n+fn send_startup_progress(\n+    sender: &Sender<Message>,\n+    loop_state: &mut LoopState,\n+    world_state: &WorldState,\n+) {\n+    if !world_state.feature_flags.get(\"notifications.workspace-loaded\") {\n+        return;\n+    }\n+\n+    let total: usize = world_state.workspaces.iter().map(|it| it.n_packages()).sum();\n+    let prev_progress = loop_state.roots_scanned_progress;\n+    let progress = total - world_state.roots_to_scan;\n+    loop_state.roots_scanned_progress = Some(progress);\n+\n+    match (prev_progress, loop_state.workspace_loaded) {\n+        (None, false) => {\n+            let work_done_progress_create = request_new::<req::WorkDoneProgressCreate>(\n+                loop_state.next_request_id(),\n+                WorkDoneProgressCreateParams {\n+                    token: req::ProgressToken::String(\"rustAnalyzer/startup\".into()),\n+                },\n+            );\n+            sender.send(work_done_progress_create.into()).unwrap();\n+            send_startup_progress_notif(\n+                sender,\n+                WorkDoneProgress::Begin(WorkDoneProgressBegin {\n+                    title: \"rust-analyzer\".into(),\n+                    cancellable: None,\n+                    message: Some(format!(\"{}/{} packages\", progress, total)),\n+                    percentage: Some(100.0 * progress as f64 / total as f64),\n+                }),\n+            );\n+        }\n+        (Some(prev), false) if progress != prev => send_startup_progress_notif(\n+            sender,\n+            WorkDoneProgress::Report(WorkDoneProgressReport {\n+                cancellable: None,\n+                message: Some(format!(\"{}/{} packages\", progress, total)),\n+                percentage: Some(100.0 * progress as f64 / total as f64),\n+            }),\n+        ),\n+        (_, true) => send_startup_progress_notif(\n+            sender,\n+            WorkDoneProgress::End(WorkDoneProgressEnd {\n+                message: Some(format!(\"rust-analyzer loaded, {} packages\", progress)),\n+            }),\n+        ),\n+        _ => {}\n+    }\n+}\n+\n+fn send_startup_progress_notif(sender: &Sender<Message>, work_done_progress: WorkDoneProgress) {\n+    let notif = notification_new::<req::Progress>(req::ProgressParams {\n+        token: req::ProgressToken::String(\"rustAnalyzer/startup\".into()),\n+        value: req::ProgressParamsValue::WorkDone(work_done_progress),\n+    });\n+    sender.send(notif.into()).unwrap();\n+}\n+\n struct PoolDispatcher<'a> {\n     req: Option<Request>,\n     pool: &'a ThreadPool,"}, {"sha": "1d7062bdf299bc2218d14667abc0e5890139449f", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bdc249b2c938df3eb2799c5efbdf1aa95d32a17/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bdc249b2c938df3eb2799c5efbdf1aa95d32a17/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=5bdc249b2c938df3eb2799c5efbdf1aa95d32a17", "patch": "@@ -12,13 +12,14 @@ use lsp_types::{\n     notification::{DidOpenTextDocument, Exit},\n     request::Shutdown,\n     ClientCapabilities, DidOpenTextDocumentParams, GotoCapability, TextDocumentClientCapabilities,\n-    TextDocumentIdentifier, TextDocumentItem, Url,\n+    TextDocumentIdentifier, TextDocumentItem, Url, WorkDoneProgress,\n };\n use serde::Serialize;\n use serde_json::{to_string_pretty, Value};\n use tempfile::TempDir;\n use test_utils::{find_mismatch, parse_fixture};\n \n+use req::{ProgressParams, ProgressParamsValue};\n use rust_analyzer::{main_loop, req, ServerConfig};\n \n pub struct Project<'a> {\n@@ -201,10 +202,14 @@ impl Server {\n     }\n     pub fn wait_until_workspace_is_loaded(&self) {\n         self.wait_for_message_cond(1, &|msg: &Message| match msg {\n-            Message::Notification(n) if n.method == \"window/showMessage\" => {\n-                let msg =\n-                    n.clone().extract::<req::ShowMessageParams>(\"window/showMessage\").unwrap();\n-                msg.message.starts_with(\"workspace loaded\")\n+            Message::Notification(n) if n.method == \"$/progress\" => {\n+                match n.clone().extract::<ProgressParams>(\"$/progress\").unwrap() {\n+                    ProgressParams {\n+                        token: req::ProgressToken::String(ref token),\n+                        value: ProgressParamsValue::WorkDone(WorkDoneProgress::End(_)),\n+                    } if token == \"rustAnalyzer/startup\" => true,\n+                    _ => false,\n+                }\n             }\n             _ => false,\n         })"}]}