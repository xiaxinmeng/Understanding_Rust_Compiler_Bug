{"sha": "f96dd383188e9f24e5b401e664cca97b8bd73825", "node_id": "C_kwDOAAsO6NoAKGY5NmRkMzgzMTg4ZTlmMjRlNWI0MDFlNjY0Y2NhOTdiOGJkNzM4MjU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-24T08:47:50Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-25T09:09:35Z"}, "message": "Address reviews", "tree": {"sha": "03d2df5e8ac89351ee510744689f12caa17cfd49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03d2df5e8ac89351ee510744689f12caa17cfd49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f96dd383188e9f24e5b401e664cca97b8bd73825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f96dd383188e9f24e5b401e664cca97b8bd73825", "html_url": "https://github.com/rust-lang/rust/commit/f96dd383188e9f24e5b401e664cca97b8bd73825", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f96dd383188e9f24e5b401e664cca97b8bd73825/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c69e1cc893878987991d77b8fb54d1f6de29733", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c69e1cc893878987991d77b8fb54d1f6de29733", "html_url": "https://github.com/rust-lang/rust/commit/9c69e1cc893878987991d77b8fb54d1f6de29733"}], "stats": {"total": 335, "additions": 178, "deletions": 157}, "files": [{"sha": "2e1b6d8d4ea7f743a862d8088ec8554b28ba913d", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f96dd383188e9f24e5b401e664cca97b8bd73825/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96dd383188e9f24e5b401e664cca97b8bd73825/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=f96dd383188e9f24e5b401e664cca97b8bd73825", "patch": "@@ -89,7 +89,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.67.0\"]\n     pub UNNECESSARY_SAFETY_COMMENT,\n     restriction,\n-    \"creating an unsafe block without explaining why it is safe\"\n+    \"annotating safe code with a safety comment\"\n }\n \n declare_lint_pass!(UndocumentedUnsafeBlocks => [UNDOCUMENTED_UNSAFE_BLOCKS, UNNECESSARY_SAFETY_COMMENT]);\n@@ -138,12 +138,11 @@ impl<'tcx> LateLintPass<'tcx> for UndocumentedUnsafeBlocks {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &hir::Stmt<'tcx>) {\n-        let expr = match stmt.kind {\n+        let (\n             hir::StmtKind::Local(&hir::Local { init: Some(expr), .. })\n             | hir::StmtKind::Expr(expr)\n-            | hir::StmtKind::Semi(expr) => expr,\n-            _ => return,\n-        };\n+            | hir::StmtKind::Semi(expr)\n+        ) = stmt.kind else { return };\n         if !is_lint_allowed(cx, UNNECESSARY_SAFETY_COMMENT, stmt.hir_id)\n             && !in_external_macro(cx.tcx.sess, stmt.span)\n             && let HasSafetyComment::Yes(pos) = stmt_has_safety_comment(cx, stmt.span, stmt.hir_id)"}, {"sha": "c05eb447b2ebd34e50ef3db1197116eab83e7241", "filename": "tests/ui/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f96dd383188e9f24e5b401e664cca97b8bd73825/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96dd383188e9f24e5b401e664cca97b8bd73825/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.rs?ref=f96dd383188e9f24e5b401e664cca97b8bd73825", "patch": "@@ -472,19 +472,6 @@ mod unsafe_impl_invalid_comment {\n     unsafe impl Interference for () {}\n }\n \n-mod unsafe_items_invalid_comment {\n-    // SAFETY:\n-    const CONST: u32 = 0;\n-    // SAFETY:\n-    static STATIC: u32 = 0;\n-    // SAFETY:\n-    struct Struct;\n-    // SAFETY:\n-    enum Enum {}\n-    // SAFETY:\n-    mod module {}\n-}\n-\n unsafe trait ImplInFn {}\n \n fn impl_in_fn() {\n@@ -522,35 +509,4 @@ fn issue_9142() {\n     };\n }\n \n-mod unnecessary_from_macro {\n-    trait T {}\n-\n-    macro_rules! no_safety_comment {\n-        ($t:ty) => {\n-            impl T for $t {}\n-        };\n-    }\n-\n-    // FIXME: This is not caught\n-    // Safety: unnecessary\n-    no_safety_comment!(());\n-\n-    macro_rules! with_safety_comment {\n-        ($t:ty) => {\n-            // Safety: unnecessary\n-            impl T for $t {}\n-        };\n-    }\n-\n-    with_safety_comment!(i32);\n-}\n-\n-fn unnecessary_on_stmt_and_expr() -> u32 {\n-    // SAFETY: unnecessary\n-    let num = 42;\n-\n-    // SAFETY: unnecessary\n-    24\n-}\n-\n fn main() {}"}, {"sha": "d1c1bb5ffeac85eec808031e3f97ad96d82b8425", "filename": "tests/ui/undocumented_unsafe_blocks.stderr", "status": "modified", "additions": 8, "deletions": 108, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/f96dd383188e9f24e5b401e664cca97b8bd73825/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f96dd383188e9f24e5b401e664cca97b8bd73825/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.stderr?ref=f96dd383188e9f24e5b401e664cca97b8bd73825", "patch": "@@ -260,92 +260,32 @@ LL |     unsafe impl Interference for () {}\n    |\n    = help: consider adding a safety comment on the preceding line\n \n-error: constant item has unnecessary safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:477:5\n-   |\n-LL |     const CONST: u32 = 0;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider removing the safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:476:5\n-   |\n-LL |     // SAFETY:\n-   |     ^^^^^^^^^^\n-\n-error: static item has unnecessary safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:479:5\n-   |\n-LL |     static STATIC: u32 = 0;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider removing the safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:478:5\n-   |\n-LL |     // SAFETY:\n-   |     ^^^^^^^^^^\n-\n-error: struct has unnecessary safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:481:5\n-   |\n-LL |     struct Struct;\n-   |     ^^^^^^^^^^^^^^\n-   |\n-help: consider removing the safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:480:5\n-   |\n-LL |     // SAFETY:\n-   |     ^^^^^^^^^^\n-\n-error: enum has unnecessary safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:483:5\n-   |\n-LL |     enum Enum {}\n-   |     ^^^^^^^^^^^^\n-   |\n-help: consider removing the safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:482:5\n-   |\n-LL |     // SAFETY:\n-   |     ^^^^^^^^^^\n-\n-error: module has unnecessary safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:485:5\n-   |\n-LL |     mod module {}\n-   |     ^^^^^^^^^^^^^\n-   |\n-help: consider removing the safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:484:5\n-   |\n-LL |     // SAFETY:\n-   |     ^^^^^^^^^^\n-\n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:492:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:479:5\n    |\n LL |     unsafe impl ImplInFn for () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:501:1\n+  --> $DIR/undocumented_unsafe_blocks.rs:488:1\n    |\n LL | unsafe impl CrateRoot for () {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:511:9\n+  --> $DIR/undocumented_unsafe_blocks.rs:498:9\n    |\n LL |         unsafe {};\n    |         ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: statement has unnecessary safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:514:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:501:5\n    |\n LL | /     let _ = {\n LL | |         if unsafe { true } {\n@@ -357,66 +297,26 @@ LL | |     };\n    | |______^\n    |\n help: consider removing the safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:513:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:500:5\n    |\n LL |     // SAFETY: this is more than one level away, so it should warn\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:515:12\n+  --> $DIR/undocumented_unsafe_blocks.rs:502:12\n    |\n LL |         if unsafe { true } {\n    |            ^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:518:23\n+  --> $DIR/undocumented_unsafe_blocks.rs:505:23\n    |\n LL |             let bar = unsafe {};\n    |                       ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n-error: impl has unnecessary safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:541:13\n-   |\n-LL |             impl T for $t {}\n-   |             ^^^^^^^^^^^^^^^^\n-...\n-LL |     with_safety_comment!(i32);\n-   |     ------------------------- in this macro invocation\n-   |\n-help: consider removing the safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:540:13\n-   |\n-LL |             // Safety: unnecessary\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `with_safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: expression has unnecessary safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:553:5\n-   |\n-LL |     24\n-   |     ^^\n-   |\n-help: consider removing the safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:552:5\n-   |\n-LL |     // SAFETY: unnecessary\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: statement has unnecessary safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:550:5\n-   |\n-LL |     let num = 42;\n-   |     ^^^^^^^^^^^^^\n-   |\n-help: consider removing the safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:549:5\n-   |\n-LL |     // SAFETY: unnecessary\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 44 previous errors\n+error: aborting due to 36 previous errors\n "}, {"sha": "7fefea7051d698ce92aab8e5c9dc6b48242e2564", "filename": "tests/ui/unnecessary_safety_comment.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f96dd383188e9f24e5b401e664cca97b8bd73825/tests%2Fui%2Funnecessary_safety_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96dd383188e9f24e5b401e664cca97b8bd73825/tests%2Fui%2Funnecessary_safety_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_safety_comment.rs?ref=f96dd383188e9f24e5b401e664cca97b8bd73825", "patch": "@@ -0,0 +1,51 @@\n+#![warn(clippy::undocumented_unsafe_blocks, clippy::unnecessary_safety_comment)]\n+#![allow(clippy::let_unit_value, clippy::missing_safety_doc)]\n+\n+mod unsafe_items_invalid_comment {\n+    // SAFETY:\n+    const CONST: u32 = 0;\n+    // SAFETY:\n+    static STATIC: u32 = 0;\n+    // SAFETY:\n+    struct Struct;\n+    // SAFETY:\n+    enum Enum {}\n+    // SAFETY:\n+    mod module {}\n+}\n+\n+mod unnecessary_from_macro {\n+    trait T {}\n+\n+    macro_rules! no_safety_comment {\n+        ($t:ty) => {\n+            impl T for $t {}\n+        };\n+    }\n+\n+    // FIXME: This is not caught\n+    // Safety: unnecessary\n+    no_safety_comment!(());\n+\n+    macro_rules! with_safety_comment {\n+        ($t:ty) => {\n+            // Safety: unnecessary\n+            impl T for $t {}\n+        };\n+    }\n+\n+    with_safety_comment!(i32);\n+}\n+\n+fn unnecessary_on_stmt_and_expr() -> u32 {\n+    // SAFETY: unnecessary\n+    let num = 42;\n+\n+    // SAFETY: unnecessary\n+    if num > 24 {}\n+\n+    // SAFETY: unnecessary\n+    24\n+}\n+\n+fn main() {}"}, {"sha": "7b2af67d64c7b9a7f1037dda39f4b25fc68a57ae", "filename": "tests/ui/unnecessary_safety_comment.stderr", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/f96dd383188e9f24e5b401e664cca97b8bd73825/tests%2Fui%2Funnecessary_safety_comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f96dd383188e9f24e5b401e664cca97b8bd73825/tests%2Fui%2Funnecessary_safety_comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_safety_comment.stderr?ref=f96dd383188e9f24e5b401e664cca97b8bd73825", "patch": "@@ -0,0 +1,115 @@\n+error: constant item has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:6:5\n+   |\n+LL |     const CONST: u32 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:5:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+   = note: `-D clippy::unnecessary-safety-comment` implied by `-D warnings`\n+\n+error: static item has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:8:5\n+   |\n+LL |     static STATIC: u32 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:7:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+\n+error: struct has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:10:5\n+   |\n+LL |     struct Struct;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:9:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+\n+error: enum has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:12:5\n+   |\n+LL |     enum Enum {}\n+   |     ^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:11:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+\n+error: module has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:14:5\n+   |\n+LL |     mod module {}\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:13:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+\n+error: impl has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:33:13\n+   |\n+LL |             impl T for $t {}\n+   |             ^^^^^^^^^^^^^^^^\n+...\n+LL |     with_safety_comment!(i32);\n+   |     ------------------------- in this macro invocation\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:32:13\n+   |\n+LL |             // Safety: unnecessary\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `with_safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expression has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:48:5\n+   |\n+LL |     24\n+   |     ^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:47:5\n+   |\n+LL |     // SAFETY: unnecessary\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: statement has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:42:5\n+   |\n+LL |     let num = 42;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:41:5\n+   |\n+LL |     // SAFETY: unnecessary\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: statement has unnecessary safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:45:5\n+   |\n+LL |     if num > 24 {}\n+   |     ^^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/unnecessary_safety_comment.rs:44:5\n+   |\n+LL |     // SAFETY: unnecessary\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}]}