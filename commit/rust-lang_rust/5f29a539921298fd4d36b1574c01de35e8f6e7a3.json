{"sha": "5f29a539921298fd4d36b1574c01de35e8f6e7a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMjlhNTM5OTIxMjk4ZmQ0ZDM2YjE1NzRjMDFkZTM1ZThmNmU3YTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-12T10:32:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-12T10:32:26Z"}, "message": "rustup", "tree": {"sha": "bd3bba5c43aa6c441793295a0a236e63beb87b20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd3bba5c43aa6c441793295a0a236e63beb87b20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f29a539921298fd4d36b1574c01de35e8f6e7a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f29a539921298fd4d36b1574c01de35e8f6e7a3", "html_url": "https://github.com/rust-lang/rust/commit/5f29a539921298fd4d36b1574c01de35e8f6e7a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f29a539921298fd4d36b1574c01de35e8f6e7a3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eac25ce477b5c3e5f4dc024dbba18051a6be6a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eac25ce477b5c3e5f4dc024dbba18051a6be6a9", "html_url": "https://github.com/rust-lang/rust/commit/4eac25ce477b5c3e5f4dc024dbba18051a6be6a9"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "9e2c1a36bb4f6065c1dd2c255ae60f93d7e3f9d9", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f29a539921298fd4d36b1574c01de35e8f6e7a3/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/5f29a539921298fd4d36b1574c01de35e8f6e7a3/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=5f29a539921298fd4d36b1574c01de35e8f6e7a3", "patch": "@@ -1 +1 @@\n-3de0106789468b211bcc3a25c09c0cf07119186d\n+2226c09699a96520238e162777f44504f4a0a1a7"}, {"sha": "bb6d6aed490549660418d35b4c796bc73b7a4b87", "filename": "src/fn_call.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f29a539921298fd4d36b1574c01de35e8f6e7a3/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f29a539921298fd4d36b1574c01de35e8f6e7a3/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=5f29a539921298fd4d36b1574c01de35e8f6e7a3", "patch": "@@ -62,11 +62,11 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n         let this = self.eval_context_mut();\n         let attrs = this.tcx.get_attrs(def_id);\n         let link_name = match attr::first_attr_value_str_by_name(&attrs, \"link_name\") {\n-            Some(name) => name.as_str().get(),\n-            None => this.tcx.item_name(def_id).as_str().get(),\n+            Some(name) => name.as_str(),\n+            None => this.tcx.item_name(def_id).as_str(),\n         };\n         // Strip linker suffixes (seen on 32-bit macOS).\n-        let link_name = link_name.trim_end_matches(\"$UNIX2003\");\n+        let link_name = link_name.get().trim_end_matches(\"$UNIX2003\");\n         let tcx = &{this.tcx.tcx};\n \n         // First: functions that could diverge."}, {"sha": "bb156c95dfea71e1f2b7fc826ff3bf048c0be6bb", "filename": "src/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f29a539921298fd4d36b1574c01de35e8f6e7a3/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f29a539921298fd4d36b1574c01de35e8f6e7a3/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=5f29a539921298fd4d36b1574c01de35e8f6e7a3", "patch": "@@ -27,8 +27,8 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n         // (as opposed to through a place), we have to remember to erase any tag\n         // that might still hang around!\n \n-        let intrinsic_name = this.tcx.item_name(instance.def_id()).as_str().get();\n-        match intrinsic_name {\n+        let intrinsic_name = this.tcx.item_name(instance.def_id()).as_str();\n+        match intrinsic_name.get() {\n             \"arith_offset\" => {\n                 let offset = this.read_scalar(args[1])?.to_isize(this)?;\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n@@ -187,7 +187,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n             \"sinf32\" | \"fabsf32\" | \"cosf32\" | \"sqrtf32\" | \"expf32\" | \"exp2f32\" | \"logf32\" |\n             \"log10f32\" | \"log2f32\" | \"floorf32\" | \"ceilf32\" | \"truncf32\" => {\n                 let f = this.read_scalar(args[0])?.to_f32()?;\n-                let f = match intrinsic_name {\n+                let f = match intrinsic_name.get() {\n                     \"sinf32\" => f.sin(),\n                     \"fabsf32\" => f.abs(),\n                     \"cosf32\" => f.cos(),\n@@ -208,7 +208,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n             \"sinf64\" | \"fabsf64\" | \"cosf64\" | \"sqrtf64\" | \"expf64\" | \"exp2f64\" | \"logf64\" |\n             \"log10f64\" | \"log2f64\" | \"floorf64\" | \"ceilf64\" | \"truncf64\" => {\n                 let f = this.read_scalar(args[0])?.to_f64()?;\n-                let f = match intrinsic_name {\n+                let f = match intrinsic_name.get() {\n                     \"sinf64\" => f.sin(),\n                     \"fabsf64\" => f.abs(),\n                     \"cosf64\" => f.cos(),\n@@ -229,7 +229,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n             \"fadd_fast\" | \"fsub_fast\" | \"fmul_fast\" | \"fdiv_fast\" | \"frem_fast\" => {\n                 let a = this.read_immediate(args[0])?;\n                 let b = this.read_immediate(args[1])?;\n-                let op = match intrinsic_name {\n+                let op = match intrinsic_name.get() {\n                     \"fadd_fast\" => mir::BinOp::Add,\n                     \"fsub_fast\" => mir::BinOp::Sub,\n                     \"fmul_fast\" => mir::BinOp::Mul,"}, {"sha": "541986de551711f814942a278a478dae52ddb678", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f29a539921298fd4d36b1574c01de35e8f6e7a3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f29a539921298fd4d36b1574c01de35e8f6e7a3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5f29a539921298fd4d36b1574c01de35e8f6e7a3", "patch": "@@ -470,11 +470,11 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     ) -> EvalResult<'tcx, Cow<'tcx, Allocation<Borrow, Self::AllocExtra>>> {\n         let attrs = tcx.get_attrs(def_id);\n         let link_name = match attr::first_attr_value_str_by_name(&attrs, \"link_name\") {\n-            Some(name) => name.as_str().get(),\n-            None => tcx.item_name(def_id).as_str().get(),\n+            Some(name) => name.as_str(),\n+            None => tcx.item_name(def_id).as_str(),\n         };\n \n-        let alloc = match link_name {\n+        let alloc = match link_name.get() {\n             \"__cxa_thread_atexit_impl\" => {\n                 // This should be all-zero, pointer-sized.\n                 let size = tcx.data_layout.pointer_size;"}]}