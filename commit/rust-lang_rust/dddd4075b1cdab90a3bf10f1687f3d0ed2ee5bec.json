{"sha": "dddd4075b1cdab90a3bf10f1687f3d0ed2ee5bec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZGQ0MDc1YjFjZGFiOTBhM2JmMTBmMTY4N2YzZDBlZDJlZTViZWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-03T09:59:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-03T22:10:08Z"}, "message": "generalize `find_constraint_paths_between_regions`", "tree": {"sha": "465055d4f622b46d5cc6120bb0148924ed91e801", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/465055d4f622b46d5cc6120bb0148924ed91e801"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dddd4075b1cdab90a3bf10f1687f3d0ed2ee5bec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dddd4075b1cdab90a3bf10f1687f3d0ed2ee5bec", "html_url": "https://github.com/rust-lang/rust/commit/dddd4075b1cdab90a3bf10f1687f3d0ed2ee5bec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dddd4075b1cdab90a3bf10f1687f3d0ed2ee5bec/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09f431fad5b8d67f278aa3130d3eccd0cd526cce", "url": "https://api.github.com/repos/rust-lang/rust/commits/09f431fad5b8d67f278aa3130d3eccd0cd526cce", "html_url": "https://github.com/rust-lang/rust/commit/09f431fad5b8d67f278aa3130d3eccd0cd526cce"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "85df5ec942942cdc9ab903e707348c32abf83bcf", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dddd4075b1cdab90a3bf10f1687f3d0ed2ee5bec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddd4075b1cdab90a3bf10f1687f3d0ed2ee5bec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting.rs?ref=dddd4075b1cdab90a3bf10f1687f3d0ed2ee5bec", "patch": "@@ -64,13 +64,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn find_constraint_paths_between_regions(\n         &self,\n         from_region: RegionVid,\n-        to_region: RegionVid,\n+        target_test: impl Fn(RegionVid) -> bool,\n     ) -> Vec<Vec<ConstraintIndex>> {\n         let mut results = vec![];\n         self.find_constraint_paths_between_regions_helper(\n             from_region,\n             from_region,\n-            to_region,\n+            &target_test,\n             &mut FxHashSet::default(),\n             &mut vec![],\n             &mut results,\n@@ -83,7 +83,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         from_region: RegionVid,\n         current_region: RegionVid,\n-        to_region: RegionVid,\n+        target_test: &impl Fn(RegionVid) -> bool,\n         visited: &mut FxHashSet<RegionVid>,\n         stack: &mut Vec<ConstraintIndex>,\n         results: &mut Vec<Vec<ConstraintIndex>>,\n@@ -96,18 +96,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         }\n \n         // Check if we reached the region we were looking for.\n-        if current_region == to_region {\n-            // Unless we started out searching for `'a ~> 'a`, which shouldn't have caused\n-            // en error, then we must have traversed at least *some* constraint:\n-            assert!(!stack.is_empty());\n-\n-            // The first constraint should be like `X: from_region`.\n-            assert_eq!(self.constraints[stack[0]].sub, from_region);\n-\n-            // The last constraint should be like `to_region: Y`.\n-            assert_eq!(self.constraints[*stack.last().unwrap()].sup, to_region);\n-\n-            results.push(stack.clone());\n+        if target_test(current_region) {\n+            if !stack.is_empty() {\n+                assert_eq!(self.constraints[stack[0]].sub, from_region);\n+                results.push(stack.clone());\n+            }\n             return;\n         }\n \n@@ -118,7 +111,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 self.find_constraint_paths_between_regions_helper(\n                     from_region,\n                     self.constraints[constraint].sup,\n-                    to_region,\n+                    target_test,\n                     visited,\n                     stack,\n                     results,\n@@ -229,7 +222,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         };\n \n         // Find all paths\n-        let constraint_paths = self.find_constraint_paths_between_regions(outlived_fr, fr);\n+        let constraint_paths = self.find_constraint_paths_between_regions(outlived_fr, |r| r == fr);\n         debug!(\"report_error: constraint_paths={:#?}\", constraint_paths);\n \n         // Find the shortest such path."}]}