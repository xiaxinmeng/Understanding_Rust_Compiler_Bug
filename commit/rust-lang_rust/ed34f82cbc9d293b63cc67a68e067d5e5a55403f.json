{"sha": "ed34f82cbc9d293b63cc67a68e067d5e5a55403f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMzRmODJjYmM5ZDI5M2I2M2NjNjdhNjhlMDY3ZDVlNWE1NTQwM2Y=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-14T00:30:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-14T00:30:46Z"}, "message": "Rollup merge of #77870 - camelid:intra-doc-super, r=jyn514\n\nUse intra-doc links for links to module-level docs\n\nr? @jyn514", "tree": {"sha": "f7511eaf3938ac339aeccdcbc31988160c7a561a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7511eaf3938ac339aeccdcbc31988160c7a561a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed34f82cbc9d293b63cc67a68e067d5e5a55403f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhka2CRBK7hj4Ov3rIwAAdHIIAIJpU3Io0jeFG5AE8KM7nTBK\n6HHUco+QhkOxcv41LsP8k6+S9tMALUq0kadj7dNGHxuxrz60QR+w4tq0R3X3aRX3\nhQ7fNOGMx1DBm1mEFg+AvvRe8LZbKS0NtPS2n9MMEofW0J7sh61756yChlDsk+PO\n8uYi57u9Ab2I0+h0iijG5UiibsF8afmg8zjyKdPL8un1gdizMqx3dtc8z+uT0YuD\nlMu/A1OxQJTmmqiQbKqnefMinr099xn1iVIZJjINpz0pwtGPLegi7ycBRIHNU/6o\nHUfZ6k2U2n/mZnpfaFgspbXyDeZW+tZwjqX2n3eF8srglSinDBJkErIeka40vqA=\n=Oa9J\n-----END PGP SIGNATURE-----\n", "payload": "tree f7511eaf3938ac339aeccdcbc31988160c7a561a\nparent 31799bade5116eaba9da6acbbbbfd5bd2fe04275\nparent 95221b4eb5b62e3c309b1ccb0fc45de51bb5e8ce\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602635446 +0200\ncommitter GitHub <noreply@github.com> 1602635446 +0200\n\nRollup merge of #77870 - camelid:intra-doc-super, r=jyn514\n\nUse intra-doc links for links to module-level docs\n\nr? @jyn514\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed34f82cbc9d293b63cc67a68e067d5e5a55403f", "html_url": "https://github.com/rust-lang/rust/commit/ed34f82cbc9d293b63cc67a68e067d5e5a55403f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31799bade5116eaba9da6acbbbbfd5bd2fe04275", "url": "https://api.github.com/repos/rust-lang/rust/commits/31799bade5116eaba9da6acbbbbfd5bd2fe04275", "html_url": "https://github.com/rust-lang/rust/commit/31799bade5116eaba9da6acbbbbfd5bd2fe04275"}, {"sha": "95221b4eb5b62e3c309b1ccb0fc45de51bb5e8ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/95221b4eb5b62e3c309b1ccb0fc45de51bb5e8ce", "html_url": "https://github.com/rust-lang/rust/commit/95221b4eb5b62e3c309b1ccb0fc45de51bb5e8ce"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "109c3a0e68302338b0a5e133e9c7371c91e3f989", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=ed34f82cbc9d293b63cc67a68e067d5e5a55403f", "patch": "@@ -14,9 +14,9 @@ mod tests;\n \n extern \"Rust\" {\n     // These are the magic symbols to call the global allocator.  rustc generates\n-    // them to call `__rg_alloc` etc if there is a `#[global_allocator]` attribute\n+    // them to call `__rg_alloc` etc. if there is a `#[global_allocator]` attribute\n     // (the code expanding that attribute macro generates those functions), or to call\n-    // the default implementations in libstd (`__rdl_alloc` etc in `src/libstd/alloc.rs`)\n+    // the default implementations in libstd (`__rdl_alloc` etc. in `library/std/src/alloc.rs`)\n     // otherwise.\n     #[rustc_allocator]\n     #[rustc_allocator_nounwind]\n@@ -36,7 +36,7 @@ extern \"Rust\" {\n /// if there is one, or the `std` crate\u2019s default.\n ///\n /// Note: while this type is unstable, the functionality it provides can be\n-/// accessed through the [free functions in `alloc`](index.html#functions).\n+/// accessed through the [free functions in `alloc`](self#functions).\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n #[derive(Copy, Clone, Default, Debug)]\n pub struct Global;"}, {"sha": "7140218fa9101fbb4faa06a4ab29963fbcda6794", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=ed34f82cbc9d293b63cc67a68e067d5e5a55403f", "patch": "@@ -226,7 +226,7 @@ use crate::ptr;\n /// assert_eq!(my_struct.special_field.get(), new_value);\n /// ```\n ///\n-/// See the [module-level documentation](index.html) for more.\n+/// See the [module-level documentation](self) for more.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[repr(transparent)]\n pub struct Cell<T: ?Sized> {\n@@ -566,7 +566,7 @@ impl<T> Cell<[T]> {\n \n /// A mutable memory location with dynamically checked borrow rules\n ///\n-/// See the [module-level documentation](index.html) for more.\n+/// See the [module-level documentation](self) for more.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RefCell<T: ?Sized> {\n     borrow: Cell<BorrowFlag>,\n@@ -1203,7 +1203,7 @@ impl Clone for BorrowRef<'_> {\n /// Wraps a borrowed reference to a value in a `RefCell` box.\n /// A wrapper type for an immutably borrowed value from a `RefCell<T>`.\n ///\n-/// See the [module-level documentation](index.html) for more.\n+/// See the [module-level documentation](self) for more.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Ref<'b, T: ?Sized + 'b> {\n     value: &'b T,\n@@ -1493,7 +1493,7 @@ impl<'b> BorrowRefMut<'b> {\n \n /// A wrapper type for a mutably borrowed value from a `RefCell<T>`.\n ///\n-/// See the [module-level documentation](index.html) for more.\n+/// See the [module-level documentation](self) for more.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RefMut<'b, T: ?Sized + 'b> {\n     value: &'b mut T,"}, {"sha": "44da8f4715c88d371066860a3927cae255bcf4fb", "filename": "library/core/src/iter/sources.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Fcore%2Fsrc%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Fcore%2Fsrc%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources.rs?ref=ed34f82cbc9d293b63cc67a68e067d5e5a55403f", "patch": "@@ -501,9 +501,9 @@ pub fn once_with<A, F: FnOnce() -> A>(gen: F) -> OnceWith<F> {\n ///\n /// # Examples\n ///\n-/// Let\u2019s re-implement the counter iterator from [module-level documentation]:\n+/// Let\u2019s re-implement the counter iterator from the [module-level documentation]:\n ///\n-/// [module-level documentation]: index.html\n+/// [module-level documentation]: super\n ///\n /// ```\n /// let mut count = 0;"}, {"sha": "1ae6d15c12dd97a4407a1366dc4f34449ff0ac5e", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=ed34f82cbc9d293b63cc67a68e067d5e5a55403f", "patch": "@@ -94,7 +94,7 @@ pub trait FromIterator<A>: Sized {\n     ///\n     /// See the [module-level documentation] for more.\n     ///\n-    /// [module-level documentation]: index.html\n+    /// [module-level documentation]: crate::iter\n     ///\n     /// # Examples\n     ///\n@@ -120,7 +120,7 @@ pub trait FromIterator<A>: Sized {\n /// collection of some kind.\n ///\n /// One benefit of implementing `IntoIterator` is that your type will [work\n-/// with Rust's `for` loop syntax](index.html#for-loops-and-intoiterator).\n+/// with Rust's `for` loop syntax](crate::iter#for-loops-and-intoiterator).\n ///\n /// See also: [`FromIterator`].\n ///\n@@ -212,7 +212,7 @@ pub trait IntoIterator {\n     ///\n     /// See the [module-level documentation] for more.\n     ///\n-    /// [module-level documentation]: index.html\n+    /// [module-level documentation]: crate::iter\n     ///\n     /// # Examples\n     ///"}, {"sha": "eadbdf45c7c6ff43740c23f0dae7765a6737208e", "filename": "library/core/src/iter/traits/exact_size.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs?ref=ed34f82cbc9d293b63cc67a68e067d5e5a55403f", "patch": "@@ -26,10 +26,10 @@\n /// assert_eq!(5, five.len());\n /// ```\n ///\n-/// In the [module level docs][moddocs], we implemented an [`Iterator`],\n-/// `Counter`. Let's implement `ExactSizeIterator` for it as well:\n+/// In the [module-level docs], we implemented an [`Iterator`], `Counter`.\n+/// Let's implement `ExactSizeIterator` for it as well:\n ///\n-/// [moddocs]: index.html\n+/// [module-level docs]: crate::iter\n ///\n /// ```\n /// # struct Counter {"}, {"sha": "b6d9f13d881e321ce6fbc5e916c29688d5dcd62b", "filename": "library/core/src/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=ed34f82cbc9d293b63cc67a68e067d5e5a55403f", "patch": "@@ -233,7 +233,7 @@ use crate::{convert, fmt};\n \n /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).\n ///\n-/// See the [`std::result`](index.html) module documentation for details.\n+/// See the [module documentation](self) for details.\n #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[must_use = \"this `Result` may be an `Err` variant, which should be handled\"]\n #[rustc_diagnostic_item = \"result_type\"]"}, {"sha": "7e7a28be2b0e577fd434a8ca634b5cdef70bce80", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=ed34f82cbc9d293b63cc67a68e067d5e5a55403f", "patch": "@@ -69,7 +69,7 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// [`&OsStr`]: OsStr\n /// [`&str`]: str\n /// [`CStr`]: crate::ffi::CStr\n-/// [conversions]: index.html#conversions\n+/// [conversions]: super#conversions\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OsString {\n@@ -88,7 +88,7 @@ pub struct OsString {\n /// the traits which `OsStr` implements for [conversions] from/to native representations.\n ///\n /// [`&str`]: str\n-/// [conversions]: index.html#conversions\n+/// [conversions]: super#conversions\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n // FIXME:\n // `OsStr::from_inner` current implementation relies"}, {"sha": "50bd2a03b62b04cd5b998d0e0c075e4695324b18", "filename": "library/std/src/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed34f82cbc9d293b63cc67a68e067d5e5a55403f/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=ed34f82cbc9d293b63cc67a68e067d5e5a55403f", "patch": "@@ -1009,7 +1009,7 @@ impl FusedIterator for Ancestors<'_> {}\n /// [`set_extension`]: PathBuf::set_extension\n ///\n /// More details about the overall approach can be found in\n-/// the [module documentation](index.html).\n+/// the [module documentation](self).\n ///\n /// # Examples\n ///\n@@ -1655,7 +1655,7 @@ impl AsRef<OsStr> for PathBuf {\n /// see [`PathBuf`].\n ///\n /// More details about the overall approach can be found in\n-/// the [module documentation](index.html).\n+/// the [module documentation](self).\n ///\n /// # Examples\n ///"}]}