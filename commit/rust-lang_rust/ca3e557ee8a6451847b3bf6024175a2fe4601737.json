{"sha": "ca3e557ee8a6451847b3bf6024175a2fe4601737", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhM2U1NTdlZThhNjQ1MTg0N2IzYmY2MDI0MTc1YTJmZTQ2MDE3Mzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-22T21:31:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-22T21:31:39Z"}, "message": "auto merge of #15081 : jakub-/rust/issue-15080, r=alexcrichton\n\nFixes #15080.", "tree": {"sha": "ddc3ddfc59a854c75b094e82cbc0b2c849e74ff3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddc3ddfc59a854c75b094e82cbc0b2c849e74ff3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca3e557ee8a6451847b3bf6024175a2fe4601737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca3e557ee8a6451847b3bf6024175a2fe4601737", "html_url": "https://github.com/rust-lang/rust/commit/ca3e557ee8a6451847b3bf6024175a2fe4601737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca3e557ee8a6451847b3bf6024175a2fe4601737/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34bd1691718346b4e9d0d3508f3c48940c8ec954", "url": "https://api.github.com/repos/rust-lang/rust/commits/34bd1691718346b4e9d0d3508f3c48940c8ec954", "html_url": "https://github.com/rust-lang/rust/commit/34bd1691718346b4e9d0d3508f3c48940c8ec954"}, {"sha": "d4da4ba4b2f3412c7f9630c4d88ea3e121cd6f2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4da4ba4b2f3412c7f9630c4d88ea3e121cd6f2a", "html_url": "https://github.com/rust-lang/rust/commit/d4da4ba4b2f3412c7f9630c4d88ea3e121cd6f2a"}], "stats": {"total": 64, "additions": 54, "deletions": 10}, "files": [{"sha": "2c3ba98daaef2db8c5daf96181f2c9da40f61a25", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ca3e557ee8a6451847b3bf6024175a2fe4601737/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca3e557ee8a6451847b3bf6024175a2fe4601737/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=ca3e557ee8a6451847b3bf6024175a2fe4601737", "patch": "@@ -281,21 +281,27 @@ fn missing_constructor(cx: &MatchCheckCtxt, m: &Matrix, left_ty: ty::t) -> Optio\n }\n \n fn all_constructors(cx: &MatchCheckCtxt, m: &Matrix, left_ty: ty::t) -> Vec<ctor> {\n+    // This produces a list of all vector constructors that we would expect to appear\n+    // in an exhaustive set of patterns. Because such a list would normally be infinite,\n+    // we narrow it down to only those constructors that actually appear in the inspected\n+    // column, plus, any that are missing and not covered by a pattern with a destructured slice.\n     fn vec_constructors(m: &Matrix) -> Vec<ctor> {\n         let max_vec_len = m.iter().map(|r| match r.get(0).node {\n             PatVec(ref before, _, ref after) => before.len() + after.len(),\n             _ => 0u\n         }).max().unwrap_or(0u);\n-        let contains_slice = m.iter().any(|r| match r.get(0).node {\n-            PatVec(_, ref slice, _) => slice.is_some(),\n-            _ => false\n-        });\n-        let lengths = iter::range_inclusive(0u, if contains_slice {\n-            max_vec_len\n-        } else {\n-            max_vec_len + 1\n-        });\n-        lengths.map(|len| vec(len)).collect()\n+        let min_vec_len_with_slice = m.iter().map(|r| match r.get(0).node {\n+            PatVec(ref before, Some(_), ref after) => before.len() + after.len(),\n+            _ => max_vec_len + 1\n+        }).min().unwrap_or(max_vec_len + 1);\n+        let other_lengths = m.iter().map(|r| match r.get(0).node {\n+            PatVec(ref before, _, ref after) => before.len() + after.len(),\n+            _ => 0u\n+        }).filter(|&len| len > min_vec_len_with_slice);\n+        iter::range_inclusive(0u, min_vec_len_with_slice)\n+            .chain(other_lengths)\n+            .map(|len| vec(len))\n+            .collect()\n     }\n \n     match ty::get(left_ty).sty {"}, {"sha": "b12f0c6462edfa5369dc41bf166f55a0e371b03c", "filename": "src/test/run-pass/issue-15080.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ca3e557ee8a6451847b3bf6024175a2fe4601737/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca3e557ee8a6451847b3bf6024175a2fe4601737/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15080.rs?ref=ca3e557ee8a6451847b3bf6024175a2fe4601737", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut x = &[1, 2, 3, 4];\n+\n+    let mut result = vec!();\n+    loop {\n+        x = match x {\n+            [1, n, 3, ..rest] => {\n+                result.push(n);\n+                rest\n+            }\n+            [n, ..rest] => {\n+                result.push(n);\n+                rest\n+            }\n+            [] =>\n+                break\n+        }\n+    }\n+    assert!(result.as_slice() == [2, 4]);\n+}"}, {"sha": "11143ba0c842341e34e5883e45e0c798db616e92", "filename": "src/test/run-pass/vec-matching.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca3e557ee8a6451847b3bf6024175a2fe4601737/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca3e557ee8a6451847b3bf6024175a2fe4601737/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching.rs?ref=ca3e557ee8a6451847b3bf6024175a2fe4601737", "patch": "@@ -68,9 +68,17 @@ fn d() {\n     assert_eq!(branch, 1);\n }\n \n+fn e() {\n+    match &[1, 2, 3] {\n+        [1, 2] => (),\n+        [..] => ()\n+    }\n+}\n+\n pub fn main() {\n     a();\n     b();\n     c();\n     d();\n+    e();\n }"}]}