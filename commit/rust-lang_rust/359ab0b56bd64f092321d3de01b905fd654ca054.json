{"sha": "359ab0b56bd64f092321d3de01b905fd654ca054", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1OWFiMGI1NmJkNjRmMDkyMzIxZDNkZTAxYjkwNWZkNjU0Y2EwNTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-10T01:04:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-14T17:14:11Z"}, "message": "rustc_back: Rewrite realpath to not use old_io\n\nJust bind the relevant platform-specific functions we should probably be calling\nanyway.", "tree": {"sha": "0cd9c567b4486860c628785c8840aaea250a467a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cd9c567b4486860c628785c8840aaea250a467a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/359ab0b56bd64f092321d3de01b905fd654ca054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/359ab0b56bd64f092321d3de01b905fd654ca054", "html_url": "https://github.com/rust-lang/rust/commit/359ab0b56bd64f092321d3de01b905fd654ca054", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/359ab0b56bd64f092321d3de01b905fd654ca054/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf4e77d4b543632ca4df8fdd7092850dffc3954b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf4e77d4b543632ca4df8fdd7092850dffc3954b", "html_url": "https://github.com/rust-lang/rust/commit/bf4e77d4b543632ca4df8fdd7092850dffc3954b"}], "stats": {"total": 131, "additions": 64, "deletions": 67}, "files": [{"sha": "ec280a602b0d09cb5a94fba79ce35704c1e1703f", "filename": "src/librustc_back/fs.rs", "status": "modified", "additions": 60, "deletions": 63, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/359ab0b56bd64f092321d3de01b905fd654ca054/src%2Flibrustc_back%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359ab0b56bd64f092321d3de01b905fd654ca054/src%2Flibrustc_back%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ffs.rs?ref=359ab0b56bd64f092321d3de01b905fd654ca054", "patch": "@@ -8,70 +8,67 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use libc;\n use std::io;\n-use std::env;\n-#[allow(deprecated)] use std::old_path::{self, GenericPath};\n-#[allow(deprecated)] use std::old_io;\n use std::path::{Path, PathBuf};\n \n-/// Returns an absolute path in the filesystem that `path` points to. The\n-/// returned path does not contain any symlinks in its hierarchy.\n-#[allow(deprecated)] // readlink is deprecated\n+#[cfg(windows)]\n pub fn realpath(original: &Path) -> io::Result<PathBuf> {\n-    let old = old_path::Path::new(original.to_str().unwrap());\n-    match old_realpath(&old) {\n-        Ok(p) => Ok(PathBuf::from(p.as_str().unwrap())),\n-        Err(e) => Err(io::Error::new(io::ErrorKind::Other, e))\n+    use std::fs::File;\n+    use std::ffi::OsString;\n+    use std::os::windows::prelude::*;\n+\n+    extern \"system\" {\n+        fn GetFinalPathNameByHandleW(hFile: libc::HANDLE,\n+                                     lpszFilePath: libc::LPCWSTR,\n+                                     cchFilePath: libc::DWORD,\n+                                     dwFlags: libc::DWORD) -> libc::DWORD;\n     }\n-}\n-\n-#[allow(deprecated)]\n-fn old_realpath(original: &old_path::Path) -> old_io::IoResult<old_path::Path> {\n-    use std::old_io::fs;\n-    const MAX_LINKS_FOLLOWED: usize = 256;\n-    let original = old_path::Path::new(env::current_dir().unwrap()\n-                                           .to_str().unwrap()).join(original);\n \n-    // Right now lstat on windows doesn't work quite well\n-    if cfg!(windows) {\n-        return Ok(original)\n+    let mut v = Vec::with_capacity(16 * 1024);\n+    let f = try!(File::open(original));\n+    unsafe {\n+        let ret = GetFinalPathNameByHandleW(f.as_raw_handle(),\n+                                            v.as_mut_ptr(),\n+                                            v.capacity() as libc::DWORD,\n+                                            libc::VOLUME_NAME_DOS);\n+        if ret == 0 {\n+            return Err(io::Error::last_os_error())\n+        }\n+        assert!(ret as usize < v.capacit());\n+        v.set_len(ret);\n     }\n+    Ok(PathBuf::from(OsString::from_wide(&v)))\n+}\n \n-    let result = original.root_path();\n-    let mut result = result.expect(\"make_absolute has no root_path\");\n-    let mut followed = 0;\n-\n-    for part in original.components() {\n-        result.push(part);\n+#[cfg(unix)]\n+pub fn realpath(original: &Path) -> io::Result<PathBuf> {\n+    use std::os::unix::prelude::*;\n+    use std::ffi::{OsString, CString};\n \n-        loop {\n-            if followed == MAX_LINKS_FOLLOWED {\n-                return Err(old_io::standard_error(old_io::InvalidInput))\n-            }\n+    extern {\n+        fn realpath(pathname: *const libc::c_char, resolved: *mut libc::c_char)\n+                    -> *mut libc::c_char;\n+    }\n \n-            match fs::lstat(&result) {\n-                Err(..) => break,\n-                Ok(ref stat) if stat.kind != old_io::FileType::Symlink => break,\n-                Ok(..) => {\n-                    followed += 1;\n-                    let path = try!(fs::readlink(&result));\n-                    result.pop();\n-                    result.push(path);\n-                }\n-            }\n+    let path = try!(CString::new(original.as_os_str().as_bytes()));\n+    let mut buf = vec![0u8; 16 * 1024];\n+    unsafe {\n+        let r = realpath(path.as_ptr(), buf.as_mut_ptr() as *mut _);\n+        if r.is_null() {\n+            return Err(io::Error::last_os_error())\n         }\n     }\n-\n-    return Ok(result);\n+    let p = buf.iter().position(|i| *i == 0).unwrap();\n+    buf.truncate(p);\n+    Ok(PathBuf::from(OsString::from_vec(buf)))\n }\n \n #[cfg(all(not(windows), test))]\n mod test {\n-    use std::old_io;\n-    use std::old_io::fs::{File, symlink, mkdir, mkdir_recursive};\n-    use super::old_realpath as realpath;\n-    use std::old_io::TempDir;\n-    use std::old_path::{Path, GenericPath};\n+    use tempdir::TempDir;\n+    use std::fs::{self, File};\n+    use std::path::{Path, PathBuf};\n \n     #[test]\n     fn realpath_works() {\n@@ -83,15 +80,15 @@ mod test {\n         let linkdir = tmpdir.join(\"test3\");\n \n         File::create(&file).unwrap();\n-        mkdir(&dir, old_io::USER_RWX).unwrap();\n-        symlink(&file, &link).unwrap();\n-        symlink(&dir, &linkdir).unwrap();\n-\n-        assert!(realpath(&tmpdir).unwrap() == tmpdir);\n-        assert!(realpath(&file).unwrap() == file);\n-        assert!(realpath(&link).unwrap() == file);\n-        assert!(realpath(&linkdir).unwrap() == dir);\n-        assert!(realpath(&linkdir.join(\"link\")).unwrap() == file);\n+        fs::create_dir(&dir).unwrap();\n+        fs::soft_link(&file, &link).unwrap();\n+        fs::soft_link(&dir, &linkdir).unwrap();\n+\n+        assert_eq!(realpath(&tmpdir).unwrap(), tmpdir);\n+        assert_eq!(realpath(&file).unwrap(), file);\n+        assert_eq!(realpath(&link).unwrap(), file);\n+        assert_eq!(realpath(&linkdir).unwrap(), dir);\n+        assert_eq!(realpath(&linkdir.join(\"link\")).unwrap(), file);\n     }\n \n     #[test]\n@@ -106,13 +103,13 @@ mod test {\n         let e = d.join(\"e\");\n         let f = a.join(\"f\");\n \n-        mkdir_recursive(&b, old_io::USER_RWX).unwrap();\n-        mkdir_recursive(&d, old_io::USER_RWX).unwrap();\n+        fs::create_dir_all(&b).unwrap();\n+        fs::create_dir_all(&d).unwrap();\n         File::create(&f).unwrap();\n-        symlink(&Path::new(\"../d/e\"), &c).unwrap();\n-        symlink(&Path::new(\"../f\"), &e).unwrap();\n+        fs::soft_link(\"../d/e\", &c).unwrap();\n+        fs::soft_link(\"../f\", &e).unwrap();\n \n-        assert!(realpath(&c).unwrap() == f);\n-        assert!(realpath(&e).unwrap() == f);\n+        assert_eq!(realpath(&c).unwrap(), f);\n+        assert_eq!(realpath(&e).unwrap(), f);\n     }\n }"}, {"sha": "3c54d6631f893897532778033f8481594587a05a", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/359ab0b56bd64f092321d3de01b905fd654ca054/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359ab0b56bd64f092321d3de01b905fd654ca054/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=359ab0b56bd64f092321d3de01b905fd654ca054", "patch": "@@ -35,17 +35,16 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n-#![feature(old_fs)]\n-#![feature(old_io)]\n-#![feature(old_path)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(rand)]\n #![feature(path_ext)]\n #![feature(step_by)]\n+#![feature(libc)]\n #![cfg_attr(test, feature(test, rand))]\n \n extern crate syntax;\n+extern crate libc;\n extern crate serialize;\n #[macro_use] extern crate log;\n "}, {"sha": "58073079d31dffcdaf725bc6d7056bfdaaa9de1a", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/359ab0b56bd64f092321d3de01b905fd654ca054/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359ab0b56bd64f092321d3de01b905fd654ca054/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=359ab0b56bd64f092321d3de01b905fd654ca054", "patch": "@@ -97,8 +97,9 @@ fn get_rpath_relative_to_output(config: &mut RPathConfig, lib: &Path) -> String\n     let cwd = env::current_dir().unwrap();\n     let mut lib = (config.realpath)(&cwd.join(lib)).unwrap();\n     lib.pop();\n-    let mut output = (config.realpath)(&cwd.join(&config.out_filename)).unwrap();\n+    let mut output = cwd.join(&config.out_filename);\n     output.pop();\n+    let output = (config.realpath)(&output).unwrap();\n     let relative = path_relative_from(&lib, &output)\n         .expect(&format!(\"couldn't create relative path from {:?} to {:?}\", output, lib));\n     // FIXME (#9639): This needs to handle non-utf8 paths"}]}