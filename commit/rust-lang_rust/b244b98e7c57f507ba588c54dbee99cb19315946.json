{"sha": "b244b98e7c57f507ba588c54dbee99cb19315946", "node_id": "C_kwDOAAsO6NoAKGIyNDRiOThlN2M1N2Y1MDdiYTU4OGM1NGRiZWU5OWNiMTkzMTU5NDY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-24T16:15:36Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-30T17:41:32Z"}, "message": "Move EncodedMetadata to rustc_metadata.", "tree": {"sha": "7ac90f623e02687c7783168f1cbfc77150d9b300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ac90f623e02687c7783168f1cbfc77150d9b300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b244b98e7c57f507ba588c54dbee99cb19315946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b244b98e7c57f507ba588c54dbee99cb19315946", "html_url": "https://github.com/rust-lang/rust/commit/b244b98e7c57f507ba588c54dbee99cb19315946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b244b98e7c57f507ba588c54dbee99cb19315946/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df54d3980b98ddbf29edac4ed4c4affcb021937f", "url": "https://api.github.com/repos/rust-lang/rust/commits/df54d3980b98ddbf29edac4ed4c4affcb021937f", "html_url": "https://github.com/rust-lang/rust/commit/df54d3980b98ddbf29edac4ed4c4affcb021937f"}], "stats": {"total": 71, "additions": 39, "deletions": 32}, "files": [{"sha": "157c1749c8782ee3c93bc90494062fe78b74e064", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -3706,6 +3706,7 @@ dependencies = [\n  \"rustc_incremental\",\n  \"rustc_index\",\n  \"rustc_macros\",\n+ \"rustc_metadata\",\n  \"rustc_middle\",\n  \"rustc_serialize\",\n  \"rustc_session\","}, {"sha": "32cc50eebe4364ad8c6707757c63e87501304196", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -6,8 +6,8 @@ use std::path::PathBuf;\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_codegen_ssa::{CodegenResults, CompiledModule, CrateInfo, ModuleKind};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::mir::mono::{CodegenUnit, MonoItem};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{DebugInfo, OutputType};"}, {"sha": "beb97edf09e895d778a38e9dc973cc2e0f42dd1d", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -30,8 +30,8 @@ use std::any::Any;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n use rustc_errors::ErrorReported;\n+use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_session::config::OutputFilenames;\n use rustc_session::Session;\n "}, {"sha": "1c8fd0b01d9d94ed346e67bf5ae734bb9d12b50b", "filename": "compiler/rustc_codegen_cranelift/src/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -3,7 +3,7 @@\n use object::write::{Object, StandardSegment, Symbol, SymbolSection};\n use object::{SectionKind, SymbolFlags, SymbolKind, SymbolScope};\n \n-use rustc_middle::middle::cstore::EncodedMetadata;\n+use rustc_metadata::EncodedMetadata;\n use rustc_middle::ty::TyCtxt;\n \n // Adapted from https://github.com/rust-lang/rust/blob/da573206f87b5510de4b0ee1a9c044127e409bd3/src/librustc_codegen_llvm/base.rs#L47-L112\n@@ -16,7 +16,7 @@ pub(crate) fn new_metadata_object(\n     use std::io::Write;\n \n     let mut compressed = rustc_metadata::METADATA_HEADER.to_vec();\n-    FrameEncoder::new(&mut compressed).write_all(&metadata.raw_data).unwrap();\n+    FrameEncoder::new(&mut compressed).write_all(metadata.raw_data()).unwrap();\n \n     let triple = crate::target_triple(tcx.sess);\n "}, {"sha": "3026c2fa0309aed4c046e3dc3da594fba0927672", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -25,9 +25,9 @@ use rustc_codegen_ssa::mono_item::MonoItemExt;\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{ModuleCodegen, ModuleKind};\n use rustc_data_structures::small_c_str::SmallCStr;\n+use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n-use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::middle::exported_symbols;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n use rustc_middle::ty::TyCtxt;\n@@ -64,7 +64,7 @@ pub fn write_compressed_metadata<'tcx>(\n \n     let (metadata_llcx, metadata_llmod) = (&*llvm_module.llcx, llvm_module.llmod());\n     let mut compressed = rustc_metadata::METADATA_HEADER.to_vec();\n-    FrameEncoder::new(&mut compressed).write_all(&metadata.raw_data).unwrap();\n+    FrameEncoder::new(&mut compressed).write_all(metadata.raw_data()).unwrap();\n \n     let llmeta = common::bytes_in_context(metadata_llcx, &compressed);\n     let llconst = common::struct_in_context(metadata_llcx, &[llmeta], false);"}, {"sha": "79bdace5158326833ae28e073e359c61d3876ee8", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -27,8 +27,8 @@ use rustc_codegen_ssa::ModuleCodegen;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{ErrorReported, FatalError, Handler};\n+use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{OptLevel, OutputFilenames, PrintRequest};\n use rustc_session::Session;"}, {"sha": "54641df61793e37c120920d7b779674cd3b9e2d4", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -32,6 +32,7 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_incremental = { path = \"../rustc_incremental\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_macros = { path = \"../rustc_macros\" }\n+rustc_metadata = { path = \"../rustc_metadata\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_session = { path = \"../rustc_session\" }\n "}, {"sha": "1c0442a231a580e7607b7846b97069227cb4eb50", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -327,7 +327,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n             // metadata in rlib files is wrapped in a \"dummy\" object file for\n             // the target platform so the rlib can be processed entirely by\n             // normal linkers for the platform.\n-            let metadata = create_metadata_file(sess, &codegen_results.metadata.raw_data);\n+            let metadata = create_metadata_file(sess, codegen_results.metadata.raw_data());\n             ab.add_file(&emit_metadata(sess, &metadata, tmpdir));\n \n             // After adding all files to the archive, we need to update the"}, {"sha": "31722d07414d062203d09abb33860ec12e8513a1", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -21,8 +21,8 @@ use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_incremental::{\n     copy_cgu_workproduct_to_incr_comp_cache_dir, in_incr_comp_dir, in_incr_comp_dir_sess,\n };\n+use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::cgu_reuse_tracker::CguReuseTracker;"}, {"sha": "9bb4982754c20cb3acaecd78c991603d540e6bc3", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -18,8 +18,8 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n+use rustc_metadata::EncodedMetadata;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n-use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::middle::lang_items;\n use rustc_middle::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, MonoItem};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf, TyAndLayout};"}, {"sha": "70b351f643314c24fbe25f9417962bd1424f4983", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -158,7 +158,7 @@ pub struct CodegenResults {\n     pub modules: Vec<CompiledModule>,\n     pub allocator_module: Option<CompiledModule>,\n     pub metadata_module: Option<CompiledModule>,\n-    pub metadata: rustc_middle::middle::cstore::EncodedMetadata,\n+    pub metadata: rustc_metadata::EncodedMetadata,\n     pub crate_info: CrateInfo,\n }\n "}, {"sha": "50a46877c5acaeb5bafe93917bd2e90b3a405fbc", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -6,8 +6,9 @@ use crate::{CodegenResults, ModuleCodegen};\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::ErrorReported;\n+use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n+use rustc_middle::middle::cstore::MetadataLoaderDyn;\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, LayoutOf, TyAndLayout};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{Ty, TyCtxt};"}, {"sha": "55a3fcd0266c4acbdcc39b6a879ecd15d974b3f9", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -16,10 +16,9 @@ use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_hir::Crate;\n use rustc_lint::LintStore;\n use rustc_metadata::creader::CStore;\n-use rustc_metadata::encode_metadata;\n+use rustc_metadata::{encode_metadata, EncodedMetadata};\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n-use rustc_middle::middle;\n use rustc_middle::middle::cstore::{MetadataLoader, MetadataLoaderDyn};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n@@ -978,7 +977,7 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n fn encode_and_write_metadata(\n     tcx: TyCtxt<'_>,\n     outputs: &OutputFilenames,\n-) -> (middle::cstore::EncodedMetadata, bool) {\n+) -> (EncodedMetadata, bool) {\n     #[derive(PartialEq, Eq, PartialOrd, Ord)]\n     enum MetadataKind {\n         None,\n@@ -1001,7 +1000,7 @@ fn encode_and_write_metadata(\n         .unwrap_or(MetadataKind::None);\n \n     let metadata = match metadata_kind {\n-        MetadataKind::None => middle::cstore::EncodedMetadata::new(),\n+        MetadataKind::None => EncodedMetadata::new(),\n         MetadataKind::Uncompressed | MetadataKind::Compressed => encode_metadata(tcx),\n     };\n \n@@ -1021,7 +1020,7 @@ fn encode_and_write_metadata(\n             .tempdir_in(out_filename.parent().unwrap())\n             .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)));\n         let metadata_tmpdir = MaybeTempDir::new(metadata_tmpdir, tcx.sess.opts.cg.save_temps);\n-        let metadata_filename = emit_metadata(tcx.sess, &metadata.raw_data, &metadata_tmpdir);\n+        let metadata_filename = emit_metadata(tcx.sess, metadata.raw_data(), &metadata_tmpdir);\n         if let Err(e) = util::non_durable_rename(&metadata_filename, &out_filename) {\n             tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n         }"}, {"sha": "644b849a9f899e17bb81ccfec572c1591cc64489", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -30,5 +30,4 @@ pub mod creader;\n pub mod dynamic_lib;\n pub mod locator;\n \n-pub use rmeta::encode_metadata;\n-pub use rmeta::METADATA_HEADER;\n+pub use rmeta::{encode_metadata, EncodedMetadata, METADATA_HEADER};"}, {"sha": "1e3bf8aca8bdcbd204f58179db0f09eb0fdde22c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -18,7 +18,7 @@ use rustc_hir::{AnonConst, GenericParamKind};\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_index::vec::Idx;\n use rustc_middle::hir::map::Map;\n-use rustc_middle::middle::cstore::{EncodedMetadata, ForeignModule, LinkagePreference, NativeLib};\n+use rustc_middle::middle::cstore::{ForeignModule, LinkagePreference, NativeLib};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::{\n     metadata_symbol_name, ExportedSymbol, SymbolExportLevel,\n@@ -2101,6 +2101,23 @@ fn prefetch_mir(tcx: TyCtxt<'_>) {\n // will allow us to slice the metadata to the precise length that we just\n // generated regardless of trailing bytes that end up in it.\n \n+#[derive(Encodable, Decodable)]\n+pub struct EncodedMetadata {\n+    raw_data: Vec<u8>,\n+}\n+\n+impl EncodedMetadata {\n+    #[inline]\n+    pub fn new() -> EncodedMetadata {\n+        EncodedMetadata { raw_data: Vec::new() }\n+    }\n+\n+    #[inline]\n+    pub fn raw_data(&self) -> &[u8] {\n+        &self.raw_data[..]\n+    }\n+}\n+\n pub fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n     let _prof_timer = tcx.prof.verbose_generic_activity(\"generate_crate_metadata\");\n "}, {"sha": "af06e1cf3f98020e307798ddb321f15f107a2dab", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -32,8 +32,8 @@ use std::num::NonZeroUsize;\n use decoder::DecodeContext;\n pub use decoder::{provide, provide_extern};\n crate use decoder::{CrateMetadata, CrateNumMap, MetadataBlob};\n-pub use encoder::encode_metadata;\n use encoder::EncodeContext;\n+pub use encoder::{encode_metadata, EncodedMetadata};\n use rustc_span::hygiene::SyntaxContextData;\n \n mod decoder;"}, {"sha": "2a1bb43a466b09638a995efc9ebc829d16c3f93d", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b244b98e7c57f507ba588c54dbee99cb19315946/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=b244b98e7c57f507ba588c54dbee99cb19315946", "patch": "@@ -148,17 +148,6 @@ pub enum ExternCrateSource {\n     Path,\n }\n \n-#[derive(Encodable, Decodable)]\n-pub struct EncodedMetadata {\n-    pub raw_data: Vec<u8>,\n-}\n-\n-impl EncodedMetadata {\n-    pub fn new() -> EncodedMetadata {\n-        EncodedMetadata { raw_data: Vec::new() }\n-    }\n-}\n-\n /// The backend's way to give the crate store access to the metadata in a library.\n /// Note that it returns the raw metadata bytes stored in the library file, whether\n /// it is compressed, uncompressed, some weird mix, etc."}]}