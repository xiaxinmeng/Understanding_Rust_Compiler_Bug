{"sha": "35006eba79b9a445c4ebec66f1a93b3170398e0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MDA2ZWJhNzliOWE0NDVjNGViZWM2NmYxYTkzYjMxNzAzOThlMGU=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2020-12-09T08:22:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-09T08:22:13Z"}, "message": "Apply rustfmt changes", "tree": {"sha": "cc9a6651ada6c6bf8d6a842e8389878819bb0259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc9a6651ada6c6bf8d6a842e8389878819bb0259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35006eba79b9a445c4ebec66f1a93b3170398e0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35006eba79b9a445c4ebec66f1a93b3170398e0e", "html_url": "https://github.com/rust-lang/rust/commit/35006eba79b9a445c4ebec66f1a93b3170398e0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35006eba79b9a445c4ebec66f1a93b3170398e0e/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86c183716cc6dfd44da15c86a7726d0a117c214e", "url": "https://api.github.com/repos/rust-lang/rust/commits/86c183716cc6dfd44da15c86a7726d0a117c214e", "html_url": "https://github.com/rust-lang/rust/commit/86c183716cc6dfd44da15c86a7726d0a117c214e"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "9e461e0b05aa6859abbedc225fc414f34320eab5", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/35006eba79b9a445c4ebec66f1a93b3170398e0e/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35006eba79b9a445c4ebec66f1a93b3170398e0e/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=35006eba79b9a445c4ebec66f1a93b3170398e0e", "patch": "@@ -334,22 +334,21 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             None => return,\n         };\n \n-        let possible_tail_ty = if let Some(possible_tail_ty) = self.infer.type_of_expr.get(possible_tail_id) {\n-            possible_tail_ty\n-        } else {\n-            return;\n-        };\n+        let possible_tail_ty =\n+            if let Some(possible_tail_ty) = self.infer.type_of_expr.get(possible_tail_id) {\n+                possible_tail_ty\n+            } else {\n+                return;\n+            };\n \n         if mismatch.actual != Ty::unit() || mismatch.expected != *possible_tail_ty {\n             return;\n         }\n \n         let (_, source_map) = db.body_with_source_map(self.owner.into());\n         if let Ok(source_ptr) = source_map.expr_syntax(possible_tail_id) {\n-            self.sink.push(RemoveThisSemicolon {\n-                file: source_ptr.file_id,\n-                expr: source_ptr.value,\n-            });\n+            self.sink\n+                .push(RemoveThisSemicolon { file: source_ptr.file_id, expr: source_ptr.value });\n         }\n     }\n }"}]}