{"sha": "d8952e7932823a3f3aa9d4af0ab9fa6f08b18cef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4OTUyZTc5MzI4MjNhM2YzYWE5ZDRhZjBhYjlmYTZmMDhiMThjZWY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-06-16T21:33:10Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-06-18T22:18:43Z"}, "message": "rustc: store the type context in TLS and allow safe access to it.", "tree": {"sha": "756828ce9c1774e4940a2e8f67f2a85c37a5f7a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/756828ce9c1774e4940a2e8f67f2a85c37a5f7a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8952e7932823a3f3aa9d4af0ab9fa6f08b18cef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8952e7932823a3f3aa9d4af0ab9fa6f08b18cef", "html_url": "https://github.com/rust-lang/rust/commit/d8952e7932823a3f3aa9d4af0ab9fa6f08b18cef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8952e7932823a3f3aa9d4af0ab9fa6f08b18cef/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6061707348ada3245de306c9d38d07250293e58e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6061707348ada3245de306c9d38d07250293e58e", "html_url": "https://github.com/rust-lang/rust/commit/6061707348ada3245de306c9d38d07250293e58e"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "c19ba19f5b76bed5d8a48e471ae95c488303eadf", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8952e7932823a3f3aa9d4af0ab9fa6f08b18cef/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8952e7932823a3f3aa9d4af0ab9fa6f08b18cef/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=d8952e7932823a3f3aa9d4af0ab9fa6f08b18cef", "patch": "@@ -51,6 +51,7 @@\n #![feature(ref_slice)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n+#![feature(scoped_tls)]\n #![feature(slice_bytes)]\n #![feature(slice_extras)]\n #![feature(slice_patterns)]"}, {"sha": "84d874909aa3808e0470429f514015806c46a6cf", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d8952e7932823a3f3aa9d4af0ab9fa6f08b18cef/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8952e7932823a3f3aa9d4af0ab9fa6f08b18cef/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d8952e7932823a3f3aa9d4af0ab9fa6f08b18cef", "patch": "@@ -804,6 +804,29 @@ impl<'tcx> ctxt<'tcx> {\n     }\n }\n \n+pub mod tls {\n+    use middle::ty;\n+    use session::Session;\n+\n+    /// Marker type used for the scoped TLS slot.\n+    /// The type context cannot be used directly because the scoped TLS\n+    /// in libstd doesn't allow types generic over lifetimes.\n+    struct ThreadLocalTyCx;\n+\n+    scoped_thread_local!(static TLS_TCX: ThreadLocalTyCx);\n+\n+    pub fn enter<'tcx, F: FnOnce(&ty::ctxt<'tcx>) -> R, R>(tcx: ty::ctxt<'tcx>, f: F)\n+                                                           -> (Session, R) {\n+        let tls_ptr = &tcx as *const _ as *const ThreadLocalTyCx;\n+        let result = TLS_TCX.set(unsafe { &*tls_ptr }, || f(&tcx));\n+        (tcx.sess, result)\n+    }\n+\n+    pub fn with<F: FnOnce(&ty::ctxt) -> R, R>(f: F) -> R {\n+        TLS_TCX.with(|tcx| f(unsafe { &*(tcx as *const _ as *const ty::ctxt) }))\n+    }\n+}\n+\n // Flags that we track on types. These flags are propagated upwards\n // through the type during type construction, so that we can quickly\n // check whether the type has various kinds of types in it without\n@@ -2824,7 +2847,7 @@ pub fn with_ctxt<'tcx, F, R>(s: Session,\n     let mut interner = FnvHashMap();\n     let common_types = CommonTypes::new(&arenas.type_, &mut interner);\n \n-    let tcx = ctxt {\n+    tls::enter(ctxt {\n         arenas: arenas,\n         interner: RefCell::new(interner),\n         substs_interner: RefCell::new(FnvHashMap()),\n@@ -2886,9 +2909,7 @@ pub fn with_ctxt<'tcx, F, R>(s: Session,\n         const_qualif_map: RefCell::new(NodeMap()),\n         custom_coerce_unsized_kinds: RefCell::new(DefIdMap()),\n         cast_kinds: RefCell::new(NodeMap()),\n-   };\n-   let result = f(&tcx);\n-   (tcx.sess, result)\n+   }, f)\n }\n \n // Type constructors"}]}