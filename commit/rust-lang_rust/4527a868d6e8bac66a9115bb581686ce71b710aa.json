{"sha": "4527a868d6e8bac66a9115bb581686ce71b710aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MjdhODY4ZDZlOGJhYzY2YTkxMTViYjU4MTY4NmNlNzFiNzEwYWE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-06-01T22:23:54Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-06-04T21:43:14Z"}, "message": "Add `HygieneData::apply_mark_with_transparency`.\n\nAlso remove `HygieneData::apply_mark_internal`, which is no longer\nneeded.", "tree": {"sha": "9479f8eaf3da32794327d2fd22dce8863e0346de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9479f8eaf3da32794327d2fd22dce8863e0346de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4527a868d6e8bac66a9115bb581686ce71b710aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4527a868d6e8bac66a9115bb581686ce71b710aa", "html_url": "https://github.com/rust-lang/rust/commit/4527a868d6e8bac66a9115bb581686ce71b710aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4527a868d6e8bac66a9115bb581686ce71b710aa/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a84aee3dbe053218579e69a9b093c82cd7714f75", "url": "https://api.github.com/repos/rust-lang/rust/commits/a84aee3dbe053218579e69a9b093c82cd7714f75", "html_url": "https://github.com/rust-lang/rust/commit/a84aee3dbe053218579e69a9b093c82cd7714f75"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "f3b0937701e10bcb43fc95bd5b5cf0a6a78c47d1", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4527a868d6e8bac66a9115bb581686ce71b710aa/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4527a868d6e8bac66a9115bb581686ce71b710aa/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=4527a868d6e8bac66a9115bb581686ce71b710aa", "patch": "@@ -265,6 +265,40 @@ impl HygieneData {\n         scope\n     }\n \n+    fn apply_mark_with_transparency(&mut self, ctxt: SyntaxContext, mark: Mark,\n+                                    transparency: Transparency) -> SyntaxContext {\n+        assert_ne!(mark, Mark::root());\n+        if transparency == Transparency::Opaque {\n+            return self.apply_mark_internal(ctxt, mark, transparency);\n+        }\n+\n+        let call_site_ctxt =\n+            self.expn_info(mark).map_or(SyntaxContext::empty(), |info| info.call_site.ctxt());\n+        let mut call_site_ctxt = if transparency == Transparency::SemiTransparent {\n+            self.modern(call_site_ctxt)\n+        } else {\n+            self.modern_and_legacy(call_site_ctxt)\n+        };\n+\n+        if call_site_ctxt == SyntaxContext::empty() {\n+            return self.apply_mark_internal(ctxt, mark, transparency);\n+        }\n+\n+        // Otherwise, `mark` is a macros 1.0 definition and the call site is in a\n+        // macros 2.0 expansion, i.e., a macros 1.0 invocation is in a macros 2.0 definition.\n+        //\n+        // In this case, the tokens from the macros 1.0 definition inherit the hygiene\n+        // at their invocation. That is, we pretend that the macros 1.0 definition\n+        // was defined at its invocation (i.e., inside the macros 2.0 definition)\n+        // so that the macros 2.0 definition remains hygienic.\n+        //\n+        // See the example at `test/run-pass/hygiene/legacy_interaction.rs`.\n+        for (mark, transparency) in self.marks(ctxt) {\n+            call_site_ctxt = self.apply_mark_internal(call_site_ctxt, mark, transparency);\n+        }\n+        self.apply_mark_internal(call_site_ctxt, mark, transparency)\n+    }\n+\n     fn apply_mark_internal(&mut self, ctxt: SyntaxContext, mark: Mark, transparency: Transparency)\n                            -> SyntaxContext {\n         let syntax_contexts = &mut self.syntax_contexts;\n@@ -382,41 +416,7 @@ impl SyntaxContext {\n     /// Extend a syntax context with a given mark and transparency\n     pub fn apply_mark_with_transparency(self, mark: Mark, transparency: Transparency)\n                                         -> SyntaxContext {\n-        assert_ne!(mark, Mark::root());\n-        if transparency == Transparency::Opaque {\n-            return self.apply_mark_internal(mark, transparency);\n-        }\n-\n-        let call_site_ctxt =\n-            mark.expn_info().map_or(SyntaxContext::empty(), |info| info.call_site.ctxt());\n-        let call_site_ctxt = if transparency == Transparency::SemiTransparent {\n-            call_site_ctxt.modern()\n-        } else {\n-            call_site_ctxt.modern_and_legacy()\n-        };\n-\n-        if call_site_ctxt == SyntaxContext::empty() {\n-            return self.apply_mark_internal(mark, transparency);\n-        }\n-\n-        // Otherwise, `mark` is a macros 1.0 definition and the call site is in a\n-        // macros 2.0 expansion, i.e., a macros 1.0 invocation is in a macros 2.0 definition.\n-        //\n-        // In this case, the tokens from the macros 1.0 definition inherit the hygiene\n-        // at their invocation. That is, we pretend that the macros 1.0 definition\n-        // was defined at its invocation (i.e., inside the macros 2.0 definition)\n-        // so that the macros 2.0 definition remains hygienic.\n-        //\n-        // See the example at `test/run-pass/hygiene/legacy_interaction.rs`.\n-        let mut ctxt = call_site_ctxt;\n-        for (mark, transparency) in self.marks() {\n-            ctxt = ctxt.apply_mark_internal(mark, transparency);\n-        }\n-        ctxt.apply_mark_internal(mark, transparency)\n-    }\n-\n-    fn apply_mark_internal(self, mark: Mark, transparency: Transparency) -> SyntaxContext {\n-        HygieneData::with(|data| data.apply_mark_internal(self, mark, transparency))\n+        HygieneData::with(|data| data.apply_mark_with_transparency(self, mark, transparency))\n     }\n \n     /// Pulls a single mark off of the syntax context. This effectively moves the"}]}