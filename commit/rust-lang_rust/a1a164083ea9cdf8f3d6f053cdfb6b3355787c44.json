{"sha": "a1a164083ea9cdf8f3d6f053cdfb6b3355787c44", "node_id": "C_kwDOAAsO6NoAKGExYTE2NDA4M2VhOWNkZjhmM2Q2ZjA1M2NkZmI2YjMzNTU3ODdjNDQ", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T15:44:54Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T15:44:54Z"}, "message": "Move call_intrinsic_match macro into codegen_float_intrinsic_call", "tree": {"sha": "5bcc933fdcf365f6eade3e082336cd8444dc4077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bcc933fdcf365f6eade3e082336cd8444dc4077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1a164083ea9cdf8f3d6f053cdfb6b3355787c44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a164083ea9cdf8f3d6f053cdfb6b3355787c44", "html_url": "https://github.com/rust-lang/rust/commit/a1a164083ea9cdf8f3d6f053cdfb6b3355787c44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1a164083ea9cdf8f3d6f053cdfb6b3355787c44/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "046e094842b4c1b046aad66750838304c017796b", "url": "https://api.github.com/repos/rust-lang/rust/commits/046e094842b4c1b046aad66750838304c017796b", "html_url": "https://github.com/rust-lang/rust/commit/046e094842b4c1b046aad66750838304c017796b"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "27e3b1b11f1de6167e6fe928c296a27f1caefccf", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a1a164083ea9cdf8f3d6f053cdfb6b3355787c44/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a164083ea9cdf8f3d6f053cdfb6b3355787c44/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=a1a164083ea9cdf8f3d6f053cdfb6b3355787c44", "patch": "@@ -73,31 +73,6 @@ macro intrinsic_match {\n     }\n }\n \n-macro call_intrinsic_match {\n-    ($fx:expr, $intrinsic:expr, $ret:expr, $args:expr, $(\n-        $name:ident($($arg:ident),*) -> $ty:ident => $func:ident,\n-    )*) => {\n-        match $intrinsic {\n-            $(\n-                sym::$name => {\n-                    if let [$(ref $arg),*] = *$args {\n-                        let ($($arg,)*) = (\n-                            $(codegen_operand($fx, $arg),)*\n-                        );\n-                        let res = $fx.easy_call(stringify!($func), &[$($arg),*], $fx.tcx.types.$ty);\n-                        $ret.write_cvalue($fx, res);\n-\n-                        return true;\n-                    }\n-                }\n-            )*\n-            _ => return false,\n-        }\n-\n-        bug!(\"wrong number of args for intrinsic {:?}\", $intrinsic);\n-    }\n-}\n-\n macro validate_atomic_type($fx:ident, $intrinsic:ident, $span:ident, $ty:expr) {\n     match $ty.kind() {\n         ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -428,6 +403,31 @@ fn codegen_float_intrinsic_call<'tcx>(\n     args: &[mir::Operand<'tcx>],\n     ret: CPlace<'tcx>,\n ) -> bool {\n+    macro call_intrinsic_match {\n+        ($fx:expr, $intrinsic:expr, $ret:expr, $args:expr, $(\n+            $name:ident($($arg:ident),*) -> $ty:ident => $func:ident,\n+        )*) => {\n+            match $intrinsic {\n+                $(\n+                    sym::$name => {\n+                        if let [$(ref $arg),*] = *$args {\n+                            let ($($arg,)*) = (\n+                                $(codegen_operand($fx, $arg),)*\n+                            );\n+                            let res = $fx.easy_call(stringify!($func), &[$($arg),*], $fx.tcx.types.$ty);\n+                            $ret.write_cvalue($fx, res);\n+\n+                            return true;\n+                        }\n+                    }\n+                )*\n+                _ => return false,\n+            }\n+\n+            bug!(\"wrong number of args for intrinsic {:?}\", $intrinsic);\n+        }\n+    }\n+\n     call_intrinsic_match! {\n         fx, intrinsic, ret, args,\n         expf32(flt) -> f32 => expf,"}]}