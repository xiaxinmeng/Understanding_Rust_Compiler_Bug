{"sha": "dde7283b807792dab4b2a10bace9b015a28aea02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZTcyODNiODA3NzkyZGFiNGIyYTEwYmFjZTliMDE1YTI4YWVhMDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-27T05:29:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-27T05:29:39Z"}, "message": "Auto merge of #28651 - dotdash:exhaustive_match, r=eddyb\n\nBy putting an \"unreachable\" instruction into the default arm of a switch\r\ninstruction we can let LLVM know that the match is exhaustive, allowing\r\nfor better optimizations.\r\n\r\nFor example, this match:\r\n```rust\r\npub enum Enum {\r\n    One,\r\n    Two,\r\n    Three,\r\n}\r\n\r\nimpl Enum {\r\n    pub fn get_disc(self) -> u8 {\r\n        match self {\r\n            Enum::One => 0,\r\n            Enum::Two => 1,\r\n            Enum::Three => 2,\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nCurrently compiles to this on x86_64:\r\n```asm\r\n  .cfi_startproc\r\n  movzbl  %dil, %ecx\r\n  cmpl  $1, %ecx\r\n  setne %al\r\n  testb %cl, %cl\r\n  je  .LBB0_2\r\n  incb  %al\r\n  movb  %al, %dil\r\n.LBB0_2:\r\n  movb  %dil, %al\r\n  retq\r\n.Lfunc_end0:\r\n```\r\n\r\nBut with this change we get:\r\n```asm\r\n  .cfi_startproc\r\n  movb  %dil, %al\r\n  retq\r\n.Lfunc_end0:\r\n```", "tree": {"sha": "9de741bf6919fff0f378c615b35c12e122d80bb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9de741bf6919fff0f378c615b35c12e122d80bb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dde7283b807792dab4b2a10bace9b015a28aea02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dde7283b807792dab4b2a10bace9b015a28aea02", "html_url": "https://github.com/rust-lang/rust/commit/dde7283b807792dab4b2a10bace9b015a28aea02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dde7283b807792dab4b2a10bace9b015a28aea02/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90c04d0362699637a399a33a321ece7c644e449b", "url": "https://api.github.com/repos/rust-lang/rust/commits/90c04d0362699637a399a33a321ece7c644e449b", "html_url": "https://github.com/rust-lang/rust/commit/90c04d0362699637a399a33a321ece7c644e449b"}, {"sha": "91f7c60d2d77423ed8f163beb6f76b92de03a09f", "url": "https://api.github.com/repos/rust-lang/rust/commits/91f7c60d2d77423ed8f163beb6f76b92de03a09f", "html_url": "https://github.com/rust-lang/rust/commit/91f7c60d2d77423ed8f163beb6f76b92de03a09f"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "67bfe58089e85c9201277664e3642f42dc57db8a", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dde7283b807792dab4b2a10bace9b015a28aea02/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dde7283b807792dab4b2a10bace9b015a28aea02/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=dde7283b807792dab4b2a10bace9b015a28aea02", "patch": "@@ -1283,6 +1283,10 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let exhaustive = chk.is_infallible() && defaults.is_empty();\n     let len = opts.len();\n \n+    if exhaustive && kind == Switch {\n+        build::Unreachable(else_cx);\n+    }\n+\n     // Compile subtrees for each option\n     for (i, opt) in opts.iter().enumerate() {\n         // In some cases of range and vector pattern matching, we need to\n@@ -1293,7 +1297,7 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         let mut opt_cx = else_cx;\n         let debug_loc = opt.debug_loc();\n \n-        if !exhaustive || i + 1 < len {\n+        if kind == Switch || !exhaustive || i + 1 < len {\n             opt_cx = bcx.fcx.new_temp_block(\"match_case\");\n             match kind {\n                 Single => Br(bcx, opt_cx.llbb, debug_loc),"}, {"sha": "ac47f6082e3e330a8f57ea837d94f3f0f12d6410", "filename": "src/test/codegen/match.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dde7283b807792dab4b2a10bace9b015a28aea02/src%2Ftest%2Fcodegen%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dde7283b807792dab4b2a10bace9b015a28aea02/src%2Ftest%2Fcodegen%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmatch.rs?ref=dde7283b807792dab4b2a10bace9b015a28aea02", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+\n+pub enum E {\n+    A,\n+    B,\n+}\n+\n+// CHECK-LABEL: @exhaustive_match\n+#[no_mangle]\n+pub fn exhaustive_match(e: E) {\n+// CHECK: switch{{.*}}, label %[[DEFAULT:[a-zA-Z0-9_]+]]\n+// CHECK: [[DEFAULT]]:\n+// CHECK-NEXT: unreachable\n+    match e {\n+        E::A => (),\n+        E::B => (),\n+    }\n+}"}]}