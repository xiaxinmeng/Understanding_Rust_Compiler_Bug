{"sha": "99c435939c941fe5216c39bc136769098abbbfea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YzQzNTkzOWM5NDFmZTUyMTZjMzliYzEzNjc2OTA5OGFiYmJmZWE=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-17T08:17:58Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-17T08:17:58Z"}, "message": "Scan all ancestors for the impl trait block check", "tree": {"sha": "b4259ce1810c3cd6c2bea62bae499415b764728d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4259ce1810c3cd6c2bea62bae499415b764728d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99c435939c941fe5216c39bc136769098abbbfea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99c435939c941fe5216c39bc136769098abbbfea", "html_url": "https://github.com/rust-lang/rust/commit/99c435939c941fe5216c39bc136769098abbbfea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99c435939c941fe5216c39bc136769098abbbfea/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f573bd84f4564f11b08db720401ae16a0f42f2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f573bd84f4564f11b08db720401ae16a0f42f2f", "html_url": "https://github.com/rust-lang/rust/commit/6f573bd84f4564f11b08db720401ae16a0f42f2f"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "d9f90477cb084969213ab43ce87e57b37e68500d", "filename": "crates/ide/src/completion/completion_context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/99c435939c941fe5216c39bc136769098abbbfea/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c435939c941fe5216c39bc136769098abbbfea/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=99c435939c941fe5216c39bc136769098abbbfea", "patch": "@@ -18,8 +18,8 @@ use crate::{\n         patterns::{\n             fn_is_prev, for_is_prev2, has_bind_pat_parent, has_block_expr_parent,\n             has_field_list_parent, has_impl_as_prev_sibling, has_impl_parent,\n-            has_impl_trait_parent, has_item_list_or_source_file_parent, has_ref_parent,\n-            has_trait_as_prev_sibling, has_trait_parent, if_is_prev, is_in_loop_body, is_match_arm,\n+            has_item_list_or_source_file_parent, has_ref_parent, has_trait_as_prev_sibling,\n+            has_trait_parent, if_is_prev, inside_impl_trait_block, is_in_loop_body, is_match_arm,\n             unsafe_is_prev,\n         },\n         CompletionConfig,\n@@ -87,7 +87,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) in_loop_body: bool,\n     pub(super) has_trait_parent: bool,\n     pub(super) has_impl_parent: bool,\n-    pub(super) has_impl_trait_parent: bool,\n+    pub(super) inside_impl_trait_block: bool,\n     pub(super) has_field_list_parent: bool,\n     pub(super) trait_as_prev_sibling: bool,\n     pub(super) impl_as_prev_sibling: bool,\n@@ -172,7 +172,7 @@ impl<'a> CompletionContext<'a> {\n             block_expr_parent: false,\n             has_trait_parent: false,\n             has_impl_parent: false,\n-            has_impl_trait_parent: false,\n+            inside_impl_trait_block: false,\n             has_field_list_parent: false,\n             trait_as_prev_sibling: false,\n             impl_as_prev_sibling: false,\n@@ -234,7 +234,7 @@ impl<'a> CompletionContext<'a> {\n     ///   Exception for this case is `impl Trait for Foo`, where we would like to hint trait method names.\n     /// - `for _ i<|>` -- obviously, it'll be \"in\" keyword.\n     pub(crate) fn no_completion_required(&self) -> bool {\n-        (self.fn_is_prev && !self.has_impl_trait_parent) || self.for_is_prev2\n+        (self.fn_is_prev && !self.inside_impl_trait_block) || self.for_is_prev2\n     }\n \n     /// The range of the identifier that is being completed.\n@@ -260,7 +260,7 @@ impl<'a> CompletionContext<'a> {\n         self.in_loop_body = is_in_loop_body(syntax_element.clone());\n         self.has_trait_parent = has_trait_parent(syntax_element.clone());\n         self.has_impl_parent = has_impl_parent(syntax_element.clone());\n-        self.has_impl_trait_parent = has_impl_trait_parent(syntax_element.clone());\n+        self.inside_impl_trait_block = inside_impl_trait_block(syntax_element.clone());\n         self.has_field_list_parent = has_field_list_parent(syntax_element.clone());\n         self.impl_as_prev_sibling = has_impl_as_prev_sibling(syntax_element.clone());\n         self.trait_as_prev_sibling = has_trait_as_prev_sibling(syntax_element.clone());"}, {"sha": "cf6d5947dfb152053b520c8bdd387bd31c126bad", "filename": "crates/ide/src/completion/patterns.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/99c435939c941fe5216c39bc136769098abbbfea/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c435939c941fe5216c39bc136769098abbbfea/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=99c435939c941fe5216c39bc136769098abbbfea", "patch": "@@ -35,19 +35,22 @@ fn test_has_impl_parent() {\n     check_pattern_is_applicable(r\"impl A { f<|> }\", has_impl_parent);\n }\n \n-pub(crate) fn has_impl_trait_parent(element: SyntaxElement) -> bool {\n-    not_same_range_ancestor(element)\n-        .filter(|it| it.kind() == ASSOC_ITEM_LIST)\n-        .and_then(|it| it.parent())\n-        .filter(|it| it.kind() == IMPL)\n+pub(crate) fn inside_impl_trait_block(element: SyntaxElement) -> bool {\n+    // Here we search `impl` keyword up through the all ancestors, unlike in `has_impl_parent`,\n+    // where we only check the first parent with different text range.\n+    element\n+        .ancestors()\n+        .find(|it| it.kind() == IMPL)\n         .map(|it| ast::Impl::cast(it).unwrap())\n         .map(|it| it.trait_().is_some())\n         .unwrap_or(false)\n }\n #[test]\n-fn test_has_impl_trait_parent() {\n-    check_pattern_is_applicable(r\"impl Foo for Bar { f<|> }\", has_impl_trait_parent);\n-    check_pattern_is_not_applicable(r\"impl A { f<|> }\", has_impl_trait_parent);\n+fn test_inside_impl_trait_block() {\n+    check_pattern_is_applicable(r\"impl Foo for Bar { f<|> }\", inside_impl_trait_block);\n+    check_pattern_is_applicable(r\"impl Foo for Bar { fn f<|> }\", inside_impl_trait_block);\n+    check_pattern_is_not_applicable(r\"impl A { f<|> }\", inside_impl_trait_block);\n+    check_pattern_is_not_applicable(r\"impl A { fn f<|> }\", inside_impl_trait_block);\n }\n \n pub(crate) fn has_field_list_parent(element: SyntaxElement) -> bool {"}]}