{"sha": "8e816056a5a440ca789f543481c8478514c35de6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlODE2MDU2YTVhNDQwY2E3ODlmNTQzNDgxYzg0Nzg1MTRjMzVkZTY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-27T08:24:42Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:09:33Z"}, "message": "Do not store attrs in FnKind.", "tree": {"sha": "5c3aa6108ac66d846090ce422c83e10d0c04f7ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c3aa6108ac66d846090ce422c83e10d0c04f7ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e816056a5a440ca789f543481c8478514c35de6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e816056a5a440ca789f543481c8478514c35de6", "html_url": "https://github.com/rust-lang/rust/commit/8e816056a5a440ca789f543481c8478514c35de6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e816056a5a440ca789f543481c8478514c35de6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5dc5dcca37c3d5581ddbb93c41b7dbcbea89331", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5dc5dcca37c3d5581ddbb93c41b7dbcbea89331", "html_url": "https://github.com/rust-lang/rust/commit/f5dc5dcca37c3d5581ddbb93c41b7dbcbea89331"}], "stats": {"total": 121, "additions": 51, "deletions": 70}, "files": [{"sha": "170169b517f9c8445fc2824ace350726f6dfb35c", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -101,29 +101,21 @@ where\n #[derive(Copy, Clone)]\n pub enum FnKind<'a> {\n     /// `#[xxx] pub async/const/extern \"Abi\" fn foo()`\n-    ItemFn(Ident, &'a Generics<'a>, FnHeader, &'a Visibility<'a>, &'a [Attribute]),\n+    ItemFn(Ident, &'a Generics<'a>, FnHeader, &'a Visibility<'a>),\n \n     /// `fn foo(&self)`\n-    Method(Ident, &'a FnSig<'a>, Option<&'a Visibility<'a>>, &'a [Attribute]),\n+    Method(Ident, &'a FnSig<'a>, Option<&'a Visibility<'a>>),\n \n     /// `|x, y| {}`\n-    Closure(&'a [Attribute]),\n+    Closure,\n }\n \n impl<'a> FnKind<'a> {\n-    pub fn attrs(&self) -> &'a [Attribute] {\n-        match *self {\n-            FnKind::ItemFn(.., attrs) => attrs,\n-            FnKind::Method(.., attrs) => attrs,\n-            FnKind::Closure(attrs) => attrs,\n-        }\n-    }\n-\n     pub fn header(&self) -> Option<&FnHeader> {\n         match *self {\n-            FnKind::ItemFn(_, _, ref header, _, _) => Some(header),\n-            FnKind::Method(_, ref sig, _, _) => Some(&sig.header),\n-            FnKind::Closure(_) => None,\n+            FnKind::ItemFn(_, _, ref header, _) => Some(header),\n+            FnKind::Method(_, ref sig, _) => Some(&sig.header),\n+            FnKind::Closure => None,\n         }\n     }\n }\n@@ -579,7 +571,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             visitor.visit_nested_body(body);\n         }\n         ItemKind::Fn(ref sig, ref generics, body_id) => visitor.visit_fn(\n-            FnKind::ItemFn(item.ident, generics, sig.header, &item.vis, &item.attrs),\n+            FnKind::ItemFn(item.ident, generics, sig.header, &item.vis),\n             &sig.decl,\n             body_id,\n             item.span,\n@@ -940,7 +932,7 @@ pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V, function_kind: FnKind<'\n         FnKind::ItemFn(_, generics, ..) => {\n             visitor.visit_generics(generics);\n         }\n-        FnKind::Method(..) | FnKind::Closure(_) => {}\n+        FnKind::Method(..) | FnKind::Closure => {}\n     }\n }\n \n@@ -977,7 +969,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n         }\n         TraitItemKind::Fn(ref sig, TraitFn::Provided(body_id)) => {\n             visitor.visit_fn(\n-                FnKind::Method(trait_item.ident, sig, None, &trait_item.attrs),\n+                FnKind::Method(trait_item.ident, sig, None),\n                 &sig.decl,\n                 body_id,\n                 trait_item.span,\n@@ -1027,7 +1019,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n         }\n         ImplItemKind::Fn(ref sig, body_id) => {\n             visitor.visit_fn(\n-                FnKind::Method(impl_item.ident, sig, Some(&impl_item.vis), &impl_item.attrs),\n+                FnKind::Method(impl_item.ident, sig, Some(&impl_item.vis)),\n                 &sig.decl,\n                 body_id,\n                 impl_item.span,\n@@ -1162,7 +1154,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n         }\n         ExprKind::Closure(_, ref function_declaration, body, _fn_decl_span, _gen) => visitor\n             .visit_fn(\n-                FnKind::Closure(&expression.attrs),\n+                FnKind::Closure,\n                 function_declaration,\n                 body,\n                 expression.span,"}, {"sha": "83bc94ea2ee81a83195962ab1f18c82a31f9f6e2", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -400,14 +400,15 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n                 }\n                 _ => (),\n             },\n-            FnKind::ItemFn(ident, _, header, _, attrs) => {\n+            FnKind::ItemFn(ident, _, header, _) => {\n+                let attrs = cx.tcx.hir().attrs(id);\n                 // Skip foreign-ABI #[no_mangle] functions (Issue #31924)\n                 if header.abi != Abi::Rust && cx.sess().contains_name(attrs, sym::no_mangle) {\n                     return;\n                 }\n                 self.check_snake_case(cx, \"function\", ident);\n             }\n-            FnKind::Closure(_) => (),\n+            FnKind::Closure => (),\n         }\n     }\n "}, {"sha": "706c79009496b903bd1bb81492d105cdf21d6856", "filename": "compiler/rustc_middle/src/hir/map/blocks.rs", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fblocks.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -12,7 +12,6 @@\n //! for the `Code` associated with a particular NodeId.\n \n use crate::hir::map::Map;\n-use rustc_ast::Attribute;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Expr, FnDecl, Node};\n@@ -105,7 +104,6 @@ struct ItemFnParts<'a> {\n     body: hir::BodyId,\n     id: hir::HirId,\n     span: Span,\n-    attrs: &'a [Attribute],\n }\n \n /// These are all the components one can extract from a closure expr\n@@ -115,18 +113,11 @@ struct ClosureParts<'a> {\n     body: hir::BodyId,\n     id: hir::HirId,\n     span: Span,\n-    attrs: &'a [Attribute],\n }\n \n impl<'a> ClosureParts<'a> {\n-    fn new(\n-        d: &'a FnDecl<'a>,\n-        b: hir::BodyId,\n-        id: hir::HirId,\n-        s: Span,\n-        attrs: &'a [Attribute],\n-    ) -> Self {\n-        ClosureParts { decl: d, body: b, id, span: s, attrs }\n+    fn new(d: &'a FnDecl<'a>, b: hir::BodyId, id: hir::HirId, s: Span) -> Self {\n+        ClosureParts { decl: d, body: b, id, span: s }\n     }\n }\n \n@@ -146,31 +137,31 @@ impl<'a> FnLikeNode<'a> {\n     pub fn body(self) -> hir::BodyId {\n         self.handle(\n             |i: ItemFnParts<'a>| i.body,\n-            |_, _, _: &'a hir::FnSig<'a>, _, body: hir::BodyId, _, _| body,\n+            |_, _, _: &'a hir::FnSig<'a>, _, body: hir::BodyId, _| body,\n             |c: ClosureParts<'a>| c.body,\n         )\n     }\n \n     pub fn decl(self) -> &'a FnDecl<'a> {\n         self.handle(\n             |i: ItemFnParts<'a>| &*i.decl,\n-            |_, _, sig: &'a hir::FnSig<'a>, _, _, _, _| &sig.decl,\n+            |_, _, sig: &'a hir::FnSig<'a>, _, _, _| &sig.decl,\n             |c: ClosureParts<'a>| c.decl,\n         )\n     }\n \n     pub fn span(self) -> Span {\n         self.handle(\n             |i: ItemFnParts<'_>| i.span,\n-            |_, _, _: &'a hir::FnSig<'a>, _, _, span, _| span,\n+            |_, _, _: &'a hir::FnSig<'a>, _, _, span| span,\n             |c: ClosureParts<'_>| c.span,\n         )\n     }\n \n     pub fn id(self) -> hir::HirId {\n         self.handle(\n             |i: ItemFnParts<'_>| i.id,\n-            |id, _, _: &'a hir::FnSig<'a>, _, _, _, _| id,\n+            |id, _, _: &'a hir::FnSig<'a>, _, _, _| id,\n             |c: ClosureParts<'_>| c.id,\n         )\n     }\n@@ -189,12 +180,11 @@ impl<'a> FnLikeNode<'a> {\n \n     pub fn kind(self) -> FnKind<'a> {\n         let item = |p: ItemFnParts<'a>| -> FnKind<'a> {\n-            FnKind::ItemFn(p.ident, p.generics, p.header, p.vis, p.attrs)\n-        };\n-        let closure = |c: ClosureParts<'a>| FnKind::Closure(c.attrs);\n-        let method = |_, ident: Ident, sig: &'a hir::FnSig<'a>, vis, _, _, attrs| {\n-            FnKind::Method(ident, sig, vis, attrs)\n+            FnKind::ItemFn(p.ident, p.generics, p.header, p.vis)\n         };\n+        let closure = |_: ClosureParts<'a>| FnKind::Closure;\n+        let method =\n+            |_, ident: Ident, sig: &'a hir::FnSig<'a>, vis, _, _| FnKind::Method(ident, sig, vis);\n         self.handle(item, method, closure)\n     }\n \n@@ -208,7 +198,6 @@ impl<'a> FnLikeNode<'a> {\n             Option<&'a hir::Visibility<'a>>,\n             hir::BodyId,\n             Span,\n-            &'a [Attribute],\n         ) -> A,\n         C: FnOnce(ClosureParts<'a>) -> A,\n     {\n@@ -221,27 +210,26 @@ impl<'a> FnLikeNode<'a> {\n                     body: block,\n                     vis: &i.vis,\n                     span: i.span,\n-                    attrs: &i.attrs,\n                     header: sig.header,\n                     generics,\n                 }),\n                 _ => bug!(\"item FnLikeNode that is not fn-like\"),\n             },\n             Node::TraitItem(ti) => match ti.kind {\n                 hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n-                    method(ti.hir_id(), ti.ident, sig, None, body, ti.span, &ti.attrs)\n+                    method(ti.hir_id(), ti.ident, sig, None, body, ti.span)\n                 }\n                 _ => bug!(\"trait method FnLikeNode that is not fn-like\"),\n             },\n             Node::ImplItem(ii) => match ii.kind {\n                 hir::ImplItemKind::Fn(ref sig, body) => {\n-                    method(ii.hir_id(), ii.ident, sig, Some(&ii.vis), body, ii.span, &ii.attrs)\n+                    method(ii.hir_id(), ii.ident, sig, Some(&ii.vis), body, ii.span)\n                 }\n                 _ => bug!(\"impl method FnLikeNode that is not fn-like\"),\n             },\n             Node::Expr(e) => match e.kind {\n                 hir::ExprKind::Closure(_, ref decl, block, _fn_decl_span, _gen) => {\n-                    closure(ClosureParts::new(&decl, block, e.hir_id, e.span, &e.attrs))\n+                    closure(ClosureParts::new(&decl, block, e.hir_id, e.span))\n                 }\n                 _ => bug!(\"expr FnLikeNode that is not fn-like\"),\n             },"}, {"sha": "ef8bd20d51098c3e94821c1ded39573525b9d0da", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -15,7 +15,7 @@ crate fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n \n     if let Some(fn_like_node) = FnLikeNode::from_node(tcx.hir().get(hir_id)) {\n-        if let FnKind::Closure(_) = fn_like_node.kind() {\n+        if let FnKind::Closure = fn_like_node.kind() {\n             // closures can't recur, so they don't matter.\n             return;\n         }"}, {"sha": "89bc2e1a9870ff168e56e2b05038f54fde81e3e6", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -46,7 +46,7 @@ impl<'tcx> Visitor<'tcx> for CheckNakedFunctions<'tcx> {\n         let fn_header;\n \n         match fk {\n-            FnKind::Closure(..) => {\n+            FnKind::Closure => {\n                 // Closures with a naked attribute are rejected during attribute\n                 // check. Don't validate them any further.\n                 return;\n@@ -62,7 +62,8 @@ impl<'tcx> Visitor<'tcx> for CheckNakedFunctions<'tcx> {\n             }\n         }\n \n-        let naked = fk.attrs().iter().any(|attr| attr.has_name(sym::naked));\n+        let attrs = self.tcx.hir().attrs(hir_id);\n+        let naked = attrs.iter().any(|attr| attr.has_name(sym::naked));\n         if naked {\n             let body = self.tcx.hir().body(body_id);\n             check_abi(self.tcx, hir_id, fn_header.abi, ident_span);"}, {"sha": "55c6420ae5e2ef3198bb6324cbf91a723ad5045b", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -354,7 +354,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n         hir_id: hir::HirId,\n     ) {\n         assert!(\n-            matches!(fk, intravisit::FnKind::Closure(..)),\n+            matches!(fk, intravisit::FnKind::Closure),\n             \"visit_fn invoked for something other than a closure\"\n         );\n "}, {"sha": "658d445dfec54d0ad2e2a35bff964e571144bc84", "filename": "src/tools/clippy/clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -76,8 +76,8 @@ impl CognitiveComplexity {\n \n         if rust_cc > self.limit.limit() {\n             let fn_span = match kind {\n-                FnKind::ItemFn(ident, _, _, _, _) | FnKind::Method(ident, _, _, _) => ident.span,\n-                FnKind::Closure(_) => {\n+                FnKind::ItemFn(ident, _, _, _) | FnKind::Method(ident, _, _) => ident.span,\n+                FnKind::Closure => {\n                     let header_span = body_span.with_hi(decl.output.span().lo());\n                     let pos = snippet_opt(cx, header_span).and_then(|snip| {\n                         let low_offset = snip.find('|')?;"}, {"sha": "ae0b8d06dc2fbbfd862b64ef394ddd34164d3e9c", "filename": "src/tools/clippy/clippy_lints/src/functions.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -251,9 +251,9 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         hir_id: hir::HirId,\n     ) {\n         let unsafety = match kind {\n-            intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }, _, _) => unsafety,\n-            intravisit::FnKind::Method(_, sig, _, _) => sig.header.unsafety,\n-            intravisit::FnKind::Closure(_) => return,\n+            intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }, _) => unsafety,\n+            intravisit::FnKind::Method(_, sig, _) => sig.header.unsafety,\n+            intravisit::FnKind::Closure => return,\n         };\n \n         // don't warn for implementations, it's not their fault\n@@ -267,9 +267,8 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                         ..\n                     },\n                     _,\n-                    _,\n                 )\n-                | intravisit::FnKind::ItemFn(_, _, hir::FnHeader { abi: Abi::Rust, .. }, _, _) => {\n+                | intravisit::FnKind::ItemFn(_, _, hir::FnHeader { abi: Abi::Rust, .. }, _) => {\n                     self.check_arg_number(cx, decl, span.with_hi(decl.output.span().hi()))\n                 },\n                 _ => {},"}, {"sha": "9e1a8864a3ebe0ff6deff9c2cbec4c1bf19a7499", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n         _: Span,\n         hir_id: HirId,\n     ) {\n-        if let FnKind::Closure(_) = kind {\n+        if let FnKind::Closure = kind {\n             return;\n         }\n         let ret_ty = utils::return_ty(cx, hir_id);"}, {"sha": "35b4c3d5b03abf1d65733962fbdb65e74a503689", "filename": "src/tools/clippy/clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -278,7 +278,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n         span: Span,\n         _: HirId,\n     ) {\n-        if let FnKind::Closure(_) = k {\n+        if let FnKind::Closure = k {\n             // Does not apply to closures\n             return;\n         }"}, {"sha": "b0998a80128cef12d73d13f2136b7c64e5672fd0", "filename": "src/tools/clippy/clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -133,7 +133,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n                     return;\n                 }\n             },\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n         }\n \n         let mir = cx.tcx.optimized_mir(def_id);"}, {"sha": "cac4b2075114ac812c0376555b8cd0cad770c1ee", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -80,13 +80,14 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         }\n \n         match kind {\n-            FnKind::ItemFn(.., header, _, attrs) => {\n+            FnKind::ItemFn(.., header, _) => {\n+                let attrs = cx.tcx.hir().attrs(hir_id);\n                 if header.abi != Abi::Rust || requires_exact_signature(attrs) {\n                     return;\n                 }\n             },\n             FnKind::Method(..) => (),\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n         }\n \n         // Exclude non-inherent impls"}, {"sha": "207423a18614927f30960ba847b944170fbca91e", "filename": "src/tools/clippy/clippy_lints/src/panic_in_result_fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -43,9 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for PanicInResultFn {\n         span: Span,\n         hir_id: hir::HirId,\n     ) {\n-        if !matches!(fn_kind, FnKind::Closure(_))\n-            && is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type)\n-        {\n+        if !matches!(fn_kind, FnKind::Closure) && is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type) {\n             lint_impl_body(cx, span, body);\n         }\n     }"}, {"sha": "ff700aa51460789cc66d0aa7779ce65a24ec0cb2", "filename": "src/tools/clippy/clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -224,10 +224,11 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         match kind {\n-            FnKind::ItemFn(.., header, _, attrs) => {\n+            FnKind::ItemFn(.., header, _) => {\n                 if header.abi != Abi::Rust {\n                     return;\n                 }\n+                let attrs = cx.tcx.hir().attrs(hir_id);\n                 for a in attrs {\n                     if let Some(meta_items) = a.meta_item_list() {\n                         if a.has_name(sym::proc_macro_derive)\n@@ -239,7 +240,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n                 }\n             },\n             FnKind::Method(..) => (),\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n         }\n \n         // Exclude non-inherent impls"}, {"sha": "28d7011207f8d85b0a3506e26d85885b25641922", "filename": "src/tools/clippy/clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n         _: HirId,\n     ) {\n         match kind {\n-            FnKind::Closure(_) => {\n+            FnKind::Closure => {\n                 // when returning without value in closure, replace this `return`\n                 // with an empty block to prevent invalid suggestion (see #6501)\n                 let replacement = if let ExprKind::Ret(None) = &body.value.kind {"}, {"sha": "8e076397c119a9a25f94f16734d979f6a593790d", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e816056a5a440ca789f543481c8478514c35de6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=8e816056a5a440ca789f543481c8478514c35de6", "patch": "@@ -66,12 +66,12 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n     ) {\n         // Abort if public function/method or closure.\n         match fn_kind {\n-            FnKind::ItemFn(.., visibility, _) | FnKind::Method(.., Some(visibility), _) => {\n+            FnKind::ItemFn(.., visibility) | FnKind::Method(.., Some(visibility)) => {\n                 if visibility.node.is_pub() {\n                     return;\n                 }\n             },\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n             _ => (),\n         }\n "}]}