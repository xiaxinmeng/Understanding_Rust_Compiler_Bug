{"sha": "e74f96e43fc1611a3abb09457e8ed852af3c167e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NGY5NmU0M2ZjMTYxMWEzYWJiMDk0NTdlOGVkODUyYWYzYzE2N2U=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-04T05:01:46Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-04T05:01:46Z"}, "message": "rustc_mir: use Local instead of Lvalue in Storage{Live,Dead}.", "tree": {"sha": "18272398fc652ce62a4c32af4237bb6a674e6fb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18272398fc652ce62a4c32af4237bb6a674e6fb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e74f96e43fc1611a3abb09457e8ed852af3c167e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e74f96e43fc1611a3abb09457e8ed852af3c167e", "html_url": "https://github.com/rust-lang/rust/commit/e74f96e43fc1611a3abb09457e8ed852af3c167e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e74f96e43fc1611a3abb09457e8ed852af3c167e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f42cd848905e4d473cacce0d9da769b2e712f0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f42cd848905e4d473cacce0d9da769b2e712f0c", "html_url": "https://github.com/rust-lang/rust/commit/2f42cd848905e4d473cacce0d9da769b2e712f0c"}], "stats": {"total": 92, "additions": 38, "deletions": 54}, "files": [{"sha": "cf3d7c3642a5feadafca0ed5ccda504c759158a3", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=e74f96e43fc1611a3abb09457e8ed852af3c167e", "patch": "@@ -901,10 +901,10 @@ pub enum StatementKind<'tcx> {\n     SetDiscriminant { lvalue: Lvalue<'tcx>, variant_index: usize },\n \n     /// Start a live range for the storage of the local.\n-    StorageLive(Lvalue<'tcx>),\n+    StorageLive(Local),\n \n     /// End the current live range for the storage of the local.\n-    StorageDead(Lvalue<'tcx>),\n+    StorageDead(Local),\n \n     /// Execute a piece of inline Assembly.\n     InlineAsm {\n@@ -1701,8 +1701,8 @@ impl<'tcx> TypeFoldable<'tcx> for Statement<'tcx> {\n                 lvalue: lvalue.fold_with(folder),\n                 variant_index,\n             },\n-            StorageLive(ref lval) => StorageLive(lval.fold_with(folder)),\n-            StorageDead(ref lval) => StorageDead(lval.fold_with(folder)),\n+            StorageLive(ref local) => StorageLive(local.fold_with(folder)),\n+            StorageDead(ref local) => StorageDead(local.fold_with(folder)),\n             InlineAsm { ref asm, ref outputs, ref inputs } => InlineAsm {\n                 asm: asm.clone(),\n                 outputs: outputs.fold_with(folder),\n@@ -1732,9 +1732,9 @@ impl<'tcx> TypeFoldable<'tcx> for Statement<'tcx> {\n \n         match self.kind {\n             Assign(ref lval, ref rval) => { lval.visit_with(visitor) || rval.visit_with(visitor) }\n-            SetDiscriminant { ref lvalue, .. } |\n-            StorageLive(ref lvalue) |\n-            StorageDead(ref lvalue) => lvalue.visit_with(visitor),\n+            SetDiscriminant { ref lvalue, .. } => lvalue.visit_with(visitor),\n+            StorageLive(ref local) |\n+            StorageDead(ref local) => local.visit_with(visitor),\n             InlineAsm { ref outputs, ref inputs, .. } =>\n                 outputs.visit_with(visitor) || inputs.visit_with(visitor),\n "}, {"sha": "f26505c6d0237e9d119cf8e43494e0b095e184b2", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=e74f96e43fc1611a3abb09457e8ed852af3c167e", "patch": "@@ -360,11 +360,11 @@ macro_rules! make_mir_visitor {\n                     StatementKind::SetDiscriminant{ ref $($mutability)* lvalue, .. } => {\n                         self.visit_lvalue(lvalue, LvalueContext::Store, location);\n                     }\n-                    StatementKind::StorageLive(ref $($mutability)* lvalue) => {\n-                        self.visit_lvalue(lvalue, LvalueContext::StorageLive, location);\n+                    StatementKind::StorageLive(ref $($mutability)* local) => {\n+                        self.visit_local(local, LvalueContext::StorageLive, location);\n                     }\n-                    StatementKind::StorageDead(ref $($mutability)* lvalue) => {\n-                        self.visit_lvalue(lvalue, LvalueContext::StorageDead, location);\n+                    StatementKind::StorageDead(ref $($mutability)* local) => {\n+                        self.visit_local(local, LvalueContext::StorageDead, location);\n                     }\n                     StatementKind::InlineAsm { ref $($mutability)* outputs,\n                                                ref $($mutability)* inputs,"}, {"sha": "063cbc775591540004de493501a424877bfb7161", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=e74f96e43fc1611a3abb09457e8ed852af3c167e", "patch": "@@ -212,11 +212,11 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> DataflowResultsConsumer<'b, 'gcx>\n                 // ignored by borrowck\n             }\n \n-            StatementKind::StorageDead(ref lvalue) => {\n+            StatementKind::StorageDead(local) => {\n                 // causes non-drop values to be dropped.\n                 self.consume_lvalue(ContextKind::StorageDead.new(location),\n                                     ConsumeKind::Consume,\n-                                    (lvalue, span),\n+                                    (&Lvalue::Local(local), span),\n                                     flow_state)\n             }\n         }"}, {"sha": "c83283ee38e1fcd12b25ac130167883eb9addf88", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=e74f96e43fc1611a3abb09457e8ed852af3c167e", "patch": "@@ -96,23 +96,23 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n             ExprKind::Box { value } => {\n                 let value = this.hir.mirror(value);\n-                let result = this.temp(expr.ty, expr_span);\n+                let result = this.local_decls.push(LocalDecl::new_temp(expr.ty, expr_span));\n                 this.cfg.push(block, Statement {\n                     source_info,\n-                    kind: StatementKind::StorageLive(result.clone())\n+                    kind: StatementKind::StorageLive(result)\n                 });\n                 if let Some(scope) = scope {\n                     // schedule a shallow free of that memory, lest we unwind:\n-                    this.schedule_drop(expr_span, scope, &result, value.ty);\n+                    this.schedule_drop(expr_span, scope, &Lvalue::Local(result), value.ty);\n                 }\n \n                 // malloc some memory of suitable type (thus far, uninitialized):\n                 let box_ = Rvalue::NullaryOp(NullOp::Box, value.ty);\n-                this.cfg.push_assign(block, source_info, &result, box_);\n+                this.cfg.push_assign(block, source_info, &Lvalue::Local(result), box_);\n \n                 // initialize the box contents:\n-                unpack!(block = this.into(&result.clone().deref(), block, value));\n-                block.and(Rvalue::Use(Operand::Consume(result)))\n+                unpack!(block = this.into(&Lvalue::Local(result).deref(), block, value));\n+                block.and(Rvalue::Use(Operand::Consume(Lvalue::Local(result))))\n             }\n             ExprKind::Cast { source } => {\n                 let source = this.hir.mirror(source);"}, {"sha": "7826769600bfa4294aa999efc401960ff1ba8f00", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=e74f96e43fc1611a3abb09457e8ed852af3c167e", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         if !expr_ty.is_never() {\n             this.cfg.push(block, Statement {\n                 source_info,\n-                kind: StatementKind::StorageLive(Lvalue::Local(temp))\n+                kind: StatementKind::StorageLive(temp)\n             });\n         }\n "}, {"sha": "ec2e487b4e74cf22c7048e82f3792c3a66f4a947", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=e74f96e43fc1611a3abb09457e8ed852af3c167e", "patch": "@@ -194,7 +194,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = self.source_info(span);\n         self.cfg.push(block, Statement {\n             source_info,\n-            kind: StatementKind::StorageLive(Lvalue::Local(local_id))\n+            kind: StatementKind::StorageLive(local_id)\n         });\n         Lvalue::Local(local_id)\n     }"}, {"sha": "ed598c876f3e90628726d1c2ef73cd3455658935", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=e74f96e43fc1611a3abb09457e8ed852af3c167e", "patch": "@@ -822,7 +822,7 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n             Lvalue::Local(index) if index.index() > arg_count => {\n                 cfg.push(block, Statement {\n                     source_info,\n-                    kind: StatementKind::StorageDead(drop_data.location.clone())\n+                    kind: StatementKind::StorageDead(index)\n                 });\n             }\n             _ => continue"}, {"sha": "d1e0465f5551c098c37ed3b19b6cb532f97350a9", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=e74f96e43fc1611a3abb09457e8ed852af3c167e", "patch": "@@ -213,12 +213,8 @@ impl<'a, 'tcx> MutVisitor<'tcx> for TransformVisitor<'a, 'tcx> {\n         // Remove StorageLive and StorageDead statements for remapped locals\n         data.retain_statements(|s| {\n             match s.kind {\n-                StatementKind::StorageLive(ref l) | StatementKind::StorageDead(ref l) => {\n-                    if let Lvalue::Local(l) = *l {\n-                        !self.remap.contains_key(&l)\n-                    } else {\n-                        true\n-                    }\n+                StatementKind::StorageLive(l) | StatementKind::StorageDead(l) => {\n+                    !self.remap.contains_key(&l)\n                 }\n                 _ => true\n             }"}, {"sha": "ca6eda5c2d716498d0e62b9cd0bc52ad1b32ebe0", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=e74f96e43fc1611a3abb09457e8ed852af3c167e", "patch": "@@ -406,8 +406,8 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n         block.statements.retain(|statement| {\n             match statement.kind {\n                 StatementKind::Assign(Lvalue::Local(index), _) |\n-                StatementKind::StorageLive(Lvalue::Local(index)) |\n-                StatementKind::StorageDead(Lvalue::Local(index)) => {\n+                StatementKind::StorageLive(index) |\n+                StatementKind::StorageDead(index) => {\n                     !promoted(index)\n                 }\n                 _ => true"}, {"sha": "415421757c5c5087c0ca7d540fa8613bf2e09cf7", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=e74f96e43fc1611a3abb09457e8ed852af3c167e", "patch": "@@ -1108,7 +1108,7 @@ impl MirPass for QualifyAndPromoteConstants {\n             for block in mir.basic_blocks_mut() {\n                 block.statements.retain(|statement| {\n                     match statement.kind {\n-                        StatementKind::StorageDead(Lvalue::Local(index)) => {\n+                        StatementKind::StorageDead(index) => {\n                             !promoted_temps.contains(&index)\n                         }\n                         _ => true"}, {"sha": "89828cf375aa7554e8053ea00c505d5a8251e5ff", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=e74f96e43fc1611a3abb09457e8ed852af3c167e", "patch": "@@ -369,11 +369,8 @@ impl<'tcx> MutVisitor<'tcx> for LocalUpdater {\n         // Remove unnecessary StorageLive and StorageDead annotations.\n         data.statements.retain(|stmt| {\n             match stmt.kind {\n-                StatementKind::StorageLive(ref lval) | StatementKind::StorageDead(ref lval) => {\n-                    match *lval {\n-                        Lvalue::Local(l) => self.map[l.index()] != !0,\n-                        _ => true\n-                    }\n+                StatementKind::StorageLive(l) | StatementKind::StorageDead(l) => {\n+                    self.map[l.index()] != !0\n                 }\n                 _ => true\n             }"}, {"sha": "d4da14ea96e72bf316351e21fa0ef629452e6472", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=e74f96e43fc1611a3abb09457e8ed852af3c167e", "patch": "@@ -420,15 +420,8 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                                variant_index);\n                 };\n             }\n-            StatementKind::StorageLive(ref lv) |\n-            StatementKind::StorageDead(ref lv) => {\n-                match *lv {\n-                    Lvalue::Local(_) => {}\n-                    _ => {\n-                        span_mirbug!(self, stmt, \"bad lvalue: expected local\");\n-                    }\n-                }\n-            }\n+            StatementKind::StorageLive(_) |\n+            StatementKind::StorageDead(_) |\n             StatementKind::InlineAsm { .. } |\n             StatementKind::EndRegion(_) |\n             StatementKind::Validate(..) |"}, {"sha": "bbf661ae9a735d41c994cbe8ab018334f12386cb", "filename": "src/librustc_trans/mir/statement.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74f96e43fc1611a3abb09457e8ed852af3c167e/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fstatement.rs?ref=e74f96e43fc1611a3abb09457e8ed852af3c167e", "patch": "@@ -67,11 +67,11 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                     variant_index as u64);\n                 bcx\n             }\n-            mir::StatementKind::StorageLive(ref lvalue) => {\n-                self.trans_storage_liveness(bcx, lvalue, base::Lifetime::Start)\n+            mir::StatementKind::StorageLive(local) => {\n+                self.trans_storage_liveness(bcx, local, base::Lifetime::Start)\n             }\n-            mir::StatementKind::StorageDead(ref lvalue) => {\n-                self.trans_storage_liveness(bcx, lvalue, base::Lifetime::End)\n+            mir::StatementKind::StorageDead(local) => {\n+                self.trans_storage_liveness(bcx, local, base::Lifetime::End)\n             }\n             mir::StatementKind::InlineAsm { ref asm, ref outputs, ref inputs } => {\n                 let outputs = outputs.iter().map(|output| {\n@@ -94,13 +94,11 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n     fn trans_storage_liveness(&self,\n                               bcx: Builder<'a, 'tcx>,\n-                              lvalue: &mir::Lvalue<'tcx>,\n+                              index: mir::Local,\n                               intrinsic: base::Lifetime)\n                               -> Builder<'a, 'tcx> {\n-        if let mir::Lvalue::Local(index) = *lvalue {\n-            if let LocalRef::Lvalue(tr_lval) = self.locals[index] {\n-                intrinsic.call(&bcx, tr_lval.llval);\n-            }\n+        if let LocalRef::Lvalue(tr_lval) = self.locals[index] {\n+            intrinsic.call(&bcx, tr_lval.llval);\n         }\n         bcx\n     }"}]}