{"sha": "cc975929c528d0883d7553c53dc47030c08d01e0", "node_id": "C_kwDOAAsO6NoAKGNjOTc1OTI5YzUyOGQwODgzZDc1NTNjNTNkYzQ3MDMwYzA4ZDAxZTA", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-06T02:36:22Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-28T21:45:41Z"}, "message": "Rename path_to_res to def_path_res", "tree": {"sha": "8ffa76a4510432c79c1401afcd2e2fca1c253f16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ffa76a4510432c79c1401afcd2e2fca1c253f16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc975929c528d0883d7553c53dc47030c08d01e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc975929c528d0883d7553c53dc47030c08d01e0", "html_url": "https://github.com/rust-lang/rust/commit/cc975929c528d0883d7553c53dc47030c08d01e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc975929c528d0883d7553c53dc47030c08d01e0/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d5d9e01037b841ca9ae9add09cdf4ada12a0fae", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5d9e01037b841ca9ae9add09cdf4ada12a0fae", "html_url": "https://github.com/rust-lang/rust/commit/8d5d9e01037b841ca9ae9add09cdf4ada12a0fae"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "4c12202c84ab39da96a0c1a54e5b7cb78a43f19c", "filename": "clippy_lints/src/disallowed_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc975929c528d0883d7553c53dc47030c08d01e0/clippy_lints%2Fsrc%2Fdisallowed_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc975929c528d0883d7553c53dc47030c08d01e0/clippy_lints%2Fsrc%2Fdisallowed_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_methods.rs?ref=cc975929c528d0883d7553c53dc47030c08d01e0", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedMethods {\n     fn check_crate(&mut self, cx: &LateContext<'_>) {\n         for (index, conf) in self.conf_disallowed.iter().enumerate() {\n             let segs: Vec<_> = conf.path().split(\"::\").collect();\n-            if let Res::Def(_, id) = clippy_utils::path_to_res(cx, &segs) {\n+            if let Res::Def(_, id) = clippy_utils::def_path_res(cx, &segs) {\n                 self.disallowed.insert(id, index);\n             }\n         }"}, {"sha": "14f89edce615db9993d811d34e6e8d42d62f8b14", "filename": "clippy_lints/src/disallowed_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc975929c528d0883d7553c53dc47030c08d01e0/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc975929c528d0883d7553c53dc47030c08d01e0/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_types.rs?ref=cc975929c528d0883d7553c53dc47030c08d01e0", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedTypes {\n                 ),\n             };\n             let segs: Vec<_> = path.split(\"::\").collect();\n-            match clippy_utils::path_to_res(cx, &segs) {\n+            match clippy_utils::def_path_res(cx, &segs) {\n                 Res::Def(_, id) => {\n                     self.def_ids.insert(id, reason);\n                 },"}, {"sha": "3d0a23822838e871c3c6ef5f891aa4303505b7d3", "filename": "clippy_lints/src/missing_enforced_import_rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc975929c528d0883d7553c53dc47030c08d01e0/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc975929c528d0883d7553c53dc47030c08d01e0/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs?ref=cc975929c528d0883d7553c53dc47030c08d01e0", "patch": "@@ -58,7 +58,7 @@ impl_lint_pass!(ImportRename => [MISSING_ENFORCED_IMPORT_RENAMES]);\n impl LateLintPass<'_> for ImportRename {\n     fn check_crate(&mut self, cx: &LateContext<'_>) {\n         for Rename { path, rename } in &self.conf_renames {\n-            if let Res::Def(_, id) = clippy_utils::path_to_res(cx, &path.split(\"::\").collect::<Vec<_>>()) {\n+            if let Res::Def(_, id) = clippy_utils::def_path_res(cx, &path.split(\"::\").collect::<Vec<_>>()) {\n                 self.renames.insert(id, Symbol::intern(rename));\n             }\n         }"}, {"sha": "dc0f515bfe5cb1d97e075396e242722eeab43502", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc975929c528d0883d7553c53dc47030c08d01e0/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc975929c528d0883d7553c53dc47030c08d01e0/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=cc975929c528d0883d7553c53dc47030c08d01e0", "patch": "@@ -4,8 +4,8 @@ use clippy_utils::macros::root_macro_call_first_node;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::match_type;\n use clippy_utils::{\n-    higher, is_else_clause, is_expn_of, is_expr_path_def_path, is_lint_allowed, match_def_path, method_calls,\n-    path_to_res, paths, peel_blocks_with_stmt, SpanlessEq,\n+    def_path_res, higher, is_else_clause, is_expn_of, is_expr_path_def_path, is_lint_allowed, match_def_path,\n+    method_calls, paths, peel_blocks_with_stmt, SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast as ast;\n@@ -844,7 +844,7 @@ impl<'tcx> LateLintPass<'tcx> for MatchTypeOnDiagItem {\n             // Extract the path to the matched type\n             if let Some(segments) = path_to_matched_type(cx, ty_path);\n             let segments: Vec<&str> = segments.iter().map(Symbol::as_str).collect();\n-            if let Some(ty_did) = path_to_res(cx, &segments[..]).opt_def_id();\n+            if let Some(ty_did) = def_path_res(cx, &segments[..]).opt_def_id();\n             // Check if the matched type is a diagnostic item\n             if let Some(item_name) = cx.tcx.get_diagnostic_name(ty_did);\n             then {\n@@ -917,7 +917,7 @@ fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Ve\n // This is not a complete resolver for paths. It works on all the paths currently used in the paths\n // module.  That's all it does and all it needs to do.\n pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n-    if path_to_res(cx, path) != Res::Err {\n+    if def_path_res(cx, path) != Res::Err {\n         return true;\n     }\n \n@@ -999,7 +999,7 @@ impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n         }\n \n         for &module in &[&paths::KW_MODULE, &paths::SYM_MODULE] {\n-            if let Some(def_id) = path_to_res(cx, module).opt_def_id() {\n+            if let Some(def_id) = def_path_res(cx, module).opt_def_id() {\n                 for item in cx.tcx.module_children(def_id).iter() {\n                     if_chain! {\n                         if let Res::Def(DefKind::Const, item_def_id) = item.res;"}, {"sha": "28bca902e1907e192c6bc8eec302216d7711312d", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc975929c528d0883d7553c53dc47030c08d01e0/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc975929c528d0883d7553c53dc47030c08d01e0/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=cc975929c528d0883d7553c53dc47030c08d01e0", "patch": "@@ -497,8 +497,9 @@ pub fn path_to_local_id(expr: &Expr<'_>, id: HirId) -> bool {\n     path_to_local(expr) == Some(id)\n }\n \n-/// Gets the definition associated to a path.\n-pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n+/// Resolves a def path like `std::vec::Vec`.\n+/// This function is expensive and should be used sparingly.\n+pub fn def_path_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n     macro_rules! try_res {\n         ($e:expr) => {\n             match $e {\n@@ -574,7 +575,7 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n /// Convenience function to get the `DefId` of a trait by path.\n /// It could be a trait or trait alias.\n pub fn get_trait_def_id(cx: &LateContext<'_>, path: &[&str]) -> Option<DefId> {\n-    match path_to_res(cx, path) {\n+    match def_path_res(cx, path) {\n         Res::Def(DefKind::Trait | DefKind::TraitAlias, trait_id) => Some(trait_id),\n         _ => None,\n     }"}]}