{"sha": "d6b013ff9e5bbacfb6140f194b1700c2602f0bab", "node_id": "C_kwDOAAsO6NoAKGQ2YjAxM2ZmOWU1YmJhY2ZiNjE0MGYxOTRiMTcwMGMyNjAyZjBiYWI", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-01-21T16:27:57Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-06-06T14:15:53Z"}, "message": "Reformat internal docs\n\nThis reformats all the internal docs, so that the md files use at most\n80 characters per line. This is the usual formatting of md files. We\nallow 120 chars per line in CI though.", "tree": {"sha": "a31148ab7b05c5e8a91c38ae867f5eda736c8b2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a31148ab7b05c5e8a91c38ae867f5eda736c8b2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6b013ff9e5bbacfb6140f194b1700c2602f0bab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmKeDBkACgkQHKDfKvWd\naKUXSg//UrVtLYJB2D9xRQfLUF1+kHf6yxOsQz1yce7Bk2BBTRQvJMuzWb3iUorf\njQ6cS7KDQS29CYL4r2J+2fHLQCfxs6cmONhpZOsApUn1Cw2+VZvi3THYRYxh/8BU\neMo9+DATUaFdjUJR5LsUw0asFZLPvJiHBi68vLfT3jx/3TusDrfMHFzPf9KY3qZd\n/OD9V7H59C3ZfM5hFH0aEqspULJfWPM8pY/Ptn1ro3slkojO+d85eti8zCpEbiQR\noYP3cwlTUUI/8vJm30GT8xLJ0UeylWBsx95+dEJQWuu4k9CJAhhkb5ICVh0sd0t4\no9xlSyyaDK0LEfcpHNC+6n5lNgPspEbIgXueoKzWSn1QIpxO+cQR++HB5c7EgJhs\nybRiCjC4xEZXsgBLS5SsBTvduELv3QCz5UQ5yP2nKjrHUAyrShByNNsOQVcDf9/z\nlrHztL18xMBv0Bm54N9w/uMHOq/opVTC3F1vW2KMNQ/9gLMAJMNbUbo3ImNynHUC\nEzEkHertMz9yPyBHVn0bvxjrf14iDKANAbAq+Ltmt8JEPA/t01uL1Xy9qw5bkHBx\noiEPtsJD8CHbIYHtqH9rJMjwQlunEODUSxGhcGAHbQ9r+5cDSqg8yP4GCwQBmeoE\nivpUs+zitsKHHYnNbeoEWRUWtmoojzIi/vmTqJir5kdm84erqLs=\n=TlnD\n-----END PGP SIGNATURE-----", "payload": "tree a31148ab7b05c5e8a91c38ae867f5eda736c8b2f\nparent 206ec6e2f694f1e8f0c3a9d37d5273ef0286e821\nauthor flip1995 <philipp.krones@embecosm.com> 1642782477 +0100\ncommitter Philipp Krones <hello@philkrones.com> 1654524953 +0200\n\nReformat internal docs\n\nThis reformats all the internal docs, so that the md files use at most\n80 characters per line. This is the usual formatting of md files. We\nallow 120 chars per line in CI though.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b013ff9e5bbacfb6140f194b1700c2602f0bab", "html_url": "https://github.com/rust-lang/rust/commit/d6b013ff9e5bbacfb6140f194b1700c2602f0bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6b013ff9e5bbacfb6140f194b1700c2602f0bab/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "206ec6e2f694f1e8f0c3a9d37d5273ef0286e821", "url": "https://api.github.com/repos/rust-lang/rust/commits/206ec6e2f694f1e8f0c3a9d37d5273ef0286e821", "html_url": "https://github.com/rust-lang/rust/commit/206ec6e2f694f1e8f0c3a9d37d5273ef0286e821"}], "stats": {"total": 627, "additions": 340, "deletions": 287}, "files": [{"sha": "7ffada8aef156fda2005338210de9603aa0a4c6e", "filename": "book/src/development/adding_lints.md", "status": "modified", "additions": 172, "deletions": 151, "changes": 323, "blob_url": "https://github.com/rust-lang/rust/blob/d6b013ff9e5bbacfb6140f194b1700c2602f0bab/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/d6b013ff9e5bbacfb6140f194b1700c2602f0bab/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fadding_lints.md?ref=d6b013ff9e5bbacfb6140f194b1700c2602f0bab", "patch": "@@ -45,9 +45,9 @@ take a look at our [lint naming guidelines][lint_naming]. To get started on this\n lint you can run `cargo dev new_lint --name=foo_functions --pass=early\n --category=pedantic` (category will default to nursery if not provided). This\n command will create two files: `tests/ui/foo_functions.rs` and\n-`clippy_lints/src/foo_functions.rs`, as well as\n-[registering the lint](#lint-registration). For cargo lints, two project\n-hierarchies (fail/pass) will be created by default under `tests/ui-cargo`.\n+`clippy_lints/src/foo_functions.rs`, as well as [registering the\n+lint](#lint-registration). For cargo lints, two project hierarchies (fail/pass)\n+will be created by default under `tests/ui-cargo`.\n \n Next, we'll open up these files and add our lint!\n \n@@ -58,8 +58,8 @@ Let's write some tests first that we can execute while we iterate on our lint.\n Clippy uses UI tests for testing. UI tests check that the output of Clippy is\n exactly as expected. Each test is just a plain Rust file that contains the code\n we want to check. The output of Clippy is compared against a `.stderr` file.\n-Note that you don't have to create this file yourself, we'll get to\n-generating the `.stderr` files further down.\n+Note that you don't have to create this file yourself, we'll get to generating\n+the `.stderr` files further down.\n \n We start by opening the test file created at `tests/ui/foo_functions.rs`.\n \n@@ -96,60 +96,63 @@ fn main() {\n }\n ```\n \n-Now we can run the test with `TESTNAME=foo_functions cargo uitest`,\n-currently this test is meaningless though.\n+Now we can run the test with `TESTNAME=foo_functions cargo uitest`, currently\n+this test is meaningless though.\n \n-While we are working on implementing our lint, we can keep running the UI\n-test. That allows us to check if the output is turning into what we want.\n+While we are working on implementing our lint, we can keep running the UI test.\n+That allows us to check if the output is turning into what we want.\n \n-Once we are satisfied with the output, we need to run\n-`cargo dev bless` to update the `.stderr` file for our lint.\n-Please note that, we should run `TESTNAME=foo_functions cargo uitest`\n-every time before running `cargo dev bless`.\n-Running `TESTNAME=foo_functions cargo uitest` should pass then. When we commit\n-our lint, we need to commit the generated `.stderr` files, too. In general, you\n-should only commit files changed by `cargo dev bless` for the\n+Once we are satisfied with the output, we need to run `cargo dev bless` to\n+update the `.stderr` file for our lint. Please note that, we should run\n+`TESTNAME=foo_functions cargo uitest` every time before running `cargo dev\n+bless`. Running `TESTNAME=foo_functions cargo uitest` should pass then. When we\n+commit our lint, we need to commit the generated `.stderr` files, too. In\n+general, you should only commit files changed by `cargo dev bless` for the\n specific lint you are creating/editing. Note that if the generated files are\n empty, they should be removed.\n \n-Note that you can run multiple test files by specifying a comma separated list:\n-`TESTNAME=foo_functions,test2,test3`.\n+> _Note:_ you can run multiple test files by specifying a comma separated list:\n+> `TESTNAME=foo_functions,test2,test3`.\n \n ### Cargo lints\n \n-For cargo lints, the process of testing differs in that we are interested in\n-the `Cargo.toml` manifest file. We also need a minimal crate associated\n-with that manifest.\n+For cargo lints, the process of testing differs in that we are interested in the\n+`Cargo.toml` manifest file. We also need a minimal crate associated with that\n+manifest.\n \n-If our new lint is named e.g. `foo_categories`, after running `cargo dev new_lint`\n-we will find by default two new crates, each with its manifest file:\n+If our new lint is named e.g. `foo_categories`, after running `cargo dev\n+new_lint` we will find by default two new crates, each with its manifest file:\n \n-* `tests/ui-cargo/foo_categories/fail/Cargo.toml`: this file should cause the new lint to raise an error.\n-* `tests/ui-cargo/foo_categories/pass/Cargo.toml`: this file should not trigger the lint.\n+* `tests/ui-cargo/foo_categories/fail/Cargo.toml`: this file should cause the\n+  new lint to raise an error.\n+* `tests/ui-cargo/foo_categories/pass/Cargo.toml`: this file should not trigger\n+  the lint.\n \n-If you need more cases, you can copy one of those crates (under `foo_categories`) and rename it.\n+If you need more cases, you can copy one of those crates (under\n+`foo_categories`) and rename it.\n \n-The process of generating the `.stderr` file is the same, and prepending the `TESTNAME`\n-variable to `cargo uitest` works too.\n+The process of generating the `.stderr` file is the same, and prepending the\n+`TESTNAME` variable to `cargo uitest` works too.\n \n ## Rustfix tests\n \n-If the lint you are working on is making use of structured suggestions, the\n-test file should include a `// run-rustfix` comment at the top. This will\n+If the lint you are working on is making use of structured suggestions, the test\n+file should include a `// run-rustfix` comment at the top. This will\n additionally run [rustfix] for that test. Rustfix will apply the suggestions\n-from the lint to the code of the test file and compare that to the contents of\n-a `.fixed` file.\n+from the lint to the code of the test file and compare that to the contents of a\n+`.fixed` file.\n \n-Use `cargo dev bless` to automatically generate the\n-`.fixed` file after running the tests.\n+Use `cargo dev bless` to automatically generate the `.fixed` file after running\n+the tests.\n \n [rustfix]: https://github.com/rust-lang/rustfix\n \n ## Edition 2018 tests\n \n Some features require the 2018 edition to work (e.g. `async_await`), but\n compile-test tests run on the 2015 edition by default. To change this behavior\n-add `// edition:2018` at the top of the test file (note that it's space-sensitive).\n+add `// edition:2018` at the top of the test file (note that it's\n+space-sensitive).\n \n ## Testing manually\n \n@@ -166,9 +169,9 @@ implementing our lint now.\n \n ## Lint declaration\n \n-Let's start by opening the new file created in the `clippy_lints` crate\n-at `clippy_lints/src/foo_functions.rs`. That's the crate where all the\n-lint code is. This file has already imported some initial things we will need:\n+Let's start by opening the new file created in the `clippy_lints` crate at\n+`clippy_lints/src/foo_functions.rs`. That's the crate where all the lint code\n+is. This file has already imported some initial things we will need:\n \n ```rust\n use rustc_lint::{EarlyLintPass, EarlyContext};\n@@ -178,7 +181,8 @@ use rustc_ast::ast::*;\n \n The next step is to update the lint declaration. Lints are declared using the\n [`declare_clippy_lint!`][declare_clippy_lint] macro, and we just need to update\n-the auto-generated lint declaration to have a real description, something like this:\n+the auto-generated lint declaration to have a real description, something like\n+this:\n \n ```rust\n declare_clippy_lint! {\n@@ -198,24 +202,25 @@ declare_clippy_lint! {\n ```\n \n * The section of lines prefixed with `///` constitutes the lint documentation\n-  section. This is the default documentation style and will be displayed\n-  [like this][example_lint_page]. To render and open this documentation locally\n-  in a browser, run `cargo dev serve`.\n-* The `#[clippy::version]` attribute will be rendered as part of the lint documentation.\n-  The value should be set to the current Rust version that the lint is developed in,\n-  it can be retrieved by running `rustc -vV` in the rust-clippy directory. The version\n-  is listed under *release*. (Use the version without the `-nightly`) suffix.\n-* `FOO_FUNCTIONS` is the name of our lint. Be sure to follow the\n-  [lint naming guidelines][lint_naming] here when naming your lint.\n-  In short, the name should state the thing that is being checked for and\n-  read well when used with `allow`/`warn`/`deny`.\n-* `pedantic` sets the lint level to `Allow`.\n-  The exact mapping can be found [here][category_level_mapping]\n+  section. This is the default documentation style and will be displayed [like\n+  this][example_lint_page]. To render and open this documentation locally in a\n+  browser, run `cargo dev serve`.\n+* The `#[clippy::version]` attribute will be rendered as part of the lint\n+  documentation. The value should be set to the current Rust version that the\n+  lint is developed in, it can be retrieved by running `rustc -vV` in the\n+  rust-clippy directory. The version is listed under *release*. (Use the version\n+  without the `-nightly`) suffix.\n+* `FOO_FUNCTIONS` is the name of our lint. Be sure to follow the [lint naming\n+  guidelines][lint_naming] here when naming your lint. In short, the name should\n+  state the thing that is being checked for and read well when used with\n+  `allow`/`warn`/`deny`.\n+* `pedantic` sets the lint level to `Allow`. The exact mapping can be found\n+  [here][category_level_mapping]\n * The last part should be a text that explains what exactly is wrong with the\n   code\n \n-The rest of this file contains an empty implementation for our lint pass,\n-which in this case is `EarlyLintPass` and should look like this:\n+The rest of this file contains an empty implementation for our lint pass, which\n+in this case is `EarlyLintPass` and should look like this:\n \n ```rust\n // clippy_lints/src/foo_functions.rs\n@@ -324,9 +329,9 @@ impl EarlyLintPass for FooFunctions {\n Running our UI test should now produce output that contains the lint message.\n \n According to [the rustc-dev-guide], the text should be matter of fact and avoid\n-capitalization and periods, unless multiple sentences are needed.\n-When code or an identifier must appear in a message or label, it should be\n-surrounded with single grave accents \\`.\n+capitalization and periods, unless multiple sentences are needed. When code or\n+an identifier must appear in a message or label, it should be surrounded with\n+single grave accents \\`.\n \n [check_fn]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html#method.check_fn\n [diagnostics]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_utils/src/diagnostics.rs\n@@ -382,8 +387,8 @@ fn is_foo_fn(fn_kind: FnKind<'_>) -> bool {\n ```\n \n Now we should also run the full test suite with `cargo test`. At this point\n-running `cargo test` should produce the expected output. Remember to run\n-`cargo dev bless` to update the `.stderr` file.\n+running `cargo test` should produce the expected output. Remember to run `cargo\n+dev bless` to update the `.stderr` file.\n \n `cargo test` (as opposed to `cargo uitest`) will also ensure that our lint\n implementation is not violating any Clippy lints itself.\n@@ -397,13 +402,16 @@ pass.\n \n ## Specifying the lint's minimum supported Rust version (MSRV)\n \n-Sometimes a lint makes suggestions that require a certain version of Rust. For example, the `manual_strip` lint suggests\n-using `str::strip_prefix` and `str::strip_suffix` which is only available after Rust 1.45. In such cases, you need to\n-ensure that the MSRV configured for the project is >= the MSRV of the required Rust feature. If multiple features are\n-required, just use the one with a lower MSRV.\n+Sometimes a lint makes suggestions that require a certain version of Rust. For\n+example, the `manual_strip` lint suggests using `str::strip_prefix` and\n+`str::strip_suffix` which is only available after Rust 1.45. In such cases, you\n+need to ensure that the MSRV configured for the project is >= the MSRV of the\n+required Rust feature. If multiple features are required, just use the one with\n+a lower MSRV.\n \n-First, add an MSRV alias for the required feature in [`clippy_utils::msrvs`](/clippy_utils/src/msrvs.rs). This can be\n-accessed later as `msrvs::STR_STRIP_PREFIX`, for example.\n+First, add an MSRV alias for the required feature in\n+[`clippy_utils::msrvs`](/clippy_utils/src/msrvs.rs). This can be accessed later\n+as `msrvs::STR_STRIP_PREFIX`, for example.\n \n ```rust\n msrv_aliases! {\n@@ -412,8 +420,9 @@ msrv_aliases! {\n }\n ```\n \n-In order to access the project-configured MSRV, you need to have an `msrv` field in the LintPass struct, and a\n-constructor to initialize the field. The `msrv` value is passed to the constructor in `clippy_lints/lib.rs`.\n+In order to access the project-configured MSRV, you need to have an `msrv` field\n+in the LintPass struct, and a constructor to initialize the field. The `msrv`\n+value is passed to the constructor in `clippy_lints/lib.rs`.\n \n ```rust\n pub struct ManualStrip {\n@@ -472,11 +481,10 @@ If you have trouble implementing your lint, there is also the internal `author`\n lint to generate Clippy code that detects the offending pattern. It does not\n work for all of the Rust syntax, but can give a good starting point.\n \n-The quickest way to use it, is the\n-[Rust playground: play.rust-lang.org][author_example].\n-Put the code you want to lint into the editor and add the `#[clippy::author]`\n-attribute above the item. Then run Clippy via `Tools -> Clippy` and you should\n-see the generated code in the output below.\n+The quickest way to use it, is the [Rust playground:\n+play.rust-lang.org][author_example]. Put the code you want to lint into the\n+editor and add the `#[clippy::author]` attribute above the item. Then run Clippy\n+via `Tools -> Clippy` and you should see the generated code in the output below.\n \n [Here][author_example] is an example on the playground.\n \n@@ -487,13 +495,15 @@ you are implementing your lint.\n \n ## Print HIR lint\n \n-To implement a lint, it's helpful to first understand the internal representation\n-that rustc uses. Clippy has the `#[clippy::dump]` attribute that prints the\n-[_High-Level Intermediate Representation (HIR)_] of the item, statement, or \n-expression that the attribute is attached to. To attach the attribute to expressions\n-you often need to enable `#![feature(stmt_expr_attributes)]`.\n+To implement a lint, it's helpful to first understand the internal\n+representation that rustc uses. Clippy has the `#[clippy::dump]` attribute that\n+prints the [_High-Level Intermediate Representation (HIR)_] of the item,\n+statement, or expression that the attribute is attached to. To attach the\n+attribute to expressions you often need to enable\n+`#![feature(stmt_expr_attributes)]`.\n \n-[Here][print_hir_example] you can find an example, just select _Tools_ and run _Clippy_.\n+[Here][print_hir_example] you can find an example, just select _Tools_ and run\n+_Clippy_.\n \n [_High-Level Intermediate Representation (HIR)_]: https://rustc-dev-guide.rust-lang.org/hir.html\n [print_hir_example]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=daf14db3a7f39ca467cd1b86c34b9afb\n@@ -518,7 +528,7 @@ declare_clippy_lint! {\n     /// ```rust,ignore\n     /// // A short example of code that triggers the lint\n     /// ```\n-    /// \n+    ///\n     /// Use instead:\n     /// ```rust,ignore\n     /// // A short example of improved code that doesn't trigger the lint\n@@ -537,9 +547,9 @@ list][lint_list].\n \n ## Running rustfmt\n \n-[Rustfmt] is a tool for formatting Rust code according to style guidelines.\n-Your code has to be formatted by `rustfmt` before a PR can be merged.\n-Clippy uses nightly `rustfmt` in the CI.\n+[Rustfmt] is a tool for formatting Rust code according to style guidelines. Your\n+code has to be formatted by `rustfmt` before a PR can be merged. Clippy uses\n+nightly `rustfmt` in the CI.\n \n It can be installed via `rustup`:\n \n@@ -575,94 +585,105 @@ Before submitting your PR make sure you followed all of the basic requirements:\n \n ## Adding configuration to a lint\n \n-Clippy supports the configuration of lints values using a `clippy.toml` file in the workspace\n-directory. Adding a configuration to a lint can be useful for thresholds or to constrain some\n-behavior that can be seen as a false positive for some users. Adding a configuration is done\n-in the following steps:\n+Clippy supports the configuration of lints values using a `clippy.toml` file in\n+the workspace directory. Adding a configuration to a lint can be useful for\n+thresholds or to constrain some behavior that can be seen as a false positive\n+for some users. Adding a configuration is done in the following steps:\n \n-1. Adding a new configuration entry to [clippy_lints::utils::conf](/clippy_lints/src/utils/conf.rs)\n-    like this:\n-    ```rust\n-    /// Lint: LINT_NAME.\n-    ///\n-    /// <The configuration field doc comment>\n-    (configuration_ident: Type = DefaultValue),\n-    ```\n-    The doc comment is automatically added to the documentation of the listed lints. The default\n-    value will be formatted using the `Debug` implementation of the type.\n-2. Adding the configuration value to the lint impl struct:\n-    1. This first requires the definition of a lint impl struct. Lint impl structs are usually\n-        generated with the `declare_lint_pass!` macro. This struct needs to be defined manually\n-        to add some kind of metadata to it:\n-        ```rust\n-        // Generated struct definition\n-        declare_lint_pass!(StructName => [\n-            LINT_NAME\n-        ]);\n-\n-        // New manual definition struct\n-        #[derive(Copy, Clone)]\n-        pub struct StructName {}\n-\n-        impl_lint_pass!(StructName => [\n-            LINT_NAME\n-        ]);\n-        ```\n-\n-    2. Next add the configuration value and a corresponding creation method like this:\n-        ```rust\n-        #[derive(Copy, Clone)]\n-        pub struct StructName {\n-            configuration_ident: Type,\n-        }\n+1. Adding a new configuration entry to\n+   [clippy_lints::utils::conf](/clippy_lints/src/utils/conf.rs) like this:\n \n-        // ...\n+   ```rust\n+   /// Lint: LINT_NAME.\n+   ///\n+   /// <The configuration field doc comment>\n+   (configuration_ident: Type = DefaultValue),\n+   ```\n \n-        impl StructName {\n-            pub fn new(configuration_ident: Type) -> Self {\n-                Self {\n-                    configuration_ident,\n-                }\n-            }\n-        }\n-        ```\n+   The doc comment is automatically added to the documentation of the listed\n+   lints. The default value will be formatted using the `Debug` implementation\n+   of the type.\n+2. Adding the configuration value to the lint impl struct:\n+    1. This first requires the definition of a lint impl struct. Lint impl\n+       structs are usually generated with the `declare_lint_pass!` macro. This\n+       struct needs to be defined manually to add some kind of metadata to it:\n+       ```rust\n+       // Generated struct definition\n+       declare_lint_pass!(StructName => [\n+           LINT_NAME\n+       ]);\n+\n+       // New manual definition struct\n+       #[derive(Copy, Clone)]\n+       pub struct StructName {}\n+\n+       impl_lint_pass!(StructName => [\n+           LINT_NAME\n+       ]);\n+       ```\n+\n+    2. Next add the configuration value and a corresponding creation method like\n+       this:\n+       ```rust\n+       #[derive(Copy, Clone)]\n+       pub struct StructName {\n+           configuration_ident: Type,\n+       }\n+\n+       // ...\n+\n+       impl StructName {\n+           pub fn new(configuration_ident: Type) -> Self {\n+               Self {\n+                   configuration_ident,\n+               }\n+           }\n+       }\n+       ```\n 3. Passing the configuration value to the lint impl struct:\n \n-    First find the struct construction in the [clippy_lints lib file](/clippy_lints/src/lib.rs).\n-    The configuration value is now cloned or copied into a local value that is then passed to the\n-    impl struct like this:\n-    ```rust\n-    // Default generated registration:\n-    store.register_*_pass(|| box module::StructName);\n+   First find the struct construction in the [clippy_lints lib\n+   file](/clippy_lints/src/lib.rs). The configuration value is now cloned or\n+   copied into a local value that is then passed to the impl struct like this:\n+\n+   ```rust\n+   // Default generated registration:\n+   store.register_*_pass(|| box module::StructName);\n \n-    // New registration with configuration value\n-    let configuration_ident = conf.configuration_ident.clone();\n-    store.register_*_pass(move || box module::StructName::new(configuration_ident));\n-    ```\n+   // New registration with configuration value\n+   let configuration_ident = conf.configuration_ident.clone();\n+   store.register_*_pass(move || box module::StructName::new(configuration_ident));\n+   ```\n \n-    Congratulations the work is almost done. The configuration value can now be accessed\n-    in the linting code via `self.configuration_ident`.\n+   Congratulations the work is almost done. The configuration value can now be\n+   accessed in the linting code via `self.configuration_ident`.\n \n 4. Adding tests:\n-    1. The default configured value can be tested like any normal lint in [`tests/ui`](/tests/ui).\n-    2. The configuration itself will be tested separately in [`tests/ui-toml`](/tests/ui-toml).\n-        Simply add a new subfolder with a fitting name. This folder contains a `clippy.toml` file\n-        with the configuration value and a rust file that should be linted by Clippy. The test can\n-        otherwise be written as usual.\n+    1. The default configured value can be tested like any normal lint in\n+       [`tests/ui`](/tests/ui).\n+    2. The configuration itself will be tested separately in\n+       [`tests/ui-toml`](/tests/ui-toml). Simply add a new subfolder with a\n+       fitting name. This folder contains a `clippy.toml` file with the\n+       configuration value and a rust file that should be linted by Clippy. The\n+       test can otherwise be written as usual.\n \n ## Cheat Sheet\n \n Here are some pointers to things you are likely going to need for every lint:\n \n * [Clippy utils][utils] - Various helper functions. Maybe the function you need\n-  is already in here ([`is_type_diagnostic_item`], [`implements_trait`], [`snippet`], etc)\n+  is already in here ([`is_type_diagnostic_item`], [`implements_trait`],\n+  [`snippet`], etc)\n * [Clippy diagnostics][diagnostics]\n * [Let chains][let-chains]\n-* [`from_expansion`][from_expansion] and [`in_external_macro`][in_external_macro]\n+* [`from_expansion`][from_expansion] and\n+  [`in_external_macro`][in_external_macro]\n * [`Span`][span]\n * [`Applicability`][applicability]\n-* [Common tools for writing lints](common_tools_writing_lints.md) helps with common operations\n-* [The rustc-dev-guide][rustc-dev-guide] explains a lot of internal compiler concepts\n+* [Common tools for writing lints](common_tools_writing_lints.md) helps with\n+  common operations\n+* [The rustc-dev-guide][rustc-dev-guide] explains a lot of internal compiler\n+  concepts\n * [The nightly rustc docs][nightly_docs] which has been linked to throughout\n   this guide\n "}, {"sha": "78c429ea0132247f555723fb03bf1452bcd3a05c", "filename": "book/src/development/basics.md", "status": "modified", "additions": 43, "deletions": 29, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d6b013ff9e5bbacfb6140f194b1700c2602f0bab/book%2Fsrc%2Fdevelopment%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/d6b013ff9e5bbacfb6140f194b1700c2602f0bab/book%2Fsrc%2Fdevelopment%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fbasics.md?ref=d6b013ff9e5bbacfb6140f194b1700c2602f0bab", "patch": "@@ -1,8 +1,8 @@\n # Basics for hacking on Clippy\n \n This document explains the basics for hacking on Clippy. Besides others, this\n-includes how to build and test Clippy. For a more in depth description on\n-the codebase take a look at [Adding Lints] or [Common Tools].\n+includes how to build and test Clippy. For a more in depth description on the\n+codebase take a look at [Adding Lints] or [Common Tools].\n \n [Adding Lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n [Common Tools]: https://github.com/rust-lang/rust-clippy/blob/master/doc/common_tools_writing_lints.md\n@@ -62,8 +62,8 @@ TESTNAME=\"test_\" cargo uitest\n cargo test --test dogfood\n ```\n \n-If the output of a [UI test] differs from the expected output, you can update the\n-reference file with:\n+If the output of a [UI test] differs from the expected output, you can update\n+the reference file with:\n \n ```bash\n cargo dev bless\n@@ -72,8 +72,8 @@ cargo dev bless\n For example, this is necessary, if you fix a typo in an error message of a lint\n or if you modify a test file to add a test case.\n \n-_Note:_ This command may update more files than you intended. In that case only\n-commit the files you wanted to update.\n+> _Note:_ This command may update more files than you intended. In that case\n+> only commit the files you wanted to update.\n \n [UI test]: https://rustc-dev-guide.rust-lang.org/tests/adding.html#guide-to-the-ui-tests\n \n@@ -96,22 +96,26 @@ cargo dev setup git-hook\n # (experimental) Setup Clippy to work with IntelliJ-Rust\n cargo dev setup intellij\n ```\n-More about intellij command usage and reasons [here](../CONTRIBUTING.md#intellij-rust)\n+\n+More about intellij command usage and reasons\n+[here](../CONTRIBUTING.md#intellij-rust)\n \n ## lintcheck\n-`cargo lintcheck` will build and run clippy on a fixed set of crates and generate a log of the results.  \n-You can `git diff` the updated log against its previous version and\n-see what impact your lint made on a small set of crates.  \n-If you add a new lint, please audit the resulting warnings and make sure\n-there are no false positives and that the suggestions are valid.\n+\n+`cargo lintcheck` will build and run clippy on a fixed set of crates and\n+generate a log of the results.  You can `git diff` the updated log against its\n+previous version and see what impact your lint made on a small set of crates.\n+If you add a new lint, please audit the resulting warnings and make sure there\n+are no false positives and that the suggestions are valid.\n \n Refer to the tools [README] for more details.\n \n [README]: https://github.com/rust-lang/rust-clippy/blob/master/lintcheck/README.md\n+\n ## PR\n \n-We follow a rustc no merge-commit policy.\n-See <https://rustc-dev-guide.rust-lang.org/contributing.html#opening-a-pr>.\n+We follow a rustc no merge-commit policy. See\n+<https://rustc-dev-guide.rust-lang.org/contributing.html#opening-a-pr>.\n \n ## Common Abbreviations\n \n@@ -126,27 +130,34 @@ See <https://rustc-dev-guide.rust-lang.org/contributing.html#opening-a-pr>.\n | HIR          | High-Level Intermediate Representation |\n | TCX          | Type context                           |\n \n-This is a concise list of abbreviations that can come up during Clippy development. An extensive\n-general list can be found in the [rustc-dev-guide glossary][glossary]. Always feel free to ask if\n-an abbreviation or meaning is unclear to you.\n+This is a concise list of abbreviations that can come up during Clippy\n+development. An extensive general list can be found in the [rustc-dev-guide\n+glossary][glossary]. Always feel free to ask if an abbreviation or meaning is\n+unclear to you.\n \n ## Install from source\n \n-If you are hacking on Clippy and want to install it from source, do the following:\n+If you are hacking on Clippy and want to install it from source, do the\n+following:\n \n-First, take note of the toolchain [override](https://rust-lang.github.io/rustup/overrides.html) in `/rust-toolchain`.\n-We will use this override to install Clippy into the right toolchain.\n+First, take note of the toolchain\n+[override](https://rust-lang.github.io/rustup/overrides.html) in\n+`/rust-toolchain`. We will use this override to install Clippy into the right\n+toolchain.\n \n-> Tip: You can view the active toolchain for the current directory with `rustup show active-toolchain`.\n+> Tip: You can view the active toolchain for the current directory with `rustup\n+> show active-toolchain`.\n \n-From the Clippy project root, run the following command to build the Clippy binaries and copy them into the\n-toolchain directory. This will override the currently installed Clippy component.\n+From the Clippy project root, run the following command to build the Clippy\n+binaries and copy them into the toolchain directory. This will override the\n+currently installed Clippy component.\n \n ```terminal\n cargo build --release --bin cargo-clippy --bin clippy-driver -Zunstable-options --out-dir \"$(rustc --print=sysroot)/bin\"\n ```\n \n-Now you may run `cargo clippy` in any project, using the toolchain where you just installed Clippy.\n+Now you may run `cargo clippy` in any project, using the toolchain where you\n+just installed Clippy.\n \n ```terminal\n cd my-project\n@@ -159,16 +170,19 @@ cargo +nightly-2021-07-01 clippy\n clippy-driver +nightly-2021-07-01 <filename>\n ```\n \n-If you need to restore the default Clippy installation, run the following (from the Clippy project root).\n+If you need to restore the default Clippy installation, run the following (from\n+the Clippy project root).\n \n ```terminal\n rustup component remove clippy\n rustup component add clippy\n ```\n \n-> **DO NOT** install using `cargo install --path . --force` since this will overwrite rustup\n-> [proxies](https://rust-lang.github.io/rustup/concepts/proxies.html). That is, `~/.cargo/bin/cargo-clippy` and\n-> `~/.cargo/bin/clippy-driver` should be hard or soft links to `~/.cargo/bin/rustup`. You can repair these by running\n-> `rustup update`.\n+> **DO NOT** install using `cargo install --path . --force` since this will\n+> overwrite rustup\n+> [proxies](https://rust-lang.github.io/rustup/concepts/proxies.html). That is,\n+> `~/.cargo/bin/cargo-clippy` and `~/.cargo/bin/clippy-driver` should be hard or\n+> soft links to `~/.cargo/bin/rustup`. You can repair these by running `rustup\n+> update`.\n \n [glossary]: https://rustc-dev-guide.rust-lang.org/appendix/glossary.html"}, {"sha": "e1ed89262f677c925ff49c0c77d8e20c9de82611", "filename": "book/src/development/common_tools_writing_lints.md", "status": "modified", "additions": 72, "deletions": 59, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/d6b013ff9e5bbacfb6140f194b1700c2602f0bab/book%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/d6b013ff9e5bbacfb6140f194b1700c2602f0bab/book%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md?ref=d6b013ff9e5bbacfb6140f194b1700c2602f0bab", "patch": "@@ -18,15 +18,17 @@ Useful Rustc dev guide links:\n \n ## Retrieving the type of an expression\n \n-Sometimes you may want to retrieve the type `Ty` of an expression `Expr`, for example to answer following questions:\n+Sometimes you may want to retrieve the type `Ty` of an expression `Expr`, for\n+example to answer following questions:\n \n - which type does this expression correspond to (using its [`TyKind`][TyKind])?\n - is it a sized type?\n - is it a primitive type?\n - does it implement a trait?\n \n-This operation is performed using the [`expr_ty()`][expr_ty] method from the [`TypeckResults`][TypeckResults] struct,\n-that gives you access to the underlying structure [`Ty`][Ty].\n+This operation is performed using the [`expr_ty()`][expr_ty] method from the\n+[`TypeckResults`][TypeckResults] struct, that gives you access to the underlying\n+structure [`Ty`][Ty].\n \n Example of use:\n ```rust\n@@ -43,21 +45,22 @@ impl LateLintPass<'_> for MyStructLint {\n }\n ```\n \n-Similarly in [`TypeckResults`][TypeckResults] methods, you have the [`pat_ty()`][pat_ty] method\n-to retrieve a type from a pattern.\n+Similarly in [`TypeckResults`][TypeckResults] methods, you have the\n+[`pat_ty()`][pat_ty] method to retrieve a type from a pattern.\n \n Two noticeable items here:\n - `cx` is the lint context [`LateContext`][LateContext]. The two most useful\n   data structures in this context are `tcx` and the `TypeckResults` returned by\n   `LateContext::typeck_results`, allowing us to jump to type definitions and\n   other compilation stages such as HIR.\n - `typeck_results`'s return value is [`TypeckResults`][TypeckResults] and is\n-  created by type checking step, it includes useful information such as types\n-  of expressions, ways to resolve methods and so on.\n+  created by type checking step, it includes useful information such as types of\n+  expressions, ways to resolve methods and so on.\n \n ## Checking if an expr is calling a specific method\n \n-Starting with an `expr`, you can check whether it is calling a specific method `some_method`:\n+Starting with an `expr`, you can check whether it is calling a specific method\n+`some_method`:\n \n ```rust\n impl<'tcx> LateLintPass<'tcx> for MyStructLint {\n@@ -77,8 +80,9 @@ impl<'tcx> LateLintPass<'tcx> for MyStructLint {\n \n ## Checking for a specific type\n \n-There are three ways to check if an expression type is a specific type we want to check for.\n-All of these methods only check for the base type, generic arguments have to be checked separately.\n+There are three ways to check if an expression type is a specific type we want\n+to check for. All of these methods only check for the base type, generic\n+arguments have to be checked separately.\n \n ```rust\n use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n@@ -115,7 +119,8 @@ Prefer using diagnostic items and lang items where possible.\n \n ## Checking if a type implements a specific trait\n \n-There are three ways to do this, depending on if the target trait has a diagnostic item, lang item or neither.\n+There are three ways to do this, depending on if the target trait has a\n+diagnostic item, lang item or neither.\n \n ```rust\n use clippy_utils::{implements_trait, is_trait_method, match_trait_method, paths};\n@@ -151,8 +156,9 @@ impl LateLintPass<'_> for MyStructLint {\n \n > Prefer using diagnostic and lang items, if the target trait has one.\n \n-We access lang items through the type context `tcx`. `tcx` is of type [`TyCtxt`][TyCtxt] and is defined in the `rustc_middle` crate.\n-A list of defined paths for Clippy can be found in [paths.rs][paths]\n+We access lang items through the type context `tcx`. `tcx` is of type\n+[`TyCtxt`][TyCtxt] and is defined in the `rustc_middle` crate. A list of defined\n+paths for Clippy can be found in [paths.rs][paths]\n \n ## Checking if a type defines a specific method\n \n@@ -182,14 +188,15 @@ impl<'tcx> LateLintPass<'tcx> for MyTypeImpl {\n ## Dealing with macros and expansions\n \n Keep in mind that macros are already expanded and desugaring is already applied\n-to the code representation that you are working with in Clippy. This unfortunately causes a lot of\n-false positives because macro expansions are \"invisible\" unless you actively check for them.\n-Generally speaking, code with macro expansions should just be ignored by Clippy because that code can be\n-dynamic in ways that are difficult or impossible to see.\n-Use the following functions to deal with macros:\n+to the code representation that you are working with in Clippy. This\n+unfortunately causes a lot of false positives because macro expansions are\n+\"invisible\" unless you actively check for them. Generally speaking, code with\n+macro expansions should just be ignored by Clippy because that code can be\n+dynamic in ways that are difficult or impossible to see. Use the following\n+functions to deal with macros:\n \n-- `span.from_expansion()`: detects if a span is from macro expansion or desugaring.\n-  Checking this is a common first step in a lint.\n+- `span.from_expansion()`: detects if a span is from macro expansion or\n+  desugaring. Checking this is a common first step in a lint.\n \n    ```rust\n    if expr.span.from_expansion() {\n@@ -198,45 +205,51 @@ Use the following functions to deal with macros:\n    }\n    ```\n \n-- `span.ctxt()`: the span's context represents whether it is from expansion, and if so, which macro call expanded it.\n-   It is sometimes useful to check if the context of two spans are equal.\n-\n-   ```rust\n-   // expands to `1 + 0`, but don't lint\n-   1 + mac!()\n-   ```\n-   ```rust\n-   if left.span.ctxt() != right.span.ctxt() {\n-       // the coder most likely cannot modify this expression\n-       return;\n-   }\n-   ```\n-  Note: Code that is not from expansion is in the \"root\" context. So any spans where `from_expansion` returns `true` can\n-  be assumed to have the same context. And so just using `span.from_expansion()` is often good enough.\n-\n-\n-- `in_external_macro(span)`: detect if the given span is from a macro defined in a foreign crate.\n-   If you want the lint to work with macro-generated code, this is the next line of defense to avoid macros\n-   not defined in the current crate. It doesn't make sense to lint code that the coder can't change.\n-\n-   You may want to use it for example to not start linting in macros from other crates\n-\n-   ```rust\n-   #[macro_use]\n-   extern crate a_crate_with_macros;\n-\n-   // `foo` is defined in `a_crate_with_macros`\n-   foo!(\"bar\");\n-\n-   // if we lint the `match` of `foo` call and test its span\n-   assert_eq!(in_external_macro(cx.sess(), match_span), true);\n-   ```\n-\n-- `span.ctxt()`: the span's context represents whether it is from expansion, and if so, what expanded it\n-\n-One thing `SpanContext` is useful for is to check if two spans are in the same context. For example,\n-in `a == b`, `a` and `b` have the same context. In a `macro_rules!` with `a == $b`, `$b` is expanded to some\n-expression with a different context from `a`.\n+- `span.ctxt()`: the span's context represents whether it is from expansion, and\n+  if so, which macro call expanded it. It is sometimes useful to check if the\n+  context of two spans are equal.\n+\n+  ```rust\n+  // expands to `1 + 0`, but don't lint\n+  1 + mac!()\n+  ```\n+  ```rust\n+  if left.span.ctxt() != right.span.ctxt() {\n+      // the coder most likely cannot modify this expression\n+      return;\n+  }\n+  ```\n+  > Note: Code that is not from expansion is in the \"root\" context. So any spans\n+  > where `from_expansion` returns `true` can be assumed to have the same\n+  > context. And so just using `span.from_expansion()` is often good enough.\n+\n+\n+- `in_external_macro(span)`: detect if the given span is from a macro defined in\n+  a foreign crate. If you want the lint to work with macro-generated code, this\n+  is the next line of defense to avoid macros not defined in the current crate.\n+  It doesn't make sense to lint code that the coder can't change.\n+\n+  You may want to use it for example to not start linting in macros from other\n+  crates\n+\n+  ```rust\n+  #[macro_use]\n+  extern crate a_crate_with_macros;\n+\n+  // `foo` is defined in `a_crate_with_macros`\n+  foo!(\"bar\");\n+\n+  // if we lint the `match` of `foo` call and test its span\n+  assert_eq!(in_external_macro(cx.sess(), match_span), true);\n+  ```\n+\n+- `span.ctxt()`: the span's context represents whether it is from expansion, and\n+  if so, what expanded it\n+\n+  One thing `SpanContext` is useful for is to check if two spans are in the same\n+  context. For example, in `a == b`, `a` and `b` have the same context. In a\n+  `macro_rules!` with `a == $b`, `$b` is expanded to some expression with a\n+  different context from `a`.\n \n    ```rust\n    macro_rules! m {"}, {"sha": "b62314c6735a2de4b48ecb07e11f2064c852f51d", "filename": "book/src/infrastructure/book.md", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d6b013ff9e5bbacfb6140f194b1700c2602f0bab/book%2Fsrc%2Finfrastructure%2Fbook.md", "raw_url": "https://github.com/rust-lang/rust/raw/d6b013ff9e5bbacfb6140f194b1700c2602f0bab/book%2Fsrc%2Finfrastructure%2Fbook.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Finfrastructure%2Fbook.md?ref=d6b013ff9e5bbacfb6140f194b1700c2602f0bab", "patch": "@@ -1,38 +1,42 @@\n # The Clippy Book\n \n-This document explains how to make additions and changes to the Clippy book, the guide to Clippy that you're reading\n-right now. The Clippy book is formatted with [Markdown](https://www.markdownguide.org) and generated\n-by [mdbook](https://github.com/rust-lang/mdBook).\n+This document explains how to make additions and changes to the Clippy book, the\n+guide to Clippy that you're reading right now. The Clippy book is formatted with\n+[Markdown](https://www.markdownguide.org) and generated by\n+[mdbook](https://github.com/rust-lang/mdBook).\n \n - [Get mdbook](#get-mdbook)\n - [Make changes](#make-changes)\n \n ## Get mdbook\n \n-While not strictly necessary since the book source is simply Markdown text files, having mdbook locally will allow you\n-to build, test and serve the book locally to view changes before you commit them to the repository. You likely already\n-have\n-`cargo` installed, so the easiest option is to simply:\n+While not strictly necessary since the book source is simply Markdown text\n+files, having mdbook locally will allow you to build, test and serve the book\n+locally to view changes before you commit them to the repository. You likely\n+already have `cargo` installed, so the easiest option is to simply:\n \n ```shell\n cargo install mdbook\n ```\n \n-See the mdbook [installation](https://github.com/rust-lang/mdBook#installation) instructions for other options.\n+See the mdbook [installation](https://github.com/rust-lang/mdBook#installation)\n+instructions for other options.\n \n ## Make changes\n \n-The book's [src](https://github.com/joshrotenberg/rust-clippy/tree/clippy_guide/book/src) directory contains all of the\n-markdown files used to generate the book. If you want to see your changes in real time, you can use the mdbook `serve`\n-command to run a web server locally that will automatically update changes as they are made. From the top level of\n-your `rust-clippy`\n-directory:\n+The book's\n+[src](https://github.com/joshrotenberg/rust-clippy/tree/clippy_guide/book/src)\n+directory contains all of the markdown files used to generate the book. If you\n+want to see your changes in real time, you can use the mdbook `serve` command to\n+run a web server locally that will automatically update changes as they are\n+made. From the top level of your `rust-clippy` directory:\n \n ```shell\n mdbook serve book --open\n ```\n \n-Then navigate to `http://localhost:3000` to see the generated book. While the server is running, changes you make will\n-automatically be updated.\n+Then navigate to `http://localhost:3000` to see the generated book. While the\n+server is running, changes you make will automatically be updated.\n \n-For more information, see the mdbook [guide](https://rust-lang.github.io/mdBook/).\n+For more information, see the mdbook\n+[guide](https://rust-lang.github.io/mdBook/)."}, {"sha": "e560f4c6a3e51d5b752af5b7c4479509469ac5f0", "filename": "book/src/infrastructure/changelog_update.md", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d6b013ff9e5bbacfb6140f194b1700c2602f0bab/book%2Fsrc%2Finfrastructure%2Fchangelog_update.md", "raw_url": "https://github.com/rust-lang/rust/raw/d6b013ff9e5bbacfb6140f194b1700c2602f0bab/book%2Fsrc%2Finfrastructure%2Fchangelog_update.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Finfrastructure%2Fchangelog_update.md?ref=d6b013ff9e5bbacfb6140f194b1700c2602f0bab", "patch": "@@ -1,6 +1,6 @@\n # Changelog Update\n \n-If you want to help with updating the [changelog][changelog], you're in the right place.\n+If you want to help with updating the [changelog], you're in the right place.\n \n ## When to update\n \n@@ -11,8 +11,8 @@ Rust release. For that purpose, the changelog is ideally updated during the week\n before an upcoming stable release. You can find the release dates on the [Rust\n Forge][forge].\n \n-Most of the time we only need to update the changelog for minor Rust releases. It's\n-been very rare that Clippy changes were included in a patch release.\n+Most of the time we only need to update the changelog for minor Rust releases.\n+It's been very rare that Clippy changes were included in a patch release.\n \n ## Changelog update walkthrough\n \n@@ -24,18 +24,21 @@ be found in the `tools` directory of the Rust repository.\n Depending on the current time and what exactly you want to update, the following\n bullet points might be helpful:\n \n-* When writing the release notes for the **upcoming stable release** you need to check\n-  out the Clippy commit of the current Rust `beta` branch. [Link][rust_beta_tools]\n-* When writing the release notes for the **upcoming beta release**, you need to check\n-  out the Clippy commit of the current Rust `master`. [Link][rust_master_tools]\n+* When writing the release notes for the **upcoming stable release** you need to\n+  check out the Clippy commit of the current Rust `beta` branch.\n+  [Link][rust_beta_tools]\n+* When writing the release notes for the **upcoming beta release**, you need to\n+  check out the Clippy commit of the current Rust `master`.\n+  [Link][rust_master_tools]\n * When writing the (forgotten) release notes for a **past stable release**, you\n   need to check out the Rust release tag of the stable release.\n   [Link][rust_stable_tools]\n \n Usually you want to write the changelog of the **upcoming stable release**. Make\n sure though, that `beta` was already branched in the Rust repository.\n \n-To find the commit hash, issue the following command when in a `rust-lang/rust` checkout:\n+To find the commit hash, issue the following command when in a `rust-lang/rust`\n+checkout:\n ```\n git log --oneline -- src/tools/clippy/ | grep -o \"Merge commit '[a-f0-9]*' into .*\" | head -1 | sed -e \"s/Merge commit '\\([a-f0-9]*\\)' into .*/\\1/g\"\n ```\n@@ -44,7 +47,9 @@ git log --oneline -- src/tools/clippy/ | grep -o \"Merge commit '[a-f0-9]*' into\n \n Once you've got the correct commit range, run\n \n-    util/fetch_prs_between.sh commit1 commit2 > changes.txt\n+```\n+util/fetch_prs_between.sh commit1 commit2 > changes.txt\n+```\n \n and open that file in your editor of choice.\n \n@@ -54,14 +59,14 @@ already correct in the current changelog.\n ### 3. Authoring the final changelog\n \n The above script should have dumped all the relevant PRs to the file you\n-specified. It should have filtered out most of the irrelevant PRs\n-already, but it's a good idea to do a manual cleanup pass where you look for\n-more irrelevant PRs. If you're not sure about some PRs, just leave them in for\n-the review and ask for feedback.\n-\n-With the PRs filtered, you can start to take each PR and move the\n-`changelog: ` content to `CHANGELOG.md`. Adapt the wording as you see fit but\n-try to keep it somewhat coherent.\n+specified. It should have filtered out most of the irrelevant PRs already, but\n+it's a good idea to do a manual cleanup pass where you look for more irrelevant\n+PRs. If you're not sure about some PRs, just leave them in for the review and\n+ask for feedback.\n+\n+With the PRs filtered, you can start to take each PR and move the `changelog: `\n+content to `CHANGELOG.md`. Adapt the wording as you see fit but try to keep it\n+somewhat coherent.\n \n The order should roughly be:\n "}, {"sha": "7c2fd29b5f9df3f54ecaf668d22fe41c071df3f5", "filename": "book/src/infrastructure/release.md", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d6b013ff9e5bbacfb6140f194b1700c2602f0bab/book%2Fsrc%2Finfrastructure%2Frelease.md", "raw_url": "https://github.com/rust-lang/rust/raw/d6b013ff9e5bbacfb6140f194b1700c2602f0bab/book%2Fsrc%2Finfrastructure%2Frelease.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Finfrastructure%2Frelease.md?ref=d6b013ff9e5bbacfb6140f194b1700c2602f0bab", "patch": "@@ -1,7 +1,7 @@\n # Release a new Clippy Version\n \n-_NOTE: This document is probably only relevant to you, if you're a member of the\n-Clippy team._\n+> _NOTE:_ This document is probably only relevant to you, if you're a member of\n+> the Clippy team.\n \n Clippy is released together with stable Rust releases. The dates for these\n releases can be found at the [Rust Forge]. This document explains the necessary\n@@ -13,12 +13,11 @@ steps to create a Clippy release.\n 4. [Tag the stable commit](#tag-the-stable-commit)\n 5. [Update `CHANGELOG.md`](#update-changelogmd)\n \n-_NOTE: This document is for stable Rust releases, not for point releases. For\n-point releases, step 1. and 2. should be enough._\n+> _NOTE:_ This document is for stable Rust releases, not for point releases. For\n+> point releases, step 1. and 2. should be enough.\n \n [Rust Forge]: https://forge.rust-lang.org/\n \n-\n ## Remerge the `beta` branch\n \n This step is only necessary, if since the last release something was backported\n@@ -45,9 +44,8 @@ $ git push origin backport_remerge  # This can be pushed to your fork\n ```\n \n After this, open a PR to the master branch. In this PR, the commit hash of the\n-`HEAD` of the `beta` branch must exists. In addition to that, no files should\n-be changed by this PR.\n-\n+`HEAD` of the `beta` branch must exists. In addition to that, no files should be\n+changed by this PR.\n \n ## Update the `beta` branch\n \n@@ -72,7 +70,6 @@ $ git reset --hard $BETA_SHA\n $ git push upstream beta\n ```\n \n-\n ## Find the Clippy commit\n \n The first step is to tag the Clippy commit, that is included in the stable Rust\n@@ -85,7 +82,6 @@ $ git checkout 1.XX.0   # XX should be exchanged with the corresponding version\n $ SHA=$(git log --oneline -- src/tools/clippy/ | grep -o \"Merge commit '[a-f0-9]*' into .*\" | head -1 | sed -e \"s/Merge commit '\\([a-f0-9]*\\)' into .*/\\1/g\")\n ```\n \n-\n ## Tag the stable commit\n \n After finding the Clippy commit, it can be tagged with the release number.\n@@ -112,10 +108,10 @@ tag. Updating the stable branch from here is as easy as:\n $ git push upstream rust-1.XX.0:stable  # `upstream` is the `rust-lang/rust-clippy` remote\n ```\n \n-_NOTE: Usually there are no stable backports for Clippy, so this update should\n-be possible without force pushing or anything like this. If there should have\n-happened a stable backport, make sure to re-merge those changes just as with the\n-`beta` branch._\n+> _NOTE:_ Usually there are no stable backports for Clippy, so this update\n+> should be possible without force pushing or anything like this. If there\n+> should have happened a stable backport, make sure to re-merge those changes\n+> just as with the `beta` branch.\n \n ## Update `CHANGELOG.md`\n \n@@ -142,4 +138,4 @@ the following parts:\n   Current stable, released 20YY-MM-DD -> Released 20YY-MM-DD\n   ```\n \n-[how to update the changelog]: https://github.com/rust-lang/rust-clippy/blob/master/doc/changelog_update.md\n+[how to update the changelog]: changelog_update.md"}]}