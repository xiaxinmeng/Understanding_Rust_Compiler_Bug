{"sha": "050643a9606c279d9b959976c3718ad3d7bdb84a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MDY0M2E5NjA2YzI3OWQ5Yjk1OTk3NmMzNzE4YWQzZDdiZGI4NGE=", "commit": {"author": {"name": "Sean Chen", "email": "seanchen11235@gmail.com", "date": "2021-01-13T23:54:24Z"}, "committer": {"name": "Sean Chen", "email": "seanchen11235@gmail.com", "date": "2021-01-23T17:56:33Z"}, "message": "Add Frames iterator for Backtrace", "tree": {"sha": "60fe0d57333c78cd5db19033ca42723d43646a54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60fe0d57333c78cd5db19033ca42723d43646a54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/050643a9606c279d9b959976c3718ad3d7bdb84a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/050643a9606c279d9b959976c3718ad3d7bdb84a", "html_url": "https://github.com/rust-lang/rust/commit/050643a9606c279d9b959976c3718ad3d7bdb84a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/050643a9606c279d9b959976c3718ad3d7bdb84a/comments", "author": {"login": "seanchen1991", "id": 4572868, "node_id": "MDQ6VXNlcjQ1NzI4Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/4572868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanchen1991", "html_url": "https://github.com/seanchen1991", "followers_url": "https://api.github.com/users/seanchen1991/followers", "following_url": "https://api.github.com/users/seanchen1991/following{/other_user}", "gists_url": "https://api.github.com/users/seanchen1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanchen1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanchen1991/subscriptions", "organizations_url": "https://api.github.com/users/seanchen1991/orgs", "repos_url": "https://api.github.com/users/seanchen1991/repos", "events_url": "https://api.github.com/users/seanchen1991/events{/privacy}", "received_events_url": "https://api.github.com/users/seanchen1991/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seanchen1991", "id": 4572868, "node_id": "MDQ6VXNlcjQ1NzI4Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/4572868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanchen1991", "html_url": "https://github.com/seanchen1991", "followers_url": "https://api.github.com/users/seanchen1991/followers", "following_url": "https://api.github.com/users/seanchen1991/following{/other_user}", "gists_url": "https://api.github.com/users/seanchen1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanchen1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanchen1991/subscriptions", "organizations_url": "https://api.github.com/users/seanchen1991/orgs", "repos_url": "https://api.github.com/users/seanchen1991/repos", "events_url": "https://api.github.com/users/seanchen1991/events{/privacy}", "received_events_url": "https://api.github.com/users/seanchen1991/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "html_url": "https://github.com/rust-lang/rust/commit/a62a76047ea24aad7639f14eb3ce0e620b77bdb7"}], "stats": {"total": 130, "additions": 92, "deletions": 38}, "files": [{"sha": "0aae4674b29423c763025113ecf236b8591f4dd4", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/050643a9606c279d9b959976c3718ad3d7bdb84a/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050643a9606c279d9b959976c3718ad3d7bdb84a/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=050643a9606c279d9b959976c3718ad3d7bdb84a", "patch": "@@ -147,11 +147,14 @@ fn _assert_send_sync() {\n     _assert::<Backtrace>();\n }\n \n-struct BacktraceFrame {\n+/// A single frame of a backtrace.\n+#[unstable(feature = \"backtrace_frames\", issue = \"79676\")]\n+pub struct BacktraceFrame {\n     frame: RawFrame,\n     symbols: Vec<BacktraceSymbol>,\n }\n \n+#[derive(Debug)]\n enum RawFrame {\n     Actual(backtrace_rs::Frame),\n     #[cfg(test)]\n@@ -196,6 +199,14 @@ impl fmt::Debug for Backtrace {\n     }\n }\n \n+impl fmt::Debug for BacktraceFrame {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut dbg = fmt.debug_list();\n+        dbg.entries(&self.symbols);\n+        dbg.finish()\n+    }\n+}\n+\n impl fmt::Debug for BacktraceSymbol {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // FIXME: improve formatting: https://github.com/rust-lang/rust/issues/65280\n@@ -353,6 +364,14 @@ impl Backtrace {\n     }\n }\n \n+impl<'a> Backtrace {\n+    /// Returns an iterator over the backtrace frames.\n+    #[unstable(feature = \"backtrace_frames\", issue = \"79676\")]\n+    pub fn frames(&'a self) -> &'a [BacktraceFrame] {\n+        if let Inner::Captured(c) = &self.inner { &c.force().frames } else { &[] }\n+    }\n+}\n+\n impl fmt::Display for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let capture = match &self.inner {"}, {"sha": "f5da93f93fd932b0e7ed6134e1893c18b6d02d2a", "filename": "library/std/src/backtrace/tests.rs", "status": "modified", "additions": 72, "deletions": 37, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/050643a9606c279d9b959976c3718ad3d7bdb84a/library%2Fstd%2Fsrc%2Fbacktrace%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050643a9606c279d9b959976c3718ad3d7bdb84a/library%2Fstd%2Fsrc%2Fbacktrace%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace%2Ftests.rs?ref=050643a9606c279d9b959976c3718ad3d7bdb84a", "patch": "@@ -1,48 +1,52 @@\n use super::*;\n \n+fn generate_fake_frames() -> Vec<BacktraceFrame> {\n+    vec![\n+        BacktraceFrame {\n+            frame: RawFrame::Fake,\n+            symbols: vec![BacktraceSymbol {\n+                name: Some(b\"std::backtrace::Backtrace::create\".to_vec()),\n+                filename: Some(BytesOrWide::Bytes(b\"rust/backtrace.rs\".to_vec())),\n+                lineno: Some(100),\n+                colno: None,\n+            }],\n+        },\n+        BacktraceFrame {\n+            frame: RawFrame::Fake,\n+            symbols: vec![BacktraceSymbol {\n+                name: Some(b\"__rust_maybe_catch_panic\".to_vec()),\n+                filename: None,\n+                lineno: None,\n+                colno: None,\n+            }],\n+        },\n+        BacktraceFrame {\n+            frame: RawFrame::Fake,\n+            symbols: vec![\n+                BacktraceSymbol {\n+                    name: Some(b\"std::rt::lang_start_internal\".to_vec()),\n+                    filename: Some(BytesOrWide::Bytes(b\"rust/rt.rs\".to_vec())),\n+                    lineno: Some(300),\n+                    colno: Some(5),\n+                },\n+                BacktraceSymbol {\n+                    name: Some(b\"std::rt::lang_start\".to_vec()),\n+                    filename: Some(BytesOrWide::Bytes(b\"rust/rt.rs\".to_vec())),\n+                    lineno: Some(400),\n+                    colno: None,\n+                },\n+            ],\n+        },\n+    ]\n+}\n+\n #[test]\n fn test_debug() {\n     let backtrace = Backtrace {\n         inner: Inner::Captured(LazilyResolvedCapture::new(Capture {\n             actual_start: 1,\n             resolved: true,\n-            frames: vec![\n-                BacktraceFrame {\n-                    frame: RawFrame::Fake,\n-                    symbols: vec![BacktraceSymbol {\n-                        name: Some(b\"std::backtrace::Backtrace::create\".to_vec()),\n-                        filename: Some(BytesOrWide::Bytes(b\"rust/backtrace.rs\".to_vec())),\n-                        lineno: Some(100),\n-                        colno: None,\n-                    }],\n-                },\n-                BacktraceFrame {\n-                    frame: RawFrame::Fake,\n-                    symbols: vec![BacktraceSymbol {\n-                        name: Some(b\"__rust_maybe_catch_panic\".to_vec()),\n-                        filename: None,\n-                        lineno: None,\n-                        colno: None,\n-                    }],\n-                },\n-                BacktraceFrame {\n-                    frame: RawFrame::Fake,\n-                    symbols: vec![\n-                        BacktraceSymbol {\n-                            name: Some(b\"std::rt::lang_start_internal\".to_vec()),\n-                            filename: Some(BytesOrWide::Bytes(b\"rust/rt.rs\".to_vec())),\n-                            lineno: Some(300),\n-                            colno: Some(5),\n-                        },\n-                        BacktraceSymbol {\n-                            name: Some(b\"std::rt::lang_start\".to_vec()),\n-                            filename: Some(BytesOrWide::Bytes(b\"rust/rt.rs\".to_vec())),\n-                            lineno: Some(400),\n-                            colno: None,\n-                        },\n-                    ],\n-                },\n-            ],\n+            frames: generate_fake_frames(),\n         })),\n     };\n \n@@ -58,3 +62,34 @@ fn test_debug() {\n     // Format the backtrace a second time, just to make sure lazily resolved state is stable\n     assert_eq!(format!(\"{:#?}\", backtrace), expected);\n }\n+\n+#[test]\n+fn test_frames() {\n+    let backtrace = Backtrace {\n+        inner: Inner::Captured(LazilyResolvedCapture::new(Capture {\n+            actual_start: 1,\n+            resolved: true,\n+            frames: generate_fake_frames(),\n+        })),\n+    };\n+\n+    let frames = backtrace.frames();\n+\n+    #[rustfmt::skip]\n+    let expected = vec![\n+        \"[\n+    { fn: \\\"std::backtrace::Backtrace::create\\\", file: \\\"rust/backtrace.rs\\\", line: 100 },\n+]\",\n+        \"[\n+    { fn: \\\"__rust_maybe_catch_panic\\\" },\n+]\",\n+        \"[\n+    { fn: \\\"std::rt::lang_start_internal\\\", file: \\\"rust/rt.rs\\\", line: 300 },\n+    { fn: \\\"std::rt::lang_start\\\", file: \\\"rust/rt.rs\\\", line: 400 },\n+]\"\n+    ];\n+\n+    let mut iter = frames.iter().zip(expected.iter());\n+\n+    assert!(iter.all(|(f, e)| format!(\"{:#?}\", f) == *e));\n+}"}]}