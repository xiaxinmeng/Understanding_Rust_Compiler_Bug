{"sha": "e917b012865d67f05e69da8d741f2be91f4e9a26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MTdiMDEyODY1ZDY3ZjA1ZTY5ZGE4ZDc0MWYyYmU5MWY0ZTlhMjY=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-11-07T12:27:00Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-11-07T12:27:00Z"}, "message": "Rustup to rust-lang/rust#65884", "tree": {"sha": "092ef181552c135fe5ab5610aed2e6df2bcbcf27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/092ef181552c135fe5ab5610aed2e6df2bcbcf27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e917b012865d67f05e69da8d741f2be91f4e9a26", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl3EDZQACgkQaTCGhp1Q\nZjeZsQ//Zm/ucM7h9bzrVaLyS1ytVeqePwvp5m9WFSh2U7gOn2n4RK/xAMMXpZsq\nnyvDJKz9DbTqnQ3Qeh+P7TQOsGLBQkOeAR8qkqZCszhT+2+QQgLbu+3McskjVWRs\nH2PyYJ5P+gDtXztPrGx/WxWbWJ4XOrweV7bI9MwjowenE71K7M2Um2vBcObSjObK\nNP+AlkCKgyygNO89TLr2RXS8/RgtWExqvepepKXDkhnXDX7N2NsT77bjqT+VRrD+\nHTXts1N8/goRZJNbDZbKJGIFXcO1dnug+35aQwS+3I9FVOg2LAA0guzTirNSV4qV\nlg01JGIncbjcsWgjBlqeNff6KCJm/QkKP+IpqXxkuQaBNECQFayaEf9TCOkQkoCk\n2vCVclxS+Ygo5xjy8OGSiiOprD0Qex8rssMZ9/gJ12ThvPtTPDWZmLtCkRBn7HJa\noYsLG4Ekris/TcjwFKP7UQGWdAqSwMBhAtqAcDmkElxZ2HY2Q0hw8V5xJOmTi3iL\nCfkhlI+M2PqB2qT4HnHqSRpd+xwQPsbXjIMv69RtxKC1FcyQ/6czS6h+MpiF5zjq\nbdq7nS/1J6e2/OGL1GHhQy7VD4ewq8rQHv8d/Qpo9Z0Hr+BvHIzwJHyK1hzRNSBL\nsP+dpeR4+WypvoierxT/RA7US54cVorbQLx6teb4aqJ4DJcf0S4=\n=INaN\n-----END PGP SIGNATURE-----", "payload": "tree 092ef181552c135fe5ab5610aed2e6df2bcbcf27\nparent 305ba73fc1f0e5bd76c2572d9e858741e7a71a09\nauthor flip1995 <hello@philkrones.com> 1573129620 +0100\ncommitter flip1995 <hello@philkrones.com> 1573129620 +0100\n\nRustup to rust-lang/rust#65884\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e917b012865d67f05e69da8d741f2be91f4e9a26", "html_url": "https://github.com/rust-lang/rust/commit/e917b012865d67f05e69da8d741f2be91f4e9a26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e917b012865d67f05e69da8d741f2be91f4e9a26/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "305ba73fc1f0e5bd76c2572d9e858741e7a71a09", "url": "https://api.github.com/repos/rust-lang/rust/commits/305ba73fc1f0e5bd76c2572d9e858741e7a71a09", "html_url": "https://github.com/rust-lang/rust/commit/305ba73fc1f0e5bd76c2572d9e858741e7a71a09"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "fac75cffeba6facee676ca726443594f747f0d81", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=e917b012865d67f05e69da8d741f2be91f4e9a26", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use std::f64::consts as f64;\n-use syntax::ast::{FloatTy, LitKind};\n+use syntax::ast::{FloatTy, LitFloatType, LitKind};\n use syntax::symbol;\n \n declare_clippy_lint! {\n@@ -62,9 +62,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ApproxConstant {\n \n fn check_lit(cx: &LateContext<'_, '_>, lit: &LitKind, e: &Expr) {\n     match *lit {\n-        LitKind::Float(s, FloatTy::F32) => check_known_consts(cx, e, s, \"f32\"),\n-        LitKind::Float(s, FloatTy::F64) => check_known_consts(cx, e, s, \"f64\"),\n-        LitKind::FloatUnsuffixed(s) => check_known_consts(cx, e, s, \"f{32, 64}\"),\n+        LitKind::Float(s, LitFloatType::Suffixed(fty)) => match fty {\n+            FloatTy::F32 => check_known_consts(cx, e, s, \"f32\"),\n+            FloatTy::F64 => check_known_consts(cx, e, s, \"f64\"),\n+        },\n+        LitKind::Float(s, LitFloatType::Unsuffixed) => check_known_consts(cx, e, s, \"f{32, 64}\"),\n         _ => (),\n     }\n }"}, {"sha": "fc5c8b2e379de9b04b050651a2e4b0fc3507f34e", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=e917b012865d67f05e69da8d741f2be91f4e9a26", "patch": "@@ -161,9 +161,11 @@ pub fn lit_to_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n         LitKind::ByteStr(ref s) => Constant::Binary(Lrc::clone(s)),\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, _) => Constant::Int(n),\n-        LitKind::Float(ref is, FloatTy::F32) => Constant::F32(is.as_str().parse().unwrap()),\n-        LitKind::Float(ref is, FloatTy::F64) => Constant::F64(is.as_str().parse().unwrap()),\n-        LitKind::FloatUnsuffixed(ref is) => match ty.expect(\"type of float is known\").kind {\n+        LitKind::Float(ref is, LitFloatType::Suffixed(fty)) => match fty {\n+            FloatTy::F32 => Constant::F32(is.as_str().parse().unwrap()),\n+            FloatTy::F64 => Constant::F64(is.as_str().parse().unwrap()),\n+        },\n+        LitKind::Float(ref is, LitFloatType::Unsuffixed) => match ty.expect(\"type of float is known\").kind {\n             ty::Float(FloatTy::F32) => Constant::F32(is.as_str().parse().unwrap()),\n             ty::Float(FloatTy::F64) => Constant::F64(is.as_str().parse().unwrap()),\n             _ => bug!(),"}, {"sha": "8027a736c6b45ac9562dcb487986856c4886ac8c", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=e917b012865d67f05e69da8d741f2be91f4e9a26", "patch": "@@ -43,7 +43,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {\n             let ty = cx.tables.expr_ty(expr);\n             if let ty::Float(fty) = ty.kind;\n             if let hir::ExprKind::Lit(ref lit) = expr.kind;\n-            if let LitKind::Float(sym, _) | LitKind::FloatUnsuffixed(sym) = lit.node;\n+            if let LitKind::Float(sym, _) = lit.node;\n             if let Some(sugg) = Self::check(sym, fty);\n             then {\n                 span_lint_and_sugg("}, {"sha": "c526858a7a2dfcee7f28cf983ad7b212a3703b69", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=e917b012865d67f05e69da8d741f2be91f4e9a26", "patch": "@@ -373,7 +373,7 @@ impl LiteralDigitGrouping {\n                     }\n                 }\n             },\n-            LitKind::Float(..) | LitKind::FloatUnsuffixed(..) => {\n+            LitKind::Float(..) => {\n                 // Lint floating-point literals.\n                 if_chain! {\n                     if let Some(src) = snippet_opt(cx, lit.span);"}, {"sha": "d756980b354d08dabc82183d4cefa20229b578e0", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=e917b012865d67f05e69da8d741f2be91f4e9a26", "patch": "@@ -482,8 +482,8 @@ impl MiscEarlyLints {\n \n         if let LitKind::Int(value, lit_int_type) = lit.kind {\n             let suffix = match lit_int_type {\n-                LitIntType::Signed(ty) => ty.ty_to_string(),\n-                LitIntType::Unsigned(ty) => ty.ty_to_string(),\n+                LitIntType::Signed(ty) => ty.name_str(),\n+                LitIntType::Unsigned(ty) => ty.name_str(),\n                 LitIntType::Unsuffixed => \"\",\n             };\n \n@@ -543,8 +543,8 @@ impl MiscEarlyLints {\n                     },\n                 );\n             }\n-        } else if let LitKind::Float(_, float_ty) = lit.kind {\n-            let suffix = float_ty.ty_to_string();\n+        } else if let LitKind::Float(_, LitFloatType::Suffixed(float_ty)) = lit.kind {\n+            let suffix = float_ty.name_str();\n             let maybe_last_sep_idx = lit_snip.len() - suffix.len() - 1;\n             if lit_snip.as_bytes()[maybe_last_sep_idx] != b'_' {\n                 span_lint_and_sugg("}, {"sha": "a0bcba17d5565fde0c037c4dcb80694478fb9511", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=e917b012865d67f05e69da8d741f2be91f4e9a26", "patch": "@@ -90,7 +90,7 @@ impl EarlyLintPass for Precedence {\n                 if let Some(slf) = args.first() {\n                     if let ExprKind::Lit(ref lit) = slf.kind {\n                         match lit.kind {\n-                            LitKind::Int(..) | LitKind::Float(..) | LitKind::FloatUnsuffixed(..) => {\n+                            LitKind::Int(..) | LitKind::Float(..) => {\n                                 let mut applicability = Applicability::MachineApplicable;\n                                 span_lint_and_sugg(\n                                     cx,"}, {"sha": "788d02ecb0aa76bf46d3c25fc1481fdcc8984372", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=e917b012865d67f05e69da8d741f2be91f4e9a26", "patch": "@@ -390,7 +390,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             |db| {\n                                 let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n                                 let arg = if let ty::Int(_) = from_ty.kind {\n-                                    arg.as_ty(ast::UintTy::U32)\n+                                    arg.as_ty(ast::UintTy::U32.name_str())\n                                 } else {\n                                     arg\n                                 };"}, {"sha": "62da724ffd9e26e2f73655fd8f00b75526762a11", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=e917b012865d67f05e69da8d741f2be91f4e9a26", "patch": "@@ -15,7 +15,7 @@ use rustc::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_errors::Applicability;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;\n-use syntax::ast::{FloatTy, IntTy, LitIntType, LitKind, UintTy};\n+use syntax::ast::{FloatTy, IntTy, LitFloatType, LitIntType, LitKind, UintTy};\n use syntax::errors::DiagnosticBuilder;\n use syntax::source_map::Span;\n use syntax::symbol::{sym, Symbol};\n@@ -1186,7 +1186,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n                     }\n                 }\n                 match lit.node {\n-                    LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::FloatUnsuffixed(_) => {},\n+                    LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed) => {},\n                     _ => {\n                         if cast_from.kind == cast_to.kind && !in_external_macro(cx.sess(), expr.span) {\n                             span_lint("}, {"sha": "f3fc0487b265489dd5410f8890fd655c0ebf400d", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e917b012865d67f05e69da8d741f2be91f4e9a26/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=e917b012865d67f05e69da8d741f2be91f4e9a26", "patch": "@@ -9,7 +9,7 @@ use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::session::Session;\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_data_structures::fx::FxHashMap;\n-use syntax::ast::{Attribute, LitKind};\n+use syntax::ast::{Attribute, LitFloatType, LitKind};\n \n declare_clippy_lint! {\n     /// **What it does:** Generates clippy code that detects the offending pattern\n@@ -288,10 +288,14 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     LitKind::Byte(b) => println!(\"    if let LitKind::Byte({}) = {}.node;\", b, lit_pat),\n                     // FIXME: also check int type\n                     LitKind::Int(i, _) => println!(\"    if let LitKind::Int({}, _) = {}.node;\", i, lit_pat),\n-                    LitKind::Float(..) => println!(\"    if let LitKind::Float(..) = {}.node;\", lit_pat),\n-                    LitKind::FloatUnsuffixed(_) => {\n-                        println!(\"    if let LitKind::FloatUnsuffixed(_) = {}.node;\", lit_pat)\n-                    },\n+                    LitKind::Float(_, LitFloatType::Suffixed(_)) => println!(\n+                        \"    if let LitKind::Float(_, LitFloatType::Suffixed(_)) = {}.node;\",\n+                        lit_pat\n+                    ),\n+                    LitKind::Float(_, LitFloatType::Unsuffixed) => println!(\n+                        \"    if let LitKind::Float(_, LitFloatType::Unsuffixed) = {}.node;\",\n+                        lit_pat\n+                    ),\n                     LitKind::ByteStr(ref vec) => {\n                         let vec_pat = self.next(\"vec\");\n                         println!(\"    if let LitKind::ByteStr(ref {}) = {}.node;\", vec_pat, lit_pat);"}]}