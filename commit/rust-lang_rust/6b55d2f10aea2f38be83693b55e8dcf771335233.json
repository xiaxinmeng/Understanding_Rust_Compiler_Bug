{"sha": "6b55d2f10aea2f38be83693b55e8dcf771335233", "node_id": "C_kwDOAAsO6NoAKDZiNTVkMmYxMGFlYTJmMzhiZTgzNjkzYjU1ZThkY2Y3NzEzMzUyMzM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-24T11:25:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-24T11:25:18Z"}, "message": "Merge #11540\n\n11540: fix: Resolve private fields in type inference r=flodiebold a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10253#issuecomment-920962927\r\n(the same issue probably exists for method calls, but I think fixing that might be trickier)\r\n\r\nVisibility checks were introduced in https://github.com/rust-analyzer/rust-analyzer/issues/7841 for autoderef to work properly, so now we just record the first field we find unconditionally, and then overwrite it if autoderef manages to find another field in a later cycle.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "32ef865737cb84a7320f67798efbb471aaf2f2ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32ef865737cb84a7320f67798efbb471aaf2f2ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b55d2f10aea2f38be83693b55e8dcf771335233", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiF2seCRBK7hj4Ov3rIwAAUPcIADpGXrgZpFwlQKJfPPAr8Exw\nRRNcv9Lt5r4Cip4UxlijKiQTHzdE75MvTpJC6linbTaBxmCVllH7dyDtNCMPzpRg\nnc1UZQ80RksKG22Jd/+Xo1YtWwXsz6sNMU1EgsgNc5MkTc9pLIS6w8ujDfMWuIMI\nTgqeL2ibICbWTbx2ZHpkpHoy8ETfbO3QHnjFLS5eMFOkf3R0dr3ZSAxPF2J2lnFs\nL10pk/eKsgXKdg0tbNvs77ZkQ9IGjFrYVOhQW6Lbe91YU1uI5XAuQIwuq4R3bXgh\n6lohyIHJKWcffjPxgufykK1iV0u3whhPtPZWTcQkNRN+jfi47a5O8VfDSreWrK0=\n=5kiM\n-----END PGP SIGNATURE-----\n", "payload": "tree 32ef865737cb84a7320f67798efbb471aaf2f2ec\nparent 6fa525fb80cb0487f9bb51240d8228d92b0c40da\nparent 41b6b372a789d738ec38ef6850e924d0514266e6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645701918 +0000\ncommitter GitHub <noreply@github.com> 1645701918 +0000\n\nMerge #11540\n\n11540: fix: Resolve private fields in type inference r=flodiebold a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10253#issuecomment-920962927\r\n(the same issue probably exists for method calls, but I think fixing that might be trickier)\r\n\r\nVisibility checks were introduced in https://github.com/rust-analyzer/rust-analyzer/issues/7841 for autoderef to work properly, so now we just record the first field we find unconditionally, and then overwrite it if autoderef manages to find another field in a later cycle.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b55d2f10aea2f38be83693b55e8dcf771335233", "html_url": "https://github.com/rust-lang/rust/commit/6b55d2f10aea2f38be83693b55e8dcf771335233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b55d2f10aea2f38be83693b55e8dcf771335233/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fa525fb80cb0487f9bb51240d8228d92b0c40da", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa525fb80cb0487f9bb51240d8228d92b0c40da", "html_url": "https://github.com/rust-lang/rust/commit/6fa525fb80cb0487f9bb51240d8228d92b0c40da"}, {"sha": "41b6b372a789d738ec38ef6850e924d0514266e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/41b6b372a789d738ec38ef6850e924d0514266e6", "html_url": "https://github.com/rust-lang/rust/commit/41b6b372a789d738ec38ef6850e924d0514266e6"}], "stats": {"total": 128, "additions": 63, "deletions": 65}, "files": [{"sha": "0a50df493fcf169198c23d5a13db8890ce1fb3b5", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b55d2f10aea2f38be83693b55e8dcf771335233/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b55d2f10aea2f38be83693b55e8dcf771335233/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=6b55d2f10aea2f38be83693b55e8dcf771335233", "patch": "@@ -13,8 +13,8 @@\n //! to certain types. To record this, we use the union-find implementation from\n //! the `ena` crate, which is extracted from rustc.\n \n-use std::ops::Index;\n use std::sync::Arc;\n+use std::{collections::hash_map::Entry, ops::Index};\n \n use chalk_ir::{cast::Cast, DebruijnIndex, Mutability, Safety, Scalar, TypeFlags};\n use hir_def::{\n@@ -459,6 +459,12 @@ impl<'a> InferenceContext<'a> {\n         self.result.field_resolutions.insert(expr, field);\n     }\n \n+    fn write_field_resolution_if_empty(&mut self, expr: ExprId, field: FieldId) {\n+        if let Entry::Vacant(entry) = self.result.field_resolutions.entry(expr) {\n+            entry.insert(field);\n+        }\n+    }\n+\n     fn write_variant_resolution(&mut self, id: ExprOrPatId, variant: VariantId) {\n         self.result.variant_resolutions.insert(id, variant);\n     }"}, {"sha": "b08a9618d8cc382d7476a95977f4af332b86850c", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b55d2f10aea2f38be83693b55e8dcf771335233/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b55d2f10aea2f38be83693b55e8dcf771335233/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=6b55d2f10aea2f38be83693b55e8dcf771335233", "patch": "@@ -532,6 +532,11 @@ impl<'a> InferenceContext<'a> {\n                                         .substitute(Interner, &parameters),\n                                 )\n                             } else {\n+                                // Write down the first field resolution even if it is not visible\n+                                // This aids IDE features for private fields like goto def and in\n+                                // case of autoderef finding an applicable field, this will be\n+                                // overwritten in a following cycle\n+                                self.write_field_resolution_if_empty(tgt_expr, field);\n                                 None\n                             }\n                         }\n@@ -546,6 +551,11 @@ impl<'a> InferenceContext<'a> {\n                                         .substitute(Interner, &parameters),\n                                 )\n                             } else {\n+                                // Write down the first field resolution even if it is not visible\n+                                // This aids IDE features for private fields like goto def and in\n+                                // case of autoderef finding an applicable field, this will be\n+                                // overwritten in a following cycle\n+                                self.write_field_resolution_if_empty(tgt_expr, field);\n                                 None\n                             }\n                         }"}, {"sha": "08530f84fb9253dfc6dcd045bfa99c85e0108212", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 46, "deletions": 64, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/6b55d2f10aea2f38be83693b55e8dcf771335233/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b55d2f10aea2f38be83693b55e8dcf771335233/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=6b55d2f10aea2f38be83693b55e8dcf771335233", "patch": "@@ -206,8 +206,23 @@ impl NameClass {\n \n         let parent = name.syntax().parent()?;\n \n-        let def = if let Some(item) = ast::Item::cast(parent.clone()) {\n-            match item {\n+        let definition = match_ast! {\n+            match parent {\n+                ast::Item(it) => classify_item(sema, it)?,\n+                ast::IdentPat(it) => return classify_ident_pat(sema, it),\n+                ast::Rename(it) => classify_rename(sema, it)?,\n+                ast::SelfParam(it) => Definition::Local(sema.to_def(&it)?),\n+                ast::RecordField(it) => Definition::Field(sema.to_def(&it)?),\n+                ast::Variant(it) => Definition::Variant(sema.to_def(&it)?),\n+                ast::TypeParam(it) => Definition::GenericParam(sema.to_def(&it)?.into()),\n+                ast::ConstParam(it) => Definition::GenericParam(sema.to_def(&it)?.into()),\n+                _ => return None,\n+            }\n+        };\n+        return Some(NameClass::Definition(definition));\n+\n+        fn classify_item(sema: &Semantics<RootDatabase>, item: ast::Item) -> Option<Definition> {\n+            let definition = match item {\n                 ast::Item::MacroRules(it) => {\n                     Definition::Macro(sema.to_def(&ast::Macro::MacroRules(it))?)\n                 }\n@@ -229,14 +244,20 @@ impl NameClass {\n                 ast::Item::Struct(it) => Definition::Adt(hir::Adt::Struct(sema.to_def(&it)?)),\n                 ast::Item::Union(it) => Definition::Adt(hir::Adt::Union(sema.to_def(&it)?)),\n                 _ => return None,\n-            }\n-        } else if let Some(it) = ast::IdentPat::cast(parent.clone()) {\n-            if let Some(def) = sema.resolve_bind_pat_to_const(&it) {\n+            };\n+            Some(definition)\n+        }\n+\n+        fn classify_ident_pat(\n+            sema: &Semantics<RootDatabase>,\n+            ident_pat: ast::IdentPat,\n+        ) -> Option<NameClass> {\n+            if let Some(def) = sema.resolve_bind_pat_to_const(&ident_pat) {\n                 return Some(NameClass::ConstReference(Definition::from(def)));\n             }\n \n-            let local = sema.to_def(&it)?;\n-            let pat_parent = it.syntax().parent();\n+            let local = sema.to_def(&ident_pat)?;\n+            let pat_parent = ident_pat.syntax().parent();\n             if let Some(record_pat_field) = pat_parent.and_then(ast::RecordPatField::cast) {\n                 if record_pat_field.name_ref().is_none() {\n                     if let Some(field) = sema.resolve_record_pat_field(&record_pat_field) {\n@@ -247,57 +268,23 @@ impl NameClass {\n                     }\n                 }\n             }\n+            Some(NameClass::Definition(Definition::Local(local)))\n+        }\n \n-            Definition::Local(local)\n-        } else if let Some(it) = ast::Rename::cast(parent.clone()) {\n-            if let Some(use_tree) = it.syntax().parent().and_then(ast::UseTree::cast) {\n+        fn classify_rename(\n+            sema: &Semantics<RootDatabase>,\n+            rename: ast::Rename,\n+        ) -> Option<Definition> {\n+            if let Some(use_tree) = rename.syntax().parent().and_then(ast::UseTree::cast) {\n                 let path = use_tree.path()?;\n-                let path_segment = path.segment()?;\n-                let name_ref = path_segment.name_ref()?;\n-                let name_ref = if name_ref.self_token().is_some() {\n-                    use_tree\n-                        .syntax()\n-                        .parent()\n-                        .as_ref()\n-                        // Skip over UseTreeList\n-                        .and_then(|it| {\n-                            let use_tree = it.parent().and_then(ast::UseTree::cast)?;\n-                            let path = use_tree.path()?;\n-                            let path_segment = path.segment()?;\n-                            path_segment.name_ref()\n-                        })\n-                        .unwrap_or(name_ref)\n-                } else {\n-                    name_ref\n-                };\n-                let name_ref_class = NameRefClass::classify(sema, &name_ref)?;\n-\n-                match name_ref_class {\n-                    NameRefClass::Definition(def) => def,\n-                    NameRefClass::FieldShorthand { local_ref: _, field_ref } => {\n-                        Definition::Field(field_ref)\n-                    }\n-                }\n+                sema.resolve_path(&path).map(Definition::from)\n             } else {\n-                let extern_crate = it.syntax().parent().and_then(ast::ExternCrate::cast)?;\n+                let extern_crate = rename.syntax().parent().and_then(ast::ExternCrate::cast)?;\n                 let krate = sema.resolve_extern_crate(&extern_crate)?;\n                 let root_module = krate.root_module(sema.db);\n-                Definition::Module(root_module)\n-            }\n-        } else {\n-            match_ast! {\n-                match parent {\n-                    ast::SelfParam(it) => Definition::Local(sema.to_def(&it)?),\n-                    ast::RecordField(it) => Definition::Field(sema.to_def(&it)?),\n-                    ast::Variant(it) => Definition::Variant(sema.to_def(&it)?),\n-                    ast::TypeParam(it) => Definition::GenericParam(sema.to_def(&it)?.into()),\n-                    ast::ConstParam(it) => Definition::GenericParam(sema.to_def(&it)?.into()),\n-                    _ => return None,\n-                }\n+                Some(Definition::Module(root_module))\n             }\n-        };\n-\n-        Some(NameClass::Definition(def))\n+        }\n     }\n \n     pub fn classify_lifetime(\n@@ -307,19 +294,14 @@ impl NameClass {\n         let _p = profile::span(\"classify_lifetime\").detail(|| lifetime.to_string());\n         let parent = lifetime.syntax().parent()?;\n \n-        match_ast! {\n-            match parent {\n-                ast::LifetimeParam(it) => {\n-                    let def = sema.to_def(&it)?;\n-                    Some(NameClass::Definition(Definition::GenericParam(def.into())))\n-                },\n-                ast::Label(it) => {\n-                    let def = sema.to_def(&it)?;\n-                    Some(NameClass::Definition(Definition::Label(def)))\n-                },\n-                _ => None,\n-            }\n+        if let Some(it) = ast::LifetimeParam::cast(parent.clone()) {\n+            sema.to_def(&it).map(Into::into).map(Definition::GenericParam)\n+        } else if let Some(it) = ast::Label::cast(parent.clone()) {\n+            sema.to_def(&it).map(Definition::Label)\n+        } else {\n+            None\n         }\n+        .map(NameClass::Definition)\n     }\n }\n "}]}