{"sha": "ff352cd65a0377dd8679e4ee8044298cc018be55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMzUyY2Q2NWEwMzc3ZGQ4Njc5ZTRlZTgwNDQyOThjYzAxOGJlNTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-20T14:26:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-20T14:26:38Z"}, "message": "Rollup merge of #63691 - timvermeulen:chain-size-hint, r=scottmcm\n\nFix bug in iter::Chain::size_hint\n\n`Chain::size_hint` currently ignores `self.state`, which means that the size hints of the underlying iterators are always combined regardless of the iteration state. This, of course, should only happen when the state is `ChainState::Both`.", "tree": {"sha": "d73d116b7466342fba81c9b1136384a89fe7d3e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d73d116b7466342fba81c9b1136384a89fe7d3e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff352cd65a0377dd8679e4ee8044298cc018be55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdXAMfCRBK7hj4Ov3rIwAAdHIIAHCkgnXlBvYimDCWNp2GpD5i\nM/ebG7Mvf2ekYhoCY4xV7O8IENZ9JAiPsUfrjbGVES0Pr9bMs27+WEVuRv5jcmgj\nP07DdND4UsH6lkmnY9dNZF1TXolcSxLG58hKcd0/ItY4EGifvdFouPqnszwNAocB\noPhbnRosG8Vvk7bveBuUrUy+cc/ErbqiH+JZffYU+QiwBgPYmlGM1jZbMt2V4Xs8\nu/4Vf2xUUs+BnLaIBprGYQM1RmjaP7mbpic51fyh9UnntXVj+k2p+X67c9vH4V19\nSs0+nAar8u4rnqKDvCopt8kpw/eqHw3YAJtB/apqKjWVASrF3oWR77SxzX2gLYE=\n=9QTY\n-----END PGP SIGNATURE-----\n", "payload": "tree d73d116b7466342fba81c9b1136384a89fe7d3e0\nparent 60649e3a2efe34f8221e53e6cc0233d2dbd147ab\nparent ec54340756f325324f4b710105a708da1cf26564\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566311198 +0200\ncommitter GitHub <noreply@github.com> 1566311198 +0200\n\nRollup merge of #63691 - timvermeulen:chain-size-hint, r=scottmcm\n\nFix bug in iter::Chain::size_hint\n\n`Chain::size_hint` currently ignores `self.state`, which means that the size hints of the underlying iterators are always combined regardless of the iteration state. This, of course, should only happen when the state is `ChainState::Both`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff352cd65a0377dd8679e4ee8044298cc018be55", "html_url": "https://github.com/rust-lang/rust/commit/ff352cd65a0377dd8679e4ee8044298cc018be55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff352cd65a0377dd8679e4ee8044298cc018be55/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60649e3a2efe34f8221e53e6cc0233d2dbd147ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/60649e3a2efe34f8221e53e6cc0233d2dbd147ab", "html_url": "https://github.com/rust-lang/rust/commit/60649e3a2efe34f8221e53e6cc0233d2dbd147ab"}, {"sha": "ec54340756f325324f4b710105a708da1cf26564", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec54340756f325324f4b710105a708da1cf26564", "html_url": "https://github.com/rust-lang/rust/commit/ec54340756f325324f4b710105a708da1cf26564"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "c9612596b1ba0e8c523ecba69b1cbf7271f6a784", "filename": "src/libcore/iter/adapters/chain.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff352cd65a0377dd8679e4ee8044298cc018be55/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff352cd65a0377dd8679e4ee8044298cc018be55/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs?ref=ff352cd65a0377dd8679e4ee8044298cc018be55", "patch": "@@ -173,17 +173,23 @@ impl<A, B> Iterator for Chain<A, B> where\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let (a_lower, a_upper) = self.a.size_hint();\n-        let (b_lower, b_upper) = self.b.size_hint();\n+        match self.state {\n+            ChainState::Both => {\n+                let (a_lower, a_upper) = self.a.size_hint();\n+                let (b_lower, b_upper) = self.b.size_hint();\n \n-        let lower = a_lower.saturating_add(b_lower);\n+                let lower = a_lower.saturating_add(b_lower);\n \n-        let upper = match (a_upper, b_upper) {\n-            (Some(x), Some(y)) => x.checked_add(y),\n-            _ => None\n-        };\n+                let upper = match (a_upper, b_upper) {\n+                    (Some(x), Some(y)) => x.checked_add(y),\n+                    _ => None\n+                };\n \n-        (lower, upper)\n+                (lower, upper)\n+            }\n+            ChainState::Front => self.a.size_hint(),\n+            ChainState::Back => self.b.size_hint(),\n+        }\n     }\n }\n "}, {"sha": "3a4f76852a0d7c384daeae71a76593942df01af4", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ff352cd65a0377dd8679e4ee8044298cc018be55/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff352cd65a0377dd8679e4ee8044298cc018be55/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=ff352cd65a0377dd8679e4ee8044298cc018be55", "patch": "@@ -152,6 +152,54 @@ fn test_iterator_chain_find() {\n     assert_eq!(iter.next(), None);\n }\n \n+#[test]\n+fn test_iterator_chain_size_hint() {\n+    struct Iter {\n+        is_empty: bool,\n+    }\n+\n+    impl Iterator for Iter {\n+        type Item = ();\n+\n+        // alternates between `None` and `Some(())`\n+        fn next(&mut self) -> Option<Self::Item> {\n+            if self.is_empty {\n+                self.is_empty = false;\n+                None\n+            } else {\n+                self.is_empty = true;\n+                Some(())\n+            }\n+        }\n+\n+        fn size_hint(&self) -> (usize, Option<usize>) {\n+            if self.is_empty {\n+                (0, Some(0))\n+            } else {\n+                (1, Some(1))\n+            }\n+        }\n+    }\n+\n+    impl DoubleEndedIterator for Iter {\n+        fn next_back(&mut self) -> Option<Self::Item> {\n+            self.next()\n+        }\n+    }\n+\n+    // this chains an iterator of length 0 with an iterator of length 1,\n+    // so after calling `.next()` once, the iterator is empty and the\n+    // state is `ChainState::Back`. `.size_hint()` should now disregard\n+    // the size hint of the left iterator\n+    let mut iter = Iter { is_empty: true }.chain(once(()));\n+    assert_eq!(iter.next(), Some(()));\n+    assert_eq!(iter.size_hint(), (0, Some(0)));\n+\n+    let mut iter = once(()).chain(Iter { is_empty: true });\n+    assert_eq!(iter.next_back(), Some(()));\n+    assert_eq!(iter.size_hint(), (0, Some(0)));\n+}\n+\n #[test]\n fn test_zip_nth() {\n     let xs = [0, 1, 2, 4, 5];"}]}