{"sha": "879000b133aed8cc1893c84eb5319b491a4756d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3OTAwMGIxMzNhZWQ4Y2MxODkzYzg0ZWI1MzE5YjQ5MWE0NzU2ZDk=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-03T09:58:24Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-06T03:12:05Z"}, "message": "Detect `std` by checking if the crate defines `#[lang = \"start\"]` rather than string comparison", "tree": {"sha": "cc01f6fb936dfe43592e126d7b4e49cea095ffd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc01f6fb936dfe43592e126d7b4e49cea095ffd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/879000b133aed8cc1893c84eb5319b491a4756d9", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYLw9CBUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLh5zAEAhbuyt0Z24Nz1v7TYzEhdX25pKAkv\nRn8ehwBy/71Lz4QBAI/K4FPam4+StOodRRFFagYnVCTyKeqUT2NvlMXfqd0I\n=ugay\n-----END PGP SIGNATURE-----", "payload": "tree cc01f6fb936dfe43592e126d7b4e49cea095ffd8\nparent 28717a0e907ef427946a39adca1cbe3fa4b1e0f4\nauthor hyd-dev <yd-huang@outlook.com> 1622714304 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1622949125 +0800\n\nDetect `std` by checking if the crate defines `#[lang = \"start\"]` rather than string comparison\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/879000b133aed8cc1893c84eb5319b491a4756d9", "html_url": "https://github.com/rust-lang/rust/commit/879000b133aed8cc1893c84eb5319b491a4756d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/879000b133aed8cc1893c84eb5319b491a4756d9/comments", "author": null, "committer": null, "parents": [{"sha": "28717a0e907ef427946a39adca1cbe3fa4b1e0f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/28717a0e907ef427946a39adca1cbe3fa4b1e0f4", "html_url": "https://github.com/rust-lang/rust/commit/28717a0e907ef427946a39adca1cbe3fa4b1e0f4"}], "stats": {"total": 117, "additions": 92, "deletions": 25}, "files": [{"sha": "7f99aa1997068ae3099f0d01112423af4b71e488", "filename": "src/helpers.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/879000b133aed8cc1893c84eb5319b491a4756d9/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879000b133aed8cc1893c84eb5319b491a4756d9/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=879000b133aed8cc1893c84eb5319b491a4756d9", "patch": "@@ -628,6 +628,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         Ok(())\n     }\n+\n+    fn in_std(&self) -> bool {\n+        let this = self.eval_context_ref();\n+        this.tcx.def_path(this.frame().instance.def_id()).krate\n+            == this.tcx.def_path(this.tcx.lang_items().start_fn().unwrap()).krate\n+    }\n }\n \n /// Check that the number of args is what we expect."}, {"sha": "bbd46af52a9b71a7ea287af27ae95a93f69c1fe6", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/879000b133aed8cc1893c84eb5319b491a4756d9/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879000b133aed8cc1893c84eb5319b491a4756d9/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=879000b133aed8cc1893c84eb5319b491a4756d9", "patch": "@@ -475,7 +475,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n             \"pthread_attr_getguardsize\"\n-            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+            if this.in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref _attr, ref guard_size] = check_arg_count(args)?;\n                 let guard_size = this.deref_operand(guard_size)?;\n@@ -488,28 +488,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             | \"pthread_attr_init\"\n             | \"pthread_attr_destroy\"\n-            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+            if this.in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n             | \"pthread_attr_setstacksize\"\n-            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+            if this.in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_, _] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n \n             | \"signal\"\n             | \"sigaltstack\"\n-            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+            if this.in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_, _] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n             | \"sigaction\"\n             | \"mprotect\"\n-            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+            if this.in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_, _, _] = check_arg_count(args)?;\n                 this.write_null(dest)?;"}, {"sha": "9b0576662f477e64ba2a8cb9028e583c0b37313e", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/879000b133aed8cc1893c84eb5319b491a4756d9/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879000b133aed8cc1893c84eb5319b491a4756d9/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=879000b133aed8cc1893c84eb5319b491a4756d9", "patch": "@@ -207,9 +207,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n-            \"pthread_getattr_np\"\n-                if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") =>\n-            {\n+            \"pthread_getattr_np\" if this.in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref _thread, ref _attr] = check_arg_count(args)?;\n                 this.write_null(dest)?;"}, {"sha": "1467a95a0d3e2b96d83ff99581d6183a5a0480b1", "filename": "src/shims/posix/macos/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879000b133aed8cc1893c84eb5319b491a4756d9/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879000b133aed8cc1893c84eb5319b491a4756d9/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs?ref=879000b133aed8cc1893c84eb5319b491a4756d9", "patch": "@@ -149,7 +149,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n-            \"mmap\" if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+            \"mmap\" if this.in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 // This is a horrible hack, but since the guard page mechanism calls mmap and expects a particular return value, we just give it that value.\n                 let &[ref addr, _, _, _, _, _] = check_arg_count(args)?;"}, {"sha": "fd845cde31125dae254d76be308736c0a49019e8", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/879000b133aed8cc1893c84eb5319b491a4756d9/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879000b133aed8cc1893c84eb5319b491a4756d9/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=879000b133aed8cc1893c84eb5319b491a4756d9", "patch": "@@ -348,35 +348,27 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n-            \"GetProcessHeap\"\n-                if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") =>\n-            {\n+            \"GetProcessHeap\" if this.in_std() => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 // Just fake a HANDLE\n                 this.write_scalar(Scalar::from_machine_isize(1, this), dest)?;\n             }\n-            \"SetConsoleTextAttribute\"\n-                if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") =>\n-            {\n+            \"SetConsoleTextAttribute\" if this.in_std() => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref _hConsoleOutput, ref _wAttribute] = check_arg_count(args)?;\n                 // Pretend these does not exist / nothing happened, by returning zero.\n                 this.write_null(dest)?;\n             }\n-            \"AddVectoredExceptionHandler\"\n-                if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") =>\n-            {\n+            \"AddVectoredExceptionHandler\" if this.in_std() => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref _First, ref _Handler] = check_arg_count(args)?;\n                 // Any non zero value works for the stdlib. This is just used for stack overflows anyway.\n                 this.write_scalar(Scalar::from_machine_usize(1, this), dest)?;\n             }\n-            \"SetThreadStackGuarantee\"\n-                if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") =>\n-            {\n+            \"SetThreadStackGuarantee\" if this.in_std() => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[_StackSizeInBytes] = check_arg_count(args)?;\n@@ -387,7 +379,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"EnterCriticalSection\"\n             | \"LeaveCriticalSection\"\n             | \"DeleteCriticalSection\"\n-                if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") =>\n+                if this.in_std() =>\n             {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n@@ -401,9 +393,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // (Windows locks are reentrant, and we have only 1 thread,\n                 // so not doing any futher checks here is at least not incorrect.)\n             }\n-            \"TryEnterCriticalSection\"\n-                if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") =>\n-            {\n+            \"TryEnterCriticalSection\" if this.in_std() => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref _lpCriticalSection] = check_arg_count(args)?;"}, {"sha": "4fd5f4b7d885f9aa7e71506b28d58c879c4a6c51", "filename": "tests/compile-fail/unsupported_get_process_heap.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/879000b133aed8cc1893c84eb5319b491a4756d9/tests%2Fcompile-fail%2Funsupported_get_process_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879000b133aed8cc1893c84eb5319b491a4756d9/tests%2Fcompile-fail%2Funsupported_get_process_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funsupported_get_process_heap.rs?ref=879000b133aed8cc1893c84eb5319b491a4756d9", "patch": "@@ -0,0 +1,12 @@\n+//! `GetProcessHeap()` is special on Windows that it's only supported within libstd.\n+//! (On Linux and macOS, it's just always unsupported.)\n+\n+fn main() {\n+    extern \"system\" {\n+        fn GetProcessHeap() -> *mut std::ffi::c_void;\n+    }\n+    unsafe {\n+        GetProcessHeap();\n+        //~^ ERROR unsupported operation: can't call foreign function: GetProcessHeap\n+    }\n+}"}, {"sha": "7931747e0aa86adf4c8c1c8800da65358826e7f9", "filename": "tests/compile-fail/unsupported_signal.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/879000b133aed8cc1893c84eb5319b491a4756d9/tests%2Fcompile-fail%2Funsupported_signal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879000b133aed8cc1893c84eb5319b491a4756d9/tests%2Fcompile-fail%2Funsupported_signal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funsupported_signal.rs?ref=879000b133aed8cc1893c84eb5319b491a4756d9", "patch": "@@ -0,0 +1,12 @@\n+//! `signal()` is special on Linux and macOS that it's only supported within libstd.\n+// ignore-windows: No libc on Windows\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+fn main() {\n+    unsafe {\n+        libc::signal(libc::SIGPIPE, libc::SIG_IGN);\n+        //~^ ERROR unsupported operation: can't call foreign function: signal\n+    }\n+}"}, {"sha": "8f71e613375e30536b1db948a4e669ad2e467991", "filename": "tests/run-pass/extern_crate_std_in_main.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/879000b133aed8cc1893c84eb5319b491a4756d9/tests%2Frun-pass%2Fextern_crate_std_in_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879000b133aed8cc1893c84eb5319b491a4756d9/tests%2Frun-pass%2Fextern_crate_std_in_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fextern_crate_std_in_main.rs?ref=879000b133aed8cc1893c84eb5319b491a4756d9", "patch": "@@ -0,0 +1,5 @@\n+#![no_std]\n+\n+fn main() {\n+    extern crate std;\n+}"}, {"sha": "7e82e53e6be8553a542be42c9e3e3576243ae415", "filename": "tests/run-pass/rename_std.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/879000b133aed8cc1893c84eb5319b491a4756d9/tests%2Frun-pass%2Frename_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879000b133aed8cc1893c84eb5319b491a4756d9/tests%2Frun-pass%2Frename_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frename_std.rs?ref=879000b133aed8cc1893c84eb5319b491a4756d9", "patch": "@@ -0,0 +1,5 @@\n+#![no_std]\n+\n+extern crate std as foo;\n+\n+fn main() {}"}, {"sha": "959103ee5c8e7d42823041c77c4ccbe99703872e", "filename": "tests/run-pass/std_only_foreign_function.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/879000b133aed8cc1893c84eb5319b491a4756d9/tests%2Frun-pass%2Fstd_only_foreign_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879000b133aed8cc1893c84eb5319b491a4756d9/tests%2Frun-pass%2Fstd_only_foreign_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstd_only_foreign_function.rs?ref=879000b133aed8cc1893c84eb5319b491a4756d9", "patch": "@@ -0,0 +1,39 @@\n+//! Make sure we can call foreign functions that are only allowed within libstd if we are \"libstd\"\n+//! (defining the `start` lang item).\n+#![feature(lang_items, rustc_private, core_intrinsics)]\n+#![no_std]\n+\n+use core::{intrinsics, panic::PanicInfo};\n+\n+#[lang = \"eh_personality\"]\n+fn rust_eh_personality() {}\n+\n+#[panic_handler]\n+fn panic_handler(_: &PanicInfo<'_>) -> ! {\n+    intrinsics::abort()\n+}\n+\n+#[lang = \"start\"]\n+fn start(main: fn(), _argc: isize, _argv: *const *const u8) -> isize {\n+    main();\n+    0\n+}\n+\n+fn main() {\n+    #[cfg(unix)]\n+    unsafe {\n+        extern crate libc;\n+        assert_eq!(libc::signal(libc::SIGPIPE, libc::SIG_IGN), 0);\n+    }\n+    #[cfg(windows)]\n+    unsafe {\n+        extern \"system\" {\n+            fn GetProcessHeap() -> *mut core::ffi::c_void;\n+            fn ExitProcess(code: u32) -> !;\n+        }\n+        assert_eq!(GetProcessHeap() as usize, 1);\n+        // Early exit to avoid the requirement of\n+        // `std::sys::windows::thread_local_key::p_thread_callback`.\n+        ExitProcess(0);\n+    }\n+}"}]}