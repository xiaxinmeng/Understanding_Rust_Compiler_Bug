{"sha": "c19f493129e45e1f23aaf67900d092fcc2a81ff3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOWY0OTMxMjllNDVlMWYyM2FhZjY3OTAwZDA5MmZjYzJhODFmZjM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-08-29T09:44:11Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-09-04T16:38:46Z"}, "message": "debuginfo: Added test cases for structs, tuples, enums, etc passed by value.\n\nAlso updated documentation comments in debuginfo and renamed DebugContext to CrateDebugContext.", "tree": {"sha": "c961c73f7081ff653d1b025b437c7d0d9286c600", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c961c73f7081ff653d1b025b437c7d0d9286c600"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c19f493129e45e1f23aaf67900d092fcc2a81ff3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c19f493129e45e1f23aaf67900d092fcc2a81ff3", "html_url": "https://github.com/rust-lang/rust/commit/c19f493129e45e1f23aaf67900d092fcc2a81ff3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c19f493129e45e1f23aaf67900d092fcc2a81ff3/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30375ccb303807223dac67a74a0a0f6a3c37263f", "url": "https://api.github.com/repos/rust-lang/rust/commits/30375ccb303807223dac67a74a0a0f6a3c37263f", "html_url": "https://github.com/rust-lang/rust/commit/30375ccb303807223dac67a74a0a0f6a3c37263f"}], "stats": {"total": 269, "additions": 206, "deletions": 63}, "files": [{"sha": "59159f61f485f1db385bc3eacd45347f53ae31af", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=c19f493129e45e1f23aaf67900d092fcc2a81ff3", "patch": "@@ -111,7 +111,7 @@ pub struct CrateContext {\n      // decl_gc_metadata knows whether to link to the module metadata, which\n      // is not emitted by LLVM's GC pass when no functions use GC.\n      uses_gc: bool,\n-     dbg_cx: Option<debuginfo::DebugContext>,\n+     dbg_cx: Option<debuginfo::CrateDebugContext>,\n      do_not_commit_warning_issued: bool\n }\n \n@@ -161,7 +161,7 @@ impl CrateContext {\n \n             let crate_map = decl_crate_map(sess, link_meta, llmod);\n             let dbg_cx = if sess.opts.debuginfo {\n-                Some(debuginfo::DebugContext::new(llmod, name.to_owned()))\n+                Some(debuginfo::CrateDebugContext::new(llmod, name.to_owned()))\n             } else {\n                 None\n             };"}, {"sha": "1a39e0aa1a0f6e5eb0c4ce1bac51669daff9c4ff", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=c19f493129e45e1f23aaf67900d092fcc2a81ff3", "patch": "@@ -27,7 +27,7 @@ where possible. This will hopefully ease the adaption of this module to future L\n \n The public API of the module is a set of functions that will insert the correct metadata into the\n LLVM IR when called with the right parameters. The module is thus driven from an outside client with\n-functions like `debuginfo::local_var_metadata(bcx: block, local: &ast::local)`.\n+functions like `debuginfo::create_local_var_metadata(bcx: block, local: &ast::local)`.\n \n Internally the module will try to reuse already created metadata by utilizing a cache. The way to\n get a shared metadata node when needed is thus to just call the corresponding function in this\n@@ -37,9 +37,8 @@ module:\n \n The function will take care of probing the cache for an existing node for that exact file path.\n \n-All private state used by the module is stored within a DebugContext struct, which in turn is\n-contained in the CrateContext.\n-\n+All private state used by the module is stored within either the CrateDebugContext struct (owned by\n+the CrateContext) or the FunctionDebugContext (owned by the FunctionContext).\n \n This file consists of three conceptual sections:\n 1. The public interface of the module\n@@ -92,7 +91,7 @@ static DW_ATE_unsigned_char: c_uint = 0x08;\n //=-------------------------------------------------------------------------------------------------\n \n /// A context object for maintaining all state needed by the debuginfo module.\n-pub struct DebugContext {\n+pub struct CrateDebugContext {\n     priv crate_file: ~str,\n     priv llcontext: ContextRef,\n     priv builder: DIBuilderRef,\n@@ -101,13 +100,13 @@ pub struct DebugContext {\n     priv created_types: HashMap<uint, DIType>,\n }\n \n-impl DebugContext {\n-    pub fn new(llmod: ModuleRef, crate: ~str) -> DebugContext {\n-        debug!(\"DebugContext::new\");\n+impl CrateDebugContext {\n+    pub fn new(llmod: ModuleRef, crate: ~str) -> CrateDebugContext {\n+        debug!(\"CrateDebugContext::new\");\n         let builder = unsafe { llvm::LLVMDIBuilderCreate(llmod) };\n         // DIBuilder inherits context from the module, so we'd better use the same one\n         let llcontext = unsafe { llvm::LLVMGetModuleContext(llmod) };\n-        return DebugContext {\n+        return CrateDebugContext {\n             crate_file: crate,\n             llcontext: llcontext,\n             builder: builder,\n@@ -165,9 +164,9 @@ struct FunctionDebugContextData {\n }\n \n enum VariableAccess {\n-    // The value given is a pointer to data\n+    // The value given is a pointer to the data (T*)\n     DirectVariable,\n-    // The value given has to be dereferenced once to get the pointer to data\n+    // The value given has to be dereferenced once to get the pointer to data (T**)\n     IndirectVariable\n }\n \n@@ -224,9 +223,9 @@ pub fn create_local_var_metadata(bcx: @mut Block,\n     }\n }\n \n-/// Creates debug information for a local variable introduced in the head of a match-statement arm.\n+/// Creates debug information for a variable captured in a closure.\n ///\n-// /// Adds the created metadata nodes directly to the crate's IR.\n+/// Adds the created metadata nodes directly to the crate's IR.\n pub fn create_captured_var_metadata(bcx: @mut Block,\n                                     node_id: ast::NodeId,\n                                     llptr: ValueRef,\n@@ -321,7 +320,8 @@ pub fn create_self_argument_metadata(bcx: @mut Block,\n             _) => {\n             explicit_self.span\n         }\n-        _ => bcx.ccx().sess.bug(fmt!(\"create_self_argument_metadata: unexpected sort of node: %?\", fnitem))\n+        _ => bcx.ccx().sess.bug(\n+                fmt!(\"create_self_argument_metadata: unexpected sort of node: %?\", fnitem))\n     };\n \n     let scope_metadata = bcx.fcx.debug_context.get_ref(bcx.ccx(), span).fn_metadata;\n@@ -361,14 +361,10 @@ pub fn create_argument_metadata(bcx: @mut Block,\n     let fcx = bcx.fcx;\n     let cx = fcx.ccx;\n \n-    let pattern = arg.pat;\n-    let filename = span_start(cx, pattern.span).file.name;\n-\n     let def_map = cx.tcx.def_map;\n-    let file_metadata = file_metadata(cx, filename);\n     let scope_metadata = bcx.fcx.debug_context.get_ref(cx, arg.pat.span).fn_metadata;\n \n-    do pat_util::pat_bindings(def_map, pattern) |_, node_id, span, path_ref| {\n+    do pat_util::pat_bindings(def_map, arg.pat) |_, node_id, span, path_ref| {\n \n         let llptr = match bcx.fcx.llargs.find_copy(&node_id) {\n             Some(v) => v,\n@@ -429,13 +425,24 @@ pub fn set_source_location(fcx: &FunctionContext,\n     }\n }\n \n+/// Enables emitting source locations for the given functions.\n+///\n+/// Since we don't want source locations to be emitted for the function prelude, they are disabled\n+/// when beginning to translate a new function. This functions switches source location emitting on\n+/// and must therefore be called before the first real statement/expression of the function is\n+/// translated.\n pub fn start_emitting_source_locations(fcx: &mut FunctionContext) {\n     match fcx.debug_context {\n         FunctionDebugContext(~ref mut data) => data.source_locations_enabled = true,\n-        _ => { /* safe to ignore */}\n+        _ => { /* safe to ignore */ }\n     }\n }\n \n+/// Creates the function-specific debug context.\n+///\n+/// Returns the FunctionDebugContext for the function which holds state needed for debug info\n+/// creation. The function may also return another variant of the FunctionDebugContext enum which\n+/// indicates why no debuginfo should be created for the function.\n pub fn create_function_debug_context(cx: &mut CrateContext,\n                                      fn_ast_id: ast::NodeId,\n                                      param_substs: Option<@param_substs>,\n@@ -1663,7 +1670,7 @@ fn bytes_to_bits(bytes: uint) -> c_ulonglong {\n }\n \n #[inline]\n-fn dbg_cx<'a>(cx: &'a mut CrateContext) -> &'a mut DebugContext {\n+fn dbg_cx<'a>(cx: &'a mut CrateContext) -> &'a mut CrateDebugContext {\n     cx.dbg_cx.get_mut_ref()\n }\n "}, {"sha": "79cfe8b28519a4dc43193b586da67156ae4cdc54", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=c19f493129e45e1f23aaf67900d092fcc2a81ff3", "patch": "@@ -608,6 +608,9 @@ LLVMDIBuilderCreateEnumerator\n LLVMDIBuilderCreateEnumerationType\n LLVMDIBuilderCreateUnionType\n LLVMDIBuilderCreateTemplateTypeParameter\n+LLVMDIBuilderCreateOpDeref\n+LLVMDIBuilderCreateOpPlus\n+LLVMDIBuilderCreateComplexVariable\n LLVMSetUnnamedAddr\n LLVMRustAddPass\n LLVMRustAddAnalysisPasses"}, {"sha": "da9c79a00ed470692dabcb3e9ad5bcd30d6cedf7", "filename": "src/test/debug-info/by-value-non-immediate-argument.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs?ref=c19f493129e45e1f23aaf67900d092fcc2a81ff3", "patch": "@@ -0,0 +1,99 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+\n+// debugger:finish\n+// debugger:print s\n+// check:$1 = {a = 1, b = 2.5}\n+// debugger:continue\n+\n+// debugger:finish\n+// debugger:print x\n+// check:$2 = {a = 3, b = 4.5}\n+// debugger:print y\n+// check:$3 = 5\n+// debugger:print z\n+// check:$4 = 6.5\n+// debugger:continue\n+\n+// debugger:finish\n+// debugger:print a\n+// check:$5 = {7, 8, 9.5, 10.5}\n+// debugger:continue\n+\n+// debugger:finish\n+// debugger:print a\n+// check:$6 = {11.5, 12.5, 13, 14}\n+// debugger:continue\n+\n+// debugger:finish\n+// debugger:print x\n+// check:$7 = {{Case1, x = 0, y = 8970181431921507452}, {Case1, 0, 2088533116, 2088533116}}\n+// debugger:continue\n+\n+#[deriving(Clone)]\n+struct Struct {\n+    a: int,\n+    b: float\n+}\n+\n+#[deriving(Clone)]\n+struct StructStruct {\n+    a: Struct,\n+    b: Struct\n+}\n+\n+fn fun(s: Struct) {\n+    zzz();\n+}\n+\n+fn fun_fun(StructStruct { a: x, b: Struct { a: y, b: z } }: StructStruct) {\n+    zzz();\n+}\n+\n+fn tup(a: (int, uint, float, float)) {\n+    zzz();\n+}\n+\n+struct Newtype(float, float, int, uint);\n+\n+fn new_type(a: Newtype) {\n+    zzz();\n+}\n+\n+// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n+// the size of the discriminant value is machine dependent, this has be taken into account when\n+// datatype layout should be predictable as in this case.\n+enum Enum {\n+    Case1 { x: i64, y: i64 },\n+    Case2 (i64, i32, i32),\n+}\n+\n+fn by_val_enum(x: Enum) {\n+    zzz();\n+}\n+\n+fn main() {\n+    fun(Struct { a: 1, b: 2.5 });\n+    fun_fun(StructStruct { a: Struct { a: 3, b: 4.5 }, b: Struct { a: 5, b: 6.5 } });\n+    tup((7, 8, 9.5, 10.5));\n+    new_type(Newtype(11.5, 12.5, 13, 14));\n+\n+    // 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n+    // 0b01111100011111000111110001111100 = 2088533116\n+    // 0b0111110001111100 = 31868\n+    // 0b01111100 = 124\n+    by_val_enum(Case1 { x: 0, y: 8970181431921507452 });\n+}\n+\n+fn zzz() {()}"}, {"sha": "73bd805a6f4c78466a967c04bec45b68df9a0884", "filename": "src/test/debug-info/by-value-struct-argument.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/30375ccb303807223dac67a74a0a0f6a3c37263f/src%2Ftest%2Fdebug-info%2Fby-value-struct-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30375ccb303807223dac67a74a0a0f6a3c37263f/src%2Ftest%2Fdebug-info%2Fby-value-struct-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fby-value-struct-argument.rs?ref=30375ccb303807223dac67a74a0a0f6a3c37263f", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n-// debugger:run\n-\n-// debugger:finish\n-// debugger:print s\n-// check:$1 = {a = 1, b = 2.5}\n-// debugger:continue\n-\n-#[deriving(Clone)]\n-struct Struct {\n-    a: int,\n-    b: float\n-}\n-\n-fn fun(s: Struct) {\n-    zzz();\n-}\n-\n-fn main() {\n-    fun(Struct { a: 1, b: 2.5 });\n-}\n-\n-fn zzz() {()}"}, {"sha": "002bfbd2242ae9089f41c316e999873eab4a89cf", "filename": "src/test/debug-info/var-captured-in-managed-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Ftest%2Fdebug-info%2Fvar-captured-in-managed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Ftest%2Fdebug-info%2Fvar-captured-in-managed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-managed-closure.rs?ref=c19f493129e45e1f23aaf67900d092fcc2a81ff3", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n-\n // compile-flags:-Z extra-debug-info\n // debugger:break zzz\n // debugger:run"}, {"sha": "60ad2a3544a3d135576b67b592cf84e4700d654b", "filename": "src/test/debug-info/var-captured-in-nested-closure.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Ftest%2Fdebug-info%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Ftest%2Fdebug-info%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-nested-closure.rs?ref=c19f493129e45e1f23aaf67900d092fcc2a81ff3", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+// debugger:finish\n+\n+// debugger:print variable\n+// check:$1 = 1\n+// debugger:print constant\n+// check:$2 = 2\n+// debugger:print a_struct\n+// check:$3 = {a = -3, b = 4.5, c = 5}\n+// debugger:print *struct_ref\n+// check:$4 = {a = -3, b = 4.5, c = 5}\n+// debugger:print *owned\n+// check:$5 = 6\n+// debugger:print managed->val\n+// check:$6 = 7\n+// debugger:print closure_local\n+// check:$7 = 8\n+// debugger:continue\n+\n+#[allow(unused_variable)];\n+\n+struct Struct {\n+    a: int,\n+    b: float,\n+    c: uint\n+}\n+\n+fn main() {\n+    let mut variable = 1;\n+    let constant = 2;\n+\n+    let a_struct = Struct {\n+        a: -3,\n+        b: 4.5,\n+        c: 5\n+    };\n+\n+    let struct_ref = &a_struct;\n+    let owned = ~6;\n+    let managed = @7;\n+\n+    let closure = || {\n+        let closure_local = 8;\n+\n+        let nested_closure = || {\n+            zzz();\n+            variable = constant + a_struct.a + struct_ref.a + *owned + *managed + closure_local;\n+        };\n+\n+        // breaking here will yield a wrong value for 'constant'. In particular, GDB will\n+        // read the value of the register that supposedly contains the pointer to 'constant'\n+        // and try derefence it. The register, however, already contains the actual value, and\n+        // not a pointer to it. -mw\n+        // zzz();\n+\n+        nested_closure();\n+    };\n+\n+    closure();\n+}\n+\n+fn zzz() {()}"}, {"sha": "01839ea783533b8765d29eb9df358f888c6881ca", "filename": "src/test/debug-info/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs?ref=c19f493129e45e1f23aaf67900d092fcc2a81ff3", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n-\n // compile-flags:-Z extra-debug-info\n // debugger:break zzz\n // debugger:run"}, {"sha": "3ce7d6fd89bddbc40cc584019443839c5c1e7afb", "filename": "src/test/debug-info/var-captured-in-stack-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Ftest%2Fdebug-info%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19f493129e45e1f23aaf67900d092fcc2a81ff3/src%2Ftest%2Fdebug-info%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-stack-closure.rs?ref=c19f493129e45e1f23aaf67900d092fcc2a81ff3", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n-\n // compile-flags:-Z extra-debug-info\n // debugger:break zzz\n // debugger:run"}]}