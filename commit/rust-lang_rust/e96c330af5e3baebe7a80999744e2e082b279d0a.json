{"sha": "e96c330af5e3baebe7a80999744e2e082b279d0a", "node_id": "C_kwDOAAsO6NoAKGU5NmMzMzBhZjVlM2JhZWJlN2E4MDk5OTc0NGUyZTA4MmIyNzlkMGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-30T08:09:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-30T08:09:59Z"}, "message": "Auto merge of #103755 - Dylan-DPC:rollup-dl2hups, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #93582 (Allow `impl Fn() -> impl Trait` in return position)\n - #103560 (Point only to the identifiers in the typo suggestions of shadowed names instead of the entire struct)\n - #103588 (rustdoc: add missing URL redirect)\n - #103689 (Do fewer passes and generally be more efficient when filtering tests)\n - #103740 (rustdoc: remove unnecessary CSS `.search-results { padding-bottom }`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "141684e5cad5a8a16a6c23aab8d4ac2c5dca0f9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/141684e5cad5a8a16a6c23aab8d4ac2c5dca0f9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e96c330af5e3baebe7a80999744e2e082b279d0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e96c330af5e3baebe7a80999744e2e082b279d0a", "html_url": "https://github.com/rust-lang/rust/commit/e96c330af5e3baebe7a80999744e2e082b279d0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e96c330af5e3baebe7a80999744e2e082b279d0a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b03502b35d111bef0399a66ab3cc765f0802e8ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/b03502b35d111bef0399a66ab3cc765f0802e8ba", "html_url": "https://github.com/rust-lang/rust/commit/b03502b35d111bef0399a66ab3cc765f0802e8ba"}, {"sha": "df74f07b18925c4a5330255f84d8162d9e40c1ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/df74f07b18925c4a5330255f84d8162d9e40c1ed", "html_url": "https://github.com/rust-lang/rust/commit/df74f07b18925c4a5330255f84d8162d9e40c1ed"}], "stats": {"total": 587, "additions": 435, "deletions": 152}, "files": [{"sha": "c6955741fd4c2961be0d6b732910770783c9fbf9", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -191,7 +191,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     self.lower_angle_bracketed_parameter_data(data, param_mode, itctx)\n                 }\n                 GenericArgs::Parenthesized(ref data) => match parenthesized_generic_args {\n-                    ParenthesizedGenericArgs::Ok => self.lower_parenthesized_parameter_data(data),\n+                    ParenthesizedGenericArgs::Ok => {\n+                        self.lower_parenthesized_parameter_data(data, itctx)\n+                    }\n                     ParenthesizedGenericArgs::Err => {\n                         // Suggest replacing parentheses with angle brackets `Trait(params...)` to `Trait<params...>`\n                         let sub = if !data.inputs.is_empty() {\n@@ -344,6 +346,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_parenthesized_parameter_data(\n         &mut self,\n         data: &ParenthesizedArgs,\n+        itctx: &ImplTraitContext,\n     ) -> (GenericArgsCtor<'hir>, bool) {\n         // Switch to `PassThrough` mode for anonymous lifetimes; this\n         // means that we permit things like `&Ref<T>`, where `Ref` has\n@@ -355,6 +358,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             self.lower_ty_direct(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitParam))\n         }));\n         let output_ty = match output {\n+            // Only allow `impl Trait` in return position. i.e.:\n+            // ```rust\n+            // fn f(_: impl Fn() -> impl Debug) -> impl Fn() -> impl Debug\n+            // //      disallowed --^^^^^^^^^^        allowed --^^^^^^^^^^\n+            // ```\n+            FnRetTy::Ty(ty)\n+                if matches!(itctx, ImplTraitContext::ReturnPositionOpaqueTy { .. })\n+                    && self.tcx.features().impl_trait_in_fn_trait_return =>\n+            {\n+                self.lower_ty(&ty, itctx)\n+            }\n             FnRetTy::Ty(ty) => {\n                 self.lower_ty(&ty, &ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitReturn))\n             }"}, {"sha": "96645d40086d661b8c8fda8015f1f9f7f6192540", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -412,6 +412,8 @@ declare_features! (\n     (active, half_open_range_patterns_in_slices, \"CURRENT_RUSTC_VERSION\", Some(67264), None),\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n+    /// Allows `impl Trait` as output type in `Fn` traits in return position of functions.\n+    (active, impl_trait_in_fn_trait_return, \"1.64.0\", Some(99697), None),\n     /// Allows using imported `main` function\n     (active, imported_main, \"1.53.0\", Some(28937), None),\n     /// Allows associated types in inherent impls."}, {"sha": "5029c33996329eb00fbfa6c888a1828413619405", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -58,16 +58,32 @@ pub(crate) enum SuggestionTarget {\n #[derive(Debug)]\n pub(crate) struct TypoSuggestion {\n     pub candidate: Symbol,\n+    /// The source location where the name is defined; None if the name is not defined\n+    /// in source e.g. primitives\n+    pub span: Option<Span>,\n     pub res: Res,\n     pub target: SuggestionTarget,\n }\n \n impl TypoSuggestion {\n-    pub(crate) fn typo_from_res(candidate: Symbol, res: Res) -> TypoSuggestion {\n-        Self { candidate, res, target: SuggestionTarget::SimilarlyNamed }\n+    pub(crate) fn typo_from_ident(ident: Ident, res: Res) -> TypoSuggestion {\n+        Self {\n+            candidate: ident.name,\n+            span: Some(ident.span),\n+            res,\n+            target: SuggestionTarget::SimilarlyNamed,\n+        }\n+    }\n+    pub(crate) fn typo_from_name(candidate: Symbol, res: Res) -> TypoSuggestion {\n+        Self { candidate, span: None, res, target: SuggestionTarget::SimilarlyNamed }\n     }\n-    pub(crate) fn single_item_from_res(candidate: Symbol, res: Res) -> TypoSuggestion {\n-        Self { candidate, res, target: SuggestionTarget::SingleItem }\n+    pub(crate) fn single_item_from_ident(ident: Ident, res: Res) -> TypoSuggestion {\n+        Self {\n+            candidate: ident.name,\n+            span: Some(ident.span),\n+            res,\n+            target: SuggestionTarget::SingleItem,\n+        }\n     }\n }\n \n@@ -490,7 +506,7 @@ impl<'a> Resolver<'a> {\n             if let Some(binding) = resolution.borrow().binding {\n                 let res = binding.res();\n                 if filter_fn(res) && ctxt.map_or(true, |ctxt| ctxt == key.ident.span.ctxt()) {\n-                    names.push(TypoSuggestion::typo_from_res(key.ident.name, res));\n+                    names.push(TypoSuggestion::typo_from_ident(key.ident, res));\n                 }\n             }\n         }\n@@ -1145,7 +1161,7 @@ impl<'a> Resolver<'a> {\n                                 .get(&expn_id)\n                                 .into_iter()\n                                 .flatten()\n-                                .map(|ident| TypoSuggestion::typo_from_res(ident.name, res)),\n+                                .map(|ident| TypoSuggestion::typo_from_ident(*ident, res)),\n                         );\n                     }\n                 }\n@@ -1164,7 +1180,7 @@ impl<'a> Resolver<'a> {\n                                 suggestions.extend(\n                                     ext.helper_attrs\n                                         .iter()\n-                                        .map(|name| TypoSuggestion::typo_from_res(*name, res)),\n+                                        .map(|name| TypoSuggestion::typo_from_name(*name, res)),\n                                 );\n                             }\n                         }\n@@ -1174,8 +1190,8 @@ impl<'a> Resolver<'a> {\n                     if let MacroRulesScope::Binding(macro_rules_binding) = macro_rules_scope.get() {\n                         let res = macro_rules_binding.binding.res();\n                         if filter_fn(res) {\n-                            suggestions.push(TypoSuggestion::typo_from_res(\n-                                macro_rules_binding.ident.name,\n+                            suggestions.push(TypoSuggestion::typo_from_ident(\n+                                macro_rules_binding.ident,\n                                 res,\n                             ))\n                         }\n@@ -1193,7 +1209,7 @@ impl<'a> Resolver<'a> {\n                     suggestions.extend(this.macro_use_prelude.iter().filter_map(\n                         |(name, binding)| {\n                             let res = binding.res();\n-                            filter_fn(res).then_some(TypoSuggestion::typo_from_res(*name, res))\n+                            filter_fn(res).then_some(TypoSuggestion::typo_from_name(*name, res))\n                         },\n                     ));\n                 }\n@@ -1203,22 +1219,22 @@ impl<'a> Resolver<'a> {\n                         suggestions.extend(\n                             BUILTIN_ATTRIBUTES\n                                 .iter()\n-                                .map(|attr| TypoSuggestion::typo_from_res(attr.name, res)),\n+                                .map(|attr| TypoSuggestion::typo_from_name(attr.name, res)),\n                         );\n                     }\n                 }\n                 Scope::ExternPrelude => {\n                     suggestions.extend(this.extern_prelude.iter().filter_map(|(ident, _)| {\n                         let res = Res::Def(DefKind::Mod, CRATE_DEF_ID.to_def_id());\n-                        filter_fn(res).then_some(TypoSuggestion::typo_from_res(ident.name, res))\n+                        filter_fn(res).then_some(TypoSuggestion::typo_from_ident(*ident, res))\n                     }));\n                 }\n                 Scope::ToolPrelude => {\n                     let res = Res::NonMacroAttr(NonMacroAttrKind::Tool);\n                     suggestions.extend(\n                         this.registered_tools\n                             .iter()\n-                            .map(|ident| TypoSuggestion::typo_from_res(ident.name, res)),\n+                            .map(|ident| TypoSuggestion::typo_from_ident(*ident, res)),\n                     );\n                 }\n                 Scope::StdLibPrelude => {\n@@ -1235,7 +1251,8 @@ impl<'a> Resolver<'a> {\n                 Scope::BuiltinTypes => {\n                     suggestions.extend(PrimTy::ALL.iter().filter_map(|prim_ty| {\n                         let res = Res::PrimTy(*prim_ty);\n-                        filter_fn(res).then_some(TypoSuggestion::typo_from_res(prim_ty.name(), res))\n+                        filter_fn(res)\n+                            .then_some(TypoSuggestion::typo_from_name(prim_ty.name(), res))\n                     }))\n                 }\n             }"}, {"sha": "103187b00d1b7391788fb377a10e8e17ed864229", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -150,15 +150,15 @@ struct BaseError {\n #[derive(Debug)]\n enum TypoCandidate {\n     Typo(TypoSuggestion),\n-    Shadowed(Res),\n+    Shadowed(Res, Option<Span>),\n     None,\n }\n \n impl TypoCandidate {\n     fn to_opt_suggestion(self) -> Option<TypoSuggestion> {\n         match self {\n             TypoCandidate::Typo(sugg) => Some(sugg),\n-            TypoCandidate::Shadowed(_) | TypoCandidate::None => None,\n+            TypoCandidate::Shadowed(_, _) | TypoCandidate::None => None,\n         }\n     }\n }\n@@ -691,9 +691,20 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let is_expected = &|res| source.is_expected(res);\n         let ident_span = path.last().map_or(span, |ident| ident.ident.span);\n         let typo_sugg = self.lookup_typo_candidate(path, source.namespace(), is_expected);\n-        if let TypoCandidate::Shadowed(res) = typo_sugg\n-            && let Some(id) = res.opt_def_id()\n-            && let Some(sugg_span) = self.r.opt_span(id)\n+        let is_in_same_file = &|sp1, sp2| {\n+            let source_map = self.r.session.source_map();\n+            let file1 = source_map.span_to_filename(sp1);\n+            let file2 = source_map.span_to_filename(sp2);\n+            file1 == file2\n+        };\n+        // print 'you might have meant' if the candidate is (1) is a shadowed name with\n+        // accessible definition and (2) either defined in the same crate as the typo\n+        // (could be in a different file) or introduced in the same file as the typo\n+        // (could belong to a different crate)\n+        if let TypoCandidate::Shadowed(res, Some(sugg_span)) = typo_sugg\n+            && res\n+                .opt_def_id()\n+                .map_or(false, |id| id.is_local() || is_in_same_file(span, sugg_span))\n         {\n             err.span_label(\n                 sugg_span,\n@@ -970,10 +981,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         .collect();\n                 if targets.len() == 1 {\n                     let target = targets[0];\n-                    return Some(TypoSuggestion::single_item_from_res(\n-                        target.0.ident.name,\n-                        target.1,\n-                    ));\n+                    return Some(TypoSuggestion::single_item_from_ident(target.0.ident, target.1));\n                 }\n             }\n         }\n@@ -1615,7 +1623,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 // Locals and type parameters\n                 for (ident, &res) in &rib.bindings {\n                     if filter_fn(res) && ident.span.ctxt() == rib_ctxt {\n-                        names.push(TypoSuggestion::typo_from_res(ident.name, res));\n+                        names.push(TypoSuggestion::typo_from_ident(*ident, res));\n                     }\n                 }\n \n@@ -1644,9 +1652,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                                             Res::Def(DefKind::Mod, crate_id.as_def_id());\n \n                                         if filter_fn(crate_mod) {\n-                                            Some(TypoSuggestion::typo_from_res(\n-                                                ident.name, crate_mod,\n-                                            ))\n+                                            Some(TypoSuggestion::typo_from_ident(*ident, crate_mod))\n                                         } else {\n                                             None\n                                         }\n@@ -1665,7 +1671,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             // Add primitive types to the mix\n             if filter_fn(Res::PrimTy(PrimTy::Bool)) {\n                 names.extend(PrimTy::ALL.iter().map(|prim_ty| {\n-                    TypoSuggestion::typo_from_res(prim_ty.name(), Res::PrimTy(*prim_ty))\n+                    TypoSuggestion::typo_from_name(prim_ty.name(), Res::PrimTy(*prim_ty))\n                 }))\n             }\n         } else {\n@@ -1692,7 +1698,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     return TypoCandidate::None;\n                 };\n                 if found == name {\n-                    TypoCandidate::Shadowed(sugg.res)\n+                    TypoCandidate::Shadowed(sugg.res, sugg.span)\n                 } else {\n                     TypoCandidate::Typo(sugg)\n                 }"}, {"sha": "7e565df76016856e5085e4d624fb3dc5be230efc", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -813,6 +813,7 @@ symbols! {\n         impl_lint_pass,\n         impl_macros,\n         impl_trait_in_bindings,\n+        impl_trait_in_fn_trait_return,\n         implied_by,\n         import,\n         import_name_type,"}, {"sha": "8cb88016b23ade5b5fb6bdfdf9dce3f128440576", "filename": "library/test/src/console.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -228,9 +228,9 @@ fn on_test_event(\n     out: &mut dyn OutputFormatter,\n ) -> io::Result<()> {\n     match (*event).clone() {\n-        TestEvent::TeFiltered(ref filtered_tests, shuffle_seed) => {\n-            st.total = filtered_tests.len();\n-            out.write_run_start(filtered_tests.len(), shuffle_seed)?;\n+        TestEvent::TeFiltered(filtered_tests, shuffle_seed) => {\n+            st.total = filtered_tests;\n+            out.write_run_start(filtered_tests, shuffle_seed)?;\n         }\n         TestEvent::TeFilteredOut(filtered_out) => {\n             st.filtered_out = filtered_out;"}, {"sha": "80281ebd2d4cdd946207f67bf741f10cb0d94e58", "filename": "library/test/src/event.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/library%2Ftest%2Fsrc%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/library%2Ftest%2Fsrc%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fevent.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -28,7 +28,7 @@ impl CompletedTest {\n \n #[derive(Debug, Clone)]\n pub enum TestEvent {\n-    TeFiltered(Vec<TestDesc>, Option<u64>),\n+    TeFiltered(usize, Option<u64>),\n     TeWait(TestDesc),\n     TeResult(CompletedTest),\n     TeTimeout(TestDesc),"}, {"sha": "56a8d92f55db2035387ef54e207dab05c313b862", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 62, "deletions": 25, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -219,6 +219,35 @@ pub fn assert_test_result<T: Termination>(result: T) -> Result<(), String> {\n     }\n }\n \n+struct FilteredTests {\n+    tests: Vec<(TestId, TestDescAndFn)>,\n+    benchs: Vec<(TestId, TestDescAndFn)>,\n+    next_id: usize,\n+}\n+\n+impl FilteredTests {\n+    fn add_bench(&mut self, desc: TestDesc, testfn: TestFn) {\n+        let test = TestDescAndFn { desc, testfn };\n+        self.benchs.push((TestId(self.next_id), test));\n+        self.next_id += 1;\n+    }\n+    fn add_test(&mut self, desc: TestDesc, testfn: TestFn) {\n+        let test = TestDescAndFn { desc, testfn };\n+        self.tests.push((TestId(self.next_id), test));\n+        self.next_id += 1;\n+    }\n+    fn add_bench_as_test(\n+        &mut self,\n+        desc: TestDesc,\n+        benchfn: impl Fn(&mut Bencher) -> Result<(), String> + Send + 'static,\n+    ) {\n+        let testfn = DynTestFn(Box::new(move || {\n+            bench::run_once(|b| __rust_begin_short_backtrace(|| benchfn(b)))\n+        }));\n+        self.add_test(desc, testfn);\n+    }\n+}\n+\n pub fn run_tests<F>(\n     opts: &TestOpts,\n     tests: Vec<TestDescAndFn>,\n@@ -247,45 +276,51 @@ where\n \n     let tests_len = tests.len();\n \n-    let mut filtered_tests = filter_tests(opts, tests);\n-    if !opts.bench_benchmarks {\n-        filtered_tests = convert_benchmarks_to_tests(filtered_tests);\n-    }\n+    let mut filtered = FilteredTests { tests: Vec::new(), benchs: Vec::new(), next_id: 0 };\n \n-    let filtered_tests = {\n-        let mut filtered_tests = filtered_tests;\n-        for test in filtered_tests.iter_mut() {\n-            test.desc.name = test.desc.name.with_padding(test.testfn.padding());\n-        }\n+    for test in filter_tests(opts, tests) {\n+        let mut desc = test.desc;\n+        desc.name = desc.name.with_padding(test.testfn.padding());\n \n-        filtered_tests\n-    };\n+        match test.testfn {\n+            DynBenchFn(benchfn) => {\n+                if opts.bench_benchmarks {\n+                    filtered.add_bench(desc, DynBenchFn(benchfn));\n+                } else {\n+                    filtered.add_bench_as_test(desc, benchfn);\n+                }\n+            }\n+            StaticBenchFn(benchfn) => {\n+                if opts.bench_benchmarks {\n+                    filtered.add_bench(desc, StaticBenchFn(benchfn));\n+                } else {\n+                    filtered.add_bench_as_test(desc, benchfn);\n+                }\n+            }\n+            testfn => {\n+                filtered.add_test(desc, testfn);\n+            }\n+        };\n+    }\n \n-    let filtered_out = tests_len - filtered_tests.len();\n+    let filtered_out = tests_len - filtered.tests.len();\n     let event = TestEvent::TeFilteredOut(filtered_out);\n     notify_about_test_event(event)?;\n \n-    let filtered_descs = filtered_tests.iter().map(|t| t.desc.clone()).collect();\n-\n     let shuffle_seed = get_shuffle_seed(opts);\n \n-    let event = TestEvent::TeFiltered(filtered_descs, shuffle_seed);\n+    let event = TestEvent::TeFiltered(filtered.tests.len(), shuffle_seed);\n     notify_about_test_event(event)?;\n \n-    let (mut filtered_tests, filtered_benchs): (Vec<_>, _) = filtered_tests\n-        .into_iter()\n-        .enumerate()\n-        .map(|(i, e)| (TestId(i), e))\n-        .partition(|(_, e)| matches!(e.testfn, StaticTestFn(_) | DynTestFn(_)));\n-\n     let concurrency = opts.test_threads.unwrap_or_else(get_concurrency);\n \n+    let mut remaining = filtered.tests;\n     if let Some(shuffle_seed) = shuffle_seed {\n-        shuffle_tests(shuffle_seed, &mut filtered_tests);\n+        shuffle_tests(shuffle_seed, &mut remaining);\n     }\n     // Store the tests in a VecDeque so we can efficiently remove the first element to run the\n     // tests in the order they were passed (unless shuffled).\n-    let mut remaining = VecDeque::from(filtered_tests);\n+    let mut remaining = VecDeque::from(remaining);\n     let mut pending = 0;\n \n     let (tx, rx) = channel::<CompletedTest>();\n@@ -402,7 +437,7 @@ where\n \n     if opts.bench_benchmarks {\n         // All benchmarks run at the end, in serial.\n-        for (id, b) in filtered_benchs {\n+        for (id, b) in filtered.benchs {\n             let event = TestEvent::TeWait(b.desc.clone());\n             notify_about_test_event(event)?;\n             run_test(opts, false, id, b, run_strategy, tx.clone(), Concurrent::No);\n@@ -432,7 +467,9 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n     }\n \n     // Skip tests that match any of the skip filters\n-    filtered.retain(|test| !opts.skip.iter().any(|sf| matches_filter(test, sf)));\n+    if !opts.skip.is_empty() {\n+        filtered.retain(|test| !opts.skip.iter().any(|sf| matches_filter(test, sf)));\n+    }\n \n     // Excludes #[should_panic] tests\n     if opts.exclude_should_panic {"}, {"sha": "dfa685785008366a30d395baedc1add28099b27b", "filename": "src/doc/rustdoc/book.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Fdoc%2Frustdoc%2Fbook.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Fdoc%2Frustdoc%2Fbook.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fbook.toml?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -6,5 +6,9 @@ title = \"The rustdoc book\"\n git-repository-url = \"https://github.com/rust-lang/rust/tree/master/src/doc/rustdoc\"\n \n [output.html.redirect]\n+\"/what-to-include.html\" = \"write-documentation/what-to-include.html\"\n \"/the-doc-attribute.html\" = \"write-documentation/the-doc-attribute.html\"\n+\"/linking-to-items-by-name.html\" = \"write-documentation/linking-to-items-by-name.html\"\n \"/documentation-tests.html\" = \"write-documentation/documentation-tests.html\"\n+\"/website-features.html\" = \"advanced-features.html#custom-search-engines\"\n+\"/passes.html\" = \"deprecated-features.html#passes\""}, {"sha": "118c6779cb1762dfbd1588f73024c324c2800271", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -869,7 +869,6 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \n .search-results {\n \tdisplay: none;\n-\tpadding-bottom: 2em;\n }\n \n .search-results.active {"}, {"sha": "0bd0dbbeb702ca6ef46be3e8a030606c4479da69", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -1893,7 +1893,7 @@ fn disambiguator_error(\n     diag_info.link_range = disambiguator_range;\n     report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, &diag_info, |diag, _sp| {\n         let msg = format!(\n-            \"see {}/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\",\n+            \"see {}/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\",\n             crate::DOC_RUST_LANG_ORG_CHANNEL\n         );\n         diag.note(&msg);"}, {"sha": "19e541736bd041d64ca1ceeb6a0e2f5760cb8ff7", "filename": "src/test/rustdoc-ui/intra-doc/unknown-disambiguator.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -4,7 +4,7 @@ error: unknown disambiguator `foo`\n LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n    |                 ^^^\n    |\n-   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n note: the lint level is defined here\n   --> $DIR/unknown-disambiguator.rs:2:9\n    |\n@@ -18,39 +18,39 @@ error: unknown disambiguator `bar`\n LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n    |                                   ^^^\n    |\n-   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator `foo`\n   --> $DIR/unknown-disambiguator.rs:10:34\n    |\n LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n    |                                  ^^^\n    |\n-   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator `foo`\n   --> $DIR/unknown-disambiguator.rs:10:48\n    |\n LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n    |                                                ^^^\n    |\n-   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator ``\n   --> $DIR/unknown-disambiguator.rs:7:31\n    |\n LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n    |                               ^\n    |\n-   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator ``\n   --> $DIR/unknown-disambiguator.rs:7:57\n    |\n LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n    |                                                         ^\n    |\n-   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: aborting due to 6 previous errors\n "}, {"sha": "0db8088f7eea468a26923ca358ac2ad3790ac74e", "filename": "src/test/ui/feature-gates/feature-gate-impl_trait_in_fn_trait_return.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -0,0 +1,6 @@\n+fn f() -> impl Fn() -> impl Sized { || () }\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+fn g() -> &'static dyn Fn() -> impl Sized { &|| () }\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+\n+fn main() {}"}, {"sha": "c485bc5c3ab908db36abe89bbd0ba364828cb2c5", "filename": "src/test/ui/feature-gates/feature-gate-impl_trait_in_fn_trait_return.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -0,0 +1,15 @@\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+  --> $DIR/feature-gate-impl_trait_in_fn_trait_return.rs:1:24\n+   |\n+LL | fn f() -> impl Fn() -> impl Sized { || () }\n+   |                        ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+  --> $DIR/feature-gate-impl_trait_in_fn_trait_return.rs:3:32\n+   |\n+LL | fn g() -> &'static dyn Fn() -> impl Sized { &|| () }\n+   |                                ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "b0aeded0ef75a0855bfe9c2382c668caf00863e3", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -0,0 +1,8 @@\n+#![feature(impl_trait_in_fn_trait_return)]\n+use std::fmt::Debug;\n+\n+fn a() -> impl Fn(&u8) -> impl Debug {\n+    |x| x //~ ERROR hidden type for `impl Debug` captures lifetime that does not appear in bounds\n+}\n+\n+fn main() {}"}, {"sha": "433b76b7afaa26fb50b015c9749ecd8891f22b2b", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -0,0 +1,11 @@\n+error[E0700]: hidden type for `impl Debug` captures lifetime that does not appear in bounds\n+  --> $DIR/impl-fn-hrtb-bounds-2.rs:5:9\n+   |\n+LL |     |x| x\n+   |     --- ^\n+   |     |\n+   |     hidden type `&u8` captures the anonymous lifetime #1 defined here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "527a4586fd7e0b7cd8c02e97812418b0c68381b4", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -0,0 +1,24 @@\n+#![feature(impl_trait_in_fn_trait_return)]\n+use std::fmt::Debug;\n+\n+fn a() -> impl Fn(&u8) -> (impl Debug + '_) {\n+    //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n+    |x| x\n+}\n+\n+fn b() -> impl for<'a> Fn(&'a u8) -> (impl Debug + 'a) {\n+    //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n+    |x| x\n+}\n+\n+fn c() -> impl for<'a> Fn(&'a u8) -> (impl Debug + '_) {\n+    //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n+    |x| x\n+}\n+\n+fn d() -> impl Fn() -> (impl Debug + '_) {\n+    //~^ ERROR missing lifetime specifier\n+    || ()\n+}\n+\n+fn main() {}"}, {"sha": "443ffeb55cdee1cad06c715a0f02e7646f043a55", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.stderr?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -0,0 +1,51 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-fn-hrtb-bounds.rs:19:38\n+   |\n+LL | fn d() -> impl Fn() -> (impl Debug + '_) {\n+   |                                      ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn d() -> impl Fn() -> (impl Debug + 'static) {\n+   |                                      ~~~~~~~\n+\n+error: higher kinded lifetime bounds on nested opaque types are not supported yet\n+  --> $DIR/impl-fn-hrtb-bounds.rs:4:41\n+   |\n+LL | fn a() -> impl Fn(&u8) -> (impl Debug + '_) {\n+   |                                         ^^\n+   |\n+note: lifetime declared here\n+  --> $DIR/impl-fn-hrtb-bounds.rs:4:19\n+   |\n+LL | fn a() -> impl Fn(&u8) -> (impl Debug + '_) {\n+   |                   ^\n+\n+error: higher kinded lifetime bounds on nested opaque types are not supported yet\n+  --> $DIR/impl-fn-hrtb-bounds.rs:9:52\n+   |\n+LL | fn b() -> impl for<'a> Fn(&'a u8) -> (impl Debug + 'a) {\n+   |                                                    ^^\n+   |\n+note: lifetime declared here\n+  --> $DIR/impl-fn-hrtb-bounds.rs:9:20\n+   |\n+LL | fn b() -> impl for<'a> Fn(&'a u8) -> (impl Debug + 'a) {\n+   |                    ^^\n+\n+error: higher kinded lifetime bounds on nested opaque types are not supported yet\n+  --> $DIR/impl-fn-hrtb-bounds.rs:14:52\n+   |\n+LL | fn c() -> impl for<'a> Fn(&'a u8) -> (impl Debug + '_) {\n+   |                                                    ^^\n+   |\n+note: lifetime declared here\n+  --> $DIR/impl-fn-hrtb-bounds.rs:14:20\n+   |\n+LL | fn c() -> impl for<'a> Fn(&'a u8) -> (impl Debug + '_) {\n+   |                    ^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "3e760710797eb032902b40bec831e53772db518d", "filename": "src/test/ui/impl-trait/impl-fn-parsing-ambiguities.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -0,0 +1,15 @@\n+#![feature(impl_trait_in_fn_trait_return)]\n+use std::fmt::Debug;\n+\n+fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n+    //~^ ERROR ambiguous `+` in a type\n+    //~^^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n+    |x| x\n+}\n+\n+fn b() -> impl Fn() -> impl Debug + Send {\n+    //~^ ERROR ambiguous `+` in a type\n+    || ()\n+}\n+\n+fn main() {}"}, {"sha": "cf6e5ef7bacebb626699df9b444eb0b4553f00da", "filename": "src/test/ui/impl-trait/impl-fn-parsing-ambiguities.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.stderr?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -0,0 +1,26 @@\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-fn-parsing-ambiguities.rs:4:27\n+   |\n+LL | fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n+   |                           ^^^^^^^^^^^^^^^ help: use parentheses to disambiguate: `(impl Debug + '_)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-fn-parsing-ambiguities.rs:10:24\n+   |\n+LL | fn b() -> impl Fn() -> impl Debug + Send {\n+   |                        ^^^^^^^^^^^^^^^^^ help: use parentheses to disambiguate: `(impl Debug + Send)`\n+\n+error: higher kinded lifetime bounds on nested opaque types are not supported yet\n+  --> $DIR/impl-fn-parsing-ambiguities.rs:4:40\n+   |\n+LL | fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n+   |                                        ^^\n+   |\n+note: lifetime declared here\n+  --> $DIR/impl-fn-parsing-ambiguities.rs:4:19\n+   |\n+LL | fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n+   |                   ^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "157786623754436de20e2a3ac33c15dc7cb719c1", "filename": "src/test/ui/impl-trait/impl-fn-predefined-lifetimes.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -0,0 +1,15 @@\n+#![feature(impl_trait_in_fn_trait_return)]\n+use std::fmt::Debug;\n+\n+fn a<'a>() -> impl Fn(&'a u8) -> (impl Debug + '_) {\n+    //~^ ERROR cannot resolve opaque type\n+\n+    |x| x\n+    //~^ ERROR concrete type differs from previous defining opaque type use\n+}\n+\n+fn _b<'a>() -> impl Fn(&'a u8) -> (impl Debug + 'a) {\n+    a()\n+}\n+\n+fn main() {}"}, {"sha": "7747319c1539b101f7b536afe3a90e09f8f3eec8", "filename": "src/test/ui/impl-trait/impl-fn-predefined-lifetimes.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.stderr?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -0,0 +1,24 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/impl-fn-predefined-lifetimes.rs:7:9\n+   |\n+LL |     |x| x\n+   |         ^ expected `impl Debug + '_`, got `&u8`\n+   |\n+note: previous use here\n+  --> $DIR/impl-fn-predefined-lifetimes.rs:7:5\n+   |\n+LL |     |x| x\n+   |     ^^^^^\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/impl-fn-predefined-lifetimes.rs:4:35\n+   |\n+LL | fn a<'a>() -> impl Fn(&'a u8) -> (impl Debug + '_) {\n+   |                                   ^^^^^^^^^^^^^^^ recursive opaque type\n+...\n+LL |     |x| x\n+   |     ----- returning here with type `[closure@$DIR/impl-fn-predefined-lifetimes.rs:7:5: 7:8]`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "71a8f9c77960d1562f221d7c20d6e7bc5775d014", "filename": "src/test/ui/impl-trait/impl_fn_associativity.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_fn_associativity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_fn_associativity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_fn_associativity.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -0,0 +1,26 @@\n+// run-pass\n+#![feature(impl_trait_in_fn_trait_return)]\n+use std::fmt::Debug;\n+\n+fn f_debug() -> impl Fn() -> impl Debug {\n+    || ()\n+}\n+\n+fn ff_debug() -> impl Fn() -> impl Fn() -> impl Debug {\n+    || f_debug()\n+}\n+\n+fn multi() -> impl Fn() -> (impl Debug + Send) {\n+    || ()\n+}\n+\n+fn main() {\n+    // Check that `ff_debug` is `() -> (() -> Debug)` and not `(() -> ()) -> Debug`\n+    let debug = ff_debug()()();\n+    assert_eq!(format!(\"{:?}\", debug), \"()\");\n+\n+    let x = multi()();\n+    assert_eq!(format!(\"{:?}\", x), \"()\");\n+    fn assert_send(_: &impl Send) {}\n+    assert_send(&x);\n+}"}, {"sha": "e95fab3b6505780275a9537eb8adec29bf3684c1", "filename": "src/test/ui/impl-trait/nested_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -1,3 +1,4 @@\n+#![feature(impl_trait_in_fn_trait_return)]\n use std::fmt::Debug;\n \n fn fine(x: impl Into<u32>) -> impl Into<u32> { x }\n@@ -25,8 +26,7 @@ fn allowed_in_assoc_type() -> impl Iterator<Item=impl Fn()> {\n }\n \n fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n-//~^ `impl Trait` only allowed in function and inherent method return types\n-    || 5\n+    || 5u8\n }\n \n fn main() {}"}, {"sha": "9a8f5a3406813368670b17c76c7827f61fae7ca7", "filename": "src/test/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -1,5 +1,5 @@\n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:5:56\n+  --> $DIR/nested_impl_trait.rs:6:56\n    |\n LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                              ----------^^^^^^^^^^-\n@@ -8,7 +8,7 @@ LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                              outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:9:42\n+  --> $DIR/nested_impl_trait.rs:10:42\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ----------^^^^^^^^^^-\n@@ -17,7 +17,7 @@ LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:13:37\n+  --> $DIR/nested_impl_trait.rs:14:37\n    |\n LL | fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n    |                           ----------^^^^^^^^^^-\n@@ -26,7 +26,7 @@ LL | fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n    |                           outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:18:44\n+  --> $DIR/nested_impl_trait.rs:19:44\n    |\n LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  ----------^^^^^^^^^^-\n@@ -35,19 +35,13 @@ LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  outer `impl Trait`\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n-  --> $DIR/nested_impl_trait.rs:9:32\n+  --> $DIR/nested_impl_trait.rs:10:32\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/nested_impl_trait.rs:27:42\n-   |\n-LL | fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n-   |                                          ^^^^^^^^^^^^^^\n-\n error[E0277]: the trait bound `impl Debug: From<impl Into<u32>>` is not satisfied\n-  --> $DIR/nested_impl_trait.rs:5:46\n+  --> $DIR/nested_impl_trait.rs:6:46\n    |\n LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                              ^^^^^^^^^^^^^^^^^^^^^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`\n@@ -56,15 +50,15 @@ LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    = note: required for `impl Into<u32>` to implement `Into<impl Debug>`\n \n error[E0277]: the trait bound `impl Debug: From<impl Into<u32>>` is not satisfied\n-  --> $DIR/nested_impl_trait.rs:18:34\n+  --> $DIR/nested_impl_trait.rs:19:34\n    |\n LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`\n    |\n    = help: the trait `Into<U>` is implemented for `T`\n    = note: required for `impl Into<u32>` to implement `Into<impl Debug>`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0277, E0562, E0666.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "ff63b04c2680df36779f65eec709dfbdd3a9f726", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -1,5 +1,6 @@\n //! A simple test for testing many permutations of allowedness of\n //! impl Trait\n+#![feature(impl_trait_in_fn_trait_return)]\n use std::fmt::Debug;\n \n // Allowed\n@@ -39,9 +40,8 @@ fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n-// Disallowed\n+// Allowed\n fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n@@ -57,9 +57,8 @@ fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n //~| ERROR nested `impl Trait` is not allowed\n \n-// Disallowed\n+// Allowed\n fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }"}, {"sha": "3ad0a9f9d5c8b7a3274ce30a4ba7f4edcb648f07", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 43, "deletions": 55, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -17,7 +17,7 @@ LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic\n    |                                                 outer `impl Trait`\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:119:16\n+  --> $DIR/where-allowed.rs:118:16\n    |\n LL |     type Out = impl Debug;\n    |                ^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Out = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:154:23\n+  --> $DIR/where-allowed.rs:153:23\n    |\n LL | type InTypeAlias<R> = impl Debug;\n    |                       ^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL | type InTypeAlias<R> = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:157:39\n+  --> $DIR/where-allowed.rs:156:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n@@ -44,53 +44,47 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n-  --> $DIR/where-allowed.rs:15:40\n+  --> $DIR/where-allowed.rs:16:40\n    |\n LL | fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n-  --> $DIR/where-allowed.rs:19:42\n+  --> $DIR/where-allowed.rs:20:42\n    |\n LL | fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n    |                                          ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n-  --> $DIR/where-allowed.rs:23:38\n+  --> $DIR/where-allowed.rs:24:38\n    |\n LL | fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n-  --> $DIR/where-allowed.rs:27:40\n+  --> $DIR/where-allowed.rs:28:40\n    |\n LL | fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:31:49\n+  --> $DIR/where-allowed.rs:32:49\n    |\n LL | fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n    |                                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:35:51\n+  --> $DIR/where-allowed.rs:36:51\n    |\n LL | fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:39:55\n+  --> $DIR/where-allowed.rs:40:55\n    |\n LL | fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n    |                                                       ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:43:57\n-   |\n-LL | fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n-   |                                                         ^^^^^^^^^^\n-\n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n   --> $DIR/where-allowed.rs:47:51\n    |\n@@ -109,56 +103,50 @@ error[E0562]: `impl Trait` only allowed in function and inherent method return t\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:61:59\n-   |\n-LL | fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n-   |                                                           ^^^^^^^^^^\n-\n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:65:38\n+  --> $DIR/where-allowed.rs:64:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:69:40\n+  --> $DIR/where-allowed.rs:68:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:82:32\n+  --> $DIR/where-allowed.rs:81:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in path\n-  --> $DIR/where-allowed.rs:86:41\n+  --> $DIR/where-allowed.rs:85:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:90:27\n+  --> $DIR/where-allowed.rs:89:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:95:25\n+  --> $DIR/where-allowed.rs:94:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:97:20\n+  --> $DIR/where-allowed.rs:96:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n-  --> $DIR/where-allowed.rs:108:23\n+  --> $DIR/where-allowed.rs:107:23\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n@@ -167,7 +155,7 @@ LL |     fn in_return() -> impl Debug;\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n-  --> $DIR/where-allowed.rs:125:34\n+  --> $DIR/where-allowed.rs:124:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n@@ -176,127 +164,127 @@ LL |     fn in_trait_impl_return() -> impl Debug { () }\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` param\n-  --> $DIR/where-allowed.rs:138:33\n+  --> $DIR/where-allowed.rs:137:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` return\n-  --> $DIR/where-allowed.rs:141:31\n+  --> $DIR/where-allowed.rs:140:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n-  --> $DIR/where-allowed.rs:157:39\n+  --> $DIR/where-allowed.rs:156:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait\n-  --> $DIR/where-allowed.rs:162:16\n+  --> $DIR/where-allowed.rs:161:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:167:24\n+  --> $DIR/where-allowed.rs:166:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:172:6\n+  --> $DIR/where-allowed.rs:171:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:178:24\n+  --> $DIR/where-allowed.rs:177:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:184:11\n+  --> $DIR/where-allowed.rs:183:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:191:15\n+  --> $DIR/where-allowed.rs:190:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n-  --> $DIR/where-allowed.rs:198:24\n+  --> $DIR/where-allowed.rs:197:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:205:17\n+  --> $DIR/where-allowed.rs:204:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:212:22\n+  --> $DIR/where-allowed.rs:211:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:218:40\n+  --> $DIR/where-allowed.rs:217:40\n    |\n LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:222:36\n+  --> $DIR/where-allowed.rs:221:36\n    |\n LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n    |                                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:226:38\n+  --> $DIR/where-allowed.rs:225:38\n    |\n LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:230:41\n+  --> $DIR/where-allowed.rs:229:41\n    |\n LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:234:11\n+  --> $DIR/where-allowed.rs:233:11\n    |\n LL | impl <T = impl Debug> T {}\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:241:40\n+  --> $DIR/where-allowed.rs:240:40\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n-  --> $DIR/where-allowed.rs:247:29\n+  --> $DIR/where-allowed.rs:246:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in closure return\n-  --> $DIR/where-allowed.rs:249:46\n+  --> $DIR/where-allowed.rs:248:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/where-allowed.rs:234:7\n+  --> $DIR/where-allowed.rs:233:7\n    |\n LL | impl <T = impl Debug> T {}\n    |       ^^^^^^^^^^^^^^\n@@ -306,7 +294,7 @@ LL | impl <T = impl Debug> T {}\n    = note: `#[deny(invalid_type_param_default)]` on by default\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/where-allowed.rs:241:36\n+  --> $DIR/where-allowed.rs:240:36\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                    ^^^^^^^^^^^^^^\n@@ -315,14 +303,14 @@ LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n \n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/where-allowed.rs:234:23\n+  --> $DIR/where-allowed.rs:233:23\n    |\n LL | impl <T = impl Debug> T {}\n    |                       ^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n \n-error: aborting due to 49 previous errors\n+error: aborting due to 47 previous errors\n \n Some errors have detailed explanations: E0118, E0562, E0658, E0666.\n For more information about an error, try `rustc --explain E0118`."}, {"sha": "f0eaa1a5c64c475d79f63a5d460e9c8c7956c1cb", "filename": "src/test/ui/lexical-scopes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Flexical-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Flexical-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexical-scopes.stderr?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -2,7 +2,7 @@ error[E0574]: expected struct, variant or union type, found type parameter `T`\n   --> $DIR/lexical-scopes.rs:3:13\n    |\n LL | struct T { i: i32 }\n-   | ------------------- you might have meant to refer to this struct\n+   |        - you might have meant to refer to this struct\n LL | fn f<T>() {\n    |      - found this type parameter\n LL |     let t = T { i: 0 };"}, {"sha": "5790e425c0a2352b48f31e24d2d6e139bff16aa0", "filename": "src/test/ui/resolve/point-at-type-parameter-shadowing-another-type.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -1,16 +1,14 @@\n error[E0574]: expected struct, variant or union type, found type parameter `Baz`\n   --> $DIR/point-at-type-parameter-shadowing-another-type.rs:16:13\n    |\n-LL | / struct Baz {\n-LL | |     num: usize,\n-LL | | }\n-   | |_- you might have meant to refer to this struct\n-LL |\n-LL |   impl<Baz> Foo<Baz> for Bar {\n-   |        --- found this type parameter\n+LL | struct Baz {\n+   |        --- you might have meant to refer to this struct\n ...\n-LL |               Baz { num } => num,\n-   |               ^^^ not a struct, variant or union type\n+LL | impl<Baz> Foo<Baz> for Bar {\n+   |      --- found this type parameter\n+...\n+LL |             Baz { num } => num,\n+   |             ^^^ not a struct, variant or union type\n \n error: aborting due to previous error\n "}, {"sha": "057d40ac0cb92028f024f175166d33e7257f4b12", "filename": "src/test/ui/span/issue-35987.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96c330af5e3baebe7a80999744e2e082b279d0a/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr?ref=e96c330af5e3baebe7a80999744e2e082b279d0a", "patch": "@@ -1,6 +1,9 @@\n error[E0404]: expected trait, found type parameter `Add`\n   --> $DIR/issue-35987.rs:5:21\n    |\n+LL | use std::ops::Add;\n+   |               --- you might have meant to refer to this trait\n+LL |\n LL | impl<T: Clone, Add> Add for Foo<T> {\n    |                ---  ^^^ not a trait\n    |                |"}]}