{"sha": "a9fcb524ffbcccc0c0f56e9ecde431961a4619a9", "node_id": "C_kwDOAAsO6NoAKGE5ZmNiNTI0ZmZiY2NjYzBjMGY1NmU5ZWNkZTQzMTk2MWE0NjE5YTk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-17T03:00:19Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-01T18:21:42Z"}, "message": "Impl ConstParamTy for tuples, make PartialStructuralEq a supertrait too", "tree": {"sha": "e7e2fd97d2dc19fbd6d3fe3b97527739bb796b73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7e2fd97d2dc19fbd6d3fe3b97527739bb796b73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9", "html_url": "https://github.com/rust-lang/rust/commit/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ab10bacdf6ea55c594252062f80b7e931d93d7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab10bacdf6ea55c594252062f80b7e931d93d7c", "html_url": "https://github.com/rust-lang/rust/commit/8ab10bacdf6ea55c594252062f80b7e931d93d7c"}], "stats": {"total": 75, "additions": 68, "deletions": 7}, "files": [{"sha": "e9cfd63e2eddc2982231caaa5eac1c7355ecff38", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=a9fcb524ffbcccc0c0f56e9ecde431961a4619a9", "patch": "@@ -100,7 +100,8 @@ pub fn type_allowed_to_implement_const_param_ty<'tcx>(\n         | ty::Str\n         | ty::Array(..)\n         | ty::Slice(_)\n-        | ty::Ref(.., hir::Mutability::Not) => return Ok(()),\n+        | ty::Ref(.., hir::Mutability::Not)\n+        | ty::Tuple(_) => return Ok(()),\n \n         &ty::Adt(adt, substs) => (adt, substs),\n "}, {"sha": "9a541ccaeacbcd615566d0a60d46182792910ba9", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=a9fcb524ffbcccc0c0f56e9ecde431961a4619a9", "patch": "@@ -205,6 +205,20 @@ pub trait StructuralPartialEq {\n     // Empty.\n }\n \n+marker_impls! {\n+    #[unstable(feature = \"structural_match\", issue = \"31434\")]\n+    StructuralPartialEq for\n+        usize, u8, u16, u32, u64, u128,\n+        isize, i8, i16, i32, i64, i128,\n+        bool,\n+        char,\n+        str /* Technically requires `[u8]: StructuralEq` */,\n+        (),\n+        {T, const N: usize} [T; N],\n+        {T} [T],\n+        {T: ?Sized} &T,\n+}\n+\n /// Required trait for constants used in pattern matches.\n ///\n /// Any type that derives `Eq` automatically implements this trait, *regardless*\n@@ -267,6 +281,7 @@ marker_impls! {\n         bool,\n         char,\n         str /* Technically requires `[u8]: StructuralEq` */,\n+        (),\n         {T, const N: usize} [T; N],\n         {T} [T],\n         {T: ?Sized} &T,\n@@ -974,7 +989,8 @@ pub trait PointerLike {}\n #[lang = \"const_param_ty\"]\n #[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n #[rustc_on_unimplemented(message = \"`{Self}` can't be used as a const parameter type\")]\n-pub trait ConstParamTy: StructuralEq {}\n+#[allow(multiple_supertrait_upcastable)]\n+pub trait ConstParamTy: StructuralEq + StructuralPartialEq {}\n \n /// Derive macro generating an impl of the trait `ConstParamTy`.\n #[rustc_builtin_macro]\n@@ -983,8 +999,7 @@ pub macro ConstParamTy($item:item) {\n     /* compiler built-in */\n }\n \n-// FIXME(generic_const_parameter_types): handle `ty::FnDef`/`ty::Closure`\n-// FIXME(generic_const_parameter_types): handle `ty::Tuple`\n+// FIXME(adt_const_params): handle `ty::FnDef`/`ty::Closure`\n marker_impls! {\n     #[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n     ConstParamTy for\n@@ -998,6 +1013,11 @@ marker_impls! {\n         {T: ?Sized + ConstParamTy} &T,\n }\n \n+// FIXME(adt_const_params): Add to marker_impls call above once not in bootstrap\n+#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n+#[cfg(not(bootstrap))]\n+impl ConstParamTy for () {}\n+\n /// A common trait implemented by all function pointers.\n #[unstable(\n     feature = \"fn_ptr_trait\","}, {"sha": "ac8d04a82860e2e09262855698e5384fb00ad1a1", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=a9fcb524ffbcccc0c0f56e9ecde431961a4619a9", "patch": "@@ -1,6 +1,9 @@\n // See src/libstd/primitive_docs.rs for documentation.\n \n use crate::cmp::Ordering::{self, *};\n+#[cfg(not(bootstrap))]\n+use crate::marker::ConstParamTy;\n+use crate::marker::{StructuralEq, StructuralPartialEq};\n \n // Recursive macro for implementing n-ary tuple functions and operations\n //\n@@ -45,6 +48,28 @@ macro_rules! tuple_impls {\n             {}\n         }\n \n+        maybe_tuple_doc! {\n+            $($T)+ @\n+            #[unstable(feature = \"structural_match\", issue = \"31434\")]\n+            #[cfg(not(bootstrap))]\n+            impl<$($T: ConstParamTy),+> ConstParamTy for ($($T,)+)\n+            {}\n+        }\n+\n+        maybe_tuple_doc! {\n+            $($T)+ @\n+            #[unstable(feature = \"structural_match\", issue = \"31434\")]\n+            impl<$($T),+> StructuralPartialEq for ($($T,)+)\n+            {}\n+        }\n+\n+        maybe_tuple_doc! {\n+            $($T)+ @\n+            #[unstable(feature = \"structural_match\", issue = \"31434\")]\n+            impl<$($T),+> StructuralEq for ($($T,)+)\n+            {}\n+        }\n+\n         maybe_tuple_doc! {\n             $($T)+ @\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "100ab332a40d87cd0a377b4536ae816db6f42739", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_good.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs?ref=a9fcb524ffbcccc0c0f56e9ecde431961a4619a9", "patch": "@@ -49,5 +49,7 @@ fn main() {\n     check::<D<u8>>();\n     check::<D<[&[bool]; 8]>>();\n \n-    // FIXME: test tuples\n+    check::<()>();\n+    check::<(i32,)>();\n+    check::<(D<u8>, D<i32>)>();\n }"}, {"sha": "08f7c5cb5423ea4c66bec0c9a33a38edc618d0a5", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_no_structural_eq.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.rs?ref=a9fcb524ffbcccc0c0f56e9ecde431961a4619a9", "patch": "@@ -9,9 +9,11 @@ struct CantParam(ImplementsConstParamTy);\n \n impl std::marker::ConstParamTy for CantParam {}\n //~^ error: the type `CantParam` does not `#[derive(Eq)]`\n+//~| error: the type `CantParam` does not `#[derive(PartialEq)]`\n \n #[derive(std::marker::ConstParamTy)]\n //~^ error: the type `CantParamDerive` does not `#[derive(Eq)]`\n+//~| error: the type `CantParamDerive` does not `#[derive(PartialEq)]`\n struct CantParamDerive(ImplementsConstParamTy);\n \n fn check<T: std::marker::ConstParamTy>() {}"}, {"sha": "c04e96c569b4133bea673f2fc8d9411b42b4fb01", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_union.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.rs?ref=a9fcb524ffbcccc0c0f56e9ecde431961a4619a9", "patch": "@@ -14,6 +14,7 @@ impl Eq for Union {}\n impl std::marker::StructuralEq for Union {}\n \n impl std::marker::ConstParamTy for Union {}\n+//~^ ERROR the type `Union` does not `#[derive(PartialEq)]`\n \n #[derive(std::marker::ConstParamTy)]\n //~^ ERROR this trait cannot be derived for unions"}, {"sha": "985b933c40c7937ca3768b62f9256fd19ee19a58", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_union.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fcb524ffbcccc0c0f56e9ecde431961a4619a9/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.stderr?ref=a9fcb524ffbcccc0c0f56e9ecde431961a4619a9", "patch": "@@ -1,8 +1,18 @@\n error: this trait cannot be derived for unions\n-  --> $DIR/const_param_ty_impl_union.rs:18:10\n+  --> $DIR/const_param_ty_impl_union.rs:19:10\n    |\n LL | #[derive(std::marker::ConstParamTy)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0277]: the type `Union` does not `#[derive(PartialEq)]`\n+  --> $DIR/const_param_ty_impl_union.rs:16:36\n+   |\n+LL | impl std::marker::ConstParamTy for Union {}\n+   |                                    ^^^^^ the trait `StructuralPartialEq` is not implemented for `Union`\n+   |\n+note: required by a bound in `ConstParamTy`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}]}