{"sha": "4e528521467d014cc554976a9ec4e25659d8ead6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNTI4NTIxNDY3ZDAxNGNjNTU0OTc2YTllYzRlMjU2NTlkOGVhZDY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-21T11:04:50Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-21T11:04:50Z"}, "message": "create a lint for each of the messages", "tree": {"sha": "60d487280a2453defac972c78c0fc160df1fbec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60d487280a2453defac972c78c0fc160df1fbec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e528521467d014cc554976a9ec4e25659d8ead6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXaR9SAAoJEFbW7qD8Z6xGsNUP/ixyu+WGEzJxL53Qv9tjWhiw\nutwYUkvQR0ayKW3A4zszD4Wn+RH6/TLqxWLqBsMRSx+4xzGgLd7LMxS4wbLcF7Qn\n/nNEaNNKjIuRfP3QmplqDI0N08E1eYqF+HQjw/1BbQlMxu6m3qT7OB22OWERPzvz\nyGZPFehOct+mV8MtK2SihxSNE2E5PVsNld1TL8uBSXH/hN1xAXdrK9+WDZOQdeZ5\npzCUCPIdC65BTyuw/mViarry1T03NKTy007Z2KFa7RGE5sD1xndKUR0ROHhRjQys\nzWS7JX3dVrAIC1rk6XwJ/bjOadZVhSzDSk2tuSJLypwpxg3ykY9WIIjO65AZvnIh\ndGr38gnrsvnzJ/+ZXcKY65BloLFlQm2p1b0oVg1j692RyJzYLOXJttuZwUif70eK\nQFvklF+8y+eSaF2qu0TTER+9v1Hvp9sK97Ft8TiMaWfH1Yt0VHShCnRSCL2vaEfq\nZ7+rVYIGBqDq8vXfOBu8RgGN+0ra2cs255ZXoyhUpx27yozCbRbS6FQgbrbnYKvV\ne4HYtkGqEyXxCLV/3ioKRPDc1bB34mFBlXID/pIhmInEK6F4rAY0lHPhpB6vWBIn\nWOAnnAeeZY++6FFwTksTuqWRkGWvwpHnkE34KT5b7yXBSiptCPxOX4DDSgUDzOA6\nLwqoH0OHdHBUwuENLC5n\n=snOp\n-----END PGP SIGNATURE-----", "payload": "tree 60d487280a2453defac972c78c0fc160df1fbec5\nparent 69c796e118b1c3b742f30c31fac6bac20ac3f772\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466507090 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466507090 +0200\n\ncreate a lint for each of the messages"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e528521467d014cc554976a9ec4e25659d8ead6", "html_url": "https://github.com/rust-lang/rust/commit/4e528521467d014cc554976a9ec4e25659d8ead6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e528521467d014cc554976a9ec4e25659d8ead6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c796e118b1c3b742f30c31fac6bac20ac3f772", "url": "https://api.github.com/repos/rust-lang/rust/commits/69c796e118b1c3b742f30c31fac6bac20ac3f772", "html_url": "https://github.com/rust-lang/rust/commit/69c796e118b1c3b742f30c31fac6bac20ac3f772"}], "stats": {"total": 47, "additions": 43, "deletions": 4}, "files": [{"sha": "3ecbe6251c4bd81de9affffe5e99ddfbef8f3c45", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4e528521467d014cc554976a9ec4e25659d8ead6/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e528521467d014cc554976a9ec4e25659d8ead6/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=4e528521467d014cc554976a9ec4e25659d8ead6", "patch": "@@ -159,6 +159,42 @@ declare_lint! {\n     \"using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\"\n }\n \n+/// **What it does:** This lint `Warn`s on `_.filter(_).map(_)`.\n+///\n+/// **Why is this bad?** Readability, this can be written more concisely as `_.filter_map(_)`.\n+///\n+/// **Known problems:** Often requires a condition + Option creation in `filter_map`\n+///\n+/// **Example:** `iter.filter(|x| x == 0).map(|x| x * 2)`\n+declare_lint! {\n+    pub FILTER_MAP, Allow,\n+    \"using `filter(_).map(_)`, which is more succinctly expressed as `.filter_map(_)`\"\n+}\n+\n+/// **What it does:** This lint `Warn`s on `_.filter(_).flat_map(_)`.\n+///\n+/// **Why is this bad?** Readability, this just needs the `flat_map` to return an empty iterator, if the value should be filtered.\n+///\n+/// **Known problems:** Often requires a condition + Iterator creation in `flat_map`\n+///\n+/// **Example:** `iter.filter(|x| x == 0).flat_map(|x| x.bits())`\n+declare_lint! {\n+    pub FILTER_FLAT_MAP, Allow,\n+    \"using `filter(_).flat_map(_)`, which can be rewritten using just the flat_map\"\n+}\n+\n+/// **What it does:** This lint `Warn`s on `_.filter_map(_).flat_map(_)`.\n+///\n+/// **Why is this bad?** Readability, this just needs the `flat_map` to return an empty iterator, if the value should be filtered.\n+///\n+/// **Known problems:** Often requires a condition + Iterator creation in `flat_map`\n+///\n+/// **Example:** `iter.filter_map(|x| x.process()).flat_map(|x| x.bits())`\n+declare_lint! {\n+    pub FILTER_MAP_FLAT_MAP, Allow,\n+    \"using `filter_map(_).flat_map(_)`, which can be rewritten using just the flat_map\"\n+}\n+\n /// **What it does:** This lint `Warn`s on an iterator search (such as `find()`, `position()`, or\n /// `rposition()`) followed by a call to `is_some()`.\n ///\n@@ -356,6 +392,9 @@ impl LintPass for Pass {\n                     SINGLE_CHAR_PATTERN,\n                     SEARCH_IS_SOME,\n                     TEMPORARY_CSTRING_AS_PTR,\n+                    FILTER_MAP,\n+                    FILTER_FLAT_MAP,\n+                    FILTER_MAP_FLAT_MAP,\n                     ITER_NTH)\n     }\n }\n@@ -847,7 +886,7 @@ fn lint_filter_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &MethodArgs\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter(p).map(q)` on an Iterator. This is more succinctly expressed by calling `.filter_map(..)` \\\n                    instead.\";\n-        span_lint(cx, FILTER_NEXT, expr.span, msg);\n+        span_lint(cx, FILTER_MAP, expr.span, msg);\n     }\n }\n \n@@ -858,7 +897,7 @@ fn lint_filter_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &Metho\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter(p).flat_map(q)` on an Iterator. This is more succinctly expressed by calling `.flat_map(..)` \\\n                    and filtering by returning an empty Iterator.\";\n-        span_lint(cx, FILTER_NEXT, expr.span, msg);\n+        span_lint(cx, FILTER_FLAT_MAP, expr.span, msg);\n     }\n }\n \n@@ -867,9 +906,9 @@ fn lint_filter_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &Metho\n fn lint_filter_map_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &MethodArgs, _map_args: &MethodArgs) {\n     // lint if caller of `.filter_map().flat_map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(p).flat_map(q)` on an Iterator. This is more succinctly expressed by calling `.flat_map(..)` \\\n+        let msg = \"called `filter_map(p).flat_map(q)` on an Iterator. This is more succinctly expressed by calling `.flat_map(..)` \\\n                    and filtering by returning an empty Iterator.\";\n-        span_lint(cx, FILTER_NEXT, expr.span, msg);\n+        span_lint(cx, FILTER_MAP_FLAT_MAP, expr.span, msg);\n     }\n }\n "}]}