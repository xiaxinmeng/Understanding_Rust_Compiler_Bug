{"sha": "58ac81a60fe11868b0748a406d8e0b97efa4e8c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YWM4MWE2MGZlMTE4NjhiMDc0OGE0MDZkOGUwYjk3ZWZhNGU4YzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-30T09:31:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-05T10:15:11Z"}, "message": "add unknown token", "tree": {"sha": "df4e02648aad8170cb3758067792b9bdb7f1489a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df4e02648aad8170cb3758067792b9bdb7f1489a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58ac81a60fe11868b0748a406d8e0b97efa4e8c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58ac81a60fe11868b0748a406d8e0b97efa4e8c5", "html_url": "https://github.com/rust-lang/rust/commit/58ac81a60fe11868b0748a406d8e0b97efa4e8c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58ac81a60fe11868b0748a406d8e0b97efa4e8c5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5e35b128efeed4bfdb4b1ee9d0697389ec9f164", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e35b128efeed4bfdb4b1ee9d0697389ec9f164", "html_url": "https://github.com/rust-lang/rust/commit/b5e35b128efeed4bfdb4b1ee9d0697389ec9f164"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "5cc8324b316065064a413867c538c8abe2ee6d46", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58ac81a60fe11868b0748a406d8e0b97efa4e8c5/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ac81a60fe11868b0748a406d8e0b97efa4e8c5/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=58ac81a60fe11868b0748a406d8e0b97efa4e8c5", "patch": "@@ -363,7 +363,8 @@ impl<'a> HashStable<StableHashingContext<'a>> for token::TokenKind {\n             }\n \n             token::DocComment(val) |\n-            token::Shebang(val) => val.hash_stable(hcx, hasher),\n+            token::Shebang(val) |\n+            token::Unknown(val) => val.hash_stable(hcx, hasher),\n         }\n     }\n }"}, {"sha": "92d85ef9cacc59d3f106a5f4723e8bad7b20c197", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58ac81a60fe11868b0748a406d8e0b97efa4e8c5/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ac81a60fe11868b0748a406d8e0b97efa4e8c5/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=58ac81a60fe11868b0748a406d8e0b97efa4e8c5", "patch": "@@ -237,7 +237,7 @@ impl<'a> Classifier<'a> {\n                 return Ok(());\n             },\n \n-            token::Whitespace => Class::None,\n+            token::Whitespace | token::Unknown(..) => Class::None,\n             token::Comment => Class::Comment,\n             token::DocComment(..) => Class::DocComment,\n "}, {"sha": "36621ce7775107d77a76790c2a1d28f4099c8b9b", "filename": "src/libsyntax/ext/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58ac81a60fe11868b0748a406d8e0b97efa4e8c5/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ac81a60fe11868b0748a406d8e0b97efa4e8c5/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs?ref=58ac81a60fe11868b0748a406d8e0b97efa4e8c5", "patch": "@@ -184,7 +184,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n             }\n \n             OpenDelim(..) | CloseDelim(..) => unreachable!(),\n-            Whitespace | Comment | Shebang(..) | Eof => unreachable!(),\n+            Whitespace | Comment | Shebang(..) | Unknown(..) | Eof => unreachable!(),\n         }\n     }\n }"}, {"sha": "e86d4c7fde683f39e6ba394e2f70a2deeb43db0b", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58ac81a60fe11868b0748a406d8e0b97efa4e8c5/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ac81a60fe11868b0748a406d8e0b97efa4e8c5/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=58ac81a60fe11868b0748a406d8e0b97efa4e8c5", "patch": "@@ -354,7 +354,7 @@ impl<'a> StringReader<'a> {\n                 // tokens like `<<` from `rustc_lexer`, and then add fancier error recovery to it,\n                 // as there will be less overall work to do this way.\n                 let token = unicode_chars::check_for_substitution(self, start, c, &mut err)\n-                    .unwrap_or(token::Whitespace);\n+                    .unwrap_or_else(|| token::Unknown(self.symbol_from(start)));\n                 err.emit();\n                 token\n             }"}, {"sha": "37e67a2729e6d36ac904727bb5ea7f6b4724689e", "filename": "src/libsyntax/parse/lexer/tokentrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58ac81a60fe11868b0748a406d8e0b97efa4e8c5/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ac81a60fe11868b0748a406d8e0b97efa4e8c5/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs?ref=58ac81a60fe11868b0748a406d8e0b97efa4e8c5", "patch": "@@ -217,7 +217,7 @@ impl<'a> TokenTreesReader<'a> {\n         loop {\n             let token = self.string_reader.next_token();\n             match token.kind {\n-                token::Whitespace | token::Comment | token::Shebang(_) => {\n+                token::Whitespace | token::Comment | token::Shebang(_) | token::Unknown(_) => {\n                     self.joint_to_prev = NonJoint;\n                 }\n                 _ => {"}, {"sha": "be800b4de66aff2153ec99c7fb06ef92473ceaf2", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58ac81a60fe11868b0748a406d8e0b97efa4e8c5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ac81a60fe11868b0748a406d8e0b97efa4e8c5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=58ac81a60fe11868b0748a406d8e0b97efa4e8c5", "patch": "@@ -255,6 +255,8 @@ pub enum TokenKind {\n     /// A comment.\n     Comment,\n     Shebang(ast::Name),\n+    /// A completely invalid token which should be skipped.\n+    Unknown(ast::Name),\n \n     Eof,\n }\n@@ -603,7 +605,7 @@ impl Token {\n             DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar |\n             Question | OpenDelim(..) | CloseDelim(..) |\n             Literal(..) | Ident(..) | Lifetime(..) | Interpolated(..) | DocComment(..) |\n-            Whitespace | Comment | Shebang(..) | Eof => return None,\n+            Whitespace | Comment | Shebang(..) | Unknown(..) | Eof => return None,\n         };\n \n         Some(Token::new(kind, self.span.to(joint.span)))"}, {"sha": "378ba1e4107a49103bc0a93e1cc59dd31114f874", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58ac81a60fe11868b0748a406d8e0b97efa4e8c5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ac81a60fe11868b0748a406d8e0b97efa4e8c5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=58ac81a60fe11868b0748a406d8e0b97efa4e8c5", "patch": "@@ -288,6 +288,7 @@ fn token_kind_to_string_ext(tok: &TokenKind, convert_dollar_crate: Option<Span>)\n         token::Whitespace           => \" \".to_string(),\n         token::Comment              => \"/* */\".to_string(),\n         token::Shebang(s)           => format!(\"/* shebang: {}*/\", s),\n+        token::Unknown(s)           => s.to_string(),\n \n         token::Interpolated(ref nt) => nonterminal_to_string(nt),\n     }"}]}