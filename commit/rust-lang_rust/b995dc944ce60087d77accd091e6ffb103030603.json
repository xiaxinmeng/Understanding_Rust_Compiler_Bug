{"sha": "b995dc944ce60087d77accd091e6ffb103030603", "node_id": "C_kwDOAAsO6NoAKGI5OTVkYzk0NGNlNjAwODdkNzdhY2NkMDkxZTZmZmIxMDMwMzA2MDM", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2022-01-31T19:47:07Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2022-02-19T15:31:40Z"}, "message": "No branch protection metadata unless enabled\n\nEven if we emit metadata disabling branch protection, this metadata may\nconflict with other modules (e.g. during LTO) that have different branch\nprotection metadata set.\n\nThis is an unstable flag and feature, so ideally the flag not being\nspecified should act as if the feature wasn't implemented in the first\nplace.\n\nAdditionally this PR also ensures we emit an error if\n`-Zbranch-protection` is set on targets other than the supported\naarch64. For now the error is being output from codegen, but ideally it\nshould be moved to earlier in the pipeline before stabilization.", "tree": {"sha": "bdcf39076b9bc04b7db8b211d3ff0c1dd1203750", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdcf39076b9bc04b7db8b211d3ff0c1dd1203750"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b995dc944ce60087d77accd091e6ffb103030603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b995dc944ce60087d77accd091e6ffb103030603", "html_url": "https://github.com/rust-lang/rust/commit/b995dc944ce60087d77accd091e6ffb103030603", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b995dc944ce60087d77accd091e6ffb103030603/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb4ee81ef555126e49b3e9f16ca6f12a3264a451", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4ee81ef555126e49b3e9f16ca6f12a3264a451", "html_url": "https://github.com/rust-lang/rust/commit/cb4ee81ef555126e49b3e9f16ca6f12a3264a451"}], "stats": {"total": 143, "additions": 85, "deletions": 58}, "files": [{"sha": "ddc8d72e9bf87bff3414bca450b1b887c09af75a", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b995dc944ce60087d77accd091e6ffb103030603/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b995dc944ce60087d77accd091e6ffb103030603/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=b995dc944ce60087d77accd091e6ffb103030603", "patch": "@@ -269,36 +269,36 @@ pub unsafe fn create_module<'ll>(\n         }\n     }\n \n-    if sess.target.arch == \"aarch64\" {\n-        let BranchProtection { bti, pac_ret: pac } = sess.opts.debugging_opts.branch_protection;\n-\n-        llvm::LLVMRustAddModuleFlag(\n-            llmod,\n-            llvm::LLVMModFlagBehavior::Error,\n-            \"branch-target-enforcement\\0\".as_ptr().cast(),\n-            bti.into(),\n-        );\n-\n-        llvm::LLVMRustAddModuleFlag(\n-            llmod,\n-            llvm::LLVMModFlagBehavior::Error,\n-            \"sign-return-address\\0\".as_ptr().cast(),\n-            pac.is_some().into(),\n-        );\n-        let pac_opts = pac.unwrap_or(PacRet { leaf: false, key: PAuthKey::A });\n-        llvm::LLVMRustAddModuleFlag(\n-            llmod,\n-            llvm::LLVMModFlagBehavior::Error,\n-            \"sign-return-address-all\\0\".as_ptr().cast(),\n-            pac_opts.leaf.into(),\n-        );\n-        let is_bkey: bool = pac_opts.key != PAuthKey::A;\n-        llvm::LLVMRustAddModuleFlag(\n-            llmod,\n-            llvm::LLVMModFlagBehavior::Error,\n-            \"sign-return-address-with-bkey\\0\".as_ptr().cast(),\n-            is_bkey.into(),\n-        );\n+    if let Some(BranchProtection { bti, pac_ret }) = sess.opts.debugging_opts.branch_protection {\n+        if sess.target.arch != \"aarch64\" {\n+            sess.err(\"-Zbranch-protection is only supported on aarch64\");\n+        } else {\n+            llvm::LLVMRustAddModuleFlag(\n+                llmod,\n+                llvm::LLVMModFlagBehavior::Error,\n+                \"branch-target-enforcement\\0\".as_ptr().cast(),\n+                bti.into(),\n+            );\n+            llvm::LLVMRustAddModuleFlag(\n+                llmod,\n+                llvm::LLVMModFlagBehavior::Error,\n+                \"sign-return-address\\0\".as_ptr().cast(),\n+                pac_ret.is_some().into(),\n+            );\n+            let pac_opts = pac_ret.unwrap_or(PacRet { leaf: false, key: PAuthKey::A });\n+            llvm::LLVMRustAddModuleFlag(\n+                llmod,\n+                llvm::LLVMModFlagBehavior::Error,\n+                \"sign-return-address-all\\0\".as_ptr().cast(),\n+                pac_opts.leaf.into(),\n+            );\n+            llvm::LLVMRustAddModuleFlag(\n+                llmod,\n+                llvm::LLVMModFlagBehavior::Error,\n+                \"sign-return-address-with-bkey\\0\".as_ptr().cast(),\n+                u32::from(pac_opts.key == PAuthKey::B),\n+            );\n+        }\n     }\n \n     // Pass on the control-flow protection flags to LLVM (equivalent to `-fcf-protection` in Clang)."}, {"sha": "f9c39f7f83d4bc4f041886ebfe0fa77c72918d49", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b995dc944ce60087d77accd091e6ffb103030603/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b995dc944ce60087d77accd091e6ffb103030603/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=b995dc944ce60087d77accd091e6ffb103030603", "patch": "@@ -721,7 +721,10 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(binary_dep_depinfo, true);\n     tracked!(\n         branch_protection,\n-        BranchProtection { bti: true, pac_ret: Some(PacRet { leaf: true, key: PAuthKey::B }) }\n+        Some(BranchProtection {\n+            bti: true,\n+            pac_ret: Some(PacRet { leaf: true, key: PAuthKey::B })\n+        })\n     );\n     tracked!(chalk, true);\n     tracked!(codegen_backend, Some(\"abc\".to_string()));"}, {"sha": "c7a6ac1d4ee88774138a95ced812369553787888", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b995dc944ce60087d77accd091e6ffb103030603/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b995dc944ce60087d77accd091e6ffb103030603/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=b995dc944ce60087d77accd091e6ffb103030603", "patch": "@@ -2,6 +2,7 @@\n #![feature(derive_default_enum)]\n #![feature(min_specialization)]\n #![feature(once_cell)]\n+#![feature(option_get_or_insert_default)]\n #![recursion_limit = \"256\"]\n #![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n "}, {"sha": "658b07cced85094f9a6a7a5bcf8bf13295fa9d40", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b995dc944ce60087d77accd091e6ffb103030603/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b995dc944ce60087d77accd091e6ffb103030603/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=b995dc944ce60087d77accd091e6ffb103030603", "patch": "@@ -984,9 +984,10 @@ mod parse {\n         true\n     }\n \n-    crate fn parse_branch_protection(slot: &mut BranchProtection, v: Option<&str>) -> bool {\n+    crate fn parse_branch_protection(slot: &mut Option<BranchProtection>, v: Option<&str>) -> bool {\n         match v {\n             Some(s) => {\n+                let slot = slot.get_or_insert_default();\n                 for opt in s.split(',') {\n                     match opt {\n                         \"bti\" => slot.bti = true,\n@@ -1161,7 +1162,7 @@ options! {\n         (default: no)\"),\n     borrowck: String = (\"migrate\".to_string(), parse_string, [UNTRACKED],\n         \"select which borrowck is used (`mir` or `migrate`) (default: `migrate`)\"),\n-    branch_protection: BranchProtection = (BranchProtection::default(), parse_branch_protection, [TRACKED],\n+    branch_protection: Option<BranchProtection> = (None, parse_branch_protection, [TRACKED],\n         \"set options for branch target identification and pointer authentication on AArch64\"),\n     cf_protection: CFProtection = (CFProtection::None, parse_cfprotection, [TRACKED],\n         \"instrument control-flow architecture protection\"),"}, {"sha": "b23073778c0b5c5664880d70d2484e06e9d9332f", "filename": "src/test/codegen/branch-protection.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b995dc944ce60087d77accd091e6ffb103030603/src%2Ftest%2Fcodegen%2Fbranch-protection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b995dc944ce60087d77accd091e6ffb103030603/src%2Ftest%2Fcodegen%2Fbranch-protection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbranch-protection.rs?ref=b995dc944ce60087d77accd091e6ffb103030603", "patch": "@@ -1,12 +1,12 @@\n // Test that the correct module flags are emitted with different branch protection flags.\n \n-// revisions: bti pac-ret leaf b-key\n+// revisions: BTI PACRET LEAF BKEY NONE\n // min-llvm-version: 12.0.0\n // needs-llvm-components: aarch64\n-// [bti] compile-flags: -Z branch-protection=bti\n-// [pac-ret] compile-flags: -Z branch-protection=pac-ret\n-// [leaf] compile-flags: -Z branch-protection=pac-ret,leaf\n-// [b-key] compile-flags: -Z branch-protection=pac-ret,b-key\n+// [BTI] compile-flags: -Z branch-protection=bti\n+// [PACRET] compile-flags: -Z branch-protection=pac-ret\n+// [LEAF] compile-flags: -Z branch-protection=pac-ret,leaf\n+// [BKEY] compile-flags: -Z branch-protection=pac-ret,b-key\n // compile-flags: --target aarch64-unknown-linux-gnu\n \n #![crate_type = \"lib\"]\n@@ -20,22 +20,27 @@ trait Sized { }\n pub fn test() {\n }\n \n-// bti: !\"branch-target-enforcement\", i32 1\n-// bti: !\"sign-return-address\", i32 0\n-// bti: !\"sign-return-address-all\", i32 0\n-// bti: !\"sign-return-address-with-bkey\", i32 0\n-\n-// pac-ret: !\"branch-target-enforcement\", i32 0\n-// pac-ret: !\"sign-return-address\", i32 1\n-// pac-ret: !\"sign-return-address-all\", i32 0\n-// pac-ret: !\"sign-return-address-with-bkey\", i32 0\n-\n-// leaf: !\"branch-target-enforcement\", i32 0\n-// leaf: !\"sign-return-address\", i32 1\n-// leaf: !\"sign-return-address-all\", i32 1\n-// leaf: !\"sign-return-address-with-bkey\", i32 0\n-\n-// b-key: !\"branch-target-enforcement\", i32 0\n-// b-key: !\"sign-return-address\", i32 1\n-// b-key: !\"sign-return-address-all\", i32 0\n-// b-key: !\"sign-return-address-with-bkey\", i32 1\n+// BTI: !\"branch-target-enforcement\", i32 1\n+// BTI: !\"sign-return-address\", i32 0\n+// BTI: !\"sign-return-address-all\", i32 0\n+// BTI: !\"sign-return-address-with-bkey\", i32 0\n+\n+// PACRET: !\"branch-target-enforcement\", i32 0\n+// PACRET: !\"sign-return-address\", i32 1\n+// PACRET: !\"sign-return-address-all\", i32 0\n+// PACRET: !\"sign-return-address-with-bkey\", i32 0\n+\n+// LEAF: !\"branch-target-enforcement\", i32 0\n+// LEAF: !\"sign-return-address\", i32 1\n+// LEAF: !\"sign-return-address-all\", i32 1\n+// LEAF: !\"sign-return-address-with-bkey\", i32 0\n+\n+// BKEY: !\"branch-target-enforcement\", i32 0\n+// BKEY: !\"sign-return-address\", i32 1\n+// BKEY: !\"sign-return-address-all\", i32 0\n+// BKEY: !\"sign-return-address-with-bkey\", i32 1\n+\n+// NONE-NOT: branch-target-enforcement\n+// NONE-NOT: sign-return-address\n+// NONE-NOT: sign-return-address-all\n+// NONE-NOT: sign-return-address-with-bkey"}, {"sha": "5528d2a0729c9b98749a71559c1128979621fe4a", "filename": "src/test/ui/invalid-compile-flags/branch-protection-missing-pac-ret.BADFLAGS.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b995dc944ce60087d77accd091e6ffb103030603/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.BADFLAGS.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b995dc944ce60087d77accd091e6ffb103030603/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.BADFLAGS.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.BADFLAGS.stderr?ref=b995dc944ce60087d77accd091e6ffb103030603", "previous_filename": "src/test/ui/invalid-compile-flags/branch-protection-missing-pac-ret.stderr"}, {"sha": "6bd9c6a0276f835418eaa0e7966390403e7ec22f", "filename": "src/test/ui/invalid-compile-flags/branch-protection-missing-pac-ret.BADTARGET.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b995dc944ce60087d77accd091e6ffb103030603/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.BADTARGET.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b995dc944ce60087d77accd091e6ffb103030603/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.BADTARGET.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.BADTARGET.stderr?ref=b995dc944ce60087d77accd091e6ffb103030603", "patch": "@@ -0,0 +1,4 @@\n+error: -Zbranch-protection is only supported on aarch64\n+\n+error: aborting due to previous error\n+"}, {"sha": "4bc4919bc935b2c8a61fc808ae27e1e4292cb068", "filename": "src/test/ui/invalid-compile-flags/branch-protection-missing-pac-ret.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b995dc944ce60087d77accd091e6ffb103030603/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b995dc944ce60087d77accd091e6ffb103030603/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.rs?ref=b995dc944ce60087d77accd091e6ffb103030603", "patch": "@@ -1 +1,14 @@\n-// compile-flags: -Z branch-protection=leaf\n+// revisions: BADFLAGS BADTARGET\n+// [BADFLAGS] compile-flags: --target=aarch64-unknown-linux-gnu -Zbranch-protection=leaf\n+// [BADFLAGS] check-fail\n+// [BADFLAGS] needs-llvm-components: aarch64\n+// [BADTARGET] compile-flags: --target=x86_64-unknown-linux-gnu -Zbranch-protection=bti\n+// [BADTARGET] build-fail\n+// [BADTARGET] needs-llvm-components: x86\n+\n+#![crate_type = \"lib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }"}]}