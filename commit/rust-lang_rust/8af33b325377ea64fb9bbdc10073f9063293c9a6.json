{"sha": "8af33b325377ea64fb9bbdc10073f9063293c9a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZjMzYjMyNTM3N2VhNjRmYjliYmRjMTAwNzNmOTA2MzI5M2M5YTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-29T07:35:37Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-31T04:07:34Z"}, "message": "qualify_consts: extract check_non_thread_local_static_is_sync", "tree": {"sha": "cfa9481a83a4fade8dde10a71f6469bf8cc63864", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfa9481a83a4fade8dde10a71f6469bf8cc63864"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8af33b325377ea64fb9bbdc10073f9063293c9a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8af33b325377ea64fb9bbdc10073f9063293c9a6", "html_url": "https://github.com/rust-lang/rust/commit/8af33b325377ea64fb9bbdc10073f9063293c9a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8af33b325377ea64fb9bbdc10073f9063293c9a6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1d440070e088c6b239bcf5f9f22dfc6d5b2b639", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d440070e088c6b239bcf5f9f22dfc6d5b2b639", "html_url": "https://github.com/rust-lang/rust/commit/c1d440070e088c6b239bcf5f9f22dfc6d5b2b639"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "dbb994183e9d58e2c368fd41e04990f51716e57a", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8af33b325377ea64fb9bbdc10073f9063293c9a6/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af33b325377ea64fb9bbdc10073f9063293c9a6/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=8af33b325377ea64fb9bbdc10073f9063293c9a6", "patch": "@@ -1687,31 +1687,9 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants<'tcx> {\n             }\n         }\n \n-        // Statics must be Sync.\n         if let Mode::Static = mode {\n-            // `#[thread_local]` statics don't have to be `Sync`.\n-            for attr in &tcx.get_attrs(def_id)[..] {\n-                if attr.check_name(sym::thread_local) {\n-                    return;\n-                }\n-            }\n-            let ty = body.return_ty();\n-            tcx.infer_ctxt().enter(|infcx| {\n-                let param_env = ty::ParamEnv::empty();\n-                let cause = traits::ObligationCause::new(body.span, hir_id, traits::SharedStatic);\n-                let mut fulfillment_cx = traits::FulfillmentContext::new();\n-                fulfillment_cx.register_bound(&infcx,\n-                                              param_env,\n-                                              ty,\n-                                              tcx.require_lang_item(\n-                                                  lang_items::SyncTraitLangItem,\n-                                                  Some(body.span)\n-                                              ),\n-                                              cause);\n-                if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n-                    infcx.report_fulfillment_errors(&err, None, false);\n-                }\n-            });\n+            // `static`s (not `static mut`s) which are not `#[thread_local]` must be `Sync`.\n+            check_non_thread_local_static_is_sync(tcx, body, def_id, hir_id);\n         }\n     }\n }\n@@ -1760,6 +1738,29 @@ fn check_short_circuiting_in_const_local(tcx: TyCtxt<'_>, body: &mut Body<'tcx>,\n     }\n }\n \n+fn check_non_thread_local_static_is_sync(\n+    tcx: TyCtxt<'tcx>,\n+    body: &mut Body<'tcx>,\n+    def_id: DefId,\n+    hir_id: HirId,\n+) {\n+    // `#[thread_local]` statics don't have to be `Sync`.\n+    if tcx.has_attr(def_id, sym::thread_local) {\n+        return;\n+    }\n+\n+    let ty = body.return_ty();\n+    tcx.infer_ctxt().enter(|infcx| {\n+        let cause = traits::ObligationCause::new(body.span, hir_id, traits::SharedStatic);\n+        let mut fulfillment_cx = traits::FulfillmentContext::new();\n+        let sync_def_id = tcx.require_lang_item(lang_items::SyncTraitLangItem, Some(body.span));\n+        fulfillment_cx.register_bound(&infcx, ty::ParamEnv::empty(), ty, sync_def_id, cause);\n+        if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n+            infcx.report_fulfillment_errors(&err, None, false);\n+        }\n+    });\n+}\n+\n fn args_required_const(tcx: TyCtxt<'_>, def_id: DefId) -> Option<FxHashSet<usize>> {\n     let attrs = tcx.get_attrs(def_id);\n     let attr = attrs.iter().find(|a| a.check_name(sym::rustc_args_required_const))?;"}]}