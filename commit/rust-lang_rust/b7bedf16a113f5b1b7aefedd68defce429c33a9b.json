{"sha": "b7bedf16a113f5b1b7aefedd68defce429c33a9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YmVkZjE2YTExM2Y1YjFiN2FlZmVkZDY4ZGVmY2U0MjljMzNhOWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-19T21:46:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-19T21:46:51Z"}, "message": "Merge #10289\n\n10289: fix: Only strip derive attributes when preparing macro input r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10246\r\ncc https://github.com/rust-analyzer/rowan/pull/114, follow up to https://github.com/rust-analyzer/rust-analyzer/pull/10025\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "d55797e045517fdd3d659c9908e3499f2a9ab166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d55797e045517fdd3d659c9908e3499f2a9ab166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7bedf16a113f5b1b7aefedd68defce429c33a9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhR6/LCRBK7hj4Ov3rIwAAWxAIAI7z1g0iMQ8F2LF1AlPZviUb\nTrr9iK0j1ABDoCDbn3ULo7WpbjTRxbBe9bvuiMVlQXPZvFMUj0oDRIRk60puEdjs\nHs8EAY5Ki/xQdPg+AU5gN8suPNlJcfM+9Xc3EwDOH/AhfUlnoCwd2A3rSfF3mfsq\nLnOA5wzemy8jKAFhYzaHS6QUmfWTUlsE6Yuhq/2dx2mM92+X0UFA7CFr3Rr3Fdd/\ndE0pCm5pM7oX2ySocFdNqem6yaQSE6fDSVcnQ9Xw1upvDM/GzDAfwTML7OzcwoOI\nEE9d8EuCX6DBIygtwFD7hn7+uQDzM07xJXqu+qOJPGpYgKiVe+O5m/syMclkAeY=\n=6z6r\n-----END PGP SIGNATURE-----\n", "payload": "tree d55797e045517fdd3d659c9908e3499f2a9ab166\nparent 05d291881a1e3c924912d6e8f0b8b42e93bc3ece\nparent a6dde501dfe209f0734d6175fb95978ef80b4fd3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1632088011 +0000\ncommitter GitHub <noreply@github.com> 1632088011 +0000\n\nMerge #10289\n\n10289: fix: Only strip derive attributes when preparing macro input r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10246\r\ncc https://github.com/rust-analyzer/rowan/pull/114, follow up to https://github.com/rust-analyzer/rust-analyzer/pull/10025\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7bedf16a113f5b1b7aefedd68defce429c33a9b", "html_url": "https://github.com/rust-lang/rust/commit/b7bedf16a113f5b1b7aefedd68defce429c33a9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7bedf16a113f5b1b7aefedd68defce429c33a9b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05d291881a1e3c924912d6e8f0b8b42e93bc3ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d291881a1e3c924912d6e8f0b8b42e93bc3ece", "html_url": "https://github.com/rust-lang/rust/commit/05d291881a1e3c924912d6e8f0b8b42e93bc3ece"}, {"sha": "a6dde501dfe209f0734d6175fb95978ef80b4fd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6dde501dfe209f0734d6175fb95978ef80b4fd3", "html_url": "https://github.com/rust-lang/rust/commit/a6dde501dfe209f0734d6175fb95978ef80b4fd3"}], "stats": {"total": 150, "additions": 88, "deletions": 62}, "files": [{"sha": "47e88e877dc951bee3a9e262a632766edd959b93", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7bedf16a113f5b1b7aefedd68defce429c33a9b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b7bedf16a113f5b1b7aefedd68defce429c33a9b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b7bedf16a113f5b1b7aefedd68defce429c33a9b", "patch": "@@ -1286,9 +1286,9 @@ checksum = \"f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b\"\n \n [[package]]\n name = \"rowan\"\n-version = \"0.13.2\"\n+version = \"0.14.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4a938f42b9c73aeece236481f37adb3debb7dfe3ae347cd6a45b5797d9ce4250\"\n+checksum = \"86f050538a65de83ae021294fb50d57f71fb4530fe79af755fc4d4cd61082c01\"\n dependencies = [\n  \"countme\",\n  \"hashbrown\","}, {"sha": "09ff9729602b97d948ad1b268c4e829d891853d4", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b7bedf16a113f5b1b7aefedd68defce429c33a9b/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bedf16a113f5b1b7aefedd68defce429c33a9b/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=b7bedf16a113f5b1b7aefedd68defce429c33a9b", "patch": "@@ -3,13 +3,13 @@\n use std::sync::Arc;\n \n use base_db::{salsa, SourceDatabase};\n-use itertools::Itertools;\n use limit::Limit;\n use mbe::{syntax_node_to_token_tree, ExpandError, ExpandResult};\n+use rustc_hash::FxHashSet;\n use syntax::{\n     algo::diff,\n     ast::{self, AttrsOwner, NameOwner},\n-    AstNode, GreenNode, Parse, SyntaxNode, SyntaxToken, TextRange, T,\n+    AstNode, GreenNode, Parse, SyntaxNode, SyntaxToken, T,\n };\n \n use crate::{\n@@ -151,7 +151,7 @@ pub fn expand_speculative(\n     // Build the subtree and token mapping for the speculative args\n     let censor = censor_for_macro_input(&loc, &speculative_args);\n     let (mut tt, spec_args_tmap) =\n-        mbe::syntax_node_to_token_tree_censored(&speculative_args, censor);\n+        mbe::syntax_node_to_token_tree_censored(&speculative_args, &censor);\n \n     let (attr_arg, token_id) = match loc.kind {\n         MacroCallKind::Attr { invoc_attr_index, .. } => {\n@@ -305,7 +305,7 @@ fn macro_arg(db: &dyn AstDatabase, id: MacroCallId) -> Option<Arc<(tt::Subtree,\n \n     let node = SyntaxNode::new_root(arg);\n     let censor = censor_for_macro_input(&loc, &node);\n-    let (mut tt, tmap) = mbe::syntax_node_to_token_tree_censored(&node, censor);\n+    let (mut tt, tmap) = mbe::syntax_node_to_token_tree_censored(&node, &censor);\n \n     if loc.def.is_proc_macro() {\n         // proc macros expect their inputs without parentheses, MBEs expect it with them included\n@@ -315,24 +315,26 @@ fn macro_arg(db: &dyn AstDatabase, id: MacroCallId) -> Option<Arc<(tt::Subtree,\n     Some(Arc::new((tt, tmap)))\n }\n \n-fn censor_for_macro_input(loc: &MacroCallLoc, node: &SyntaxNode) -> Option<TextRange> {\n-    match loc.kind {\n-        MacroCallKind::FnLike { .. } => None,\n-        MacroCallKind::Derive { derive_attr_index, .. } => match ast::Item::cast(node.clone()) {\n-            Some(item) => item\n+fn censor_for_macro_input(loc: &MacroCallLoc, node: &SyntaxNode) -> FxHashSet<SyntaxNode> {\n+    (|| {\n+        let censor = match loc.kind {\n+            MacroCallKind::FnLike { .. } => return None,\n+            MacroCallKind::Derive { derive_attr_index, .. } => ast::Item::cast(node.clone())?\n                 .attrs()\n-                .map(|attr| attr.syntax().text_range())\n                 .take(derive_attr_index as usize + 1)\n-                .fold1(TextRange::cover),\n-            None => None,\n-        },\n-        MacroCallKind::Attr { invoc_attr_index, .. } => match ast::Item::cast(node.clone()) {\n-            Some(item) => {\n-                item.attrs().nth(invoc_attr_index as usize).map(|attr| attr.syntax().text_range())\n-            }\n-            None => None,\n-        },\n-    }\n+                .filter(|attr| attr.simple_name().as_deref() == Some(\"derive\"))\n+                .map(|it| it.syntax().clone())\n+                .collect(),\n+            MacroCallKind::Attr { invoc_attr_index, .. } => ast::Item::cast(node.clone())?\n+                .attrs()\n+                .nth(invoc_attr_index as usize)\n+                .map(|attr| attr.syntax().clone())\n+                .into_iter()\n+                .collect(),\n+        };\n+        Some(censor)\n+    })()\n+    .unwrap_or_default()\n }\n \n fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<GreenNode> {"}, {"sha": "41d0ceb85a35251853e457721a36a65892656f2b", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 41, "deletions": 27, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b7bedf16a113f5b1b7aefedd68defce429c33a9b/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bedf16a113f5b1b7aefedd68defce429c33a9b/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=b7bedf16a113f5b1b7aefedd68defce429c33a9b", "patch": "@@ -1,14 +1,13 @@\n //! Conversions between [`SyntaxNode`] and [`tt::TokenTree`].\n \n-use std::iter;\n-\n use parser::{ParseError, TreeSink};\n-use rustc_hash::FxHashMap;\n+use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{\n     ast::{self, make::tokens::doc_comment},\n-    tokenize, AstToken, Parse, SmolStr, SyntaxKind,\n+    tokenize, AstToken, Parse, PreorderWithTokens, SmolStr, SyntaxElement, SyntaxKind,\n     SyntaxKind::*,\n-    SyntaxNode, SyntaxToken, SyntaxTreeBuilder, TextRange, TextSize, Token as RawToken, T,\n+    SyntaxNode, SyntaxToken, SyntaxTreeBuilder, TextRange, TextSize, Token as RawToken, WalkEvent,\n+    T,\n };\n use tt::buffer::{Cursor, TokenBuffer};\n \n@@ -19,14 +18,14 @@ use crate::{\n /// Convert the syntax node to a `TokenTree` (what macro\n /// will consume).\n pub fn syntax_node_to_token_tree(node: &SyntaxNode) -> (tt::Subtree, TokenMap) {\n-    syntax_node_to_token_tree_censored(node, None)\n+    syntax_node_to_token_tree_censored(node, &Default::default())\n }\n \n /// Convert the syntax node to a `TokenTree` (what macro will consume)\n /// with the censored range excluded.\n pub fn syntax_node_to_token_tree_censored(\n     node: &SyntaxNode,\n-    censor: Option<TextRange>,\n+    censor: &FxHashSet<SyntaxNode>,\n ) -> (tt::Subtree, TokenMap) {\n     let global_offset = node.text_range().start();\n     let mut c = Convertor::new(node, global_offset, censor);\n@@ -424,8 +423,6 @@ impl<'a> SrcToken for (&'a RawToken, &'a str) {\n     }\n }\n \n-impl RawConvertor<'_> {}\n-\n impl<'a> TokenConvertor for RawConvertor<'a> {\n     type Token = (&'a RawToken, &'a str);\n \n@@ -455,30 +452,51 @@ impl<'a> TokenConvertor for RawConvertor<'a> {\n     }\n }\n \n-struct Convertor {\n+struct Convertor<'c> {\n     id_alloc: TokenIdAlloc,\n     current: Option<SyntaxToken>,\n-    censor: Option<TextRange>,\n+    preorder: PreorderWithTokens,\n+    censor: &'c FxHashSet<SyntaxNode>,\n     range: TextRange,\n     punct_offset: Option<(SyntaxToken, TextSize)>,\n }\n \n-impl Convertor {\n-    fn new(node: &SyntaxNode, global_offset: TextSize, censor: Option<TextRange>) -> Convertor {\n-        let first = node.first_token();\n-        let current = match censor {\n-            Some(censor) => iter::successors(first, |token| token.next_token())\n-                .find(|token| !censor.contains_range(token.text_range())),\n-            None => first,\n-        };\n+impl<'c> Convertor<'c> {\n+    fn new(\n+        node: &SyntaxNode,\n+        global_offset: TextSize,\n+        censor: &'c FxHashSet<SyntaxNode>,\n+    ) -> Convertor<'c> {\n+        let range = node.text_range();\n+        let mut preorder = node.preorder_with_tokens();\n+        let first = Self::next_token(&mut preorder, censor);\n         Convertor {\n             id_alloc: { TokenIdAlloc { map: TokenMap::default(), global_offset, next_id: 0 } },\n-            current,\n-            range: node.text_range(),\n+            current: first,\n+            preorder,\n+            range,\n             censor,\n             punct_offset: None,\n         }\n     }\n+\n+    fn next_token(\n+        preorder: &mut PreorderWithTokens,\n+        censor: &FxHashSet<SyntaxNode>,\n+    ) -> Option<SyntaxToken> {\n+        while let Some(ev) = preorder.next() {\n+            let ele = match ev {\n+                WalkEvent::Enter(ele) => ele,\n+                _ => continue,\n+            };\n+            match ele {\n+                SyntaxElement::Token(t) => return Some(t),\n+                SyntaxElement::Node(node) if censor.contains(&node) => preorder.skip_subtree(),\n+                SyntaxElement::Node(_) => (),\n+            }\n+        }\n+        None\n+    }\n }\n \n #[derive(Debug)]\n@@ -511,7 +529,7 @@ impl SrcToken for SynToken {\n     }\n }\n \n-impl TokenConvertor for Convertor {\n+impl TokenConvertor for Convertor<'_> {\n     type Token = SynToken;\n     fn convert_doc_comment(&self, token: &Self::Token) -> Option<Vec<tt::TokenTree>> {\n         convert_doc_comment(token.token())\n@@ -532,11 +550,7 @@ impl TokenConvertor for Convertor {\n         if !&self.range.contains_range(curr.text_range()) {\n             return None;\n         }\n-        self.current = match self.censor {\n-            Some(censor) => iter::successors(curr.next_token(), |token| token.next_token())\n-                .find(|token| !censor.contains_range(token.text_range())),\n-            None => curr.next_token(),\n-        };\n+        self.current = Self::next_token(&mut self.preorder, self.censor);\n         let token = if curr.kind().is_punct() {\n             let range = curr.text_range();\n             let range = TextRange::at(range.start(), TextSize::of('.'));"}, {"sha": "e6ac9754da5610b16ccb079ddac2347dc43f561a", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b7bedf16a113f5b1b7aefedd68defce429c33a9b/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bedf16a113f5b1b7aefedd68defce429c33a9b/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=b7bedf16a113f5b1b7aefedd68defce429c33a9b", "patch": "@@ -1,7 +1,7 @@\n mod expand;\n mod rule;\n \n-use std::fmt::Write;\n+use std::{fmt::Write, iter};\n \n use syntax::{ast, AstNode, NodeOrToken, SyntaxNode, WalkEvent};\n use test_utils::assert_eq_text;\n@@ -252,27 +252,36 @@ struct Struct {\n     let item = source_file.items().next().unwrap();\n     let attr = item.attrs().nth(1).unwrap();\n \n-    let (tt, _) =\n-        syntax_node_to_token_tree_censored(item.syntax(), Some(attr.syntax().text_range()));\n+    let (tt, _) = syntax_node_to_token_tree_censored(\n+        item.syntax(),\n+        &iter::once(attr.syntax().clone()).collect(),\n+    );\n     expect_test::expect![[r##\"# [attr0] # [attr2] struct Struct {field : ()}\"##]]\n         .assert_eq(&tt.to_string());\n \n     let source = r##\"\n+#[attr0]\n #[derive(Derive0)]\n+#[attr1]\n #[derive(Derive1)]\n+#[attr2]\n #[derive(Derive2)]\n+#[attr3]\n struct Struct {\n     field: ()\n }\n \"##;\n     let source_file = ast::SourceFile::parse(source).ok().unwrap();\n     let item = source_file.items().next().unwrap();\n-    let attr = item.attrs().nth(1).unwrap();\n-\n-    let (tt, _) = syntax_node_to_token_tree_censored(\n-        item.syntax(),\n-        Some(attr.syntax().text_range().cover_offset(0.into())),\n-    );\n-    expect_test::expect![[r##\"# [derive (Derive2)] struct Struct {field : ()}\"##]]\n+    let derive_attr_index = 3;\n+    let censor = item\n+        .attrs()\n+        .take(derive_attr_index as usize + 1)\n+        .filter(|attr| attr.simple_name().as_deref() == Some(\"derive\"))\n+        .map(|it| it.syntax().clone())\n+        .collect();\n+\n+    let (tt, _) = syntax_node_to_token_tree_censored(item.syntax(), &censor);\n+    expect_test::expect![[r##\"# [attr0] # [attr1] # [attr2] # [derive (Derive2)] # [attr3] struct Struct {field : ()}\"##]]\n         .assert_eq(&tt.to_string());\n }"}, {"sha": "6a48a322a666d4465089dc93cd2b733adc2b5e4c", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7bedf16a113f5b1b7aefedd68defce429c33a9b/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b7bedf16a113f5b1b7aefedd68defce429c33a9b/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=b7bedf16a113f5b1b7aefedd68defce429c33a9b", "patch": "@@ -12,7 +12,7 @@ doctest = false\n [dependencies]\n cov-mark = \"2.0.0-pre.1\"\n itertools = \"0.10.0\"\n-rowan = \"0.13.0\"\n+rowan = \"0.14.0\"\n rustc_lexer = { version = \"725.0.0\", package = \"rustc-ap-rustc_lexer\" }\n rustc-hash = \"1.1.0\"\n once_cell = \"1.3.1\""}, {"sha": "ea0de4f28d43856a885ca6e8a2d6aa35ec53df58", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7bedf16a113f5b1b7aefedd68defce429c33a9b/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bedf16a113f5b1b7aefedd68defce429c33a9b/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=b7bedf16a113f5b1b7aefedd68defce429c33a9b", "patch": "@@ -52,8 +52,8 @@ pub use crate::{\n     ptr::{AstPtr, SyntaxNodePtr},\n     syntax_error::SyntaxError,\n     syntax_node::{\n-        SyntaxElement, SyntaxElementChildren, SyntaxNode, SyntaxNodeChildren, SyntaxToken,\n-        SyntaxTreeBuilder,\n+        PreorderWithTokens, SyntaxElement, SyntaxElementChildren, SyntaxNode, SyntaxNodeChildren,\n+        SyntaxToken, SyntaxTreeBuilder,\n     },\n     token_text::TokenText,\n };"}, {"sha": "6e838dd2292653e43bf520dea8807c32509ee846", "filename": "crates/syntax/src/syntax_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7bedf16a113f5b1b7aefedd68defce429c33a9b/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bedf16a113f5b1b7aefedd68defce429c33a9b/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs?ref=b7bedf16a113f5b1b7aefedd68defce429c33a9b", "patch": "@@ -31,6 +31,7 @@ pub type SyntaxToken = rowan::SyntaxToken<RustLanguage>;\n pub type SyntaxElement = rowan::SyntaxElement<RustLanguage>;\n pub type SyntaxNodeChildren = rowan::SyntaxNodeChildren<RustLanguage>;\n pub type SyntaxElementChildren = rowan::SyntaxElementChildren<RustLanguage>;\n+pub type PreorderWithTokens = rowan::api::PreorderWithTokens<RustLanguage>;\n \n #[derive(Default)]\n pub struct SyntaxTreeBuilder {"}]}