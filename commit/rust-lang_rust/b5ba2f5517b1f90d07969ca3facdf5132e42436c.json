{"sha": "b5ba2f5517b1f90d07969ca3facdf5132e42436c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YmEyZjU1MTdiMWY5MGQwNzk2OWNhM2ZhY2RmNTEzMmU0MjQzNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-06T20:27:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-06T20:27:14Z"}, "message": "auto merge of #17820 : pnkfelix/rust/fsk-improve-binary_search-doc2, r=alexcrichton\n\nAdd example to doc for `slice::ImmutableSlice::binary_search`.\r\n\r\nFix #17817.", "tree": {"sha": "d3dc61b14215c87a634f62cb7a6b6f5c60f82d02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3dc61b14215c87a634f62cb7a6b6f5c60f82d02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5ba2f5517b1f90d07969ca3facdf5132e42436c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ba2f5517b1f90d07969ca3facdf5132e42436c", "html_url": "https://github.com/rust-lang/rust/commit/b5ba2f5517b1f90d07969ca3facdf5132e42436c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5ba2f5517b1f90d07969ca3facdf5132e42436c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77a4f37246c61ff840b75cbc1b6dade6d3ef13d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/77a4f37246c61ff840b75cbc1b6dade6d3ef13d5", "html_url": "https://github.com/rust-lang/rust/commit/77a4f37246c61ff840b75cbc1b6dade6d3ef13d5"}, {"sha": "d1e0f7259e2f6dfc5754520730244f4e8b5248a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e0f7259e2f6dfc5754520730244f4e8b5248a5", "html_url": "https://github.com/rust-lang/rust/commit/d1e0f7259e2f6dfc5754520730244f4e8b5248a5"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "c7ffd8f56173fc02e725e25b93afda2d38a5ca03", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b5ba2f5517b1f90d07969ca3facdf5132e42436c/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ba2f5517b1f90d07969ca3facdf5132e42436c/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=b5ba2f5517b1f90d07969ca3facdf5132e42436c", "patch": "@@ -223,10 +223,32 @@ pub trait ImmutableSlice<'a, T> {\n     /// order code that indicates whether its argument is `Less`,\n     /// `Equal` or `Greater` the desired target.\n     ///\n-    /// If the value is found then `Found` is returned, containing the\n-    /// index of the matching element; if the value is not found then\n+    /// If a matching value is found then returns `Found`, containing\n+    /// the index for the matched element; if no match is found then\n     /// `NotFound` is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n+    ///\n+    /// # Example\n+    ///\n+    /// Looks up a series of four elements. The first is found, with a\n+    /// uniquely determined position; the second and third are not\n+    /// found; the fourth could match any position in `[1,4]`.\n+    ///\n+    /// ```rust\n+    /// use std::slice::{Found, NotFound};\n+    /// let s = [0i, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n+    /// let s = s.as_slice();\n+    ///\n+    /// let seek = 13;\n+    /// assert_eq!(s.binary_search(|probe| probe.cmp(&seek)), Found(9));\n+    /// let seek = 4;\n+    /// assert_eq!(s.binary_search(|probe| probe.cmp(&seek)), NotFound(7));\n+    /// let seek = 100;\n+    /// assert_eq!(s.binary_search(|probe| probe.cmp(&seek)), NotFound(13));\n+    /// let seek = 1;\n+    /// let r = s.binary_search(|probe| probe.cmp(&seek));\n+    /// assert!(match r { Found(1...4) => true, _ => false, });\n+    /// ```\n     #[unstable = \"waiting on unboxed closures\"]\n     fn binary_search(&self, f: |&T| -> Ordering) -> BinarySearchResult;\n \n@@ -1043,6 +1065,24 @@ pub trait ImmutableOrdSlice<T: Ord> {\n     /// index of the matching element; if the value is not found then\n     /// `NotFound` is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n+    ///\n+    /// # Example\n+    ///\n+    /// Looks up a series of four elements. The first is found, with a\n+    /// uniquely determined position; the second and third are not\n+    /// found; the fourth could match any position in `[1,4]`.\n+    ///\n+    /// ```rust\n+    /// use std::slice::{Found, NotFound};\n+    /// let s = [0i, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n+    /// let s = s.as_slice();\n+    ///\n+    /// assert_eq!(s.binary_search_elem(&13),  Found(9));\n+    /// assert_eq!(s.binary_search_elem(&4),   NotFound(7));\n+    /// assert_eq!(s.binary_search_elem(&100), NotFound(13));\n+    /// let r = s.binary_search_elem(&1);\n+    /// assert!(match r { Found(1...4) => true, _ => false, });\n+    /// ```\n     #[unstable = \"name likely to change\"]\n     fn binary_search_elem(&self, x: &T) -> BinarySearchResult;\n }"}]}