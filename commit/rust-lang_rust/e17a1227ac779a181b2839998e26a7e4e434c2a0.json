{"sha": "e17a1227ac779a181b2839998e26a7e4e434c2a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxN2ExMjI3YWM3NzlhMTgxYjI4Mzk5OThlMjZhN2U0ZTQzNGMyYTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-12T17:34:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-12T17:34:39Z"}, "message": "Auto merge of #41926 - arielb1:box-mir, r=eddyb\n\nbox large variants in MIR\n\nOperand: 72 -> 24 B\nStatement: 192 -> 96 B\nTerminator: 256 -> 112 B\nlibrustc translation memory usage: 1795 -> 1669 MB\n\nnext step would be interning lvalues, I suppose?\n\ncc #36799 (@urschrei - does ostn15_phf compile with this PR?)\n\nr? @eddyb", "tree": {"sha": "e3440c4400103d0d9fdafd9174e0cb9b4eac0866", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3440c4400103d0d9fdafd9174e0cb9b4eac0866"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e17a1227ac779a181b2839998e26a7e4e434c2a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e17a1227ac779a181b2839998e26a7e4e434c2a0", "html_url": "https://github.com/rust-lang/rust/commit/e17a1227ac779a181b2839998e26a7e4e434c2a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e17a1227ac779a181b2839998e26a7e4e434c2a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e19ccb71c8427135a69d874623af68422aeeb9e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e19ccb71c8427135a69d874623af68422aeeb9e9", "html_url": "https://github.com/rust-lang/rust/commit/e19ccb71c8427135a69d874623af68422aeeb9e9"}, {"sha": "c85501b9c18ab396096239a52350e12fa9d24db2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c85501b9c18ab396096239a52350e12fa9d24db2", "html_url": "https://github.com/rust-lang/rust/commit/c85501b9c18ab396096239a52350e12fa9d24db2"}], "stats": {"total": 81, "additions": 41, "deletions": 40}, "files": [{"sha": "fe2ad498e99610635faf0a4889717dc7a7422904", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -799,7 +799,7 @@ pub enum StatementKind<'tcx> {\n     StorageDead(Lvalue<'tcx>),\n \n     InlineAsm {\n-        asm: InlineAsm,\n+        asm: Box<InlineAsm>,\n         outputs: Vec<Lvalue<'tcx>>,\n         inputs: Vec<Operand<'tcx>>\n     },\n@@ -995,7 +995,7 @@ pub struct VisibilityScopeData {\n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum Operand<'tcx> {\n     Consume(Lvalue<'tcx>),\n-    Constant(Constant<'tcx>),\n+    Constant(Box<Constant<'tcx>>),\n }\n \n impl<'tcx> Debug for Operand<'tcx> {\n@@ -1015,7 +1015,7 @@ impl<'tcx> Operand<'tcx> {\n         substs: &'tcx Substs<'tcx>,\n         span: Span,\n     ) -> Self {\n-        Operand::Constant(Constant {\n+        Operand::Constant(box Constant {\n             span: span,\n             ty: tcx.type_of(def_id).subst(tcx, substs),\n             literal: Literal::Value { value: ConstVal::Function(def_id, substs) },\n@@ -1062,7 +1062,7 @@ pub enum Rvalue<'tcx> {\n     /// ..., y: ... }` from `dest.x = ...; dest.y = ...;` in the case\n     /// that `Foo` has a destructor. These rvalues can be optimized\n     /// away after type-checking and before lowering.\n-    Aggregate(AggregateKind<'tcx>, Vec<Operand<'tcx>>),\n+    Aggregate(Box<AggregateKind<'tcx>>, Vec<Operand<'tcx>>),\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n@@ -1185,7 +1185,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                     tuple_fmt.finish()\n                 }\n \n-                match *kind {\n+                match **kind {\n                     AggregateKind::Array(_) => write!(fmt, \"{:?}\", lvs),\n \n                     AggregateKind::Tuple => {\n@@ -1603,7 +1603,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n             Discriminant(ref lval) => Discriminant(lval.fold_with(folder)),\n             Box(ty) => Box(ty.fold_with(folder)),\n             Aggregate(ref kind, ref fields) => {\n-                let kind = match *kind {\n+                let kind = box match **kind {\n                     AggregateKind::Array(ty) => AggregateKind::Array(ty.fold_with(folder)),\n                     AggregateKind::Tuple => AggregateKind::Tuple,\n                     AggregateKind::Adt(def, v, substs, n) =>\n@@ -1631,7 +1631,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n             Discriminant(ref lval) => lval.visit_with(visitor),\n             Box(ty) => ty.visit_with(visitor),\n             Aggregate(ref kind, ref fields) => {\n-                (match *kind {\n+                (match **kind {\n                     AggregateKind::Array(ty) => ty.visit_with(visitor),\n                     AggregateKind::Tuple => false,\n                     AggregateKind::Adt(_, _, substs, _) => substs.visit_with(visitor),"}, {"sha": "7bc1dc58c29d298ed84a42b603973487732efef2", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -183,7 +183,7 @@ impl<'tcx> Rvalue<'tcx> {\n                 tcx.mk_box(t)\n             }\n             Rvalue::Aggregate(ref ak, ref ops) => {\n-                match *ak {\n+                match **ak {\n                     AggregateKind::Array(ty) => {\n                         tcx.mk_array(ty, ops.len())\n                     }"}, {"sha": "557fedadeba62155cb0a6cb1ce5767b68f76b35b", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -515,6 +515,7 @@ macro_rules! make_mir_visitor {\n \n                     Rvalue::Aggregate(ref $($mutability)* kind,\n                                       ref $($mutability)* operands) => {\n+                        let kind = &$($mutability)* **kind;\n                         match *kind {\n                             AggregateKind::Array(ref $($mutability)* ty) => {\n                                 self.visit_ty(ty);"}, {"sha": "4b7d52c25173a58c9640430a87cfe61a84286977", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -517,11 +517,11 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     }\n \n     fn constant_bool(&self, span: Span, val: bool) -> Rvalue<'tcx> {\n-        Rvalue::Use(Operand::Constant(Constant {\n+        Rvalue::Use(Operand::Constant(Box::new(Constant {\n             span: span,\n             ty: self.tcx.types.bool,\n             literal: Literal::Value { value: ConstVal::Bool(val) }\n-        }))\n+        })))\n     }\n \n     fn set_drop_flag(&mut self, loc: Location, path: MovePathIndex, val: DropFlagState) {"}, {"sha": "40a78933aad2d8e5718f28a25f0fd63f5f2def6e", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -60,15 +60,15 @@ impl<'tcx> CFG<'tcx> {\n                                 temp: &Lvalue<'tcx>,\n                                 constant: Constant<'tcx>) {\n         self.push_assign(block, source_info, temp,\n-                         Rvalue::Use(Operand::Constant(constant)));\n+                         Rvalue::Use(Operand::Constant(box constant)));\n     }\n \n     pub fn push_assign_unit(&mut self,\n                             block: BasicBlock,\n                             source_info: SourceInfo,\n                             lvalue: &Lvalue<'tcx>) {\n         self.push_assign(block, source_info, lvalue, Rvalue::Aggregate(\n-            AggregateKind::Tuple, vec![]\n+            box AggregateKind::Tuple, vec![]\n         ));\n     }\n "}, {"sha": "f7534737edc03cb74571bbcd517bda16dfa29a7e", "filename": "src/librustc_mir/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         match category {\n             Category::Constant => {\n                 let constant = this.as_constant(expr);\n-                block.and(Operand::Constant(constant))\n+                block.and(Operand::Constant(box constant))\n             }\n             Category::Lvalue |\n             Category::Rvalue(..) => {"}, {"sha": "46e2408c38d5d6e06a90c0e2dc28cde0c6a871fa", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -166,7 +166,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                           .map(|f| unpack!(block = this.as_operand(block, scope, f)))\n                           .collect();\n \n-                block.and(Rvalue::Aggregate(AggregateKind::Array(el_ty), fields))\n+                block.and(Rvalue::Aggregate(box AggregateKind::Array(el_ty), fields))\n             }\n             ExprKind::Tuple { fields } => { // see (*) above\n                 // first process the set of fields\n@@ -175,14 +175,14 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                           .map(|f| unpack!(block = this.as_operand(block, scope, f)))\n                           .collect();\n \n-                block.and(Rvalue::Aggregate(AggregateKind::Tuple, fields))\n+                block.and(Rvalue::Aggregate(box AggregateKind::Tuple, fields))\n             }\n             ExprKind::Closure { closure_id, substs, upvars } => { // see (*) above\n                 let upvars =\n                     upvars.into_iter()\n                           .map(|upvar| unpack!(block = this.as_operand(block, scope, upvar)))\n                           .collect();\n-                block.and(Rvalue::Aggregate(AggregateKind::Closure(closure_id, substs), upvars))\n+                block.and(Rvalue::Aggregate(box AggregateKind::Closure(closure_id, substs), upvars))\n             }\n             ExprKind::Adt {\n                 adt_def, variant_index, substs, fields, base\n@@ -215,7 +215,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     field_names.iter().filter_map(|n| fields_map.get(n).cloned()).collect()\n                 };\n \n-                let adt = AggregateKind::Adt(adt_def, variant_index, substs, active_field_index);\n+                let adt =\n+                    box AggregateKind::Adt(adt_def, variant_index, substs, active_field_index);\n                 block.and(Rvalue::Aggregate(adt, fields))\n             }\n             ExprKind::Assign { .. } |"}, {"sha": "3c7ab373651d2c7983eda3d1c06116d137fbc147", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -129,7 +129,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 this.cfg.push(block, Statement {\n                     source_info: source_info,\n                     kind: StatementKind::InlineAsm {\n-                        asm: asm.clone(),\n+                        asm: box asm.clone(),\n                         outputs: outputs,\n                         inputs: inputs\n                     },"}, {"sha": "28386fa598ce6c7890ddd6762a44d3e4bb65d369", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -308,7 +308,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let eq_block = self.cfg.start_new_block();\n                     let cleanup = self.diverge_cleanup();\n                     self.cfg.terminate(block, source_info, TerminatorKind::Call {\n-                        func: Operand::Constant(Constant {\n+                        func: Operand::Constant(box Constant {\n                             span: test.span,\n                             ty: mty,\n                             literal: method"}, {"sha": "6c93e073de6b1953bd56b60de2d9069409b9d390", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                            ty: Ty<'tcx>,\n                            literal: Literal<'tcx>)\n                            -> Operand<'tcx> {\n-        let constant = Constant {\n+        let constant = box Constant {\n             span: span,\n             ty: ty,\n             literal: literal,\n@@ -49,7 +49,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn unit_rvalue(&mut self) -> Rvalue<'tcx> {\n-        Rvalue::Aggregate(AggregateKind::Tuple, vec![])\n+        Rvalue::Aggregate(box AggregateKind::Tuple, vec![])\n     }\n \n     // Returns a zero literal operand for the appropriate type, works for"}, {"sha": "6043a696183f26eb069171d7514db420be8e038a", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -786,7 +786,7 @@ fn build_free<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     let free_func = tcx.require_lang_item(lang_items::BoxFreeFnLangItem);\n     let substs = tcx.intern_substs(&[Kind::from(data.item_ty)]);\n     TerminatorKind::Call {\n-        func: Operand::Constant(Constant {\n+        func: Operand::Constant(box Constant {\n             span: data.span,\n             ty: tcx.type_of(free_func).subst(tcx, substs),\n             literal: Literal::Value {"}, {"sha": "a6f9952b23ca5111d9b25286fd50ff77a3ba5d6e", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -323,7 +323,7 @@ fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n     let (callee, mut args) = match call_kind {\n         CallKind::Indirect => (rcvr, vec![]),\n         CallKind::Direct(def_id) => (\n-            Operand::Constant(Constant {\n+            Operand::Constant(box Constant {\n                 span: span,\n                 ty: tcx.type_of(def_id).subst(tcx, param_env.free_substs),\n                 literal: Literal::Value {\n@@ -449,7 +449,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n             kind: StatementKind::Assign(\n                 Lvalue::Local(RETURN_POINTER),\n                 Rvalue::Aggregate(\n-                    AggregateKind::Adt(adt_def, variant_no, substs, None),\n+                    box AggregateKind::Adt(adt_def, variant_no, substs, None),\n                     (1..sig.inputs().len()+1).map(|i| {\n                         Operand::Consume(Lvalue::Local(Local::new(i)))\n                     }).collect()"}, {"sha": "08a4961c6cd1ba40317605a73c95e0110a10d303", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -316,7 +316,7 @@ impl<'tcx> MutVisitor<'tcx> for ConstantPropagationVisitor<'tcx> {\n             _ => return,\n         }\n \n-        *operand = Operand::Constant(self.constant.clone());\n+        *operand = Operand::Constant(box self.constant.clone());\n         self.uses_replaced += 1\n     }\n }"}, {"sha": "d21dbeafb5d0a0b269184aec28b2fcd8942ddfeb", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -49,8 +49,8 @@ impl MirPass for Deaggregator {\n                     &Rvalue::Aggregate(ref agg_kind, ref operands) => (agg_kind, operands),\n                     _ => span_bug!(src_info.span, \"expected aggregate, not {:?}\", rhs),\n                 };\n-                let (adt_def, variant, substs) = match agg_kind {\n-                    &AggregateKind::Adt(adt_def, variant, substs, None)\n+                let (adt_def, variant, substs) = match **agg_kind {\n+                    AggregateKind::Adt(adt_def, variant, substs, None)\n                         => (adt_def, variant, substs),\n                     _ => span_bug!(src_info.span, \"expected struct, not {:?}\", rhs),\n                 };\n@@ -114,8 +114,8 @@ fn get_aggregate_statement_index<'a, 'tcx, 'b>(start: usize,\n             &Rvalue::Aggregate(ref kind, ref operands) => (kind, operands),\n             _ => continue,\n         };\n-        let (adt_def, variant) = match kind {\n-            &AggregateKind::Adt(adt_def, variant, _, None) => (adt_def, variant),\n+        let (adt_def, variant) = match **kind {\n+            AggregateKind::Adt(adt_def, variant, _, None) => (adt_def, variant),\n             _ => continue,\n         };\n         if operands.len() == 0 {"}, {"sha": "e1c4602b045ebab53404a86b715176f6c4a7c84e", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -230,7 +230,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 (if self.keep_original {\n                     rhs.clone()\n                 } else {\n-                    let unit = Rvalue::Aggregate(AggregateKind::Tuple, vec![]);\n+                    let unit = Rvalue::Aggregate(box AggregateKind::Tuple, vec![]);\n                     mem::replace(rhs, unit)\n                 }, statement.source_info)\n             };\n@@ -288,7 +288,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n \n     fn promote_candidate(mut self, candidate: Candidate) {\n         let span = self.promoted.span;\n-        let new_operand = Operand::Constant(Constant {\n+        let new_operand = Operand::Constant(box Constant {\n             span: span,\n             ty: self.promoted.return_ty,\n             literal: Literal::Promoted {"}, {"sha": "df837a32133b37e252d885003c0bc83c2e778c4c", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -730,7 +730,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             }\n \n             Rvalue::Aggregate(ref kind, _) => {\n-                if let AggregateKind::Adt(def, ..) = *kind {\n+                if let AggregateKind::Adt(def, ..) = **kind {\n                     if def.has_dtor(self.tcx) {\n                         self.add(Qualif::NEEDS_DROP);\n                         self.deny_drop();"}, {"sha": "1dcacb29c3ecc406807630affdfd7e7209b14910", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -37,7 +37,7 @@ impl MirPass for SimplifyBranches {\n         for block in mir.basic_blocks_mut() {\n             let terminator = block.terminator_mut();\n             terminator.kind = match terminator.kind {\n-                TerminatorKind::SwitchInt { discr: Operand::Constant(Constant {\n+                TerminatorKind::SwitchInt { discr: Operand::Constant(box Constant {\n                     literal: Literal::Value { ref value }, ..\n                 }), ref values, ref targets, .. } => {\n                     if let Some(ref constint) = value.to_const_int() {\n@@ -54,7 +54,7 @@ impl MirPass for SimplifyBranches {\n                         continue\n                     }\n                 },\n-                TerminatorKind::Assert { target, cond: Operand::Constant(Constant {\n+                TerminatorKind::Assert { target, cond: Operand::Constant(box Constant {\n                     literal: Literal::Value {\n                         value: ConstVal::Bool(cond)\n                     }, ..\n@@ -66,4 +66,3 @@ impl MirPass for SimplifyBranches {\n         }\n     }\n }\n-"}, {"sha": "be384218a414e0a461393c54eb489d521b155eac", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -534,7 +534,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n     fn is_box_free(&self, operand: &Operand<'tcx>) -> bool {\n         match operand {\n-            &Operand::Constant(Constant {\n+            &Operand::Constant(box Constant {\n                 literal: Literal::Value {\n                     value: ConstVal::Function(def_id, _), ..\n                 }, .."}, {"sha": "24218725186624525e735628bd03a9fac3b6b07a", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -190,7 +190,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n             Rvalue::Aggregate(ref kind, ref _operands) => {\n                 // AggregateKind is not distinguished by visit API, so\n                 // record it. (`super_rvalue` handles `_operands`.)\n-                self.record(match *kind {\n+                self.record(match **kind {\n                     AggregateKind::Array(_) => \"AggregateKind::Array\",\n                     AggregateKind::Tuple => \"AggregateKind::Tuple\",\n                     AggregateKind::Adt(..) => \"AggregateKind::Adt\","}, {"sha": "96ef26d3f6f833aa87a2a56c2eef37ac01d8c74f", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -108,7 +108,7 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n                              location: Location) {\n         match *kind {\n             mir::TerminatorKind::Call {\n-                func: mir::Operand::Constant(mir::Constant {\n+                func: mir::Operand::Constant(box mir::Constant {\n                     literal: Literal::Value {\n                         value: ConstVal::Function(def_id, _), ..\n                     }, .."}, {"sha": "6ba00c7e103317cf1afcafa0827b1353e5de9417", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -537,7 +537,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 }\n                 failure?;\n \n-                match *kind {\n+                match **kind {\n                     mir::AggregateKind::Array(_) => {\n                         self.const_array(dest_ty, &fields)\n                     }"}, {"sha": "667075e6970e184c010e55ef7f9c6ab1de8f4ac8", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a1227ac779a181b2839998e26a7e4e434c2a0/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=e17a1227ac779a181b2839998e26a7e4e434c2a0", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             }\n \n             mir::Rvalue::Aggregate(ref kind, ref operands) => {\n-                match *kind {\n+                match **kind {\n                     mir::AggregateKind::Adt(adt_def, variant_index, substs, active_field_index) => {\n                         let discr = adt_def.discriminant_for_variant(bcx.tcx(), variant_index)\n                            .to_u128_unchecked() as u64;"}]}