{"sha": "4fc5b822e218301eedf49ec249fdd1a0adf8ebd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYzViODIyZTIxODMwMWVlZGY0OWVjMjQ5ZmRkMWEwYWRmOGViZDY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-10T01:40:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-10T02:13:14Z"}, "message": "rustdoc: Simplify the relation between the brief and long description\n\nBrief is just used for indexes now", "tree": {"sha": "d34f2d839f9598fca225290777eb0f0e3bea0dcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d34f2d839f9598fca225290777eb0f0e3bea0dcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fc5b822e218301eedf49ec249fdd1a0adf8ebd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc5b822e218301eedf49ec249fdd1a0adf8ebd6", "html_url": "https://github.com/rust-lang/rust/commit/4fc5b822e218301eedf49ec249fdd1a0adf8ebd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fc5b822e218301eedf49ec249fdd1a0adf8ebd6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8c7b5347d3b834a2c467677cfa8670316b2c574", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c7b5347d3b834a2c467677cfa8670316b2c574", "html_url": "https://github.com/rust-lang/rust/commit/e8c7b5347d3b834a2c467677cfa8670316b2c574"}], "stats": {"total": 216, "additions": 32, "deletions": 184}, "files": [{"sha": "429f0c0a05a88f8984e01f69a3c2a6f2b8ff23d5", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 18, "deletions": 111, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5b822e218301eedf49ec249fdd1a0adf8ebd6/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5b822e218301eedf49ec249fdd1a0adf8ebd6/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=4fc5b822e218301eedf49ec249fdd1a0adf8ebd6", "patch": "@@ -31,11 +31,9 @@ fn run(\n \n fn fold_item(fold: fold::fold<()>, doc: doc::itemdoc) -> doc::itemdoc {\n     let doc = fold::default_seq_fold_item(fold, doc);\n-    let (brief, desc) = modify(doc.brief, doc.desc);\n \n     {\n-        brief: brief,\n-        desc: desc\n+        brief: extract(doc.desc)\n         with doc\n     }\n }\n@@ -45,11 +43,8 @@ fn fold_iface(fold: fold::fold<()>, doc: doc::ifacedoc) -> doc::ifacedoc {\n \n     {\n         methods: par::anymap(doc.methods) {|doc|\n-            let (brief, desc) = modify(doc.brief, doc.desc);\n-\n             {\n-                brief: brief,\n-                desc: desc\n+                brief: extract(doc.desc)\n                 with doc\n             }\n         }\n@@ -62,11 +57,8 @@ fn fold_impl(fold: fold::fold<()>, doc: doc::impldoc) -> doc::impldoc {\n \n     {\n         methods: par::anymap(doc.methods) {|doc|\n-            let (brief, desc) = modify(doc.brief, doc.desc);\n-\n             {\n-                brief: brief,\n-                desc: desc\n+                brief: extract(doc.desc)\n                 with doc\n             }\n         }\n@@ -75,76 +67,22 @@ fn fold_impl(fold: fold::fold<()>, doc: doc::impldoc) -> doc::impldoc {\n }\n \n #[test]\n-fn should_promote_mod_desc() {\n-    let doc = test::mk_doc(\"#[doc(desc = \\\"desc\\\")] mod m { }\");\n+fn should_promote_desc() {\n+    let doc = test::mk_doc(\"#[doc = \\\"desc\\\"] mod m { }\");\n     assert doc.cratemod().mods()[0].brief() == some(\"desc\");\n-    assert doc.cratemod().mods()[0].desc() == none;\n-}\n-\n-#[test]\n-fn should_promote_const_desc() {\n-    let doc = test::mk_doc(\"#[doc(desc = \\\"desc\\\")] const a: bool = true;\");\n-    assert doc.cratemod().consts()[0].brief() == some(\"desc\");\n-    assert doc.cratemod().consts()[0].desc() == none;\n-}\n-\n-#[test]\n-fn should_promote_fn_desc() {\n-    let doc = test::mk_doc(\"#[doc(desc = \\\"desc\\\")] fn a() { }\");\n-    assert doc.cratemod().fns()[0].brief() == some(\"desc\");\n-    assert doc.cratemod().fns()[0].desc() == none;\n-}\n-\n-#[test]\n-fn should_promote_enum_desc() {\n-    let doc = test::mk_doc(\"#[doc(desc = \\\"desc\\\")] enum a { b }\");\n-    assert doc.cratemod().enums()[0].brief() == some(\"desc\");\n-    assert doc.cratemod().enums()[0].desc() == none;\n-}\n-\n-#[test]\n-fn should_promote_resource_desc() {\n-    let doc = test::mk_doc(\n-        \"#[doc(desc = \\\"desc\\\")] resource r(a: bool) { }\");\n-    assert doc.cratemod().resources()[0].brief() == some(\"desc\");\n-    assert doc.cratemod().resources()[0].desc() == none;\n-}\n-\n-#[test]\n-fn should_promote_iface_desc() {\n-    let doc = test::mk_doc(\"#[doc(desc = \\\"desc\\\")] iface i { fn a(); }\");\n-    assert doc.cratemod().ifaces()[0].brief() == some(\"desc\");\n-    assert doc.cratemod().ifaces()[0].desc() == none;\n }\n \n #[test]\n fn should_promote_iface_method_desc() {\n-    let doc = test::mk_doc(\"iface i { #[doc(desc = \\\"desc\\\")] fn a(); }\");\n+    let doc = test::mk_doc(\"iface i { #[doc = \\\"desc\\\"] fn a(); }\");\n     assert doc.cratemod().ifaces()[0].methods[0].brief == some(\"desc\");\n-    assert doc.cratemod().ifaces()[0].methods[0].desc == none;\n-}\n-\n-#[test]\n-fn should_promote_impl_desc() {\n-    let doc = test::mk_doc(\n-        \"#[doc(desc = \\\"desc\\\")] impl i for int { fn a() { } }\");\n-    assert doc.cratemod().impls()[0].brief() == some(\"desc\");\n-    assert doc.cratemod().impls()[0].desc() == none;\n }\n \n #[test]\n fn should_promote_impl_method_desc() {\n     let doc = test::mk_doc(\n-        \"impl i for int { #[doc(desc = \\\"desc\\\")] fn a() { } }\");\n+        \"impl i for int { #[doc = \\\"desc\\\"] fn a() { } }\");\n     assert doc.cratemod().impls()[0].methods[0].brief == some(\"desc\");\n-    assert doc.cratemod().impls()[0].methods[0].desc == none;\n-}\n-\n-#[test]\n-fn should_promote_type_desc() {\n-    let doc = test::mk_doc(\"#[doc(desc = \\\"desc\\\")] type t = int;\");\n-    assert doc.cratemod().types()[0].brief() == some(\"desc\");\n-    assert doc.cratemod().types()[0].desc() == none;\n }\n \n #[cfg(test)]\n@@ -158,19 +96,15 @@ mod test {\n     }\n }\n \n-fn modify(\n-    brief: option<str>,\n-    desc: option<str>\n-) -> (option<str>, option<str>) {\n-\n-    if option::is_some(brief) || option::is_none(desc) {\n-        ret (brief, desc);\n+fn extract(desc: option<str>) -> option<str> {\n+    if option::is_none(desc) {\n+        ret none\n     }\n \n     parse_desc(option::get(desc))\n }\n \n-fn parse_desc(desc: str) -> (option<str>, option<str>) {\n+fn parse_desc(desc: str) -> option<str> {\n \n     const max_brief_len: uint = 120u;\n \n@@ -179,18 +113,12 @@ fn parse_desc(desc: str) -> (option<str>, option<str>) {\n     if check vec::is_not_empty(paras) {\n         let maybe_brief = vec::head(paras);\n         if str::len(maybe_brief) <= max_brief_len {\n-            let desc_paras = vec::tail(paras);\n-            let desc = if vec::is_not_empty(desc_paras) {\n-                some(str::connect(desc_paras, \"\\n\\n\"))\n-            } else {\n-                none\n-            };\n-            (some(maybe_brief), desc)\n+            some(maybe_brief)\n         } else {\n-            (none, some(desc))\n+            none\n         }\n     } else {\n-        (none, none)\n+        none\n     }\n }\n \n@@ -244,16 +172,13 @@ fn test_paragraphs_2() {\n \n #[test]\n fn should_promote_short_descs() {\n-    let brief = none;\n     let desc = some(\"desc\");\n-    let (newbrief, newdesc) = modify(brief, desc);\n-    assert newbrief == desc;\n-    assert newdesc == none;\n+    let brief = extract(desc);\n+    assert brief == desc;\n }\n \n #[test]\n fn should_not_promote_long_descs() {\n-    let brief = none;\n     let desc = some(\"Warkworth Castle is a ruined medieval building\n in the town of the same name in the English county of Northumberland.\n The town and castle occupy a loop of the River Coquet, less than a mile\n@@ -262,24 +187,6 @@ but traditionally its construction has been ascribed to Prince Henry of\n Scotland in the mid 12th century, although it may have been built by\n King Henry II of England when he took control of England'snorthern\n counties.\");\n-    let (newbrief, _) = modify(brief, desc);\n-    assert newbrief == none;\n-}\n-\n-#[test]\n-fn should_not_promote_descs_over_brief() {\n-    let brief = some(\"brief\");\n-    let desc = some(\"desc\");\n-    let (newbrief, newdesc) = modify(brief, desc);\n-    assert newbrief == brief;\n-    assert newdesc == desc;\n-}\n-\n-#[test]\n-fn should_extract_brief_from_desc() {\n-    let brief = none;\n-    let desc = some(\"brief\\n\\ndesc\");\n-    let (newbrief, newdesc) = modify(brief, desc);\n-    assert newbrief == some(\"brief\");\n-    assert newdesc == some(\"desc\");\n+    let brief = extract(desc);\n+    assert brief == none;\n }"}, {"sha": "41fd2794f43595c597533b189a2d72a48dfa9104", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 14, "deletions": 73, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5b822e218301eedf49ec249fdd1a0adf8ebd6/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5b822e218301eedf49ec249fdd1a0adf8ebd6/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=4fc5b822e218301eedf49ec249fdd1a0adf8ebd6", "patch": "@@ -241,42 +241,13 @@ fn should_write_full_path_to_mod() {\n \n fn write_common(\n     ctxt: ctxt,\n-    brief: option<str>,\n     desc: option<str>,\n     sections: [doc::section]\n ) {\n-    write_brief(ctxt, brief);\n     write_desc(ctxt, desc);\n     write_sections(ctxt, sections);\n }\n \n-fn write_brief(\n-    ctxt: ctxt,\n-    brief: option<str>\n-) {\n-    alt brief {\n-      some(brief) {\n-        ctxt.w.write_line(brief);\n-        ctxt.w.write_line(\"\");\n-      }\n-      none { }\n-    }\n-}\n-\n-#[test]\n-fn should_leave_blank_line_after_brief() {\n-    let markdown = test::render(\"#[doc(brief = \\\"brief\\\")] fn a() { }\");\n-    assert str::contains(markdown, \"brief\\n\\n\");\n-}\n-\n-#[test]\n-fn should_leave_blank_line_between_brief_and_desc() {\n-    let markdown = test::render(\n-        \"#[doc(brief = \\\"brief\\\", desc = \\\"desc\\\")] fn a() { }\"\n-    );\n-    assert str::contains(markdown, \"brief\\n\\ndesc\");\n-}\n-\n fn write_desc(\n     ctxt: ctxt,\n     desc: option<str>\n@@ -316,7 +287,7 @@ fn write_mod_contents(\n     ctxt: ctxt,\n     doc: doc::moddoc\n ) {\n-    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n+    write_common(ctxt, doc.desc(), doc.sections());\n     if option::is_some(doc.index) {\n         write_index(ctxt, option::get(doc.index));\n     }\n@@ -340,12 +311,6 @@ fn write_item(ctxt: ctxt, doc: doc::itemtag) {\n     }\n }\n \n-#[test]\n-fn should_write_crate_brief_description() {\n-    let markdown = test::render(\"#[doc(brief = \\\"this is the crate\\\")];\");\n-    assert str::contains(markdown, \"this is the crate\");\n-}\n-\n #[test]\n fn should_write_crate_description() {\n     let markdown = test::render(\"#[doc = \\\"this is the crate\\\"];\");\n@@ -394,7 +359,7 @@ fn should_not_write_index_if_no_entries() {\n \n fn write_nmod(ctxt: ctxt, doc: doc::nmoddoc) {\n     write_header(ctxt, h1, doc::nmodtag(doc));\n-    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n+    write_common(ctxt, doc.desc(), doc.sections());\n \n     for fndoc in doc.fns {\n         write_fn(ctxt, fndoc);\n@@ -422,7 +387,6 @@ fn write_fn(\n     write_fnlike(\n         ctxt,\n         doc.sig,\n-        doc.brief(),\n         doc.desc(),\n         doc.sections()\n     );\n@@ -431,12 +395,11 @@ fn write_fn(\n fn write_fnlike(\n     ctxt: ctxt,\n     sig: option<str>,\n-    brief: option<str>,\n     desc: option<str>,\n     sections: [doc::section]\n ) {\n     write_sig(ctxt, sig);\n-    write_common(ctxt, brief, desc, sections);\n+    write_common(ctxt, desc, sections);\n }\n \n fn write_sig(ctxt: ctxt, sig: option<str>) {\n@@ -496,7 +459,7 @@ fn should_correctly_indent_fn_signature() {\n \n #[test]\n fn should_leave_blank_line_between_fn_header_and_sig() {\n-    let markdown = test::render(\"#[doc(brief = \\\"brief\\\")] fn a() { }\");\n+    let markdown = test::render(\"fn a() { }\");\n     assert str::contains(markdown, \"Function `a`\\n\\n    fn a()\");\n }\n \n@@ -506,7 +469,7 @@ fn write_const(\n ) {\n     write_header(ctxt, h2, doc::consttag(doc));\n     write_sig(ctxt, doc.sig);\n-    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n+    write_common(ctxt, doc.desc(), doc.sections());\n }\n \n #[test]\n@@ -518,17 +481,17 @@ fn should_write_const_header() {\n #[test]\n fn should_write_const_description() {\n     let markdown = test::render(\n-        \"#[doc(brief = \\\"a\\\", desc = \\\"b\\\")]\\\n+        \"#[doc = \\\"b\\\"]\\\n          const a: bool = true;\");\n-    assert str::contains(markdown, \"\\n\\na\\n\\nb\\n\\n\");\n+    assert str::contains(markdown, \"\\n\\nb\\n\\n\");\n }\n \n fn write_enum(\n     ctxt: ctxt,\n     doc: doc::enumdoc\n ) {\n     write_header(ctxt, h2, doc::enumtag(doc));\n-    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n+    write_common(ctxt, doc.desc(), doc.sections());\n     write_variants(ctxt, doc.variants);\n }\n \n@@ -541,8 +504,8 @@ fn should_write_enum_header() {\n #[test]\n fn should_write_enum_description() {\n     let markdown = test::render(\n-        \"#[doc(brief = \\\"a\\\", desc = \\\"b\\\")] enum a { b }\");\n-    assert str::contains(markdown, \"\\n\\na\\n\\nb\\n\\n\");\n+        \"#[doc = \\\"b\\\"] enum a { b }\");\n+    assert str::contains(markdown, \"\\n\\nb\\n\\n\");\n }\n \n fn write_variants(\n@@ -610,7 +573,7 @@ fn should_write_variant_list_with_signatures() {\n fn write_res(ctxt: ctxt, doc: doc::resdoc) {\n     write_header(ctxt, h2, doc::restag(doc));\n     write_sig(ctxt, doc.sig);\n-    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n+    write_common(ctxt, doc.desc(), doc.sections());\n }\n \n #[test]\n@@ -627,7 +590,7 @@ fn should_write_resource_signature() {\n \n fn write_iface(ctxt: ctxt, doc: doc::ifacedoc) {\n     write_header(ctxt, h2, doc::ifacetag(doc));\n-    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n+    write_common(ctxt, doc.desc(), doc.sections());\n     write_methods(ctxt, doc.methods);\n }\n \n@@ -640,7 +603,6 @@ fn write_method(ctxt: ctxt, doc: doc::methoddoc) {\n     write_fnlike(\n         ctxt,\n         doc.sig,\n-        doc.brief,\n         doc.desc,\n         doc.sections\n     );\n@@ -652,13 +614,6 @@ fn should_write_iface_header() {\n     assert str::contains(markdown, \"## Interface `i`\");\n }\n \n-#[test]\n-fn should_write_iface_brief() {\n-    let markdown = test::render(\n-        \"#[doc(brief = \\\"brief\\\")] iface i { fn a(); }\");\n-    assert str::contains(markdown, \"brief\");\n-}\n-\n #[test]\n fn should_write_iface_desc() {\n     let markdown = test::render(\n@@ -682,7 +637,7 @@ fn should_write_iface_method_signature() {\n \n fn write_impl(ctxt: ctxt, doc: doc::impldoc) {\n     write_header(ctxt, h2, doc::impltag(doc));\n-    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n+    write_common(ctxt, doc.desc(), doc.sections());\n     write_methods(ctxt, doc.methods);\n }\n \n@@ -698,13 +653,6 @@ fn should_write_impl_header_with_iface() {\n     assert str::contains(markdown, \"## Implementation `i of j for int`\");\n }\n \n-#[test]\n-fn should_write_impl_brief() {\n-    let markdown = test::render(\n-        \"#[doc(brief = \\\"brief\\\")] impl i for int { fn a() { } }\");\n-    assert str::contains(markdown, \"brief\");\n-}\n-\n #[test]\n fn should_write_impl_desc() {\n     let markdown = test::render(\n@@ -732,7 +680,7 @@ fn write_type(\n ) {\n     write_header(ctxt, h2, doc::tytag(doc));\n     write_sig(ctxt, doc.sig);\n-    write_common(ctxt, doc.brief(), doc.desc(), doc.sections());\n+    write_common(ctxt, doc.desc(), doc.sections());\n }\n \n #[test]\n@@ -741,13 +689,6 @@ fn should_write_type_header() {\n     assert str::contains(markdown, \"## Type `t`\");\n }\n \n-#[test]\n-fn should_write_type_brief() {\n-    let markdown = test::render(\n-        \"#[doc(brief = \\\"brief\\\")] type t = int;\");\n-    assert str::contains(markdown, \"\\n\\nbrief\\n\\n\");\n-}\n-\n #[test]\n fn should_write_type_desc() {\n     let markdown = test::render("}]}