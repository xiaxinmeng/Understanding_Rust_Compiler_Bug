{"sha": "28491a7b36a717e42081fc6ee788433feccb72e6", "node_id": "C_kwDOAAsO6NoAKDI4NDkxYTdiMzZhNzE3ZTQyMDgxZmM2ZWU3ODg0MzNmZWNjYjcyZTY", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-11-03T05:53:06Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-11-04T05:17:03Z"}, "message": "UPDATE - address PR Comments\n\nFIX - StrippingDebugInfoFailed typo\n\nDELETE - unneeded FIXME comment\n\nUPDATE - only declare the error with ExtractBundledLibsError as an enum and use the Diagnostic derive macro", "tree": {"sha": "75d01765d038839d18bd740884daf9bb7d7d70a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75d01765d038839d18bd740884daf9bb7d7d70a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28491a7b36a717e42081fc6ee788433feccb72e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28491a7b36a717e42081fc6ee788433feccb72e6", "html_url": "https://github.com/rust-lang/rust/commit/28491a7b36a717e42081fc6ee788433feccb72e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28491a7b36a717e42081fc6ee788433feccb72e6/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2678765d08df633b4804d1ba03e090c3bed878bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2678765d08df633b4804d1ba03e090c3bed878bb", "html_url": "https://github.com/rust-lang/rust/commit/2678765d08df633b4804d1ba03e090c3bed878bb"}], "stats": {"total": 123, "additions": 40, "deletions": 83}, "files": [{"sha": "9113ddab048abdb20aadd16f1797a5f9ac3a8ce5", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 19, "deletions": 37, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/28491a7b36a717e42081fc6ee788433feccb72e6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28491a7b36a717e42081fc6ee788433feccb72e6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=28491a7b36a717e42081fc6ee788433feccb72e6", "patch": "@@ -10,7 +10,7 @@ use std::fs::File;\n use std::io;\n use std::path::{Path, PathBuf};\n \n-use crate::errors::{ExtractBundledLibsError, ExtractBundledLibsErrorKind::*};\n+use crate::errors::ExtractBundledLibsError;\n \n pub trait ArchiveBuilderBuilder {\n     fn new_archive_builder<'a>(&self, sess: &'a Session) -> Box<dyn ArchiveBuilder<'a> + 'a>;\n@@ -35,48 +35,30 @@ pub trait ArchiveBuilderBuilder {\n         outdir: &Path,\n         bundled_lib_file_names: &FxHashSet<Symbol>,\n     ) -> Result<(), ExtractBundledLibsError<'_>> {\n-        let archive_map = unsafe {\n-            Mmap::map(File::open(rlib).map_err(|e| ExtractBundledLibsError {\n-                kind: OpenFile,\n-                rlib,\n-                error: e.to_string(),\n-            })?)\n-            .map_err(|e| ExtractBundledLibsError {\n-                kind: MmapFile,\n-                rlib,\n-                error: e.to_string(),\n-            })?\n-        };\n-        let archive = ArchiveFile::parse(&*archive_map).map_err(|e| ExtractBundledLibsError {\n-            kind: ParseArchive,\n-            rlib,\n-            error: e.to_string(),\n-        })?;\n+        let archive_map =\n+            unsafe {\n+                Mmap::map(File::open(rlib).map_err(|e| ExtractBundledLibsError::OpenFile {\n+                    rlib,\n+                    error: e.to_string(),\n+                })?)\n+                .map_err(|e| ExtractBundledLibsError::MmapFile { rlib, error: e.to_string() })?\n+            };\n+        let archive = ArchiveFile::parse(&*archive_map)\n+            .map_err(|e| ExtractBundledLibsError::ParseArchive { rlib, error: e.to_string() })?;\n \n         for entry in archive.members() {\n-            let entry = entry.map_err(|e| ExtractBundledLibsError {\n-                kind: ReadEntry,\n-                rlib,\n-                error: e.to_string(),\n-            })?;\n-            let data = entry.data(&*archive_map).map_err(|e| ExtractBundledLibsError {\n-                kind: ArchiveMember,\n-                rlib,\n-                error: e.to_string(),\n-            })?;\n-            let name = std::str::from_utf8(entry.name()).map_err(|e| ExtractBundledLibsError {\n-                kind: ConvertName,\n-                rlib,\n-                error: e.to_string(),\n+            let entry = entry\n+                .map_err(|e| ExtractBundledLibsError::ReadEntry { rlib, error: e.to_string() })?;\n+            let data = entry.data(&*archive_map).map_err(|e| {\n+                ExtractBundledLibsError::ArchiveMember { rlib, error: e.to_string() }\n             })?;\n+            let name = std::str::from_utf8(entry.name())\n+                .map_err(|e| ExtractBundledLibsError::ConvertName { rlib, error: e.to_string() })?;\n             if !bundled_lib_file_names.contains(&Symbol::intern(name)) {\n                 continue; // We need to extract only native libraries.\n             }\n-            std::fs::write(&outdir.join(&name), data).map_err(|e| ExtractBundledLibsError {\n-                kind: WriteFile,\n-                rlib,\n-                error: e.to_string(),\n-            })?;\n+            std::fs::write(&outdir.join(&name), data)\n+                .map_err(|e| ExtractBundledLibsError::WriteFile { rlib, error: e.to_string() })?;\n         }\n         Ok(())\n     }"}, {"sha": "6f0a8d0a54cbac03b5158e35a8647a819bdd0912", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28491a7b36a717e42081fc6ee788433feccb72e6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28491a7b36a717e42081fc6ee788433feccb72e6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=28491a7b36a717e42081fc6ee788433feccb72e6", "patch": "@@ -1063,7 +1063,7 @@ fn strip_symbols_with_external_utility<'a>(\n             if !prog.status.success() {\n                 let mut output = prog.stderr.clone();\n                 output.extend_from_slice(&prog.stdout);\n-                sess.emit_warning(errors::StrippingDebuInfoFailed {\n+                sess.emit_warning(errors::StrippingDebugInfoFailed {\n                     util,\n                     status: prog.status,\n                     output: escape_string(&output),\n@@ -1077,7 +1077,6 @@ fn strip_symbols_with_external_utility<'a>(\n fn escape_string(s: &[u8]) -> String {\n     match str::from_utf8(s) {\n         Ok(s) => s.to_owned(),\n-        // FIXME: return a type that can conform to IntoDiagnosticArg\n         Err(_) => format!(\"Non-UTF-8 output: {}\", s.escape_ascii()),\n     }\n }"}, {"sha": "265f466f2ca374370643e3fac791d13a1cf98dff", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 20, "deletions": 44, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/28491a7b36a717e42081fc6ee788433feccb72e6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28491a7b36a717e42081fc6ee788433feccb72e6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=28491a7b36a717e42081fc6ee788433feccb72e6", "patch": "@@ -423,7 +423,7 @@ pub struct UnableToRunDsymutil {\n #[derive(Diagnostic)]\n #[diag(codegen_ssa_stripping_debu_info_failed)]\n #[note]\n-pub struct StrippingDebuInfoFailed<'a> {\n+pub struct StrippingDebugInfoFailed<'a> {\n     pub util: &'a str,\n     pub status: ExitStatus,\n     pub output: String,\n@@ -485,52 +485,28 @@ pub struct RlibArchiveBuildFailure {\n #[diag(codegen_ssa_option_gcc_only)]\n pub struct OptionGccOnly;\n \n-pub struct ExtractBundledLibsError<'a> {\n-    pub kind: ExtractBundledLibsErrorKind,\n-    pub rlib: &'a Path,\n-    pub error: String,\n-}\n+#[derive(Diagnostic)]\n+pub enum ExtractBundledLibsError<'a> {\n+    #[diag(codegen_ssa_extract_bundled_libs_open_file)]\n+    OpenFile { rlib: &'a Path, error: String },\n \n-pub enum ExtractBundledLibsErrorKind {\n-    OpenFile,\n-    MmapFile,\n-    ParseArchive,\n-    ReadEntry,\n-    ArchiveMember,\n-    ConvertName,\n-    WriteFile,\n-}\n+    #[diag(codegen_ssa_extract_bundled_libs_mmap_file)]\n+    MmapFile { rlib: &'a Path, error: String },\n \n-impl IntoDiagnostic<'_, !> for ExtractBundledLibsError<'_> {\n-    fn into_diagnostic(self, handler: &'_ Handler) -> DiagnosticBuilder<'_, !> {\n-        let mut diag = match self.kind {\n-            ExtractBundledLibsErrorKind::OpenFile => {\n-                handler.struct_fatal(fluent::codegen_ssa_extract_bundled_libs_open_file)\n-            }\n-            ExtractBundledLibsErrorKind::MmapFile => {\n-                handler.struct_fatal(fluent::codegen_ssa_extract_bundled_libs_mmap_file)\n-            }\n-            ExtractBundledLibsErrorKind::ParseArchive => {\n-                handler.struct_fatal(fluent::codegen_ssa_extract_bundled_libs_parse_archive)\n-            }\n-            ExtractBundledLibsErrorKind::ReadEntry => {\n-                handler.struct_fatal(fluent::codegen_ssa_extract_bundled_libs_read_entry)\n-            }\n-            ExtractBundledLibsErrorKind::ArchiveMember => {\n-                handler.struct_fatal(fluent::codegen_ssa_extract_bundled_libs_archive_member)\n-            }\n-            ExtractBundledLibsErrorKind::ConvertName => {\n-                handler.struct_fatal(fluent::codegen_ssa_extract_bundled_libs_convert_name)\n-            }\n-            ExtractBundledLibsErrorKind::WriteFile => {\n-                handler.struct_fatal(fluent::codegen_ssa_extract_bundled_libs_write_file)\n-            }\n-        };\n+    #[diag(codegen_ssa_extract_bundled_libs_parse_archive)]\n+    ParseArchive { rlib: &'a Path, error: String },\n \n-        diag.set_arg(\"rlib\", self.rlib);\n-        diag.set_arg(\"error\", self.error);\n-        diag\n-    }\n+    #[diag(codegen_ssa_extract_bundled_libs_read_entry)]\n+    ReadEntry { rlib: &'a Path, error: String },\n+\n+    #[diag(codegen_ssa_extract_bundled_libs_archive_member)]\n+    ArchiveMember { rlib: &'a Path, error: String },\n+\n+    #[diag(codegen_ssa_extract_bundled_libs_convert_name)]\n+    ConvertName { rlib: &'a Path, error: String },\n+\n+    #[diag(codegen_ssa_extract_bundled_libs_write_file)]\n+    WriteFile { rlib: &'a Path, error: String },\n }\n \n #[derive(Diagnostic)]"}]}