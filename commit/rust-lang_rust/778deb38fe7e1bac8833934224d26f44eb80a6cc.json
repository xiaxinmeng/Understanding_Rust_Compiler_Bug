{"sha": "778deb38fe7e1bac8833934224d26f44eb80a6cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3OGRlYjM4ZmU3ZTFiYWM4ODMzOTM0MjI0ZDI2ZjQ0ZWI4MGE2Y2M=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-08T12:59:54Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-08T21:59:39Z"}, "message": "Better strip turbofishes", "tree": {"sha": "978ef918e70a41ef818ba12efb3e63b1e6abe2ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/978ef918e70a41ef818ba12efb3e63b1e6abe2ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/778deb38fe7e1bac8833934224d26f44eb80a6cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/778deb38fe7e1bac8833934224d26f44eb80a6cc", "html_url": "https://github.com/rust-lang/rust/commit/778deb38fe7e1bac8833934224d26f44eb80a6cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/778deb38fe7e1bac8833934224d26f44eb80a6cc/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5168ab16e14679e16a472c0ab13b1bbc32dc95f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5168ab16e14679e16a472c0ab13b1bbc32dc95f3", "html_url": "https://github.com/rust-lang/rust/commit/5168ab16e14679e16a472c0ab13b1bbc32dc95f3"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "0e60dc2b63a05f3a0ec9d83e111fdc291c40e7c2", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778deb38fe7e1bac8833934224d26f44eb80a6cc/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778deb38fe7e1bac8833934224d26f44eb80a6cc/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=778deb38fe7e1bac8833934224d26f44eb80a6cc", "patch": "@@ -44,10 +44,6 @@ pub enum ImportAlias {\n }\n \n impl ModPath {\n-    pub fn from_src_unhygienic(path: ast::Path) -> Option<ModPath> {\n-        lower::lower_path(path, &Hygiene::new_unhygienic()).map(|it| it.mod_path)\n-    }\n-\n     pub fn from_src(path: ast::Path, hygiene: &Hygiene) -> Option<ModPath> {\n         lower::lower_path(path, hygiene).map(|it| it.mod_path)\n     }"}, {"sha": "e03ccd35155a98269ee384239a557afc39b6f863", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/778deb38fe7e1bac8833934224d26f44eb80a6cc/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778deb38fe7e1bac8833934224d26f44eb80a6cc/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=778deb38fe7e1bac8833934224d26f44eb80a6cc", "patch": "@@ -5,7 +5,7 @@ use hir::{\n };\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n-use syntax::{ast, AstNode, SyntaxNode};\n+use syntax::{ast, utils::path_to_string_stripping_turbo_fish, AstNode, SyntaxNode};\n \n use crate::{\n     items_locator::{self, AssocItemSearch, DEFAULT_QUERY_SEARCH_LIMIT},\n@@ -57,7 +57,7 @@ pub struct PathImportCandidate {\n #[derive(Debug)]\n pub struct FirstSegmentUnresolved {\n     fist_segment: ast::NameRef,\n-    full_qualifier: ModPath,\n+    full_qualifier: ast::Path,\n }\n \n /// A name that will be used during item lookups.\n@@ -310,7 +310,7 @@ fn path_applicable_imports(\n         }\n         Some(first_segment_unresolved) => (\n             first_segment_unresolved.fist_segment.to_string(),\n-            first_segment_unresolved.full_qualifier.to_string(),\n+            path_to_string_stripping_turbo_fish(&first_segment_unresolved.full_qualifier),\n         ),\n     };\n \n@@ -583,7 +583,7 @@ fn path_import_candidate(\n                     ImportCandidate::Path(PathImportCandidate {\n                         qualifier: Some(FirstSegmentUnresolved {\n                             fist_segment: qualifier_start,\n-                            full_qualifier: ModPath::from_src_unhygienic(qualifier)?,\n+                            full_qualifier: qualifier,\n                         }),\n                         name,\n                     })"}, {"sha": "70ba8adb487d4d3acb384df8a1df54a36cdcf43d", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778deb38fe7e1bac8833934224d26f44eb80a6cc/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778deb38fe7e1bac8833934224d26f44eb80a6cc/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=778deb38fe7e1bac8833934224d26f44eb80a6cc", "patch": "@@ -91,6 +91,10 @@ pub fn path_from_segments(\n     })\n }\n \n+pub fn path_from_text(text: &str) -> ast::Path {\n+    ast_from_text(&format!(\"fn main() {{ let test = {}; }}\", text))\n+}\n+\n pub fn glob_use_tree() -> ast::UseTree {\n     ast_from_text(\"use *;\")\n }"}, {"sha": "09e212e8c03aa90be8c771be84489d2172687716", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/778deb38fe7e1bac8833934224d26f44eb80a6cc/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778deb38fe7e1bac8833934224d26f44eb80a6cc/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=778deb38fe7e1bac8833934224d26f44eb80a6cc", "patch": "@@ -37,6 +37,7 @@ pub mod algo;\n pub mod ast;\n #[doc(hidden)]\n pub mod fuzz;\n+pub mod utils;\n \n use std::{marker::PhantomData, sync::Arc};\n "}, {"sha": "f4c02518b4c76a2ed708bac285872018bc2cc507", "filename": "crates/syntax/src/utils.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/778deb38fe7e1bac8833934224d26f44eb80a6cc/crates%2Fsyntax%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778deb38fe7e1bac8833934224d26f44eb80a6cc/crates%2Fsyntax%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Futils.rs?ref=778deb38fe7e1bac8833934224d26f44eb80a6cc", "patch": "@@ -0,0 +1,43 @@\n+//! A set of utils methods to reuse on other abstraction levels\n+\n+use itertools::Itertools;\n+\n+use crate::{ast, match_ast, AstNode};\n+\n+pub fn path_to_string_stripping_turbo_fish(path: &ast::Path) -> String {\n+    path.syntax()\n+        .children()\n+        .filter_map(|node| {\n+            match_ast! {\n+                match node {\n+                    ast::PathSegment(it) => {\n+                        Some(it.name_ref()?.to_string())\n+                    },\n+                    ast::Path(it) => {\n+                        Some(path_to_string_stripping_turbo_fish(&it))\n+                    },\n+                    _ => None,\n+                }\n+            }\n+        })\n+        .join(\"::\")\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::path_to_string_stripping_turbo_fish;\n+    use crate::ast::make;\n+\n+    #[test]\n+    fn turbofishes_are_stripped() {\n+        assert_eq!(\"Vec\", path_to_string_stripping_turbo_fish(&make::path_from_text(\"Vec::<i32>\")),);\n+        assert_eq!(\n+            \"Vec::new\",\n+            path_to_string_stripping_turbo_fish(&make::path_from_text(\"Vec::<i32>::new\")),\n+        );\n+        assert_eq!(\n+            \"Vec::new\",\n+            path_to_string_stripping_turbo_fish(&make::path_from_text(\"Vec::new()\")),\n+        );\n+    }\n+}"}]}