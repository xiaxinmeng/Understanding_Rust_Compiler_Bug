{"sha": "6f14ff105f58672476e79bf3eff88d0673bbf0b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMTRmZjEwNWY1ODY3MjQ3NmU3OWJmM2VmZjg4ZDA2NzNiYmYwYjI=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-07-27T21:22:49Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-07-30T18:08:41Z"}, "message": "add extended info for E0436 functional record update syntax needs struct\n\nThis example focuses on struct-like enum variants, because it's not\nimmediately obvious in what other context we can get E0436 alone,\nwithout any other, more serious, errors. (Triggering E0436 with a union\nalso emits a separate \"union expressions should have exactly one field\"\nerror.)\n\n(One might argue that we ought to accept the functional record update\nsyntax for struct-like enums, but that is beyond the scope of this\nerror-index-comprehensiveness commit.)", "tree": {"sha": "dd93998577a635fd75e1f0415400c17f536e3728", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd93998577a635fd75e1f0415400c17f536e3728"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f14ff105f58672476e79bf3eff88d0673bbf0b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f14ff105f58672476e79bf3eff88d0673bbf0b2", "html_url": "https://github.com/rust-lang/rust/commit/6f14ff105f58672476e79bf3eff88d0673bbf0b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f14ff105f58672476e79bf3eff88d0673bbf0b2/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "477e9f01714b6dffa1fb75e95b890d7abc2fcc52", "url": "https://api.github.com/repos/rust-lang/rust/commits/477e9f01714b6dffa1fb75e95b890d7abc2fcc52", "html_url": "https://github.com/rust-lang/rust/commit/477e9f01714b6dffa1fb75e95b890d7abc2fcc52"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "a1ac89051c84e00f9746cc3c440ae3a552d21305", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6f14ff105f58672476e79bf3eff88d0673bbf0b2/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f14ff105f58672476e79bf3eff88d0673bbf0b2/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=6f14ff105f58672476e79bf3eff88d0673bbf0b2", "patch": "@@ -3457,6 +3457,56 @@ impl Foo for i32 {\n ```\n \"##,\n \n+E0436: r##\"\n+The functional record update syntax is only allowed for structs. (Struct-like\n+enum variants don't qualify, for example.)\n+\n+Erroneous code example:\n+\n+```compile_fail,E0436\n+enum PublicationFrequency {\n+    Weekly,\n+    SemiMonthly { days: (u8, u8), annual_special: bool },\n+}\n+\n+fn one_up_competitor(competitor_frequency: PublicationFrequency)\n+                     -> PublicationFrequency {\n+    match competitor_frequency {\n+        PublicationFrequency::Weekly => PublicationFrequency::SemiMonthly {\n+            days: (1, 15), annual_special: false\n+        },\n+        c @ PublicationFrequency::SemiMonthly{ .. } =>\n+            PublicationFrequency::SemiMonthly {\n+                annual_special: true, ..c // error: functional record update\n+                                          //        syntax requires a struct\n+        }\n+    }\n+}\n+```\n+\n+Rewrite the expression without functional record update syntax:\n+\n+```\n+enum PublicationFrequency {\n+    Weekly,\n+    SemiMonthly { days: (u8, u8), annual_special: bool },\n+}\n+\n+fn one_up_competitor(competitor_frequency: PublicationFrequency)\n+                     -> PublicationFrequency {\n+    match competitor_frequency {\n+        PublicationFrequency::Weekly => PublicationFrequency::SemiMonthly {\n+            days: (1, 15), annual_special: false\n+        },\n+        PublicationFrequency::SemiMonthly{ days, .. } =>\n+            PublicationFrequency::SemiMonthly {\n+                days, annual_special: true // ok!\n+        }\n+    }\n+}\n+```\n+\"##,\n+\n E0439: r##\"\n The length of the platform-intrinsic function `simd_shuffle`\n wasn't specified. Erroneous code example:\n@@ -4655,7 +4705,6 @@ register_diagnostics! {\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n-    E0436, // functional record update requires a struct\n     E0521, // redundant default implementations of trait\n     E0533, // `{}` does not name a unit variant, unit struct or a constant\n     E0563, // cannot determine a type for this `impl Trait`: {}"}]}