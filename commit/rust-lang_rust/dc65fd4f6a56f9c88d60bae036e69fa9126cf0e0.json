{"sha": "dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNjVmZDRmNmE1NmY5Yzg4ZDYwYmFlMDM2ZTY5ZmE5MTI2Y2YwZTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-21T19:10:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-21T19:10:38Z"}, "message": "Rollup merge of #72149 - estebank:icemation, r=eddyb\n\nDon't `type_of` on trait assoc ty without default\n\nFix #72076.", "tree": {"sha": "197a0897f75fbc52fdfe7d3e074c444559b224d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/197a0897f75fbc52fdfe7d3e074c444559b224d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJextIuCRBK7hj4Ov3rIwAAdHIIABPYmXezuDrRaKMg8nF79C9s\n+r2sx9mw0G4kfnfuyaNjgWNLQ8IFxUryVC8Ut6CA/bAdyMHrOk1MU9Vfe4VueW2D\nhDyYlB/rWDuwiKixRWN+z14tM7yt2XNs74Rr4pyk65zoakT/+hoJNpFsiEFxTZUu\n3jKfAnARuQ+V2B+MB/SxC6qibrl70HDvoazHwu3w9xrO9cbEWKUawQxpTpaCGLOA\ny808gkrUv1ZqESuKQ92P16QV5wO2rYINlQRX8FX9izbPyNnOqNSsOwhbsbwGlxWF\n2FZY+DkSCwkcspjHNwWSI9aU7xF5XxpHVxM8n/F4Q0/nnFSGtydPgisk0MUAIhw=\n=3VLj\n-----END PGP SIGNATURE-----\n", "payload": "tree 197a0897f75fbc52fdfe7d3e074c444559b224d3\nparent 22438fc22b92506b0afc857a96ff6fba3d3a8e81\nparent a3f30bbc2d28572f9fa429cf3b31d7f95d3b0dda\nauthor Ralf Jung <post@ralfj.de> 1590088238 +0200\ncommitter GitHub <noreply@github.com> 1590088238 +0200\n\nRollup merge of #72149 - estebank:icemation, r=eddyb\n\nDon't `type_of` on trait assoc ty without default\n\nFix #72076.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0", "html_url": "https://github.com/rust-lang/rust/commit/dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22438fc22b92506b0afc857a96ff6fba3d3a8e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/22438fc22b92506b0afc857a96ff6fba3d3a8e81", "html_url": "https://github.com/rust-lang/rust/commit/22438fc22b92506b0afc857a96ff6fba3d3a8e81"}, {"sha": "a3f30bbc2d28572f9fa429cf3b31d7f95d3b0dda", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f30bbc2d28572f9fa429cf3b31d7f95d3b0dda", "html_url": "https://github.com/rust-lang/rust/commit/a3f30bbc2d28572f9fa429cf3b31d7f95d3b0dda"}], "stats": {"total": 71, "additions": 54, "deletions": 17}, "files": [{"sha": "480420dfdcf5e0a67df8dac6ecc4538b8a0b4e23", "filename": "src/librustc_middle/ty/error.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0/src%2Flibrustc_middle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0/src%2Flibrustc_middle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferror.rs?ref=dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0", "patch": "@@ -815,19 +815,18 @@ fn foo(&self) -> Self::T { String::new() }\n                 for item in &items[..] {\n                     match item.kind {\n                         hir::AssocItemKind::Type | hir::AssocItemKind::OpaqueTy => {\n-                            if self.type_of(self.hir().local_def_id(item.id.hir_id)) == found {\n-                                if let hir::Defaultness::Default { has_value: true } =\n-                                    item.defaultness\n-                                {\n+                            // FIXME: account for returning some type in a trait fn impl that has\n+                            // an assoc type as a return type (#72076).\n+                            if let hir::Defaultness::Default { has_value: true } = item.defaultness\n+                            {\n+                                if self.type_of(self.hir().local_def_id(item.id.hir_id)) == found {\n                                     db.span_label(\n                                         item.span,\n                                         \"associated type defaults can't be assumed inside the \\\n                                             trait defining them\",\n                                     );\n-                                } else {\n-                                    db.span_label(item.span, \"expected this associated type\");\n+                                    return true;\n                                 }\n-                                return true;\n                             }\n                         }\n                         _ => {}"}, {"sha": "1659044a64fe1184c2eb54c936acc783b5e0e9db", "filename": "src/test/ui/issues/issue-72076.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0/src%2Ftest%2Fui%2Fissues%2Fissue-72076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0/src%2Ftest%2Fui%2Fissues%2Fissue-72076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72076.rs?ref=dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0", "patch": "@@ -0,0 +1,6 @@\n+trait X {\n+    type S;\n+    fn f() -> Self::S {} //~ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "b942cf75b06a7d94be864744d8532b494b441e0a", "filename": "src/test/ui/issues/issue-72076.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0/src%2Ftest%2Fui%2Fissues%2Fissue-72076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0/src%2Ftest%2Fui%2Fissues%2Fissue-72076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72076.stderr?ref=dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-72076.rs:3:23\n+   |\n+LL |     fn f() -> Self::S {}\n+   |                       ^^ expected associated type, found `()`\n+   |\n+   = note: expected associated type `<Self as X>::S`\n+                    found unit type `()`\n+   = help: consider constraining the associated type `<Self as X>::S` to `()` or calling a method that returns `<Self as X>::S`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0d90e449523a3544fd1605f233815208e158e550", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.rs?ref=dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0", "patch": "@@ -7,6 +7,7 @@ trait Trait<T = Self> {\n \n     fn func(&self) -> Self::A;\n     fn funk(&self, _: Self::A);\n+    fn funq(&self) -> Self::A {} //~ ERROR mismatched types\n }\n \n fn foo(_: impl Trait, x: impl Trait) {"}, {"sha": "e629f8f970d320d5e18617dd598f08913324250e", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction.stderr", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr?ref=dc65fd4f6a56f9c88d60bae036e69fa9126cf0e0", "patch": "@@ -1,5 +1,19 @@\n error[E0308]: mismatched types\n-  --> $DIR/trait-with-missing-associated-type-restriction.rs:13:9\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:10:31\n+   |\n+LL |     fn funq(&self) -> Self::A {}\n+   |                               ^^ expected associated type, found `()`\n+   |\n+   = note: expected associated type `<Self as Trait<T>>::A`\n+                    found unit type `()`\n+help: a method is available that returns `<Self as Trait<T>>::A`\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:8:5\n+   |\n+LL |     fn func(&self) -> Self::A;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ consider calling `Trait::func`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:14:9\n    |\n LL |     qux(x.func())\n    |         ^^^^^^^^ expected `usize`, found associated type\n@@ -12,7 +26,7 @@ LL | fn foo(_: impl Trait, x: impl Trait<A = usize>) {\n    |                                    ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/trait-with-missing-associated-type-restriction.rs:17:9\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:18:9\n    |\n LL |     qux(x.func())\n    |         ^^^^^^^^ expected `usize`, found associated type\n@@ -25,7 +39,7 @@ LL | fn bar<T: Trait<A = usize>>(x: T) {\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/trait-with-missing-associated-type-restriction.rs:21:9\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:22:9\n    |\n LL |     qux(x.func())\n    |         ^^^^^^^^ expected `usize`, found associated type\n@@ -38,25 +52,28 @@ LL | fn foo2(x: impl Trait<i32, A = usize>) {\n    |                          ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/trait-with-missing-associated-type-restriction.rs:25:12\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:26:12\n    |\n LL |     x.funk(3);\n    |            ^ expected associated type, found integer\n    |\n    = note: expected associated type `<T as Trait<i32>>::A`\n                          found type `{integer}`\n-help: a method is available that returns `<T as Trait<i32>>::A`\n+help: some methods are available that return `<T as Trait<i32>>::A`\n   --> $DIR/trait-with-missing-associated-type-restriction.rs:8:5\n    |\n LL |     fn func(&self) -> Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ consider calling `Trait::func`\n+LL |     fn funk(&self, _: Self::A);\n+LL |     fn funq(&self) -> Self::A {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ consider calling `Trait::funq`\n help: consider constraining the associated type `<T as Trait<i32>>::A` to `{integer}`\n    |\n LL | fn bar2<T: Trait<i32, A = {integer}>>(x: T) {\n    |                     ^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/trait-with-missing-associated-type-restriction.rs:26:9\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:27:9\n    |\n LL |     qux(x.func())\n    |         ^^^^^^^^ expected `usize`, found associated type\n@@ -69,7 +86,7 @@ LL | fn bar2<T: Trait<i32, A = usize>>(x: T) {\n    |                     ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/trait-with-missing-associated-type-restriction.rs:30:9\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:31:9\n    |\n LL | fn baz<D: std::fmt::Debug, T: Trait<A = D>>(x: T) {\n    |        - this type parameter\n@@ -80,13 +97,13 @@ LL |     qux(x.func())\n            found type parameter `D`\n \n error[E0308]: mismatched types\n-  --> $DIR/trait-with-missing-associated-type-restriction.rs:34:9\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:35:9\n    |\n LL |     qux(x.func())\n    |         ^^^^^^^^ expected `usize`, found `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/trait-with-missing-associated-type-restriction.rs:38:9\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:39:9\n    |\n LL |     qux(x.func())\n    |         ^^^^^^^^ expected `usize`, found associated type\n@@ -98,6 +115,6 @@ help: consider constraining the associated type `<T as Trait>::A` to `usize`\n LL | fn ban<T>(x: T) where T: Trait<A = usize> {\n    |                               ^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}