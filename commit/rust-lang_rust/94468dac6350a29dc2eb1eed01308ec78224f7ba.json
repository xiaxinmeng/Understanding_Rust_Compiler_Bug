{"sha": "94468dac6350a29dc2eb1eed01308ec78224f7ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NDY4ZGFjNjM1MGEyOWRjMmViMWVlZDAxMzA4ZWM3ODIyNGY3YmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-21T21:12:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-22T20:54:52Z"}, "message": "permit `'_` and `&T` in impl headers\n\nDeprecated forms of elision are not supported.", "tree": {"sha": "c1769e391d610c8d90c8b0ec7f5311b81b5b4c61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1769e391d610c8d90c8b0ec7f5311b81b5b4c61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94468dac6350a29dc2eb1eed01308ec78224f7ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94468dac6350a29dc2eb1eed01308ec78224f7ba", "html_url": "https://github.com/rust-lang/rust/commit/94468dac6350a29dc2eb1eed01308ec78224f7ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94468dac6350a29dc2eb1eed01308ec78224f7ba/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df70060bd6cd4f2a589a83999139600087e7bbc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/df70060bd6cd4f2a589a83999139600087e7bbc9", "html_url": "https://github.com/rust-lang/rust/commit/df70060bd6cd4f2a589a83999139600087e7bbc9"}], "stats": {"total": 668, "additions": 617, "deletions": 51}, "files": [{"sha": "9f51eb8c35a82787f10c6143ca6ce0fcd9f87080", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -420,7 +420,10 @@ pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime\n         LifetimeName::Name(name) => {\n             visitor.visit_name(lifetime.span, name);\n         }\n-        LifetimeName::Static | LifetimeName::Implicit | LifetimeName::Underscore => {}\n+        LifetimeName::Fresh(_) |\n+        LifetimeName::Static |\n+        LifetimeName::Implicit |\n+        LifetimeName::Underscore => {}\n     }\n }\n "}, {"sha": "ad848949f624df6a5c93d563ad075d3bbd26aa30", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 227, "deletions": 45, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -107,6 +107,12 @@ pub struct LoweringContext<'a> {\n     is_in_loop_condition: bool,\n     is_in_trait_impl: bool,\n \n+    /// What to do when we encounter either an \"anonymous lifetime\n+    /// reference\". The term \"anonymous\" is meant to encompass both\n+    /// `'_` lifetimes as well as fully elided cases where nothing is\n+    /// written at all (e.g., `&T` or `std::cell::Ref<T>`).\n+    anonymous_lifetime_mode: AnonymousLifetimeMode,\n+\n     // This is a list of in-band type definitions being generated by\n     // Argument-position `impl Trait`.\n     // When traversing a signature such as `fn foo(x: impl Trait)`,\n@@ -212,6 +218,7 @@ pub fn lower_crate(\n         catch_scopes: Vec::new(),\n         loop_scopes: Vec::new(),\n         is_in_loop_condition: false,\n+        anonymous_lifetime_mode: AnonymousLifetimeMode::PassThrough,\n         type_def_lifetime_params: DefIdMap(),\n         current_hir_id_owner: vec![(CRATE_DEF_INDEX, 0)],\n         item_local_id_counters: NodeMap(),\n@@ -244,6 +251,51 @@ enum ParenthesizedGenericArgs {\n     Err,\n }\n \n+/// What to do when we encounter an **anonymous** lifetime\n+/// reference. Anonymous lifetime references come in two flavors.  You\n+/// have implicit, or fully elided, references to lifetimes, like the\n+/// one in `&T` or `Ref<T>`, and you have `'_` lifetimes, like `&'_ T`\n+/// or `Ref<'_, T>`.  These often behave the same, but not always:\n+///\n+/// - certain usages of implicit references are deprecated, like\n+///   `Ref<T>`, and we sometimes just give hard errors in those cases\n+///   as well.\n+/// - for object bounds there is a difference: `Box<dyn Foo>` is not\n+///   the same as `Box<dyn Foo + '_>`.\n+///\n+/// We describe the effects of the various modes in terms of three cases:\n+///\n+/// - **Modern** -- includes all uses of `'_`, but also the lifetime arg\n+///   of a `&` (e.g., the missing lifetime in something like `&T`)\n+/// - **Dyn Bound** -- if you have something like `Box<dyn Foo>`,\n+///   there is an elided lifetime bound (`Box<dyn Foo + 'X>`). These\n+///   elided bounds follow special rules. Note that this only covers\n+///   cases where *nothing* is written; the `'_` in `Box<dyn Foo +\n+///   '_>` is a case of \"modern\" elision.\n+/// - **Deprecated** -- this coverse cases like `Ref<T>`, where the lifetime\n+///   parameter to ref is completely elided. `Ref<'_, T>` would be the modern,\n+///   non-deprecated equivalent.\n+///\n+/// Currently, the handling of lifetime elision is somewhat spread out\n+/// between HIR lowering and -- as described below -- the\n+/// `resolve_lifetime` module. Often we \"fallthrough\" to that code by generating\n+/// an \"elided\" or \"underscore\" lifetime name. In the future, we probably want to move\n+/// everything into HIR lowering.\n+#[derive(Copy, Clone)]\n+enum AnonymousLifetimeMode {\n+    /// For **Modern** cases, create a new anonymous region parameter\n+    /// and reference that.\n+    ///\n+    /// For **Dyn Bound** cases, pass responsibility to\n+    /// `resolve_lifetime` code.\n+    ///\n+    /// For **Deprecated** cases, report an error.\n+    CreateParameter,\n+\n+    /// Pass responsibility to `resolve_lifetime` code for all cases.\n+    PassThrough,\n+}\n+\n impl<'a> LoweringContext<'a> {\n     fn lower_crate(mut self, c: &Crate) -> hir::Crate {\n         /// Full-crate AST visitor that inserts into a fresh\n@@ -546,22 +598,37 @@ impl<'a> LoweringContext<'a> {\n         span.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n     }\n \n-    // Creates a new hir::GenericParam for every new lifetime and type parameter\n-    // encountered while evaluating `f`. Definitions are created with the parent\n-    // provided. If no `parent_id` is provided, no definitions will be returned.\n-    fn collect_in_band_defs<T, F>(&mut self, parent_id: DefId, f: F) -> (Vec<hir::GenericParam>, T)\n+    /// Creates a new hir::GenericParam for every new lifetime and\n+    /// type parameter encountered while evaluating `f`. Definitions\n+    /// are created with the parent provided. If no `parent_id` is\n+    /// provided, no definitions will be returned.\n+    ///\n+    /// Presuming that in-band lifetimes are enabled, then\n+    /// `self.anonymous_lifetime_mode` will be updated to match the\n+    /// argument while `f` is running (and restored afterwards).\n+    fn collect_in_band_defs<T, F>(\n+        &mut self,\n+        parent_id: DefId,\n+        anonymous_lifetime_mode: AnonymousLifetimeMode,\n+        f: F,\n+    ) -> (Vec<hir::GenericParam>, T)\n     where\n         F: FnOnce(&mut LoweringContext) -> T,\n     {\n         assert!(!self.is_collecting_in_band_lifetimes);\n         assert!(self.lifetimes_to_define.is_empty());\n+        let old_anonymous_lifetime_mode = self.anonymous_lifetime_mode;\n+\n         self.is_collecting_in_band_lifetimes = self.sess.features_untracked().in_band_lifetimes;\n+        if self.is_collecting_in_band_lifetimes {\n+            self.anonymous_lifetime_mode = anonymous_lifetime_mode;\n+        }\n \n         assert!(self.in_band_ty_params.is_empty());\n-\n         let res = f(self);\n \n         self.is_collecting_in_band_lifetimes = false;\n+        self.anonymous_lifetime_mode = old_anonymous_lifetime_mode;\n \n         let in_band_ty_params = self.in_band_ty_params.split_off(0);\n         let lifetimes_to_define = self.lifetimes_to_define.split_off(0);\n@@ -571,8 +638,12 @@ impl<'a> LoweringContext<'a> {\n             .map(|(span, hir_name)| {\n                 let def_node_id = self.next_id().node_id;\n \n+                // Get the name we'll use to make the def-path. Note\n+                // that collisions are ok here and this shouldn't\n+                // really show up for end-user.\n                 let str_name = match hir_name {\n                     hir::LifetimeName::Name(n) => n.as_str(),\n+                    hir::LifetimeName::Fresh(_) => keywords::UnderscoreLifetime.name().as_str(),\n                     hir::LifetimeName::Implicit\n                     | hir::LifetimeName::Underscore\n                     | hir::LifetimeName::Static => {\n@@ -636,6 +707,16 @@ impl<'a> LoweringContext<'a> {\n         self.lifetimes_to_define.push((span, hir_name));\n     }\n \n+    /// When we have either an elided or `'_` lifetime in an impl\n+    /// header, we convert it to\n+    fn collect_fresh_in_band_lifetime(&mut self, span: Span) -> hir::LifetimeName {\n+        assert!(self.is_collecting_in_band_lifetimes);\n+        let index = self.lifetimes_to_define.len();\n+        let hir_name = hir::LifetimeName::Fresh(index);\n+        self.lifetimes_to_define.push((span, hir_name));\n+        hir_name\n+    }\n+\n     // Evaluates `f` with the lifetimes in `lt_defs` in-scope.\n     // This is used to track which lifetimes have already been defined, and\n     // which are new in-band lifetimes that need to have a definition created\n@@ -677,12 +758,17 @@ impl<'a> LoweringContext<'a> {\n         res\n     }\n \n-    // Appends in-band lifetime defs and argument-position `impl Trait` defs\n-    // to the existing set of generics.\n+    /// Appends in-band lifetime defs and argument-position `impl\n+    /// Trait` defs to the existing set of generics.\n+    ///\n+    /// Presuming that in-band lifetimes are enabled, then\n+    /// `self.anonymous_lifetime_mode` will be updated to match the\n+    /// argument while `f` is running (and restored afterwards).\n     fn add_in_band_defs<F, T>(\n         &mut self,\n         generics: &Generics,\n         parent_id: DefId,\n+        anonymous_lifetime_mode: AnonymousLifetimeMode,\n         f: F,\n     ) -> (hir::Generics, T)\n     where\n@@ -694,7 +780,7 @@ impl<'a> LoweringContext<'a> {\n                 _ => None,\n             }),\n             |this| {\n-                this.collect_in_band_defs(parent_id, |this| {\n+                this.collect_in_band_defs(parent_id, anonymous_lifetime_mode, |this| {\n                     (this.lower_generics(generics), f(this))\n                 })\n             },\n@@ -1213,6 +1299,7 @@ impl<'a> LoweringContext<'a> {\n                             return;\n                         }\n                     }\n+                    name @ hir::LifetimeName::Fresh(_) => name,\n                     name @ hir::LifetimeName::Name(_) => name,\n                     hir::LifetimeName::Static => return,\n                 };\n@@ -1757,19 +1844,35 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_lifetime(&mut self, l: &Lifetime) -> hir::Lifetime {\n-        let name = match self.lower_ident(l.ident) {\n-            x if x == \"'_\" => hir::LifetimeName::Underscore,\n-            x if x == \"'static\" => hir::LifetimeName::Static,\n+        match self.lower_ident(l.ident) {\n+            x if x == \"'static\" => self.new_named_lifetime(l.id, l.span, hir::LifetimeName::Static),\n+            x if x == \"'_\" => match self.anonymous_lifetime_mode {\n+                AnonymousLifetimeMode::CreateParameter => {\n+                    let fresh_name = self.collect_fresh_in_band_lifetime(l.span);\n+                    self.new_named_lifetime(l.id, l.span, fresh_name)\n+                }\n+\n+                AnonymousLifetimeMode::PassThrough => {\n+                    self.new_named_lifetime(l.id, l.span, hir::LifetimeName::Underscore)\n+                }\n+            },\n             name => {\n                 self.maybe_collect_in_band_lifetime(l.span, name);\n-                hir::LifetimeName::Name(name)\n+                self.new_named_lifetime(l.id, l.span, hir::LifetimeName::Name(name))\n             }\n-        };\n+        }\n+    }\n \n+    fn new_named_lifetime(\n+        &mut self,\n+        id: NodeId,\n+        span: Span,\n+        name: hir::LifetimeName,\n+    ) -> hir::Lifetime {\n         hir::Lifetime {\n-            id: self.lower_node_id(l.id).node_id,\n-            name,\n-            span: l.span,\n+            id: self.lower_node_id(id).node_id,\n+            span,\n+            name: name,\n         }\n     }\n \n@@ -2115,9 +2218,12 @@ impl<'a> LoweringContext<'a> {\n                         let body = this.lower_block(body, false);\n                         this.expr_block(body, ThinVec::new())\n                     });\n-                    let (generics, fn_decl) = this.add_in_band_defs(generics, fn_def_id, |this| {\n-                        this.lower_fn_decl(decl, Some(fn_def_id), true)\n-                    });\n+                    let (generics, fn_decl) = this.add_in_band_defs(\n+                        generics,\n+                        fn_def_id,\n+                        AnonymousLifetimeMode::PassThrough,\n+                        |this| this.lower_fn_decl(decl, Some(fn_def_id), true),\n+                    );\n \n                     hir::ItemFn(\n                         fn_decl,\n@@ -2178,8 +2284,11 @@ impl<'a> LoweringContext<'a> {\n                 // method, it will not be considered an in-band\n                 // lifetime to be added, but rather a reference to a\n                 // parent lifetime.\n-                let (generics, (trait_ref, lowered_ty)) =\n-                    self.add_in_band_defs(ast_generics, def_id, |this| {\n+                let (generics, (trait_ref, lowered_ty)) = self.add_in_band_defs(\n+                    ast_generics,\n+                    def_id,\n+                    AnonymousLifetimeMode::CreateParameter,\n+                    |this| {\n                         let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n                             this.lower_trait_ref(trait_ref, ImplTraitContext::Disallowed)\n                         });\n@@ -2193,7 +2302,8 @@ impl<'a> LoweringContext<'a> {\n                         let lowered_ty = this.lower_ty(ty, ImplTraitContext::Disallowed);\n \n                         (trait_ref, lowered_ty)\n-                    });\n+                    },\n+                );\n \n                 let new_impl_items = self.with_in_scope_lifetime_defs(\n                     ast_generics.params.iter().filter_map(|p| match p {\n@@ -2378,25 +2488,35 @@ impl<'a> LoweringContext<'a> {\n                 ),\n                 TraitItemKind::Method(ref sig, None) => {\n                     let names = this.lower_fn_args_to_names(&sig.decl);\n-                    this.add_in_band_defs(&i.generics, trait_item_def_id, |this| {\n-                        hir::TraitItemKind::Method(\n-                            this.lower_method_sig(sig, trait_item_def_id, false),\n-                            hir::TraitMethod::Required(names),\n-                        )\n-                    })\n+                    this.add_in_band_defs(\n+                        &i.generics,\n+                        trait_item_def_id,\n+                        AnonymousLifetimeMode::PassThrough,\n+                        |this| {\n+                            hir::TraitItemKind::Method(\n+                                this.lower_method_sig(sig, trait_item_def_id, false),\n+                                hir::TraitMethod::Required(names),\n+                            )\n+                        },\n+                    )\n                 }\n                 TraitItemKind::Method(ref sig, Some(ref body)) => {\n                     let body_id = this.lower_body(Some(&sig.decl), |this| {\n                         let body = this.lower_block(body, false);\n                         this.expr_block(body, ThinVec::new())\n                     });\n \n-                    this.add_in_band_defs(&i.generics, trait_item_def_id, |this| {\n-                        hir::TraitItemKind::Method(\n-                            this.lower_method_sig(sig, trait_item_def_id, false),\n-                            hir::TraitMethod::Provided(body_id),\n-                        )\n-                    })\n+                    this.add_in_band_defs(\n+                        &i.generics,\n+                        trait_item_def_id,\n+                        AnonymousLifetimeMode::PassThrough,\n+                        |this| {\n+                            hir::TraitItemKind::Method(\n+                                this.lower_method_sig(sig, trait_item_def_id, false),\n+                                hir::TraitMethod::Provided(body_id),\n+                            )\n+                        },\n+                    )\n                 }\n                 TraitItemKind::Type(ref bounds, ref default) => (\n                     this.lower_generics(&i.generics),\n@@ -2470,12 +2590,21 @@ impl<'a> LoweringContext<'a> {\n                     });\n                     let impl_trait_return_allow = !this.is_in_trait_impl;\n \n-                    this.add_in_band_defs(&i.generics, impl_item_def_id, |this| {\n-                        hir::ImplItemKind::Method(\n-                            this.lower_method_sig(sig, impl_item_def_id, impl_trait_return_allow),\n-                            body_id,\n-                        )\n-                    })\n+                    this.add_in_band_defs(\n+                        &i.generics,\n+                        impl_item_def_id,\n+                        AnonymousLifetimeMode::PassThrough,\n+                        |this| {\n+                            hir::ImplItemKind::Method(\n+                                this.lower_method_sig(\n+                                    sig,\n+                                    impl_item_def_id,\n+                                    impl_trait_return_allow,\n+                                ),\n+                                body_id,\n+                            )\n+                        },\n+                    )\n                 }\n                 ImplItemKind::Type(ref ty) => (\n                     this.lower_generics(&i.generics),\n@@ -2598,14 +2727,18 @@ impl<'a> LoweringContext<'a> {\n                 attrs: this.lower_attrs(&i.attrs),\n                 node: match i.node {\n                     ForeignItemKind::Fn(ref fdec, ref generics) => {\n-                        let (generics, (fn_dec, fn_args)) =\n-                            this.add_in_band_defs(generics, def_id, |this| {\n+                        let (generics, (fn_dec, fn_args)) = this.add_in_band_defs(\n+                            generics,\n+                            def_id,\n+                            AnonymousLifetimeMode::PassThrough,\n+                            |this| {\n                                 (\n                                     // Disallow impl Trait in foreign items\n                                     this.lower_fn_decl(fdec, None, false),\n                                     this.lower_fn_args_to_names(fdec),\n                                 )\n-                            });\n+                            },\n+                        );\n \n                         hir::ForeignItemFn(fn_dec, fn_args, generics)\n                     }\n@@ -4017,22 +4150,71 @@ impl<'a> LoweringContext<'a> {\n     /// Invoked to create the lifetime argument for a type `&T`\n     /// with no explicit lifetime.\n     fn elided_ref_lifetime(&mut self, span: Span) -> hir::Lifetime {\n-        self.new_implicit_lifetime(span)\n+        match self.anonymous_lifetime_mode {\n+            // Intercept when we are in an impl header and introduce an in-band lifetime.\n+            // Hence `impl Foo for &u32` becomes `impl<'f> Foo for &'f u32` for some fresh\n+            // `'f`.\n+            AnonymousLifetimeMode::CreateParameter => {\n+                let fresh_name = self.collect_fresh_in_band_lifetime(span);\n+                hir::Lifetime {\n+                    id: self.next_id().node_id,\n+                    span,\n+                    name: fresh_name,\n+                }\n+            }\n+\n+            AnonymousLifetimeMode::PassThrough => self.new_implicit_lifetime(span),\n+        }\n     }\n \n     /// Invoked to create the lifetime argument(s) for a path like\n     /// `std::cell::Ref<T>`; note that implicit lifetimes in these\n     /// sorts of cases are deprecated. This may therefore report a warning or an\n     /// error, depending on the mode.\n     fn elided_path_lifetimes(&mut self, span: Span, count: usize) -> P<[hir::Lifetime]> {\n-        (0..count).map(|_| self.new_implicit_lifetime(span)).collect()\n+        match self.anonymous_lifetime_mode {\n+            // NB. We intentionally ignore the create-parameter mode here\n+            // and instead \"pass through\" to resolve-lifetimes, which will then\n+            // report an error. This is because we don't want to support\n+            // impl elision for deprecated forms like\n+            //\n+            //     impl Foo for std::cell::Ref<u32> // note lack of '_\n+            AnonymousLifetimeMode::CreateParameter => {}\n+\n+            // This is the normal case.\n+            AnonymousLifetimeMode::PassThrough => {}\n+        }\n+\n+        (0..count)\n+            .map(|_| self.new_implicit_lifetime(span))\n+            .collect()\n     }\n \n     /// Invoked to create the lifetime argument(s) for an elided trait object\n     /// bound, like the bound in `Box<dyn Debug>`. This method is not invoked\n     /// when the bound is written, even if it is written with `'_` like in\n     /// `Box<dyn Debug + '_>`. In those cases, `lower_lifetime` is invoked.\n     fn elided_dyn_bound(&mut self, span: Span) -> hir::Lifetime {\n+        match self.anonymous_lifetime_mode {\n+            // NB. We intentionally ignore the create-parameter mode here.\n+            // and instead \"pass through\" to resolve-lifetimes, which will apply\n+            // the object-lifetime-defaulting rules. Elided object lifetime defaults\n+            // do not act like other elided lifetimes. In other words, given this:\n+            //\n+            //     impl Foo for Box<dyn Debug>\n+            //\n+            // we do not introduce a fresh `'_` to serve as the bound, but instead\n+            // ultimately translate to the equivalent of:\n+            //\n+            //     impl Foo for Box<dyn Debug + 'static>\n+            //\n+            // `resolve_lifetime` has the code to make that happen.\n+            AnonymousLifetimeMode::CreateParameter => {}\n+\n+            // This is the normal case.\n+            AnonymousLifetimeMode::PassThrough => {}\n+        }\n+\n         self.new_implicit_lifetime(span)\n     }\n "}, {"sha": "c35b79937cdccf6853b986d9b1684c7a9b23f741", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -209,6 +209,21 @@ pub enum LifetimeName {\n     /// User typed `'_`.\n     Underscore,\n \n+    /// Synthetic name generated when user elided a lifetime in an impl header,\n+    /// e.g. the lifetimes in cases like these:\n+    ///\n+    ///     impl Foo for &u32\n+    ///     impl Foo<'_> for u32\n+    ///\n+    /// in that case, we rewrite to\n+    ///\n+    ///     impl<'f> Foo for &'f u32\n+    ///     impl<'f> Foo<'f> for u32\n+    ///\n+    /// where `'f` is something like `Fresh(0)`. The indices are\n+    /// unique per impl, but not necessarily continuous.\n+    Fresh(usize),\n+\n     /// User wrote `'static`\n     Static,\n \n@@ -221,7 +236,7 @@ impl LifetimeName {\n         use self::LifetimeName::*;\n         match *self {\n             Implicit => keywords::Invalid.name(),\n-            Underscore => keywords::UnderscoreLifetime.name(),\n+            Fresh(_) | Underscore => keywords::UnderscoreLifetime.name(),\n             Static => keywords::StaticLifetime.name(),\n             Name(name) => name,\n         }\n@@ -242,7 +257,13 @@ impl Lifetime {\n         use self::LifetimeName::*;\n         match self.name {\n             Implicit | Underscore => true,\n-            Static | Name(_) => false,\n+\n+            // It might seem surprising that `Fresh(_)` counts as\n+            // *not* elided -- but this is because, as far as the code\n+            // in the compiler is concerned -- `Fresh(_)` variants act\n+            // equivalently to \"some fresh name\". They correspond to\n+            // early-bound regions on an impl, in other words.\n+            Fresh(_) | Static | Name(_) => false,\n         }\n     }\n "}, {"sha": "c3b3e10201f9920665028f7a8bb920035a09be43", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -145,6 +145,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::ImplItemId {\n impl_stable_hash_for!(enum hir::LifetimeName {\n     Implicit,\n     Underscore,\n+    Fresh(index),\n     Static,\n     Name(name)\n });"}, {"sha": "ceda72dcd7ae0ab51976be10386baf0c636bd5fb", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -582,7 +582,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         // cc #48468\n                         self.resolve_elided_lifetimes(slice::from_ref(lifetime), false)\n                     }\n-                    LifetimeName::Static | LifetimeName::Name(_) => {\n+                    LifetimeName::Fresh(_) | LifetimeName::Static | LifetimeName::Name(_) => {\n                         // If the user wrote an explicit name, use that.\n                         self.visit_lifetime(lifetime);\n                     }\n@@ -2086,7 +2086,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         );\n                         err.emit();\n                     }\n-                    hir::LifetimeName::Implicit | hir::LifetimeName::Name(_) => {}\n+                    hir::LifetimeName::Fresh(_) | hir::LifetimeName::Implicit |\n+                    hir::LifetimeName::Name(_) => {}\n                 }\n             }\n \n@@ -2138,7 +2139,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             ))\n                             .emit();\n                     }\n-                    hir::LifetimeName::Implicit | hir::LifetimeName::Name(_) => {\n+                    hir::LifetimeName::Fresh(_) | hir::LifetimeName::Implicit |\n+                    hir::LifetimeName::Name(_) => {\n                         self.resolve_lifetime_ref(bound);\n                     }\n                 }"}, {"sha": "a02b3e800097e330e7ef56b748ba1adb84480fae", "filename": "src/test/ui/feature-gate-in_band_lifetimes-impl.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes-impl.rs?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(warnings)]\n+#![feature(underscore_lifetimes)]\n+\n+trait MyTrait<'a> { }\n+\n+impl<'a> MyTrait<'a> for &u32 { }\n+//~^ ERROR missing lifetime specifier\n+\n+impl<'a> MyTrait<'_> for &'a f32 { }\n+//~^ ERROR missing lifetime specifier\n+\n+fn main() {}"}, {"sha": "e32a06c3ce4563e92e37a2ea85f1a21baba971e1", "filename": "src/test/ui/feature-gate-in_band_lifetimes-impl.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes-impl.stderr?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -0,0 +1,15 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/feature-gate-in_band_lifetimes-impl.rs:16:26\n+   |\n+LL | impl<'a> MyTrait<'a> for &u32 { }\n+   |                          ^ expected lifetime parameter\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/feature-gate-in_band_lifetimes-impl.rs:19:18\n+   |\n+LL | impl<'a> MyTrait<'_> for &'a f32 { }\n+   |                  ^^ expected lifetime parameter\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "54f38b2e729b1dd3dcab6c0384e3f2d3feed32a4", "filename": "src/test/ui/in-band-lifetimes/impl/assoc-type.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fassoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fassoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fassoc-type.rs?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we do not yet support elision in associated types, even\n+// when there is just one name we could take from the impl header.\n+\n+#![allow(warnings)]\n+\n+#![feature(in_band_lifetimes)]\n+#![feature(underscore_lifetimes)]\n+\n+trait MyTrait {\n+    type Output;\n+}\n+\n+impl MyTrait for &i32 {\n+    type Output = &i32;\n+    //~^ ERROR missing lifetime specifier\n+}\n+\n+impl MyTrait for &u32 {\n+    type Output = &'_ i32;\n+    //~^ ERROR missing lifetime specifier\n+}\n+\n+// This is what you have to do:\n+impl MyTrait for &'a f32 {\n+    type Output = &'a f32;\n+}\n+\n+fn main() { }"}, {"sha": "909b86daef0fc8eb71dad61ba1a6dec65a84a646", "filename": "src/test/ui/in-band-lifetimes/impl/assoc-type.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fassoc-type.stderr?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -0,0 +1,15 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/assoc-type.rs:24:19\n+   |\n+LL |     type Output = &i32;\n+   |                   ^ expected lifetime parameter\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/assoc-type.rs:29:20\n+   |\n+LL |     type Output = &'_ i32;\n+   |                    ^^ expected lifetime parameter\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "e839248b0e3178304b896b8e8c2ce4510b4f7923", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.rs?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `impl MyTrait<'_> for &i32` is equivalent to `impl<'a,\n+// 'b> MyTrait<'a> for &'b i32`.\n+\n+#![allow(warnings)]\n+\n+#![feature(dyn_trait)]\n+#![feature(in_band_lifetimes)]\n+#![feature(underscore_lifetimes)]\n+\n+use std::fmt::Debug;\n+\n+// Equivalent to `Box<dyn Debug + 'static>`:\n+trait StaticTrait { }\n+impl StaticTrait for Box<dyn Debug> { }\n+\n+// Equivalent to `Box<dyn Debug + 'static>`:\n+trait NotStaticTrait { }\n+impl NotStaticTrait for Box<dyn Debug + '_> { }\n+\n+fn static_val<T: StaticTrait>(_: T) {\n+}\n+\n+fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n+    static_val(x); //~ ERROR cannot infer\n+}\n+\n+fn not_static_val<T: NotStaticTrait>(_: T) {\n+}\n+\n+fn with_dyn_debug_not_static<'a>(x: Box<dyn Debug + 'a>) {\n+    not_static_val(x); // OK\n+}\n+\n+fn main() {\n+}"}, {"sha": "0054ca3d1a5bf22f84c47897bbf7e94a72a32602", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -0,0 +1,22 @@\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+  --> $DIR/dyn-trait.rs:34:16\n+   |\n+LL |     static_val(x); //~ ERROR cannot infer\n+   |                ^\n+   |\n+note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 33:1...\n+  --> $DIR/dyn-trait.rs:33:1\n+   |\n+LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...so that the expression is assignable:\n+           expected std::boxed::Box<std::fmt::Debug>\n+              found std::boxed::Box<std::fmt::Debug + 'a>\n+   = note: but, the lifetime must be valid for the static lifetime...\n+   = note: ...so that the types are compatible:\n+           expected StaticTrait\n+              found StaticTrait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "fa1b45238895f0c837f2fcadbc54b419188a73ac", "filename": "src/test/ui/in-band-lifetimes/impl/path-elided.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-elided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-elided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-elided.rs?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![allow(warnings)]\n+\n+#![feature(in_band_lifetimes)]\n+#![feature(underscore_lifetimes)]\n+\n+trait MyTrait { }\n+\n+struct Foo<'a> { x: &'a u32 }\n+\n+impl MyTrait for Foo {\n+    //~^ ERROR missing lifetime specifier\n+}\n+\n+fn main() {}"}, {"sha": "19e69c61a0337f0111e8647a630be20017ed4ae2", "filename": "src/test/ui/in-band-lifetimes/impl/path-elided.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-elided.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-elided.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-elided.stderr?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -0,0 +1,9 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/path-elided.rs:19:18\n+   |\n+LL | impl MyTrait for Foo {\n+   |                  ^^^ expected lifetime parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "56f2d93d9e0a9e0865ced35d076e2e987d7fc55c", "filename": "src/test/ui/in-band-lifetimes/impl/path-underscore.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-underscore.rs?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `impl MyTrait for Foo<'_>` works.\n+\n+// run-pass\n+\n+#![allow(warnings)]\n+\n+#![feature(in_band_lifetimes)]\n+#![feature(underscore_lifetimes)]\n+\n+trait MyTrait { }\n+\n+struct Foo<'a> { x: &'a u32 }\n+\n+impl MyTrait for Foo<'_> {\n+}\n+\n+fn impls_my_trait<T: MyTrait>() { }\n+\n+fn impls_my_trait_val<T: MyTrait>(_: T) {\n+    impls_my_trait::<T>();\n+}\n+\n+fn random_where_clause()\n+where for<'a> Foo<'a>: MyTrait { }\n+\n+fn main() {\n+    let x = 22;\n+    let f = Foo { x: &x };\n+\n+    // This type is `Foo<'x>` for a local lifetime `'x`; so the impl\n+    // must apply to any lifetime to apply to this.\n+    impls_my_trait_val(f);\n+\n+    impls_my_trait::<Foo<'static>>();\n+\n+    random_where_clause();\n+}"}, {"sha": "1b1035abeba36acdb1227686909b4286abc0a552", "filename": "src/test/ui/in-band-lifetimes/impl/ref-underscore.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fref-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fref-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fref-underscore.rs?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `impl MyTrait for &i32` works and is equivalent to any lifetime.\n+\n+// run-pass\n+\n+#![allow(warnings)]\n+\n+#![feature(in_band_lifetimes)]\n+#![feature(underscore_lifetimes)]\n+\n+trait MyTrait { }\n+\n+impl MyTrait for &i32 {\n+}\n+\n+fn impls_my_trait<T: MyTrait>() { }\n+\n+fn impls_my_trait_val<T: MyTrait>(_: T) {\n+    impls_my_trait::<T>();\n+}\n+\n+fn random_where_clause()\n+where for<'a> &'a i32: MyTrait { }\n+\n+fn main() {\n+    let x = 22;\n+    let f = &x;\n+\n+    impls_my_trait_val(f);\n+\n+    impls_my_trait::<&'static i32>();\n+\n+    random_where_clause();\n+}"}, {"sha": "7594d66e0783953e9c7a471ec0711bc19b733b2c", "filename": "src/test/ui/in-band-lifetimes/impl/trait-elided.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-elided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-elided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-elided.rs?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![allow(warnings)]\n+\n+#![feature(in_band_lifetimes)]\n+#![feature(underscore_lifetimes)]\n+\n+trait MyTrait<'a> { }\n+\n+impl MyTrait for u32 {\n+    //~^ ERROR missing lifetime specifier\n+}\n+\n+fn main() {}"}, {"sha": "bb301882868a483a0f62f0a932ec406ef2b77e5a", "filename": "src/test/ui/in-band-lifetimes/impl/trait-elided.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-elided.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-elided.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-elided.stderr?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -0,0 +1,9 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/trait-elided.rs:17:6\n+   |\n+LL | impl MyTrait for u32 {\n+   |      ^^^^^^^ expected lifetime parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "077e33c1efde240ca2bb242676e2ca24d99faf9a", "filename": "src/test/ui/in-band-lifetimes/impl/trait-underscore.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94468dac6350a29dc2eb1eed01308ec78224f7ba/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-underscore.rs?ref=94468dac6350a29dc2eb1eed01308ec78224f7ba", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `impl MyTrait<'_> for &i32` is equivalent to `impl<'a,\n+// 'b> MyTrait<'a> for &'b i32`.\n+//\n+// run-pass\n+\n+#![allow(warnings)]\n+\n+#![feature(in_band_lifetimes)]\n+#![feature(underscore_lifetimes)]\n+\n+trait MyTrait<'a> { }\n+\n+// This is equivalent to `MyTrait<'a> for &'b i32`, which is proven by\n+// the code below.\n+impl MyTrait<'_> for &i32 {\n+}\n+\n+// When called, T will be `&'x i32` for some `'x`, so since we can\n+// prove that `&'x i32: for<'a> MyTrait<'a>, then we know that the\n+// lifetime parameter above is disconnected.\n+fn impls_my_trait<T: for<'a> MyTrait<'a>>() { }\n+\n+fn impls_my_trait_val<T: for<'a> MyTrait<'a>>(_: T) {\n+    impls_my_trait::<T>();\n+}\n+\n+fn random_where_clause()\n+where for<'a, 'b> &'a i32: MyTrait<'b> { }\n+\n+fn main() {\n+    let x = 22;\n+    let f = &x;\n+    impls_my_trait_val(f);\n+\n+    impls_my_trait::<&'static i32>();\n+\n+    random_where_clause();\n+}"}]}