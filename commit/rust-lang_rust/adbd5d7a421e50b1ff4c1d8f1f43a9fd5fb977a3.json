{"sha": "adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYmQ1ZDdhNDIxZTUwYjFmZjRjMWQ4ZjFmNDNhOWZkNWZiOTc3YTM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-06-23T23:34:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-25T00:22:57Z"}, "message": "core: Add stability attributes to Clone\n\nThe following are tagged 'unstable'\n\n- core::clone\n- Clone\n- Clone::clone\n- impl Clone for Arc\n- impl Clone for arc::Weak\n- impl Clone for Rc\n- impl Clone for rc::Weak\n- impl Clone for Vec\n- impl Clone for Cell\n- impl Clone for RefCell\n- impl Clone for small tuples\n\nThe following are tagged 'experimental'\n\n- Clone::clone_from - may not provide enough utility\n- impls for various extern \"Rust\" fns - may not handle lifetimes correctly\n\nSee https://github.com/rust-lang/rust/wiki/Meeting-API-review-2014-06-23#clone", "tree": {"sha": "603820f3e0b982f105a21e9ed58ec5fae92c52e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/603820f3e0b982f105a21e9ed58ec5fae92c52e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3", "html_url": "https://github.com/rust-lang/rust/commit/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ea2efece148d3ff4b4739983a14603f1d80a02b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea2efece148d3ff4b4739983a14603f1d80a02b", "html_url": "https://github.com/rust-lang/rust/commit/1ea2efece148d3ff4b4739983a14603f1d80a02b"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "6af4083edb2cefe224bbb375c6f1a4c6e6b01744", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3", "patch": "@@ -110,6 +110,7 @@ impl<T: Share + Send> Arc<T> {\n     }\n }\n \n+#[unstable]\n impl<T: Share + Send> Clone for Arc<T> {\n     /// Duplicate an atomically reference counted wrapper.\n     ///\n@@ -236,6 +237,7 @@ impl<T: Share + Send> Weak<T> {\n     }\n }\n \n+#[unstable]\n impl<T: Share + Send> Clone for Weak<T> {\n     #[inline]\n     fn clone(&self) -> Weak<T> {"}, {"sha": "6f5d3293556234041095a95ea4025f5b49e0916b", "filename": "src/liballoc/owned.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Fliballoc%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Fliballoc%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fowned.rs?ref=adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3", "patch": "@@ -42,6 +42,7 @@ impl<T: Default> Default for Box<T> {\n     fn default() -> Box<T> { box Default::default() }\n }\n \n+#[unstable]\n impl<T: Clone> Clone for Box<T> {\n     /// Return a copy of the owned box.\n     #[inline]"}, {"sha": "a3ca72f1547eda84a9146b906e1882436e9aa854", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3", "patch": "@@ -143,6 +143,7 @@ impl<T> Drop for Rc<T> {\n     }\n }\n \n+#[unstable]\n impl<T> Clone for Rc<T> {\n     #[inline]\n     fn clone(&self) -> Rc<T> {\n@@ -224,6 +225,7 @@ impl<T> Drop for Weak<T> {\n     }\n }\n \n+#[unstable]\n impl<T> Clone for Weak<T> {\n     #[inline]\n     fn clone(&self) -> Weak<T> {"}, {"sha": "0ee0c5b87aeaafe6990f92f8e2f640296be8a06e", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3", "patch": "@@ -316,6 +316,7 @@ impl<T: Clone> Vec<T> {\n     }\n }\n \n+#[unstable]\n impl<T:Clone> Clone for Vec<T> {\n     fn clone(&self) -> Vec<T> {\n         let len = self.len;"}, {"sha": "ab701b76026f432a3fb81bf24aa9774169e43099", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3", "patch": "@@ -192,6 +192,7 @@ impl<T:Copy> Cell<T> {\n     }\n }\n \n+#[unstable]\n impl<T:Copy> Clone for Cell<T> {\n     fn clone(&self) -> Cell<T> {\n         Cell::new(self.get())\n@@ -298,6 +299,7 @@ impl<T> RefCell<T> {\n     }\n }\n \n+#[unstable]\n impl<T: Clone> Clone for RefCell<T> {\n     fn clone(&self) -> RefCell<T> {\n         RefCell::new(self.borrow().clone())"}, {"sha": "04f01db314797a33e45fe32ac110458a99e8e75d", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3", "patch": "@@ -21,6 +21,8 @@ the `clone` method.\n \n */\n \n+#![unstable]\n+\n /// A common trait for cloning an object.\n pub trait Clone {\n     /// Returns a copy of the value. The contents of owned pointers\n@@ -34,6 +36,7 @@ pub trait Clone {\n     /// but can be overridden to reuse the resources of `a` to avoid unnecessary\n     /// allocations.\n     #[inline(always)]\n+    #[experimental = \"this function is mostly unused\"]\n     fn clone_from(&mut self, source: &Self) {\n         *self = source.clone()\n     }\n@@ -88,6 +91,7 @@ clone_impl!(char)\n \n macro_rules! extern_fn_clone(\n     ($($A:ident),*) => (\n+        #[experimental = \"this may not be sufficient for fns with region parameters\"]\n         impl<$($A,)* ReturnType> Clone for extern \"Rust\" fn($($A),*) -> ReturnType {\n             /// Return a copy of a function pointer\n             #[inline]"}, {"sha": "3508da5d516289c7ef3ceaae7ba3629c94a1ba74", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3", "patch": "@@ -104,6 +104,7 @@ macro_rules! tuple_impls {\n                 )+\n             }\n \n+            #[unstable]\n             impl<$($T:Clone),+> Clone for ($($T,)+) {\n                 fn clone(&self) -> ($($T,)+) {\n                     ($(self.$refN().clone(),)+)"}, {"sha": "0f30e7231b12a7cb5f70999d545c637b1402b6d7", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=adbd5d7a421e50b1ff4c1d8f1f43a9fd5fb977a3", "patch": "@@ -37,6 +37,7 @@ pub struct Gc<T> {\n     marker: marker::NoSend,\n }\n \n+#[unstable]\n impl<T> Clone for Gc<T> {\n     /// Clone the pointer only\n     #[inline]"}]}