{"sha": "d0305b3d00f54aead795ca32314a6177849d900f", "node_id": "C_kwDOAAsO6NoAKGQwMzA1YjNkMDBmNTRhZWFkNzk1Y2EzMjMxNGE2MTc3ODQ5ZDkwMGY", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-09-19T12:54:16Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-09-26T08:13:44Z"}, "message": "replace stabilization placeholders", "tree": {"sha": "b461175422970faf5b4978e2f347d38fe8be53f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b461175422970faf5b4978e2f347d38fe8be53f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0305b3d00f54aead795ca32314a6177849d900f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmMxXzgACgkQzXazX3c0\ndp7QXQ/+KhBXezYxSltg1mAsNgyYzgRtkeEuRcSWbvxuYQEkIBct95/Pc93ZEmFR\nI0Zp3lR39PU1JOOMgPBgA4J/pHQlSx4/m5Y/YUjRe40pKGia/RlDaodIMV5/ggTh\nbPuz3JNIUSyKrGZ3umpzpOFmKY2dCfwlD7t7wNvkmVuCJ8EsDD4pi6BnYpgs82ww\n5ejrJlGoJQm3ItRGp4ZoUwKb+GDSX+6XcGeDYqTrH41V8FOacZswZntA45s7q4xz\nWGf0I7nVlc1r0duRqKo8Tm41+M/3Nm8n2/WooQbWoDbGgn4wTynW+M1Bco963tnA\n39fJrAFcsy5khlrLf27Ps9gNKpARZR2CEmTOsCRKWNpQnaewCSg4mgi+3L+cVsaX\nFTjP4cn4SEy8fNwg/G1DPiX4wl7SUyNbubS3nIOt1FAOAZ4VUzmBfZrTecEICoux\n1nSFniYyAcrDcWZ81Jk8oQCuUDbcpvY18rkTHm9R1wEePtbd1q1n700d1QRJRMq5\nlDRevao/j/a/s5DgNZj2d029y71fxfSLNGD+vvYEWEsyEVVnOICbstkkHCNYpFYq\nJAdmSBjMnqfyZxXmn3ImSlvHUeNjFcDw2/0ydhHELI8a3+2zYEFvhkKaH7pwZ2p7\nChO7SsOoX2b/tcPOsKFVJ9KwNWzgPSJGKkfKsDfrf01ZrF01UVk=\n=aqP9\n-----END PGP SIGNATURE-----", "payload": "tree b461175422970faf5b4978e2f347d38fe8be53f9\nparent 72f4923979979abb5d6b975353e9b3053d257e60\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1663592056 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1664180024 +0200\n\nreplace stabilization placeholders\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0305b3d00f54aead795ca32314a6177849d900f", "html_url": "https://github.com/rust-lang/rust/commit/d0305b3d00f54aead795ca32314a6177849d900f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0305b3d00f54aead795ca32314a6177849d900f/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72f4923979979abb5d6b975353e9b3053d257e60", "url": "https://api.github.com/repos/rust-lang/rust/commits/72f4923979979abb5d6b975353e9b3053d257e60", "html_url": "https://github.com/rust-lang/rust/commit/72f4923979979abb5d6b975353e9b3053d257e60"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "8efb7ccc1c71c7f60fbcac255e816ed4516d7b69", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0305b3d00f54aead795ca32314a6177849d900f/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0305b3d00f54aead795ca32314a6177849d900f/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=d0305b3d00f54aead795ca32314a6177849d900f", "patch": "@@ -162,7 +162,7 @@ declare_features! (\n     /// Allows capturing variables in scope using format_args!\n     (accepted, format_args_capture, \"1.58.0\", Some(67984), None),\n     /// Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n-    (accepted, generic_associated_types, \"CURRENT_RUSTC_VERSION\", Some(44265), None),\n+    (accepted, generic_associated_types, \"1.65.0\", Some(44265), None),\n     /// Allows attributes on lifetime/type formal parameters in generics (RFC 1327).\n     (accepted, generic_param_attrs, \"1.27.0\", Some(48848), None),\n     /// Allows the `#[global_allocator]` attribute.\n@@ -189,9 +189,9 @@ declare_features! (\n     /// especially around globs and shadowing (RFC 1560).\n     (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n     /// Allows `'a: { break 'a; }`.\n-    (accepted, label_break_value, \"CURRENT_RUSTC_VERSION\", Some(48594), None),\n+    (accepted, label_break_value, \"1.65.0\", Some(48594), None),\n     /// Allows `let...else` statements.\n-    (accepted, let_else, \"CURRENT_RUSTC_VERSION\", Some(87335), None),\n+    (accepted, let_else, \"1.65.0\", Some(87335), None),\n     /// Allows `break {expr}` with a value inside `loop`s.\n     (accepted, loop_break_value, \"1.19.0\", Some(37339), None),\n     /// Allows use of `?` as the Kleene \"at most one\" operator in macros."}, {"sha": "71ad54291b2863f8b244e3b720d1fa714365194d", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0305b3d00f54aead795ca32314a6177849d900f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0305b3d00f54aead795ca32314a6177849d900f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=d0305b3d00f54aead795ca32314a6177849d900f", "patch": "@@ -341,7 +341,7 @@ declare_features! (\n     /// Allows to use the `#[cmse_nonsecure_entry]` attribute.\n     (active, cmse_nonsecure_entry, \"1.48.0\", Some(75835), None),\n     /// Allows use of the `#[collapse_debuginfo]` attribute.\n-    (active, collapse_debuginfo, \"CURRENT_RUSTC_VERSION\", Some(100758), None),\n+    (active, collapse_debuginfo, \"1.65.0\", Some(100758), None),\n     /// Allows `async {}` expressions in const contexts.\n     (active, const_async_blocks, \"1.53.0\", Some(85368), None),\n     // Allows limiting the evaluation steps of const expressions\n@@ -387,7 +387,7 @@ declare_features! (\n     /// Allows `#[doc(masked)]`.\n     (active, doc_masked, \"1.21.0\", Some(44027), None),\n     /// Allows `dyn* Trait` objects.\n-    (incomplete, dyn_star, \"CURRENT_RUSTC_VERSION\", Some(91611), None),\n+    (incomplete, dyn_star, \"1.65.0\", Some(91611), None),\n     /// Allows `X..Y` patterns.\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n     /// Allows exhaustive pattern matching on types that contain uninhabited types.\n@@ -403,7 +403,7 @@ declare_features! (\n     /// Allows using `#[repr(align(...))]` on function items\n     (active, fn_align, \"1.53.0\", Some(82232), None),\n     /// Allows generators to be cloned.\n-    (active, generator_clone, \"CURRENT_RUSTC_VERSION\", Some(95360), None),\n+    (active, generator_clone, \"1.65.0\", Some(95360), None),\n     /// Allows defining generators.\n     (active, generators, \"1.21.0\", Some(43122), None),\n     /// Infer generic args for both consts and types.\n@@ -484,7 +484,7 @@ declare_features! (\n     /// Allows macro attributes on expressions, statements and non-inline modules.\n     (active, proc_macro_hygiene, \"1.30.0\", Some(54727), None),\n     /// Allows the use of raw-dylibs (RFC 2627).\n-    (active, raw_dylib, \"CURRENT_RUSTC_VERSION\", Some(58713), None),\n+    (active, raw_dylib, \"1.65.0\", Some(58713), None),\n     /// Allows `&raw const $place_expr` and `&raw mut $place_expr` expressions.\n     (active, raw_ref_op, \"1.41.0\", Some(64490), None),\n     /// Allows using the `#[register_tool]` attribute.\n@@ -494,7 +494,7 @@ declare_features! (\n     /// Allows `repr(simd)` and importing the various simd intrinsics.\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n     /// Allows return-position `impl Trait` in traits.\n-    (incomplete, return_position_impl_trait_in_trait, \"CURRENT_RUSTC_VERSION\", Some(91611), None),\n+    (incomplete, return_position_impl_trait_in_trait, \"1.65.0\", Some(91611), None),\n     /// Allows `extern \"rust-cold\"`.\n     (active, rust_cold_cc, \"1.63.0\", Some(97544), None),\n     /// Allows the use of SIMD types in functions declared in `extern` blocks.\n@@ -528,7 +528,7 @@ declare_features! (\n     /// not changed from prior instances of the same struct (RFC #2528)\n     (active, type_changing_struct_update, \"1.58.0\", Some(86555), None),\n     /// Enables rustc to generate code that instructs libstd to NOT ignore SIGPIPE.\n-    (active, unix_sigpipe, \"CURRENT_RUSTC_VERSION\", Some(97889), None),\n+    (active, unix_sigpipe, \"1.65.0\", Some(97889), None),\n     /// Allows unsized fn parameters.\n     (active, unsized_fn_params, \"1.49.0\", Some(48055), None),\n     /// Allows unsized rvalues at arguments and parameters."}, {"sha": "79a12801de29db5bf1d23615dd36cd28732a93ae", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0305b3d00f54aead795ca32314a6177849d900f/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0305b3d00f54aead795ca32314a6177849d900f/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=d0305b3d00f54aead795ca32314a6177849d900f", "patch": "@@ -164,7 +164,7 @@ declare_features! (\n     (removed, quote, \"1.33.0\", Some(29601), None, None),\n     (removed, reflect, \"1.0.0\", Some(27749), None, None),\n     /// Allows using the `#[register_attr]` attribute.\n-    (removed, register_attr, \"CURRENT_RUSTC_VERSION\", Some(66080), None,\n+    (removed, register_attr, \"1.65.0\", Some(66080), None,\n      Some(\"removed in favor of `#![register_tool]`\")),\n     /// Allows using the macros:\n     /// + `__diagnostic_used`"}, {"sha": "d29ae35614c1c3b1976a0a789932ee4d280d65af", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0305b3d00f54aead795ca32314a6177849d900f/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0305b3d00f54aead795ca32314a6177849d900f/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=d0305b3d00f54aead795ca32314a6177849d900f", "patch": "@@ -677,7 +677,7 @@ pub enum Bound<T> {\n impl<T> Bound<T> {\n     /// Converts from `&Bound<T>` to `Bound<&T>`.\n     #[inline]\n-    #[stable(feature = \"bound_as_ref_shared\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"bound_as_ref_shared\", since = \"1.65.0\")]\n     pub fn as_ref(&self) -> Bound<&T> {\n         match *self {\n             Included(ref x) => Included(x),"}, {"sha": "43e883b8bf718bb381fef5f247e606958809059d", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0305b3d00f54aead795ca32314a6177849d900f/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0305b3d00f54aead795ca32314a6177849d900f/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=d0305b3d00f54aead795ca32314a6177849d900f", "patch": "@@ -98,8 +98,8 @@ impl<T: ?Sized> *const T {\n     ///\n     /// This is a bit safer than `as` because it wouldn't silently change the type if the code is\n     /// refactored.\n-    #[stable(feature = \"ptr_const_cast\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"ptr_const_cast\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n+    #[rustc_const_stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n     pub const fn cast_mut(self) -> *mut T {\n         self as _\n     }"}, {"sha": "e277b8181754ea9c90b4e1cf13fa593813a80a3c", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0305b3d00f54aead795ca32314a6177849d900f/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0305b3d00f54aead795ca32314a6177849d900f/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=d0305b3d00f54aead795ca32314a6177849d900f", "patch": "@@ -103,8 +103,8 @@ impl<T: ?Sized> *mut T {\n     /// coercion.\n     ///\n     /// [`cast_mut`]: #method.cast_mut\n-    #[stable(feature = \"ptr_const_cast\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"ptr_const_cast\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n+    #[rustc_const_stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n     pub const fn cast_const(self) -> *const T {\n         self as _\n     }"}, {"sha": "5cf6ec8178928f710ff11c022271b4cac3488a48", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d0305b3d00f54aead795ca32314a6177849d900f/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0305b3d00f54aead795ca32314a6177849d900f/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=d0305b3d00f54aead795ca32314a6177849d900f", "patch": "@@ -58,7 +58,7 @@\n //! `RUST_LIB_BACKTRACE` or `RUST_BACKTRACE` at runtime might not actually change\n //! how backtraces are captured.\n \n-#![stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+#![stable(feature = \"backtrace\", since = \"1.65.0\")]\n \n #[cfg(test)]\n mod tests;\n@@ -104,29 +104,29 @@ use crate::vec::Vec;\n /// previous point in time. In some instances the `Backtrace` type may\n /// internally be empty due to configuration. For more information see\n /// `Backtrace::capture`.\n-#[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n #[must_use]\n pub struct Backtrace {\n     inner: Inner,\n }\n \n /// The current status of a backtrace, indicating whether it was captured or\n /// whether it is empty for some other reason.\n-#[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n #[non_exhaustive]\n #[derive(Debug, PartialEq, Eq)]\n pub enum BacktraceStatus {\n     /// Capturing a backtrace is not supported, likely because it's not\n     /// implemented for the current platform.\n-    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     Unsupported,\n     /// Capturing a backtrace has been disabled through either the\n     /// `RUST_LIB_BACKTRACE` or `RUST_BACKTRACE` environment variables.\n-    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     Disabled,\n     /// A backtrace has been captured and the `Backtrace` should print\n     /// reasonable information when rendered.\n-    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     Captured,\n }\n \n@@ -173,7 +173,7 @@ enum BytesOrWide {\n     Wide(Vec<u16>),\n }\n \n-#[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n impl fmt::Debug for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let capture = match &self.inner {\n@@ -289,7 +289,7 @@ impl Backtrace {\n     ///\n     /// To forcibly capture a backtrace regardless of environment variables, use\n     /// the `Backtrace::force_capture` function.\n-    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     #[inline(never)] // want to make sure there's a frame here to remove\n     pub fn capture() -> Backtrace {\n         if !Backtrace::enabled() {\n@@ -308,16 +308,16 @@ impl Backtrace {\n     /// Note that capturing a backtrace can be an expensive operation on some\n     /// platforms, so this should be used with caution in performance-sensitive\n     /// parts of code.\n-    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     #[inline(never)] // want to make sure there's a frame here to remove\n     pub fn force_capture() -> Backtrace {\n         Backtrace::create(Backtrace::force_capture as usize)\n     }\n \n     /// Forcibly captures a disabled backtrace, regardless of environment\n     /// variable configuration.\n-    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n+    #[rustc_const_stable(feature = \"backtrace\", since = \"1.65.0\")]\n     pub const fn disabled() -> Backtrace {\n         Backtrace { inner: Inner::Disabled }\n     }\n@@ -361,7 +361,7 @@ impl Backtrace {\n     /// Returns the status of this backtrace, indicating whether this backtrace\n     /// request was unsupported, disabled, or a stack trace was actually\n     /// captured.\n-    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     #[must_use]\n     pub fn status(&self) -> BacktraceStatus {\n         match self.inner {\n@@ -381,7 +381,7 @@ impl<'a> Backtrace {\n     }\n }\n \n-#[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n impl fmt::Display for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let capture = match &self.inner {"}, {"sha": "eeace2c43c4a4240c5225fa78c0c6c26f478897d", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0305b3d00f54aead795ca32314a6177849d900f/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0305b3d00f54aead795ca32314a6177849d900f/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=d0305b3d00f54aead795ca32314a6177849d900f", "patch": "@@ -1045,7 +1045,7 @@ pub trait Read {\n ///     Ok(())\n /// }\n /// ```\n-#[stable(feature = \"io_read_to_string\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"io_read_to_string\", since = \"1.65.0\")]\n pub fn read_to_string<R: Read>(mut reader: R) -> Result<String> {\n     let mut buf = String::new();\n     reader.read_to_string(&mut buf)?;"}]}