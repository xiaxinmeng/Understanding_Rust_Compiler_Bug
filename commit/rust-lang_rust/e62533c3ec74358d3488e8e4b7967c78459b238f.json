{"sha": "e62533c3ec74358d3488e8e4b7967c78459b238f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MjUzM2MzZWM3NDM1OGQzNDg4ZThlNGI3OTY3Yzc4NDU5YjIzOGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-20T16:09:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-20T16:09:22Z"}, "message": "Merge #7359\n\n7359: ItemTree: store a mapping from blocks to inner items r=jonas-schievink a=jonas-schievink\n\nTo do name resolution within block expressions, we need to know which inner items are located inside each block expression. This adds such a mapping to `ItemTree`, replacing the previous one, which was seemingly unused other than to access all the inner items.\r\n\r\nThis also assigns `AstId`s to block expressions, which is needed to store the mapping in salsa.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "cd1fe4ad8f6a19b44678e1389c0c7553a6d11036", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd1fe4ad8f6a19b44678e1389c0c7553a6d11036"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e62533c3ec74358d3488e8e4b7967c78459b238f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgCFWyCRBK7hj4Ov3rIwAAdHIIADVEY2LSBN1xdWwcgTmwnh3G\n+UeYW8RepzmSHKlEFJj5LpZ69yKRf0JsKxYgEPmHVkEJsoyx2ASz3kXp8++52xBK\nOoTTH3iWe5xdsJedq5f7X2z6BEijej4XqjT2NBhYoRvsbzIXFhr6E/h2txYan5UA\nmJFXv1x/HCrLwKb6V9zSMtG2g9E9JKb1oDd1eyAyciqcCu+qEsKAZVYtfnxNiW28\n0uyY/GK4yY1qzPcMPndWRjVzptbSHv11jvp2ISi7lSvDHXnxysIb+o6VNJFse5TT\ne4IQF1Muc+QBNrcgj6Dr0JQIdXAOJ1QjFw4kLcsN4Sd2CFr6yUA8ChLrmSHahAU=\n=7aQ3\n-----END PGP SIGNATURE-----\n", "payload": "tree cd1fe4ad8f6a19b44678e1389c0c7553a6d11036\nparent 9d10aa09726f38d184d499c0a04f8ba4bc1c2bba\nparent c5ed2284b5733dcaf8b57b1771c441afc39fa5e7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1611158962 +0000\ncommitter GitHub <noreply@github.com> 1611158962 +0000\n\nMerge #7359\n\n7359: ItemTree: store a mapping from blocks to inner items r=jonas-schievink a=jonas-schievink\n\nTo do name resolution within block expressions, we need to know which inner items are located inside each block expression. This adds such a mapping to `ItemTree`, replacing the previous one, which was seemingly unused other than to access all the inner items.\r\n\r\nThis also assigns `AstId`s to block expressions, which is needed to store the mapping in salsa.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e62533c3ec74358d3488e8e4b7967c78459b238f", "html_url": "https://github.com/rust-lang/rust/commit/e62533c3ec74358d3488e8e4b7967c78459b238f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e62533c3ec74358d3488e8e4b7967c78459b238f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d10aa09726f38d184d499c0a04f8ba4bc1c2bba", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d10aa09726f38d184d499c0a04f8ba4bc1c2bba", "html_url": "https://github.com/rust-lang/rust/commit/9d10aa09726f38d184d499c0a04f8ba4bc1c2bba"}, {"sha": "c5ed2284b5733dcaf8b57b1771c441afc39fa5e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5ed2284b5733dcaf8b57b1771c441afc39fa5e7", "html_url": "https://github.com/rust-lang/rust/commit/c5ed2284b5733dcaf8b57b1771c441afc39fa5e7"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "6494cebd388bae56fb96ea1cdad981f7e6c46fda", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e62533c3ec74358d3488e8e4b7967c78459b238f/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62533c3ec74358d3488e8e4b7967c78459b238f/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=e62533c3ec74358d3488e8e4b7967c78459b238f", "patch": "@@ -69,13 +69,12 @@ impl GenericParamsId {\n pub struct ItemTree {\n     top_level: SmallVec<[ModItem; 1]>,\n     attrs: FxHashMap<AttrOwner, RawAttrs>,\n-    inner_items: FxHashMap<FileAstId<ast::Item>, SmallVec<[ModItem; 1]>>,\n \n     data: Option<Box<ItemTreeData>>,\n }\n \n impl ItemTree {\n-    pub fn item_tree_query(db: &dyn DefDatabase, file_id: HirFileId) -> Arc<ItemTree> {\n+    pub(crate) fn item_tree_query(db: &dyn DefDatabase, file_id: HirFileId) -> Arc<ItemTree> {\n         let _p = profile::span(\"item_tree_query\").detail(|| format!(\"{:?}\", file_id));\n         let syntax = if let Some(node) = db.parse_or_expand(file_id) {\n             node\n@@ -117,12 +116,7 @@ impl ItemTree {\n     }\n \n     fn empty() -> Self {\n-        Self {\n-            top_level: Default::default(),\n-            attrs: Default::default(),\n-            inner_items: Default::default(),\n-            data: Default::default(),\n-        }\n+        Self { top_level: Default::default(), attrs: Default::default(), data: Default::default() }\n     }\n \n     fn shrink_to_fit(&mut self) {\n@@ -147,6 +141,7 @@ impl ItemTree {\n                 macro_defs,\n                 vis,\n                 generics,\n+                inner_items,\n             } = &mut **data;\n \n             imports.shrink_to_fit();\n@@ -169,6 +164,8 @@ impl ItemTree {\n \n             vis.arena.shrink_to_fit();\n             generics.arena.shrink_to_fit();\n+\n+            inner_items.shrink_to_fit();\n         }\n     }\n \n@@ -191,16 +188,11 @@ impl ItemTree {\n         self.raw_attrs(of).clone().filter(db, krate)\n     }\n \n-    /// Returns the lowered inner items that `ast` corresponds to.\n-    ///\n-    /// Most AST items are lowered to a single `ModItem`, but some (eg. `use` items) may be lowered\n-    /// to multiple items in the `ItemTree`.\n-    pub fn inner_items(&self, ast: FileAstId<ast::Item>) -> &[ModItem] {\n-        &self.inner_items[&ast]\n-    }\n-\n     pub fn all_inner_items(&self) -> impl Iterator<Item = ModItem> + '_ {\n-        self.inner_items.values().flatten().copied()\n+        match &self.data {\n+            Some(data) => Some(data.inner_items.values().flatten().copied()).into_iter().flatten(),\n+            None => None.into_iter().flatten(),\n+        }\n     }\n \n     pub fn source<S: ItemTreeNode>(&self, db: &dyn DefDatabase, of: ItemTreeId<S>) -> S::Source {\n@@ -297,6 +289,8 @@ struct ItemTreeData {\n \n     vis: ItemVisibilities,\n     generics: GenericParamsStorage,\n+\n+    inner_items: FxHashMap<FileAstId<ast::BlockExpr>, SmallVec<[ModItem; 1]>>,\n }\n \n #[derive(Debug, Eq, PartialEq, Hash)]"}, {"sha": "56fe569ff36a8494879668cba09d0b57f8de1eb1", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e62533c3ec74358d3488e8e4b7967c78459b238f/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62533c3ec74358d3488e8e4b7967c78459b238f/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=e62533c3ec74358d3488e8e4b7967c78459b238f", "patch": "@@ -6,7 +6,7 @@ use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, name::known, HirFileId}\n use smallvec::SmallVec;\n use syntax::{\n     ast::{self, ModuleItemOwner},\n-    SyntaxNode,\n+    SyntaxNode, WalkEvent,\n };\n \n use crate::{\n@@ -150,14 +150,29 @@ impl Ctx {\n \n     fn collect_inner_items(&mut self, container: &SyntaxNode) {\n         let forced_vis = self.forced_visibility.take();\n-        let mut inner_items = mem::take(&mut self.tree.inner_items);\n-        inner_items.extend(container.descendants().skip(1).filter_map(ast::Item::cast).filter_map(\n-            |item| {\n-                let ast_id = self.source_ast_id_map.ast_id(&item);\n-                Some((ast_id, self.lower_mod_item(&item, true)?.0))\n-            },\n-        ));\n-        self.tree.inner_items = inner_items;\n+\n+        let mut current_block = None;\n+        for event in container.preorder().skip(1) {\n+            if let WalkEvent::Enter(node) = event {\n+                match_ast! {\n+                    match node {\n+                        ast::BlockExpr(block) => {\n+                            current_block = Some(self.source_ast_id_map.ast_id(&block));\n+                        },\n+                        ast::Item(item) => {\n+                            let mod_items = self.lower_mod_item(&item, true);\n+                            if let (Some(mod_items), Some(block)) = (mod_items, current_block) {\n+                                if !mod_items.0.is_empty() {\n+                                    self.data().inner_items.entry(block).or_default().extend(mod_items.0.iter().copied());\n+                                }\n+                            }\n+                        },\n+                        _ => {}\n+                    }\n+                }\n+            }\n+        }\n+\n         self.forced_visibility = forced_vis;\n     }\n "}, {"sha": "0991fffd8581f2f8dd29791ec5857371816dd5de", "filename": "crates/hir_expand/src/ast_id_map.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e62533c3ec74358d3488e8e4b7967c78459b238f/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62533c3ec74358d3488e8e4b7967c78459b238f/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs?ref=e62533c3ec74358d3488e8e4b7967c78459b238f", "patch": "@@ -13,7 +13,7 @@ use std::{\n };\n \n use la_arena::{Arena, Idx};\n-use syntax::{ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr};\n+use syntax::{ast, match_ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr};\n \n /// `AstId` points to an AST node in a specific file.\n pub struct FileAstId<N: AstNode> {\n@@ -72,12 +72,20 @@ impl AstIdMap {\n         // get lower ids then children. That is, adding a new child does not\n         // change parent's id. This means that, say, adding a new function to a\n         // trait does not change ids of top-level items, which helps caching.\n-        bdfs(node, |it| match ast::Item::cast(it) {\n-            Some(module_item) => {\n-                res.alloc(module_item.syntax());\n-                true\n+        bdfs(node, |it| {\n+            match_ast! {\n+                match it {\n+                    ast::Item(module_item) => {\n+                        res.alloc(module_item.syntax());\n+                        true\n+                    },\n+                    ast::BlockExpr(block) => {\n+                        res.alloc(block.syntax());\n+                        true\n+                    },\n+                    _ => false,\n+                }\n             }\n-            None => false,\n         });\n         res\n     }"}]}