{"sha": "e8c53e81f8ec8de08cc1f2a1c026c9055fc37445", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YzUzZTgxZjhlYzhkZTA4Y2MxZjJhMWMwMjZjOTA1NWZjMzc0NDU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-18T18:26:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-18T18:26:57Z"}, "message": "implement macOS functions for argc, argv", "tree": {"sha": "33dc41fa16be3cc2a13f122bf48b4ed1817b9e5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33dc41fa16be3cc2a13f122bf48b4ed1817b9e5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8c53e81f8ec8de08cc1f2a1c026c9055fc37445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c53e81f8ec8de08cc1f2a1c026c9055fc37445", "html_url": "https://github.com/rust-lang/rust/commit/e8c53e81f8ec8de08cc1f2a1c026c9055fc37445", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8c53e81f8ec8de08cc1f2a1c026c9055fc37445/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3f799136778a1d034bc621bc41ed42a68d1cc48", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f799136778a1d034bc621bc41ed42a68d1cc48", "html_url": "https://github.com/rust-lang/rust/commit/b3f799136778a1d034bc621bc41ed42a68d1cc48"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "ab82223f234d0e342e8da3a7a0d89a17c9be74b7", "filename": "src/fn_call.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e8c53e81f8ec8de08cc1f2a1c026c9055fc37445/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c53e81f8ec8de08cc1f2a1c026c9055fc37445/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=e8c53e81f8ec8de08cc1f2a1c026c9055fc37445", "patch": "@@ -513,10 +513,6 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 this.write_null(dest)?;\n             }\n \n-            \"_tlv_atexit\" => {\n-                // FIXME: Register the dtor\n-            },\n-\n             // Determining stack base address\n             \"pthread_attr_init\" | \"pthread_attr_destroy\" | \"pthread_attr_get_np\" |\n             \"pthread_getattr_np\" | \"pthread_self\" | \"pthread_get_stacksize_np\" => {\n@@ -554,7 +550,18 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 this.write_null(dest)?;\n             }\n \n-            // Windows API subs\n+            // macOS API stubs\n+            \"_tlv_atexit\" => {\n+                // FIXME: Register the dtor\n+            },\n+            \"_NSGetArgc\" => {\n+                this.write_scalar(Scalar::Ptr(this.machine.argc.unwrap()), dest)?;\n+            },\n+            \"_NSGetArgv\" => {\n+                this.write_scalar(Scalar::Ptr(this.machine.argv.unwrap()), dest)?;\n+            },\n+\n+            // Windows API stubs\n             \"AddVectoredExceptionHandler\" => {\n                 // any non zero value works for the stdlib. This is just used for stackoverflows anyway\n                 this.write_scalar(Scalar::from_int(1, dest.layout.size), dest)?;\n@@ -576,8 +583,6 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 // this is c::ERROR_CALL_NOT_IMPLEMENTED\n                 this.write_scalar(Scalar::from_int(120, dest.layout.size), dest)?;\n             },\n-\n-            // Windows TLS\n             \"TlsAlloc\" => {\n                 // This just creates a key; Windows does not natively support TLS dtors.\n "}, {"sha": "e6e1a338c9d18c0fa0617c1f3d29d78555d5c32b", "filename": "src/lib.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e8c53e81f8ec8de08cc1f2a1c026c9055fc37445/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c53e81f8ec8de08cc1f2a1c026c9055fc37445/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e8c53e81f8ec8de08cc1f2a1c026c9055fc37445", "patch": "@@ -121,7 +121,11 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n \n     // Second argument (argc): 1\n     let dest = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n-    ecx.write_scalar(Scalar::from_int(1, dest.layout.size), dest)?;\n+    let argc = Scalar::from_int(1, dest.layout.size);\n+    ecx.write_scalar(argc, dest)?;\n+    let argc_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into())?;\n+    ecx.write_scalar(argc, argc_place.into())?;\n+    ecx.machine.argc = Some(argc_place.ptr.to_ptr()?);\n \n     // FIXME: extract main source file path\n     // Third argument (argv): &[b\"foo\"]\n@@ -132,7 +136,11 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     let foo_place = ecx.allocate(foo_layout, MiriMemoryKind::Env.into())?;\n     ecx.write_scalar(Scalar::Ptr(foo), foo_place.into())?;\n     ecx.memory_mut().mark_immutable(foo_place.to_ptr()?.alloc_id)?;\n-    ecx.write_scalar(foo_place.ptr, dest)?;\n+    let argv = foo_place.ptr;\n+    ecx.write_scalar(argv, dest)?;\n+    let argv_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into())?;\n+    ecx.write_scalar(argv, argv_place.into())?;\n+    ecx.machine.argc = Some(argv_place.ptr.to_ptr()?);\n \n     assert!(args.next().is_none(), \"start lang item has more arguments than expected\");\n \n@@ -253,6 +261,11 @@ pub struct Evaluator<'tcx> {\n     /// Miri does not expose env vars from the host to the emulated program\n     pub(crate) env_vars: HashMap<Vec<u8>, Pointer<Borrow>>,\n \n+    /// Program arguments (`Option` because we can only initialize them after creating the ecx).\n+    /// These are *pointers* to argc/argv because macOS.\n+    pub(crate) argc: Option<Pointer<Borrow>>,\n+    pub(crate) argv: Option<Pointer<Borrow>>,\n+\n     /// TLS state\n     pub(crate) tls: TlsData<'tcx>,\n \n@@ -267,6 +280,8 @@ impl<'tcx> Evaluator<'tcx> {\n     fn new(validate: bool) -> Self {\n         Evaluator {\n             env_vars: HashMap::default(),\n+            argc: None,\n+            argv: None,\n             tls: TlsData::default(),\n             validate,\n             stacked_borrows: stacked_borrows::State::default(),"}]}