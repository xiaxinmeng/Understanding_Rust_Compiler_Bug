{"sha": "c9f13b47febb81ef339a15adf0f6ad7a2265c46d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZjEzYjQ3ZmViYjgxZWYzMzlhMTVhZGYwZjZhZDdhMjI2NWM0NmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-15T07:46:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-15T07:46:29Z"}, "message": "auto merge of #12230 : DaGenix/rust/io-decorator-changes, r=sfackler\n\nI created RefReader and RefWriter structs that wrap a mutable reference to a Reader or Writer value. This works exactly like the ByRef struct in the iter module and allows passing a reference to a Reader or Writer to function expecting a Reader or Writer by value with the caller retaining ownership to the original value.\r\n\r\nI also modified LimitReader to take the wrapped Reader by value instead of by reference.\r\n\r\n@sfackler", "tree": {"sha": "e8f17e3a7706075264090d1af31d1f8a741c2a4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8f17e3a7706075264090d1af31d1f8a741c2a4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9f13b47febb81ef339a15adf0f6ad7a2265c46d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f13b47febb81ef339a15adf0f6ad7a2265c46d", "html_url": "https://github.com/rust-lang/rust/commit/c9f13b47febb81ef339a15adf0f6ad7a2265c46d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9f13b47febb81ef339a15adf0f6ad7a2265c46d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3496e93d13590140242f862c905dc2d591d2e2ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/3496e93d13590140242f862c905dc2d591d2e2ea", "html_url": "https://github.com/rust-lang/rust/commit/3496e93d13590140242f862c905dc2d591d2e2ea"}, {"sha": "4c233d1c73edae4fb2609100528d3c952723453f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c233d1c73edae4fb2609100528d3c952723453f", "html_url": "https://github.com/rust-lang/rust/commit/4c233d1c73edae4fb2609100528d3c952723453f"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "c99fe587fc0d0b5b9e7e43fa8cdc40727023bc06", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c9f13b47febb81ef339a15adf0f6ad7a2265c46d/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f13b47febb81ef339a15adf0f6ad7a2265c46d/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=c9f13b47febb81ef339a15adf0f6ad7a2265c46d", "patch": "@@ -779,6 +779,13 @@ pub trait Reader {\n         self.read_byte().map(|i| i as i8)\n     }\n \n+    /// Creates a wrapper around a mutable reference to the reader.\n+    ///\n+    /// This is useful to allow applying adaptors while still\n+    /// retaining ownership of the original value.\n+    fn by_ref<'a>(&'a mut self) -> RefReader<'a, Self> {\n+        RefReader { inner: self }\n+    }\n }\n \n impl Reader for ~Reader {\n@@ -789,6 +796,14 @@ impl<'a> Reader for &'a mut Reader {\n     fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> { self.read(buf) }\n }\n \n+pub struct RefReader<'a, R> {\n+    priv inner: &'a mut R\n+}\n+\n+impl<'a, R: Reader> Reader for RefReader<'a, R> {\n+    fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> { self.inner.read(buf) }\n+}\n+\n fn extend_sign(val: u64, nbytes: uint) -> i64 {\n     let shift = (8 - nbytes) * 8;\n     (val << shift) as i64 >> shift\n@@ -969,6 +984,14 @@ pub trait Writer {\n     fn write_i8(&mut self, n: i8) -> IoResult<()> {\n         self.write([n as u8])\n     }\n+\n+    /// Creates a wrapper around a mutable reference to the writer.\n+    ///\n+    /// This is useful to allow applying wrappers while still\n+    /// retaining ownership of the original value.\n+    fn by_ref<'a>(&'a mut self) -> RefWriter<'a, Self> {\n+        RefWriter { inner: self }\n+    }\n }\n \n impl Writer for ~Writer {\n@@ -981,6 +1004,16 @@ impl<'a> Writer for &'a mut Writer {\n     fn flush(&mut self) -> IoResult<()> { self.flush() }\n }\n \n+pub struct RefWriter<'a, W> {\n+    inner: &'a mut W\n+}\n+\n+impl<'a, W: Writer> Writer for RefWriter<'a, W> {\n+    fn write(&mut self, buf: &[u8]) -> IoResult<()> { self.inner.write(buf) }\n+    fn flush(&mut self) -> IoResult<()> { self.inner.flush() }\n+}\n+\n+\n pub trait Stream: Reader + Writer { }\n \n impl<T: Reader + Writer> Stream for T {}"}, {"sha": "2e12fc0b9f290539a555a3a628380da87108544c", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9f13b47febb81ef339a15adf0f6ad7a2265c46d/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f13b47febb81ef339a15adf0f6ad7a2265c46d/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=c9f13b47febb81ef339a15adf0f6ad7a2265c46d", "patch": "@@ -14,19 +14,20 @@ use io;\n use vec::bytes::MutableByteVector;\n \n /// Wraps a `Reader`, limiting the number of bytes that can be read from it.\n-pub struct LimitReader<'a, R> {\n+pub struct LimitReader<R> {\n     priv limit: uint,\n-    priv inner: &'a mut R\n+    priv inner: R\n }\n \n-impl<'a, R: Reader> LimitReader<'a, R> {\n+impl<R: Reader> LimitReader<R> {\n     /// Creates a new `LimitReader`\n-    pub fn new<'a>(r: &'a mut R, limit: uint) -> LimitReader<'a, R> {\n+    pub fn new(r: R, limit: uint) -> LimitReader<R> {\n         LimitReader { limit: limit, inner: r }\n     }\n+    pub fn unwrap(self) -> R { self.inner }\n }\n \n-impl<'a, R: Reader> Reader for LimitReader<'a, R> {\n+impl<R: Reader> Reader for LimitReader<R> {\n     fn read(&mut self, buf: &mut [u8]) -> io::IoResult<uint> {\n         if self.limit == 0 {\n             return Err(io::standard_error(io::EndOfFile));\n@@ -192,7 +193,7 @@ mod test {\n     fn test_bounded_reader_unlimited() {\n         let mut r = MemReader::new(~[0, 1, 2]);\n         {\n-            let mut r = LimitReader::new(&mut r, 4);\n+            let mut r = LimitReader::new(r.by_ref(), 4);\n             assert_eq!(~[0, 1, 2], r.read_to_end().unwrap());\n         }\n     }\n@@ -201,7 +202,7 @@ mod test {\n     fn test_bound_reader_limited() {\n         let mut r = MemReader::new(~[0, 1, 2]);\n         {\n-            let mut r = LimitReader::new(&mut r, 2);\n+            let mut r = LimitReader::new(r.by_ref(), 2);\n             assert_eq!(~[0, 1], r.read_to_end().unwrap());\n         }\n         assert_eq!(~[2], r.read_to_end().unwrap());"}]}