{"sha": "d9a429a1eb42ba56e1fa770c90305011efcac4d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YTQyOWExZWI0MmJhNTZlMWZhNzcwYzkwMzA1MDExZWZjYWM0ZDY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-16T06:26:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-16T06:26:38Z"}, "message": "Rollup merge of #63539 - Centril:2015.await, r=oli-obk\n\nSuggest Rust 2018 on `<expr>.await` with no such field\n\nWhen type checking a field projection (`fn check_field`) to `<expr>.await` where `<expr>: \u03c4` and `\u03c4` is not a primitive type, suggest switching to Rust 2018. E.g.\n\n```\nerror[E0609]: no field `await` on type `std::pin::Pin<&mut dyn std::future::Future<Output = ()>>`\n  --> $DIR/suggest-switching-edition-on-await.rs:31:7\n   |\nLL |     x.await;\n   |       ^^^^^ unknown field\n   |\n   = note: to `.await` a `Future`, switch to Rust 2018\n   = help: set `edition = \"2018\"` in `Cargo.toml`\n   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n```\n\nFixes https://github.com/rust-lang/rust/issues/63533\n\nThis PR also performs some preparatory cleanups in `fn check_field`; the last 2 commits are where the suggestion is introduced and tested respectively.\n\nr? @varkor", "tree": {"sha": "90c9b00e6f322de3acc011afafcf86b2301c94a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90c9b00e6f322de3acc011afafcf86b2301c94a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9a429a1eb42ba56e1fa770c90305011efcac4d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdVkyeCRBK7hj4Ov3rIwAAdHIIAGIpkv8E34h0OtpsWujvdv5P\nkyQ/NX9LBTINCCUYJRluoQJvqoboFFQlOcvbGLHp2xgk3OzLWXheBNEMqxbRkdHy\njFNC2aAkYtGAw+EGiZJ1adNbzB5dASJsAztNzQjW9cICyAWJUSOnvXv50zOoNrd7\ncOKCPE8/TWGkLyXXSacQBNJ5TfpLB88mYgMIPRM433BDOZ5+f+Wfd5qZ0Y75s91R\nK+a8/ls2+3xPU5bz6B77zwz48z3jO9vgjMPQoVJkhouJ/z7kGqLZoSaGTNQxOzem\nu1uBQStaEiAAIBvIXCFetkGMRFqZpenMy+YvUDgygCAl2FVnDRCzjXbUXybCFR4=\n=YGEQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 90c9b00e6f322de3acc011afafcf86b2301c94a1\nparent 6e9e6ea39bbc2c9e58cdc854c55dfc1487a77ae1\nparent 9287eb647f7168a65950965044bd5e22d1b05faf\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565936798 +0200\ncommitter GitHub <noreply@github.com> 1565936798 +0200\n\nRollup merge of #63539 - Centril:2015.await, r=oli-obk\n\nSuggest Rust 2018 on `<expr>.await` with no such field\n\nWhen type checking a field projection (`fn check_field`) to `<expr>.await` where `<expr>: \u03c4` and `\u03c4` is not a primitive type, suggest switching to Rust 2018. E.g.\n\n```\nerror[E0609]: no field `await` on type `std::pin::Pin<&mut dyn std::future::Future<Output = ()>>`\n  --> $DIR/suggest-switching-edition-on-await.rs:31:7\n   |\nLL |     x.await;\n   |       ^^^^^ unknown field\n   |\n   = note: to `.await` a `Future`, switch to Rust 2018\n   = help: set `edition = \"2018\"` in `Cargo.toml`\n   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n```\n\nFixes https://github.com/rust-lang/rust/issues/63533\n\nThis PR also performs some preparatory cleanups in `fn check_field`; the last 2 commits are where the suggestion is introduced and tested respectively.\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a429a1eb42ba56e1fa770c90305011efcac4d6", "html_url": "https://github.com/rust-lang/rust/commit/d9a429a1eb42ba56e1fa770c90305011efcac4d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9a429a1eb42ba56e1fa770c90305011efcac4d6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e9e6ea39bbc2c9e58cdc854c55dfc1487a77ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9e6ea39bbc2c9e58cdc854c55dfc1487a77ae1", "html_url": "https://github.com/rust-lang/rust/commit/6e9e6ea39bbc2c9e58cdc854c55dfc1487a77ae1"}, {"sha": "9287eb647f7168a65950965044bd5e22d1b05faf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9287eb647f7168a65950965044bd5e22d1b05faf", "html_url": "https://github.com/rust-lang/rust/commit/9287eb647f7168a65950965044bd5e22d1b05faf"}], "stats": {"total": 357, "additions": 256, "deletions": 101}, "files": [{"sha": "d139cd4264c86f707c9f5cfddcf53f7bd518a30e", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 168, "deletions": 101, "changes": 269, "blob_url": "https://github.com/rust-lang/rust/blob/d9a429a1eb42ba56e1fa770c90305011efcac4d6/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a429a1eb42ba56e1fa770c90305011efcac4d6/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=d9a429a1eb42ba56e1fa770c90305011efcac4d6", "patch": "@@ -24,6 +24,7 @@ use syntax::source_map::Span;\n use syntax::util::lev_distance::find_best_match_for_name;\n use rustc::hir;\n use rustc::hir::{ExprKind, QPath};\n+use rustc::hir::def_id::DefId;\n use rustc::hir::def::{CtorKind, Res, DefKind};\n use rustc::hir::ptr::P;\n use rustc::infer;\n@@ -1336,116 +1337,182 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         autoderef.unambiguous_final_ty(self);\n \n         if let Some((did, field_ty)) = private_candidate {\n-            let struct_path = self.tcx().def_path_str(did);\n-            let mut err = struct_span_err!(self.tcx().sess, expr.span, E0616,\n-                                           \"field `{}` of struct `{}` is private\",\n-                                           field, struct_path);\n-            // Also check if an accessible method exists, which is often what is meant.\n-            if self.method_exists(field, expr_t, expr.hir_id, false)\n-                && !self.expr_in_place(expr.hir_id)\n-            {\n-                self.suggest_method_call(\n-                    &mut err,\n-                    &format!(\"a method `{}` also exists, call it with parentheses\", field),\n-                    field,\n-                    expr_t,\n-                    expr.hir_id,\n-                );\n-            }\n-            err.emit();\n-            field_ty\n-        } else if field.name == kw::Invalid {\n-            self.tcx().types.err\n+            self.ban_private_field_access(expr, expr_t, field, did);\n+            return field_ty;\n+        }\n+\n+        if field.name == kw::Invalid {\n         } else if self.method_exists(field, expr_t, expr.hir_id, true) {\n-            let mut err = type_error_struct!(self.tcx().sess, field.span, expr_t, E0615,\n-                               \"attempted to take value of method `{}` on type `{}`\",\n-                               field, expr_t);\n-\n-            if !self.expr_in_place(expr.hir_id) {\n-                self.suggest_method_call(\n-                    &mut err,\n-                    \"use parentheses to call the method\",\n-                    field,\n-                    expr_t,\n-                    expr.hir_id\n-                );\n-            } else {\n-                err.help(\"methods are immutable and cannot be assigned to\");\n+            self.ban_take_value_of_method(expr, expr_t, field);\n+        } else if !expr_t.is_primitive_ty() {\n+            let mut err = self.no_such_field_err(field.span, field, expr_t);\n+\n+            match expr_t.sty {\n+                ty::Adt(def, _) if !def.is_enum() => {\n+                    self.suggest_fields_on_recordish(&mut err, def, field);\n+                }\n+                ty::Array(_, len) => {\n+                    self.maybe_suggest_array_indexing(&mut err, expr, base, field, len);\n+                }\n+                ty::RawPtr(..) => {\n+                    self.suggest_first_deref_field(&mut err, expr, base, field);\n+                }\n+                _ => {}\n+            }\n+\n+            if field.name == kw::Await {\n+                // We know by construction that `<expr>.await` is either on Rust 2015\n+                // or results in `ExprKind::Await`. Suggest switching the edition to 2018.\n+                err.note(\"to `.await` a `Future`, switch to Rust 2018\");\n+                err.help(\"set `edition = \\\"2018\\\"` in `Cargo.toml`\");\n+                err.note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\");\n             }\n \n             err.emit();\n-            self.tcx().types.err\n         } else {\n-            if !expr_t.is_primitive_ty() {\n-                let mut err = self.no_such_field_err(field.span, field, expr_t);\n-\n-                match expr_t.sty {\n-                    ty::Adt(def, _) if !def.is_enum() => {\n-                        if let Some(suggested_field_name) =\n-                            Self::suggest_field_name(def.non_enum_variant(),\n-                                                     &field.as_str(), vec![]) {\n-                                err.span_suggestion(\n-                                    field.span,\n-                                    \"a field with a similar name exists\",\n-                                    suggested_field_name.to_string(),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            } else {\n-                                err.span_label(field.span, \"unknown field\");\n-                                let struct_variant_def = def.non_enum_variant();\n-                                let field_names = self.available_field_names(struct_variant_def);\n-                                if !field_names.is_empty() {\n-                                    err.note(&format!(\"available fields are: {}\",\n-                                                      self.name_series_display(field_names)));\n-                                }\n-                            };\n-                    }\n-                    ty::Array(_, len) => {\n-                        if let (Some(len), Ok(user_index)) = (\n-                            len.try_eval_usize(self.tcx, self.param_env),\n-                            field.as_str().parse::<u64>()\n-                        ) {\n-                            let base = self.tcx.sess.source_map()\n-                                .span_to_snippet(base.span)\n-                                .unwrap_or_else(|_|\n-                                    self.tcx.hir().hir_to_pretty_string(base.hir_id));\n-                            let help = \"instead of using tuple indexing, use array indexing\";\n-                            let suggestion = format!(\"{}[{}]\", base, field);\n-                            let applicability = if len < user_index {\n-                                Applicability::MachineApplicable\n-                            } else {\n-                                Applicability::MaybeIncorrect\n-                            };\n-                            err.span_suggestion(\n-                                expr.span, help, suggestion, applicability\n-                            );\n-                        }\n-                    }\n-                    ty::RawPtr(..) => {\n-                        let base = self.tcx.sess.source_map()\n-                            .span_to_snippet(base.span)\n-                            .unwrap_or_else(|_| self.tcx.hir().hir_to_pretty_string(base.hir_id));\n-                        let msg = format!(\"`{}` is a raw pointer; try dereferencing it\", base);\n-                        let suggestion = format!(\"(*{}).{}\", base, field);\n-                        err.span_suggestion(\n-                            expr.span,\n-                            &msg,\n-                            suggestion,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                    _ => {}\n-                }\n-                err\n+            type_error_struct!(\n+                self.tcx().sess,\n+                field.span,\n+                expr_t,\n+                E0610,\n+                \"`{}` is a primitive type and therefore doesn't have fields\",\n+                expr_t\n+            )\n+            .emit();\n+        }\n+\n+        self.tcx().types.err\n+    }\n+\n+    fn ban_private_field_access(\n+        &self,\n+        expr: &hir::Expr,\n+        expr_t: Ty<'tcx>,\n+        field: ast::Ident,\n+        base_did: DefId,\n+    ) {\n+        let struct_path = self.tcx().def_path_str(base_did);\n+        let mut err = struct_span_err!(\n+            self.tcx().sess,\n+            expr.span,\n+            E0616,\n+            \"field `{}` of struct `{}` is private\",\n+            field,\n+            struct_path\n+        );\n+        // Also check if an accessible method exists, which is often what is meant.\n+        if self.method_exists(field, expr_t, expr.hir_id, false)\n+            && !self.expr_in_place(expr.hir_id)\n+        {\n+            self.suggest_method_call(\n+                &mut err,\n+                &format!(\"a method `{}` also exists, call it with parentheses\", field),\n+                field,\n+                expr_t,\n+                expr.hir_id,\n+            );\n+        }\n+        err.emit();\n+    }\n+\n+    fn ban_take_value_of_method(&self, expr: &hir::Expr, expr_t: Ty<'tcx>, field: ast::Ident) {\n+        let mut err = type_error_struct!(\n+            self.tcx().sess,\n+            field.span,\n+            expr_t,\n+            E0615,\n+            \"attempted to take value of method `{}` on type `{}`\",\n+            field,\n+            expr_t\n+        );\n+\n+        if !self.expr_in_place(expr.hir_id) {\n+            self.suggest_method_call(\n+                &mut err,\n+                \"use parentheses to call the method\",\n+                field,\n+                expr_t,\n+                expr.hir_id\n+            );\n+        } else {\n+            err.help(\"methods are immutable and cannot be assigned to\");\n+        }\n+\n+        err.emit();\n+    }\n+\n+    fn suggest_fields_on_recordish(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        def: &'tcx ty::AdtDef,\n+        field: ast::Ident,\n+    ) {\n+        if let Some(suggested_field_name) =\n+            Self::suggest_field_name(def.non_enum_variant(), &field.as_str(), vec![])\n+        {\n+            err.span_suggestion(\n+                field.span,\n+                \"a field with a similar name exists\",\n+                suggested_field_name.to_string(),\n+                Applicability::MaybeIncorrect,\n+            );\n+        } else {\n+            err.span_label(field.span, \"unknown field\");\n+            let struct_variant_def = def.non_enum_variant();\n+            let field_names = self.available_field_names(struct_variant_def);\n+            if !field_names.is_empty() {\n+                err.note(&format!(\"available fields are: {}\",\n+                                    self.name_series_display(field_names)));\n+            }\n+        }\n+    }\n+\n+    fn maybe_suggest_array_indexing(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expr: &hir::Expr,\n+        base: &hir::Expr,\n+        field: ast::Ident,\n+        len: &ty::Const<'tcx>,\n+    ) {\n+        if let (Some(len), Ok(user_index)) = (\n+            len.try_eval_usize(self.tcx, self.param_env),\n+            field.as_str().parse::<u64>()\n+        ) {\n+            let base = self.tcx.sess.source_map()\n+                .span_to_snippet(base.span)\n+                .unwrap_or_else(|_| self.tcx.hir().hir_to_pretty_string(base.hir_id));\n+            let help = \"instead of using tuple indexing, use array indexing\";\n+            let suggestion = format!(\"{}[{}]\", base, field);\n+            let applicability = if len < user_index {\n+                Applicability::MachineApplicable\n             } else {\n-                type_error_struct!(self.tcx().sess, field.span, expr_t, E0610,\n-                                   \"`{}` is a primitive type and therefore doesn't have fields\",\n-                                   expr_t)\n-            }.emit();\n-            self.tcx().types.err\n+                Applicability::MaybeIncorrect\n+            };\n+            err.span_suggestion(expr.span, help, suggestion, applicability);\n         }\n     }\n \n+    fn suggest_first_deref_field(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expr: &hir::Expr,\n+        base: &hir::Expr,\n+        field: ast::Ident,\n+    ) {\n+        let base = self.tcx.sess.source_map()\n+            .span_to_snippet(base.span)\n+            .unwrap_or_else(|_| self.tcx.hir().hir_to_pretty_string(base.hir_id));\n+        let msg = format!(\"`{}` is a raw pointer; try dereferencing it\", base);\n+        let suggestion = format!(\"(*{}).{}\", base, field);\n+        err.span_suggestion(\n+            expr.span,\n+            &msg,\n+            suggestion,\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+\n     fn no_such_field_err<T: Display>(&self, span: Span, field: T, expr_t: &ty::TyS<'_>)\n         -> DiagnosticBuilder<'_> {\n         type_error_struct!(self.tcx().sess, span, expr_t, E0609,"}, {"sha": "1402f1ca92ba8baa9a5b569b42fd41a6d5bea9e1", "filename": "src/test/ui/async-await/suggest-switching-edition-on-await.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d9a429a1eb42ba56e1fa770c90305011efcac4d6/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-switching-edition-on-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a429a1eb42ba56e1fa770c90305011efcac4d6/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-switching-edition-on-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-switching-edition-on-await.rs?ref=d9a429a1eb42ba56e1fa770c90305011efcac4d6", "patch": "@@ -0,0 +1,45 @@\n+use std::pin::Pin;\n+use std::future::Future;\n+\n+fn main() {}\n+\n+fn await_on_struct_missing() {\n+    struct S;\n+    let x = S;\n+    x.await;\n+    //~^ ERROR no field `await` on type\n+    //~| NOTE unknown field\n+    //~| NOTE to `.await` a `Future`, switch to Rust 2018\n+    //~| HELP set `edition = \"2018\"` in `Cargo.toml`\n+    //~| NOTE for more on editions, read https://doc.rust-lang.org/edition-guide\n+}\n+\n+fn await_on_struct_similar() {\n+    struct S {\n+        awai: u8,\n+    }\n+    let x = S { awai: 42 };\n+    x.await;\n+    //~^ ERROR no field `await` on type\n+    //~| HELP a field with a similar name exists\n+    //~| NOTE to `.await` a `Future`, switch to Rust 2018\n+    //~| HELP set `edition = \"2018\"` in `Cargo.toml`\n+    //~| NOTE for more on editions, read https://doc.rust-lang.org/edition-guide\n+}\n+\n+fn await_on_63533(x: Pin<&mut dyn Future<Output = ()>>) {\n+    x.await;\n+    //~^ ERROR no field `await` on type\n+    //~| NOTE unknown field\n+    //~| NOTE to `.await` a `Future`, switch to Rust 2018\n+    //~| HELP set `edition = \"2018\"` in `Cargo.toml`\n+    //~| NOTE for more on editions, read https://doc.rust-lang.org/edition-guide\n+}\n+\n+fn await_on_apit(x: impl Future<Output = ()>) {\n+    x.await;\n+    //~^ ERROR no field `await` on type\n+    //~| NOTE to `.await` a `Future`, switch to Rust 2018\n+    //~| HELP set `edition = \"2018\"` in `Cargo.toml`\n+    //~| NOTE for more on editions, read https://doc.rust-lang.org/edition-guide\n+}"}, {"sha": "f623511c0eb239907482879ec2959d4142b853d0", "filename": "src/test/ui/async-await/suggest-switching-edition-on-await.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d9a429a1eb42ba56e1fa770c90305011efcac4d6/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-switching-edition-on-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9a429a1eb42ba56e1fa770c90305011efcac4d6/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-switching-edition-on-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-switching-edition-on-await.stderr?ref=d9a429a1eb42ba56e1fa770c90305011efcac4d6", "patch": "@@ -0,0 +1,43 @@\n+error[E0609]: no field `await` on type `await_on_struct_missing::S`\n+  --> $DIR/suggest-switching-edition-on-await.rs:9:7\n+   |\n+LL |     x.await;\n+   |       ^^^^^ unknown field\n+   |\n+   = note: to `.await` a `Future`, switch to Rust 2018\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0609]: no field `await` on type `await_on_struct_similar::S`\n+  --> $DIR/suggest-switching-edition-on-await.rs:22:7\n+   |\n+LL |     x.await;\n+   |       ^^^^^ help: a field with a similar name exists: `awai`\n+   |\n+   = note: to `.await` a `Future`, switch to Rust 2018\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0609]: no field `await` on type `std::pin::Pin<&mut dyn std::future::Future<Output = ()>>`\n+  --> $DIR/suggest-switching-edition-on-await.rs:31:7\n+   |\n+LL |     x.await;\n+   |       ^^^^^ unknown field\n+   |\n+   = note: to `.await` a `Future`, switch to Rust 2018\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0609]: no field `await` on type `impl Future<Output = ()>`\n+  --> $DIR/suggest-switching-edition-on-await.rs:40:7\n+   |\n+LL |     x.await;\n+   |       ^^^^^\n+   |\n+   = note: to `.await` a `Future`, switch to Rust 2018\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0609`."}]}