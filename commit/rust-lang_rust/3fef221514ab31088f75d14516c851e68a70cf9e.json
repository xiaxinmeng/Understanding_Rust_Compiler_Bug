{"sha": "3fef221514ab31088f75d14516c851e68a70cf9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZWYyMjE1MTRhYjMxMDg4Zjc1ZDE0NTE2Yzg1MWU2OGE3MGNmOWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-07T00:30:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-07T00:30:25Z"}, "message": "Auto merge of #38134 - bluss:iter-nth, r=aturon\n\nRemove Self: Sized from Iterator::nth\n\nIt is an unnecessary restriction; nth neither needs self to be sized\nnor needs to be exempted from the trait object.\n\nIt increases the utility of the nth method, because type specific\nimplementations are available through `&mut I` or through an iterator\ntrait object.\n\nIt is a backwards compatible change due to the special cases of the\n`where Self: Sized` bound; it was already optional to include this bound\nin `Iterator` implementations.", "tree": {"sha": "b9ae84328d100c06ed092d09df96d4ae79488b7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9ae84328d100c06ed092d09df96d4ae79488b7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fef221514ab31088f75d14516c851e68a70cf9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fef221514ab31088f75d14516c851e68a70cf9e", "html_url": "https://github.com/rust-lang/rust/commit/3fef221514ab31088f75d14516c851e68a70cf9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fef221514ab31088f75d14516c851e68a70cf9e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f128ed10f040c52e25b16c40235288822044c8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f128ed10f040c52e25b16c40235288822044c8c", "html_url": "https://github.com/rust-lang/rust/commit/5f128ed10f040c52e25b16c40235288822044c8c"}, {"sha": "bc3618e5c007e69e6b21b2aa4d2aad110da6655e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc3618e5c007e69e6b21b2aa4d2aad110da6655e", "html_url": "https://github.com/rust-lang/rust/commit/bc3618e5c007e69e6b21b2aa4d2aad110da6655e"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "d10d7a5e58d65f6e5ece991df85d6065f5f6907a", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fef221514ab31088f75d14516c851e68a70cf9e/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fef221514ab31088f75d14516c851e68a70cf9e/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=3fef221514ab31088f75d14516c851e68a70cf9e", "patch": "@@ -524,6 +524,9 @@ impl<I: Iterator + ?Sized> Iterator for Box<I> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (**self).size_hint()\n     }\n+    fn nth(&mut self, n: usize) -> Option<I::Item> {\n+        (**self).nth(n)\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for Box<I> {"}, {"sha": "48808b601c10c713ed017334e7e40ec725434b7d", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fef221514ab31088f75d14516c851e68a70cf9e/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fef221514ab31088f75d14516c851e68a70cf9e/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=3fef221514ab31088f75d14516c851e68a70cf9e", "patch": "@@ -247,7 +247,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn nth(&mut self, mut n: usize) -> Option<Self::Item> where Self: Sized {\n+    fn nth(&mut self, mut n: usize) -> Option<Self::Item> {\n         for x in self {\n             if n == 0 { return Some(x) }\n             n -= 1;\n@@ -2179,4 +2179,7 @@ impl<'a, I: Iterator + ?Sized> Iterator for &'a mut I {\n     type Item = I::Item;\n     fn next(&mut self) -> Option<I::Item> { (**self).next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { (**self).size_hint() }\n+    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+        (**self).nth(n)\n+    }\n }"}]}