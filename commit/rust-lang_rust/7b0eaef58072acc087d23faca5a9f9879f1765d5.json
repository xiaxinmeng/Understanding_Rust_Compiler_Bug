{"sha": "7b0eaef58072acc087d23faca5a9f9879f1765d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMGVhZWY1ODA3MmFjYzA4N2QyM2ZhY2E1YTlmOTg3OWYxNzY1ZDU=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-07T19:11:31Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-07T19:11:31Z"}, "message": "Implement type inference for more binary operators\n\nMostly just for primitive numeric types such as u32 and f64. Not\nyet a general solution using trait resolution.", "tree": {"sha": "753250bc428b0313faac6de7622686c445ef7dd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/753250bc428b0313faac6de7622686c445ef7dd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b0eaef58072acc087d23faca5a9f9879f1765d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0eaef58072acc087d23faca5a9f9879f1765d5", "html_url": "https://github.com/rust-lang/rust/commit/7b0eaef58072acc087d23faca5a9f9879f1765d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b0eaef58072acc087d23faca5a9f9879f1765d5/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3238c06a5a122b7e7b9b6871484c700b7947fae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3238c06a5a122b7e7b9b6871484c700b7947fae1", "html_url": "https://github.com/rust-lang/rust/commit/3238c06a5a122b7e7b9b6871484c700b7947fae1"}], "stats": {"total": 133, "additions": 84, "deletions": 49}, "files": [{"sha": "e09279a6844257cd7ea786c1c165ad3f7f3bf924", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 74, "deletions": 11, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/7b0eaef58072acc087d23faca5a9f9879f1765d5/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0eaef58072acc087d23faca5a9f9879f1765d5/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=7b0eaef58072acc087d23faca5a9f9879f1765d5", "patch": "@@ -529,16 +529,40 @@ struct InferenceContext<'a, D: HirDatabase> {\n \n // helper function that determines whether a binary operator\n // always returns a boolean\n-fn is_boolean_operator(op: BinaryOp) -> bool {\n+fn boolean_op_return_ty(op: BinaryOp, rhs_ty: Ty) -> Ty {\n     match op {\n         BinaryOp::BooleanOr\n         | BinaryOp::BooleanAnd\n         | BinaryOp::EqualityTest\n         | BinaryOp::LesserEqualTest\n         | BinaryOp::GreaterEqualTest\n         | BinaryOp::LesserTest\n-        | BinaryOp::GreaterTest => true,\n-        _ => false,\n+        | BinaryOp::GreaterTest => Ty::Bool,\n+        BinaryOp::Assignment\n+        | BinaryOp::AddAssign\n+        | BinaryOp::SubAssign\n+        | BinaryOp::DivAssign\n+        | BinaryOp::MulAssign\n+        | BinaryOp::RemAssign\n+        | BinaryOp::ShrAssign\n+        | BinaryOp::ShlAssign\n+        | BinaryOp::BitAndAssign\n+        | BinaryOp::BitOrAssign\n+        | BinaryOp::BitXorAssign => Ty::unit(),\n+        BinaryOp::Addition\n+        | BinaryOp::Subtraction\n+        | BinaryOp::Multiplication\n+        | BinaryOp::Division\n+        | BinaryOp::Remainder\n+        | BinaryOp::LeftShift\n+        | BinaryOp::RightShift\n+        | BinaryOp::BitwiseAnd\n+        | BinaryOp::BitwiseOr\n+        | BinaryOp::BitwiseXor => match rhs_ty {\n+            Ty::Uint(..) | Ty::Int(..) | Ty::Float(..) => rhs_ty,\n+            _ => Ty::Unknown,\n+        },\n+        BinaryOp::RangeRightOpen | BinaryOp::RangeRightClosed => Ty::Unknown,\n     }\n }\n \n@@ -890,20 +914,59 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Expr::BinaryOp { lhs, rhs, op } => match op {\n                 Some(op) => {\n-                    let subtype_expectation = match op {\n+                    let lhs_expectation = match op {\n                         BinaryOp::BooleanAnd | BinaryOp::BooleanOr => {\n                             Expectation::has_type(Ty::Bool)\n                         }\n                         _ => Expectation::none(),\n                     };\n-                    let _lhs_ty = self.infer_expr(*lhs, &subtype_expectation)?;\n-                    let _rhs_ty = self.infer_expr(*rhs, &subtype_expectation)?;\n+                    let lhs_ty = self.infer_expr(*lhs, &lhs_expectation)?;\n+                    // TODO: find implementation of trait corresponding to operation\n+                    // symbol and resolve associated `Output` type\n+                    let rhs_expectation = match op {\n+                        BinaryOp::BooleanAnd | BinaryOp::BooleanOr => Ty::Bool,\n+                        BinaryOp::Assignment | BinaryOp::EqualityTest => match lhs_ty {\n+                            Ty::Uint(..)\n+                            | Ty::Int(..)\n+                            | Ty::Float(..)\n+                            | Ty::Str\n+                            | Ty::Char\n+                            | Ty::Bool => lhs_ty,\n+                            _ => Ty::Unknown,\n+                        },\n+                        BinaryOp::LesserEqualTest\n+                        | BinaryOp::GreaterEqualTest\n+                        | BinaryOp::LesserTest\n+                        | BinaryOp::GreaterTest\n+                        | BinaryOp::AddAssign\n+                        | BinaryOp::SubAssign\n+                        | BinaryOp::DivAssign\n+                        | BinaryOp::MulAssign\n+                        | BinaryOp::RemAssign\n+                        | BinaryOp::ShrAssign\n+                        | BinaryOp::ShlAssign\n+                        | BinaryOp::BitAndAssign\n+                        | BinaryOp::BitOrAssign\n+                        | BinaryOp::BitXorAssign\n+                        | BinaryOp::Addition\n+                        | BinaryOp::Subtraction\n+                        | BinaryOp::Multiplication\n+                        | BinaryOp::Division\n+                        | BinaryOp::Remainder\n+                        | BinaryOp::LeftShift\n+                        | BinaryOp::RightShift\n+                        | BinaryOp::BitwiseAnd\n+                        | BinaryOp::BitwiseOr\n+                        | BinaryOp::BitwiseXor => match lhs_ty {\n+                            Ty::Uint(..) | Ty::Int(..) | Ty::Float(..) => lhs_ty,\n+                            _ => Ty::Unknown,\n+                        },\n+                        _ => Ty::Unknown,\n+                    };\n+                    let rhs_ty = self.infer_expr(*rhs, &Expectation::has_type(rhs_expectation))?;\n \n-                    if is_boolean_operator(*op) {\n-                        Ty::Bool\n-                    } else {\n-                        Ty::Unknown\n-                    }\n+                    // TODO: similar as above, return ty is often associated trait type\n+                    boolean_op_return_ty(*op, rhs_ty)\n                 }\n                 _ => Ty::Unknown,\n             },"}, {"sha": "2749d740c401e25f8017ad1b4ba6099bebcb4773", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b0eaef58072acc087d23faca5a9f9879f1765d5/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0eaef58072acc087d23faca5a9f9879f1765d5/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=7b0eaef58072acc087d23faca5a9f9879f1765d5", "patch": "@@ -157,7 +157,7 @@ impl S {\n }\n \n #[test]\n-fn infer_boolean_op() {\n+fn infer_binary_op() {\n     check_inference(\n         r#\"\n fn f(x: bool) -> i32 {\n@@ -168,15 +168,18 @@ fn test() {\n     let x = a && b;\n     let y = true || false;\n     let z = x == y;\n-    let h = CONST_1 <= CONST_2;\n+    let minus_forty: isize = -40isize;\n+    let h = minus_forty <= CONST_2;\n     let c = f(z || y) + 5;\n     let d = b;\n-    let e = 3i32 && \"hello world\";\n+    let g = minus_forty ^= i;\n+    let ten: usize = 10;\n+    let ten_is_eleven = ten == some_num;\n \n-    10 < 3\n+    ten < 3\n }\n \"#,\n-        \"boolean_op.txt\",\n+        \"binary_op.txt\",\n     );\n }\n "}, {"sha": "cce8d68fb4b4fa44673066ccb03b138f9833f272", "filename": "crates/ra_hir/src/ty/tests/data/boolean_op.txt", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3238c06a5a122b7e7b9b6871484c700b7947fae1/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fboolean_op.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3238c06a5a122b7e7b9b6871484c700b7947fae1/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fboolean_op.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fboolean_op.txt?ref=3238c06a5a122b7e7b9b6871484c700b7947fae1", "patch": "@@ -1,31 +0,0 @@\n-[6; 7) 'x': [unknown]\n-[22; 34) '{     0i32 }': i32\n-[28; 32) '0i32': i32\n-[46; 237) '{     ... < 3 }': bool\n-[56; 57) 'x': bool\n-[60; 61) 'a': bool\n-[60; 66) 'a && b': bool\n-[65; 66) 'b': bool\n-[76; 77) 'y': bool\n-[80; 84) 'true': bool\n-[80; 93) 'true || false': bool\n-[88; 93) 'false': bool\n-[103; 104) 'z': bool\n-[107; 108) 'x': bool\n-[107; 113) 'x == y': bool\n-[112; 113) 'y': bool\n-[123; 124) 'h': bool\n-[127; 134) 'CONST_1': [unknown]\n-[127; 145) 'CONST_...ONST_2': bool\n-[138; 145) 'CONST_2': [unknown]\n-[155; 156) 'c': [unknown]\n-[159; 172) 'f(z || y) + 5': [unknown]\n-[182; 183) 'd': [unknown]\n-[186; 187) 'b': [unknown]\n-[197; 198) 'e': bool\n-[201; 205) '3i32': bool\n-[201; 222) '3i32 &...world\"': bool\n-[209; 222) '\"hello world\"': bool\n-[229; 231) '10': [unknown]\n-[229; 235) '10 < 3': bool\n-[234; 235) '3': [unknown]"}, {"sha": "9ab59738f9b12fb14f6fd565b191a45a5ef82e59", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b0eaef58072acc087d23faca5a9f9879f1765d5/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0eaef58072acc087d23faca5a9f9879f1765d5/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=7b0eaef58072acc087d23faca5a9f9879f1765d5", "patch": "@@ -549,7 +549,7 @@ pub enum BinOp {\n     /// The `&=` operator for assignment after bitwise AND\n     BitAndAssign,\n     /// The `^=` operator for assignment after bitwise XOR\n-    BitXorAssin,\n+    BitXorAssign,\n }\n \n impl<'a> BinExpr<'a> {\n@@ -586,7 +586,7 @@ impl<'a> BinExpr<'a> {\n                 MINUSEQ => Some(BinOp::SubAssign),\n                 PIPEEQ => Some(BinOp::BitOrAssign),\n                 AMPEQ => Some(BinOp::BitAndAssign),\n-                CARETEQ =>  Some(BinOp::BitXorAssin),\n+                CARETEQ => Some(BinOp::BitXorAssign),\n                 _ => None,\n             })\n             .next()"}]}