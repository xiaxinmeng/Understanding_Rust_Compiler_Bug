{"sha": "26417a85e7551115146f98c64ea4e433453b9b4b", "node_id": "C_kwDOAAsO6NoAKDI2NDE3YTg1ZTc1NTExMTUxNDZmOThjNjRlYTRlNDMzNDUzYjliNGI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-03-03T18:52:49Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-27T15:59:07Z"}, "message": "Add `ConstParamTy` tests", "tree": {"sha": "cea8f3fbdddcbd82da560f63767fabe77056fb65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cea8f3fbdddcbd82da560f63767fabe77056fb65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26417a85e7551115146f98c64ea4e433453b9b4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26417a85e7551115146f98c64ea4e433453b9b4b", "html_url": "https://github.com/rust-lang/rust/commit/26417a85e7551115146f98c64ea4e433453b9b4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26417a85e7551115146f98c64ea4e433453b9b4b/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdb5502aa862e22cec579eb845df4bfe42612cfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb5502aa862e22cec579eb845df4bfe42612cfd", "html_url": "https://github.com/rust-lang/rust/commit/bdb5502aa862e22cec579eb845df4bfe42612cfd"}], "stats": {"total": 198, "additions": 198, "deletions": 0}, "files": [{"sha": "a9ade9d838c981e4f6486d31fc04e0e36477ca0e", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_bad.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/26417a85e7551115146f98c64ea4e433453b9b4b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26417a85e7551115146f98c64ea4e433453b9b4b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad.rs?ref=26417a85e7551115146f98c64ea4e433453b9b4b", "patch": "@@ -0,0 +1,13 @@\n+#![allow(incomplete_features)]\n+#![feature(adt_const_params)]\n+\n+fn check(_: impl std::marker::ConstParamTy) {}\n+\n+fn main() {\n+    check(main);               //~ error: `fn() {main}` can't be used as a const parameter type\n+    check(|| {});              //~ error: `[closure@fake-test-src-base/const-generics/adt_const_params/const_param_ty_bad.rs:8:11: 8:13]` can't be used as a const parameter type\n+    check(main as fn());       //~ error: `fn()` can't be used as a const parameter type\n+    check(&mut ());            //~ error: `&mut ()` can't be used as a const parameter type\n+    check(&mut () as *mut ()); //~ error: `*mut ()` can't be used as a const parameter type\n+    check(&() as *const ());   //~ error: `*const ()` can't be used as a const parameter type\n+}"}, {"sha": "de5704ee429ede4d9a93327434bf7853c9be7d4f", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_bad.stderr", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/26417a85e7551115146f98c64ea4e433453b9b4b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26417a85e7551115146f98c64ea4e433453b9b4b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad.stderr?ref=26417a85e7551115146f98c64ea4e433453b9b4b", "patch": "@@ -0,0 +1,87 @@\n+error[E0277]: `fn() {main}` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_bad.rs:7:11\n+   |\n+LL |     check(main);\n+   |     ----- ^^^^ the trait `ConstParamTy` is not implemented for fn item `fn() {main}`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_bad.rs:4:18\n+   |\n+LL | fn check(_: impl std::marker::ConstParamTy) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: `[closure@$DIR/const_param_ty_bad.rs:8:11: 8:13]` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_bad.rs:8:11\n+   |\n+LL |     check(|| {});\n+   |     ----- ^^^^^ the trait `ConstParamTy` is not implemented for closure `[closure@$DIR/const_param_ty_bad.rs:8:11: 8:13]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_bad.rs:4:18\n+   |\n+LL | fn check(_: impl std::marker::ConstParamTy) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: `fn()` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_bad.rs:9:11\n+   |\n+LL |     check(main as fn());\n+   |     ----- ^^^^^^^^^^^^ the trait `ConstParamTy` is not implemented for `fn()`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_bad.rs:4:18\n+   |\n+LL | fn check(_: impl std::marker::ConstParamTy) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: `&mut ()` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_bad.rs:10:11\n+   |\n+LL |     check(&mut ());\n+   |     ----- ^^^^^^^ the trait `ConstParamTy` is not implemented for `&mut ()`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_bad.rs:4:18\n+   |\n+LL | fn check(_: impl std::marker::ConstParamTy) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: `*mut ()` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_bad.rs:11:11\n+   |\n+LL |     check(&mut () as *mut ());\n+   |     ----- ^^^^^^^^^^^^^^^^^^ the trait `ConstParamTy` is not implemented for `*mut ()`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_bad.rs:4:18\n+   |\n+LL | fn check(_: impl std::marker::ConstParamTy) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: `*const ()` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_bad.rs:12:11\n+   |\n+LL |     check(&() as *const ());\n+   |     ----- ^^^^^^^^^^^^^^^^ the trait `ConstParamTy` is not implemented for `*const ()`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_bad.rs:4:18\n+   |\n+LL | fn check(_: impl std::marker::ConstParamTy) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "e4dc76703a2d8a4eb34444b036a6c0393e5228d1", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_generic_bounds_do_not_hold.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/26417a85e7551115146f98c64ea4e433453b9b4b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_generic_bounds_do_not_hold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26417a85e7551115146f98c64ea4e433453b9b4b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_generic_bounds_do_not_hold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_generic_bounds_do_not_hold.rs?ref=26417a85e7551115146f98c64ea4e433453b9b4b", "patch": "@@ -0,0 +1,13 @@\n+#![allow(incomplete_features)]\n+#![feature(adt_const_params)]\n+\n+#[derive(PartialEq, Eq)]\n+struct NotParam;\n+\n+fn check<T: std::marker::ConstParamTy + ?Sized>() {}\n+\n+fn main() {\n+    check::<&NotParam>();      //~ error: `NotParam` can't be used as a const parameter type\n+    check::<[NotParam]>();     //~ error: `NotParam` can't be used as a const parameter type\n+    check::<[NotParam; 17]>(); //~ error: `NotParam` can't be used as a const parameter type\n+}"}, {"sha": "86d1c94e87f966ef2c216c197b8631ae6d9c87c9", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_generic_bounds_do_not_hold.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/26417a85e7551115146f98c64ea4e433453b9b4b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_generic_bounds_do_not_hold.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26417a85e7551115146f98c64ea4e433453b9b4b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_generic_bounds_do_not_hold.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_generic_bounds_do_not_hold.stderr?ref=26417a85e7551115146f98c64ea4e433453b9b4b", "patch": "@@ -0,0 +1,42 @@\n+error[E0277]: `NotParam` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_generic_bounds_do_not_hold.rs:10:13\n+   |\n+LL |     check::<&NotParam>();\n+   |             ^^^^^^^^^ the trait `ConstParamTy` is not implemented for `NotParam`\n+   |\n+   = note: required for `&NotParam` to implement `ConstParamTy`\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_generic_bounds_do_not_hold.rs:7:13\n+   |\n+LL | fn check<T: std::marker::ConstParamTy + ?Sized>() {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: `NotParam` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_generic_bounds_do_not_hold.rs:11:13\n+   |\n+LL |     check::<[NotParam]>();\n+   |             ^^^^^^^^^^ the trait `ConstParamTy` is not implemented for `NotParam`\n+   |\n+   = note: required for `[NotParam]` to implement `ConstParamTy`\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_generic_bounds_do_not_hold.rs:7:13\n+   |\n+LL | fn check<T: std::marker::ConstParamTy + ?Sized>() {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: `NotParam` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_generic_bounds_do_not_hold.rs:12:13\n+   |\n+LL |     check::<[NotParam; 17]>();\n+   |             ^^^^^^^^^^^^^^ the trait `ConstParamTy` is not implemented for `NotParam`\n+   |\n+   = note: required for `[NotParam; 17]` to implement `ConstParamTy`\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_generic_bounds_do_not_hold.rs:7:13\n+   |\n+LL | fn check<T: std::marker::ConstParamTy + ?Sized>() {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a1b711a3024e33666afb4e9a9e082f6e29f385d3", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_good.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/26417a85e7551115146f98c64ea4e433453b9b4b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26417a85e7551115146f98c64ea4e433453b9b4b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs?ref=26417a85e7551115146f98c64ea4e433453b9b4b", "patch": "@@ -0,0 +1,43 @@\n+// check-pass\n+#![allow(incomplete_features)]\n+#![feature(adt_const_params)]\n+use std::marker::ConstParamTy;\n+\n+#[derive(PartialEq, Eq)]\n+struct S<T> {\n+    field: u8,\n+    gen: T,\n+}\n+\n+impl<T: ConstParamTy> ConstParamTy for S<T> {}\n+\n+fn check<T: ConstParamTy + ?Sized>() {}\n+\n+fn main() {\n+    check::<u8>();\n+    check::<u16>();\n+    check::<u32>();\n+    check::<u64>();\n+    check::<u128>();\n+\n+    check::<i8>();\n+    check::<i16>();\n+    check::<i32>();\n+    check::<i64>();\n+    check::<i128>();\n+\n+    check::<char>();\n+    check::<bool>();\n+    check::<str>();\n+\n+    check::<&u8>();\n+    check::<&str>();\n+    check::<[usize]>();\n+    check::<[u16; 0]>();\n+    check::<[u8; 42]>();\n+\n+    check::<S<u8>>();\n+    check::<S<[&[bool]; 8]>>();\n+\n+    // FIXME: test tuples\n+}"}]}