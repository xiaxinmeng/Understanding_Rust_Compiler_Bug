{"sha": "d84993b054faf9ac73239f73f5edad949f7d5341", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NDk5M2IwNTRmYWY5YWM3MzIzOWY3M2Y1ZWRhZDk0OWY3ZDUzNDE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-06-15T21:59:20Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-06-16T00:39:43Z"}, "message": "Rollup merge of #34207 - petrochenkov:nohyg, r=jseyfried\n\nRemove last traces of identifier hygiene from HIR\n\nhttps://github.com/rust-lang/rust/pull/34095/commits/e783a0a5e39d5ae2fa147508197d09a51530fae8 removed the [last](https://github.com/rust-lang/rust/pull/33654#discussion_r63415218) [use](https://github.com/rust-lang/rust/pull/33654#discussion_r63416284) of hygiene at post-resolve compilation stages, so we can avoid renaming during lowering to HIR and just keep original names.\n\nr? @nrc", "tree": {"sha": "7f7890a25e2341c78826907cee6d32d47b211820", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f7890a25e2341c78826907cee6d32d47b211820"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d84993b054faf9ac73239f73f5edad949f7d5341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d84993b054faf9ac73239f73f5edad949f7d5341", "html_url": "https://github.com/rust-lang/rust/commit/d84993b054faf9ac73239f73f5edad949f7d5341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d84993b054faf9ac73239f73f5edad949f7d5341/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb4a79b087158f396b984bdf552d2c90890b12a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb4a79b087158f396b984bdf552d2c90890b12a3", "html_url": "https://github.com/rust-lang/rust/commit/bb4a79b087158f396b984bdf552d2c90890b12a3"}, {"sha": "f59afbc2143894932529a29057de25a4425ed65e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f59afbc2143894932529a29057de25a4425ed65e", "html_url": "https://github.com/rust-lang/rust/commit/f59afbc2143894932529a29057de25a4425ed65e"}], "stats": {"total": 55, "additions": 13, "deletions": 42}, "files": [{"sha": "393045bf93efbd81e64c3836057e6d3eb1ed69a2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d84993b054faf9ac73239f73f5edad949f7d5341/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84993b054faf9ac73239f73f5edad949f7d5341/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d84993b054faf9ac73239f73f5edad949f7d5341", "patch": "@@ -51,10 +51,9 @@ use std::collections::BTreeMap;\n use std::iter;\n use syntax::ast::*;\n use syntax::attr::{ThinAttributes, ThinAttributesExt};\n-use syntax::ext::mtwt;\n use syntax::ptr::P;\n use syntax::codemap::{respan, Spanned, Span};\n-use syntax::parse::token::{self, keywords};\n+use syntax::parse::token;\n use syntax::std_inject;\n use syntax::visit::{self, Visitor};\n \n@@ -184,16 +183,8 @@ impl<'a> LoweringContext<'a> {\n         result\n     }\n \n-    fn lower_ident(&mut self, ident: Ident) -> Name {\n-        if ident.name != keywords::Invalid.name() {\n-            mtwt::resolve(ident)\n-        } else {\n-            ident.name\n-        }\n-    }\n-\n     fn lower_opt_sp_ident(&mut self, o_id: Option<Spanned<Ident>>) -> Option<Spanned<Name>> {\n-        o_id.map(|sp_ident| respan(sp_ident.span, self.lower_ident(sp_ident.node)))\n+        o_id.map(|sp_ident| respan(sp_ident.span, sp_ident.node.name))\n     }\n \n     fn lower_attrs(&mut self, attrs: &Vec<Attribute>) -> hir::HirVec<Attribute> {\n@@ -338,18 +329,14 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_path_full(&mut self, p: &Path, rename: bool) -> hir::Path {\n+    fn lower_path(&mut self, p: &Path) -> hir::Path {\n         hir::Path {\n             global: p.global,\n             segments: p.segments\n                        .iter()\n                        .map(|&PathSegment { identifier, ref parameters }| {\n                            hir::PathSegment {\n-                               name: if rename {\n-                                   self.lower_ident(identifier)\n-                               } else {\n-                                   identifier.name\n-                               },\n+                               name: identifier.name,\n                                parameters: self.lower_path_parameters(parameters),\n                            }\n                        })\n@@ -358,10 +345,6 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_path(&mut self, p: &Path) -> hir::Path {\n-        self.lower_path_full(p, false)\n-    }\n-\n     fn lower_path_parameters(&mut self, path_parameters: &PathParameters) -> hir::PathParameters {\n         match *path_parameters {\n             PathParameters::AngleBracketed(ref data) =>\n@@ -870,8 +853,7 @@ impl<'a> LoweringContext<'a> {\n                             // `None` can occur in body-less function signatures\n                             None | Some(Def::Local(..)) => {\n                                 hir::PatKind::Binding(this.lower_binding_mode(binding_mode),\n-                                                      respan(pth1.span,\n-                                                             this.lower_ident(pth1.node)),\n+                                                      respan(pth1.span, pth1.node.name),\n                                                       sub.as_ref().map(|x| this.lower_pat(x)))\n                             }\n                             _ => hir::PatKind::Path(hir::Path::from_name(pth1.span, pth1.node.name))\n@@ -1238,12 +1220,7 @@ impl<'a> LoweringContext<'a> {\n                             position: position,\n                         }\n                     });\n-                    // Only local variables are renamed\n-                    let rename = match self.resolver.get_resolution(e.id).map(|d| d.base_def) {\n-                        Some(Def::Local(..)) | Some(Def::Upvar(..)) => true,\n-                        _ => false,\n-                    };\n-                    hir::ExprPath(hir_qself, self.lower_path_full(path, rename))\n+                    hir::ExprPath(hir_qself, self.lower_path(path))\n                 }\n                 ExprKind::Break(opt_ident) => hir::ExprBreak(self.lower_opt_sp_ident(opt_ident)),\n                 ExprKind::Again(opt_ident) => hir::ExprAgain(self.lower_opt_sp_ident(opt_ident)),"}, {"sha": "8faa1cc1174e8568cb8b100232648b11ebb72541", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d84993b054faf9ac73239f73f5edad949f7d5341/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84993b054faf9ac73239f73f5edad949f7d5341/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=d84993b054faf9ac73239f73f5edad949f7d5341", "patch": "@@ -1138,7 +1138,7 @@ pub type ExplicitSelf = Spanned<SelfKind>;\n impl Arg {\n     pub fn to_self(&self) -> Option<ExplicitSelf> {\n         if let PatKind::Binding(BindByValue(mutbl), name, _) = self.pat.node {\n-            if name.node.unhygienize() == keywords::SelfValue.name() {\n+            if name.node == keywords::SelfValue.name() {\n                 return match self.ty.node {\n                     TyInfer => Some(respan(self.pat.span, SelfKind::Value(mutbl))),\n                     TyRptr(lt, MutTy{ref ty, mutbl}) if ty.node == TyInfer => {\n@@ -1154,7 +1154,7 @@ impl Arg {\n \n     pub fn is_self(&self) -> bool {\n         if let PatKind::Binding(_, name, _) = self.pat.node {\n-            name.node.unhygienize() == keywords::SelfValue.name()\n+            name.node == keywords::SelfValue.name()\n         } else {\n             false\n         }"}, {"sha": "78d9f5c9b7c2975d65326ebfb325a9c210e09ffd", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d84993b054faf9ac73239f73f5edad949f7d5341/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84993b054faf9ac73239f73f5edad949f7d5341/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d84993b054faf9ac73239f73f5edad949f7d5341", "patch": "@@ -456,8 +456,7 @@ fn extract_labels(ctxt: &mut LifetimeContext, b: &hir::Block) {\n     fn expression_label(ex: &hir::Expr) -> Option<(ast::Name, Span)> {\n         match ex.node {\n             hir::ExprWhile(_, _, Some(label)) |\n-            hir::ExprLoop(_, Some(label)) => Some((label.node.unhygienize(),\n-                                                   label.span)),\n+            hir::ExprLoop(_, Some(label)) => Some((label.node, label.span)),\n             _ => None,\n         }\n     }"}, {"sha": "dbca15ffd34b962e8ead9f0d6ff246855596184c", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d84993b054faf9ac73239f73f5edad949f7d5341/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84993b054faf9ac73239f73f5edad949f7d5341/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=d84993b054faf9ac73239f73f5edad949f7d5341", "patch": "@@ -247,8 +247,7 @@ fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat)\n             if let ty::TyEnum(edef, _) = pat_ty.sty {\n                 if let Def::Local(..) = cx.tcx.expect_def(p.id) {\n                     if edef.variants.iter().any(|variant|\n-                        variant.name == name.node.unhygienize()\n-                            && variant.kind() == VariantKind::Unit\n+                        variant.name == name.node && variant.kind() == VariantKind::Unit\n                     ) {\n                         let ty_path = cx.tcx.item_path_str(edef.did);\n                         let mut err = struct_span_warn!(cx.tcx.sess, p.span, E0170,"}, {"sha": "3ceca9218bdf5379acda9c219f07cc1b26346f7c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d84993b054faf9ac73239f73f5edad949f7d5341/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84993b054faf9ac73239f73f5edad949f7d5341/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d84993b054faf9ac73239f73f5edad949f7d5341", "patch": "@@ -163,7 +163,7 @@ impl LateLintPass for NonShorthandFieldPatterns {\n                     continue;\n                 }\n                 if let PatKind::Binding(_, ident, None) = fieldpat.node.pat.node {\n-                    if ident.node.unhygienize() == fieldpat.node.name {\n+                    if ident.node == fieldpat.node.name {\n                         cx.span_lint(NON_SHORTHAND_FIELD_PATTERNS, fieldpat.span,\n                                      &format!(\"the `{}:` in this pattern is redundant and can \\\n                                               be removed\", ident.node))"}, {"sha": "33bdccbf067285c03e266467c2bea52b89d83ac2", "filename": "src/librustc_trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d84993b054faf9ac73239f73f5edad949f7d5341/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84993b054faf9ac73239f73f5edad949f7d5341/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=d84993b054faf9ac73239f73f5edad949f7d5341", "patch": "@@ -51,7 +51,7 @@ pub fn create_scope_map(cx: &CrateContext,\n     for arg in args {\n         pat_util::pat_bindings(&arg.pat, |_, node_id, _, path1| {\n             scope_stack.push(ScopeStackEntry { scope_metadata: fn_metadata,\n-                                               name: Some(path1.node.unhygienize()) });\n+                                               name: Some(path1.node) });\n             scope_map.insert(node_id, fn_metadata);\n         })\n     }\n@@ -260,7 +260,7 @@ fn walk_pattern(cx: &CrateContext,\n             // N.B.: this comparison must be UNhygienic... because\n             // gdb knows nothing about the context, so any two\n             // variables with the same name will cause the problem.\n-            let name = path1.node.unhygienize();\n+            let name = path1.node;\n             let need_new_scope = scope_stack\n                 .iter()\n                 .any(|entry| entry.name == Some(name));"}, {"sha": "8537fcc221c956bc7b34ef425710515b04bc4e4c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d84993b054faf9ac73239f73f5edad949f7d5341/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84993b054faf9ac73239f73f5edad949f7d5341/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d84993b054faf9ac73239f73f5edad949f7d5341", "patch": "@@ -60,10 +60,6 @@ impl Name {\n     pub fn as_str(self) -> token::InternedString {\n         token::InternedString::new_from_name(self)\n     }\n-\n-    pub fn unhygienize(self) -> Name {\n-        token::intern(&self.as_str())\n-    }\n }\n \n impl fmt::Debug for Name {"}]}