{"sha": "78c1a87797b93e9f6fac9daecb9e5d5d8b7e60fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YzFhODc3OTdiOTNlOWY2ZmFjOWRhZWNiOWU1ZDVkOGI3ZTYwZmQ=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-07T11:26:36Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-07T11:26:36Z"}, "message": "Add a test for disabled diagnostics", "tree": {"sha": "fe2c8db255ec0ef7b3c52ac9f8c77504729453ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe2c8db255ec0ef7b3c52ac9f8c77504729453ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78c1a87797b93e9f6fac9daecb9e5d5d8b7e60fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78c1a87797b93e9f6fac9daecb9e5d5d8b7e60fd", "html_url": "https://github.com/rust-lang/rust/commit/78c1a87797b93e9f6fac9daecb9e5d5d8b7e60fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78c1a87797b93e9f6fac9daecb9e5d5d8b7e60fd/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90857ff8b08d73945598bac12a841559e86402b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/90857ff8b08d73945598bac12a841559e86402b1", "html_url": "https://github.com/rust-lang/rust/commit/90857ff8b08d73945598bac12a841559e86402b1"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "4abf602ade68ee7dbc393825888139d170bf27d1", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/78c1a87797b93e9f6fac9daecb9e5d5d8b7e60fd/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c1a87797b93e9f6fac9daecb9e5d5d8b7e60fd/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=78c1a87797b93e9f6fac9daecb9e5d5d8b7e60fd", "patch": "@@ -316,7 +316,10 @@ mod tests {\n     use stdx::trim_indent;\n     use test_utils::assert_eq_text;\n \n-    use crate::mock_analysis::{analysis_and_position, single_file, MockAnalysis};\n+    use crate::{\n+        mock_analysis::{analysis_and_position, single_file, MockAnalysis},\n+        AnalysisConfig,\n+    };\n     use expect::{expect, Expect};\n \n     /// Takes a multi-file input fixture with annotated cursor positions,\n@@ -380,6 +383,54 @@ mod tests {\n         assert_eq!(diagnostics.len(), 0, \"unexpected diagnostics:\\n{:#?}\", diagnostics);\n     }\n \n+    /// Takes a multi-file input fixture with annotated cursor position and the list of disabled diagnostics,\n+    /// and checks that provided diagnostics aren't spawned during analysis.\n+    fn check_disabled_diagnostics(\n+        ra_fixture: &str,\n+        disabled_diagnostics: impl IntoIterator<Item = String>,\n+    ) {\n+        let disabled_diagnostics: std::collections::HashSet<_> =\n+            disabled_diagnostics.into_iter().collect();\n+\n+        let mock = MockAnalysis::with_files(ra_fixture);\n+        let files = mock.files().map(|(it, _)| it).collect::<Vec<_>>();\n+        let mut analysis = mock.analysis();\n+        analysis.set_config(AnalysisConfig { disabled_diagnostics: disabled_diagnostics.clone() });\n+\n+        let diagnostics = files\n+            .clone()\n+            .into_iter()\n+            .flat_map(|file_id| analysis.diagnostics(file_id, true).unwrap())\n+            .collect::<Vec<_>>();\n+\n+        // First, we have to check that diagnostic is not emitted when it's added to the disabled diagnostics list.\n+        for diagnostic in diagnostics {\n+            if let Some(name) = diagnostic.name {\n+                assert!(!disabled_diagnostics.contains(&name), \"Diagnostic {} is disabled\", name);\n+            }\n+        }\n+\n+        // Then, we must reset the config and repeat the check, so that we'll be sure that without\n+        // config these diagnostics are emitted.\n+        // This is required for tests to not become outdated if e.g. diagnostics name changes:\n+        // without this additional run the test will pass simply because a diagnostic with an old name\n+        // will no longer exist.\n+        analysis.set_config(AnalysisConfig { disabled_diagnostics: Default::default() });\n+\n+        let diagnostics = files\n+            .into_iter()\n+            .flat_map(|file_id| analysis.diagnostics(file_id, true).unwrap())\n+            .collect::<Vec<_>>();\n+\n+        assert!(\n+            diagnostics\n+                .into_iter()\n+                .filter_map(|diag| diag.name)\n+                .any(|name| disabled_diagnostics.contains(&name)),\n+            \"At least one of the diagnostics was not emitted even without config; are the diagnostics names correct?\"\n+        );\n+    }\n+\n     fn check_expect(ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = single_file(ra_fixture);\n         let diagnostics = analysis.diagnostics(file_id, true).unwrap();\n@@ -814,4 +865,9 @@ struct Foo {\n             \",\n         )\n     }\n+\n+    #[test]\n+    fn test_disabled_diagnostics() {\n+        check_disabled_diagnostics(r#\"mod foo;\"#, vec![\"unresolved-module\".to_string()]);\n+    }\n }"}]}