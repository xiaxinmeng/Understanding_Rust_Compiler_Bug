{"sha": "913f5974026334dbd2eeb4f39b0e4ea767e1b28d", "node_id": "C_kwDOAAsO6NoAKDkxM2Y1OTc0MDI2MzM0ZGJkMmVlYjRmMzliMGU0ZWE3NjdlMWIyOGQ", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-14T12:25:59Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-17T08:54:24Z"}, "message": "infer: use derive more\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "36c4ce60a7fd934a1e4d2d585b59466199267baa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36c4ce60a7fd934a1e4d2d585b59466199267baa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/913f5974026334dbd2eeb4f39b0e4ea767e1b28d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/913f5974026334dbd2eeb4f39b0e4ea767e1b28d", "html_url": "https://github.com/rust-lang/rust/commit/913f5974026334dbd2eeb4f39b0e4ea767e1b28d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/913f5974026334dbd2eeb4f39b0e4ea767e1b28d/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62", "html_url": "https://github.com/rust-lang/rust/commit/f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62"}], "stats": {"total": 95, "additions": 46, "deletions": 49}, "files": [{"sha": "18b3408b06ab435a75ccead96437e58f08c62378", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/913f5974026334dbd2eeb4f39b0e4ea767e1b28d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/913f5974026334dbd2eeb4f39b0e4ea767e1b28d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=913f5974026334dbd2eeb4f39b0e4ea767e1b28d", "patch": "@@ -164,7 +164,9 @@ infer_region_explanation = {$pref_kind ->\n }\n \n infer_mismatched_static_lifetime = incompatible lifetime on type\n-infer_msl_impl_note = ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n+infer_does_not_outlive_static_from_impl = ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n+infer_implicit_static_lifetime_note = this has an implicit `'static` lifetime requirement\n+infer_implicit_static_lifetime_suggestion = consider relaxing the implicit `'static` requirement\n infer_msl_introduces_static = introduces a `'static` lifetime requirement\n infer_msl_unmet_req = because this has an unmet lifetime requirement\n infer_msl_trait_note = this has an implicit `'static` lifetime requirement"}, {"sha": "25e8630bf6bd7f3562691915a327e8384e813c45", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 29, "deletions": 42, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/913f5974026334dbd2eeb4f39b0e4ea767e1b28d/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913f5974026334dbd2eeb4f39b0e4ea767e1b28d/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=913f5974026334dbd2eeb4f39b0e4ea767e1b28d", "patch": "@@ -459,47 +459,34 @@ impl AddToDiagnostic for IntroducesStaticBecauseUnmetLifetimeReq {\n     }\n }\n \n-pub struct ImplNote {\n-    pub impl_span: Option<Span>,\n-}\n-\n-impl AddToDiagnostic for ImplNote {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        match self.impl_span {\n-            Some(span) => diag.span_note(span, fluent::infer::msl_impl_note),\n-            None => diag.note(fluent::infer::msl_impl_note),\n-        };\n-    }\n-}\n-\n-pub enum TraitSubdiag {\n-    Note { span: Span },\n-    Sugg { span: Span },\n+// FIXME(#100717): replace with a `Option<Span>` when subdiagnostic supports that\n+#[derive(Subdiagnostic)]\n+pub enum DoesNotOutliveStaticFromImpl {\n+    #[note(infer::does_not_outlive_static_from_impl)]\n+    Spanned {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[note(infer::does_not_outlive_static_from_impl)]\n+    Unspanned,\n }\n \n-// FIXME(#100717) used in `Vec<TraitSubdiag>` so requires eager translation/list support\n-impl AddToDiagnostic for TraitSubdiag {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        match self {\n-            TraitSubdiag::Note { span } => {\n-                diag.span_note(span, \"this has an implicit `'static` lifetime requirement\");\n-            }\n-            TraitSubdiag::Sugg { span } => {\n-                diag.span_suggestion_verbose(\n-                    span,\n-                    \"consider relaxing the implicit `'static` requirement\",\n-                    \" + '_\".to_owned(),\n-                    rustc_errors::Applicability::MaybeIncorrect,\n-                );\n-            }\n-        }\n-    }\n+#[derive(Subdiagnostic)]\n+pub enum ImplicitStaticLifetimeSubdiag {\n+    #[note(infer::implicit_static_lifetime_note)]\n+    Note {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[suggestion_verbose(\n+        infer::implicit_static_lifetime_suggestion,\n+        code = \" + '_\",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    Sugg {\n+        #[primary_span]\n+        span: Span,\n+    },\n }\n \n #[derive(Diagnostic)]\n@@ -512,7 +499,7 @@ pub struct MismatchedStaticLifetime<'a> {\n     #[subdiagnostic]\n     pub expl: Option<note_and_explain::RegionExplanation<'a>>,\n     #[subdiagnostic]\n-    pub impl_note: ImplNote,\n-    #[subdiagnostic]\n-    pub trait_subdiags: Vec<TraitSubdiag>,\n+    pub does_not_outlive_static_from_impl: DoesNotOutliveStaticFromImpl,\n+    #[subdiagnostic(eager)]\n+    pub implicit_static_lifetimes: Vec<ImplicitStaticLifetimeSubdiag>,\n }"}, {"sha": "c5f2a1a3f7dce687ef0f44c2bb334393edef90b9", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/913f5974026334dbd2eeb4f39b0e4ea767e1b28d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913f5974026334dbd2eeb4f39b0e4ea767e1b28d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=913f5974026334dbd2eeb4f39b0e4ea767e1b28d", "patch": "@@ -2,7 +2,9 @@\n //! to hold.\n \n use crate::errors::{note_and_explain, IntroducesStaticBecauseUnmetLifetimeReq};\n-use crate::errors::{ImplNote, MismatchedStaticLifetime, TraitSubdiag};\n+use crate::errors::{\n+    DoesNotOutliveStaticFromImpl, ImplicitStaticLifetimeSubdiag, MismatchedStaticLifetime,\n+};\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{SubregionOrigin, TypeTrace};\n@@ -56,7 +58,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             note_and_explain::SuffixKind::Continues,\n         );\n         let mut impl_span = None;\n-        let mut trait_subdiags = Vec::new();\n+        let mut implicit_static_lifetimes = Vec::new();\n         if let Some(impl_node) = self.tcx().hir().get_if_local(*impl_def_id) {\n             // If an impl is local, then maybe this isn't what they want. Try to\n             // be as helpful as possible with implicit lifetimes.\n@@ -90,10 +92,12 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 // Otherwise, point at all implicit static lifetimes\n \n                 for span in &traits {\n-                    trait_subdiags.push(TraitSubdiag::Note { span: *span });\n+                    implicit_static_lifetimes\n+                        .push(ImplicitStaticLifetimeSubdiag::Note { span: *span });\n                     // It would be nice to put this immediately under the above note, but they get\n                     // pushed to the end.\n-                    trait_subdiags.push(TraitSubdiag::Sugg { span: span.shrink_to_hi() });\n+                    implicit_static_lifetimes\n+                        .push(ImplicitStaticLifetimeSubdiag::Sugg { span: span.shrink_to_hi() });\n                 }\n             }\n         } else {\n@@ -105,8 +109,10 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             cause_span: cause.span,\n             unmet_lifetime_reqs: multispan_subdiag,\n             expl,\n-            impl_note: ImplNote { impl_span },\n-            trait_subdiags,\n+            does_not_outlive_static_from_impl: impl_span\n+                .map(|span| DoesNotOutliveStaticFromImpl::Spanned { span })\n+                .unwrap_or(DoesNotOutliveStaticFromImpl::Unspanned),\n+            implicit_static_lifetimes,\n         };\n         let reported = self.tcx().sess.emit_err(err);\n         Some(reported)"}, {"sha": "d1acb71384220abd1c90a7cdb1885d9db5af3b62", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/913f5974026334dbd2eeb4f39b0e4ea767e1b28d/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913f5974026334dbd2eeb4f39b0e4ea767e1b28d/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=913f5974026334dbd2eeb4f39b0e4ea767e1b28d", "patch": "@@ -309,6 +309,8 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n                     report_error_if_not_applied_to_span(attr, &info)?;\n \n                     let binding = info.binding.binding.clone();\n+                    // FIXME(#100717): support `Option<Span>` on `primary_span` like in the\n+                    // diagnostic derive\n                     self.span_field.set_once(binding, span);\n                 }\n "}]}