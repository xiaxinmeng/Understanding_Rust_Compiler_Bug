{"sha": "2dc9cfca50a777f9bda9a6bc66496dfbd782bfd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYzljZmNhNTBhNzc3ZjliZGE5YTZiYzY2NDk2ZGZiZDc4MmJmZDU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-03-27T01:28:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-27T01:28:26Z"}, "message": "Merge pull request #3477 from topecongiro/test-with-larger-stack-size\n\nTest with larger stack size", "tree": {"sha": "755a193ba05aebea89a98251b8f9eb00a685d6af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/755a193ba05aebea89a98251b8f9eb00a685d6af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dc9cfca50a777f9bda9a6bc66496dfbd782bfd5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcmtG6CRBK7hj4Ov3rIwAAdHIIADSS8mfXK6mOsa8hNezJfvW4\n8/ngTKCVgZmzxo7gLp0gSzQLGFAcrgYK0VvlaXX8HCf1k89s6cVXMRMaaYjSkDyI\nxtkko1bs6hjy5C+1lZf55En12yiWL7yTm7iQJwXWofuJBsS6gO3EPjH57gfzJCnL\nqhDTyFcjSjFbP6BYm3vw6AGKlPbK5Zu8a4n9kGmgJ0Dm6isDmKr++uoCHfrvDI3O\nxy25wXa4/dMR3ukCoZMXqfCaByYtOMfuwVyHWCkYVsj0vbWf5tm29VltVOTo8JP2\n19jVq1U0GIFX5KOwDgHD7Nqlp3ChP1J39A6z8dHOAfMiJwZ5WaEVd2d5AxxovQc=\n=bb8D\n-----END PGP SIGNATURE-----\n", "payload": "tree 755a193ba05aebea89a98251b8f9eb00a685d6af\nparent a373e73f5a9e4db97e69875ff787dfa4de9958d7\nparent a7728d352c6714b22ba92054c0ca6aaa8bc3a366\nauthor Seiichi Uchida <seuchida@gmail.com> 1553650106 +0900\ncommitter GitHub <noreply@github.com> 1553650106 +0900\n\nMerge pull request #3477 from topecongiro/test-with-larger-stack-size\n\nTest with larger stack size"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc9cfca50a777f9bda9a6bc66496dfbd782bfd5", "html_url": "https://github.com/rust-lang/rust/commit/2dc9cfca50a777f9bda9a6bc66496dfbd782bfd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dc9cfca50a777f9bda9a6bc66496dfbd782bfd5/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a373e73f5a9e4db97e69875ff787dfa4de9958d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a373e73f5a9e4db97e69875ff787dfa4de9958d7", "html_url": "https://github.com/rust-lang/rust/commit/a373e73f5a9e4db97e69875ff787dfa4de9958d7"}, {"sha": "a7728d352c6714b22ba92054c0ca6aaa8bc3a366", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7728d352c6714b22ba92054c0ca6aaa8bc3a366", "html_url": "https://github.com/rust-lang/rust/commit/a7728d352c6714b22ba92054c0ca6aaa8bc3a366"}], "stats": {"total": 70, "additions": 50, "deletions": 20}, "files": [{"sha": "905c0748f45994eef5bd079a3af437b3a1bbd442", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc9cfca50a777f9bda9a6bc66496dfbd782bfd5/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/2dc9cfca50a777f9bda9a6bc66496dfbd782bfd5/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=2dc9cfca50a777f9bda9a6bc66496dfbd782bfd5", "patch": "@@ -46,7 +46,7 @@ script:\n   - |\n     if [ -z ${INTEGRATION} ]; then\n       cargo build\n-      RUST_MIN_STACK=8388608 cargo test\n+      cargo test\n     else\n       ./ci/integration.sh\n     fi"}, {"sha": "87c1773ce8eb1617436a3fcba7bb48b98df859be", "filename": "appveyor.yml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dc9cfca50a777f9bda9a6bc66496dfbd782bfd5/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/2dc9cfca50a777f9bda9a6bc66496dfbd782bfd5/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=2dc9cfca50a777f9bda9a6bc66496dfbd782bfd5", "patch": "@@ -2,7 +2,6 @@\n # and modified (mainly removal of deployment) to suit rustfmt.\r\n \r\n environment:\r\n-  RUST_MIN_STACK: 8388608\r\n   global:\r\n     PROJECT_NAME: rustfmt\r\n   matrix:\r"}, {"sha": "fc25d27b531ec41f319bc4182a7fdf25c2672dde", "filename": "src/test/mod.rs", "status": "modified", "additions": 49, "deletions": 18, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2dc9cfca50a777f9bda9a6bc66496dfbd782bfd5/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc9cfca50a777f9bda9a6bc66496dfbd782bfd5/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=2dc9cfca50a777f9bda9a6bc66496dfbd782bfd5", "patch": "@@ -7,6 +7,7 @@ use std::mem;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::str::Chars;\n+use std::thread;\n \n use crate::config::{Color, Config, EmitMode, FileName, NewlineStyle, ReportTactic};\n use crate::formatting::{ReportedErrors, SourceFile};\n@@ -25,6 +26,32 @@ const SKIP_FILE_WHITE_LIST: &[&str] = &[\n     \"issue-3434/no_entry.rs\",\n ];\n \n+struct TestSetting {\n+    /// The size of the stack of the thread that run tests.\n+    stack_size: usize,\n+}\n+\n+impl Default for TestSetting {\n+    fn default() -> Self {\n+        TestSetting {\n+            stack_size: 8388608, // 8MB\n+        }\n+    }\n+}\n+\n+fn run_test_with<F>(test_setting: &TestSetting, f: F)\n+where\n+    F: FnOnce(),\n+    F: Send + 'static,\n+{\n+    thread::Builder::new()\n+        .stack_size(test_setting.stack_size)\n+        .spawn(f)\n+        .expect(\"Failed to create a test thread\")\n+        .join()\n+        .expect(\"Failed to join a test thread\")\n+}\n+\n fn is_file_skip(path: &Path) -> bool {\n     SKIP_FILE_WHITE_LIST\n         .iter()\n@@ -114,13 +141,15 @@ fn write_message(msg: &str) {\n // exactly.\n #[test]\n fn system_tests() {\n-    // Get all files in the tests/source directory.\n-    let files = get_test_files(Path::new(\"tests/source\"), true);\n-    let (_reports, count, fails) = check_files(files, &None);\n-\n-    // Display results.\n-    println!(\"Ran {} system tests.\", count);\n-    assert_eq!(fails, 0, \"{} system tests failed\", fails);\n+    run_test_with(&TestSetting::default(), || {\n+        // Get all files in the tests/source directory.\n+        let files = get_test_files(Path::new(\"tests/source\"), true);\n+        let (_reports, count, fails) = check_files(files, &None);\n+\n+        // Display results.\n+        println!(\"Ran {} system tests.\", count);\n+        assert_eq!(fails, 0, \"{} system tests failed\", fails);\n+    });\n }\n \n // Do the same for tests/coverage-source directory.\n@@ -228,17 +257,19 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n // rustfmt.\n #[test]\n fn idempotence_tests() {\n-    match option_env!(\"CFG_RELEASE_CHANNEL\") {\n-        None | Some(\"nightly\") => {}\n-        _ => return, // these tests require nightly\n-    }\n-    // Get all files in the tests/target directory.\n-    let files = get_test_files(Path::new(\"tests/target\"), true);\n-    let (_reports, count, fails) = check_files(files, &None);\n-\n-    // Display results.\n-    println!(\"Ran {} idempotent tests.\", count);\n-    assert_eq!(fails, 0, \"{} idempotent tests failed\", fails);\n+    run_test_with(&TestSetting::default(), || {\n+        match option_env!(\"CFG_RELEASE_CHANNEL\") {\n+            None | Some(\"nightly\") => {}\n+            _ => return, // these tests require nightly\n+        }\n+        // Get all files in the tests/target directory.\n+        let files = get_test_files(Path::new(\"tests/target\"), true);\n+        let (_reports, count, fails) = check_files(files, &None);\n+\n+        // Display results.\n+        println!(\"Ran {} idempotent tests.\", count);\n+        assert_eq!(fails, 0, \"{} idempotent tests failed\", fails);\n+    });\n }\n \n // Run rustfmt on itself. This operation must be idempotent. We also check that"}]}