{"sha": "290ed0297f0b4ee2aa5fe88bc7800c3fb6b0678c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MGVkMDI5N2YwYjRlZTJhYTVmZTg4YmM3ODAwYzNmYjZiMDY3OGM=", "commit": {"author": {"name": "Michael Mc Donnell", "email": "michael@mcdonnell.dk", "date": "2020-02-26T20:13:31Z"}, "committer": {"name": "Michael Mc Donnell", "email": "michael@mcdonnell.dk", "date": "2020-02-27T01:34:56Z"}, "message": "Use assert_ne in hash tests\n\nThe hash tests were written before the assert_ne macro was added to the standard library. The assert_ne macro provides better output in case of a failure.", "tree": {"sha": "35a8dda83e25c929e4076ac72bc4532f9be48c0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35a8dda83e25c929e4076ac72bc4532f9be48c0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/290ed0297f0b4ee2aa5fe88bc7800c3fb6b0678c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/290ed0297f0b4ee2aa5fe88bc7800c3fb6b0678c", "html_url": "https://github.com/rust-lang/rust/commit/290ed0297f0b4ee2aa5fe88bc7800c3fb6b0678c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/290ed0297f0b4ee2aa5fe88bc7800c3fb6b0678c/comments", "author": {"login": "MichaelMcDonnell", "id": 20253, "node_id": "MDQ6VXNlcjIwMjUz", "avatar_url": "https://avatars.githubusercontent.com/u/20253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MichaelMcDonnell", "html_url": "https://github.com/MichaelMcDonnell", "followers_url": "https://api.github.com/users/MichaelMcDonnell/followers", "following_url": "https://api.github.com/users/MichaelMcDonnell/following{/other_user}", "gists_url": "https://api.github.com/users/MichaelMcDonnell/gists{/gist_id}", "starred_url": "https://api.github.com/users/MichaelMcDonnell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MichaelMcDonnell/subscriptions", "organizations_url": "https://api.github.com/users/MichaelMcDonnell/orgs", "repos_url": "https://api.github.com/users/MichaelMcDonnell/repos", "events_url": "https://api.github.com/users/MichaelMcDonnell/events{/privacy}", "received_events_url": "https://api.github.com/users/MichaelMcDonnell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MichaelMcDonnell", "id": 20253, "node_id": "MDQ6VXNlcjIwMjUz", "avatar_url": "https://avatars.githubusercontent.com/u/20253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MichaelMcDonnell", "html_url": "https://github.com/MichaelMcDonnell", "followers_url": "https://api.github.com/users/MichaelMcDonnell/followers", "following_url": "https://api.github.com/users/MichaelMcDonnell/following{/other_user}", "gists_url": "https://api.github.com/users/MichaelMcDonnell/gists{/gist_id}", "starred_url": "https://api.github.com/users/MichaelMcDonnell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MichaelMcDonnell/subscriptions", "organizations_url": "https://api.github.com/users/MichaelMcDonnell/orgs", "repos_url": "https://api.github.com/users/MichaelMcDonnell/repos", "events_url": "https://api.github.com/users/MichaelMcDonnell/events{/privacy}", "received_events_url": "https://api.github.com/users/MichaelMcDonnell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abc3073c92df034636a823c5382ece2186d22b9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/abc3073c92df034636a823c5382ece2186d22b9e", "html_url": "https://github.com/rust-lang/rust/commit/abc3073c92df034636a823c5382ece2186d22b9e"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "12aa20a0bbd87ab60d78ac309b36b14036895ce2", "filename": "src/libcore/tests/hash/sip.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/290ed0297f0b4ee2aa5fe88bc7800c3fb6b0678c/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290ed0297f0b4ee2aa5fe88bc7800c3fb6b0678c/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs?ref=290ed0297f0b4ee2aa5fe88bc7800c3fb6b0678c", "patch": "@@ -238,7 +238,7 @@ fn test_siphash_2_4() {\n #[cfg(target_pointer_width = \"32\")]\n fn test_hash_usize() {\n     let val = 0xdeadbeef_deadbeef_u64;\n-    assert!(hash(&(val as u64)) != hash(&(val as usize)));\n+    assert_ne!(hash(&(val as u64)), hash(&(val as usize)));\n     assert_eq!(hash(&(val as u32)), hash(&(val as usize)));\n }\n \n@@ -247,7 +247,7 @@ fn test_hash_usize() {\n fn test_hash_usize() {\n     let val = 0xdeadbeef_deadbeef_u64;\n     assert_eq!(hash(&(val as u64)), hash(&(val as usize)));\n-    assert!(hash(&(val as u32)) != hash(&(val as usize)));\n+    assert_ne!(hash(&(val as u32)), hash(&(val as usize)));\n }\n \n #[test]\n@@ -262,14 +262,14 @@ fn test_hash_idempotent() {\n fn test_hash_no_bytes_dropped_64() {\n     let val = 0xdeadbeef_deadbeef_u64;\n \n-    assert!(hash(&val) != hash(&zero_byte(val, 0)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 1)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 2)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 3)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 4)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 5)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 6)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 7)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 0)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 1)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 2)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 3)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 4)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 5)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 6)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 7)));\n \n     fn zero_byte(val: u64, byte: usize) -> u64 {\n         assert!(byte < 8);\n@@ -281,10 +281,10 @@ fn test_hash_no_bytes_dropped_64() {\n fn test_hash_no_bytes_dropped_32() {\n     let val = 0xdeadbeef_u32;\n \n-    assert!(hash(&val) != hash(&zero_byte(val, 0)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 1)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 2)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 3)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 0)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 1)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 2)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 3)));\n \n     fn zero_byte(val: u32, byte: usize) -> u32 {\n         assert!(byte < 4);\n@@ -299,14 +299,17 @@ fn test_hash_no_concat_alias() {\n     let u = (\"a\", \"abb\");\n \n     assert!(s != t && t != u);\n-    assert!(hash(&s) != hash(&t) && hash(&s) != hash(&u));\n+    assert_ne!(s, t);\n+    assert_ne!(t, u);\n+    assert_ne!(hash(&s), hash(&t));\n+    assert_ne!(hash(&s), hash(&u));\n \n     let u = [1, 0, 0, 0];\n     let v = (&u[..1], &u[1..3], &u[3..]);\n     let w = (&u[..], &u[4..4], &u[4..4]);\n \n-    assert!(v != w);\n-    assert!(hash(&v) != hash(&w));\n+    assert_ne!(v, w);\n+    assert_ne!(hash(&v), hash(&w));\n }\n \n #[test]"}]}