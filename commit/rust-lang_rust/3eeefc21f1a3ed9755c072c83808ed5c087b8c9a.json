{"sha": "3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZWVmYzIxZjFhM2VkOTc1NWMwNzJjODM4MDhlZDVjMDg3YjhjOWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-22T14:36:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-22T14:36:14Z"}, "message": "Auto merge of #69374 - Dylan-DPC:rollup-x7mjd5z, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #68984 (Make `u8::is_ascii` a stable `const fn`)\n - #69339 (Add test for #69312)\n - #69346 (Clean up E0323, E0324, E0325 and E0326 explanations)\n - #69348 (Wrong error message for move_ref_pattern)\n - #69349 (MIR is not an experiment anymore)\n - #69354 (Test `Duration::new` panics on overflow)\n - #69370 (move const_eval.rs into the module folder)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "b76ff147c70897424acc2728f6c1249c0d52a634", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b76ff147c70897424acc2728f6c1249c0d52a634"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "html_url": "https://github.com/rust-lang/rust/commit/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07534591ffb222308c5ac84aad4da64582811283", "url": "https://api.github.com/repos/rust-lang/rust/commits/07534591ffb222308c5ac84aad4da64582811283", "html_url": "https://github.com/rust-lang/rust/commit/07534591ffb222308c5ac84aad4da64582811283"}, {"sha": "e5fb1291a0773d00bdb1d53cbfad53b5db94c123", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5fb1291a0773d00bdb1d53cbfad53b5db94c123", "html_url": "https://github.com/rust-lang/rust/commit/e5fb1291a0773d00bdb1d53cbfad53b5db94c123"}], "stats": {"total": 110, "additions": 69, "deletions": 41}, "files": [{"sha": "43c5f7cf6b939c4a418400c464f5292425ffdf8d", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "patch": "@@ -4324,8 +4324,9 @@ impl u8 {\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.43.0\")]\n     #[inline]\n-    pub fn is_ascii(&self) -> bool {\n+    pub const fn is_ascii(&self) -> bool {\n         *self & 128 == 0\n     }\n "}, {"sha": "c1fbdf7df76fc1f3784b652ada5c29f9ae011194", "filename": "src/libcore/tests/time.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftime.rs?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "patch": "@@ -11,6 +11,12 @@ fn creation() {\n     assert_eq!(Duration::from_millis(4000), Duration::new(4, 0));\n }\n \n+#[test]\n+#[should_panic]\n+fn new_overflow() {\n+    let _ = Duration::new(::core::u64::MAX, 1_000_000_000);\n+}\n+\n #[test]\n fn secs() {\n     assert_eq!(Duration::new(0, 0).as_secs(), 0);"}, {"sha": "0bf42d17ebcf4e16874c12a3ef25d52cdbf341ae", "filename": "src/librustc_error_codes/error_codes/E0323.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0323.md", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0323.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0323.md?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "patch": "@@ -1,4 +1,5 @@\n An associated const was implemented when another trait item was expected.\n+\n Erroneous code example:\n \n ```compile_fail,E0323"}, {"sha": "1442cb77dd977c67aee759bd84149b9efe678696", "filename": "src/librustc_error_codes/error_codes/E0324.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0324.md", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0324.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0324.md?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "patch": "@@ -1,5 +1,6 @@\n-A method was implemented when another trait item was expected. Erroneous\n-code example:\n+A method was implemented when another trait item was expected.\n+\n+Erroneous code example:\n \n ```compile_fail,E0324\n struct Bar;"}, {"sha": "656fd1ec82b56d8e31637d92adfde31ff3cbd88b", "filename": "src/librustc_error_codes/error_codes/E0325.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0325.md", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0325.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0325.md?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "patch": "@@ -1,4 +1,5 @@\n An associated type was implemented when another trait item was expected.\n+\n Erroneous code example:\n \n ```compile_fail,E0325"}, {"sha": "3d357819c7f91ca9418f3c0b8aec50a688e341f8", "filename": "src/librustc_error_codes/error_codes/E0326.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0326.md", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0326.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0326.md?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "patch": "@@ -1,7 +1,6 @@\n-The types of any associated constants in a trait implementation must match the\n-types in the trait definition. This error indicates that there was a mismatch.\n+An implementation of a trait doesn't match the type contraint.\n \n-Here's an example of this error:\n+Erroneous code example:\n \n ```compile_fail,E0326\n trait Foo {\n@@ -14,3 +13,6 @@ impl Foo for Bar {\n     const BAR: u32 = 5; // error, expected bool, found u32\n }\n ```\n+\n+The types of any associated constants in a trait implementation must match the\n+types in the trait definition."}, {"sha": "04e2558a308b3c81d62e43aa696fd46ee51b69db", "filename": "src/librustc_mir/const_eval/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "previous_filename": "src/librustc_mir/const_eval.rs"}, {"sha": "284dd74ce99d48df5bce2b928c613c949d6ac350", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "patch": "@@ -1,6 +1,6 @@\n /*!\n \n-Rust MIR: a lowered representation of Rust. Also: an experiment!\n+Rust MIR: a lowered representation of Rust.\n \n */\n "}, {"sha": "3dfe826ad2abbe611c78db12cf99e1474c372d3b", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "patch": "@@ -659,7 +659,7 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pat<'_\n             });\n             if !conflicts_ref.is_empty() {\n                 let occurs_because = format!(\n-                    \"move occurs because `{}` has type `{}` which does implement the `Copy` trait\",\n+                    \"move occurs because `{}` has type `{}` which does not implement the `Copy` trait\",\n                     name,\n                     tables.node_type(pat.hir_id),\n                 );"}, {"sha": "d8424549f93e6b29f9bf61d68fa31e540ee7aa3d", "filename": "src/test/ui/consts/is_ascii.rs", "status": "renamed", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Ftest%2Fui%2Fconsts%2Fis_ascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Ftest%2Fui%2Fconsts%2Fis_ascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fis_ascii.rs?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "patch": "@@ -3,7 +3,13 @@\n static X: bool = 'a'.is_ascii();\n static Y: bool = '\u00e4'.is_ascii();\n \n+static BX: bool = b'a'.is_ascii();\n+static BY: bool = 192u8.is_ascii();\n+\n fn main() {\n     assert!(X);\n     assert!(!Y);\n+\n+    assert!(BX);\n+    assert!(!BY);\n }", "previous_filename": "src/test/ui/consts/std/char.rs"}, {"sha": "413c67520798fda98950ad1c5e389545861aee56", "filename": "src/test/ui/consts/issue-69312.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Ftest%2Fui%2Fconsts%2Fissue-69312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Ftest%2Fui%2Fconsts%2Fissue-69312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69312.rs?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "patch": "@@ -0,0 +1,10 @@\n+// build-pass\n+\n+// Verify that the compiler doesn't ICE during const prop while evaluating the index operation.\n+\n+#![allow(unconditional_panic)]\n+\n+fn main() {\n+    let cols = [0u32; 0];\n+    cols[0];\n+}"}, {"sha": "f2186b9298e688d12c4e35f577d8ef9b66c0ce8f", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "patch": "@@ -15,7 +15,7 @@ LL |         Some(_z @ ref _y) => {}\n    |              |    |\n    |              |    value borrowed here after move\n    |              value moved into `_z` here\n-   |              move occurs because `_z` has type `X` which does implement the `Copy` trait\n+   |              move occurs because `_z` has type `X` which does not implement the `Copy` trait\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:29:14\n@@ -34,7 +34,7 @@ LL |         Some(_z @ ref mut _y) => {}\n    |              |    |\n    |              |    value borrowed here after move\n    |              value moved into `_z` here\n-   |              move occurs because `_z` has type `X` which does implement the `Copy` trait\n+   |              move occurs because `_z` has type `X` which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:21:19"}, {"sha": "54900e958c2fa8b4d6db2b66e5043b3a840702a1", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse-promotion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "patch": "@@ -6,7 +6,7 @@ LL |     let a @ ref b = U;\n    |         |   |\n    |         |   value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `main::U` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `main::U` which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "f819e671436ec0a55bcf64674c3aa0c1b127e191", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "patch": "@@ -6,7 +6,7 @@ LL |     let a @ ref b = U;\n    |         |   |\n    |         |   value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `main::U` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `main::U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:9\n@@ -17,7 +17,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         |            |              value borrowed here after move\n    |         |            value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `(main::U, main::U)` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `(main::U, main::U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:14\n@@ -27,7 +27,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |              |       |\n    |              |       value borrowed here after move\n    |              value moved into `b` here\n-   |              move occurs because `b` has type `main::U` which does implement the `Copy` trait\n+   |              move occurs because `b` has type `main::U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:33\n@@ -37,7 +37,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |                                 |   |\n    |                                 |   value borrowed here after move\n    |                                 value moved into `d` here\n-   |                                 move occurs because `d` has type `main::U` which does implement the `Copy` trait\n+   |                                 move occurs because `d` has type `main::U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:38:9\n@@ -48,7 +48,7 @@ LL |     let a @ [ref mut b, ref c] = [U, U];\n    |         |    |          value borrowed here after move\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `[main::U; 2]` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `[main::U; 2]` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:41:9\n@@ -58,7 +58,7 @@ LL |     let a @ ref b = u();\n    |         |   |\n    |         |   value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `main::U` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `main::U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:9\n@@ -69,7 +69,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         |            |              value borrowed here after move\n    |         |            value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `(main::U, main::U)` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `(main::U, main::U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:14\n@@ -79,7 +79,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |              |       |\n    |              |       value borrowed here after move\n    |              value moved into `b` here\n-   |              move occurs because `b` has type `main::U` which does implement the `Copy` trait\n+   |              move occurs because `b` has type `main::U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:33\n@@ -89,7 +89,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |                                 |   |\n    |                                 |   value borrowed here after move\n    |                                 value moved into `d` here\n-   |                                 move occurs because `d` has type `main::U` which does implement the `Copy` trait\n+   |                                 move occurs because `d` has type `main::U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:51:9\n@@ -100,7 +100,7 @@ LL |     let a @ [ref mut b, ref c] = [u(), u()];\n    |         |    |          value borrowed here after move\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `[main::U; 2]` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `[main::U; 2]` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:56:9\n@@ -110,7 +110,7 @@ LL |         a @ Some(ref b) => {}\n    |         |        |\n    |         |        value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `std::option::Option<main::U>` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `std::option::Option<main::U>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:9\n@@ -121,7 +121,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         |                 |              value borrowed here after move\n    |         |                 value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `std::option::Option<(main::U, main::U)>` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `std::option::Option<(main::U, main::U)>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:19\n@@ -131,7 +131,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   |       |\n    |                   |       value borrowed here after move\n    |                   value moved into `b` here\n-   |                   move occurs because `b` has type `main::U` which does implement the `Copy` trait\n+   |                   move occurs because `b` has type `main::U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:38\n@@ -141,7 +141,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      |   |\n    |                                      |   value borrowed here after move\n    |                                      value moved into `d` here\n-   |                                      move occurs because `d` has type `main::U` which does implement the `Copy` trait\n+   |                                      move occurs because `d` has type `main::U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:71:9\n@@ -152,7 +152,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         |             |      value borrowed here after move\n    |         |             value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `std::option::Option<[main::U; 2]>` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `std::option::Option<[main::U; 2]>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:77:9\n@@ -162,7 +162,7 @@ LL |         a @ Some(ref b) => {}\n    |         |        |\n    |         |        value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `std::option::Option<main::U>` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `std::option::Option<main::U>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:9\n@@ -173,7 +173,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         |                 |              value borrowed here after move\n    |         |                 value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `std::option::Option<(main::U, main::U)>` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `std::option::Option<(main::U, main::U)>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:19\n@@ -183,7 +183,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   |       |\n    |                   |       value borrowed here after move\n    |                   value moved into `b` here\n-   |                   move occurs because `b` has type `main::U` which does implement the `Copy` trait\n+   |                   move occurs because `b` has type `main::U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:38\n@@ -193,7 +193,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      |   |\n    |                                      |   value borrowed here after move\n    |                                      value moved into `d` here\n-   |                                      move occurs because `d` has type `main::U` which does implement the `Copy` trait\n+   |                                      move occurs because `d` has type `main::U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:93:9\n@@ -204,7 +204,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         |             |      value borrowed here after move\n    |         |             value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `std::option::Option<[main::U; 2]>` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `std::option::Option<[main::U; 2]>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n@@ -214,7 +214,7 @@ LL |     fn f1(a @ ref b: U) {}\n    |           |   |\n    |           |   value borrowed here after move\n    |           value moved into `a` here\n-   |           move occurs because `a` has type `main::U` which does implement the `Copy` trait\n+   |           move occurs because `a` has type `main::U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:11\n@@ -225,7 +225,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           |            |              value borrowed here after move\n    |           |            value borrowed here after move\n    |           value moved into `a` here\n-   |           move occurs because `a` has type `(main::U, main::U)` which does implement the `Copy` trait\n+   |           move occurs because `a` has type `(main::U, main::U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:20\n@@ -235,7 +235,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                    |   |\n    |                    |   value borrowed here after move\n    |                    value moved into `b` here\n-   |                    move occurs because `b` has type `main::U` which does implement the `Copy` trait\n+   |                    move occurs because `b` has type `main::U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:31\n@@ -245,7 +245,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                               |       |\n    |                               |       value borrowed here after move\n    |                               value moved into `d` here\n-   |                               move occurs because `d` has type `main::U` which does implement the `Copy` trait\n+   |                               move occurs because `d` has type `main::U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:25:11\n@@ -256,7 +256,7 @@ LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n    |           |    |          value borrowed here after move\n    |           |    value borrowed here after move\n    |           value moved into `a` here\n-   |           move occurs because `a` has type `[main::U; 2]` which does implement the `Copy` trait\n+   |           move occurs because `a` has type `[main::U; 2]` which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:22"}, {"sha": "e74f227b5e48c681f82044682c1a3785bf0545f7", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "patch": "@@ -96,7 +96,7 @@ LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         |    |          value borrowed here after move\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `(main::U, main::U)` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `(main::U, main::U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:70:9\n@@ -108,7 +108,7 @@ LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         |    |   value borrowed here after move\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `&mut (main::U, [main::U; 2])` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `&mut (main::U, [main::U; 2])` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:74:9\n@@ -118,7 +118,7 @@ LL |     let a @ &mut ref mut b = &mut U;\n    |         |        |\n    |         |        value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `&mut main::U` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `&mut main::U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:77:9\n@@ -129,7 +129,7 @@ LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         |         |          value borrowed here after move\n    |         |         value borrowed here after move\n    |         value moved into `a` here\n-   |         move occurs because `a` has type `&mut (main::U, main::U)` which does implement the `Copy` trait\n+   |         move occurs because `a` has type `&mut (main::U, main::U)` which does not implement the `Copy` trait\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:82:9"}, {"sha": "19e815a1ae8adc6e2130f5a078f2ab49507f40ee", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "patch": "@@ -33,7 +33,7 @@ LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |                             |   |\n    |                             |   value borrowed here after move\n    |                             value moved into `b` here\n-   |                             move occurs because `b` has type `main::NotCopy` which does implement the `Copy` trait\n+   |                             move occurs because `b` has type `main::NotCopy` which does not implement the `Copy` trait\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/default-binding-modes-both-sides-independent.rs:44:9"}]}