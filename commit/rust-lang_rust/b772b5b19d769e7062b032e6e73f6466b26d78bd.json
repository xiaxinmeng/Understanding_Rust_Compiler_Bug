{"sha": "b772b5b19d769e7062b032e6e73f6466b26d78bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NzJiNWIxOWQ3NjllNzA2MmIwMzJlNmU3M2Y2NDY2YjI2ZDc4YmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-30T15:56:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-30T15:56:58Z"}, "message": "Rollup merge of #66895 - Centril:rustc_feature, r=oli-obk\n\nFeature gating *declarations* => new crate `rustc_feature`\n\nThis PR moves the data-oriented parts of feature gating into its own crate, `rustc_feature`.\nThe parts consist of some data types as well as `accepted`, `active`, `removed`, and `builtin_attrs`.\n\nFeature gate checking itself remains in `syntax::feature_gate::check`. The parts which define how to emit feature gate errors could probably be moved to `rustc_errors` or to the new `rustc_session` crate introduced in #66878. The visitor itself could probably be moved as a pass in `rustc_passes` depending on how the dependency edges work out.\n\nThe PR also contains some drive-by cleanup of feature gate checking. As such, the PR probably best read commit-by-commit.\n\nr? @oli-obk\ncc @petrochenkov\ncc @Mark-Simulacrum", "tree": {"sha": "f5d91a593d425871fff9e1b68ac2e9f982d6c8e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5d91a593d425871fff9e1b68ac2e9f982d6c8e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b772b5b19d769e7062b032e6e73f6466b26d78bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd4pFKCRBK7hj4Ov3rIwAAdHIIAEdAkTDT+jLyT0u1QUS+S04h\nN6HHy9iCns6TbfZ10si9h243eAT8bYrEOvziqzSKw5In8tH+TuJlh+wV8K73pvTm\neHZ2Rb0/0pxrWK8g2xfDc7sh2kgH47V+1sgEr83RebkriTrtl87UOaC4SJupdSSQ\nzNtHDXGftbtseIuGGA8wYm+ez4rjvYNUG1iBI8Tx4GDqjsj5a/nka5mZHlx2RHka\nIbiE4Sp2+QBS8N2U1jMGjlzX2dfVytF4QHe3EEJ1IiFkUjdD2l7pB5ceptitSIUN\nIP7JVimepIkxKKiuHpIR4FljGHGYRuxRsyYlRIhex7cbxJybAp5rjYPsijyeHO0=\n=hgYC\n-----END PGP SIGNATURE-----\n", "payload": "tree f5d91a593d425871fff9e1b68ac2e9f982d6c8e1\nparent b4bffcebca8840a5b8502289bf5ab0829f5c1e60\nparent ded177a06a1cde44ab64dcd09c63f6c2b815a9fe\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575129418 +0100\ncommitter GitHub <noreply@github.com> 1575129418 +0100\n\nRollup merge of #66895 - Centril:rustc_feature, r=oli-obk\n\nFeature gating *declarations* => new crate `rustc_feature`\n\nThis PR moves the data-oriented parts of feature gating into its own crate, `rustc_feature`.\nThe parts consist of some data types as well as `accepted`, `active`, `removed`, and `builtin_attrs`.\n\nFeature gate checking itself remains in `syntax::feature_gate::check`. The parts which define how to emit feature gate errors could probably be moved to `rustc_errors` or to the new `rustc_session` crate introduced in #66878. The visitor itself could probably be moved as a pass in `rustc_passes` depending on how the dependency edges work out.\n\nThe PR also contains some drive-by cleanup of feature gate checking. As such, the PR probably best read commit-by-commit.\n\nr? @oli-obk\ncc @petrochenkov\ncc @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b772b5b19d769e7062b032e6e73f6466b26d78bd", "html_url": "https://github.com/rust-lang/rust/commit/b772b5b19d769e7062b032e6e73f6466b26d78bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b772b5b19d769e7062b032e6e73f6466b26d78bd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4bffcebca8840a5b8502289bf5ab0829f5c1e60", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4bffcebca8840a5b8502289bf5ab0829f5c1e60", "html_url": "https://github.com/rust-lang/rust/commit/b4bffcebca8840a5b8502289bf5ab0829f5c1e60"}, {"sha": "ded177a06a1cde44ab64dcd09c63f6c2b815a9fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ded177a06a1cde44ab64dcd09c63f6c2b815a9fe", "html_url": "https://github.com/rust-lang/rust/commit/ded177a06a1cde44ab64dcd09c63f6c2b815a9fe"}], "stats": {"total": 904, "additions": 444, "deletions": 460}, "files": [{"sha": "67259aed8ebeece2b94f743cfb7649b50a1baa5e", "filename": "Cargo.lock", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -3199,6 +3199,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_fs_util\",\n  \"rustc_index\",\n  \"rustc_macros\",\n@@ -3574,6 +3575,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_interface\",\n  \"rustc_lint\",\n  \"rustc_metadata\",\n@@ -3607,6 +3609,15 @@ dependencies = [\n  \"unicode-width\",\n ]\n \n+[[package]]\n+name = \"rustc_feature\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"lazy_static 1.3.0\",\n+ \"rustc_data_structures\",\n+ \"syntax_pos\",\n+]\n+\n [[package]]\n name = \"rustc_fs_util\"\n version = \"0.0.0\"\n@@ -3682,6 +3693,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n+ \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_target\",\n  \"syntax\",\n@@ -3786,6 +3798,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_lexer\",\n  \"rustc_target\",\n  \"smallvec 1.0.0\",\n@@ -3802,6 +3815,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_parse\",\n  \"rustc_target\",\n@@ -3844,6 +3858,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_metadata\",\n  \"smallvec 1.0.0\",\n  \"syntax\",\n@@ -4442,6 +4457,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_lexer\",\n  \"rustc_macros\",\n@@ -4458,6 +4474,7 @@ dependencies = [\n  \"log\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_lexer\",\n  \"rustc_parse\",\n  \"serialize\",\n@@ -4475,6 +4492,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_parse\",\n  \"rustc_target\",\n  \"smallvec 1.0.0\","}, {"sha": "fb30d6c519c90bca440628b3b856afdc287667bc", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -22,6 +22,7 @@ rustc-rayon = \"0.3.0\"\n rustc-rayon-core = \"0.3.0\"\n polonius-engine  = \"0.10.0\"\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "1d6a3420ed9523a748a343cb6e61fa640f876693", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -101,7 +101,7 @@ macro_rules! arena_types {\n             [few] resolve_lifetimes: rustc::middle::resolve_lifetime::ResolveLifetimes,\n             [few] lint_levels: rustc::lint::LintLevelMap,\n             [few] stability_index: rustc::middle::stability::Index<'tcx>,\n-            [few] features: syntax::feature_gate::Features,\n+            [few] features: rustc_feature::Features,\n             [few] all_traits: Vec<rustc::hir::def_id::DefId>,\n             [few] privacy_access_levels: rustc::middle::privacy::AccessLevels,\n             [few] target_features_whitelist: rustc_data_structures::fx::FxHashMap<"}, {"sha": "6499e56325a42aca2aa41bdc2287eaaecbcafe01", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -4,7 +4,6 @@\n use crate::ich::StableHashingContext;\n \n use syntax::ast;\n-use syntax::feature_gate;\n use syntax_pos::SourceFile;\n \n use crate::hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n@@ -156,7 +155,7 @@ fn stable_normalized_pos(np: ::syntax_pos::NormalizedPos,\n }\n \n \n-impl<'tcx> HashStable<StableHashingContext<'tcx>> for feature_gate::Features {\n+impl<'tcx> HashStable<StableHashingContext<'tcx>> for rustc_feature::Features {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'tcx>, hasher: &mut StableHasher) {\n         // Unfortunately we cannot exhaustively list fields here, since the\n         // struct is macro generated."}, {"sha": "619ca724214c87b5d1464d563568e910bcebd60b", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -232,13 +232,13 @@ impl<'a> LintLevelsBuilder<'a> {\n                             // don't have any lint names (`#[level(reason = \"foo\")]`)\n                             if let ast::LitKind::Str(rationale, _) = name_value.kind {\n                                 if !self.sess.features_untracked().lint_reasons {\n-                                    feature_gate::emit_feature_err(\n+                                    feature_gate::feature_err(\n                                         &self.sess.parse_sess,\n                                         sym::lint_reasons,\n                                         item.span,\n-                                        feature_gate::GateIssue::Language,\n                                         \"lint reasons are experimental\"\n-                                    );\n+                                    )\n+                                    .emit();\n                                 }\n                                 reason = Some(rationale);\n                             } else {"}, {"sha": "54aafe2114dac04cef756414a9a55658d33cb608", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -13,11 +13,12 @@ use crate::ty::query::Providers;\n use crate::middle::privacy::AccessLevels;\n use crate::session::{DiagnosticMessageId, Session};\n use errors::DiagnosticBuilder;\n+use rustc_feature::GateIssue;\n use syntax::symbol::{Symbol, sym};\n use syntax_pos::{Span, MultiSpan};\n use syntax::ast::{Attribute, CRATE_NODE_ID};\n use syntax::errors::Applicability;\n-use syntax::feature_gate::{GateIssue, emit_feature_err};\n+use syntax::feature_gate::{feature_err, feature_err_issue};\n use syntax::attr::{self, Stability, Deprecation, RustcDeprecation};\n use crate::ty::{self, TyCtxt};\n use crate::util::nodemap::{FxHashSet, FxHashMap};\n@@ -512,9 +513,8 @@ pub fn report_unstable(\n         if is_soft {\n             soft_handler(lint::builtin::SOFT_UNSTABLE, span, &msg)\n         } else {\n-            emit_feature_err(\n-                &sess.parse_sess, feature, span, GateIssue::Library(issue), &msg\n-            );\n+            feature_err_issue(&sess.parse_sess, feature, span, GateIssue::Library(issue), &msg)\n+                .emit();\n         }\n     }\n }\n@@ -842,15 +842,19 @@ impl Visitor<'tcx> for Checker<'tcx> {\n                 let ty = self.tcx.type_of(def_id);\n \n                 if adt_def.has_dtor(self.tcx) {\n-                    emit_feature_err(&self.tcx.sess.parse_sess,\n-                                     sym::untagged_unions, item.span, GateIssue::Language,\n-                                     \"unions with `Drop` implementations are unstable\");\n+                    feature_err(\n+                        &self.tcx.sess.parse_sess, sym::untagged_unions, item.span,\n+                        \"unions with `Drop` implementations are unstable\"\n+                    )\n+                    .emit();\n                 } else {\n                     let param_env = self.tcx.param_env(def_id);\n                     if !param_env.can_type_implement_copy(self.tcx, ty).is_ok() {\n-                        emit_feature_err(&self.tcx.sess.parse_sess,\n-                                         sym::untagged_unions, item.span, GateIssue::Language,\n-                                         \"unions with non-`Copy` fields are unstable\");\n+                        feature_err(\n+                            &self.tcx.sess.parse_sess, sym::untagged_unions, item.span,\n+                            \"unions with non-`Copy` fields are unstable\"\n+                        )\n+                        .emit();\n                     }\n                 }\n             }"}, {"sha": "d715ddb1b81de603677afc6b6cab834e8e8372e2", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -1130,7 +1130,7 @@ rustc_queries! {\n             desc { |tcx| \"estimating size for `{}`\", tcx.def_path_str(def.def_id()) }\n         }\n \n-        query features_query(_: CrateNum) -> &'tcx feature_gate::Features {\n+        query features_query(_: CrateNum) -> &'tcx rustc_feature::Features {\n             eval_always\n             desc { \"looking up enabled feature gates\" }\n         }"}, {"sha": "fbfae721bbe91e218b0434aaf115564805bb992d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -7,6 +7,7 @@ use crate::session::{early_error, early_warn, Session};\n use crate::session::search_paths::SearchPath;\n \n use rustc_data_structures::fx::FxHashSet;\n+use rustc_feature::UnstableFeatures;\n \n use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n use rustc_target::spec::{Target, TargetTriple};\n@@ -16,7 +17,6 @@ use syntax::ast;\n use syntax::source_map::{FileName, FilePathMapping};\n use syntax::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n use syntax::symbol::{sym, Symbol};\n-use syntax::feature_gate::UnstableFeatures;\n \n use errors::emitter::HumanReadableErrorType;\n use errors::{ColorConfig, FatalError, Handler};\n@@ -2701,7 +2701,7 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n \n pub mod nightly_options {\n     use getopts;\n-    use syntax::feature_gate::UnstableFeatures;\n+    use rustc_feature::UnstableFeatures;\n     use super::{ErrorOutputType, OptionStability, RustcOptGroup};\n     use crate::session::early_error;\n \n@@ -2850,9 +2850,9 @@ mod dep_tracking {\n     use super::{CrateType, DebugInfo, ErrorOutputType, OptLevel, OutputTypes,\n                 Passes, Sanitizer, LtoCli, LinkerPluginLto, SwitchWithOptPath,\n                 SymbolManglingVersion};\n+    use rustc_feature::UnstableFeatures;\n     use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel, TargetTriple};\n     use syntax::edition::Edition;\n-    use syntax::feature_gate::UnstableFeatures;\n \n     pub trait DepTrackingHash {\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType);"}, {"sha": "87c7e5a82a39d5ca53033117575edd6dbbf5748b", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -21,7 +21,6 @@ use errors::emitter::{Emitter, EmitterWriter};\n use errors::emitter::HumanReadableErrorType;\n use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n use syntax::edition::Edition;\n-use syntax::feature_gate;\n use errors::json::JsonEmitter;\n use syntax::source_map;\n use syntax::sess::ParseSess;\n@@ -86,7 +85,7 @@ pub struct Session {\n     /// `rustc_codegen_llvm::back::symbol_names` module for more information.\n     pub crate_disambiguator: Once<CrateDisambiguator>,\n \n-    features: Once<feature_gate::Features>,\n+    features: Once<rustc_feature::Features>,\n \n     /// The maximum recursion limit for potentially infinitely recursive\n     /// operations such as auto-dereference and monomorphization.\n@@ -470,11 +469,11 @@ impl Session {\n     /// DO NOT USE THIS METHOD if there is a TyCtxt available, as it circumvents\n     /// dependency tracking. Use tcx.features() instead.\n     #[inline]\n-    pub fn features_untracked(&self) -> &feature_gate::Features {\n+    pub fn features_untracked(&self) -> &rustc_feature::Features {\n         self.features.get()\n     }\n \n-    pub fn init_features(&self, features: feature_gate::Features) {\n+    pub fn init_features(&self, features: rustc_feature::Features) {\n         self.features.set(features);\n     }\n "}, {"sha": "776ae7dc141ce54de52b2522e90b8bd56f4cec70", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -72,7 +72,6 @@ use rustc_macros::HashStable;\n use syntax::ast;\n use syntax::attr;\n use syntax::source_map::MultiSpan;\n-use syntax::feature_gate;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::Span;\n use syntax::expand::allocator::AllocatorKind;\n@@ -1312,7 +1311,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.cstore.allocator_kind()\n     }\n \n-    pub fn features(self) -> &'tcx feature_gate::Features {\n+    pub fn features(self) -> &'tcx rustc_feature::Features {\n         self.features_query(LOCAL_CRATE)\n     }\n "}, {"sha": "5b4a6ac8a2d3cbac65ea5bc2c35792babac277c1", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -56,7 +56,6 @@ use std::any::type_name;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax::attr;\n use syntax::ast;\n-use syntax::feature_gate;\n use syntax::symbol::Symbol;\n \n #[macro_use]"}, {"sha": "acc221f0657c9470aad7f4f5c60240e651ad966e", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -30,6 +30,7 @@ extern crate libc;\n #[macro_use] extern crate rustc;\n extern crate rustc_target;\n #[macro_use] extern crate rustc_data_structures;\n+extern crate rustc_feature;\n extern crate rustc_index;\n extern crate rustc_incremental;\n extern crate rustc_codegen_utils;"}, {"sha": "7bff9e69dd52e3a4c55432c31a85776d23a1fb80", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -6,7 +6,7 @@ use rustc::session::config::PrintRequest;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};\n use libc::c_int;\n use std::ffi::CString;\n-use syntax::feature_gate::UnstableFeatures;\n+use rustc_feature::UnstableFeatures;\n use syntax::symbol::sym;\n \n use std::str;"}, {"sha": "d1cb4cbeb9b31269354c49b025c63e9cad3b638a", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -19,6 +19,7 @@ rustc_target = { path = \"../librustc_target\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_parse = { path = \"../librustc_parse\" }"}, {"sha": "8b04d3d46d04a902520bdcc6e4f48c58b81be4d1", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -44,7 +44,7 @@ use errors::{PResult, registry::Registry};\n use rustc_interface::interface;\n use rustc_interface::util::get_codegen_sysroot;\n use rustc_data_structures::sync::SeqCst;\n-\n+use rustc_feature::{find_gated_cfg, UnstableFeatures};\n use rustc_serialize::json::ToJson;\n \n use std::borrow::Cow;\n@@ -61,10 +61,9 @@ use std::str;\n use std::time::Instant;\n \n use syntax::ast;\n-use syntax::source_map::FileLoader;\n-use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n-use syntax::symbol::sym;\n-use syntax_pos::{DUMMY_SP, FileName};\n+use syntax_pos::source_map::FileLoader;\n+use syntax_pos::symbol::sym;\n+use syntax_pos::FileName;\n \n pub mod pretty;\n mod args;\n@@ -684,12 +683,6 @@ impl RustcDefaultCalls {\n                         .is_nightly_build();\n \n                     let mut cfgs = sess.parse_sess.config.iter().filter_map(|&(name, ref value)| {\n-                        let gated_cfg = GatedCfg::gate(&ast::MetaItem {\n-                            path: ast::Path::from_ident(ast::Ident::with_dummy_span(name)),\n-                            kind: ast::MetaItemKind::Word,\n-                            span: DUMMY_SP,\n-                        });\n-\n                         // Note that crt-static is a specially recognized cfg\n                         // directive that's printed out here as part of\n                         // rust-lang/rust#37406, but in general the\n@@ -700,10 +693,11 @@ impl RustcDefaultCalls {\n                         // through to build scripts.\n                         let value = value.as_ref().map(|s| s.as_str());\n                         let value = value.as_ref().map(|s| s.as_ref());\n-                        if name != sym::target_feature || value != Some(\"crt-static\") {\n-                            if !allow_unstable_cfg && gated_cfg.is_some() {\n-                                return None\n-                            }\n+                        if (name != sym::target_feature || value != Some(\"crt-static\"))\n+                            && !allow_unstable_cfg\n+                            && find_gated_cfg(|cfg_sym| cfg_sym == name).is_some()\n+                        {\n+                            return None;\n                         }\n \n                         if let Some(value) = value {"}, {"sha": "40ce922947bcb7368145bee8b37ee4ce35905247", "filename": "src/librustc_feature/Cargo.toml", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_feature%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_feature%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2FCargo.toml?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -0,0 +1,15 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_feature\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+name = \"rustc_feature\"\n+path = \"lib.rs\"\n+doctest = false\n+\n+[dependencies]\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+lazy_static = \"1.0.0\"\n+syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "fec5a7f1a4501b9c5a385522229655ff0e5ee498", "filename": "src/librustc_feature/accepted.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_feature%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_feature%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Faccepted.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -1,7 +1,7 @@\n //! List of the accepted feature gates.\n \n-use crate::symbol::sym;\n use super::{State, Feature};\n+use syntax_pos::symbol::sym;\n \n macro_rules! declare_features {\n     ($(", "previous_filename": "src/libsyntax/feature_gate/accepted.rs"}, {"sha": "7c0d39965fc00ff0522ed544827aae6a2f4d35e9", "filename": "src/librustc_feature/active.rs", "status": "renamed", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -2,10 +2,9 @@\n \n use super::{State, Feature};\n \n-use crate::edition::Edition;\n-use crate::symbol::{Symbol, sym};\n-\n+use syntax_pos::edition::Edition;\n use syntax_pos::Span;\n+use syntax_pos::symbol::{Symbol, sym};\n \n macro_rules! set {\n     ($field: ident) => {{\n@@ -37,7 +36,7 @@ macro_rules! declare_features {\n             ),+];\n \n         /// A set of features to be used by later passes.\n-        #[derive(Clone)]\n+        #[derive(Clone, Default)]\n         pub struct Features {\n             /// `#![feature]` attrs for language features, for error reporting.\n             pub declared_lang_features: Vec<(Symbol, Span, Option<Symbol>)>,\n@@ -50,17 +49,7 @@ macro_rules! declare_features {\n         }\n \n         impl Features {\n-            pub fn new() -> Features {\n-                Features {\n-                    declared_lang_features: Vec::new(),\n-                    declared_lib_features: Vec::new(),\n-                    $($feature: false),+\n-                }\n-            }\n-\n-            pub fn walk_feature_fields<F>(&self, mut f: F)\n-                where F: FnMut(&str, bool)\n-            {\n+            pub fn walk_feature_fields(&self, mut f: impl FnMut(&str, bool)) {\n                 $(f(stringify!($feature), self.$feature);)+\n             }\n         }", "previous_filename": "src/libsyntax/feature_gate/active.rs"}, {"sha": "f72df00a8e8218f5def02ff9c67d0fc8eb887db0", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "renamed", "additions": 29, "deletions": 42, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -3,17 +3,10 @@\n use AttributeType::*;\n use AttributeGate::*;\n \n-use super::check::{emit_feature_err, GateIssue};\n-use super::check::{Stability, EXPLAIN_ALLOW_INTERNAL_UNSAFE, EXPLAIN_ALLOW_INTERNAL_UNSTABLE};\n-use super::active::Features;\n+use crate::{Features, Stability};\n \n-use crate::ast;\n-use crate::attr::AttributeTemplate;\n-use crate::sess::ParseSess;\n-use crate::symbol::{Symbol, sym};\n-\n-use syntax_pos::Span;\n use rustc_data_structures::fx::FxHashMap;\n+use syntax_pos::symbol::{Symbol, sym};\n use lazy_static::lazy_static;\n \n type GateFn = fn(&Features) -> bool;\n@@ -24,39 +17,19 @@ macro_rules! cfg_fn {\n     }\n }\n \n+pub type GatedCfg = (Symbol, Symbol, GateFn);\n+\n /// `cfg(...)`'s that are feature gated.\n-const GATED_CFGS: &[(Symbol, Symbol, GateFn)] = &[\n+const GATED_CFGS: &[GatedCfg] = &[\n     // (name in cfg, feature, function to check if the feature is enabled)\n     (sym::target_thread_local, sym::cfg_target_thread_local, cfg_fn!(cfg_target_thread_local)),\n     (sym::target_has_atomic, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n     (sym::target_has_atomic_load_store, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n ];\n \n-#[derive(Debug)]\n-pub struct GatedCfg {\n-    span: Span,\n-    index: usize,\n-}\n-\n-impl GatedCfg {\n-    pub fn gate(cfg: &ast::MetaItem) -> Option<GatedCfg> {\n-        GATED_CFGS.iter()\n-                  .position(|info| cfg.check_name(info.0))\n-                  .map(|idx| {\n-                      GatedCfg {\n-                          span: cfg.span,\n-                          index: idx\n-                      }\n-                  })\n-    }\n-\n-    pub fn check_and_emit(&self, sess: &ParseSess, features: &Features) {\n-        let (cfg, feature, has_feature) = GATED_CFGS[self.index];\n-        if !has_feature(features) && !self.span.allows_unstable(feature) {\n-            let explain = format!(\"`cfg({})` is experimental and subject to change\", cfg);\n-            emit_feature_err(sess, feature, self.span, GateIssue::Language, &explain);\n-        }\n-    }\n+/// Find a gated cfg determined by the `pred`icate which is given the cfg's name.\n+pub fn find_gated_cfg(pred: impl Fn(Symbol) -> bool) -> Option<&'static GatedCfg> {\n+    GATED_CFGS.iter().find(|(cfg_sym, ..)| pred(*cfg_sym))\n }\n \n // If you change this, please modify `src/doc/unstable-book` as well. You must\n@@ -108,6 +81,21 @@ impl AttributeGate {\n     }\n }\n \n+/// A template that the attribute input must match.\n+/// Only top-level shape (`#[attr]` vs `#[attr(...)]` vs `#[attr = ...]`) is considered now.\n+#[derive(Clone, Copy)]\n+pub struct AttributeTemplate {\n+    pub word: bool,\n+    pub list: Option<&'static str>,\n+    pub name_value_str: Option<&'static str>,\n+}\n+\n+impl AttributeTemplate {\n+    pub fn only_word() -> Self {\n+        Self { word: true, list: None, name_value_str: None }\n+    }\n+}\n+\n /// A convenience macro for constructing attribute templates.\n /// E.g., `template!(Word, List: \"description\")` means that the attribute\n /// supports forms `#[attr]` and `#[attr(description)]`.\n@@ -361,9 +349,12 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     gated!(\n         allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"),\n-        EXPLAIN_ALLOW_INTERNAL_UNSTABLE,\n+        \"allow_internal_unstable side-steps feature gating and stability checks\",\n+    ),\n+    gated!(\n+        allow_internal_unsafe, Normal, template!(Word),\n+        \"allow_internal_unsafe side-steps the unsafe_code lint\",\n     ),\n-    gated!(allow_internal_unsafe, Normal, template!(Word), EXPLAIN_ALLOW_INTERNAL_UNSAFE),\n \n     // ==========================================================================\n     // Internal attributes: Type system related:\n@@ -587,14 +578,10 @@ pub fn deprecated_attributes() -> Vec<&'static BuiltinAttribute> {\n     BUILTIN_ATTRIBUTES.iter().filter(|(.., gate)| gate.is_deprecated()).collect()\n }\n \n-pub fn is_builtin_attr_name(name: ast::Name) -> bool {\n+pub fn is_builtin_attr_name(name: Symbol) -> bool {\n     BUILTIN_ATTRIBUTE_MAP.get(&name).is_some()\n }\n \n-pub fn is_builtin_attr(attr: &ast::Attribute) -> bool {\n-    attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name)).is_some()\n-}\n-\n lazy_static! {\n     pub static ref BUILTIN_ATTRIBUTE_MAP: FxHashMap<Symbol, &'static BuiltinAttribute> = {\n         let mut map = FxHashMap::default();", "previous_filename": "src/libsyntax/feature_gate/builtin_attrs.rs"}, {"sha": "c38bb3740af3a6e664dc686243b4e745c469d945", "filename": "src/librustc_feature/lib.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_feature%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_feature%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Flib.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -0,0 +1,137 @@\n+//! # Feature gates\n+//!\n+//! This crate declares the set of past and present unstable features in the compiler.\n+//! Feature gate checking itself is done in `libsyntax/feature_gate/check.rs` at the moment.\n+//!\n+//! Features are enabled in programs via the crate-level attributes of\n+//! `#![feature(...)]` with a comma-separated list of features.\n+//!\n+//! For the purpose of future feature-tracking, once a feature gate is added,\n+//! even if it is stabilized or removed, *do not remove it*. Instead, move the\n+//! symbol to the `accepted` or `removed` modules respectively.\n+\n+mod accepted;\n+mod removed;\n+mod active;\n+mod builtin_attrs;\n+\n+use std::fmt;\n+use std::num::NonZeroU32;\n+use syntax_pos::{Span, edition::Edition, symbol::Symbol};\n+\n+#[derive(Clone, Copy)]\n+pub enum State {\n+    Accepted,\n+    Active { set: fn(&mut Features, Span) },\n+    Removed { reason: Option<&'static str> },\n+    Stabilized { reason: Option<&'static str> },\n+}\n+\n+impl fmt::Debug for State {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            State::Accepted { .. } => write!(f, \"accepted\"),\n+            State::Active { .. } => write!(f, \"active\"),\n+            State::Removed { .. } => write!(f, \"removed\"),\n+            State::Stabilized { .. } => write!(f, \"stabilized\"),\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone)]\n+pub struct Feature {\n+    pub state: State,\n+    pub name: Symbol,\n+    pub since: &'static str,\n+    issue: Option<u32>,  // FIXME: once #58732 is done make this an Option<NonZeroU32>\n+    pub edition: Option<Edition>,\n+    description: &'static str,\n+}\n+\n+impl Feature {\n+    fn issue(&self) -> Option<NonZeroU32> {\n+        self.issue.and_then(|i| NonZeroU32::new(i))\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+pub enum Stability {\n+    Unstable,\n+    // First argument is tracking issue link; second argument is an optional\n+    // help message, which defaults to \"remove this attribute\".\n+    Deprecated(&'static str, Option<&'static str>),\n+}\n+\n+#[derive(Clone, Copy, Hash)]\n+pub enum UnstableFeatures {\n+    /// Hard errors for unstable features are active, as on beta/stable channels.\n+    Disallow,\n+    /// Allow features to be activated, as on nightly.\n+    Allow,\n+    /// Errors are bypassed for bootstrapping. This is required any time\n+    /// during the build that feature-related lints are set to warn or above\n+    /// because the build turns on warnings-as-errors and uses lots of unstable\n+    /// features. As a result, this is always required for building Rust itself.\n+    Cheat\n+}\n+\n+impl UnstableFeatures {\n+    pub fn from_environment() -> UnstableFeatures {\n+        // `true` if this is a feature-staged build, i.e., on the beta or stable channel.\n+        let disable_unstable_features = option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some();\n+        // `true` if we should enable unstable features for bootstrapping.\n+        let bootstrap = std::env::var(\"RUSTC_BOOTSTRAP\").is_ok();\n+        match (disable_unstable_features, bootstrap) {\n+            (_, true) => UnstableFeatures::Cheat,\n+            (true, _) => UnstableFeatures::Disallow,\n+            (false, _) => UnstableFeatures::Allow\n+        }\n+    }\n+\n+    pub fn is_nightly_build(&self) -> bool {\n+        match *self {\n+            UnstableFeatures::Allow | UnstableFeatures::Cheat => true,\n+            UnstableFeatures::Disallow => false,\n+        }\n+    }\n+}\n+\n+fn find_lang_feature_issue(feature: Symbol) -> Option<NonZeroU32> {\n+    if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.name == feature) {\n+        // FIXME (#28244): enforce that active features have issue numbers\n+        // assert!(info.issue().is_some())\n+        info.issue()\n+    } else {\n+        // search in Accepted, Removed, or Stable Removed features\n+        let found = ACCEPTED_FEATURES\n+            .iter()\n+            .chain(REMOVED_FEATURES)\n+            .chain(STABLE_REMOVED_FEATURES)\n+            .find(|t| t.name == feature);\n+        match found {\n+            Some(found) => found.issue(),\n+            None => panic!(\"feature `{}` is not declared anywhere\", feature),\n+        }\n+    }\n+}\n+\n+pub enum GateIssue {\n+    Language,\n+    Library(Option<NonZeroU32>)\n+}\n+\n+pub fn find_feature_issue(feature: Symbol, issue: GateIssue) -> Option<NonZeroU32> {\n+    match issue {\n+        GateIssue::Language => find_lang_feature_issue(feature),\n+        GateIssue::Library(lib) => lib,\n+    }\n+}\n+\n+pub use accepted::ACCEPTED_FEATURES;\n+pub use active::{ACTIVE_FEATURES, Features, INCOMPLETE_FEATURES};\n+pub use removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n+pub use builtin_attrs::{\n+    AttributeGate, AttributeTemplate, AttributeType, find_gated_cfg, GatedCfg,\n+    BuiltinAttribute, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,\n+    deprecated_attributes, is_builtin_attr_name,\n+};"}, {"sha": "340bd32fb8a460b8bac668bfcbd8324ccf1bf64b", "filename": "src/librustc_feature/removed.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_feature%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_feature%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fremoved.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -1,7 +1,7 @@\n //! List of the removed feature gates.\n \n-use crate::symbol::sym;\n use super::{State, Feature};\n+use syntax_pos::symbol::sym;\n \n macro_rules! declare_features {\n     ($(", "previous_filename": "src/libsyntax/feature_gate/removed.rs"}, {"sha": "ed38243581b1a095e9a4a281a686cded8b8e235e", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -15,5 +15,6 @@ rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "5d3a6cccc4e73f83e25fc84ccc50b1f0f6dbc55b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -34,15 +34,15 @@ use lint::{LateContext, LintContext, LintArray};\n use lint::{LintPass, LateLintPass, EarlyLintPass, EarlyContext};\n \n use rustc::util::nodemap::FxHashSet;\n+use rustc_feature::{AttributeGate, AttributeTemplate, AttributeType, deprecated_attributes};\n+use rustc_feature::Stability;\n \n use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::ast::{self, Expr};\n use syntax::ptr::P;\n-use syntax::attr::{self, HasAttrs, AttributeTemplate};\n+use syntax::attr::{self, HasAttrs};\n use syntax::source_map::Spanned;\n use syntax::edition::Edition;\n-use syntax::feature_gate::{self, AttributeGate, AttributeType};\n-use syntax::feature_gate::{Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span};\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::errors::{Applicability, DiagnosticBuilder};\n@@ -1850,7 +1850,7 @@ impl EarlyLintPass for IncompleteFeatures {\n         features.declared_lang_features\n             .iter().map(|(name, span, _)| (name, span))\n             .chain(features.declared_lib_features.iter().map(|(name, span)| (name, span)))\n-            .filter(|(name, _)| feature_gate::INCOMPLETE_FEATURES.iter().any(|f| name == &f))\n+            .filter(|(name, _)| rustc_feature::INCOMPLETE_FEATURES.iter().any(|f| name == &f))\n             .for_each(|(name, &span)| {\n                 cx.struct_span_lint(\n                     INCOMPLETE_FEATURES,"}, {"sha": "f7de7ec7e18f44a8bb565dce7efa40106634d736", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -1,3 +1,4 @@\n+use rustc::hir;\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::DefId;\n use rustc::lint;\n@@ -7,19 +8,17 @@ use rustc::ty::adjustment;\n use rustc_data_structures::fx::FxHashMap;\n use lint::{LateContext, EarlyContext, LintContext, LintArray};\n use lint::{LintPass, EarlyLintPass, LateLintPass};\n+use rustc_feature::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n \n use syntax::ast;\n use syntax::attr;\n use syntax::errors::{Applicability, pluralize};\n-use syntax::feature_gate::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use syntax::print::pprust;\n use syntax::symbol::{kw, sym};\n use syntax::symbol::Symbol;\n use syntax::util::parser;\n use syntax_pos::{Span, BytePos};\n \n-use rustc::hir;\n-\n use log::debug;\n \n declare_lint! {"}, {"sha": "425e5d1d821bf971b72de83bb6eff492d943bbba", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -7,7 +7,7 @@ use rustc::util::nodemap::FxHashSet;\n use rustc_target::spec::abi::Abi;\n use syntax::attr;\n use syntax::source_map::Span;\n-use syntax::feature_gate::{self, GateIssue};\n+use syntax::feature_gate::feature_err;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::{span_err, struct_span_err};\n \n@@ -158,27 +158,29 @@ impl Collector<'tcx> {\n             }\n         }\n         if lib.cfg.is_some() && !self.tcx.features().link_cfg {\n-            feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n-                                           sym::link_cfg,\n-                                           span.unwrap(),\n-                                           GateIssue::Language,\n-                                           \"is unstable\");\n+            feature_err(&self.tcx.sess.parse_sess, sym::link_cfg, span.unwrap(), \"is unstable\")\n+                .emit();\n         }\n         if lib.kind == cstore::NativeStaticNobundle &&\n-           !self.tcx.features().static_nobundle {\n-            feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n-                                           sym::static_nobundle,\n-                                           span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n-                                           GateIssue::Language,\n-                                           \"kind=\\\"static-nobundle\\\" is unstable\");\n+           !self.tcx.features().static_nobundle\n+        {\n+            feature_err(\n+                &self.tcx.sess.parse_sess,\n+                sym::static_nobundle,\n+                span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n+                \"kind=\\\"static-nobundle\\\" is unstable\"\n+            )\n+            .emit();\n         }\n         if lib.kind == cstore::NativeRawDylib &&\n            !self.tcx.features().raw_dylib {\n-            feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n-                                           sym::raw_dylib,\n-                                           span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n-                                           GateIssue::Language,\n-                                           \"kind=\\\"raw-dylib\\\" is unstable\");\n+            feature_err(\n+                &self.tcx.sess.parse_sess,\n+                sym::raw_dylib,\n+                span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n+                \"kind=\\\"raw-dylib\\\" is unstable\"\n+            )\n+            .emit();\n         }\n         self.libs.push(lib);\n     }"}, {"sha": "a4f12a4e54fa73cbdb78736bc3f6f7de817dba49", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::def_id::DefId;\n use rustc::mir::BorrowKind;\n use rustc::session::config::nightly_options;\n use rustc::ty::TyCtxt;\n-use syntax::feature_gate::{emit_feature_err, GateIssue};\n+use syntax::feature_gate::feature_err;\n use syntax::symbol::sym;\n use syntax_pos::{Span, Symbol};\n \n@@ -222,13 +222,13 @@ impl NonConstOp for Panic {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n+        feature_err(\n             &item.tcx.sess.parse_sess,\n             sym::const_panic,\n             span,\n-            GateIssue::Language,\n             &format!(\"panicking in {}s is unstable\", item.const_kind()),\n-        );\n+        )\n+        .emit();\n     }\n }\n \n@@ -240,13 +240,13 @@ impl NonConstOp for RawPtrComparison {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n+        feature_err(\n             &item.tcx.sess.parse_sess,\n             sym::const_compare_raw_pointers,\n             span,\n-            GateIssue::Language,\n             &format!(\"comparing raw pointers inside {}\", item.const_kind()),\n-        );\n+        )\n+        .emit();\n     }\n }\n \n@@ -258,14 +258,14 @@ impl NonConstOp for RawPtrDeref {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n-            &item.tcx.sess.parse_sess, sym::const_raw_ptr_deref,\n-            span, GateIssue::Language,\n+        feature_err(\n+            &item.tcx.sess.parse_sess, sym::const_raw_ptr_deref, span,\n             &format!(\n                 \"dereferencing raw pointers in {}s is unstable\",\n                 item.const_kind(),\n             ),\n-        );\n+        )\n+        .emit();\n     }\n }\n \n@@ -277,14 +277,14 @@ impl NonConstOp for RawPtrToIntCast {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n-            &item.tcx.sess.parse_sess, sym::const_raw_ptr_to_usize_cast,\n-            span, GateIssue::Language,\n+        feature_err(\n+            &item.tcx.sess.parse_sess, sym::const_raw_ptr_to_usize_cast, span,\n             &format!(\n                 \"casting pointers to integers in {}s is unstable\",\n                 item.const_kind(),\n             ),\n-        );\n+        )\n+        .emit();\n     }\n }\n \n@@ -334,11 +334,11 @@ impl NonConstOp for Transmute {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n-            &item.tcx.sess.parse_sess, sym::const_transmute,\n-            span, GateIssue::Language,\n-            &format!(\"The use of std::mem::transmute() \\\n-            is gated in {}s\", item.const_kind()));\n+        feature_err(\n+            &item.tcx.sess.parse_sess, sym::const_transmute, span,\n+            &format!(\"The use of std::mem::transmute() is gated in {}s\", item.const_kind())\n+        )\n+        .emit();\n     }\n }\n \n@@ -355,10 +355,10 @@ impl NonConstOp for UnionAccess {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n-            &item.tcx.sess.parse_sess, sym::const_fn_union,\n-            span, GateIssue::Language,\n+        feature_err(\n+            &item.tcx.sess.parse_sess, sym::const_fn_union, span,\n             \"unions in const fn are unstable\",\n-        );\n+        )\n+        .emit();\n     }\n }"}, {"sha": "95b3256f53a388d81a875a636fd34a3fef83e5ca", "filename": "src/librustc_parse/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2FCargo.toml?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -16,6 +16,7 @@ syntax_pos = { path = \"../libsyntax_pos\" }\n syntax = { path = \"../libsyntax\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "26e51e83d625a542225640d8b854027ebac8900a", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -9,14 +9,9 @@\n //! [#64197]: https://github.com/rust-lang/rust/issues/64197\n \n use crate::validate_attr;\n+use rustc_feature::Features;\n use syntax::attr::HasAttrs;\n-use syntax::feature_gate::{\n-    feature_err,\n-    EXPLAIN_STMT_ATTR_SYNTAX,\n-    Features,\n-    get_features,\n-    GateIssue,\n-};\n+use syntax::feature_gate::{feature_err, get_features};\n use syntax::attr;\n use syntax::ast;\n use syntax::edition::Edition;\n@@ -52,7 +47,7 @@ pub fn features(mut krate: ast::Crate, sess: &ParseSess, edition: Edition,\n         } else { // the entire crate is unconfigured\n             krate.attrs = Vec::new();\n             krate.module.items = Vec::new();\n-            return (krate, Features::new());\n+            return (krate, Features::default());\n         }\n \n         features = get_features(&sess.span_diagnostic, &krate.attrs, edition, allow_features);\n@@ -217,8 +212,7 @@ impl<'a> StripUnconfigured<'a> {\n             let mut err = feature_err(self.sess,\n                                       sym::stmt_expr_attributes,\n                                       attr.span,\n-                                      GateIssue::Language,\n-                                      EXPLAIN_STMT_ATTR_SYNTAX);\n+                                      \"attributes on expressions are experimental\");\n \n             if attr.is_doc_comment() {\n                 err.help(\"`///` is for documentation comments. For a plain comment, use `//`.\");"}, {"sha": "a3c9e2665930db302af40b188421b1c257d4cea6", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -1,10 +1,10 @@\n //! Meta-syntax validation logic of attributes for post-expansion.\n \n use errors::{PResult, Applicability};\n-use syntax::ast::{self, Attribute, AttrKind, Ident, MetaItem};\n-use syntax::attr::{AttributeTemplate, mk_name_value_item_str};\n+use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n+use syntax::ast::{self, Attribute, AttrKind, Ident, MetaItem, MetaItemKind};\n+use syntax::attr::mk_name_value_item_str;\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n-use syntax::feature_gate::BUILTIN_ATTRIBUTE_MAP;\n use syntax::token;\n use syntax::tokenstream::TokenTree;\n use syntax::sess::ParseSess;\n@@ -41,6 +41,16 @@ pub fn parse_meta<'a>(sess: &'a ParseSess, attr: &Attribute) -> PResult<'a, Meta\n     })\n }\n \n+/// Checks that the given meta-item is compatible with this `AttributeTemplate`.\n+fn is_attr_template_compatible(template: &AttributeTemplate, meta: &ast::MetaItemKind) -> bool {\n+    match meta {\n+        MetaItemKind::Word => template.word,\n+        MetaItemKind::List(..) => template.list.is_some(),\n+        MetaItemKind::NameValue(lit) if lit.kind.is_str() => template.name_value_str.is_some(),\n+        MetaItemKind::NameValue(..) => false,\n+    }\n+}\n+\n pub fn check_builtin_attribute(\n     sess: &ParseSess,\n     attr: &Attribute,\n@@ -57,7 +67,7 @@ pub fn check_builtin_attribute(\n                              name == sym::test || name == sym::bench;\n \n     match parse_meta(sess, attr) {\n-        Ok(meta) => if !should_skip(name) && !template.compatible(&meta.kind) {\n+        Ok(meta) => if !should_skip(name) && !is_attr_template_compatible(&template, &meta.kind) {\n             let error_msg = format!(\"malformed `{}` attribute input\", name);\n             let mut msg = \"attribute must be of the form \".to_owned();\n             let mut suggestions = vec![];"}, {"sha": "bb2f7c67418244ec101334ea5fc7dad57a09b86c", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -12,6 +12,7 @@ path = \"lib.rs\"\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "5a29a56ad5472b0498f3bef77e1a0e193ef7f447", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -14,7 +14,6 @@ use rustc_parse::validate_attr;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::expand::is_proc_macro_attr;\n-use syntax::feature_gate::is_builtin_attr;\n use syntax::print::pprust;\n use syntax::source_map::Spanned;\n use syntax::symbol::{kw, sym};\n@@ -257,7 +256,7 @@ impl<'a> AstValidator<'a> {\n             .flat_map(|i| i.attrs.as_ref())\n             .filter(|attr| {\n                 let arr = [sym::allow, sym::cfg, sym::cfg_attr, sym::deny, sym::forbid, sym::warn];\n-                !arr.contains(&attr.name_or_empty()) && is_builtin_attr(attr)\n+                !arr.contains(&attr.name_or_empty()) && attr::is_builtin_attr(attr)\n             })\n             .for_each(|attr| if attr.is_doc_comment() {\n                 let mut err = self.err_handler().struct_span_err("}, {"sha": "63c6e60de795436133760662e7b6768184417274", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -13,8 +13,9 @@ use rustc::hir::map::Map;\n use rustc::hir;\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n+use rustc_feature::Features;\n use syntax::ast::Mutability;\n-use syntax::feature_gate::{emit_feature_err, Features, GateIssue};\n+use syntax::feature_gate::feature_err;\n use syntax::span_err;\n use syntax_pos::{sym, Span};\n use rustc_error_codes::*;\n@@ -140,13 +141,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n             | NonConstExpr::Match(hir::MatchSource::Normal)\n             | NonConstExpr::Match(hir::MatchSource::IfDesugar { .. })\n             | NonConstExpr::Match(hir::MatchSource::IfLetDesugar { .. })\n-            => emit_feature_err(\n-                &self.tcx.sess.parse_sess,\n-                sym::const_if_match,\n-                span,\n-                GateIssue::Language,\n-                &msg\n-            ),\n+            => feature_err(&self.tcx.sess.parse_sess, sym::const_if_match, span, &msg).emit(),\n \n             _ => span_err!(self.tcx.sess, span, E0744, \"{}\", msg),\n         }"}, {"sha": "caca20e4221e59169d7abac334a1f105da05a67a", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -20,6 +20,7 @@ arena = { path = \"../libarena\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "04e233c5973102fcdcd4e0f015b49898b1f465eb", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -29,10 +29,8 @@ use errors::Applicability;\n \n use syntax::ast::{Name, Ident};\n use syntax::attr;\n-\n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n use syntax::ast::{MetaItemKind, StmtKind, TraitItem, TraitItemKind};\n-use syntax::feature_gate::is_builtin_attr;\n use syntax::token::{self, Token};\n use syntax::print::pprust;\n use syntax::{span_err, struct_span_err};\n@@ -1231,7 +1229,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     fn visit_attribute(&mut self, attr: &'b ast::Attribute) {\n-        if !attr.is_doc_comment() && is_builtin_attr(attr) {\n+        if !attr.is_doc_comment() && attr::is_builtin_attr(attr) {\n             self.r.builtin_attrs.push(\n                 (attr.get_normal_item().path.segments[0].ident, self.parent_scope)\n             );"}, {"sha": "4dcafb6d2798ccdbf9d2d7281b3040f2c48a7e4b", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -9,8 +9,8 @@ use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n use rustc::util::nodemap::FxHashSet;\n+use rustc_feature::BUILTIN_ATTRIBUTES;\n use syntax::ast::{self, Ident, Path};\n-use syntax::feature_gate::BUILTIN_ATTRIBUTES;\n use syntax::source_map::SourceMap;\n use syntax::struct_span_err;\n use syntax::symbol::{Symbol, kw};"}, {"sha": "9e7098da49f32b111ec027252583458df462f7f6", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -12,18 +12,18 @@ use rustc::middle::stability;\n use rustc::session::Session;\n use rustc::util::nodemap::FxHashSet;\n use rustc::{ty, lint, span_bug};\n+use rustc_feature::is_builtin_attr_name;\n use syntax::ast::{self, NodeId, Ident};\n use syntax::attr::{self, StabilityLevel};\n use syntax::edition::Edition;\n-use syntax::feature_gate::{emit_feature_err, is_builtin_attr_name};\n-use syntax::feature_gate::GateIssue;\n+use syntax::feature_gate::feature_err;\n use syntax::print::pprust;\n-use syntax::symbol::{Symbol, kw, sym};\n use syntax_expand::base::{self, InvocationRes, Indeterminate};\n use syntax_expand::base::SyntaxExtension;\n use syntax_expand::expand::{AstFragment, AstFragmentKind, Invocation, InvocationKind};\n use syntax_expand::compile_declarative_macro;\n use syntax_pos::hygiene::{self, ExpnId, ExpnData, ExpnKind};\n+use syntax_pos::symbol::{Symbol, kw, sym};\n use syntax_pos::{Span, DUMMY_SP};\n \n use std::{mem, ptr};\n@@ -346,13 +346,8 @@ impl<'a> Resolver<'a> {\n                segment.ident.as_str().starts_with(\"rustc\") {\n                 let msg =\n                     \"attributes starting with `rustc` are reserved for use by the `rustc` compiler\";\n-                emit_feature_err(\n-                    &self.session.parse_sess,\n-                    sym::rustc_attrs,\n-                    segment.ident.span,\n-                    GateIssue::Language,\n-                    msg,\n-                );\n+                feature_err(&self.session.parse_sess, sym::rustc_attrs, segment.ident.span, msg)\n+                    .emit();\n             }\n         }\n "}, {"sha": "af978d5095eaae84f5cbbd857ad25bce96a14462", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -23,7 +23,7 @@ use crate::require_c_abi_if_c_variadic;\n use smallvec::SmallVec;\n use syntax::ast;\n use syntax::errors::pluralize;\n-use syntax::feature_gate::{GateIssue, emit_feature_err};\n+use syntax::feature_gate::feature_err;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::symbol::sym;\n use syntax_pos::{DUMMY_SP, Span, MultiSpan};\n@@ -914,8 +914,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             } else {\n                 \"parenthetical notation is only stable when used with `Fn`-family traits\"\n             };\n-            emit_feature_err(&self.tcx().sess.parse_sess, sym::unboxed_closures,\n-                             span, GateIssue::Language, msg);\n+            feature_err(&self.tcx().sess.parse_sess, sym::unboxed_closures, span, msg).emit();\n         }\n \n         self.create_substs_for_ast_path(span,"}, {"sha": "901a2192e20dd91c92fa1d3510281b38a60b2615", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -644,11 +644,13 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         }\n \n         if has_unsized_tuple_coercion && !self.tcx.features().unsized_tuple_coercion {\n-            feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n-                                           sym::unsized_tuple_coercion,\n-                                           self.cause.span,\n-                                           feature_gate::GateIssue::Language,\n-                                           feature_gate::EXPLAIN_UNSIZED_TUPLE_COERCION);\n+            feature_gate::feature_err(\n+                &self.tcx.sess.parse_sess,\n+                sym::unsized_tuple_coercion,\n+                self.cause.span,\n+                \"unsized tuple coercion is not stable enough for use and is subject to change\",\n+            )\n+            .emit();\n         }\n \n         Ok(coercion)"}, {"sha": "c7a0190a1d1b4314569981f670a7e8b12cba0b8e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -125,7 +125,7 @@ use syntax_pos::{self, BytePos, Span, MultiSpan};\n use syntax_pos::hygiene::DesugaringKind;\n use syntax::ast;\n use syntax::attr;\n-use syntax::feature_gate::{GateIssue, emit_feature_err};\n+use syntax::feature_gate::feature_err;\n use syntax::source_map::{DUMMY_SP, original_sp};\n use syntax::symbol::{kw, sym, Ident};\n use syntax::util::parser::ExprPrecedence;\n@@ -2373,13 +2373,13 @@ fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n \n     if adt.is_enum() {\n         if !tcx.features().transparent_enums {\n-            emit_feature_err(\n+            feature_err(\n                 &tcx.sess.parse_sess,\n                 sym::transparent_enums,\n                 sp,\n-                GateIssue::Language,\n                 \"transparent enums are unstable\",\n-            );\n+            )\n+            .emit();\n         }\n         if adt.variants.len() != 1 {\n             bad_variant_count(tcx, adt, sp, def_id);\n@@ -2391,11 +2391,13 @@ fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n     }\n \n     if adt.is_union() && !tcx.features().transparent_unions {\n-        emit_feature_err(&tcx.sess.parse_sess,\n-                         sym::transparent_unions,\n-                         sp,\n-                         GateIssue::Language,\n-                         \"transparent unions are unstable\");\n+        feature_err(\n+            &tcx.sess.parse_sess,\n+            sym::transparent_unions,\n+            sp,\n+            \"transparent unions are unstable\",\n+        )\n+        .emit();\n     }\n \n     // For each field, figure out if it's known to be a ZST and align(1)\n@@ -2452,11 +2454,13 @@ pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant], i\n     let repr_type_ty = def.repr.discr_type().to_ty(tcx);\n     if repr_type_ty == tcx.types.i128 || repr_type_ty == tcx.types.u128 {\n         if !tcx.features().repr128 {\n-            emit_feature_err(&tcx.sess.parse_sess,\n-                             sym::repr128,\n-                             sp,\n-                             GateIssue::Language,\n-                             \"repr with 128-bit type is unstable\");\n+            feature_err(\n+                &tcx.sess.parse_sess,\n+                sym::repr128,\n+                sp,\n+                \"repr with 128-bit type is unstable\",\n+            )\n+            .emit();\n         }\n     }\n "}, {"sha": "20b6b01de57b2555ee26a7da116c826b11b9d1b3", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -10,7 +10,7 @@ use rustc::middle::lang_items;\n use rustc::infer::opaque_types::may_define_opaque_type;\n \n use syntax::ast;\n-use syntax::feature_gate::{self, GateIssue};\n+use syntax::feature_gate;\n use syntax_pos::Span;\n use syntax::symbol::sym;\n use errors::DiagnosticBuilder;\n@@ -830,13 +830,13 @@ fn check_method_receiver<'fcx, 'tcx>(\n                     &fcx.tcx.sess.parse_sess,\n                     sym::arbitrary_self_types,\n                     span,\n-                    GateIssue::Language,\n                     &format!(\n                         \"`{}` cannot be used as the type of `self` without \\\n                             the `arbitrary_self_types` feature\",\n                         receiver_ty,\n                     ),\n-                ).help(HELP_FOR_SELF_TYPE)\n+                )\n+                .help(HELP_FOR_SELF_TYPE)\n                 .emit();\n             } else {\n                 // Report error; would not have worked with `arbitrary_self_types`."}, {"sha": "6d6e7685fa05338cde3082f0fe1f17f86e5651a6", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -1492,16 +1492,16 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         _ => None,\n                     };\n                     if let Some(unsupported_type) = err {\n-                        feature_gate::emit_feature_err(\n+                        feature_gate::feature_err(\n                             &tcx.sess.parse_sess,\n                             sym::const_compare_raw_pointers,\n                             hir_ty.span,\n-                            feature_gate::GateIssue::Language,\n                             &format!(\n                                 \"using {} as const generic parameters is unstable\",\n                                 unsupported_type\n                             ),\n-                        );\n+                        )\n+                        .emit();\n                     };\n                 }\n                 if ty::search_for_structural_match_violation(\n@@ -2520,13 +2520,13 @@ fn from_target_feature(\n                 None => true,\n             };\n             if !allowed && id.is_local() {\n-                feature_gate::emit_feature_err(\n+                feature_gate::feature_err(\n                     &tcx.sess.parse_sess,\n                     feature_gate.unwrap(),\n                     item.span(),\n-                    feature_gate::GateIssue::Language,\n                     &format!(\"the target feature `{}` is currently unstable\", feature),\n-                );\n+                )\n+                .emit();\n             }\n             Some(Symbol::intern(feature))\n         }));"}, {"sha": "078948cc63bd2633822deaf6dee0814dd8d0546e", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -7,10 +7,10 @@ use std::mem;\n use std::fmt::{self, Write};\n use std::ops;\n \n+use rustc_feature::Features;\n use syntax::symbol::{Symbol, sym};\n use syntax::ast::{MetaItem, MetaItemKind, NestedMetaItem, LitKind};\n use syntax::sess::ParseSess;\n-use syntax::feature_gate::Features;\n \n use syntax_pos::Span;\n "}, {"sha": "b77b1c720cfdffa0186a4f67c2386958c53c869e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -12,12 +12,12 @@ use rustc::session::DiagnosticOutput;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_interface::interface;\n use rustc_driver::abort_on_err;\n+use rustc_feature::UnstableFeatures;\n use rustc_resolve as resolve;\n \n use syntax::ast::CRATE_NODE_ID;\n use syntax::source_map;\n use syntax::attr;\n-use syntax::feature_gate::UnstableFeatures;\n use errors::json::JsonEmitter;\n use syntax::symbol::sym;\n use syntax_pos::DUMMY_SP;"}, {"sha": "7945850ef08ac84cc69b5da597218893b52ff9dc", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -2,7 +2,7 @@ use std::fs;\n use std::path::Path;\n use std::str;\n use errors;\n-use crate::syntax::feature_gate::UnstableFeatures;\n+use rustc_feature::UnstableFeatures;\n use crate::syntax::edition::Edition;\n use crate::html::markdown::{IdMap, ErrorCodes, Markdown, Playground};\n "}, {"sha": "b5c1a77a3874209c585e19b8c60fc3fc58aaacfd", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -45,7 +45,6 @@ use errors;\n use serialize::json::{ToJson, Json, as_json};\n use syntax::ast;\n use syntax::edition::Edition;\n-use syntax::feature_gate::UnstableFeatures;\n use syntax::print::pprust;\n use syntax::source_map::FileName;\n use syntax::symbol::{Symbol, sym};\n@@ -56,6 +55,7 @@ use rustc::middle::stability;\n use rustc::hir;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::flock;\n+use rustc_feature::UnstableFeatures;\n \n use crate::clean::{self, AttributesExt, Deprecation, GetDefId, SelfTy, Mutability};\n use crate::config::RenderOptions;"}, {"sha": "be3644ecf96a7ad1436d23a45a9d5fff00ac1925", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -24,6 +24,7 @@ extern crate env_logger;\n extern crate rustc;\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n+extern crate rustc_feature;\n extern crate rustc_error_codes;\n extern crate rustc_index;\n extern crate rustc_resolve;"}, {"sha": "7dc3df23a6d16cd73d0335fb6f1765b354994d4a", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -6,7 +6,7 @@ use errors;\n use testing;\n use syntax::edition::Edition;\n use syntax::source_map::DUMMY_SP;\n-use syntax::feature_gate::UnstableFeatures;\n+use rustc_feature::UnstableFeatures;\n \n use crate::externalfiles::{LoadStringError, load_string};\n use crate::config::{Options, RenderOptions};"}, {"sha": "3c021ae7465236c195c15276ab4f93523bdac4be", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -5,10 +5,10 @@ use rustc::hir;\n use rustc::lint as lint;\n use rustc::ty;\n use rustc_resolve::ParentScope;\n+use rustc_feature::UnstableFeatures;\n use syntax;\n use syntax::ast::{self, Ident};\n use syntax_expand::base::SyntaxExtensionKind;\n-use syntax::feature_gate::UnstableFeatures;\n use syntax::symbol::Symbol;\n use syntax_pos::DUMMY_SP;\n "}, {"sha": "5fd7ab03224a5a495b5122edca616b98d76a38c7", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -1,4 +1,5 @@\n use rustc_data_structures::sync::Lrc;\n+use rustc_feature::UnstableFeatures;\n use rustc_interface::interface;\n use rustc_target::spec::TargetTriple;\n use rustc::hir;\n@@ -9,7 +10,6 @@ use syntax::ast;\n use syntax::with_globals;\n use syntax::source_map::SourceMap;\n use syntax::edition::Edition;\n-use syntax::feature_gate::UnstableFeatures;\n use std::env;\n use std::io::{self, Write};\n use std::panic;"}, {"sha": "085c1760c80272c9cf659a20052947338d4777aa", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -18,6 +18,7 @@ lazy_static = \"1.0.0\"\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }"}, {"sha": "3c10f27b60ae94532eba9919aa6de84de0ba7c8b", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 23, "deletions": 34, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -1,20 +1,24 @@\n //! Parsing and validation of builtin attributes\n \n+use super::{mark_used, MetaItemKind};\n use crate::ast::{self, Attribute, MetaItem, NestedMetaItem};\n-use crate::feature_gate::{Features, GatedCfg};\n+use crate::feature_gate::feature_err;\n use crate::print::pprust;\n use crate::sess::ParseSess;\n \n use errors::{Applicability, Handler};\n use std::num::NonZeroU32;\n use syntax_pos::hygiene::Transparency;\n use syntax_pos::{symbol::Symbol, symbol::sym, Span};\n+use rustc_feature::{Features, find_gated_cfg, GatedCfg, is_builtin_attr_name};\n use rustc_macros::HashStable_Generic;\n \n-use super::{mark_used, MetaItemKind};\n-\n use rustc_error_codes::*;\n \n+pub fn is_builtin_attr(attr: &Attribute) -> bool {\n+    attr.ident().filter(|ident| is_builtin_attr_name(ident.name)).is_some()\n+}\n+\n enum AttrError {\n     MultipleItem(String),\n     UnknownMetaItem(String, &'static [&'static str]),\n@@ -24,31 +28,6 @@ enum AttrError {\n     UnsupportedLiteral(&'static str, /* is_bytestr */ bool),\n }\n \n-/// A template that the attribute input must match.\n-/// Only top-level shape (`#[attr]` vs `#[attr(...)]` vs `#[attr = ...]`) is considered now.\n-#[derive(Clone, Copy)]\n-pub struct AttributeTemplate {\n-    pub word: bool,\n-    pub list: Option<&'static str>,\n-    pub name_value_str: Option<&'static str>,\n-}\n-\n-impl AttributeTemplate {\n-    pub fn only_word() -> Self {\n-        Self { word: true, list: None, name_value_str: None }\n-    }\n-\n-    /// Checks that the given meta-item is compatible with this template.\n-    pub fn compatible(&self, meta_item_kind: &ast::MetaItemKind) -> bool {\n-        match meta_item_kind {\n-            ast::MetaItemKind::Word => self.word,\n-            ast::MetaItemKind::List(..) => self.list.is_some(),\n-            ast::MetaItemKind::NameValue(lit) if lit.kind.is_str() => self.name_value_str.is_some(),\n-            ast::MetaItemKind::NameValue(..) => false,\n-        }\n-    }\n-}\n-\n fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n     let diag = &sess.span_diagnostic;\n     match error {\n@@ -555,8 +534,9 @@ pub fn find_crate_name(attrs: &[Attribute]) -> Option<Symbol> {\n /// Tests if a cfg-pattern matches the cfg set\n pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Features>) -> bool {\n     eval_condition(cfg, sess, &mut |cfg| {\n-        if let (Some(feats), Some(gated_cfg)) = (features, GatedCfg::gate(cfg)) {\n-            gated_cfg.check_and_emit(sess, feats);\n+        let gate = find_gated_cfg(|sym| cfg.check_name(sym));\n+        if let (Some(feats), Some(gated_cfg)) = (features, gate) {\n+            gate_cfg(&gated_cfg, cfg.span, sess, feats);\n         }\n         let error = |span, msg| { sess.span_diagnostic.span_err(span, msg); true };\n         if cfg.path.segments.len() != 1 {\n@@ -585,12 +565,21 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n     })\n }\n \n+fn gate_cfg(gated_cfg: &GatedCfg, cfg_span: Span, sess: &ParseSess, features: &Features) {\n+    let (cfg, feature, has_feature) = gated_cfg;\n+    if !has_feature(features) && !cfg_span.allows_unstable(*feature) {\n+        let explain = format!(\"`cfg({})` is experimental and subject to change\", cfg);\n+        feature_err(sess, *feature, cfg_span, &explain).emit()\n+    }\n+}\n+\n /// Evaluate a cfg-like condition (with `any` and `all`), using `eval` to\n /// evaluate individual items.\n-pub fn eval_condition<F>(cfg: &ast::MetaItem, sess: &ParseSess, eval: &mut F)\n-                         -> bool\n-    where F: FnMut(&ast::MetaItem) -> bool\n-{\n+pub fn eval_condition(\n+    cfg: &ast::MetaItem,\n+    sess: &ParseSess,\n+    eval: &mut impl FnMut(&ast::MetaItem) -> bool,\n+) -> bool {\n     match cfg.kind {\n         ast::MetaItemKind::List(ref mis) => {\n             for mi in mis.iter() {"}, {"sha": "3d2c3b1d4f90121de47f7f580d50f3842f85366e", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 19, "deletions": 107, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -1,7 +1,7 @@\n-use super::{active::{ACTIVE_FEATURES, Features}, Feature, State as FeatureState};\n-use super::accepted::ACCEPTED_FEATURES;\n-use super::removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n-use super::builtin_attrs::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_feature::{ACCEPTED_FEATURES, ACTIVE_FEATURES, REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n+use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_feature::{Features, Feature, State as FeatureState, UnstableFeatures};\n+use rustc_feature::{find_feature_issue, GateIssue};\n \n use crate::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};\n use crate::ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n@@ -19,18 +19,6 @@ use log::debug;\n \n use rustc_error_codes::*;\n \n-\n-use std::env;\n-use std::num::NonZeroU32;\n-\n-#[derive(Copy, Clone, Debug)]\n-pub enum Stability {\n-    Unstable,\n-    // First argument is tracking issue link; second argument is an optional\n-    // help message, which defaults to \"remove this attribute\"\n-    Deprecated(&'static str, Option<&'static str>),\n-}\n-\n macro_rules! gate_feature_fn {\n     ($cx: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr, $level: expr) => {{\n         let (cx, has_feature, span,\n@@ -59,30 +47,6 @@ pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features:\n     PostExpansionVisitor { parse_sess, features }.visit_attribute(attr)\n }\n \n-fn find_lang_feature_issue(feature: Symbol) -> Option<NonZeroU32> {\n-    if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.name == feature) {\n-        // FIXME (#28244): enforce that active features have issue numbers\n-        // assert!(info.issue().is_some())\n-        info.issue()\n-    } else {\n-        // search in Accepted, Removed, or Stable Removed features\n-        let found = ACCEPTED_FEATURES\n-            .iter()\n-            .chain(REMOVED_FEATURES)\n-            .chain(STABLE_REMOVED_FEATURES)\n-            .find(|t| t.name == feature);\n-        match found {\n-            Some(found) => found.issue(),\n-            None => panic!(\"feature `{}` is not declared anywhere\", feature),\n-        }\n-    }\n-}\n-\n-pub enum GateIssue {\n-    Language,\n-    Library(Option<NonZeroU32>)\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq)]\n pub enum GateStrength {\n     /// A hard error. (Most feature gates should use this.)\n@@ -91,49 +55,43 @@ pub enum GateStrength {\n     Soft,\n }\n \n-pub fn emit_feature_err(\n-    sess: &ParseSess,\n+pub fn feature_err<'a>(\n+    sess: &'a ParseSess,\n     feature: Symbol,\n-    span: Span,\n-    issue: GateIssue,\n+    span: impl Into<MultiSpan>,\n     explain: &str,\n-) {\n-    feature_err(sess, feature, span, issue, explain).emit();\n+) -> DiagnosticBuilder<'a> {\n+    feature_err_issue(sess, feature, span, GateIssue::Language, explain)\n }\n \n-pub fn feature_err<'a, S: Into<MultiSpan>>(\n+pub fn feature_err_issue<'a>(\n     sess: &'a ParseSess,\n     feature: Symbol,\n-    span: S,\n+    span: impl Into<MultiSpan>,\n     issue: GateIssue,\n     explain: &str,\n ) -> DiagnosticBuilder<'a> {\n     leveled_feature_err(sess, feature, span, issue, explain, GateStrength::Hard)\n }\n \n-fn leveled_feature_err<'a, S: Into<MultiSpan>>(\n+fn leveled_feature_err<'a>(\n     sess: &'a ParseSess,\n     feature: Symbol,\n-    span: S,\n+    span: impl Into<MultiSpan>,\n     issue: GateIssue,\n     explain: &str,\n     level: GateStrength,\n ) -> DiagnosticBuilder<'a> {\n     let diag = &sess.span_diagnostic;\n \n-    let issue = match issue {\n-        GateIssue::Language => find_lang_feature_issue(feature),\n-        GateIssue::Library(lib) => lib,\n-    };\n-\n     let mut err = match level {\n         GateStrength::Hard => {\n             diag.struct_span_err_with_code(span, explain, stringify_error_code!(E0658))\n         }\n         GateStrength::Soft => diag.struct_span_warn(span, explain),\n     };\n \n-    if let Some(n) = issue {\n+    if let Some(n) = find_feature_issue(feature, issue) {\n         err.note(&format!(\n             \"for more information, see https://github.com/rust-lang/rust/issues/{}\",\n             n,\n@@ -156,20 +114,6 @@ fn leveled_feature_err<'a, S: Into<MultiSpan>>(\n \n }\n \n-const EXPLAIN_BOX_SYNTAX: &str =\n-    \"box expression syntax is experimental; you can call `Box::new` instead\";\n-\n-pub const EXPLAIN_STMT_ATTR_SYNTAX: &str =\n-    \"attributes on expressions are experimental\";\n-\n-pub const EXPLAIN_ALLOW_INTERNAL_UNSTABLE: &str =\n-    \"allow_internal_unstable side-steps feature gating and stability checks\";\n-pub const EXPLAIN_ALLOW_INTERNAL_UNSAFE: &str =\n-    \"allow_internal_unsafe side-steps the unsafe_code lint\";\n-\n-pub const EXPLAIN_UNSIZED_TUPLE_COERCION: &str =\n-    \"unsized tuple coercion is not stable enough for use and is subject to change\";\n-\n struct PostExpansionVisitor<'a> {\n     parse_sess: &'a ParseSess,\n     features: &'a Features,\n@@ -282,7 +226,6 @@ impl<'a> PostExpansionVisitor<'a> {\n                 self.parse_sess,\n                 sym::arbitrary_enum_discriminant,\n                 discriminant_spans.clone(),\n-                crate::feature_gate::GateIssue::Language,\n                 \"custom discriminant values are not allowed in enums with tuple or struct variants\",\n             );\n             for sp in discriminant_spans {\n@@ -529,7 +472,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         match e.kind {\n             ast::ExprKind::Box(_) => {\n-                gate_feature_post!(&self, box_syntax, e.span, EXPLAIN_BOX_SYNTAX);\n+                gate_feature_post!(\n+                    &self, box_syntax, e.span,\n+                    \"box expression syntax is experimental; you can call `Box::new` instead\"\n+                );\n             }\n             ast::ExprKind::Type(..) => {\n                 // To avoid noise about type ascription in common syntax errors, only emit if it\n@@ -695,7 +641,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n         err.emit();\n     }\n \n-    let mut features = Features::new();\n+    let mut features = Features::default();\n     let mut edition_enabled_features = FxHashMap::default();\n \n     for &edition in ALL_EDITIONS {\n@@ -900,40 +846,6 @@ pub fn check_crate(krate: &ast::Crate,\n     visit::walk_crate(&mut visitor, krate);\n }\n \n-#[derive(Clone, Copy, Hash)]\n-pub enum UnstableFeatures {\n-    /// Hard errors for unstable features are active, as on beta/stable channels.\n-    Disallow,\n-    /// Allow features to be activated, as on nightly.\n-    Allow,\n-    /// Errors are bypassed for bootstrapping. This is required any time\n-    /// during the build that feature-related lints are set to warn or above\n-    /// because the build turns on warnings-as-errors and uses lots of unstable\n-    /// features. As a result, this is always required for building Rust itself.\n-    Cheat\n-}\n-\n-impl UnstableFeatures {\n-    pub fn from_environment() -> UnstableFeatures {\n-        // `true` if this is a feature-staged build, i.e., on the beta or stable channel.\n-        let disable_unstable_features = option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some();\n-        // `true` if we should enable unstable features for bootstrapping.\n-        let bootstrap = env::var(\"RUSTC_BOOTSTRAP\").is_ok();\n-        match (disable_unstable_features, bootstrap) {\n-            (_, true) => UnstableFeatures::Cheat,\n-            (true, _) => UnstableFeatures::Disallow,\n-            (false, _) => UnstableFeatures::Allow\n-        }\n-    }\n-\n-    pub fn is_nightly_build(&self) -> bool {\n-        match *self {\n-            UnstableFeatures::Allow | UnstableFeatures::Cheat => true,\n-            UnstableFeatures::Disallow => false,\n-        }\n-    }\n-}\n-\n fn maybe_stage_features(span_handler: &Handler, krate: &ast::Crate, unstable: UnstableFeatures) {\n     if !unstable.is_nightly_build() {\n         for attr in krate.attrs.iter().filter(|attr| attr.check_name(sym::feature)) {"}, {"sha": "c4418c0f0f632b26cf26ec0e1e900ca0868d76c8", "filename": "src/libsyntax/feature_gate/mod.rs", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/b4bffcebca8840a5b8502289bf5ab0829f5c1e60/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4bffcebca8840a5b8502289bf5ab0829f5c1e60/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs?ref=b4bffcebca8840a5b8502289bf5ab0829f5c1e60", "patch": "@@ -1,71 +0,0 @@\n-//! # Feature gating\n-//!\n-//! This module implements the gating necessary for preventing certain compiler\n-//! features from being used by default. This module will crawl a pre-expanded\n-//! AST to ensure that there are no features which are used that are not\n-//! enabled.\n-//!\n-//! Features are enabled in programs via the crate-level attributes of\n-//! `#![feature(...)]` with a comma-separated list of features.\n-//!\n-//! For the purpose of future feature-tracking, once code for detection of feature\n-//! gate usage is added, *do not remove it again* even once the feature\n-//! becomes stable.\n-\n-mod accepted;\n-mod removed;\n-mod active;\n-mod builtin_attrs;\n-mod check;\n-\n-use crate::{edition::Edition, symbol::Symbol};\n-use std::fmt;\n-use std::num::NonZeroU32;\n-use syntax_pos::Span;\n-\n-#[derive(Clone, Copy)]\n-pub enum State {\n-    Accepted,\n-    Active { set: fn(&mut Features, Span) },\n-    Removed { reason: Option<&'static str> },\n-    Stabilized { reason: Option<&'static str> },\n-}\n-\n-impl fmt::Debug for State {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            State::Accepted { .. } => write!(f, \"accepted\"),\n-            State::Active { .. } => write!(f, \"active\"),\n-            State::Removed { .. } => write!(f, \"removed\"),\n-            State::Stabilized { .. } => write!(f, \"stabilized\"),\n-        }\n-    }\n-}\n-\n-#[derive(Debug, Clone)]\n-pub struct Feature {\n-    state: State,\n-    name: Symbol,\n-    since: &'static str,\n-    issue: Option<u32>,  // FIXME: once #58732 is done make this an Option<NonZeroU32>\n-    edition: Option<Edition>,\n-    description: &'static str,\n-}\n-\n-impl Feature {\n-    fn issue(&self) -> Option<NonZeroU32> {\n-        self.issue.and_then(|i| NonZeroU32::new(i))\n-    }\n-}\n-\n-pub use active::{Features, INCOMPLETE_FEATURES};\n-pub use builtin_attrs::{\n-    AttributeGate, AttributeType, GatedCfg,\n-    BuiltinAttribute, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,\n-    deprecated_attributes, is_builtin_attr,  is_builtin_attr_name,\n-};\n-pub use check::{\n-    check_crate, check_attribute, get_features, feature_err, emit_feature_err,\n-    Stability, GateIssue, UnstableFeatures,\n-    EXPLAIN_STMT_ATTR_SYNTAX, EXPLAIN_UNSIZED_TUPLE_COERCION,\n-};"}, {"sha": "3d4a5d624c1190eccf025a807b2779387d3de59d", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -92,7 +92,10 @@ pub mod attr;\n pub mod expand;\n pub use syntax_pos::source_map;\n pub mod entry;\n-pub mod feature_gate;\n+pub mod feature_gate {\n+    mod check;\n+    pub use check::{check_crate, check_attribute, get_features, feature_err, feature_err_issue};\n+}\n pub mod mut_visit;\n pub mod ptr;\n pub mod show_span;"}, {"sha": "aa9217c1b69a846f574e49337d2c1e173038638b", "filename": "src/libsyntax/sess.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax%2Fsess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax%2Fsess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsess.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -3,15 +3,15 @@\n \n use crate::ast::{CrateConfig, NodeId};\n use crate::early_buffered_lints::{BufferedEarlyLint, BufferedEarlyLintId};\n-use crate::source_map::{SourceMap, FilePathMapping};\n-use crate::feature_gate::UnstableFeatures;\n \n use errors::{Applicability, emitter::SilentEmitter, Handler, ColorConfig, DiagnosticBuilder};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_data_structures::sync::{Lrc, Lock, Once};\n+use rustc_feature::UnstableFeatures;\n use syntax_pos::{Symbol, Span, MultiSpan};\n use syntax_pos::edition::Edition;\n use syntax_pos::hygiene::ExpnId;\n+use syntax_pos::source_map::{SourceMap, FilePathMapping};\n \n use std::path::PathBuf;\n use std::str;"}, {"sha": "897d5a65ba3de1297818c1299e6fb34aabf71d7e", "filename": "src/libsyntax_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2FCargo.toml?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -16,6 +16,7 @@ log = \"0.4\"\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_parse = { path = \"../librustc_parse\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "a6ced1439c5d95c5e07800899cd4f8980872fa9c", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -4,16 +4,17 @@ use crate::hygiene::{ExpnId, SyntaxContext, ExpnData, ExpnKind};\n use crate::mbe::macro_rules::annotate_err_with_kind;\n use crate::placeholders::{placeholder, PlaceholderExpander};\n use crate::config::StripUnconfigured;\n-use rustc_parse::configure;\n \n+use rustc_feature::Features;\n+use rustc_parse::configure;\n use rustc_parse::DirectoryOwnership;\n use rustc_parse::parser::Parser;\n use rustc_parse::validate_attr;\n use syntax::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n use syntax::ast::{MacStmtStyle, StmtKind, ItemKind};\n-use syntax::attr::{self, HasAttrs};\n+use syntax::attr::{self, HasAttrs, is_builtin_attr};\n use syntax::source_map::respan;\n-use syntax::feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n+use syntax::feature_gate::{self, feature_err};\n use syntax::mut_visit::*;\n use syntax::print::pprust;\n use syntax::ptr::P;\n@@ -726,13 +727,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         if self.cx.ecfg.proc_macro_hygiene() {\n             return\n         }\n-        emit_feature_err(\n+        feature_err(\n             self.cx.parse_sess,\n             sym::proc_macro_hygiene,\n             span,\n-            GateIssue::Language,\n             &format!(\"custom attributes cannot be applied to {}\", kind),\n-        );\n+        )\n+        .emit();\n     }\n \n     fn gate_proc_macro_input(&self, annotatable: &Annotatable) {\n@@ -744,13 +745,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             fn visit_item(&mut self, item: &'ast ast::Item) {\n                 match &item.kind {\n                     ast::ItemKind::Mod(module) if !module.inline => {\n-                        emit_feature_err(\n+                        feature_err(\n                             self.parse_sess,\n                             sym::proc_macro_hygiene,\n                             item.span,\n-                            GateIssue::Language,\n                             \"non-inline modules in proc macro input are unstable\",\n-                        );\n+                        )\n+                        .emit();\n                     }\n                     _ => {}\n                 }\n@@ -789,13 +790,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         if self.cx.ecfg.proc_macro_hygiene() {\n             return\n         }\n-        emit_feature_err(\n+        feature_err(\n             self.cx.parse_sess,\n             sym::proc_macro_hygiene,\n             span,\n-            GateIssue::Language,\n             &format!(\"procedural macros cannot be expanded to {}\", kind),\n-        );\n+        )\n+        .emit();\n     }\n \n     fn parse_ast_fragment(\n@@ -991,9 +992,11 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         if let Some(attr) = &attr {\n             if !self.cx.ecfg.custom_inner_attributes() &&\n                attr.style == ast::AttrStyle::Inner && !attr.has_name(sym::test) {\n-                emit_feature_err(&self.cx.parse_sess, sym::custom_inner_attributes,\n-                                 attr.span, GateIssue::Language,\n-                                 \"non-builtin inner attributes are unstable\");\n+                feature_err(\n+                    &self.cx.parse_sess, sym::custom_inner_attributes, attr.span,\n+                    \"non-builtin inner attributes are unstable\"\n+                )\n+                .emit();\n             }\n         }\n         attr"}, {"sha": "b191527df1991fc832b43862901720e7b67e9215", "filename": "src/libsyntax_expand/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -8,12 +8,12 @@ use crate::mbe::macro_parser::{Error, Failure, Success};\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedParseResult};\n use crate::mbe::transcribe::transcribe;\n \n+use rustc_feature::Features;\n use rustc_parse::parser::Parser;\n use rustc_parse::Directory;\n use syntax::ast;\n use syntax::attr::{self, TransparencyError};\n use syntax::edition::Edition;\n-use syntax::feature_gate::Features;\n use syntax::print::pprust;\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym, Symbol};"}, {"sha": "d73a9ea6cdbc14ef4eea404e05c6ef6c97854bb8", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -14,6 +14,7 @@ errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n fmt_macros = { path = \"../libfmt_macros\" }\n log = \"0.4\"\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "4c1eec38c6e5dd8b8e8685283be86c2419c4d6e3", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -2,13 +2,13 @@\n \n use log::debug;\n use smallvec::{smallvec, SmallVec};\n+use rustc_feature::Features;\n use rustc_target::spec::PanicStrategy;\n use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::entry::{self, EntryPointType};\n use syntax_expand::base::{ExtCtxt, Resolver};\n use syntax_expand::expand::{AstFragment, ExpansionConfig};\n-use syntax::feature_gate::Features;\n use syntax::mut_visit::{*, ExpectOne};\n use syntax::ptr::P;\n use syntax::sess::ParseSess;"}, {"sha": "f7bd9a056046178f171077b7666ef4bebc92167f", "filename": "src/libsyntax_ext/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax_ext%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Flibsyntax_ext%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Futil.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -1,7 +1,7 @@\n use rustc_parse::validate_attr;\n+use rustc_feature::AttributeTemplate;\n use syntax_pos::Symbol;\n use syntax::ast::MetaItem;\n-use syntax::attr::AttributeTemplate;\n use syntax_expand::base::ExtCtxt;\n \n pub fn check_builtin_macro_attribute(ecx: &ExtCtxt<'_>, meta_item: &MetaItem, name: Symbol) {"}, {"sha": "4ea101296b738c04d370e40d94af8c1c41c4de67", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b772b5b19d769e7062b032e6e73f6466b26d78bd/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=b772b5b19d769e7062b032e6e73f6466b26d78bd", "patch": "@@ -231,7 +231,7 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n }\n \n fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features {\n-    let path = base.join(\"libsyntax/feature_gate\").join(file);\n+    let path = base.join(\"librustc_feature\").join(file);\n     let contents = t!(fs::read_to_string(&path));\n \n     // We allow rustc-internal features to omit a tracking issue."}]}