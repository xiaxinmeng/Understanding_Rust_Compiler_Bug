{"sha": "49489dc20cc9f340d43acb467677b9bc59495ed2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NDg5ZGMyMGNjOWYzNDBkNDNhY2I0Njc2NzdiOWJjNTk0OTVlZDI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-12T15:53:44Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-06-15T16:21:23Z"}, "message": "Add basic infrastructure for assoc type projection", "tree": {"sha": "e8e76acb07e646957a20c8ce5262d893ea7b7b03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8e76acb07e646957a20c8ce5262d893ea7b7b03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49489dc20cc9f340d43acb467677b9bc59495ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49489dc20cc9f340d43acb467677b9bc59495ed2", "html_url": "https://github.com/rust-lang/rust/commit/49489dc20cc9f340d43acb467677b9bc59495ed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49489dc20cc9f340d43acb467677b9bc59495ed2/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f946f96563bac1f214f86f463287d94968e3688", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f946f96563bac1f214f86f463287d94968e3688", "html_url": "https://github.com/rust-lang/rust/commit/6f946f96563bac1f214f86f463287d94968e3688"}], "stats": {"total": 211, "additions": 190, "deletions": 21}, "files": [{"sha": "42b8ce7c24f31769a08645efc4f7e0cfcb1086cf", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49489dc20cc9f340d43acb467677b9bc59495ed2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/49489dc20cc9f340d43acb467677b9bc59495ed2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=49489dc20cc9f340d43acb467677b9bc59495ed2", "patch": "@@ -1079,6 +1079,7 @@ dependencies = [\n  \"flexi_logger 0.11.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"insta 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"join_to_string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lalrpop-intern 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"once_cell 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "aaace85e5f8b31e307314c10b777059ab04b7edb", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=49489dc20cc9f340d43acb467677b9bc59495ed2", "patch": "@@ -25,6 +25,7 @@ ra_prof = { path = \"../ra_prof\" }\n chalk-solve = { git = \"https://github.com/flodiebold/chalk.git\", branch = \"fuel\" }\n chalk-rust-ir = { git = \"https://github.com/flodiebold/chalk.git\", branch = \"fuel\" }\n chalk-ir = { git = \"https://github.com/flodiebold/chalk.git\", branch = \"fuel\" }\n+lalrpop-intern = \"0.15.1\"\n \n [dev-dependencies]\n flexi_logger = \"0.11.0\""}, {"sha": "4fbb1fc8f74114e9a3f65aebdf2cd68d19918682", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=49489dc20cc9f340d43acb467677b9bc59495ed2", "patch": "@@ -779,6 +779,19 @@ impl Trait {\n         self.trait_data(db).items().to_vec()\n     }\n \n+    pub fn associated_type_by_name(self, db: &impl DefDatabase, name: Name) -> Option<TypeAlias> {\n+        let trait_data = self.trait_data(db);\n+        trait_data\n+            .items()\n+            .iter()\n+            .filter_map(|item| match item {\n+                TraitItem::TypeAlias(t) => Some(*t),\n+                _ => None,\n+            })\n+            .filter(|t| t.name(db) == name)\n+            .next()\n+    }\n+\n     pub(crate) fn trait_data(self, db: &impl DefDatabase) -> Arc<TraitData> {\n         db.trait_data(self)\n     }\n@@ -831,8 +844,12 @@ impl TypeAlias {\n         }\n     }\n \n-    pub fn type_ref(self, db: &impl DefDatabase) -> Arc<TypeRef> {\n-        db.type_alias_ref(self)\n+    pub fn type_ref(self, db: &impl DefDatabase) -> Option<TypeRef> {\n+        db.type_alias_data(self).type_ref.clone()\n+    }\n+\n+    pub fn name(self, db: &impl DefDatabase) -> Name {\n+        db.type_alias_data(self).name.clone()\n     }\n \n     /// Builds a resolver for the type references in this type alias."}, {"sha": "651f0d4ca1ef5799c75b51e8ec5632cf1c238b85", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=49489dc20cc9f340d43acb467677b9bc59495ed2", "patch": "@@ -16,9 +16,8 @@ use crate::{\n     adt::{StructData, EnumData},\n     impl_block::{ModuleImplBlocks, ImplSourceMap, ImplBlock},\n     generics::{GenericParams, GenericDef},\n-    type_ref::TypeRef,\n     traits::TraitData,\n-    lang_item::{LangItems, LangItemTarget},\n+    lang_item::{LangItems, LangItemTarget}, type_alias::TypeAliasData,\n };\n \n // This database has access to source code, so queries here are not really\n@@ -113,8 +112,8 @@ pub trait DefDatabase: SourceDatabase {\n     #[salsa::invoke(crate::FnSignature::fn_signature_query)]\n     fn fn_signature(&self, func: Function) -> Arc<FnSignature>;\n \n-    #[salsa::invoke(crate::type_alias::type_alias_ref_query)]\n-    fn type_alias_ref(&self, typ: TypeAlias) -> Arc<TypeRef>;\n+    #[salsa::invoke(crate::type_alias::type_alias_data_query)]\n+    fn type_alias_data(&self, typ: TypeAlias) -> Arc<TypeAliasData>;\n \n     #[salsa::invoke(crate::ConstSignature::const_signature_query)]\n     fn const_signature(&self, konst: Const) -> Arc<ConstSignature>;\n@@ -185,6 +184,13 @@ pub trait HirDatabase: DefDatabase + AstDatabase {\n         krate: Crate,\n         goal: crate::ty::Canonical<crate::ty::TraitRef>,\n     ) -> Option<crate::ty::traits::Solution>;\n+\n+    #[salsa::invoke(crate::ty::traits::normalize)]\n+    fn normalize(\n+        &self,\n+        krate: Crate,\n+        goal: crate::ty::Canonical<crate::ty::traits::ProjectionPredicate>,\n+    ) -> Option<crate::ty::traits::Solution>;\n }\n \n #[test]"}, {"sha": "d9a50b23032458c2eb99bf87ece6d20b35af8b12", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=49489dc20cc9f340d43acb467677b9bc59495ed2", "patch": "@@ -16,7 +16,7 @@ use std::sync::Arc;\n use std::ops::Deref;\n use std::{fmt, mem};\n \n-use crate::{Name, AdtDef, type_ref::Mutability, db::HirDatabase, Trait, GenericParams};\n+use crate::{Name, AdtDef, type_ref::Mutability, db::HirDatabase, Trait, GenericParams, TypeAlias};\n use display::{HirDisplay, HirFormatter};\n \n pub(crate) use lower::{TypableDef, type_for_def, type_for_field, callable_item_sig, generic_predicates, generic_defaults};\n@@ -100,6 +100,15 @@ pub struct ApplicationTy {\n     pub parameters: Substs,\n }\n \n+/// A \"projection\" type corresponds to an (unnormalized)\n+/// projection like `<P0 as Trait<P1..Pn>>::Foo`. Note that the\n+/// trait and all its parameters are fully known.\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n+pub struct ProjectionTy {\n+    pub associated_ty: TypeAlias,\n+    pub parameters: Substs,\n+}\n+\n /// A type.\n ///\n /// See also the `TyKind` enum in rustc (librustc/ty/sty.rs), which represents"}, {"sha": "300616a539e89822facc43da52a831e185b113e8", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=49489dc20cc9f340d43acb467677b9bc59495ed2", "patch": "@@ -460,7 +460,7 @@ fn type_for_type_alias(db: &impl HirDatabase, t: TypeAlias) -> Ty {\n     let resolver = t.resolver(db);\n     let type_ref = t.type_ref(db);\n     let substs = Substs::identity(&generics);\n-    let inner = Ty::from_hir(db, &resolver, &type_ref);\n+    let inner = Ty::from_hir(db, &resolver, &type_ref.unwrap_or(TypeRef::Error));\n     inner.subst(&substs)\n }\n "}, {"sha": "f3e4884034c2e6776d52ce98599ed43db57aa750", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=49489dc20cc9f340d43acb467677b9bc59495ed2", "patch": "@@ -8,7 +8,7 @@ use chalk_ir::cast::Cast;\n use ra_prof::profile;\n \n use crate::{Crate, Trait, db::HirDatabase, ImplBlock};\n-use super::{TraitRef, Ty, Canonical};\n+use super::{TraitRef, Ty, Canonical, ProjectionTy};\n \n use self::chalk::{ToChalk, from_chalk};\n \n@@ -75,6 +75,13 @@ pub enum Obligation {\n     /// Prove that a certain type implements a trait (the type is the `Self` type\n     /// parameter to the `TraitRef`).\n     Trait(TraitRef),\n+    // Projection(ProjectionPredicate),\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct ProjectionPredicate {\n+    projection_ty: ProjectionTy,\n+    ty: Ty,\n }\n \n /// Check using Chalk whether trait is implemented for given parameters including `Self` type.\n@@ -98,6 +105,30 @@ pub(crate) fn implements_query(\n     solution.map(|solution| solution_from_chalk(db, solution))\n }\n \n+pub(crate) fn normalize(\n+    db: &impl HirDatabase,\n+    krate: Crate,\n+    projection: Canonical<ProjectionPredicate>,\n+) -> Option<Solution> {\n+    let goal: chalk_ir::Goal = chalk_ir::Normalize {\n+        projection: projection.value.projection_ty.to_chalk(db),\n+        ty: projection.value.ty.to_chalk(db),\n+    }\n+    .cast();\n+    debug!(\"goal: {:?}\", goal);\n+    // FIXME unify with `implements`\n+    let env = chalk_ir::Environment::new();\n+    let in_env = chalk_ir::InEnvironment::new(&env, goal);\n+    let parameter = chalk_ir::ParameterKind::Ty(chalk_ir::UniverseIndex::ROOT);\n+    let canonical =\n+        chalk_ir::Canonical { value: in_env, binders: vec![parameter; projection.num_vars] };\n+    // We currently don't deal with universes (I think / hope they're not yet\n+    // relevant for our use cases?)\n+    let u_canonical = chalk_ir::UCanonical { canonical, universes: 1 };\n+    let solution = solve(db, krate, &u_canonical);\n+    solution.map(|solution| solution_from_chalk(db, solution))\n+}\n+\n fn solution_from_chalk(db: &impl HirDatabase, solution: chalk_solve::Solution) -> Solution {\n     let convert_subst = |subst: chalk_ir::Canonical<chalk_ir::Substitution>| {\n         let value = subst"}, {"sha": "1e1b6f406605ef779081791527b9bd7963b15dc0", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 102, "deletions": 8, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=49489dc20cc9f340d43acb467677b9bc59495ed2", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n \n use log::debug;\n \n-use chalk_ir::{TypeId, ImplId, TypeKindId, ProjectionTy, Parameter, Identifier, cast::Cast, PlaceholderIndex, UniverseIndex, TypeName};\n+use chalk_ir::{TypeId, ImplId, TypeKindId, Parameter, Identifier, cast::Cast, PlaceholderIndex, UniverseIndex, TypeName};\n use chalk_rust_ir::{AssociatedTyDatum, TraitDatum, StructDatum, ImplDatum};\n \n use test_utils::tested_by;\n@@ -12,9 +12,9 @@ use ra_db::salsa::{InternId, InternKey};\n use crate::{\n     Trait, HasGenericParams, ImplBlock,\n     db::HirDatabase,\n-    ty::{TraitRef, Ty, ApplicationTy, TypeCtor, Substs, GenericPredicate, CallableDef},\n+    ty::{TraitRef, Ty, ApplicationTy, TypeCtor, Substs, GenericPredicate, CallableDef, ProjectionTy},\n     ty::display::HirDisplay,\n-    generics::GenericDef,\n+    generics::GenericDef, TypeAlias, ImplItem,\n };\n use super::ChalkContext;\n \n@@ -156,6 +156,18 @@ impl ToChalk for ImplBlock {\n     }\n }\n \n+impl ToChalk for TypeAlias {\n+    type Chalk = chalk_ir::TypeId;\n+\n+    fn to_chalk(self, _db: &impl HirDatabase) -> chalk_ir::TypeId {\n+        self.id.into()\n+    }\n+\n+    fn from_chalk(_db: &impl HirDatabase, impl_id: chalk_ir::TypeId) -> TypeAlias {\n+        TypeAlias { id: impl_id.into() }\n+    }\n+}\n+\n impl ToChalk for GenericPredicate {\n     type Chalk = chalk_ir::QuantifiedWhereClause;\n \n@@ -183,6 +195,24 @@ impl ToChalk for GenericPredicate {\n     }\n }\n \n+impl ToChalk for ProjectionTy {\n+    type Chalk = chalk_ir::ProjectionTy;\n+\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::ProjectionTy {\n+        chalk_ir::ProjectionTy {\n+            associated_ty_id: self.associated_ty.to_chalk(db),\n+            parameters: self.parameters.to_chalk(db),\n+        }\n+    }\n+\n+    fn from_chalk(db: &impl HirDatabase, projection_ty: chalk_ir::ProjectionTy) -> ProjectionTy {\n+        ProjectionTy {\n+            associated_ty: from_chalk(db, projection_ty.associated_ty_id),\n+            parameters: from_chalk(db, projection_ty.parameters),\n+        }\n+    }\n+}\n+\n fn make_binders<T>(value: T, num_vars: usize) -> chalk_ir::Binders<T> {\n     chalk_ir::Binders {\n         value,\n@@ -225,8 +255,28 @@ impl<'a, DB> chalk_solve::RustIrDatabase for ChalkContext<'a, DB>\n where\n     DB: HirDatabase,\n {\n-    fn associated_ty_data(&self, _ty: TypeId) -> Arc<AssociatedTyDatum> {\n-        unimplemented!()\n+    fn associated_ty_data(&self, id: TypeId) -> Arc<AssociatedTyDatum> {\n+        debug!(\"associated_ty_data {:?}\", id);\n+        let type_alias: TypeAlias = from_chalk(self.db, id);\n+        let trait_ = match type_alias.container(self.db) {\n+            Some(crate::Container::Trait(t)) => t,\n+            _ => panic!(\"associated type not in trait\"),\n+        };\n+        let generic_params = type_alias.generic_params(self.db);\n+        let parameter_kinds = generic_params\n+            .params_including_parent()\n+            .into_iter()\n+            .map(|p| chalk_ir::ParameterKind::Ty(lalrpop_intern::intern(&p.name.to_string())))\n+            .collect();\n+        let datum = AssociatedTyDatum {\n+            trait_id: trait_.to_chalk(self.db),\n+            id,\n+            name: lalrpop_intern::intern(&type_alias.name(self.db).to_string()),\n+            parameter_kinds,\n+            bounds: vec![],        // FIXME\n+            where_clauses: vec![], // FIXME\n+        };\n+        Arc::new(datum)\n     }\n     fn trait_datum(&self, trait_id: chalk_ir::TraitId) -> Arc<TraitDatum> {\n         debug!(\"trait_datum {:?}\", trait_id);\n@@ -260,7 +310,15 @@ where\n             fundamental: false,\n         };\n         let where_clauses = convert_where_clauses(self.db, trait_.into(), &bound_vars);\n-        let associated_ty_ids = Vec::new(); // FIXME add associated tys\n+        let associated_ty_ids = trait_\n+            .items(self.db)\n+            .into_iter()\n+            .filter_map(|trait_item| match trait_item {\n+                crate::traits::TraitItem::TypeAlias(type_alias) => Some(type_alias),\n+                _ => None,\n+            })\n+            .map(|type_alias| type_alias.to_chalk(self.db))\n+            .collect();\n         let trait_datum_bound =\n             chalk_rust_ir::TraitDatumBound { trait_ref, where_clauses, flags, associated_ty_ids };\n         let trait_datum = TraitDatum { binders: make_binders(trait_datum_bound, bound_vars.len()) };\n@@ -359,17 +417,41 @@ where\n             trait_ref.display(self.db),\n             where_clauses\n         );\n+        let trait_ = trait_ref.trait_;\n         let trait_ref = trait_ref.to_chalk(self.db);\n+        let associated_ty_values = impl_block\n+            .items(self.db)\n+            .into_iter()\n+            .filter_map(|item| match item {\n+                ImplItem::TypeAlias(t) => Some(t),\n+                _ => None,\n+            })\n+            .filter_map(|t| {\n+                let assoc_ty = trait_.associated_type_by_name(self.db, t.name(self.db))?;\n+                let ty = self.db.type_for_def(t.into(), crate::Namespace::Types).subst(&bound_vars);\n+                debug!(\"ty = {}\", ty.display(self.db));\n+                Some(chalk_rust_ir::AssociatedTyValue {\n+                    impl_id,\n+                    associated_ty_id: assoc_ty.to_chalk(self.db),\n+                    value: chalk_ir::Binders {\n+                        value: chalk_rust_ir::AssociatedTyValueBound { ty: ty.to_chalk(self.db) },\n+                        binders: vec![], // FIXME add generic params (generic associated types)\n+                    },\n+                })\n+            })\n+            .collect();\n+\n         let impl_datum_bound = chalk_rust_ir::ImplDatumBound {\n             trait_ref: if negative {\n                 chalk_rust_ir::PolarizedTraitRef::Negative(trait_ref)\n             } else {\n                 chalk_rust_ir::PolarizedTraitRef::Positive(trait_ref)\n             },\n             where_clauses,\n-            associated_ty_values: Vec::new(), // FIXME add associated type values\n+            associated_ty_values,\n             impl_type,\n         };\n+        debug!(\"impl_datum: {:?}\", impl_datum_bound);\n         let impl_datum = ImplDatum { binders: make_binders(impl_datum_bound, bound_vars.len()) };\n         Arc::new(impl_datum)\n     }\n@@ -405,7 +487,7 @@ where\n     }\n     fn split_projection<'p>(\n         &self,\n-        projection: &'p ProjectionTy,\n+        projection: &'p chalk_ir::ProjectionTy,\n     ) -> (Arc<AssociatedTyDatum>, &'p [Parameter], &'p [Parameter]) {\n         debug!(\"split_projection {:?}\", projection);\n         unimplemented!()\n@@ -440,6 +522,18 @@ impl From<crate::ids::TraitId> for chalk_ir::TraitId {\n     }\n }\n \n+impl From<chalk_ir::TypeId> for crate::ids::TypeAliasId {\n+    fn from(type_id: chalk_ir::TypeId) -> Self {\n+        id_from_chalk(type_id.0)\n+    }\n+}\n+\n+impl From<crate::ids::TypeAliasId> for chalk_ir::TypeId {\n+    fn from(type_id: crate::ids::TypeAliasId) -> Self {\n+        chalk_ir::TypeId(id_to_chalk(type_id))\n+    }\n+}\n+\n impl From<chalk_ir::StructId> for crate::ids::TypeCtorId {\n     fn from(struct_id: chalk_ir::StructId) -> Self {\n         id_from_chalk(struct_id.0)"}, {"sha": "eada37274134ae427e0fdfa4b0a673f32e715262", "filename": "crates/ra_hir/src/type_alias.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49489dc20cc9f340d43acb467677b9bc59495ed2/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs?ref=49489dc20cc9f340d43acb467677b9bc59495ed2", "patch": "@@ -2,12 +2,22 @@\n \n use std::sync::Arc;\n \n-use crate::{TypeAlias, DefDatabase, AstDatabase, HasSource, type_ref::TypeRef};\n+use ra_syntax::ast::NameOwner;\n \n-pub(crate) fn type_alias_ref_query(\n+use crate::{TypeAlias, db::{DefDatabase, AstDatabase}, type_ref::TypeRef, name::{Name, AsName}, HasSource};\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct TypeAliasData {\n+    pub(crate) name: Name,\n+    pub(crate) type_ref: Option<TypeRef>,\n+}\n+\n+pub(crate) fn type_alias_data_query(\n     db: &(impl DefDatabase + AstDatabase),\n     typ: TypeAlias,\n-) -> Arc<TypeRef> {\n+) -> Arc<TypeAliasData> {\n     let node = typ.source(db).ast;\n-    Arc::new(TypeRef::from_ast_opt(node.type_ref()))\n+    let name = node.name().map_or_else(Name::missing, |n| n.as_name());\n+    let type_ref = node.type_ref().map(TypeRef::from_ast);\n+    Arc::new(TypeAliasData { name, type_ref })\n }"}]}