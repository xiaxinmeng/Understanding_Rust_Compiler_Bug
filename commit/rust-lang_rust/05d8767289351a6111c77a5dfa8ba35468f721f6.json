{"sha": "05d8767289351a6111c77a5dfa8ba35468f721f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZDg3NjcyODkzNTFhNjExMWM3N2E1ZGZhOGJhMzU0NjhmNzIxZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-12T22:05:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-12T22:05:59Z"}, "message": "Auto merge of #26957 - wesleywiser:rename_connect_to_join, r=alexcrichton\n\nFixes #26900", "tree": {"sha": "35b1118660802f381b7a09380cd01501e6fa109e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35b1118660802f381b7a09380cd01501e6fa109e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05d8767289351a6111c77a5dfa8ba35468f721f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05d8767289351a6111c77a5dfa8ba35468f721f6", "html_url": "https://github.com/rust-lang/rust/commit/05d8767289351a6111c77a5dfa8ba35468f721f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05d8767289351a6111c77a5dfa8ba35468f721f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adcae006d250e40d7369d9bee3ecd05915acb22d", "url": "https://api.github.com/repos/rust-lang/rust/commits/adcae006d250e40d7369d9bee3ecd05915acb22d", "html_url": "https://github.com/rust-lang/rust/commit/adcae006d250e40d7369d9bee3ecd05915acb22d"}, {"sha": "ed472c8e0dc0e26e48fd875e2cf08042546c2706", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed472c8e0dc0e26e48fd875e2cf08042546c2706", "html_url": "https://github.com/rust-lang/rust/commit/ed472c8e0dc0e26e48fd875e2cf08042546c2706"}], "stats": {"total": 198, "additions": 109, "deletions": 89}, "files": [{"sha": "5b62f29b8242323df0ac7e07c43ad7631925b745", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -344,7 +344,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n         check_lines,\n         breakpoint_lines\n     } = parse_debugger_commands(testfile, \"gdb\");\n-    let mut cmds = commands.connect(\"\\n\");\n+    let mut cmds = commands.join(\"\\n\");\n \n     // compile test file (it should have 'compile-flags:-g' in the header)\n     let compiler_run_result = compile_test(config, props, testfile);\n@@ -799,7 +799,7 @@ fn cleanup_debug_info_options(options: &Option<String>) -> Option<String> {\n         split_maybe_args(options).into_iter()\n                                  .filter(|x| !options_to_remove.contains(x))\n                                  .collect::<Vec<String>>()\n-                                 .connect(\" \");\n+                                 .join(\" \");\n     Some(new_options)\n }\n \n@@ -1412,15 +1412,15 @@ fn make_cmdline(libpath: &str, prog: &str, args: &[String]) -> String {\n \n     // Linux and mac don't require adjusting the library search path\n     if cfg!(unix) {\n-        format!(\"{} {}\", prog, args.connect(\" \"))\n+        format!(\"{} {}\", prog, args.join(\" \"))\n     } else {\n         // Build the LD_LIBRARY_PATH variable as it would be seen on the command line\n         // for diagnostic purposes\n         fn lib_path_cmd_prefix(path: &str) -> String {\n             format!(\"{}=\\\"{}\\\"\", util::lib_path_env_var(), util::make_new_path(path))\n         }\n \n-        format!(\"{} {} {}\", lib_path_cmd_prefix(libpath), prog, args.connect(\" \"))\n+        format!(\"{} {} {}\", lib_path_cmd_prefix(libpath), prog, args.join(\" \"))\n     }\n }\n "}, {"sha": "f5a27565ef7dec67a8ddb7a1e750478470d96122", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -1056,6 +1056,17 @@ pub trait SliceConcatExt<T: ?Sized> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn concat(&self) -> Self::Output;\n \n+    /// Flattens a slice of `T` into a single value `Self::Output`, placing a\n+    /// given separator between each.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!([\"hello\", \"world\"].join(\" \"), \"hello world\");\n+    /// ```\n+    #[stable(feature = \"rename_connect_to_join\", since = \"1.3.0\")]\n+    fn join(&self, sep: &T) -> Self::Output;\n+\n     /// Flattens a slice of `T` into a single value `Self::Output`, placing a\n     /// given separator between each.\n     ///\n@@ -1065,6 +1076,7 @@ pub trait SliceConcatExt<T: ?Sized> {\n     /// assert_eq!([\"hello\", \"world\"].connect(\" \"), \"hello world\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[deprecated(since = \"1.3.0\", reason = \"renamed to join\")]\n     fn connect(&self, sep: &T) -> Self::Output;\n }\n \n@@ -1080,7 +1092,7 @@ impl<T: Clone, V: Borrow<[T]>> SliceConcatExt<T> for [V] {\n         result\n     }\n \n-    fn connect(&self, sep: &T) -> Vec<T> {\n+    fn join(&self, sep: &T) -> Vec<T> {\n         let size = self.iter().fold(0, |acc, v| acc + v.borrow().len());\n         let mut result = Vec::with_capacity(size + self.len());\n         let mut first = true;\n@@ -1090,6 +1102,10 @@ impl<T: Clone, V: Borrow<[T]>> SliceConcatExt<T> for [V] {\n         }\n         result\n     }\n+\n+    fn connect(&self, sep: &T) -> Vec<T> {\n+        self.join(sep)\n+    }\n }\n \n /// An iterator that yields the element swaps needed to produce"}, {"sha": "f92db5353b39ebb997d8799f726c70983d2d7855", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -103,7 +103,7 @@ impl<S: Borrow<str>> SliceConcatExt<str> for [S] {\n         result\n     }\n \n-    fn connect(&self, sep: &str) -> String {\n+    fn join(&self, sep: &str) -> String {\n         if self.is_empty() {\n             return String::new();\n         }\n@@ -130,6 +130,10 @@ impl<S: Borrow<str>> SliceConcatExt<str> for [S] {\n         }\n         result\n     }\n+\n+    fn connect(&self, sep: &str) -> String {\n+        self.join(sep)\n+    }\n }\n \n // Helper functions used for Unicode normalization"}, {"sha": "c0ab11380d9f6228d24c480599ddd7621280f261", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -583,22 +583,22 @@ fn test_concat() {\n     assert_eq!(d, [1, 2, 3]);\n \n     let v: &[&[_]] = &[&[1], &[2, 3]];\n-    assert_eq!(v.connect(&0), [1, 0, 2, 3]);\n+    assert_eq!(v.join(&0), [1, 0, 2, 3]);\n     let v: &[&[_]] = &[&[1], &[2], &[3]];\n-    assert_eq!(v.connect(&0), [1, 0, 2, 0, 3]);\n+    assert_eq!(v.join(&0), [1, 0, 2, 0, 3]);\n }\n \n #[test]\n-fn test_connect() {\n+fn test_join() {\n     let v: [Vec<i32>; 0] = [];\n-    assert_eq!(v.connect(&0), []);\n-    assert_eq!([vec![1], vec![2, 3]].connect(&0), [1, 0, 2, 3]);\n-    assert_eq!([vec![1], vec![2], vec![3]].connect(&0), [1, 0, 2, 0, 3]);\n+    assert_eq!(v.join(&0), []);\n+    assert_eq!([vec![1], vec![2, 3]].join(&0), [1, 0, 2, 3]);\n+    assert_eq!([vec![1], vec![2], vec![3]].join(&0), [1, 0, 2, 0, 3]);\n \n     let v: [&[_]; 2] = [&[1], &[2, 3]];\n-    assert_eq!(v.connect(&0), [1, 0, 2, 3]);\n+    assert_eq!(v.join(&0), [1, 0, 2, 3]);\n     let v: [&[_]; 3] = [&[1], &[2], &[3]];\n-    assert_eq!(v.connect(&0), [1, 0, 2, 0, 3]);\n+    assert_eq!(v.join(&0), [1, 0, 2, 0, 3]);\n }\n \n #[test]\n@@ -1316,11 +1316,11 @@ mod bench {\n     }\n \n     #[bench]\n-    fn connect(b: &mut Bencher) {\n+    fn join(b: &mut Bencher) {\n         let xss: Vec<Vec<i32>> =\n             (0..100).map(|i| (0..i).collect()).collect();\n         b.iter(|| {\n-            xss.connect(&0)\n+            xss.join(&0)\n         });\n     }\n "}, {"sha": "1c038c29fdfae1b413d4e063c0af21d13a92b4cb", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -158,32 +158,32 @@ fn test_concat_for_different_lengths() {\n     test_concat!(\"abc\", [\"\", \"a\", \"bc\"]);\n }\n \n-macro_rules! test_connect {\n+macro_rules! test_join {\n     ($expected: expr, $string: expr, $delim: expr) => {\n         {\n-            let s = $string.connect($delim);\n+            let s = $string.join($delim);\n             assert_eq!($expected, s);\n         }\n     }\n }\n \n #[test]\n-fn test_connect_for_different_types() {\n-    test_connect!(\"a-b\", [\"a\", \"b\"], \"-\");\n+fn test_join_for_different_types() {\n+    test_join!(\"a-b\", [\"a\", \"b\"], \"-\");\n     let hyphen = \"-\".to_string();\n-    test_connect!(\"a-b\", [s(\"a\"), s(\"b\")], &*hyphen);\n-    test_connect!(\"a-b\", vec![\"a\", \"b\"], &*hyphen);\n-    test_connect!(\"a-b\", &*vec![\"a\", \"b\"], \"-\");\n-    test_connect!(\"a-b\", vec![s(\"a\"), s(\"b\")], \"-\");\n+    test_join!(\"a-b\", [s(\"a\"), s(\"b\")], &*hyphen);\n+    test_join!(\"a-b\", vec![\"a\", \"b\"], &*hyphen);\n+    test_join!(\"a-b\", &*vec![\"a\", \"b\"], \"-\");\n+    test_join!(\"a-b\", vec![s(\"a\"), s(\"b\")], \"-\");\n }\n \n #[test]\n-fn test_connect_for_different_lengths() {\n+fn test_join_for_different_lengths() {\n     let empty: &[&str] = &[];\n-    test_connect!(\"\", empty, \"-\");\n-    test_connect!(\"a\", [\"a\"], \"-\");\n-    test_connect!(\"a-b\", [\"a\", \"b\"], \"-\");\n-    test_connect!(\"-a-bc\", [\"\", \"a\", \"bc\"], \"-\");\n+    test_join!(\"\", empty, \"-\");\n+    test_join!(\"a\", [\"a\"], \"-\");\n+    test_join!(\"a-b\", [\"a\", \"b\"], \"-\");\n+    test_join!(\"-a-bc\", [\"\", \"a\", \"bc\"], \"-\");\n }\n \n #[test]\n@@ -2089,12 +2089,12 @@ mod bench {\n     }\n \n     #[bench]\n-    fn bench_connect(b: &mut Bencher) {\n+    fn bench_join(b: &mut Bencher) {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n         let sep = \"\u2192\";\n         let v = vec![s, s, s, s, s, s, s, s, s, s];\n         b.iter(|| {\n-            assert_eq!(v.connect(sep).len(), s.len() * 10 + sep.len() * 9);\n+            assert_eq!(v.join(sep).len(), s.len() * 10 + sep.len() * 9);\n         })\n     }\n "}, {"sha": "8953375297db26e5309886d49e9b912a6f2fb9de", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -784,13 +784,13 @@ pub fn usage(brief: &str, opts: &[OptGroup]) -> String {\n \n         // FIXME: #5516 should be graphemes not codepoints\n         // wrapped description\n-        row.push_str(&desc_rows.connect(&desc_sep[..]));\n+        row.push_str(&desc_rows.join(&desc_sep[..]));\n \n         row\n     });\n \n     format!(\"{}\\n\\nOptions:\\n{}\\n\", brief,\n-            rows.collect::<Vec<String>>().connect(\"\\n\"))\n+            rows.collect::<Vec<String>>().join(\"\\n\"))\n }\n \n fn format_option(opt: &OptGroup) -> String {\n@@ -836,7 +836,7 @@ pub fn short_usage(program_name: &str, opts: &[OptGroup]) -> String {\n     line.push_str(&opts.iter()\n                        .map(format_option)\n                        .collect::<Vec<String>>()\n-                       .connect(\" \")[..]);\n+                       .join(\" \")[..]);\n     line\n }\n "}, {"sha": "987b6ad5b729622d6d4080900d3f81c1190ef057", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -2028,7 +2028,7 @@ fn encode_dylib_dependency_formats(rbml_w: &mut Encoder, ecx: &EncodeContext) {\n                     cstore::RequireStatic => \"s\",\n                 })).to_string())\n             }).collect::<Vec<String>>();\n-            rbml_w.wr_tagged_str(tag, &s.connect(\",\"));\n+            rbml_w.wr_tagged_str(tag, &s.join(\",\"));\n         }\n         None => {\n             rbml_w.wr_tagged_str(tag, \"\");"}, {"sha": "0495209f0d00d5ca7483523498ceb96ecf0b2a3b", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -1097,7 +1097,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n     pub fn tys_to_string(&self, ts: &[Ty<'tcx>]) -> String {\n         let tstrs: Vec<String> = ts.iter().map(|t| self.ty_to_string(*t)).collect();\n-        format!(\"({})\", tstrs.connect(\", \"))\n+        format!(\"({})\", tstrs.join(\", \"))\n     }\n \n     pub fn trait_ref_to_string(&self, t: &ty::TraitRef<'tcx>) -> String {"}, {"sha": "67301a09e52bf63a6e10225e3a25bf815f62c2b8", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -843,7 +843,7 @@ fn write_out_deps(sess: &Session,\n         let mut file = try!(fs::File::create(&deps_filename));\n         for path in &out_filenames {\n             try!(write!(&mut file,\n-                        \"{}: {}\\n\\n\", path.display(), files.connect(\" \")));\n+                        \"{}: {}\\n\\n\", path.display(), files.join(\" \")));\n         }\n         Ok(())\n     })();"}, {"sha": "2906fd35a0a1867bc6fe8d0070dc767919929aff", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -606,7 +606,7 @@ Available lint options:\n         for (name, to) in lints {\n             let name = name.to_lowercase().replace(\"_\", \"-\");\n             let desc = to.into_iter().map(|x| x.as_str().replace(\"_\", \"-\"))\n-                         .collect::<Vec<String>>().connect(\", \");\n+                         .collect::<Vec<String>>().join(\", \");\n             println!(\"    {}  {}\",\n                      padded(&name[..]), desc);\n         }"}, {"sha": "0e735cbb7ff8ebabea7d1761de84c44c3acad2f1", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -378,7 +378,7 @@ impl UserIdentifiedItem {\n     fn reconstructed_input(&self) -> String {\n         match *self {\n             ItemViaNode(node_id) => node_id.to_string(),\n-            ItemViaPath(ref parts) => parts.connect(\"::\"),\n+            ItemViaPath(ref parts) => parts.join(\"::\"),\n         }\n     }\n "}, {"sha": "a9efd13a998986a5a6e706769b01a3e3c1ce8057", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -178,7 +178,7 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n         return match search_mod(self, &self.infcx.tcx.map.krate().module, 0, names) {\n             Some(id) => id,\n             None => {\n-                panic!(\"no item found: `{}`\", names.connect(\"::\"));\n+                panic!(\"no item found: `{}`\", names.join(\"::\"));\n             }\n         };\n "}, {"sha": "1574080b313b595d3e5910db7f93e5b41eddbf88", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -923,7 +923,7 @@ impl NonSnakeCase {\n             }\n             words.push(buf);\n         }\n-        words.connect(\"_\")\n+        words.join(\"_\")\n     }\n \n     fn check_snake_case(&self, cx: &Context, sort: &str, name: &str, span: Option<Span>) {"}, {"sha": "3aa98ab031d1dcd8265df3c50639d66ca8d9ca25", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -936,7 +936,7 @@ fn compile_guard<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n            bcx.to_str(),\n            guard_expr,\n            m,\n-           vals.iter().map(|v| bcx.val_to_string(*v)).collect::<Vec<_>>().connect(\", \"));\n+           vals.iter().map(|v| bcx.val_to_string(*v)).collect::<Vec<_>>().join(\", \"));\n     let _indenter = indenter();\n \n     let mut bcx = insert_lllocals(bcx, &data.bindings_map, None);\n@@ -981,7 +981,7 @@ fn compile_submatch<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     debug!(\"compile_submatch(bcx={}, m={:?}, vals=[{}])\",\n            bcx.to_str(),\n            m,\n-           vals.iter().map(|v| bcx.val_to_string(*v)).collect::<Vec<_>>().connect(\", \"));\n+           vals.iter().map(|v| bcx.val_to_string(*v)).collect::<Vec<_>>().join(\", \"));\n     let _indenter = indenter();\n     let _icx = push_ctxt(\"match::compile_submatch\");\n     let mut bcx = bcx;"}, {"sha": "67e7aa5baf62b2595773b0a7f3719aaa92940542", "filename": "src/librustc_trans/trans/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fasm.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -92,7 +92,7 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n                                     .chain(arch_clobbers.iter()\n                                                .map(|s| s.to_string()))\n                                     .collect::<Vec<String>>()\n-                                    .connect(\",\");\n+                                    .join(\",\");\n \n     debug!(\"Asm Constraints: {}\", &all_constraints[..]);\n "}, {"sha": "7d6825040442334af737360939c6e5702219147c", "filename": "src/librustc_trans/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -148,7 +148,7 @@ pub fn Invoke(cx: Block,\n     terminate(cx, \"Invoke\");\n     debug!(\"Invoke({} with arguments ({}))\",\n            cx.val_to_string(fn_),\n-           args.iter().map(|a| cx.val_to_string(*a)).collect::<Vec<String>>().connect(\", \"));\n+           args.iter().map(|a| cx.val_to_string(*a)).collect::<Vec<String>>().join(\", \"));\n     debug_loc.apply(cx.fcx);\n     B(cx).invoke(fn_, args, then, catch, attributes)\n }"}, {"sha": "32d9ee7a508b19e5d5741c9645716bc2b3693829", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                args.iter()\n                    .map(|&v| self.ccx.tn().val_to_string(v))\n                    .collect::<Vec<String>>()\n-                   .connect(\", \"));\n+                   .join(\", \"));\n \n         unsafe {\n             let v = llvm::LLVMBuildInvoke(self.llbuilder,\n@@ -809,7 +809,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                args.iter()\n                    .map(|&v| self.ccx.tn().val_to_string(v))\n                    .collect::<Vec<String>>()\n-                   .connect(\", \"));\n+                   .join(\", \"));\n \n         unsafe {\n             let v = llvm::LLVMBuildCall(self.llbuilder, llfn, args.as_ptr(),"}, {"sha": "ed494d0765bb0a298b73a702a28c1e4360beb283", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -1445,7 +1445,7 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                 let discrfield = discrfield.iter()\n                                            .skip(1)\n                                            .map(|x| x.to_string())\n-                                           .collect::<Vec<_>>().connect(\"$\");\n+                                           .collect::<Vec<_>>().join(\"$\");\n                 let union_member_name = format!(\"RUST$ENCODED$ENUM${}${}\",\n                                                 discrfield,\n                                                 null_variant_name);"}, {"sha": "6b785e7edfd6a1568a38e2b589089f91e129b831", "filename": "src/librustc_trans/trans/llrepr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2Fllrepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2Fllrepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fllrepr.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -19,7 +19,7 @@ pub trait LlvmRepr {\n impl<T:LlvmRepr> LlvmRepr for [T] {\n     fn llrepr(&self, ccx: &CrateContext) -> String {\n         let reprs: Vec<String> = self.iter().map(|t| t.llrepr(ccx)).collect();\n-        format!(\"[{}]\", reprs.connect(\",\"))\n+        format!(\"[{}]\", reprs.join(\",\"))\n     }\n }\n "}, {"sha": "c88509dac4caa5ae80c621fc2487405a82ae6c18", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -322,7 +322,7 @@ impl TypeNames {\n \n     pub fn types_to_str(&self, tys: &[Type]) -> String {\n         let strs: Vec<String> = tys.iter().map(|t| self.type_to_string(*t)).collect();\n-        format!(\"[{}]\", strs.connect(\",\"))\n+        format!(\"[{}]\", strs.join(\",\"))\n     }\n \n     pub fn val_to_string(&self, val: ValueRef) -> String {"}, {"sha": "c5161a8bc2e7807f142c258929b4152e36a077a8", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -461,7 +461,7 @@ fn llvm_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let tstr = if strings.is_empty() {\n         base\n     } else {\n-        format!(\"{}<{}>\", base, strings.connect(\", \"))\n+        format!(\"{}<{}>\", base, strings.join(\", \"))\n     };\n \n     if did.krate == 0 {"}, {"sha": "f14886606c218462626b4c408eb84f67c2a17cf7", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -134,7 +134,7 @@ pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                      p.self_ty(),\n                                      p))\n                     .collect::<Vec<_>>()\n-                    .connect(\", \");\n+                    .join(\", \");\n                 cx.sess.fileline_note(\n                     span,\n                     &format!(\"the method `{}` exists but the \\"}, {"sha": "5a71d1ed0b5bd0fa8d0cb30aaa1b4be563882847", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -1002,7 +1002,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             \"not all trait items implemented, missing: `{}`\",\n             missing_items.iter()\n                   .map(<ast::Name>::as_str)\n-                  .collect::<Vec<_>>().connect(\"`, `\"))\n+                  .collect::<Vec<_>>().join(\"`, `\"))\n     }\n \n     if !invalidated_items.is_empty() {\n@@ -1013,7 +1013,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                   invalidator.ident.as_str(),\n                   invalidated_items.iter()\n                                    .map(<ast::Name>::as_str)\n-                                   .collect::<Vec<_>>().connect(\"`, `\"))\n+                                   .collect::<Vec<_>>().join(\"`, `\"))\n     }\n }\n \n@@ -2868,7 +2868,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                 span_err!(tcx.sess, span, E0063,\n                     \"missing field{}: {}\",\n                     if missing_fields.len() == 1 {\"\"} else {\"s\"},\n-                    missing_fields.connect(\", \"));\n+                    missing_fields.join(\", \"));\n              }\n         }\n "}, {"sha": "2b800bd9a441f738c3ecdbaf93a5d059b4eede9e", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -514,7 +514,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                                                 } else {\n                                                     name.to_string()\n                                                 }, a, b)\n-                                   }).collect::<Vec<_>>().connect(\", \"));\n+                                   }).collect::<Vec<_>>().join(\", \"));\n                         return;\n                     }\n "}, {"sha": "8949edb027e952c289d5567ca5e9e65eb4bd5d4f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -1536,7 +1536,7 @@ fn convert_typed_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                      d => format!(\"{:?}\", d),\n                                  })\n                                  .collect::<Vec<String>>()\n-                                 .connect(\",\");\n+                                 .join(\",\");\n \n         tcx.sess.span_err(it.span, &object_lifetime_default_reprs);\n     }"}, {"sha": "3cc24550297cee501245bb7b84b51dd6791d1a44", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -2536,12 +2536,12 @@ fn name_from_pat(p: &ast::Pat) -> String {\n             format!(\"{} {{ {}{} }}\", path_to_string(name),\n                 fields.iter().map(|&Spanned { node: ref fp, .. }|\n                                   format!(\"{}: {}\", fp.ident.as_str(), name_from_pat(&*fp.pat)))\n-                             .collect::<Vec<String>>().connect(\", \"),\n+                             .collect::<Vec<String>>().join(\", \"),\n                 if etc { \", ...\" } else { \"\" }\n             )\n         },\n         PatTup(ref elts) => format!(\"({})\", elts.iter().map(|p| name_from_pat(&**p))\n-                                            .collect::<Vec<String>>().connect(\", \")),\n+                                            .collect::<Vec<String>>().join(\", \")),\n         PatBox(ref p) => name_from_pat(&**p),\n         PatRegion(ref p, _) => name_from_pat(&**p),\n         PatLit(..) => {\n@@ -2555,7 +2555,7 @@ fn name_from_pat(p: &ast::Pat) -> String {\n             let begin = begin.iter().map(|p| name_from_pat(&**p));\n             let mid = mid.as_ref().map(|p| format!(\"..{}\", name_from_pat(&**p))).into_iter();\n             let end = end.iter().map(|p| name_from_pat(&**p));\n-            format!(\"[{}]\", begin.chain(mid).chain(end).collect::<Vec<_>>().connect(\", \"))\n+            format!(\"[{}]\", begin.chain(mid).chain(end).collect::<Vec<_>>().join(\", \"))\n         },\n         PatMac(..) => {\n             warn!(\"can't document the name of a function argument \\"}, {"sha": "fc06dc347b5ede49e6f6015975cfac90e84f4cb5", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -360,7 +360,7 @@ fn resolved_path(w: &mut fmt::Formatter, did: ast::DefId, path: &clean::Path,\n     match href(did) {\n         Some((url, shortty, fqp)) => {\n             try!(write!(w, \"<a class='{}' href='{}' title='{}'>{}</a>\",\n-                          shortty, url, fqp.connect(\"::\"), last.name));\n+                          shortty, url, fqp.join(\"::\"), last.name));\n         }\n         _ => try!(write!(w, \"{}\", last.name)),\n     }"}, {"sha": "4ec4ffb0c31af08e12381c945a82553dcf28ef60", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -199,7 +199,7 @@ fn stripped_filtered_line<'a>(s: &'a str) -> Option<&'a str> {\n fn collapse_whitespace(s: &str) -> String {\n     s.split(|c: char| c.is_whitespace()).filter(|s| {\n         !s.is_empty()\n-    }).collect::<Vec<_>>().connect(\" \")\n+    }).collect::<Vec<_>>().join(\" \")\n }\n \n thread_local!(static USED_HEADER_MAP: RefCell<HashMap<String, usize>> = {\n@@ -238,14 +238,14 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n             let lines = origtext.lines().filter(|l| {\n                 stripped_filtered_line(*l).is_none()\n             });\n-            let text = lines.collect::<Vec<&str>>().connect(\"\\n\");\n+            let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n             if rendered { return }\n             PLAYGROUND_KRATE.with(|krate| {\n                 let mut s = String::new();\n                 krate.borrow().as_ref().map(|krate| {\n                     let test = origtext.lines().map(|l| {\n                         stripped_filtered_line(l).unwrap_or(l)\n-                    }).collect::<Vec<&str>>().connect(\"\\n\");\n+                    }).collect::<Vec<&str>>().join(\"\\n\");\n                     let krate = krate.as_ref().map(|s| &**s);\n                     let test = test::maketest(&test, krate, false,\n                                               &Default::default());\n@@ -275,7 +275,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n \n         // Transform the contents of the header into a hyphenated string\n         let id = s.split_whitespace().map(|s| s.to_ascii_lowercase())\n-            .collect::<Vec<String>>().connect(\"-\");\n+            .collect::<Vec<String>>().join(\"-\");\n \n         // This is a terrible hack working around how hoedown gives us rendered\n         // html for text rather than the raw text.\n@@ -387,7 +387,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n             let lines = text.lines().map(|l| {\n                 stripped_filtered_line(l).unwrap_or(l)\n             });\n-            let text = lines.collect::<Vec<&str>>().connect(\"\\n\");\n+            let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n             tests.add_test(text.to_string(),\n                            block_info.should_panic, block_info.no_run,\n                            block_info.ignore, block_info.test_harness);"}, {"sha": "07e3ae975d66d0a313e556e046243fa13e6ff9bb", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -285,7 +285,7 @@ impl fmt::Display for IndexItemFunctionType {\n         let inputs: Vec<String> = self.inputs.iter().map(|ref t| {\n             format!(\"{}\", t)\n         }).collect();\n-        try!(write!(f, \"{{\\\"inputs\\\":[{}],\\\"output\\\":\", inputs.connect(\",\")));\n+        try!(write!(f, \"{{\\\"inputs\\\":[{}],\\\"output\\\":\", inputs.join(\",\")));\n \n         match self.output {\n             Some(ref t) => try!(write!(f, \"{}\", t)),\n@@ -461,7 +461,7 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> io::Result<String> {\n                     search_index.push(IndexItem {\n                         ty: shortty(item),\n                         name: item.name.clone().unwrap(),\n-                        path: fqp[..fqp.len() - 1].connect(\"::\"),\n+                        path: fqp[..fqp.len() - 1].join(\"::\"),\n                         desc: shorter(item.doc_value()),\n                         parent: Some(did),\n                         search_type: get_index_search_type(&item, parent_basename),\n@@ -957,7 +957,7 @@ impl DocFolder for Cache {\n                     self.search_index.push(IndexItem {\n                         ty: shortty(&item),\n                         name: s.to_string(),\n-                        path: path.connect(\"::\").to_string(),\n+                        path: path.join(\"::\").to_string(),\n                         desc: shorter(item.doc_value()),\n                         parent: parent,\n                         search_type: get_index_search_type(&item, parent_basename),\n@@ -1187,7 +1187,7 @@ impl Context {\n                 *slot.borrow_mut() = cx.current.clone();\n             });\n \n-            let mut title = cx.current.connect(\"::\");\n+            let mut title = cx.current.join(\"::\");\n             if pushname {\n                 if !title.is_empty() {\n                     title.push_str(\"::\");\n@@ -1393,7 +1393,7 @@ impl<'a> Item<'a> {\n             Some(format!(\"{root}src/{krate}/{path}.html#{href}\",\n                          root = self.cx.root_path,\n                          krate = self.cx.layout.krate,\n-                         path = path.connect(\"/\"),\n+                         path = path.join(\"/\"),\n                          href = href))\n \n         // If this item is not part of the local crate, then things get a little\n@@ -1417,7 +1417,7 @@ impl<'a> Item<'a> {\n             };\n             Some(format!(\"{root}{path}/{file}?gotosrc={goto}\",\n                          root = root,\n-                         path = path[..path.len() - 1].connect(\"/\"),\n+                         path = path[..path.len() - 1].join(\"/\"),\n                          file = item_path(self.item),\n                          goto = self.item.def_id.node))\n         }\n@@ -1523,7 +1523,7 @@ fn item_path(item: &clean::Item) -> String {\n }\n \n fn full_path(cx: &Context, item: &clean::Item) -> String {\n-    let mut s = cx.current.connect(\"::\");\n+    let mut s = cx.current.join(\"::\");\n     s.push_str(\"::\");\n     s.push_str(item.name.as_ref().unwrap());\n     return s\n@@ -1535,7 +1535,7 @@ fn shorter<'a>(s: Option<&'a str>) -> String {\n             (*line).chars().any(|chr|{\n                 !chr.is_whitespace()\n             })\n-        }).collect::<Vec<_>>().connect(\"\\n\"),\n+        }).collect::<Vec<_>>().join(\"\\n\"),\n         None => \"\".to_string()\n     }\n }\n@@ -1920,12 +1920,12 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     try!(write!(w, r#\"<script type=\"text/javascript\" async\n                               src=\"{root_path}/implementors/{path}/{ty}.{name}.js\">\n                       </script>\"#,\n-                root_path = vec![\"..\"; cx.current.len()].connect(\"/\"),\n+                root_path = vec![\"..\"; cx.current.len()].join(\"/\"),\n                 path = if ast_util::is_local(it.def_id) {\n-                    cx.current.connect(\"/\")\n+                    cx.current.join(\"/\")\n                 } else {\n                     let path = &cache.external_paths[&it.def_id];\n-                    path[..path.len() - 1].connect(\"/\")\n+                    path[..path.len() - 1].join(\"/\")\n                 },\n                 ty = shortty(it).to_static_str(),\n                 name = *it.name.as_ref().unwrap()));"}, {"sha": "0441950efb337fa7e96cdd716c488c9996653791", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -361,7 +361,7 @@ pub fn unindent(s: &str) -> String {\n                 line[min_indent..].to_string()\n             }\n         }).collect::<Vec<_>>());\n-        unindented.connect(\"\\n\")\n+        unindented.join(\"\\n\")\n     } else {\n         s.to_string()\n     }"}, {"sha": "3ce2922c4c97dba710f14775726bb9448e58d9a9", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -360,7 +360,7 @@ impl Collector {\n             let s = self.current_header.as_ref().map(|s| &**s).unwrap_or(\"\");\n             format!(\"{}_{}\", s, self.cnt)\n         } else {\n-            format!(\"{}_{}\", self.names.connect(\"::\"), self.cnt)\n+            format!(\"{}_{}\", self.names.join(\"::\"), self.cnt)\n         };\n         self.cnt += 1;\n         let libs = self.libs.clone();"}, {"sha": "3fe44d4809e5e03019dd7e4c9c3ef2506f33f9b0", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -442,7 +442,7 @@ impl fmt::Display for Ipv6Addr {\n                             .iter()\n                             .map(|&seg| format!(\"{:x}\", seg))\n                             .collect::<Vec<String>>()\n-                            .connect(\":\")\n+                            .join(\":\")\n                     }\n \n                     write!(fmt, \"{}::{}\","}, {"sha": "6b38762316cdc529cf4bc1bd05b2926a75c0e4d9", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -27,7 +27,7 @@ pub fn path_name_i(idents: &[Ident]) -> String {\n     // FIXME: Bad copies (#2543 -- same for everything else that says \"bad\")\n     idents.iter().map(|i| {\n         token::get_ident(*i).to_string()\n-    }).collect::<Vec<String>>().connect(\"::\")\n+    }).collect::<Vec<String>>().join(\"::\")\n }\n \n pub fn local_def(id: NodeId) -> DefId {"}, {"sha": "5418b1f43e4af75a535e51e011c831d03d0eb4ee", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -78,7 +78,7 @@ pub fn expand_mod(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                    .iter()\n                    .map(|x| token::get_ident(*x).to_string())\n                    .collect::<Vec<String>>()\n-                   .connect(\"::\");\n+                   .join(\"::\");\n     base::MacEager::expr(cx.expr_str(\n             sp,\n             token::intern_and_get_ident(&string[..])))"}, {"sha": "5b3887e76b494ce7ca6037ad5b6c09d9f2b7be14", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -465,7 +465,7 @@ pub fn parse(sess: &ParseSess,\n                                 token::get_ident(bind))).to_string()\n                       }\n                       _ => panic!()\n-                    } }).collect::<Vec<String>>().connect(\" or \");\n+                    } }).collect::<Vec<String>>().join(\" or \");\n                 return Error(sp, format!(\n                     \"local ambiguity: multiple parsing options: \\\n                      built-in NTs {} or {} other options.\","}, {"sha": "467345624c275107f8139e73d08dc0ad69326f26", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -139,7 +139,7 @@ pub fn strip_doc_comment_decoration(comment: &str) -> String {\n         let lines = vertical_trim(lines);\n         let lines = horizontal_trim(lines);\n \n-        return lines.connect(\"\\n\");\n+        return lines.join(\"\\n\");\n     }\n \n     panic!(\"not a doc-comment: {}\", comment);"}, {"sha": "d77b529a3bf0bc0e71419516dd54ea3131c52074", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -5215,7 +5215,7 @@ impl<'a> Parser<'a> {\n                             last_span,\n                             &format!(\"illegal ABI: expected one of [{}], \\\n                                      found `{}`\",\n-                                    abi::all_names().connect(\", \"),\n+                                    abi::all_names().join(\", \"),\n                                     the_string));\n                         Ok(None)\n                     }"}, {"sha": "22c12fdf3de2bbb77d8dd3db3eeed48cb54b946f", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -1079,7 +1079,7 @@ impl MetricMap {\n             .map(|(k,v)| format!(\"{}: {} (+/- {})\", *k,\n                                  v.value, v.noise))\n             .collect();\n-        v.connect(\", \")\n+        v.join(\", \")\n     }\n }\n "}, {"sha": "1920185d4e5a0cd018ae62a30bab3169887d8a1b", "filename": "src/test/auxiliary/plugin_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_args.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -36,7 +36,7 @@ impl TTMacroExpander for Expander {\n                    sp: Span,\n                    _: &[ast::TokenTree]) -> Box<MacResult+'cx> {\n         let args = self.args.iter().map(|i| pprust::meta_item_to_string(&*i))\n-            .collect::<Vec<_>>().connect(\", \");\n+            .collect::<Vec<_>>().join(\", \");\n         let interned = token::intern_and_get_ident(&args[..]);\n         MacEager::expr(ecx.expr_str(sp, interned))\n     }"}, {"sha": "ecee2fd0faaca04542198f0c8baa8f6bad57eda8", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -108,7 +108,7 @@ impl fmt::Display for AsciiArt {\n                               .collect::<Vec<String>>();\n \n         // Concatenate the lines together using a new-line.\n-        write!(f, \"{}\", lines.connect(\"\\n\"))\n+        write!(f, \"{}\", lines.join(\"\\n\"))\n     }\n }\n "}, {"sha": "f5af05d872bd43a9c648fc830511b720a19f2b73", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8767289351a6111c77a5dfa8ba35468f721f6/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=05d8767289351a6111c77a5dfa8ba35468f721f6", "patch": "@@ -24,7 +24,7 @@ impl<T:to_str> to_str for Vec<T> {\n                 self.iter()\n                     .map(|e| e.to_string_())\n                     .collect::<Vec<String>>()\n-                    .connect(\", \"))\n+                    .join(\", \"))\n     }\n }\n "}]}