{"sha": "70c6fb91938fb15c8814b47c402dc08b79108670", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYzZmYjkxOTM4ZmIxNWM4ODE0YjQ3YzQwMmRjMDhiNzkxMDg2NzA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-10T04:49:15Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-17T00:16:46Z"}, "message": "Change the unused parens lint to operate on the AST", "tree": {"sha": "bd60388dc556340233481d96cacd7ef8969387d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd60388dc556340233481d96cacd7ef8969387d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70c6fb91938fb15c8814b47c402dc08b79108670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70c6fb91938fb15c8814b47c402dc08b79108670", "html_url": "https://github.com/rust-lang/rust/commit/70c6fb91938fb15c8814b47c402dc08b79108670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70c6fb91938fb15c8814b47c402dc08b79108670/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76856e19ff3c7c699931d0acee8e61bc0dfec512", "url": "https://api.github.com/repos/rust-lang/rust/commits/76856e19ff3c7c699931d0acee8e61bc0dfec512", "html_url": "https://github.com/rust-lang/rust/commit/76856e19ff3c7c699931d0acee8e61bc0dfec512"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "ba0d41240e13bdd1147b7acf4613f060a73d3432", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/70c6fb91938fb15c8814b47c402dc08b79108670/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c6fb91938fb15c8814b47c402dc08b79108670/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=70c6fb91938fb15c8814b47c402dc08b79108670", "patch": "@@ -38,7 +38,7 @@ use middle::const_eval::{eval_const_expr_partial, ConstVal};\n use middle::const_eval::EvalHint::ExprTypeChecked;\n use rustc::front::map as hir_map;\n use util::nodemap::{FnvHashMap, FnvHashSet, NodeSet};\n-use lint::{Level, LateContext, LintContext, LintPass, LintArray, Lint};\n+use lint::{Level, LateContext, EarlyContext, LintContext, LintPass, LintArray, Lint};\n \n use std::collections::HashSet;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n@@ -1390,9 +1390,9 @@ declare_lint! {\n pub struct UnusedParens;\n \n impl UnusedParens {\n-    fn check_unused_parens_core(&self, cx: &LateContext, value: &hir::Expr, msg: &str,\n+    fn check_unused_parens_core(&self, cx: &EarlyContext, value: &ast::Expr, msg: &str,\n                                 struct_lit_needs_parens: bool) {\n-        if let hir::ExprParen(ref inner) = value.node {\n+        if let ast::ExprParen(ref inner) = value.node {\n             let necessary = struct_lit_needs_parens && contains_exterior_struct_lit(&**inner);\n             if !necessary {\n                 cx.span_lint(UNUSED_PARENS, value.span,\n@@ -1405,27 +1405,27 @@ impl UnusedParens {\n         /// delimiters, e.g. `X { y: 1 }`, `X { y: 1 }.method()`, `foo\n         /// == X { y: 1 }` and `X { y: 1 } == foo` all do, but `(X {\n         /// y: 1 }) == foo` does not.\n-        fn contains_exterior_struct_lit(value: &hir::Expr) -> bool {\n+        fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {\n             match value.node {\n-                hir::ExprStruct(..) => true,\n+                ast::ExprStruct(..) => true,\n \n-                hir::ExprAssign(ref lhs, ref rhs) |\n-                hir::ExprAssignOp(_, ref lhs, ref rhs) |\n-                hir::ExprBinary(_, ref lhs, ref rhs) => {\n+                ast::ExprAssign(ref lhs, ref rhs) |\n+                ast::ExprAssignOp(_, ref lhs, ref rhs) |\n+                ast::ExprBinary(_, ref lhs, ref rhs) => {\n                     // X { y: 1 } + X { y: 2 }\n                     contains_exterior_struct_lit(&**lhs) ||\n                         contains_exterior_struct_lit(&**rhs)\n                 }\n-                hir::ExprUnary(_, ref x) |\n-                hir::ExprCast(ref x, _) |\n-                hir::ExprField(ref x, _) |\n-                hir::ExprTupField(ref x, _) |\n-                hir::ExprIndex(ref x, _) => {\n+                ast::ExprUnary(_, ref x) |\n+                ast::ExprCast(ref x, _) |\n+                ast::ExprField(ref x, _) |\n+                ast::ExprTupField(ref x, _) |\n+                ast::ExprIndex(ref x, _) => {\n                     // &X { y: 1 }, X { y: 1 }.y\n                     contains_exterior_struct_lit(&**x)\n                 }\n \n-                hir::ExprMethodCall(_, _, ref exprs) => {\n+                ast::ExprMethodCall(_, _, ref exprs) => {\n                     // X { y: 1 }.bar(...)\n                     contains_exterior_struct_lit(&*exprs[0])\n                 }\n@@ -1441,28 +1441,28 @@ impl LintPass for UnusedParens {\n         lint_array!(UNUSED_PARENS)\n     }\n \n-    fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n+    fn check_ast_expr(&mut self, cx: &EarlyContext, e: &ast::Expr) {\n         let (value, msg, struct_lit_needs_parens) = match e.node {\n-            hir::ExprIf(ref cond, _, _) => (cond, \"`if` condition\", true),\n-            hir::ExprWhile(ref cond, _, _) => (cond, \"`while` condition\", true),\n-            hir::ExprMatch(ref head, _, source) => match source {\n-                hir::MatchSource::Normal => (head, \"`match` head expression\", true),\n-                hir::MatchSource::IfLetDesugar { .. } => (head, \"`if let` head expression\", true),\n-                hir::MatchSource::WhileLetDesugar => (head, \"`while let` head expression\", true),\n-                hir::MatchSource::ForLoopDesugar => (head, \"`for` head expression\", true),\n+            ast::ExprIf(ref cond, _, _) => (cond, \"`if` condition\", true),\n+            ast::ExprWhile(ref cond, _, _) => (cond, \"`while` condition\", true),\n+            ast::ExprMatch(ref head, _, source) => match source {\n+                ast::MatchSource::Normal => (head, \"`match` head expression\", true),\n+                ast::MatchSource::IfLetDesugar { .. } => (head, \"`if let` head expression\", true),\n+                ast::MatchSource::WhileLetDesugar => (head, \"`while let` head expression\", true),\n+                ast::MatchSource::ForLoopDesugar => (head, \"`for` head expression\", true),\n             },\n-            hir::ExprRet(Some(ref value)) => (value, \"`return` value\", false),\n-            hir::ExprAssign(_, ref value) => (value, \"assigned value\", false),\n-            hir::ExprAssignOp(_, _, ref value) => (value, \"assigned value\", false),\n+            ast::ExprRet(Some(ref value)) => (value, \"`return` value\", false),\n+            ast::ExprAssign(_, ref value) => (value, \"assigned value\", false),\n+            ast::ExprAssignOp(_, _, ref value) => (value, \"assigned value\", false),\n             _ => return\n         };\n         self.check_unused_parens_core(cx, &**value, msg, struct_lit_needs_parens);\n     }\n \n-    fn check_stmt(&mut self, cx: &LateContext, s: &hir::Stmt) {\n+    fn check_ast_stmt(&mut self, cx: &EarlyContext, s: &ast::Stmt) {\n         let (value, msg) = match s.node {\n-            hir::StmtDecl(ref decl, _) => match decl.node {\n-                hir::DeclLocal(ref local) => match local.init {\n+            ast::StmtDecl(ref decl, _) => match decl.node {\n+                ast::DeclLocal(ref local) => match local.init {\n                     Some(ref value) => (value, \"assigned value\"),\n                     None => return\n                 },"}]}