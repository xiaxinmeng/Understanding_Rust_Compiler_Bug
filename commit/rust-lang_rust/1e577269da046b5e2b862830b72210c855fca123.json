{"sha": "1e577269da046b5e2b862830b72210c855fca123", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNTc3MjY5ZGEwNDZiNWUyYjg2MjgzMGI3MjIxMGM4NTVmY2ExMjM=", "commit": {"author": {"name": "Dale Wijnand", "email": "dale.wijnand@gmail.com", "date": "2019-01-27T17:03:03Z"}, "committer": {"name": "Dale Wijnand", "email": "dale.wijnand@gmail.com", "date": "2019-01-28T22:24:26Z"}, "message": "Introduce into_raw_non_null on Rc and Arc", "tree": {"sha": "f659508672ab1035c91209835e9ded3a610a8cec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f659508672ab1035c91209835e9ded3a610a8cec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e577269da046b5e2b862830b72210c855fca123", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEERGS9JmrgEHKCFADQTyVuPRUd9e8FAlxPgRoACgkQTyVuPRUd\n9e9ANg/+I3ERcnGuMGoWAXm0fiX5tJkR30/NeRHWQUXNXkamPmGN4mWZtbxwnaEb\n7Bwkz/tf9JCWSksdFoUhPgkJIJFnQSn+XfaqvTfcd/V+GPhGGGsRclE429EKrAqD\nGzS+Q+Zqta6/vcRHkaqs9ZXqBf6Y6Q+rJFPz5ZZtBINtR49/KC/bMu1C58+sU6FO\nafyqVwaIxTw7EgI3N8kYjByMhWdNNtvgpAuhwkd2tDeHv35C/kQrH+cteYY0/Kud\n96F9d+ullBwqd3kS0XQrema6xs4y1R7LRwbC9EzO0EWyRQY2/AOBipJaB+sOBaGc\nepQDwIbjhjWke5Afuw3XSNm/VBCSmIVRHCLGNS4pEYIcBF+NzmTSsLJ9GbpfGeIU\nhytSpFZ2gyQVLHI6m0MBBs+MyhfYye37VDsY9+MH1balMO3m9jxsW8KDdjdm4IyC\nFAQccEHoNk7JA0SnkTx9vXlQaU1NzjM5kUpYeaNVj8aRAHKkfZKrhvh+ZRmPF347\npMnfl9j78H+6VPQcO6ht6ogGEchE4692GTjuMWNiBZAcdbdBWTd51zoAlxkbKSWr\nDNP8gJUKh/vSoUS8oF1SxyYkGJktMSisO9eRrjhIYfhD2Jhr0jc69xismVNKJIE7\nRlCjPRnB9a1o4Ihc/AJh6aoEw76AKgmTTu1DKGtTP1uheUGOBW8=\n=e/yA\n-----END PGP SIGNATURE-----", "payload": "tree f659508672ab1035c91209835e9ded3a610a8cec\nparent 1484d0d123860dbd79804e9996f3fa5b6f4a6d58\nauthor Dale Wijnand <dale.wijnand@gmail.com> 1548608583 +0000\ncommitter Dale Wijnand <dale.wijnand@gmail.com> 1548714266 +0000\n\nIntroduce into_raw_non_null on Rc and Arc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e577269da046b5e2b862830b72210c855fca123", "html_url": "https://github.com/rust-lang/rust/commit/1e577269da046b5e2b862830b72210c855fca123", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e577269da046b5e2b862830b72210c855fca123/comments", "author": {"login": "dwijnand", "id": 344610, "node_id": "MDQ6VXNlcjM0NDYxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/344610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwijnand", "html_url": "https://github.com/dwijnand", "followers_url": "https://api.github.com/users/dwijnand/followers", "following_url": "https://api.github.com/users/dwijnand/following{/other_user}", "gists_url": "https://api.github.com/users/dwijnand/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwijnand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwijnand/subscriptions", "organizations_url": "https://api.github.com/users/dwijnand/orgs", "repos_url": "https://api.github.com/users/dwijnand/repos", "events_url": "https://api.github.com/users/dwijnand/events{/privacy}", "received_events_url": "https://api.github.com/users/dwijnand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dwijnand", "id": 344610, "node_id": "MDQ6VXNlcjM0NDYxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/344610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwijnand", "html_url": "https://github.com/dwijnand", "followers_url": "https://api.github.com/users/dwijnand/followers", "following_url": "https://api.github.com/users/dwijnand/following{/other_user}", "gists_url": "https://api.github.com/users/dwijnand/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwijnand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwijnand/subscriptions", "organizations_url": "https://api.github.com/users/dwijnand/orgs", "repos_url": "https://api.github.com/users/dwijnand/repos", "events_url": "https://api.github.com/users/dwijnand/events{/privacy}", "received_events_url": "https://api.github.com/users/dwijnand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1484d0d123860dbd79804e9996f3fa5b6f4a6d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/1484d0d123860dbd79804e9996f3fa5b6f4a6d58", "html_url": "https://github.com/rust-lang/rust/commit/1484d0d123860dbd79804e9996f3fa5b6f4a6d58"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "456f7cd5e2ff10a60ecce4778af3196cb1d2efe4", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1e577269da046b5e2b862830b72210c855fca123/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e577269da046b5e2b862830b72210c855fca123/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=1e577269da046b5e2b862830b72210c855fca123", "patch": "@@ -435,6 +435,27 @@ impl<T: ?Sized> Rc<T> {\n         }\n     }\n \n+    /// Consumes the `Rc`, returning the wrapped pointer as `NonNull<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(rc_into_raw_non_null)]\n+    ///\n+    /// use std::rc::Rc;\n+    ///\n+    /// let x = Rc::new(10);\n+    /// let ptr = Rc::into_raw_non_null(x);\n+    /// let deref = unsafe { *ptr.as_ref() };\n+    /// assert_eq!(deref, 10);\n+    /// ```\n+    #[unstable(feature = \"rc_into_raw_non_null\", issue = \"47336\")]\n+    #[inline]\n+    pub fn into_raw_non_null(this: Self) -> NonNull<T> {\n+        // safe because Rc guarantees its pointer is non-null\n+        unsafe { NonNull::new_unchecked(Rc::into_raw(this) as *mut _) }\n+    }\n+\n     /// Creates a new [`Weak`][weak] pointer to this value.\n     ///\n     /// [weak]: struct.Weak.html"}, {"sha": "5cffa93db11d4780f4c9edfc4b0643a527f82ed5", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1e577269da046b5e2b862830b72210c855fca123/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e577269da046b5e2b862830b72210c855fca123/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=1e577269da046b5e2b862830b72210c855fca123", "patch": "@@ -413,6 +413,27 @@ impl<T: ?Sized> Arc<T> {\n         }\n     }\n \n+    /// Consumes the `Arc`, returning the wrapped pointer as `NonNull<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(rc_into_raw_non_null)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let x = Arc::new(10);\n+    /// let ptr = Arc::into_raw_non_null(x);\n+    /// let deref = unsafe { *ptr.as_ref() };\n+    /// assert_eq!(deref, 10);\n+    /// ```\n+    #[unstable(feature = \"rc_into_raw_non_null\", issue = \"47336\")]\n+    #[inline]\n+    pub fn into_raw_non_null(this: Self) -> NonNull<T> {\n+        // safe because Arc guarantees its pointer is non-null\n+        unsafe { NonNull::new_unchecked(Arc::into_raw(this) as *mut _) }\n+    }\n+\n     /// Creates a new [`Weak`][weak] pointer to this value.\n     ///\n     /// [weak]: struct.Weak.html"}]}