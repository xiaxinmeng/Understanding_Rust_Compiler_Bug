{"sha": "23cb72b4599f61fbeab4d8f0af8937e76a3cb364", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzY2I3MmI0NTk5ZjYxZmJlYWI0ZDhmMGFmODkzN2U3NmEzY2IzNjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T03:16:23Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T03:16:23Z"}, "message": "Clarify format! implicit positional references\n\nIt was a little ambiguous before how explicitl positional parameters and\nimplicit positional parameters intermingled, and this clarifies how the two\nintermingle. This also updates a little bit of documentation/code examples\nelsewhere as well.", "tree": {"sha": "2ba27c119ed4d058eab5cfaa69d5b5e190dc964a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ba27c119ed4d058eab5cfaa69d5b5e190dc964a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23cb72b4599f61fbeab4d8f0af8937e76a3cb364", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23cb72b4599f61fbeab4d8f0af8937e76a3cb364", "html_url": "https://github.com/rust-lang/rust/commit/23cb72b4599f61fbeab4d8f0af8937e76a3cb364", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23cb72b4599f61fbeab4d8f0af8937e76a3cb364/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8174618a05c44a9b90806aa7b848cb9b7ab62d25", "url": "https://api.github.com/repos/rust-lang/rust/commits/8174618a05c44a9b90806aa7b848cb9b7ab62d25", "html_url": "https://github.com/rust-lang/rust/commit/8174618a05c44a9b90806aa7b848cb9b7ab62d25"}], "stats": {"total": 61, "additions": 42, "deletions": 19}, "files": [{"sha": "ba3a3bb4cc863d93fdff254357171835baa34ab9", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/23cb72b4599f61fbeab4d8f0af8937e76a3cb364/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cb72b4599f61fbeab4d8f0af8937e76a3cb364/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=23cb72b4599f61fbeab4d8f0af8937e76a3cb364", "patch": "@@ -40,7 +40,7 @@ format!(\"The number is {:d}\", 1)  // => ~\"The number is 1\"\n format!(\"{:?}\", ~[3, 4])          // => ~\"~[3, 4]\"\n format!(\"{value}\", value=4)       // => ~\"4\"\n format!(\"{} {}\", 1, 2)            // => ~\"1 2\"\n- ```\n+```\n \n From these, you can see that the first argument is a format string. It is\n required by the compiler for this to be a string literal; it cannot be a\n@@ -56,6 +56,21 @@ example, the format string `{} {} {}` would take three parameters, and they\n would be formatted in the same order as they're given. The format string\n `{2} {1} {0}`, however, would format arguments in reverse order.\n \n+Things can get a little tricky once you start intermingling the two types of\n+positional specifiers. The \"next argument\" specifier can be thought of as an\n+iterator over the argument. Each time a \"next argument\" specifier is seen, the\n+iterator advances. This leads to behavior like this:\n+\n+```rust\n+format!(\"{1} {} {0} {}\", 1, 2) // => ~\"2 1 1 2\"\n+```\n+\n+The internal iterator over the argument has not been advanced by the time the\n+first `{}` is seen, so it prints the first argument. Then upon reaching the\n+second `{}`, the iterator has advanced forward to the second argument.\n+Essentially, parameters which explicitly name their argument do not affect\n+parameters which do not name an argument in terms of positional specifiers.\n+\n A format string is required to use all of its arguments, otherwise it is a\n compile-time error. You may refer to the same argument more than once in the\n format string, although it must always be referred to with the same type.\n@@ -67,9 +82,17 @@ function, but the `format!` macro is a syntax extension which allows it to\n leverage named parameters. Named parameters are listed at the end of the\n argument list and have the syntax:\n \n- ```\n+```\n identifier '=' expression\n- ```\n+```\n+\n+For example, the following `format!` expressions all use named argument:\n+\n+```rust\n+format!(\"{argument}\", argument = \"test\")       // => ~\"test\"\n+format!(\"{name} {}\", 1, name = 2)              // => ~\"2 1\"\n+format!(\"{a:s} {c:d} {b:?}\", a=\"a\", b=(), c=3) // => ~\"a 3 ()\"\n+```\n \n It is illegal to put positional parameters (those without names) after arguments\n which have names. Like positional parameters, it is illegal to provided named\n@@ -84,9 +107,9 @@ and if all references to one argument do not provide a type, then the format `?`\n is used (the type's rust-representation is printed). For example, this is an\n invalid format string:\n \n- ```\n+```\n {0:d} {0:s}\n- ```\n+```\n \n Because the first argument is both referred to as an integer as well as a\n string.\n@@ -100,9 +123,9 @@ must have the type `uint`. Although a `uint` can be printed with `{:u}`, it is\n illegal to reference an argument as such. For example, this is another invalid\n format string:\n \n- ```\n+```\n {:.*s} {0:u}\n- ```\n+```\n \n ### Formatting traits\n \n@@ -136,7 +159,7 @@ method of the signature:\n \n ```rust\n fn fmt(value: &T, f: &mut std::fmt::Formatter);\n- ```\n+```\n \n Your type will be passed by-reference in `value`, and then the function should\n emit output into the `f.buf` stream. It is up to each format trait\n@@ -157,7 +180,7 @@ writeln!     // same as write but appends a newline\n print!       // the format string is printed to the standard output\n println!     // same as print but appends a newline\n format_args! // described below.\n- ```\n+```\n \n \n #### `write!`\n@@ -172,7 +195,7 @@ use std::rt::io;\n \n let mut w = io::mem::MemWriter::new();\n write!(&mut w as &mut io::Writer, \"Hello {}!\", \"world\");\n- ```\n+```\n \n #### `print!`\n \n@@ -183,7 +206,7 @@ output. Example usage is:\n ```rust\n print!(\"Hello {}!\", \"world\");\n println!(\"I have a newline {}\", \"character at the end\");\n- ```\n+```\n \n #### `format_args!`\n This is a curious macro which is used to safely pass around\n@@ -199,7 +222,7 @@ use std::fmt;\n format_args!(fmt::format, \"this returns {}\", \"~str\");\n format_args!(|args| { fmt::write(my_writer, args) }, \"some {}\", \"args\");\n format_args!(my_fn, \"format {}\", \"string\");\n- ```\n+```\n \n The first argument of the `format_args!` macro is a function (or closure) which\n takes one argument of type `&fmt::Arguments`. This structure can then be\n@@ -238,7 +261,7 @@ example:\n \n ```rust\n format!(\"{0, select, other{#}}\", \"hello\") // => ~\"hello\"\n- ```\n+```\n \n This example is the equivalent of `{0:s}` essentially.\n \n@@ -247,9 +270,9 @@ This example is the equivalent of `{0:s}` essentially.\n The select method is a switch over a `&str` parameter, and the parameter *must*\n be of the type `&str`. An example of the syntax is:\n \n- ```\n+```\n {0, select, male{...} female{...} other{...}}\n- ```\n+```\n \n Breaking this down, the `0`-th argument is selected upon with the `select`\n method, and then a number of cases follow. Each case is preceded by an\n@@ -266,9 +289,9 @@ The plural method is a switch statement over a `uint` parameter, and the\n parameter *must* be a `uint`. A plural method in its full glory can be specified\n as:\n \n- ```\n+```\n {0, plural, offset=1 =1{...} two{...} many{...} other{...}}\n- ```\n+```\n \n To break this down, the first `0` indicates that this method is selecting over\n the value of the first positional parameter to the format string. Next, the\n@@ -294,7 +317,7 @@ should not be too alien. Arguments are formatted with python-like syntax,\n meaning that arguments are surrounded by `{}` instead of the C-like `%`. The\n actual grammar for the formatting syntax is:\n \n- ```\n+```\n format_string := <text> [ format <text> ] *\n format := '{' [ argument ] [ ':' format_spec ] [ ',' function_spec ] '}'\n argument := integer | identifier\n@@ -315,7 +338,7 @@ plural := 'plural' ',' [ 'offset:' integer ] ( selector arm ) *\n selector := '=' integer | keyword\n keyword := 'zero' | 'one' | 'two' | 'few' | 'many' | 'other'\n arm := '{' format_string '}'\n- ```\n+```\n \n ## Formatting Parameters\n "}]}