{"sha": "dfdfaa1f0442dac516ba87d274d832c00464b3c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZGZhYTFmMDQ0MmRhYzUxNmJhODdkMjc0ZDgzMmMwMDQ2NGIzYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-07T03:13:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-07T03:13:21Z"}, "message": "Auto merge of #80200 - mahkoh:dst-offset, r=nagisa\n\nOptimize DST field access\n\nFor\n\n    struct X<T: ?Sized>(T)\n    struct Y<T: ?Sized>(u8, T)\n\nthe offset of the unsized field is\n\n    0\n    mem::align_of_val(&self.1)\n\nrespectively. This patch changes the expression used to compute these\noffsets so that the optimizer can perform this optimization.\n\nConsider\n\n```rust\nfn f(x: &X<dyn Any>) -> &dyn Any {\n    &x.0\n}\n```\n\nBefore:\n\n```asm\ntest:\n\tmovq\t%rsi, %rdx\n\tmovq\t16(%rsi), %rax\n\tleaq\t-1(%rax), %rcx\n\tnegq\t%rax\n\tandq\t%rcx, %rax\n\taddq\t%rdi, %rax\n\tretq\n```\n\nAfter:\n\n```asm\ntest:\n\tmovq\t%rsi, %rdx\n\tmovq\t%rdi, %rax\n\tretq\n```", "tree": {"sha": "8ecdbe8bcb15082946680c8d6083ba395f38889c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ecdbe8bcb15082946680c8d6083ba395f38889c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfdfaa1f0442dac516ba87d274d832c00464b3c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfdfaa1f0442dac516ba87d274d832c00464b3c2", "html_url": "https://github.com/rust-lang/rust/commit/dfdfaa1f0442dac516ba87d274d832c00464b3c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfdfaa1f0442dac516ba87d274d832c00464b3c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b3d52414e0d7786b8c79479938b2543521719be", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3d52414e0d7786b8c79479938b2543521719be", "html_url": "https://github.com/rust-lang/rust/commit/5b3d52414e0d7786b8c79479938b2543521719be"}, {"sha": "be1511408edbae0deb9b6aceed7cf22aa5ca8e76", "url": "https://api.github.com/repos/rust-lang/rust/commits/be1511408edbae0deb9b6aceed7cf22aa5ca8e76", "html_url": "https://github.com/rust-lang/rust/commit/be1511408edbae0deb9b6aceed7cf22aa5ca8e76"}], "stats": {"total": 54, "additions": 44, "deletions": 10}, "files": [{"sha": "958e4ebd078b6d2c333607e2b99da5d84d6bb061", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/dfdfaa1f0442dac516ba87d274d832c00464b3c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdfaa1f0442dac516ba87d274d832c00464b3c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=dfdfaa1f0442dac516ba87d274d832c00464b3c2", "patch": "@@ -178,16 +178,8 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         // Get the alignment of the field\n         let (_, unsized_align) = glue::size_and_align_of_dst(bx, field.ty, meta);\n \n-        // Bump the unaligned offset up to the appropriate alignment using the\n-        // following expression:\n-        //\n-        //     (unaligned offset + (align - 1)) & -align\n-\n-        // Calculate offset.\n-        let align_sub_1 = bx.sub(unsized_align, bx.cx().const_usize(1u64));\n-        let and_lhs = bx.add(unaligned_offset, align_sub_1);\n-        let and_rhs = bx.neg(unsized_align);\n-        let offset = bx.and(and_lhs, and_rhs);\n+        // Bump the unaligned offset up to the appropriate alignment\n+        let offset = round_up_const_value_to_alignment(bx, unaligned_offset, unsized_align);\n \n         debug!(\"struct_field_ptr: DST field offset: {:?}\", offset);\n \n@@ -518,3 +510,45 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         self.monomorphize(place_ty.ty)\n     }\n }\n+\n+fn round_up_const_value_to_alignment<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n+    bx: &mut Bx,\n+    value: Bx::Value,\n+    align: Bx::Value,\n+) -> Bx::Value {\n+    // In pseudo code:\n+    //\n+    //     if value & (align - 1) == 0 {\n+    //         value\n+    //     } else {\n+    //         (value & !(align - 1)) + align\n+    //     }\n+    //\n+    // Usually this is written without branches as\n+    //\n+    //     (value + align - 1) & !(align - 1)\n+    //\n+    // But this formula cannot take advantage of constant `value`. E.g. if `value` is known\n+    // at compile time to be `1`, this expression should be optimized to `align`. However,\n+    // optimization only holds if `align` is a power of two. Since the optimizer doesn't know\n+    // that `align` is a power of two, it cannot perform this optimization.\n+    //\n+    // Instead we use\n+    //\n+    //     value + (-value & (align - 1))\n+    //\n+    // Since `align` is used only once, the expression can be optimized. For `value = 0`\n+    // its optimized to `0` even in debug mode.\n+    //\n+    // NB: The previous version of this code used\n+    //\n+    //     (value + align - 1) & -align\n+    //\n+    // Even though `-align == !(align - 1)`, LLVM failed to optimize this even for\n+    // `value = 0`. Bug report: https://bugs.llvm.org/show_bug.cgi?id=48559\n+    let one = bx.const_usize(1);\n+    let align_minus_1 = bx.sub(align, one);\n+    let neg_value = bx.neg(value);\n+    let offset = bx.and(neg_value, align_minus_1);\n+    bx.add(value, offset)\n+}"}]}