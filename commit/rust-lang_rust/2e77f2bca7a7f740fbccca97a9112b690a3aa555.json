{"sha": "2e77f2bca7a7f740fbccca97a9112b690a3aa555", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNzdmMmJjYTdhN2Y3NDBmYmNjY2E5N2E5MTEyYjY5MGEzYWE1NTU=", "commit": {"author": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-04-24T18:28:14Z"}, "committer": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-04-24T19:01:09Z"}, "message": "Split apply with auto detection tests into separate fns", "tree": {"sha": "e9a3a938f552ac8896ffbc05432e9c5055ef3be2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9a3a938f552ac8896ffbc05432e9c5055ef3be2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e77f2bca7a7f740fbccca97a9112b690a3aa555", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEU0FXzFYkrmfOhhqxKTh7Wnqvhj8FAlzAsnUACgkQKTh7Wnqv\nhj+u3gf+PZJinaUkm0/ikv3onzBiMq6yFWbnA1MyKy/sGmV9SN18UV0xpDhhW8yt\njXNPun71Nmve6WxthNVLl74bjHmADpR/rHWkvGQOf/b+OjjN3MMrcIm/+wIhTEMX\nRFSo2tiB+g9x6qIuRdPdRTrrGeE6d1TWduL+Nm7Dc85O27SQelAe8NUB/O6vVbui\nX5y49ZLWwo9c7DSD19Mkg0cLm9LjdVz/go5E3pe7yfvEC9c+jRR5mFHfsVwsdXow\nWVqBkJk94gThTxBhdmDwqPkzp3FRe1Jkz+7HSmxthtR7/kuc+mZi0pdd+snqNHp1\n96nWKeQSdX9A/O7Vc9QaVKtre0pEZA==\n=4g17\n-----END PGP SIGNATURE-----", "payload": "tree e9a3a938f552ac8896ffbc05432e9c5055ef3be2\nparent 0f1d5760ba5ea2d2831002bbed50306a3d6ee535\nauthor Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1556130494 +0200\ncommitter Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1556132469 +0200\n\nSplit apply with auto detection tests into separate fns\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e77f2bca7a7f740fbccca97a9112b690a3aa555", "html_url": "https://github.com/rust-lang/rust/commit/2e77f2bca7a7f740fbccca97a9112b690a3aa555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e77f2bca7a7f740fbccca97a9112b690a3aa555/comments", "author": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f1d5760ba5ea2d2831002bbed50306a3d6ee535", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f1d5760ba5ea2d2831002bbed50306a3d6ee535", "html_url": "https://github.com/rust-lang/rust/commit/0f1d5760ba5ea2d2831002bbed50306a3d6ee535"}], "stats": {"total": 42, "additions": 19, "deletions": 23}, "files": [{"sha": "f5eb2e43d88ac1c29ddb2d92c3fcad0767f93cba", "filename": "src/formatting/newline_style.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2e77f2bca7a7f740fbccca97a9112b690a3aa555/src%2Fformatting%2Fnewline_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e77f2bca7a7f740fbccca97a9112b690a3aa555/src%2Fformatting%2Fnewline_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting%2Fnewline_style.rs?ref=2e77f2bca7a7f740fbccca97a9112b690a3aa555", "patch": "@@ -116,47 +116,43 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_newline_style_auto_apply() {\n-        let auto = NewlineStyle::Auto;\n-\n+    fn auto_detects_and_applies_unix_newlines() {\n         let formatted_text = \"One\\nTwo\\nThree\";\n         let raw_input_text = \"One\\nTwo\\nThree\";\n \n         let mut out = String::from(formatted_text);\n-        apply_newline_style(auto, &mut out, raw_input_text);\n+        apply_newline_style(NewlineStyle::Auto, &mut out, raw_input_text);\n         assert_eq!(\"One\\nTwo\\nThree\", &out, \"auto should detect 'lf'\");\n+    }\n \n+    #[test]\n+    fn auto_detects_and_applies_windows_newlines() {\n         let formatted_text = \"One\\nTwo\\nThree\";\n         let raw_input_text = \"One\\r\\nTwo\\r\\nThree\";\n \n         let mut out = String::from(formatted_text);\n-        apply_newline_style(auto, &mut out, raw_input_text);\n+        apply_newline_style(NewlineStyle::Auto, &mut out, raw_input_text);\n         assert_eq!(\"One\\r\\nTwo\\r\\nThree\", &out, \"auto should detect 'crlf'\");\n+    }\n \n-        #[cfg(not(windows))]\n-        {\n-            let formatted_text = \"One\\nTwo\\nThree\";\n-            let raw_input_text = \"One Two Three\";\n-\n-            let mut out = String::from(formatted_text);\n-            apply_newline_style(auto, &mut out, raw_input_text);\n-            assert_eq!(\n-                \"One\\nTwo\\nThree\", &out,\n-                \"auto-native-unix should detect 'lf'\"\n-            );\n-        }\n+    #[test]\n+    fn auto_detects_and_applies_native_newlines() {\n+        let formatted_text = \"One\\nTwo\\nThree\";\n+        let raw_input_text = \"One Two Three\";\n \n-        #[cfg(windows)]\n-        {\n-            let formatted_text = \"One\\nTwo\\nThree\";\n-            let raw_input_text = \"One Two Three\";\n+        let mut out = String::from(formatted_text);\n+        apply_newline_style(NewlineStyle::Auto, &mut out, raw_input_text);\n \n-            let mut out = String::from(formatted_text);\n-            apply_newline_style(auto, &mut out, raw_input_text);\n+        if cfg!(windows) {\n             assert_eq!(\n                 \"One\\r\\nTwo\\r\\nThree\", &out,\n                 \"auto-native-windows should detect 'crlf'\"\n             );\n+        } else {\n+            assert_eq!(\n+                \"One\\nTwo\\nThree\", &out,\n+                \"auto-native-unix should detect 'lf'\"\n+            );\n         }\n     }\n }"}]}