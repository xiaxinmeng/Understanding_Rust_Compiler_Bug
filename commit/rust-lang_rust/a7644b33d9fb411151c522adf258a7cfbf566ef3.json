{"sha": "a7644b33d9fb411151c522adf258a7cfbf566ef3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NjQ0YjMzZDlmYjQxMTE1MWM1MjJhZGYyNThhN2NmYmY1NjZlZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-17T00:31:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-17T00:31:20Z"}, "message": "Auto merge of #29297 - tbu-:pr_env_ignore_malformed, r=alexcrichton\n\nOtherwise, the iterator and the functions for getting specific\nenvironment variables might disagree, for environments like\n\n    FOOBAR", "tree": {"sha": "324054e2482288e494c8863195861a8026677d92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/324054e2482288e494c8863195861a8026677d92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7644b33d9fb411151c522adf258a7cfbf566ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7644b33d9fb411151c522adf258a7cfbf566ef3", "html_url": "https://github.com/rust-lang/rust/commit/a7644b33d9fb411151c522adf258a7cfbf566ef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7644b33d9fb411151c522adf258a7cfbf566ef3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f49ea0f4bfceee4d77663c09978b720358e763d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f49ea0f4bfceee4d77663c09978b720358e763d", "html_url": "https://github.com/rust-lang/rust/commit/9f49ea0f4bfceee4d77663c09978b720358e763d"}, {"sha": "87243bcce8b56aa118d677c3af22d645a2ac1ab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/87243bcce8b56aa118d677c3af22d645a2ac1ab8", "html_url": "https://github.com/rust-lang/rust/commit/87243bcce8b56aa118d677c3af22d645a2ac1ab8"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "5bc5567df2f849a91041dbe9a7c92e2ad8092cd2", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a7644b33d9fb411151c522adf258a7cfbf566ef3/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7644b33d9fb411151c522adf258a7cfbf566ef3/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=a7644b33d9fb411151c522adf258a7cfbf566ef3", "patch": "@@ -386,24 +386,33 @@ pub fn env() -> Env {\n     let _g = ENV_LOCK.lock();\n     return unsafe {\n         let mut environ = *environ();\n-        if environ as usize == 0 {\n+        if environ == ptr::null() {\n             panic!(\"os::env() failure getting env string from OS: {}\",\n                    io::Error::last_os_error());\n         }\n         let mut result = Vec::new();\n         while *environ != ptr::null() {\n-            result.push(parse(CStr::from_ptr(*environ).to_bytes()));\n+            if let Some(key_value) = parse(CStr::from_ptr(*environ).to_bytes()) {\n+                result.push(key_value);\n+            }\n             environ = environ.offset(1);\n         }\n         Env { iter: result.into_iter(), _dont_send_or_sync_me: ptr::null_mut() }\n     };\n \n-    fn parse(input: &[u8]) -> (OsString, OsString) {\n-        let mut it = input.splitn(2, |b| *b == b'=');\n-        let key = it.next().unwrap().to_vec();\n-        let default: &[u8] = &[];\n-        let val = it.next().unwrap_or(default).to_vec();\n-        (OsStringExt::from_vec(key), OsStringExt::from_vec(val))\n+    fn parse(input: &[u8]) -> Option<(OsString, OsString)> {\n+        // Strategy (copied from glibc): Variable name and value are separated\n+        // by an ASCII equals sign '='. Since a variable name must not be\n+        // empty, allow variable names starting with an equals sign. Skip all\n+        // malformed lines.\n+        if input.is_empty() {\n+            return None;\n+        }\n+        let pos = input[1..].iter().position(|&b| b == b'=').map(|p| p + 1);\n+        pos.map(|p| (\n+            OsStringExt::from_vec(input[..p].to_vec()),\n+            OsStringExt::from_vec(input[p+1..].to_vec()),\n+        ))\n     }\n }\n "}, {"sha": "3ee20980747ee60efc235340fda08aaac8a67d6a", "filename": "src/test/run-pass/env-funky-keys.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a7644b33d9fb411151c522adf258a7cfbf566ef3/src%2Ftest%2Frun-pass%2Fenv-funky-keys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7644b33d9fb411151c522adf258a7cfbf566ef3/src%2Ftest%2Frun-pass%2Fenv-funky-keys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-funky-keys.rs?ref=a7644b33d9fb411151c522adf258a7cfbf566ef3", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ignore this test on Android, because it segfaults there.\n+\n+// ignore-android\n+// ignore-windows\n+// no-prefer-dynamic\n+\n+#![feature(convert)]\n+#![feature(libc)]\n+\n+extern crate libc;\n+\n+use libc::c_char;\n+use libc::execve;\n+use std::env;\n+use std::ffi::OsStr;\n+use std::ptr;\n+\n+fn main() {\n+    if env::args_os().next().is_none() {\n+        for (key, value) in env::vars_os() {\n+            panic!(\"found env value {:?} {:?}\", key, value);\n+        }\n+        return;\n+    }\n+\n+    let current_exe = env::current_exe().unwrap().into_os_string().to_cstring().unwrap();\n+    let new_env_var = OsStr::new(\"FOOBAR\").to_cstring().unwrap();\n+    let filename: *const c_char = current_exe.as_ptr();\n+    let argv: &[*const c_char] = &[ptr::null()];\n+    let envp: &[*const c_char] = &[new_env_var.as_ptr(), ptr::null()];\n+    unsafe {\n+        execve(filename, &argv[0], &envp[0]);\n+    }\n+    panic!(\"execve failed\");\n+}"}, {"sha": "933d9a728dbe7e9881c777cb89b4122f13abd757", "filename": "src/test/run-pass/env-vars.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7644b33d9fb411151c522adf258a7cfbf566ef3/src%2Ftest%2Frun-pass%2Fenv-vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7644b33d9fb411151c522adf258a7cfbf566ef3/src%2Ftest%2Frun-pass%2Fenv-vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-vars.rs?ref=a7644b33d9fb411151c522adf258a7cfbf566ef3", "patch": "@@ -14,10 +14,7 @@ use std::env::*;\n fn main() {\n     for (k, v) in vars_os() {\n         let v2 = var_os(&k);\n-        // MingW seems to set some funky environment variables like\n-        // \"=C:=C:\\MinGW\\msys\\1.0\\bin\" and \"!::=::\\\" that are returned\n-        // from vars() but not visible from var().\n-        assert!(v2.is_none() || v2.as_ref().map(|s| &**s) == Some(&*v),\n+        assert!(v2.as_ref().map(|s| &**s) == Some(&*v),\n                 \"bad vars->var transition: {:?} {:?} {:?}\", k, v, v2);\n     }\n }"}]}