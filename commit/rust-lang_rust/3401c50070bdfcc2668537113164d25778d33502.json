{"sha": "3401c50070bdfcc2668537113164d25778d33502", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MDFjNTAwNzBiZGZjYzI2Njg1MzcxMTMxNjRkMjU3NzhkMzM1MDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-20T23:14:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-20T23:14:18Z"}, "message": "doc: Use commas to separate enums in tutorial", "tree": {"sha": "c626e462a3f865d087071b4de988140caaa21540", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c626e462a3f865d087071b4de988140caaa21540"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3401c50070bdfcc2668537113164d25778d33502", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3401c50070bdfcc2668537113164d25778d33502", "html_url": "https://github.com/rust-lang/rust/commit/3401c50070bdfcc2668537113164d25778d33502", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3401c50070bdfcc2668537113164d25778d33502/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "992d743bef9cd6947973f0cfd1faf943c60b0c7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/992d743bef9cd6947973f0cfd1faf943c60b0c7a", "html_url": "https://github.com/rust-lang/rust/commit/992d743bef9cd6947973f0cfd1faf943c60b0c7a"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "928c7acd9e2abc0ba94863ebdfb818a672722ff4", "filename": "doc/tutorial.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3401c50070bdfcc2668537113164d25778d33502/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/3401c50070bdfcc2668537113164d25778d33502/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=3401c50070bdfcc2668537113164d25778d33502", "patch": "@@ -809,7 +809,7 @@ expected to return.\n ~~~~\n # fn can_go_left() -> bool { true }\n # fn can_go_right() -> bool { true }\n-# enum dir { left; right; }\n+# enum dir { left, right }\n # fn dead_end() -> ! { fail; }\n let dir = if can_go_left() { left }\n           else if can_go_right() { right }\n@@ -989,8 +989,8 @@ types).\n ~~~~\n type point = {x: float, y: float};\n enum shape {\n-    circle(point, float);\n-    rectangle(point, point);\n+    circle(point, float),\n+    rectangle(point, point)\n }\n let my_shape = circle({x: 0.0, y: 0.0}, 10.0);\n ~~~~\n@@ -1065,8 +1065,8 @@ example, the type shown earlier:\n ~~~~\n # type point = {x: float, y: float};\n enum shape {\n-    circle(point, float);\n-    rectangle(point, point);\n+    circle(point, float),\n+    rectangle(point, point)\n }\n ~~~~\n \n@@ -1087,10 +1087,10 @@ equivalent to a C enum:\n \n ~~~~\n enum direction {\n-    north;\n-    east;\n-    south;\n-    west;\n+    north,\n+    east,\n+    south,\n+    west\n }\n ~~~~\n \n@@ -1103,9 +1103,9 @@ value:\n \n ~~~~\n enum color {\n-  red = 0xff0000;\n-  green = 0x00ff00;\n-  blue = 0x0000ff;\n+  red = 0xff0000,\n+  green = 0x00ff00,\n+  blue = 0x0000ff\n }\n ~~~~\n \n@@ -1130,7 +1130,7 @@ enum gizmo_id = int;\n That is a shorthand for this:\n \n ~~~~\n-enum gizmo_id { gizmo_id(int); }\n+enum gizmo_id { gizmo_id(int) }\n ~~~~\n \n Enum types like this can have their content extracted with the\n@@ -1150,7 +1150,7 @@ patterns, as in this definition of `area`:\n \n ~~~~\n # type point = {x: float, y: float};\n-# enum shape { circle(point, float); rectangle(point, point); }\n+# enum shape { circle(point, float), rectangle(point, point) }\n fn area(sh: shape) -> float {\n     alt sh {\n         circle(_, size) { float::consts::pi * size * size }\n@@ -1163,7 +1163,7 @@ Another example, matching nullary enum variants:\n \n ~~~~\n # type point = {x: float, y: float};\n-# enum direction { north; east; south; west; }\n+# enum direction { north, east, south, west }\n fn point_from_direction(dir: direction) -> point {\n     alt dir {\n         north { {x:  0f, y:  1f} }\n@@ -1545,7 +1545,7 @@ type circular_buf<T> = {start: uint,\n                         end: uint,\n                         buf: [mutable T]};\n \n-enum option<T> { some(T); none; }\n+enum option<T> { some(T), none }\n ~~~~\n \n You can then declare a function to take a `circular_buf<u8>` or return"}]}