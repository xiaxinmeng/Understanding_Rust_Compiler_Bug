{"sha": "aeb3aba951bca3307a1cbb7d1882437091e8070b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYjNhYmE5NTFiY2EzMzA3YTFjYmI3ZDE4ODI0MzcwOTFlODA3MGI=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-01-26T23:35:03Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-01-26T23:35:03Z"}, "message": "collections: Use slices parts in PartialEq for VecDeque\n\nThis improves == for VecDeque by using the slice representation.\n\nThis will also improve further if codegen for slice comparison improves.\n\nBenchmark run of 1000 u64 elements, comparing for equality (all equal).\nCpu time to compare the vecdeques is reduced to less than 50% of what it\nwas before.\n\n```\ntest test_eq_u64       ... bench:  1,885 ns/iter (+/- 163) = 4244 MB/s\ntest test_eq_new_u64   ... bench:    802 ns/iter (+/- 100) = 9975 MB/s\n```", "tree": {"sha": "aafdcd755cb13a7a1a4b9d3fef686adc77316107", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aafdcd755cb13a7a1a4b9d3fef686adc77316107"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aeb3aba951bca3307a1cbb7d1882437091e8070b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aeb3aba951bca3307a1cbb7d1882437091e8070b", "html_url": "https://github.com/rust-lang/rust/commit/aeb3aba951bca3307a1cbb7d1882437091e8070b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aeb3aba951bca3307a1cbb7d1882437091e8070b/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3174ce75112a52082580065b041f8f4330fefa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3174ce75112a52082580065b041f8f4330fefa5", "html_url": "https://github.com/rust-lang/rust/commit/d3174ce75112a52082580065b041f8f4330fefa5"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "f34fe2da7e84b21541fab615fb79b96a25ba1d71", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aeb3aba951bca3307a1cbb7d1882437091e8070b/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb3aba951bca3307a1cbb7d1882437091e8070b/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=aeb3aba951bca3307a1cbb7d1882437091e8070b", "patch": "@@ -1968,7 +1968,39 @@ impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: PartialEq> PartialEq for VecDeque<A> {\n     fn eq(&self, other: &VecDeque<A>) -> bool {\n-        self.len() == other.len() && self.iter().zip(other).all(|(a, b)| a.eq(b))\n+        if self.len() != other.len() {\n+            return false;\n+        }\n+        let (sa, sb) = self.as_slices();\n+        let (oa, ob) = other.as_slices();\n+        if sa.len() == oa.len() {\n+            sa == oa && sb == ob\n+        } else if sa.len() < oa.len() {\n+            // Always divisible in three sections, for example:\n+            // self:  [a b c|d e f]\n+            // other: [0 1 2 3|4 5]\n+            // front = 3, mid = 1,\n+            // [a b c] == [0 1 2] && [d] == [3] && [e f] == [4 5]\n+            let front = sa.len();\n+            let mid = oa.len() - front;\n+\n+            let (oa_front, oa_mid) = oa.split_at(front);\n+            let (sb_mid, sb_back) = sb.split_at(mid);\n+            debug_assert_eq!(sa.len(), oa_front.len());\n+            debug_assert_eq!(sb_mid.len(), oa_mid.len());\n+            debug_assert_eq!(sb_back.len(), ob.len());\n+            sa == oa_front && sb_mid == oa_mid && sb_back == ob\n+        } else {\n+            let front = oa.len();\n+            let mid = sa.len() - front;\n+\n+            let (sa_front, sa_mid) = sa.split_at(front);\n+            let (ob_mid, ob_back) = ob.split_at(mid);\n+            debug_assert_eq!(sa_front.len(), oa.len());\n+            debug_assert_eq!(sa_mid.len(), ob_mid.len());\n+            debug_assert_eq!(sb.len(), ob_back.len());\n+            sa_front == oa && sa_mid == ob_mid && sb == ob_back\n+        }\n     }\n }\n "}, {"sha": "742205df8d794c3ad4d2ac3509c2c20e425e6851", "filename": "src/libcollectionstest/vec_deque.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/aeb3aba951bca3307a1cbb7d1882437091e8070b/src%2Flibcollectionstest%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb3aba951bca3307a1cbb7d1882437091e8070b/src%2Flibcollectionstest%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec_deque.rs?ref=aeb3aba951bca3307a1cbb7d1882437091e8070b", "patch": "@@ -624,6 +624,33 @@ fn test_hash_after_rotation() {\n     }\n }\n \n+#[test]\n+fn test_eq_after_rotation() {\n+    // test that two deques are equal even if elements are laid out differently\n+    let len = 28;\n+    let mut ring: VecDeque<i32> = (0..len as i32).collect();\n+    let mut shifted = ring.clone();\n+    for _ in 0..10 {\n+        // shift values 1 step to the right by pop, sub one, push\n+        ring.pop_front();\n+        for elt in &mut ring {\n+            *elt -= 1;\n+        }\n+        ring.push_back(len - 1);\n+    }\n+\n+    // try every shift\n+    for _ in 0..shifted.capacity() {\n+        shifted.pop_front();\n+        for elt in &mut shifted {\n+            *elt -= 1;\n+        }\n+        shifted.push_back(len - 1);\n+        assert_eq!(shifted, ring);\n+        assert_eq!(ring, shifted);\n+    }\n+}\n+\n #[test]\n fn test_ord() {\n     let x = VecDeque::new();"}]}