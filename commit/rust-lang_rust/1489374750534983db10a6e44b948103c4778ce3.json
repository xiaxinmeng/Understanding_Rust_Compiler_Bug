{"sha": "1489374750534983db10a6e44b948103c4778ce3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ODkzNzQ3NTA1MzQ5ODNkYjEwYTZlNDRiOTQ4MTAzYzQ3NzhjZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-29T03:01:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-29T03:01:37Z"}, "message": "auto merge of #14451 : alexcrichton/rust/issue-14442, r=brson\n\nThis avoids having to perform conversions from `*u8` to `&'static str` which can\r\nsuck in a good deal of code.\r\n\r\nCloses #14442", "tree": {"sha": "2accbf591215690e2f0b7ffbeb9cf6ad20d14b44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2accbf591215690e2f0b7ffbeb9cf6ad20d14b44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1489374750534983db10a6e44b948103c4778ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1489374750534983db10a6e44b948103c4778ce3", "html_url": "https://github.com/rust-lang/rust/commit/1489374750534983db10a6e44b948103c4778ce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1489374750534983db10a6e44b948103c4778ce3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "812785e01aef46b0c62bfc02080f8fcc13f01a4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/812785e01aef46b0c62bfc02080f8fcc13f01a4c", "html_url": "https://github.com/rust-lang/rust/commit/812785e01aef46b0c62bfc02080f8fcc13f01a4c"}, {"sha": "5c1a70d49874ce3922af5cd3eeea7ae2dbc9db7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c1a70d49874ce3922af5cd3eeea7ae2dbc9db7e", "html_url": "https://github.com/rust-lang/rust/commit/5c1a70d49874ce3922af5cd3eeea7ae2dbc9db7e"}], "stats": {"total": 93, "additions": 59, "deletions": 34}, "files": [{"sha": "a53a380d7379831c1bd0017b96eccf732f46aedb", "filename": "src/libcore/failure.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1489374750534983db10a6e44b948103c4778ce3/src%2Flibcore%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1489374750534983db10a6e44b948103c4778ce3/src%2Flibcore%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffailure.rs?ref=1489374750534983db10a6e44b948103c4778ce3", "patch": "@@ -28,13 +28,25 @@\n \n #![allow(dead_code, missing_doc)]\n \n-#[cfg(not(test))]\n-use str::raw::c_str_to_static_slice;\n use fmt;\n+use intrinsics;\n+#[cfg(not(test), stage0)]\n+use str::raw::c_str_to_static_slice;\n+\n+#[cold] #[inline(never)] // this is the slow path, always\n+#[lang=\"fail_\"]\n+#[cfg(not(test), not(stage0))]\n+fn fail_(expr: &'static str, file: &'static str, line: uint) -> ! {\n+    format_args!(|args| -> () {\n+        begin_unwind(args, file, line);\n+    }, \"{}\", expr);\n+\n+    unsafe { intrinsics::abort() }\n+}\n \n #[cold] #[inline(never)] // this is the slow path, always\n #[lang=\"fail_\"]\n-#[cfg(not(test))]\n+#[cfg(not(test), stage0)]\n fn fail_(expr: *u8, file: *u8, line: uint) -> ! {\n     unsafe {\n         let expr = c_str_to_static_slice(expr as *i8);\n@@ -43,19 +55,30 @@ fn fail_(expr: *u8, file: *u8, line: uint) -> ! {\n             begin_unwind(args, file, line);\n         }, \"{}\", expr);\n \n-        loop {}\n+        intrinsics::abort()\n     }\n }\n \n #[cold]\n #[lang=\"fail_bounds_check\"]\n-#[cfg(not(test))]\n+#[cfg(not(test), not(stage0))]\n+fn fail_bounds_check(file: &'static str, line: uint,\n+                     index: uint, len: uint) -> ! {\n+    format_args!(|args| -> () {\n+        begin_unwind(args, file, line);\n+    }, \"index out of bounds: the len is {} but the index is {}\", len, index);\n+    unsafe { intrinsics::abort() }\n+}\n+\n+#[cold]\n+#[lang=\"fail_bounds_check\"]\n+#[cfg(not(test), stage0)]\n fn fail_bounds_check(file: *u8, line: uint, index: uint, len: uint) -> ! {\n     let file = unsafe { c_str_to_static_slice(file as *i8) };\n     format_args!(|args| -> () {\n         begin_unwind(args, file, line);\n     }, \"index out of bounds: the len is {} but the index is {}\", len, index);\n-    loop {}\n+    unsafe { intrinsics::abort() }\n }\n \n #[cold]"}, {"sha": "6cd6511b40ad366b93a8617eef82b3c6039f4162", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1489374750534983db10a6e44b948103c4778ce3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1489374750534983db10a6e44b948103c4778ce3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=1489374750534983db10a6e44b948103c4778ce3", "patch": "@@ -596,7 +596,8 @@ pub fn C_cstr(cx: &CrateContext, s: InternedString, null_terminated: bool) -> Va\n pub fn C_str_slice(cx: &CrateContext, s: InternedString) -> ValueRef {\n     unsafe {\n         let len = s.get().len();\n-        let cs = llvm::LLVMConstPointerCast(C_cstr(cx, s, false), Type::i8p(cx).to_ref());\n+        let cs = llvm::LLVMConstPointerCast(C_cstr(cx, s, false),\n+                                            Type::i8p(cx).to_ref());\n         C_struct(cx, [cs, C_uint(cx, len)], false)\n     }\n }\n@@ -843,19 +844,6 @@ pub fn find_vtable(tcx: &ty::ctxt,\n     param_bounds.get(n_bound).clone()\n }\n \n-pub fn filename_and_line_num_from_span(bcx: &Block, span: Span)\n-                                       -> (ValueRef, ValueRef) {\n-    let loc = bcx.sess().codemap().lookup_char_pos(span.lo);\n-    let filename_cstr = C_cstr(bcx.ccx(),\n-                               token::intern_and_get_ident(loc.file\n-                                                              .name\n-                                                              .as_slice()),\n-                               true);\n-    let filename = build::PointerCast(bcx, filename_cstr, Type::i8p(bcx.ccx()));\n-    let line = C_int(bcx.ccx(), loc.line as int);\n-    (filename, line)\n-}\n-\n // Casts a Rust bool value to an i1.\n pub fn bool_to_i1(bcx: &Block, llval: ValueRef) -> ValueRef {\n     build::ICmp(bcx, lib::llvm::IntNE, llval, C_bool(bcx.ccx(), false))"}, {"sha": "2174fe3df9a078481bd78147884cc2fef39784b9", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1489374750534983db10a6e44b948103c4778ce3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1489374750534983db10a6e44b948103c4778ce3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=1489374750534983db10a6e44b948103c4778ce3", "patch": "@@ -14,16 +14,15 @@ use middle::lang_items::{FailFnLangItem, FailBoundsCheckFnLangItem};\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee;\n+use middle::trans::cleanup::CleanupMethods;\n+use middle::trans::cleanup;\n use middle::trans::common::*;\n use middle::trans::debuginfo;\n-use middle::trans::cleanup;\n-use middle::trans::cleanup::CleanupMethods;\n use middle::trans::expr;\n+use middle::trans::type_of;\n use middle::ty;\n use util::ppaux::Repr;\n \n-use middle::trans::type_::Type;\n-\n use syntax::ast;\n use syntax::ast::Ident;\n use syntax::ast_util;\n@@ -337,23 +336,31 @@ pub fn trans_ret<'a>(bcx: &'a Block<'a>,\n     return bcx;\n }\n \n+fn str_slice_arg<'a>(bcx: &'a Block<'a>, s: InternedString) -> ValueRef {\n+    let ccx = bcx.ccx();\n+    let t = ty::mk_str_slice(bcx.tcx(), ty::ReStatic, ast::MutImmutable);\n+    let s = C_str_slice(ccx, s);\n+    let slot = alloca(bcx, val_ty(s), \"__temp\");\n+    Store(bcx, s, slot);\n+\n+    // The type of C_str_slice is { i8*, i64 }, but the type of the &str is\n+    // %str_slice, so we do a bitcast here to the right type.\n+    BitCast(bcx, slot, type_of::type_of(ccx, t).ptr_to())\n+}\n+\n pub fn trans_fail<'a>(\n                   bcx: &'a Block<'a>,\n                   sp: Span,\n                   fail_str: InternedString)\n                   -> &'a Block<'a> {\n     let ccx = bcx.ccx();\n-    let v_fail_str = C_cstr(ccx, fail_str, true);\n     let _icx = push_ctxt(\"trans_fail_value\");\n+\n+    let v_str = str_slice_arg(bcx, fail_str);\n     let loc = bcx.sess().codemap().lookup_char_pos(sp.lo);\n-    let v_filename = C_cstr(ccx,\n-                            token::intern_and_get_ident(loc.file\n-                                                           .name\n-                                                           .as_slice()),\n-                            true);\n+    let filename = token::intern_and_get_ident(loc.file.name.as_slice());\n+    let v_filename = str_slice_arg(bcx, filename);\n     let v_line = loc.line as int;\n-    let v_str = PointerCast(bcx, v_fail_str, Type::i8p(ccx));\n-    let v_filename = PointerCast(bcx, v_filename, Type::i8p(ccx));\n     let args = vec!(v_str, v_filename, C_int(ccx, v_line));\n     let did = langcall(bcx, Some(sp), \"\", FailFnLangItem);\n     let bcx = callee::trans_lang_call(bcx,\n@@ -371,7 +378,14 @@ pub fn trans_fail_bounds_check<'a>(\n                                len: ValueRef)\n                                -> &'a Block<'a> {\n     let _icx = push_ctxt(\"trans_fail_bounds_check\");\n-    let (filename, line) = filename_and_line_num_from_span(bcx, sp);\n+\n+    // Extract the file/line from the span\n+    let loc = bcx.sess().codemap().lookup_char_pos(sp.lo);\n+    let filename = token::intern_and_get_ident(loc.file.name.as_slice());\n+\n+    // Invoke the lang item\n+    let filename = str_slice_arg(bcx, filename);\n+    let line = C_int(bcx.ccx(), loc.line as int);\n     let args = vec!(filename, line, index, len);\n     let did = langcall(bcx, Some(sp), \"\", FailBoundsCheckFnLangItem);\n     let bcx = callee::trans_lang_call(bcx,"}, {"sha": "4b19d291b85ddfc40c4deeefa945c5544f715932", "filename": "src/test/auxiliary/lang-item-public.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1489374750534983db10a6e44b948103c4778ce3/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1489374750534983db10a6e44b948103c4778ce3/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flang-item-public.rs?ref=1489374750534983db10a6e44b948103c4778ce3", "patch": "@@ -11,7 +11,7 @@\n #![no_std]\n \n #[lang=\"fail_\"]\n-fn fail(_: *i8, _: *i8, _: uint) -> ! { loop {} }\n+fn fail(_: &'static str, _: &'static str, _: uint) -> ! { loop {} }\n \n #[lang = \"stack_exhausted\"]\n extern fn stack_exhausted() {}"}]}