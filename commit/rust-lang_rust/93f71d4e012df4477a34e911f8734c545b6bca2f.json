{"sha": "93f71d4e012df4477a34e911f8734c545b6bca2f", "node_id": "C_kwDOAAsO6NoAKDkzZjcxZDRlMDEyZGY0NDc3YTM0ZTkxMWY4NzM0YzU0NWI2YmNhMmY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-11T09:49:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-11T09:49:31Z"}, "message": "Rollup merge of #99091 - compiler-errors:private-types-should-stay-private, r=lcnr\n\nDo not mention private types from other crates as impl candidates\n\nFixes #99080", "tree": {"sha": "a1f995016acceb67d449c95e90e17797d6889d22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1f995016acceb67d449c95e90e17797d6889d22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93f71d4e012df4477a34e911f8734c545b6bca2f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiy/IrCRBK7hj4Ov3rIwAAIfIIAD0p2x4HwPHp3WB6oNdk1nqT\noRJiSeLntWxFf5+ecE7/rTebaGKNmFkt+hZjOfTQLJVjsglwz9YqmP4U3MtUV1gg\nsOuuwTe211UhfTNgUuDNR/rxfQvVLVXngeFJEW36g+Do5Su17d2V9/S5fdisG9yz\n+NRdcSgROmexFy49WMc1rbJ5CBepT079qUPjMjiYctKLt84NmWkVRs79DMPJVCqL\nQ8LxAeDJxyPjIcTNg2ZvghHcG7HKAuSOwxj2UtUvMjvfAE2QQMjkvOITL5PihtQR\nt9vWg2gOY4qyediofxkJAoez6vYLd6mlgA44QwGEgmSseWpwQ7H7FfHnJxZYdHg=\n=PQTr\n-----END PGP SIGNATURE-----\n", "payload": "tree a1f995016acceb67d449c95e90e17797d6889d22\nparent 92b8adf8e06594cb9b3477526e31fdba74ac63ad\nparent 913023b6b475ac5caed060771526e0777a13ae94\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657532971 +0530\ncommitter GitHub <noreply@github.com> 1657532971 +0530\n\nRollup merge of #99091 - compiler-errors:private-types-should-stay-private, r=lcnr\n\nDo not mention private types from other crates as impl candidates\n\nFixes #99080\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93f71d4e012df4477a34e911f8734c545b6bca2f", "html_url": "https://github.com/rust-lang/rust/commit/93f71d4e012df4477a34e911f8734c545b6bca2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93f71d4e012df4477a34e911f8734c545b6bca2f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92b8adf8e06594cb9b3477526e31fdba74ac63ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/92b8adf8e06594cb9b3477526e31fdba74ac63ad", "html_url": "https://github.com/rust-lang/rust/commit/92b8adf8e06594cb9b3477526e31fdba74ac63ad"}, {"sha": "913023b6b475ac5caed060771526e0777a13ae94", "url": "https://api.github.com/repos/rust-lang/rust/commits/913023b6b475ac5caed060771526e0777a13ae94", "html_url": "https://github.com/rust-lang/rust/commit/913023b6b475ac5caed060771526e0777a13ae94"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "34f4a9f790266939cce46ccd9f726a2bd971f940", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93f71d4e012df4477a34e911f8734c545b6bca2f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f71d4e012df4477a34e911f8734c545b6bca2f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=93f71d4e012df4477a34e911f8734c545b6bca2f", "patch": "@@ -673,6 +673,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             if !self.report_similar_impl_candidates(\n                                 impl_candidates,\n                                 trait_ref,\n+                                obligation.cause.body_id,\n                                 &mut err,\n                             ) {\n                                 // This is *almost* equivalent to\n@@ -707,6 +708,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                     self.report_similar_impl_candidates(\n                                         impl_candidates,\n                                         trait_ref,\n+                                        obligation.cause.body_id,\n                                         &mut err,\n                                     );\n                                 }\n@@ -1353,6 +1355,7 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n         &self,\n         impl_candidates: Vec<ImplCandidate<'tcx>>,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n+        body_id: hir::HirId,\n         err: &mut Diagnostic,\n     ) -> bool;\n \n@@ -1735,6 +1738,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         impl_candidates: Vec<ImplCandidate<'tcx>>,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n+        body_id: hir::HirId,\n         err: &mut Diagnostic,\n     ) -> bool {\n         let report = |mut candidates: Vec<TraitRef<'tcx>>, err: &mut Diagnostic| {\n@@ -1805,8 +1809,24 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         || self.tcx.is_builtin_derive(def_id)\n                 })\n                 .filter_map(|def_id| self.tcx.impl_trait_ref(def_id))\n-                // Avoid mentioning type parameters.\n-                .filter(|trait_ref| !matches!(trait_ref.self_ty().kind(), ty::Param(_)))\n+                .filter(|trait_ref| {\n+                    let self_ty = trait_ref.self_ty();\n+                    // Avoid mentioning type parameters.\n+                    if let ty::Param(_) = self_ty.kind() {\n+                        false\n+                    }\n+                    // Avoid mentioning types that are private to another crate\n+                    else if let ty::Adt(def, _) = self_ty.peel_refs().kind() {\n+                        // FIXME(compiler-errors): This could be generalized, both to\n+                        // be more granular, and probably look past other `#[fundamental]`\n+                        // types, too.\n+                        self.tcx\n+                            .visibility(def.did())\n+                            .is_accessible_from(body_id.owner.to_def_id(), self.tcx)\n+                    } else {\n+                        true\n+                    }\n+                })\n                 .collect();\n             return report(normalized_impl_candidates, err);\n         }"}, {"sha": "115df70a690607bcc8dc2f1e0d34f850c6d53c21", "filename": "src/test/ui/suggestions/auxiliary/meow.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93f71d4e012df4477a34e911f8734c545b6bca2f/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fmeow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f71d4e012df4477a34e911f8734c545b6bca2f/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fmeow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fmeow.rs?ref=93f71d4e012df4477a34e911f8734c545b6bca2f", "patch": "@@ -0,0 +1,11 @@\n+pub trait Meow {\n+    fn meow(&self) {}\n+}\n+\n+pub struct GlobalMeow;\n+\n+impl Meow for GlobalMeow {}\n+\n+pub(crate) struct PrivateMeow;\n+\n+impl Meow for PrivateMeow {}"}, {"sha": "91f574f35b80bc9242effafdf79c4b05226ffc7b", "filename": "src/test/ui/suggestions/issue-99080.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93f71d4e012df4477a34e911f8734c545b6bca2f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f71d4e012df4477a34e911f8734c545b6bca2f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.rs?ref=93f71d4e012df4477a34e911f8734c545b6bca2f", "patch": "@@ -0,0 +1,16 @@\n+// aux-build:meow.rs\n+\n+extern crate meow;\n+\n+use meow::Meow;\n+\n+fn needs_meow<T: Meow>(t: T) {}\n+\n+fn main() {\n+    needs_meow(1usize);\n+    //~^ ERROR the trait bound `usize: Meow` is not satisfied\n+}\n+\n+struct LocalMeow;\n+\n+impl Meow for LocalMeow {}"}, {"sha": "d1908dd9d0d862bec0d92c9cc7893db76bdb7547", "filename": "src/test/ui/suggestions/issue-99080.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93f71d4e012df4477a34e911f8734c545b6bca2f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f71d4e012df4477a34e911f8734c545b6bca2f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.stderr?ref=93f71d4e012df4477a34e911f8734c545b6bca2f", "patch": "@@ -0,0 +1,20 @@\n+error[E0277]: the trait bound `usize: Meow` is not satisfied\n+  --> $DIR/issue-99080.rs:10:16\n+   |\n+LL |     needs_meow(1usize);\n+   |     ---------- ^^^^^^ the trait `Meow` is not implemented for `usize`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the following other types implement trait `Meow`:\n+             GlobalMeow\n+             LocalMeow\n+note: required by a bound in `needs_meow`\n+  --> $DIR/issue-99080.rs:7:18\n+   |\n+LL | fn needs_meow<T: Meow>(t: T) {}\n+   |                  ^^^^ required by this bound in `needs_meow`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6ce57b6263e4110da94d15405e4dcde2423288e4", "filename": "src/test/ui/traits/bound/assoc-fn-bound-root-obligation.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93f71d4e012df4477a34e911f8734c545b6bca2f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93f71d4e012df4477a34e911f8734c545b6bca2f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr?ref=93f71d4e012df4477a34e911f8734c545b6bca2f", "patch": "@@ -15,7 +15,6 @@ LL |     s.strip_suffix(b'\\n').unwrap_or(s)\n              &'c &'b str\n              [char; N]\n              char\n-             pattern::MultiCharEqPattern<C>\n    = note: required because of the requirements on the impl of `Pattern<'_>` for `u8`\n \n error: aborting due to previous error"}]}