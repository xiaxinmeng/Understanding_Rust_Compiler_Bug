{"sha": "e0b71fff2a052a83ad00ead18b01149581f4e0e2", "node_id": "C_kwDOAAsO6NoAKGUwYjcxZmZmMmEwNTJhODNhZDAwZWFkMThiMDExNDk1ODFmNGUwZTI", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-20T22:09:48Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-20T22:18:02Z"}, "message": "[WIP] rustdoc: Resolve some more doc links early", "tree": {"sha": "108b06f060e07391babcc1e96234440170a8c7bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/108b06f060e07391babcc1e96234440170a8c7bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0b71fff2a052a83ad00ead18b01149581f4e0e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b71fff2a052a83ad00ead18b01149581f4e0e2", "html_url": "https://github.com/rust-lang/rust/commit/e0b71fff2a052a83ad00ead18b01149581f4e0e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0b71fff2a052a83ad00ead18b01149581f4e0e2/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51ea9bb29b07d76c5a7167d054b54f4eb7f5b44e", "url": "https://api.github.com/repos/rust-lang/rust/commits/51ea9bb29b07d76c5a7167d054b54f4eb7f5b44e", "html_url": "https://github.com/rust-lang/rust/commit/51ea9bb29b07d76c5a7167d054b54f4eb7f5b44e"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "1156a78e8a94afb4adfd64de62744ad15ce0b3b7", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0b71fff2a052a83ad00ead18b01149581f4e0e2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b71fff2a052a83ad00ead18b01149581f4e0e2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e0b71fff2a052a83ad00ead18b01149581f4e0e2", "patch": "@@ -532,6 +532,14 @@ impl CStore {\n         self.get_crate_data(cnum).get_all_incoherent_impls()\n     }\n \n+    pub fn associated_item_def_ids_untracked<'a>(\n+        &'a self,\n+        def_id: DefId,\n+        sess: &'a Session,\n+    ) -> impl Iterator<Item = DefId> + 'a {\n+        self.get_crate_data(def_id.krate).get_associated_item_def_ids(def_id.index, sess)\n+    }\n+\n     pub fn may_have_doc_links_untracked(&self, def_id: DefId) -> bool {\n         self.get_crate_data(def_id.krate).get_may_have_doc_links(def_id.index)\n     }"}, {"sha": "cd196a01847991d108335f367f35fe0f28b7e68b", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0b71fff2a052a83ad00ead18b01149581f4e0e2/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b71fff2a052a83ad00ead18b01149581f4e0e2/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e0b71fff2a052a83ad00ead18b01149581f4e0e2", "patch": "@@ -795,6 +795,7 @@ fn main_options(options: config::Options) -> MainResult {\n                 let resolver_caches = resolver.borrow_mut().access(|resolver| {\n                     collect_intra_doc_links::early_resolve_intra_doc_links(\n                         resolver,\n+                        sess,\n                         krate,\n                         externs,\n                         document_private,"}, {"sha": "98dba658cc63a358eb63f02f0c7b085fe301fa64", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e0b71fff2a052a83ad00ead18b01149581f4e0e2/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b71fff2a052a83ad00ead18b01149581f4e0e2/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=e0b71fff2a052a83ad00ead18b01149581f4e0e2", "patch": "@@ -14,19 +14,22 @@ use rustc_hir::TraitCandidate;\n use rustc_middle::ty::{DefIdTree, Visibility};\n use rustc_resolve::{ParentScope, Resolver};\n use rustc_session::config::Externs;\n+use rustc_session::Session;\n use rustc_span::{Symbol, SyntaxContext};\n \n use std::collections::hash_map::Entry;\n use std::mem;\n \n crate fn early_resolve_intra_doc_links(\n     resolver: &mut Resolver<'_>,\n+    sess: &Session,\n     krate: &ast::Crate,\n     externs: Externs,\n     document_private_items: bool,\n ) -> ResolverCaches {\n     let mut link_resolver = EarlyDocLinkResolver {\n         resolver,\n+        sess,\n         current_mod: CRATE_DEF_ID,\n         visited_mods: Default::default(),\n         markdown_links: Default::default(),\n@@ -70,6 +73,7 @@ fn doc_attrs<'a>(attrs: impl Iterator<Item = &'a ast::Attribute>) -> Attributes\n \n struct EarlyDocLinkResolver<'r, 'ra> {\n     resolver: &'r mut Resolver<'ra>,\n+    sess: &'r Session,\n     current_mod: LocalDefId,\n     visited_mods: DefIdSet,\n     markdown_links: FxHashMap<String, Vec<PreprocessedMarkdownLink>>,\n@@ -167,14 +171,22 @@ impl EarlyDocLinkResolver<'_, '_> {\n         }\n     }\n \n-    fn resolve_doc_links_extern_impl(&mut self, def_id: DefId, _is_inherent: bool) {\n-        // FIXME: Resolve links in associated items in addition to traits themselves,\n-        // `force` is used to provide traits in scope for the associated items.\n-        self.resolve_doc_links_extern_outer(def_id, def_id, true);\n+    fn resolve_doc_links_extern_impl(&mut self, def_id: DefId, is_inherent: bool) {\n+        self.resolve_doc_links_extern_outer(def_id, def_id);\n+        let assoc_item_def_ids = Vec::from_iter(\n+            self.resolver.cstore().associated_item_def_ids_untracked(def_id, self.sess),\n+        );\n+        for assoc_def_id in assoc_item_def_ids {\n+            if !is_inherent\n+                || self.resolver.cstore().visibility_untracked(assoc_def_id) == Visibility::Public\n+            {\n+                self.resolve_doc_links_extern_outer(assoc_def_id, def_id);\n+            }\n+        }\n     }\n \n-    fn resolve_doc_links_extern_outer(&mut self, def_id: DefId, scope_id: DefId, force: bool) {\n-        if !force && !self.resolver.cstore().may_have_doc_links_untracked(def_id) {\n+    fn resolve_doc_links_extern_outer(&mut self, def_id: DefId, scope_id: DefId) {\n+        if !self.resolver.cstore().may_have_doc_links_untracked(def_id) {\n             return;\n         }\n         // FIXME: actually resolve links, not just add traits in scope.\n@@ -246,7 +258,7 @@ impl EarlyDocLinkResolver<'_, '_> {\n                         Res::Def(DefKind::Variant, ..) => self.resolver.parent(def_id).unwrap(),\n                         _ => def_id,\n                     };\n-                    self.resolve_doc_links_extern_outer(def_id, scope_id, false); // Outer attribute scope\n+                    self.resolve_doc_links_extern_outer(def_id, scope_id); // Outer attribute scope\n                     if let Res::Def(DefKind::Mod, ..) = child.res {\n                         self.resolve_doc_links_extern_inner(def_id); // Inner attribute scope\n                     }"}]}