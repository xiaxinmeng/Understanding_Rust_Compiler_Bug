{"sha": "255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NTkwOGFjOTUzYWNiODY4YmE3ZWUwYzBjYmZiOGFlMGNjM2U0NGQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-02T02:43:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-07T15:17:05Z"}, "message": "test: Update with std => core movement", "tree": {"sha": "5c1b3e36610a9c893db220c884d03eb99e8d1616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c1b3e36610a9c893db220c884d03eb99e8d1616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d", "html_url": "https://github.com/rust-lang/rust/commit/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "104e285eb8f848867c2666765e2aa8221e8a97d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/104e285eb8f848867c2666765e2aa8221e8a97d1", "html_url": "https://github.com/rust-lang/rust/commit/104e285eb8f848867c2666765e2aa8221e8a97d1"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "ac6e35d0b26ea1d7e0eadba2a1f9c1829a7be4cc", "filename": "src/test/compile-fail/drop-on-non-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs?ref=255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d", "patch": "@@ -13,7 +13,7 @@\n \n type Foo = Vec<u8>;\n \n-impl Drop for Foo {   //~ ERROR conflicting implementations\n+impl Drop for Foo {\n //~^ ERROR cannot provide an extension implementation\n //~^^ ERROR multiple applicable methods\n     fn drop(&mut self) {"}, {"sha": "c5e7fc82cc9949aebd61a2ae0786a46c540f37b4", "filename": "src/test/compile-fail/fully-qualified-type-name1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs?ref=255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d", "patch": "@@ -13,5 +13,5 @@\n fn main() {\n     let x: Option<uint>;\n     x = 5;\n-    //~^ ERROR mismatched types: expected `std::option::Option<uint>`\n+    //~^ ERROR mismatched types: expected `core::option::Option<uint>`\n }"}, {"sha": "768ae6353d225c1e520c27ba7f2581d9d0c3926a", "filename": "src/test/compile-fail/fully-qualified-type-name4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs?ref=255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d", "patch": "@@ -14,7 +14,7 @@ use std::option::Option;\n \n fn bar(x: uint) -> Option<uint> {\n     return x;\n-    //~^ ERROR mismatched types: expected `std::option::Option<uint>`\n+    //~^ ERROR mismatched types: expected `core::option::Option<uint>`\n }\n \n fn main() {"}, {"sha": "44a52148e5b9ee1f0bc22d23218f351ac1172718", "filename": "src/test/compile-fail/issue-13466.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs?ref=255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     // tricked into looking up a non-existing second type parameter.\n     let _x: uint = match Some(1u) {\n     //~^ ERROR mismatched types: expected `uint` but found `<generic #0>`\n-        Ok(u) => u, //~ ERROR  mismatched types: expected `std::option::Option<uint>`\n-        Err(e) => fail!(e)  //~ ERROR mismatched types: expected `std::option::Option<uint>`\n+        Ok(u) => u, //~ ERROR  mismatched types: expected `core::option::Option<uint>`\n+        Err(e) => fail!(e)  //~ ERROR mismatched types: expected `core::option::Option<uint>`\n     };\n }"}, {"sha": "02c619f5f36cc2df6251ec241de24c2b0541ab1a", "filename": "src/test/compile-fail/issue-3680.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs?ref=255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     match None {\n         Err(_) => ()\n-        //~^ ERROR mismatched types: expected `std::option::Option<<generic #1>>`\n-        //         but found `std::result::Result<<generic #2>,<generic #3>>`\n+        //~^ ERROR mismatched types: expected `core::option::Option<<generic #1>>`\n+        //         but found `core::result::Result<<generic #2>,<generic #3>>`\n     }\n }"}, {"sha": "b59011b5880211530cca9654edf9bd3ae7406b3a", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d", "patch": "@@ -18,6 +18,6 @@ fn main() {\n     let x: Box<HashMap<~str, ~str>> = box HashMap::new();\n     let x: Box<Map<~str, ~str>> = x;\n     let y: Box<Map<uint, ~str>> = box x;\n-    //~^ ERROR failed to find an implementation of trait std::container::Map<uint,~str>\n-    //         for ~std::container::Map<~str,~str>:Send\n+    //~^ ERROR failed to find an implementation of trait core::container::Map<uint,~str>\n+    //         for ~core::container::Map<~str,~str>:Send\n }"}, {"sha": "508fec069c13e3d5590d8bb24d1da097e846d015", "filename": "src/test/compile-fail/noexporttypeexe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs?ref=255908ac953acb868ba7ee0c0cbfb8ae0cc3e44d", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     // because the def_id associated with the type was\n     // not convertible to a path.\n   let x: int = noexporttypelib::foo();\n-    //~^ ERROR expected `int` but found `std::option::Option<int>`\n+    //~^ ERROR expected `int` but found `core::option::Option<int>`\n }"}]}