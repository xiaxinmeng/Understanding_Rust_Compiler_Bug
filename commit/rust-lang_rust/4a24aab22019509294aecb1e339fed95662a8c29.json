{"sha": "4a24aab22019509294aecb1e339fed95662a8c29", "node_id": "C_kwDOAAsO6NoAKDRhMjRhYWIyMjAxOTUwOTI5NGFlY2IxZTMzOWZlZDk1NjYyYThjMjk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-12T03:28:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-12T03:28:45Z"}, "message": "Rollup merge of #96971 - zhaixiaojuan:master, r=wesleywiser\n\nInitial support for loongarch64-unknown-linux-gnu\n\nHi, We hope to add a new port in rust for LoongArch.\n\nLoongArch intro\nLoongArch is a RISC style ISA which is independently designed by Loongson\nTechnology in China. It is divided into two versions, the 32-bit version (LA32)\nand the 64-bit version (LA64). LA64 applications have application-level\nbackward binary compatibility with LA32 applications. LoongArch is composed of\na basic part (Loongson Base) and an expanded part. The expansion part includes\nLoongson Binary Translation (LBT), Loongson VirtualiZation (LVZ), Loongson SIMD\nEXtension (LSX) and Loongson Advanced SIMD EXtension(LASX).\n\nCurrently the LA464 processor core supports LoongArch ISA and the Loongson\n3A5000 processor integrates 4 64-bit LA464 cores. LA464 is a four-issue 64-bit\nhigh-performance processor core. It can be used as a single core for high-end\nembedded and desktop applications, or as a basic processor core to form an\non-chip multi-core system for server and high-performance machine applications.\n\nDocumentations:\nISA:\nhttps://loongson.github.io/LoongArch-Documentation/LoongArch-Vol1-EN.html\nABI:\nhttps://loongson.github.io/LoongArch-Documentation/LoongArch-ELF-ABI-EN.html\nMore docs can be found at:\nhttps://loongson.github.io/LoongArch-Documentation/README-EN.html\n\nSince last year, we have locally adapted two versions of rust, rust1.41 and rust1.57, and completed the test locally.\nI'm not sure if I'm submitting all the patches at once, so I split up the patches and here's one of the commits", "tree": {"sha": "cbd8f754cec2d142b9d9ba77e09552fb9a717a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbd8f754cec2d142b9d9ba77e09552fb9a717a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a24aab22019509294aecb1e339fed95662a8c29", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkNiVtCRBK7hj4Ov3rIwAAbTMIADsNTbs3hUzRFV2YRx3BFtT+\n8pVLdc2askoE3SHYllHkUA3T3zoGmgkOEievtSNiQqiytyoNcQ2LnfmCFD3qVQyC\nX/CpYz7fB+o456D3vYKsbEM9G/8EZ/ZEDSI/HWLQ+re/N5ZxQbhs8IfgffRjnJyX\nEMUf1WwHdcO9ecEHjaxVCRAV43uu0W0Rf2EpsjH6EOmmR/kGo8wefJe594Pzah7v\nkcQHSFa/DenqyAMW1UYpctBquGi0hsudADs9+tVu7HdZpn6Xy0oT0hCgzeNsP5L8\nxEFnYKWn3Y0KkZVUFNMb9nkfAOZ4vgWK9ooKGOL1S/r6Wsgzm70sQA+AbjnjA+Y=\n=6ids\n-----END PGP SIGNATURE-----\n", "payload": "tree cbd8f754cec2d142b9d9ba77e09552fb9a717a74\nparent e7271f4b92ce3cbc1bb3ae5081d8c61d5ea63c8c\nparent a3f0046142aec8e00d3e8192f83a8cc0bacef9e8\nauthor Michael Goulet <michael@errs.io> 1681270125 -0700\ncommitter GitHub <noreply@github.com> 1681270125 -0700\n\nRollup merge of #96971 - zhaixiaojuan:master, r=wesleywiser\n\nInitial support for loongarch64-unknown-linux-gnu\n\nHi, We hope to add a new port in rust for LoongArch.\n\nLoongArch intro\nLoongArch is a RISC style ISA which is independently designed by Loongson\nTechnology in China. It is divided into two versions, the 32-bit version (LA32)\nand the 64-bit version (LA64). LA64 applications have application-level\nbackward binary compatibility with LA32 applications. LoongArch is composed of\na basic part (Loongson Base) and an expanded part. The expansion part includes\nLoongson Binary Translation (LBT), Loongson VirtualiZation (LVZ), Loongson SIMD\nEXtension (LSX) and Loongson Advanced SIMD EXtension(LASX).\n\nCurrently the LA464 processor core supports LoongArch ISA and the Loongson\n3A5000 processor integrates 4 64-bit LA464 cores. LA464 is a four-issue 64-bit\nhigh-performance processor core. It can be used as a single core for high-end\nembedded and desktop applications, or as a basic processor core to form an\non-chip multi-core system for server and high-performance machine applications.\n\nDocumentations:\nISA:\nhttps://loongson.github.io/LoongArch-Documentation/LoongArch-Vol1-EN.html\nABI:\nhttps://loongson.github.io/LoongArch-Documentation/LoongArch-ELF-ABI-EN.html\nMore docs can be found at:\nhttps://loongson.github.io/LoongArch-Documentation/README-EN.html\n\nSince last year, we have locally adapted two versions of rust, rust1.41 and rust1.57, and completed the test locally.\nI'm not sure if I'm submitting all the patches at once, so I split up the patches and here's one of the commits\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a24aab22019509294aecb1e339fed95662a8c29", "html_url": "https://github.com/rust-lang/rust/commit/4a24aab22019509294aecb1e339fed95662a8c29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a24aab22019509294aecb1e339fed95662a8c29/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7271f4b92ce3cbc1bb3ae5081d8c61d5ea63c8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7271f4b92ce3cbc1bb3ae5081d8c61d5ea63c8c", "html_url": "https://github.com/rust-lang/rust/commit/e7271f4b92ce3cbc1bb3ae5081d8c61d5ea63c8c"}, {"sha": "a3f0046142aec8e00d3e8192f83a8cc0bacef9e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f0046142aec8e00d3e8192f83a8cc0bacef9e8", "html_url": "https://github.com/rust-lang/rust/commit/a3f0046142aec8e00d3e8192f83a8cc0bacef9e8"}], "stats": {"total": 154, "additions": 150, "deletions": 4}, "files": [{"sha": "046903fe5aca4b045062377a3f6c670fc9c227c7", "filename": "compiler/rustc_codegen_gcc/example/alloc_system.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_system.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_system.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_system.rs?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -15,6 +15,7 @@\n const MIN_ALIGN: usize = 8;\n #[cfg(any(target_arch = \"x86_64\",\n               target_arch = \"aarch64\",\n+              target_arch = \"loongarch64\",\n               target_arch = \"mips64\",\n               target_arch = \"s390x\",\n               target_arch = \"sparc64\"))]"}, {"sha": "d5d843702c0031e086df18f16600840acee1a20f", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -127,6 +127,7 @@ pub(crate) fn create_object_file(sess: &Session) -> Option<write::Object<'static\n         \"msp430\" => Architecture::Msp430,\n         \"hexagon\" => Architecture::Hexagon,\n         \"bpf\" => Architecture::Bpf,\n+        \"loongarch64\" => Architecture::LoongArch64,\n         // Unsupported architecture.\n         _ => return None,\n     };\n@@ -190,6 +191,10 @@ pub(crate) fn create_object_file(sess: &Session) -> Option<write::Object<'static\n             }\n             e_flags\n         }\n+        Architecture::LoongArch64 => {\n+            // Source: https://loongson.github.io/LoongArch-Documentation/LoongArch-ELF-ABI-EN.html#_e_flags_identifies_abi_type_and_version\n+            elf::EF_LARCH_OBJABI_V1 | elf::EF_LARCH_ABI_DOUBLE_FLOAT\n+        }\n         _ => 0,\n     };\n     // adapted from LLVM's `MCELFObjectTargetWriter::getOSABI`"}, {"sha": "b0783d75d4756156696775ca2950742929aff0be", "filename": "compiler/rustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -10,6 +10,7 @@ const OPTIONAL_COMPONENTS: &[&str] = &[\n     \"aarch64\",\n     \"amdgpu\",\n     \"avr\",\n+    \"loongarch\",\n     \"m68k\",\n     \"mips\",\n     \"powerpc\","}, {"sha": "08e38b0c9d59e3ed505ad1e3982668ca9854ee13", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -146,6 +146,12 @@ extern \"C\" void LLVMTimeTraceProfilerFinish(const char* FileName) {\n #define SUBTARGET_HEXAGON\n #endif\n \n+#ifdef LLVM_COMPONENT_LOONGARCH\n+#define SUBTARGET_LOONGARCH SUBTARGET(LoongArch)\n+#else\n+#define SUBTARGET_LOONGARCH\n+#endif\n+\n #define GEN_SUBTARGETS                                                         \\\n   SUBTARGET_X86                                                                \\\n   SUBTARGET_ARM                                                                \\\n@@ -159,6 +165,7 @@ extern \"C\" void LLVMTimeTraceProfilerFinish(const char* FileName) {\n   SUBTARGET_SPARC                                                              \\\n   SUBTARGET_HEXAGON                                                            \\\n   SUBTARGET_RISCV                                                              \\\n+  SUBTARGET_LOONGARCH                                                          \\\n \n #define SUBTARGET(x)                                                           \\\n   namespace llvm {                                                             \\"}, {"sha": "a49ded4fd7baa53f23f2d4a54f16f44b6b6e27a1", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -102,6 +102,14 @@ pub fn initialize_available_targets() {\n         LLVMInitializeM68kAsmPrinter,\n         LLVMInitializeM68kAsmParser\n     );\n+    init_target!(\n+        llvm_component = \"loongarch\",\n+        LLVMInitializeLoongArchTargetInfo,\n+        LLVMInitializeLoongArchTarget,\n+        LLVMInitializeLoongArchTargetMC,\n+        LLVMInitializeLoongArchAsmPrinter,\n+        LLVMInitializeLoongArchAsmParser\n+    );\n     init_target!(\n         llvm_component = \"mips\",\n         LLVMInitializeMipsTargetInfo,"}, {"sha": "db8b9c70e67023fdb2a2427e473e2ef144a14889", "filename": "compiler/rustc_target/src/spec/loongarch64_unknown_linux_gnu.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_linux_gnu.rs?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -0,0 +1,17 @@\n+use crate::spec::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"loongarch64-unknown-linux-gnu\".into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        arch: \"loongarch64\".into(),\n+        options: TargetOptions {\n+            cpu: \"generic\".into(),\n+            features: \"+f,+d\".into(),\n+            llvm_abiname: \"lp64d\".into(),\n+            max_atomic_width: Some(64),\n+            ..super::linux_gnu_base::opts()\n+        },\n+    }\n+}"}, {"sha": "192b2ab0ca2753cad5344f9c5bf0bd1cb8462d62", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -1021,6 +1021,7 @@ supported_targets! {\n     (\"x86_64-unknown-linux-gnux32\", x86_64_unknown_linux_gnux32),\n     (\"i686-unknown-linux-gnu\", i686_unknown_linux_gnu),\n     (\"i586-unknown-linux-gnu\", i586_unknown_linux_gnu),\n+    (\"loongarch64-unknown-linux-gnu\", loongarch64_unknown_linux_gnu),\n     (\"m68k-unknown-linux-gnu\", m68k_unknown_linux_gnu),\n     (\"mips-unknown-linux-gnu\", mips_unknown_linux_gnu),\n     (\"mips64-unknown-linux-gnuabi64\", mips64_unknown_linux_gnuabi64),"}, {"sha": "deb2df5805ef975b9a9a6b94676c136bf5144862", "filename": "config.example.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/config.example.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/config.example.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.example.toml?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -88,7 +88,7 @@ changelog-seen = 2\n # the resulting rustc being unable to compile for the disabled architectures.\n #\n # To add support for new targets, see https://rustc-dev-guide.rust-lang.org/building/new-target.html.\n-#targets = \"AArch64;ARM;BPF;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86\"\n+#targets = \"AArch64;ARM;BPF;Hexagon;LoongArch;MSP430;Mips;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86\"\n \n # LLVM experimental targets to build support for. These targets are specified in\n # the same format as above, but since these targets are experimental, they are"}, {"sha": "3014fe6e2fc2b5d2ea3842f02339037f741bfff1", "filename": "library/std/src/env.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -895,6 +895,7 @@ pub mod consts {\n     /// - x86_64\n     /// - arm\n     /// - aarch64\n+    /// - loongarch64\n     /// - m68k\n     /// - mips\n     /// - mips64"}, {"sha": "c55ca8ba26e2f21fe0709c6e9b2b2e4168e5b3fe", "filename": "library/std/src/os/linux/raw.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -231,6 +231,7 @@ mod arch {\n }\n \n #[cfg(any(\n+    target_arch = \"loongarch64\",\n     target_arch = \"mips64\",\n     target_arch = \"s390x\",\n     target_arch = \"sparc64\","}, {"sha": "0421b47be024e39b35eeace7aad34d30064d695c", "filename": "library/std/src/personality/gcc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -77,6 +77,9 @@ const UNWIND_DATA_REG: (i32, i32) = (0, 1); // R0, R1\n #[cfg(any(target_arch = \"riscv64\", target_arch = \"riscv32\"))]\n const UNWIND_DATA_REG: (i32, i32) = (10, 11); // x10, x11\n \n+#[cfg(target_arch = \"loongarch64\")]\n+const UNWIND_DATA_REG: (i32, i32) = (4, 5); // a0, a1\n+\n // The following code is based on GCC's C and C++ personality routines.  For reference, see:\n // https://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/libsupc++/eh_personality.cc\n // https://github.com/gcc-mirror/gcc/blob/trunk/libgcc/unwind-c.c"}, {"sha": "a5fcbdf39c6c685805841a93e9dbe862ed0e707f", "filename": "library/std/src/sys/common/alloc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -22,6 +22,7 @@ pub const MIN_ALIGN: usize = 8;\n #[cfg(any(\n     target_arch = \"x86_64\",\n     target_arch = \"aarch64\",\n+    target_arch = \"loongarch64\",\n     target_arch = \"mips64\",\n     target_arch = \"s390x\",\n     target_arch = \"sparc64\","}, {"sha": "f6a68073b2f7e60e002d787a276b37e0974f32dd", "filename": "library/unwind/src/libunwind.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/library%2Funwind%2Fsrc%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/library%2Funwind%2Fsrc%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flibunwind.rs?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -75,6 +75,9 @@ pub const unwinder_private_data_size: usize = 20;\n #[cfg(all(target_arch = \"hexagon\", target_os = \"linux\"))]\n pub const unwinder_private_data_size: usize = 35;\n \n+#[cfg(target_arch = \"loongarch64\")]\n+pub const unwinder_private_data_size: usize = 2;\n+\n #[repr(C)]\n pub struct _Unwind_Exception {\n     pub exception_class: _Unwind_Exception_Class,"}, {"sha": "025145244c491bebd09e8db5de8362bdf18a76c5", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -304,6 +304,7 @@ def default_build_triple(verbose):\n         'i486': 'i686',\n         'i686': 'i686',\n         'i786': 'i686',\n+        'loongarch64': 'loongarch64',\n         'm68k': 'm68k',\n         'powerpc': 'powerpc',\n         'powerpc64': 'powerpc64',"}, {"sha": "eaa3afa4b7b2088e3d1279642baf52316480d581", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -129,7 +129,8 @@ const EXTRA_CHECK_CFGS: &[(Option<Mode>, &'static str, Option<&[&'static str]>)]\n     /* Extra values not defined in the built-in targets yet, but used in std */\n     (Some(Mode::Std), \"target_env\", Some(&[\"libnx\"])),\n     // (Some(Mode::Std), \"target_os\", Some(&[])),\n-    (Some(Mode::Std), \"target_arch\", Some(&[\"asmjs\", \"spirv\", \"nvptx\", \"xtensa\"])),\n+    // #[cfg(bootstrap)] loongarch64\n+    (Some(Mode::Std), \"target_arch\", Some(&[\"asmjs\", \"spirv\", \"nvptx\", \"xtensa\", \"loongarch64\"])),\n     /* Extra names used by dependencies */\n     // FIXME: Used by serde_json, but we should not be triggering on external dependencies.\n     (Some(Mode::Rustc), \"no_btreemap_remove_entry\", None),"}, {"sha": "d123deec3545475f317c24512b96b586609dae4c", "filename": "src/bootstrap/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/src%2Fbootstrap%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/src%2Fbootstrap%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fllvm.rs?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -291,7 +291,7 @@ impl Step for Llvm {\n         let llvm_targets = match &builder.config.llvm_targets {\n             Some(s) => s,\n             None => {\n-                \"AArch64;ARM;BPF;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;\\\n+                \"AArch64;ARM;BPF;Hexagon;LoongArch;MSP430;Mips;NVPTX;PowerPC;RISCV;\\\n                      Sparc;SystemZ;WebAssembly;X86\"\n             }\n         };"}, {"sha": "8ded2ee59dd2033b20a8a6a4511bd3cc0e51838f", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -29,6 +29,7 @@\n     - [\\*-linux-ohos](platform-support/openharmony.md)\n     - [\\*-unknown-fuchsia](platform-support/fuchsia.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n+    - [loongarch\\*-unknown-linux-\\*](platform-support/loongarch-linux.md)\n     - [m68k-unknown-linux-gnu](platform-support/m68k-unknown-linux-gnu.md)\n     - [mips64-openwrt-linux-musl](platform-support/mips64-openwrt-linux-musl.md)\n     - [mipsel-sony-psx](platform-support/mipsel-sony-psx.md)"}, {"sha": "c378532dbf6c34953c246ea14de66a1e235596f8", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -266,6 +266,7 @@ target | std | host | notes\n `i686-uwp-windows-gnu` | ? |  |\n `i686-uwp-windows-msvc` | ? |  |\n `i686-wrs-vxworks` | ? |  |\n+[`loongarch64-unknown-linux-gnu`](platform-support/loongarch-linux.md) | ? |  | LoongArch64 Linux (LP64D ABI)\n [`m68k-unknown-linux-gnu`](platform-support/m68k-unknown-linux-gnu.md) | ? |  | Motorola 680x0 Linux\n `mips-unknown-linux-uclibc` | \u2713 |  | MIPS Linux with uClibc\n [`mips64-openwrt-linux-musl`](platform-support/mips64-openwrt-linux-musl.md) | ? |  | MIPS64 for OpenWrt Linux MUSL"}, {"sha": "e046ec244ece98073a1227ddb30871f1344fb3df", "filename": "src/doc/rustc/src/platform-support/loongarch-linux.md", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Floongarch-linux.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Floongarch-linux.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Floongarch-linux.md?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -0,0 +1,92 @@\n+# loongarch\\*-unknown-linux-\\*\n+\n+**Tier: 3**\n+\n+[LoongArch] is a new RISC ISA developed by Loongson Technology Corporation Limited.\n+\n+[LoongArch]: https://loongson.github.io/LoongArch-Documentation/README-EN.html\n+\n+The target name follow this format: `<machine>-<vendor>-<os><fabi_suffix>, where `<machine>` specifies the CPU family/model, `<vendor>` specifies the vendor and `<os>` the operating system name.\n+While the integer base ABI is\u00a0implied by the\u2002machine\u2002field, the floating point base ABI type is encoded into the os field of the specifier using the string suffix `<fabi-suffix>`.\n+\n+|    `<fabi-suffix>`     |                           `Description`                            |\n+|------------------------|--------------------------------------------------------------------|\n+|          f64           | The base ABI use 64-bits FPRs for parameter passing.(lp64d)|\n+|          f32           | The base ABI uses 32-bit FPRs for parameter passing. (lp64f)|\n+|          sf            | The base ABI uses no FPR for parameter passing. (lp64s)     |\n+\n+|`ABI type(Base ABI/ABI extension)`| `C library` | `kernel` |          `target tuple`          |\n+|----------------------------------|-------------|----------|----------------------------------|\n+|           lp64d/base             |   glibc     |  linux   | loongarch64-unknown-linux-gnu |\n+|           lp64f/base             |   glibc     |  linux   | loongarch64-unknown-linux-gnuf32 |\n+|           lp64s/base             |   glibc     |  linux   | loongarch64-unknown-linux-gnusf  |\n+|           lp64d/base             |  musl libc  |  linux   | loongarch64-unknown-linux-musl|\n+|           lp64f/base             |  musl libc  |  linux   | loongarch64-unknown-linux-muslf32|\n+|           lp64s/base             |  musl libc  |  linux   | loongarch64-unknown-linux-muslsf |\n+\n+## Target maintainers\n+\n+- [ZHAI xiaojuan](https://github.com/zhaixiaojuan) `zhaixiaojuan@loongson.cn`\n+- [WANG rui](https://github.com/heiher) `wangrui@loongson.cn`\n+- [ZHAI xiang](https://github.com/xiangzhai) `zhaixiang@loongson.cn`\n+- [WANG Xuerui](https://github.com/xen0n) `git@xen0n.name`\n+\n+## Requirements\n+\n+This target is cross-compiled.\n+A GNU toolchain for LoongArch target is required.  It can be downloaded from https://github.com/loongson/build-tools/releases, or built from the source code of GCC (12.1.0 or later) and Binutils (2.40 or later).\n+\n+## Building the target\n+\n+The target can be built by enabling it for a `rustc` build.\n+\n+```toml\n+[build]\n+target = [\"loongarch64-unknown-linux-gnu\"]\n+```\n+\n+Make sure `loongarch64-unknown-linux-gnu-gcc` can be searched from the directories specified in`$PATH`. Alternatively, you can use GNU LoongArch Toolchain by adding the following to `config.toml`:\n+\n+```toml\n+[target.loongarch64-unknown-linux-gnu]\n+# ADJUST THIS PATH TO POINT AT YOUR TOOLCHAIN\n+cc = \"/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-gcc\"\n+cxx = \"/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-g++\"\n+ar = \"/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-ar\"\n+ranlib = \"/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-ranlib\"\n+linker = \"/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-gcc\"\n+```\n+\n+## Cross-compilation\n+\n+This target can be cross-compiled on a `x86_64-unknown-linux-gnu` host. Cross-compilation on other hosts may work but is not tested.\n+\n+## Testing\n+To test a cross-compiled binary on your build system, install the qemu binary that supports the LoongArch architecture and execute the following commands.\n+```text\n+CC_loongarch64_unknown_linux_gnu=/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-gcc \\\n+CXX_loongarch64_unknown_linux_gnu=/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-g++ \\\n+AR_loongarch64_unknown_linux_gnu=/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-gcc-ar \\\n+CARGO_TARGET_LOONGARCH64_UNKNOWN_LINUX_GNUN_LINKER=/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-gcc \\\n+# SET TARGET SYSTEM LIBRARY PATH\n+CARGO_TARGET_LOONGARCH64_UNKNOWN_LINUX_GNUN_RUNNER=\"qemu-loongarch64 -L /TOOLCHAIN_PATH/TARGET_LIBRAY_PATH\" \\\n+cargo run --target loongarch64-unknown-linux-gnu --release\n+```\n+Tested on x86 architecture, other architectures not tested.\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for this target, you will either need to build Rust with the target enabled (see \"Building the target\" above), or build your own copy of `std` by using `build-std` or similar.\n+\n+If `rustc` has support for that target and the library artifacts are available, then Rust static libraries can be built for that target:\n+\n+```shell\n+$ rustc --target loongarch64-unknown-linux-gnu your-code.rs --crate-type staticlib\n+$ ls libyour_code.a\n+```\n+\n+On Rust Nightly it's possible to build without the target artifacts available:\n+\n+```text\n+cargo build -Z build-std --target loongarch64-unknown-linux-gnu\n+```"}, {"sha": "5177cffe6bae4ef8c52269dd0e6e6a8868d9d1ba", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -517,6 +517,7 @@ impl<'a> fmt::Display for Display<'a> {\n                         \"aarch64\" => \"AArch64\",\n                         \"arm\" => \"ARM\",\n                         \"asmjs\" => \"JavaScript\",\n+                        \"loongarch64\" => \"LoongArch LA64\",\n                         \"m68k\" => \"M68k\",\n                         \"mips\" => \"MIPS\",\n                         \"mips64\" => \"MIPS-64\","}, {"sha": "5ca4d3b3de741a2b7d01e522cc3c65501ea33929", "filename": "tests/ui/check-cfg/compact-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a24aab22019509294aecb1e339fed95662a8c29/tests%2Fui%2Fcheck-cfg%2Fcompact-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a24aab22019509294aecb1e339fed95662a8c29/tests%2Fui%2Fcheck-cfg%2Fcompact-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fcompact-values.stderr?ref=4a24aab22019509294aecb1e339fed95662a8c29", "patch": "@@ -4,7 +4,7 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(target(os = \"linux\", arch = \"X\"))]\n    |                            ^^^^^^^^^^\n    |\n-   = note: expected values for `target_arch` are: aarch64, arm, avr, bpf, hexagon, m68k, mips, mips64, msp430, nvptx64, powerpc, powerpc64, riscv32, riscv64, s390x, sparc, sparc64, wasm32, wasm64, x86, x86_64\n+   = note: expected values for `target_arch` are: aarch64, arm, avr, bpf, hexagon, loongarch64, m68k, mips, mips64, msp430, nvptx64, powerpc, powerpc64, riscv32, riscv64, s390x, sparc, sparc64, wasm32, wasm64, x86, x86_64\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: 1 warning emitted"}]}