{"sha": "584fbde5d1f9e0048592b44195263dfea0ee8231", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NGZiZGU1ZDFmOWUwMDQ4NTkyYjQ0MTk1MjYzZGZlYTBlZTgyMzE=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-04T20:38:13Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-15T18:34:16Z"}, "message": "Fix errors", "tree": {"sha": "a8ed3d1b187108d1793581b5b2b5ffceb514c744", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8ed3d1b187108d1793581b5b2b5ffceb514c744"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/584fbde5d1f9e0048592b44195263dfea0ee8231", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/584fbde5d1f9e0048592b44195263dfea0ee8231", "html_url": "https://github.com/rust-lang/rust/commit/584fbde5d1f9e0048592b44195263dfea0ee8231", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/584fbde5d1f9e0048592b44195263dfea0ee8231/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6b82c7566a2e1da7d0f1697335b47c8c999720e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6b82c7566a2e1da7d0f1697335b47c8c999720e", "html_url": "https://github.com/rust-lang/rust/commit/c6b82c7566a2e1da7d0f1697335b47c8c999720e"}], "stats": {"total": 161, "additions": 51, "deletions": 110}, "files": [{"sha": "c2bde31b85981fac8987b2e115f7013c4196724f", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 7, "deletions": 51, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -94,66 +94,26 @@ pub use unicode::{Words, UnicodeStrSlice};\n Section: Creating a string\n */\n \n-/// Consumes a vector of bytes to create a new utf-8 string.\n-///\n-/// Returns `Err` with the original vector if the vector contains invalid\n-/// UTF-8.\n-///\n-/// # Example\n-///\n-/// ```rust\n-/// use std::str;\n-/// let hello_vec = vec![104, 101, 108, 108, 111];\n-/// let string = str::from_utf8_owned(hello_vec);\n-/// assert_eq!(string, Ok(\"hello\".to_string()));\n-/// ```\n+/// Deprecated. Replaced by `String::from_utf8`\n #[deprecated = \"Replaced by `String::from_utf8`\"]\n pub fn from_utf8_owned(vv: Vec<u8>) -> Result<String, Vec<u8>> {\n     String::from_utf8(vv)\n }\n \n-/// Convert a byte to a UTF-8 string\n-///\n-/// # Failure\n-///\n-/// Fails if invalid UTF-8\n-///\n-/// # Example\n-///\n-/// ```rust\n-/// use std::str;\n-/// let string = str::from_byte(104);\n-/// assert_eq!(string.as_slice(), \"h\");\n-/// ```\n+/// Deprecated. Replaced by `String::from_byte`\n #[deprecated = \"Replaced by String::from_byte\"]\n pub fn from_byte(b: u8) -> String {\n     assert!(b < 128u8);\n     String::from_char(1, b as char)\n }\n \n-/// Convert a char to a string\n-///\n-/// # Example\n-///\n-/// ```rust\n-/// use std::str;\n-/// let string = str::from_char('b');\n-/// assert_eq!(string.as_slice(), \"b\");\n-/// ```\n+/// Deprecated. Use `String::from_char` or `char::to_string()` instead\n #[deprecated = \"use String::from_char or char.to_string()\"]\n pub fn from_char(ch: char) -> String {\n     String::from_char(1, ch)\n }\n \n-/// Convert a vector of chars to a string\n-///\n-/// # Example\n-///\n-/// ```rust\n-/// let chars = ['h', 'e', 'l', 'l', 'o'];\n-/// let string = String::from_chars(chars);\n-/// assert_eq!(string.as_slice(), \"hello\");\n-/// ```\n+/// Deprecated. Replaced by `String::from_chars`\n #[deprecated = \"use String::from_chars instead\"]\n pub fn from_chars(chs: &[char]) -> String {\n     chs.iter().map(|c| *c).collect()\n@@ -649,7 +609,6 @@ pub mod raw {\n     #[test]\n     fn test_from_buf_len() {\n         use slice::ImmutableVector;\n-        use str::StrAllocating;\n \n         unsafe {\n             let a = vec![65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 0u8];\n@@ -854,8 +813,7 @@ mod tests {\n     use std::default::Default;\n     use std::char::Char;\n     use std::clone::Clone;\n-    use std::cmp::{Equal, Greater, Less, Ord, Eq, PartialOrd, PartialEq, Equiv};\n-    use std::result::{Ok, Err};\n+    use std::cmp::{Equal, Greater, Less, Ord, PartialOrd, Equiv};\n     use std::option::{Some, None};\n     use std::ptr::RawPtr;\n     use std::iter::{Iterator, DoubleEndedIterator};\n@@ -1546,7 +1504,7 @@ mod tests {\n         let mut pos = 0;\n         for ch in v.iter() {\n             assert!(s.char_at(pos) == *ch);\n-            pos += from_char(*ch).len();\n+            pos += String::from_char(1, *ch).len();\n         }\n     }\n \n@@ -1557,7 +1515,7 @@ mod tests {\n         let mut pos = s.len();\n         for ch in v.iter().rev() {\n             assert!(s.char_at_reverse(pos) == *ch);\n-            pos -= from_char(*ch).len();\n+            pos -= String::from_char(1, *ch).len();\n         }\n     }\n \n@@ -1996,10 +1954,8 @@ String::from_str(\"\\u1111\\u1171\\u11b6\"));\n mod bench {\n     use test::Bencher;\n     use super::*;\n-    use vec::Vec;\n     use std::iter::{Iterator, DoubleEndedIterator};\n     use std::collections::Collection;\n-    use std::slice::Vector;\n \n     #[bench]\n     fn char_iterator(b: &mut Bencher) {"}, {"sha": "5450f2d7c31a3778b63ca8947341e55f96f62311", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -99,7 +99,7 @@ impl String {\n     ///\n     /// ```rust\n     /// let input = b\"Hello \\xF0\\x90\\x80World\";\n-    /// let output = std::str::from_utf8_lossy(input);\n+    /// let output = String::from_utf8_lossy(input);\n     /// assert_eq!(output.as_slice(), \"Hello \\uFFFDWorld\");\n     /// ```\n     pub fn from_utf8_lossy<'a>(v: &'a [u8]) -> MaybeOwned<'a> {\n@@ -218,18 +218,18 @@ impl String {\n         Owned(res.into_string())\n     }\n \n-    /// Decode a UTF-16 encoded vector `v` into a string, returning `None`\n+    /// Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\n     /// if `v` contains any invalid data.\n     ///\n     /// # Example\n     ///\n     /// ```rust\n-    /// // \u00f0\u009d\u201e\u017emusic\n+    /// // \ud834\udd1emusic\n     /// let mut v = [0xD834, 0xDD1E, 0x006d, 0x0075,\n     ///              0x0073, 0x0069, 0x0063];\n-    /// assert_eq!(String::from_utf16(v), Some(\"\u00f0\u009d\u201e\u017emusic\".to_string()));\n+    /// assert_eq!(String::from_utf16(v), Some(\"\ud834\udd1emusic\".to_string()));\n     ///\n-    /// // \u00f0\u009d\u201e\u017emu<invalid>ic\n+    /// // \ud834\udd1emu<invalid>ic\n     /// v[4] = 0xD800;\n     /// assert_eq!(String::from_utf16(v), None);\n     /// ```\n@@ -249,13 +249,13 @@ impl String {\n     ///\n     /// # Example\n     /// ```rust\n-    /// // \u00f0\u009d\u201e\u017emus<invalid>ic<invalid>\n+    /// // \ud834\udd1emus<invalid>ic<invalid>\n     /// let v = [0xD834, 0xDD1E, 0x006d, 0x0075,\n     ///          0x0073, 0xDD1E, 0x0069, 0x0063,\n     ///          0xD834];\n     ///\n     /// assert_eq!(String::from_utf16_lossy(v),\n-    ///            \"\u00f0\u009d\u201e\u017emus\\uFFFDic\\uFFFD\".to_string());\n+    ///            \"\ud834\udd1emus\\uFFFDic\\uFFFD\".to_string());\n     /// ```\n     pub fn from_utf16_lossy(v: &[u16]) -> String {\n         str::utf16_items(v).map(|c| c.to_char_lossy()).collect()\n@@ -575,8 +575,9 @@ mod tests {\n \n     use Mutable;\n     use str;\n-    use str::{Str, StrSlice, MaybeOwned, Owned, Slice};\n+    use str::{Str, StrSlice, Owned, Slice};\n     use super::String;\n+    use vec::Vec;\n \n     #[test]\n     fn test_from_str() {\n@@ -587,10 +588,10 @@ mod tests {\n     #[test]\n     fn test_from_utf8() {\n         let xs = Vec::from_slice(b\"hello\");\n-        assert_eq!(String::from_utf8(xs), Ok(\"hello\".to_string()));\n+        assert_eq!(String::from_utf8(xs), Ok(String::from_str(\"hello\")));\n \n-        let xs = Vec::from_slice(\"\u00e0\u00b8\u00a8\u00e0\u00b9\u201e\u00e0\u00b8\u2014\u00e0\u00b8\u00a2\u00e4\u00b8\u00ad\u00e5\u008d\u017dVi\u00e1\u00bb\u2021t Nam\".as_bytes());\n-        assert_eq!(String::from_utf8(xs), Ok(\"\u00e0\u00b8\u00a8\u00e0\u00b9\u201e\u00e0\u00b8\u2014\u00e0\u00b8\u00a2\u00e4\u00b8\u00ad\u00e5\u008d\u017dVi\u00e1\u00bb\u2021t Nam\".to_string()));\n+        let xs = Vec::from_slice(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".as_bytes());\n+        assert_eq!(String::from_utf8(xs), Ok(String::from_str(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\")));\n \n         let xs = Vec::from_slice(b\"hello\\xFF\");\n         assert_eq!(String::from_utf8(xs),\n@@ -602,21 +603,24 @@ mod tests {\n         let xs = b\"hello\";\n         assert_eq!(String::from_utf8_lossy(xs), Slice(\"hello\"));\n \n-        let xs = \"\u00e0\u00b8\u00a8\u00e0\u00b9\u201e\u00e0\u00b8\u2014\u00e0\u00b8\u00a2\u00e4\u00b8\u00ad\u00e5\u008d\u017dVi\u00e1\u00bb\u2021t Nam\".as_bytes();\n-        assert_eq!(String::from_utf8_lossy(xs), Slice(\"\u00e0\u00b8\u00a8\u00e0\u00b9\u201e\u00e0\u00b8\u2014\u00e0\u00b8\u00a2\u00e4\u00b8\u00ad\u00e5\u008d\u017dVi\u00e1\u00bb\u2021t Nam\"));\n+        let xs = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".as_bytes();\n+        assert_eq!(String::from_utf8_lossy(xs), Slice(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n \n         let xs = b\"Hello\\xC2 There\\xFF Goodbye\";\n-        assert_eq!(String::from_utf8_lossy(xs), Owned(String::from_str(\"Hello\\uFFFD There\\uFFFD Goodbye\")));\n+        assert_eq!(String::from_utf8_lossy(xs),\n+                   Owned(String::from_str(\"Hello\\uFFFD There\\uFFFD Goodbye\")));\n \n         let xs = b\"Hello\\xC0\\x80 There\\xE6\\x83 Goodbye\";\n         assert_eq!(String::from_utf8_lossy(xs),\n                    Owned(String::from_str(\"Hello\\uFFFD\\uFFFD There\\uFFFD Goodbye\")));\n \n         let xs = b\"\\xF5foo\\xF5\\x80bar\";\n-        assert_eq!(String::from_utf8_lossy(xs), Owned(String::from_str(\"\\uFFFDfoo\\uFFFD\\uFFFDbar\")));\n+        assert_eq!(String::from_utf8_lossy(xs),\n+                   Owned(String::from_str(\"\\uFFFDfoo\\uFFFD\\uFFFDbar\")));\n \n         let xs = b\"\\xF1foo\\xF1\\x80bar\\xF1\\x80\\x80baz\";\n-        assert_eq!(String::from_utf8_lossy(xs), Owned(String::from_str(\"\\uFFFDfoo\\uFFFDbar\\uFFFDbaz\")));\n+        assert_eq!(String::from_utf8_lossy(xs),\n+                   Owned(String::from_str(\"\\uFFFDfoo\\uFFFDbar\\uFFFDbaz\")));\n \n         let xs = b\"\\xF4foo\\xF4\\x80bar\\xF4\\xBFbaz\";\n         assert_eq!(String::from_utf8_lossy(xs),\n@@ -635,21 +639,21 @@ mod tests {\n     #[test]\n     fn test_from_utf16() {\n         let pairs =\n-            [(String::from_str(\"\u00f0\u0090\u008d\u2026\u00f0\u0090\u0152\u00bf\u00f0\u0090\u0152\u00bb\u00f0\u0090\u008d\u2020\u00f0\u0090\u0152\u00b9\u00f0\u0090\u0152\u00bb\u00f0\u0090\u0152\u00b0\\n\"),\n+            [(String::from_str(\"\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\\n\"),\n               vec![0xd800_u16, 0xdf45_u16, 0xd800_u16, 0xdf3f_u16,\n                 0xd800_u16, 0xdf3b_u16, 0xd800_u16, 0xdf46_u16,\n                 0xd800_u16, 0xdf39_u16, 0xd800_u16, 0xdf3b_u16,\n                 0xd800_u16, 0xdf30_u16, 0x000a_u16]),\n \n-             (String::from_str(\"\u00f0\u0090\u0090\u2019\u00f0\u0090\u2018\u2030\u00f0\u0090\u0090\u00ae\u00f0\u0090\u2018\u20ac\u00f0\u0090\u0090\u00b2\u00f0\u0090\u2018\u2039 \u00f0\u0090\u0090\u008f\u00f0\u0090\u0090\u00b2\u00f0\u0090\u2018\u008d\\n\"),\n+             (String::from_str(\"\ud801\udc12\ud801\udc49\ud801\udc2e\ud801\udc40\ud801\udc32\ud801\udc4b \ud801\udc0f\ud801\udc32\ud801\udc4d\\n\"),\n               vec![0xd801_u16, 0xdc12_u16, 0xd801_u16,\n                 0xdc49_u16, 0xd801_u16, 0xdc2e_u16, 0xd801_u16,\n                 0xdc40_u16, 0xd801_u16, 0xdc32_u16, 0xd801_u16,\n                 0xdc4b_u16, 0x0020_u16, 0xd801_u16, 0xdc0f_u16,\n                 0xd801_u16, 0xdc32_u16, 0xd801_u16, 0xdc4d_u16,\n                 0x000a_u16]),\n \n-             (String::from_str(\"\u00f0\u0090\u0152\u20ac\u00f0\u0090\u0152\u2013\u00f0\u0090\u0152\u2039\u00f0\u0090\u0152\u201e\u00f0\u0090\u0152\u2018\u00f0\u0090\u0152\u2030\u00c2\u00b7\u00f0\u0090\u0152\u0152\u00f0\u0090\u0152\u201e\u00f0\u0090\u0152\u2022\u00f0\u0090\u0152\u201e\u00f0\u0090\u0152\u2039\u00f0\u0090\u0152\u2030\u00f0\u0090\u0152\u2018\\n\"),\n+             (String::from_str(\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u00b7\ud800\udf0c\ud800\udf04\ud800\udf15\ud800\udf04\ud800\udf0b\ud800\udf09\ud800\udf11\\n\"),\n               vec![0xd800_u16, 0xdf00_u16, 0xd800_u16, 0xdf16_u16,\n                 0xd800_u16, 0xdf0b_u16, 0xd800_u16, 0xdf04_u16,\n                 0xd800_u16, 0xdf11_u16, 0xd800_u16, 0xdf09_u16,\n@@ -658,7 +662,7 @@ mod tests {\n                 0xdf04_u16, 0xd800_u16, 0xdf0b_u16, 0xd800_u16,\n                 0xdf09_u16, 0xd800_u16, 0xdf11_u16, 0x000a_u16 ]),\n \n-             (String::from_str(\"\u00f0\u0090\u2019\u2039\u00f0\u0090\u2019\u02dc\u00f0\u0090\u2019\u02c6\u00f0\u0090\u2019\u2018\u00f0\u0090\u2019\u203a\u00f0\u0090\u2019\u2019 \u00f0\u0090\u2019\u2022\u00f0\u0090\u2019\u201c \u00f0\u0090\u2019\u02c6\u00f0\u0090\u2019\u0161\u00f0\u0090\u2019\u008d \u00f0\u0090\u2019\u008f\u00f0\u0090\u2019\u0153\u00f0\u0090\u2019\u2019\u00f0\u0090\u2019\u2013\u00f0\u0090\u2019\u2020 \u00f0\u0090\u2019\u2022\u00f0\u0090\u2019\u2020\\n\"),\n+             (String::from_str(\"\ud801\udc8b\ud801\udc98\ud801\udc88\ud801\udc91\ud801\udc9b\ud801\udc92 \ud801\udc95\ud801\udc93 \ud801\udc88\ud801\udc9a\ud801\udc8d \ud801\udc8f\ud801\udc9c\ud801\udc92\ud801\udc96\ud801\udc86 \ud801\udc95\ud801\udc86\\n\"),\n               vec![0xd801_u16, 0xdc8b_u16, 0xd801_u16, 0xdc98_u16,\n                 0xd801_u16, 0xdc88_u16, 0xd801_u16, 0xdc91_u16,\n                 0xd801_u16, 0xdc9b_u16, 0xd801_u16, 0xdc92_u16,\n@@ -718,7 +722,7 @@ mod tests {\n \n         // general\n         assert_eq!(String::from_utf16_lossy([0xD800, 0xd801, 0xdc8b, 0xD800]),\n-                   String::from_str(\"\\uFFFD\u00f0\u0090\u2019\u2039\\uFFFD\"));\n+                   String::from_str(\"\\uFFFD\ud801\udc8b\\uFFFD\"));\n     }\n \n     #[test]\n@@ -852,7 +856,8 @@ mod tests {\n \n     #[bench]\n     fn from_utf8_lossy_100_multibyte(b: &mut Bencher) {\n-        let s = \"\u00f0\u0090\u0152\u20ac\u00f0\u0090\u0152\u2013\u00f0\u0090\u0152\u2039\u00f0\u0090\u0152\u201e\u00f0\u0090\u0152\u2018\u00f0\u0090\u0152\u2030\u00e0\u00b8\u203a\u00e0\u00b8\u00a3\u00d8\u00af\u00d9\u02c6\u00d9\u201e\u00d8\u00a9 \u00d8\u00a7\u00d9\u201e\u00d9\u0192\u00d9\u02c6\u00d9\u0160\u00d8\u00aa\u00e0\u00b8\u2014\u00e0\u00b8\u00a8\u00e0\u00b9\u201e\u00e0\u00b8\u2014\u00e0\u00b8\u00a2\u00e4\u00b8\u00ad\u00e5\u008d\u017d\u00f0\u0090\u008d\u2026\u00f0\u0090\u0152\u00bf\u00f0\u0090\u0152\u00bb\u00f0\u0090\u008d\u2020\u00f0\u0090\u0152\u00b9\u00f0\u0090\u0152\u00bb\u00f0\u0090\u0152\u00b0\".as_bytes();\n+        let s = \"\u00f0\u0090\u0152\u20ac\u00f0\u0090\u0152\u2013\u00f0\u0090\u0152\u2039\u00f0\u0090\u0152\u201e\u00f0\u0090\u0152\u2018\u00f0\u0090\u0152\u2030\u00e0\u00b8\u203a\u00e0\u00b8\u00a3\u00d8\u00af\u00d9\u02c6\u00d9\u201e\u00d8\u00a9\\\n+            \u00d8\u00a7\u00d9\u201e\u00d9\u0192\u00d9\u02c6\u00d9\u0160\u00d8\u00aa\u00e0\u00b8\u2014\u00e0\u00b8\u00a8\u00e0\u00b9\u201e\u00e0\u00b8\u2014\u00e0\u00b8\u00a2\u00e4\u00b8\u00ad\u00e5\u008d\u017d\u00f0\u0090\u008d\u2026\u00f0\u0090\u0152\u00bf\u00f0\u0090\u0152\u00bb\u00f0\u0090\u008d\u2020\u00f0\u0090\u0152\u00b9\u00f0\u0090\u0152\u00bb\u00f0\u0090\u0152\u00b0\".as_bytes();\n         assert_eq!(100, s.len());\n         b.iter(|| {\n             let _ = String::from_utf8_lossy(s);"}, {"sha": "109d32f69b9678342caf8ea463325f0ad6d2b413", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -13,7 +13,6 @@ use std::cmp;\n use std::fmt;\n use std::iter;\n use std::num;\n-use std::str;\n \n /// Static data containing Unicode ranges for general categories and scripts.\n use unicode::regex::{UNICODE_CLASSES, PERLD, PERLS, PERLW};"}, {"sha": "2a606ccd0cee33c976585c75279e1c9bdaee627e", "filename": "src/libregex/test/bench.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibregex%2Ftest%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibregex%2Ftest%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Ftest%2Fbench.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -10,7 +10,6 @@\n #![allow(non_snake_case_functions)]\n \n use std::rand::{Rng, task_rng};\n-use std::str;\n use stdtest::Bencher;\n \n use regex::{Regex, NoExpand};"}, {"sha": "3fd402c90fdd87a7d8e116c4e38ef585191fbaa7", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -20,7 +20,6 @@ use metadata;\n use std::any::AnyRefExt;\n use std::io;\n use std::os;\n-use std::str;\n use std::task::TaskBuilder;\n \n use syntax::ast;"}, {"sha": "87333499ec3a2f2a10b1a2ce32abd8b770a5b4cd", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -35,7 +35,6 @@ use std::hash::Hash;\n use std::hash;\n use std::io::MemWriter;\n use std::mem;\n-use std::str;\n use std::collections::HashMap;\n use syntax::abi;\n use syntax::ast::*;\n@@ -619,7 +618,7 @@ fn encode_visibility(ebml_w: &mut Encoder, visibility: Visibility) {\n         Public => 'y',\n         Inherited => 'i',\n     };\n-    ebml_w.wr_str(ch.to_str().as_slice());\n+    ebml_w.wr_str(ch.to_string().as_slice());\n     ebml_w.end_tag();\n }\n \n@@ -1922,5 +1921,5 @@ pub fn encoded_ty(tcx: &ty::ctxt, t: ty::t) -> String {\n         tcx: tcx,\n         abbrevs: &RefCell::new(HashMap::new())\n     }, t);\n-    str::from_utf8(wr.get_ref()).unwrap().to_string()\n+    String::from_utf8(wr.unwrap()).unwrap()\n }"}, {"sha": "ecdc736790dbeb1a4f7a25ea9088a35b2fd28502", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -13,7 +13,6 @@\n //! This module uses libsyntax's lexer to provide token-based highlighting for\n //! the HTML documentation generated by rustdoc.\n \n-use std::str;\n use std::io;\n \n use syntax::parse;"}, {"sha": "244fada5b9adad07787661991342c9ff2d337020", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -723,9 +723,9 @@ impl<'a> SourceCollector<'a> {\n \n         // Remove the utf-8 BOM if any\n         let contents = if contents.starts_with(\"\\ufeff\") {\n-            contents.as_slice().slice_from(3)\n+            contents.slice_from(3)\n         } else {\n-            contents.as_slice()\n+            contents\n         };\n \n         // Create the intermediate directories"}, {"sha": "2cbac090835edf95b730f2e353cbfc4d3008196c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -29,7 +29,6 @@ extern crate time;\n \n use std::io;\n use std::io::{File, MemWriter};\n-use std::str;\n use std::gc::Gc;\n use serialize::{json, Decodable, Encodable};\n use externalfiles::ExternalHtml;"}, {"sha": "b9c86e2b23586b49b22ad845e677b90ba79002ea", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -19,7 +19,6 @@ use mem;\n use option::{Option, Some, None};\n use slice::{ImmutableVector, MutableVector, Vector};\n use str::{OwnedStr, Str, StrAllocating, StrSlice};\n-use str;\n use string::String;\n use to_str::{IntoStr};\n use vec::Vec;\n@@ -676,8 +675,8 @@ mod tests {\n         while i <= 500 {\n             let upper = if 'a' as u32 <= i && i <= 'z' as u32 { i + 'A' as u32 - 'a' as u32 }\n                         else { i };\n-            assert_eq!((from_u32(i).unwrap()).to_str().as_slice().to_ascii_upper(),\n-                       (from_u32(upper).unwrap()).to_str())\n+            assert_eq!((from_u32(i).unwrap()).to_string().as_slice().to_ascii_upper(),\n+                       (from_u32(upper).unwrap()).to_string())\n             i += 1;\n         }\n     }\n@@ -692,8 +691,8 @@ mod tests {\n         while i <= 500 {\n             let lower = if 'A' as u32 <= i && i <= 'Z' as u32 { i + 'a' as u32 - 'A' as u32 }\n                         else { i };\n-            assert_eq!((from_u32(i).unwrap()).to_str().as_slice().to_ascii_lower(),\n-                       (from_u32(lower).unwrap()).to_str())\n+            assert_eq!((from_u32(i).unwrap()).to_string().as_slice().to_ascii_lower(),\n+                       (from_u32(lower).unwrap()).to_string())\n             i += 1;\n         }\n     }\n@@ -708,8 +707,8 @@ mod tests {\n         while i <= 500 {\n             let upper = if 'a' as u32 <= i && i <= 'z' as u32 { i + 'A' as u32 - 'a' as u32 }\n                         else { i };\n-            assert_eq!((from_u32(i).unwrap()).to_str().into_ascii_upper(),\n-                       (from_u32(upper).unwrap()).to_str())\n+            assert_eq!((from_u32(i).unwrap()).to_string().into_ascii_upper(),\n+                       (from_u32(upper).unwrap()).to_string())\n             i += 1;\n         }\n     }\n@@ -725,8 +724,8 @@ mod tests {\n         while i <= 500 {\n             let lower = if 'A' as u32 <= i && i <= 'Z' as u32 { i + 'a' as u32 - 'A' as u32 }\n                         else { i };\n-            assert_eq!((from_u32(i).unwrap()).to_str().into_ascii_lower(),\n-                       (from_u32(lower).unwrap()).to_str())\n+            assert_eq!((from_u32(i).unwrap()).to_string().into_ascii_lower(),\n+                       (from_u32(lower).unwrap()).to_string())\n             i += 1;\n         }\n     }\n@@ -746,8 +745,8 @@ mod tests {\n             let c = i;\n             let lower = if 'A' as u32 <= c && c <= 'Z' as u32 { c + 'a' as u32 - 'A' as u32 }\n                         else { c };\n-            assert!((from_u32(i).unwrap()).to_str().as_slice().eq_ignore_ascii_case(\n-                    (from_u32(lower).unwrap()).to_str().as_slice()));\n+            assert!((from_u32(i).unwrap()).to_string().as_slice().eq_ignore_ascii_case(\n+                    (from_u32(lower).unwrap()).to_string().as_slice()));\n             i += 1;\n         }\n     }"}, {"sha": "b9c6220c0e2de8751a63880c332264a4e3a75981", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -417,10 +417,7 @@ the `}` character is escaped with `}}`.\n use io::Writer;\n use io;\n use result::{Ok, Err};\n-use str::{Str, StrAllocating};\n-use str;\n use string;\n-use slice::Vector;\n \n pub use core::fmt::{Formatter, Result, FormatWriter, rt};\n pub use core::fmt::{Show, Bool, Char, Signed, Unsigned, Octal, Binary};\n@@ -464,7 +461,7 @@ pub use core::fmt::{secret_pointer};\n pub fn format(args: &Arguments) -> string::String{\n     let mut output = io::MemWriter::new();\n     let _ = write!(&mut output, \"{}\", args);\n-    String::from_utf8(output.unwrap()).unwrap()\n+    string::String::from_utf8(output.unwrap()).unwrap()\n }\n \n impl<'a> Writer for Formatter<'a> {"}, {"sha": "1eee69834948fb24db130a6550d8f9acdef6d6a1", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -14,7 +14,6 @@\n \n use prelude::*;\n \n-use str;\n use fmt;\n use os;\n use io::{IoResult, IoError};"}, {"sha": "96d3b3e3e6a5390fed602624e6ccbe32ce2aad12", "filename": "src/libstd/os.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -151,7 +151,6 @@ pub mod win32 {\n     use slice::{MutableVector, ImmutableVector};\n     use string::String;\n     use str::StrSlice;\n-    use str;\n     use vec::Vec;\n \n     pub fn fill_utf16_buf_and_decode(f: |*mut u16, DWORD| -> DWORD)"}, {"sha": "d01a1b5b1313ccba4d99abb6a816cec6d6194b68", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -992,7 +992,6 @@ mod imp {\n mod test {\n     use prelude::*;\n     use io::MemWriter;\n-    use str;\n \n     macro_rules! t( ($a:expr, $b:expr) => ({\n         let mut m = MemWriter::new();"}, {"sha": "703adcbd335521723e94eb5fd20202a86014b2ec", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -22,7 +22,6 @@ use print::pprust;\n use std::gc::Gc;\n use std::io::File;\n use std::rc::Rc;\n-use std::str;\n \n // These macros all relate to the file system; they either return\n // the column/row/filename of the expression, or they include"}, {"sha": "d524622f8ecf59ad9a36eb22badd0ff88f4dd504", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -30,7 +30,6 @@ use std::gc::Gc;\n use std::io::{IoResult, MemWriter};\n use std::io;\n use std::mem;\n-use std::str;\n \n pub enum AnnNode<'a> {\n     NodeBlock(&'a ast::Block),"}, {"sha": "94ed7fbbf306e02a71b54eb7a24de294eb7b669c", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -14,7 +14,6 @@\n \n use std::collections::HashMap;\n use std::io;\n-use std::str;\n use super::super::TermInfo;\n \n // These are the orders ncurses uses in its compiled format (as of 5.9). Not sure if portable."}, {"sha": "7ad14d797549391cf69e8b554829a08a6c1fa8e5", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -14,7 +14,7 @@\n \n use std::io::File;\n use std::os::getenv;\n-use std::{os, str};\n+use std::os;\n \n /// Return path to database entry for `term`\n pub fn get_dbpath_for_term(term: &str) -> Option<Box<Path>> {\n@@ -59,7 +59,7 @@ pub fn get_dbpath_for_term(term: &str) -> Option<Box<Path>> {\n     // Look for the terminal in all of the search directories\n     for p in dirs_to_search.iter() {\n         if p.exists() {\n-            let f = first_char.to_str();\n+            let f = first_char.to_string();\n             let newp = p.join_many([f.as_slice(), term]);\n             if newp.exists() {\n                 return Some(box newp);"}, {"sha": "51696521165325596e99ad4df8464255dc3699ba", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -457,7 +457,6 @@ mod tests {\n     use stats::write_5_number_summary;\n     use stats::write_boxplot;\n     use std::io;\n-    use std::str;\n     use std::f64;\n \n     macro_rules! assert_approx_eq("}, {"sha": "41ba448754d08fd2efc491fcb41e2dcb1902472c", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -31,7 +31,6 @@ extern crate libc;\n use std::io::BufReader;\n use std::num;\n use std::string::String;\n-use std::str;\n \n static NSEC_PER_SEC: i32 = 1_000_000_000_i32;\n "}, {"sha": "233743175b503f748a19c41251febe8dcf2e1474", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -81,7 +81,6 @@ use std::num::FromStrRadix;\n use std::rand;\n use std::rand::Rng;\n use std::slice;\n-use std::str;\n \n use serialize::{Encoder, Encodable, Decoder, Decodable};\n "}, {"sha": "84f303de7057b43ffc1efff1e7a9cefb07206b9f", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584fbde5d1f9e0048592b44195263dfea0ee8231/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=584fbde5d1f9e0048592b44195263dfea0ee8231", "patch": "@@ -20,7 +20,6 @@\n // Extern mod controls linkage. Use controls the visibility of names to modules that are\n // already linked in. Using WriterUtil allows us to use the write_line method.\n \n-use std::str;\n use std::slice;\n use std::fmt;\n "}]}