{"sha": "ed430ca5feaffeeb78f16198f3a7df21a51903ee", "node_id": "C_kwDOAAsO6NoAKGVkNDMwY2E1ZmVhZmZlZWI3OGYxNjE5OGYzYTdkZjIxYTUxOTAzZWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-21T22:14:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-21T22:14:02Z"}, "message": "Rollup merge of #103351 - oli-obk:tilde_const_impls, r=fee1-dead\n\nRequire Drop impls to have the same constness on its bounds as the bounds on the struct have\n\nr? ``@fee1-dead``", "tree": {"sha": "40994b0885e6885fff9136c29f8cdc8129986abb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40994b0885e6885fff9136c29f8cdc8129986abb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed430ca5feaffeeb78f16198f3a7df21a51903ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjUxmqCRBK7hj4Ov3rIwAAdegIAG3mWbLjZU36VXNjqkIAuWqx\nITMB+gdSTY2RKaXssB1c5V0izwRQuvV7vTUx0pCu/wP7lXv6sA+qnTPD9BxIMt7H\nk+oB2peYlScx+sMbqrnD1M/8cpKAYAcAUE9ZJQDnQYtrebiHybb3OLP9HOC1vY/S\nEfCenl2oJMg7BVsoV80MCe1Boi3nNuAgIPGV/NkiVp2GtR4hUUYYtbDZapAsh1Op\nu/rx5uc523VHJi0h+18LuEVWrJh7cpx7/cRMB3DfDvws/8ZQH6eiPXEbWu1TL/0K\nKLtLQVKwgGAAzNF34+T0JxZVwA2rX3U2OUxSzxKALNBNWldJZbNR4MxHnraUzfo=\n=Iir2\n-----END PGP SIGNATURE-----\n", "payload": "tree 40994b0885e6885fff9136c29f8cdc8129986abb\nparent db4696a546caa4fe216b37ee5d858e2592528d48\nparent d6cf8934db2af8b56f37b235c5aa66593d1eb22c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666390442 +0200\ncommitter GitHub <noreply@github.com> 1666390442 +0200\n\nRollup merge of #103351 - oli-obk:tilde_const_impls, r=fee1-dead\n\nRequire Drop impls to have the same constness on its bounds as the bounds on the struct have\n\nr? ``@fee1-dead``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed430ca5feaffeeb78f16198f3a7df21a51903ee", "html_url": "https://github.com/rust-lang/rust/commit/ed430ca5feaffeeb78f16198f3a7df21a51903ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed430ca5feaffeeb78f16198f3a7df21a51903ee/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db4696a546caa4fe216b37ee5d858e2592528d48", "url": "https://api.github.com/repos/rust-lang/rust/commits/db4696a546caa4fe216b37ee5d858e2592528d48", "html_url": "https://github.com/rust-lang/rust/commit/db4696a546caa4fe216b37ee5d858e2592528d48"}, {"sha": "d6cf8934db2af8b56f37b235c5aa66593d1eb22c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6cf8934db2af8b56f37b235c5aa66593d1eb22c", "html_url": "https://github.com/rust-lang/rust/commit/d6cf8934db2af8b56f37b235c5aa66593d1eb22c"}], "stats": {"total": 221, "additions": 119, "deletions": 102}, "files": [{"sha": "6e5ba556ef0793570719f30e9dc54328d0551f99", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 49, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ed430ca5feaffeeb78f16198f3a7df21a51903ee/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed430ca5feaffeeb78f16198f3a7df21a51903ee/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=ed430ca5feaffeeb78f16198f3a7df21a51903ee", "patch": "@@ -252,20 +252,6 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn visit_struct_field_def(&mut self, field: &'a FieldDef) {\n-        if let Some(ident) = field.ident {\n-            if ident.name == kw::Underscore {\n-                self.visit_vis(&field.vis);\n-                self.visit_ident(ident);\n-                self.visit_ty_common(&field.ty);\n-                self.walk_ty(&field.ty);\n-                walk_list!(self, visit_attribute, &field.attrs);\n-                return;\n-            }\n-        }\n-        self.visit_field_def(field);\n-    }\n-\n     fn err_handler(&self) -> &rustc_errors::Handler {\n         &self.session.diagnostic()\n     }\n@@ -1006,8 +992,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_lifetime(self, lifetime);\n     }\n \n-    fn visit_field_def(&mut self, s: &'a FieldDef) {\n-        visit::walk_field_def(self, s)\n+    fn visit_field_def(&mut self, field: &'a FieldDef) {\n+        visit::walk_field_def(self, field)\n     }\n \n     fn visit_item(&mut self, item: &'a Item) {\n@@ -1195,42 +1181,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.check_mod_file_item_asciionly(item.ident);\n                 }\n             }\n-            ItemKind::Struct(ref vdata, ref generics) => match vdata {\n-                // Duplicating the `Visitor` logic allows catching all cases\n-                // of `Anonymous(Struct, Union)` outside of a field struct or union.\n-                //\n-                // Inside `visit_ty` the validator catches every `Anonymous(Struct, Union)` it\n-                // encounters, and only on `ItemKind::Struct` and `ItemKind::Union`\n-                // it uses `visit_ty_common`, which doesn't contain that specific check.\n-                VariantData::Struct(ref fields, ..) => {\n-                    self.visit_vis(&item.vis);\n-                    self.visit_ident(item.ident);\n-                    self.visit_generics(generics);\n-                    self.with_banned_assoc_ty_bound(|this| {\n-                        walk_list!(this, visit_struct_field_def, fields);\n-                    });\n-                    walk_list!(self, visit_attribute, &item.attrs);\n-                    return;\n-                }\n-                _ => {}\n-            },\n-            ItemKind::Union(ref vdata, ref generics) => {\n+            ItemKind::Union(ref vdata, ..) => {\n                 if vdata.fields().is_empty() {\n                     self.err_handler().span_err(item.span, \"unions cannot have zero fields\");\n                 }\n-                match vdata {\n-                    VariantData::Struct(ref fields, ..) => {\n-                        self.visit_vis(&item.vis);\n-                        self.visit_ident(item.ident);\n-                        self.visit_generics(generics);\n-                        self.with_banned_assoc_ty_bound(|this| {\n-                            walk_list!(this, visit_struct_field_def, fields);\n-                        });\n-                        walk_list!(self, visit_attribute, &item.attrs);\n-                        return;\n-                    }\n-                    _ => {}\n-                }\n             }\n             ItemKind::Const(def, .., None) => {\n                 self.check_defaultness(item.span, def);"}, {"sha": "3d55ffc595f5369b8df7752b5152ff18d684555b", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed430ca5feaffeeb78f16198f3a7df21a51903ee/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed430ca5feaffeeb78f16198f3a7df21a51903ee/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=ed430ca5feaffeeb78f16198f3a7df21a51903ee", "patch": "@@ -184,13 +184,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n             let p = p.kind();\n             match (predicate.skip_binder(), p.skip_binder()) {\n                 (ty::PredicateKind::Trait(a), ty::PredicateKind::Trait(b)) => {\n-                    // Since struct predicates cannot have ~const, project the impl predicate\n-                    // onto one that ignores the constness. This is equivalent to saying that\n-                    // we match a `Trait` bound on the struct with a `Trait` or `~const Trait`\n-                    // in the impl.\n-                    let non_const_a =\n-                        ty::TraitPredicate { constness: ty::BoundConstness::NotConst, ..a };\n-                    relator.relate(predicate.rebind(non_const_a), p.rebind(b)).is_ok()\n+                    relator.relate(predicate.rebind(a), p.rebind(b)).is_ok()\n                 }\n                 (ty::PredicateKind::Projection(a), ty::PredicateKind::Projection(b)) => {\n                     relator.relate(predicate.rebind(a), p.rebind(b)).is_ok()"}, {"sha": "796c0d388eaf04226d67b1c94e4647bb9b751a05", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 43, "deletions": 22, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ed430ca5feaffeeb78f16198f3a7df21a51903ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed430ca5feaffeeb78f16198f3a7df21a51903ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=ed430ca5feaffeeb78f16198f3a7df21a51903ee", "patch": "@@ -45,34 +45,55 @@ note: required by a bound in `check`\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n \n-error[E0277]: the trait bound `ConstDropImplWithBounds<NonTrivialDrop>: ~const Destruct` is not satisfied\n+error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n+  --> $DIR/const-drop-fail.rs:48:47\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |     ----------------------------------------- ^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail.rs:48:47\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |                                               ^^^^^^^^^^^\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:35\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n+  --> $DIR/const-drop-fail.rs:48:5\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+   |\n+note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n   --> $DIR/const-drop-fail.rs:48:5\n    |\n-LL |         const _: () = check($exp);\n-   |                       ----- required by a bound introduced by this call\n-...\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `ConstDropImplWithBounds<NonTrivialDrop>`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:35\n    |\n-note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n-  --> $DIR/const-drop-fail.rs:29:25\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error[E0367]: `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n+  --> $DIR/const-drop-fail.rs:55:9\n    |\n-LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n-   |                         ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: 1 redundant requirement hidden\n-   = note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n-note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:35:19\n+LL | impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n+   |         ^^^^^^^^\n    |\n-LL | const fn check<T: ~const Destruct>(_: T) {}\n-   |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n-help: consider borrowing here\n+note: the implementor must specify the same requirement\n+  --> $DIR/const-drop-fail.rs:53:1\n    |\n-LL |     &ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     +\n-LL |     &mut ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ++++\n+LL | struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0367.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "d36c7f81ced8cf7b98c06760fffe88b71d564eb4", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed430ca5feaffeeb78f16198f3a7df21a51903ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed430ca5feaffeeb78f16198f3a7df21a51903ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs?ref=ed430ca5feaffeeb78f16198f3a7df21a51903ee", "patch": "@@ -24,7 +24,7 @@ trait A { fn a() { } }\n \n impl A for NonTrivialDrop {}\n \n-struct ConstDropImplWithBounds<T: A>(PhantomData<T>);\n+struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n \n impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n     fn drop(&mut self) {\n@@ -47,6 +47,16 @@ check_all! {\n     //~^ ERROR can't drop\n     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n     //~^ ERROR the trait bound\n+    //~| ERROR the trait bound\n+}\n+\n+struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n+\n+impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n+//~^ ERROR `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n+    fn drop(&mut self) {\n+        T::a();\n+    }\n }\n \n fn main() {}"}, {"sha": "796c0d388eaf04226d67b1c94e4647bb9b751a05", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 43, "deletions": 22, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ed430ca5feaffeeb78f16198f3a7df21a51903ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed430ca5feaffeeb78f16198f3a7df21a51903ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=ed430ca5feaffeeb78f16198f3a7df21a51903ee", "patch": "@@ -45,34 +45,55 @@ note: required by a bound in `check`\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n \n-error[E0277]: the trait bound `ConstDropImplWithBounds<NonTrivialDrop>: ~const Destruct` is not satisfied\n+error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n+  --> $DIR/const-drop-fail.rs:48:47\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |     ----------------------------------------- ^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail.rs:48:47\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |                                               ^^^^^^^^^^^\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:35\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n+  --> $DIR/const-drop-fail.rs:48:5\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+   |\n+note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n   --> $DIR/const-drop-fail.rs:48:5\n    |\n-LL |         const _: () = check($exp);\n-   |                       ----- required by a bound introduced by this call\n-...\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `ConstDropImplWithBounds<NonTrivialDrop>`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:35\n    |\n-note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n-  --> $DIR/const-drop-fail.rs:29:25\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error[E0367]: `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n+  --> $DIR/const-drop-fail.rs:55:9\n    |\n-LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n-   |                         ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: 1 redundant requirement hidden\n-   = note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n-note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:35:19\n+LL | impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n+   |         ^^^^^^^^\n    |\n-LL | const fn check<T: ~const Destruct>(_: T) {}\n-   |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n-help: consider borrowing here\n+note: the implementor must specify the same requirement\n+  --> $DIR/const-drop-fail.rs:53:1\n    |\n-LL |     &ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     +\n-LL |     &mut ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ++++\n+LL | struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0367.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "b0fc3adf984a48c240678357962e2f9bdcda22ff", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed430ca5feaffeeb78f16198f3a7df21a51903ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed430ca5feaffeeb78f16198f3a7df21a51903ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs?ref=ed430ca5feaffeeb78f16198f3a7df21a51903ee", "patch": "@@ -60,7 +60,7 @@ mod t {\n         fn foo() {}\n     }\n \n-    pub struct ConstDropWithBound<T: SomeTrait>(pub core::marker::PhantomData<T>);\n+    pub struct ConstDropWithBound<T: ~const SomeTrait>(pub core::marker::PhantomData<T>);\n \n     impl<T: ~const SomeTrait> const Drop for ConstDropWithBound<T> {\n         fn drop(&mut self) {"}, {"sha": "285cef571f332329098c109b7f38f5d8acac8db2", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde_const_on_impl_bound.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ed430ca5feaffeeb78f16198f3a7df21a51903ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde_const_on_impl_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed430ca5feaffeeb78f16198f3a7df21a51903ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde_const_on_impl_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde_const_on_impl_bound.rs?ref=ed430ca5feaffeeb78f16198f3a7df21a51903ee", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+#![feature(const_trait_impl)]\n+\n+#[const_trait]\n+trait Foo {\n+    fn foo(&self) {}\n+}\n+\n+struct Bar<T>(T);\n+\n+impl<T: ~const Foo> Bar<T> {\n+    const fn foo(&self) {\n+        self.0.foo()\n+    }\n+}\n+\n+fn main() {}"}]}