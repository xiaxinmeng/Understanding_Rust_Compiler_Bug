{"sha": "7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "node_id": "C_kwDOAAsO6NoAKDdhODYzNmM4NDNiZDI0MDM4ZmUxZDFmNjliNGE4ZTRiMGVhNTVkNGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-22T04:22:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-22T04:22:24Z"}, "message": "Auto merge of #100982 - fee1-dead-contrib:const-impl-requires-const-trait, r=oli-obk\n\nRequire `#[const_trait]` on `Trait` for `impl const Trait`\n\nr? `@oli-obk`", "tree": {"sha": "242508adbaeccdb47f57c20a90717945a433130a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/242508adbaeccdb47f57c20a90717945a433130a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "html_url": "https://github.com/rust-lang/rust/commit/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "html_url": "https://github.com/rust-lang/rust/commit/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8"}, {"sha": "898c76cd8257ffd91e9de9714215ece477e1065b", "url": "https://api.github.com/repos/rust-lang/rust/commits/898c76cd8257ffd91e9de9714215ece477e1065b", "html_url": "https://github.com/rust-lang/rust/commit/898c76cd8257ffd91e9de9714215ece477e1065b"}], "stats": {"total": 676, "additions": 432, "deletions": 244}, "files": [{"sha": "d03f036964857d2434a20e4794a0d659a32c4c48", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -428,12 +428,18 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n             }\n \n             if let ty::FnDef(def_id, substs) = *constant.literal.ty().kind() {\n+                // const_trait_impl: use a non-const param env when checking that a FnDef type is well formed.\n+                // this is because the well-formedness of the function does not need to be proved to have `const`\n+                // impls for trait bounds.\n                 let instantiated_predicates = tcx.predicates_of(def_id).instantiate(tcx, substs);\n+                let prev = self.cx.param_env;\n+                self.cx.param_env = prev.without_const();\n                 self.cx.normalize_and_prove_instantiated_predicates(\n                     def_id,\n                     instantiated_predicates,\n                     locations,\n                 );\n+                self.cx.param_env = prev;\n             }\n         }\n     }"}, {"sha": "fb35399fa3aeca0759ccc09099b5ca94e473552b", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -13,8 +13,11 @@ use rustc_middle::ty::{self, adjustment::PointerCast, Instance, InstanceDef, Ty,\n use rustc_middle::ty::{Binder, TraitPredicate, TraitRef, TypeVisitable};\n use rustc_mir_dataflow::{self, Analysis};\n use rustc_span::{sym, Span, Symbol};\n-use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n-use rustc_trait_selection::traits::SelectionContext;\n+use rustc_trait_selection::infer::InferCtxtExt;\n+use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n+use rustc_trait_selection::traits::{\n+    self, ObligationCauseCode, SelectionContext, TraitEngine, TraitEngineExt,\n+};\n \n use std::mem;\n use std::ops::Deref;\n@@ -739,6 +742,43 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                         selcx.select(&obligation)\n                     });\n \n+                    // do a well-formedness check on the trait method being called. This is because typeck only does a\n+                    // \"non-const\" check. This is required for correctness here.\n+                    tcx.infer_ctxt().enter(|infcx| {\n+                        let mut fulfill_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);\n+                        let predicates = tcx.predicates_of(callee).instantiate(tcx, substs);\n+                        let hir_id = tcx\n+                            .hir()\n+                            .local_def_id_to_hir_id(self.body.source.def_id().expect_local());\n+                        let cause = || {\n+                            ObligationCause::new(\n+                                terminator.source_info.span,\n+                                hir_id,\n+                                ObligationCauseCode::ItemObligation(callee),\n+                            )\n+                        };\n+                        let normalized = infcx.partially_normalize_associated_types_in(\n+                            cause(),\n+                            param_env,\n+                            predicates,\n+                        );\n+\n+                        for p in normalized.obligations {\n+                            fulfill_cx.register_predicate_obligation(&infcx, p);\n+                        }\n+                        for obligation in traits::predicates_for_generics(\n+                            |_, _| cause(),\n+                            self.param_env,\n+                            normalized.value,\n+                        ) {\n+                            fulfill_cx.register_predicate_obligation(&infcx, obligation);\n+                        }\n+                        let errors = fulfill_cx.select_all_or_error(&infcx);\n+                        if !errors.is_empty() {\n+                            infcx.report_fulfillment_errors(&errors, None, false);\n+                        }\n+                    });\n+\n                     match implsrc {\n                         Ok(Some(ImplSource::Param(_, ty::BoundConstness::ConstIfConst))) => {\n                             debug!("}, {"sha": "700d9dab64be760343ebe29379cd44cc741392e6", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -468,7 +468,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // RFC 2632\n     gated!(\n         const_trait, Normal, template!(Word), WarnFollowing, const_trait_impl,\n-        \"`const` is a temporary placeholder for marking a trait that is suitable for `const` \\\n+        \"`const_trait` is a temporary placeholder for marking a trait that is suitable for `const` \\\n         `impls` and all default bodies as `const`, which may be removed or renamed in the \\\n         future.\"\n     ),"}, {"sha": "da3b45a4d6b743a6325c4f49a955d9b42bd176a7", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -67,6 +67,14 @@ impl<'tcx> PredicateObligation<'tcx> {\n             recursion_depth: self.recursion_depth,\n         })\n     }\n+\n+    pub fn without_const(mut self, tcx: TyCtxt<'tcx>) -> PredicateObligation<'tcx> {\n+        self.param_env = self.param_env.without_const();\n+        if let ty::PredicateKind::Trait(trait_pred) = self.predicate.kind().skip_binder() && trait_pred.is_const_if_const() {\n+            self.predicate = tcx.mk_predicate(self.predicate.kind().map_bound(|_| ty::PredicateKind::Trait(trait_pred.without_const())));\n+        }\n+        self\n+    }\n }\n \n impl<'tcx> TraitObligation<'tcx> {"}, {"sha": "982aacc768696cba75d65bad6cf291d170004929", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -861,6 +861,11 @@ impl<'tcx> TraitPredicate<'tcx> {\n             (BoundConstness::ConstIfConst, hir::Constness::NotConst) => false,\n         }\n     }\n+\n+    pub fn without_const(mut self) -> Self {\n+        self.constness = BoundConstness::NotConst;\n+        self\n+    }\n }\n \n impl<'tcx> PolyTraitPredicate<'tcx> {"}, {"sha": "4062862ad747c775b2688a09b7d49e4847aa4426", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -192,6 +192,28 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n+        let tcx = self.tcx;\n+        if let hir::ItemKind::Impl(hir::Impl {\n+            constness: hir::Constness::Const,\n+            of_trait: Some(trait_ref),\n+            ..\n+        }) = item.kind\n+        {\n+            let def_id = trait_ref.trait_def_id().unwrap();\n+            let source_map = tcx.sess.source_map();\n+            if !tcx.has_attr(def_id, sym::const_trait) {\n+                tcx.sess\n+                    .struct_span_err(\n+                        source_map.guess_head_span(item.span),\n+                        \"const `impl`s must be for traits marked with `#[const_trait]`\",\n+                    )\n+                    .span_note(\n+                        source_map.guess_head_span(tcx.def_span(def_id)),\n+                        \"this trait must be annotated with `#[const_trait]`\",\n+                    )\n+                    .emit();\n+            }\n+        }\n         intravisit::walk_item(self, item);\n     }\n "}, {"sha": "8da68c225d8e7ffcb4126ebc2e0f6ffa6d402880", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -129,7 +129,7 @@ pub fn predicates_for_generics<'tcx>(\n         move |(idx, (predicate, span))| Obligation {\n             cause: cause(idx, span),\n             recursion_depth: 0,\n-            param_env: param_env,\n+            param_env,\n             predicate,\n         },\n     )"}, {"sha": "9722b48a68ab6b869e17104d39961716b870343a", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -392,7 +392,8 @@ impl<'tcx> WfPredicates<'tcx> {\n         //     `i32: Clone`\n         //     `i32: Copy`\n         // ]\n-        let obligations = self.nominal_obligations(data.item_def_id, data.substs);\n+        // Projection types do not require const predicates.\n+        let obligations = self.nominal_obligations_without_const(data.item_def_id, data.substs);\n         self.out.extend(obligations);\n \n         let tcx = self.tcx();"}, {"sha": "4522678802ba9b76c324824c8037510c01b76903", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1406,23 +1406,50 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         })\n     }\n \n-    #[instrument(level = \"debug\", skip(self, code, span, def_id, substs))]\n+    #[instrument(level = \"debug\", skip(self, code, span, substs))]\n     fn add_required_obligations_with_code(\n         &self,\n         span: Span,\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n         code: impl Fn(usize, Span) -> ObligationCauseCode<'tcx>,\n     ) {\n+        let param_env = self.param_env;\n+\n+        let remap = match self.tcx.def_kind(def_id) {\n+            // Associated consts have `Self: ~const Trait` bounds that should be satisfiable when\n+            // `Self: Trait` is satisfied because it does not matter whether the impl is `const`.\n+            // Therefore we have to remap the param env here to be non-const.\n+            hir::def::DefKind::AssocConst => true,\n+            hir::def::DefKind::AssocFn\n+                if self.tcx.def_kind(self.tcx.parent(def_id)) == hir::def::DefKind::Trait =>\n+            {\n+                // N.B.: All callsites to this function involve checking a path expression.\n+                //\n+                // When instantiating a trait method as a function item, it does not actually matter whether\n+                // the trait is `const` or not, or whether `where T: ~const Tr` needs to be satisfied as\n+                // `const`. If we were to introduce instantiating trait methods as `const fn`s, we would\n+                // check that after this, either via a bound `where F: ~const FnOnce` or when coercing to a\n+                // `const fn` pointer.\n+                //\n+                // FIXME(fee1-dead) FIXME(const_trait_impl): update this doc when trait methods can satisfy\n+                // `~const FnOnce` or can be coerced to `const fn` pointer.\n+                true\n+            }\n+            _ => false,\n+        };\n         let (bounds, _) = self.instantiate_bounds(span, def_id, &substs);\n \n-        for obligation in traits::predicates_for_generics(\n+        for mut obligation in traits::predicates_for_generics(\n             |idx, predicate_span| {\n                 traits::ObligationCause::new(span, self.body_id, code(idx, predicate_span))\n             },\n-            self.param_env,\n+            param_env,\n             bounds,\n         ) {\n+            if remap {\n+                obligation = obligation.without_const(self.tcx);\n+            }\n             self.register_predicate(obligation);\n         }\n     }"}, {"sha": "1a4c888a5a4945f20d7fc266bb6fa901ef0d8646", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -366,7 +366,7 @@ fn typeck_with_fallback<'tcx>(\n \n     let typeck_results = Inherited::build(tcx, def_id).enter(|inh| {\n         let param_env = tcx.param_env(def_id);\n-        let fcx = if let Some(hir::FnSig { header, decl, .. }) = fn_sig {\n+        let mut fcx = if let Some(hir::FnSig { header, decl, .. }) = fn_sig {\n             let fn_sig = if crate::collect::get_infer_ret_ty(&decl.output).is_some() {\n                 let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n                 <dyn AstConv<'_>>::ty_of_fn(&fcx, id, header.unsafety, header.abi, decl, None, None)\n@@ -459,7 +459,11 @@ fn typeck_with_fallback<'tcx>(\n \n         // Closure and generator analysis may run after fallback\n         // because they don't constrain other type variables.\n+        // Closure analysis only runs on closures. Therefore they only need to fulfill non-const predicates (as of now)\n+        let prev_constness = fcx.param_env.constness();\n+        fcx.param_env = fcx.param_env.without_const();\n         fcx.closure_analyze(body);\n+        fcx.param_env = fcx.param_env.with_constness(prev_constness);\n         assert!(fcx.deferred_call_resolutions.borrow().is_empty());\n         // Before the generator analysis, temporary scopes shall be marked to provide more\n         // precise information on types to be captured."}, {"sha": "0aff1323f976e5fcf9fb75345d1be0a0fcf1c63d", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -2037,8 +2037,7 @@ impl<T: ?Sized, A: Allocator> AsMut<T> for Box<T, A> {\n  *  could have a method to project a Pin<T> from it.\n  */\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n-#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n-impl<T: ?Sized, A: Allocator> const Unpin for Box<T, A> where A: 'static {}\n+impl<T: ?Sized, A: Allocator> Unpin for Box<T, A> where A: 'static {}\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator<R> + Unpin, R, A: Allocator> Generator<R> for Box<G, A>"}, {"sha": "615531574786b521e75fd0b0b626b6adbcf319a8", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -107,6 +107,7 @@ impl fmt::Display for AllocError {\n ///\n /// [*currently allocated*]: #currently-allocated-memory\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+#[const_trait]\n pub unsafe trait Allocator {\n     /// Attempts to allocate a block of memory.\n     ///"}, {"sha": "fdd56cb4eaa8e462dab96f6816813b9812df2f81", "filename": "library/core/src/borrow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fborrow.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -154,6 +154,7 @@\n /// [`String`]: ../../std/string/struct.String.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"Borrow\"]\n+#[const_trait]\n pub trait Borrow<Borrowed: ?Sized> {\n     /// Immutably borrows from an owned value.\n     ///\n@@ -184,6 +185,7 @@ pub trait Borrow<Borrowed: ?Sized> {\n /// an underlying type by providing a mutable reference. See [`Borrow<T>`]\n /// for more information on borrowing as another type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[const_trait]\n pub trait BorrowMut<Borrowed: ?Sized>: Borrow<Borrowed> {\n     /// Mutably borrows from an owned value.\n     ///"}, {"sha": "50b8264bac72a2d3e8f4696f2027dc0622d4d4ba", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -204,20 +204,10 @@ use self::Ordering::*;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(alias = \"==\")]\n #[doc(alias = \"!=\")]\n-#[cfg_attr(\n-    bootstrap,\n-    rustc_on_unimplemented(\n-        message = \"can't compare `{Self}` with `{Rhs}`\",\n-        label = \"no implementation for `{Self} == {Rhs}`\"\n-    )\n-)]\n-#[cfg_attr(\n-    not(bootstrap),\n-    rustc_on_unimplemented(\n-        message = \"can't compare `{Self}` with `{Rhs}`\",\n-        label = \"no implementation for `{Self} == {Rhs}`\",\n-        append_const_msg,\n-    )\n+#[rustc_on_unimplemented(\n+    message = \"can't compare `{Self}` with `{Rhs}`\",\n+    label = \"no implementation for `{Self} == {Rhs}`\",\n+    append_const_msg\n )]\n #[const_trait]\n #[rustc_diagnostic_item = \"PartialEq\"]\n@@ -1076,20 +1066,10 @@ impl const PartialOrd for Ordering {\n #[doc(alias = \"<\")]\n #[doc(alias = \"<=\")]\n #[doc(alias = \">=\")]\n-#[cfg_attr(\n-    bootstrap,\n-    rustc_on_unimplemented(\n-        message = \"can't compare `{Self}` with `{Rhs}`\",\n-        label = \"no implementation for `{Self} < {Rhs}` and `{Self} > {Rhs}`\",\n-    )\n-)]\n-#[cfg_attr(\n-    not(bootstrap),\n-    rustc_on_unimplemented(\n-        message = \"can't compare `{Self}` with `{Rhs}`\",\n-        label = \"no implementation for `{Self} < {Rhs}` and `{Self} > {Rhs}`\",\n-        append_const_msg,\n-    )\n+#[rustc_on_unimplemented(\n+    message = \"can't compare `{Self}` with `{Rhs}`\",\n+    label = \"no implementation for `{Self} < {Rhs}` and `{Self} > {Rhs}`\",\n+    append_const_msg\n )]\n #[const_trait]\n #[rustc_diagnostic_item = \"PartialOrd\"]"}, {"sha": "0480704a6d6fa2408a92b5a279689c8475339621", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -155,6 +155,7 @@ pub const fn identity<T>(x: T) -> T {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"AsRef\")]\n+#[const_trait]\n pub trait AsRef<T: ?Sized> {\n     /// Converts this type into a shared reference of the (usually inferred) input type.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -197,6 +198,7 @@ pub trait AsRef<T: ?Sized> {\n /// [`Box<T>`]: ../../std/boxed/struct.Box.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"AsMut\")]\n+#[const_trait]\n pub trait AsMut<T: ?Sized> {\n     /// Converts this type into a mutable reference of the (usually inferred) input type.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -273,6 +275,7 @@ pub trait AsMut<T: ?Sized> {\n /// [`Vec`]: ../../std/vec/struct.Vec.html\n #[rustc_diagnostic_item = \"Into\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[const_trait]\n pub trait Into<T>: Sized {\n     /// Converts this type into the (usually inferred) input type.\n     #[must_use]\n@@ -368,6 +371,7 @@ pub trait Into<T>: Sized {\n     all(_Self = \"&str\", T = \"std::string::String\"),\n     note = \"to coerce a `{T}` into a `{Self}`, use `&*` as a prefix\",\n ))]\n+#[const_trait]\n pub trait From<T>: Sized {\n     /// Converts to this type from the input type.\n     #[lang = \"from\"]\n@@ -392,6 +396,7 @@ pub trait From<T>: Sized {\n /// [`Into`], see there for details.\n #[rustc_diagnostic_item = \"TryInto\"]\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n+#[const_trait]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error.\n     #[stable(feature = \"try_from\", since = \"1.34.0\")]\n@@ -468,6 +473,7 @@ pub trait TryInto<T>: Sized {\n /// [`try_from`]: TryFrom::try_from\n #[rustc_diagnostic_item = \"TryFrom\"]\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n+#[const_trait]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n     #[stable(feature = \"try_from\", since = \"1.34.0\")]"}, {"sha": "a5b4e965552c03cf8443cd5fdd7735bb9e789510", "filename": "library/core/src/default.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fdefault.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -99,6 +99,7 @@\n /// ```\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Default\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(bootstrap), const_trait)]\n pub trait Default: Sized {\n     /// Returns the \"default value\" for a type.\n     ///"}, {"sha": "e598a54b4f151d8618f0b8e6388491a2484c8504", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -228,6 +228,7 @@ pub trait FromIterator<A>: Sized {\n #[rustc_diagnostic_item = \"IntoIterator\"]\n #[rustc_skip_array_during_method_dispatch]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[const_trait]\n pub trait IntoIterator {\n     /// The type of the elements being iterated over.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "21775c0a6ab0bcc8c73bb3f38a665d3a32cfe173", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -141,6 +141,7 @@\n #![feature(const_str_from_utf8_unchecked_mut)]\n #![feature(const_swap)]\n #![feature(const_trait_impl)]\n+#![feature(const_try)]\n #![feature(const_type_id)]\n #![feature(const_type_name)]\n #![feature(const_default_impls)]"}, {"sha": "75c52d3ecfc8bd56d7350362d90c5dff4e58ea55", "filename": "library/core/src/ops/arith.rs", "status": "modified", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Farith.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -65,38 +65,15 @@\n /// ```\n #[lang = \"add\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(\n-    bootstrap,\n-    rustc_on_unimplemented(\n-        on(\n-            all(_Self = \"{integer}\", Rhs = \"{float}\"),\n-            message = \"cannot add a float to an integer\",\n-        ),\n-        on(\n-            all(_Self = \"{float}\", Rhs = \"{integer}\"),\n-            message = \"cannot add an integer to a float\",\n-        ),\n-        message = \"cannot add `{Rhs}` to `{Self}`\",\n-        label = \"no implementation for `{Self} + {Rhs}`\"\n-    )\n-)]\n-#[cfg_attr(\n-    not(bootstrap),\n-    rustc_on_unimplemented(\n-        on(\n-            all(_Self = \"{integer}\", Rhs = \"{float}\"),\n-            message = \"cannot add a float to an integer\",\n-        ),\n-        on(\n-            all(_Self = \"{float}\", Rhs = \"{integer}\"),\n-            message = \"cannot add an integer to a float\",\n-        ),\n-        message = \"cannot add `{Rhs}` to `{Self}`\",\n-        label = \"no implementation for `{Self} + {Rhs}`\",\n-        append_const_msg,\n-    )\n+#[rustc_on_unimplemented(\n+    on(all(_Self = \"{integer}\", Rhs = \"{float}\"), message = \"cannot add a float to an integer\",),\n+    on(all(_Self = \"{float}\", Rhs = \"{integer}\"), message = \"cannot add an integer to a float\",),\n+    message = \"cannot add `{Rhs}` to `{Self}`\",\n+    label = \"no implementation for `{Self} + {Rhs}`\",\n+    append_const_msg\n )]\n #[doc(alias = \"+\")]\n+#[const_trait]\n pub trait Add<Rhs = Self> {\n     /// The resulting type after applying the `+` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -201,9 +178,11 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n     message = \"cannot subtract `{Rhs}` from `{Self}`\",\n-    label = \"no implementation for `{Self} - {Rhs}`\"\n+    label = \"no implementation for `{Self} - {Rhs}`\",\n+    append_const_msg\n )]\n #[doc(alias = \"-\")]\n+#[const_trait]\n pub trait Sub<Rhs = Self> {\n     /// The resulting type after applying the `-` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -333,6 +312,7 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n     label = \"no implementation for `{Self} * {Rhs}`\"\n )]\n #[doc(alias = \"*\")]\n+#[const_trait]\n pub trait Mul<Rhs = Self> {\n     /// The resulting type after applying the `*` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -466,6 +446,7 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n     label = \"no implementation for `{Self} / {Rhs}`\"\n )]\n #[doc(alias = \"/\")]\n+#[const_trait]\n pub trait Div<Rhs = Self> {\n     /// The resulting type after applying the `/` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -568,6 +549,7 @@ div_impl_float! { f32 f64 }\n     label = \"no implementation for `{Self} % {Rhs}`\"\n )]\n #[doc(alias = \"%\")]\n+#[const_trait]\n pub trait Rem<Rhs = Self> {\n     /// The resulting type after applying the `%` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -682,6 +664,7 @@ rem_impl_float! { f32 f64 }\n #[lang = \"neg\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(alias = \"-\")]\n+#[const_trait]\n pub trait Neg {\n     /// The resulting type after applying the `-` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -755,6 +738,7 @@ neg_impl! { isize i8 i16 i32 i64 i128 f32 f64 }\n )]\n #[doc(alias = \"+\")]\n #[doc(alias = \"+=\")]\n+#[const_trait]\n pub trait AddAssign<Rhs = Self> {\n     /// Performs the `+=` operation.\n     ///\n@@ -822,6 +806,7 @@ add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n )]\n #[doc(alias = \"-\")]\n #[doc(alias = \"-=\")]\n+#[const_trait]\n pub trait SubAssign<Rhs = Self> {\n     /// Performs the `-=` operation.\n     ///\n@@ -880,6 +865,7 @@ sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n )]\n #[doc(alias = \"*\")]\n #[doc(alias = \"*=\")]\n+#[const_trait]\n pub trait MulAssign<Rhs = Self> {\n     /// Performs the `*=` operation.\n     ///\n@@ -938,6 +924,7 @@ mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n )]\n #[doc(alias = \"/\")]\n #[doc(alias = \"/=\")]\n+#[const_trait]\n pub trait DivAssign<Rhs = Self> {\n     /// Performs the `/=` operation.\n     ///\n@@ -999,6 +986,7 @@ div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n )]\n #[doc(alias = \"%\")]\n #[doc(alias = \"%=\")]\n+#[const_trait]\n pub trait RemAssign<Rhs = Self> {\n     /// Performs the `%=` operation.\n     ///"}, {"sha": "327009801d1bdd9df8c6e7ea4f744851a6e76b13", "filename": "library/core/src/ops/bit.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fbit.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -31,6 +31,7 @@\n #[lang = \"not\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(alias = \"!\")]\n+#[const_trait]\n pub trait Not {\n     /// The resulting type after applying the `!` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -143,6 +144,7 @@ impl const Not for ! {\n     message = \"no implementation for `{Self} & {Rhs}`\",\n     label = \"no implementation for `{Self} & {Rhs}`\"\n )]\n+#[const_trait]\n pub trait BitAnd<Rhs = Self> {\n     /// The resulting type after applying the `&` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -244,6 +246,7 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n     message = \"no implementation for `{Self} | {Rhs}`\",\n     label = \"no implementation for `{Self} | {Rhs}`\"\n )]\n+#[const_trait]\n pub trait BitOr<Rhs = Self> {\n     /// The resulting type after applying the `|` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -345,6 +348,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n     message = \"no implementation for `{Self} ^ {Rhs}`\",\n     label = \"no implementation for `{Self} ^ {Rhs}`\"\n )]\n+#[const_trait]\n pub trait BitXor<Rhs = Self> {\n     /// The resulting type after applying the `^` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -445,6 +449,7 @@ bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n     message = \"no implementation for `{Self} << {Rhs}`\",\n     label = \"no implementation for `{Self} << {Rhs}`\"\n )]\n+#[const_trait]\n pub trait Shl<Rhs = Self> {\n     /// The resulting type after applying the `<<` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -564,6 +569,7 @@ shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n     message = \"no implementation for `{Self} >> {Rhs}`\",\n     label = \"no implementation for `{Self} >> {Rhs}`\"\n )]\n+#[const_trait]\n pub trait Shr<Rhs = Self> {\n     /// The resulting type after applying the `>>` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -692,6 +698,7 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n     message = \"no implementation for `{Self} &= {Rhs}`\",\n     label = \"no implementation for `{Self} &= {Rhs}`\"\n )]\n+#[const_trait]\n pub trait BitAndAssign<Rhs = Self> {\n     /// Performs the `&=` operation.\n     ///\n@@ -764,6 +771,7 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n     message = \"no implementation for `{Self} |= {Rhs}`\",\n     label = \"no implementation for `{Self} |= {Rhs}`\"\n )]\n+#[const_trait]\n pub trait BitOrAssign<Rhs = Self> {\n     /// Performs the `|=` operation.\n     ///\n@@ -836,6 +844,7 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n     message = \"no implementation for `{Self} ^= {Rhs}`\",\n     label = \"no implementation for `{Self} ^= {Rhs}`\"\n )]\n+#[const_trait]\n pub trait BitXorAssign<Rhs = Self> {\n     /// Performs the `^=` operation.\n     ///\n@@ -906,6 +915,7 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n     message = \"no implementation for `{Self} <<= {Rhs}`\",\n     label = \"no implementation for `{Self} <<= {Rhs}`\"\n )]\n+#[const_trait]\n pub trait ShlAssign<Rhs = Self> {\n     /// Performs the `<<=` operation.\n     ///\n@@ -989,6 +999,7 @@ shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n     message = \"no implementation for `{Self} >>= {Rhs}`\",\n     label = \"no implementation for `{Self} >>= {Rhs}`\"\n )]\n+#[const_trait]\n pub trait ShrAssign<Rhs = Self> {\n     /// Performs the `>>=` operation.\n     ///"}, {"sha": "4f4c99c4ad97c829251f2f9c26fbffe051680a8a", "filename": "library/core/src/ops/deref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fderef.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -61,6 +61,7 @@\n #[doc(alias = \"&*\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"Deref\"]\n+#[cfg_attr(not(bootstrap), const_trait)]\n pub trait Deref {\n     /// The resulting type after dereferencing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -169,6 +170,7 @@ impl<T: ?Sized> const Deref for &mut T {\n #[lang = \"deref_mut\"]\n #[doc(alias = \"*\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[const_trait]\n pub trait DerefMut: Deref {\n     /// Mutably dereferences the value.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "a2c3d978cc4fa6a9e758bfa13d436ed60aefe623", "filename": "library/core/src/ops/drop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -134,6 +134,7 @@\n /// these types cannot have destructors.\n #[lang = \"drop\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[const_trait]\n pub trait Drop {\n     /// Executes the destructor for this type.\n     ///"}, {"sha": "2e0a752c815d9ff1d69e3b45b111c6b8d7165b83", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -71,6 +71,7 @@\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n #[must_use = \"closures are lazy and do nothing unless called\"]\n+#[cfg_attr(not(bootstrap), const_trait)]\n pub trait Fn<Args>: FnMut<Args> {\n     /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n@@ -158,6 +159,7 @@ pub trait Fn<Args>: FnMut<Args> {\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n #[must_use = \"closures are lazy and do nothing unless called\"]\n+#[cfg_attr(not(bootstrap), const_trait)]\n pub trait FnMut<Args>: FnOnce<Args> {\n     /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n@@ -237,6 +239,7 @@ pub trait FnMut<Args>: FnOnce<Args> {\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n #[must_use = \"closures are lazy and do nothing unless called\"]\n+#[cfg_attr(not(bootstrap), const_trait)]\n pub trait FnOnce<Args> {\n     /// The returned type after the call operator is used.\n     #[lang = \"fn_once_output\"]"}, {"sha": "dd4e3ac1c2fe5319dca6f39370dcddc34b0e8827", "filename": "library/core/src/ops/index.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Findex.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -55,6 +55,7 @@\n #[doc(alias = \"]\")]\n #[doc(alias = \"[\")]\n #[doc(alias = \"[]\")]\n+#[cfg_attr(not(bootstrap), const_trait)]\n pub trait Index<Idx: ?Sized> {\n     /// The returned type after indexing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -163,6 +164,7 @@ see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#ind\n #[doc(alias = \"[\")]\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n+#[cfg_attr(not(bootstrap), const_trait)]\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n     /// Performs the mutable indexing (`container[index]`) operation.\n     ///"}, {"sha": "dfde0b37acf43ff81314de1aeedd5abcb4480812", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -128,6 +128,7 @@ use crate::ops::ControlFlow;\n )]\n #[doc(alias = \"?\")]\n #[lang = \"Try\"]\n+#[const_trait]\n pub trait Try: FromResidual {\n     /// The type of the value produced by `?` when *not* short-circuiting.\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n@@ -384,6 +385,7 @@ pub trait Try: FromResidual {\n ))]\n #[rustc_diagnostic_item = \"FromResidual\"]\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n+#[const_trait]\n pub trait FromResidual<R = <Self as Try>::Residual> {\n     /// Constructs the type from a compatible `Residual` type.\n     ///"}, {"sha": "916d0262dedbc74aaa475d6e8c62331274eb2c6f", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -160,6 +160,7 @@ mod private_slice_index {\n     message = \"the type `{T}` cannot be indexed by `{Self}`\",\n     label = \"slice indices are of type `usize` or ranges of `usize`\"\n )]\n+#[const_trait]\n pub unsafe trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n     /// The output type returned by methods.\n     #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]"}, {"sha": "6e04cfaec31fbd0c308b13728a6d4056a7e66d74", "filename": "src/test/ui/const-generics/const_trait_fn-issue-88433.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_trait_fn-issue-88433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_trait_fn-issue-88433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_trait_fn-issue-88433.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Func<T> {\n     type Output;\n "}, {"sha": "806540e1775e83b499932d16ebbd1fcf8725aab1", "filename": "src/test/ui/const-generics/issue-93647.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,6 +1,6 @@\n struct X<const N: usize = {\n     (||1usize)()\n-    //~^ ERROR cannot call\n+    //~^ ERROR cannot call non-const closure\n }>;\n \n fn main() {}"}, {"sha": "647b0eea86dafc1557874a386a0b128bab418640", "filename": "src/test/ui/const-generics/issues/issue-88119.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-88119.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-88119.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-88119.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -3,6 +3,7 @@\n #![allow(incomplete_features)]\n #![feature(const_trait_impl, generic_const_exprs)]\n \n+#[const_trait]\n trait ConstName {\n     const NAME_BYTES: &'static [u8];\n }"}, {"sha": "1d2d3012a6ee1c535a9a93e83fd251809a1acd33", "filename": "src/test/ui/const-generics/issues/issue-98629.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,5 +1,6 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Trait {\n     const N: usize;\n }"}, {"sha": "4a248be76a9e8f100e13db16f1c95af14a26ff16", "filename": "src/test/ui/const-generics/issues/issue-98629.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,5 +1,5 @@\n error[E0046]: not all trait items implemented, missing: `N`\n-  --> $DIR/issue-98629.rs:7:1\n+  --> $DIR/issue-98629.rs:8:1\n    |\n LL |     const N: usize;\n    |     -------------- `N` from trait"}, {"sha": "c685922c456b35be977d0b034f1976e9df376d92", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -4,13 +4,13 @@ error[E0308]: mismatched types\n LL |     = [0; (i8::MAX + 1u8) as usize];\n    |                      ^^^ expected `i8`, found `u8`\n \n-error[E0277]: cannot add `u8` to `i8`\n+error[E0277]: cannot add `u8` to `i8` in const contexts\n   --> $DIR/const-eval-overflow-3b.rs:16:20\n    |\n LL |     = [0; (i8::MAX + 1u8) as usize];\n    |                    ^ no implementation for `i8 + u8`\n    |\n-   = help: the trait `Add<u8>` is not implemented for `i8`\n+   = help: the trait `~const Add<u8>` is not implemented for `i8`\n    = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>"}, {"sha": "b396079240a98b2905fdfd6bab946381ede30b89", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -4,13 +4,13 @@ error[E0308]: mismatched types\n LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n    |                              ^^^ expected `i8`, found `u8`\n \n-error[E0277]: cannot add `u8` to `i8`\n+error[E0277]: cannot add `u8` to `i8` in const contexts\n   --> $DIR/const-eval-overflow-4b.rs:9:28\n    |\n LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n    |                            ^ no implementation for `i8 + u8`\n    |\n-   = help: the trait `Add<u8>` is not implemented for `i8`\n+   = help: the trait `~const Add<u8>` is not implemented for `i8`\n    = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>"}, {"sha": "50b7ce1f8c01db3c869fb447dba119458f8a3f86", "filename": "src/test/ui/consts/const-fn-error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -3,10 +3,10 @@ const X : usize = 2;\n const fn f(x: usize) -> usize {\n     let mut sum = 0;\n     for i in 0..x {\n-        //~^ ERROR mutable references\n-        //~| ERROR cannot convert\n-        //~| ERROR cannot call non-const fn\n+        //~^ ERROR cannot convert\n         //~| ERROR `for` is not allowed in a `const fn`\n+        //~| ERROR mutable references are not allowed in constant functions\n+        //~| ERROR cannot call non-const fn\n         sum += i;\n     }\n     sum"}, {"sha": "8db2485355833d3b58313271859f15afbc05c843", "filename": "src/test/ui/consts/const-for.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Fconst-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Fconst-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-for.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -3,8 +3,8 @@\n \n const _: () = {\n     for _ in 0..5 {}\n-    //~^ error: cannot convert\n-    //~| error: cannot call non-const fn\n+    //~^ error: cannot call\n+    //~| error: cannot convert\n };\n \n fn main() {}"}, {"sha": "fd02d2154805c08acd517e0f1520262095b5cf0e", "filename": "src/test/ui/consts/issue-56164.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,11 +1,11 @@\n const fn foo() { (||{})() }\n //~^ ERROR cannot call non-const closure\n-//~| ERROR erroneous constant used [const_err]\n-//~| WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+//~| ERROR erroneous constant\n+//~| WARN this was previously accepted\n \n const fn bad(input: fn()) {\n     input()\n-    //~^ ERROR function pointer\n+    //~^ ERROR function pointer calls are not allowed\n }\n \n fn main() {"}, {"sha": "ce21ebdb9ac990f4843f06e3e4960ad2cad886fd", "filename": "src/test/ui/consts/issue-94675.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -7,9 +7,8 @@ struct Foo<'a> {\n impl<'a> Foo<'a> {\n     const fn spam(&mut self, baz: &mut Vec<u32>) {\n         self.bar[0] = baz.len();\n-        //~^ ERROR cannot call non-const fn `Vec::<u32>::len` in constant functions\n-        //~| ERROR the trait bound `Vec<usize>: ~const IndexMut<usize>` is not satisfied\n-        //~| ERROR cannot call non-const operator in constant functions\n+        //~^ the trait bound `Vec<usize>: ~const Index<_>` is not satisfied\n+        //~| the trait bound `Vec<usize>: ~const IndexMut<usize>` is not satisfied\n     }\n }\n "}, {"sha": "7ae293ffbf85d05446a6e8966155ef319e71a62d", "filename": "src/test/ui/consts/issue-94675.stderr", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,10 +1,15 @@\n-error[E0015]: cannot call non-const fn `Vec::<u32>::len` in constant functions\n-  --> $DIR/issue-94675.rs:9:27\n+error[E0277]: the trait bound `Vec<usize>: ~const Index<_>` is not satisfied\n+  --> $DIR/issue-94675.rs:9:9\n    |\n LL |         self.bar[0] = baz.len();\n-   |                           ^^^^^\n+   |         ^^^^^^^^^^^ vector indices are of type `usize` or ranges of `usize`\n+   |\n+   = help: the trait `~const Index<_>` is not implemented for `Vec<usize>`\n+note: the trait `Index<_>` is implemented for `Vec<usize>`, but that implementation is not `const`\n+  --> $DIR/issue-94675.rs:9:9\n    |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+LL |         self.bar[0] = baz.len();\n+   |         ^^^^^^^^^^^\n \n error[E0277]: the trait bound `Vec<usize>: ~const IndexMut<usize>` is not satisfied\n   --> $DIR/issue-94675.rs:9:9\n@@ -18,21 +23,11 @@ note: the trait `IndexMut<usize>` is implemented for `Vec<usize>`, but that impl\n    |\n LL |         self.bar[0] = baz.len();\n    |         ^^^^^^^^^^^\n-\n-error[E0015]: cannot call non-const operator in constant functions\n-  --> $DIR/issue-94675.rs:9:9\n-   |\n-LL |         self.bar[0] = baz.len();\n-   |         ^^^^^^^^^^^\n-   |\n-note: impl defined here, but it is not `const`\n-  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-LL | impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+LL | impl<'a> Foo<'a> where Vec<usize>: ~const IndexMut<usize> {\n+   |                  ++++++++++++++++++++++++++++++++++++++++\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b9e7e1405f9499d5f853455326e28316e9f009af", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -4,7 +4,7 @@\n // gate was not enabled in libcore.\n \n #![stable(feature = \"core\", since = \"1.6.0\")]\n-#![feature(staged_api)]\n+#![feature(staged_api, const_trait_impl)]\n \n enum Opt<T> {\n     Some(T),\n@@ -14,12 +14,12 @@ enum Opt<T> {\n impl<T> Opt<T> {\n     #[rustc_const_unstable(feature = \"foo\", issue = \"none\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n+    const fn unwrap_or_else<F: ~const FnOnce() -> T>(self, f: F) -> T {\n     //~^ ERROR destructors cannot be evaluated at compile-time\n     //~| ERROR destructors cannot be evaluated at compile-time\n         match self {\n             Opt::Some(t) => t,\n-            Opt::None => f(), //~ ERROR E0015\n+            Opt::None => f(),\n         }\n     }\n }"}, {"sha": "fee74bd0a6cfe6cfed2895bea79c1f7d92deab9c", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.stderr", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,34 +1,21 @@\n-error[E0015]: cannot call non-const closure in constant functions\n-  --> $DIR/unstable-const-fn-in-libcore.rs:22:26\n-   |\n-LL |             Opt::None => f(),\n-   |                          ^^^\n-   |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-help: consider further restricting this bound\n-   |\n-LL |     const fn unwrap_or_else<F: FnOnce() -> T + ~const std::ops::FnOnce<()>>(self, f: F) -> T {\n-   |                                              +++++++++++++++++++++++++++++\n-\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/unstable-const-fn-in-libcore.rs:17:53\n+  --> $DIR/unstable-const-fn-in-libcore.rs:17:60\n    |\n-LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n-   |                                                     ^ constant functions cannot evaluate destructors\n+LL |     const fn unwrap_or_else<F: ~const FnOnce() -> T>(self, f: F) -> T {\n+   |                                                            ^ constant functions cannot evaluate destructors\n ...\n LL |     }\n    |     - value is dropped here\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/unstable-const-fn-in-libcore.rs:17:47\n+  --> $DIR/unstable-const-fn-in-libcore.rs:17:54\n    |\n-LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n-   |                                               ^^^^ constant functions cannot evaluate destructors\n+LL |     const fn unwrap_or_else<F: ~const FnOnce() -> T>(self, f: F) -> T {\n+   |                                                      ^^^^ constant functions cannot evaluate destructors\n ...\n LL |     }\n    |     - value is dropped here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0015, E0493.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0493`."}, {"sha": "81f3f26943255d802d24473b3109a00ee5470a40", "filename": "src/test/ui/did_you_mean/issue-49746-unicode-confusable-in-float-literal-expt.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -15,13 +15,13 @@ help: Unicode character '\u2212' (Minus Sign) looks like '-' (Minus/Hyphen), but it\n LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e-11; // m\u00b3\u22c5kg\u207b\u00b9\u22c5s\u207b\u00b2\n    |                                                     ~\n \n-error[E0277]: cannot subtract `{integer}` from `{float}`\n+error[E0277]: cannot subtract `{integer}` from `{float}` in const contexts\n   --> $DIR/issue-49746-unicode-confusable-in-float-literal-expt.rs:1:53\n    |\n LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e\u221211; // m\u00b3\u22c5kg\u207b\u00b9\u22c5s\u207b\u00b2\n    |                                                     ^ no implementation for `{float} - {integer}`\n    |\n-   = help: the trait `Sub<{integer}>` is not implemented for `{float}`\n+   = help: the trait `~const Sub<{integer}>` is not implemented for `{float}`\n    = help: the following other types implement trait `Sub<Rhs>`:\n              <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>"}, {"sha": "1f7b341a97efc7d6087c859481cc62b408dd3579", "filename": "src/test/ui/issues/issue-25901.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fissues%2Fissue-25901.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fissues%2Fissue-25901.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25901.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -2,7 +2,7 @@ struct A;\n struct B;\n \n static S: &'static B = &A;\n-//~^ ERROR cannot perform deref coercion on `A` in statics\n+//~^ ERROR the trait bound\n \n use std::ops::Deref;\n "}, {"sha": "b9cac32229a1edc8fd6aae578c8d9c6aa387b58b", "filename": "src/test/ui/issues/issue-25901.stderr", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fissues%2Fissue-25901.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fissues%2Fissue-25901.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25901.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,23 +1,15 @@\n-error[E0015]: cannot perform deref coercion on `A` in statics\n+error[E0277]: the trait bound `A: Deref` is not satisfied\n   --> $DIR/issue-25901.rs:4:24\n    |\n LL | static S: &'static B = &A;\n-   |                        ^^\n-   |\n-   = note: attempting to deref into `B`\n-note: deref defined here\n-  --> $DIR/issue-25901.rs:10:5\n+   |                        ^^ the trait `~const Deref` is not implemented for `A`\n    |\n-LL |     type Target = B;\n-   |     ^^^^^^^^^^^\n-note: impl defined here, but it is not `const`\n-  --> $DIR/issue-25901.rs:9:1\n+note: the trait `Deref` is implemented for `A`, but that implementation is not `const`\n+  --> $DIR/issue-25901.rs:4:24\n    |\n-LL | impl Deref for A {\n-   | ^^^^^^^^^^^^^^^^\n-   = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n-   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n+LL | static S: &'static B = &A;\n+   |                        ^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "53ecc6112ffeea581033243573a15916eb2bc45a", "filename": "src/test/ui/issues/issue-50582.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -7,13 +7,13 @@ LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n    = note: see issue #87575 <https://github.com/rust-lang/rust/issues/87575> for more information\n    = help: add `#![feature(const_for)]` to the crate attributes to enable\n \n-error[E0277]: cannot add `()` to `{integer}`\n+error[E0277]: cannot add `()` to `{integer}` in const contexts\n   --> $DIR/issue-50582.rs:2:18\n    |\n LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n    |                  ^ no implementation for `{integer} + ()`\n    |\n-   = help: the trait `Add<()>` is not implemented for `{integer}`\n+   = help: the trait `~const Add<()>` is not implemented for `{integer}`\n    = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>"}, {"sha": "0498a8a16259010501a0387c4bcfb61a2e839a74", "filename": "src/test/ui/never_type/issue-52443.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -9,6 +9,6 @@ fn main() {\n     [(); { for _ in 0usize.. {}; 0}];\n     //~^ ERROR `for` is not allowed in a `const`\n     //~| ERROR cannot convert\n-    //~| ERROR mutable references are not allowed in constants\n-    //~| ERROR cannot call non-const fn\n+    //~| ERROR mutable references\n+    //~| ERROR cannot call\n }"}, {"sha": "7d9dae52cf10e0b234904f528106809eaef00234", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -10,6 +10,7 @@ impl std::ops::Add for NonConstAdd {\n     }\n }\n \n+#[const_trait]\n trait Foo {\n     type Bar: ~const std::ops::Add;\n }\n@@ -19,6 +20,7 @@ impl const Foo for NonConstAdd {\n     //~^ ERROR: cannot add `NonConstAdd` to `NonConstAdd` in const contexts\n }\n \n+#[const_trait]\n trait Baz {\n     type Qux: std::ops::Add;\n }"}, {"sha": "ce2425010ad28b8eb3df5764ef86faf296e79bbe", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,17 +1,17 @@\n error[E0277]: cannot add `NonConstAdd` to `NonConstAdd` in const contexts\n-  --> $DIR/assoc-type.rs:18:16\n+  --> $DIR/assoc-type.rs:19:16\n    |\n LL |     type Bar = NonConstAdd;\n    |                ^^^^^^^^^^^ no implementation for `NonConstAdd + NonConstAdd`\n    |\n    = help: the trait `~const Add` is not implemented for `NonConstAdd`\n note: the trait `Add` is implemented for `NonConstAdd`, but that implementation is not `const`\n-  --> $DIR/assoc-type.rs:18:16\n+  --> $DIR/assoc-type.rs:19:16\n    |\n LL |     type Bar = NonConstAdd;\n    |                ^^^^^^^^^^^\n note: required by a bound in `Foo::Bar`\n-  --> $DIR/assoc-type.rs:14:15\n+  --> $DIR/assoc-type.rs:15:15\n    |\n LL |     type Bar: ~const std::ops::Add;\n    |               ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Foo::Bar`"}, {"sha": "589e3f02420f73edf962b2e2a4bad159f1fc8a8a", "filename": "src/test/ui/rfc-2632-const-trait-impl/auxiliary/staged-api.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -3,6 +3,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[const_trait]\n pub trait MyTrait {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn func();"}, {"sha": "dd99339742072e225180bd49455f173479e64d8f", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-const-trait-method-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,5 +1,6 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n pub trait Plus {\n     fn plus(self, rhs: Self) -> Self;\n }\n@@ -23,7 +24,6 @@ pub const fn add_i32(a: i32, b: i32) -> i32 {\n pub const fn add_u32(a: u32, b: u32) -> u32 {\n     a.plus(b)\n     //~^ ERROR the trait bound\n-    //~| ERROR cannot call non-const fn\n }\n \n fn main() {}"}, {"sha": "d9ad80431533b3851aa4d9c9c5c28be5448f4e39", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-const-trait-method-fail.stderr", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,24 +1,19 @@\n error[E0277]: the trait bound `u32: ~const Plus` is not satisfied\n-  --> $DIR/call-const-trait-method-fail.rs:24:7\n+  --> $DIR/call-const-trait-method-fail.rs:25:7\n    |\n LL |     a.plus(b)\n-   |       ^^^^^^^ the trait `~const Plus` is not implemented for `u32`\n+   |       ^^^^ the trait `~const Plus` is not implemented for `u32`\n    |\n note: the trait `Plus` is implemented for `u32`, but that implementation is not `const`\n-  --> $DIR/call-const-trait-method-fail.rs:24:7\n+  --> $DIR/call-const-trait-method-fail.rs:25:7\n    |\n LL |     a.plus(b)\n-   |       ^^^^^^^\n-\n-error[E0015]: cannot call non-const fn `<u32 as Plus>::plus` in constant functions\n-  --> $DIR/call-const-trait-method-fail.rs:24:7\n-   |\n-LL |     a.plus(b)\n-   |       ^^^^^^^\n+   |       ^^^^\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+LL | pub const fn add_u32(a: u32, b: u32) -> u32 where u32: ~const Plus {\n+   |                                             ++++++++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b64161b6aa014adf772513986960a08d4ddaacb5", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-const-trait-method-pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -21,6 +21,7 @@ impl const PartialEq for Int {\n     }\n }\n \n+#[const_trait]\n pub trait Plus {\n     fn plus(self, rhs: Self) -> Self;\n }"}, {"sha": "50c46579086c6cad1201a86a18ee610bb8e11cac", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-in-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait MyPartialEq {\n     fn eq(&self, other: &Self) -> bool;\n }"}, {"sha": "52984fb6be4908d50c0eb8c3a1a66223ee6d677c", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-check-fns-in-const-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,6 +1,7 @@\n #![feature(const_trait_impl)]\n \n struct S;\n+#[const_trait]\n trait T {\n     fn foo();\n }"}, {"sha": "c8783de4c3eed0ef775c1abfd26355adb83e0c9f", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-check-fns-in-const-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,5 +1,5 @@\n error[E0015]: cannot call non-const fn `non_const` in constant functions\n-  --> $DIR/const-check-fns-in-const-impl.rs:11:16\n+  --> $DIR/const-check-fns-in-const-impl.rs:12:16\n    |\n LL |     fn foo() { non_const() }\n    |                ^^^^^^^^^^^"}, {"sha": "8b4c40658156516e1313743db63f0a10b53291b8", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -48,6 +48,7 @@ mod t {\n     pub struct HasConstDrop(pub ConstDrop);\n     pub struct TrivialFields(pub u8, pub i8, pub usize, pub isize);\n \n+    #[const_trait]\n     pub trait SomeTrait {\n         fn foo();\n     }"}, {"sha": "837124db04e208670258d9c85a98a0775b0a4b34", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-recovery.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,9 +1,11 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Foo {}\n \n const impl Foo for i32 {} //~ ERROR: expected identifier, found keyword\n \n+#[const_trait]\n trait Bar {}\n \n const impl<T: Foo> Bar for T {} //~ ERROR: expected identifier, found keyword"}, {"sha": "7217fc8554356c23f767a502876781cb101a1119", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-recovery.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found keyword `impl`\n-  --> $DIR/const-impl-recovery.rs:5:7\n+  --> $DIR/const-impl-recovery.rs:6:7\n    |\n LL | const impl Foo for i32 {}\n    |       ^^^^ expected identifier, found keyword\n@@ -11,7 +11,7 @@ LL + impl const Foo for i32 {}\n    |\n \n error: expected identifier, found keyword `impl`\n-  --> $DIR/const-impl-recovery.rs:9:7\n+  --> $DIR/const-impl-recovery.rs:11:7\n    |\n LL | const impl<T: Foo> Bar for T {}\n    |       ^^^^ expected identifier, found keyword"}, {"sha": "1aff05627850be3613297a48ec5ed4797b13f441", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-requires-const-trait.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -0,0 +1,9 @@\n+#![feature(const_trait_impl)]\n+\n+pub trait A {}\n+//~^ NOTE: this trait must be annotated with `#[const_trait]`\n+\n+impl const A for () {}\n+//~^ ERROR: const `impl`s must be for traits marked with `#[const_trait]`\n+\n+fn main() {}"}, {"sha": "6b465a9c62e2e65830c4b43026c6e2fbf9c8242b", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-requires-const-trait.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -0,0 +1,14 @@\n+error: const `impl`s must be for traits marked with `#[const_trait]`\n+  --> $DIR/const-impl-requires-const-trait.rs:6:1\n+   |\n+LL | impl const A for () {}\n+   | ^^^^^^^^^^^^^^^^^^^\n+   |\n+note: this trait must be annotated with `#[const_trait]`\n+  --> $DIR/const-impl-requires-const-trait.rs:3:1\n+   |\n+LL | pub trait A {}\n+   | ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4c630d33c55163b7eca430c391c21e601613f246", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/feature-gate.rs:13:1\n+  --> $DIR/feature-gate.rs:14:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^"}, {"sha": "0b409fbaac9e0999c13ebe24159e4f1dab2bbcfa", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -5,6 +5,7 @@\n #![feature(rustc_attrs)]\n \n struct S;\n+#[const_trait] //[stock]~ ERROR `const_trait` is a temporary placeholder\n trait T {}\n impl const T for S {}\n //[stock]~^ ERROR const trait impls are experimental"}, {"sha": "0e938c1c55d059566e8dc65b8d279dba1dfed51c", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.stock.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,12 +1,21 @@\n error[E0658]: const trait impls are experimental\n-  --> $DIR/feature-gate.rs:9:6\n+  --> $DIR/feature-gate.rs:10:6\n    |\n LL | impl const T for S {}\n    |      ^^^^^\n    |\n    = note: see issue #67792 <https://github.com/rust-lang/rust/issues/67792> for more information\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: `const_trait` is a temporary placeholder for marking a trait that is suitable for `const` `impls` and all default bodies as `const`, which may be removed or renamed in the future.\n+  --> $DIR/feature-gate.rs:8:1\n+   |\n+LL | #[const_trait]\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #67792 <https://github.com/rust-lang/rust/issues/67792> for more information\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "337c733403b243db85a432b90cbaadcb5ef76bd8", "filename": "src/test/ui/rfc-2632-const-trait-impl/hir-const-check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(const_trait_impl)]\n \n+#[const_trait]\n pub trait MyTrait {\n     fn method(&self) -> Option<()>;\n }"}, {"sha": "6d2be1daa3727625c4e670d9c6751b538e16ed9c", "filename": "src/test/ui/rfc-2632-const-trait-impl/hir-const-check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `?` is not allowed in a `const fn`\n-  --> $DIR/hir-const-check.rs:11:9\n+  --> $DIR/hir-const-check.rs:12:9\n    |\n LL |         Some(())?;\n    |         ^^^^^^^^^"}, {"sha": "f8ac793e4c125c275ce19c2e40b4c0fe8ade2c77", "filename": "src/test/ui/rfc-2632-const-trait-impl/inherent-impl-const-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl-const-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl-const-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl-const-bounds.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -3,7 +3,9 @@\n \n struct S;\n \n+#[const_trait]\n trait A {}\n+#[const_trait]\n trait B {}\n \n impl const A for S {}"}, {"sha": "9f3f38ad4bc68e51486d68ae6c5326464c5ff867", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-100222.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-100222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-100222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-100222.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -16,6 +16,7 @@ pub trait IndexMut where Self: Index {\n \n impl Index for () { type Output = (); }\n \n+#[cfg(not(any(nn, yn)))]\n impl const IndexMut for <() as Index>::Output {\n     const C: <Self as Index>::Output = ();\n     type Assoc = <Self as Index>::Output;\n@@ -24,6 +25,15 @@ impl const IndexMut for <() as Index>::Output {\n     {}\n }\n \n+#[cfg(any(nn, yn))]\n+impl IndexMut for <() as Index>::Output {\n+    const C: <Self as Index>::Output = ();\n+    type Assoc = <Self as Index>::Output;\n+    fn foo(&mut self, x: <Self as Index>::Output) -> <Self as Index>::Output\n+        where <Self as Index>::Output:,\n+    {}\n+}\n+\n const C: <() as Index>::Output = ();\n \n fn main() {}"}, {"sha": "4d34696539485dac7f346b76e37a7f9d04f781c7", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-92230-wf-super-trait-env.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92230-wf-super-trait-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92230-wf-super-trait-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92230-wf-super-trait-env.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -4,7 +4,9 @@\n \n #![feature(const_trait_impl)]\n \n+#[const_trait]\n pub trait Super {}\n+#[const_trait]\n pub trait Sub: Super {}\n \n impl<A> const Super for &A where A: ~const Super {}"}, {"sha": "a851136009c46319e4d1e7a54d50abf282ac6c84", "filename": "src/test/ui/rfc-2632-const-trait-impl/nested-closure.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fnested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fnested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fnested-closure.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![feature(const_trait_impl, once_cell)]\n+\n+use std::sync::LazyLock;\n+\n+static EXTERN_FLAGS: LazyLock<String> = LazyLock::new(|| {\n+    let x = || String::new();\n+    x()\n+});\n+\n+fn main() {}"}, {"sha": "1a4509b18695a6138419f0186682003862fd9efc", "filename": "src/test/ui/rfc-2632-const-trait-impl/non-const-op-in-closure-in-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-in-closure-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-in-closure-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-in-closure-in-const.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Convert<T> {\n     fn to(self) -> T;\n }"}, {"sha": "4520a36960c7be355377f77531c4cff2037f5ed1", "filename": "src/test/ui/rfc-2632-const-trait-impl/static-const-trait-bound.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstatic-const-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstatic-const-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstatic-const-trait-bound.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+pub struct S<T, F: FnOnce() -> T = fn() -> T> {\n+    f: F,\n+    x: Option<T>,\n+}\n+\n+impl<T, F: FnOnce() -> T> S<T, F> {\n+    pub const fn new(f: F) -> Self {\n+        Self { f, x: None }\n+    }\n+}\n+\n+#[derive(Default)]\n+pub struct Foo;\n+\n+static LOCKED_CALLSITES: S<Foo> = S::new(Default::default);\n+\n+fn main() {}"}, {"sha": "3e2b81368a5fe05aab0733a8345597c4b013e7b8", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,8 +1,10 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Foo {\n     fn a(&self);\n }\n+#[const_trait]\n trait Bar: ~const Foo {}\n \n struct S;"}, {"sha": "9787792ab1318be266d126603432387d8057520b", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,16 +1,16 @@\n error[E0277]: the trait bound `S: ~const Foo` is not satisfied\n-  --> $DIR/super-traits-fail.rs:13:12\n+  --> $DIR/super-traits-fail.rs:15:12\n    |\n LL | impl const Bar for S {}\n    |            ^^^ the trait `~const Foo` is not implemented for `S`\n    |\n note: the trait `Foo` is implemented for `S`, but that implementation is not `const`\n-  --> $DIR/super-traits-fail.rs:13:12\n+  --> $DIR/super-traits-fail.rs:15:12\n    |\n LL | impl const Bar for S {}\n    |            ^^^\n note: required by a bound in `Bar`\n-  --> $DIR/super-traits-fail.rs:6:12\n+  --> $DIR/super-traits-fail.rs:8:12\n    |\n LL | trait Bar: ~const Foo {}\n    |            ^^^^^^^^^^ required by this bound in `Bar`"}, {"sha": "df96f6fb4ab40cb5d0df35f42c90b9f1db6fb0c5", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,9 +1,12 @@\n // check-pass\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Foo {\n     fn a(&self);\n }\n+\n+#[const_trait]\n trait Bar: ~const Foo {}\n \n struct S;"}, {"sha": "7a88ec35c8f2a8f269c6f7f740fd68adbe382718", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-const.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -0,0 +1,29 @@\n+// Like trait-where-clause.rs, but we are calling from a const context.\n+// Checking the validity of traits' where clauses happen at a later stage.\n+// (`rustc_const_eval` instead of `rustc_typeck`) Therefore one file as a\n+// test is not enough.\n+#![feature(const_trait_impl)]\n+\n+trait Bar {}\n+\n+trait Foo {\n+    fn a();\n+    fn b() where Self: ~const Bar;\n+    fn c<T: ~const Bar>();\n+}\n+\n+const fn test1<T: ~const Foo + Bar>() {\n+    T::a();\n+    T::b();\n+    //~^ ERROR the trait bound\n+    T::c::<T>();\n+    //~^ ERROR the trait bound\n+}\n+\n+const fn test2<T: ~const Foo + ~const Bar>() {\n+    T::a();\n+    T::b();\n+    T::c::<T>();\n+}\n+\n+fn main() {}"}, {"sha": "13d8639de30c3c82d64d2f53eb4e8fd6c83a7682", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-const.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -0,0 +1,35 @@\n+error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n+  --> $DIR/trait-where-clause-const.rs:17:5\n+   |\n+LL |     T::b();\n+   |     ^^^^^^ the trait `~const Bar` is not implemented for `T`\n+   |\n+note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/trait-where-clause-const.rs:17:5\n+   |\n+LL |     T::b();\n+   |     ^^^^^^\n+help: consider further restricting this bound\n+   |\n+LL | const fn test1<T: ~const Foo + Bar + ~const Bar>() {\n+   |                                    ++++++++++++\n+\n+error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n+  --> $DIR/trait-where-clause-const.rs:19:5\n+   |\n+LL |     T::c::<T>();\n+   |     ^^^^^^^^^^^ the trait `~const Bar` is not implemented for `T`\n+   |\n+note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/trait-where-clause-const.rs:19:5\n+   |\n+LL |     T::c::<T>();\n+   |     ^^^^^^^^^^^\n+help: consider further restricting this bound\n+   |\n+LL | const fn test1<T: ~const Foo + Bar + ~const Bar>() {\n+   |                                    ++++++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4b8b004069d47379bf539bbe51e748b0c5c83d53", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-run.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-run.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Bar {\n     fn bar() -> u8;\n }"}, {"sha": "5bd23a8cb2079b1760b2888d5b885af73425fb9e", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -8,29 +8,15 @@ trait Foo {\n     fn c<T: ~const Bar>();\n }\n \n-const fn test1<T: ~const Foo + Bar>() {\n+fn test1<T: Foo>() {\n     T::a();\n     T::b();\n     //~^ ERROR the trait bound\n     T::c::<T>();\n     //~^ ERROR the trait bound\n }\n \n-const fn test2<T: ~const Foo + ~const Bar>() {\n-    T::a();\n-    T::b();\n-    T::c::<T>();\n-}\n-\n-fn test3<T: Foo>() {\n-    T::a();\n-    T::b();\n-    //~^ ERROR the trait bound\n-    T::c::<T>();\n-    //~^ ERROR the trait bound\n-}\n-\n-fn test4<T: Foo + Bar>() {\n+fn test2<T: Foo + Bar>() {\n     T::a();\n     T::b();\n     T::c::<T>();"}, {"sha": "96365d3343362e9b9de83ca62cff3438cd48ad7b", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "modified", "additions": 5, "deletions": 47, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -1,47 +1,5 @@\n-error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:13:5\n-   |\n-LL |     T::b();\n-   |     ^^^^ the trait `~const Bar` is not implemented for `T`\n-   |\n-note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/trait-where-clause.rs:13:5\n-   |\n-LL |     T::b();\n-   |     ^^^^\n-note: required by a bound in `Foo::b`\n-  --> $DIR/trait-where-clause.rs:7:24\n-   |\n-LL |     fn b() where Self: ~const Bar;\n-   |                        ^^^^^^^^^^ required by this bound in `Foo::b`\n-help: consider further restricting this bound\n-   |\n-LL | const fn test1<T: ~const Foo + Bar + ~const Bar>() {\n-   |                                    ++++++++++++\n-\n-error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:15:12\n-   |\n-LL |     T::c::<T>();\n-   |            ^ the trait `~const Bar` is not implemented for `T`\n-   |\n-note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/trait-where-clause.rs:15:12\n-   |\n-LL |     T::c::<T>();\n-   |            ^\n-note: required by a bound in `Foo::c`\n-  --> $DIR/trait-where-clause.rs:8:13\n-   |\n-LL |     fn c<T: ~const Bar>();\n-   |             ^^^^^^^^^^ required by this bound in `Foo::c`\n-help: consider further restricting this bound\n-   |\n-LL | const fn test1<T: ~const Foo + Bar + ~const Bar>() {\n-   |                                    ++++++++++++\n-\n error[E0277]: the trait bound `T: Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:27:5\n+  --> $DIR/trait-where-clause.rs:13:5\n    |\n LL |     T::b();\n    |     ^^^^ the trait `Bar` is not implemented for `T`\n@@ -53,11 +11,11 @@ LL |     fn b() where Self: ~const Bar;\n    |                        ^^^^^^^^^^ required by this bound in `Foo::b`\n help: consider further restricting this bound\n    |\n-LL | fn test3<T: Foo + Bar>() {\n+LL | fn test1<T: Foo + Bar>() {\n    |                 +++++\n \n error[E0277]: the trait bound `T: Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:29:12\n+  --> $DIR/trait-where-clause.rs:15:12\n    |\n LL |     T::c::<T>();\n    |            ^ the trait `Bar` is not implemented for `T`\n@@ -69,9 +27,9 @@ LL |     fn c<T: ~const Bar>();\n    |             ^^^^^^^^^^ required by this bound in `Foo::c`\n help: consider further restricting this bound\n    |\n-LL | fn test3<T: Foo + Bar>() {\n+LL | fn test1<T: Foo + Bar>() {\n    |                 +++++\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "6eff899bfbf16f5b96b0a368c694ce764cdead0f", "filename": "src/test/ui/stability-attribute/missing-const-stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -19,6 +19,7 @@ impl Foo {\n }\n \n #[stable(feature = \"stable\", since = \"1.0.0\")]\n+#[const_trait]\n pub trait Bar {\n     #[stable(feature = \"stable\", since = \"1.0.0\")]\n     fn fun();"}, {"sha": "4cfbe152891bac36b2e9f01e0a926b11ce87859e", "filename": "src/test/ui/stability-attribute/missing-const-stability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr?ref=7a8636c843bd24038fe1d1f69b4a8e4b0ea55d4e", "patch": "@@ -5,7 +5,7 @@ LL | pub const fn foo() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation has missing const stability attribute\n-  --> $DIR/missing-const-stability.rs:27:1\n+  --> $DIR/missing-const-stability.rs:28:1\n    |\n LL | / impl const Bar for Foo {\n LL | |"}]}