{"sha": "5f988ab55357f3bf71e32597f3ae6707a7f1bf0b", "node_id": "C_kwDOAAsO6NoAKDVmOTg4YWI1NTM1N2YzYmY3MWUzMjU5N2YzYWU2NzA3YTdmMWJmMGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-05T15:18:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-05T15:18:39Z"}, "message": "Auto merge of #2189 - RalfJung:clippy, r=RalfJung\n\nrun Clippy on CI\n\nand fix some things it complains about. Also use `rustup-toolchain` script on CI (reduces code duplication, and good thing to make sure it keeps working, since we recommend it in the docs).\n\nI left `ui_test` out for now; I'll leave those nits to `@oli-obk.` ;)", "tree": {"sha": "21fda7543d8bd2c942fdb8f946ffe59d117947fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21fda7543d8bd2c942fdb8f946ffe59d117947fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b", "html_url": "https://github.com/rust-lang/rust/commit/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a1b09eb9f9e908ad6a84be50aa8c4e9bde56365", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a1b09eb9f9e908ad6a84be50aa8c4e9bde56365", "html_url": "https://github.com/rust-lang/rust/commit/5a1b09eb9f9e908ad6a84be50aa8c4e9bde56365"}, {"sha": "3d30aece836c5f524b49eb308ee516a09dd9e0a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d30aece836c5f524b49eb308ee516a09dd9e0a9", "html_url": "https://github.com/rust-lang/rust/commit/3d30aece836c5f524b49eb308ee516a09dd9e0a9"}], "stats": {"total": 133, "additions": 67, "deletions": 66}, "files": [{"sha": "41cf159e0c80139a8a28e78b87923ec8e9729465", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=5f988ab55357f3bf71e32597f3ae6707a7f1bf0b", "patch": "@@ -72,20 +72,10 @@ jobs:\n         shell: bash\n         run: |\n           if [[ ${{ github.event_name }} == 'schedule' ]]; then\n-            RUSTC_HASH=$(git ls-remote https://github.com/rust-lang/rust.git master | awk '{print $1}')\n+            ./rustup-toolchain HEAD --host ${{ matrix.host_target }}\n           else\n-            RUSTC_HASH=$(< rust-version)\n+            ./rustup-toolchain \"\" --host ${{ matrix.host_target }}\n           fi\n-          # We need a nightly cargo for parts of the cargo miri test suite.\n-          rustup-toolchain-install-master \\\n-            -f \\\n-            -n master \"$RUSTC_HASH\" \\\n-            -c cargo \\\n-            -c rust-src \\\n-            -c rustc-dev \\\n-            -c llvm-tools \\\n-            --host ${{ matrix.host_target }}\n-          rustup default master\n \n       - name: Show Rust version\n         run: |\n@@ -97,26 +87,35 @@ jobs:\n         run: bash ./ci.sh\n \n   fmt:\n-    name: check formatting (ignored by bors)\n+    name: formatting (ignored by bors)\n     runs-on: ubuntu-latest\n     steps:\n       - uses: actions/checkout@v3\n       - name: Install latest nightly\n-        uses: actions-rs/toolchain@v1\n-        with:\n-            toolchain: nightly\n-            components: rustfmt\n-            default: true\n-      - name: Check formatting (miri)\n-        uses: actions-rs/cargo@v1\n-        with:\n-          command: fmt\n-          args: --all -- --check\n-      - name: Check formatting (cargo-miri)\n-        uses: actions-rs/cargo@v1\n-        with:\n-          command: fmt\n-          args: --manifest-path cargo-miri/Cargo.toml --all -- --check\n+        run: |\n+          rustup toolchain install nightly --component rustfmt\n+          rustup override set nightly\n+      - name: Formatting (miri, ui_test)\n+        run: cargo fmt --all --check\n+      - name: Formatting (cargo-miri)\n+        run: cargo fmt --manifest-path cargo-miri/Cargo.toml --all --check\n+\n+  clippy:\n+    name: clippy (ignored by bors)\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v3\n+      - name: Install required toolchain\n+        # We need a toolchain that can actually build Miri, just a nightly won't do.\n+        run: |\n+          cargo install rustup-toolchain-install-master # TODO: cache this?\n+          ./rustup-toolchain \"\" -c clippy\n+      - name: Clippy (miri)\n+        run: cargo clippy --all-targets -- -D warnings\n+      #- name: Clippy (ui_test)\n+      #  run: cargo clippy --manifest-path ui_test/Cargo.toml --all-targets -- -D warnings\n+      - name: Clippy (cargo-miri)\n+        run: cargo clippy --manifest-path cargo-miri/Cargo.toml --all-targets -- -D warnings\n \n   # These jobs doesn't actually test anything, but they're only used to tell\n   # bors the build completed, as there is no practical way to detect when a"}, {"sha": "0c2732828966cdc6a20a89f5bb09b698e399cbc6", "filename": "benches/helpers/fibonacci_helper_iterative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/benches%2Fhelpers%2Ffibonacci_helper_iterative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/benches%2Fhelpers%2Ffibonacci_helper_iterative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Ffibonacci_helper_iterative.rs?ref=5f988ab55357f3bf71e32597f3ae6707a7f1bf0b", "patch": "@@ -9,7 +9,7 @@ fn fib(n: usize) -> usize {\n     for _ in 0..n {\n         let c = a;\n         a = b;\n-        b = c + b;\n+        b += c;\n     }\n     a\n }"}, {"sha": "ba885d307a85f630b2e465ccbc88609025a28a46", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=5f988ab55357f3bf71e32597f3ae6707a7f1bf0b", "patch": "@@ -1,3 +1,5 @@\n+#![allow(clippy::useless_format, clippy::derive_partial_eq_without_eq)]\n+\n mod version;\n \n use std::env;\n@@ -96,6 +98,9 @@ fn show_version() {\n     // Only use `option_env` on vergen variables to ensure the build succeeds\n     // when vergen failed to find the git info.\n     if let Some(sha) = option_env!(\"VERGEN_GIT_SHA_SHORT\") {\n+        // This `unwrap` can never fail because if VERGEN_GIT_SHA_SHORT exists, then so does\n+        // VERGEN_GIT_COMMIT_DATE.\n+        #[allow(clippy::option_env_unwrap)]\n         write!(&mut version, \" ({} {})\", sha, option_env!(\"VERGEN_GIT_COMMIT_DATE\").unwrap())\n             .unwrap();\n     }\n@@ -135,16 +140,14 @@ impl<I: Iterator<Item = String>> Iterator for ArgSplitFlagValue<'_, I> {\n \n     fn next(&mut self) -> Option<Self::Item> {\n         let arg = self.args.next()?;\n-        if arg.starts_with(self.name) {\n+        if let Some(suffix) = arg.strip_prefix(self.name) {\n             // Strip leading `name`.\n-            let suffix = &arg[self.name.len()..];\n             if suffix.is_empty() {\n                 // This argument is exactly `name`; the next one is the value.\n                 return self.args.next().map(Ok);\n-            } else if suffix.starts_with('=') {\n+            } else if let Some(suffix) = suffix.strip_prefix('=') {\n                 // This argument is `name=value`; get the value.\n-                // Strip leading `=`.\n-                return Some(Ok(suffix[1..].to_owned()));\n+                return Some(Ok(suffix.to_owned()));\n             }\n         }\n         Some(Err(arg))\n@@ -255,7 +258,7 @@ fn xargo_version() -> Option<(u32, u32, u32)> {\n     let line = out\n         .stderr\n         .lines()\n-        .nth(0)\n+        .next()\n         .expect(\"malformed `xargo --version` output: not at least one line\")\n         .expect(\"malformed `xargo --version` output: error reading first line\");\n     let (name, version) = {\n@@ -285,7 +288,7 @@ fn xargo_version() -> Option<(u32, u32, u32)> {\n         .expect(\"malformed `xargo --version` output: not a patch version piece\")\n         .parse()\n         .expect(\"malformed `xargo --version` output: patch version is not an integer\");\n-    if !version_pieces.next().is_none() {\n+    if version_pieces.next().is_some() {\n         panic!(\"malformed `xargo --version` output: more than three pieces in version\");\n     }\n     Some((major, minor, patch))\n@@ -311,7 +314,7 @@ fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n         println!(\"Running `{:?}` to {}.\", cmd, text);\n     }\n \n-    if cmd.status().expect(&format!(\"failed to execute {:?}\", cmd)).success().not() {\n+    if cmd.status().unwrap_or_else(|_| panic!(\"failed to execute {:?}\", cmd)).success().not() {\n         show_error(format!(\"failed to {}\", text));\n     }\n }\n@@ -499,10 +502,11 @@ fn get_cargo_metadata() -> Metadata {\n     for arg in ArgSplitFlagValue::new(\n         env::args().skip(3), // skip the program name, \"miri\" and \"run\" / \"test\"\n         config_flag,\n-    ) {\n-        if let Ok(config) = arg {\n-            cmd.arg(config_flag).arg(config);\n-        }\n+    )\n+    // Only look at `Ok`\n+    .flatten()\n+    {\n+        cmd.arg(config_flag).arg(arg);\n     }\n     let mut child = cmd\n         .stdin(process::Stdio::null())\n@@ -524,11 +528,11 @@ fn get_cargo_metadata() -> Metadata {\n /// Additionally, somewhere between cargo metadata and TyCtxt, '-' gets replaced with '_' so we\n /// make that same transformation here.\n fn local_crates(metadata: &Metadata) -> String {\n-    assert!(metadata.workspace_members.len() > 0);\n+    assert!(!metadata.workspace_members.is_empty());\n     let mut local_crates = String::new();\n     for member in &metadata.workspace_members {\n-        let name = member.split(\" \").nth(0).unwrap();\n-        let name = name.replace(\"-\", \"_\");\n+        let name = member.split(' ').next().unwrap();\n+        let name = name.replace('-', \"_\");\n         local_crates.push_str(&name);\n         local_crates.push(',');\n     }\n@@ -708,7 +712,7 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n                 get_arg_flag_value(\"--crate-name\").unwrap(),\n                 // This is technically a `-C` flag but the prefix seems unique enough...\n                 // (and cargo passes this before the filename so it should be unique)\n-                get_arg_flag_value(\"extra-filename\").unwrap_or(String::new()),\n+                get_arg_flag_value(\"extra-filename\").unwrap_or_default(),\n                 suffix,\n             ));\n             path\n@@ -808,11 +812,10 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n         // Forward arguments, but remove \"link\" from \"--emit\" to make this a check-only build.\n         let emit_flag = \"--emit\";\n         while let Some(arg) = args.next() {\n-            if arg.starts_with(emit_flag) {\n+            if let Some(val) = arg.strip_prefix(emit_flag) {\n                 // Patch this argument. First, extract its value.\n-                let val = &arg[emit_flag.len()..];\n-                assert!(val.starts_with(\"=\"), \"`cargo` should pass `--emit=X` as one argument\");\n-                let val = &val[1..];\n+                let val =\n+                    val.strip_prefix('=').expect(\"`cargo` should pass `--emit=X` as one argument\");\n                 let mut val: Vec<_> = val.split(',').collect();\n                 // Now make sure \"link\" is not in there, but \"metadata\" is.\n                 if let Some(i) = val.iter().position(|&s| s == \"link\") {\n@@ -937,12 +940,10 @@ fn phase_runner(binary: &Path, binary_args: env::Args, phase: RunnerPhase) {\n     while let Some(arg) = args.next() {\n         if arg == \"--extern\" {\n             forward_patched_extern_arg(&mut args, &mut cmd);\n-        } else if arg.starts_with(error_format_flag) {\n-            let suffix = &arg[error_format_flag.len()..];\n+        } else if let Some(suffix) = arg.strip_prefix(error_format_flag) {\n             assert!(suffix.starts_with('='));\n             // Drop this argument.\n-        } else if arg.starts_with(json_flag) {\n-            let suffix = &arg[json_flag.len()..];\n+        } else if let Some(suffix) = arg.strip_prefix(json_flag) {\n             assert!(suffix.starts_with('='));\n             // Drop this argument.\n         } else {"}, {"sha": "7e5d57349b9dd6298240c71ffbb11442abbce631", "filename": "rustup-toolchain", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/rustup-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/rustup-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustup-toolchain?ref=5f988ab55357f3bf71e32597f3ae6707a7f1bf0b", "patch": "@@ -12,6 +12,8 @@ set -e\n # ./rustup-toolchain HEAD: Update \"miri\" toolchain and `rust-version` file to latest rustc HEAD.\n #\n # ./rustup-toolchain $COMMIT: Update \"miri\" toolchain and `rust-version` file to match that commit.\n+#\n+# Any extra parameters are passed to `rustup-toolchain-install-master`.\n \n # Make sure rustup-toolchain-install-master is installed.\n if ! which rustup-toolchain-install-master >/dev/null; then\n@@ -28,6 +30,7 @@ else\n     NEW_COMMIT=\"$1\"\n fi\n echo \"$NEW_COMMIT\" > rust-version\n+shift\n \n # Check if we already are at that commit.\n CUR_COMMIT=$(rustc +miri --version -v 2>/dev/null | egrep \"^commit-hash: \" | cut -d \" \" -f 2)\n@@ -39,7 +42,7 @@ fi\n \n # Install and setup new toolchain.\n rustup toolchain uninstall miri\n-rustup-toolchain-install-master -n miri -c cargo -c rust-src -c rustc-dev -c llvm-tools -- \"$NEW_COMMIT\"\n+rustup-toolchain-install-master -n miri -c cargo -c rust-src -c rustc-dev -c llvm-tools \"$@\" -- \"$NEW_COMMIT\"\n rustup override set miri\n \n # Cleanup."}, {"sha": "f7c256656a7688ef09e2065cbf2cb6f06995140e", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5f988ab55357f3bf71e32597f3ae6707a7f1bf0b", "patch": "@@ -7,19 +7,16 @@\n #![feature(io_error_more)]\n #![warn(rust_2018_idioms)]\n #![allow(\n-    clippy::cast_lossless,\n     clippy::collapsible_else_if,\n     clippy::collapsible_if,\n     clippy::comparison_chain,\n     clippy::enum_variant_names,\n     clippy::field_reassign_with_default,\n-    clippy::from_over_into,\n-    clippy::if_same_then_else,\n     clippy::manual_map,\n-    clippy::needless_lifetimes,\n     clippy::new_without_default,\n     clippy::single_match,\n-    clippy::useless_format\n+    clippy::useless_format,\n+    clippy::derive_partial_eq_without_eq\n )]\n \n extern crate rustc_apfloat;"}, {"sha": "6a7cbe58711aa1fa4dd8905dd04a0884250f7197", "filename": "src/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=5f988ab55357f3bf71e32597f3ae6707a7f1bf0b", "patch": "@@ -89,10 +89,10 @@ pub enum MiriMemoryKind {\n     Tls,\n }\n \n-impl Into<MemoryKind<MiriMemoryKind>> for MiriMemoryKind {\n+impl From<MiriMemoryKind> for MemoryKind<MiriMemoryKind> {\n     #[inline(always)]\n-    fn into(self) -> MemoryKind<MiriMemoryKind> {\n-        MemoryKind::Machine(self)\n+    fn from(kind: MiriMemoryKind) -> MemoryKind<MiriMemoryKind> {\n+        MemoryKind::Machine(kind)\n     }\n }\n "}, {"sha": "8d4da31fd0d777de75d0f4811b7199b5cbef2c3e", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=5f988ab55357f3bf71e32597f3ae6707a7f1bf0b", "patch": "@@ -1389,7 +1389,7 @@ fn bool_to_simd_element(b: bool, size: Size) -> Scalar<Tag> {\n     Scalar::from_int(val, size)\n }\n \n-fn simd_element_to_bool<'tcx>(elem: ImmTy<'tcx, Tag>) -> InterpResult<'tcx, bool> {\n+fn simd_element_to_bool(elem: ImmTy<'_, Tag>) -> InterpResult<'_, bool> {\n     let val = elem.to_scalar()?.to_int(elem.layout.size)?;\n     Ok(match val {\n         0 => false,"}, {"sha": "373996312eaf6e36bdeb0c1f001601be357da88f", "filename": "src/shims/posix/sync.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/src%2Fshims%2Fposix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f988ab55357f3bf71e32597f3ae6707a7f1bf0b/src%2Fshims%2Fposix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fsync.rs?ref=5f988ab55357f3bf71e32597f3ae6707a7f1bf0b", "patch": "@@ -535,9 +535,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 throw_ub_format!(\n                     \"unlocked a PTHREAD_MUTEX_NORMAL mutex that was not locked by the current thread\"\n                 );\n-            } else if kind == this.eval_libc(\"PTHREAD_MUTEX_ERRORCHECK\")? {\n-                this.eval_libc_i32(\"EPERM\")\n-            } else if kind == this.eval_libc(\"PTHREAD_MUTEX_RECURSIVE\")? {\n+            } else if kind == this.eval_libc(\"PTHREAD_MUTEX_ERRORCHECK\")?\n+                || kind == this.eval_libc(\"PTHREAD_MUTEX_RECURSIVE\")?\n+            {\n                 this.eval_libc_i32(\"EPERM\")\n             } else {\n                 throw_unsup_format!(\"called pthread_mutex_unlock on an unsupported type of mutex\");\n@@ -642,6 +642,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let id = rwlock_get_or_create_id(this, rwlock_op)?;\n         let active_thread = this.get_active_thread();\n \n+        #[allow(clippy::if_same_then_else)]\n         if this.rwlock_reader_unlock(id, active_thread) {\n             Ok(0)\n         } else if this.rwlock_writer_unlock(id, active_thread) {"}]}