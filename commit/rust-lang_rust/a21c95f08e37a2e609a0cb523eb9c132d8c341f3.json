{"sha": "a21c95f08e37a2e609a0cb523eb9c132d8c341f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMWM5NWYwOGUzN2EyZTYwOWEwY2I1MjNlYjljMTMyZDhjMzQxZjM=", "commit": {"author": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2018-11-21T14:32:51Z"}, "committer": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2019-01-27T21:59:00Z"}, "message": "Mark non-static generators as always Unpin", "tree": {"sha": "27506981a7d8f86a418ba3a31c241639a22987cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27506981a7d8f86a418ba3a31c241639a22987cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a21c95f08e37a2e609a0cb523eb9c132d8c341f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a21c95f08e37a2e609a0cb523eb9c132d8c341f3", "html_url": "https://github.com/rust-lang/rust/commit/a21c95f08e37a2e609a0cb523eb9c132d8c341f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a21c95f08e37a2e609a0cb523eb9c132d8c341f3/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4bf5f9d63ea04b8907a3b41862f0372ed2afda8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4bf5f9d63ea04b8907a3b41862f0372ed2afda8", "html_url": "https://github.com/rust-lang/rust/commit/c4bf5f9d63ea04b8907a3b41862f0372ed2afda8"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "6fe4a7a52be86a791b19831e9e01ba83a0c609e7", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a21c95f08e37a2e609a0cb523eb9c132d8c341f3/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a21c95f08e37a2e609a0cb523eb9c132d8c341f3/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=a21c95f08e37a2e609a0cb523eb9c132d8c341f3", "patch": "@@ -2017,12 +2017,24 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     // the auto impl might apply, we don't know\n                     candidates.ambiguous = true;\n                 }\n-                ty::Generator(_, _, hir::GeneratorMovability::Static)\n+                ty::Generator(_, _, movability)\n                     if self.tcx().lang_items().unpin_trait() == Some(def_id) =>\n                 {\n-                    // Immovable generators are never `Unpin`, so suppress the\n-                    // normal auto-impl candidate for it.\n+                    match movability {\n+                        hir::GeneratorMovability::Static => {\n+                            // Immovable generators are never `Unpin`, so\n+                            // suppress the normal auto-impl candidate for it.\n+                        }\n+                        hir::GeneratorMovability::Movable => {\n+                            // Movable generators are always `Unpin`, so add an\n+                            // unconditional builtin candidate.\n+                            candidates.vec.push(BuiltinCandidate {\n+                                has_nested: false,\n+                            });\n+                        }\n+                    }\n                 }\n+\n                 _ => candidates.vec.push(AutoImplCandidate(def_id.clone())),\n             }\n         }"}, {"sha": "613c495832f00aa108558c3b6a88bfdf8af7ee8a", "filename": "src/test/run-pass/generator/auxiliary/xcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a21c95f08e37a2e609a0cb523eb9c132d8c341f3/src%2Ftest%2Frun-pass%2Fgenerator%2Fauxiliary%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a21c95f08e37a2e609a0cb523eb9c132d8c341f3/src%2Ftest%2Frun-pass%2Fgenerator%2Fauxiliary%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fauxiliary%2Fxcrate.rs?ref=a21c95f08e37a2e609a0cb523eb9c132d8c341f3", "patch": "@@ -11,7 +11,7 @@ pub fn foo() -> impl Generator<Yield = (), Return = ()> {\n     }\n }\n \n-pub fn bar<T: Unpin + 'static>(t: T) -> Box<Generator<Yield = T, Return = ()> + Unpin> {\n+pub fn bar<T: 'static>(t: T) -> Box<Generator<Yield = T, Return = ()> + Unpin> {\n     Box::new(|| {\n         yield t;\n     })"}, {"sha": "96d0a8e283372a4be54f9c9c44bf22cc98ef6d3e", "filename": "src/test/run-pass/generator/non-static-is-unpin.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a21c95f08e37a2e609a0cb523eb9c132d8c341f3/src%2Ftest%2Frun-pass%2Fgenerator%2Fnon-static-is-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a21c95f08e37a2e609a0cb523eb9c132d8c341f3/src%2Ftest%2Frun-pass%2Fgenerator%2Fnon-static-is-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fnon-static-is-unpin.rs?ref=a21c95f08e37a2e609a0cb523eb9c132d8c341f3", "patch": "@@ -0,0 +1,18 @@\n+// run-pass\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::marker::{PhantomPinned, Unpin};\n+\n+fn assert_unpin<G: Unpin>(_: G) {\n+}\n+\n+fn main() {\n+    // Even though this generator holds a `PhantomPinned` in its environment, it\n+    // remains `Unpin`.\n+    assert_unpin(|| {\n+        let pinned = PhantomPinned;\n+        yield;\n+        drop(pinned);\n+    });\n+}"}]}