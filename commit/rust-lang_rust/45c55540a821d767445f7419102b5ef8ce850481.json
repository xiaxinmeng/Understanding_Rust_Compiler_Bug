{"sha": "45c55540a821d767445f7419102b5ef8ce850481", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YzU1NTQwYTgyMWQ3Njc0NDVmNzQxOTEwMmI1ZWY4Y2U4NTA0ODE=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-05-17T21:19:48Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-06T21:04:03Z"}, "message": "Remove some last remants of {push,pop}_unsafe!\n\nThese macros have already been removed, but there was still some code\nhandling these macros. That code is now removed.", "tree": {"sha": "1cecb2f034ed86e05c66df9e963e434cda9bace1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cecb2f034ed86e05c66df9e963e434cda9bace1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45c55540a821d767445f7419102b5ef8ce850481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45c55540a821d767445f7419102b5ef8ce850481", "html_url": "https://github.com/rust-lang/rust/commit/45c55540a821d767445f7419102b5ef8ce850481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45c55540a821d767445f7419102b5ef8ce850481/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "289ada5ed41fd1b9a3ffe2b694e6e73079528587", "url": "https://api.github.com/repos/rust-lang/rust/commits/289ada5ed41fd1b9a3ffe2b694e6e73079528587", "html_url": "https://github.com/rust-lang/rust/commit/289ada5ed41fd1b9a3ffe2b694e6e73079528587"}], "stats": {"total": 67, "additions": 13, "deletions": 54}, "files": [{"sha": "bb8d6386d8a746ba81c0c9919db752374e6fa03a", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=45c55540a821d767445f7419102b5ef8ce850481", "patch": "@@ -1205,8 +1205,6 @@ pub struct ExprField<'hir> {\n pub enum BlockCheckMode {\n     DefaultBlock,\n     UnsafeBlock(UnsafeSource),\n-    PushUnsafeBlock(UnsafeSource),\n-    PopUnsafeBlock(UnsafeSource),\n }\n \n #[derive(Copy, Clone, PartialEq, Encodable, Debug, HashStable_Generic)]"}, {"sha": "d11dca1cba47de1a01528caef1dbc3a2f27b81db", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=45c55540a821d767445f7419102b5ef8ce850481", "patch": "@@ -1070,8 +1070,6 @@ impl<'a> State<'a> {\n     ) {\n         match blk.rules {\n             hir::BlockCheckMode::UnsafeBlock(..) => self.word_space(\"unsafe\"),\n-            hir::BlockCheckMode::PushUnsafeBlock(..) => self.word_space(\"push_unsafe\"),\n-            hir::BlockCheckMode::PopUnsafeBlock(..) => self.word_space(\"pop_unsafe\"),\n             hir::BlockCheckMode::DefaultBlock => (),\n         }\n         self.maybe_print_comment(blk.span.lo());"}, {"sha": "0daaec272fd902d9c6f97a10d34e4294c881176e", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=45c55540a821d767445f7419102b5ef8ce850481", "patch": "@@ -494,8 +494,6 @@ impl<'tcx> Body<'tcx> {\n #[derive(Copy, Clone, PartialEq, Eq, Debug, TyEncodable, TyDecodable, HashStable)]\n pub enum Safety {\n     Safe,\n-    /// Unsafe because of a PushUnsafeBlock\n-    BuiltinUnsafe,\n     /// Unsafe because of an unsafe fn\n     FnUnsafe,\n     /// Unsafe because of an `unsafe` block"}, {"sha": "bd0f9f1ef0bbd12bd2887d07e8301ddb208e983f", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=45c55540a821d767445f7419102b5ef8ce850481", "patch": "@@ -101,8 +101,6 @@ pub struct Block {\n pub enum BlockSafety {\n     Safe,\n     ExplicitUnsafe(hir::HirId),\n-    PushUnsafe,\n-    PopUnsafe,\n }\n \n #[derive(Debug, HashStable)]"}, {"sha": "324a5257f5dfa446a261824b4a3870d03189a1c4", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=45c55540a821d767445f7419102b5ef8ce850481", "patch": "@@ -321,7 +321,6 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                 }\n                 false\n             }\n-            Safety::BuiltinUnsafe => true,\n             Safety::ExplicitUnsafe(hir_id) => {\n                 // mark unsafe block as used if there are any unsafe operations inside\n                 if !violations.is_empty() {"}, {"sha": "4e1983aca9443f7de6f70fe0ab51f92c8bc7d710", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=45c55540a821d767445f7419102b5ef8ce850481", "patch": "@@ -74,8 +74,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // First we build all the statements in the block.\n         let mut let_scope_stack = Vec::with_capacity(8);\n         let outer_source_scope = this.source_scope;\n-        let outer_push_unsafe_count = this.push_unsafe_count;\n-        let outer_unpushed_unsafe = this.unpushed_unsafe;\n+        let outer_in_scope_unsafe = this.in_scope_unsafe;\n         this.update_source_scope_for_safety_mode(span, safety_mode);\n \n         let source_info = this.source_info(span);\n@@ -206,8 +205,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n         // Restore the original source scope.\n         this.source_scope = outer_source_scope;\n-        this.push_unsafe_count = outer_push_unsafe_count;\n-        this.unpushed_unsafe = outer_unpushed_unsafe;\n+        this.in_scope_unsafe = outer_in_scope_unsafe;\n         block.unit()\n     }\n \n@@ -217,29 +215,17 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let new_unsafety = match safety_mode {\n             BlockSafety::Safe => None,\n             BlockSafety::ExplicitUnsafe(hir_id) => {\n-                assert_eq!(self.push_unsafe_count, 0);\n-                match self.unpushed_unsafe {\n+                match self.in_scope_unsafe {\n                     Safety::Safe => {}\n                     // no longer treat `unsafe fn`s as `unsafe` contexts (see RFC #2585)\n                     Safety::FnUnsafe\n                         if self.tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, hir_id).0\n                             != Level::Allow => {}\n                     _ => return,\n                 }\n-                self.unpushed_unsafe = Safety::ExplicitUnsafe(hir_id);\n+                self.in_scope_unsafe = Safety::ExplicitUnsafe(hir_id);\n                 Some(Safety::ExplicitUnsafe(hir_id))\n             }\n-            BlockSafety::PushUnsafe => {\n-                self.push_unsafe_count += 1;\n-                Some(Safety::BuiltinUnsafe)\n-            }\n-            BlockSafety::PopUnsafe => {\n-                self.push_unsafe_count = self\n-                    .push_unsafe_count\n-                    .checked_sub(1)\n-                    .unwrap_or_else(|| span_bug!(span, \"unsafe count underflow\"));\n-                if self.push_unsafe_count == 0 { Some(self.unpushed_unsafe) } else { None }\n-            }\n         };\n \n         if let Some(unsafety) = new_unsafety {"}, {"sha": "f5f6da3ec0bbac4cb4e79fa9155fe9404a422997", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=45c55540a821d767445f7419102b5ef8ce850481", "patch": "@@ -367,12 +367,8 @@ struct Builder<'a, 'tcx> {\n     /// `{ STMTS; EXPR1 } + EXPR2`.\n     block_context: BlockContext,\n \n-    /// The current unsafe block in scope, even if it is hidden by\n-    /// a `PushUnsafeBlock`.\n-    unpushed_unsafe: Safety,\n-\n-    /// The number of `push_unsafe_block` levels in scope.\n-    push_unsafe_count: usize,\n+    /// The current unsafe block in scope\n+    in_scope_unsafe: Safety,\n \n     /// The vector of all scopes that we have created thus far;\n     /// we track this for debuginfo later.\n@@ -877,8 +873,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             source_scopes: IndexVec::new(),\n             source_scope: OUTERMOST_SOURCE_SCOPE,\n             guard_context: vec![],\n-            push_unsafe_count: 0,\n-            unpushed_unsafe: safety,\n+            in_scope_unsafe: safety,\n             local_decls: IndexVec::from_elem_n(LocalDecl::new(return_ty, return_span), 1),\n             canonical_user_type_annotations: IndexVec::new(),\n             upvar_mutbls: vec![],"}, {"sha": "4fe8cd8541aaeed9798aaac470bc4aaa3399ee06", "filename": "compiler/rustc_mir_build/src/thir/cx/block.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs?ref=45c55540a821d767445f7419102b5ef8ce850481", "patch": "@@ -27,8 +27,6 @@ impl<'tcx> Cx<'tcx> {\n             safety_mode: match block.rules {\n                 hir::BlockCheckMode::DefaultBlock => BlockSafety::Safe,\n                 hir::BlockCheckMode::UnsafeBlock(..) => BlockSafety::ExplicitUnsafe(block.hir_id),\n-                hir::BlockCheckMode::PushUnsafeBlock(..) => BlockSafety::PushUnsafe,\n-                hir::BlockCheckMode::PopUnsafeBlock(..) => BlockSafety::PopUnsafe,\n             },\n         }\n     }"}, {"sha": "d102896bfa613e58a8ddcfbae861d8a7428fe406", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c55540a821d767445f7419102b5ef8ce850481/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=45c55540a821d767445f7419102b5ef8ce850481", "patch": "@@ -174,13 +174,12 @@ impl Needs {\n pub struct UnsafetyState {\n     pub def: hir::HirId,\n     pub unsafety: hir::Unsafety,\n-    pub unsafe_push_count: u32,\n     from_fn: bool,\n }\n \n impl UnsafetyState {\n     pub fn function(unsafety: hir::Unsafety, def: hir::HirId) -> UnsafetyState {\n-        UnsafetyState { def, unsafety, unsafe_push_count: 0, from_fn: true }\n+        UnsafetyState { def, unsafety, from_fn: true }\n     }\n \n     pub fn recurse(self, blk: &hir::Block<'_>) -> UnsafetyState {\n@@ -193,19 +192,11 @@ impl UnsafetyState {\n             hir::Unsafety::Unsafe if self.from_fn => self,\n \n             unsafety => {\n-                let (unsafety, def, count) = match blk.rules {\n-                    BlockCheckMode::PushUnsafeBlock(..) => {\n-                        (unsafety, blk.hir_id, self.unsafe_push_count.checked_add(1).unwrap())\n-                    }\n-                    BlockCheckMode::PopUnsafeBlock(..) => {\n-                        (unsafety, blk.hir_id, self.unsafe_push_count.checked_sub(1).unwrap())\n-                    }\n-                    BlockCheckMode::UnsafeBlock(..) => {\n-                        (hir::Unsafety::Unsafe, blk.hir_id, self.unsafe_push_count)\n-                    }\n-                    BlockCheckMode::DefaultBlock => (unsafety, self.def, self.unsafe_push_count),\n+                let (unsafety, def) = match blk.rules {\n+                    BlockCheckMode::UnsafeBlock(..) => (hir::Unsafety::Unsafe, blk.hir_id),\n+                    BlockCheckMode::DefaultBlock => (unsafety, self.def),\n                 };\n-                UnsafetyState { def, unsafety, unsafe_push_count: count, from_fn: false }\n+                UnsafetyState { def, unsafety, from_fn: false }\n             }\n         }\n     }"}, {"sha": "729941f345a9217ad6b6304062965b3b9052b5b0", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c55540a821d767445f7419102b5ef8ce850481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c55540a821d767445f7419102b5ef8ce850481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=45c55540a821d767445f7419102b5ef8ce850481", "patch": "@@ -411,9 +411,7 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n \n         if let ExprKind::Block(block, _) = expr.kind {\n             match block.rules {\n-                BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided)\n-                | BlockCheckMode::PushUnsafeBlock(UnsafeSource::UserProvided)\n-                | BlockCheckMode::PopUnsafeBlock(UnsafeSource::UserProvided) => {\n+                BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) => {\n                     self.has_unsafe = true;\n                 },\n                 _ => {},"}]}