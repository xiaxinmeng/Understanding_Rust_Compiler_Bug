{"sha": "5a184fe85517507fd3b07c6fb36b017e558665f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMTg0ZmU4NTUxNzUwN2ZkM2IwN2M2ZmIzNmIwMTdlNTU4NjY1Zjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T06:59:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T07:00:33Z"}, "message": "Unify style", "tree": {"sha": "59013783df70cbcb09e57ad2c11dc85f496e1574", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59013783df70cbcb09e57ad2c11dc85f496e1574"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a184fe85517507fd3b07c6fb36b017e558665f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a184fe85517507fd3b07c6fb36b017e558665f7", "html_url": "https://github.com/rust-lang/rust/commit/5a184fe85517507fd3b07c6fb36b017e558665f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a184fe85517507fd3b07c6fb36b017e558665f7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dab8808e82b26a45cff00d1f49863562cf4f5ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dab8808e82b26a45cff00d1f49863562cf4f5ce8", "html_url": "https://github.com/rust-lang/rust/commit/dab8808e82b26a45cff00d1f49863562cf4f5ce8"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "af75adbe229673a21969d2d90110cf767882735e", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a184fe85517507fd3b07c6fb36b017e558665f7/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a184fe85517507fd3b07c6fb36b017e558665f7/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=5a184fe85517507fd3b07c6fb36b017e558665f7", "patch": "@@ -56,13 +56,13 @@ pub struct FlycheckHandle {\n \n impl FlycheckHandle {\n     pub fn spawn(\n+        sender: Box<dyn Fn(CheckTask) + Send>,\n         config: FlycheckConfig,\n         workspace_root: PathBuf,\n-        sender: Box<dyn Fn(CheckTask) + Send>,\n     ) -> FlycheckHandle {\n         let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n         let handle = jod_thread::spawn(move || {\n-            FlycheckActor::new(config, workspace_root, sender).run(&cmd_recv);\n+            FlycheckActor::new(sender, config, workspace_root).run(&cmd_recv);\n         });\n         FlycheckHandle { cmd_send, handle }\n     }\n@@ -114,9 +114,9 @@ struct FlycheckActor {\n \n impl FlycheckActor {\n     fn new(\n+        sender: Box<dyn Fn(CheckTask) + Send>,\n         config: FlycheckConfig,\n         workspace_root: PathBuf,\n-        sender: Box<dyn Fn(CheckTask) + Send>,\n     ) -> FlycheckActor {\n         FlycheckActor {\n             sender,"}, {"sha": "c5cf5ff27bac5ef4d1c485b27c8d5f2d9882b155", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a184fe85517507fd3b07c6fb36b017e558665f7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a184fe85517507fd3b07c6fb36b017e558665f7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=5a184fe85517507fd3b07c6fb36b017e558665f7", "patch": "@@ -28,7 +28,7 @@ pub fn load_cargo(\n     let mut vfs = vfs::Vfs::default();\n     let mut loader = {\n         let loader =\n-            vfs_notify::LoaderHandle::spawn(Box::new(move |msg| sender.send(msg).unwrap()));\n+            vfs_notify::NotifyHandle::spawn(Box::new(move |msg| sender.send(msg).unwrap()));\n         Box::new(loader)\n     };\n "}, {"sha": "c022ff705a5c407b915c12d740e5096b1cfc1509", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a184fe85517507fd3b07c6fb36b017e558665f7/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a184fe85517507fd3b07c6fb36b017e558665f7/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=5a184fe85517507fd3b07c6fb36b017e558665f7", "patch": "@@ -37,7 +37,7 @@ fn create_flycheck(\n             let (sender, receiver) = unbounded();\n             let sender = Box::new(move |msg| sender.send(msg).unwrap());\n             let cargo_project_root = cargo.workspace_root().to_path_buf();\n-            let flycheck = FlycheckHandle::spawn(config.clone(), cargo_project_root.into(), sender);\n+            let flycheck = FlycheckHandle::spawn(sender, config.clone(), cargo_project_root.into());\n             Some((flycheck, receiver))\n         }\n         ProjectWorkspace::Json { .. } => {\n@@ -121,7 +121,7 @@ impl GlobalState {\n         };\n \n         let mut loader = {\n-            let loader = vfs_notify::LoaderHandle::spawn(Box::new(move |msg| {\n+            let loader = vfs_notify::NotifyHandle::spawn(Box::new(move |msg| {\n                 task_sender.send(msg).unwrap()\n             }));\n             Box::new(loader)"}, {"sha": "282cf0358071be31d1419830a34ecb0acccfcd01", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5a184fe85517507fd3b07c6fb36b017e558665f7/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a184fe85517507fd3b07c6fb36b017e558665f7/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=5a184fe85517507fd3b07c6fb36b017e558665f7", "patch": "@@ -20,7 +20,7 @@ use walkdir::WalkDir;\n use crate::include::Include;\n \n #[derive(Debug)]\n-pub struct LoaderHandle {\n+pub struct NotifyHandle {\n     // Relative order of fields below is significant.\n     sender: crossbeam_channel::Sender<Message>,\n     _thread: jod_thread::JoinHandle,\n@@ -32,12 +32,12 @@ enum Message {\n     Invalidate(AbsPathBuf),\n }\n \n-impl loader::Handle for LoaderHandle {\n-    fn spawn(sender: loader::Sender) -> LoaderHandle {\n-        let actor = LoaderActor::new(sender);\n+impl loader::Handle for NotifyHandle {\n+    fn spawn(sender: loader::Sender) -> NotifyHandle {\n+        let actor = NotifyActor::new(sender);\n         let (sender, receiver) = unbounded::<Message>();\n         let thread = jod_thread::spawn(move || actor.run(receiver));\n-        LoaderHandle { sender, _thread: thread }\n+        NotifyHandle { sender, _thread: thread }\n     }\n     fn set_config(&mut self, config: loader::Config) {\n         self.sender.send(Message::Config(config)).unwrap()\n@@ -52,10 +52,10 @@ impl loader::Handle for LoaderHandle {\n \n type NotifyEvent = notify::Result<notify::Event>;\n \n-struct LoaderActor {\n+struct NotifyActor {\n+    sender: loader::Sender,\n     config: Vec<(AbsPathBuf, Include, bool)>,\n     watched_paths: FxHashSet<AbsPathBuf>,\n-    sender: loader::Sender,\n     // Drop order of fields bellow is significant,\n     watcher: Option<RecommendedWatcher>,\n     watcher_receiver: Receiver<NotifyEvent>,\n@@ -67,19 +67,19 @@ enum Event {\n     NotifyEvent(NotifyEvent),\n }\n \n-impl LoaderActor {\n-    fn new(sender: loader::Sender) -> LoaderActor {\n+impl NotifyActor {\n+    fn new(sender: loader::Sender) -> NotifyActor {\n         let (watcher_sender, watcher_receiver) = unbounded();\n         let watcher = log_notify_error(Watcher::new_immediate(move |event| {\n             watcher_sender.send(event).unwrap()\n         }));\n \n-        LoaderActor {\n-            watcher,\n-            watcher_receiver,\n-            watched_paths: FxHashSet::default(),\n+        NotifyActor {\n             sender,\n             config: Vec::new(),\n+            watched_paths: FxHashSet::default(),\n+            watcher,\n+            watcher_receiver,\n         }\n     }\n "}]}