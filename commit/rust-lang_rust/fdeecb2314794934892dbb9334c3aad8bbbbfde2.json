{"sha": "fdeecb2314794934892dbb9334c3aad8bbbbfde2", "node_id": "C_kwDOAAsO6NoAKGZkZWVjYjIzMTQ3OTQ5MzQ4OTJkYmI5MzM0YzNhYWQ4YmJiYmZkZTI", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-21T22:03:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-21T22:03:59Z"}, "message": "Rollup merge of #97867 - lcnr:lub-binder, r=oli-obk\n\nlub: don't bail out due to empty binders\n\nallows for the following to compile. The equivalent code using `struct Wrapper<'upper>(fn(&'upper ());` already compiles on stable.\n```rust\nlet _: fn(&'upper ()) = match v {\n    true => lt_in_fn::<'a>(),\n    false => lt_in_fn::<'b>(),\n};\n```\nsee https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=7034a677190110941223cafac6632f70 for a complete example\n\nr? ```@rust-lang/types```", "tree": {"sha": "8f76857b1cfe84621c5e03e415443e566065607f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f76857b1cfe84621c5e03e415443e566065607f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdeecb2314794934892dbb9334c3aad8bbbbfde2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiskBPCRBK7hj4Ov3rIwAAym0IADjrLjmZ5QOIogtsBReeVcjh\ndpv5pQiY9MRtQ+npZ0NdMxpKlJNzOWcPrAvtXOmr55w8Mrd6cgasMAEAwdPh7zD9\n6kL2V/78T5PddKIJGrbBvEanMl2xKVgssRbKqDgUdPr3p1w4Fkq/Iz1X0JJIYAk6\nSmJ1AHzQ5ELuDwhiVfGY7lnDBEVp0zr0q8g6HIANA0HkI+HUKjQIAImF2qVtq5WF\nEQmYFQ9UHoXSxlb7N1IpV851UOOKuyLqrhhEKmlaEQlYJZZ6RmZxKY6xkw2KWUbN\n58Dq55t932qyECQjb/+OX15U5TVp4IbNLm+cNnF7UQP1ySA+kcqVycgJgVJvfsQ=\n=LKnF\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f76857b1cfe84621c5e03e415443e566065607f\nparent dc80ca78b6ec2b6bba02560470347433bcd0bb3c\nparent 0667b00acf939634ff1fd310ed5de2d49c65c6bb\nauthor Yuki Okushi <jtitor@2k36.org> 1655849039 +0900\ncommitter GitHub <noreply@github.com> 1655849039 +0900\n\nRollup merge of #97867 - lcnr:lub-binder, r=oli-obk\n\nlub: don't bail out due to empty binders\n\nallows for the following to compile. The equivalent code using `struct Wrapper<'upper>(fn(&'upper ());` already compiles on stable.\n```rust\nlet _: fn(&'upper ()) = match v {\n    true => lt_in_fn::<'a>(),\n    false => lt_in_fn::<'b>(),\n};\n```\nsee https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=7034a677190110941223cafac6632f70 for a complete example\n\nr? ```@rust-lang/types```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdeecb2314794934892dbb9334c3aad8bbbbfde2", "html_url": "https://github.com/rust-lang/rust/commit/fdeecb2314794934892dbb9334c3aad8bbbbfde2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdeecb2314794934892dbb9334c3aad8bbbbfde2/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc80ca78b6ec2b6bba02560470347433bcd0bb3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc80ca78b6ec2b6bba02560470347433bcd0bb3c", "html_url": "https://github.com/rust-lang/rust/commit/dc80ca78b6ec2b6bba02560470347433bcd0bb3c"}, {"sha": "0667b00acf939634ff1fd310ed5de2d49c65c6bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0667b00acf939634ff1fd310ed5de2d49c65c6bb", "html_url": "https://github.com/rust-lang/rust/commit/0667b00acf939634ff1fd310ed5de2d49c65c6bb"}], "stats": {"total": 221, "additions": 209, "deletions": 12}, "files": [{"sha": "1570a08f3ca8bdb0aa11a3e4bbbe9131fc673a64", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fdeecb2314794934892dbb9334c3aad8bbbbfde2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdeecb2314794934892dbb9334c3aad8bbbbfde2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=fdeecb2314794934892dbb9334c3aad8bbbbfde2", "patch": "@@ -95,12 +95,20 @@ impl<'tcx> TypeRelation<'tcx> for Glb<'_, '_, 'tcx> {\n         T: Relate<'tcx>,\n     {\n         debug!(\"binders(a={:?}, b={:?})\", a, b);\n-\n-        // When higher-ranked types are involved, computing the LUB is\n-        // very challenging, switch to invariance. This is obviously\n-        // overly conservative but works ok in practice.\n-        self.relate_with_variance(ty::Variance::Invariant, ty::VarianceDiagInfo::default(), a, b)?;\n-        Ok(a)\n+        if a.skip_binder().has_escaping_bound_vars() || b.skip_binder().has_escaping_bound_vars() {\n+            // When higher-ranked types are involved, computing the GLB is\n+            // very challenging, switch to invariance. This is obviously\n+            // overly conservative but works ok in practice.\n+            self.relate_with_variance(\n+                ty::Variance::Invariant,\n+                ty::VarianceDiagInfo::default(),\n+                a,\n+                b,\n+            )?;\n+            Ok(a)\n+        } else {\n+            Ok(ty::Binder::dummy(self.relate(a.skip_binder(), b.skip_binder())?))\n+        }\n     }\n }\n "}, {"sha": "9f96d52c85034f36092f4d53f7b6e34339cc630a", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fdeecb2314794934892dbb9334c3aad8bbbbfde2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdeecb2314794934892dbb9334c3aad8bbbbfde2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=fdeecb2314794934892dbb9334c3aad8bbbbfde2", "patch": "@@ -95,12 +95,20 @@ impl<'tcx> TypeRelation<'tcx> for Lub<'_, '_, 'tcx> {\n         T: Relate<'tcx>,\n     {\n         debug!(\"binders(a={:?}, b={:?})\", a, b);\n-\n-        // When higher-ranked types are involved, computing the LUB is\n-        // very challenging, switch to invariance. This is obviously\n-        // overly conservative but works ok in practice.\n-        self.relate_with_variance(ty::Variance::Invariant, ty::VarianceDiagInfo::default(), a, b)?;\n-        Ok(a)\n+        if a.skip_binder().has_escaping_bound_vars() || b.skip_binder().has_escaping_bound_vars() {\n+            // When higher-ranked types are involved, computing the LUB is\n+            // very challenging, switch to invariance. This is obviously\n+            // overly conservative but works ok in practice.\n+            self.relate_with_variance(\n+                ty::Variance::Invariant,\n+                ty::VarianceDiagInfo::default(),\n+                a,\n+                b,\n+            )?;\n+            Ok(a)\n+        } else {\n+            Ok(ty::Binder::dummy(self.relate(a.skip_binder(), b.skip_binder())?))\n+        }\n     }\n }\n "}, {"sha": "8700a88a36ea02908a83ba71ca1067df3ed4b806", "filename": "src/test/ui/lub-glb/empty-binder-future-compat.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fdeecb2314794934892dbb9334c3aad8bbbbfde2/src%2Ftest%2Fui%2Flub-glb%2Fempty-binder-future-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdeecb2314794934892dbb9334c3aad8bbbbfde2/src%2Ftest%2Fui%2Flub-glb%2Fempty-binder-future-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fempty-binder-future-compat.rs?ref=fdeecb2314794934892dbb9334c3aad8bbbbfde2", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+fn lt_in_fn_fn<'a: 'a>() -> fn(fn(&'a ())) {\n+    |_| ()\n+}\n+\n+\n+fn foo<'a, 'b, 'lower>(v: bool)\n+where\n+    'a: 'lower,\n+    'b: 'lower,\n+{\n+        // if we infer `x` to be higher ranked in the future,\n+        // this would cause a type error.\n+        let x = match v {\n+            true => lt_in_fn_fn::<'a>(),\n+            false => lt_in_fn_fn::<'b>(),\n+        };\n+\n+        let _: fn(fn(&'lower())) = x;\n+}\n+\n+fn main() {}"}, {"sha": "557480173ee62478a1c64d6c71a4bca54c5ea8c7", "filename": "src/test/ui/lub-glb/empty-binders-err.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fdeecb2314794934892dbb9334c3aad8bbbbfde2/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdeecb2314794934892dbb9334c3aad8bbbbfde2/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.rs?ref=fdeecb2314794934892dbb9334c3aad8bbbbfde2", "patch": "@@ -0,0 +1,55 @@\n+fn lt<'a: 'a>() -> &'a () {\n+    &()\n+}\n+\n+fn lt_in_fn<'a: 'a>() -> fn(&'a ()) {\n+    |_| ()\n+}\n+\n+struct Contra<'a>(fn(&'a ()));\n+fn lt_in_contra<'a: 'a>() -> Contra<'a> {\n+    Contra(|_| ())\n+}\n+\n+fn covariance<'a, 'b, 'upper>(v: bool)\n+where\n+    'upper: 'a,\n+    'upper: 'b,\n+\n+{\n+    let _: &'upper () = match v {\n+        //~^ ERROR lifetime may not live long enough\n+        //~| ERROR lifetime may not live long enough\n+        true => lt::<'a>(),\n+        false => lt::<'b>(),\n+    };\n+}\n+\n+fn contra_fn<'a, 'b, 'lower>(v: bool)\n+where\n+    'a: 'lower,\n+    'b: 'lower,\n+\n+{\n+\n+    let _: fn(&'lower ()) = match v {\n+        //~^ ERROR lifetime may not live long enough\n+        true => lt_in_fn::<'a>(),\n+        false => lt_in_fn::<'b>(),\n+    };\n+}\n+\n+fn contra_struct<'a, 'b, 'lower>(v: bool)\n+where\n+    'a: 'lower,\n+    'b: 'lower,\n+\n+{\n+    let _: Contra<'lower> = match v {\n+        //~^ ERROR lifetime may not live long enough\n+        true => lt_in_contra::<'a>(),\n+        false => lt_in_contra::<'b>(),\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "f86f22d5e40bf87a49b1c7b7bc0d6aef6dc74ffd", "filename": "src/test/ui/lub-glb/empty-binders-err.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/fdeecb2314794934892dbb9334c3aad8bbbbfde2/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdeecb2314794934892dbb9334c3aad8bbbbfde2/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.stderr?ref=fdeecb2314794934892dbb9334c3aad8bbbbfde2", "patch": "@@ -0,0 +1,59 @@\n+error: lifetime may not live long enough\n+  --> $DIR/empty-binders-err.rs:20:12\n+   |\n+LL | fn covariance<'a, 'b, 'upper>(v: bool)\n+   |               --      ------ lifetime `'upper` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _: &'upper () = match v {\n+   |            ^^^^^^^^^^ type annotation requires that `'a` must outlive `'upper`\n+   |\n+   = help: consider adding the following bound: `'a: 'upper`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/empty-binders-err.rs:20:12\n+   |\n+LL | fn covariance<'a, 'b, 'upper>(v: bool)\n+   |                   --  ------ lifetime `'upper` defined here\n+   |                   |\n+   |                   lifetime `'b` defined here\n+...\n+LL |     let _: &'upper () = match v {\n+   |            ^^^^^^^^^^ type annotation requires that `'b` must outlive `'upper`\n+   |\n+   = help: consider adding the following bound: `'b: 'upper`\n+\n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'upper`\n+   = help: add bound `'b: 'upper`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/empty-binders-err.rs:35:12\n+   |\n+LL | fn contra_fn<'a, 'b, 'lower>(v: bool)\n+   |              --      ------ lifetime `'lower` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+...\n+LL |     let _: fn(&'lower ()) = match v {\n+   |            ^^^^^^^^^^^^^^ type annotation requires that `'lower` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'lower: 'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/empty-binders-err.rs:48:12\n+   |\n+LL | fn contra_struct<'a, 'b, 'lower>(v: bool)\n+   |                  --      ------ lifetime `'lower` defined here\n+   |                  |\n+   |                  lifetime `'a` defined here\n+...\n+LL |     let _: Contra<'lower> = match v {\n+   |            ^^^^^^^^^^^^^^ type annotation requires that `'lower` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'lower: 'a`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "f9d07e79fdabf6cfae700bc055270fee3cd5bcdc", "filename": "src/test/ui/lub-glb/empty-binders.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fdeecb2314794934892dbb9334c3aad8bbbbfde2/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdeecb2314794934892dbb9334c3aad8bbbbfde2/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders.rs?ref=fdeecb2314794934892dbb9334c3aad8bbbbfde2", "patch": "@@ -0,0 +1,45 @@\n+// check-pass\n+//\n+// Check that computing the lub works even for empty binders.\n+fn lt<'a: 'a>() -> &'a () {\n+    &()\n+}\n+\n+fn lt_in_fn<'a: 'a>() -> fn(&'a ()) {\n+    |_| ()\n+}\n+\n+struct Contra<'a>(fn(&'a ()));\n+fn lt_in_contra<'a: 'a>() -> Contra<'a> {\n+    Contra(|_| ())\n+}\n+\n+fn ok<'a, 'b, 'upper, 'lower>(v: bool)\n+where\n+    'upper: 'a,\n+    'upper: 'b,\n+    'a: 'lower,\n+    'b: 'lower,\n+\n+{\n+    let _: &'lower () = match v {\n+        true => lt::<'a>(),\n+        false => lt::<'b>(),\n+    };\n+\n+    // This errored in the past because LUB and GLB always\n+    // bailed out when encountering binders, even if they were\n+    // empty.\n+    let _: fn(&'upper ()) = match v {\n+        true => lt_in_fn::<'a>(),\n+        false => lt_in_fn::<'b>(),\n+    };\n+\n+    // This was already accepted, as relate didn't encounter any binders.\n+    let _: Contra<'upper> = match v {\n+        true => lt_in_contra::<'a>(),\n+        false => lt_in_contra::<'b>(),\n+    };\n+}\n+\n+fn main() {}"}]}