{"sha": "becd479482935a63633861595e276bae6533b25b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlY2Q0Nzk0ODI5MzVhNjM2MzM4NjE1OTVlMjc2YmFlNjUzM2IyNWI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-11T18:05:59Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-11T18:06:21Z"}, "message": "review comment: simplify code by using slice pat", "tree": {"sha": "ecee3c651a6e4dd99dff6f7228705bb5fc2adea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecee3c651a6e4dd99dff6f7228705bb5fc2adea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/becd479482935a63633861595e276bae6533b25b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/becd479482935a63633861595e276bae6533b25b", "html_url": "https://github.com/rust-lang/rust/commit/becd479482935a63633861595e276bae6533b25b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/becd479482935a63633861595e276bae6533b25b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9585fda7bc32db3b129aa7ec43322ae0f089635", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9585fda7bc32db3b129aa7ec43322ae0f089635", "html_url": "https://github.com/rust-lang/rust/commit/b9585fda7bc32db3b129aa7ec43322ae0f089635"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "9dbde5e7852902253caeea24071589adbacdc80f", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/becd479482935a63633861595e276bae6533b25b/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becd479482935a63633861595e276bae6533b25b/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=becd479482935a63633861595e276bae6533b25b", "patch": "@@ -1378,17 +1378,18 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             }\n         };\n \n-        match (lifetime_names.len(), lifetime_names.iter().next(), snippet.as_deref()) {\n-            (1, Some(name), Some(\"&\")) => {\n+        let lifetime_names: Vec<_> = lifetime_names.into_iter().collect();\n+        match (&lifetime_names[..], snippet.as_deref()) {\n+            ([name], Some(\"&\")) => {\n                 suggest_existing(err, &name.as_str()[..], &|name| format!(\"&{} \", name));\n             }\n-            (1, Some(name), Some(\"'_\")) => {\n+            ([name], Some(\"'_\")) => {\n                 suggest_existing(err, &name.as_str()[..], &|n| n.to_string());\n             }\n-            (1, Some(name), Some(\"\")) => {\n+            ([name], Some(\"\")) => {\n                 suggest_existing(err, &name.as_str()[..], &|n| format!(\"{}, \", n).repeat(count));\n             }\n-            (1, Some(name), Some(snippet)) if !snippet.ends_with('>') => {\n+            ([name], Some(snippet)) if !snippet.ends_with('>') => {\n                 let f = |name: &str| {\n                     format!(\n                         \"{}<{}>\",\n@@ -1401,13 +1402,13 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 };\n                 suggest_existing(err, &name.as_str()[..], &f);\n             }\n-            (0, _, Some(\"&\")) if count == 1 => {\n+            ([], Some(\"&\")) if count == 1 => {\n                 suggest_new(err, \"&'a \");\n             }\n-            (0, _, Some(\"'_\")) if count == 1 => {\n+            ([], Some(\"'_\")) if count == 1 => {\n                 suggest_new(err, \"'a\");\n             }\n-            (0, _, Some(snippet)) if !snippet.ends_with('>') && count == 1 => {\n+            ([], Some(snippet)) if !snippet.ends_with('>') && count == 1 => {\n                 if snippet == \"\" {\n                     // This happens when we have `type Bar<'a> = Foo<T>` where we point at the space\n                     // before `T`. We will suggest `type Bar<'a> = Foo<'a, T>`.\n@@ -1416,7 +1417,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     suggest_new(err, &format!(\"{}<'a>\", snippet));\n                 }\n             }\n-            (n, ..) if n > 1 => {\n+            (lts, ..) if lts.len() > 1 => {\n                 err.span_note(lifetime_spans, \"these named lifetimes are available to use\");\n                 if Some(\"\") == snippet.as_deref() {\n                     // This happens when we have `Foo<T>` where we point at the space before `T`,"}]}