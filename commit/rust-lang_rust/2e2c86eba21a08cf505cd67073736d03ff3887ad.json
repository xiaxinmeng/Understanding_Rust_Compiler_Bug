{"sha": "2e2c86eba21a08cf505cd67073736d03ff3887ad", "node_id": "C_kwDOAAsO6NoAKDJlMmM4NmViYTIxYTA4Y2Y1MDVjZDY3MDczNzM2ZDAzZmYzODg3YWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-11T14:23:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-11T14:23:24Z"}, "message": "Auto merge of #92070 - rukai:replace_vec_into_iter_with_array_into_iter, r=Mark-Simulacrum\n\nReplace usages of vec![].into_iter with [].into_iter\n\n`[].into_iter` is idiomatic over `vec![].into_iter` because its simpler and faster (unless the vec is optimized away in which case it would be the same)\n\nSo we should change all the implementation, documentation and tests to use it.\n\nI skipped:\n* `src/tools` - Those are copied in from upstream\n* `src/test/ui` - Hard to tell if `vec![].into_iter` was used intentionally or not here and not much benefit to changing it.\n*  any case where `vec![].into_iter` was used because we specifically needed a `Vec::IntoIter<T>`\n*  any case where it looked like we were intentionally using `vec![].into_iter` to test it.", "tree": {"sha": "a70d28fe023540384d2ab9153708bec5b5e8ed06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a70d28fe023540384d2ab9153708bec5b5e8ed06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e2c86eba21a08cf505cd67073736d03ff3887ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2c86eba21a08cf505cd67073736d03ff3887ad", "html_url": "https://github.com/rust-lang/rust/commit/2e2c86eba21a08cf505cd67073736d03ff3887ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e2c86eba21a08cf505cd67073736d03ff3887ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b1d5841494d6eb7f4944c91a057e16b0f0a9ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b1d5841494d6eb7f4944c91a057e16b0f0a9ea", "html_url": "https://github.com/rust-lang/rust/commit/e4b1d5841494d6eb7f4944c91a057e16b0f0a9ea"}, {"sha": "08829853d3c69f68a5a09fb4bcc53ca87d373a78", "url": "https://api.github.com/repos/rust-lang/rust/commits/08829853d3c69f68a5a09fb4bcc53ca87d373a78", "html_url": "https://github.com/rust-lang/rust/commit/08829853d3c69f68a5a09fb4bcc53ca87d373a78"}], "stats": {"total": 238, "additions": 116, "deletions": 122}, "files": [{"sha": "1e795efa2e1bf1a8e0b69247a0207bdc841b1f12", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -791,7 +791,7 @@ fn get_rust_try_fn<'ll, 'tcx>(\n     )));\n     // `unsafe fn(unsafe fn(*mut i8) -> (), *mut i8, unsafe fn(*mut i8, *mut i8) -> ()) -> i32`\n     let rust_fn_sig = ty::Binder::dummy(cx.tcx.mk_fn_sig(\n-        vec![try_fn_ty, i8p, catch_fn_ty].into_iter(),\n+        [try_fn_ty, i8p, catch_fn_ty].into_iter(),\n         tcx.types.i32,\n         false,\n         hir::Unsafety::Unsafe,"}, {"sha": "0221b9912bbdcdc0af0f8a291a84ce4dba8a9bde", "filename": "compiler/rustc_data_structures/src/thin_vec/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_data_structures%2Fsrc%2Fthin_vec%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_data_structures%2Fsrc%2Fthin_vec%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fthin_vec%2Ftests.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -10,8 +10,8 @@ impl<T> ThinVec<T> {\n fn test_from_iterator() {\n     assert_eq!(std::iter::empty().collect::<ThinVec<String>>().into_vec(), Vec::<String>::new());\n     assert_eq!(std::iter::once(42).collect::<ThinVec<_>>().into_vec(), vec![42]);\n-    assert_eq!(vec![1, 2].into_iter().collect::<ThinVec<_>>().into_vec(), vec![1, 2]);\n-    assert_eq!(vec![1, 2, 3].into_iter().collect::<ThinVec<_>>().into_vec(), vec![1, 2, 3]);\n+    assert_eq!([1, 2].into_iter().collect::<ThinVec<_>>().into_vec(), vec![1, 2]);\n+    assert_eq!([1, 2, 3].into_iter().collect::<ThinVec<_>>().into_vec(), vec![1, 2, 3]);\n }\n \n #[test]"}, {"sha": "458b60077dc75a76d5c3f63e31cf8bfbdb10012e", "filename": "compiler/rustc_data_structures/src/vec_map/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map%2Ftests.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -14,7 +14,7 @@ fn test_from_iterator() {\n     );\n     assert_eq!(std::iter::once((42, true)).collect::<VecMap<_, _>>().into_vec(), vec![(42, true)]);\n     assert_eq!(\n-        vec![(1, true), (2, false)].into_iter().collect::<VecMap<_, _>>().into_vec(),\n+        [(1, true), (2, false)].into_iter().collect::<VecMap<_, _>>().into_vec(),\n         vec![(1, true), (2, false)]\n     );\n }\n@@ -41,7 +41,7 @@ fn test_insert() {\n \n #[test]\n fn test_get() {\n-    let v = vec![(1, true), (2, false)].into_iter().collect::<VecMap<_, _>>();\n+    let v = [(1, true), (2, false)].into_iter().collect::<VecMap<_, _>>();\n     assert_eq!(v.get(&1), Some(&true));\n     assert_eq!(v.get(&2), Some(&false));\n     assert_eq!(v.get(&3), None);"}, {"sha": "c2af2b2a86d1842f55a95ee5cce0914fe073142f", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -455,7 +455,7 @@ impl DiagnosticSpan {\n         let backtrace_step = backtrace.next().map(|bt| {\n             let call_site = Self::from_span_full(bt.call_site, false, None, None, backtrace, je);\n             let def_site_span =\n-                Self::from_span_full(bt.def_site, false, None, None, vec![].into_iter(), je);\n+                Self::from_span_full(bt.def_site, false, None, None, [].into_iter(), je);\n             Box::new(DiagnosticSpanMacroExpansion {\n                 span: call_site,\n                 macro_decl_name: bt.kind.descr(),"}, {"sha": "efbe0b65715f41bde785d14c1bdff0a0fa7d880c", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -158,7 +158,7 @@ impl FromInternal<(TreeAndSpacing, &'_ mut Vec<Self>, &mut Rustc<'_, '_>)>\n                 for ch in data.as_str().chars() {\n                     escaped.extend(ch.escape_debug());\n                 }\n-                let stream = vec![\n+                let stream = [\n                     Ident(sym::doc, false),\n                     Eq,\n                     TokenKind::lit(token::Str, Symbol::intern(&escaped), None),\n@@ -221,7 +221,7 @@ impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {\n                 let integer = TokenKind::lit(token::Integer, symbol, suffix);\n                 let a = tokenstream::TokenTree::token(minus, span);\n                 let b = tokenstream::TokenTree::token(integer, span);\n-                return vec![a, b].into_iter().collect();\n+                return [a, b].into_iter().collect();\n             }\n             TokenTree::Literal(self::Literal {\n                 lit: token::Lit { kind: token::Float, symbol, suffix },\n@@ -232,7 +232,7 @@ impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {\n                 let float = TokenKind::lit(token::Float, symbol, suffix);\n                 let a = tokenstream::TokenTree::token(minus, span);\n                 let b = tokenstream::TokenTree::token(float, span);\n-                return vec![a, b].into_iter().collect();\n+                return [a, b].into_iter().collect();\n             }\n             TokenTree::Literal(self::Literal { lit, span }) => {\n                 return tokenstream::TokenTree::token(Literal(lit), span).into();"}, {"sha": "154bae4cb058b370d3d809dfd79331eecb466013", "filename": "compiler/rustc_graphviz/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_graphviz%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_graphviz%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Ftests.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -56,7 +56,7 @@ impl NodeLabels<&'static str> {\n         match self {\n             UnlabelledNodes(len) => vec![None; len],\n             AllNodesLabelled(lbls) => lbls.into_iter().map(Some).collect(),\n-            SomeNodesLabelled(lbls) => lbls.into_iter().collect(),\n+            SomeNodesLabelled(lbls) => lbls,\n         }\n     }\n "}, {"sha": "184796948b67d21956aa2e63d2a8b755f2ee7538", "filename": "compiler/rustc_incremental/src/persist/fs/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs%2Ftests.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -13,7 +13,7 @@ fn test_all_except_most_recent() {\n         .keys()\n         .cloned()\n         .collect::<FxHashSet<PathBuf>>(),\n-        vec![PathBuf::from(\"1\"), PathBuf::from(\"2\"), PathBuf::from(\"3\"), PathBuf::from(\"4\"),]\n+        [PathBuf::from(\"1\"), PathBuf::from(\"2\"), PathBuf::from(\"3\"), PathBuf::from(\"4\"),]\n             .into_iter()\n             .collect::<FxHashSet<PathBuf>>()\n     );\n@@ -40,7 +40,7 @@ fn test_find_source_directory_in_iter() {\n     // Find newest\n     assert_eq!(\n         find_source_directory_in_iter(\n-            vec![\n+            [\n                 PathBuf::from(\"crate-dir/s-3234-0000-svh\"),\n                 PathBuf::from(\"crate-dir/s-2234-0000-svh\"),\n                 PathBuf::from(\"crate-dir/s-1234-0000-svh\")\n@@ -54,7 +54,7 @@ fn test_find_source_directory_in_iter() {\n     // Filter out \"-working\"\n     assert_eq!(\n         find_source_directory_in_iter(\n-            vec![\n+            [\n                 PathBuf::from(\"crate-dir/s-3234-0000-working\"),\n                 PathBuf::from(\"crate-dir/s-2234-0000-svh\"),\n                 PathBuf::from(\"crate-dir/s-1234-0000-svh\")\n@@ -66,12 +66,12 @@ fn test_find_source_directory_in_iter() {\n     );\n \n     // Handle empty\n-    assert_eq!(find_source_directory_in_iter(vec![].into_iter(), &already_visited), None);\n+    assert_eq!(find_source_directory_in_iter([].into_iter(), &already_visited), None);\n \n     // Handle only working\n     assert_eq!(\n         find_source_directory_in_iter(\n-            vec![\n+            [\n                 PathBuf::from(\"crate-dir/s-3234-0000-working\"),\n                 PathBuf::from(\"crate-dir/s-2234-0000-working\"),\n                 PathBuf::from(\"crate-dir/s-1234-0000-working\")"}, {"sha": "1bf01676cb8b4520e7817143bc90226c67a132af", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -771,7 +771,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     self.suggest_boxing_for_return_impl_trait(\n                         err,\n                         ret_sp,\n-                        vec![then, else_sp].into_iter(),\n+                        [then, else_sp].into_iter(),\n                     );\n                 }\n             }\n@@ -807,11 +807,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         );\n         let sugg = arm_spans\n             .flat_map(|sp| {\n-                vec![\n-                    (sp.shrink_to_lo(), \"Box::new(\".to_string()),\n-                    (sp.shrink_to_hi(), \")\".to_string()),\n-                ]\n-                .into_iter()\n+                [(sp.shrink_to_lo(), \"Box::new(\".to_string()), (sp.shrink_to_hi(), \")\".to_string())]\n+                    .into_iter()\n             })\n             .collect::<Vec<_>>();\n         err.multipart_suggestion("}, {"sha": "8bb0e8b960ca5589df4743e47da360dfa4fb33ce", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -540,8 +540,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // error[E0284]: type annotations needed\n             //  --> file.rs:2:5\n             //   |\n-            // 2 |     vec![Ok(2)].into_iter().collect()?;\n-            //   |                             ^^^^^^^ cannot infer type\n+            // 2 |     [Ok(2)].into_iter().collect()?;\n+            //   |                         ^^^^^^^ cannot infer type\n             //   |\n             //   = note: cannot resolve `<_ as std::ops::Try>::Ok == _`\n             if span.contains(*call_span) { *call_span } else { span }"}, {"sha": "4121a759c37f9abd381386f61cb4ed87be26024d", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -550,8 +550,8 @@ impl<'a> Parser<'a> {\n     /// a diagnostic to suggest removing them.\n     ///\n     /// ```ignore (diagnostic)\n-    /// let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>();\n-    ///                                                        ^^ help: remove extra angle brackets\n+    /// let _ = [1, 2, 3].into_iter().collect::<Vec<usize>>>>();\n+    ///                                                    ^^ help: remove extra angle brackets\n     /// ```\n     ///\n     /// If `true` is returned, then trailing brackets were recovered, tokens were consumed"}, {"sha": "a6c1b344d700719118ceddac83cd166506a6a66f", "filename": "compiler/rustc_target/src/spec/avr_gnu_base.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -17,12 +17,10 @@ pub fn target(target_cpu: String) -> Target {\n             linker: Some(\"avr-gcc\".to_owned()),\n             executables: true,\n             eh_frame_header: false,\n-            pre_link_args: vec![(LinkerFlavor::Gcc, vec![format!(\"-mmcu={}\", target_cpu)])]\n-                .into_iter()\n-                .collect(),\n-            late_link_args: vec![(LinkerFlavor::Gcc, vec![\"-lgcc\".to_owned()])]\n+            pre_link_args: [(LinkerFlavor::Gcc, vec![format!(\"-mmcu={}\", target_cpu)])]\n                 .into_iter()\n                 .collect(),\n+            late_link_args: [(LinkerFlavor::Gcc, vec![\"-lgcc\".to_owned()])].into_iter().collect(),\n             max_atomic_width: Some(0),\n             atomic_cas: false,\n             ..TargetOptions::default()"}, {"sha": "2c149318730eeacf694c687c963508279b3c0de0", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -574,15 +574,15 @@ impl ToJson for StackProbeType {\n     fn to_json(&self) -> Json {\n         Json::Object(match self {\n             StackProbeType::None => {\n-                vec![(String::from(\"kind\"), \"none\".to_json())].into_iter().collect()\n+                [(String::from(\"kind\"), \"none\".to_json())].into_iter().collect()\n             }\n             StackProbeType::Inline => {\n-                vec![(String::from(\"kind\"), \"inline\".to_json())].into_iter().collect()\n+                [(String::from(\"kind\"), \"inline\".to_json())].into_iter().collect()\n             }\n             StackProbeType::Call => {\n-                vec![(String::from(\"kind\"), \"call\".to_json())].into_iter().collect()\n+                [(String::from(\"kind\"), \"call\".to_json())].into_iter().collect()\n             }\n-            StackProbeType::InlineOrCall { min_llvm_version_for_inline } => vec![\n+            StackProbeType::InlineOrCall { min_llvm_version_for_inline } => [\n                 (String::from(\"kind\"), \"inline-or-call\".to_json()),\n                 (\n                     String::from(\"min-llvm-version-for-inline\"),"}, {"sha": "72878b6cb38585dbd14e982f756e435f4b5069f7", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -2247,7 +2247,7 @@ pub fn recursive_type_with_infinite_size_error(\n             spans\n                 .iter()\n                 .flat_map(|&span| {\n-                    vec![\n+                    [\n                         (span.shrink_to_lo(), \"Box<\".to_string()),\n                         (span.shrink_to_hi(), \">\".to_string()),\n                     ]"}, {"sha": "8704c4c74690fe07ce5c204ecef3693e1d12b554", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -1226,7 +1226,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     .returns\n                     .iter()\n                     .flat_map(|expr| {\n-                        vec![\n+                        [\n                             (expr.span.shrink_to_lo(), \"Box::new(\".to_string()),\n                             (expr.span.shrink_to_hi(), \")\".to_string()),\n                         ]"}, {"sha": "bb3b3203a7c20b9aad8e3f115766ff220fad227c", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -1953,7 +1953,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::Generator(_, ref substs, _) => {\n                 let ty = self.infcx.shallow_resolve(substs.as_generator().tupled_upvars_ty());\n                 let witness = substs.as_generator().witness();\n-                t.rebind(vec![ty].into_iter().chain(iter::once(witness)).collect())\n+                t.rebind([ty].into_iter().chain(iter::once(witness)).collect())\n             }\n \n             ty::GeneratorWitness(types) => {"}, {"sha": "01221e5dfa975adc12b83dbd27c646807f0612fc", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -1667,10 +1667,10 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     ],\n                     Applicability::MachineApplicable,\n                 );\n-                let sugg = vec![sp, cause.span]\n+                let sugg = [sp, cause.span]\n                     .into_iter()\n                     .flat_map(|sp| {\n-                        vec![\n+                        [\n                             (sp.shrink_to_lo(), \"Box::new(\".to_string()),\n                             (sp.shrink_to_hi(), \")\".to_string()),\n                         ]"}, {"sha": "36fbfc21ff58c4b1282de4b7cbe3700b4c311d23", "filename": "compiler/rustc_typeck/src/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -86,7 +86,7 @@ pub fn determine_parameters_to_be_inferred<'a, 'tcx>(\n \n fn lang_items(tcx: TyCtxt<'_>) -> Vec<(hir::HirId, Vec<ty::Variance>)> {\n     let lang_items = tcx.lang_items();\n-    let all = vec![\n+    let all = [\n         (lang_items.phantom_data(), vec![ty::Covariant]),\n         (lang_items.unsafe_cell_type(), vec![ty::Invariant]),\n     ];"}, {"sha": "b39b5409ae44f0dfe39ea4f96ea93f024a4bc10b", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -728,7 +728,7 @@ fn test_range_large() {\n #[test]\n fn test_range_inclusive_max_value() {\n     let max = usize::MAX;\n-    let map: BTreeMap<_, _> = vec![(max, 0)].into_iter().collect();\n+    let map: BTreeMap<_, _> = [(max, 0)].into_iter().collect();\n \n     assert_eq!(map.range(max..=max).collect::<Vec<_>>(), &[(&max, &0)]);\n }\n@@ -2128,7 +2128,7 @@ fn test_into_iter_drop_leak_height_1() {\n \n #[test]\n fn test_into_keys() {\n-    let vec = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n+    let vec = [(1, 'a'), (2, 'b'), (3, 'c')];\n     let map: BTreeMap<_, _> = vec.into_iter().collect();\n     let keys: Vec<_> = map.into_keys().collect();\n "}, {"sha": "1259c53bfab153d9617f6d4488cc4eab939f6dec", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -669,7 +669,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut buf: VecDeque<i32> = vec![1].into_iter().collect();\n+    /// let mut buf: VecDeque<i32> = [1].into_iter().collect();\n     /// buf.reserve_exact(10);\n     /// assert!(buf.capacity() >= 11);\n     /// ```\n@@ -692,7 +692,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut buf: VecDeque<i32> = vec![1].into_iter().collect();\n+    /// let mut buf: VecDeque<i32> = [1].into_iter().collect();\n     /// buf.reserve(10);\n     /// assert!(buf.capacity() >= 11);\n     /// ```\n@@ -1153,7 +1153,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let v: VecDeque<_> = vec![1, 2, 3].into_iter().collect();\n+    /// let v: VecDeque<_> = [1, 2, 3].into_iter().collect();\n     /// let range = v.range(2..).copied().collect::<VecDeque<_>>();\n     /// assert_eq!(range, [3]);\n     ///\n@@ -1188,7 +1188,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut v: VecDeque<_> = vec![1, 2, 3].into_iter().collect();\n+    /// let mut v: VecDeque<_> = [1, 2, 3].into_iter().collect();\n     /// for v in v.range_mut(2..) {\n     ///   *v *= 2;\n     /// }\n@@ -1235,7 +1235,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut v: VecDeque<_> = vec![1, 2, 3].into_iter().collect();\n+    /// let mut v: VecDeque<_> = [1, 2, 3].into_iter().collect();\n     /// let drained = v.drain(2..).collect::<VecDeque<_>>();\n     /// assert_eq!(drained, [3]);\n     /// assert_eq!(v, [1, 2]);\n@@ -2025,7 +2025,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut buf: VecDeque<_> = vec![1, 2, 3].into_iter().collect();\n+    /// let mut buf: VecDeque<_> = [1, 2, 3].into_iter().collect();\n     /// let buf2 = buf.split_off(1);\n     /// assert_eq!(buf, [1]);\n     /// assert_eq!(buf2, [2, 3]);\n@@ -2091,8 +2091,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut buf: VecDeque<_> = vec![1, 2].into_iter().collect();\n-    /// let mut buf2: VecDeque<_> = vec![3, 4].into_iter().collect();\n+    /// let mut buf: VecDeque<_> = [1, 2].into_iter().collect();\n+    /// let mut buf2: VecDeque<_> = [3, 4].into_iter().collect();\n     /// buf.append(&mut buf2);\n     /// assert_eq!(buf, [1, 2, 3, 4]);\n     /// assert_eq!(buf2, []);"}, {"sha": "5f5bd9af2fe5f37e9df1decce3fd4e8902208648", "filename": "library/alloc/tests/linked_list.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Falloc%2Ftests%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Falloc%2Ftests%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flinked_list.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -304,7 +304,7 @@ fn test_show() {\n     let list: LinkedList<_> = (0..10).collect();\n     assert_eq!(format!(\"{:?}\", list), \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\");\n \n-    let list: LinkedList<_> = vec![\"just\", \"one\", \"test\", \"more\"].iter().cloned().collect();\n+    let list: LinkedList<_> = [\"just\", \"one\", \"test\", \"more\"].into_iter().collect();\n     assert_eq!(format!(\"{:?}\", list), \"[\\\"just\\\", \\\"one\\\", \\\"test\\\", \\\"more\\\"]\");\n }\n \n@@ -336,7 +336,7 @@ fn test_extend() {\n     assert_eq!(a.len(), 4);\n     assert!(a.iter().eq(&[1, 2, 3, 4]));\n \n-    let b: LinkedList<_> = vec![5, 6, 7].into_iter().collect();\n+    let b: LinkedList<_> = [5, 6, 7].into_iter().collect();\n     a.extend(b); // specializes to `append`\n \n     assert_eq!(a.len(), 7);\n@@ -375,7 +375,7 @@ fn drain_filter_empty() {\n \n #[test]\n fn drain_filter_zst() {\n-    let mut list: LinkedList<_> = vec![(), (), (), (), ()].into_iter().collect();\n+    let mut list: LinkedList<_> = [(), (), (), (), ()].into_iter().collect();\n     let initial_len = list.len();\n     let mut count = 0;\n \n@@ -398,7 +398,7 @@ fn drain_filter_zst() {\n \n #[test]\n fn drain_filter_false() {\n-    let mut list: LinkedList<_> = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10].into_iter().collect();\n+    let mut list: LinkedList<_> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].into_iter().collect();\n \n     let initial_len = list.len();\n     let mut count = 0;\n@@ -421,7 +421,7 @@ fn drain_filter_false() {\n \n #[test]\n fn drain_filter_true() {\n-    let mut list: LinkedList<_> = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10].into_iter().collect();\n+    let mut list: LinkedList<_> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].into_iter().collect();\n \n     let initial_len = list.len();\n     let mut count = 0;\n@@ -447,7 +447,7 @@ fn drain_filter_true() {\n fn drain_filter_complex() {\n     {\n         //                [+xxx++++++xxxxx++++x+x++]\n-        let mut list = vec![\n+        let mut list = [\n             1, 2, 4, 6, 7, 9, 11, 13, 15, 17, 18, 20, 22, 24, 26, 27, 29, 31, 33, 34, 35, 36, 37,\n             39,\n         ]\n@@ -467,11 +467,10 @@ fn drain_filter_complex() {\n \n     {\n         // [xxx++++++xxxxx++++x+x++]\n-        let mut list = vec![\n-            2, 4, 6, 7, 9, 11, 13, 15, 17, 18, 20, 22, 24, 26, 27, 29, 31, 33, 34, 35, 36, 37, 39,\n-        ]\n-        .into_iter()\n-        .collect::<LinkedList<_>>();\n+        let mut list =\n+            [2, 4, 6, 7, 9, 11, 13, 15, 17, 18, 20, 22, 24, 26, 27, 29, 31, 33, 34, 35, 36, 37, 39]\n+                .into_iter()\n+                .collect::<LinkedList<_>>();\n \n         let removed = list.drain_filter(|x| *x % 2 == 0).collect::<Vec<_>>();\n         assert_eq!(removed.len(), 10);\n@@ -487,7 +486,7 @@ fn drain_filter_complex() {\n     {\n         // [xxx++++++xxxxx++++x+x]\n         let mut list =\n-            vec![2, 4, 6, 7, 9, 11, 13, 15, 17, 18, 20, 22, 24, 26, 27, 29, 31, 33, 34, 35, 36]\n+            [2, 4, 6, 7, 9, 11, 13, 15, 17, 18, 20, 22, 24, 26, 27, 29, 31, 33, 34, 35, 36]\n                 .into_iter()\n                 .collect::<LinkedList<_>>();\n \n@@ -504,7 +503,7 @@ fn drain_filter_complex() {\n \n     {\n         // [xxxxxxxxxx+++++++++++]\n-        let mut list = vec![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n+        let mut list = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n             .into_iter()\n             .collect::<LinkedList<_>>();\n \n@@ -518,7 +517,7 @@ fn drain_filter_complex() {\n \n     {\n         // [+++++++++++xxxxxxxxxx]\n-        let mut list = vec![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n+        let mut list = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n             .into_iter()\n             .collect::<LinkedList<_>>();\n "}, {"sha": "893283e5a248572658bff274b08be9445f379ca0", "filename": "library/alloc/tests/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Falloc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Falloc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstring.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -489,7 +489,7 @@ fn test_from_iterator() {\n     b.extend(u.chars());\n     assert_eq!(s, b);\n \n-    let c: String = vec![t, u].into_iter().collect();\n+    let c: String = [t, u].into_iter().collect();\n     assert_eq!(s, c);\n \n     let mut d = t.to_string();"}, {"sha": "705914b44971c4fd011a2de1c48a4b220e897c93", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -449,10 +449,10 @@ fn zero_sized_values() {\n \n #[test]\n fn test_partition() {\n-    assert_eq!(vec![].into_iter().partition(|x: &i32| *x < 3), (vec![], vec![]));\n-    assert_eq!(vec![1, 2, 3].into_iter().partition(|x| *x < 4), (vec![1, 2, 3], vec![]));\n-    assert_eq!(vec![1, 2, 3].into_iter().partition(|x| *x < 2), (vec![1], vec![2, 3]));\n-    assert_eq!(vec![1, 2, 3].into_iter().partition(|x| *x < 0), (vec![], vec![1, 2, 3]));\n+    assert_eq!([].into_iter().partition(|x: &i32| *x < 3), (vec![], vec![]));\n+    assert_eq!([1, 2, 3].into_iter().partition(|x| *x < 4), (vec![1, 2, 3], vec![]));\n+    assert_eq!([1, 2, 3].into_iter().partition(|x| *x < 2), (vec![1], vec![2, 3]));\n+    assert_eq!([1, 2, 3].into_iter().partition(|x| *x < 0), (vec![], vec![1, 2, 3]));\n }\n \n #[test]\n@@ -924,7 +924,7 @@ fn test_into_iter_debug() {\n \n #[test]\n fn test_into_iter_count() {\n-    assert_eq!(vec![1, 2, 3].into_iter().count(), 3);\n+    assert_eq!([1, 2, 3].into_iter().count(), 3);\n }\n \n #[test]\n@@ -933,7 +933,7 @@ fn test_into_iter_clone() {\n         let v: Vec<i32> = it.collect();\n         assert_eq!(&v[..], slice);\n     }\n-    let mut it = vec![1, 2, 3].into_iter();\n+    let mut it = [1, 2, 3].into_iter();\n     iter_equal(it.clone(), &[1, 2, 3]);\n     assert_eq!(it.next(), Some(1));\n     let mut it = it.rev();\n@@ -972,7 +972,7 @@ fn test_into_iter_leak() {\n \n #[test]\n fn test_into_iter_advance_by() {\n-    let mut i = vec![1, 2, 3, 4, 5].into_iter();\n+    let mut i = [1, 2, 3, 4, 5].into_iter();\n     i.advance_by(0).unwrap();\n     i.advance_back_by(0).unwrap();\n     assert_eq!(i.as_slice(), [1, 2, 3, 4, 5]);\n@@ -1799,7 +1799,7 @@ fn test_stable_pointers() {\n     assert_eq!(*v0, 13);\n     next_then_drop(v.splice(5..8, vec![1])); // replacement is smaller than original range\n     assert_eq!(*v0, 13);\n-    next_then_drop(v.splice(5..6, vec![1; 10].into_iter().filter(|_| true))); // lower bound not exact\n+    next_then_drop(v.splice(5..6, [1; 10].into_iter().filter(|_| true))); // lower bound not exact\n     assert_eq!(*v0, 13);\n \n     // spare_capacity_mut"}, {"sha": "18954f094c671c2633d7dadbd080589500179ff3", "filename": "library/alloc/tests/vec_deque.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Falloc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Falloc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec_deque.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -927,8 +927,8 @@ fn test_as_mut_slices() {\n \n #[test]\n fn test_append() {\n-    let mut a: VecDeque<_> = vec![1, 2, 3].into_iter().collect();\n-    let mut b: VecDeque<_> = vec![4, 5, 6].into_iter().collect();\n+    let mut a: VecDeque<_> = [1, 2, 3].into_iter().collect();\n+    let mut b: VecDeque<_> = [4, 5, 6].into_iter().collect();\n \n     // normal append\n     a.append(&mut b);\n@@ -1209,7 +1209,7 @@ fn test_try_reserve() {\n \n     {\n         // Same basic idea, but with non-zero len\n-        let mut ten_bytes: VecDeque<u8> = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10].into_iter().collect();\n+        let mut ten_bytes: VecDeque<u8> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].into_iter().collect();\n \n         if let Err(CapacityOverflow) = ten_bytes.try_reserve(MAX_CAP - 10).map_err(|e| e.kind()) {\n             panic!(\"isize::MAX shouldn't trigger an overflow!\");\n@@ -1240,7 +1240,7 @@ fn test_try_reserve() {\n \n     {\n         // Same basic idea, but with interesting type size\n-        let mut ten_u32s: VecDeque<u32> = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10].into_iter().collect();\n+        let mut ten_u32s: VecDeque<u32> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].into_iter().collect();\n \n         if let Err(CapacityOverflow) = ten_u32s.try_reserve(MAX_CAP / 4 - 10).map_err(|e| e.kind())\n         {\n@@ -1322,7 +1322,7 @@ fn test_try_reserve_exact() {\n     }\n \n     {\n-        let mut ten_bytes: VecDeque<u8> = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10].into_iter().collect();\n+        let mut ten_bytes: VecDeque<u8> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].into_iter().collect();\n \n         if let Err(CapacityOverflow) =\n             ten_bytes.try_reserve_exact(MAX_CAP - 10).map_err(|e| e.kind())\n@@ -1355,7 +1355,7 @@ fn test_try_reserve_exact() {\n     }\n \n     {\n-        let mut ten_u32s: VecDeque<u32> = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10].into_iter().collect();\n+        let mut ten_u32s: VecDeque<u32> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].into_iter().collect();\n \n         if let Err(CapacityOverflow) =\n             ten_u32s.try_reserve_exact(MAX_CAP / 4 - 10).map_err(|e| e.kind())"}, {"sha": "3a149afd771828366cf89bc8a70bda807febf151", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -91,7 +91,7 @@ pub use num::FloatToInt;\n /// ```rust\n /// use std::convert::identity;\n ///\n-/// let iter = vec![Some(1), None, Some(3)].into_iter();\n+/// let iter = [Some(1), None, Some(3)].into_iter();\n /// let filtered = iter.filter_map(identity).collect::<Vec<_>>();\n /// assert_eq!(vec![1, 3], filtered);\n /// ```"}, {"sha": "b2ed82508dd297afb69dad6a258eebbb08f6e523", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -19,7 +19,7 @@ use crate::ops::Try;\n /// you can also [`map`] backwards:\n ///\n /// ```rust\n-/// let v: Vec<i32> = vec![1, 2, 3].into_iter().map(|x| x + 1).rev().collect();\n+/// let v: Vec<i32> = [1, 2, 3].into_iter().map(|x| x + 1).rev().collect();\n ///\n /// assert_eq!(v, [4, 3, 2]);\n /// ```\n@@ -32,7 +32,7 @@ use crate::ops::Try;\n /// ```rust\n /// let mut c = 0;\n ///\n-/// for pair in vec!['a', 'b', 'c'].into_iter()\n+/// for pair in ['a', 'b', 'c'].into_iter()\n ///                                .map(|letter| { c += 1; (letter, c) }) {\n ///     println!(\"{:?}\", pair);\n /// }\n@@ -49,7 +49,7 @@ use crate::ops::Try;\n /// ```rust\n /// let mut c = 0;\n ///\n-/// for pair in vec!['a', 'b', 'c'].into_iter()\n+/// for pair in ['a', 'b', 'c'].into_iter()\n ///                                .map(|letter| { c += 1; (letter, c) })\n ///                                .rev() {\n ///     println!(\"{:?}\", pair);"}, {"sha": "fc14620a2df84b752686aa0daa4d47318079489b", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -124,7 +124,7 @@ pub trait FromIterator<A>: Sized {\n /// Basic usage:\n ///\n /// ```\n-/// let v = vec![1, 2, 3];\n+/// let v = [1, 2, 3];\n /// let mut iter = v.into_iter();\n ///\n /// assert_eq!(Some(1), iter.next());\n@@ -215,7 +215,7 @@ pub trait IntoIterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let v = vec![1, 2, 3];\n+    /// let v = [1, 2, 3];\n     /// let mut iter = v.into_iter();\n     ///\n     /// assert_eq!(Some(1), iter.next());"}, {"sha": "1d947297463d921d5191b0a34a81ac92856475ea", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -590,7 +590,7 @@ pub trait Iterator {\n     /// #[derive(PartialEq, Debug)]\n     /// struct NotClone(usize);\n     ///\n-    /// let v = vec![NotClone(0), NotClone(1), NotClone(2)];\n+    /// let v = [NotClone(0), NotClone(1), NotClone(2)];\n     /// let mut it = v.into_iter().intersperse_with(|| NotClone(99));\n     ///\n     /// assert_eq!(it.next(), Some(NotClone(0)));  // The first element from `v`.\n@@ -1270,7 +1270,7 @@ pub trait Iterator {\n     /// `take` will limit itself to the size of the underlying iterator:\n     ///\n     /// ```\n-    /// let v = vec![1, 2];\n+    /// let v = [1, 2];\n     /// let mut iter = v.into_iter().take(5);\n     /// assert_eq!(iter.next(), Some(1));\n     /// assert_eq!(iter.next(), Some(2));\n@@ -1604,7 +1604,7 @@ pub trait Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let mut words = vec![\"hello\", \"world\", \"of\", \"Rust\"].into_iter();\n+    /// let mut words = [\"hello\", \"world\", \"of\", \"Rust\"].into_iter();\n     ///\n     /// // Take the first two words.\n     /// let hello_world: Vec<_> = words.by_ref().take(2).collect();\n@@ -2700,7 +2700,7 @@ pub trait Iterator {\n     /// incomparable. You can work around this by using [`Iterator::reduce`]:\n     /// ```\n     /// assert_eq!(\n-    ///     vec![2.4, f32::NAN, 1.3]\n+    ///     [2.4, f32::NAN, 1.3]\n     ///         .into_iter()\n     ///         .reduce(f32::max)\n     ///         .unwrap(),\n@@ -2738,7 +2738,7 @@ pub trait Iterator {\n     /// incomparable. You can work around this by using [`Iterator::reduce`]:\n     /// ```\n     /// assert_eq!(\n-    ///     vec![2.4, f32::NAN, 1.3]\n+    ///     [2.4, f32::NAN, 1.3]\n     ///         .into_iter()\n     ///         .reduce(f32::min)\n     ///         .unwrap(),"}, {"sha": "8adfb6f4bcf5221d4f8325e59e65fa12e696f5f3", "filename": "library/core/src/option.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -270,7 +270,7 @@\n //! let mut bt = BTreeMap::new();\n //! bt.insert(20u8, \"foo\");\n //! bt.insert(42u8, \"bar\");\n-//! let res = vec![0u8, 1, 11, 200, 22]\n+//! let res = [0u8, 1, 11, 200, 22]\n //!     .into_iter()\n //!     .map(|x| {\n //!         // `checked_sub()` returns `None` on error\n@@ -390,10 +390,10 @@\n //! [impl-FromIterator]: Option#impl-FromIterator%3COption%3CA%3E%3E\n //!\n //! ```\n-//! let v = vec![Some(2), Some(4), None, Some(8)];\n+//! let v = [Some(2), Some(4), None, Some(8)];\n //! let res: Option<Vec<_>> = v.into_iter().collect();\n //! assert_eq!(res, None);\n-//! let v = vec![Some(2), Some(4), Some(8)];\n+//! let v = [Some(2), Some(4), Some(8)];\n //! let res: Option<Vec<_>> = v.into_iter().collect();\n //! assert_eq!(res, Some(vec![2, 4, 8]));\n //! ```\n@@ -407,10 +407,10 @@\n //! [impl-Sum]: Option#impl-Sum%3COption%3CU%3E%3E\n //!\n //! ```\n-//! let v = vec![None, Some(1), Some(2), Some(3)];\n+//! let v = [None, Some(1), Some(2), Some(3)];\n //! let res: Option<i32> = v.into_iter().sum();\n //! assert_eq!(res, None);\n-//! let v = vec![Some(1), Some(2), Some(21)];\n+//! let v = [Some(1), Some(2), Some(21)];\n //! let res: Option<i32> = v.into_iter().product();\n //! assert_eq!(res, Some(42));\n //! ```"}, {"sha": "b8f0d84746ccea04d17e7fb737fceef19e1fdd15", "filename": "library/core/src/result.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -436,7 +436,7 @@\n //! # use std::str::FromStr;\n //! let mut results = vec![];\n //! let mut errs = vec![];\n-//! let nums: Vec<_> = vec![\"17\", \"not a number\", \"99\", \"-27\", \"768\"]\n+//! let nums: Vec<_> = [\"17\", \"not a number\", \"99\", \"-27\", \"768\"]\n //!    .into_iter()\n //!    .map(u8::from_str)\n //!    // Save clones of the raw `Result` values to inspect\n@@ -462,10 +462,10 @@\n //! [impl-FromIterator]: Result#impl-FromIterator%3CResult%3CA%2C%20E%3E%3E\n //!\n //! ```\n-//! let v = vec![Ok(2), Ok(4), Err(\"err!\"), Ok(8)];\n+//! let v = [Ok(2), Ok(4), Err(\"err!\"), Ok(8)];\n //! let res: Result<Vec<_>, &str> = v.into_iter().collect();\n //! assert_eq!(res, Err(\"err!\"));\n-//! let v = vec![Ok(2), Ok(4), Ok(8)];\n+//! let v = [Ok(2), Ok(4), Ok(8)];\n //! let res: Result<Vec<_>, &str> = v.into_iter().collect();\n //! assert_eq!(res, Ok(vec![2, 4, 8]));\n //! ```\n@@ -479,10 +479,10 @@\n //! [impl-Sum]: Result#impl-Sum%3CResult%3CU%2C%20E%3E%3E\n //!\n //! ```\n-//! let v = vec![Err(\"error!\"), Ok(1), Ok(2), Ok(3), Err(\"foo\")];\n+//! let v = [Err(\"error!\"), Ok(1), Ok(2), Ok(3), Err(\"foo\")];\n //! let res: Result<i32, &str> = v.into_iter().sum();\n //! assert_eq!(res, Err(\"error!\"));\n-//! let v: Vec<Result<i32, &str>> = vec![Ok(1), Ok(2), Ok(21)];\n+//! let v = [Ok(1), Ok(2), Ok(21)];\n //! let res: Result<i32, &str> = v.into_iter().product();\n //! assert_eq!(res, Ok(42));\n //! ```"}, {"sha": "72ae59b6b2f5feaf14a60a12345bef968c4a4133", "filename": "library/core/tests/iter/adapters/intersperse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fintersperse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fintersperse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fintersperse.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -74,7 +74,7 @@ fn test_intersperse_with() {\n     struct NotClone {\n         u: u32,\n     }\n-    let r = vec![NotClone { u: 0 }, NotClone { u: 1 }]\n+    let r = [NotClone { u: 0 }, NotClone { u: 1 }]\n         .into_iter()\n         .intersperse_with(|| NotClone { u: 2 })\n         .collect::<Vec<_>>();\n@@ -120,7 +120,7 @@ fn test_intersperse_fold() {\n \n #[test]\n fn test_intersperse_collect_string() {\n-    let contents = vec![1, 2, 3];\n+    let contents = [1, 2, 3];\n \n     let contents_string = contents\n         .into_iter()"}, {"sha": "c1a1c29b609b7077342ac32b4842403baa038da7", "filename": "library/core/tests/iter/adapters/peekable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fpeekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fpeekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fpeekable.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -144,7 +144,7 @@ fn test_iterator_peekable_rfold() {\n #[test]\n fn test_iterator_peekable_next_if_eq() {\n     // first, try on references\n-    let xs = vec![\"Heart\", \"of\", \"Gold\"];\n+    let xs = [\"Heart\", \"of\", \"Gold\"];\n     let mut it = xs.into_iter().peekable();\n     // try before `peek()`\n     assert_eq!(it.next_if_eq(&\"trillian\"), None);\n@@ -157,7 +157,7 @@ fn test_iterator_peekable_next_if_eq() {\n     assert_eq!(it.next(), Some(\"Gold\"));\n \n     // make sure comparison works for owned values\n-    let xs = vec![String::from(\"Ludicrous\"), \"speed\".into()];\n+    let xs = [String::from(\"Ludicrous\"), \"speed\".into()];\n     let mut it = xs.into_iter().peekable();\n     // make sure basic functionality works\n     assert_eq!(it.next_if_eq(\"Ludicrous\"), Some(\"Ludicrous\".into()));\n@@ -167,7 +167,7 @@ fn test_iterator_peekable_next_if_eq() {\n \n #[test]\n fn test_iterator_peekable_mut() {\n-    let mut it = vec![1, 2, 3].into_iter().peekable();\n+    let mut it = [1, 2, 3].into_iter().peekable();\n     if let Some(p) = it.peek_mut() {\n         if *p == 1 {\n             *p = 5;"}, {"sha": "bb4da831412770386744bc4cdc73cbe3d4a080b0", "filename": "library/core/tests/iter/traits/iterator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -456,25 +456,25 @@ fn test_find_map() {\n \n #[test]\n fn test_try_reduce() {\n-    let v: Vec<usize> = vec![1, 2, 3, 4, 5];\n+    let v = [1usize, 2, 3, 4, 5];\n     let sum = v.into_iter().try_reduce(|x, y| x.checked_add(y));\n     assert_eq!(sum, Some(Some(15)));\n \n-    let v: Vec<usize> = vec![1, 2, 3, 4, 5, usize::MAX];\n+    let v = [1, 2, 3, 4, 5, usize::MAX];\n     let sum = v.into_iter().try_reduce(|x, y| x.checked_add(y));\n     assert_eq!(sum, None);\n \n-    let v: Vec<usize> = Vec::new();\n+    let v: [usize; 0] = [];\n     let sum = v.into_iter().try_reduce(|x, y| x.checked_add(y));\n     assert_eq!(sum, Some(None));\n \n-    let v = vec![\"1\", \"2\", \"3\", \"4\", \"5\"];\n+    let v = [\"1\", \"2\", \"3\", \"4\", \"5\"];\n     let max = v.into_iter().try_reduce(|x, y| {\n         if x.parse::<usize>().ok()? > y.parse::<usize>().ok()? { Some(x) } else { Some(y) }\n     });\n     assert_eq!(max, Some(Some(\"5\")));\n \n-    let v = vec![\"1\", \"2\", \"3\", \"4\", \"5\"];\n+    let v = [\"1\", \"2\", \"3\", \"4\", \"5\"];\n     let max: Result<Option<_>, <usize as std::str::FromStr>::Err> =\n         v.into_iter().try_reduce(|x, y| {\n             if x.parse::<usize>()? > y.parse::<usize>()? { Ok(x) } else { Ok(y) }"}, {"sha": "eac884bfe0f3788268202c22a7cd4e51fb34bedd", "filename": "library/std/src/collections/hash/map/tests.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap%2Ftests.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -420,8 +420,8 @@ fn test_iterate() {\n \n #[test]\n fn test_keys() {\n-    let vec = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n-    let map: HashMap<_, _> = vec.into_iter().collect();\n+    let pairs = [(1, 'a'), (2, 'b'), (3, 'c')];\n+    let map: HashMap<_, _> = pairs.into_iter().collect();\n     let keys: Vec<_> = map.keys().cloned().collect();\n     assert_eq!(keys.len(), 3);\n     assert!(keys.contains(&1));\n@@ -431,8 +431,8 @@ fn test_keys() {\n \n #[test]\n fn test_values() {\n-    let vec = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n-    let map: HashMap<_, _> = vec.into_iter().collect();\n+    let pairs = [(1, 'a'), (2, 'b'), (3, 'c')];\n+    let map: HashMap<_, _> = pairs.into_iter().collect();\n     let values: Vec<_> = map.values().cloned().collect();\n     assert_eq!(values.len(), 3);\n     assert!(values.contains(&'a'));\n@@ -442,8 +442,8 @@ fn test_values() {\n \n #[test]\n fn test_values_mut() {\n-    let vec = vec![(1, 1), (2, 2), (3, 3)];\n-    let mut map: HashMap<_, _> = vec.into_iter().collect();\n+    let pairs = [(1, 1), (2, 2), (3, 3)];\n+    let mut map: HashMap<_, _> = pairs.into_iter().collect();\n     for value in map.values_mut() {\n         *value = (*value) * 2\n     }\n@@ -456,8 +456,8 @@ fn test_values_mut() {\n \n #[test]\n fn test_into_keys() {\n-    let vec = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n-    let map: HashMap<_, _> = vec.into_iter().collect();\n+    let pairs = [(1, 'a'), (2, 'b'), (3, 'c')];\n+    let map: HashMap<_, _> = pairs.into_iter().collect();\n     let keys: Vec<_> = map.into_keys().collect();\n \n     assert_eq!(keys.len(), 3);\n@@ -468,8 +468,8 @@ fn test_into_keys() {\n \n #[test]\n fn test_into_values() {\n-    let vec = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n-    let map: HashMap<_, _> = vec.into_iter().collect();\n+    let pairs = [(1, 'a'), (2, 'b'), (3, 'c')];\n+    let map: HashMap<_, _> = pairs.into_iter().collect();\n     let values: Vec<_> = map.into_values().collect();\n \n     assert_eq!(values.len(), 3);"}, {"sha": "b5e81deb4808007b4082c80e241789cf19da2102", "filename": "library/std/src/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -232,7 +232,7 @@\n //! ```\n //! use std::collections::VecDeque;\n //!\n-//! let vec = vec![1, 2, 3, 4];\n+//! let vec = [1, 2, 3, 4];\n //! let buf: VecDeque<_> = vec.into_iter().collect();\n //! ```\n //!"}, {"sha": "35d230eee96275ac8fd277398c9bc294a7637849", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -2172,7 +2172,7 @@ mod use_keyword {}\n ///     i.next().unwrap_or_else(I::Item::default)\n /// }\n ///\n-/// assert_eq!(first_or_default(vec![1, 2, 3].into_iter()), 1);\n+/// assert_eq!(first_or_default([1, 2, 3].into_iter()), 1);\n /// assert_eq!(first_or_default(Vec::<i32>::new().into_iter()), 0);\n /// ```\n ///"}, {"sha": "7f0b6193d09acc311d81842ceb9b7a6f7ee5e0c9", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2c86eba21a08cf505cd67073736d03ff3887ad/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=2e2c86eba21a08cf505cd67073736d03ff3887ad", "patch": "@@ -493,7 +493,7 @@ pub fn exclude_should_panic_option() {\n #[test]\n pub fn exact_filter_match() {\n     fn tests() -> Vec<TestDescAndFn> {\n-        vec![\"base\", \"base::test\", \"base::test1\", \"base::test2\"]\n+        [\"base\", \"base::test\", \"base::test1\", \"base::test2\"]\n             .into_iter()\n             .map(|name| TestDescAndFn {\n                 desc: TestDesc {"}]}