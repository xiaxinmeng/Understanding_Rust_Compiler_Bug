{"sha": "53709aedba198874ee50769f19f1e9ab00798bb5", "node_id": "C_kwDOAAsO6NoAKDUzNzA5YWVkYmExOTg4NzRlZTUwNzY5ZjE5ZjFlOWFiMDA3OThiYjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-18T16:41:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-18T16:41:55Z"}, "message": "Auto merge of #108209 - petrochenkov:doclean, r=notriddle\n\nrustdoc: Cleanup doc link extraction", "tree": {"sha": "7cb1b663891e25c4fd6e8d0fc51bcfe73577f7c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cb1b663891e25c4fd6e8d0fc51bcfe73577f7c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53709aedba198874ee50769f19f1e9ab00798bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53709aedba198874ee50769f19f1e9ab00798bb5", "html_url": "https://github.com/rust-lang/rust/commit/53709aedba198874ee50769f19f1e9ab00798bb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53709aedba198874ee50769f19f1e9ab00798bb5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eb5c4581a386b13c414e8c8bd73846ef37236d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb5c4581a386b13c414e8c8bd73846ef37236d1", "html_url": "https://github.com/rust-lang/rust/commit/3eb5c4581a386b13c414e8c8bd73846ef37236d1"}, {"sha": "97e73eea84e8302ae08f88645538ee27485770d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/97e73eea84e8302ae08f88645538ee27485770d6", "html_url": "https://github.com/rust-lang/rust/commit/97e73eea84e8302ae08f88645538ee27485770d6"}], "stats": {"total": 133, "additions": 61, "deletions": 72}, "files": [{"sha": "0c4b4bc3f62657e8306fe0355554b3a29eea5c88", "filename": "compiler/rustc_resolve/src/rustdoc.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/53709aedba198874ee50769f19f1e9ab00798bb5/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53709aedba198874ee50769f19f1e9ab00798bb5/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs?ref=53709aedba198874ee50769f19f1e9ab00798bb5", "patch": "@@ -1,11 +1,10 @@\n-use pulldown_cmark::{BrokenLink, Event, Options, Parser, Tag};\n+use pulldown_cmark::{BrokenLink, Event, LinkType, Options, Parser, Tag};\n use rustc_ast as ast;\n use rustc_ast::util::comments::beautify_doc_string;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::Span;\n-use std::cell::RefCell;\n use std::{cmp, mem};\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug)]\n@@ -348,22 +347,37 @@ fn preprocess_link(link: &str) -> String {\n     strip_generics_from_path(link).unwrap_or_else(|_| link.to_string())\n }\n \n+/// Keep inline and reference links `[]`,\n+/// but skip autolinks `<>` which we never consider to be intra-doc links.\n+pub fn may_be_doc_link(link_type: LinkType) -> bool {\n+    match link_type {\n+        LinkType::Inline\n+        | LinkType::Reference\n+        | LinkType::ReferenceUnknown\n+        | LinkType::Collapsed\n+        | LinkType::CollapsedUnknown\n+        | LinkType::Shortcut\n+        | LinkType::ShortcutUnknown => true,\n+        LinkType::Autolink | LinkType::Email => false,\n+    }\n+}\n+\n /// Simplified version of `preprocessed_markdown_links` from rustdoc.\n /// Must return at least the same links as it, but may add some more links on top of that.\n pub(crate) fn attrs_to_preprocessed_links(attrs: &[ast::Attribute]) -> Vec<String> {\n     let (doc_fragments, _) = attrs_to_doc_fragments(attrs.iter().map(|attr| (attr, None)), true);\n     let doc = prepare_to_doc_link_resolution(&doc_fragments).into_values().next().unwrap();\n \n-    let links = RefCell::new(Vec::new());\n-    let mut callback = |link: BrokenLink<'_>| {\n-        links.borrow_mut().push(preprocess_link(&link.reference));\n-        None\n-    };\n-    for event in Parser::new_with_broken_link_callback(&doc, main_body_opts(), Some(&mut callback))\n-    {\n-        if let Event::Start(Tag::Link(_, dest, _)) = event {\n-            links.borrow_mut().push(preprocess_link(&dest));\n+    Parser::new_with_broken_link_callback(\n+        &doc,\n+        main_body_opts(),\n+        Some(&mut |link: BrokenLink<'_>| Some((link.reference, \"\".into()))),\n+    )\n+    .filter_map(|event| match event {\n+        Event::Start(Tag::Link(link_type, dest, _)) if may_be_doc_link(link_type) => {\n+            Some(preprocess_link(&dest))\n         }\n-    }\n-    links.into_inner()\n+        _ => None,\n+    })\n+    .collect()\n }"}, {"sha": "9ef0b501c085036149fb1c125971f1c02ec7a2e5", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 18, "deletions": 43, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/53709aedba198874ee50769f19f1e9ab00798bb5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53709aedba198874ee50769f19f1e9ab00798bb5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=53709aedba198874ee50769f19f1e9ab00798bb5", "patch": "@@ -29,12 +29,12 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::TyCtxt;\n pub(crate) use rustc_resolve::rustdoc::main_body_opts;\n+use rustc_resolve::rustdoc::may_be_doc_link;\n use rustc_span::edition::Edition;\n use rustc_span::{Span, Symbol};\n \n use once_cell::sync::Lazy;\n use std::borrow::Cow;\n-use std::cell::RefCell;\n use std::collections::VecDeque;\n use std::default::Default;\n use std::fmt::Write;\n@@ -1226,14 +1226,12 @@ pub(crate) struct MarkdownLink {\n \n pub(crate) fn markdown_links<R>(\n     md: &str,\n-    filter_map: impl Fn(MarkdownLink) -> Option<R>,\n+    preprocess_link: impl Fn(MarkdownLink) -> Option<R>,\n ) -> Vec<R> {\n     if md.is_empty() {\n         return vec![];\n     }\n \n-    let links = RefCell::new(vec![]);\n-\n     // FIXME: remove this function once pulldown_cmark can provide spans for link definitions.\n     let locate = |s: &str, fallback: Range<usize>| unsafe {\n         let s_start = s.as_ptr();\n@@ -1265,46 +1263,23 @@ pub(crate) fn markdown_links<R>(\n         }\n     };\n \n-    let mut push = |link: BrokenLink<'_>| {\n-        let span = span_for_link(&link.reference, link.span);\n-        filter_map(MarkdownLink {\n-            kind: LinkType::ShortcutUnknown,\n-            link: link.reference.to_string(),\n-            range: span,\n-        })\n-        .map(|link| links.borrow_mut().push(link));\n-        None\n-    };\n-    let p = Parser::new_with_broken_link_callback(md, main_body_opts(), Some(&mut push))\n-        .into_offset_iter();\n-\n-    // There's no need to thread an IdMap through to here because\n-    // the IDs generated aren't going to be emitted anywhere.\n-    let mut ids = IdMap::new();\n-    let iter = Footnotes::new(HeadingLinks::new(p, None, &mut ids, HeadingOffset::H1));\n-\n-    for ev in iter {\n-        if let Event::Start(Tag::Link(\n-            // `<>` links cannot be intra-doc links so we skip them.\n-            kind @ (LinkType::Inline\n-            | LinkType::Reference\n-            | LinkType::ReferenceUnknown\n-            | LinkType::Collapsed\n-            | LinkType::CollapsedUnknown\n-            | LinkType::Shortcut\n-            | LinkType::ShortcutUnknown),\n-            dest,\n-            _,\n-        )) = ev.0\n-        {\n-            debug!(\"found link: {dest}\");\n-            let span = span_for_link(&dest, ev.1);\n-            filter_map(MarkdownLink { kind, link: dest.into_string(), range: span })\n-                .map(|link| links.borrow_mut().push(link));\n+    Parser::new_with_broken_link_callback(\n+        md,\n+        main_body_opts(),\n+        Some(&mut |link: BrokenLink<'_>| Some((link.reference, \"\".into()))),\n+    )\n+    .into_offset_iter()\n+    .filter_map(|(event, span)| match event {\n+        Event::Start(Tag::Link(link_type, dest, _)) if may_be_doc_link(link_type) => {\n+            preprocess_link(MarkdownLink {\n+                kind: link_type,\n+                range: span_for_link(&dest, span),\n+                link: dest.into_string(),\n+            })\n         }\n-    }\n-\n-    links.into_inner()\n+        _ => None,\n+    })\n+    .collect()\n }\n \n #[derive(Debug)]"}, {"sha": "741a7f51a77e25a04d6cb5eaf0cc22987772ea97", "filename": "tests/rustdoc-ui/intra-doc/unknown-disambiguator.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/53709aedba198874ee50769f19f1e9ab00798bb5/tests%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53709aedba198874ee50769f19f1e9ab00798bb5/tests%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr?ref=53709aedba198874ee50769f19f1e9ab00798bb5", "patch": "@@ -20,22 +20,6 @@ LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n    |\n    = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n-error: unknown disambiguator `foo`\n-  --> $DIR/unknown-disambiguator.rs:10:34\n-   |\n-LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n-   |                                  ^^^\n-   |\n-   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n-\n-error: unknown disambiguator `foo`\n-  --> $DIR/unknown-disambiguator.rs:10:48\n-   |\n-LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n-   |                                                ^^^\n-   |\n-   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n-\n error: unknown disambiguator ``\n   --> $DIR/unknown-disambiguator.rs:7:31\n    |\n@@ -52,5 +36,21 @@ LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n    |\n    = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n+error: unknown disambiguator `foo`\n+  --> $DIR/unknown-disambiguator.rs:10:34\n+   |\n+LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n+   |                                  ^^^\n+   |\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+\n+error: unknown disambiguator `foo`\n+  --> $DIR/unknown-disambiguator.rs:10:48\n+   |\n+LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n+   |                                                ^^^\n+   |\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+\n error: aborting due to 6 previous errors\n "}]}