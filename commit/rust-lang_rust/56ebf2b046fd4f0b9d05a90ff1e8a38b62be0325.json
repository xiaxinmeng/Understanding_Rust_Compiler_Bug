{"sha": "56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZWJmMmIwNDZmZDRmMGI5ZDA1YTkwZmYxZThhMzhiNjJiZTAzMjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-11T18:36:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T10:45:42Z"}, "message": "fallout in existing tests", "tree": {"sha": "f45e35432b7a210adfe47c36fb46da729947096d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f45e35432b7a210adfe47c36fb46da729947096d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325", "html_url": "https://github.com/rust-lang/rust/commit/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73b4f06b83fd7a7ab4bcc9bf2ac97844f3b27df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/73b4f06b83fd7a7ab4bcc9bf2ac97844f3b27df5", "html_url": "https://github.com/rust-lang/rust/commit/73b4f06b83fd7a7ab4bcc9bf2ac97844f3b27df5"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "6fc26bb7eed71fd48940bce6fee5e0858c01446c", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325", "patch": "@@ -1152,9 +1152,10 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f32 {\n-        match self {\n-            NEG_INFINITY => NEG_INFINITY,\n-            x => (x + ((x * x) + 1.0).sqrt()).ln(),\n+        if self == NEG_INFINITY {\n+            NEG_INFINITY\n+        } else {\n+            (self + ((self * self) + 1.0).sqrt()).ln()\n         }\n     }\n "}, {"sha": "93e5969a275c3f9855fdfd7f1a102c41c6d5d0de", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325", "patch": "@@ -1023,9 +1023,10 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f64 {\n-        match self {\n-            NEG_INFINITY => NEG_INFINITY,\n-            x => (x + ((x * x) + 1.0).sqrt()).ln(),\n+        if self == NEG_INFINITY {\n+            NEG_INFINITY\n+        } else {\n+            (self + ((self * self) + 1.0).sqrt()).ln()\n         }\n     }\n "}, {"sha": "1cb5dbccf2105a0d5f9fe42ea64ba5447b6dc21c", "filename": "src/test/compile-fail/issue-6804.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs?ref=56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325", "patch": "@@ -24,9 +24,17 @@ fn main() { //~ ERROR compilation successful\n         _ => {},\n     };\n     //~^^^ WARNING unmatchable NaN in pattern, use the is_nan method in a guard instead\n+    //~| WARNING floating point constants cannot be used\n+    //~| WARNING this was previously accepted\n+    //~| WARNING floating point constants cannot be used\n+    //~| WARNING this was previously accepted\n     match [x, 1.0] {\n         [NAN, _] => {},\n         _ => {},\n     };\n     //~^^^ WARNING unmatchable NaN in pattern, use the is_nan method in a guard instead\n+    //~| WARNING floating point constants cannot be used\n+    //~| WARNING this was previously accepted\n+    //~| WARNING floating point constants cannot be used\n+    //~| WARNING this was previously accepted\n }"}, {"sha": "6974238ac72f2cd4b6dd3d883cf27c60e8681e42", "filename": "src/test/debuginfo/constant-in-match-pattern.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Ftest%2Fdebuginfo%2Fconstant-in-match-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Ftest%2Fdebuginfo%2Fconstant-in-match-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fconstant-in-match-pattern.rs?ref=56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325", "patch": "@@ -21,15 +21,18 @@\n \n const CONSTANT: u64 = 3;\n \n+#[derive(PartialEq, Eq)]\n struct Struct {\n     a: isize,\n     b: usize,\n }\n const STRUCT: Struct = Struct { a: 1, b: 2 };\n \n+#[derive(PartialEq, Eq)]\n struct TupleStruct(u32);\n const TUPLE_STRUCT: TupleStruct = TupleStruct(4);\n \n+#[derive(PartialEq, Eq)]\n enum Enum {\n     Variant1(char),\n     Variant2 { a: u8 },"}, {"sha": "01d1b27bfc99f803a42643588485cae13edbb471", "filename": "src/test/run-pass/associated-const-match-patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Ftest%2Frun-pass%2Fassociated-const-match-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Ftest%2Frun-pass%2Fassociated-const-match-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-match-patterns.rs?ref=56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325", "patch": "@@ -17,6 +17,7 @@ use empty_struct::XEmpty2 as XFoo;\n \n struct Foo;\n \n+#[derive(PartialEq, Eq)]\n enum Bar {\n     Var1,\n     Var2,"}, {"sha": "0060150fbece01b90c07e411bfb31b4db4ae8a58", "filename": "src/test/run-pass/empty-struct-braces.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs?ref=56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325", "patch": "@@ -18,7 +18,10 @@ use empty_struct::*;\n \n struct Empty1 {}\n struct Empty2;\n+\n+#[derive(PartialEq, Eq)]\n struct Empty3 {}\n+\n const Empty3: Empty3 = Empty3 {};\n \n enum E {"}, {"sha": "5c9ee74472b12c5047286d8fccc8e015cce43f73", "filename": "src/test/run-pass/issue-12860.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12860.rs?ref=56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n #![feature(collections)]\n \n extern crate collections;"}, {"sha": "9700ed247959b43039d5bb8afebdf5a81be1b2e4", "filename": "src/test/run-pass/match-arm-statics.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs?ref=56ebf2b046fd4f0b9d05a90ff1e8a38b62be0325", "patch": "@@ -9,18 +9,24 @@\n // except according to those terms.\n \n \n+#[derive(PartialEq, Eq)]\n struct NewBool(bool);\n \n+#[derive(PartialEq, Eq)]\n enum Direction {\n     North,\n     East,\n     South,\n     West\n }\n+\n+#[derive(PartialEq, Eq)]\n struct Foo {\n     bar: Option<Direction>,\n     baz: NewBool\n }\n+\n+#[derive(PartialEq, Eq)]\n enum EnumWithStructVariants {\n     Variant1(bool),\n     Variant2 {\n@@ -37,7 +43,7 @@ const VARIANT2_NORTH: EnumWithStructVariants = EnumWithStructVariants::Variant2\n     dir: Direction::North };\n \n pub mod glfw {\n-    #[derive(Copy, Clone)]\n+    #[derive(Copy, Clone, PartialEq, Eq)]\n     pub struct InputState(usize);\n \n     pub const RELEASE  : InputState = InputState(0);\n@@ -82,13 +88,15 @@ fn issue_14576() {\n         _ => unreachable!()\n     }\n \n+    #[derive(PartialEq, Eq)]\n     enum C { D = 3, E = 4 }\n     const F : C = C::D;\n \n     assert_eq!(match C::D { F => 1, _ => 2, }, 1);\n }\n \n fn issue_13731() {\n+    #[derive(PartialEq, Eq)]\n     enum A { AA(()) }\n     const B: A = A::AA(());\n \n@@ -99,6 +107,7 @@ fn issue_13731() {\n \n fn issue_15393() {\n     #![allow(dead_code)]\n+    #[derive(PartialEq, Eq)]\n     struct Flags {\n         bits: usize\n     }"}]}