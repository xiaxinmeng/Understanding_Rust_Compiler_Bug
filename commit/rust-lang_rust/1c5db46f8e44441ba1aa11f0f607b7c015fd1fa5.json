{"sha": "1c5db46f8e44441ba1aa11f0f607b7c015fd1fa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNWRiNDZmOGU0NDQ0MWJhMWFhMTFmMGY2MDdiN2MwMTVmZDFmYTU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-15T01:05:15Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-15T01:05:15Z"}, "message": "rustc: Call the box annihilator in main", "tree": {"sha": "287b71fc121db19d09a04fb4f3998d8affe0de39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/287b71fc121db19d09a04fb4f3998d8affe0de39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c5db46f8e44441ba1aa11f0f607b7c015fd1fa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5db46f8e44441ba1aa11f0f607b7c015fd1fa5", "html_url": "https://github.com/rust-lang/rust/commit/1c5db46f8e44441ba1aa11f0f607b7c015fd1fa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c5db46f8e44441ba1aa11f0f607b7c015fd1fa5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24c89693f0556ba4b455df358a9136f7873776bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/24c89693f0556ba4b455df358a9136f7873776bf", "html_url": "https://github.com/rust-lang/rust/commit/24c89693f0556ba4b455df358a9136f7873776bf"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "53c5648c96d2290a44bb60eb7d4c48a655dc3534", "filename": "src/libcore/cleanup.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c5db46f8e44441ba1aa11f0f607b7c015fd1fa5/src%2Flibcore%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5db46f8e44441ba1aa11f0f607b7c015fd1fa5/src%2Flibcore%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcleanup.rs?ref=1c5db46f8e44441ba1aa11f0f607b7c015fd1fa5", "patch": "@@ -71,13 +71,13 @@ struct Task {\n #[lang=\"annihilate\"]\n pub unsafe fn annihilate() {\n     use rt::rt_free;\n+    use io::WriterUtil;\n \n     let task: *Task = transmute(rustrt::rust_get_task());\n \n     // Pass 1: Make all boxes immortal.\n     let box = (*task).boxed_region.live_allocs;\n     let mut box: *mut BoxRepr = transmute(copy box);\n-    assert (*box).prev == null();\n     while box != mut_null() {\n         debug!(\"making box immortal: %x\", box as uint);\n         (*box).ref_count = 0x77777777;\n@@ -87,7 +87,6 @@ pub unsafe fn annihilate() {\n     // Pass 2: Drop all boxes.\n     let box = (*task).boxed_region.live_allocs;\n     let mut box: *mut BoxRepr = transmute(copy box);\n-    assert (*box).prev == null();\n     while box != mut_null() {\n         debug!(\"calling drop glue for box: %x\", box as uint);\n         let tydesc: *TypeDesc = transmute(copy (*box).type_desc);"}, {"sha": "500ca0f958fce3d451e03758fab024c6097a7517", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c5db46f8e44441ba1aa11f0f607b7c015fd1fa5/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5db46f8e44441ba1aa11f0f607b7c015fd1fa5/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1c5db46f8e44441ba1aa11f0f607b7c015fd1fa5", "patch": "@@ -1984,17 +1984,22 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n         let bcx = top_scope_block(fcx, None);\n         let lltop = bcx.llbb;\n \n+        // Call main.\n         let lloutputarg = llvm::LLVMGetParam(llfdecl, 0 as c_uint);\n         let llenvarg = llvm::LLVMGetParam(llfdecl, 1 as c_uint);\n         let mut args = ~[lloutputarg, llenvarg];\n         if takes_argv {\n             vec::push(args, llvm::LLVMGetParam(llfdecl, 2 as c_uint));\n         }\n         Call(bcx, main_llfn, args);\n-        build_return(bcx);\n \n-        finish_fn(fcx, lltop);\n+        // Call the box annihilator.\n+        let did = bcx.tcx().lang_items.annihilate_fn.get();\n+        let bcx = callee::trans_rtcall_or_lang_call(bcx, did, ~[],\n+                                                    expr::Ignore);\n \n+        build_return(bcx);\n+        finish_fn(fcx, lltop);\n         return llfdecl;\n     }\n "}]}