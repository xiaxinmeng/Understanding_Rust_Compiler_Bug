{"sha": "4573da6f4ffb276c31773679fd19581fc15ded8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NzNkYTZmNGZmYjI3NmMzMTc3MzY3OWZkMTk1ODFmYzE1ZGVkOGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-05T15:03:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-05T15:03:18Z"}, "message": "auto merge of #19334 : alexcrichton/rust/issue-19333, r=aturon\n\nThis may have inadvertently switched during the runtime overhaul, so this\r\nswitches TcpListener back to using sockets instead of file descriptors. This\r\nalso renames a bunch of variables called `fd` to `socket` to clearly show that\r\nit's not a file descriptor.\r\n\r\nCloses #19333", "tree": {"sha": "05e5eee98787ce7f5fabc0ac7e66253e77015d78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05e5eee98787ce7f5fabc0ac7e66253e77015d78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4573da6f4ffb276c31773679fd19581fc15ded8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4573da6f4ffb276c31773679fd19581fc15ded8f", "html_url": "https://github.com/rust-lang/rust/commit/4573da6f4ffb276c31773679fd19581fc15ded8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4573da6f4ffb276c31773679fd19581fc15ded8f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52636007ce40da67998276c0671c6345512c3b58", "url": "https://api.github.com/repos/rust-lang/rust/commits/52636007ce40da67998276c0671c6345512c3b58", "html_url": "https://github.com/rust-lang/rust/commit/52636007ce40da67998276c0671c6345512c3b58"}, {"sha": "d6d4088bbf3489bf1a30463406622ac43efea348", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d4088bbf3489bf1a30463406622ac43efea348", "html_url": "https://github.com/rust-lang/rust/commit/d6d4088bbf3489bf1a30463406622ac43efea348"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "049aca3f59064ea2ddff1867a121e4201199dfcf", "filename": "src/libstd/sys/windows/ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4573da6f4ffb276c31773679fd19581fc15ded8f/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4573da6f4ffb276c31773679fd19581fc15ded8f/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs?ref=4573da6f4ffb276c31773679fd19581fc15ded8f", "patch": "@@ -76,13 +76,13 @@ impl AsRawSocket for io::net::tcp::TcpStream {\n \n impl AsRawSocket for io::net::tcp::TcpListener {\n     fn as_raw_socket(&self) -> Socket {\n-        self.as_inner().fd()\n+        self.as_inner().socket()\n     }\n }\n \n impl AsRawSocket for io::net::tcp::TcpAcceptor {\n     fn as_raw_socket(&self) -> Socket {\n-        self.as_inner().fd()\n+        self.as_inner().socket()\n     }\n }\n "}, {"sha": "b577372d2fc591ed1d3ff693a2eb789a8896c620", "filename": "src/libstd/sys/windows/tcp.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4573da6f4ffb276c31773679fd19581fc15ded8f/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4573da6f4ffb276c31773679fd19581fc15ded8f/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs?ref=4573da6f4ffb276c31773679fd19581fc15ded8f", "patch": "@@ -48,37 +48,35 @@ impl Drop for Event {\n // TCP listeners\n ////////////////////////////////////////////////////////////////////////////////\n \n-pub struct TcpListener {\n-    inner: FileDesc,\n-}\n+pub struct TcpListener { sock: sock_t }\n \n impl TcpListener {\n     pub fn bind(addr: ip::SocketAddr) -> IoResult<TcpListener> {\n         sys::init_net();\n \n-        let fd = try!(socket(addr, libc::SOCK_STREAM));\n-        let ret = TcpListener { inner: FileDesc::new(fd as libc::c_int, true) };\n+        let sock = try!(socket(addr, libc::SOCK_STREAM));\n+        let ret = TcpListener { sock: sock };\n \n         let mut storage = unsafe { mem::zeroed() };\n         let len = addr_to_sockaddr(addr, &mut storage);\n         let addrp = &storage as *const _ as *const libc::sockaddr;\n \n-        match unsafe { libc::bind(fd, addrp, len) } {\n+        match unsafe { libc::bind(sock, addrp, len) } {\n             -1 => Err(last_net_error()),\n             _ => Ok(ret),\n         }\n     }\n \n-    pub fn fd(&self) -> sock_t { self.inner.fd as sock_t }\n+    pub fn socket(&self) -> sock_t { self.sock }\n \n     pub fn listen(self, backlog: int) -> IoResult<TcpAcceptor> {\n-        match unsafe { libc::listen(self.fd(), backlog as libc::c_int) } {\n+        match unsafe { libc::listen(self.socket(), backlog as libc::c_int) } {\n             -1 => Err(last_net_error()),\n \n             _ => {\n                 let accept = try!(Event::new());\n                 let ret = unsafe {\n-                    c::WSAEventSelect(self.fd(), accept.handle(), c::FD_ACCEPT)\n+                    c::WSAEventSelect(self.socket(), accept.handle(), c::FD_ACCEPT)\n                 };\n                 if ret != 0 {\n                     return Err(last_net_error())\n@@ -97,7 +95,13 @@ impl TcpListener {\n     }\n \n     pub fn socket_name(&mut self) -> IoResult<ip::SocketAddr> {\n-        sockname(self.fd(), libc::getsockname)\n+        sockname(self.socket(), libc::getsockname)\n+    }\n+}\n+\n+impl Drop for TcpListener {\n+    fn drop(&mut self) {\n+        unsafe { super::close_sock(self.sock); }\n     }\n }\n \n@@ -114,7 +118,7 @@ struct AcceptorInner {\n }\n \n impl TcpAcceptor {\n-    pub fn fd(&self) -> sock_t { self.inner.listener.fd() }\n+    pub fn socket(&self) -> sock_t { self.inner.listener.socket() }\n \n     pub fn accept(&mut self) -> IoResult<TcpStream> {\n         // Unlink unix, windows cannot invoke `select` on arbitrary file\n@@ -161,27 +165,27 @@ impl TcpAcceptor {\n \n             let mut wsaevents: c::WSANETWORKEVENTS = unsafe { mem::zeroed() };\n             let ret = unsafe {\n-                c::WSAEnumNetworkEvents(self.fd(), events[1], &mut wsaevents)\n+                c::WSAEnumNetworkEvents(self.socket(), events[1], &mut wsaevents)\n             };\n             if ret != 0 { return Err(last_net_error()) }\n \n             if wsaevents.lNetworkEvents & c::FD_ACCEPT == 0 { continue }\n             match unsafe {\n-                libc::accept(self.fd(), ptr::null_mut(), ptr::null_mut())\n+                libc::accept(self.socket(), ptr::null_mut(), ptr::null_mut())\n             } {\n                 -1 if wouldblock() => {}\n                 -1 => return Err(last_net_error()),\n \n                 // Accepted sockets inherit the same properties as the caller,\n                 // so we need to deregister our event and switch the socket back\n                 // to blocking mode\n-                fd => {\n-                    let stream = TcpStream::new(fd);\n+                socket => {\n+                    let stream = TcpStream::new(socket);\n                     let ret = unsafe {\n-                        c::WSAEventSelect(fd, events[1], 0)\n+                        c::WSAEventSelect(socket, events[1], 0)\n                     };\n                     if ret != 0 { return Err(last_net_error()) }\n-                    try!(set_nonblocking(fd, false));\n+                    try!(set_nonblocking(socket, false));\n                     return Ok(stream)\n                 }\n             }\n@@ -191,7 +195,7 @@ impl TcpAcceptor {\n     }\n \n     pub fn socket_name(&mut self) -> IoResult<ip::SocketAddr> {\n-        sockname(self.fd(), libc::getsockname)\n+        sockname(self.socket(), libc::getsockname)\n     }\n \n     pub fn set_timeout(&mut self, timeout: Option<u64>) {"}]}