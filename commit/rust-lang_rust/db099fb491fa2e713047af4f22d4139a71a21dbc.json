{"sha": "db099fb491fa2e713047af4f22d4139a71a21dbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMDk5ZmI0OTFmYTJlNzEzMDQ3YWY0ZjIyZDQxMzlhNzFhMjFkYmM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-03T22:59:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-04T04:59:51Z"}, "message": "Point to local place span on \"type too big\" error", "tree": {"sha": "cb001370005afb2792cf1eaa048e0e5634f8a3a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb001370005afb2792cf1eaa048e0e5634f8a3a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db099fb491fa2e713047af4f22d4139a71a21dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db099fb491fa2e713047af4f22d4139a71a21dbc", "html_url": "https://github.com/rust-lang/rust/commit/db099fb491fa2e713047af4f22d4139a71a21dbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db099fb491fa2e713047af4f22d4139a71a21dbc/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c5684208c6f951b2cbe90df26a6691a95099e93", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c5684208c6f951b2cbe90df26a6691a95099e93", "html_url": "https://github.com/rust-lang/rust/commit/2c5684208c6f951b2cbe90df26a6691a95099e93"}], "stats": {"total": 74, "additions": 65, "deletions": 9}, "files": [{"sha": "7d9653a9a55b15d6b2447673962fee56f5dffdc4", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=db099fb491fa2e713047af4f22d4139a71a21dbc", "patch": "@@ -901,6 +901,9 @@ impl<'a, 'tcx> LayoutOf for LateContext<'a, 'tcx> {\n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n         self.tcx.layout_of(self.param_env.and(ty))\n     }\n+    fn spanned_layout_of(&self, ty: Ty<'tcx>, _: Option<Span>) -> Self::TyLayout {\n+        self.layout_of(ty)\n+    }\n }\n \n impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> LateContextAndPass<'a, 'tcx, T> {"}, {"sha": "14d35fd4ce891b86a572b838bf29df8038b62999", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=db099fb491fa2e713047af4f22d4139a71a21dbc", "patch": "@@ -3,7 +3,7 @@ use crate::ty::{self, Ty, TyCtxt, TypeFoldable, ReprOptions};\n \n use syntax::ast::{self, Ident, IntTy, UintTy};\n use syntax::attr;\n-use syntax_pos::DUMMY_SP;\n+use syntax_pos::{DUMMY_SP, Span};\n \n use std::cmp;\n use std::fmt;\n@@ -1943,6 +1943,9 @@ impl<'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n         Ok(layout)\n     }\n+    fn spanned_layout_of(&self, ty: Ty<'tcx>, _: Option<Span>) -> Self::TyLayout {\n+        self.layout_of(ty)\n+    }\n }\n \n impl LayoutOf for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n@@ -1974,6 +1977,9 @@ impl LayoutOf for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n \n         Ok(layout)\n     }\n+    fn spanned_layout_of(&self, ty: Ty<'tcx>, _: Option<Span>) -> Self::TyLayout {\n+        self.layout_of(ty)\n+    }\n }\n \n // Helper (inherent) `layout_of` methods to avoid pushing `LayoutCx` to users."}, {"sha": "c01ba728034ced9b93460b3196cc691b5c173e82", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=db099fb491fa2e713047af4f22d4139a71a21dbc", "patch": "@@ -6,6 +6,7 @@ use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n use syntax::symbol::LocalInternedString;\n+use syntax::source_map::Span;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind, RealPredicate};\n use rustc_codegen_ssa::MemFlags;\n use libc::{c_uint, c_char};\n@@ -90,6 +91,9 @@ impl ty::layout::LayoutOf for Builder<'_, '_, 'tcx> {\n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n         self.cx.layout_of(ty)\n     }\n+    fn spanned_layout_of(&self, ty: Ty<'tcx>, _: Option<Span>) -> Self::TyLayout {\n+        self.cx.layout_of(ty)\n+    }\n }\n \n impl Deref for Builder<'_, 'll, 'tcx> {"}, {"sha": "18d82c27d8cc93eb52f9f324cf67f862228fdc1c", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=db099fb491fa2e713047af4f22d4139a71a21dbc", "patch": "@@ -30,6 +30,7 @@ use std::iter;\n use std::str;\n use std::sync::Arc;\n use syntax::symbol::LocalInternedString;\n+use syntax::source_map::Span;\n use crate::abi::Abi;\n \n /// There is one `CodegenCx` per compilation unit. Each one has its own LLVM\n@@ -860,9 +861,16 @@ impl LayoutOf for CodegenCx<'ll, 'tcx> {\n     type TyLayout = TyLayout<'tcx>;\n \n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n+        self.spanned_layout_of(ty, None)\n+    }\n+\n+    fn spanned_layout_of(&self, ty: Ty<'tcx>, span: Option<Span>) -> Self::TyLayout {\n         self.tcx.layout_of(ty::ParamEnv::reveal_all().and(ty))\n             .unwrap_or_else(|e| if let LayoutError::SizeOverflow(_) = e {\n-                self.sess().fatal(&e.to_string())\n+                match span {\n+                    Some(span) => self.sess().span_fatal(span, &e.to_string()),\n+                    None => self.sess().fatal(&e.to_string()),\n+                }\n             } else {\n                 bug!(\"failed to get layout for `{}`: {}\", ty, e)\n             })"}, {"sha": "1ce3dbc4fe3b6587a71f83d30a4422f331d6dd43", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=db099fb491fa2e713047af4f22d4139a71a21dbc", "patch": "@@ -182,13 +182,19 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n                     rvalue: &mir::Rvalue<'tcx>,\n                     location: Location) {\n         debug!(\"visit_assign(place={:?}, rvalue={:?})\", place, rvalue);\n+        let mut decl_span = None;\n+        if let mir::PlaceBase::Local(local) = &place.base {\n+            if let Some(decl) = self.fx.mir.local_decls.get(*local) {\n+                decl_span = Some(decl.source_info.span);\n+            }\n+        }\n \n         if let mir::Place {\n             base: mir::PlaceBase::Local(index),\n             projection: None,\n         } = *place {\n             self.assign(index, location);\n-            if !self.fx.rvalue_creates_operand(rvalue) {\n+            if !self.fx.rvalue_creates_operand(rvalue, decl_span) {\n                 self.not_ssa(index);\n             }\n         } else {"}, {"sha": "56c76cdc026f733733e7ab5d4d555ad413a2a986", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=db099fb491fa2e713047af4f22d4139a71a21dbc", "patch": "@@ -6,6 +6,7 @@ use rustc::middle::lang_items::ExchangeMallocFnLangItem;\n use rustc_apfloat::{ieee, Float, Status, Round};\n use std::{u128, i128};\n use syntax::symbol::sym;\n+use syntax::source_map::Span;\n \n use crate::base;\n use crate::MemFlags;\n@@ -136,7 +137,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             _ => {\n-                assert!(self.rvalue_creates_operand(rvalue));\n+                assert!(self.rvalue_creates_operand(rvalue, None));\n                 let (mut bx, temp) = self.codegen_rvalue_operand(bx, rvalue);\n                 temp.val.store(&mut bx, dest);\n                 bx\n@@ -169,7 +170,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         mut bx: Bx,\n         rvalue: &mir::Rvalue<'tcx>\n     ) -> (Bx, OperandRef<'tcx, Bx::Value>) {\n-        assert!(self.rvalue_creates_operand(rvalue), \"cannot codegen {:?} to operand\", rvalue);\n+        assert!(\n+            self.rvalue_creates_operand(rvalue, None),\n+            \"cannot codegen {:?} to operand\",\n+            rvalue,\n+        );\n \n         match *rvalue {\n             mir::Rvalue::Cast(ref kind, ref source, mir_cast_ty) => {\n@@ -691,7 +696,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n }\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n-    pub fn rvalue_creates_operand(&self, rvalue: &mir::Rvalue<'tcx>) -> bool {\n+    pub fn rvalue_creates_operand(&self, rvalue: &mir::Rvalue<'tcx>, span: Option<Span>) -> bool {\n         match *rvalue {\n             mir::Rvalue::Ref(..) |\n             mir::Rvalue::Len(..) |\n@@ -707,7 +712,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::Rvalue::Aggregate(..) => {\n                 let ty = rvalue.ty(self.mir, self.cx.tcx());\n                 let ty = self.monomorphize(&ty);\n-                self.cx.layout_of(ty).is_zst()\n+                self.cx.spanned_layout_of(ty, span).is_zst()\n+                // self.cx.layout_of(ty).is_zst()\n             }\n         }\n "}, {"sha": "605afa7b3681021a3f995faee684cdb1315e4076", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=db099fb491fa2e713047af4f22d4139a71a21dbc", "patch": "@@ -193,6 +193,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf for InterpCx<'mir, 'tcx, M> {\n             .layout_of(self.param_env.and(ty))\n             .map_err(|layout| err_inval!(Layout(layout)).into())\n     }\n+    fn spanned_layout_of(&self, ty: Ty<'tcx>, _: Option<Span>) -> Self::TyLayout {\n+        self.layout_of(ty)\n+    }\n }\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {"}, {"sha": "18b6f408fe12c0089a9cd140a08f72af89b0dbae", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=db099fb491fa2e713047af4f22d4139a71a21dbc", "patch": "@@ -134,6 +134,9 @@ impl<'mir, 'tcx> LayoutOf for ConstPropagator<'mir, 'tcx> {\n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n         self.tcx.layout_of(self.param_env.and(ty))\n     }\n+    fn spanned_layout_of(&self, ty: Ty<'tcx>, _: Option<Span>) -> Self::TyLayout {\n+        self.layout_of(ty)\n+    }\n }\n \n impl<'mir, 'tcx> HasDataLayout for ConstPropagator<'mir, 'tcx> {"}, {"sha": "8c4635f3566ca316a2588f9af9de2e3ed6291427", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=db099fb491fa2e713047af4f22d4139a71a21dbc", "patch": "@@ -13,6 +13,7 @@ use rustc::ty::Ty;\n use rustc::ty::TyCtxt;\n use syntax::ast::Attribute;\n use syntax::symbol::sym;\n+use syntax::source_map::Span;\n \n pub fn test_layout(tcx: TyCtxt<'_>) {\n     if tcx.features().rustc_attrs {\n@@ -116,6 +117,9 @@ impl LayoutOf for UnwrapLayoutCx<'tcx> {\n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n         self.tcx.layout_of(self.param_env.and(ty)).unwrap()\n     }\n+    fn spanned_layout_of(&self, ty: Ty<'tcx>, _: Option<Span>) -> Self::TyLayout {\n+        self.layout_of(ty)\n+    }\n }\n \n impl HasTyCtxt<'tcx> for UnwrapLayoutCx<'tcx> {"}, {"sha": "c4f38f4a7f4c385a536797b3dd9969bec2016728", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=db099fb491fa2e713047af4f22d4139a71a21dbc", "patch": "@@ -9,6 +9,7 @@ use std::ops::{Add, Deref, Sub, Mul, AddAssign, Range, RangeInclusive};\n use rustc_data_structures::newtype_index;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use syntax_pos::symbol::{sym, Symbol};\n+use syntax_pos::Span;\n \n pub mod call;\n \n@@ -1012,6 +1013,7 @@ pub trait LayoutOf {\n     type TyLayout;\n \n     fn layout_of(&self, ty: Self::Ty) -> Self::TyLayout;\n+    fn spanned_layout_of(&self, ty: Self::Ty, span: Option<Span>) -> Self::TyLayout;\n }\n \n #[derive(Copy, Clone, PartialEq, Eq)]"}, {"sha": "71d3f62bbe53b5ea3f48fb5e02ea3631e9871dac", "filename": "src/test/ui/huge-array-simple.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Ftest%2Fui%2Fhuge-array-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Ftest%2Fui%2Fhuge-array-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array-simple.stderr?ref=db099fb491fa2e713047af4f22d4139a71a21dbc", "patch": "@@ -1,4 +1,8 @@\n error: the type `[u8; N]` is too big for the current architecture\n+  --> $DIR/huge-array-simple.rs:12:9\n+   |\n+LL |     let _fat : [u8; (1<<61)+(1<<31)] =\n+   |         ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1ecf012e04be4cb1a1695b6e9b5b953cc0e2a66a", "filename": "src/test/ui/huge-array.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Ftest%2Fui%2Fhuge-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Ftest%2Fui%2Fhuge-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array.rs?ref=db099fb491fa2e713047af4f22d4139a71a21dbc", "patch": "@@ -1,11 +1,10 @@\n-// error-pattern:; 1518600000\n-\n // FIXME https://github.com/rust-lang/rust/issues/59774\n // normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n \n fn generic<T: Copy>(t: T) {\n     let s: [T; 1518600000] = [t; 1518600000];\n+    //~^ ERROR the type `[[u8; 1518599999]; 1518600000]` is too big for the current architecture\n }\n \n fn main() {"}, {"sha": "823d974f4290ee4e8912900ca4fee36a37a79a64", "filename": "src/test/ui/huge-array.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Ftest%2Fui%2Fhuge-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Ftest%2Fui%2Fhuge-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array.stderr?ref=db099fb491fa2e713047af4f22d4139a71a21dbc", "patch": "@@ -1,4 +1,8 @@\n error: the type `[[u8; 1518599999]; 1518600000]` is too big for the current architecture\n+  --> $DIR/huge-array.rs:6:9\n+   |\n+LL |     let s: [T; 1518600000] = [t; 1518600000];\n+   |         ^\n \n error: aborting due to previous error\n "}, {"sha": "66c768537843c780c2313248e40988632c3ea7fb", "filename": "src/test/ui/issues/issue-15919.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Ftest%2Fui%2Fissues%2Fissue-15919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db099fb491fa2e713047af4f22d4139a71a21dbc/src%2Ftest%2Fui%2Fissues%2Fissue-15919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15919.stderr?ref=db099fb491fa2e713047af4f22d4139a71a21dbc", "patch": "@@ -1,4 +1,8 @@\n error: the type `[usize; N]` is too big for the current architecture\n+  --> $DIR/issue-15919.rs:15:9\n+   |\n+LL |     let x = [0usize; 0xffff_ffff_ffff_ffff];\n+   |         ^\n \n error: aborting due to previous error\n "}]}