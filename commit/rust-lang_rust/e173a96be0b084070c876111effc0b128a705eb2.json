{"sha": "e173a96be0b084070c876111effc0b128a705eb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNzNhOTZiZTBiMDg0MDcwYzg3NjExMWVmZmMwYjEyOGE3MDVlYjI=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-08-24T06:37:22Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-08-24T21:37:56Z"}, "message": "Add OwnedStr::into_bytes\n\nMy primary use case here is sending strings across the wire where the\nintermediate storage is a byte array. The new method ends up avoiding a\ncopy.", "tree": {"sha": "2139df9ec04a9417c8e7e9a0c00c1e47e3abe1c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2139df9ec04a9417c8e7e9a0c00c1e47e3abe1c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e173a96be0b084070c876111effc0b128a705eb2", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e173a96be0b084070c876111effc0b128a705eb2", "html_url": "https://github.com/rust-lang/rust/commit/e173a96be0b084070c876111effc0b128a705eb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e173a96be0b084070c876111effc0b128a705eb2/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c643f1d39c4c878fdb9fa25fb01c513d53afaa11", "url": "https://api.github.com/repos/rust-lang/rust/commits/c643f1d39c4c878fdb9fa25fb01c513d53afaa11", "html_url": "https://github.com/rust-lang/rust/commit/c643f1d39c4c878fdb9fa25fb01c513d53afaa11"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "bee354a0a5dca9e37564e3693ba61301512a26e7", "filename": "src/libstd/str.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e173a96be0b084070c876111effc0b128a705eb2/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e173a96be0b084070c876111effc0b128a705eb2/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=e173a96be0b084070c876111effc0b128a705eb2", "patch": "@@ -2108,6 +2108,7 @@ pub trait OwnedStr {\n     fn reserve_at_least(&mut self, n: uint);\n     fn capacity(&self) -> uint;\n     fn truncate(&mut self, len: uint);\n+    fn into_bytes(self) -> ~[u8];\n \n     /// Work with the mutable byte buffer and length of a slice.\n     ///\n@@ -2273,6 +2274,13 @@ impl OwnedStr for ~str {\n         unsafe { raw::set_len(self, len); }\n     }\n \n+    /// Consumes the string, returning the underlying byte buffer.\n+    ///\n+    /// The buffer does not have a null terminator.\n+    #[inline]\n+    fn into_bytes(self) -> ~[u8] {\n+        unsafe { cast::transmute(self) }\n+    }\n \n     #[inline]\n     fn as_mut_buf<T>(&mut self, f: &fn(*mut u8, uint) -> T) -> T {\n@@ -2356,7 +2364,7 @@ mod tests {\n     use ptr;\n     use str::*;\n     use vec;\n-    use vec::{ImmutableVector, CopyableVector};\n+    use vec::{Vector, ImmutableVector, CopyableVector};\n     use cmp::{TotalOrd, Less, Equal, Greater};\n \n     #[test]\n@@ -2524,6 +2532,13 @@ mod tests {\n         assert_eq!(\"\u534e\", data.as_slice());\n     }\n \n+    #[test]\n+    fn test_into_bytes() {\n+        let data = ~\"asdf\";\n+        let buf = data.into_bytes();\n+        assert_eq!(bytes!(\"asdf\"), buf.as_slice());\n+    }\n+\n     #[test]\n     fn test_find_str() {\n         // byte positions"}]}