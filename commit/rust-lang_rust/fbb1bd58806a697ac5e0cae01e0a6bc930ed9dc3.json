{"sha": "fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3", "node_id": "C_kwDOAAsO6NoAKGZiYjFiZDU4ODA2YTY5N2FjNWUwY2FlMDFlMGE2YmM5MzBlZDlkYzM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-06T13:37:53Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-06T13:37:53Z"}, "message": "Re-enable controlflow outside loop diagnostic", "tree": {"sha": "4da0f7300c8a901af69acdd533eb1a16a9a63e0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4da0f7300c8a901af69acdd533eb1a16a9a63e0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3", "html_url": "https://github.com/rust-lang/rust/commit/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e7117900c06ef2ae7f113f61e08a3234c3aee79", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7117900c06ef2ae7f113f61e08a3234c3aee79", "html_url": "https://github.com/rust-lang/rust/commit/0e7117900c06ef2ae7f113f61e08a3234c3aee79"}], "stats": {"total": 106, "additions": 75, "deletions": 31}, "files": [{"sha": "c1012cc3d9ce0f62f513db08b70fd20942693618", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3", "patch": "@@ -189,6 +189,12 @@ pub enum InferenceDiagnostic {\n         /// Contains the type the field resolves to\n         field_with_same_name: Option<Ty>,\n     },\n+    // FIXME: This should be emitted in body lowering\n+    BreakOutsideOfLoop {\n+        expr: ExprId,\n+        is_break: bool,\n+        bad_value_break: bool,\n+    },\n     MismatchedArgCount {\n         call_expr: ExprId,\n         expected: usize,\n@@ -490,6 +496,16 @@ fn find_breakable<'c>(\n     }\n }\n \n+fn find_continuable<'c>(\n+    ctxs: &'c mut [BreakableContext],\n+    label: Option<LabelId>,\n+) -> Option<&'c mut BreakableContext> {\n+    match label {\n+        Some(_) => find_breakable(ctxs, label).filter(|it| matches!(it.kind, BreakableKind::Loop)),\n+        None => find_breakable(ctxs, label),\n+    }\n+}\n+\n impl<'a> InferenceContext<'a> {\n     fn new(\n         db: &'a dyn HirDatabase,"}, {"sha": "129ff33ae5db23691df234d1ce39916b7b6ea711", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3", "patch": "@@ -25,7 +25,9 @@ use syntax::ast::RangeOp;\n use crate::{\n     autoderef::{builtin_deref, deref_by_trait, Autoderef},\n     consteval,\n-    infer::{coerce::CoerceMany, pat::contains_explicit_ref_binding, BreakableKind},\n+    infer::{\n+        coerce::CoerceMany, find_continuable, pat::contains_explicit_ref_binding, BreakableKind,\n+    },\n     lang_items::lang_items_for_bin_op,\n     lower::{\n         const_or_path_to_chalk, generic_arg_to_chalk, lower_to_chalk_mutability, ParamLoweringMode,\n@@ -457,13 +459,29 @@ impl<'a> InferenceContext<'a> {\n                 self.resolver.reset_to_guard(g);\n                 ty\n             }\n-            Expr::Continue { .. } => self.result.standard_types.never.clone(),\n+            &Expr::Continue { label } => {\n+                if let None = find_continuable(&mut self.breakables, label) {\n+                    self.push_diagnostic(InferenceDiagnostic::BreakOutsideOfLoop {\n+                        expr: tgt_expr,\n+                        is_break: false,\n+                        bad_value_break: false,\n+                    });\n+                };\n+                self.result.standard_types.never.clone()\n+            }\n             &Expr::Break { expr, label } => {\n                 let val_ty = if let Some(expr) = expr {\n                     let opt_coerce_to = match find_breakable(&mut self.breakables, label) {\n                         Some(ctxt) => match &ctxt.coerce {\n                             Some(coerce) => coerce.expected_ty(),\n-                            None => self.err_ty(),\n+                            None => {\n+                                self.push_diagnostic(InferenceDiagnostic::BreakOutsideOfLoop {\n+                                    expr: tgt_expr,\n+                                    is_break: true,\n+                                    bad_value_break: true,\n+                                });\n+                                self.err_ty()\n+                            }\n                         },\n                         None => self.err_ty(),\n                     };\n@@ -485,7 +503,13 @@ impl<'a> InferenceContext<'a> {\n                         }\n                         None => ctxt.may_break = true,\n                     },\n-                    None => {}\n+                    None => {\n+                        self.push_diagnostic(InferenceDiagnostic::BreakOutsideOfLoop {\n+                            expr: tgt_expr,\n+                            is_break: true,\n+                            bad_value_break: false,\n+                        });\n+                    }\n                 }\n                 self.result.standard_types.never.clone()\n             }"}, {"sha": "f756832f0ff825f05b9df8567ddfbea9fa3664de", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3", "patch": "@@ -32,6 +32,7 @@ macro_rules! diagnostics {\n }\n \n diagnostics![\n+    BreakOutsideOfLoop,\n     ExpectedFunction,\n     InactiveCode,\n     IncorrectCase,\n@@ -62,6 +63,13 @@ diagnostics![\n     UnusedMut,\n ];\n \n+#[derive(Debug)]\n+pub struct BreakOutsideOfLoop {\n+    pub expr: InFile<AstPtr<ast::Expr>>,\n+    pub is_break: bool,\n+    pub bad_value_break: bool,\n+}\n+\n #[derive(Debug)]\n pub struct UnresolvedModule {\n     pub decl: InFile<AstPtr<ast::Module>>,"}, {"sha": "dbb41b1b667406763db4c67747c981bb4276b738", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3", "patch": "@@ -85,13 +85,13 @@ use crate::db::{DefDatabase, HirDatabase};\n pub use crate::{\n     attrs::{HasAttrs, Namespace},\n     diagnostics::{\n-        AnyDiagnostic, ExpectedFunction, InactiveCode, IncoherentImpl, IncorrectCase,\n-        InvalidDeriveTarget, MacroError, MalformedDerive, MismatchedArgCount, MissingFields,\n-        MissingMatchArms, MissingUnsafe, NeedMut, NoSuchField, PrivateAssocItem, PrivateField,\n-        ReplaceFilterMapNextWithFindMap, TypeMismatch, UndeclaredLabel, UnimplementedBuiltinMacro,\n-        UnreachableLabel, UnresolvedExternCrate, UnresolvedField, UnresolvedImport,\n-        UnresolvedMacroCall, UnresolvedMethodCall, UnresolvedModule, UnresolvedProcMacro,\n-        UnusedMut,\n+        AnyDiagnostic, BreakOutsideOfLoop, ExpectedFunction, InactiveCode, IncoherentImpl,\n+        IncorrectCase, InvalidDeriveTarget, MacroError, MalformedDerive, MismatchedArgCount,\n+        MissingFields, MissingMatchArms, MissingUnsafe, NeedMut, NoSuchField, PrivateAssocItem,\n+        PrivateField, ReplaceFilterMapNextWithFindMap, TypeMismatch, UndeclaredLabel,\n+        UnimplementedBuiltinMacro, UnreachableLabel, UnresolvedExternCrate, UnresolvedField,\n+        UnresolvedImport, UnresolvedMacroCall, UnresolvedMethodCall, UnresolvedModule,\n+        UnresolvedProcMacro, UnusedMut,\n     },\n     has_source::HasSource,\n     semantics::{PathResolution, Semantics, SemanticsScope, TypeInfo, VisibleTraits},\n@@ -1483,6 +1483,14 @@ impl DefWithBody {\n                         .into(),\n                     )\n                 }\n+                &hir_ty::InferenceDiagnostic::BreakOutsideOfLoop {\n+                    expr,\n+                    is_break,\n+                    bad_value_break,\n+                } => {\n+                    let expr = expr_syntax(expr);\n+                    acc.push(BreakOutsideOfLoop { expr, is_break, bad_value_break }.into())\n+                }\n             }\n         }\n         for (pat_or_expr, mismatch) in infer.type_mismatches() {"}, {"sha": "89aa437d75d98a13cbb5950af4590ae3428d4853", "filename": "crates/ide-diagnostics/src/handlers/break_outside_of_loop.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fbreak_outside_of_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fbreak_outside_of_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fbreak_outside_of_loop.rs?ref=fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3", "patch": "@@ -31,12 +31,8 @@ mod tests {\n fn foo() {\n     break;\n   //^^^^^ error: break outside of loop\n-    break 'a;\n-  //^^^^^^^^ error: break outside of loop\n     continue;\n   //^^^^^^^^ error: continue outside of loop\n-    continue 'a;\n-  //^^^^^^^^^^^ error: continue outside of loop\n }\n \"#,\n         );\n@@ -51,12 +47,8 @@ fn foo() {\n         async {\n                 break;\n               //^^^^^ error: break outside of loop\n-                break 'a;\n-              //^^^^^^^^ error: break outside of loop\n                 continue;\n               //^^^^^^^^ error: continue outside of loop\n-                continue 'a;\n-              //^^^^^^^^^^^ error: continue outside of loop\n         };\n     }\n }\n@@ -73,12 +65,8 @@ fn foo() {\n         || {\n                 break;\n               //^^^^^ error: break outside of loop\n-                break 'a;\n-              //^^^^^^^^ error: break outside of loop\n                 continue;\n               //^^^^^^^^ error: continue outside of loop\n-                continue 'a;\n-              //^^^^^^^^^^^ error: continue outside of loop\n         };\n     }\n }\n@@ -94,9 +82,7 @@ fn foo() {\n     'a: loop {\n         {\n             break;\n-            break 'a;\n             continue;\n-            continue 'a;\n         }\n     }\n }\n@@ -112,9 +98,7 @@ fn foo() {\n     'a: loop {\n         try {\n                 break;\n-                break 'a;\n                 continue;\n-                continue 'a;\n         };\n     }\n }\n@@ -130,11 +114,8 @@ fn foo() {\n     'a: {\n         break;\n       //^^^^^ error: break outside of loop\n-        break 'a;\n         continue;\n       //^^^^^^^^ error: continue outside of loop\n-        continue 'a;\n-      //^^^^^^^^^^^ error: continue outside of loop\n     }\n }\n \"#,"}, {"sha": "dbedf1e6c1ed9f4b05a836ada24e5af1b48a14e7", "filename": "crates/ide-diagnostics/src/handlers/undeclared_label.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fundeclared_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fundeclared_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fundeclared_label.rs?ref=fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3", "patch": "@@ -23,8 +23,10 @@ mod tests {\n             r#\"\n fn foo() {\n     break 'a;\n+  //^^^^^^^^ error: break outside of loop\n         //^^ error: use of undeclared label `'a`\n     continue 'a;\n+  //^^^^^^^^^^^ error: continue outside of loop\n            //^^ error: use of undeclared label `'a`\n }\n \"#,"}, {"sha": "5933a9b694a37e48437df9e1e78bd3e1087ae22c", "filename": "crates/ide-diagnostics/src/handlers/unreachable_label.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funreachable_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funreachable_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funreachable_label.rs?ref=fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3", "patch": "@@ -25,8 +25,10 @@ fn foo() {\n     'a: loop {\n         async {\n             break 'a;\n+          //^^^^^^^^ error: break outside of loop\n                // ^^ error: use of unreachable label `'a`\n             continue 'a;\n+          //^^^^^^^^^^^ error: continue outside of loop\n                   // ^^ error: use of unreachable label `'a`\n         };\n     }\n@@ -43,8 +45,10 @@ fn foo() {\n     'a: loop {\n         || {\n             break 'a;\n+          //^^^^^^^^ error: break outside of loop\n                // ^^ error: use of unreachable label `'a`\n             continue 'a;\n+          //^^^^^^^^^^^ error: continue outside of loop\n                   // ^^ error: use of unreachable label `'a`\n         };\n     }"}, {"sha": "70116f15a75609e992f2d3e7ae6bee48d91d59fa", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=fbb1bd58806a697ac5e0cae01e0a6bc930ed9dc3", "patch": "@@ -26,6 +26,7 @@\n #![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n \n mod handlers {\n+    pub(crate) mod break_outside_of_loop;\n     pub(crate) mod expected_function;\n     pub(crate) mod inactive_code;\n     pub(crate) mod incoherent_impl;\n@@ -285,7 +286,7 @@ pub fn diagnostics(\n             AnyDiagnostic::UnresolvedModule(d) => handlers::unresolved_module::unresolved_module(&ctx, &d),\n             AnyDiagnostic::UnresolvedProcMacro(d) => handlers::unresolved_proc_macro::unresolved_proc_macro(&ctx, &d, config.proc_macros_enabled, config.proc_attr_macros_enabled),\n             AnyDiagnostic::UnusedMut(d) => handlers::mutability_errors::unused_mut(&ctx, &d),\n-\n+            AnyDiagnostic::BreakOutsideOfLoop(d) => handlers::break_outside_of_loop::break_outside_of_loop(&ctx, &d),\n         };\n         res.push(d)\n     }"}]}