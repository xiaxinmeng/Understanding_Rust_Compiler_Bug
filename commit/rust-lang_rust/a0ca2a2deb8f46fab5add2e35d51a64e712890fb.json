{"sha": "a0ca2a2deb8f46fab5add2e35d51a64e712890fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwY2EyYTJkZWI4ZjQ2ZmFiNWFkZDJlMzVkNTFhNjRlNzEyODkwZmI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-27T17:33:59Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-01T16:17:23Z"}, "message": "rustc: track the body owner in liveness.", "tree": {"sha": "cd9ac907c45547cae9d650e4cfc8f9a5468c65dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd9ac907c45547cae9d650e4cfc8f9a5468c65dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0ca2a2deb8f46fab5add2e35d51a64e712890fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ca2a2deb8f46fab5add2e35d51a64e712890fb", "html_url": "https://github.com/rust-lang/rust/commit/a0ca2a2deb8f46fab5add2e35d51a64e712890fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0ca2a2deb8f46fab5add2e35d51a64e712890fb/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b13d0407d48e3380ec29d6c37fda0ecc488c79c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b13d0407d48e3380ec29d6c37fda0ecc488c79c2", "html_url": "https://github.com/rust-lang/rust/commit/b13d0407d48e3380ec29d6c37fda0ecc488c79c2"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "c128d4ab8bc3abfe2221268a81dd9f78d75e8f25", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a0ca2a2deb8f46fab5add2e35d51a64e712890fb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ca2a2deb8f46fab5add2e35d51a64e712890fb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=a0ca2a2deb8f46fab5add2e35d51a64e712890fb", "patch": "@@ -99,7 +99,7 @@ use self::VarKind::*;\n \n use crate::hir::def::*;\n use crate::hir::Node;\n-use crate::ty::{self, TyCtxt};\n+use crate::ty::{self, DefIdTree, TyCtxt};\n use crate::ty::query::Providers;\n use crate::lint;\n use crate::util::nodemap::{HirIdMap, HirIdSet};\n@@ -182,7 +182,10 @@ impl<'a, 'tcx> Visitor<'tcx> for IrMaps<'a, 'tcx> {\n }\n \n fn check_mod_liveness<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n-    tcx.hir().visit_item_likes_in_module(module_def_id, &mut IrMaps::new(tcx).as_deep_visitor());\n+    tcx.hir().visit_item_likes_in_module(\n+        module_def_id,\n+        &mut IrMaps::new(tcx, module_def_id).as_deep_visitor(),\n+    );\n }\n \n pub fn provide(providers: &mut Providers<'_>) {\n@@ -255,6 +258,7 @@ enum VarKind {\n \n struct IrMaps<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    body_owner: DefId,\n     num_live_nodes: usize,\n     num_vars: usize,\n     live_node_map: HirIdMap<LiveNode>,\n@@ -265,9 +269,10 @@ struct IrMaps<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n-    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> IrMaps<'a, 'tcx> {\n+    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, body_owner: DefId) -> IrMaps<'a, 'tcx> {\n         IrMaps {\n             tcx,\n+            body_owner,\n             num_live_nodes: 0,\n             num_vars: 0,\n             live_node_map: HirIdMap::default(),\n@@ -356,7 +361,8 @@ fn visit_fn<'a, 'tcx: 'a>(ir: &mut IrMaps<'a, 'tcx>,\n     debug!(\"visit_fn\");\n \n     // swap in a new set of IR maps for this function body:\n-    let mut fn_maps = IrMaps::new(ir.tcx);\n+    let def_id = ir.tcx.hir().local_def_id_from_hir_id(id);\n+    let mut fn_maps = IrMaps::new(ir.tcx, def_id);\n \n     // Don't run unused pass for #[derive()]\n     if let FnKind::Method(..) = fk {\n@@ -485,8 +491,15 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n         let mut call_caps = Vec::new();\n         let closure_def_id = ir.tcx.hir().local_def_id_from_hir_id(expr.hir_id);\n         if let Some(upvars) = ir.tcx.upvars(closure_def_id) {\n+            let parent_upvars = ir.tcx.upvars(ir.body_owner);\n             call_caps.extend(upvars.iter().filter_map(|(&var_id, upvar)| {\n-                if !upvar.has_parent {\n+                if upvar.has_parent {\n+                    assert_eq!(ir.body_owner, ir.tcx.parent(closure_def_id).unwrap());\n+                }\n+                let has_parent = parent_upvars\n+                    .map_or(false, |upvars| upvars.contains_key(&var_id));\n+                assert_eq!(upvar.has_parent, has_parent);\n+                if !has_parent {\n                     let upvar_ln = ir.add_live_node(UpvarNode(upvar.span));\n                     Some(CaptureInfo { ln: upvar_ln, var_hid: var_id })\n                 } else {\n@@ -495,8 +508,10 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n             }));\n         }\n         ir.set_captures(expr.hir_id, call_caps);\n-\n+        let old_body_owner = ir.body_owner;\n+        ir.body_owner = closure_def_id;\n         intravisit::walk_expr(ir, expr);\n+        ir.body_owner = old_body_owner;\n       }\n \n       // live nodes required for interesting control flow:"}]}