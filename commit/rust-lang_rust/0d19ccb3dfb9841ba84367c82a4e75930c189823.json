{"sha": "0d19ccb3dfb9841ba84367c82a4e75930c189823", "node_id": "C_kwDOAAsO6NoAKDBkMTljY2IzZGZiOTg0MWJhODQzNjdjODJhNGU3NTkzMGMxODk4MjM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-10T08:49:37Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-10T08:49:37Z"}, "message": "Make project loading errors less intrusive", "tree": {"sha": "e8fad64548fccb6337b9e5b10a7a6c390e77f83d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8fad64548fccb6337b9e5b10a7a6c390e77f83d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d19ccb3dfb9841ba84367c82a4e75930c189823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d19ccb3dfb9841ba84367c82a4e75930c189823", "html_url": "https://github.com/rust-lang/rust/commit/0d19ccb3dfb9841ba84367c82a4e75930c189823", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d19ccb3dfb9841ba84367c82a4e75930c189823/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "116775bc83b65ed4c558633d0c9bec31f41b1454", "url": "https://api.github.com/repos/rust-lang/rust/commits/116775bc83b65ed4c558633d0c9bec31f41b1454", "html_url": "https://github.com/rust-lang/rust/commit/116775bc83b65ed4c558633d0c9bec31f41b1454"}], "stats": {"total": 64, "additions": 33, "deletions": 31}, "files": [{"sha": "6b15f6ecd62f02d75d566ede4bbfbe7c10d6d344", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0d19ccb3dfb9841ba84367c82a4e75930c189823/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d19ccb3dfb9841ba84367c82a4e75930c189823/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=0d19ccb3dfb9841ba84367c82a4e75930c189823", "patch": "@@ -111,12 +111,7 @@ impl fmt::Debug for Event {\n \n impl GlobalState {\n     fn run(mut self, inbox: Receiver<lsp_server::Message>) -> Result<()> {\n-        if self.config.linked_projects().is_empty()\n-            && self.config.detached_files().is_empty()\n-            && self.config.notifications().cargo_toml_not_found\n-        {\n-            self.show_and_log_error(\"rust-analyzer failed to discover workspace\".to_string(), None);\n-        };\n+        self.update_status_or_notify();\n \n         if self.config.did_save_text_document_dynamic_registration() {\n             let save_registration_options = lsp_types::TextDocumentSaveRegistrationOptions {\n@@ -394,25 +389,28 @@ impl GlobalState {\n             });\n         }\n \n+        self.update_status_or_notify();\n+\n+        let loop_duration = loop_start.elapsed();\n+        if loop_duration > Duration::from_millis(100) && was_quiescent {\n+            tracing::warn!(\"overly long loop turn: {:?}\", loop_duration);\n+            self.poke_rust_analyzer_developer(format!(\"overly long loop turn: {loop_duration:?}\"));\n+        }\n+        Ok(())\n+    }\n+\n+    fn update_status_or_notify(&mut self) {\n         let status = self.current_status();\n         if self.last_reported_status.as_ref() != Some(&status) {\n             self.last_reported_status = Some(status.clone());\n \n             if self.config.server_status_notification() {\n                 self.send_notification::<lsp_ext::ServerStatusNotification>(status);\n-            } else {\n-                if let (lsp_ext::Health::Error, Some(message)) = (status.health, &status.message) {\n-                    self.show_message(lsp_types::MessageType::ERROR, message.clone());\n-                }\n+            } else if let (lsp_ext::Health::Error, Some(message)) = (status.health, &status.message)\n+            {\n+                self.show_and_log_error(message.clone(), None);\n             }\n         }\n-\n-        let loop_duration = loop_start.elapsed();\n-        if loop_duration > Duration::from_millis(100) && was_quiescent {\n-            tracing::warn!(\"overly long loop turn: {:?}\", loop_duration);\n-            self.poke_rust_analyzer_developer(format!(\"overly long loop turn: {loop_duration:?}\"));\n-        }\n-        Ok(())\n     }\n \n     fn handle_task(&mut self, prime_caches_progress: &mut Vec<PrimeCachesProgress>, task: Task) {\n@@ -445,6 +443,9 @@ impl GlobalState {\n                     ProjectWorkspaceProgress::Report(msg) => (Progress::Report, Some(msg)),\n                     ProjectWorkspaceProgress::End(workspaces) => {\n                         self.fetch_workspaces_queue.op_completed(Some(workspaces));\n+                        if let Err(e) = self.fetch_workspace_error() {\n+                            tracing::error!(\"FetchWorkspaceError:\\n{e}\")\n+                        }\n \n                         let old = Arc::clone(&self.workspaces);\n                         self.switch_workspaces(\"fetched workspace\".to_string());\n@@ -466,6 +467,9 @@ impl GlobalState {\n                     BuildDataProgress::Report(msg) => (Some(Progress::Report), Some(msg)),\n                     BuildDataProgress::End(build_data_result) => {\n                         self.fetch_build_data_queue.op_completed(build_data_result);\n+                        if let Err(e) = self.fetch_build_data_error() {\n+                            tracing::error!(\"FetchBuildDataError:\\n{e}\")\n+                        }\n \n                         self.switch_workspaces(\"fetched build data\".to_string());\n \n@@ -491,6 +495,7 @@ impl GlobalState {\n                     }\n                 }\n             }\n+            vfs::loader::Message::Progress { n_total: 0, .. } => {}\n             vfs::loader::Message::Progress { n_total, n_done, config_version } => {\n                 always!(config_version <= self.vfs_config_version);\n \n@@ -554,7 +559,10 @@ impl GlobalState {\n                     flycheck::Progress::DidCheckCrate(target) => (Progress::Report, Some(target)),\n                     flycheck::Progress::DidCancel => (Progress::End, None),\n                     flycheck::Progress::DidFailToRestart(err) => {\n-                        self.show_and_log_error(\"cargo check failed\".to_string(), Some(err));\n+                        self.show_and_log_error(\n+                            \"cargo check failed to start\".to_string(),\n+                            Some(err),\n+                        );\n                         return;\n                     }\n                     flycheck::Progress::DidFinish(result) => {"}, {"sha": "4695e87416190e87504664b78db4b5b5becdc920", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0d19ccb3dfb9841ba84367c82a4e75930c189823/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d19ccb3dfb9841ba84367c82a4e75930c189823/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=0d19ccb3dfb9841ba84367c82a4e75930c189823", "patch": "@@ -108,18 +108,19 @@ impl GlobalState {\n             status.message = Some(\"Workspace reload required\".to_string())\n         }\n \n-        if let Err(error) = self.fetch_workspace_error() {\n+        if let Err(_) = self.fetch_workspace_error() {\n             status.health = lsp_ext::Health::Error;\n-            status.message = Some(error)\n+            status.message = Some(\"Failed to load workspaces\".to_string())\n         }\n \n         if self.config.linked_projects().is_empty()\n             && self.config.detached_files().is_empty()\n             && self.config.notifications().cargo_toml_not_found\n         {\n             status.health = lsp_ext::Health::Warning;\n-            status.message = Some(\"Workspace reload required\".to_string())\n+            status.message = Some(\"Failed to discover workspace\".to_string())\n         }\n+\n         status\n     }\n \n@@ -201,21 +202,14 @@ impl GlobalState {\n         let _p = profile::span(\"GlobalState::switch_workspaces\");\n         tracing::info!(%cause, \"will switch workspaces\");\n \n-        if let Err(error_message) = self.fetch_workspace_error() {\n-            if !self.config.server_status_notification() {\n-                self.show_and_log_error(error_message, None);\n-            }\n+        if let Err(_) = self.fetch_workspace_error() {\n             if !self.workspaces.is_empty() {\n                 // It only makes sense to switch to a partially broken workspace\n                 // if we don't have any workspace at all yet.\n                 return;\n             }\n         }\n \n-        if let Err(error) = self.fetch_build_data_error() {\n-            self.show_and_log_error(\"failed to run build scripts\".to_string(), Some(error));\n-        }\n-\n         let Some(workspaces) = self.fetch_workspaces_queue.last_op_result() else { return; };\n         let workspaces =\n             workspaces.iter().filter_map(|res| res.as_ref().ok().cloned()).collect::<Vec<_>>();\n@@ -394,7 +388,7 @@ impl GlobalState {\n         tracing::info!(\"did switch workspaces\");\n     }\n \n-    fn fetch_workspace_error(&self) -> Result<(), String> {\n+    pub(super) fn fetch_workspace_error(&self) -> Result<(), String> {\n         let mut buf = String::new();\n \n         let Some(last_op_result) = self.fetch_workspaces_queue.last_op_result() else { return Ok(()) };\n@@ -415,7 +409,7 @@ impl GlobalState {\n         Err(buf)\n     }\n \n-    fn fetch_build_data_error(&self) -> Result<(), String> {\n+    pub(super) fn fetch_build_data_error(&self) -> Result<(), String> {\n         let mut buf = String::new();\n \n         for ws in &self.fetch_build_data_queue.last_op_result().1 {"}]}