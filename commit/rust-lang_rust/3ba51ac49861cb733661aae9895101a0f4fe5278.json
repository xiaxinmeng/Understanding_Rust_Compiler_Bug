{"sha": "3ba51ac49861cb733661aae9895101a0f4fe5278", "node_id": "C_kwDOAAsO6NoAKDNiYTUxYWM0OTg2MWNiNzMzNjYxYWFlOTg5NTEwMWEwZjRmZTUyNzg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-09T07:59:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-09T08:45:50Z"}, "message": "fmt and clippy", "tree": {"sha": "a1555c0343b1365758a2fdbba733613ace3c6d53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1555c0343b1365758a2fdbba733613ace3c6d53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ba51ac49861cb733661aae9895101a0f4fe5278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba51ac49861cb733661aae9895101a0f4fe5278", "html_url": "https://github.com/rust-lang/rust/commit/3ba51ac49861cb733661aae9895101a0f4fe5278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ba51ac49861cb733661aae9895101a0f4fe5278/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aab3bcecb7da86b141d9a39079afedd0820115e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/aab3bcecb7da86b141d9a39079afedd0820115e6", "html_url": "https://github.com/rust-lang/rust/commit/aab3bcecb7da86b141d9a39079afedd0820115e6"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "9f6cbe7f3c72fff445dbc7c906f5d57add488c46", "filename": "src/tools/miri/src/borrow_tracker/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ba51ac49861cb733661aae9895101a0f4fe5278/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba51ac49861cb733661aae9895101a0f4fe5278/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fmod.rs?ref=3ba51ac49861cb733661aae9895101a0f4fe5278", "patch": "@@ -264,15 +264,23 @@ impl GlobalStateInner {\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n-    fn retag_ptr_value(&mut self, kind: RetagKind, val: &ImmTy<'tcx, Provenance>) -> InterpResult<'tcx, ImmTy<'tcx, Provenance>> {\n+    fn retag_ptr_value(\n+        &mut self,\n+        kind: RetagKind,\n+        val: &ImmTy<'tcx, Provenance>,\n+    ) -> InterpResult<'tcx, ImmTy<'tcx, Provenance>> {\n         let this = self.eval_context_mut();\n         let method = this.machine.borrow_tracker.as_ref().unwrap().borrow().borrow_tracker_method;\n         match method {\n             BorrowTrackerMethod::StackedBorrows => this.sb_retag_ptr_value(kind, val),\n         }\n     }\n \n-    fn retag_place_contents(&mut self, kind: RetagKind, place: &PlaceTy<'tcx, Provenance>) -> InterpResult<'tcx> {\n+    fn retag_place_contents(\n+        &mut self,\n+        kind: RetagKind,\n+        place: &PlaceTy<'tcx, Provenance>,\n+    ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let method = this.machine.borrow_tracker.as_ref().unwrap().borrow().borrow_tracker_method;\n         match method {"}, {"sha": "5f132bf11a92ae5758f5443f33af30ee371a8a61", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ba51ac49861cb733661aae9895101a0f4fe5278/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba51ac49861cb733661aae9895101a0f4fe5278/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fdiagnostics.rs?ref=3ba51ac49861cb733661aae9895101a0f4fe5278", "patch": "@@ -462,7 +462,9 @@ impl<'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'history, 'ecx, 'mir, 'tcx> {\n             Operation::Retag(RetagOp { orig_tag, permission, new_tag, .. }) => {\n                 let permission = permission\n                     .expect(\"start_grant should set the current permission before popping a tag\");\n-                format!(\" due to {permission:?} retag from {orig_tag:?} (that retag created {new_tag:?})\")\n+                format!(\n+                    \" due to {permission:?} retag from {orig_tag:?} (that retag created {new_tag:?})\"\n+                )\n             }\n         };\n "}, {"sha": "bcdf2e751790e5bfdb385c661e344a3deace216b", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ba51ac49861cb733661aae9895101a0f4fe5278/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba51ac49861cb733661aae9895101a0f4fe5278/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs?ref=3ba51ac49861cb733661aae9895101a0f4fe5278", "patch": "@@ -14,6 +14,7 @@ use rustc_middle::mir::{Mutability, RetagKind};\n use rustc_middle::ty::{\n     self,\n     layout::{HasParamEnv, LayoutOf},\n+    Ty,\n };\n use rustc_target::abi::{Abi, Size};\n \n@@ -64,7 +65,7 @@ impl NewPermission {\n     /// A key function: determine the permissions to grant at a retag for the given kind of\n     /// reference/pointer.\n     fn from_ref_ty<'tcx>(\n-        ty: ty::Ty<'tcx>,\n+        ty: Ty<'tcx>,\n         kind: RetagKind,\n         cx: &crate::MiriInterpCx<'_, 'tcx>,\n     ) -> Self {\n@@ -864,7 +865,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             RetagKind::FnEntry => unreachable!(),\n             RetagKind::Raw | RetagKind::Default => RetagCause::Normal,\n         };\n-        this.sb_retag_reference(&val, new_perm, retag_cause)\n+        this.sb_retag_reference(val, new_perm, retag_cause)\n     }\n \n     fn sb_retag_place_contents("}, {"sha": "c4f4d018f8e22f57e5b4b035faeda25c36b56b0f", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ba51ac49861cb733661aae9895101a0f4fe5278/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba51ac49861cb733661aae9895101a0f4fe5278/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=3ba51ac49861cb733661aae9895101a0f4fe5278", "patch": "@@ -393,7 +393,8 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n \n         let msg = match &e {\n             CreatedPointerTag(tag, None, _) => format!(\"created base tag {tag:?}\"),\n-            CreatedPointerTag(tag, Some(perm), None) => format!(\"created {tag:?} with {perm} derived from unknown tag\"),\n+            CreatedPointerTag(tag, Some(perm), None) =>\n+                format!(\"created {tag:?} with {perm} derived from unknown tag\"),\n             CreatedPointerTag(tag, Some(perm), Some((alloc_id, range, orig_tag))) =>\n                 format!(\n                     \"created tag {tag:?} with {perm} at {alloc_id:?}{range:?} derived from {orig_tag:?}\""}, {"sha": "5d43df9cf1f191618339e4566a9f1251eb5139d8", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ba51ac49861cb733661aae9895101a0f4fe5278/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba51ac49861cb733661aae9895101a0f4fe5278/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=3ba51ac49861cb733661aae9895101a0f4fe5278", "patch": "@@ -967,9 +967,8 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n         ptr: Pointer<Self::Provenance>,\n     ) -> InterpResult<'tcx> {\n         match ptr.provenance {\n-            Provenance::Concrete { alloc_id, tag } => {\n-                intptrcast::GlobalStateInner::expose_ptr(ecx, alloc_id, tag)\n-            }\n+            Provenance::Concrete { alloc_id, tag } =>\n+                intptrcast::GlobalStateInner::expose_ptr(ecx, alloc_id, tag),\n             Provenance::Wildcard => {\n                 // No need to do anything for wildcard pointers as\n                 // their provenances have already been previously exposed."}]}