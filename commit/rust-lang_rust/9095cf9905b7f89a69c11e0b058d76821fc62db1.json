{"sha": "9095cf9905b7f89a69c11e0b058d76821fc62db1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwOTVjZjk5MDViN2Y4OWE2OWMxMWUwYjA1OGQ3NjgyMWZjNjJkYjE=", "commit": {"author": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-09-07T18:51:09Z"}, "committer": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-09-09T08:41:19Z"}, "message": "rename `is_valid_for` to `is_valid`", "tree": {"sha": "cda9526d7f260cd797ac4a850e9a0f7d0108be50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cda9526d7f260cd797ac4a850e9a0f7d0108be50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9095cf9905b7f89a69c11e0b058d76821fc62db1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9095cf9905b7f89a69c11e0b058d76821fc62db1", "html_url": "https://github.com/rust-lang/rust/commit/9095cf9905b7f89a69c11e0b058d76821fc62db1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9095cf9905b7f89a69c11e0b058d76821fc62db1/comments", "author": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd34e0c96673ce1c770716573af1c671fd0a515f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd34e0c96673ce1c770716573af1c671fd0a515f", "html_url": "https://github.com/rust-lang/rust/commit/dd34e0c96673ce1c770716573af1c671fd0a515f"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "824bcd0383cd78a8f69a7bfd9eabfa652e7d45cb", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9095cf9905b7f89a69c11e0b058d76821fc62db1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9095cf9905b7f89a69c11e0b058d76821fc62db1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=9095cf9905b7f89a69c11e0b058d76821fc62db1", "patch": "@@ -541,7 +541,7 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n             // become 0..0 when the type becomes i1, which would be rejected\n             // by the LLVM verifier.\n             if let Int(..) = scalar.value {\n-                if !scalar.is_bool() && !scalar.is_always_valid_for(bx) {\n+                if !scalar.is_bool() && !scalar.is_always_valid(bx) {\n                     bx.range_metadata(callsite, scalar.valid_range);\n                 }\n             }"}, {"sha": "799f9a57e93a289d872d65714b6a8afd4ce6637b", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9095cf9905b7f89a69c11e0b058d76821fc62db1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9095cf9905b7f89a69c11e0b058d76821fc62db1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=9095cf9905b7f89a69c11e0b058d76821fc62db1", "patch": "@@ -464,7 +464,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         ) {\n             match scalar.value {\n                 abi::Int(..) => {\n-                    if !scalar.is_always_valid_for(bx) {\n+                    if !scalar.is_always_valid(bx) {\n                         bx.range_metadata(load, scalar.valid_range);\n                     }\n                 }"}, {"sha": "f65af17535abd19925004f7b7ab11bf13792b206", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9095cf9905b7f89a69c11e0b058d76821fc62db1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9095cf9905b7f89a69c11e0b058d76821fc62db1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=9095cf9905b7f89a69c11e0b058d76821fc62db1", "patch": "@@ -308,7 +308,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 // then `i1 1` (i.e., E::B) is effectively `i8 -1`.\n                                 signed = !scalar.is_bool() && s;\n \n-                                if !scalar.is_always_valid_for(bx.cx())\n+                                if !scalar.is_always_valid(bx.cx())\n                                     && scalar.valid_range.end >= scalar.valid_range.start\n                                 {\n                                     // We want `table[e as usize \u00b1 k]` to not"}, {"sha": "89e0a86f3f9d0da8383f8ff4aa760c1209c7b2b2", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9095cf9905b7f89a69c11e0b058d76821fc62db1/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9095cf9905b7f89a69c11e0b058d76821fc62db1/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=9095cf9905b7f89a69c11e0b058d76821fc62db1", "patch": "@@ -830,7 +830,7 @@ impl Scalar {\n \n     /// Returns `true` if all possible numbers are valid, i.e `valid_range` covers the whole layout\n     #[inline]\n-    pub fn is_always_valid_for<C: HasDataLayout>(&self, cx: &C) -> bool {\n+    pub fn is_always_valid<C: HasDataLayout>(&self, cx: &C) -> bool {\n         self.valid_range.is_full_for(self.value.size(cx))\n     }\n }\n@@ -1280,7 +1280,7 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n                 s.valid_range.contains(0)\n             } else {\n                 // The range must include all values.\n-                s.is_always_valid_for(cx)\n+                s.is_always_valid(cx)\n             }\n         };\n "}]}