{"sha": "799861d7e03cb9b4d9c1edc4ec491602166aed1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5OTg2MWQ3ZTAzY2I5YjRkOWMxZWRjNGVjNDkxNjAyMTY2YWVkMWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-27T15:14:04Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-27T15:14:04Z"}, "message": "use span_lint_and_then instead of adding to the `DiagnosticWrapper`", "tree": {"sha": "ca04db2985354511b73a73080cf3765f0218be64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca04db2985354511b73a73080cf3765f0218be64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/799861d7e03cb9b4d9c1edc4ec491602166aed1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXcUK8AAoJEFbW7qD8Z6xGg4cQAJtrErLlwMUmi3Eqh11Ze5hH\nIHSAqU6uS5DMxOLV/inegRKIwBMHVXGQ52nfHo3J0BoBeGDasoijShe5fCujs8sI\nA960vHFvxpaah3MHYcdu8abxrjap60af5A39f/Sjg7kwLy6zwFXeGvFnogS6+Jr8\nbcz2VuEBdlD1sQ/DUHcRop2U7+To93cKwZ9NiSubt9MGN/hOREDjvKY4HvWQH4be\nGktNLmg2ahNyIolid2sotcH4xAE/shih4DdBm7xZzEF2EgGbMNbN2zssHP7nb7ld\ngZJze/aHXOPas4i4oXfvENP3DvTNbDjd3jliL/lBl6ST5VdUEc8Ch6+agjV99KcA\nBTacevAu9ebwqUJSP/MzFktHIPs+lAkYVSA2tT+BhCKEozLJ3LVTnms86w5KI80n\ngvwg3ra3WPz4AObQUX0eW4HCswFPLclWn0y5VfZEIJ8gBP0aP8/GeXyd3JkD5RZz\n1y+XEn5n6UjnP3dyIjF6AtKz9AR1hwcxzEnhR1776k2qxkyUq2k6XPU5ZluRSVKU\n899yAiApByiPphPue42Z4rK+XZ9syIeh6gMCGyEid8h6V4iRQzoPQd+56GU3wUAM\nJt9R+zlNf1uGI2JfaJx9eONyS5tAaywqp/HBOgDzMcKM8Cjp3x258BDIMANyUSMe\n0NeIs/JWqxwGjceNKSDC\n=Z7C7\n-----END PGP SIGNATURE-----", "payload": "tree ca04db2985354511b73a73080cf3765f0218be64\nparent 60cc87baba4f5ea457f4b696c00fb15031bfecb6\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467040444 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467040444 +0200\n\nuse span_lint_and_then instead of adding to the `DiagnosticWrapper`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/799861d7e03cb9b4d9c1edc4ec491602166aed1c", "html_url": "https://github.com/rust-lang/rust/commit/799861d7e03cb9b4d9c1edc4ec491602166aed1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/799861d7e03cb9b4d9c1edc4ec491602166aed1c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60cc87baba4f5ea457f4b696c00fb15031bfecb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/60cc87baba4f5ea457f4b696c00fb15031bfecb6", "html_url": "https://github.com/rust-lang/rust/commit/60cc87baba4f5ea457f4b696c00fb15031bfecb6"}], "stats": {"total": 189, "additions": 85, "deletions": 104}, "files": [{"sha": "a959dbe1d6ad73cda909d47fde2070069821b5c5", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/799861d7e03cb9b4d9c1edc4ec491602166aed1c/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799861d7e03cb9b4d9c1edc4ec491602166aed1c/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=799861d7e03cb9b4d9c1edc4ec491602166aed1c", "patch": "@@ -536,13 +536,14 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[P<hi\n                     };\n \n                     if implements_trait(cx, arg_ty, default_trait_id, Vec::new()) {\n-                        span_lint(cx,\n+                        span_lint_and_then(cx,\n                                   OR_FUN_CALL,\n                                   span,\n-                                  &format!(\"use of `{}` followed by a call to `{}`\", name, path))\n-                            .span_suggestion(span,\n-                                             \"try this\",\n-                                             format!(\"{}.unwrap_or_default()\", snippet(cx, self_expr.span, \"_\")));\n+                                  &format!(\"use of `{}` followed by a call to `{}`\", name, path),\n+                                  |db| {\n+                                      db.span_suggestion(span, \"try this\",\n+                                                          format!(\"{}.unwrap_or_default()\", snippet(cx, self_expr.span, \"_\")));\n+                                  });\n                         return true;\n                     }\n                 }\n@@ -590,10 +591,11 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[P<hi\n             (false, true) => snippet(cx, fun.span, \"..\"),\n         };\n \n-        span_lint(cx, OR_FUN_CALL, span, &format!(\"use of `{}` followed by a function call\", name))\n-            .span_suggestion(span,\n-                             \"try this\",\n-                             format!(\"{}.{}_{}({})\", snippet(cx, self_expr.span, \"_\"), name, suffix, sugg));\n+        span_lint_and_then(cx, OR_FUN_CALL, span, &format!(\"use of `{}` followed by a function call\", name), |db| {\n+            db.span_suggestion(span,\n+                               \"try this\",\n+                               format!(\"{}.{}_{}({})\", snippet(cx, self_expr.span, \"_\"), name, suffix, sugg));\n+        });\n     }\n \n     if args.len() == 2 {\n@@ -621,15 +623,14 @@ fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr) {\n fn lint_clone_double_ref(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, ty: ty::Ty) {\n     if let ty::TyRef(_, ty::TypeAndMut { ty: ref inner, .. }) = ty.sty {\n         if let ty::TyRef(..) = inner.sty {\n-            let mut db = span_lint(cx,\n-                                   CLONE_DOUBLE_REF,\n-                                   expr.span,\n-                                   \"using `clone` on a double-reference; \\\n-                                    this will copy the reference instead of cloning \\\n-                                    the inner type\");\n-            if let Some(snip) = snippet_opt(cx, arg.span) {\n-                db.span_suggestion(expr.span, \"try dereferencing it\", format!(\"(*{}).clone()\", snip));\n-            }\n+            span_lint_and_then(cx,\n+                               CLONE_DOUBLE_REF,\n+                               expr.span,\n+                               \"using `clone` on a double-reference; \\\n+                                this will copy the reference instead of cloning the inner type\",\n+                               |db| if let Some(snip) = snippet_opt(cx, arg.span) {\n+                                   db.span_suggestion(expr.span, \"try dereferencing it\", format!(\"(*{}).clone()\", snip));\n+                               });\n         }\n     }\n }\n@@ -641,13 +642,14 @@ fn lint_extend(cx: &LateContext, expr: &hir::Expr, args: &MethodArgs) {\n     }\n     let arg_ty = cx.tcx.expr_ty(&args[1]);\n     if let Some((span, r)) = derefs_to_slice(cx, &args[1], &arg_ty) {\n-        span_lint(cx, EXTEND_FROM_SLICE, expr.span, \"use of `extend` to extend a Vec by a slice\")\n-            .span_suggestion(expr.span,\n-                             \"try this\",\n-                             format!(\"{}.extend_from_slice({}{})\",\n-                                     snippet(cx, args[0].span, \"_\"),\n-                                     r,\n-                                     snippet(cx, span, \"_\")));\n+        span_lint_and_then(cx, EXTEND_FROM_SLICE, expr.span, \"use of `extend` to extend a Vec by a slice\", |db| {\n+            db.span_suggestion(expr.span,\n+                               \"try this\",\n+                               format!(\"{}.extend_from_slice({}{})\",\n+                                       snippet(cx, args[0].span, \"_\"),\n+                                       r,\n+                                       snippet(cx, span, \"_\")));\n+        });\n     }\n }\n "}, {"sha": "20c0d282bd8f069edb66aba33007ade5936d31b4", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/799861d7e03cb9b4d9c1edc4ec491602166aed1c/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799861d7e03cb9b4d9c1edc4ec491602166aed1c/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=799861d7e03cb9b4d9c1edc4ec491602166aed1c", "patch": "@@ -6,7 +6,7 @@ use rustc::ty;\n use syntax::ast;\n use syntax::codemap::Span;\n use utils::paths;\n-use utils::{get_trait_def_id, implements_trait, in_external_macro, return_ty, same_tys, span_lint};\n+use utils::{get_trait_def_id, implements_trait, in_external_macro, return_ty, same_tys, span_lint_and_then};\n \n /// **What it does:** This lints about type with a `fn new() -> Self` method\n /// and no implementation of\n@@ -112,24 +112,26 @@ impl LateLintPass for NewWithoutDefault {\n                     !implements_trait(cx, self_ty, default_trait_id, Vec::new())\n                 ], {\n                     if can_derive_default(self_ty, cx, default_trait_id) {\n-                        span_lint(cx,\n-                                  NEW_WITHOUT_DEFAULT_DERIVE, span,\n-                                  &format!(\"you should consider deriving a \\\n-                                           `Default` implementation for `{}`\",\n-                                           self_ty)).\n-                                  span_suggestion(span,\n-                                                  \"try this\",\n-                                                  \"#[derive(Default)]\".into());\n+                        span_lint_and_then(cx,\n+                                           NEW_WITHOUT_DEFAULT_DERIVE, span,\n+                                           &format!(\"you should consider deriving a \\\n+                                                     `Default` implementation for `{}`\",\n+                                                    self_ty),\n+                                           |db| {\n+                                               db.span_suggestion(span, \"try this\", \"#[derive(Default)]\".into());\n+                                           });\n                     } else {\n-                        span_lint(cx,\n-                                  NEW_WITHOUT_DEFAULT, span,\n-                                  &format!(\"you should consider adding a \\\n-                                           `Default` implementation for `{}`\",\n-                                           self_ty)).\n-                                  span_suggestion(span,\n-                                                  \"try this\",\n-                             format!(\"impl Default for {} {{ fn default() -> \\\n-                                    Self {{ {}::new() }} }}\", self_ty, self_ty));\n+                        span_lint_and_then(cx,\n+                                           NEW_WITHOUT_DEFAULT, span,\n+                                           &format!(\"you should consider adding a \\\n+                                                    `Default` implementation for `{}`\",\n+                                                    self_ty),\n+                                           |db| {\n+                                               db.span_suggestion(span,\n+                                                                  \"try this\",\n+                                                                  format!(\"impl Default for {} {{ fn default() -> \\\n+                                                                          Self {{ {}::new() }} }}\", self_ty, self_ty));\n+                                           });\n                     }\n                 }}\n             }"}, {"sha": "b12e68185c2d13287947a941a6e04ac5520aeb98", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 28, "deletions": 31, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/799861d7e03cb9b4d9c1edc4ec491602166aed1c/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799861d7e03cb9b4d9c1edc4ec491602166aed1c/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=799861d7e03cb9b4d9c1edc4ec491602166aed1c", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::*;\n use rustc::hir::intravisit::{Visitor, FnKind};\n use std::ops::Deref;\n use syntax::codemap::Span;\n-use utils::{is_from_for_desugar, in_external_macro, snippet, span_lint, span_note_and_lint, DiagnosticWrapper};\n+use utils::{is_from_for_desugar, in_external_macro, snippet, span_lint_and_then};\n \n /// **What it does:** This lint checks for bindings that shadow other bindings already in scope, while just changing reference level or mutability.\n ///\n@@ -197,49 +197,46 @@ fn check_pat(cx: &LateContext, pat: &Pat, init: &Option<&Expr>, span: Span, bind\n fn lint_shadow<T>(cx: &LateContext, name: Name, span: Span, pattern_span: Span, init: &Option<T>, prev_span: Span)\n     where T: Deref<Target = Expr>\n {\n-    fn note_orig(cx: &LateContext, mut db: DiagnosticWrapper, lint: &'static Lint, span: Span) {\n-        if cx.current_level(lint) != Level::Allow {\n-            db.span_note(span, \"previous binding is here\");\n-        }\n-    }\n     if let Some(ref expr) = *init {\n         if is_self_shadow(name, expr) {\n-            let db = span_lint(cx,\n+            span_lint_and_then(cx,\n                                SHADOW_SAME,\n                                span,\n                                &format!(\"`{}` is shadowed by itself in `{}`\",\n                                         snippet(cx, pattern_span, \"_\"),\n-                                        snippet(cx, expr.span, \"..\")));\n-\n-            note_orig(cx, db, SHADOW_SAME, prev_span);\n+                                        snippet(cx, expr.span, \"..\")),\n+                               |db| { db.span_note(prev_span, \"previous binding is here\"); },\n+            );\n         } else if contains_self(name, expr) {\n-            let db = span_note_and_lint(cx,\n-                                        SHADOW_REUSE,\n-                                        pattern_span,\n-                                        &format!(\"`{}` is shadowed by `{}` which reuses the original value\",\n-                                                 snippet(cx, pattern_span, \"_\"),\n-                                                 snippet(cx, expr.span, \"..\")),\n-                                        expr.span,\n-                                        \"initialization happens here\");\n-            note_orig(cx, db, SHADOW_REUSE, prev_span);\n+            span_lint_and_then(cx,\n+                               SHADOW_REUSE,\n+                               pattern_span,\n+                               &format!(\"`{}` is shadowed by `{}` which reuses the original value\",\n+                                        snippet(cx, pattern_span, \"_\"),\n+                                        snippet(cx, expr.span, \"..\")),\n+                               |db| {\n+                                   db.span_note(expr.span, \"initialization happens here\");\n+                                   db.span_note(prev_span, \"previous binding is here\");\n+                               });\n         } else {\n-            let db = span_note_and_lint(cx,\n-                                        SHADOW_UNRELATED,\n-                                        pattern_span,\n-                                        &format!(\"`{}` is shadowed by `{}`\",\n-                                                 snippet(cx, pattern_span, \"_\"),\n-                                                 snippet(cx, expr.span, \"..\")),\n-                                        expr.span,\n-                                        \"initialization happens here\");\n-            note_orig(cx, db, SHADOW_UNRELATED, prev_span);\n+            span_lint_and_then(cx,\n+                               SHADOW_UNRELATED,\n+                               pattern_span,\n+                               &format!(\"`{}` is shadowed by `{}`\",\n+                                        snippet(cx, pattern_span, \"_\"),\n+                                        snippet(cx, expr.span, \"..\")),\n+                               |db| {\n+                                   db.span_note(expr.span, \"initialization happens here\");\n+                                   db.span_note(prev_span, \"previous binding is here\");\n+                               });\n         }\n \n     } else {\n-        let db = span_lint(cx,\n+        span_lint_and_then(cx,\n                            SHADOW_UNRELATED,\n                            span,\n-                           &format!(\"{} shadows a previous declaration\", snippet(cx, pattern_span, \"_\")));\n-        note_orig(cx, db, SHADOW_UNRELATED, prev_span);\n+                           &format!(\"{} shadows a previous declaration\", snippet(cx, pattern_span, \"_\")),\n+                           |db| { db.span_note(prev_span, \"previous binding is here\"); });\n     }\n }\n "}, {"sha": "9eb54c2a01392f380a9613c7cdcc2a6be9b3f5c7", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/799861d7e03cb9b4d9c1edc4ec491602166aed1c/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799861d7e03cb9b4d9c1edc4ec491602166aed1c/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=799861d7e03cb9b4d9c1edc4ec491602166aed1c", "patch": "@@ -12,7 +12,6 @@ use rustc::ty;\n use std::borrow::Cow;\n use std::env;\n use std::mem;\n-use std::ops::{Deref, DerefMut};\n use std::str::FromStr;\n use syntax::ast::{self, LitKind, RangeLimits};\n use syntax::codemap::{ExpnInfo, Span, ExpnFormat};\n@@ -453,71 +452,52 @@ impl<'a> Drop for DiagnosticWrapper<'a> {\n     }\n }\n \n-impl<'a> DerefMut for DiagnosticWrapper<'a> {\n-    fn deref_mut(&mut self) -> &mut DiagnosticBuilder<'a> {\n-        &mut self.0\n-    }\n-}\n-\n-impl<'a> Deref for DiagnosticWrapper<'a> {\n-    type Target = DiagnosticBuilder<'a>;\n-    fn deref(&self) -> &DiagnosticBuilder<'a> {\n-        &self.0\n-    }\n-}\n-\n impl<'a> DiagnosticWrapper<'a> {\n     fn wiki_link(&mut self, lint: &'static Lint) {\n         if env::var(\"CLIPPY_DISABLE_WIKI_LINKS\").is_err() {\n-            self.help(&format!(\"for further information visit https://github.com/Manishearth/rust-clippy/wiki#{}\",\n+            self.0.help(&format!(\"for further information visit https://github.com/Manishearth/rust-clippy/wiki#{}\",\n                                lint.name_lower()));\n         }\n     }\n }\n \n-pub fn span_lint<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str) -> DiagnosticWrapper<'a> {\n+pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: Span, msg: &str) {\n     let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg));\n     if cx.current_level(lint) != Level::Allow {\n         db.wiki_link(lint);\n     }\n-    db\n }\n \n-pub fn span_help_and_lint<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str)\n-                                              -> DiagnosticWrapper<'a> {\n+// FIXME: needless lifetime doesn't trigger here\n+pub fn span_help_and_lint<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {\n     let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n     if cx.current_level(lint) != Level::Allow {\n-        db.help(help);\n+        db.0.help(help);\n         db.wiki_link(lint);\n     }\n-    db\n }\n \n pub fn span_note_and_lint<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, note_span: Span,\n-                                              note: &str)\n-                                              -> DiagnosticWrapper<'a> {\n+                                              note: &str) {\n     let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n     if cx.current_level(lint) != Level::Allow {\n         if note_span == span {\n-            db.note(note);\n+            db.0.note(note);\n         } else {\n-            db.span_note(note_span, note);\n+            db.0.span_note(note_span, note);\n         }\n         db.wiki_link(lint);\n     }\n-    db\n }\n \n pub fn span_lint_and_then<'a, T: LintContext, F>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str, f: F)\n-                                                 -> DiagnosticWrapper<'a>\n-    where F: FnOnce(&mut DiagnosticWrapper)\n+    where F: FnOnce(&mut DiagnosticBuilder<'a>)\n {\n     let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg));\n     if cx.current_level(lint) != Level::Allow {\n-        f(&mut db);\n+        f(&mut db.0);\n         db.wiki_link(lint);\n     }\n-    db\n }\n \n /// Return the base type for references and raw pointers."}]}