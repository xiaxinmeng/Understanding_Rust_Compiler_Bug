{"sha": "d7f5d784d7dd759944ddb8c224544b6f89c9fdc8", "node_id": "C_kwDOAAsO6NoAKGQ3ZjVkNzg0ZDdkZDc1OTk0NGRkYjhjMjI0NTQ0YjZmODljOWZkYzg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-07T10:26:14Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-25T08:39:11Z"}, "message": "Simplify and document range layout computation", "tree": {"sha": "d21ce8a6eb313cfcf886e011c4f64a1c3eaedf64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d21ce8a6eb313cfcf886e011c4f64a1c3eaedf64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7f5d784d7dd759944ddb8c224544b6f89c9fdc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f5d784d7dd759944ddb8c224544b6f89c9fdc8", "html_url": "https://github.com/rust-lang/rust/commit/d7f5d784d7dd759944ddb8c224544b6f89c9fdc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7f5d784d7dd759944ddb8c224544b6f89c9fdc8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcb1f1874f8c1b40b2ba5228a905c7875b21ce88", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb1f1874f8c1b40b2ba5228a905c7875b21ce88", "html_url": "https://github.com/rust-lang/rust/commit/fcb1f1874f8c1b40b2ba5228a905c7875b21ce88"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "11e7b80f85efd1a7a49c68c4220105de4589d41e", "filename": "compiler/rustc_abi/src/layout.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5d784d7dd759944ddb8c224544b6f89c9fdc8/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5d784d7dd759944ddb8c224544b6f89c9fdc8/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flayout.rs?ref=d7f5d784d7dd759944ddb8c224544b6f89c9fdc8", "patch": "@@ -382,28 +382,26 @@ pub trait LayoutCalculator {\n             let (start, end) = scalar_valid_range;\n             match st.abi {\n                 Abi::Scalar(ref mut scalar) | Abi::ScalarPair(ref mut scalar, _) => {\n-                    // the asserts ensure that we are not using the\n-                    // `#[rustc_layout_scalar_valid_range(n)]`\n-                    // attribute to widen the range of anything as that would probably\n-                    // result in UB somewhere\n-                    // FIXME(eddyb) the asserts are probably not needed,\n-                    // as larger validity ranges would result in missed\n+                    // Enlarging validity ranges would result in missed\n                     // optimizations, *not* wrongly assuming the inner\n-                    // value is valid. e.g. unions enlarge validity ranges,\n+                    // value is valid. e.g. unions already enlarge validity ranges,\n                     // because the values may be uninitialized.\n+                    //\n+                    // Because of that we only check that the start and end\n+                    // of the range is representable with this scalar type.\n+\n+                    let max_value = scalar.size(dl).unsigned_int_max();\n                     if let Bound::Included(start) = start {\n                         // FIXME(eddyb) this might be incorrect - it doesn't\n                         // account for wrap-around (end < start) ranges.\n-                        let valid_range = scalar.valid_range_mut();\n-                        assert!(valid_range.start <= start);\n-                        valid_range.start = start;\n+                        assert!(start <= max_value, \"{start} > {max_value}\");\n+                        scalar.valid_range_mut().start = start;\n                     }\n                     if let Bound::Included(end) = end {\n                         // FIXME(eddyb) this might be incorrect - it doesn't\n                         // account for wrap-around (end < start) ranges.\n-                        let valid_range = scalar.valid_range_mut();\n-                        assert!(valid_range.end >= end);\n-                        valid_range.end = end;\n+                        assert!(end <= max_value, \"{end} > {max_value}\");\n+                        scalar.valid_range_mut().end = end;\n                     }\n \n                     // Update `largest_niche` if we have introduced a larger niche."}]}