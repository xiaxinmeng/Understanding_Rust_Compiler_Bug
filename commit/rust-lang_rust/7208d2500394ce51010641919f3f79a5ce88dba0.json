{"sha": "7208d2500394ce51010641919f3f79a5ce88dba0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMDhkMjUwMDM5NGNlNTEwMTA2NDE5MTlmM2Y3OWE1Y2U4OGRiYTA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-15T11:58:28Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-15T11:58:28Z"}, "message": "Rollup merge of #30776 - antonblanchard:powerpc64_merge, r=alexcrichton\n\nThis adds support for big endian and little endian PowerPC64.\nmake check runs clean apart from one big endian backtrace issue.", "tree": {"sha": "cd4ce2d9f411c08239b14bf906139ab83dc23305", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd4ce2d9f411c08239b14bf906139ab83dc23305"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7208d2500394ce51010641919f3f79a5ce88dba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7208d2500394ce51010641919f3f79a5ce88dba0", "html_url": "https://github.com/rust-lang/rust/commit/7208d2500394ce51010641919f3f79a5ce88dba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7208d2500394ce51010641919f3f79a5ce88dba0/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad83ea6a6554dfc837a8e42c1af8af093d98c63d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad83ea6a6554dfc837a8e42c1af8af093d98c63d", "html_url": "https://github.com/rust-lang/rust/commit/ad83ea6a6554dfc837a8e42c1af8af093d98c63d"}, {"sha": "12aec073a8cd293bede167a7ef062044eb07299e", "url": "https://api.github.com/repos/rust-lang/rust/commits/12aec073a8cd293bede167a7ef062044eb07299e", "html_url": "https://github.com/rust-lang/rust/commit/12aec073a8cd293bede167a7ef062044eb07299e"}], "stats": {"total": 474, "additions": 440, "deletions": 34}, "files": [{"sha": "0255b04caa3163a331f1a406b590234ce92e211b", "filename": "configure", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/configure", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -499,13 +499,18 @@ case $CFG_CPUTYPE in\n         CFG_CPUTYPE=aarch64\n         ;;\n \n-    # At some point, when ppc64[le] support happens, this will need to do\n-    # something clever. For now it's safe to assume that we're only ever\n-    # interested in building 32 bit.\n-    powerpc | ppc | ppc64)\n+    powerpc | ppc)\n         CFG_CPUTYPE=powerpc\n         ;;\n \n+    powerpc64 | ppc64)\n+        CFG_CPUTYPE=powerpc64\n+        ;;\n+\n+    powerpc64le | ppc64le)\n+        CFG_CPUTYPE=powerpc64le\n+        ;;\n+\n     x86_64 | x86-64 | x64 | amd64)\n         CFG_CPUTYPE=x86_64\n         ;;"}, {"sha": "a9e8585ad6db5f8bea8e8eb0b8827b392cfc9c42", "filename": "mk/cfg/powerpc64-unknown-linux-gnu.mk", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -0,0 +1,24 @@\n+# powerpc64-unknown-linux-gnu configuration\n+CROSS_PREFIX_powerpc64-unknown-linux-gnu=powerpc64-linux-gnu-\n+CC_powerpc64-unknown-linux-gnu=$(CC)\n+CXX_powerpc64-unknown-linux-gnu=$(CXX)\n+CPP_powerpc64-unknown-linux-gnu=$(CPP)\n+AR_powerpc64-unknown-linux-gnu=$(AR)\n+CFG_LIB_NAME_powerpc64-unknown-linux-gnu=lib$(1).so\n+CFG_STATIC_LIB_NAME_powerpc64-unknown-linux-gnu=lib$(1).a\n+CFG_LIB_GLOB_powerpc64-unknown-linux-gnu=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_powerpc64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n+CFG_CFLAGS_powerpc64-unknown-linux-gnu := -m64 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_powerpc64-unknown-linux-gnu := -Wall -Werror -g -fPIC -m64 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_powerpc64-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_powerpc64-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n+CFG_GCCISH_DEF_FLAG_powerpc64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n+CFG_LLC_FLAGS_powerpc64-unknown-linux-gnu :=\n+CFG_INSTALL_NAME_powerpc64-unknown-linux-gnu =\n+CFG_EXE_SUFFIX_powerpc64-unknown-linux-gnu =\n+CFG_WINDOWSY_powerpc64-unknown-linux-gnu :=\n+CFG_UNIXY_powerpc64-unknown-linux-gnu := 1\n+CFG_LDPATH_powerpc64-unknown-linux-gnu :=\n+CFG_RUN_powerpc64-unknown-linux-gnu=$(2)\n+CFG_RUN_TARG_powerpc64-unknown-linux-gnu=$(call CFG_RUN_powerpc64-unknown-linux-gnu,,$(2))\n+CFG_GNU_TRIPLE_powerpc64-unknown-linux-gnu := powerpc64-unknown-linux-gnu"}, {"sha": "a2049331ab2e994c3edbff53e06728dc4984219d", "filename": "mk/cfg/powerpc64le-unknown-linux-gnu.mk", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/mk%2Fcfg%2Fpowerpc64le-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/mk%2Fcfg%2Fpowerpc64le-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc64le-unknown-linux-gnu.mk?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -0,0 +1,24 @@\n+# powerpc64le-unknown-linux-gnu configuration\n+CROSS_PREFIX_powerpc64le-unknown-linux-gnu=powerpc64le-linux-gnu-\n+CC_powerpc64le-unknown-linux-gnu=$(CC)\n+CXX_powerpc64le-unknown-linux-gnu=$(CXX)\n+CPP_powerpc64le-unknown-linux-gnu=$(CPP)\n+AR_powerpc64le-unknown-linux-gnu=$(AR)\n+CFG_LIB_NAME_powerpc64le-unknown-linux-gnu=lib$(1).so\n+CFG_STATIC_LIB_NAME_powerpc64le-unknown-linux-gnu=lib$(1).a\n+CFG_LIB_GLOB_powerpc64le-unknown-linux-gnu=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_powerpc64le-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n+CFG_CFLAGS_powerpc64le-unknown-linux-gnu := -m64 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_powerpc64le-unknown-linux-gnu := -Wall -Werror -g -fPIC -m64 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_powerpc64le-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_powerpc64le-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n+CFG_GCCISH_DEF_FLAG_powerpc64le-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n+CFG_LLC_FLAGS_powerpc64le-unknown-linux-gnu :=\n+CFG_INSTALL_NAME_powerpc64le-unknown-linux-gnu =\n+CFG_EXE_SUFFIX_powerpc64le-unknown-linux-gnu =\n+CFG_WINDOWSY_powerpc64le-unknown-linux-gnu :=\n+CFG_UNIXY_powerpc64le-unknown-linux-gnu := 1\n+CFG_LDPATH_powerpc64le-unknown-linux-gnu :=\n+CFG_RUN_powerpc64le-unknown-linux-gnu=$(2)\n+CFG_RUN_TARG_powerpc64le-unknown-linux-gnu=$(call CFG_RUN_powerpc64le-unknown-linux-gnu,,$(2))\n+CFG_GNU_TRIPLE_powerpc64le-unknown-linux-gnu := powerpc64le-unknown-linux-gnu"}, {"sha": "103ca463f7a58e2755a50e198070ecdfd8507073", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -38,6 +38,8 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"mips\", \"mips\"),\n     (\"msp430\", \"msp430\"),\n     (\"powerpc\", \"powerpc\"),\n+    (\"powerpc64\", \"powerpc64\"),\n+    (\"powerpc64le\", \"powerpc64le\"),\n     (\"s390x\", \"systemz\"),\n     (\"sparc\", \"sparc\"),\n     (\"x86_64\", \"x86_64\"),"}, {"sha": "b786b59ec986de641ccd7b88d89d7a6ed1ad69b9", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -2044,7 +2044,7 @@ The following configurations must be defined by the implementation:\n   production.  For example, it controls the behavior of the standard library's\n   `debug_assert!` macro.\n * `target_arch = \"...\"` - Target CPU architecture, such as `\"x86\"`, `\"x86_64\"`\n-  `\"mips\"`, `\"powerpc\"`, `\"arm\"`, or `\"aarch64\"`.\n+  `\"mips\"`, `\"powerpc\"`, `\"powerpc64\"`, `\"powerpc64le\"`, `\"arm\"`, or `\"aarch64\"`.\n * `target_endian = \"...\"` - Endianness of the target CPU, either `\"little\"` or\n   `\"big\"`.\n * `target_env = \"..\"` - An option provided by the compiler by default"}, {"sha": "91d229b819df197b84987f7f0b2002cfb8a05c00", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -55,7 +55,9 @@ extern \"C\" {\n const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86\",\n               target_arch = \"x86_64\",\n-              target_arch = \"aarch64\")))]\n+              target_arch = \"aarch64\",\n+              target_arch = \"powerpc64\",\n+              target_arch = \"powerpc64le\")))]\n const MIN_ALIGN: usize = 16;\n \n // MALLOCX_ALIGN(a) macro"}, {"sha": "ffb6999d6e3fef7ef932832ecbb65f219cdcd8bd", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -29,7 +29,9 @@ extern crate libc;\n               target_arch = \"arm\",\n               target_arch = \"mips\",\n               target_arch = \"mipsel\",\n-              target_arch = \"powerpc\")))]\n+              target_arch = \"powerpc\",\n+              target_arch = \"powerpc64\",\n+              target_arch = \"powerpc64le\")))]\n const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86_64\",\n               target_arch = \"aarch64\")))]"}, {"sha": "51149101e0c2dd441586d35a197cb59cd191fa86", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -80,7 +80,7 @@ pub struct Target {\n     /// Vendor name to use for conditional compilation.\n     pub target_vendor: String,\n     /// Architecture to use for ABI considerations. Valid options: \"x86\", \"x86_64\", \"arm\",\n-    /// \"aarch64\", \"mips\", and \"powerpc\". \"mips\" includes \"mipsel\".\n+    /// \"aarch64\", \"mips\", \"powerpc\", \"powerpc64\" and \"powerpc64le\". \"mips\" includes \"mipsel\".\n     pub arch: String,\n     /// Optional settings with defaults.\n     pub options: TargetOptions,\n@@ -413,6 +413,8 @@ impl Target {\n             mips_unknown_linux_gnu,\n             mipsel_unknown_linux_gnu,\n             powerpc_unknown_linux_gnu,\n+            powerpc64_unknown_linux_gnu,\n+            powerpc64le_unknown_linux_gnu,\n             arm_unknown_linux_gnueabi,\n             arm_unknown_linux_gnueabihf,\n             aarch64_unknown_linux_gnu,"}, {"sha": "83970e73b933ce598fa770b36bac5acfc225b1a9", "filename": "src/librustc_back/target/powerpc64_unknown_linux_gnu.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_base::opts();\n+    base.pre_link_args.push(\"-m64\".to_string());\n+\n+    Target {\n+        llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n+        target_endian: \"big\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        arch: \"powerpc64\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "0f5252fdc23a5cec36fefca01e5409f22387d37a", "filename": "src/librustc_back/target/powerpc64le_unknown_linux_gnu.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_base::opts();\n+    base.pre_link_args.push(\"-m64\".to_string());\n+\n+    Target {\n+        llvm_target: \"powerpc64le-unknown-linux-gnu\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        arch: \"powerpc64le\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "4bfbb8b69f0acee7fd17163e36b9c3c7baddd6ad", "filename": "src/librustc_trans/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -19,6 +19,7 @@ use trans::cabi_x86_win64;\n use trans::cabi_arm;\n use trans::cabi_aarch64;\n use trans::cabi_powerpc;\n+use trans::cabi_powerpc64;\n use trans::cabi_mips;\n use trans::type_::Type;\n \n@@ -127,6 +128,7 @@ pub fn compute_abi_info(ccx: &CrateContext,\n         },\n         \"mips\" => cabi_mips::compute_abi_info(ccx, atys, rty, ret_def),\n         \"powerpc\" => cabi_powerpc::compute_abi_info(ccx, atys, rty, ret_def),\n+        \"powerpc64\" | \"powerpc64le\" => cabi_powerpc64::compute_abi_info(ccx, atys, rty, ret_def),\n         a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)\n                               ),\n     }"}, {"sha": "cba73004279d60083a24fd666b9e41f5571d20a3", "filename": "src/librustc_trans/trans/cabi_powerpc64.rs", "status": "added", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc64.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -0,0 +1,259 @@\n+// Copyright 2014-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// FIXME: The PowerPC64 ABI needs to zero or sign extend function\n+// call parameters, but compute_abi_info() is passed LLVM types\n+// which have no sign information.\n+//\n+// Alignment of 128 bit types is not currently handled, this will\n+// need to be fixed when PowerPC vector support is added.\n+\n+use llvm::{Integer, Pointer, Float, Double, Struct, Array, Attribute};\n+use trans::cabi::{FnType, ArgType};\n+use trans::context::CrateContext;\n+use trans::type_::Type;\n+\n+use std::cmp;\n+\n+fn align_up_to(off: usize, a: usize) -> usize {\n+    return (off + a - 1) / a * a;\n+}\n+\n+fn align(off: usize, ty: Type) -> usize {\n+    let a = ty_align(ty);\n+    return align_up_to(off, a);\n+}\n+\n+fn ty_align(ty: Type) -> usize {\n+    match ty.kind() {\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n+        Pointer => 8,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+            if ty.is_packed() {\n+                1\n+            } else {\n+                let str_tys = ty.field_types();\n+                str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t)))\n+            }\n+        }\n+        Array => {\n+            let elt = ty.element_type();\n+            ty_align(elt)\n+        }\n+        _ => panic!(\"ty_align: unhandled type\")\n+    }\n+}\n+\n+fn ty_size(ty: Type) -> usize {\n+    match ty.kind() {\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n+        Pointer => 8,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+            if ty.is_packed() {\n+                let str_tys = ty.field_types();\n+                str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n+            } else {\n+                let str_tys = ty.field_types();\n+                let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n+                align(size, ty)\n+            }\n+        }\n+        Array => {\n+            let len = ty.array_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt);\n+            len * eltsz\n+        }\n+        _ => panic!(\"ty_size: unhandled type\")\n+    }\n+}\n+\n+fn is_homogenous_aggregate_ty(ty: Type) -> Option<(Type, u64)> {\n+    fn check_array(ty: Type) -> Option<(Type, u64)> {\n+        let len = ty.array_length() as u64;\n+        if len == 0 {\n+            return None\n+        }\n+        let elt = ty.element_type();\n+\n+        // if our element is an HFA/HVA, so are we; multiply members by our len\n+        is_homogenous_aggregate_ty(elt).map(|(base_ty, members)| (base_ty, len * members))\n+    }\n+\n+    fn check_struct(ty: Type) -> Option<(Type, u64)> {\n+        let str_tys = ty.field_types();\n+        if str_tys.len() == 0 {\n+            return None\n+        }\n+\n+        let mut prev_base_ty = None;\n+        let mut members = 0;\n+        for opt_homog_agg in str_tys.iter().map(|t| is_homogenous_aggregate_ty(*t)) {\n+            match (prev_base_ty, opt_homog_agg) {\n+                // field isn't itself an HFA, so we aren't either\n+                (_, None) => return None,\n+\n+                // first field - store its type and number of members\n+                (None, Some((field_ty, field_members))) => {\n+                    prev_base_ty = Some(field_ty);\n+                    members = field_members;\n+                },\n+\n+                // 2nd or later field - give up if it's a different type; otherwise incr. members\n+                (Some(prev_ty), Some((field_ty, field_members))) => {\n+                    if prev_ty != field_ty {\n+                        return None;\n+                    }\n+                    members += field_members;\n+                }\n+            }\n+        }\n+\n+        // Because of previous checks, we know prev_base_ty is Some(...) because\n+        //   1. str_tys has at least one element; and\n+        //   2. prev_base_ty was filled in (or we would've returned early)\n+        let (base_ty, members) = (prev_base_ty.unwrap(), members);\n+\n+        // Ensure there is no padding.\n+        if ty_size(ty) == ty_size(base_ty) * (members as usize) {\n+            Some((base_ty, members))\n+        } else {\n+            None\n+        }\n+    }\n+\n+    let homog_agg = match ty.kind() {\n+        Float  => Some((ty, 1)),\n+        Double => Some((ty, 1)),\n+        Array  => check_array(ty),\n+        Struct => check_struct(ty),\n+        _ => None\n+    };\n+\n+    // Ensure we have at most eight uniquely addressable members\n+    homog_agg.and_then(|(base_ty, members)| {\n+        if members > 0 && members <= 8 {\n+            Some((base_ty, members))\n+        } else {\n+            None\n+        }\n+    })\n+}\n+\n+fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n+    if is_reg_ty(ty) {\n+        let attr = if ty == Type::i1(ccx) { Some(Attribute::ZExt) } else { None };\n+        return ArgType::direct(ty, None, None, attr);\n+    }\n+\n+    // The PowerPC64 big endian ABI doesn't return aggregates in registers\n+    if ccx.sess().target.target.arch == \"powerpc64\" {\n+        return ArgType::indirect(ty, Some(Attribute::StructRet))\n+    }\n+\n+    if let Some((base_ty, members)) = is_homogenous_aggregate_ty(ty) {\n+        let llty = Type::array(&base_ty, members);\n+        return ArgType::direct(ty, Some(llty), None, None);\n+    }\n+    let size = ty_size(ty);\n+    if size <= 16 {\n+        let llty = if size <= 1 {\n+            Type::i8(ccx)\n+        } else if size <= 2 {\n+            Type::i16(ccx)\n+        } else if size <= 4 {\n+            Type::i32(ccx)\n+        } else if size <= 8 {\n+            Type::i64(ccx)\n+        } else {\n+            Type::array(&Type::i64(ccx), ((size + 7 ) / 8 ) as u64)\n+        };\n+        return ArgType::direct(ty, Some(llty), None, None);\n+    }\n+\n+    ArgType::indirect(ty, Some(Attribute::StructRet))\n+}\n+\n+fn classify_arg_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n+    if is_reg_ty(ty) {\n+        let attr = if ty == Type::i1(ccx) { Some(Attribute::ZExt) } else { None };\n+        return ArgType::direct(ty, None, None, attr);\n+    }\n+    if let Some((base_ty, members)) = is_homogenous_aggregate_ty(ty) {\n+        let llty = Type::array(&base_ty, members);\n+        return ArgType::direct(ty, Some(llty), None, None);\n+    }\n+\n+    ArgType::direct(\n+        ty,\n+        Some(struct_ty(ccx, ty)),\n+        None,\n+        None\n+    )\n+}\n+\n+fn is_reg_ty(ty: Type) -> bool {\n+    match ty.kind() {\n+        Integer\n+        | Pointer\n+        | Float\n+        | Double => true,\n+        _ => false\n+    }\n+}\n+\n+fn coerce_to_long(ccx: &CrateContext, size: usize) -> Vec<Type> {\n+    let long_ty = Type::i64(ccx);\n+    let mut args = Vec::new();\n+\n+    let mut n = size / 64;\n+    while n > 0 {\n+        args.push(long_ty);\n+        n -= 1;\n+    }\n+\n+    let r = size % 64;\n+    if r > 0 {\n+        args.push(Type::ix(ccx, r as u64));\n+    }\n+\n+    args\n+}\n+\n+fn struct_ty(ccx: &CrateContext, ty: Type) -> Type {\n+    let size = ty_size(ty) * 8;\n+    Type::struct_(ccx, &coerce_to_long(ccx, size), false)\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext,\n+                        atys: &[Type],\n+                        rty: Type,\n+                        ret_def: bool) -> FnType {\n+    let ret_ty = if ret_def {\n+        classify_ret_ty(ccx, rty)\n+    } else {\n+        ArgType::direct(Type::void(ccx), None, None, None)\n+    };\n+\n+    let mut arg_tys = Vec::new();\n+    for &aty in atys {\n+        let ty = classify_arg_ty(ccx, aty);\n+        arg_tys.push(ty);\n+    };\n+\n+    return FnType {\n+        arg_tys: arg_tys,\n+        ret_ty: ret_ty,\n+    };\n+}"}, {"sha": "f474e288efe86b8363269df53ad6a3bee601b5c0", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -31,6 +31,7 @@ mod cabi_aarch64;\n mod cabi_arm;\n mod cabi_mips;\n mod cabi_powerpc;\n+mod cabi_powerpc64;\n mod cabi_x86;\n mod cabi_x86_64;\n mod cabi_x86_win64;"}, {"sha": "6726f5222475550266d5930d4ac57f3875f6b449", "filename": "src/libstd/env.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -615,6 +615,8 @@ pub mod consts {\n     /// - mips\n     /// - mipsel\n     /// - powerpc\n+    /// - powerpc64\n+    /// - powerpc64le\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const ARCH: &'static str = super::arch::ARCH;\n \n@@ -867,6 +869,16 @@ mod arch {\n     pub const ARCH: &'static str = \"powerpc\";\n }\n \n+#[cfg(target_arch = \"powerpc64\")]\n+mod arch {\n+    pub const ARCH: &'static str = \"powerpc64\";\n+}\n+\n+#[cfg(target_arch = \"powerpc64le\")]\n+mod arch {\n+    pub const ARCH: &'static str = \"powerpc64le\";\n+}\n+\n #[cfg(target_arch = \"le32\")]\n mod arch {\n     pub const ARCH: &'static str = \"le32\";"}, {"sha": "953d0917141d10337b9b262009577691d889d31f", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -205,7 +205,8 @@ mod arch {\n     }\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86_64\", target_arch = \"powerpc64\",\n+          target_arch = \"powerpc64le\"))]\n mod arch {\n     use super::{dev_t, mode_t};\n     use os::raw::{c_long, c_int};"}, {"sha": "62080fee48ec1178e62e0acecd44199ca47918b3", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -14,11 +14,17 @@\n \n #[cfg(any(target_os = \"android\",\n           all(target_os = \"linux\", any(target_arch = \"aarch64\",\n-                                       target_arch = \"arm\"))))]\n+                                       target_arch = \"arm\",\n+                                       target_arch = \"powerpc\",\n+                                       target_arch = \"powerpc64\",\n+                                       target_arch = \"powerpc64le\"))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n #[cfg(not(any(target_os = \"android\",\n               all(target_os = \"linux\", any(target_arch = \"aarch64\",\n-                                           target_arch = \"arm\")))))]\n+                                           target_arch = \"arm\",\n+                                           target_arch = \"powerpc\",\n+                                           target_arch = \"powerpc64\",\n+                                           target_arch = \"powerpc64le\")))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = i8;\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_schar = i8;\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uchar = u8;"}, {"sha": "619f100f1a137ad9092498d19a68306915742c04", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -30,14 +30,19 @@ mod imp {\n                   target_arch = \"x86\",\n                   target_arch = \"arm\",\n                   target_arch = \"aarch64\",\n-                  target_arch = \"powerpc\")))]\n+                  target_arch = \"powerpc\",\n+                  target_arch = \"powerpc64\",\n+                  target_arch = \"powerpc64le\")))]\n     fn getrandom(buf: &mut [u8]) -> libc::c_long {\n         #[cfg(target_arch = \"x86_64\")]\n         const NR_GETRANDOM: libc::c_long = 318;\n         #[cfg(target_arch = \"x86\")]\n         const NR_GETRANDOM: libc::c_long = 355;\n-        #[cfg(any(target_arch = \"arm\", target_arch = \"powerpc\"))]\n+        #[cfg(target_arch = \"arm\")]\n         const NR_GETRANDOM: libc::c_long = 384;\n+        #[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\",\n+                  target_arch = \"powerpc64le\"))]\n+        const NR_GETRANDOM: libc::c_long = 359;\n         #[cfg(target_arch = \"aarch64\")]\n         const NR_GETRANDOM: libc::c_long = 278;\n \n@@ -51,7 +56,9 @@ mod imp {\n                       target_arch = \"x86\",\n                       target_arch = \"arm\",\n                       target_arch = \"aarch64\",\n-                      target_arch = \"powerpc\"))))]\n+                      target_arch = \"powerpc\",\n+                      target_arch = \"powerpc64\",\n+                      target_arch = \"powerpc64le\"))))]\n     fn getrandom(_buf: &mut [u8]) -> libc::c_long { -1 }\n \n     fn getrandom_fill_bytes(v: &mut [u8]) {\n@@ -88,7 +95,9 @@ mod imp {\n                   target_arch = \"x86\",\n                   target_arch = \"arm\",\n                   target_arch = \"aarch64\",\n-                  target_arch = \"powerpc\")))]\n+                  target_arch = \"powerpc\",\n+                  target_arch = \"powerpc64\",\n+                  target_arch = \"powerpc64le\")))]\n     fn is_getrandom_available() -> bool {\n         use sync::atomic::{AtomicBool, Ordering};\n         use sync::Once;\n@@ -116,7 +125,9 @@ mod imp {\n                       target_arch = \"x86\",\n                       target_arch = \"arm\",\n                       target_arch = \"aarch64\",\n-                      target_arch = \"powerpc\"))))]\n+                      target_arch = \"powerpc\",\n+                      target_arch = \"powerpc64\",\n+                      target_arch = \"powerpc64le\"))))]\n     fn is_getrandom_available() -> bool { false }\n \n     /// A random number generator that retrieves randomness straight from"}, {"sha": "77d1eed96231df0626e517e679c4657e59ab03c6", "filename": "src/libstd/sys/common/libunwind.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -83,7 +83,8 @@ pub const unwinder_private_data_size: usize = 2;\n #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n pub const unwinder_private_data_size: usize = 2;\n \n-#[cfg(target_arch = \"powerpc\")]\n+#[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\",\n+          target_arch = \"powerpc64le\"))]\n pub const unwinder_private_data_size: usize = 2;\n \n #[repr(C)]"}, {"sha": "55a4226c6632da8685dd5c58fd556c6469e79834", "filename": "src/test/auxiliary/extern_calling_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -24,7 +24,7 @@ pub extern \"win64\" fn foo(a: isize, b: isize, c: isize, d: isize) {\n }\n \n #[inline(never)]\n-#[cfg(any(target_arch = \"x86\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n+#[cfg(not(target_arch = \"x86_64\"))]\n pub extern fn foo(a: isize, b: isize, c: isize, d: isize) {\n     assert_eq!(a, 1);\n     assert_eq!(b, 2);"}, {"sha": "bb4b9cfecf7b62b609742d245f0a3d16d66dd854", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n+#[cfg(any(target_pointer_width = \"32\"))]\n fn target() {\n     assert_eq!(-1000isize as usize >> 3_usize, 536870787_usize);\n }\n \n-#[cfg(any(target_arch = \"x86_64\", target_arch = \"aarch64\"))]\n+#[cfg(any(target_pointer_width = \"64\"))]\n fn target() {\n     assert_eq!(-1000isize as usize >> 3_usize, 2305843009213693827_usize);\n }"}, {"sha": "4e4c98e50bca167c89217ec9697e82329a7a8220", "filename": "src/test/run-pass/conditional-compile-arch.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -21,3 +21,9 @@ pub fn main() { }\n \n #[cfg(target_arch = \"aarch64\")]\n pub fn main() { }\n+\n+#[cfg(target_arch = \"powerpc64\")]\n+pub fn main() { }\n+\n+#[cfg(target_arch = \"powerpc64le\")]\n+pub fn main() { }"}, {"sha": "a4720d48213ce43f527d0a369631d4d0b11d217a", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -35,7 +35,7 @@ mod m {\n     }\n \n     #[main]\n-    #[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n+    #[cfg(not(target_arch = \"x86\"))]\n     pub fn main() {\n         unsafe {\n             assert_eq!(::rusti::pref_align_of::<u64>(), 8);"}, {"sha": "5587f68bd18544465c2aa5c8fb8dd7929ed233f4", "filename": "src/test/run-pass/issue-2895.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Frun-pass%2Fissue-2895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Frun-pass%2Fissue-2895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2895.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -23,13 +23,13 @@ impl Drop for Kitty {\n     fn drop(&mut self) {}\n }\n \n-#[cfg(any(target_arch = \"x86_64\", target_arch=\"aarch64\"))]\n+#[cfg(target_pointer_width = \"64\")]\n pub fn main() {\n     assert_eq!(mem::size_of::<Cat>(), 8 as usize);\n     assert_eq!(mem::size_of::<Kitty>(), 16 as usize);\n }\n \n-#[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n+#[cfg(target_pointer_width = \"32\")]\n pub fn main() {\n     assert_eq!(mem::size_of::<Cat>(), 4 as usize);\n     assert_eq!(mem::size_of::<Kitty>(), 8 as usize);"}, {"sha": "4a115c737da3a5752e82873a5c473475551dc274", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -35,14 +35,6 @@ struct Outer {\n     t: Inner\n }\n \n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n-mod m {\n-    pub fn align() -> usize { 4 }\n-    pub fn size() -> usize { 8 }\n-}\n-\n-#[cfg(target_arch = \"x86_64\")]\n mod m {\n     pub fn align() -> usize { 4 }\n     pub fn size() -> usize { 8 }"}, {"sha": "25cd77845ea03bf9ef8389ce4265614b549ecad6", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -49,7 +49,7 @@ mod m {\n         pub fn size() -> usize { 12 }\n     }\n \n-    #[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n+    #[cfg(not(target_arch = \"x86\"))]\n     pub mod m {\n         pub fn align() -> usize { 8 }\n         pub fn size() -> usize { 16 }"}, {"sha": "6f23263790cb777ff0c0f8e4c56122f85598a467", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208d2500394ce51010641919f3f79a5ce88dba0/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=7208d2500394ce51010641919f3f79a5ce88dba0", "patch": "@@ -43,7 +43,7 @@ fn test1() {\n     }\n }\n \n-#[cfg(any(target_arch = \"x86_64\", target_arch = \"aarch64\"))]\n+#[cfg(target_pointer_width = \"64\")]\n fn test2() {\n     unsafe {\n         let f = Floats { a: 1.234567890e-15_f64,\n@@ -59,7 +59,7 @@ fn test2() {\n     }\n }\n \n-#[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n+#[cfg(target_pointer_width = \"32\")]\n fn test2() {\n }\n "}]}