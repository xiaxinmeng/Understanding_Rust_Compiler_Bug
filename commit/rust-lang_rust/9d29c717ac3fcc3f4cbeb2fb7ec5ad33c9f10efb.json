{"sha": "9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMjljNzE3YWMzZmNjM2Y0Y2JlYjJmYjdlYzVhZDMzYzlmMTBlZmI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-05T08:27:15Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-05T08:27:15Z"}, "message": "Merge #192\n\n192: grammar: for predicates in where r=matklad a=matklad\n\ncloses #191\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ec8717d66869bcc12b3e70a2e71fb775db245d6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec8717d66869bcc12b3e70a2e71fb775db245d6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb", "html_url": "https://github.com/rust-lang/rust/commit/9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "576b9a0727ebbf00521bc1131cda808145696d06", "url": "https://api.github.com/repos/rust-lang/rust/commits/576b9a0727ebbf00521bc1131cda808145696d06", "html_url": "https://github.com/rust-lang/rust/commit/576b9a0727ebbf00521bc1131cda808145696d06"}, {"sha": "9010cb98399dad6be845f9a143a466ca51b5798f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9010cb98399dad6be845f9a143a466ca51b5798f", "html_url": "https://github.com/rust-lang/rust/commit/9010cb98399dad6be845f9a143a466ca51b5798f"}], "stats": {"total": 164, "additions": 129, "deletions": 35}, "files": [{"sha": "95c437983330cc11a568a1bbd9b920b30c0d7c08", "filename": "crates/ra_syntax/src/grammar/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fmod.rs?ref=9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb", "patch": "@@ -21,6 +21,11 @@\n //! After adding a new inline-test, run `cargo collect-tests` to extract\n //! it as a standalone text-fixture into `tests/data/parser/inline`, and\n //! run `cargo test` once to create the \"gold\" value.\n+//!\n+//! Coding convention: rules like `where_clause` always produce either a\n+//! node or an error, rules like `opt_where_clause` may produce nothing.\n+//! Non-opt rules typically start with `assert!(p.at(FIRST_TOKEN))`, the\n+//! caller is responsible for branching on the first token.\n mod attributes;\n mod expressions;\n mod items;"}, {"sha": "735c728e5cccb0e6df24944737c4ac57736257a8", "filename": "crates/ra_syntax/src/grammar/type_params.rs", "status": "modified", "additions": 62, "deletions": 35, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb", "patch": "@@ -4,6 +4,11 @@ pub(super) fn opt_type_param_list(p: &mut Parser) {\n     if !p.at(L_ANGLE) {\n         return;\n     }\n+    type_param_list(p);\n+}\n+\n+fn type_param_list(p: &mut Parser) {\n+    assert!(p.at(L_ANGLE));\n     let m = p.start();\n     p.bump();\n \n@@ -19,32 +24,32 @@ pub(super) fn opt_type_param_list(p: &mut Parser) {\n     }\n     p.expect(R_ANGLE);\n     m.complete(p, TYPE_PARAM_LIST);\n+}\n \n-    fn lifetime_param(p: &mut Parser) {\n-        assert!(p.at(LIFETIME));\n-        let m = p.start();\n-        p.bump();\n-        if p.at(COLON) {\n-            lifetime_bounds(p);\n-        }\n-        m.complete(p, LIFETIME_PARAM);\n+fn lifetime_param(p: &mut Parser) {\n+    assert!(p.at(LIFETIME));\n+    let m = p.start();\n+    p.bump();\n+    if p.at(COLON) {\n+        lifetime_bounds(p);\n     }\n+    m.complete(p, LIFETIME_PARAM);\n+}\n \n-    fn type_param(p: &mut Parser) {\n-        assert!(p.at(IDENT));\n-        let m = p.start();\n-        name(p);\n-        if p.at(COLON) {\n-            bounds(p);\n-        }\n-        // test type_param_default\n-        // struct S<T = i32>;\n-        if p.at(EQ) {\n-            p.bump();\n-            types::type_(p)\n-        }\n-        m.complete(p, TYPE_PARAM);\n+fn type_param(p: &mut Parser) {\n+    assert!(p.at(IDENT));\n+    let m = p.start();\n+    name(p);\n+    if p.at(COLON) {\n+        bounds(p);\n+    }\n+    // test type_param_default\n+    // struct S<T = i32>;\n+    if p.at(EQ) {\n+        p.bump();\n+        types::type_(p)\n     }\n+    m.complete(p, TYPE_PARAM);\n }\n \n // test type_param_bounds\n@@ -99,7 +104,7 @@ pub(super) fn opt_where_clause(p: &mut Parser) {\n     let m = p.start();\n     p.bump();\n     loop {\n-        if !(paths::is_path_start(p) || p.current() == LIFETIME) {\n+        if !(paths::is_path_start(p) || p.current() == LIFETIME || p.current() == FOR_KW) {\n             break;\n         }\n         where_predicate(p);\n@@ -112,19 +117,41 @@ pub(super) fn opt_where_clause(p: &mut Parser) {\n \n fn where_predicate(p: &mut Parser) {\n     let m = p.start();\n-    if p.at(LIFETIME) {\n-        p.eat(LIFETIME);\n-        if p.at(COLON) {\n-            lifetime_bounds(p)\n-        } else {\n-            p.error(\"expected colon\")\n+    match p.current() {\n+        LIFETIME => {\n+            p.bump();\n+            if p.at(COLON) {\n+                lifetime_bounds(p);\n+            } else {\n+                p.error(\"expected colon\");\n+            }\n+        }\n+        // test where_pred_for\n+        // fn test<F>()\n+        // where\n+        //    for<'a> F: Fn(&'a str)\n+        // { }\n+        FOR_KW => {\n+            p.bump();\n+            if p.at(L_ANGLE) {\n+                type_param_list(p);\n+                types::path_type(p);\n+                if p.at(COLON) {\n+                    bounds(p);\n+                } else {\n+                    p.error(\"expected colon\");\n+                }\n+            } else {\n+                p.error(\"expected `<`\");\n+            }\n         }\n-    } else {\n-        types::path_type(p);\n-        if p.at(COLON) {\n-            bounds(p);\n-        } else {\n-            p.error(\"expected colon\")\n+        _ => {\n+            types::path_type(p);\n+            if p.at(COLON) {\n+                bounds(p);\n+            } else {\n+                p.error(\"expected colon\");\n+            }\n         }\n     }\n     m.complete(p, WHERE_PRED);"}, {"sha": "b448c6178087475b3411d1cc8df39b898b52316c", "filename": "crates/ra_syntax/tests/data/parser/inline/0113_where_pred_for.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0113_where_pred_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0113_where_pred_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0113_where_pred_for.rs?ref=9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb", "patch": "@@ -0,0 +1,4 @@\n+fn test<F>()\n+where\n+   for<'a> F: Fn(&'a str)\n+{ }"}, {"sha": "08aacc77ab9fbb2bdaf8d01039e5ded03faf94f1", "filename": "crates/ra_syntax/tests/data/parser/inline/0113_where_pred_for.txt", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0113_where_pred_for.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0113_where_pred_for.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0113_where_pred_for.txt?ref=9d29c717ac3fcc3f4cbeb2fb7ec5ad33c9f10efb", "patch": "@@ -0,0 +1,58 @@\n+ROOT@[0; 49)\n+  FN_DEF@[0; 48)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"test\"\n+    TYPE_PARAM_LIST@[7; 10)\n+      L_ANGLE@[7; 8)\n+      TYPE_PARAM@[8; 9)\n+        NAME@[8; 9)\n+          IDENT@[8; 9) \"F\"\n+      R_ANGLE@[9; 10)\n+    PARAM_LIST@[10; 12)\n+      L_PAREN@[10; 11)\n+      R_PAREN@[11; 12)\n+    WHITESPACE@[12; 13)\n+    WHERE_CLAUSE@[13; 44)\n+      WHERE_KW@[13; 18)\n+      WHITESPACE@[18; 22)\n+      WHERE_PRED@[22; 44)\n+        FOR_KW@[22; 25)\n+        TYPE_PARAM_LIST@[25; 29)\n+          L_ANGLE@[25; 26)\n+          LIFETIME_PARAM@[26; 28)\n+            LIFETIME@[26; 28) \"'a\"\n+          R_ANGLE@[28; 29)\n+        WHITESPACE@[29; 30)\n+        PATH_TYPE@[30; 31)\n+          PATH@[30; 31)\n+            PATH_SEGMENT@[30; 31)\n+              NAME_REF@[30; 31)\n+                IDENT@[30; 31) \"F\"\n+        COLON@[31; 32)\n+        WHITESPACE@[32; 33)\n+        PATH_TYPE@[33; 44)\n+          PATH@[33; 44)\n+            PATH_SEGMENT@[33; 44)\n+              NAME_REF@[33; 35)\n+                IDENT@[33; 35) \"Fn\"\n+              PARAM_LIST@[35; 44)\n+                L_PAREN@[35; 36)\n+                PARAM@[36; 43)\n+                  REFERENCE_TYPE@[36; 43)\n+                    AMP@[36; 37)\n+                    LIFETIME@[37; 39) \"'a\"\n+                    WHITESPACE@[39; 40)\n+                    PATH_TYPE@[40; 43)\n+                      PATH@[40; 43)\n+                        PATH_SEGMENT@[40; 43)\n+                          NAME_REF@[40; 43)\n+                            IDENT@[40; 43) \"str\"\n+                R_PAREN@[43; 44)\n+    WHITESPACE@[44; 45)\n+    BLOCK@[45; 48)\n+      L_CURLY@[45; 46)\n+      WHITESPACE@[46; 47)\n+      R_CURLY@[47; 48)\n+  WHITESPACE@[48; 49)"}]}