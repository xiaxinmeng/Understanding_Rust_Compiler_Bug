{"sha": "73024e4b858e6c2083f40e8c987acedc22e9672b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMDI0ZTRiODU4ZTZjMjA4M2Y0MGU4Yzk4N2FjZWRjMjJlOTY3MmI=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-01-27T11:12:59Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-02-01T23:24:44Z"}, "message": "impl Clone for CString\n\nClone tests", "tree": {"sha": "f8086d7f675a7f8936995c27a2f1d0f80e747d95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8086d7f675a7f8936995c27a2f1d0f80e747d95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73024e4b858e6c2083f40e8c987acedc22e9672b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73024e4b858e6c2083f40e8c987acedc22e9672b", "html_url": "https://github.com/rust-lang/rust/commit/73024e4b858e6c2083f40e8c987acedc22e9672b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73024e4b858e6c2083f40e8c987acedc22e9672b/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bcd951749b67402ccaa31f1bb0349656f880fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bcd951749b67402ccaa31f1bb0349656f880fe2", "html_url": "https://github.com/rust-lang/rust/commit/2bcd951749b67402ccaa31f1bb0349656f880fe2"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "4940358ddf963d02a0d2084b6bd51a34103848a5", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/73024e4b858e6c2083f40e8c987acedc22e9672b/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73024e4b858e6c2083f40e8c987acedc22e9672b/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=73024e4b858e6c2083f40e8c987acedc22e9672b", "patch": "@@ -68,6 +68,7 @@ use iter::{Iterator, range};\n use libc;\n use kinds::marker;\n use ops::Drop;\n+use clone::Clone;\n use option::{Option, Some, None};\n use ptr::RawPtr;\n use ptr;\n@@ -76,6 +77,7 @@ use str;\n use vec::{CloneableVector, ImmutableVector, MutableVector};\n use vec;\n use unstable::intrinsics;\n+use rt::global_heap::malloc_raw;\n \n /// Resolution options for the `null_byte` condition\n pub enum NullByteResolution {\n@@ -99,6 +101,21 @@ pub struct CString {\n     priv owns_buffer_: bool,\n }\n \n+impl Clone for CString {\n+    /// Clone this CString into a new, uniquely owned CString. For safety\n+    /// reasons, this is always a deep clone, rather than the usual shallow\n+    /// clone.\n+    fn clone(&self) -> CString {\n+        if self.buf.is_null() {\n+            CString { buf: self.buf, owns_buffer_: self.owns_buffer_ }\n+        } else {\n+            let buf = unsafe { malloc_raw(self.len()) } as *mut libc::c_char;\n+            unsafe { ptr::copy_nonoverlapping_memory(buf, self.buf, self.len()); }\n+            CString { buf: buf as *libc::c_char, owns_buffer_: true }\n+        }\n+    }\n+}\n+\n impl CString {\n     /// Create a C String from a pointer.\n     pub unsafe fn new(buf: *libc::c_char, owns_buffer: bool) -> CString {\n@@ -287,10 +304,7 @@ impl<'a> ToCStr for &'a [u8] {\n \n     unsafe fn to_c_str_unchecked(&self) -> CString {\n         let self_len = self.len();\n-        let buf = libc::malloc(self_len as libc::size_t + 1) as *mut u8;\n-        if buf.is_null() {\n-            fail!(\"failed to allocate memory!\");\n-        }\n+        let buf = malloc_raw(self_len + 1);\n \n         ptr::copy_memory(buf, self.as_ptr(), self_len);\n         *ptr::mut_offset(buf, self_len as int) = 0;\n@@ -598,6 +612,36 @@ mod tests {\n         let c_str = unsafe { CString::new(ptr::null(), false) };\n         c_str.iter();\n     }\n+\n+    #[test]\n+    fn test_clone() {\n+        let c_str = \"hello\".to_c_str();\n+        assert!(c_str == c_str.clone());\n+    }\n+\n+    #[test]\n+    fn test_clone_noleak() {\n+        fn foo(f: |c: &CString|) {\n+            let s = ~\"test\";\n+            let c = s.to_c_str();\n+            // give the closure a non-owned CString\n+            let mut c_ = c.with_ref(|c| unsafe { CString::new(c, false) } );\n+            f(&c_);\n+            // muck with the buffer for later printing\n+            c_.with_mut_ref(|c| unsafe { *c = 'X' as libc::c_char } );\n+        }\n+\n+        let mut c_: Option<CString> = None;\n+        foo(|c| {\n+            c_ = Some(c.clone());\n+            c.clone();\n+            // force a copy, reading the memory\n+            c.as_bytes().to_owned();\n+        });\n+        let c_ = c_.unwrap();\n+        // force a copy, reading the memory\n+        c_.as_bytes().to_owned();\n+    }\n }\n \n #[cfg(test)]"}]}