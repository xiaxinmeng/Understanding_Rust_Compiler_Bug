{"sha": "fec4818fdb40c82679f57fa7f26fcddc1a874c13", "node_id": "C_kwDOAAsO6NoAKGZlYzQ4MThmZGI0MGM4MjY3OWY1N2ZhN2YyNmZjZGRjMWE4NzRjMTM", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-03-10T01:05:16Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-05-06T15:50:53Z"}, "message": "Use statx's 64-bit times on 32-bit linux-gnu", "tree": {"sha": "4c06a6e5b385e327257f7f7fe8f8746f422622d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c06a6e5b385e327257f7f7fe8f8746f422622d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fec4818fdb40c82679f57fa7f26fcddc1a874c13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fec4818fdb40c82679f57fa7f26fcddc1a874c13", "html_url": "https://github.com/rust-lang/rust/commit/fec4818fdb40c82679f57fa7f26fcddc1a874c13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fec4818fdb40c82679f57fa7f26fcddc1a874c13/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b49a0cc5bea5845dc89c1598a32d7f9fea985a", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b49a0cc5bea5845dc89c1598a32d7f9fea985a", "html_url": "https://github.com/rust-lang/rust/commit/97b49a0cc5bea5845dc89c1598a32d7f9fea985a"}], "stats": {"total": 138, "additions": 97, "deletions": 41}, "files": [{"sha": "23267c44685b00df3dc8887262e36a4bbb6d414a", "filename": "library/std/src/os/linux/fs.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fec4818fdb40c82679f57fa7f26fcddc1a874c13/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec4818fdb40c82679f57fa7f26fcddc1a874c13/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs?ref=fec4818fdb40c82679f57fa7f26fcddc1a874c13", "patch": "@@ -356,19 +356,34 @@ impl MetadataExt for Metadata {\n         self.as_inner().as_inner().st_size as u64\n     }\n     fn st_atime(&self) -> i64 {\n-        self.as_inner().as_inner().st_atime as i64\n+        let file_attr = self.as_inner();\n+        #[cfg(all(target_env = \"gnu\", target_pointer_width = \"32\"))]\n+        if let Some(atime) = file_attr.stx_atime() {\n+            return atime.tv_sec;\n+        }\n+        file_attr.as_inner().st_atime as i64\n     }\n     fn st_atime_nsec(&self) -> i64 {\n         self.as_inner().as_inner().st_atime_nsec as i64\n     }\n     fn st_mtime(&self) -> i64 {\n-        self.as_inner().as_inner().st_mtime as i64\n+        let file_attr = self.as_inner();\n+        #[cfg(all(target_env = \"gnu\", target_pointer_width = \"32\"))]\n+        if let Some(mtime) = file_attr.stx_mtime() {\n+            return mtime.tv_sec;\n+        }\n+        file_attr.as_inner().st_mtime as i64\n     }\n     fn st_mtime_nsec(&self) -> i64 {\n         self.as_inner().as_inner().st_mtime_nsec as i64\n     }\n     fn st_ctime(&self) -> i64 {\n-        self.as_inner().as_inner().st_ctime as i64\n+        let file_attr = self.as_inner();\n+        #[cfg(all(target_env = \"gnu\", target_pointer_width = \"32\"))]\n+        if let Some(ctime) = file_attr.stx_ctime() {\n+            return ctime.tv_sec;\n+        }\n+        file_attr.as_inner().st_ctime as i64\n     }\n     fn st_ctime_nsec(&self) -> i64 {\n         self.as_inner().as_inner().st_ctime_nsec as i64"}, {"sha": "61fb2814018e0f7817784384b0dd149d90ddda56", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 71, "deletions": 38, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/fec4818fdb40c82679f57fa7f26fcddc1a874c13/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec4818fdb40c82679f57fa7f26fcddc1a874c13/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=fec4818fdb40c82679f57fa7f26fcddc1a874c13", "patch": "@@ -113,10 +113,19 @@ cfg_has_statx! {{\n         // This is needed to check if btime is supported by the filesystem.\n         stx_mask: u32,\n         stx_btime: libc::statx_timestamp,\n+        // With statx, we can overcome 32-bit `time_t` too.\n+        #[cfg(target_pointer_width = \"32\")]\n+        stx_atime: libc::statx_timestamp,\n+        #[cfg(target_pointer_width = \"32\")]\n+        stx_ctime: libc::statx_timestamp,\n+        #[cfg(target_pointer_width = \"32\")]\n+        stx_mtime: libc::statx_timestamp,\n+\n     }\n \n-    // We prefer `statx` on Linux if available, which contains file creation time.\n-    // Default `stat64` contains no creation time.\n+    // We prefer `statx` on Linux if available, which contains file creation time,\n+    // as well as 64-bit timestamps of all kinds.\n+    // Default `stat64` contains no creation time and may have 32-bit `time_t`.\n     unsafe fn try_statx(\n         fd: c_int,\n         path: *const c_char,\n@@ -192,6 +201,13 @@ cfg_has_statx! {{\n         let extra = StatxExtraFields {\n             stx_mask: buf.stx_mask,\n             stx_btime: buf.stx_btime,\n+            // Store full times to avoid 32-bit `time_t` truncation.\n+            #[cfg(target_pointer_width = \"32\")]\n+            stx_atime: buf.stx_atime,\n+            #[cfg(target_pointer_width = \"32\")]\n+            stx_ctime: buf.stx_ctime,\n+            #[cfg(target_pointer_width = \"32\")]\n+            stx_mtime: buf.stx_mtime,\n         };\n \n         Some(Ok(FileAttr { stat, statx_extra_fields: Some(extra) }))\n@@ -310,6 +326,36 @@ cfg_has_statx! {{\n         fn from_stat64(stat: stat64) -> Self {\n             Self { stat, statx_extra_fields: None }\n         }\n+\n+        #[cfg(target_pointer_width = \"32\")]\n+        pub fn stx_mtime(&self) -> Option<&libc::statx_timestamp> {\n+            if let Some(ext) = &self.statx_extra_fields {\n+                if (ext.stx_mask & libc::STATX_MTIME) != 0 {\n+                    return Some(&ext.stx_mtime);\n+                }\n+            }\n+            None\n+        }\n+\n+        #[cfg(target_pointer_width = \"32\")]\n+        pub fn stx_atime(&self) -> Option<&libc::statx_timestamp> {\n+            if let Some(ext) = &self.statx_extra_fields {\n+                if (ext.stx_mask & libc::STATX_ATIME) != 0 {\n+                    return Some(&ext.stx_atime);\n+                }\n+            }\n+            None\n+        }\n+\n+        #[cfg(target_pointer_width = \"32\")]\n+        pub fn stx_ctime(&self) -> Option<&libc::statx_timestamp> {\n+            if let Some(ext) = &self.statx_extra_fields {\n+                if (ext.stx_mask & libc::STATX_CTIME) != 0 {\n+                    return Some(&ext.stx_ctime);\n+                }\n+            }\n+            None\n+        }\n     }\n } else {\n     impl FileAttr {\n@@ -335,59 +381,52 @@ impl FileAttr {\n #[cfg(target_os = \"netbsd\")]\n impl FileAttr {\n     pub fn modified(&self) -> io::Result<SystemTime> {\n-        Ok(SystemTime::from(libc::timespec {\n-            tv_sec: self.stat.st_mtime as libc::time_t,\n-            tv_nsec: self.stat.st_mtimensec as libc::c_long,\n-        }))\n+        Ok(SystemTime::new(self.stat.st_mtime as i64, self.stat.st_mtimensec as i64))\n     }\n \n     pub fn accessed(&self) -> io::Result<SystemTime> {\n-        Ok(SystemTime::from(libc::timespec {\n-            tv_sec: self.stat.st_atime as libc::time_t,\n-            tv_nsec: self.stat.st_atimensec as libc::c_long,\n-        }))\n+        Ok(SystemTime::new(self.stat.st_atime as i64, self.stat.st_atimensec as i64))\n     }\n \n     pub fn created(&self) -> io::Result<SystemTime> {\n-        Ok(SystemTime::from(libc::timespec {\n-            tv_sec: self.stat.st_birthtime as libc::time_t,\n-            tv_nsec: self.stat.st_birthtimensec as libc::c_long,\n-        }))\n+        Ok(SystemTime::new(self.stat.st_birthtime as i64, self.stat.st_birthtimensec as i64))\n     }\n }\n \n #[cfg(not(target_os = \"netbsd\"))]\n impl FileAttr {\n     #[cfg(all(not(target_os = \"vxworks\"), not(target_os = \"espidf\")))]\n     pub fn modified(&self) -> io::Result<SystemTime> {\n-        Ok(SystemTime::from(libc::timespec {\n-            tv_sec: self.stat.st_mtime as libc::time_t,\n-            tv_nsec: self.stat.st_mtime_nsec as _,\n-        }))\n+        #[cfg(target_pointer_width = \"32\")]\n+        cfg_has_statx! {\n+            if let Some(mtime) = self.stx_mtime() {\n+                return Ok(SystemTime::new(mtime.tv_sec, mtime.tv_nsec as i64));\n+            }\n+        }\n+\n+        Ok(SystemTime::new(self.stat.st_mtime as i64, self.stat.st_mtime_nsec as i64))\n     }\n \n     #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))]\n     pub fn modified(&self) -> io::Result<SystemTime> {\n-        Ok(SystemTime::from(libc::timespec {\n-            tv_sec: self.stat.st_mtime as libc::time_t,\n-            tv_nsec: 0,\n-        }))\n+        Ok(SystemTime::new(self.stat.st_mtime as i64, 0))\n     }\n \n     #[cfg(all(not(target_os = \"vxworks\"), not(target_os = \"espidf\")))]\n     pub fn accessed(&self) -> io::Result<SystemTime> {\n-        Ok(SystemTime::from(libc::timespec {\n-            tv_sec: self.stat.st_atime as libc::time_t,\n-            tv_nsec: self.stat.st_atime_nsec as _,\n-        }))\n+        #[cfg(target_pointer_width = \"32\")]\n+        cfg_has_statx! {\n+            if let Some(atime) = self.stx_atime() {\n+                return Ok(SystemTime::new(atime.tv_sec, atime.tv_nsec as i64));\n+            }\n+        }\n+\n+        Ok(SystemTime::new(self.stat.st_atime as i64, self.stat.st_atime_nsec as i64))\n     }\n \n     #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))]\n     pub fn accessed(&self) -> io::Result<SystemTime> {\n-        Ok(SystemTime::from(libc::timespec {\n-            tv_sec: self.stat.st_atime as libc::time_t,\n-            tv_nsec: 0,\n-        }))\n+        Ok(SystemTime::new(self.stat.st_atime as i64, 0))\n     }\n \n     #[cfg(any(\n@@ -397,10 +436,7 @@ impl FileAttr {\n         target_os = \"ios\"\n     ))]\n     pub fn created(&self) -> io::Result<SystemTime> {\n-        Ok(SystemTime::from(libc::timespec {\n-            tv_sec: self.stat.st_birthtime as libc::time_t,\n-            tv_nsec: self.stat.st_birthtime_nsec as libc::c_long,\n-        }))\n+        Ok(SystemTime::new(self.stat.st_birthtime as i64, self.stat.st_birthtime_nsec as i64))\n     }\n \n     #[cfg(not(any(\n@@ -413,10 +449,7 @@ impl FileAttr {\n         cfg_has_statx! {\n             if let Some(ext) = &self.statx_extra_fields {\n                 return if (ext.stx_mask & libc::STATX_BTIME) != 0 {\n-                    Ok(SystemTime::from(libc::timespec {\n-                        tv_sec: ext.stx_btime.tv_sec as libc::time_t,\n-                        tv_nsec: ext.stx_btime.tv_nsec as _,\n-                    }))\n+                    Ok(SystemTime::new(ext.stx_btime.tv_sec, ext.stx_btime.tv_nsec as i64))\n                 } else {\n                     Err(io::const_io_error!(\n                         io::ErrorKind::Uncategorized,"}, {"sha": "5000e7d890b699cf8cde2b0e374b2ec3bd3d57d3", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fec4818fdb40c82679f57fa7f26fcddc1a874c13/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec4818fdb40c82679f57fa7f26fcddc1a874c13/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=fec4818fdb40c82679f57fa7f26fcddc1a874c13", "patch": "@@ -144,6 +144,10 @@ mod inner {\n     }\n \n     impl SystemTime {\n+        pub fn new(tv_sec: i64, tv_nsec: i64) -> SystemTime {\n+            SystemTime { t: Timespec::new(tv_sec, tv_nsec) }\n+        }\n+\n         pub fn now() -> SystemTime {\n             use crate::ptr;\n \n@@ -294,6 +298,10 @@ mod inner {\n     }\n \n     impl SystemTime {\n+        pub fn new(tv_sec: i64, tv_nsec: i64) -> SystemTime {\n+            SystemTime { t: Timespec::new(tv_sec, tv_nsec) }\n+        }\n+\n         pub fn now() -> SystemTime {\n             SystemTime { t: Timespec::now(libc::CLOCK_REALTIME) }\n         }"}]}