{"sha": "ad8deba23a90945c7d84c87cd7da33f7170bf4c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkOGRlYmEyM2E5MDk0NWM3ZDg0Yzg3Y2Q3ZGEzM2Y3MTcwYmY0YzM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-17T10:31:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-22T11:08:38Z"}, "message": "fix formatting nits", "tree": {"sha": "1365876860387589406a97624deb26089cadd02c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1365876860387589406a97624deb26089cadd02c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad8deba23a90945c7d84c87cd7da33f7170bf4c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8deba23a90945c7d84c87cd7da33f7170bf4c3", "html_url": "https://github.com/rust-lang/rust/commit/ad8deba23a90945c7d84c87cd7da33f7170bf4c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad8deba23a90945c7d84c87cd7da33f7170bf4c3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50999336145e85c54a14e30e90657d1d47969498", "url": "https://api.github.com/repos/rust-lang/rust/commits/50999336145e85c54a14e30e90657d1d47969498", "html_url": "https://github.com/rust-lang/rust/commit/50999336145e85c54a14e30e90657d1d47969498"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "169a568969425b433f6d5364d17e08bd65100948", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad8deba23a90945c7d84c87cd7da33f7170bf4c3/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8deba23a90945c7d84c87cd7da33f7170bf4c3/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=ad8deba23a90945c7d84c87cd7da33f7170bf4c3", "patch": "@@ -195,7 +195,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         self.memory.check_align(ptr, ptr_align)?;\n \n         if mplace.layout.size.bytes() == 0 {\n-            return Ok(Some(Value::Scalar(ScalarMaybeUndef::Scalar(Scalar::Bits { bits: 0, size: 0 }))));\n+            return Ok(Some(Value::Scalar(Scalar::zst().into())));\n         }\n \n         let ptr = ptr.to_ptr()?;\n@@ -228,7 +228,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     /// in a `Value`, not on which data is stored there currently.\n     pub(super) fn try_read_value(\n         &self,\n-        src : OpTy<'tcx>,\n+        src: OpTy<'tcx>,\n     ) -> EvalResult<'tcx, Result<Value, MemPlace>> {\n         Ok(match src.try_as_mplace() {\n             Ok(mplace) => {\n@@ -253,7 +253,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     }\n \n     /// Read a scalar from a place\n-    pub fn read_scalar(&self, op : OpTy<'tcx>) -> EvalResult<'tcx, ScalarMaybeUndef> {\n+    pub fn read_scalar(&self, op: OpTy<'tcx>) -> EvalResult<'tcx, ScalarMaybeUndef> {\n         match *self.read_value(op)? {\n             Value::ScalarPair(..) => bug!(\"got ScalarPair for type: {:?}\", op.layout.ty),\n             Value::Scalar(val) => Ok(val),"}, {"sha": "92f9268ef87bd94f6e12b6963becd681bcc54970", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad8deba23a90945c7d84c87cd7da33f7170bf4c3/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8deba23a90945c7d84c87cd7da33f7170bf4c3/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=ad8deba23a90945c7d84c87cd7da33f7170bf4c3", "patch": "@@ -403,7 +403,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     /// Just a convenience function, but used quite a bit.\n     pub fn place_field(\n         &mut self,\n-        base : PlaceTy<'tcx>,\n+        base: PlaceTy<'tcx>,\n         field: u64,\n     ) -> EvalResult<'tcx, PlaceTy<'tcx>> {\n         // FIXME: We could try to be smarter and avoid allocation for fields that span the\n@@ -414,7 +414,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n \n     pub fn place_downcast(\n         &mut self,\n-        base : PlaceTy<'tcx>,\n+        base: PlaceTy<'tcx>,\n         variant: usize,\n     ) -> EvalResult<'tcx, PlaceTy<'tcx>> {\n         // Downcast just changes the layout\n@@ -515,7 +515,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     pub fn write_value(\n         &mut self,\n         src_val: Value,\n-        dest : PlaceTy<'tcx>,\n+        dest: PlaceTy<'tcx>,\n     ) -> EvalResult<'tcx> {\n         trace!(\"write_value: {:?} <- {:?}\", *dest, src_val);\n         // See if we can avoid an allocation. This is the counterpart to `try_read_value`,"}, {"sha": "e044df2d1c0f972f68274be8762438863fc42b04", "filename": "src/librustc_mir/interpret/terminator/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad8deba23a90945c7d84c87cd7da33f7170bf4c3/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8deba23a90945c7d84c87cd7da33f7170bf4c3/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs?ref=ad8deba23a90945c7d84c87cd7da33f7170bf4c3", "patch": "@@ -2,7 +2,7 @@ use rustc::mir::BasicBlock;\n use rustc::ty::{self, layout::LayoutOf};\n use syntax::source_map::Span;\n \n-use rustc::mir::interpret::{EvalResult};\n+use rustc::mir::interpret::EvalResult;\n use interpret::{Machine, EvalContext, PlaceTy, PlaceExtra, OpTy, Operand};\n \n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {"}]}