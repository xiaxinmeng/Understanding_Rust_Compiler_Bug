{"sha": "b71b92199c5a04e41b10bcd09333ca8762933bdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MWI5MjE5OWM1YTA0ZTQxYjEwYmNkMDkzMzNjYTg3NjI5MzNiZGM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-07T03:29:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-07T03:29:12Z"}, "message": "Rollup merge of #52058 - davidtwco:issue-51345, r=nikomatsakis\n\nUse of unimplemented!() causing ICE with NLL\n\nFixes #51345.\n\nr? @nikomatsakis", "tree": {"sha": "2b9cca885dfc4bdedd0dda369da889cbcf127d2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b9cca885dfc4bdedd0dda369da889cbcf127d2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b71b92199c5a04e41b10bcd09333ca8762933bdc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbQDOICRBK7hj4Ov3rIwAAdHIIABjhEo0rtJMgYHssdJQcSkKT\nhsLoUZcmpaT+BeGTXd2Ld67DsgB9WPYgYIbUecrBfbXL/1cGDWgHuxbL1V8Y4ETO\nMU6QmSSle0F6+wvpZUezhknlpP5CWSECSoyTGYHUB5X9y3hpha3JjLNzew1sPpAy\n7WKSvok11XTvWt9S9j3r1Nej/KbkSDl95BbxZQIjtzuXdrjnkqrTvlKuPrReAW5p\nB8s6E88EwyDanoz6C8g6sX4kpwQivO2VMK7LLCDMXv4X2ZXKND7SFYYhOVgBxwIs\nVhMqW1xfrDAjz14PxZJQZ86c3gKkXyYqnmlyaCg5LctaHTfN5jKxvrWWDSyGb8o=\n=b66y\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b9cca885dfc4bdedd0dda369da889cbcf127d2c\nparent 9b3ec57c162ab0079a173750c4edb6f531cd83b3\nparent f90eada1c97dd0d0a752d34090a957661789379a\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1530934152 -0600\ncommitter GitHub <noreply@github.com> 1530934152 -0600\n\nRollup merge of #52058 - davidtwco:issue-51345, r=nikomatsakis\n\nUse of unimplemented!() causing ICE with NLL\n\nFixes #51345.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b71b92199c5a04e41b10bcd09333ca8762933bdc", "html_url": "https://github.com/rust-lang/rust/commit/b71b92199c5a04e41b10bcd09333ca8762933bdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b71b92199c5a04e41b10bcd09333ca8762933bdc/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b3ec57c162ab0079a173750c4edb6f531cd83b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3ec57c162ab0079a173750c4edb6f531cd83b3", "html_url": "https://github.com/rust-lang/rust/commit/9b3ec57c162ab0079a173750c4edb6f531cd83b3"}, {"sha": "f90eada1c97dd0d0a752d34090a957661789379a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f90eada1c97dd0d0a752d34090a957661789379a", "html_url": "https://github.com/rust-lang/rust/commit/f90eada1c97dd0d0a752d34090a957661789379a"}], "stats": {"total": 111, "additions": 70, "deletions": 41}, "files": [{"sha": "e9e0c5c36135322c7594209307c627ec4cae2df8", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b71b92199c5a04e41b10bcd09333ca8762933bdc/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71b92199c5a04e41b10bcd09333ca8762933bdc/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=b71b92199c5a04e41b10bcd09333ca8762933bdc", "patch": "@@ -53,25 +53,22 @@ impl<'tcx> Index<BorrowIndex> for BorrowSet<'tcx> {\n     }\n }\n \n-/// Every two-phase borrow has *exactly one* use (or else it is not a\n-/// proper two-phase borrow under our current definition). However, not\n-/// all uses are actually ones that activate the reservation.. In\n-/// particular, a shared borrow of a `&mut` does not activate the\n-/// reservation.\n+/// Location where a two phase borrow is activated, if a borrow\n+/// is in fact a two phase borrow.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-crate enum TwoPhaseUse {\n-    MutActivate,\n-    SharedUse,\n+crate enum TwoPhaseActivation {\n+    NotTwoPhase,\n+    NotActivated,\n+    ActivatedAt(Location),\n }\n \n #[derive(Debug)]\n crate struct BorrowData<'tcx> {\n     /// Location where the borrow reservation starts.\n     /// In many cases, this will be equal to the activation location but not always.\n     crate reserve_location: Location,\n-    /// Location where the borrow is activated. None if this is not a\n-    /// 2-phase borrow.\n-    crate activation_location: Option<(TwoPhaseUse, Location)>,\n+    /// Location where the borrow is activated.\n+    crate activation_location: TwoPhaseActivation,\n     /// What kind of borrow this is\n     crate kind: mir::BorrowKind,\n     /// The region for which this borrow is live\n@@ -116,19 +113,6 @@ impl<'tcx> BorrowSet<'tcx> {\n             visitor.visit_basic_block_data(block, block_data);\n         }\n \n-        // Double check: We should have found an activation for every pending\n-        // activation.\n-        assert_eq!(\n-            visitor\n-                .pending_activations\n-                .iter()\n-                .find(|&(_local, &borrow_index)| visitor.idx_vec[borrow_index]\n-                    .activation_location\n-                    .is_none()),\n-            None,\n-            \"never found an activation for this borrow!\",\n-        );\n-\n         BorrowSet {\n             borrows: visitor.idx_vec,\n             location_map: visitor.location_map,\n@@ -183,7 +167,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n                 kind,\n                 region,\n                 reserve_location: location,\n-                activation_location: None,\n+                activation_location: TwoPhaseActivation::NotTwoPhase,\n                 borrowed_place: borrowed_place.clone(),\n                 assigned_place: assigned_place.clone(),\n             };\n@@ -232,38 +216,43 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n                         return;\n                     }\n \n-                    if let Some(other_activation) = borrow_data.activation_location {\n+                    if let TwoPhaseActivation::ActivatedAt(other_location) =\n+                            borrow_data.activation_location {\n                         span_bug!(\n                             self.mir.source_info(location).span,\n                             \"found two uses for 2-phase borrow temporary {:?}: \\\n                              {:?} and {:?}\",\n                             temp,\n                             location,\n-                            other_activation,\n+                            other_location,\n                         );\n                     }\n \n                     // Otherwise, this is the unique later use\n                     // that we expect.\n-\n-                    let two_phase_use;\n-\n-                    match context {\n+                    borrow_data.activation_location = match context {\n                         // The use of TMP in a shared borrow does not\n                         // count as an actual activation.\n                         PlaceContext::Borrow { kind: mir::BorrowKind::Shared, .. } => {\n-                            two_phase_use = TwoPhaseUse::SharedUse;\n+                            TwoPhaseActivation::NotActivated\n                         }\n                         _ => {\n-                            two_phase_use = TwoPhaseUse::MutActivate;\n+                            // Double check: This borrow is indeed a two-phase borrow (that is,\n+                            // we are 'transitioning' from `NotActivated` to `ActivatedAt`) and\n+                            // we've not found any other activations (checked above).\n+                            assert_eq!(\n+                                borrow_data.activation_location,\n+                                TwoPhaseActivation::NotActivated,\n+                                \"never found an activation for this borrow!\",\n+                            );\n+\n                             self.activation_map\n                                 .entry(location)\n                                 .or_insert(Vec::new())\n                                 .push(borrow_index);\n+                            TwoPhaseActivation::ActivatedAt(location)\n                         }\n-                    }\n-\n-                    borrow_data.activation_location = Some((two_phase_use, location));\n+                    };\n                 }\n \n                 None => {}\n@@ -342,6 +331,11 @@ impl<'a, 'gcx, 'tcx> GatherBorrows<'a, 'gcx, 'tcx> {\n             );\n         };\n \n+        // Consider the borrow not activated to start. When we find an activation, we'll update\n+        // this field.\n+        let borrow_data = &mut self.idx_vec[borrow_index];\n+        borrow_data.activation_location = TwoPhaseActivation::NotActivated;\n+\n         // Insert `temp` into the list of pending activations. From\n         // now on, we'll be on the lookout for a use of it. Note that\n         // we are guaranteed that this use will come after the"}, {"sha": "ca2a120ceb7375e3ece7b6eb3ed23e376a41fdbc", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b71b92199c5a04e41b10bcd09333ca8762933bdc/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71b92199c5a04e41b10bcd09333ca8762933bdc/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=b71b92199c5a04e41b10bcd09333ca8762933bdc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use borrow_check::borrow_set::{BorrowSet, BorrowData, TwoPhaseUse};\n+use borrow_check::borrow_set::{BorrowSet, BorrowData, TwoPhaseActivation};\n use borrow_check::places_conflict;\n use borrow_check::Context;\n use borrow_check::ShallowOrDeep;\n@@ -83,11 +83,11 @@ pub(super) fn is_active<'tcx>(\n \n     let activation_location = match borrow_data.activation_location {\n         // If this is not a 2-phase borrow, it is always active.\n-        None => return true,\n+        TwoPhaseActivation::NotTwoPhase => return true,\n         // And if the unique 2-phase use is not an activation, then it is *never* active.\n-        Some((TwoPhaseUse::SharedUse, _)) => return false,\n-        // Otherwise, we derive info from the activation point `v`:\n-        Some((TwoPhaseUse::MutActivate, v)) => v,\n+        TwoPhaseActivation::NotActivated => return false,\n+        // Otherwise, we derive info from the activation point `loc`:\n+        TwoPhaseActivation::ActivatedAt(loc) => loc,\n     };\n \n     // Otherwise, it is active for every location *except* in between"}, {"sha": "9efd08195a1bb123f5324f5f319a0b5c87052792", "filename": "src/test/run-fail/issue-51345.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b71b92199c5a04e41b10bcd09333ca8762933bdc/src%2Ftest%2Frun-fail%2Fissue-51345.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71b92199c5a04e41b10bcd09333ca8762933bdc/src%2Ftest%2Frun-fail%2Fissue-51345.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-51345.rs?ref=b71b92199c5a04e41b10bcd09333ca8762933bdc", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: thread 'main' panicked at 'explicit panic'\n+\n+#![feature(nll)]\n+\n+fn main() {\n+    let mut vec = vec![];\n+    vec.push((vec.len(), panic!()));\n+}"}, {"sha": "7d392944685b830b39c5a7828d0990f87ad87e44", "filename": "src/test/run-pass/issue-51345.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b71b92199c5a04e41b10bcd09333ca8762933bdc/src%2Ftest%2Frun-pass%2Fissue-51345.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71b92199c5a04e41b10bcd09333ca8762933bdc/src%2Ftest%2Frun-pass%2Fissue-51345.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-51345.rs?ref=b71b92199c5a04e41b10bcd09333ca8762933bdc", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+fn main() {\n+    let mut v = Vec::new();\n+\n+    loop { v.push(break) }\n+}"}]}