{"sha": "6a7106cb328e0e43b2a0e1c07dc5c0cfbd1b31b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNzEwNmNiMzI4ZTBlNDNiMmEwZTFjMDdkYzVjMGNmYmQxYjMxYjk=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-23T09:58:07Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-23T09:58:07Z"}, "message": "type_of AnonConst AssocTy does not require parent", "tree": {"sha": "e00e7c04df074e6bcf52d37bae5fcb208832a0e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e00e7c04df074e6bcf52d37bae5fcb208832a0e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a7106cb328e0e43b2a0e1c07dc5c0cfbd1b31b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a7106cb328e0e43b2a0e1c07dc5c0cfbd1b31b9", "html_url": "https://github.com/rust-lang/rust/commit/6a7106cb328e0e43b2a0e1c07dc5c0cfbd1b31b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a7106cb328e0e43b2a0e1c07dc5c0cfbd1b31b9/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "645fedd183a341b5ab5553d4d35ce9140276371f", "url": "https://api.github.com/repos/rust-lang/rust/commits/645fedd183a341b5ab5553d4d35ce9140276371f", "html_url": "https://github.com/rust-lang/rust/commit/645fedd183a341b5ab5553d4d35ce9140276371f"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "f085486900d744e0fef718916ad1cf76cb14698c", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a7106cb328e0e43b2a0e1c07dc5c0cfbd1b31b9/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a7106cb328e0e43b2a0e1c07dc5c0cfbd1b31b9/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=6a7106cb328e0e43b2a0e1c07dc5c0cfbd1b31b9", "patch": "@@ -259,7 +259,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         // default to the path resolution.\n                         let res = segment.res.filter(|&r| r != Res::Err).unwrap_or(path.res);\n                         let generics = match res {\n-                            Res::Def(DefKind::Ctor(..) | DefKind::AssocTy, def_id) => {\n+                            Res::Def(DefKind::Ctor(..), def_id) => {\n                                 tcx.generics_of(tcx.parent(def_id).unwrap())\n                             }\n                             Res::Def(_, def_id) => tcx.generics_of(def_id),"}]}