{"sha": "95c2f06162916b3fa0c65ad504cbc0da6bc9c8a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YzJmMDYxNjI5MTZiM2ZhMGM2NWFkNTA0Y2JjMGRhNmJjOWM4YTM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-04-26T22:11:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-26T22:11:08Z"}, "message": "Rollup merge of #41546 - cuviper:reduced-rust-src, r=alexcrichton\n\nShrink the rust-src component\n\nBefore this change, the installable rust-src component had essentially the same contents as the rustc-src dist tarball, just additionally wrapped in a rust-installer.  As discussed on [internals], rust-src is only meant to support uses for the standard library, so it doesn't really need the rest of the compiler sources.\n\nNow rust-src only contains libstd and its path dependencies, which roughly matches the set of crates that have rust-analysis data.  The result is **significantly** smaller, from 36MB to 1.3MB compressed, and from 247MB to 8.5MB uncompressed.\n\n[internals]: https://internals.rust-lang.org/t/minimizing-the-rust-src-component/5117", "tree": {"sha": "e7347121980c9811ba21cc2f2a2c6ac191e53e14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7347121980c9811ba21cc2f2a2c6ac191e53e14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95c2f06162916b3fa0c65ad504cbc0da6bc9c8a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95c2f06162916b3fa0c65ad504cbc0da6bc9c8a3", "html_url": "https://github.com/rust-lang/rust/commit/95c2f06162916b3fa0c65ad504cbc0da6bc9c8a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95c2f06162916b3fa0c65ad504cbc0da6bc9c8a3/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6ff8326ecf6e069460f19442d78a935b7b3022a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ff8326ecf6e069460f19442d78a935b7b3022a", "html_url": "https://github.com/rust-lang/rust/commit/c6ff8326ecf6e069460f19442d78a935b7b3022a"}, {"sha": "b9bdb1766d68dbe5da0e0cd65b2227186004d2cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9bdb1766d68dbe5da0e0cd65b2227186004d2cf", "html_url": "https://github.com/rust-lang/rust/commit/b9bdb1766d68dbe5da0e0cd65b2227186004d2cf"}], "stats": {"total": 88, "additions": 61, "deletions": 27}, "files": [{"sha": "639ba5d5b0c48bc69e206700c1396a0154085341", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 61, "deletions": 27, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/95c2f06162916b3fa0c65ad504cbc0da6bc9c8a3/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c2f06162916b3fa0c65ad504cbc0da6bc9c8a3/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=95c2f06162916b3fa0c65ad504cbc0da6bc9c8a3", "patch": "@@ -374,13 +374,11 @@ pub fn rust_src(build: &Build) {\n \n     println!(\"Dist src\");\n \n-    let name = pkgname(build, \"rust-src\");\n-    let image = tmpdir(build).join(format!(\"{}-image\", name));\n-    let _ = fs::remove_dir_all(&image);\n-\n-    let dst = image.join(\"lib/rustlib/src\");\n-    let dst_src = dst.join(\"rust\");\n-    t!(fs::create_dir_all(&dst_src));\n+    // Make sure that the root folder of tarball has the correct name\n+    let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n+    let plain_dst_src = tmpdir(build).join(&plain_name);\n+    let _ = fs::remove_dir_all(&plain_dst_src);\n+    t!(fs::create_dir_all(&plain_dst_src));\n \n     // This is the set of root paths which will become part of the source package\n     let src_files = [\n@@ -429,13 +427,13 @@ pub fn rust_src(build: &Build) {\n \n     // Copy the directories using our filter\n     for item in &src_dirs {\n-        let dst = &dst_src.join(item);\n+        let dst = &plain_dst_src.join(item);\n         t!(fs::create_dir(dst));\n         cp_filtered(&build.src.join(item), dst, &filter_fn);\n     }\n     // Copy the files normally\n     for item in &src_files {\n-        copy(&build.src.join(item), &dst_src.join(item));\n+        copy(&build.src.join(item), &plain_dst_src.join(item));\n     }\n \n     // If we're building from git sources, we need to vendor a complete distribution.\n@@ -460,10 +458,63 @@ pub fn rust_src(build: &Build) {\n         // Vendor all Cargo dependencies\n         let mut cmd = Command::new(&build.cargo);\n         cmd.arg(\"vendor\")\n-           .current_dir(&dst_src.join(\"src\"));\n+           .current_dir(&plain_dst_src.join(\"src\"));\n         build.run(&mut cmd);\n     }\n \n+    // Create the version file\n+    write_file(&plain_dst_src.join(\"version\"), build.rust_version().as_bytes());\n+\n+    // Create plain source tarball\n+    let tarball = rust_src_location(build);\n+    if let Some(dir) = tarball.parent() {\n+        t!(fs::create_dir_all(dir));\n+    }\n+    let mut cmd = Command::new(\"tar\");\n+    cmd.arg(\"-czf\").arg(sanitize_sh(&tarball))\n+       .arg(&plain_name)\n+       .current_dir(tmpdir(build));\n+    build.run(&mut cmd);\n+\n+\n+    let name = pkgname(build, \"rust-src\");\n+    let image = tmpdir(build).join(format!(\"{}-image\", name));\n+    let _ = fs::remove_dir_all(&image);\n+\n+    let dst = image.join(\"lib/rustlib/src\");\n+    let dst_src = dst.join(\"rust\");\n+    t!(fs::create_dir_all(&dst_src));\n+\n+    // This is the reduced set of paths which will become the rust-src component\n+    // (essentially libstd and all of its path dependencies)\n+    let std_src_dirs = [\n+        \"src/build_helper\",\n+        \"src/liballoc\",\n+        \"src/liballoc_jemalloc\",\n+        \"src/liballoc_system\",\n+        \"src/libcollections\",\n+        \"src/libcompiler_builtins\",\n+        \"src/libcore\",\n+        \"src/liblibc\",\n+        \"src/libpanic_abort\",\n+        \"src/libpanic_unwind\",\n+        \"src/librand\",\n+        \"src/librustc_asan\",\n+        \"src/librustc_lsan\",\n+        \"src/librustc_msan\",\n+        \"src/librustc_tsan\",\n+        \"src/libstd\",\n+        \"src/libstd_unicode\",\n+        \"src/libunwind\",\n+        \"src/rustc/libc_shim\",\n+    ];\n+\n+    for item in &std_src_dirs {\n+        let dst = &dst_src.join(item);\n+        t!(fs::create_dir_all(dst));\n+        cp_r(&plain_dst_src.join(item), dst);\n+    }\n+\n     // Create source tarball in rust-installer format\n     let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n@@ -478,23 +529,6 @@ pub fn rust_src(build: &Build) {\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n     build.run(&mut cmd);\n \n-    // Rename directory, so that root folder of tarball has the correct name\n-    let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n-    let plain_dst_src = tmpdir(build).join(&plain_name);\n-    let _ = fs::remove_dir_all(&plain_dst_src);\n-    t!(fs::create_dir_all(&plain_dst_src));\n-    cp_r(&dst_src, &plain_dst_src);\n-\n-    // Create the version file\n-    write_file(&plain_dst_src.join(\"version\"), build.rust_version().as_bytes());\n-\n-    // Create plain source tarball\n-    let mut cmd = Command::new(\"tar\");\n-    cmd.arg(\"-czf\").arg(sanitize_sh(&rust_src_location(build)))\n-       .arg(&plain_name)\n-       .current_dir(tmpdir(build));\n-    build.run(&mut cmd);\n-\n     t!(fs::remove_dir_all(&image));\n     t!(fs::remove_dir_all(&plain_dst_src));\n }"}]}