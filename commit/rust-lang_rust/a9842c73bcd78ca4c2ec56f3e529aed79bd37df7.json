{"sha": "a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "node_id": "C_kwDOAAsO6NoAKGE5ODQyYzczYmNkNzhjYTRjMmVjNTZmM2U1MjlhZWQ3OWJkMzdkZjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-18T00:20:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-18T00:20:52Z"}, "message": "Auto merge of #108112 - nnethercote:clarify-iterator-interners, r=oli-obk,compiler-errors\n\nClarify iterator interners\n\nI found the iterator interners very confusing. This PR clarifies things.\n\nr? `@compiler-errors`", "tree": {"sha": "d643279e187292a87bc8e7d78edb212c714e8fa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d643279e187292a87bc8e7d78edb212c714e8fa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "html_url": "https://github.com/rust-lang/rust/commit/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "231bcd131d109d41e5705f48b9c5a6e70c98ff80", "url": "https://api.github.com/repos/rust-lang/rust/commits/231bcd131d109d41e5705f48b9c5a6e70c98ff80", "html_url": "https://github.com/rust-lang/rust/commit/231bcd131d109d41e5705f48b9c5a6e70c98ff80"}, {"sha": "af32411f20d4e4f79a2c8b4b645b2693a46c3d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/af32411f20d4e4f79a2c8b4b645b2693a46c3d7d", "html_url": "https://github.com/rust-lang/rust/commit/af32411f20d4e4f79a2c8b4b645b2693a46c3d7d"}], "stats": {"total": 359, "additions": 173, "deletions": 186}, "files": [{"sha": "004b945eada119de86bf3c72770ffe5da0db4a31", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -2589,7 +2589,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             DefKind::InlineConst => substs.as_inline_const().parent_substs(),\n             other => bug!(\"unexpected item {:?}\", other),\n         };\n-        let parent_substs = tcx.mk_substs(parent_substs.iter());\n+        let parent_substs = tcx.intern_substs(parent_substs);\n \n         assert_eq!(typeck_root_substs.len(), parent_substs.len());\n         if let Err(_) = self.eq_substs("}, {"sha": "b4a2537b5ea93bcee6e177177fb1160f4a48521f", "filename": "compiler/rustc_codegen_cranelift/src/codegen_i128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -56,7 +56,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n                     Some(fx.easy_call(\"__multi3\", &[lhs, rhs], val_ty))\n                 }\n             } else {\n-                let out_ty = fx.tcx.mk_tup([lhs.layout().ty, fx.tcx.types.bool].iter());\n+                let out_ty = fx.tcx.intern_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n                 let oflow = CPlace::new_stack_slot(fx, fx.layout_of(fx.tcx.types.i32));\n                 let lhs = lhs.load_scalar(fx);\n                 let rhs = rhs.load_scalar(fx);\n@@ -78,7 +78,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n         }\n         BinOp::Add | BinOp::Sub | BinOp::Mul => {\n             assert!(checked);\n-            let out_ty = fx.tcx.mk_tup([lhs.layout().ty, fx.tcx.types.bool].iter());\n+            let out_ty = fx.tcx.intern_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n             let out_place = CPlace::new_stack_slot(fx, fx.layout_of(out_ty));\n             let (param_types, args) = if fx.tcx.sess.target.is_like_windows {\n                 let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);"}, {"sha": "cbac2e667652b9a66f09735228be2bd253c5f695", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm_x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -191,7 +191,7 @@ fn llvm_add_sub<'tcx>(\n     // carry0 | carry1 -> carry or borrow respectively\n     let cb_out = fx.bcx.ins().bor(cb0, cb1);\n \n-    let layout = fx.layout_of(fx.tcx.mk_tup([fx.tcx.types.u8, fx.tcx.types.u64].iter()));\n+    let layout = fx.layout_of(fx.tcx.intern_tup(&[fx.tcx.types.u8, fx.tcx.types.u64]));\n     let val = CValue::by_val_pair(cb_out, c, layout);\n     ret.write_cvalue(fx, val);\n }"}, {"sha": "26327107df4c5069f3acffb50a17d3b930e84578", "filename": "compiler/rustc_codegen_cranelift/src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -119,7 +119,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n                     tcx,\n                     ParamEnv::reveal_all(),\n                     report.def_id,\n-                    tcx.mk_substs([GenericArg::from(main_ret_ty)].iter()),\n+                    tcx.intern_substs(&[GenericArg::from(main_ret_ty)]),\n                 )\n                 .unwrap()\n                 .unwrap()"}, {"sha": "05905a7bcdf30bb2cfbbfb4542ad2c9bf87bd548", "filename": "compiler/rustc_codegen_cranelift/src/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -289,7 +289,7 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n         _ => bug!(\"binop {:?} on checked int/uint lhs: {:?} rhs: {:?}\", bin_op, in_lhs, in_rhs),\n     };\n \n-    let out_layout = fx.layout_of(fx.tcx.mk_tup([in_lhs.layout().ty, fx.tcx.types.bool].iter()));\n+    let out_layout = fx.layout_of(fx.tcx.intern_tup(&[in_lhs.layout().ty, fx.tcx.types.bool]));\n     CValue::by_val_pair(res, has_overflow, out_layout)\n }\n "}, {"sha": "3dc0ac03312e9a4b365ecf0295a9d5c06a9b7562", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -27,8 +27,6 @@ use rustc_middle::ty::Instance;\n use std::cell::RefCell;\n use std::ffi::CString;\n \n-use std::iter;\n-\n pub mod mapgen;\n \n const UNUSED_FUNCTION_COUNTER_ID: CounterValueReference = CounterValueReference::START;\n@@ -201,7 +199,7 @@ fn declare_unused_fn<'tcx>(cx: &CodegenCx<'_, 'tcx>, def_id: DefId) -> Instance<\n         tcx.symbol_name(instance).name,\n         cx.fn_abi_of_fn_ptr(\n             ty::Binder::dummy(tcx.mk_fn_sig(\n-                iter::once(tcx.mk_unit()),\n+                [tcx.mk_unit()],\n                 tcx.mk_unit(),\n                 false,\n                 hir::Unsafety::Unsafe,"}, {"sha": "39afb4af6f68eba9c99e7186e33cc588089ad062", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -22,7 +22,6 @@ use rustc_target::abi::{self, Align, HasDataLayout, Primitive};\n use rustc_target::spec::{HasTargetSpec, PanicStrategy};\n \n use std::cmp::Ordering;\n-use std::iter;\n \n fn get_simple_intrinsic<'ll>(\n     cx: &CodegenCx<'ll, '_>,\n@@ -798,23 +797,23 @@ fn get_rust_try_fn<'ll, 'tcx>(\n     let i8p = tcx.mk_mut_ptr(tcx.types.i8);\n     // `unsafe fn(*mut i8) -> ()`\n     let try_fn_ty = tcx.mk_fn_ptr(ty::Binder::dummy(tcx.mk_fn_sig(\n-        iter::once(i8p),\n+        [i8p],\n         tcx.mk_unit(),\n         false,\n         hir::Unsafety::Unsafe,\n         Abi::Rust,\n     )));\n     // `unsafe fn(*mut i8, *mut i8) -> ()`\n     let catch_fn_ty = tcx.mk_fn_ptr(ty::Binder::dummy(tcx.mk_fn_sig(\n-        [i8p, i8p].iter().cloned(),\n+        [i8p, i8p],\n         tcx.mk_unit(),\n         false,\n         hir::Unsafety::Unsafe,\n         Abi::Rust,\n     )));\n     // `unsafe fn(unsafe fn(*mut i8) -> (), *mut i8, unsafe fn(*mut i8, *mut i8) -> ()) -> i32`\n     let rust_fn_sig = ty::Binder::dummy(cx.tcx.mk_fn_sig(\n-        [try_fn_ty, i8p, catch_fn_ty].into_iter(),\n+        [try_fn_ty, i8p, catch_fn_ty],\n         tcx.types.i32,\n         false,\n         hir::Unsafety::Unsafe,"}, {"sha": "f6a3937870edd3b32cde617c922b6dc2e6fa1763", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -96,7 +96,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let loc_ty = self\n             .tcx\n             .type_of(self.tcx.require_lang_item(LangItem::PanicLocation, None))\n-            .subst(*self.tcx, self.tcx.mk_substs([self.tcx.lifetimes.re_erased.into()].iter()));\n+            .subst(*self.tcx, self.tcx.intern_substs(&[self.tcx.lifetimes.re_erased.into()]));\n         let loc_layout = self.layout_of(loc_ty).unwrap();\n         let location = self.allocate(loc_layout, MemoryKind::CallerLocation).unwrap();\n "}, {"sha": "2c99ab8071117cf35ad7563a17c0b001c5d931dc", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -1608,7 +1608,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .collect::<SmallVec<[_; 8]>>();\n         v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));\n         v.dedup();\n-        let existential_predicates = tcx.mk_poly_existential_predicates(v.into_iter());\n+        let existential_predicates = tcx.intern_poly_existential_predicates(&v);\n \n         // Use explicitly-specified region bound.\n         let region_bound = if !lifetime.is_elided() {\n@@ -3109,7 +3109,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         debug!(?output_ty);\n \n-        let fn_ty = tcx.mk_fn_sig(input_tys.into_iter(), output_ty, decl.c_variadic, unsafety, abi);\n+        let fn_ty = tcx.mk_fn_sig(input_tys, output_ty, decl.c_variadic, unsafety, abi);\n         let bare_fn_ty = ty::Binder::bind_with_vars(fn_ty, bound_vars);\n \n         if !self.allow_ty_infer() && !(visitor.0.is_empty() && infer_replacements.is_empty()) {"}, {"sha": "a9fcc8e62501b4950ee807c4b9b0b8cfa5f17bed", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -1936,7 +1936,7 @@ pub(super) fn check_type_bounds<'tcx>(\n             .into()\n         }\n     });\n-    let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n+    let bound_vars = tcx.intern_bound_variable_kinds(&bound_vars);\n     let impl_ty_substs = tcx.intern_substs(&substs);\n     let container_id = impl_ty.container_id(tcx);\n "}, {"sha": "4720fea8ef4ab261f30de1e9d7cdb6541ee44d69", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -15,8 +15,6 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::spec::abi::Abi;\n \n-use std::iter;\n-\n fn equate_intrinsic_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     it: &hir::ForeignItem<'_>,\n@@ -139,14 +137,10 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     let intrinsic_name = tcx.item_name(intrinsic_id);\n     let name_str = intrinsic_name.as_str();\n \n-    let bound_vars = tcx.mk_bound_variable_kinds(\n-        [\n-            ty::BoundVariableKind::Region(ty::BrAnon(0, None)),\n-            ty::BoundVariableKind::Region(ty::BrEnv),\n-        ]\n-        .iter()\n-        .copied(),\n-    );\n+    let bound_vars = tcx.intern_bound_variable_kinds(&[\n+        ty::BoundVariableKind::Region(ty::BrAnon(0, None)),\n+        ty::BoundVariableKind::Region(ty::BrEnv),\n+    ]);\n     let mk_va_list_ty = |mutbl| {\n         tcx.lang_items().va_list().map(|did| {\n             let region = tcx.mk_re_late_bound(\n@@ -378,21 +372,21 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 (\n                     1,\n                     vec![tcx.mk_imm_ref(tcx.mk_re_late_bound(ty::INNERMOST, br), param(0))],\n-                    tcx.mk_projection(discriminant_def_id, tcx.mk_substs([param(0).into()].iter())),\n+                    tcx.mk_projection(discriminant_def_id, tcx.intern_substs(&[param(0).into()])),\n                 )\n             }\n \n             kw::Try => {\n                 let mut_u8 = tcx.mk_mut_ptr(tcx.types.u8);\n                 let try_fn_ty = ty::Binder::dummy(tcx.mk_fn_sig(\n-                    iter::once(mut_u8),\n+                    [mut_u8],\n                     tcx.mk_unit(),\n                     false,\n                     hir::Unsafety::Normal,\n                     Abi::Rust,\n                 ));\n                 let catch_fn_ty = ty::Binder::dummy(tcx.mk_fn_sig(\n-                    [mut_u8, mut_u8].iter().cloned(),\n+                    [mut_u8, mut_u8],\n                     tcx.mk_unit(),\n                     false,\n                     hir::Unsafety::Normal,\n@@ -447,7 +441,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n         };\n         (n_tps, 0, inputs, output, unsafety)\n     };\n-    let sig = tcx.mk_fn_sig(inputs.into_iter(), output, false, unsafety, Abi::RustIntrinsic);\n+    let sig = tcx.mk_fn_sig(inputs, output, false, unsafety, Abi::RustIntrinsic);\n     let sig = ty::Binder::bind_with_vars(sig, bound_vars);\n     equate_intrinsic_type(tcx, it, n_tps, n_lts, sig)\n }\n@@ -545,13 +539,7 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         }\n     };\n \n-    let sig = tcx.mk_fn_sig(\n-        inputs.into_iter(),\n-        output,\n-        false,\n-        hir::Unsafety::Unsafe,\n-        Abi::PlatformIntrinsic,\n-    );\n+    let sig = tcx.mk_fn_sig(inputs, output, false, hir::Unsafety::Unsafe, Abi::PlatformIntrinsic);\n     let sig = ty::Binder::dummy(sig);\n     equate_intrinsic_type(tcx, it, n_tps, 0, sig)\n }"}, {"sha": "11240cf22e4b1ba0eab36d0fd7e63af4f3c025aa", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -113,7 +113,6 @@ use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode};\n \n-use std::iter;\n use std::ops::Not;\n \n use astconv::AstConv;\n@@ -348,7 +347,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n     }\n \n     let se_ty = tcx.mk_fn_ptr(expected_return_type.map_bound(|expected_return_type| {\n-        tcx.mk_fn_sig(iter::empty(), expected_return_type, false, hir::Unsafety::Normal, Abi::Rust)\n+        tcx.mk_fn_sig([], expected_return_type, false, hir::Unsafety::Normal, Abi::Rust)\n     }));\n \n     require_same_types(\n@@ -434,7 +433,7 @@ fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n             }\n \n             let se_ty = tcx.mk_fn_ptr(ty::Binder::dummy(tcx.mk_fn_sig(\n-                [tcx.types.isize, tcx.mk_imm_ptr(tcx.mk_imm_ptr(tcx.types.u8))].iter().cloned(),\n+                [tcx.types.isize, tcx.mk_imm_ptr(tcx.mk_imm_ptr(tcx.types.u8))],\n                 tcx.types.isize,\n                 false,\n                 hir::Unsafety::Normal,"}, {"sha": "bf8259ff70fa91a71b934a3a3054af004eb544a8", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -264,7 +264,7 @@ fn check_lang_start_fn<'tcx>(\n         let fn_generic = generics.param_at(0, tcx);\n         let generic_ty = tcx.mk_ty_param(fn_generic.index, fn_generic.name);\n         let expected_fn_sig =\n-            tcx.mk_fn_sig([].iter(), &generic_ty, false, hir::Unsafety::Normal, Abi::Rust);\n+            tcx.mk_fn_sig([], generic_ty, false, hir::Unsafety::Normal, Abi::Rust);\n         let expected_ty = tcx.mk_fn_ptr(Binder::dummy(expected_fn_sig));\n \n         // we emit the same error to suggest changing the arg no matter what's wrong with the arg"}, {"sha": "cf296a7bf6530daa8d0666102c9b4f14811694aa", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // the `closures` table.\n         let sig = bound_sig.map_bound(|sig| {\n             self.tcx.mk_fn_sig(\n-                iter::once(self.tcx.intern_tup(sig.inputs())),\n+                [self.tcx.intern_tup(sig.inputs())],\n                 sig.output(),\n                 sig.c_variadic,\n                 sig.unsafety,\n@@ -326,7 +326,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(?ret_param_ty);\n \n         let sig = projection.rebind(self.tcx.mk_fn_sig(\n-            input_tys.iter(),\n+            input_tys,\n             ret_param_ty,\n             false,\n             hir::Unsafety::Normal,"}, {"sha": "14e3ba83b103721e154df45424ae6c5836656db4", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -312,7 +312,7 @@ pub fn resolve_interior<'a, 'tcx>(\n \n     // Extract type components to build the witness type.\n     let type_list = fcx.tcx.mk_type_list(type_causes.iter().map(|cause| cause.ty));\n-    let bound_vars = fcx.tcx.mk_bound_variable_kinds(bound_vars.iter());\n+    let bound_vars = fcx.tcx.intern_bound_variable_kinds(&bound_vars);\n     let witness =\n         fcx.tcx.mk_generator_witness(ty::Binder::bind_with_vars(type_list, bound_vars.clone()));\n "}, {"sha": "7c8abb4186f116ea2d43c7aabc8351c2d66673a9", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -301,7 +301,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Build a tuple (U0..Un) of the final upvar types U0..Un\n         // and unify the upvar tuple type in the closure with it:\n-        let final_tupled_upvars_type = self.tcx.mk_tup(final_upvar_tys.iter());\n+        let final_tupled_upvars_type = self.tcx.intern_tup(&final_upvar_tys);\n         self.demand_suptype(span, substs.tupled_upvars_ty(), final_tupled_upvars_type);\n \n         let fake_reads = delegate\n@@ -315,8 +315,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.typeck_results.borrow_mut().closure_size_eval.insert(\n                 closure_def_id,\n                 ClosureSizeProfileData {\n-                    before_feature_tys: self.tcx.mk_tup(before_feature_tys.into_iter()),\n-                    after_feature_tys: self.tcx.mk_tup(after_feature_tys.into_iter()),\n+                    before_feature_tys: self.tcx.intern_tup(&before_feature_tys),\n+                    after_feature_tys: self.tcx.intern_tup(&after_feature_tys),\n                 },\n             );\n         }"}, {"sha": "d823989bb02b8c77b60a106d255eed727a51290b", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -502,7 +502,7 @@ impl<'tcx> Collector<'tcx> {\n                 .subst_identity()\n                 .fn_sig(self.tcx)\n                 .inputs()\n-                .map_bound(|slice| self.tcx.mk_type_list(slice.iter())),\n+                .map_bound(|slice| self.tcx.intern_type_list(slice)),\n         );\n \n         argument_types"}, {"sha": "46184cddd51f504c07528489a442287dd5f045ac", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -2525,14 +2525,12 @@ impl<'tcx> ConstantKind<'tcx> {\n         }\n \n         let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n-        let parent_substs = if let Some(parent_hir_id) = tcx.hir().opt_parent_id(hir_id) {\n-            if let Some(parent_did) = parent_hir_id.as_owner() {\n-                InternalSubsts::identity_for_item(tcx, parent_did.to_def_id())\n-            } else {\n-                tcx.mk_substs(Vec::<GenericArg<'tcx>>::new().into_iter())\n-            }\n+        let parent_substs = if let Some(parent_hir_id) = tcx.hir().opt_parent_id(hir_id)\n+            && let Some(parent_did) = parent_hir_id.as_owner()\n+        {\n+            InternalSubsts::identity_for_item(tcx, parent_did.to_def_id())\n         } else {\n-            tcx.mk_substs(Vec::<GenericArg<'tcx>>::new().into_iter())\n+            tcx.intern_substs(&[])\n         };\n         debug!(?parent_substs);\n "}, {"sha": "e2f32cdca3ca3c90088d5a16343ef3911ffb1c47", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 70, "deletions": 51, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -67,7 +67,7 @@ use rustc_target::abi::{Layout, LayoutS, TargetDataLayout, VariantIdx};\n use rustc_target::spec::abi;\n use rustc_type_ir::sty::TyKind::*;\n use rustc_type_ir::WithCachedTypeInfo;\n-use rustc_type_ir::{DynKind, InternAs, InternIteratorElement, Interner, TypeFlags};\n+use rustc_type_ir::{CollectAndApply, DynKind, Interner, TypeFlags};\n \n use std::any::Any;\n use std::borrow::Borrow;\n@@ -1190,7 +1190,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_imm_ref(\n             self.lifetimes.re_static,\n             self.type_of(self.require_lang_item(LangItem::PanicLocation, None))\n-                .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),\n+                .subst(self, self.intern_substs(&[self.lifetimes.re_static.into()])),\n         )\n     }\n \n@@ -1660,11 +1660,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         unsafety: hir::Unsafety,\n     ) -> PolyFnSig<'tcx> {\n         sig.map_bound(|s| {\n-            let params_iter = match s.inputs()[0].kind() {\n-                ty::Tuple(params) => params.into_iter(),\n+            let params = match s.inputs()[0].kind() {\n+                ty::Tuple(params) => *params,\n                 _ => bug!(),\n             };\n-            self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)\n+            self.mk_fn_sig(params, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)\n         })\n     }\n \n@@ -1835,8 +1835,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         if ts.is_empty() { self.types.unit } else { self.mk_ty(Tuple(self.intern_type_list(&ts))) }\n     }\n \n-    pub fn mk_tup<I: InternAs<Ty<'tcx>, Ty<'tcx>>>(self, iter: I) -> I::Output {\n-        iter.intern_with(|ts| self.intern_tup(ts))\n+    pub fn mk_tup<I, T>(self, iter: I) -> T::Output\n+    where\n+        I: Iterator<Item = T>,\n+        T: CollectAndApply<Ty<'tcx>, Ty<'tcx>>,\n+    {\n+        T::collect_and_apply(iter, |ts| self.intern_tup(ts))\n     }\n \n     #[inline]\n@@ -2157,11 +2161,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub fn mk_const_list<I: InternAs<ty::Const<'tcx>, &'tcx List<ty::Const<'tcx>>>>(\n-        self,\n-        iter: I,\n-    ) -> I::Output {\n-        iter.intern_with(|xs| self.intern_const_list(xs))\n+    pub fn mk_const_list<I, T>(self, iter: I) -> T::Output\n+    where\n+        I: Iterator<Item = T>,\n+        T: CollectAndApply<ty::Const<'tcx>, &'tcx List<ty::Const<'tcx>>>,\n+    {\n+        T::collect_and_apply(iter, |xs| self.intern_const_list(xs))\n     }\n \n     pub fn intern_const_list(self, cs: &[ty::Const<'tcx>]) -> &'tcx List<ty::Const<'tcx>> {\n@@ -2210,57 +2215,72 @@ impl<'tcx> TyCtxt<'tcx> {\n         if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }\n     }\n \n-    pub fn mk_fn_sig<I>(\n+    // Unlike various other `mk_*` functions, this one uses `I: IntoIterator`\n+    // instead of `I: Iterator`. Unlike those other functions, this one doesn't\n+    // have a `intern_fn_sig` variant that can be used for cases where `I` is\n+    // something like a `Vec`. That's because of the need to combine `inputs`\n+    // and `output`.\n+    pub fn mk_fn_sig<I, T>(\n         self,\n         inputs: I,\n         output: I::Item,\n         c_variadic: bool,\n         unsafety: hir::Unsafety,\n         abi: abi::Abi,\n-    ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output\n+    ) -> T::Output\n     where\n-        I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,\n+        I: IntoIterator<Item = T>,\n+        T: CollectAndApply<Ty<'tcx>, ty::FnSig<'tcx>>,\n     {\n-        inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {\n+        T::collect_and_apply(inputs.into_iter().chain(iter::once(output)), |xs| ty::FnSig {\n             inputs_and_output: self.intern_type_list(xs),\n             c_variadic,\n             unsafety,\n             abi,\n         })\n     }\n \n-    pub fn mk_poly_existential_predicates<\n-        I: InternAs<PolyExistentialPredicate<'tcx>, &'tcx List<PolyExistentialPredicate<'tcx>>>,\n-    >(\n-        self,\n-        iter: I,\n-    ) -> I::Output {\n-        iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))\n+    pub fn mk_poly_existential_predicates<I, T>(self, iter: I) -> T::Output\n+    where\n+        I: Iterator<Item = T>,\n+        T: CollectAndApply<\n+                PolyExistentialPredicate<'tcx>,\n+                &'tcx List<PolyExistentialPredicate<'tcx>>,\n+            >,\n+    {\n+        T::collect_and_apply(iter, |xs| self.intern_poly_existential_predicates(xs))\n     }\n \n-    pub fn mk_predicates<I: InternAs<Predicate<'tcx>, &'tcx List<Predicate<'tcx>>>>(\n-        self,\n-        iter: I,\n-    ) -> I::Output {\n-        iter.intern_with(|xs| self.intern_predicates(xs))\n+    pub fn mk_predicates<I, T>(self, iter: I) -> T::Output\n+    where\n+        I: Iterator<Item = T>,\n+        T: CollectAndApply<Predicate<'tcx>, &'tcx List<Predicate<'tcx>>>,\n+    {\n+        T::collect_and_apply(iter, |xs| self.intern_predicates(xs))\n     }\n \n-    pub fn mk_type_list<I: InternAs<Ty<'tcx>, &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {\n-        iter.intern_with(|xs| self.intern_type_list(xs))\n+    pub fn mk_type_list<I, T>(self, iter: I) -> T::Output\n+    where\n+        I: Iterator<Item = T>,\n+        T: CollectAndApply<Ty<'tcx>, &'tcx List<Ty<'tcx>>>,\n+    {\n+        T::collect_and_apply(iter, |xs| self.intern_type_list(xs))\n     }\n \n-    pub fn mk_substs<I: InternAs<GenericArg<'tcx>, &'tcx List<GenericArg<'tcx>>>>(\n-        self,\n-        iter: I,\n-    ) -> I::Output {\n-        iter.intern_with(|xs| self.intern_substs(xs))\n+    pub fn mk_substs<I, T>(self, iter: I) -> T::Output\n+    where\n+        I: Iterator<Item = T>,\n+        T: CollectAndApply<GenericArg<'tcx>, &'tcx List<GenericArg<'tcx>>>,\n+    {\n+        T::collect_and_apply(iter, |xs| self.intern_substs(xs))\n     }\n \n-    pub fn mk_place_elems<I: InternAs<PlaceElem<'tcx>, &'tcx List<PlaceElem<'tcx>>>>(\n-        self,\n-        iter: I,\n-    ) -> I::Output {\n-        iter.intern_with(|xs| self.intern_place_elems(xs))\n+    pub fn mk_place_elems<I, T>(self, iter: I) -> T::Output\n+    where\n+        I: Iterator<Item = T>,\n+        T: CollectAndApply<PlaceElem<'tcx>, &'tcx List<PlaceElem<'tcx>>>,\n+    {\n+        T::collect_and_apply(iter, |xs| self.intern_place_elems(xs))\n     }\n \n     pub fn mk_substs_trait(\n@@ -2289,13 +2309,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty::AliasTy { def_id, substs, _use_mk_alias_ty_instead: () }\n     }\n \n-    pub fn mk_bound_variable_kinds<\n-        I: InternAs<ty::BoundVariableKind, &'tcx List<ty::BoundVariableKind>>,\n-    >(\n-        self,\n-        iter: I,\n-    ) -> I::Output {\n-        iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))\n+    pub fn mk_bound_variable_kinds<I, T>(self, iter: I) -> T::Output\n+    where\n+        I: Iterator<Item = T>,\n+        T: CollectAndApply<ty::BoundVariableKind, &'tcx List<ty::BoundVariableKind>>,\n+    {\n+        T::collect_and_apply(iter, |xs| self.intern_bound_variable_kinds(xs))\n     }\n \n     /// Emit a lint at `span` from a lint struct (some type that implements `DecorateLint`,\n@@ -2380,13 +2399,13 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {\n-        self.mk_bound_variable_kinds(\n-            self.late_bound_vars_map(id.owner)\n+        self.intern_bound_variable_kinds(\n+            &self\n+                .late_bound_vars_map(id.owner)\n                 .and_then(|map| map.get(&id.local_id).cloned())\n                 .unwrap_or_else(|| {\n                     bug!(\"No bound vars found for {}\", self.hir().node_to_string(id))\n-                })\n-                .iter(),\n+                }),\n         )\n     }\n "}, {"sha": "3d0f9a5053cb31fea3796d3feabc202315025f31", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -686,7 +686,7 @@ where\n                         Increase this counter if you tried to implement this but\n                         failed to do it without duplicating a lot of code from\n                         other places in the compiler: 2\n-                        tcx.mk_tup(&[\n+                        tcx.intern_tup(&[\n                             tcx.mk_array(tcx.types.usize, 3),\n                             tcx.mk_array(Option<fn()>),\n                         ])"}, {"sha": "2ba25e8bfadc9223a3db780e2efc33ef798601ad", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -673,7 +673,7 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n                     for (a_arg, b_arg) in aa.iter().zip(ba.iter()) {\n                         related_args.push(r.consts(a_arg, b_arg)?);\n                     }\n-                    let related_args = tcx.mk_const_list(related_args.iter());\n+                    let related_args = tcx.intern_const_list(&related_args);\n                     Expr::FunctionCall(func, related_args)\n                 }\n                 _ => return Err(TypeError::ConstMismatch(expected_found(r, a, b))),"}, {"sha": "573105fd8c007e4444b0169c66dbdbb7bdf7a6e3", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -419,7 +419,7 @@ impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::PolyExistential\n \n impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Const<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        ty::util::fold_list(self, folder, |tcx, v| tcx.mk_const_list(v.iter()))\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_const_list(v))\n     }\n }\n "}, {"sha": "74c35ef0fc241059e273a2e53ff0260fc1e91dc1", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -133,9 +133,9 @@ impl<'tcx> Cx<'tcx> {\n                     bug!(\"closure expr does not have closure type: {:?}\", closure_ty);\n                 };\n \n-                let bound_vars = self.tcx.mk_bound_variable_kinds(std::iter::once(\n-                    ty::BoundVariableKind::Region(ty::BrEnv),\n-                ));\n+                let bound_vars = self\n+                    .tcx\n+                    .intern_bound_variable_kinds(&[ty::BoundVariableKind::Region(ty::BrEnv)]);\n                 let br = ty::BoundRegion {\n                     var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n                     kind: ty::BrEnv,"}, {"sha": "682ad081f5cf3fd715a1016c2985d67980aa858c", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -597,7 +597,7 @@ fn build_call_shim<'tcx>(\n         let untuple_args = sig.inputs();\n \n         // Create substitutions for the `Self` and `Args` generic parameters of the shim body.\n-        let arg_tup = tcx.mk_tup(untuple_args.iter());\n+        let arg_tup = tcx.intern_tup(untuple_args);\n \n         (Some([ty.into(), arg_tup.into()]), Some(untuple_args))\n     } else {"}, {"sha": "59a2227cd3646a1bc63d087dd2fda4268d507b78", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -781,8 +781,8 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n                 let output = transform_ty(tcx, fn_sig.skip_binder().output(), options);\n                 ty = tcx.mk_fn_ptr(ty::Binder::bind_with_vars(\n                     tcx.mk_fn_sig(\n-                        parameters.iter(),\n-                        &output,\n+                        parameters,\n+                        output,\n                         fn_sig.c_variadic(),\n                         fn_sig.unsafety(),\n                         fn_sig.abi(),\n@@ -813,21 +813,18 @@ fn transform_substs<'tcx>(\n     substs: SubstsRef<'tcx>,\n     options: TransformTyOptions,\n ) -> SubstsRef<'tcx> {\n-    let substs: Vec<GenericArg<'tcx>> = substs\n-        .iter()\n-        .map(|subst| {\n-            if let GenericArgKind::Type(ty) = subst.unpack() {\n-                if is_c_void_ty(tcx, ty) {\n-                    tcx.mk_unit().into()\n-                } else {\n-                    transform_ty(tcx, ty, options).into()\n-                }\n+    let substs = substs.iter().map(|subst| {\n+        if let GenericArgKind::Type(ty) = subst.unpack() {\n+            if is_c_void_ty(tcx, ty) {\n+                tcx.mk_unit().into()\n             } else {\n-                subst\n+                transform_ty(tcx, ty, options).into()\n             }\n-        })\n-        .collect();\n-    tcx.mk_substs(substs.iter())\n+        } else {\n+            subst\n+        }\n+    });\n+    tcx.mk_substs(substs)\n }\n \n /// Returns a type metadata identifier for the specified FnAbi using the Itanium C++ ABI with vendor"}, {"sha": "d12e5f797fb9454930df53a65b7de63cf63610f6", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -359,7 +359,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     let b_last_ty = b_tys.last().unwrap();\n \n                     // Substitute just the tail field of B., and require that they're equal.\n-                    let unsized_a_ty = tcx.mk_tup(a_rest_tys.iter().chain([b_last_ty]));\n+                    let unsized_a_ty = tcx.mk_tup(a_rest_tys.iter().chain([b_last_ty]).copied());\n                     let mut nested_goals = ecx.infcx.eq(goal.param_env, unsized_a_ty, b_ty)?;\n \n                     // Similar to ADTs, require that the rest of the fields are equal."}, {"sha": "3662463178f8502049513902a1c6b12e274dc59e", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -191,10 +191,10 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n         ty::FnDef(def_id, substs) => Ok(Some(\n             tcx.fn_sig(def_id)\n                 .subst(tcx, substs)\n-                .map_bound(|sig| (tcx.mk_tup(sig.inputs().iter()), sig.output())),\n+                .map_bound(|sig| (tcx.intern_tup(sig.inputs()), sig.output())),\n         )),\n         ty::FnPtr(sig) => {\n-            Ok(Some(sig.map_bound(|sig| (tcx.mk_tup(sig.inputs().iter()), sig.output()))))\n+            Ok(Some(sig.map_bound(|sig| (tcx.intern_tup(sig.inputs()), sig.output()))))\n         }\n         ty::Closure(_, substs) => {\n             let closure_substs = substs.as_closure();"}, {"sha": "91b463800a8144dd6fb2d3dc0a55c614443849e4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -2012,7 +2012,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             let sig = match inputs.kind() {\n                 ty::Tuple(inputs) if infcx.tcx.is_fn_trait(trait_ref.def_id()) => {\n                     infcx.tcx.mk_fn_sig(\n-                        inputs.iter(),\n+                        *inputs,\n                         infcx.next_ty_var(TypeVariableOrigin {\n                             span: DUMMY_SP,\n                             kind: TypeVariableOriginKind::MiscVariable,\n@@ -2023,7 +2023,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     )\n                 }\n                 _ => infcx.tcx.mk_fn_sig(\n-                    std::iter::once(inputs),\n+                    [inputs],\n                     infcx.next_ty_var(TypeVariableOrigin {\n                         span: DUMMY_SP,\n                         kind: TypeVariableOriginKind::MiscVariable,"}, {"sha": "9b3249e58e8db433dea2feb3af8bbac8df2987ab", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -1923,7 +1923,7 @@ fn confirm_builtin_candidate<'cx, 'tcx>(\n ) -> Progress<'tcx> {\n     let tcx = selcx.tcx();\n     let self_ty = obligation.predicate.self_ty();\n-    let substs = tcx.mk_substs([self_ty.into()].iter());\n+    let substs = tcx.intern_substs(&[self_ty.into()]);\n     let lang_items = tcx.lang_items();\n     let item_def_id = obligation.predicate.def_id;\n     let trait_def_id = tcx.trait_of_item(item_def_id).unwrap();"}, {"sha": "e4a832e472813dbc520899972e4128750e6d108a", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -564,10 +564,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                 .into()\n                             }\n                         });\n-                        let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n+                        let bound_vars = tcx.intern_bound_variable_kinds(&bound_vars);\n                         let assoc_ty_substs = tcx.intern_substs(&substs);\n-\n-                        let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n                         let bound =\n                             bound.map_bound(|b| b.kind().skip_binder()).subst(tcx, assoc_ty_substs);\n                         tcx.mk_predicate(ty::Binder::bind_with_vars(bound, bound_vars))"}, {"sha": "41924dc2a6d936056556d2fe9872c8750467cb05", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -141,8 +141,8 @@ fn fn_sig_for_fn_abi<'tcx>(\n \n             ty::Binder::bind_with_vars(\n                 tcx.mk_fn_sig(\n-                    [env_ty, resume_ty].iter(),\n-                    &ret_ty,\n+                    [env_ty, resume_ty],\n+                    ret_ty,\n                     false,\n                     hir::Unsafety::Normal,\n                     rustc_target::spec::abi::Abi::Rust,"}, {"sha": "852156c24f42ab249fa3b320242fa1e61c2e4442", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -144,7 +144,7 @@ fn recurse_build<'tcx>(\n             for &id in args.iter() {\n                 new_args.push(recurse_build(tcx, body, id, root_span)?);\n             }\n-            let new_args = tcx.mk_const_list(new_args.iter());\n+            let new_args = tcx.intern_const_list(&new_args);\n             tcx.mk_const(Expr::FunctionCall(fun, new_args), node.ty)\n         }\n         &ExprKind::Binary { op, lhs, rhs } if check_binop(op) => {"}, {"sha": "5a991e03dee52bcd42a0e6e72a9af0fba945fa7a", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 33, "deletions": 40, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -69,38 +69,37 @@ pub trait Interner: Sized {\n     type PlaceholderRegion: Clone + Debug + Hash + Ord;\n }\n \n-pub trait InternAs<T: ?Sized, R> {\n+/// Imagine you have a function `F: FnOnce(&[T]) -> R`, plus an iterator `iter`\n+/// that produces `T` items. You could combine them with\n+/// `f(&iter.collect::<Vec<_>>())`, but this requires allocating memory for the\n+/// `Vec`.\n+///\n+/// This trait allows for faster implementations, intended for cases where the\n+/// number of items produced by the iterator is small. There is a blanket impl\n+/// for `T` items, but there is also a fallible impl for `Result<T, E>` items.\n+pub trait CollectAndApply<T, R>: Sized {\n     type Output;\n-    fn intern_with<F>(self, f: F) -> Self::Output\n+\n+    /// Produce a result of type `Self::Output` from `iter`. The result will\n+    /// typically be produced by applying `f` on the elements produced by\n+    /// `iter`, though this may not happen in some impls, e.g. if an error\n+    /// occured during iteration.\n+    fn collect_and_apply<I, F>(iter: I, f: F) -> Self::Output\n     where\n+        I: Iterator<Item = Self>,\n         F: FnOnce(&[T]) -> R;\n }\n \n-impl<I, T, R, E> InternAs<T, R> for I\n-where\n-    E: InternIteratorElement<T, R>,\n-    I: Iterator<Item = E>,\n-{\n-    type Output = E::Output;\n-    fn intern_with<F>(self, f: F) -> Self::Output\n+/// The blanket impl that always collects all elements and applies `f`.\n+impl<T, R> CollectAndApply<T, R> for T {\n+    type Output = R;\n+\n+    /// Equivalent to `f(&iter.collect::<Vec<_>>())`.\n+    fn collect_and_apply<I, F>(mut iter: I, f: F) -> R\n     where\n+        I: Iterator<Item = T>,\n         F: FnOnce(&[T]) -> R,\n     {\n-        E::intern_with(self, f)\n-    }\n-}\n-\n-pub trait InternIteratorElement<T, R>: Sized {\n-    type Output;\n-    fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;\n-}\n-\n-impl<T, R> InternIteratorElement<T, R> for T {\n-    type Output = R;\n-    fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(\n-        mut iter: I,\n-        f: F,\n-    ) -> Self::Output {\n         // This code is hot enough that it's worth specializing for the most\n         // common length lists, to avoid the overhead of `SmallVec` creation.\n         // Lengths 0, 1, and 2 typically account for ~95% of cases. If\n@@ -127,23 +126,17 @@ impl<T, R> InternIteratorElement<T, R> for T {\n     }\n }\n \n-impl<'a, T, R> InternIteratorElement<T, R> for &'a T\n-where\n-    T: Clone + 'a,\n-{\n-    type Output = R;\n-    fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {\n-        // This code isn't hot.\n-        f(&iter.cloned().collect::<SmallVec<[_; 8]>>())\n-    }\n-}\n-\n-impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {\n+/// A fallible impl that will fail, without calling `f`, if there are any\n+/// errors during collection.\n+impl<T, R, E> CollectAndApply<T, R> for Result<T, E> {\n     type Output = Result<R, E>;\n-    fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(\n-        mut iter: I,\n-        f: F,\n-    ) -> Self::Output {\n+\n+    /// Equivalent to `Ok(f(&iter.collect::<Result<Vec<_>>>()?))`.\n+    fn collect_and_apply<I, F>(mut iter: I, f: F) -> Result<R, E>\n+    where\n+        I: Iterator<Item = Result<T, E>>,\n+        F: FnOnce(&[T]) -> R,\n+    {\n         // This code is hot enough that it's worth specializing for the most\n         // common length lists, to avoid the overhead of `SmallVec` creation.\n         // Lengths 0, 1, and 2 typically account for ~95% of cases. If"}, {"sha": "8ddbacc3d7ad4bb7ce2a76edd3e00404746b5034", "filename": "src/tools/clippy/clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -173,7 +173,7 @@ fn is_contains_sig(cx: &LateContext<'_>, call_id: HirId, iter_expr: &Expr<'_>) -\n         && let Some(iter_item) = cx.tcx\n             .associated_items(iter_trait)\n             .find_by_name_and_kind(cx.tcx, Ident::with_dummy_span(Symbol::intern(\"Item\")), AssocKind::Type, iter_trait)\n-        && let substs = cx.tcx.mk_substs([GenericArg::from(typeck.expr_ty_adjusted(iter_expr))].into_iter())\n+        && let substs = cx.tcx.intern_substs(&[GenericArg::from(typeck.expr_ty_adjusted(iter_expr))])\n         && let proj_ty = cx.tcx.mk_projection(iter_item.def_id, substs)\n         && let Ok(item_ty) = cx.tcx.try_normalize_erasing_regions(cx.param_env, proj_ty)\n     {"}, {"sha": "398329e455bfaad443fbbd01bda5bf397657681d", "filename": "src/tools/clippy/clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -11,8 +11,6 @@ use rustc_middle::ty::adjustment::{Adjust, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::subst::GenericArg;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use std::iter;\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for redundant slicing expressions which use the full range, and\n@@ -136,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n                 } else if let Some(target_id) = cx.tcx.lang_items().deref_target() {\n                     if let Ok(deref_ty) = cx.tcx.try_normalize_erasing_regions(\n                         cx.param_env,\n-                        cx.tcx.mk_projection(target_id, cx.tcx.mk_substs(iter::once(GenericArg::from(indexed_ty)))),\n+                        cx.tcx.mk_projection(target_id, cx.tcx.intern_substs(&[GenericArg::from(indexed_ty)])),\n                     ) {\n                         if deref_ty == expr_ty {\n                             let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;"}, {"sha": "ebb71b57ae395fa3da5a148c218afdba86e399d4", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9842c73bcd78ca4c2ec56f3e529aed79bd37df7/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=a9842c73bcd78ca4c2ec56f3e529aed79bd37df7", "patch": "@@ -363,7 +363,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n                 tcx,\n                 ty::ParamEnv::reveal_all(),\n                 start_id,\n-                tcx.mk_substs(::std::iter::once(ty::subst::GenericArg::from(main_ret_ty))),\n+                tcx.intern_substs(&[ty::subst::GenericArg::from(main_ret_ty)]),\n             )\n             .unwrap()\n             .unwrap();"}]}