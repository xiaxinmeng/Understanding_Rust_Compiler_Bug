{"sha": "7b7d1d6c4835d4e84517cc825aacb817d6435696", "node_id": "C_kwDOAAsO6NoAKDdiN2QxZDZjNDgzNWQ0ZTg0NTE3Y2M4MjVhYWNiODE3ZDY0MzU2OTY", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-05-03T07:08:38Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-05-03T10:26:17Z"}, "message": "Don't use futexes on netbsd.\n\nThe latest NetBSD release doesn't include the futex syscall yet.", "tree": {"sha": "0208f4a2da770cecbb84447f3e08599b6f6acb82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0208f4a2da770cecbb84447f3e08599b6f6acb82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b7d1d6c4835d4e84517cc825aacb817d6435696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b7d1d6c4835d4e84517cc825aacb817d6435696", "html_url": "https://github.com/rust-lang/rust/commit/7b7d1d6c4835d4e84517cc825aacb817d6435696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b7d1d6c4835d4e84517cc825aacb817d6435696/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b9c7e6f1a0283c2374760efcac55aad96d10ac6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9c7e6f1a0283c2374760efcac55aad96d10ac6", "html_url": "https://github.com/rust-lang/rust/commit/1b9c7e6f1a0283c2374760efcac55aad96d10ac6"}], "stats": {"total": 49, "additions": 5, "deletions": 44}, "files": [{"sha": "f91367da89c749120d20b023d1f4642999b0d76e", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 5, "deletions": 41, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7b7d1d6c4835d4e84517cc825aacb817d6435696/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7d1d6c4835d4e84517cc825aacb817d6435696/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=7b7d1d6c4835d4e84517cc825aacb817d6435696", "patch": "@@ -4,27 +4,18 @@\n     all(target_os = \"emscripten\", target_feature = \"atomics\"),\n     target_os = \"freebsd\",\n     target_os = \"openbsd\",\n-    target_os = \"netbsd\",\n     target_os = \"dragonfly\",\n ))]\n \n use crate::sync::atomic::AtomicU32;\n use crate::time::Duration;\n \n-#[cfg(target_os = \"netbsd\")]\n-pub const SYS___futex: i32 = 166;\n-\n /// Wait for a futex_wake operation to wake us.\n ///\n /// Returns directly if the futex doesn't hold the expected value.\n ///\n /// Returns false on timeout, and true in all other cases.\n-#[cfg(any(\n-    target_os = \"linux\",\n-    target_os = \"android\",\n-    target_os = \"freebsd\",\n-    target_os = \"netbsd\"\n-))]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"freebsd\"))]\n pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n     use super::time::Timespec;\n     use crate::ptr::null;\n@@ -65,19 +56,6 @@ pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -\n                         crate::ptr::invalid_mut(umtx_timeout_size),\n                         umtx_timeout_ptr as *mut _,\n                     )\n-                } else if #[cfg(target_os = \"netbsd\")] {\n-                    // Netbsd's futex syscall takes addr2 and val2 as separate arguments.\n-                    // (Both are unused for FUTEX_WAIT[_BITSET].)\n-                    libc::syscall(\n-                        SYS___futex,\n-                        futex as *const AtomicU32,\n-                        libc::FUTEX_WAIT_BITSET | libc::FUTEX_PRIVATE_FLAG,\n-                        expected,\n-                        timespec.as_ref().map_or(null(), |t| &t.t as *const libc::timespec),\n-                        null::<u32>(), // addr2: This argument is unused for FUTEX_WAIT_BITSET.\n-                        0,             // val2: This argument is unused for FUTEX_WAIT_BITSET.\n-                        !0u32,         // val3 / bitmask: A full bitmask, to make it behave like a regular FUTEX_WAIT.\n-                    )\n                 } else {\n                     libc::syscall(\n                         libc::SYS_futex,\n@@ -106,34 +84,20 @@ pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -\n /// or false if no thread was waiting on this futex.\n ///\n /// On some platforms, this always returns false.\n-#[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub fn futex_wake(futex: &AtomicU32) -> bool {\n     let ptr = futex as *const AtomicU32;\n     let op = libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG;\n-    unsafe {\n-        cfg_if::cfg_if! {\n-            if #[cfg(target_os = \"netbsd\")] {\n-                libc::syscall(SYS___futex, ptr, op, 1) > 0\n-            } else {\n-                libc::syscall(libc::SYS_futex, ptr, op, 1) > 0\n-            }\n-        }\n-    }\n+    unsafe { libc::syscall(libc::SYS_futex, ptr, op, 1) > 0 }\n }\n \n /// Wake up all threads that are waiting on futex_wait on this futex.\n-#[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub fn futex_wake_all(futex: &AtomicU32) {\n     let ptr = futex as *const AtomicU32;\n     let op = libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG;\n     unsafe {\n-        cfg_if::cfg_if! {\n-            if #[cfg(target_os = \"netbsd\")] {\n-                libc::syscall(SYS___futex, ptr, op, i32::MAX);\n-            } else {\n-                libc::syscall(libc::SYS_futex, ptr, op, i32::MAX);\n-            }\n-        }\n+        libc::syscall(libc::SYS_futex, ptr, op, i32::MAX);\n     }\n }\n "}, {"sha": "04c5c489fc9b94bb44fc97a40e265e88416bdb28", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b7d1d6c4835d4e84517cc825aacb817d6435696/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7d1d6c4835d4e84517cc825aacb817d6435696/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=7b7d1d6c4835d4e84517cc825aacb817d6435696", "patch": "@@ -5,7 +5,6 @@ cfg_if::cfg_if! {\n         all(target_os = \"emscripten\", target_feature = \"atomics\"),\n         target_os = \"freebsd\",\n         target_os = \"openbsd\",\n-        target_os = \"netbsd\",\n         target_os = \"dragonfly\",\n     ))] {\n         mod futex;"}, {"sha": "cf37c01598bf30efb9c86600559654dc494b9f96", "filename": "library/std/src/sys/unix/thread_parker.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b7d1d6c4835d4e84517cc825aacb817d6435696/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7d1d6c4835d4e84517cc825aacb817d6435696/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs?ref=7b7d1d6c4835d4e84517cc825aacb817d6435696", "patch": "@@ -6,7 +6,6 @@\n     all(target_os = \"emscripten\", target_feature = \"atomics\"),\n     target_os = \"freebsd\",\n     target_os = \"openbsd\",\n-    target_os = \"netbsd\",\n     target_os = \"dragonfly\",\n )))]\n "}, {"sha": "c789a388e05adf77e5992c424a1db6d25813616c", "filename": "library/std/src/sys_common/thread_parker/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b7d1d6c4835d4e84517cc825aacb817d6435696/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7d1d6c4835d4e84517cc825aacb817d6435696/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs?ref=7b7d1d6c4835d4e84517cc825aacb817d6435696", "patch": "@@ -5,7 +5,6 @@ cfg_if::cfg_if! {\n         all(target_arch = \"wasm32\", target_feature = \"atomics\"),\n         target_os = \"freebsd\",\n         target_os = \"openbsd\",\n-        target_os = \"netbsd\",\n         target_os = \"dragonfly\",\n     ))] {\n         mod futex;"}]}