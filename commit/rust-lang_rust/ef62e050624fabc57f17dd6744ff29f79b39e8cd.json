{"sha": "ef62e050624fabc57f17dd6744ff29f79b39e8cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNjJlMDUwNjI0ZmFiYzU3ZjE3ZGQ2NzQ0ZmYyOWY3OWIzOWU4Y2Q=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-10T21:35:10Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-10T23:29:35Z"}, "message": "Make wording less confusing", "tree": {"sha": "7c4efc6426d29462432be5512aed6d250997e7e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c4efc6426d29462432be5512aed6d250997e7e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef62e050624fabc57f17dd6744ff29f79b39e8cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef62e050624fabc57f17dd6744ff29f79b39e8cd", "html_url": "https://github.com/rust-lang/rust/commit/ef62e050624fabc57f17dd6744ff29f79b39e8cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef62e050624fabc57f17dd6744ff29f79b39e8cd/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14e6947fa4b9a144802869286a937c987d6a3c54", "url": "https://api.github.com/repos/rust-lang/rust/commits/14e6947fa4b9a144802869286a937c987d6a3c54", "html_url": "https://github.com/rust-lang/rust/commit/14e6947fa4b9a144802869286a937c987d6a3c54"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "02e7d97ccdf7b91796d780e00328ac160985f213", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ef62e050624fabc57f17dd6744ff29f79b39e8cd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef62e050624fabc57f17dd6744ff29f79b39e8cd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ef62e050624fabc57f17dd6744ff29f79b39e8cd", "patch": "@@ -1520,31 +1520,25 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n                             (0, _) => (\"const\", \"consts\", None),\n                             _ => (\"type or const\", \"types or consts\", None),\n                         };\n-                        let mut err = struct_span_err!(\n+                        struct_span_err!(\n                             tcx.sess,\n                             item.span,\n                             E0044,\n                             \"foreign items may not have {} parameters\",\n                             kinds,\n-                        );\n-                        err.span_label(\n+                        ).span_label(\n                             item.span,\n                             &format!(\"can't have {} parameters\", kinds),\n-                        );\n-                        // FIXME: once we start storing spans for type arguments, turn this into a\n-                        // suggestion.\n-                        err.help(&format!(\n-                            \"use specialization instead of {} parameters by replacing \\\n-                            them with concrete {}{}\",\n-                            kinds,\n-                            kinds_pl,\n-                            if let Some(egs) = egs {\n-                                format!(\" like `{}`\", egs)\n-                            } else {\n-                                \"\".to_string()\n-                            },\n-                        ));\n-                        err.emit();\n+                        ).help(\n+                            // FIXME: once we start storing spans for type arguments, turn this\n+                            // into a suggestion.\n+                            &format!(\n+                                \"replace the {} parameters with concrete {}{}\",\n+                                kinds,\n+                                kinds_pl,\n+                                egs.map(|egs| format!(\" like `{}`\", egs)).unwrap_or_default(),\n+                            ),\n+                        ).emit();\n                     }\n \n                     if let hir::ForeignItemKind::Fn(ref fn_decl, _, _) = item.node {"}, {"sha": "999feed2d3b20592d1f06e879d741d2c5de2214b", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef62e050624fabc57f17dd6744ff29f79b39e8cd/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef62e050624fabc57f17dd6744ff29f79b39e8cd/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr?ref=ef62e050624fabc57f17dd6744ff29f79b39e8cd", "patch": "@@ -12,15 +12,15 @@ error[E0044]: foreign items may not have const parameters\n LL |     fn foo<const X: usize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ can't have const parameters\n    |\n-   = help: use specialization instead of const parameters by replacing them with concrete consts\n+   = help: replace the const parameters with concrete consts\n \n error[E0044]: foreign items may not have type or const parameters\n   --> $DIR/foreign-item-const-parameter.rs:7:5\n    |\n LL |     fn bar<T, const X: usize>(_: T);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't have type or const parameters\n    |\n-   = help: use specialization instead of type or const parameters by replacing them with concrete types or consts\n+   = help: replace the type or const parameters with concrete types or consts\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9eee9c31d3c38440154cfdccd97a1adb5aa179da", "filename": "src/test/ui/error-codes/E0044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef62e050624fabc57f17dd6744ff29f79b39e8cd/src%2Ftest%2Fui%2Ferror-codes%2FE0044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef62e050624fabc57f17dd6744ff29f79b39e8cd/src%2Ftest%2Fui%2Ferror-codes%2FE0044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0044.rs?ref=ef62e050624fabc57f17dd6744ff29f79b39e8cd", "patch": "@@ -1,7 +1,7 @@\n extern {\n     fn sqrt<T>(f: T) -> T;\n     //~^ ERROR foreign items may not have type parameters [E0044]\n-    //~| HELP use specialization instead of type parameters by replacing them with concrete types\n+    //~| HELP replace the type parameters with concrete types\n     //~| NOTE can't have type parameters\n }\n "}, {"sha": "e889c167b98d296d32eabf731cb2cc3491aae2d3", "filename": "src/test/ui/error-codes/E0044.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef62e050624fabc57f17dd6744ff29f79b39e8cd/src%2Ftest%2Fui%2Ferror-codes%2FE0044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef62e050624fabc57f17dd6744ff29f79b39e8cd/src%2Ftest%2Fui%2Ferror-codes%2FE0044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0044.stderr?ref=ef62e050624fabc57f17dd6744ff29f79b39e8cd", "patch": "@@ -4,7 +4,7 @@ error[E0044]: foreign items may not have type parameters\n LL |     fn sqrt<T>(f: T) -> T;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ can't have type parameters\n    |\n-   = help: use specialization instead of type parameters by replacing them with concrete types like `u32`\n+   = help: replace the type parameters with concrete types like `u32`\n \n error: aborting due to previous error\n "}, {"sha": "c90215b612d4c834c192a1d8b3924f68ccec0ddb", "filename": "src/test/ui/generic/generic-extern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef62e050624fabc57f17dd6744ff29f79b39e8cd/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef62e050624fabc57f17dd6744ff29f79b39e8cd/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-extern.stderr?ref=ef62e050624fabc57f17dd6744ff29f79b39e8cd", "patch": "@@ -4,7 +4,7 @@ error[E0044]: foreign items may not have type parameters\n LL |     fn foo<T>();\n    |     ^^^^^^^^^^^^ can't have type parameters\n    |\n-   = help: use specialization instead of type parameters by replacing them with concrete types like `u32`\n+   = help: replace the type parameters with concrete types like `u32`\n \n error: aborting due to previous error\n "}]}