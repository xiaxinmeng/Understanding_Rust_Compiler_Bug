{"sha": "51d146a56a0598b11efe79b5e2e6d5a70698abc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZDE0NmE1NmEwNTk4YjExZWZlNzliNWUyZTZkNWE3MDY5OGFiYzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-26T17:44:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-27T00:49:35Z"}, "message": "rollup merge of #19266: aochagavia/const\n\nWith this PR, the following code works:\n\n```\n#![feature(tuple_indexing)]\nstruct MyStruct { field1: uint }\n\nconst S: MyStruct = MyStruct { field1: 42u };\nconst T: (uint,) = (42u,);\n\nstruct ConstCheck {\n    array1: [int, ..S.field1],\n    array2: [int, ..T.0],\n}\n```\n\nCloses https://github.com/rust-lang/rust/issues/19244\nRelated https://github.com/rust-lang/rust/issues/19265", "tree": {"sha": "7176e06878850956dc6ecd098ded3943eeaab76e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7176e06878850956dc6ecd098ded3943eeaab76e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51d146a56a0598b11efe79b5e2e6d5a70698abc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51d146a56a0598b11efe79b5e2e6d5a70698abc1", "html_url": "https://github.com/rust-lang/rust/commit/51d146a56a0598b11efe79b5e2e6d5a70698abc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51d146a56a0598b11efe79b5e2e6d5a70698abc1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74f0ceba6c956e8a332993db8dd667de3c461aa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f0ceba6c956e8a332993db8dd667de3c461aa2", "html_url": "https://github.com/rust-lang/rust/commit/74f0ceba6c956e8a332993db8dd667de3c461aa2"}, {"sha": "080e625dae129aad7db4e69d74fa0f767f700325", "url": "https://api.github.com/repos/rust-lang/rust/commits/080e625dae129aad7db4e69d74fa0f767f700325", "html_url": "https://github.com/rust-lang/rust/commit/080e625dae129aad7db4e69d74fa0f767f700325"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "41901a3f4315de778d671322cdb6638a88d6eaec", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/51d146a56a0598b11efe79b5e2e6d5a70698abc1/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d146a56a0598b11efe79b5e2e6d5a70698abc1/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=51d146a56a0598b11efe79b5e2e6d5a70698abc1", "patch": "@@ -567,6 +567,34 @@ pub fn eval_const_expr_partial(tcx: &ty::ctxt, e: &Expr) -> Result<const_val, St\n             None => Ok(const_int(0i64))\n         }\n       }\n+      ast::ExprTupField(ref base, index) => {\n+        // Get the base tuple if it is constant\n+        if let Some(&ast::ExprTup(ref fields)) = lookup_const(tcx, &**base).map(|s| &s.node) {\n+            // Check that the given index is within bounds and evaluate its value\n+            if fields.len() > index.node {\n+                return eval_const_expr_partial(tcx, &*fields[index.node])\n+            } else {\n+                return Err(\"tuple index out of bounds\".to_string())\n+            }\n+        }\n+\n+        Err(\"non-constant struct in constant expr\".to_string())\n+      }\n+      ast::ExprField(ref base, field_name) => {\n+        // Get the base expression if it is a struct and it is constant\n+        if let Some(&ast::ExprStruct(_, ref fields, _)) = lookup_const(tcx, &**base)\n+                                                            .map(|s| &s.node) {\n+            // Check that the given field exists and evaluate it\n+            if let Some(f) = fields.iter().find(|f|\n+                                           f.ident.node.as_str() == field_name.node.as_str()) {\n+                return eval_const_expr_partial(tcx, &*f.expr)\n+            } else {\n+                return Err(\"nonexistent struct field\".to_string())\n+            }\n+        }\n+\n+        Err(\"non-constant struct in constant expr\".to_string())\n+      }\n       _ => Err(\"unsupported constant expr\".to_string())\n     }\n }"}, {"sha": "4fcbb878890545a00d7a16af07ecd489a5663a33", "filename": "src/test/compile-fail/issue-19244-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/51d146a56a0598b11efe79b5e2e6d5a70698abc1/src%2Ftest%2Fcompile-fail%2Fissue-19244-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d146a56a0598b11efe79b5e2e6d5a70698abc1/src%2Ftest%2Fcompile-fail%2Fissue-19244-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19244-1.rs?ref=51d146a56a0598b11efe79b5e2e6d5a70698abc1", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(tuple_indexing)]\n+\n+const TUP: (uint,) = (42,);\n+\n+fn main() {\n+    let a: [int, ..TUP.1];\n+    //~^ ERROR expected constant expr for array length: tuple index out of bounds\n+}"}, {"sha": "d9aeecc02222ca7d291be6fdbf11ad29895663ee", "filename": "src/test/compile-fail/issue-19244-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/51d146a56a0598b11efe79b5e2e6d5a70698abc1/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d146a56a0598b11efe79b5e2e6d5a70698abc1/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs?ref=51d146a56a0598b11efe79b5e2e6d5a70698abc1", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct MyStruct { field: uint }\n+const STRUCT: MyStruct = MyStruct { field: 42 };\n+\n+fn main() {\n+    let a: [int, ..STRUCT.nonexistent_field];\n+    //~^ ERROR expected constant expr for array length: nonexistent struct field\n+}"}, {"sha": "fecddea13e0f88855192a837826cdf0217d8550b", "filename": "src/test/run-pass/issue-19244.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/51d146a56a0598b11efe79b5e2e6d5a70698abc1/src%2Ftest%2Frun-pass%2Fissue-19244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d146a56a0598b11efe79b5e2e6d5a70698abc1/src%2Ftest%2Frun-pass%2Fissue-19244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19244.rs?ref=51d146a56a0598b11efe79b5e2e6d5a70698abc1", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(tuple_indexing)]\n+\n+struct MyStruct { field: uint }\n+const STRUCT: MyStruct = MyStruct { field: 42 };\n+const TUP: (uint,) = (43,);\n+\n+fn main() {\n+    let a = [0i, ..STRUCT.field];\n+    let b = [0i, ..TUP.0];\n+\n+    assert!(a.len() == 42);\n+    assert!(b.len() == 43);\n+}"}]}