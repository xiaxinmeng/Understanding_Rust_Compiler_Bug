{"sha": "014c6f208e59534cf36b11fdf43f8c90a304073f", "node_id": "C_kwDOAAsO6NoAKDAxNGM2ZjIwOGU1OTUzNGNmMzZiMTFmZGY0M2Y4YzkwYTMwNDA3M2Y", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-14T12:29:10Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-14T12:31:49Z"}, "message": "Use `ptr::Alignment` for extra coolness points", "tree": {"sha": "a280aac6dfb6f8848ed078796114fe6d334567e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a280aac6dfb6f8848ed078796114fe6d334567e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/014c6f208e59534cf36b11fdf43f8c90a304073f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/014c6f208e59534cf36b11fdf43f8c90a304073f", "html_url": "https://github.com/rust-lang/rust/commit/014c6f208e59534cf36b11fdf43f8c90a304073f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/014c6f208e59534cf36b11fdf43f8c90a304073f/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36f5918bf169a7ab5ae24a5aad12dd6ecd20b8c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f5918bf169a7ab5ae24a5aad12dd6ecd20b8c4", "html_url": "https://github.com/rust-lang/rust/commit/36f5918bf169a7ab5ae24a5aad12dd6ecd20b8c4"}], "stats": {"total": 56, "additions": 27, "deletions": 29}, "files": [{"sha": "7ac073539fb4b95521ad508116135c197945b88d", "filename": "compiler/rustc_data_structures/src/aligned.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_data_structures%2Fsrc%2Faligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_data_structures%2Fsrc%2Faligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Faligned.rs?ref=014c6f208e59534cf36b11fdf43f8c90a304073f", "patch": "@@ -1,10 +1,10 @@\n-use std::mem;\n+use std::ptr::Alignment;\n \n /// Returns the ABI-required minimum alignment of a type in bytes.\n ///\n /// This is equivalent to [`mem::align_of`], but also works for some unsized\n /// types (e.g. slices or rustc's `List`s).\n-pub const fn align_of<T: ?Sized + Aligned>() -> usize {\n+pub const fn align_of<T: ?Sized + Aligned>() -> Alignment {\n     T::ALIGN\n }\n \n@@ -19,13 +19,13 @@ pub const fn align_of<T: ?Sized + Aligned>() -> usize {\n /// [`mem::align_of<Self>()`]: mem::align_of\n pub unsafe trait Aligned {\n     /// Alignment of `Self`.\n-    const ALIGN: usize;\n+    const ALIGN: Alignment;\n }\n \n unsafe impl<T> Aligned for T {\n-    const ALIGN: usize = mem::align_of::<Self>();\n+    const ALIGN: Alignment = Alignment::of::<Self>();\n }\n \n unsafe impl<T> Aligned for [T] {\n-    const ALIGN: usize = mem::align_of::<T>();\n+    const ALIGN: Alignment = Alignment::of::<T>();\n }"}, {"sha": "7768e0fdeb13b6e9ec6d581727305b5070013240", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=014c6f208e59534cf36b11fdf43f8c90a304073f", "patch": "@@ -30,6 +30,7 @@\n #![feature(lint_reasons)]\n #![feature(unwrap_infallible)]\n #![feature(strict_provenance)]\n+#![feature(ptr_alignment_type)]\n #![allow(rustc::default_hash_types)]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "c26bffac67823f968f4fb7ab8a45a9af9cdcbd59", "filename": "compiler/rustc_data_structures/src/tagged_ptr.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs?ref=014c6f208e59534cf36b11fdf43f8c90a304073f", "patch": "@@ -70,13 +70,13 @@ pub unsafe trait Pointer: Deref {\n     /// # struct T;\n     /// # impl Deref for T { type Target = u8; fn deref(&self) -> &u8 { &0 } }\n     /// # impl T {\n-    /// const BITS: usize = bits_for::<<Self as Deref>::Target>();\n+    /// const BITS: u32 = bits_for::<<Self as Deref>::Target>();\n     /// # }\n     /// ```\n     ///\n     /// [`BITS`]: Pointer::BITS\n     /// [`Self::Target`]: Deref::Target\n-    const BITS: usize;\n+    const BITS: u32;\n \n     /// Turns this pointer into a raw, non-null pointer.\n     ///\n@@ -118,7 +118,7 @@ pub unsafe trait Tag: Copy {\n     /// value.\n     ///\n     /// [`into_usize`]: Tag::into_usize\n-    const BITS: usize;\n+    const BITS: u32;\n \n     /// Turns this tag into an integer.\n     ///\n@@ -142,7 +142,7 @@ pub unsafe trait Tag: Copy {\n }\n \n unsafe impl<T: ?Sized + Aligned> Pointer for Box<T> {\n-    const BITS: usize = bits_for::<Self::Target>();\n+    const BITS: u32 = bits_for::<Self::Target>();\n \n     #[inline]\n     fn into_ptr(self) -> NonNull<T> {\n@@ -158,7 +158,7 @@ unsafe impl<T: ?Sized + Aligned> Pointer for Box<T> {\n }\n \n unsafe impl<T: ?Sized + Aligned> Pointer for Rc<T> {\n-    const BITS: usize = bits_for::<Self::Target>();\n+    const BITS: u32 = bits_for::<Self::Target>();\n \n     #[inline]\n     fn into_ptr(self) -> NonNull<T> {\n@@ -174,7 +174,7 @@ unsafe impl<T: ?Sized + Aligned> Pointer for Rc<T> {\n }\n \n unsafe impl<T: ?Sized + Aligned> Pointer for Arc<T> {\n-    const BITS: usize = bits_for::<Self::Target>();\n+    const BITS: u32 = bits_for::<Self::Target>();\n \n     #[inline]\n     fn into_ptr(self) -> NonNull<T> {\n@@ -190,7 +190,7 @@ unsafe impl<T: ?Sized + Aligned> Pointer for Arc<T> {\n }\n \n unsafe impl<'a, T: 'a + ?Sized + Aligned> Pointer for &'a T {\n-    const BITS: usize = bits_for::<Self::Target>();\n+    const BITS: u32 = bits_for::<Self::Target>();\n \n     #[inline]\n     fn into_ptr(self) -> NonNull<T> {\n@@ -206,7 +206,7 @@ unsafe impl<'a, T: 'a + ?Sized + Aligned> Pointer for &'a T {\n }\n \n unsafe impl<'a, T: 'a + ?Sized + Aligned> Pointer for &'a mut T {\n-    const BITS: usize = bits_for::<Self::Target>();\n+    const BITS: u32 = bits_for::<Self::Target>();\n \n     #[inline]\n     fn into_ptr(self) -> NonNull<T> {\n@@ -223,14 +223,8 @@ unsafe impl<'a, T: 'a + ?Sized + Aligned> Pointer for &'a mut T {\n \n /// Returns the number of bits available for use for tags in a pointer to `T`\n /// (this is based on `T`'s alignment).\n-pub const fn bits_for<T: ?Sized + Aligned>() -> usize {\n-    let bits = crate::aligned::align_of::<T>().trailing_zeros();\n-\n-    // This is a replacement for `.try_into().unwrap()` unavailable in `const`\n-    // (it's fine to make an assert here, since this is only called in compile time)\n-    assert!((bits as u128) < usize::MAX as u128);\n-\n-    bits as usize\n+pub const fn bits_for<T: ?Sized + Aligned>() -> u32 {\n+    crate::aligned::align_of::<T>().as_nonzero().trailing_zeros()\n }\n \n /// A tag type used in [`CopyTaggedPtr`] and [`TaggedPtr`] tests.\n@@ -245,7 +239,7 @@ enum Tag2 {\n \n #[cfg(test)]\n unsafe impl Tag for Tag2 {\n-    const BITS: usize = 2;\n+    const BITS: u32 = 2;\n \n     fn into_usize(self) -> usize {\n         self as _"}, {"sha": "691e92f196a2677601bec7ffddb2a6a584019023", "filename": "compiler/rustc_data_structures/src/tagged_ptr/copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs?ref=014c6f208e59534cf36b11fdf43f8c90a304073f", "patch": "@@ -116,7 +116,7 @@ where\n         self.packed = Self::pack(self.pointer_raw(), tag);\n     }\n \n-    const TAG_BIT_SHIFT: usize = usize::BITS as usize - T::BITS;\n+    const TAG_BIT_SHIFT: u32 = usize::BITS - T::BITS;\n     const ASSERTION: () = { assert!(T::BITS <= P::BITS) };\n \n     /// Pack pointer `ptr` that comes from [`P::into_ptr`] with a `tag`,\n@@ -298,7 +298,7 @@ where\n /// enum Tag2 { B00 = 0b00, B01 = 0b01, B10 = 0b10, B11 = 0b11 };\n ///\n /// unsafe impl Tag for Tag2 {\n-///     const BITS: usize = 2;\n+///     const BITS: u32 = 2;\n ///\n ///     fn into_usize(self) -> usize { todo!() }\n ///     unsafe fn from_usize(tag: usize) -> Self { todo!() }"}, {"sha": "d418c06b7ebb4ac463379562753f9c92d83ecf7b", "filename": "compiler/rustc_data_structures/src/tagged_ptr/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs?ref=014c6f208e59534cf36b11fdf43f8c90a304073f", "patch": "@@ -150,7 +150,7 @@ where\n /// enum Tag2 { B00 = 0b00, B01 = 0b01, B10 = 0b10, B11 = 0b11 };\n ///\n /// unsafe impl Tag for Tag2 {\n-///     const BITS: usize = 2;\n+///     const BITS: u32 = 2;\n ///\n ///     fn into_usize(self) -> usize { todo!() }\n ///     unsafe fn from_usize(tag: usize) -> Self { todo!() }"}, {"sha": "51ed66dbafcc45ac7bce6def6eda00d463cff2e3", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=014c6f208e59534cf36b11fdf43f8c90a304073f", "patch": "@@ -59,6 +59,7 @@\n #![feature(result_option_inspect)]\n #![feature(const_option)]\n #![feature(trait_alias)]\n+#![feature(ptr_alignment_type)]\n #![recursion_limit = \"512\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "30f036e471c4260b35afa8a1dbca11d9e1ca4da8", "filename": "compiler/rustc_middle/src/ty/list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs?ref=014c6f208e59534cf36b11fdf43f8c90a304073f", "patch": "@@ -1,5 +1,5 @@\n use crate::arena::Arena;\n-use rustc_data_structures::aligned::Aligned;\n+use rustc_data_structures::aligned::{align_of, Aligned};\n use rustc_serialize::{Encodable, Encoder};\n use std::alloc::Layout;\n use std::cmp::Ordering;\n@@ -203,13 +203,13 @@ unsafe impl<T: Sync> Sync for List<T> {}\n // Layouts of `Equivalent<T>` and `List<T>` are the same, modulo opaque tail,\n // thus aligns of `Equivalent<T>` and `List<T>` must be the same.\n unsafe impl<T> Aligned for List<T> {\n-    const ALIGN: usize = {\n+    const ALIGN: ptr::Alignment = {\n         #[repr(C)]\n         struct Equivalent<T> {\n             _len: usize,\n             _data: [T; 0],\n         }\n \n-        mem::align_of::<Equivalent<T>>()\n+        align_of::<Equivalent<T>>()\n     };\n }"}, {"sha": "3d47f56d0312244b3e692738ee38e1b2fb832fe1", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014c6f208e59534cf36b11fdf43f8c90a304073f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=014c6f208e59534cf36b11fdf43f8c90a304073f", "patch": "@@ -1626,7 +1626,8 @@ struct ParamTag {\n }\n \n unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {\n-    const BITS: usize = 2;\n+    const BITS: u32 = 2;\n+\n     #[inline]\n     fn into_usize(self) -> usize {\n         match self {\n@@ -1636,6 +1637,7 @@ unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {\n             Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,\n         }\n     }\n+\n     #[inline]\n     unsafe fn from_usize(ptr: usize) -> Self {\n         match ptr {"}]}