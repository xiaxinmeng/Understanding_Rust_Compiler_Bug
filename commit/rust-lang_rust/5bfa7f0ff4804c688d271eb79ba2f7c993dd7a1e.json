{"sha": "5bfa7f0ff4804c688d271eb79ba2f7c993dd7a1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZmE3ZjBmZjQ4MDRjNjg4ZDI3MWViNzliYTJmN2M5OTNkZDdhMWU=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-09T22:06:02Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-09T22:09:14Z"}, "message": "save_analysis: fix enum reference to point to variant rather than constructor\n\nFixes #61302", "tree": {"sha": "fe10a9f075ac949740300a8da688053d670a184c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe10a9f075ac949740300a8da688053d670a184c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bfa7f0ff4804c688d271eb79ba2f7c993dd7a1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bfa7f0ff4804c688d271eb79ba2f7c993dd7a1e", "html_url": "https://github.com/rust-lang/rust/commit/5bfa7f0ff4804c688d271eb79ba2f7c993dd7a1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bfa7f0ff4804c688d271eb79ba2f7c993dd7a1e/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9015c414331fc94eb9e95e878601c0a7cf3db911", "url": "https://api.github.com/repos/rust-lang/rust/commits/9015c414331fc94eb9e95e878601c0a7cf3db911", "html_url": "https://github.com/rust-lang/rust/commit/9015c414331fc94eb9e95e878601c0a7cf3db911"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "8a456c903ecdfef473b0a50355ebbc088f346598", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5bfa7f0ff4804c688d271eb79ba2f7c993dd7a1e/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfa7f0ff4804c688d271eb79ba2f7c993dd7a1e/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=5bfa7f0ff4804c688d271eb79ba2f7c993dd7a1e", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::ast::{self};\n use rustc_ast::util::comments::strip_doc_comment_decoration;\n use rustc_ast_pretty::pprust::attribute_to_string;\n use rustc_hir as hir;\n-use rustc_hir::def::{CtorOf, DefKind as HirDefKind, Res};\n+use rustc_hir::def::{DefKind as HirDefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::Node;\n@@ -708,20 +708,16 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             Res::Def(HirDefKind::ConstParam, def_id) => {\n                 Some(Ref { kind: RefKind::Variable, span, ref_id: id_from_def_id(def_id) })\n             }\n-            Res::Def(HirDefKind::Ctor(CtorOf::Struct, ..), def_id) => {\n-                // This is a reference to a tuple struct where the def_id points\n+            Res::Def(HirDefKind::Ctor(_, ..), def_id) => {\n+                // This is a reference to a tuple struct or an enum variant where the def_id points\n                 // to an invisible constructor function. That is not a very useful\n-                // def, so adjust to point to the tuple struct itself.\n+                // def, so adjust to point to the tuple struct or enum variant itself.\n                 let parent_def_id = self.tcx.parent(def_id).unwrap();\n                 Some(Ref { kind: RefKind::Type, span, ref_id: id_from_def_id(parent_def_id) })\n             }\n-            Res::Def(\n-                HirDefKind::Static\n-                | HirDefKind::Const\n-                | HirDefKind::AssocConst\n-                | HirDefKind::Ctor(..),\n-                _,\n-            ) => Some(Ref { kind: RefKind::Variable, span, ref_id: id_from_def_id(res.def_id()) }),\n+            Res::Def(HirDefKind::Static | HirDefKind::Const | HirDefKind::AssocConst, _) => {\n+                Some(Ref { kind: RefKind::Variable, span, ref_id: id_from_def_id(res.def_id()) })\n+            }\n             Res::Def(HirDefKind::AssocFn, decl_id) => {\n                 let def_id = if decl_id.is_local() {\n                     let ti = self.tcx.associated_item(decl_id);"}]}