{"sha": "f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "node_id": "C_kwDOAAsO6NoAKGYwNDExZmZjZWJjZDdmNzVhYzAyZWQ0NWZlYjUzZmZkMDdiNzUzOTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-30T18:48:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-30T18:48:12Z"}, "message": "Auto merge of #111881 - lcnr:leak-check, r=nikomatsakis,jackh726\n\nrefactor and cleanup the leak check, add it to new solver\n\nended up being a bit more involved than I wanted but is hopefully still easy enough to review as a single PR, can split it into separate ones otherwise.\n\nthis can be reviewed commit by commit:\na473d55cdb9284aa2b01282d1b529a2a4d26547b 31a686646534ca006d906ec757ece4e771d6f973 949039c107852a5e36361c08b62821a0613656f5 242917bf5170d9a723c6c8e23e9d9d0c2fa8dc9d ed2b25a7aa28be3184be9e3022c2796a30eaad87 are all pretty straightforward.\n\n03dd83b4c3f4ff27558f5c8ab859bd9f83db1d04 makes it easier to refactor coherence in a later commit, see the commit description, cc `@oli-obk`\n\n4fe311d807a77b6270f384e41689bf5d58f46aec I don't quite remember what we wanted to test here, this definitely doesn't test that the occurs check doesn't cause incorrect errors in coherence, also cc `@oli-obk` here. I may end up writing a new test for this myself later.\n\n5c200d88a91b75bd0875b973150655bd581ef97a is the main refactor of the leak check, changing it to take the `outer_universe` instead of getting it from a snapshot. Using a snapshot requires us to be in a probe which we aren't in the new solver, it also just feels dirty as snapshots don't really have anything to do with universes.\n\nwith all of this cfc230d54188d9c7ed867a9a0d1f51be77b485f9 is now kind of trivial.\n\nr? `@nikomatsakis`", "tree": {"sha": "3c51463162839445db026e9ecbbde74c583f1510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c51463162839445db026e9ecbbde74c583f1510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "html_url": "https://github.com/rust-lang/rust/commit/f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9251b6ce14209070b3de9aa9a2d42622b51636e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9251b6ce14209070b3de9aa9a2d42622b51636e", "html_url": "https://github.com/rust-lang/rust/commit/a9251b6ce14209070b3de9aa9a2d42622b51636e"}, {"sha": "0b81f992e9cc41d4fb957f1b9d2a99b1f73f8160", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b81f992e9cc41d4fb957f1b9d2a99b1f73f8160", "html_url": "https://github.com/rust-lang/rust/commit/0b81f992e9cc41d4fb957f1b9d2a99b1f73f8160"}], "stats": {"total": 564, "additions": 320, "deletions": 244}, "files": [{"sha": "905781ec8f59412b337766d5c0cdae819bc83956", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -808,6 +808,8 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         G: FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>>,\n     {\n         self.commit_if_ok(|snapshot| {\n+            let outer_universe = self.infcx.universe();\n+\n             let result = if let ty::FnPtr(fn_ty_b) = b.kind()\n                 && let (hir::Unsafety::Normal, hir::Unsafety::Unsafe) =\n                     (fn_ty_a.unsafety(), fn_ty_b.unsafety())\n@@ -824,7 +826,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             // want the coerced type to be the actual supertype of these two,\n             // but for now, we want to just error to ensure we don't lock\n             // ourselves into a specific behavior with NLL.\n-            self.leak_check(false, snapshot)?;\n+            self.leak_check(outer_universe, Some(snapshot))?;\n \n             result\n         })"}, {"sha": "6b2dd0a2b4fed91c3b61def480e3d13b9bf01712", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -70,8 +70,8 @@ impl<'tcx> InferCtxt<'tcx> {\n             tcx: self.tcx,\n             defining_use_anchor: self.defining_use_anchor,\n             considering_regions: self.considering_regions,\n+            skip_leak_check: self.skip_leak_check,\n             inner: self.inner.clone(),\n-            skip_leak_check: self.skip_leak_check.clone(),\n             lexical_region_resolutions: self.lexical_region_resolutions.clone(),\n             selection_cache: self.selection_cache.clone(),\n             evaluation_cache: self.evaluation_cache.clone(),"}, {"sha": "974bc2f1153d288021d226db06c23551feb540b3", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -105,29 +105,31 @@ impl<'tcx> InferCtxt<'tcx> {\n         self.tcx.replace_bound_vars_uncached(binder, delegate)\n     }\n \n-    /// See [RegionConstraintCollector::leak_check][1].\n+    /// See [RegionConstraintCollector::leak_check][1]. We only check placeholder\n+    /// leaking into `outer_universe`, i.e. placeholders which cannot be named by that\n+    /// universe.\n     ///\n     /// [1]: crate::infer::region_constraints::RegionConstraintCollector::leak_check\n     pub fn leak_check(\n         &self,\n-        overly_polymorphic: bool,\n-        snapshot: &CombinedSnapshot<'tcx>,\n+        outer_universe: ty::UniverseIndex,\n+        only_consider_snapshot: Option<&CombinedSnapshot<'tcx>>,\n     ) -> RelateResult<'tcx, ()> {\n         // If the user gave `-Zno-leak-check`, or we have been\n         // configured to skip the leak check, then skip the leak check\n         // completely. The leak check is deprecated. Any legitimate\n         // subtyping errors that it would have caught will now be\n         // caught later on, during region checking. However, we\n         // continue to use it for a transition period.\n-        if self.tcx.sess.opts.unstable_opts.no_leak_check || self.skip_leak_check.get() {\n+        if self.tcx.sess.opts.unstable_opts.no_leak_check || self.skip_leak_check {\n             return Ok(());\n         }\n \n         self.inner.borrow_mut().unwrap_region_constraints().leak_check(\n             self.tcx,\n-            overly_polymorphic,\n+            outer_universe,\n             self.universe(),\n-            snapshot,\n+            only_consider_snapshot,\n         )\n     }\n }"}, {"sha": "447d4c9f84bc057cd80be8fe188095f3bc7ecdd7", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 22, "deletions": 33, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -251,14 +251,13 @@ pub struct InferCtxt<'tcx> {\n     /// solving is left to borrowck instead.\n     pub considering_regions: bool,\n \n-    pub inner: RefCell<InferCtxtInner<'tcx>>,\n-\n     /// If set, this flag causes us to skip the 'leak check' during\n     /// higher-ranked subtyping operations. This flag is a temporary one used\n     /// to manage the removal of the leak-check: for the time being, we still run the\n-    /// leak-check, but we issue warnings. This flag can only be set to true\n-    /// when entering a snapshot.\n-    skip_leak_check: Cell<bool>,\n+    /// leak-check, but we issue warnings.\n+    skip_leak_check: bool,\n+\n+    pub inner: RefCell<InferCtxtInner<'tcx>>,\n \n     /// Once region inference is done, the values for each variable.\n     lexical_region_resolutions: RefCell<Option<LexicalRegionResolutions<'tcx>>>,\n@@ -543,6 +542,7 @@ pub struct InferCtxtBuilder<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     defining_use_anchor: DefiningAnchor,\n     considering_regions: bool,\n+    skip_leak_check: bool,\n     /// Whether we are in coherence mode.\n     intercrate: bool,\n }\n@@ -557,6 +557,7 @@ impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {\n             tcx: self,\n             defining_use_anchor: DefiningAnchor::Error,\n             considering_regions: true,\n+            skip_leak_check: false,\n             intercrate: false,\n         }\n     }\n@@ -584,6 +585,11 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n         self\n     }\n \n+    pub fn skip_leak_check(mut self, skip_leak_check: bool) -> Self {\n+        self.skip_leak_check = skip_leak_check;\n+        self\n+    }\n+\n     /// Given a canonical value `C` as a starting point, create an\n     /// inference context that contains each of the bound values\n     /// within instantiated as a fresh variable. The `f` closure is\n@@ -605,11 +611,18 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n     }\n \n     pub fn build(&mut self) -> InferCtxt<'tcx> {\n-        let InferCtxtBuilder { tcx, defining_use_anchor, considering_regions, intercrate } = *self;\n+        let InferCtxtBuilder {\n+            tcx,\n+            defining_use_anchor,\n+            considering_regions,\n+            skip_leak_check,\n+            intercrate,\n+        } = *self;\n         InferCtxt {\n             tcx,\n             defining_use_anchor,\n             considering_regions,\n+            skip_leak_check,\n             inner: RefCell::new(InferCtxtInner::new()),\n             lexical_region_resolutions: RefCell::new(None),\n             selection_cache: Default::default(),\n@@ -619,7 +632,6 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n             tainted_by_errors: Cell::new(None),\n             err_count_on_creation: tcx.sess.err_count(),\n             in_snapshot: Cell::new(false),\n-            skip_leak_check: Cell::new(false),\n             universe: Cell::new(ty::UniverseIndex::ROOT),\n             intercrate,\n         }\n@@ -815,32 +827,9 @@ impl<'tcx> InferCtxt<'tcx> {\n         r\n     }\n \n-    /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.\n-    #[instrument(skip(self, f), level = \"debug\")]\n-    pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R\n-    where\n-        F: FnOnce(&CombinedSnapshot<'tcx>) -> R,\n-    {\n-        let snapshot = self.start_snapshot();\n-        let was_skip_leak_check = self.skip_leak_check.get();\n-        if should_skip {\n-            self.skip_leak_check.set(true);\n-        }\n-        let r = f(&snapshot);\n-        self.rollback_to(\"probe\", snapshot);\n-        self.skip_leak_check.set(was_skip_leak_check);\n-        r\n-    }\n-\n-    /// Scan the constraints produced since `snapshot` began and returns:\n-    ///\n-    /// - `None` -- if none of them involves \"region outlives\" constraints.\n-    /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder.\n-    /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders.\n-    pub fn region_constraints_added_in_snapshot(\n-        &self,\n-        snapshot: &CombinedSnapshot<'tcx>,\n-    ) -> Option<bool> {\n+    /// Scan the constraints produced since `snapshot` and check whether\n+    /// we added any region constraints.\n+    pub fn region_constraints_added_in_snapshot(&self, snapshot: &CombinedSnapshot<'tcx>) -> bool {\n         self.inner\n             .borrow_mut()\n             .unwrap_region_constraints()"}, {"sha": "105a3f08c8205f574393aa6049f7ef26bcdf598d", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -533,17 +533,29 @@ impl<'tcx> InferCtxt<'tcx> {\n         // these are the same span, but not in cases like `-> (impl\n         // Foo, impl Bar)`.\n         let span = cause.span;\n-        let prev = self.inner.borrow_mut().opaque_types().register(\n-            opaque_type_key,\n-            OpaqueHiddenType { ty: hidden_ty, span },\n-            origin,\n-        );\n-        let mut obligations = if let Some(prev) = prev {\n-            self.at(&cause, param_env)\n-                .eq_exp(DefineOpaqueTypes::Yes, a_is_expected, prev, hidden_ty)?\n-                .obligations\n+        let mut obligations = if self.intercrate {\n+            // During intercrate we do not define opaque types but instead always\n+            // force ambiguity unless the hidden type is known to not implement\n+            // our trait.\n+            vec![traits::Obligation::new(\n+                self.tcx,\n+                cause.clone(),\n+                param_env,\n+                ty::PredicateKind::Ambiguous,\n+            )]\n         } else {\n-            Vec::new()\n+            let prev = self.inner.borrow_mut().opaque_types().register(\n+                opaque_type_key,\n+                OpaqueHiddenType { ty: hidden_ty, span },\n+                origin,\n+            );\n+            if let Some(prev) = prev {\n+                self.at(&cause, param_env)\n+                    .eq_exp(DefineOpaqueTypes::Yes, a_is_expected, prev, hidden_ty)?\n+                    .obligations\n+            } else {\n+                Vec::new()\n+            }\n         };\n \n         self.add_item_bounds_for_hidden_type("}, {"sha": "dd65f66ccd14098931cf5f3e91cbb9a367e80eeb", "filename": "compiler/rustc_infer/src/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 70, "deletions": 72, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -3,7 +3,6 @@ use crate::infer::CombinedSnapshot;\n use rustc_data_structures::{\n     fx::FxIndexMap,\n     graph::{scc::Sccs, vec_graph::VecGraph},\n-    undo_log::UndoLogs,\n };\n use rustc_index::Idx;\n use rustc_middle::ty::error::TypeError;\n@@ -13,7 +12,9 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     /// Searches new universes created during `snapshot`, looking for\n     /// placeholders that may \"leak\" out from the universes they are contained\n     /// in. If any leaking placeholders are found, then an `Err` is returned\n-    /// (typically leading to the snapshot being reversed).\n+    /// (typically leading to the snapshot being reversed). This algorithm\n+    /// only looks at placeholders which cannot be named by `outer_universe`,\n+    /// as this is the universe we're currently checking for a leak.\n     ///\n     /// The leak check *used* to be the only way we had to handle higher-ranked\n     /// obligations. Now that we have integrated universes into the region\n@@ -55,43 +56,34 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     ///   * if they must also be equal to a placeholder P, and U cannot name P, report an error, as that\n     ///     indicates `P: R` and `R` is in an incompatible universe\n     ///\n+    /// To improve performance and for the old trait solver caching to be sound, this takes\n+    /// an optional snapshot in which case we only look at region constraints added in that\n+    /// snapshot. If we were to not do that the `leak_check` during evaluation can rely on\n+    /// region constraints added outside of that evaluation. As that is not reflected in the\n+    /// cache key this would be unsound.\n+    ///\n     /// # Historical note\n     ///\n     /// Older variants of the leak check used to report errors for these\n     /// patterns, but we no longer do:\n     ///\n     /// * R: P1, even if R cannot name P1, because R = 'static is a valid sol'n\n     /// * R: P1, R: P2, as above\n+    #[instrument(level = \"debug\", skip(self, tcx, only_consider_snapshot), ret)]\n     pub fn leak_check(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n-        overly_polymorphic: bool,\n+        outer_universe: ty::UniverseIndex,\n         max_universe: ty::UniverseIndex,\n-        snapshot: &CombinedSnapshot<'tcx>,\n+        only_consider_snapshot: Option<&CombinedSnapshot<'tcx>>,\n     ) -> RelateResult<'tcx, ()> {\n-        debug!(\n-            \"leak_check(max_universe={:?}, snapshot.universe={:?}, overly_polymorphic={:?})\",\n-            max_universe, snapshot.universe, overly_polymorphic\n-        );\n-\n-        assert!(UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));\n-\n-        let universe_at_start_of_snapshot = snapshot.universe;\n-        if universe_at_start_of_snapshot == max_universe {\n+        if outer_universe == max_universe {\n             return Ok(());\n         }\n \n-        let mini_graph =\n-            &MiniGraph::new(tcx, self.undo_log.region_constraints(), &self.storage.data.verifys);\n+        let mini_graph = &MiniGraph::new(tcx, &self, only_consider_snapshot);\n \n-        let mut leak_check = LeakCheck::new(\n-            tcx,\n-            universe_at_start_of_snapshot,\n-            max_universe,\n-            overly_polymorphic,\n-            mini_graph,\n-            self,\n-        );\n+        let mut leak_check = LeakCheck::new(tcx, outer_universe, max_universe, mini_graph, self);\n         leak_check.assign_placeholder_values()?;\n         leak_check.propagate_scc_value()?;\n         Ok(())\n@@ -100,9 +92,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n \n struct LeakCheck<'me, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    universe_at_start_of_snapshot: ty::UniverseIndex,\n-    /// Only used when reporting region errors.\n-    overly_polymorphic: bool,\n+    outer_universe: ty::UniverseIndex,\n     mini_graph: &'me MiniGraph<'tcx>,\n     rcc: &'me RegionConstraintCollector<'me, 'tcx>,\n \n@@ -130,17 +120,15 @@ struct LeakCheck<'me, 'tcx> {\n impl<'me, 'tcx> LeakCheck<'me, 'tcx> {\n     fn new(\n         tcx: TyCtxt<'tcx>,\n-        universe_at_start_of_snapshot: ty::UniverseIndex,\n+        outer_universe: ty::UniverseIndex,\n         max_universe: ty::UniverseIndex,\n-        overly_polymorphic: bool,\n         mini_graph: &'me MiniGraph<'tcx>,\n         rcc: &'me RegionConstraintCollector<'me, 'tcx>,\n     ) -> Self {\n         let dummy_scc_universe = SccUniverse { universe: max_universe, region: None };\n         Self {\n             tcx,\n-            universe_at_start_of_snapshot,\n-            overly_polymorphic,\n+            outer_universe,\n             mini_graph,\n             rcc,\n             scc_placeholders: IndexVec::from_elem_n(None, mini_graph.sccs.num_sccs()),\n@@ -165,7 +153,7 @@ impl<'me, 'tcx> LeakCheck<'me, 'tcx> {\n \n             // Detect those SCCs that directly contain a placeholder\n             if let ty::RePlaceholder(placeholder) = **region {\n-                if self.universe_at_start_of_snapshot.cannot_name(placeholder.universe) {\n+                if self.outer_universe.cannot_name(placeholder.universe) {\n                     self.assign_scc_value(scc, placeholder)?;\n                 }\n             }\n@@ -289,11 +277,7 @@ impl<'me, 'tcx> LeakCheck<'me, 'tcx> {\n         other_region: ty::Region<'tcx>,\n     ) -> TypeError<'tcx> {\n         debug!(\"error: placeholder={:?}, other_region={:?}\", placeholder, other_region);\n-        if self.overly_polymorphic {\n-            TypeError::RegionsOverlyPolymorphic(placeholder.bound.kind, other_region)\n-        } else {\n-            TypeError::RegionsInsufficientlyPolymorphic(placeholder.bound.kind, other_region)\n-        }\n+        TypeError::RegionsInsufficientlyPolymorphic(placeholder.bound.kind, other_region)\n     }\n }\n \n@@ -379,56 +363,70 @@ struct MiniGraph<'tcx> {\n }\n \n impl<'tcx> MiniGraph<'tcx> {\n-    fn new<'a>(\n+    fn new(\n         tcx: TyCtxt<'tcx>,\n-        undo_log: impl Iterator<Item = &'a UndoLog<'tcx>>,\n-        verifys: &[Verify<'tcx>],\n-    ) -> Self\n-    where\n-        'tcx: 'a,\n-    {\n+        region_constraints: &RegionConstraintCollector<'_, 'tcx>,\n+        only_consider_snapshot: Option<&CombinedSnapshot<'tcx>>,\n+    ) -> Self {\n         let mut nodes = FxIndexMap::default();\n         let mut edges = Vec::new();\n \n         // Note that if `R2: R1`, we get a callback `r1, r2`, so `target` is first parameter.\n-        Self::iterate_undo_log(tcx, undo_log, verifys, |target, source| {\n-            let source_node = Self::add_node(&mut nodes, source);\n-            let target_node = Self::add_node(&mut nodes, target);\n-            edges.push((source_node, target_node));\n-        });\n+        Self::iterate_region_constraints(\n+            tcx,\n+            region_constraints,\n+            only_consider_snapshot,\n+            |target, source| {\n+                let source_node = Self::add_node(&mut nodes, source);\n+                let target_node = Self::add_node(&mut nodes, target);\n+                edges.push((source_node, target_node));\n+            },\n+        );\n         let graph = VecGraph::new(nodes.len(), edges);\n         let sccs = Sccs::new(&graph);\n         Self { nodes, sccs }\n     }\n \n     /// Invokes `each_edge(R1, R2)` for each edge where `R2: R1`\n-    fn iterate_undo_log<'a>(\n+    fn iterate_region_constraints(\n         tcx: TyCtxt<'tcx>,\n-        undo_log: impl Iterator<Item = &'a UndoLog<'tcx>>,\n-        verifys: &[Verify<'tcx>],\n+        region_constraints: &RegionConstraintCollector<'_, 'tcx>,\n+        only_consider_snapshot: Option<&CombinedSnapshot<'tcx>>,\n         mut each_edge: impl FnMut(ty::Region<'tcx>, ty::Region<'tcx>),\n-    ) where\n-        'tcx: 'a,\n-    {\n-        for undo_entry in undo_log {\n-            match undo_entry {\n-                &AddConstraint(Constraint::VarSubVar(a, b)) => {\n-                    each_edge(ty::Region::new_var(tcx, a), ty::Region::new_var(tcx, b));\n-                }\n-                &AddConstraint(Constraint::RegSubVar(a, b)) => {\n-                    each_edge(a, ty::Region::new_var(tcx, b));\n-                }\n-                &AddConstraint(Constraint::VarSubReg(a, b)) => {\n-                    each_edge(ty::Region::new_var(tcx, a), b);\n-                }\n-                &AddConstraint(Constraint::RegSubReg(a, b)) => {\n-                    each_edge(a, b);\n+    ) {\n+        let mut each_constraint = |constraint| match constraint {\n+            &Constraint::VarSubVar(a, b) => {\n+                each_edge(ty::Region::new_var(tcx, a), ty::Region::new_var(tcx, b));\n+            }\n+            &Constraint::RegSubVar(a, b) => {\n+                each_edge(a, ty::Region::new_var(tcx, b));\n+            }\n+            &Constraint::VarSubReg(a, b) => {\n+                each_edge(ty::Region::new_var(tcx, a), b);\n+            }\n+            &Constraint::RegSubReg(a, b) => {\n+                each_edge(a, b);\n+            }\n+        };\n+\n+        if let Some(snapshot) = only_consider_snapshot {\n+            for undo_entry in\n+                region_constraints.undo_log.region_constraints_in_snapshot(&snapshot.undo_snapshot)\n+            {\n+                match undo_entry {\n+                    AddConstraint(constraint) => {\n+                        each_constraint(constraint);\n+                    }\n+                    &AddVerify(i) => span_bug!(\n+                        region_constraints.data().verifys[i].origin.span(),\n+                        \"we never add verifications while doing higher-ranked things\",\n+                    ),\n+                    &AddCombination(..) | &AddVar(..) => {}\n                 }\n-                &AddVerify(i) => span_bug!(\n-                    verifys[i].origin.span(),\n-                    \"we never add verifications while doing higher-ranked things\",\n-                ),\n-                &AddCombination(..) | &AddVar(..) => {}\n+            }\n+        } else {\n+            for (constraint, _origin) in &region_constraints.data().constraints {\n+                each_constraint(constraint)\n             }\n         }\n     }"}, {"sha": "613da8a0b4576b6de9b2d401a274d35a28af77b4", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -400,7 +400,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         data\n     }\n \n-    pub(super) fn data(&self) -> &RegionConstraintData<'tcx> {\n+    pub fn data(&self) -> &RegionConstraintData<'tcx> {\n         &self.data\n     }\n \n@@ -683,15 +683,10 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     }\n \n     /// See `InferCtxt::region_constraints_added_in_snapshot`.\n-    pub fn region_constraints_added_in_snapshot(&self, mark: &Snapshot<'tcx>) -> Option<bool> {\n+    pub fn region_constraints_added_in_snapshot(&self, mark: &Snapshot<'tcx>) -> bool {\n         self.undo_log\n             .region_constraints_in_snapshot(mark)\n-            .map(|&elt| match elt {\n-                AddConstraint(constraint) => Some(constraint.involves_placeholders()),\n-                _ => None,\n-            })\n-            .max()\n-            .unwrap_or(None)\n+            .any(|&elt| matches!(elt, AddConstraint(_)))\n     }\n \n     #[inline]"}, {"sha": "25d06b21ec84fd9e00746728972d62b05c7b89aa", "filename": "compiler/rustc_infer/src/infer/undo_log.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -138,11 +138,9 @@ impl<'tcx> InferCtxtInner<'tcx> {\n         }\n \n         if self.undo_log.num_open_snapshots == 1 {\n-            // The root snapshot. It's safe to clear the undo log because\n-            // there's no snapshot further out that we might need to roll back\n-            // to.\n+            // After the root snapshot the undo log should be empty.\n             assert!(snapshot.undo_len == 0);\n-            self.undo_log.logs.clear();\n+            assert!(self.undo_log.logs.is_empty());\n         }\n \n         self.undo_log.num_open_snapshots -= 1;\n@@ -183,15 +181,6 @@ impl<'tcx> InferCtxtUndoLogs<'tcx> {\n         self.logs[s.undo_len..].iter().any(|log| matches!(log, UndoLog::OpaqueTypes(..)))\n     }\n \n-    pub(crate) fn region_constraints(\n-        &self,\n-    ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {\n-        self.logs.iter().filter_map(|log| match log {\n-            UndoLog::RegionConstraintCollector(log) => Some(log),\n-            _ => None,\n-        })\n-    }\n-\n     fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {\n         // Failures here may indicate a failure to follow a stack discipline.\n         assert!(self.logs.len() >= snapshot.undo_len);"}, {"sha": "66293f19eef63c42ccb6c9a1ce08a07ff590e2a9", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -45,7 +45,6 @@ pub enum TypeError<'tcx> {\n \n     RegionsDoesNotOutlive(Region<'tcx>, Region<'tcx>),\n     RegionsInsufficientlyPolymorphic(BoundRegionKind, Region<'tcx>),\n-    RegionsOverlyPolymorphic(BoundRegionKind, Region<'tcx>),\n     RegionsPlaceholderMismatch,\n \n     Sorts(ExpectedFound<Ty<'tcx>>),\n@@ -74,7 +73,6 @@ impl TypeError<'_> {\n         match self {\n             TypeError::RegionsDoesNotOutlive(_, _)\n             | TypeError::RegionsInsufficientlyPolymorphic(_, _)\n-            | TypeError::RegionsOverlyPolymorphic(_, _)\n             | TypeError::RegionsPlaceholderMismatch => true,\n             _ => false,\n         }\n@@ -98,11 +96,6 @@ impl<'tcx> TypeError<'tcx> {\n             }\n         }\n \n-        let br_string = |br: ty::BoundRegionKind| match br {\n-            ty::BrNamed(_, name) => format!(\" {}\", name),\n-            _ => String::new(),\n-        };\n-\n         match self {\n             CyclicTy(_) => \"cyclic type of infinite size\".into(),\n             CyclicConst(_) => \"encountered a self-referencing constant\".into(),\n@@ -144,11 +137,6 @@ impl<'tcx> TypeError<'tcx> {\n             RegionsInsufficientlyPolymorphic(..) => {\n                 \"one type is more general than the other\".into()\n             }\n-            RegionsOverlyPolymorphic(br, _) => format!(\n-                \"expected concrete lifetime, found bound lifetime parameter{}\",\n-                br_string(br)\n-            )\n-            .into(),\n             RegionsPlaceholderMismatch => \"one type is more general than the other\".into(),\n             ArgumentSorts(values, _) | Sorts(values) => {\n                 let expected = values.expected.sort_string(tcx);\n@@ -228,7 +216,6 @@ impl<'tcx> TypeError<'tcx> {\n             | FieldMisMatch(..)\n             | RegionsDoesNotOutlive(..)\n             | RegionsInsufficientlyPolymorphic(..)\n-            | RegionsOverlyPolymorphic(..)\n             | RegionsPlaceholderMismatch\n             | Traits(_)\n             | ProjectionMismatched(_)"}, {"sha": "bca2343e4242204e80d95fdf8ca93e0f7c2d451c", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -137,6 +137,13 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n \n     #[instrument(level = \"debug\", skip(self), ret)]\n     fn compute_external_query_constraints(&self) -> Result<ExternalConstraints<'tcx>, NoSolution> {\n+        // We only check for leaks from universes which were entered inside\n+        // of the query.\n+        self.infcx.leak_check(self.max_input_universe, None).map_err(|e| {\n+            debug!(?e, \"failed the leak check\");\n+            NoSolution\n+        })?;\n+\n         // Cannot use `take_registered_region_obligations` as we may compute the response\n         // inside of a `probe` whenever we have multiple choices inside of the solver.\n         let region_obligations = self.infcx.inner.borrow().region_obligations().to_owned();"}, {"sha": "d6fd457de06da42d4f5c17ac024ac8fa9c821dc2", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 62, "deletions": 49, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -5,7 +5,7 @@\n //! [trait-specialization]: https://rustc-dev-guide.rust-lang.org/traits/specialization.html\n \n use crate::infer::outlives::env::OutlivesEnvironment;\n-use crate::infer::{CombinedSnapshot, InferOk};\n+use crate::infer::InferOk;\n use crate::traits::outlives_bounds::InferCtxtExt as _;\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::util::impl_subject_and_oblig;\n@@ -62,6 +62,21 @@ pub fn add_placeholder_note(err: &mut Diagnostic) {\n     );\n }\n \n+#[derive(Debug, Clone, Copy)]\n+enum TrackAmbiguityCauses {\n+    Yes,\n+    No,\n+}\n+\n+impl TrackAmbiguityCauses {\n+    fn is_yes(self) -> bool {\n+        match self {\n+            TrackAmbiguityCauses::Yes => true,\n+            TrackAmbiguityCauses::No => false,\n+        }\n+    }\n+}\n+\n /// If there are types that satisfy both impls, returns `Some`\n /// with a suitably-freshened `ImplHeader` with those types\n /// substituted. Otherwise, returns `None`.\n@@ -97,29 +112,28 @@ pub fn overlapping_impls(\n         return None;\n     }\n \n-    let infcx = tcx\n-        .infer_ctxt()\n-        .with_opaque_type_inference(DefiningAnchor::Bubble)\n-        .intercrate(true)\n-        .build();\n-    let selcx = &mut SelectionContext::new(&infcx);\n-    let overlaps =\n-        overlap(selcx, skip_leak_check, impl1_def_id, impl2_def_id, overlap_mode).is_some();\n-    if !overlaps {\n-        return None;\n-    }\n+    let _overlap_with_bad_diagnostics = overlap(\n+        tcx,\n+        TrackAmbiguityCauses::No,\n+        skip_leak_check,\n+        impl1_def_id,\n+        impl2_def_id,\n+        overlap_mode,\n+    )?;\n \n     // In the case where we detect an error, run the check again, but\n     // this time tracking intercrate ambiguity causes for better\n     // diagnostics. (These take time and can lead to false errors.)\n-    let infcx = tcx\n-        .infer_ctxt()\n-        .with_opaque_type_inference(DefiningAnchor::Bubble)\n-        .intercrate(true)\n-        .build();\n-    let selcx = &mut SelectionContext::new(&infcx);\n-    selcx.enable_tracking_intercrate_ambiguity_causes();\n-    Some(overlap(selcx, skip_leak_check, impl1_def_id, impl2_def_id, overlap_mode).unwrap())\n+    let overlap = overlap(\n+        tcx,\n+        TrackAmbiguityCauses::Yes,\n+        skip_leak_check,\n+        impl1_def_id,\n+        impl2_def_id,\n+        overlap_mode,\n+    )\n+    .unwrap();\n+    Some(overlap)\n }\n \n fn with_fresh_ty_vars<'cx, 'tcx>(\n@@ -146,40 +160,34 @@ fn with_fresh_ty_vars<'cx, 'tcx>(\n \n /// Can both impl `a` and impl `b` be satisfied by a common type (including\n /// where-clauses)? If so, returns an `ImplHeader` that unifies the two impls.\n-fn overlap<'cx, 'tcx>(\n-    selcx: &mut SelectionContext<'cx, 'tcx>,\n+#[instrument(level = \"debug\", skip(tcx))]\n+fn overlap<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    track_ambiguity_causes: TrackAmbiguityCauses,\n     skip_leak_check: SkipLeakCheck,\n     impl1_def_id: DefId,\n     impl2_def_id: DefId,\n     overlap_mode: OverlapMode,\n ) -> Option<OverlapResult<'tcx>> {\n-    debug!(\n-        \"overlap(impl1_def_id={:?}, impl2_def_id={:?}, overlap_mode={:?})\",\n-        impl1_def_id, impl2_def_id, overlap_mode\n-    );\n-\n-    selcx.infcx.probe_maybe_skip_leak_check(skip_leak_check.is_yes(), |snapshot| {\n-        overlap_within_probe(selcx, impl1_def_id, impl2_def_id, overlap_mode, snapshot)\n-    })\n-}\n-\n-fn overlap_within_probe<'cx, 'tcx>(\n-    selcx: &mut SelectionContext<'cx, 'tcx>,\n-    impl1_def_id: DefId,\n-    impl2_def_id: DefId,\n-    overlap_mode: OverlapMode,\n-    snapshot: &CombinedSnapshot<'tcx>,\n-) -> Option<OverlapResult<'tcx>> {\n-    let infcx = selcx.infcx;\n-\n     if overlap_mode.use_negative_impl() {\n-        if negative_impl(infcx.tcx, impl1_def_id, impl2_def_id)\n-            || negative_impl(infcx.tcx, impl2_def_id, impl1_def_id)\n+        if negative_impl(tcx, impl1_def_id, impl2_def_id)\n+            || negative_impl(tcx, impl2_def_id, impl1_def_id)\n         {\n             return None;\n         }\n     }\n \n+    let infcx = tcx\n+        .infer_ctxt()\n+        .with_opaque_type_inference(DefiningAnchor::Bubble)\n+        .skip_leak_check(skip_leak_check.is_yes())\n+        .intercrate(true)\n+        .build();\n+    let selcx = &mut SelectionContext::new(&infcx);\n+    if track_ambiguity_causes.is_yes() {\n+        selcx.enable_tracking_intercrate_ambiguity_causes();\n+    }\n+\n     // For the purposes of this check, we don't bring any placeholder\n     // types into scope; instead, we replace the generic types with\n     // fresh type variables, and hence we do our evaluations in an\n@@ -198,18 +206,23 @@ fn overlap_within_probe<'cx, 'tcx>(\n         }\n     }\n \n-    // We disable the leak when creating the `snapshot` by using\n-    // `infcx.probe_maybe_disable_leak_check`.\n-    if infcx.leak_check(true, snapshot).is_err() {\n+    // We toggle the `leak_check` by using `skip_leak_check` when constructing the\n+    // inference context, so this may be a noop.\n+    if infcx.leak_check(ty::UniverseIndex::ROOT, None).is_err() {\n         debug!(\"overlap: leak check failed\");\n         return None;\n     }\n \n     let intercrate_ambiguity_causes = selcx.take_intercrate_ambiguity_causes();\n     debug!(\"overlap: intercrate_ambiguity_causes={:#?}\", intercrate_ambiguity_causes);\n-\n-    let involves_placeholder =\n-        matches!(selcx.infcx.region_constraints_added_in_snapshot(snapshot), Some(true));\n+    let involves_placeholder = infcx\n+        .inner\n+        .borrow_mut()\n+        .unwrap_region_constraints()\n+        .data()\n+        .constraints\n+        .iter()\n+        .any(|c| c.0.involves_placeholders());\n \n     let impl_header = selcx.infcx.resolve_vars_if_possible(impl1_header);\n     Some(OverlapResult { impl_header, intercrate_ambiguity_causes, involves_placeholder })"}, {"sha": "a8a74d7501abf6f442bc296c2ce8b3a5b3565e07", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -90,7 +90,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                     Ok(EvaluationResult::EvaluatedToAmbig)\n                 } else if self.opaque_types_added_in_snapshot(snapshot) {\n                     Ok(EvaluationResult::EvaluatedToOkModuloOpaqueTypes)\n-                } else if self.region_constraints_added_in_snapshot(snapshot).is_some() {\n+                } else if self.region_constraints_added_in_snapshot(snapshot) {\n                     Ok(EvaluationResult::EvaluatedToOkModuloRegions)\n                 } else {\n                     Ok(EvaluationResult::EvaluatedToOk)"}, {"sha": "42c1b629ac242b3a3fffded6a6ac3f936f72cf90", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -561,9 +561,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         op: impl FnOnce(&mut Self) -> Result<EvaluationResult, OverflowError>,\n     ) -> Result<EvaluationResult, OverflowError> {\n         self.infcx.probe(|snapshot| -> Result<EvaluationResult, OverflowError> {\n+            let outer_universe = self.infcx.universe();\n             let result = op(self)?;\n \n-            match self.infcx.leak_check(true, snapshot) {\n+            match self.infcx.leak_check(outer_universe, Some(snapshot)) {\n                 Ok(()) => {}\n                 Err(_) => return Ok(EvaluatedToErr),\n             }\n@@ -572,9 +573,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 return Ok(result.max(EvaluatedToOkModuloOpaqueTypes));\n             }\n \n-            match self.infcx.region_constraints_added_in_snapshot(snapshot) {\n-                None => Ok(result),\n-                Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),\n+            if self.infcx.region_constraints_added_in_snapshot(snapshot) {\n+                Ok(result.max(EvaluatedToOkModuloRegions))\n+            } else {\n+                Ok(result)\n             }\n         })\n     }"}, {"sha": "01ef4abd3dca37ccc682231f2015f107d76a82c1", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -11,7 +11,7 @@ use std::path::{Path, PathBuf};\n const ENTRY_LIMIT: usize = 900;\n // FIXME: The following limits should be reduced eventually.\n const ISSUES_ENTRY_LIMIT: usize = 1898;\n-const ROOT_ENTRY_LIMIT: usize = 894;\n+const ROOT_ENTRY_LIMIT: usize = 891;\n \n const EXPECTED_TEST_FILE_EXTENSIONS: &[&str] = &[\n     \"rs\",     // test source files"}, {"sha": "4701bc0b139736890b28c68d26394124c6c0deb4", "filename": "tests/ui/coherence/coherence-inherited-subtyping.re.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.re.stderr?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -1,14 +0,0 @@\n-error[E0592]: duplicate definitions with name `method1`\n-  --> $DIR/coherence-inherited-subtyping.rs:14:5\n-   |\n-LL |     fn method1(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^ duplicate definitions for `method1`\n-...\n-LL |     fn method1(&self) {}\n-   |     ----------------- other definition for `method1`\n-   |\n-   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0592`."}, {"sha": "f35cd2103da4af5337a08774b77ed75e7479bf72", "filename": "tests/ui/coherence/coherence-inherited-subtyping.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -4,8 +4,6 @@\n // Note: This scenario is currently accepted, but as part of the\n // universe transition (#56105) may eventually become an error.\n \n-// revisions: old re\n-\n struct Foo<T> {\n     t: T,\n }"}, {"sha": "f60b2aa2735d5b6530aebc0bba586ea28259f009", "filename": "tests/ui/coherence/coherence-inherited-subtyping.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -1,5 +1,5 @@\n error[E0592]: duplicate definitions with name `method1`\n-  --> $DIR/coherence-inherited-subtyping.rs:14:5\n+  --> $DIR/coherence-inherited-subtyping.rs:12:5\n    |\n LL |     fn method1(&self) {}\n    |     ^^^^^^^^^^^^^^^^^ duplicate definitions for `method1`", "previous_filename": "tests/ui/coherence/coherence-inherited-subtyping.old.stderr"}, {"sha": "c68895fc4e63ee6039d4dc278f57c78f903326b1", "filename": "tests/ui/coinduction/canonicalization-rerun.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fcoinduction%2Fcanonicalization-rerun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fcoinduction%2Fcanonicalization-rerun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoinduction%2Fcanonicalization-rerun.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n-// revisions: old new\n-//[new] compile-flags: -Ztrait-solver=next\n+// revisions: old next\n+//[next] compile-flags: -Ztrait-solver=next\n \n // If we use canonical goals during trait solving we have to reevaluate\n // the root goal of a cycle until we hit a fixpoint."}, {"sha": "769b6a9253769a44edf9b1fdc8aa04d3feac63fe", "filename": "tests/ui/higher-rank-trait-bounds/issue-95230.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -1,11 +0,0 @@\n-// revisions: old new\n-//[new] compile-flags: -Ztrait-solver=next\n-//[old] check-pass\n-//[new] known-bug: #109764\n-\n-\n-pub struct Bar\n-where\n-    for<'a> &'a mut Self:;\n-\n-fn main() {}"}, {"sha": "f3393347d90dc5a74c9e6b94308eb9729a5d9061", "filename": "tests/ui/higher-ranked/higher-lifetime-bounds.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fhigher-lifetime-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fhigher-lifetime-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Fhigher-lifetime-bounds.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-lifetime-bounds.rs"}, {"sha": "bc6d2288cdfc4fc6fa7b5681a426376055c666c4", "filename": "tests/ui/higher-ranked/higher-lifetime-bounds.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fhigher-lifetime-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fhigher-lifetime-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Fhigher-lifetime-bounds.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-lifetime-bounds.stderr"}, {"sha": "e8d6cff856c9e840a309d0da1553e1d097236b4e", "filename": "tests/ui/higher-ranked/leak-check-in-selection.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fleak-check-in-selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fleak-check-in-selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Fleak-check-in-selection.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -0,0 +1,24 @@\n+// run-pass\n+// revisions: old next\n+//[next] compile-flags: -Ztrait-solver=next\n+#![allow(coherence_leak_check)]\n+\n+trait Trait: Sized {\n+    fn is_higher_ranked(self) -> bool;\n+}\n+\n+impl Trait for for<'a> fn(&'a ()) {\n+    fn is_higher_ranked(self) -> bool {\n+        true\n+    }\n+}\n+impl<'a> Trait for fn(&'a ()) {\n+    fn is_higher_ranked(self) -> bool {\n+        false\n+    }\n+}\n+\n+fn main() {\n+    let x: for<'a> fn(&'a ()) = |&()| ();\n+    assert!(x.is_higher_ranked());\n+}"}, {"sha": "b7264c7e933f30d744adf60f8fc15d47d2dbcf70", "filename": "tests/ui/higher-ranked/subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr"}, {"sha": "2355979b0f95d7dc3488790e687095332ce6d5ae", "filename": "tests/ui/higher-ranked/subtype/hr-subtype.bound_a_vs_free_x.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.bound_a_vs_free_x.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.stderr"}, {"sha": "a73c03feb8768a474973d3d4e8240c16f4df2556", "filename": "tests/ui/higher-ranked/subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr"}, {"sha": "31d36d7168b612f6e6f1010d49a242eab4ca9566", "filename": "tests/ui/higher-ranked/subtype/hr-subtype.free_inv_x_vs_free_inv_y.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.stderr"}, {"sha": "269cde54c7e3d2acc15b1a07956c8efd49fc4674", "filename": "tests/ui/higher-ranked/subtype/hr-subtype.free_x_vs_free_y.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.free_x_vs_free_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.free_x_vs_free_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.free_x_vs_free_y.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/hr-subtype/hr-subtype.free_x_vs_free_y.stderr"}, {"sha": "c770e0de85c0805b80b26a8c380da651db35e786", "filename": "tests/ui/higher-ranked/subtype/hr-subtype.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fhr-subtype.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/hr-subtype/hr-subtype.rs"}, {"sha": "bd4533e0433ff8a4084dc1736c67b4bc22b883cd", "filename": "tests/ui/higher-ranked/subtype/placeholder-pattern-fail.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fplaceholder-pattern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fplaceholder-pattern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fplaceholder-pattern-fail.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/hr-subtype/placeholder-pattern-fail.rs"}, {"sha": "73b0a3173644772a32c111083e5a00e6250112c2", "filename": "tests/ui/higher-ranked/subtype/placeholder-pattern-fail.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fplaceholder-pattern-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fplaceholder-pattern-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fplaceholder-pattern-fail.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/hr-subtype/placeholder-pattern-fail.stderr"}, {"sha": "061e66e54d2f442541b8fe8cdf2da5a8916845de", "filename": "tests/ui/higher-ranked/subtype/placeholder-pattern.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fplaceholder-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fplaceholder-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Fplaceholder-pattern.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/hr-subtype/placeholder-pattern.rs"}, {"sha": "6455854f34db89cc8a7bd0e112733a2f4bd0e3de", "filename": "tests/ui/higher-ranked/subtype/return-static.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Freturn-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Freturn-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Fsubtype%2Freturn-static.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/hr-subtype/return-static.rs"}, {"sha": "8cdfe247e025e7b17626f8976fbaaeb2ff781f81", "filename": "tests/ui/higher-ranked/trait-bounds/complex.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fcomplex.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/complex.rs"}, {"sha": "1afd15613b51c301643befc0db04542813a037c9", "filename": "tests/ui/higher-ranked/trait-bounds/due-to-where-clause.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fdue-to-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fdue-to-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fdue-to-where-clause.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/due-to-where-clause.rs"}, {"sha": "520938a633514b6c41bdf929605ab24a2f061843", "filename": "tests/ui/higher-ranked/trait-bounds/due-to-where-clause.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fdue-to-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fdue-to-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fdue-to-where-clause.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/due-to-where-clause.stderr"}, {"sha": "9af6bc45c7a060c14ff3f875983ce0bdaf2ef3a8", "filename": "tests/ui/higher-ranked/trait-bounds/fn-ptr.classic.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Ffn-ptr.classic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Ffn-ptr.classic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Ffn-ptr.classic.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/fn-ptr.classic.stderr"}, {"sha": "853160f961245ce3388972fd4c4e68f27fb0c767", "filename": "tests/ui/higher-ranked/trait-bounds/fn-ptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Ffn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Ffn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Ffn-ptr.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/fn-ptr.rs"}, {"sha": "d34b7a29623cfcfa30ee313b3d1779ecf493ebcf", "filename": "tests/ui/higher-ranked/trait-bounds/hang-on-deeply-nested-dyn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhang-on-deeply-nested-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhang-on-deeply-nested-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhang-on-deeply-nested-dyn.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hang-on-deeply-nested-dyn.rs"}, {"sha": "a9d649b8285220f97be93571f07173c420a823db", "filename": "tests/ui/higher-ranked/trait-bounds/hang-on-deeply-nested-dyn.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhang-on-deeply-nested-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhang-on-deeply-nested-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhang-on-deeply-nested-dyn.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -14,7 +14,7 @@ LL |       f\n    |       ^ expected `&dyn Fn(&dyn Fn(&dyn Fn(&...)))`, found `&dyn Fn(u32)`\n    |\n    = note: expected reference `&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&...)))))))))))`\n-           the full type name has been written to '$TEST_BUILD_DIR/higher-rank-trait-bounds/hang-on-deeply-nested-dyn/hang-on-deeply-nested-dyn.long-type-hash.txt'\n+           the full type name has been written to '$TEST_BUILD_DIR/higher-ranked/trait-bounds/hang-on-deeply-nested-dyn/hang-on-deeply-nested-dyn.long-type-hash.txt'\n               found reference `&dyn Fn(u32)`\n \n error: aborting due to previous error", "previous_filename": "tests/ui/higher-rank-trait-bounds/hang-on-deeply-nested-dyn.stderr"}, {"sha": "cc766c0605c9f03e648a2299bba744b01bb6fb2b", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-binder-levels-in-object-types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-binder-levels-in-object-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-binder-levels-in-object-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-binder-levels-in-object-types.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-binder-levels-in-object-types.rs"}, {"sha": "a20d03c7747cdb24078e791a4a31de085176744b", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-cache-issue-54302.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-cache-issue-54302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-cache-issue-54302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-cache-issue-54302.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-cache-issue-54302.rs"}, {"sha": "f014eab8601fa4a728a6411304841a81553f5eeb", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-cache-issue-54302.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-cache-issue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-cache-issue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-cache-issue-54302.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-cache-issue-54302.stderr"}, {"sha": "e83686404a351b1f5abf79a41038192b870b0642", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-conflate-regions.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-conflate-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-conflate-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-conflate-regions.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-conflate-regions.rs"}, {"sha": "46f5308dd87ba4cb193cc6884f806743790f883f", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-conflate-regions.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-conflate-regions.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-conflate-regions.stderr"}, {"sha": "05d3e1a434e69c78d0bf37e837e35251cc037fc2", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-debruijn-in-receiver.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-debruijn-in-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-debruijn-in-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-debruijn-in-receiver.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-debruijn-in-receiver.rs"}, {"sha": "fa391ecba8a9510a686be3cf2057f324bd28480f", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-debruijn-in-receiver.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-debruijn-in-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-debruijn-in-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-debruijn-in-receiver.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-debruijn-in-receiver.stderr"}, {"sha": "8431226a3ece1205a9dad2c9c292db413bad4751", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-debruijn-object-types-in-closures.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-debruijn-object-types-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-debruijn-object-types-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-debruijn-object-types-in-closures.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs"}, {"sha": "567802376184da5316e82becf37edbb70d9724c1", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-exists-forall-fn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-fn.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-exists-forall-fn.rs"}, {"sha": "9914783d9767d5d99ecd0790eae8597cc1714265", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-exists-forall-fn.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-fn.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-exists-forall-fn.stderr"}, {"sha": "921061916fc95b7d46c891db83d39cfae29499a5", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-exists-forall-trait-contravariant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-trait-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-trait-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-trait-contravariant.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-exists-forall-trait-contravariant.rs"}, {"sha": "364b613fc7717b87ac4401c7d5edaa7883bad873", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-exists-forall-trait-contravariant.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-trait-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-trait-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-trait-contravariant.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-exists-forall-trait-contravariant.stderr"}, {"sha": "f95496a6c3cc0dc5845f83dfede498241dd2632f", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-exists-forall-trait-covariant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-trait-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-trait-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-trait-covariant.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-exists-forall-trait-covariant.rs"}, {"sha": "9b9e4496a870dc926c88791b9e4aaebc4e54d623", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-exists-forall-trait-invariant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-trait-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-trait-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-trait-invariant.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-exists-forall-trait-invariant.rs"}, {"sha": "cb2ce8a4116aa887b5621130f33e9f5e1bbd391d", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-exists-forall-trait-invariant.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-exists-forall-trait-invariant.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-exists-forall-trait-invariant.stderr"}, {"sha": "ff84ad9d2988e4bb2c5507659b5e4c902469d939", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-fn-like-trait-object.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-fn-like-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-fn-like-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-fn-like-trait-object.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs"}, {"sha": "afab9986ce2a34041a03403722373cdeb0e681d9", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-fn-like-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-fn-like-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-fn-like-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-fn-like-trait.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-fn-like-trait.rs"}, {"sha": "f9ae1429ee4a2c52a2a4c6e03a29ef3fe512c849", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-higher-ranker-supertraits-transitive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-higher-ranker-supertraits-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-higher-ranker-supertraits-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-higher-ranker-supertraits-transitive.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-higher-ranker-supertraits-transitive.rs"}, {"sha": "b1b8ffa8c548336a75f06f80439a71f174492fd1", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-higher-ranker-supertraits-transitive.stderr"}, {"sha": "48ebe5017aa62df306ff1efa806a4a39cf689726", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-higher-ranker-supertraits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-higher-ranker-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-higher-ranker-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-higher-ranker-supertraits.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-higher-ranker-supertraits.rs"}, {"sha": "7f96909b6e76e3afc51cd0854a2c4c5a58b1a3d0", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-higher-ranker-supertraits.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-higher-ranker-supertraits.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-higher-ranker-supertraits.stderr"}, {"sha": "89fc4705a787fa1cc976b803c7bbfed38f685577", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-identity-fn-borrows.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-identity-fn-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-identity-fn-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-identity-fn-borrows.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-identity-fn-borrows.rs"}, {"sha": "25af011e3fc410049cc0a39322f06044556a0431", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-identity-fn-borrows.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-identity-fn-borrows.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-identity-fn-borrows.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-identity-fn-borrows.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-identity-fn-borrows.stderr"}, {"sha": "8fb4218f8a409cb3d50993eab69b043c40048456", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-just-for-static.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-just-for-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-just-for-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-just-for-static.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-just-for-static.rs"}, {"sha": "31e11e12835166a4aca0c219a9cfd58ecc0f3b0b", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-just-for-static.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-just-for-static.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-just-for-static.stderr"}, {"sha": "4b096be591a049ff7c50a0a354bfde6a84ce118a", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-malformed-lifetime-generics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-malformed-lifetime-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-malformed-lifetime-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-malformed-lifetime-generics.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-malformed-lifetime-generics.rs"}, {"sha": "e8f6d63b5ab8ad0bbd355506e99b339c97667f1d", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-malformed-lifetime-generics.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-malformed-lifetime-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-malformed-lifetime-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-malformed-lifetime-generics.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-malformed-lifetime-generics.stderr"}, {"sha": "04519f116003191004d3f9601ddf62762f035b11", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-opt-in-copy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-opt-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-opt-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-opt-in-copy.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-opt-in-copy.rs"}, {"sha": "1fab9758c5c83bd28adde3df8dee45f3d8a57d11", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-parse.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-parse.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-parse.rs"}, {"sha": "a94c80eb30b16c23589d081828522ac35303e96c", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-perfect-forwarding.polonius.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-perfect-forwarding.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-perfect-forwarding.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-perfect-forwarding.polonius.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-perfect-forwarding.polonius.stderr"}, {"sha": "d45fa183c0c4c5f8cd571d5ba5dd32f384e52ffa", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-perfect-forwarding.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-perfect-forwarding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-perfect-forwarding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-perfect-forwarding.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-perfect-forwarding.rs"}, {"sha": "727b9e6bec8e6aa01587077b370d4b2bf80dd4bc", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-perfect-forwarding.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-perfect-forwarding.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-perfect-forwarding.stderr"}, {"sha": "42247798f661b1ec7887e15d5023a9b688c95512", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-precedence-of-plus-where-clause.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-precedence-of-plus-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-precedence-of-plus-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-precedence-of-plus-where-clause.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-precedence-of-plus-where-clause.rs"}, {"sha": "6834c392d4e96634a8791cf071857fec2e9a3925", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-precedence-of-plus.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-precedence-of-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-precedence-of-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-precedence-of-plus.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs"}, {"sha": "b97fdf4df508f2160a5e722d97741824190d9e24", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-resolve-lifetime.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-resolve-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-resolve-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-resolve-lifetime.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-resolve-lifetime.rs"}, {"sha": "d8c726cdd71e50b0bb94b6991fe72f11754194bc", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-trait-object-paren-notation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-trait-object-paren-notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-trait-object-paren-notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-trait-object-paren-notation.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs"}, {"sha": "41ebb3f5a14ab1ee07b4cf085edf9cf6457198d5", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-trait-object-passed-to-closure.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-trait-object-passed-to-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-trait-object-passed-to-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-trait-object-passed-to-closure.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs"}, {"sha": "88d396101dba23106de9a1daf0e6e3c325e9f8f6", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-type-outlives.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-type-outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-type-outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-type-outlives.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-type-outlives.rs"}, {"sha": "a4a8a5ac6ccbc42c127e2e631ca1747b4e051d39", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-unboxed-closure-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-unboxed-closure-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-unboxed-closure-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-unboxed-closure-trait.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs"}, {"sha": "1a9bb252340a6f1d0048fa0235341e3f24099507", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-wrong-kind.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-wrong-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-wrong-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-wrong-kind.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-wrong-kind.rs"}, {"sha": "765ea9f7854036087c38357513ca26a7c663942c", "filename": "tests/ui/higher-ranked/trait-bounds/hrtb-wrong-kind.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-wrong-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-wrong-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fhrtb-wrong-kind.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/hrtb-wrong-kind.stderr"}, {"sha": "2db7f8a354cf58479eae15f7c81282ef25a274fc", "filename": "tests/ui/higher-ranked/trait-bounds/issue-100689.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-100689.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-100689.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-100689.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-100689.rs"}, {"sha": "952b81584f30d9ce0bf24ead28e785d8716d2fed", "filename": "tests/ui/higher-ranked/trait-bounds/issue-102899.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-102899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-102899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-102899.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-102899.rs"}, {"sha": "4a6399c8f62468da8df6562ddcabec733ae10557", "filename": "tests/ui/higher-ranked/trait-bounds/issue-30786.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-30786.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-30786.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-30786.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-30786.rs"}, {"sha": "f32ba57200d535f1ad813870c8498e2f8ac38072", "filename": "tests/ui/higher-ranked/trait-bounds/issue-30786.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-30786.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-30786.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-30786.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -31,7 +31,7 @@ LL | pub struct Filter<S, F> {\n LL |     let count = filter.countx();\n    |                        ^^^^^^ method cannot be called due to unsatisfied trait bounds\n    |\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/higher-rank-trait-bounds/issue-30786/issue-30786.long-type-hash.txt'\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/higher-ranked/trait-bounds/issue-30786/issue-30786.long-type-hash.txt'\n note: the following trait bounds were not satisfied:\n       `&'a mut &Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:131:30: 131:37]>: Stream`\n       `&'a mut &mut Filter<Map<Repeat, for<'a> fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:131:30: 131:37]>: Stream`", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-30786.stderr"}, {"sha": "2d49151ffccc1d209f9746b25adc08b1a9f251f6", "filename": "tests/ui/higher-ranked/trait-bounds/issue-36139-normalize-closure-sig.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-36139-normalize-closure-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-36139-normalize-closure-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-36139-normalize-closure-sig.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-36139-normalize-closure-sig.rs"}, {"sha": "968cf08916fd6dd2bfd840e605fb7c0c715d4df7", "filename": "tests/ui/higher-ranked/trait-bounds/issue-39292.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-39292.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-39292.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-39292.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-39292.rs"}, {"sha": "01515fdc9d2bff7b47479cb52d8db50a0ca79e5d", "filename": "tests/ui/higher-ranked/trait-bounds/issue-42114.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-42114.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-42114.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-42114.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-42114.rs"}, {"sha": "cedcf7c361c3bbb6d32109c49be0aaa2c28adf72", "filename": "tests/ui/higher-ranked/trait-bounds/issue-43623.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-43623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-43623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-43623.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-43623.rs"}, {"sha": "4a09f4be156e2bb60a879883cf640004796c28d1", "filename": "tests/ui/higher-ranked/trait-bounds/issue-46989.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-46989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-46989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-46989.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-46989.rs"}, {"sha": "3f874220a270809870f519518cda65675b160e87", "filename": "tests/ui/higher-ranked/trait-bounds/issue-46989.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-46989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-46989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-46989.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-46989.stderr"}, {"sha": "392e7233b567aecf26e5402746ccc5b536c399e5", "filename": "tests/ui/higher-ranked/trait-bounds/issue-57639.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-57639.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-57639.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-57639.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-57639.rs"}, {"sha": "6006a108c5cc6e3adc7c69ea31e6aa1970d4dfa8", "filename": "tests/ui/higher-ranked/trait-bounds/issue-58451.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-58451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-58451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-58451.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-58451.rs"}, {"sha": "0f051be2128b0486cfcda81f474e94ac8f563db3", "filename": "tests/ui/higher-ranked/trait-bounds/issue-58451.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-58451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-58451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-58451.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-58451.stderr"}, {"sha": "3ad548450e583df0b2064e7de88cf85c54ef3b98", "filename": "tests/ui/higher-ranked/trait-bounds/issue-59311.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-59311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-59311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-59311.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-59311.rs"}, {"sha": "c01ab8e347c6c11b3ab6a0490e93a05059962329", "filename": "tests/ui/higher-ranked/trait-bounds/issue-59311.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-59311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-59311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-59311.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-59311.stderr"}, {"sha": "05315b3f9f5e9931275c7dbc590c99ba4b6a7bfc", "filename": "tests/ui/higher-ranked/trait-bounds/issue-60283.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-60283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-60283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-60283.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-60283.rs"}, {"sha": "e70f6fc3430f67726e0192f0119ffd3657d5cff2", "filename": "tests/ui/higher-ranked/trait-bounds/issue-62203-hrtb-ice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-62203-hrtb-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-62203-hrtb-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-62203-hrtb-ice.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-62203-hrtb-ice.rs"}, {"sha": "4d470ae70229f1f5fe1fd4804433073bb4e8c598", "filename": "tests/ui/higher-ranked/trait-bounds/issue-62203-hrtb-ice.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-62203-hrtb-ice.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-62203-hrtb-ice.stderr"}, {"sha": "571b8531757cdc4579771b716e1711ca63c3354b", "filename": "tests/ui/higher-ranked/trait-bounds/issue-88446.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-88446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-88446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-88446.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-88446.rs"}, {"sha": "92b7c5deb812e2946573db4516e454d06b5f8e5d", "filename": "tests/ui/higher-ranked/trait-bounds/issue-88586-hr-self-outlives-in-trait-def.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-88586-hr-self-outlives-in-trait-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-88586-hr-self-outlives-in-trait-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-88586-hr-self-outlives-in-trait-def.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-88586-hr-self-outlives-in-trait-def.rs"}, {"sha": "b151a9d3ab6599d709582fe830669db42e4dbfae", "filename": "tests/ui/higher-ranked/trait-bounds/issue-90177.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-90177.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-90177.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-90177.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-90177.rs"}, {"sha": "af4946a187f15bc6ecea91c9d8e2c6f42f6d6a07", "filename": "tests/ui/higher-ranked/trait-bounds/issue-95034.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-95034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-95034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-95034.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-95034.rs"}, {"sha": "d4bc5b67220a0caa280857d0c7d86e47a0bc4ca6", "filename": "tests/ui/higher-ranked/trait-bounds/issue-95230.next.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-95230.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-95230.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-95230.next.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/issue-95230.new.stderr"}, {"sha": "49a1584d54e0b799675197d785f8d79047e05a37", "filename": "tests/ui/higher-ranked/trait-bounds/issue-95230.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-95230.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-95230.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fissue-95230.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -0,0 +1,11 @@\n+// revisions: old next\n+//[next] compile-flags: -Ztrait-solver=next\n+//[old] check-pass\n+//[next] known-bug: #109764\n+\n+\n+pub struct Bar\n+where\n+    for<'a> &'a mut Self:;\n+\n+fn main() {}"}, {"sha": "f255eac0c4b2caf5730bf459140b3ada39983d25", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-44005.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-44005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-44005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-44005.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs"}, {"sha": "4d38cb19e9bf2e00dc68007899b44a319fbd7ba0", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-56556.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-56556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-56556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-56556.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs"}, {"sha": "c6f29fa59085d9258cf9636d2aa84076875ffddd", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-62529-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs"}, {"sha": "002054732919e30820e0f4f79821e9ce1ecfda79", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-62529-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-2.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-2.rs"}, {"sha": "d84e30f4984eabff83d310ea0dab88d0bfb6145f", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-62529-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-3.rs"}, {"sha": "b30dd36d2ad6aebf092f513c11180771d7eaed2e", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-62529-3.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-3.stderr"}, {"sha": "8c2a59868ca5e4f81346295da16ea77ff91a96c0", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-62529-4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-4.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-4.rs"}, {"sha": "03f257a029c1752af680519b9170e38a7edb6fcd", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-62529-5.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-5.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-5.rs"}, {"sha": "74a4785e478b84ef8ee10fc5204fc6bd73f0c174", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-62529-6.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-62529-6.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs"}, {"sha": "3ced40230f012033de6307c24ac43f1001144b1a", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-70120.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-70120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-70120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-70120.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-70120.rs"}, {"sha": "0f38f8e3283a278a5a6579706eee58b6e1fe4800", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-71955.migrate.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-71955.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-71955.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-71955.migrate.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.migrate.stderr"}, {"sha": "1d90226a3f48672ed41defb3bb5f3c37d61e2a3d", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-71955.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.rs"}, {"sha": "4ef96cd954106ba6c7041b954424b60adac54587", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-71955.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-71955.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-71955.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-71955.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.stderr"}, {"sha": "93ccb42684c5e6e858dfc0e745f13d4044102ddb", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-74261.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-74261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-74261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-74261.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-74261.rs"}, {"sha": "583470080a2fc8cd6cbe74cc8be806fda4ce637d", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-76956.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-76956.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-76956.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-76956.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs"}, {"sha": "00a866f220b2e8a512e223dbeb0c2a762448edb2", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-80706.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-80706.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-80706.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-80706.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-80706.rs"}, {"sha": "6316ceea156bd9ffe8047c379f1854ba3848a920", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-80956.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-80956.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-80956.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-80956.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-80956.rs"}, {"sha": "f6ab9c203b5c70284c25ffe047e6c97960d25133", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-81809.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-81809.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-81809.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-81809.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-81809.rs"}, {"sha": "8aa29926d4f9b2b15ca0f6dbdecdb7dd6b989b42", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-85455.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-85455.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-85455.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-85455.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-85455.rs"}, {"sha": "3240518fbbe0808447ca8fe4f15ed5fca7e24efa", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-85455.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-85455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-85455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-85455.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-85455.stderr"}, {"sha": "fffb54f86ca0311b7806fc86be7b82915b09bba1", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-89118.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-89118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-89118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-89118.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-89118.rs"}, {"sha": "edef6ccd34e615acea21e604eac409dcb7d13541", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-89118.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-89118.stderr"}, {"sha": "f7e467b3786dc66cf88c2b10c7c7bc752b1e8c1e", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-89436.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-89436.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-89436.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-89436.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-89436.rs"}, {"sha": "effc329456d46ebbefeeada95b13cfa190b3f011", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-90612.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-90612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-90612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-90612.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90612.rs"}, {"sha": "628b5cba1042460f6f8208a80de462318eac8b16", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-90638.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-90638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-90638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-90638.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs"}, {"sha": "ffd6857d84a6eeebf3b3fa8795f4e996cee9fdab", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-90875.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-90875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-90875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-90875.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90875.rs"}, {"sha": "ab9d9a7ce6f0855ac27d07f9a589d77e5bfb64c5", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-90950.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-90950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-90950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-90950.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90950.rs"}, {"sha": "5be33bccdc317cb403b374e711d51da901bcc055", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/issue-90950.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-90950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-90950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fissue-90950.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90950.stderr"}, {"sha": "7693b118247621c24eba60b14f1830031a9a6768", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/norm-before-method-resolution.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/norm-before-method-resolution.rs"}, {"sha": "73388a72574e2bbbe193b83523ced04b2e3d5b8b", "filename": "tests/ui/higher-ranked/trait-bounds/normalize-under-binder/norm-before-method-resolution.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-ranked%2Ftrait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "previous_filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/norm-before-method-resolution.stderr"}, {"sha": "1f7d4a49c901800f3eb8ef81633243fdc4bd334b", "filename": "tests/ui/traits/new-solver/leak-check-coinductive-cycle.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Ftraits%2Fnew-solver%2Fleak-check-coinductive-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Ftraits%2Fnew-solver%2Fleak-check-coinductive-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fleak-check-coinductive-cycle.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -0,0 +1,33 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+#![feature(rustc_attrs)]\n+\n+#[rustc_coinductive]\n+trait Trait<T> {}\n+impl<'a, 'b, T> Trait<T> for (&'a (), &'b ())\n+where\n+    'b: 'a,\n+    &'a (): Trait<T>,\n+{}\n+\n+impl Trait<i32> for &'static () {}\n+impl<'a> Trait<u32> for &'a ()\n+where\n+    for<'b> (&'a (), &'b ()): Trait<u32>,\n+{}\n+\n+\n+fn impls_trait<T: Trait<U>, U>() {}\n+\n+fn main() {\n+    // This infers to `impls_trait::<(&'static (), &'static ()), i32>();`\n+    //\n+    // In the first attempt we have 2 candidates for `&'a (): Trait<_>`\n+    // and we get ambiguity. The result is therefore ambiguity with a `'b: 'a`\n+    // constraint. The next attempt then uses that provisional result when\n+    // trying to apply `impl<'a> Trait<u32> for &'a ()`. This means we get a\n+    // `for<'b> 'b: 'a` bound which fails the leak check. Because of this we\n+    // end up with a single impl for `&'a (): Trait<_>` which infers `_` to `i32`\n+    // and succeeds.\n+    impls_trait::<(&(), &()), _>();\n+}"}, {"sha": "39b3d535ad45cba8099eef60d659f6342c761e66", "filename": "tests/ui/type-alias-impl-trait/coherence_different_hidden_ty.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence_different_hidden_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence_different_hidden_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence_different_hidden_ty.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -0,0 +1,25 @@\n+// When checking whether these two impls overlap, we could detect that we\n+// would require the hidden type of `TAIT` to be equal to both `u32` and `i32`\n+// and therefore accept them as disjoint. That is annoying to implement with\n+// the current system because we would have to add the following to each\n+// returning branch in coherence.\n+//\n+//    let _ = infcx.take_opaque_types();\n+//\n+// @lcnr: Because of this I decided to not bother and cause this to fail instead.\n+// In the future we can definitely modify the compiler to accept this\n+// again.\n+#![feature(type_alias_impl_trait)]\n+\n+trait Trait {}\n+\n+type TAIT = impl Sized;\n+\n+impl Trait for (TAIT, TAIT) {}\n+\n+impl Trait for (u32, i32) {}\n+//~^ ERROR conflicting implementations of trait `Trait` for type `(TAIT, TAIT)`\n+\n+fn define() -> TAIT {}\n+\n+fn main() {}"}, {"sha": "f2aee798608a6063e18470e875f9772d4663ad3c", "filename": "tests/ui/type-alias-impl-trait/coherence_different_hidden_ty.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence_different_hidden_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence_different_hidden_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence_different_hidden_ty.stderr?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `Trait` for type `(TAIT, TAIT)`\n+  --> $DIR/coherence_different_hidden_ty.rs:20:1\n+   |\n+LL | impl Trait for (TAIT, TAIT) {}\n+   | --------------------------- first implementation here\n+LL |\n+LL | impl Trait for (u32, i32) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(TAIT, TAIT)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "679b2b0f1888f1782a3d5c4ae00f2bc09f895edb", "filename": "tests/ui/type-alias-impl-trait/coherence_generalization.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence_generalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ffcebcd7f75ac02ed45feb53ffd07b75398/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence_generalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence_generalization.rs?ref=f0411ffcebcd7f75ac02ed45feb53ffd07b75398", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n \n+// FIXME(type_alias_impl_trait): What does this test? This needs a comment\n+// explaining what we're worried about here.\n #![feature(type_alias_impl_trait)]\n trait Trait {}\n type Opaque<T> = impl Sized;"}]}