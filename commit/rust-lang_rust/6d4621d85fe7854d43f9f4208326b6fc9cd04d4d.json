{"sha": "6d4621d85fe7854d43f9f4208326b6fc9cd04d4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNDYyMWQ4NWZlNzg1NGQ0M2Y5ZjQyMDgzMjZiNmZjOWNkMDRkNGQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-18T22:37:18Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-18T22:37:18Z"}, "message": "doc: a little more material on object types, part of #4217.", "tree": {"sha": "b121002502f0120afdbe45ca7d3eaabcab5059fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b121002502f0120afdbe45ca7d3eaabcab5059fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d4621d85fe7854d43f9f4208326b6fc9cd04d4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4621d85fe7854d43f9f4208326b6fc9cd04d4d", "html_url": "https://github.com/rust-lang/rust/commit/6d4621d85fe7854d43f9f4208326b6fc9cd04d4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d4621d85fe7854d43f9f4208326b6fc9cd04d4d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d062896a8bb224f97c9bac804d40b5406a3ac993", "url": "https://api.github.com/repos/rust-lang/rust/commits/d062896a8bb224f97c9bac804d40b5406a3ac993", "html_url": "https://github.com/rust-lang/rust/commit/d062896a8bb224f97c9bac804d40b5406a3ac993"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "c22756657b76afbb80c9806df56e7bff636a2d5c", "filename": "doc/rust.md", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6d4621d85fe7854d43f9f4208326b6fc9cd04d4d/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d4621d85fe7854d43f9f4208326b6fc9cd04d4d/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=6d4621d85fe7854d43f9f4208326b6fc9cd04d4d", "patch": "@@ -1131,7 +1131,7 @@ A _trait_ describes a set of method types.\n Traits can include default implementations of methods,\n written in terms of some unknown [`self` type](#self-types);\n the `self` type may either be completely unspecified,\n-or constrained by some other [trait type](#trait-types).\n+or constrained by some other trait.\n \n Traits are implemented for specific types through separate [implementations](#implementations).\n \n@@ -1176,7 +1176,7 @@ fn draw_twice<T: Shape>(surface: Surface, sh: T) {\n }\n ~~~~\n \n-Traits also define a [type](#trait-types) with the same name as the trait.\n+Traits also define an [object type](#object-types) with the same name as the trait.\n Values of this type are created by [casting](#type-cast-expressions) pointer values\n (pointing to a type for which an implementation of the given trait is in scope)\n to pointers to the trait name, used as a type.\n@@ -1542,7 +1542,7 @@ method_call_expr : expr '.' ident paren_expr_list ;\n A _method call_ consists of an expression followed by a single dot, an identifier, and a parenthesized expression-list.\n Method calls are resolved to methods on specific traits,\n either statically dispatching to a method if the exact `self`-type of the left-hand-side is known,\n-or dynamically dispatching if the left-hand-side expression is an indirect [trait type](#trait-types).\n+or dynamically dispatching if the left-hand-side expression is an indirect [object type](#object-types).\n \n \n ### Field expressions\n@@ -2656,10 +2656,21 @@ let bo: Binop = add;\n x = bo(5,7);\n ~~~~~~~~\n \n-### Trait types\n+### Object types\n \n-Every trait item (see [traits](#traits)) defines a type with the same name\n-as the trait. For a trait `T`, cast expressions introduce values of type `T`:\n+Every trait item (see [traits](#traits)) defines a type with the same name as the trait.\n+This type is called the _object type_ of the trait.\n+Object types permit \"late binding\" of methods, dispatched using _virtual method tables_ (\"vtables\").\n+Whereas most calls to trait methods are \"early bound\" (statically resolved) to specific implementations at compile time,\n+a call to a method on an object type is only resolved to a vtable entry at compile time.\n+The actual implementation for each vtable entry can vary on an object-by-object basis.\n+\n+Given a pointer-typed expression `E` of type `&T`, `~T` or `@T`, where `T` implements trait `R`,\n+casting `E` to the corresponding pointer type `&R`, `~R` or `@R` results in a value of the _object type_ `R`.\n+This result is represented as a pair of pointers:\n+the vtable pointer for the `T` implementation of `R`, and the pointer value of `E`.\n+\n+An example of an object type:\n \n ~~~~~~~~\n trait Printable {\n@@ -2679,8 +2690,8 @@ fn main() {\n }\n ~~~~~~~~\n \n-In this example, the trait `Printable` occurs as a type in both the type signature of\n-`print`, and the cast expression in `main`.\n+In this example, the trait `Printable` occurs as an object type in both the type signature of `print`,\n+and the cast expression in `main`.\n \n ### Type parameters\n "}]}