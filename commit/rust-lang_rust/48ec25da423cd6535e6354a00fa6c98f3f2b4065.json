{"sha": "48ec25da423cd6535e6354a00fa6c98f3f2b4065", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZWMyNWRhNDIzY2Q2NTM1ZTYzNTRhMDBmYTZjOThmM2YyYjQwNjU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-31T10:24:14Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-31T10:24:14Z"}, "message": "Get rid of walk.rs\n\nAnd we're down to a single AST walker again", "tree": {"sha": "977adb9834c20a981af4661b2731833a9f2b2af6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/977adb9834c20a981af4661b2731833a9f2b2af6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48ec25da423cd6535e6354a00fa6c98f3f2b4065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48ec25da423cd6535e6354a00fa6c98f3f2b4065", "html_url": "https://github.com/rust-lang/rust/commit/48ec25da423cd6535e6354a00fa6c98f3f2b4065", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48ec25da423cd6535e6354a00fa6c98f3f2b4065/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7ef6d28660140b60691dc4a72fbef42216e1ae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ef6d28660140b60691dc4a72fbef42216e1ae9", "html_url": "https://github.com/rust-lang/rust/commit/c7ef6d28660140b60691dc4a72fbef42216e1ae9"}], "stats": {"total": 463, "additions": 0, "deletions": 463}, "files": [{"sha": "fbf4503eef390977a3b5a1a06fb4803d9def818d", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48ec25da423cd6535e6354a00fa6c98f3f2b4065/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/48ec25da423cd6535e6354a00fa6c98f3f2b4065/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=48ec25da423cd6535e6354a00fa6c98f3f2b4065", "patch": "@@ -47,7 +47,6 @@ mod middle {\n mod syntax {\n     mod ast;\n     mod fold;\n-    mod walk;\n     mod visit;\n     mod codemap;\n     mod parse {"}, {"sha": "c0edb95009e19d412243e28b9fb85d30d5be46b3", "filename": "src/comp/syntax/walk.rs", "status": "removed", "additions": 0, "deletions": 462, "changes": 462, "blob_url": "https://github.com/rust-lang/rust/blob/c7ef6d28660140b60691dc4a72fbef42216e1ae9/src%2Fcomp%2Fsyntax%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ef6d28660140b60691dc4a72fbef42216e1ae9/src%2Fcomp%2Fsyntax%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fwalk.rs?ref=c7ef6d28660140b60691dc4a72fbef42216e1ae9", "patch": "@@ -1,462 +0,0 @@\n-\n-import ast;\n-import ast::ty_param;\n-import ast::respan;\n-import std::option;\n-import std::option::some;\n-import std::option::none;\n-import codemap::span;\n-\n-type ast_visitor =\n-    {keep_going: fn() -> bool ,\n-     want_crate_directives: fn() -> bool ,\n-     visit_crate_pre: fn(&ast::crate) ,\n-     visit_crate_post: fn(&ast::crate) ,\n-     visit_crate_directive_pre: fn(&@ast::crate_directive) ,\n-     visit_crate_directive_post: fn(&@ast::crate_directive) ,\n-     visit_view_item_pre: fn(&@ast::view_item) ,\n-     visit_view_item_post: fn(&@ast::view_item) ,\n-     visit_native_item_pre: fn(&@ast::native_item) ,\n-     visit_native_item_post: fn(&@ast::native_item) ,\n-     visit_item_pre: fn(&@ast::item) ,\n-     visit_item_post: fn(&@ast::item) ,\n-     visit_method_pre: fn(&@ast::method) ,\n-     visit_method_post: fn(&@ast::method) ,\n-     visit_block_pre: fn(&ast::blk) ,\n-     visit_block_post: fn(&ast::blk) ,\n-     visit_stmt_pre: fn(&@ast::stmt) ,\n-     visit_stmt_post: fn(&@ast::stmt) ,\n-     visit_arm_pre: fn(&ast::arm) ,\n-     visit_arm_post: fn(&ast::arm) ,\n-     visit_pat_pre: fn(&@ast::pat) ,\n-     visit_pat_post: fn(&@ast::pat) ,\n-     visit_decl_pre: fn(&@ast::decl) ,\n-     visit_decl_post: fn(&@ast::decl) ,\n-     visit_local_pre: fn(&@ast::local) ,\n-     visit_local_post: fn(&@ast::local) ,\n-     visit_expr_pre: fn(&@ast::expr) ,\n-     visit_expr_post: fn(&@ast::expr) ,\n-     visit_ty_pre: fn(&@ast::ty) ,\n-     visit_ty_post: fn(&@ast::ty) ,\n-     visit_constr: fn(&@ast::constr) ,\n-     visit_fn_pre:\n-         fn(&ast::_fn, &ast::ty_param[], &span, &ast::fn_ident, ast::node_id)\n-             ,\n-     visit_fn_post:\n-         fn(&ast::_fn, &ast::ty_param[], &span, &ast::fn_ident, ast::node_id)\n-             };\n-\n-fn walk_crate(v: &ast_visitor, c: &ast::crate) {\n-    if !v.keep_going() { ret; }\n-    v.visit_crate_pre(c);\n-    walk_mod(v, c.node.module);\n-    v.visit_crate_post(c);\n-}\n-\n-fn walk_crate_directive(v: &ast_visitor, cd: @ast::crate_directive) {\n-    if !v.keep_going() { ret; }\n-    if !v.want_crate_directives() { ret; }\n-    v.visit_crate_directive_pre(cd);\n-    alt cd.node {\n-      ast::cdir_src_mod(_, _, _) { }\n-      ast::cdir_dir_mod(_, _, cdirs, _) {\n-        for cdir: @ast::crate_directive  in cdirs {\n-            walk_crate_directive(v, cdir);\n-        }\n-      }\n-      ast::cdir_view_item(vi) { walk_view_item(v, vi); }\n-      ast::cdir_syntax(_) { }\n-      ast::cdir_auth(_, _) { }\n-    }\n-    v.visit_crate_directive_post(cd);\n-}\n-\n-fn walk_mod(v: &ast_visitor, m: &ast::_mod) {\n-    if !v.keep_going() { ret; }\n-    for vi: @ast::view_item  in m.view_items { walk_view_item(v, vi); }\n-    for i: @ast::item  in m.items { walk_item(v, i); }\n-}\n-\n-fn walk_view_item(v: &ast_visitor, vi: @ast::view_item) {\n-    if !v.keep_going() { ret; }\n-    v.visit_view_item_pre(vi);\n-    v.visit_view_item_post(vi);\n-}\n-\n-fn walk_local(v: &ast_visitor, loc: @ast::local) {\n-    v.visit_local_pre(loc);\n-    alt loc.node.ty { none. { } some(t) { walk_ty(v, t); } }\n-    alt loc.node.init { none. { } some(i) { walk_expr(v, i.expr); } }\n-    v.visit_local_post(loc);\n-}\n-\n-fn walk_item(v: &ast_visitor, i: @ast::item) {\n-    if !v.keep_going() { ret; }\n-    v.visit_item_pre(i);\n-    alt i.node {\n-      ast::item_const(t, e) { walk_ty(v, t); walk_expr(v, e); }\n-      ast::item_fn(f, tps) {\n-        walk_fn(v, f, tps, i.span, some(i.ident), i.id);\n-      }\n-      ast::item_mod(m) { walk_mod(v, m); }\n-      ast::item_native_mod(nm) { walk_native_mod(v, nm); }\n-      ast::item_ty(t, _) { walk_ty(v, t); }\n-      ast::item_res(f, dtor_id, tps, _) {\n-        walk_fn(v, f, tps, i.span, some(i.ident), dtor_id);\n-      }\n-      ast::item_tag(variants, _) {\n-        for vr: ast::variant  in variants {\n-            for va: ast::variant_arg  in vr.node.args { walk_ty(v, va.ty); }\n-        }\n-      }\n-      ast::item_obj(ob, _, _) {\n-        for f: ast::obj_field  in ob.fields { walk_ty(v, f.ty); }\n-        for m: @ast::method  in ob.methods {\n-            v.visit_method_pre(m);\n-            // Methods don't have ty params?\n-            walk_fn(v, m.node.meth, ~[], m.span, some(m.node.ident),\n-                    m.node.id);\n-            v.visit_method_post(m);\n-        }\n-      }\n-    }\n-    v.visit_item_post(i);\n-}\n-\n-fn walk_ty(v: &ast_visitor, t: @ast::ty) {\n-    if !v.keep_going() { ret; }\n-    v.visit_ty_pre(t);\n-    alt t.node {\n-      ast::ty_nil. { }\n-      ast::ty_bot. { }\n-      ast::ty_bool. { }\n-      ast::ty_int. { }\n-      ast::ty_uint. { }\n-      ast::ty_float. { }\n-      ast::ty_machine(_) { }\n-      ast::ty_char. { }\n-      ast::ty_str. { }\n-      ast::ty_istr. { }\n-      ast::ty_box(mt) { walk_ty(v, mt.ty); }\n-      ast::ty_vec(mt) { walk_ty(v, mt.ty); }\n-      ast::ty_ivec(mt) { walk_ty(v, mt.ty); }\n-      ast::ty_ptr(mt) { walk_ty(v, mt.ty); }\n-      ast::ty_task. { }\n-      ast::ty_port(t) { walk_ty(v, t); }\n-      ast::ty_chan(t) { walk_ty(v, t); }\n-      ast::ty_rec(flds) {\n-        for f: ast::ty_field  in flds { walk_ty(v, f.node.mt.ty); }\n-      }\n-      ast::ty_fn(_, args, out, _, constrs) {\n-        for a: ast::ty_arg  in args { walk_ty(v, a.node.ty); }\n-        for c: @ast::constr  in constrs { v.visit_constr(c); }\n-        walk_ty(v, out);\n-      }\n-      ast::ty_obj(tmeths) {\n-        for m: ast::ty_method  in tmeths {\n-            for a: ast::ty_arg  in m.node.inputs { walk_ty(v, a.node.ty); }\n-            walk_ty(v, m.node.output);\n-        }\n-      }\n-      ast::ty_path(p, _) {\n-        for tp: @ast::ty  in p.node.types { walk_ty(v, tp); }\n-      }\n-      ast::ty_type. { }\n-      ast::ty_constr(t, _) { walk_ty(v, t); }\n-    }\n-    v.visit_ty_post(t);\n-}\n-\n-fn walk_pat(v: &ast_visitor, p: &@ast::pat) {\n-    v.visit_pat_pre(p);\n-    alt p.node {\n-      ast::pat_tag(path, children) {\n-        for tp: @ast::ty  in path.node.types { walk_ty(v, tp); }\n-        for child: @ast::pat  in children { walk_pat(v, child); }\n-      }\n-      ast::pat_rec(fields, _) {\n-        for f: ast::field_pat  in fields { walk_pat(v, f.pat); }\n-      }\n-      ast::pat_box(inner) { walk_pat(v, inner); }\n-      _ { }\n-    }\n-    v.visit_pat_post(p);\n-}\n-\n-fn walk_native_mod(v: &ast_visitor, nm: &ast::native_mod) {\n-    if !v.keep_going() { ret; }\n-    for vi: @ast::view_item  in nm.view_items { walk_view_item(v, vi); }\n-    for ni: @ast::native_item  in nm.items { walk_native_item(v, ni); }\n-}\n-\n-fn walk_native_item(v: &ast_visitor, ni: @ast::native_item) {\n-    if !v.keep_going() { ret; }\n-    v.visit_native_item_pre(ni);\n-    alt ni.node {\n-      ast::native_item_fn(_, fd, _) { walk_fn_decl(v, fd); }\n-      ast::native_item_ty. { }\n-    }\n-    v.visit_native_item_post(ni);\n-}\n-\n-fn walk_fn_decl(v: &ast_visitor, fd: &ast::fn_decl) {\n-    for a: ast::arg  in fd.inputs { walk_ty(v, a.ty); }\n-    for c: @ast::constr  in fd.constraints { v.visit_constr(c); }\n-    walk_ty(v, fd.output);\n-}\n-\n-fn walk_fn(v: &ast_visitor, f: &ast::_fn, tps: &ast::ty_param[], sp: &span,\n-           i: &ast::fn_ident, d: ast::node_id) {\n-    if !v.keep_going() { ret; }\n-    v.visit_fn_pre(f, tps, sp, i, d);\n-    walk_fn_decl(v, f.decl);\n-    walk_block(v, f.body);\n-    v.visit_fn_post(f, tps, sp, i, d);\n-}\n-\n-fn walk_block(v: &ast_visitor, b: &ast::blk) {\n-    if !v.keep_going() { ret; }\n-    v.visit_block_pre(b);\n-    for s: @ast::stmt  in b.node.stmts { walk_stmt(v, s); }\n-    walk_expr_opt(v, b.node.expr);\n-    v.visit_block_post(b);\n-}\n-\n-fn walk_stmt(v: &ast_visitor, s: @ast::stmt) {\n-    if !v.keep_going() { ret; }\n-    v.visit_stmt_pre(s);\n-    alt s.node {\n-      ast::stmt_decl(d, _) { walk_decl(v, d); }\n-      ast::stmt_expr(e, _) { walk_expr(v, e); }\n-      ast::stmt_crate_directive(cdir) { walk_crate_directive(v, cdir); }\n-    }\n-    v.visit_stmt_post(s);\n-}\n-\n-fn walk_decl(v: &ast_visitor, d: @ast::decl) {\n-    if !v.keep_going() { ret; }\n-    v.visit_decl_pre(d);\n-    alt d.node {\n-      ast::decl_local(locs) {\n-        for loc: @ast::local  in locs { walk_local(v, loc); }\n-      }\n-      ast::decl_item(it) { walk_item(v, it); }\n-    }\n-    v.visit_decl_post(d);\n-}\n-\n-fn walk_expr_opt(v: &ast_visitor, eo: option::t[@ast::expr]) {\n-    alt eo { none. { } some(e) { walk_expr(v, e); } }\n-}\n-\n-fn walk_exprs(v: &ast_visitor, exprs: &(@ast::expr)[]) {\n-    for e: @ast::expr  in exprs { walk_expr(v, e); }\n-}\n-\n-fn walk_mac(v: &ast_visitor, mac: ast::mac) {\n-    alt mac.node {\n-      ast::mac_invoc(pth, arg, body) { walk_expr(v, arg); }\n-      ast::mac_embed_type(ty) { walk_ty(v, ty); }\n-      ast::mac_embed_block(blk) { walk_block(v, blk); }\n-      ast::mac_ellipsis. { }\n-    }\n-}\n-\n-fn walk_expr(v: &ast_visitor, e: @ast::expr) {\n-    if !v.keep_going() { ret; }\n-    v.visit_expr_pre(e);\n-    alt e.node {\n-      ast::expr_vec(es, _, _) { walk_exprs(v, es); }\n-      ast::expr_rec(flds, base) {\n-        for f: ast::field  in flds { walk_expr(v, f.node.expr); }\n-        walk_expr_opt(v, base);\n-      }\n-      ast::expr_call(callee, args) {\n-        walk_expr(v, callee);\n-        walk_exprs(v, args);\n-      }\n-      ast::expr_self_method(_) { }\n-      ast::expr_bind(callee, args) {\n-        walk_expr(v, callee);\n-        for eo: option::t[@ast::expr]  in args { walk_expr_opt(v, eo); }\n-      }\n-      ast::expr_spawn(_, _, callee, args) {\n-        walk_expr(v, callee);\n-        walk_exprs(v, args);\n-      }\n-      ast::expr_binary(_, a, b) { walk_expr(v, a); walk_expr(v, b); }\n-      ast::expr_unary(_, a) { walk_expr(v, a); }\n-      ast::expr_lit(_) { }\n-      ast::expr_cast(x, t) { walk_expr(v, x); walk_ty(v, t); }\n-      ast::expr_if(x, b, eo) {\n-        walk_expr(v, x);\n-        walk_block(v, b);\n-        walk_expr_opt(v, eo);\n-      }\n-      ast::expr_if_check(x, b, eo) {\n-        walk_expr(v, x);\n-        walk_block(v, b);\n-        walk_expr_opt(v, eo);\n-      }\n-      ast::expr_ternary(c, t, e) {\n-        walk_expr(v, c);\n-        walk_expr(v, t);\n-        walk_expr(v, e);\n-      }\n-      ast::expr_while(x, b) { walk_expr(v, x); walk_block(v, b); }\n-      ast::expr_for(dcl, x, b) {\n-        walk_local(v, dcl);\n-        walk_expr(v, x);\n-        walk_block(v, b);\n-      }\n-      ast::expr_for_each(dcl, x, b) {\n-        walk_local(v, dcl);\n-        walk_expr(v, x);\n-        walk_block(v, b);\n-      }\n-      ast::expr_do_while(b, x) { walk_block(v, b); walk_expr(v, x); }\n-      ast::expr_alt(x, arms) {\n-        walk_expr(v, x);\n-        for a: ast::arm  in arms {\n-            for p: @ast::pat  in a.pats { walk_pat(v, p); }\n-            v.visit_arm_pre(a);\n-            walk_block(v, a.block);\n-            v.visit_arm_post(a);\n-        }\n-      }\n-      ast::expr_fn(f) { walk_fn(v, f, ~[], e.span, none, e.id); }\n-      ast::expr_block(b) { walk_block(v, b); }\n-      ast::expr_assign(a, b) { walk_expr(v, a); walk_expr(v, b); }\n-      ast::expr_move(a, b) { walk_expr(v, a); walk_expr(v, b); }\n-      ast::expr_swap(a, b) { walk_expr(v, a); walk_expr(v, b); }\n-      ast::expr_assign_op(_, a, b) { walk_expr(v, a); walk_expr(v, b); }\n-      ast::expr_send(a, b) { walk_expr(v, a); walk_expr(v, b); }\n-      ast::expr_recv(a, b) { walk_expr(v, a); walk_expr(v, b); }\n-      ast::expr_field(x, _) { walk_expr(v, x); }\n-      ast::expr_index(a, b) { walk_expr(v, a); walk_expr(v, b); }\n-      ast::expr_path(p) {\n-        for tp: @ast::ty  in p.node.types { walk_ty(v, tp); }\n-      }\n-      ast::expr_fail(eo) { walk_expr_opt(v, eo); }\n-      ast::expr_break. { }\n-      ast::expr_cont. { }\n-      ast::expr_ret(eo) { walk_expr_opt(v, eo); }\n-      ast::expr_put(eo) { walk_expr_opt(v, eo); }\n-      ast::expr_be(x) { walk_expr(v, x); }\n-      ast::expr_log(_, x) { walk_expr(v, x); }\n-      ast::expr_check(_, x) { walk_expr(v, x); }\n-      ast::expr_assert(x) { walk_expr(v, x); }\n-      ast::expr_port(_) { }\n-      ast::expr_chan(x) { walk_expr(v, x); }\n-      ast::expr_anon_obj(anon_obj) {\n-\n-        // Fields\n-        alt anon_obj.fields {\n-          none. { }\n-          some(fields) {\n-            for f: ast::anon_obj_field  in fields {\n-                walk_ty(v, f.ty);\n-                walk_expr(v, f.expr);\n-            }\n-          }\n-        }\n-\n-        // inner_obj\n-        alt anon_obj.inner_obj { none. { } some(e) { walk_expr(v, e); } }\n-\n-        // Methods\n-        for m: @ast::method  in anon_obj.methods {\n-            v.visit_method_pre(m);\n-            walk_fn(v, m.node.meth, ~[], m.span, some(m.node.ident),\n-                    m.node.id);\n-            v.visit_method_post(m);\n-        }\n-      }\n-      ast::expr_mac(mac) { walk_mac(v, mac); }\n-    }\n-    v.visit_expr_post(e);\n-}\n-\n-fn def_keep_going() -> bool { ret true; }\n-\n-fn def_want_crate_directives() -> bool { ret false; }\n-\n-fn def_visit_crate(c: &ast::crate) { }\n-\n-fn def_visit_crate_directive(c: &@ast::crate_directive) { }\n-\n-fn def_visit_view_item(vi: &@ast::view_item) { }\n-\n-fn def_visit_native_item(ni: &@ast::native_item) { }\n-\n-fn def_visit_item(i: &@ast::item) { }\n-\n-fn def_visit_method(m: &@ast::method) { }\n-\n-fn def_visit_block(b: &ast::blk) { }\n-\n-fn def_visit_stmt(s: &@ast::stmt) { }\n-\n-fn def_visit_arm(a: &ast::arm) { }\n-\n-fn def_visit_pat(p: &@ast::pat) { }\n-\n-fn def_visit_decl(d: &@ast::decl) { }\n-\n-fn def_visit_local(l: &@ast::local) { }\n-\n-fn def_visit_expr(e: &@ast::expr) { }\n-\n-fn def_visit_ty(t: &@ast::ty) { }\n-\n-fn def_visit_constr(c: &@ast::constr) { }\n-\n-fn def_visit_fn(f: &ast::_fn, tps: &ast::ty_param[], sp: &span,\n-                i: &ast::fn_ident, d: ast::node_id) {\n-}\n-\n-fn default_visitor() -> ast_visitor {\n-    ret {keep_going: def_keep_going,\n-         want_crate_directives: def_want_crate_directives,\n-         visit_crate_pre: def_visit_crate,\n-         visit_crate_post: def_visit_crate,\n-         visit_crate_directive_pre: def_visit_crate_directive,\n-         visit_crate_directive_post: def_visit_crate_directive,\n-         visit_view_item_pre: def_visit_view_item,\n-         visit_view_item_post: def_visit_view_item,\n-         visit_native_item_pre: def_visit_native_item,\n-         visit_native_item_post: def_visit_native_item,\n-         visit_item_pre: def_visit_item,\n-         visit_item_post: def_visit_item,\n-         visit_method_pre: def_visit_method,\n-         visit_method_post: def_visit_method,\n-         visit_block_pre: def_visit_block,\n-         visit_block_post: def_visit_block,\n-         visit_stmt_pre: def_visit_stmt,\n-         visit_stmt_post: def_visit_stmt,\n-         visit_arm_pre: def_visit_arm,\n-         visit_arm_post: def_visit_arm,\n-         visit_pat_pre: def_visit_pat,\n-         visit_pat_post: def_visit_pat,\n-         visit_decl_pre: def_visit_decl,\n-         visit_decl_post: def_visit_decl,\n-         visit_local_pre: def_visit_local,\n-         visit_local_post: def_visit_local,\n-         visit_expr_pre: def_visit_expr,\n-         visit_expr_post: def_visit_expr,\n-         visit_ty_pre: def_visit_ty,\n-         visit_ty_post: def_visit_ty,\n-         visit_constr: def_visit_constr,\n-         visit_fn_pre: def_visit_fn,\n-         visit_fn_post: def_visit_fn};\n-}\n-//\n-// Local Variables:\n-// mode: rust\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:\n-//"}]}