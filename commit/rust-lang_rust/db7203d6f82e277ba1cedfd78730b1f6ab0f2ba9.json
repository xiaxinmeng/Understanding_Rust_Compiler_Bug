{"sha": "db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNzIwM2Q2ZjgyZTI3N2JhMWNlZGZkNzg3MzBiMWY2YWIwZjJiYTk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-20T02:43:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-20T02:43:05Z"}, "message": "Rollup merge of #73442 - davidtwco:issue-72181-pretty-print-const-val-enum-no-variants, r=oli-obk\n\npretty/mir: const value enums with no variants\n\nFixes #72181.\n\nThis PR modifies the pretty printer and const eval in the MIR so that `destructure_const` (used in `pretty_print_const_value`) can handle enums with no variants (or types containing enums with no variants).\n\nI'm not convinced that this is the correct approach, folks more familiar with `destructure_const` would be able to say - happy to adjust the PR. Looking through `destructure_const` and the functions that it invokes, it didn't seem like it was written to handle zero-variant-enums - I assume that case is handled earlier in some way so `destructure_const` doesn't need to under normal circumstances. It didn't seem like it would be straightforward to make `destructure_const` handle this case in a first-class-feeling way (e.g. adding a `Variants::None` variant), so this PR makes some minimal changes to avoid ICEs.", "tree": {"sha": "37a1591cab5bdd8d58ca4f1c99e5c1cccbc51927", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37a1591cab5bdd8d58ca4f1c99e5c1cccbc51927"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7Xe6CRBK7hj4Ov3rIwAAdHIIACPG7tjIZBjFhN8qYIwacZNs\nFfSQ+EucUEauu0YH6GN07NcF2ozFYkG5/+VbWhWP6MMqxG9NhVoVzecDgZp5wh2y\nBOjxEhD+Fk95oe6Ykd3jnvNA88DzxxjCq1tYBz/QTUmiPaL7EyAYr6Dtm/fMG9vz\n08qbJDsW/H1U18p+lMrOssc1VIhF52hgcTeUxFK3F4+SeixIt3EyoVmZiiGLPMjD\noDJQBDbzCz+SKY5qNhYbOIl67d8812yWaondd5/x7G7yXdBsUiTegXW2r/os0p8q\nCM3KetyQsFaumB1xMXWdaggtP84ZyFR1I872h8meFbnUpTqoiolXJj51GeDb7VU=\n=DSk2\n-----END PGP SIGNATURE-----\n", "payload": "tree 37a1591cab5bdd8d58ca4f1c99e5c1cccbc51927\nparent d69d4c39ed76de7513082aaa50358e596adae4dd\nparent 6fa7dc65272c63a9e8dc1483d176433f39e18575\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592620985 -0700\ncommitter GitHub <noreply@github.com> 1592620985 -0700\n\nRollup merge of #73442 - davidtwco:issue-72181-pretty-print-const-val-enum-no-variants, r=oli-obk\n\npretty/mir: const value enums with no variants\n\nFixes #72181.\n\nThis PR modifies the pretty printer and const eval in the MIR so that `destructure_const` (used in `pretty_print_const_value`) can handle enums with no variants (or types containing enums with no variants).\n\nI'm not convinced that this is the correct approach, folks more familiar with `destructure_const` would be able to say - happy to adjust the PR. Looking through `destructure_const` and the functions that it invokes, it didn't seem like it was written to handle zero-variant-enums - I assume that case is handled earlier in some way so `destructure_const` doesn't need to under normal circumstances. It didn't seem like it would be straightforward to make `destructure_const` handle this case in a first-class-feeling way (e.g. adding a `Variants::None` variant), so this PR makes some minimal changes to avoid ICEs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "html_url": "https://github.com/rust-lang/rust/commit/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d69d4c39ed76de7513082aaa50358e596adae4dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d69d4c39ed76de7513082aaa50358e596adae4dd", "html_url": "https://github.com/rust-lang/rust/commit/d69d4c39ed76de7513082aaa50358e596adae4dd"}, {"sha": "6fa7dc65272c63a9e8dc1483d176433f39e18575", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa7dc65272c63a9e8dc1483d176433f39e18575", "html_url": "https://github.com/rust-lang/rust/commit/6fa7dc65272c63a9e8dc1483d176433f39e18575"}], "stats": {"total": 667, "additions": 654, "deletions": 13}, "files": [{"sha": "1aae97cc2a894e6c6185aa354f67b5b70a6de3c3", "filename": "src/librustc_middle/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fquery.rs?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -244,6 +244,6 @@ pub enum ClosureOutlivesSubject<'tcx> {\n /// The constituent parts of an ADT or array.\n #[derive(Copy, Clone, Debug, HashStable)]\n pub struct DestructuredConst<'tcx> {\n-    pub variant: VariantIdx,\n+    pub variant: Option<VariantIdx>,\n     pub fields: &'tcx [&'tcx ty::Const<'tcx>],\n }"}, {"sha": "68af22569e35326256533736f0c09f1f08898c5e", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -2001,6 +2001,8 @@ where\n                 }\n \n                 let fields = match this.ty.kind {\n+                    ty::Adt(def, _) if def.variants.is_empty() =>\n+                        bug!(\"for_variant called on zero-variant enum\"),\n                     ty::Adt(def, _) => def.variants[variant_index].fields.len(),\n                     _ => bug!(),\n                 };"}, {"sha": "ca0a1ac71c6442b1df281e36db638d1d0d94f9a0", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -2352,6 +2352,7 @@ impl<'tcx> AdtDef {\n     /// Alternatively, if there is no explicit discriminant, returns the\n     /// inferred discriminant directly.\n     pub fn discriminant_def_for_variant(&self, variant_index: VariantIdx) -> (Option<DefId>, u32) {\n+        assert!(!self.variants.is_empty());\n         let mut explicit_index = variant_index.as_u32();\n         let expr_did;\n         loop {"}, {"sha": "1a08639a533d5303b142e806985fa7b44fabb58f", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -1177,8 +1177,13 @@ pub trait PrettyPrinter<'tcx>:\n                         }\n                         p!(write(\")\"));\n                     }\n+                    ty::Adt(def, substs) if def.variants.is_empty() => {\n+                        p!(print_value_path(def.did, substs));\n+                    }\n                     ty::Adt(def, substs) => {\n-                        let variant_def = &def.variants[contents.variant];\n+                        let variant_id =\n+                            contents.variant.expect(\"destructed const of adt without variant id\");\n+                        let variant_def = &def.variants[variant_id];\n                         p!(print_value_path(variant_def.def_id, substs));\n \n                         match variant_def.ctor_kind {"}, {"sha": "b0addcb2bb68354ed688e4d3f9e25ec4475592b9", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -2099,6 +2099,9 @@ impl<'tcx> TyS<'tcx> {\n         variant_index: VariantIdx,\n     ) -> Option<Discr<'tcx>> {\n         match self.kind {\n+            TyKind::Adt(adt, _) if adt.variants.is_empty() => {\n+                bug!(\"discriminant_for_variant called on zero variant enum\");\n+            }\n             TyKind::Adt(adt, _) if adt.is_enum() => {\n                 Some(adt.discriminant_for_variant(tcx, variant_index))\n             }"}, {"sha": "ed992a59839547b802664c8bd9161c213e0234ca", "filename": "src/librustc_mir/const_eval/mod.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -30,8 +30,10 @@ pub(crate) fn const_caller_location(\n     ConstValue::Scalar(loc_place.ptr)\n }\n \n-// this function uses `unwrap` copiously, because an already validated constant\n-// must have valid fields and can thus never fail outside of compiler bugs\n+/// This function uses `unwrap` copiously, because an already validated constant\n+/// must have valid fields and can thus never fail outside of compiler bugs. However, it is\n+/// invoked from the pretty printer, where it can receive enums with no variants and e.g.\n+/// `read_discriminant` needs to be able to handle that.\n pub(crate) fn destructure_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -41,17 +43,21 @@ pub(crate) fn destructure_const<'tcx>(\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n     let op = ecx.eval_const_to_op(val, None).unwrap();\n \n-    let variant = ecx.read_discriminant(op).unwrap().1;\n-\n     // We go to `usize` as we cannot allocate anything bigger anyway.\n-    let field_count = match val.ty.kind {\n-        ty::Array(_, len) => usize::try_from(len.eval_usize(tcx, param_env)).unwrap(),\n-        ty::Adt(def, _) => def.variants[variant].fields.len(),\n-        ty::Tuple(substs) => substs.len(),\n+    let (field_count, variant, down) = match val.ty.kind {\n+        ty::Array(_, len) => (usize::try_from(len.eval_usize(tcx, param_env)).unwrap(), None, op),\n+        ty::Adt(def, _) if def.variants.is_empty() => {\n+            return mir::DestructuredConst { variant: None, fields: tcx.arena.alloc_slice(&[]) };\n+        }\n+        ty::Adt(def, _) => {\n+            let variant = ecx.read_discriminant(op).unwrap().1;\n+            let down = ecx.operand_downcast(op, variant).unwrap();\n+            (def.variants[variant].fields.len(), Some(variant), down)\n+        }\n+        ty::Tuple(substs) => (substs.len(), None, op),\n         _ => bug!(\"cannot destructure constant {:?}\", val),\n     };\n \n-    let down = ecx.operand_downcast(op, variant).unwrap();\n     let fields_iter = (0..field_count).map(|i| {\n         let field_op = ecx.operand_field(down, i).unwrap();\n         let val = op_to_const(&ecx, field_op);"}, {"sha": "6ac5d41ec6135ee371554cf130f902a9389fe525", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -800,7 +800,11 @@ impl<'tcx> Constructor<'tcx> {\n                 assert!(!adt.is_enum());\n                 VariantIdx::new(0)\n             }\n-            ConstantValue(c) => cx.tcx.destructure_const(cx.param_env.and(c)).variant,\n+            ConstantValue(c) => cx\n+                .tcx\n+                .destructure_const(cx.param_env.and(c))\n+                .variant\n+                .expect(\"destructed const of adt without variant id\"),\n             _ => bug!(\"bad constructor {:?} for adt {:?}\", self, adt),\n         }\n     }"}, {"sha": "6dd7e0871b45ef8bb9b319dd805fa873d3fdb951", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -275,7 +275,9 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 PatKind::Variant {\n                     adt_def,\n                     substs,\n-                    variant_index: destructured.variant,\n+                    variant_index: destructured\n+                        .variant\n+                        .expect(\"destructed const of adt without variant id\"),\n                     subpatterns: field_pats(destructured.fields),\n                 }\n             }"}, {"sha": "6d65f847a2c63fd13b7742f9566abf64f6e0782a", "filename": "src/test/mir-opt/issue-72181-1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181-1.rs?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -0,0 +1,21 @@\n+// compile-flags: -Z mir-opt-level=1\n+// Regression test for #72181, this ICE requires `-Z mir-opt-level=1` flags.\n+\n+#![feature(never_type)]\n+#![allow(unused, invalid_value)]\n+\n+enum Void {}\n+\n+// EMIT_MIR rustc.f.mir_map.0.mir\n+fn f(v: Void) -> ! {\n+    match v {}\n+}\n+\n+// EMIT_MIR rustc.main.mir_map.0.mir\n+fn main() {\n+    let v: Void = unsafe {\n+        std::mem::transmute::<(), Void>(())\n+    };\n+\n+    f(v);\n+}"}, {"sha": "1821365898e538e6d8f4561820441400f1729130", "filename": "src/test/mir-opt/issue-72181-1/rustc.f.mir_map.0.mir", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181-1%2Frustc.f.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181-1%2Frustc.f.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181-1%2Frustc.f.mir_map.0.mir?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -0,0 +1,37 @@\n+// MIR for `f` 0 mir_map\n+\n+fn f(_1: Void) -> ! {\n+    debug v => _1;                       // in scope 0 at $DIR/issue-72181-1.rs:10:6: 10:7\n+    let mut _0: !;                       // return place in scope 0 at $DIR/issue-72181-1.rs:10:18: 10:19\n+    let mut _2: !;                       // in scope 0 at $DIR/issue-72181-1.rs:10:20: 12:2\n+    let mut _3: !;                       // in scope 0 at $DIR/issue-72181-1.rs:11:5: 11:15\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181-1.rs:10:20: 12:2\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-72181-1.rs:11:5: 11:15\n+        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/issue-72181-1.rs:11:11: 11:12\n+        unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:11:11: 11:12\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181-1.rs:10:1: 12:2\n+    }\n+\n+    bb2: {\n+        unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:11:5: 11:15\n+    }\n+\n+    bb3: {\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-72181-1.rs:11:14: 11:15\n+        unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:10:20: 12:2\n+    }\n+\n+    bb4: {\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181-1.rs:12:1: 12:2\n+        goto -> bb5;                     // scope 0 at $DIR/issue-72181-1.rs:12:2: 12:2\n+    }\n+\n+    bb5: {\n+        return;                          // scope 0 at $DIR/issue-72181-1.rs:12:2: 12:2\n+    }\n+}"}, {"sha": "b87d0294fb87b44196c0a3c279eff2d2e0733c23", "filename": "src/test/mir-opt/issue-72181-1/rustc.main.mir_map.0.mir", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181-1%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181-1%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181-1%2Frustc.main.mir_map.0.mir?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -0,0 +1,67 @@\n+// MIR for `main` 0 mir_map\n+\n+| User Type Annotations\n+| 0: Canonical { max_universe: U0, variables: [], value: Ty(Void) } at $DIR/issue-72181-1.rs:16:12: 16:16\n+| 1: Canonical { max_universe: U0, variables: [], value: Ty(Void) } at $DIR/issue-72181-1.rs:16:12: 16:16\n+|\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-72181-1.rs:15:11: 15:11\n+    let mut _1: !;                       // in scope 0 at $DIR/issue-72181-1.rs:15:11: 21:2\n+    let _2: Void as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n+    let mut _3: ();                      // in scope 0 at $DIR/issue-72181-1.rs:17:41: 17:43\n+    let _4: !;                           // in scope 0 at $DIR/issue-72181-1.rs:20:5: 20:9\n+    let mut _5: Void;                    // in scope 0 at $DIR/issue-72181-1.rs:20:7: 20:8\n+    scope 1 {\n+        debug v => _2;                   // in scope 1 at $DIR/issue-72181-1.rs:16:9: 16:10\n+    }\n+    scope 2 {\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n+        StorageLive(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n+        _3 = ();                         // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n+        _2 = const std::intrinsics::transmute::<(), Void>(move _3) -> [return: bb2, unwind: bb1]; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n+                                         // ty::Const\n+                                         // + ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {std::intrinsics::transmute::<(), Void>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181-1.rs:17:9: 17:40\n+                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {std::intrinsics::transmute::<(), Void>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181-1.rs:15:1: 21:2\n+    }\n+\n+    bb2: {\n+        StorageDead(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:43: 17:44\n+        FakeRead(ForLet, _2);            // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n+        AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/issue-72181-1.rs:16:12: 16:16\n+        StorageLive(_4);                 // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n+        StorageLive(_5);                 // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8\n+        _5 = move _2;                    // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8\n+        const f(move _5) -> bb1;         // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n+                                         // ty::Const\n+                                         // + ty: fn(Void) -> ! {f}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181-1.rs:20:5: 20:6\n+                                         // + literal: Const { ty: fn(Void) -> ! {f}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb3: {\n+        StorageDead(_5);                 // scope 1 at $DIR/issue-72181-1.rs:20:8: 20:9\n+        StorageDead(_4);                 // scope 1 at $DIR/issue-72181-1.rs:20:9: 20:10\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181-1.rs:21:1: 21:2\n+        unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:15:11: 21:2\n+    }\n+\n+    bb4: {\n+        goto -> bb5;                     // scope 0 at $DIR/issue-72181-1.rs:21:2: 21:2\n+    }\n+\n+    bb5: {\n+        return;                          // scope 0 at $DIR/issue-72181-1.rs:21:2: 21:2\n+    }\n+}"}, {"sha": "9373ce12032b95e05ed1b64e8bb2025fd72cb879", "filename": "src/test/mir-opt/issue-72181.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181.rs?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -0,0 +1,28 @@\n+// compile-flags: -Z mir-opt-level=1\n+// Regression test for #72181, this ICE requires `-Z mir-opt-level=1` flags.\n+\n+use std::mem;\n+\n+#[derive(Copy, Clone)]\n+enum Never {}\n+\n+union Foo {\n+    a: u64,\n+    b: Never\n+}\n+\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+// EMIT_MIR rustc.foo.mir_map.0.mir\n+fn foo(xs: [(Never, u32); 1]) -> u32 { xs[0].1 }\n+\n+// EMIT_MIR rustc.bar.mir_map.0.mir\n+fn bar([(_, x)]: [(Never, u32); 1]) -> u32 { x }\n+\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+// EMIT_MIR rustc.main.mir_map.0.mir\n+fn main() {\n+    let _ = mem::size_of::<Foo>();\n+\n+    let f = [Foo { a: 42 }, Foo { a: 10 }];\n+    let _ = unsafe { f[0].a };\n+}"}, {"sha": "29654c2b1f83b93c15a847f9b47c3ffd33cfe44c", "filename": "src/test/mir-opt/issue-72181/32bit/rustc.bar.mir_map.0.mir", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.bar.mir_map.0.mir?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -0,0 +1,25 @@\n+// MIR for `bar` 0 mir_map\n+\n+fn bar(_1: [(Never, u32); 1]) -> u32 {\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:19:40: 19:43\n+    let _2: u32;                         // in scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n+    scope 1 {\n+        debug x => _2;                   // in scope 1 at $DIR/issue-72181.rs:19:13: 19:14\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n+        _2 = (_1[0 of 1].1: u32);        // scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n+        _0 = _2;                         // scope 1 at $DIR/issue-72181.rs:19:46: 19:47\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:19:48: 19:49\n+        goto -> bb2;                     // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:19:1: 19:49\n+    }\n+\n+    bb2: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n+    }\n+}"}, {"sha": "776eb61a5264f324ba2a4884eb33b445ebbec963", "filename": "src/test/mir-opt/issue-72181/32bit/rustc.foo.mir_map.0.mir", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.foo.mir_map.0.mir?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -0,0 +1,37 @@\n+// MIR for `foo` 0 mir_map\n+\n+fn foo(_1: [(Never, u32); 1]) -> u32 {\n+    debug xs => _1;                      // in scope 0 at $DIR/issue-72181.rs:16:8: 16:10\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:16:34: 16:37\n+    let _2: usize;                       // in scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n+    let mut _3: usize;                   // in scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+    let mut _4: bool;                    // in scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n+        _2 = const 0usize;               // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:16:43: 16:44\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n+        _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+        _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+        assert(move _4, \"index out of bounds: the len is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:16:1: 16:49\n+    }\n+\n+    bb2: {\n+        _0 = (_1[_2].1: u32);            // scope 0 at $DIR/issue-72181.rs:16:40: 16:47\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:16:48: 16:49\n+        goto -> bb3;                     // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+    }\n+\n+    bb3: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+    }\n+}"}, {"sha": "aa44dcd8eaee3ab86ce7ba490712bfd8c4e7a04a", "filename": "src/test/mir-opt/issue-72181/32bit/rustc.main.mir_map.0.mir", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F32bit%2Frustc.main.mir_map.0.mir?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -0,0 +1,93 @@\n+// MIR for `main` 0 mir_map\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-72181.rs:23:11: 23:11\n+    let mut _1: usize;                   // in scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+    let mut _3: Foo;                     // in scope 0 at $DIR/issue-72181.rs:26:14: 26:27\n+    let mut _4: Foo;                     // in scope 0 at $DIR/issue-72181.rs:26:29: 26:42\n+    let mut _5: u64;                     // in scope 0 at $DIR/issue-72181.rs:27:13: 27:30\n+    let _6: usize;                       // in scope 0 at $DIR/issue-72181.rs:27:24: 27:25\n+    let mut _7: usize;                   // in scope 0 at $DIR/issue-72181.rs:27:22: 27:26\n+    let mut _8: bool;                    // in scope 0 at $DIR/issue-72181.rs:27:22: 27:26\n+    scope 1 {\n+        let _2: [Foo; 2];                // in scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        scope 2 {\n+            debug f => _2;               // in scope 2 at $DIR/issue-72181.rs:26:9: 26:10\n+            scope 3 {\n+            }\n+            scope 4 {\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+        _1 = const std::mem::size_of::<Foo>() -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+                                         // ty::Const\n+                                         // + ty: fn() -> usize {std::mem::size_of::<Foo>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:24:13: 24:32\n+                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:23:1: 28:2\n+    }\n+\n+    bb2: {\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-72181.rs:24:34: 24:35\n+        StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n+        _3 = Foo { a: const 42u64 };     // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n+                                         // ty::Const\n+                                         // + ty: u64\n+                                         // + val: Value(Scalar(0x000000000000002a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:26:23: 26:25\n+                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000002a)) }\n+        StorageLive(_4);                 // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n+        _4 = Foo { a: const 10u64 };     // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n+                                         // ty::Const\n+                                         // + ty: u64\n+                                         // + val: Value(Scalar(0x000000000000000a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:26:38: 26:40\n+                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000000a)) }\n+        _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:26:13: 26:43\n+        StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n+        StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n+        FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:27:13: 27:30\n+        StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n+        _6 = const 0usize;               // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:27:24: 27:25\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n+        _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+        _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+        assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+    }\n+\n+    bb3: {\n+        _5 = (_2[_6].0: u64);            // scope 4 at $DIR/issue-72181.rs:27:22: 27:28\n+        StorageDead(_6);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n+        StorageDead(_5);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n+        _0 = const ();                   // scope 0 at $DIR/issue-72181.rs:23:11: 28:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:23:11: 28:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+        StorageDead(_2);                 // scope 1 at $DIR/issue-72181.rs:28:1: 28:2\n+        goto -> bb4;                     // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+    }\n+\n+    bb4: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+    }\n+}"}, {"sha": "29654c2b1f83b93c15a847f9b47c3ffd33cfe44c", "filename": "src/test/mir-opt/issue-72181/64bit/rustc.bar.mir_map.0.mir", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.bar.mir_map.0.mir?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -0,0 +1,25 @@\n+// MIR for `bar` 0 mir_map\n+\n+fn bar(_1: [(Never, u32); 1]) -> u32 {\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:19:40: 19:43\n+    let _2: u32;                         // in scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n+    scope 1 {\n+        debug x => _2;                   // in scope 1 at $DIR/issue-72181.rs:19:13: 19:14\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n+        _2 = (_1[0 of 1].1: u32);        // scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n+        _0 = _2;                         // scope 1 at $DIR/issue-72181.rs:19:46: 19:47\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:19:48: 19:49\n+        goto -> bb2;                     // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:19:1: 19:49\n+    }\n+\n+    bb2: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n+    }\n+}"}, {"sha": "639019eaf9ccc1b6fab203edcbc63cb7c60817ff", "filename": "src/test/mir-opt/issue-72181/64bit/rustc.foo.mir_map.0.mir", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.foo.mir_map.0.mir?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -0,0 +1,37 @@\n+// MIR for `foo` 0 mir_map\n+\n+fn foo(_1: [(Never, u32); 1]) -> u32 {\n+    debug xs => _1;                      // in scope 0 at $DIR/issue-72181.rs:16:8: 16:10\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:16:34: 16:37\n+    let _2: usize;                       // in scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n+    let mut _3: usize;                   // in scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+    let mut _4: bool;                    // in scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n+        _2 = const 0usize;               // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:16:43: 16:44\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n+        _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+        _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+        assert(move _4, \"index out of bounds: the len is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:16:1: 16:49\n+    }\n+\n+    bb2: {\n+        _0 = (_1[_2].1: u32);            // scope 0 at $DIR/issue-72181.rs:16:40: 16:47\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:16:48: 16:49\n+        goto -> bb3;                     // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+    }\n+\n+    bb3: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+    }\n+}"}, {"sha": "4098e0e295c5d520f35d41279949ed98c9931613", "filename": "src/test/mir-opt/issue-72181/64bit/rustc.main.mir_map.0.mir", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2F64bit%2Frustc.main.mir_map.0.mir?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -0,0 +1,93 @@\n+// MIR for `main` 0 mir_map\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-72181.rs:23:11: 23:11\n+    let mut _1: usize;                   // in scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+    let mut _3: Foo;                     // in scope 0 at $DIR/issue-72181.rs:26:14: 26:27\n+    let mut _4: Foo;                     // in scope 0 at $DIR/issue-72181.rs:26:29: 26:42\n+    let mut _5: u64;                     // in scope 0 at $DIR/issue-72181.rs:27:13: 27:30\n+    let _6: usize;                       // in scope 0 at $DIR/issue-72181.rs:27:24: 27:25\n+    let mut _7: usize;                   // in scope 0 at $DIR/issue-72181.rs:27:22: 27:26\n+    let mut _8: bool;                    // in scope 0 at $DIR/issue-72181.rs:27:22: 27:26\n+    scope 1 {\n+        let _2: [Foo; 2];                // in scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        scope 2 {\n+            debug f => _2;               // in scope 2 at $DIR/issue-72181.rs:26:9: 26:10\n+            scope 3 {\n+            }\n+            scope 4 {\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+        _1 = const std::mem::size_of::<Foo>() -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+                                         // ty::Const\n+                                         // + ty: fn() -> usize {std::mem::size_of::<Foo>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:24:13: 24:32\n+                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:23:1: 28:2\n+    }\n+\n+    bb2: {\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-72181.rs:24:34: 24:35\n+        StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n+        _3 = Foo { a: const 42u64 };     // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n+                                         // ty::Const\n+                                         // + ty: u64\n+                                         // + val: Value(Scalar(0x000000000000002a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:26:23: 26:25\n+                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000002a)) }\n+        StorageLive(_4);                 // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n+        _4 = Foo { a: const 10u64 };     // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n+                                         // ty::Const\n+                                         // + ty: u64\n+                                         // + val: Value(Scalar(0x000000000000000a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:26:38: 26:40\n+                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000000a)) }\n+        _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:26:13: 26:43\n+        StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n+        StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n+        FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:27:13: 27:30\n+        StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n+        _6 = const 0usize;               // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:27:24: 27:25\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n+        _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+        _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+        assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+    }\n+\n+    bb3: {\n+        _5 = (_2[_6].0: u64);            // scope 4 at $DIR/issue-72181.rs:27:22: 27:28\n+        StorageDead(_6);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n+        StorageDead(_5);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n+        _0 = const ();                   // scope 0 at $DIR/issue-72181.rs:23:11: 28:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:23:11: 28:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+        StorageDead(_2);                 // scope 1 at $DIR/issue-72181.rs:28:1: 28:2\n+        goto -> bb4;                     // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+    }\n+\n+    bb4: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+    }\n+}"}, {"sha": "3b6dc46d055cda72b741528a06f95a85cf121e4e", "filename": "src/test/mir-opt/issue-72181/rustc.bar.mir_map.0.mir", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.bar.mir_map.0.mir?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -0,0 +1,25 @@\n+// MIR for `bar` 0 mir_map\n+\n+fn bar(_1: [(Never, u32); 1]) -> u32 {\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:18:40: 18:43\n+    let _2: u32;                         // in scope 0 at $DIR/issue-72181.rs:18:13: 18:14\n+    scope 1 {\n+        debug x => _2;                   // in scope 1 at $DIR/issue-72181.rs:18:13: 18:14\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:18:13: 18:14\n+        _2 = (_1[0 of 1].1: u32);        // scope 0 at $DIR/issue-72181.rs:18:13: 18:14\n+        _0 = _2;                         // scope 1 at $DIR/issue-72181.rs:18:46: 18:47\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:18:48: 18:49\n+        goto -> bb2;                     // scope 0 at $DIR/issue-72181.rs:18:49: 18:49\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:18:1: 18:49\n+    }\n+\n+    bb2: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:18:49: 18:49\n+    }\n+}"}, {"sha": "2941e282cf42b4fdd4cba34869540d21ed006637", "filename": "src/test/mir-opt/issue-72181/rustc.foo.mir_map.0.mir", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.foo.mir_map.0.mir?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -0,0 +1,37 @@\n+// MIR for `foo` 0 mir_map\n+\n+fn foo(_1: [(Never, u32); 1]) -> u32 {\n+    debug xs => _1;                      // in scope 0 at $DIR/issue-72181.rs:15:8: 15:10\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:15:34: 15:37\n+    let _2: usize;                       // in scope 0 at $DIR/issue-72181.rs:15:43: 15:44\n+    let mut _3: usize;                   // in scope 0 at $DIR/issue-72181.rs:15:40: 15:45\n+    let mut _4: bool;                    // in scope 0 at $DIR/issue-72181.rs:15:40: 15:45\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:15:43: 15:44\n+        _2 = const 0usize;               // scope 0 at $DIR/issue-72181.rs:15:43: 15:44\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:15:43: 15:44\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n+        _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:15:40: 15:45\n+        _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:15:40: 15:45\n+        assert(move _4, \"index out of bounds: the len is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:15:40: 15:45\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:15:1: 15:49\n+    }\n+\n+    bb2: {\n+        _0 = (_1[_2].1: u32);            // scope 0 at $DIR/issue-72181.rs:15:40: 15:47\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:15:48: 15:49\n+        goto -> bb3;                     // scope 0 at $DIR/issue-72181.rs:15:49: 15:49\n+    }\n+\n+    bb3: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:15:49: 15:49\n+    }\n+}"}, {"sha": "65f4de0e23545b00ed1ae47a7dca0a23162e194d", "filename": "src/test/mir-opt/issue-72181/rustc.main.mir_map.0.mir", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181%2Frustc.main.mir_map.0.mir?ref=db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "patch": "@@ -0,0 +1,93 @@\n+// MIR for `main` 0 mir_map\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-72181.rs:21:11: 21:11\n+    let mut _1: usize;                   // in scope 0 at $DIR/issue-72181.rs:22:13: 22:34\n+    let mut _3: Foo;                     // in scope 0 at $DIR/issue-72181.rs:24:14: 24:27\n+    let mut _4: Foo;                     // in scope 0 at $DIR/issue-72181.rs:24:29: 24:42\n+    let mut _5: u64;                     // in scope 0 at $DIR/issue-72181.rs:25:13: 25:30\n+    let _6: usize;                       // in scope 0 at $DIR/issue-72181.rs:25:24: 25:25\n+    let mut _7: usize;                   // in scope 0 at $DIR/issue-72181.rs:25:22: 25:26\n+    let mut _8: bool;                    // in scope 0 at $DIR/issue-72181.rs:25:22: 25:26\n+    scope 1 {\n+        let _2: [Foo; 2];                // in scope 1 at $DIR/issue-72181.rs:24:9: 24:10\n+        scope 2 {\n+            debug f => _2;               // in scope 2 at $DIR/issue-72181.rs:24:9: 24:10\n+            scope 3 {\n+            }\n+            scope 4 {\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:22:13: 22:34\n+        _1 = const std::mem::size_of::<Foo>() -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:22:13: 22:34\n+                                         // ty::Const\n+                                         // + ty: fn() -> usize {std::mem::size_of::<Foo>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:22:13: 22:32\n+                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:21:1: 26:2\n+    }\n+\n+    bb2: {\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-72181.rs:22:34: 22:35\n+        StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:24:9: 24:10\n+        StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:24:14: 24:27\n+        _3 = Foo { a: const 42u64 };     // scope 1 at $DIR/issue-72181.rs:24:14: 24:27\n+                                         // ty::Const\n+                                         // + ty: u64\n+                                         // + val: Value(Scalar(0x000000000000002a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:24:23: 24:25\n+                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000002a)) }\n+        StorageLive(_4);                 // scope 1 at $DIR/issue-72181.rs:24:29: 24:42\n+        _4 = Foo { a: const 10u64 };     // scope 1 at $DIR/issue-72181.rs:24:29: 24:42\n+                                         // ty::Const\n+                                         // + ty: u64\n+                                         // + val: Value(Scalar(0x000000000000000a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:24:38: 24:40\n+                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000000a)) }\n+        _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:24:13: 24:43\n+        StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:24:42: 24:43\n+        StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:24:42: 24:43\n+        FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:24:9: 24:10\n+        StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:25:13: 25:30\n+        StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:25:24: 25:25\n+        _6 = const 0usize;               // scope 4 at $DIR/issue-72181.rs:25:24: 25:25\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:25:24: 25:25\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n+        _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:25:22: 25:26\n+        _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:25:22: 25:26\n+        assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:25:22: 25:26\n+    }\n+\n+    bb3: {\n+        _5 = (_2[_6].0: u64);            // scope 4 at $DIR/issue-72181.rs:25:22: 25:28\n+        StorageDead(_6);                 // scope 2 at $DIR/issue-72181.rs:25:30: 25:31\n+        StorageDead(_5);                 // scope 2 at $DIR/issue-72181.rs:25:30: 25:31\n+        _0 = const ();                   // scope 0 at $DIR/issue-72181.rs:21:11: 26:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-72181.rs:21:11: 26:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+        StorageDead(_2);                 // scope 1 at $DIR/issue-72181.rs:26:1: 26:2\n+        goto -> bb4;                     // scope 0 at $DIR/issue-72181.rs:26:2: 26:2\n+    }\n+\n+    bb4: {\n+        return;                          // scope 0 at $DIR/issue-72181.rs:26:2: 26:2\n+    }\n+}"}]}