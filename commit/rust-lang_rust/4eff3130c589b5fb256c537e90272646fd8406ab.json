{"sha": "4eff3130c589b5fb256c537e90272646fd8406ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZmYzMTMwYzU4OWI1ZmIyNTZjNTM3ZTkwMjcyNjQ2ZmQ4NDA2YWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-21T00:25:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-21T00:25:00Z"}, "message": "core::rt:: Implement Reader/Writer for MemReader/MemWriter", "tree": {"sha": "adb7da63e1ebc2c56acf00678d62caf897d7d5e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adb7da63e1ebc2c56acf00678d62caf897d7d5e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eff3130c589b5fb256c537e90272646fd8406ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eff3130c589b5fb256c537e90272646fd8406ab", "html_url": "https://github.com/rust-lang/rust/commit/4eff3130c589b5fb256c537e90272646fd8406ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eff3130c589b5fb256c537e90272646fd8406ab/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa478f577565174327888ea768dfa3a1018416f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa478f577565174327888ea768dfa3a1018416f2", "html_url": "https://github.com/rust-lang/rust/commit/fa478f577565174327888ea768dfa3a1018416f2"}], "stats": {"total": 77, "additions": 70, "deletions": 7}, "files": [{"sha": "06e1466831df0e21b8f81b3abebe4b1baa6111c5", "filename": "src/libcore/rt/io/mem.rs", "status": "modified", "additions": 62, "deletions": 7, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/4eff3130c589b5fb256c537e90272646fd8406ab/src%2Flibcore%2Frt%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eff3130c589b5fb256c537e90272646fd8406ab/src%2Flibcore%2Frt%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fmem.rs?ref=4eff3130c589b5fb256c537e90272646fd8406ab", "patch": "@@ -17,7 +17,7 @@\n \n use prelude::*;\n use super::*;\n-\n+use cmp::min;\n \n /// Writes to an owned, growable byte vector\n pub struct MemWriter {\n@@ -29,13 +29,15 @@ impl MemWriter {\n }\n \n impl Writer for MemWriter {\n-    fn write(&mut self, _buf: &[u8]) { fail!() }\n+    fn write(&mut self, buf: &[u8]) {\n+        self.buf.push_all(buf)\n+    }\n \n     fn flush(&mut self) { /* no-op */ }\n }\n \n impl Seek for MemWriter {\n-    fn tell(&self) -> u64 { fail!() }\n+    fn tell(&self) -> u64 { self.buf.len() as u64 }\n \n     fn seek(&mut self, _pos: i64, _style: SeekStyle) { fail!() }\n }\n@@ -77,13 +79,27 @@ impl MemReader {\n }\n \n impl Reader for MemReader {\n-    fn read(&mut self, _buf: &mut [u8]) -> Option<uint> { fail!() }\n+    fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n+        { if self.eof() { return None; } }\n+\n+        let write_len = min(buf.len(), self.buf.len() - self.pos);\n+        {\n+            let input = self.buf.slice(self.pos, self.pos + write_len);\n+            let output = vec::mut_slice(buf, 0, write_len);\n+            assert!(input.len() == output.len());\n+            vec::bytes::copy_memory(output, input, write_len);\n+        }\n+        self.pos += write_len;\n+        assert!(self.pos <= self.buf.len());\n \n-    fn eof(&mut self) -> bool { fail!() }\n+        return Some(write_len);\n+    }\n+\n+    fn eof(&mut self) -> bool { self.pos == self.buf.len() }\n }\n \n impl Seek for MemReader {\n-    fn tell(&self) -> u64 { fail!() }\n+    fn tell(&self) -> u64 { self.pos as u64 }\n \n     fn seek(&mut self, _pos: i64, _style: SeekStyle) { fail!() }\n }\n@@ -163,4 +179,43 @@ impl<'self> Seek for BufReader<'self> {\n     fn tell(&self) -> u64 { fail!() }\n \n     fn seek(&mut self, _pos: i64, _style: SeekStyle) { fail!() }\n-}\n\\ No newline at end of file\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use prelude::*;\n+    use super::*;\n+\n+    #[test]\n+    fn test_mem_writer() {\n+        let mut writer = MemWriter::new();\n+        assert!(writer.tell() == 0);\n+        writer.write([0]);\n+        assert!(writer.tell() == 1);\n+        writer.write([1, 2, 3]);\n+        writer.write([4, 5, 6, 7]);\n+        assert!(writer.tell() == 8);\n+        assert!(writer.inner() == ~[0, 1, 2, 3, 4, 5 , 6, 7]);\n+    }\n+\n+    #[test]\n+    fn test_mem_reader() {\n+        let mut reader = MemReader::new(~[0, 1, 2, 3, 4, 5, 6, 7]);\n+        let mut buf = [];\n+        assert!(reader.read(buf) == Some(0));\n+        assert!(reader.tell() == 0);\n+        let mut buf = [0];\n+        assert!(reader.read(buf) == Some(1));\n+        assert!(reader.tell() == 1);\n+        assert!(buf == [0]);\n+        let mut buf = [0, ..4];\n+        assert!(reader.read(buf) == Some(4));\n+        assert!(reader.tell() == 5);\n+        assert!(buf == [1, 2, 3, 4]);\n+        assert!(reader.read(buf) == Some(3));\n+        assert!(buf.slice(0, 3) == [5, 6, 7]);\n+        assert!(reader.eof());\n+        assert!(reader.read(buf) == None);\n+        assert!(reader.eof());\n+    }\n+}"}, {"sha": "238bd97a62d17b2c16b5c71068617396c2a51bb5", "filename": "src/libcore/rt/io/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4eff3130c589b5fb256c537e90272646fd8406ab/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eff3130c589b5fb256c537e90272646fd8406ab/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fmod.rs?ref=4eff3130c589b5fb256c537e90272646fd8406ab", "patch": "@@ -269,6 +269,14 @@ pub enum SeekStyle {\n /// * Are `u64` and `i64` the right choices?\n pub trait Seek {\n     fn tell(&self) -> u64;\n+\n+    /// Seek to an offset in a stream\n+    ///\n+    /// A successful seek clears the EOF indicator.\n+    ///\n+    /// # XXX\n+    ///\n+    /// * What is the behavior when seeking past the end of a stream?\n     fn seek(&mut self, pos: i64, style: SeekStyle);\n }\n "}]}