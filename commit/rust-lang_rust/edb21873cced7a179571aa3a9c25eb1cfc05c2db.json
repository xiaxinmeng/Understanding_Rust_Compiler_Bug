{"sha": "edb21873cced7a179571aa3a9c25eb1cfc05c2db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYjIxODczY2NlZDdhMTc5NTcxYWEzYTljMjVlYjFjZmMwNWMyZGI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-06-22T19:51:51Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-07-23T15:17:31Z"}, "message": "Make path::resolve a method on ExtCtxt", "tree": {"sha": "f40ace2b908649c585a7bfc5740a63048c58be93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f40ace2b908649c585a7bfc5740a63048c58be93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edb21873cced7a179571aa3a9c25eb1cfc05c2db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edb21873cced7a179571aa3a9c25eb1cfc05c2db", "html_url": "https://github.com/rust-lang/rust/commit/edb21873cced7a179571aa3a9c25eb1cfc05c2db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edb21873cced7a179571aa3a9c25eb1cfc05c2db/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ccf52c1c6cffde2905d7ad0ebfa36a9e8a0c319", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ccf52c1c6cffde2905d7ad0ebfa36a9e8a0c319", "html_url": "https://github.com/rust-lang/rust/commit/8ccf52c1c6cffde2905d7ad0ebfa36a9e8a0c319"}], "stats": {"total": 66, "additions": 30, "deletions": 36}, "files": [{"sha": "11b7a984aaa001493ed1498a103bb404db49cfb8", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/edb21873cced7a179571aa3a9c25eb1cfc05c2db/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb21873cced7a179571aa3a9c25eb1cfc05c2db/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=edb21873cced7a179571aa3a9c25eb1cfc05c2db", "patch": "@@ -1,6 +1,6 @@\n use crate::ast::{self, Attribute, Name, PatKind};\n use crate::attr::{HasAttrs, Stability, Deprecation};\n-use crate::source_map::{SourceMap, Spanned, respan};\n+use crate::source_map::{SourceMap, Spanned, FileName, respan};\n use crate::edition::Edition;\n use crate::ext::expand::{self, AstFragment, Invocation};\n use crate::ext::hygiene::{ExpnId, SyntaxContext, Transparency};\n@@ -889,6 +889,31 @@ impl<'a> ExtCtxt<'a> {\n     pub fn check_unused_macros(&self) {\n         self.resolver.check_unused_macros();\n     }\n+\n+    /// Resolve a path mentioned inside Rust code.\n+    ///\n+    /// This unifies the logic used for resolving `include_X!`, and `#[doc(include)]` file paths.\n+    ///\n+    /// Returns an absolute path to the file that `path` refers to.\n+    pub fn resolve_path(&self, path: impl Into<PathBuf>, span: Span) -> PathBuf {\n+        let path = path.into();\n+\n+        // Relative paths are resolved relative to the file in which they are found\n+        // after macro expansion (that is, they are unhygienic).\n+        if !path.is_absolute() {\n+            let callsite = span.source_callsite();\n+            let mut result = match self.source_map().span_to_unmapped_path(callsite) {\n+                FileName::Real(path) => path,\n+                FileName::DocTest(path, _) => path,\n+                other => panic!(\"cannot resolve relative path in non-file source `{}`\", other),\n+            };\n+            result.pop();\n+            result.push(path);\n+            result\n+        } else {\n+            path\n+        }\n+    }\n }\n \n /// Extracts a string literal from the macro expanded version of `expr`,"}, {"sha": "ae8b11ff9d50e5abdf69d7edf1d8219086576237", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edb21873cced7a179571aa3a9c25eb1cfc05c2db/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb21873cced7a179571aa3a9c25eb1cfc05c2db/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=edb21873cced7a179571aa3a9c25eb1cfc05c2db", "patch": "@@ -17,7 +17,6 @@ use crate::symbol::{sym, Symbol};\n use crate::tokenstream::{TokenStream, TokenTree};\n use crate::visit::{self, Visitor};\n use crate::util::map_in_place::MapInPlace;\n-use crate::util::path;\n \n use errors::{Applicability, FatalError};\n use smallvec::{smallvec, SmallVec};\n@@ -1254,7 +1253,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                         return noop_visit_attribute(at, self);\n                     }\n \n-                    let filename = path::resolve(&*file.as_str(), it.span(), self.cx.source_map());\n+                    let filename = self.cx.resolve_path(&*file.as_str(), it.span());\n                     match fs::read_to_string(&filename) {\n                         Ok(src) => {\n                             let src_interned = Symbol::intern(&src);"}, {"sha": "ae080c05eec91bbfb59b68ae1a8c7dc0bc854b5e", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/edb21873cced7a179571aa3a9c25eb1cfc05c2db/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb21873cced7a179571aa3a9c25eb1cfc05c2db/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=edb21873cced7a179571aa3a9c25eb1cfc05c2db", "patch": "@@ -6,7 +6,6 @@ use crate::print::pprust;\n use crate::ptr::P;\n use crate::symbol::Symbol;\n use crate::tokenstream;\n-use crate::util::path;\n \n use smallvec::SmallVec;\n use syntax_pos::{self, Pos, Span};\n@@ -78,7 +77,7 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: &[tokenstrea\n         None => return DummyResult::any(sp),\n     };\n     // The file will be added to the code map by the parser\n-    let file = path::resolve(file, sp, cx.source_map());\n+    let file = cx.resolve_path(file, sp);\n     let directory_ownership = DirectoryOwnership::Owned { relative: None };\n     let p = parse::new_sub_parser_from_file(cx.parse_sess(), &file, directory_ownership, None, sp);\n \n@@ -115,7 +114,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::To\n         Some(f) => f,\n         None => return DummyResult::expr(sp)\n     };\n-    let file = path::resolve(file, sp, cx.source_map());\n+    let file = cx.resolve_path(file, sp);\n     match fs::read_to_string(&file) {\n         Ok(src) => {\n             let interned_src = Symbol::intern(&src);\n@@ -143,7 +142,7 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::\n         Some(f) => f,\n         None => return DummyResult::expr(sp)\n     };\n-    let file = path::resolve(file, sp, cx.source_map());\n+    let file = cx.resolve_path(file, sp);\n     match fs::read(&file) {\n         Ok(bytes) => {\n             // Add the contents to the source map if it contains UTF-8."}, {"sha": "3dea1977c4dac862b37608ed7cf69d167a906d00", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/edb21873cced7a179571aa3a9c25eb1cfc05c2db/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb21873cced7a179571aa3a9c25eb1cfc05c2db/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=edb21873cced7a179571aa3a9c25eb1cfc05c2db", "patch": "@@ -135,7 +135,6 @@ pub mod util {\n     #[cfg(test)]\n     pub mod parser_testing;\n     pub mod map_in_place;\n-    pub mod path;\n }\n \n pub mod json;"}, {"sha": "a3511bac8e7d9e150bf8386beccd949675bcf976", "filename": "src/libsyntax/util/path.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8ccf52c1c6cffde2905d7ad0ebfa36a9e8a0c319/src%2Flibsyntax%2Futil%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccf52c1c6cffde2905d7ad0ebfa36a9e8a0c319/src%2Flibsyntax%2Futil%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fpath.rs?ref=8ccf52c1c6cffde2905d7ad0ebfa36a9e8a0c319", "patch": "@@ -1,28 +0,0 @@\n-use crate::source_map::SourceMap;\n-use std::path::PathBuf;\n-use syntax_pos::{Span, FileName};\n-\n-/// Resolve a path mentioned inside Rust code.\n-///\n-/// This unifies the logic used for resolving `include_X!`, and `#[doc(include)]` file paths.\n-///\n-/// Returns an absolute path to the file that `path` refers to.\n-pub fn resolve(path: impl Into<PathBuf>, span: Span, map: &SourceMap) -> PathBuf {\n-    let path = path.into();\n-\n-    // Relative paths are resolved relative to the file in which they are found\n-    // after macro expansion (that is, they are unhygienic).\n-    if !path.is_absolute() {\n-        let callsite = span.source_callsite();\n-        let mut result = match map.span_to_unmapped_path(callsite) {\n-            FileName::Real(path) => path,\n-            FileName::DocTest(path, _) => path,\n-            other => panic!(\"cannot resolve relative path in non-file source `{}`\", other),\n-        };\n-        result.pop();\n-        result.push(path);\n-        result\n-    } else {\n-        path\n-    }\n-}"}]}