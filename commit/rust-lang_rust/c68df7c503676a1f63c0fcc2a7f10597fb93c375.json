{"sha": "c68df7c503676a1f63c0fcc2a7f10597fb93c375", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2OGRmN2M1MDM2NzZhMWY2M2MwZmNjMmE3ZjEwNTk3ZmI5M2MzNzU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-25T17:41:51Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-04T02:52:42Z"}, "message": "Delete lint buffer from Session", "tree": {"sha": "170b18bab174d5a853861ef72aff81183965df03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/170b18bab174d5a853861ef72aff81183965df03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c68df7c503676a1f63c0fcc2a7f10597fb93c375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c68df7c503676a1f63c0fcc2a7f10597fb93c375", "html_url": "https://github.com/rust-lang/rust/commit/c68df7c503676a1f63c0fcc2a7f10597fb93c375", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c68df7c503676a1f63c0fcc2a7f10597fb93c375/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0fdddcb6001b6bd0cd7a6397b9e01e019e553ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0fdddcb6001b6bd0cd7a6397b9e01e019e553ff", "html_url": "https://github.com/rust-lang/rust/commit/c0fdddcb6001b6bd0cd7a6397b9e01e019e553ff"}], "stats": {"total": 107, "additions": 39, "deletions": 68}, "files": [{"sha": "eef1cee8db37a1678a3317b52e6cf5ba2e74d5df", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c68df7c503676a1f63c0fcc2a7f10597fb93c375/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68df7c503676a1f63c0fcc2a7f10597fb93c375/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=c68df7c503676a1f63c0fcc2a7f10597fb93c375", "patch": "@@ -34,7 +34,6 @@ use crate::util::common::time;\n \n use errors::DiagnosticBuilder;\n use std::slice;\n-use std::default::Default as StdDefault;\n use rustc_data_structures::sync::{self, ParallelIterator, join, par_iter};\n use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n use syntax::ast;\n@@ -584,12 +583,13 @@ impl<'a> EarlyContext<'a> {\n         lint_store: &'a LintStore,\n         krate: &'a ast::Crate,\n         buffered: LintBuffer,\n+        warn_about_weird_lints: bool,\n     ) -> EarlyContext<'a> {\n         EarlyContext {\n             sess,\n             krate,\n             lint_store,\n-            builder: LintLevelSets::builder(sess, lint_store),\n+            builder: LintLevelSets::builder(sess, warn_about_weird_lints, lint_store),\n             buffered,\n         }\n     }\n@@ -1490,9 +1490,10 @@ fn early_lint_crate<T: EarlyLintPass>(\n     krate: &ast::Crate,\n     pass: T,\n     buffered: LintBuffer,\n+    warn_about_weird_lints: bool,\n ) -> LintBuffer {\n     let mut cx = EarlyContextAndPass {\n-        context: EarlyContext::new(sess, lint_store, krate, buffered),\n+        context: EarlyContext::new(sess, lint_store, krate, buffered, warn_about_weird_lints),\n         pass,\n     };\n \n@@ -1514,22 +1515,19 @@ pub fn check_ast_crate<T: EarlyLintPass>(\n     lint_store: &LintStore,\n     krate: &ast::Crate,\n     pre_expansion: bool,\n+    lint_buffer: Option<LintBuffer>,\n     builtin_lints: T,\n ) {\n-    let (mut passes, mut buffered): (Vec<_>, _) = if pre_expansion {\n-        (\n-            lint_store.pre_expansion_passes.iter().map(|p| (p)()).collect(),\n-            LintBuffer::default(),\n-        )\n+    let mut passes: Vec<_> = if pre_expansion {\n+        lint_store.pre_expansion_passes.iter().map(|p| (p)()).collect()\n     } else {\n-        (\n-            lint_store.early_passes.iter().map(|p| (p)()).collect(),\n-            sess.buffered_lints.borrow_mut().take().unwrap(),\n-        )\n+        lint_store.early_passes.iter().map(|p| (p)()).collect()\n     };\n+    let mut buffered = lint_buffer.unwrap_or_default();\n \n     if !sess.opts.debugging_opts.no_interleave_lints {\n-        buffered = early_lint_crate(sess, lint_store, krate, builtin_lints, buffered);\n+        buffered = early_lint_crate(sess, lint_store, krate, builtin_lints, buffered,\n+            pre_expansion);\n \n         if !passes.is_empty() {\n             buffered = early_lint_crate(\n@@ -1538,6 +1536,7 @@ pub fn check_ast_crate<T: EarlyLintPass>(\n                 krate,\n                 EarlyLintPassObjects { lints: &mut passes[..] },\n                 buffered,\n+                pre_expansion,\n             );\n         }\n     } else {\n@@ -1549,6 +1548,7 @@ pub fn check_ast_crate<T: EarlyLintPass>(\n                     krate,\n                     EarlyLintPassObjects { lints: slice::from_mut(pass) },\n                     buffered,\n+                    pre_expansion,\n                 )\n             });\n         }"}, {"sha": "e470dbdf3239b29ef493bb5c8528e7e317924b64", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c68df7c503676a1f63c0fcc2a7f10597fb93c375/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68df7c503676a1f63c0fcc2a7f10597fb93c375/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=c68df7c503676a1f63c0fcc2a7f10597fb93c375", "patch": "@@ -44,8 +44,12 @@ impl LintLevelSets {\n         return me\n     }\n \n-    pub fn builder<'a>(sess: &'a Session, store: &LintStore) -> LintLevelsBuilder<'a> {\n-        LintLevelsBuilder::new(sess, LintLevelSets::new(sess, store))\n+    pub fn builder<'a>(\n+        sess: &'a Session,\n+        warn_about_weird_lints: bool,\n+        store: &LintStore,\n+    ) -> LintLevelsBuilder<'a> {\n+        LintLevelsBuilder::new(sess, warn_about_weird_lints, LintLevelSets::new(sess, store))\n     }\n \n     fn process_command_line(&mut self, sess: &Session, store: &LintStore) {\n@@ -160,14 +164,18 @@ pub struct BuilderPush {\n }\n \n impl<'a> LintLevelsBuilder<'a> {\n-    pub fn new(sess: &'a Session, sets: LintLevelSets) -> LintLevelsBuilder<'a> {\n+    pub fn new(\n+        sess: &'a Session,\n+        warn_about_weird_lints: bool,\n+        sets: LintLevelSets,\n+    ) -> LintLevelsBuilder<'a> {\n         assert_eq!(sets.list.len(), 1);\n         LintLevelsBuilder {\n             sess,\n             sets,\n             cur: 0,\n             id_to_set: Default::default(),\n-            warn_about_weird_lints: sess.buffered_lints.borrow().is_some(),\n+            warn_about_weird_lints,\n         }\n     }\n "}, {"sha": "11d0d0d90fa866b6e6e1206aa945e980fc6c8de4", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c68df7c503676a1f63c0fcc2a7f10597fb93c375/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68df7c503676a1f63c0fcc2a7f10597fb93c375/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=c68df7c503676a1f63c0fcc2a7f10597fb93c375", "patch": "@@ -795,7 +795,7 @@ fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n     assert_eq!(cnum, LOCAL_CRATE);\n     let store = &tcx.lint_store;\n     let mut builder = LintLevelMapBuilder {\n-        levels: LintLevelSets::builder(tcx.sess, &store),\n+        levels: LintLevelSets::builder(tcx.sess, false, &store),\n         tcx: tcx,\n         store: store,\n     };"}, {"sha": "13b76b79b3d82a5301a0dc94800b9046985204be", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c68df7c503676a1f63c0fcc2a7f10597fb93c375/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68df7c503676a1f63c0fcc2a7f10597fb93c375/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=c68df7c503676a1f63c0fcc2a7f10597fb93c375", "patch": "@@ -6,7 +6,6 @@ use crate::hir::def_id::CrateNum;\n use rustc_data_structures::fingerprint::Fingerprint;\n \n use crate::lint;\n-use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::session::config::{OutputType, PrintRequest, Sanitizer, SwitchWithOptPath};\n use crate::session::search_paths::{PathKind, SearchPath};\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n@@ -77,13 +76,6 @@ pub struct Session {\n     /// if the value stored here has been affected by path remapping.\n     pub working_dir: (PathBuf, bool),\n \n-    /// This is intended to be used from a single thread.\n-    ///\n-    /// FIXME: there was a previous comment about this not being thread safe,\n-    /// but it's not clear how or why that's the case. The LintBuffer itself is certainly thread\n-    /// safe at least from a \"Rust safety\" standpoint.\n-    pub buffered_lints: Lock<Option<lint::LintBuffer>>,\n-\n     /// Set of `(DiagnosticId, Option<Span>, message)` tuples tracking\n     /// (sub)diagnostics that have been set once, but should not be set again,\n     /// in order to avoid redundantly verbose output (Issue #24690, #44953).\n@@ -366,37 +358,6 @@ impl Session {\n         self.diagnostic().span_note_without_error(sp, msg)\n     }\n \n-    pub fn buffer_lint_late<S: Into<MultiSpan>>(\n-        &self,\n-        lint: &'static lint::Lint,\n-        id: ast::NodeId,\n-        sp: S,\n-        msg: &str,\n-    ) {\n-        match *self.buffered_lints.borrow_mut() {\n-            Some(ref mut buffer) => {\n-                buffer.buffer_lint(lint, id, sp, msg);\n-            }\n-            None => bug!(\"can't buffer lints after HIR lowering\"),\n-        }\n-    }\n-\n-    pub fn buffer_lint_with_diagnostic_late<S: Into<MultiSpan>>(\n-        &self,\n-        lint: &'static lint::Lint,\n-        id: ast::NodeId,\n-        sp: S,\n-        msg: &str,\n-        diagnostic: BuiltinLintDiagnostics,\n-    ) {\n-        match *self.buffered_lints.borrow_mut() {\n-            Some(ref mut buffer) => buffer.buffer_lint_with_diagnostic(\n-                lint, id, sp.into(), msg, diagnostic,\n-            ),\n-            None => bug!(\"can't buffer lints after HIR lowering\"),\n-        }\n-    }\n-\n     pub fn reserve_node_ids(&self, count: usize) -> ast::NodeId {\n         let id = self.next_node_id.get();\n \n@@ -1220,7 +1181,6 @@ fn build_session_(\n         sysroot,\n         local_crate_source_file,\n         working_dir,\n-        buffered_lints: Lock::new(Some(Default::default())),\n         one_time_diagnostics: Default::default(),\n         plugin_llvm_passes: OneThread::new(RefCell::new(Vec::new())),\n         plugin_attributes: Lock::new(Vec::new()),"}, {"sha": "52332744d1ad57b6938a98fd3782b24c3cdcf542", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c68df7c503676a1f63c0fcc2a7f10597fb93c375/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68df7c503676a1f63c0fcc2a7f10597fb93c375/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=c68df7c503676a1f63c0fcc2a7f10597fb93c375", "patch": "@@ -267,17 +267,16 @@ fn configure_and_expand_inner<'a>(\n             lint_store,\n             &krate,\n             true,\n+            None,\n             rustc_lint::BuiltinCombinedPreExpansionLintPass::new());\n     });\n \n-    let lint_buffer = lint::LintBuffer::default();\n     let mut resolver = Resolver::new(\n         sess,\n         &krate,\n         crate_name,\n         metadata_loader,\n         &resolver_arenas,\n-        lint_buffer,\n     );\n     syntax_ext::register_builtin_macros(&mut resolver, sess.edition());\n \n@@ -295,7 +294,7 @@ fn configure_and_expand_inner<'a>(\n         krate\n     });\n \n-    util::check_attr_crate_type(&krate.attrs, &mut resolver.lint_buffer);\n+    util::check_attr_crate_type(&krate.attrs, &mut resolver.lint_buffer());\n \n     syntax_ext::plugin_macro_defs::inject(\n         &mut krate, &mut resolver, plugin_info.syntax_exts, sess.edition()\n@@ -370,7 +369,7 @@ fn configure_and_expand_inner<'a>(\n         for span in missing_fragment_specifiers {\n             let lint = lint::builtin::MISSING_FRAGMENT_SPECIFIER;\n             let msg = \"missing fragment specifier\";\n-            resolver.lint_buffer.buffer_lint(lint, ast::CRATE_NODE_ID, span, msg);\n+            resolver.lint_buffer().buffer_lint(lint, ast::CRATE_NODE_ID, span, msg);\n         }\n         if cfg!(windows) {\n             env::set_var(\"PATH\", &old_path);\n@@ -399,7 +398,7 @@ fn configure_and_expand_inner<'a>(\n     }\n \n     let has_proc_macro_decls = time(sess, \"AST validation\", || {\n-        ast_validation::check_crate(sess, &krate, &mut resolver.lint_buffer)\n+        ast_validation::check_crate(sess, &krate, &mut resolver.lint_buffer())\n     });\n \n \n@@ -468,7 +467,7 @@ fn configure_and_expand_inner<'a>(\n         info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n         for BufferedEarlyLint{id, span, msg, lint_id} in buffered_lints.drain(..) {\n             let lint = lint::Lint::from_parser_lint_id(lint_id);\n-            resolver.lint_buffer.buffer_lint(lint, id, span, &msg);\n+            resolver.lint_buffer().buffer_lint(lint, id, span, &msg);\n         }\n     });\n \n@@ -500,6 +499,7 @@ pub fn lower_to_hir(\n             lint_store,\n             &krate,\n             false,\n+            Some(std::mem::take(resolver.lint_buffer())),\n             rustc_lint::BuiltinCombinedEarlyLintPass::new(),\n         )\n     });"}, {"sha": "b45eb356bdbd02f404858f32e97e1b1ae8256ee2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c68df7c503676a1f63c0fcc2a7f10597fb93c375/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68df7c503676a1f63c0fcc2a7f10597fb93c375/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c68df7c503676a1f63c0fcc2a7f10597fb93c375", "patch": "@@ -963,7 +963,7 @@ pub struct Resolver<'a> {\n     /// when visiting the correspondent variants.\n     variant_vis: DefIdMap<ty::Visibility>,\n \n-    pub lint_buffer: lint::LintBuffer,\n+    lint_buffer: lint::LintBuffer,\n }\n \n /// Nothing really interesting here; it just provides memory for the rest of the crate.\n@@ -1094,8 +1094,7 @@ impl<'a> Resolver<'a> {\n                krate: &Crate,\n                crate_name: &str,\n                metadata_loader: &'a MetadataLoaderDyn,\n-               arenas: &'a ResolverArenas<'a>,\n-               lint_buffer: lint::LintBuffer)\n+               arenas: &'a ResolverArenas<'a>)\n                -> Resolver<'a> {\n         let root_def_id = DefId::local(CRATE_DEF_INDEX);\n         let root_module_kind = ModuleKind::Def(\n@@ -1235,10 +1234,14 @@ impl<'a> Resolver<'a> {\n                     .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))\n                     .collect(),\n             variant_vis: Default::default(),\n-            lint_buffer,\n+            lint_buffer: lint::LintBuffer::default(),\n         }\n     }\n \n+    pub fn lint_buffer(&mut self) -> &mut lint::LintBuffer {\n+        &mut self.lint_buffer\n+    }\n+\n     pub fn arenas() -> ResolverArenas<'a> {\n         Default::default()\n     }"}]}