{"sha": "68a9137eacb7ea1e61f80279eff03bf758e16e71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YTkxMzdlYWNiN2VhMWU2MWY4MDI3OWVmZjAzYmY3NThlMTZlNzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-12T07:56:49Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-12T08:04:39Z"}, "message": "Rewrite fileinput tests to use std::rt::io\n\nThese tests are being very flaky on the bots, and the reason is that files are\nbeing created and then when attempted to get read they actually don't exist. I'm\nnot entirely sure why this is happening, but I also don't fully trust the\nstd::io implemention using @-boxes to close/flush/write files at the right time.\n\nThis moves the tests to using std::rt::io which is hopefully more robust and\nsomething that we can actually reason about. Sadly, due to #8810, these tests\nfail on windows, so they're all ignored on windows right now.", "tree": {"sha": "3044a5b7b41a4dec2a4496f4b90c4031ea145f00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3044a5b7b41a4dec2a4496f4b90c4031ea145f00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68a9137eacb7ea1e61f80279eff03bf758e16e71", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68a9137eacb7ea1e61f80279eff03bf758e16e71", "html_url": "https://github.com/rust-lang/rust/commit/68a9137eacb7ea1e61f80279eff03bf758e16e71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68a9137eacb7ea1e61f80279eff03bf758e16e71/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62166611e7510b86f395dbf19973e442fd43c403", "url": "https://api.github.com/repos/rust-lang/rust/commits/62166611e7510b86f395dbf19973e442fd43c403", "html_url": "https://github.com/rust-lang/rust/commit/62166611e7510b86f395dbf19973e442fd43c403"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "edf130fd6c689d2e9b0b1365417a4691b0d26559", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/68a9137eacb7ea1e61f80279eff03bf758e16e71/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a9137eacb7ea1e61f80279eff03bf758e16e71/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=68a9137eacb7ea1e61f80279eff03bf758e16e71", "patch": "@@ -417,20 +417,23 @@ mod test {\n \n     use super::{FileInput, make_path_option_vec, input_vec, input_vec_state};\n \n-    use std::io;\n+    use std::rt::io;\n+    use std::rt::io::Writer;\n+    use std::rt::io::file;\n     use std::uint;\n     use std::vec;\n \n     fn make_file(path : &Path, contents: &[~str]) {\n-        let file = io::file_writer(path, [io::Create, io::Truncate]).unwrap();\n+        let mut file = file::open(path, io::CreateOrTruncate, io::Write).unwrap();\n \n         for str in contents.iter() {\n-            file.write_str(*str);\n-            file.write_char('\\n');\n+            file.write(str.as_bytes());\n+            file.write(['\\n' as u8]);\n         }\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_make_path_option_vec() {\n         let strs = [~\"some/path\",\n                     ~\"some/other/path\"];\n@@ -445,6 +448,7 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_fileinput_read_byte() {\n         let filenames = make_path_option_vec(vec::from_fn(\n             3,\n@@ -475,6 +479,7 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_fileinput_read() {\n         let filenames = make_path_option_vec(vec::from_fn(\n             3,\n@@ -495,6 +500,7 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_input_vec() {\n         let mut all_lines = ~[];\n         let filenames = make_path_option_vec(vec::from_fn(\n@@ -518,6 +524,7 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_input_vec_state() {\n         let filenames = make_path_option_vec(vec::from_fn(\n             3,\n@@ -540,6 +547,7 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_empty_files() {\n         let filenames = make_path_option_vec(vec::from_fn(\n             3,\n@@ -564,18 +572,21 @@ mod test {\n     }\n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_no_trailing_newline() {\n         let f1 =\n             Some(Path(\"tmp/lib-fileinput-test-no-trailing-newline-1.tmp\"));\n         let f2 =\n             Some(Path(\"tmp/lib-fileinput-test-no-trailing-newline-2.tmp\"));\n \n-        let wr = io::file_writer(f1.get_ref(),\n-                                 [io::Create, io::Truncate]).unwrap();\n-        wr.write_str(\"1\\n2\");\n-        let wr = io::file_writer(f2.get_ref(),\n-                                 [io::Create, io::Truncate]).unwrap();\n-        wr.write_str(\"3\\n4\");\n+        {\n+            let mut wr = file::open(f1.get_ref(), io::CreateOrTruncate,\n+                                    io::Write).unwrap();\n+            wr.write(\"1\\n2\".as_bytes());\n+            let mut wr = file::open(f2.get_ref(), io::CreateOrTruncate,\n+                                    io::Write).unwrap();\n+            wr.write(\"3\\n4\".as_bytes());\n+        }\n \n         let mut lines = ~[];\n         do input_vec(~[f1, f2]) |line| {\n@@ -587,6 +598,7 @@ mod test {\n \n \n     #[test]\n+    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_next_file() {\n         let filenames = make_path_option_vec(vec::from_fn(\n             3,\n@@ -618,6 +630,7 @@ mod test {\n \n     #[test]\n     #[should_fail]\n+    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_input_vec_missing_file() {\n         do input_vec(make_path_option_vec([~\"this/file/doesnt/exist\"], true)) |line| {\n             println(line);"}]}