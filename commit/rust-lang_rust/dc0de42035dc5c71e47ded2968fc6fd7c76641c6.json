{"sha": "dc0de42035dc5c71e47ded2968fc6fd7c76641c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMGRlNDIwMzVkYzVjNzFlNDdkZWQyOTY4ZmM2ZmQ3Yzc2NjQxYzY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-11T04:19:39Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-11T04:21:09Z"}, "message": "Add lint and test for malformed but unused #[on_unimplemented] attributes", "tree": {"sha": "a41d9bc0c5cc6e40fd93a7d58e4eadafcc033c31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a41d9bc0c5cc6e40fd93a7d58e4eadafcc033c31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc0de42035dc5c71e47ded2968fc6fd7c76641c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc0de42035dc5c71e47ded2968fc6fd7c76641c6", "html_url": "https://github.com/rust-lang/rust/commit/dc0de42035dc5c71e47ded2968fc6fd7c76641c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc0de42035dc5c71e47ded2968fc6fd7c76641c6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d17fbaf37a0641894317f016244943af66ce87b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d17fbaf37a0641894317f016244943af66ce87b", "html_url": "https://github.com/rust-lang/rust/commit/4d17fbaf37a0641894317f016244943af66ce87b"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "29d37af30fc499c7fc2582547577bd90e4415d52", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/dc0de42035dc5c71e47ded2968fc6fd7c76641c6/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0de42035dc5c71e47ded2968fc6fd7c76641c6/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=dc0de42035dc5c71e47ded2968fc6fd7c76641c6", "patch": "@@ -26,6 +26,9 @@\n //! a `pub fn new()`.\n use self::MethodContext::*;\n \n+\n+use fmt_macros::{Parser, Piece, Position};\n+\n use metadata::csearch;\n use middle::def::*;\n use middle::subst::Substs;\n@@ -1921,3 +1924,63 @@ impl LintPass for UnstableFeatures {\n         }\n     }\n }\n+\n+/// Checks usage of `#[on_unimplemented]`\n+#[derive(Copy)]\n+pub struct BadOnUnimplemented;\n+\n+declare_lint!(BAD_ON_UNIMPLEMENTED, Deny,\n+              \"Checks usage of `#[on_unimplemented]`\");\n+\n+impl LintPass for BadOnUnimplemented {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(BAD_ON_UNIMPLEMENTED)\n+    }\n+    fn check_item(&mut self, ctx: &Context, item: &ast::Item) {\n+        match item.node {\n+            ast::ItemTrait(_, ref generics, _, _) => {\n+                if let Some(ref attr) = item.attrs.iter().find(|&: a| {\n+                    a.check_name(\"on_unimplemented\")\n+                }) {\n+                    if let Some(ref istring) = attr.value_str() {\n+                        let mut parser = Parser::new(istring.get());\n+                        let types = generics.ty_params.as_slice();\n+                        for token in parser {\n+                            match token {\n+                                Piece::String(_) => (), // Normal string, no need to check it\n+                                Piece::NextArgument(a) => match a.position {\n+                                    // `{Self}` is allowed\n+                                    Position::ArgumentNamed(s) if s == \"Self\" => (),\n+                                    // So is `{A}` if A is a type parameter\n+                                    Position::ArgumentNamed(s) => match types.iter().find(|t| {\n+                                        t.ident.as_str() == s\n+                                    }) {\n+                                        Some(_) => (),\n+                                        None => {\n+                                            ctx.span_lint(BAD_ON_UNIMPLEMENTED, attr.span,\n+                                                         format!(\"there is no type parameter \\\n+                                                                    {} on trait {}\",\n+                                                                    s, item.ident.as_str())\n+                                                           .as_slice());\n+                                        }\n+                                    },\n+                                    // `{:1}` and `{}` are not to be used\n+                                    Position::ArgumentIs(_) | Position::ArgumentNext => {\n+                                        ctx.span_lint(BAD_ON_UNIMPLEMENTED, attr.span,\n+                                                     \"only named substitution \\\n+                                                     parameters are allowed\");\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    } else {\n+                        ctx.span_lint(BAD_ON_UNIMPLEMENTED, attr.span,\n+                                     \"this attribute must have a value, \\\n+                                      eg `#[on_unimplemented = \\\"foo\\\"]`\")\n+                    }\n+                }\n+            },\n+            _ => () // Not a trait def, move along\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "b50c505a3acedb1e64deb1e7495db9b674e82320", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc0de42035dc5c71e47ded2968fc6fd7c76641c6/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0de42035dc5c71e47ded2968fc6fd7c76641c6/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=dc0de42035dc5c71e47ded2968fc6fd7c76641c6", "patch": "@@ -211,6 +211,7 @@ impl LintStore {\n                      UnusedAllocation,\n                      MissingCopyImplementations,\n                      UnstableFeatures,\n+                     BadOnUnimplemented,\n         );\n \n         add_builtin_with_new!(sess,"}, {"sha": "7ca228a69b8b15808d5bb835a3b1ed5116fedd28", "filename": "src/test/compile-fail/on-unimplemented-bad-anno.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dc0de42035dc5c71e47ded2968fc6fd7c76641c6/src%2Ftest%2Fcompile-fail%2Fon-unimplemented-bad-anno.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0de42035dc5c71e47ded2968fc6fd7c76641c6/src%2Ftest%2Fcompile-fail%2Fon-unimplemented-bad-anno.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented-bad-anno.rs?ref=dc0de42035dc5c71e47ded2968fc6fd7c76641c6", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+// ignore-tidy-linelength\n+\n+#[allow(unused)]\n+\n+#[on_unimplemented = \"test error `{Self}` with `{Bar}` `{Baz}` `{Quux}`\"]\n+trait Foo<Bar, Baz, Quux>{}\n+\n+#[on_unimplemented=\"a collection of type `{Self}` cannot be built from an iterator over elements of type `{A}`\"]\n+trait MyFromIterator<A> {\n+    /// Build a container with elements from an external iterator.\n+    fn my_from_iter<T: Iterator<Item=A>>(iterator: T) -> Self;\n+}\n+\n+#[on_unimplemented] //~ ERROR this attribute must have a value\n+trait BadAnnotation1 {}\n+\n+#[on_unimplemented = \"Unimplemented trait error on `{Self}` with params `<{A},{B},{C}>`\"]\n+//~^ ERROR there is no type parameter C on trait BadAnnotation2\n+trait BadAnnotation2<A,B> {}\n+\n+\n+pub fn main() {\n+}"}]}