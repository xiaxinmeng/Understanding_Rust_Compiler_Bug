{"sha": "cafa10d96eae5f0cd20d835f100c1c10d256abe1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZmExMGQ5NmVhZTVmMGNkMjBkODM1ZjEwMGMxYzEwZDI1NmFiZTE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-08T01:13:08Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:10:05Z"}, "message": "Define `super_relate_consts`\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "e89ec22101d70dcd33101e61cd292f38e84a394c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e89ec22101d70dcd33101e61cd292f38e84a394c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cafa10d96eae5f0cd20d835f100c1c10d256abe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cafa10d96eae5f0cd20d835f100c1c10d256abe1", "html_url": "https://github.com/rust-lang/rust/commit/cafa10d96eae5f0cd20d835f100c1c10d256abe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cafa10d96eae5f0cd20d835f100c1c10d256abe1/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1c83de1ddcd64fe05085e5d03f4745bf9a55401", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1c83de1ddcd64fe05085e5d03f4745bf9a55401", "html_url": "https://github.com/rust-lang/rust/commit/f1c83de1ddcd64fe05085e5d03f4745bf9a55401"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "2034795a0b58245d002027768d8c0a84e6e962f4", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cafa10d96eae5f0cd20d835f100c1c10d256abe1/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cafa10d96eae5f0cd20d835f100c1c10d256abe1/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=cafa10d96eae5f0cd20d835f100c1c10d256abe1", "patch": "@@ -583,6 +583,70 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n     }\n }\n \n+/// The main \"const relation\" routine. Note that this does not handle\n+/// inference artifacts, so you should filter those out before calling\n+/// it.\n+pub fn super_relate_consts<'a, 'gcx, 'tcx, R>(\n+    relation: &mut R,\n+    a: &'tcx ty::LazyConst<'tcx>,\n+    b: &'tcx ty::LazyConst<'tcx>\n+) -> RelateResult<'tcx, &'tcx ty::LazyConst<'tcx>>\n+where\n+    R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n+{\n+    let tcx = relation.tcx();\n+\n+    match (a, b) {\n+        (ty::LazyConst::Evaluated(a_eval), ty::LazyConst::Evaluated(b_eval)) => {\n+            // Only consts whose types are equal should be compared.\n+            assert_eq!(a_eval.ty, b_eval.ty);\n+\n+            // Currently, the values that can be unified are those that\n+            // implement both `PartialEq` and `Eq`, corresponding to\n+            // `structural_match` types.\n+            // FIXME(const_generics): check for `structural_match` synthetic attribute.\n+            match (a_eval.val, b_eval.val) {\n+                (ConstValue::Infer(_), _) | (_, ConstValue::Infer(_)) => {\n+                    // The caller should handle these cases!\n+                    bug!(\"var types encountered in super_relate_consts: {:?} {:?}\", a, b)\n+                }\n+                (ConstValue::Param(a_p), ConstValue::Param(b_p)) if a_p.index == b_p.index => {\n+                    Ok(a)\n+                }\n+                (ConstValue::Scalar(Scalar::Bits { .. }), _) if a == b => {\n+                    Ok(a)\n+                }\n+                (ConstValue::ByRef(..), _) => {\n+                    bug!(\n+                        \"non-Scalar ConstValue encountered in super_relate_consts {:?} {:?}\",\n+                        a,\n+                        b,\n+                    );\n+                }\n+                 _ => {\n+                    Err(TypeError::ConstError(\n+                        ConstError::Mismatch(expected_found(relation, &a, &b))\n+                    ))\n+                }\n+            }\n+        }\n+        // FIXME(const_generics): this is probably wrong (regarding TyProjection)\n+        (\n+            ty::LazyConst::Unevaluated(a_def_id, a_substs),\n+            ty::LazyConst::Unevaluated(b_def_id, b_substs),\n+        ) if a_def_id == b_def_id => {\n+            let substs =\n+                relation.relate_with_variance(ty::Variance::Invariant, a_substs, b_substs)?;\n+            Ok(tcx.mk_lazy_const(ty::LazyConst::Unevaluated(*a_def_id, substs)))\n+        }\n+        _ => {\n+            Err(TypeError::ConstError(\n+                ConstError::Mismatch(expected_found(relation, &a, &b))\n+            ))\n+        }\n+    }\n+}\n+\n impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {\n     fn relate<'a, 'gcx, R>(relation: &mut R,\n                            a: &Self,"}]}