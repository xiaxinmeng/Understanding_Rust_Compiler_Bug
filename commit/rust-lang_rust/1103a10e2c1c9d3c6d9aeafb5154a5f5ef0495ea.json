{"sha": "1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMDNhMTBlMmMxYzlkM2M2ZDlhZWFmYjUxNTRhNWY1ZWYwNDk1ZWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-08T22:34:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-19T07:25:08Z"}, "message": "adjust for error reform", "tree": {"sha": "68736db6a881a624e9a2ed1dd1f6955cfa10a546", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68736db6a881a624e9a2ed1dd1f6955cfa10a546"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "html_url": "https://github.com/rust-lang/rust/commit/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b56aefa0b36bc1b686571849dbfefc0eeac4508", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b56aefa0b36bc1b686571849dbfefc0eeac4508", "html_url": "https://github.com/rust-lang/rust/commit/6b56aefa0b36bc1b686571849dbfefc0eeac4508"}], "stats": {"total": 204, "additions": 93, "deletions": 111}, "files": [{"sha": "ff4df42dde66ad7ec666e959a7ebdfcf5ecbdb9e", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -42,8 +42,7 @@ fn resolve_did<'mir, 'tcx>(tcx: TyCtxt<'tcx>, path: &[&str]) -> InterpResult<'tc\n             None\n         })\n         .ok_or_else(|| {\n-            let path = path.iter().map(|&s| s.to_owned()).collect();\n-            err_unsup!(PathNotFound(path)).into()\n+            err_unsup_format!(\"failed to find required Rust item: {:?}\", path).into()\n         })\n }\n "}, {"sha": "20a3b79980478016e7f9205000b65dd501895a1d", "filename": "src/intptrcast.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -43,10 +43,6 @@ impl<'mir, 'tcx> GlobalState {\n         int: u64,\n         memory: &Memory<'mir, 'tcx, Evaluator<'tcx>>,\n     ) -> InterpResult<'tcx, Pointer<Tag>> {\n-        if int == 0 {\n-            throw_unsup!(InvalidNullPointerUsage);\n-        }\n-\n         let global_state = memory.extra.intptrcast.borrow();\n         let pos = global_state.int_to_ptr_map.binary_search_by_key(&int, |(addr, _)| *addr);\n \n@@ -57,7 +53,7 @@ impl<'mir, 'tcx> GlobalState {\n                 // zero. The pointer is untagged because it was created from a cast\n                 Pointer::new_with_tag(alloc_id, Size::from_bytes(0), Tag::Untagged)\n             }\n-            Err(0) => throw_unsup!(DanglingPointerDeref),\n+            Err(0) => throw_ub!(InvalidIntPointerUsage(int)),\n             Err(pos) => {\n                 // This is the largest of the adresses smaller than `int`,\n                 // i.e. the greatest lower bound (glb)\n@@ -69,7 +65,7 @@ impl<'mir, 'tcx> GlobalState {\n                     // This pointer is untagged because it was created from a cast\n                     Pointer::new_with_tag(alloc_id, Size::from_bytes(offset), Tag::Untagged)\n                 } else {\n-                    throw_unsup!(DanglingPointerDeref)\n+                    throw_ub!(InvalidIntPointerUsage(int))\n                 }\n             }\n         })"}, {"sha": "4c7bcff267e16b52af10e0be3a7a6c6a17c17b2c", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -222,12 +222,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"__rust_alloc\" => {\n                 let size = this.read_scalar(args[0])?.to_machine_usize(this)?;\n                 let align = this.read_scalar(args[1])?.to_machine_usize(this)?;\n-                if size == 0 {\n-                    throw_unsup!(HeapAllocZeroBytes);\n-                }\n-                if !align.is_power_of_two() {\n-                    throw_unsup!(HeapAllocNonPowerOfTwoAlignment(align));\n-                }\n+                Self::check_alloc_request(size, align)?;\n                 let ptr = this.memory.allocate(\n                     Size::from_bytes(size),\n                     Align::from_bytes(align).unwrap(),\n@@ -238,12 +233,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"__rust_alloc_zeroed\" => {\n                 let size = this.read_scalar(args[0])?.to_machine_usize(this)?;\n                 let align = this.read_scalar(args[1])?.to_machine_usize(this)?;\n-                if size == 0 {\n-                    throw_unsup!(HeapAllocZeroBytes);\n-                }\n-                if !align.is_power_of_two() {\n-                    throw_unsup!(HeapAllocNonPowerOfTwoAlignment(align));\n-                }\n+                Self::check_alloc_request(size, align)?;\n                 let ptr = this.memory.allocate(\n                     Size::from_bytes(size),\n                     Align::from_bytes(align).unwrap(),\n@@ -257,12 +247,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let old_size = this.read_scalar(args[1])?.to_machine_usize(this)?;\n                 let align = this.read_scalar(args[2])?.to_machine_usize(this)?;\n-                if old_size == 0 {\n-                    throw_unsup!(HeapAllocZeroBytes);\n-                }\n-                if !align.is_power_of_two() {\n-                    throw_unsup!(HeapAllocNonPowerOfTwoAlignment(align));\n-                }\n+                // No need to check old_size/align; we anyway check that they match the allocation.\n                 let ptr = this.force_ptr(ptr)?;\n                 this.memory.deallocate(\n                     ptr,\n@@ -274,12 +259,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let old_size = this.read_scalar(args[1])?.to_machine_usize(this)?;\n                 let align = this.read_scalar(args[2])?.to_machine_usize(this)?;\n                 let new_size = this.read_scalar(args[3])?.to_machine_usize(this)?;\n-                if old_size == 0 || new_size == 0 {\n-                    throw_unsup!(HeapAllocZeroBytes);\n-                }\n-                if !align.is_power_of_two() {\n-                    throw_unsup!(HeapAllocNonPowerOfTwoAlignment(align));\n-                }\n+                Self::check_alloc_request(new_size, align)?;\n+                // No need to check old_size; we anyway check that they match the allocation.\n                 let ptr = this.force_ptr(this.read_scalar(args[0])?.not_undef()?)?;\n                 let align = Align::from_bytes(align).unwrap();\n                 let new_ptr = this.memory.reallocate(\n@@ -462,6 +443,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(true)\n     }\n \n+    /// Check some basic requirements for this allocation request:\n+    /// non-zero size, power-of-two alignment.\n+    fn check_alloc_request(size: u64, align: u64) -> InterpResult<'tcx> {\n+        if size == 0 {\n+            throw_ub_format!(\"creating allocation with size 0\");\n+        }\n+        if !align.is_power_of_two() {\n+            throw_ub_format!(\"creating allocation with non-power-of-two alignment {}\", align);\n+        }\n+        Ok(())\n+    }\n+\n     /// Evaluates the scalar at the specified path. Returns Some(val)\n     /// if the path could be resolved, and None otherwise\n     fn eval_path_scalar("}, {"sha": "60b9aa6efccab14a8ad35804f97a6d6826263172", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -138,7 +138,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let size = this.read_scalar(args[2])?.to_machine_usize(this)?;\n                 // Align must be power of 2, and also at least ptr-sized (POSIX rules).\n                 if !align.is_power_of_two() {\n-                    throw_unsup!(HeapAllocNonPowerOfTwoAlignment(align));\n+                    throw_ub_format!(\"posix_memalign: alignment must be a power of two, but is {}\", align);\n                 }\n                 if align < this.pointer_size().bytes() {\n                     throw_ub_format!(\n@@ -185,7 +185,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 };\n \n                 // Figure out how large a pthread TLS key actually is.\n-                // This is `libc::pthread_key_t`.\n+                // To this end, deref the argument type. This is `libc::pthread_key_t`.\n                 let key_type = args[0].layout.ty\n                     .builtin_deref(true)\n                     .ok_or_else(|| err_ub_format!(\n@@ -195,12 +195,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let key_layout = this.layout_of(key_type)?;\n \n                 // Create key and write it into the memory where `key_ptr` wants it.\n-                let key = this.machine.tls.create_tls_key(dtor) as u128;\n-                if key_layout.size.bits() < 128 && key >= (1u128 << key_layout.size.bits() as u128)\n-                {\n-                    throw_unsup!(OutOfTls);\n-                }\n-\n+                let key = this.machine.tls.create_tls_key(dtor, key_layout.size)?;\n                 this.write_scalar(Scalar::from_uint(key, key_layout.size), key_place.into())?;\n \n                 // Return success (`0`)."}, {"sha": "a35734573f2966127811bfb2ea8950e9329d94e4", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -154,14 +154,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // This just creates a key; Windows does not natively support TLS destructors.\n \n                 // Create key and return it.\n-                let key = this.machine.tls.create_tls_key(None) as u128;\n-\n-                // Figure out how large a TLS key actually is. This is `c::DWORD`.\n-                if dest.layout.size.bits() < 128\n-                    && key >= (1u128 << dest.layout.size.bits() as u128)\n-                {\n-                    throw_unsup!(OutOfTls);\n-                }\n+                let key = this.machine.tls.create_tls_key(None, dest.layout.size)?;\n                 this.write_scalar(Scalar::from_uint(key, dest.layout.size), dest)?;\n             }\n             \"TlsGetValue\" => {"}, {"sha": "094b58d99a287611e25d2140823e0e6368777135", "filename": "src/shims/tls.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -2,7 +2,7 @@\n \n use std::collections::BTreeMap;\n \n-use rustc::{ty, ty::layout::HasDataLayout};\n+use rustc::{ty, ty::layout::{Size, HasDataLayout}};\n use rustc_target::abi::LayoutOf;\n \n use crate::{HelpersEvalContextExt, InterpResult, MPlaceTy, Scalar, StackPopCleanup, Tag};\n@@ -37,12 +37,18 @@ impl<'tcx> Default for TlsData<'tcx> {\n }\n \n impl<'tcx> TlsData<'tcx> {\n-    pub fn create_tls_key(&mut self, dtor: Option<ty::Instance<'tcx>>) -> TlsKey {\n+    /// Generate a new TLS key with the given destructor.\n+    /// `max_size` determines the integer size the key has to fit in.\n+    pub fn create_tls_key(&mut self, dtor: Option<ty::Instance<'tcx>>, max_size: Size) -> InterpResult<'tcx, TlsKey> {\n         let new_key = self.next_key;\n         self.next_key += 1;\n         self.keys.insert(new_key, TlsEntry { data: None, dtor }).unwrap_none();\n         trace!(\"New TLS key allocated: {} with dtor {:?}\", new_key, dtor);\n-        new_key\n+\n+        if max_size.bits() < 128 && new_key >= (1u128 << max_size.bits() as u128) {\n+            throw_unsup_format!(\"we ran out of TLS key space\");\n+        }\n+        Ok(new_key)\n     }\n \n     pub fn delete_tls_key(&mut self, key: TlsKey) -> InterpResult<'tcx> {\n@@ -51,7 +57,7 @@ impl<'tcx> TlsData<'tcx> {\n                 trace!(\"TLS key {} removed\", key);\n                 Ok(())\n             }\n-            None => throw_unsup!(TlsOutOfBounds),\n+            None => throw_ub_format!(\"removing a non-existig TLS key: {}\", key),\n         }\n     }\n \n@@ -65,7 +71,7 @@ impl<'tcx> TlsData<'tcx> {\n                 trace!(\"TLS key {} loaded: {:?}\", key, data);\n                 Ok(data.unwrap_or_else(|| Scalar::ptr_null(cx).into()))\n             }\n-            None => throw_unsup!(TlsOutOfBounds),\n+            None => throw_ub_format!(\"loading from a non-existing TLS key: {}\", key),\n         }\n     }\n \n@@ -76,7 +82,7 @@ impl<'tcx> TlsData<'tcx> {\n                 *data = new_data;\n                 Ok(())\n             }\n-            None => throw_unsup!(TlsOutOfBounds),\n+            None => throw_ub_format!(\"storing to a non-existing TLS key: {}\", key),\n         }\n     }\n "}, {"sha": "bac1b92075a76f07bfa8627a43648d566bfafac1", "filename": "tests/compile-fail/alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falignment.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     let x_ptr: *mut u8 = &mut x[0];\n     let y_ptr = x_ptr as *mut u64;\n     unsafe {\n-        *y_ptr = 42; //~ ERROR tried to access memory with alignment 1, but alignment\n+        *y_ptr = 42; //~ ERROR accessing memory with alignment 1, but alignment\n     }\n     panic!(\"unreachable in miri\");\n }"}, {"sha": "bdec0ff504bb6eff17023de0e8bff9a9d26a1735", "filename": "tests/compile-fail/atomic_unaligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fatomic_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fatomic_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fatomic_unaligned.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -7,6 +7,6 @@ fn main() {\n     let zptr = &z as *const _ as *const u64;\n     unsafe {\n         ::std::intrinsics::atomic_load(zptr);\n-        //~^ ERROR tried to access memory with alignment 4, but alignment 8 is required\n+        //~^ ERROR accessing memory with alignment 4, but alignment 8 is required\n     }\n }"}, {"sha": "9eea9d92dcd7620a01f3a9bba9009c4b69fbee5a", "filename": "tests/compile-fail/cast_box_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -7,5 +7,5 @@ fn main() {\n         std::mem::transmute::<&Box<usize>, &fn(i32)>(&b)\n     };\n \n-    (*g)(42) //~ ERROR tried to treat a memory pointer as a function pointer\n+    (*g)(42) //~ ERROR it does not point to a function\n }"}, {"sha": "3702ec8c94c4372f932e39a1b9d5e98518c0541e", "filename": "tests/compile-fail/cast_fn_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcast_fn_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcast_fn_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_fn_ptr1.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -5,5 +5,5 @@ fn main() {\n         std::mem::transmute::<fn(), fn(i32)>(f)\n     };\n \n-    g(42) //~ ERROR tried to call a function with incorrect number of arguments\n+    g(42) //~ ERROR calling a function with more arguments than it expected\n }"}, {"sha": "39f0867489adca96d12ee0cde332c19d02de3158", "filename": "tests/compile-fail/cast_fn_ptr2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcast_fn_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcast_fn_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_fn_ptr2.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -5,5 +5,5 @@ fn main() {\n         std::mem::transmute::<fn((i32,i32)), fn(i32)>(f)\n     };\n \n-    g(42) //~ ERROR tried to call a function with argument of type (i32, i32) passing data of type i32\n+    g(42) //~ ERROR calling a function with argument of type (i32, i32) passing data of type i32\n }"}, {"sha": "3523db24fa3207c5c3efee0642f78a6677ee657d", "filename": "tests/compile-fail/cast_fn_ptr3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcast_fn_ptr3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcast_fn_ptr3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_fn_ptr3.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -5,6 +5,6 @@ fn main() {\n         std::mem::transmute::<fn((i32,i32)), fn()>(f)\n     };\n \n-    g() //~ ERROR tried to call a function with incorrect number of arguments\n+    g() //~ ERROR calling a function with fewer arguments than it requires\n }\n "}, {"sha": "22a36a71cef14aefc0fb4675bcbbc375d0297dc2", "filename": "tests/compile-fail/cast_fn_ptr4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcast_fn_ptr4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcast_fn_ptr4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_fn_ptr4.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -5,5 +5,5 @@ fn main() {\n         std::mem::transmute::<fn(*const [i32]), fn(*const i32)>(f)\n     };\n \n-    g(&42 as *const i32) //~ ERROR tried to call a function with argument of type *const [i32] passing data of type *const i32\n+    g(&42 as *const i32) //~ ERROR calling a function with argument of type *const [i32] passing data of type *const i32\n }"}, {"sha": "fb2b4403363ef22e4389c0891cc830ddf5bddb3d", "filename": "tests/compile-fail/cast_fn_ptr5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcast_fn_ptr5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcast_fn_ptr5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_fn_ptr5.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -5,5 +5,5 @@ fn main() {\n         std::mem::transmute::<fn() -> u32, fn()>(f)\n     };\n \n-    g() //~ ERROR tried to call a function with return type u32 passing return place of type ()\n+    g() //~ ERROR calling a function with return type u32 passing return place of type ()\n }"}, {"sha": "3000779a93307e8ca3e325e5e694af674670bb79", "filename": "tests/compile-fail/cast_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -6,5 +6,5 @@ fn main() {\n         std::mem::transmute::<usize, fn(i32)>(42)\n     };\n \n-    g(42) //~ ERROR dangling pointer was dereferenced\n+    g(42) //~ ERROR invalid use of 42 as a pointer\n }"}, {"sha": "a2a4762239184269de30e48a55ff00e936fb7274", "filename": "tests/compile-fail/copy_unaligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcopy_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fcopy_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_unaligned.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -1,4 +1,4 @@\n-//error-pattern: tried to access memory with alignment 1, but alignment 2 is required\n+//error-pattern: accessing memory with alignment 1, but alignment 2 is required\n #![feature(intrinsics)]\n \n // Directly call intrinsic to avoid debug assertions in libstd"}, {"sha": "f2c7ec584fefba2394b6eacf2f6b428b1710836a", "filename": "tests/compile-fail/dangling_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -3,6 +3,6 @@ fn main() {\n         let b = Box::new(42);\n         &*b as *const i32\n     };\n-    let x = unsafe { *p }; //~ ERROR dangling pointer was dereferenced\n+    let x = unsafe { *p }; //~ ERROR dereferenced after this allocation got freed\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "13e5f9d321735c336139fe8eeb1303a32555481b", "filename": "tests/compile-fail/dangling_zst_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fdangling_zst_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fdangling_zst_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_zst_deref.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -3,5 +3,5 @@ fn main() {\n         let b = Box::new(42);\n         &*b as *const i32 as *const ()\n     };\n-    let _x = unsafe { *p }; //~ ERROR dangling pointer was dereferenced\n+    let _x = unsafe { *p }; //~ ERROR dereferenced after this allocation got freed\n }"}, {"sha": "f2cd87bac6229d1eca91c91357259b44bc77b1f9", "filename": "tests/compile-fail/deallocate-bad-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -5,7 +5,7 @@ extern crate alloc;\n use alloc::alloc::Global;\n use std::alloc::{AllocRef, Layout};\n \n-// error-pattern: incorrect alloc info: expected size 1 and align 2, got size 1 and align 1\n+// error-pattern: allocation has size 1 and alignment 1, but gave size 1 and alignment 2\n \n fn main() {\n     unsafe {"}, {"sha": "498a662518e5241c8d4160f75129900ca66d9611", "filename": "tests/compile-fail/deallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -5,7 +5,7 @@ extern crate alloc;\n use alloc::alloc::Global;\n use std::alloc::{AllocRef, Layout};\n \n-// error-pattern: incorrect alloc info: expected size 2 and align 1, got size 1 and align 1\n+// error-pattern: allocation has size 1 and alignment 1, but gave size 2 and alignment 1\n \n fn main() {\n     unsafe {"}, {"sha": "a851d75b9d5c58c45b2d554d36ee41e78a55cfaa", "filename": "tests/compile-fail/deallocate-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-twice.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -5,7 +5,7 @@ extern crate alloc;\n use alloc::alloc::Global;\n use std::alloc::{AllocRef, Layout};\n \n-// error-pattern: tried to deallocate dangling pointer\n+// error-pattern: dereferenced after this allocation got freed\n \n fn main() {\n     unsafe {"}, {"sha": "561017293a1655af8c930cd5186d1676eda2c7d7", "filename": "tests/compile-fail/deref-invalid-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fderef-invalid-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fderef-invalid-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderef-invalid-ptr.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -3,5 +3,5 @@\n \n fn main() {\n     let x = 2usize as *const u32;\n-    let _y = unsafe { &*x as *const u32 }; //~ ERROR dangling pointer was dereferenced\n+    let _y = unsafe { &*x as *const u32 }; //~ ERROR invalid use of 2 as a pointer\n }"}, {"sha": "a6d3aae414de003c15963b8454799adc39a9c786", "filename": "tests/compile-fail/deref-partially-dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fderef-partially-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fderef-partially-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderef-partially-dangling.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -3,6 +3,6 @@\n fn main() {\n     let x = (1, 13);\n     let xptr = &x as *const _ as *const (i32, i32, i32);\n-    let val = unsafe { (*xptr).1 }; //~ ERROR pointer must be in-bounds at offset 12, but is outside bounds of allocation\n+    let val = unsafe { (*xptr).1 }; //~ ERROR pointer must be in-bounds at offset 12, but is outside bounds of alloc\n     assert_eq!(val, 13);\n }"}, {"sha": "e604f96ea16f1c9951b60b8d5f564f5dc1f26e2b", "filename": "tests/compile-fail/deref_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderef_fn_ptr.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -2,7 +2,7 @@ fn f() {}\n \n fn main() {\n     let x: u8 = unsafe {\n-        *std::mem::transmute::<fn(), *const u8>(f) //~ ERROR tried to dereference a function pointer\n+        *std::mem::transmute::<fn(), *const u8>(f) //~ ERROR contains a function\n     };\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "dd00aef450cd9cbb3146f75d942977c4d00dfd64", "filename": "tests/compile-fail/environ-gets-deallocated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fenviron-gets-deallocated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fenviron-gets-deallocated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fenviron-gets-deallocated.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -20,5 +20,5 @@ fn main() {\n     let pointer = get_environ();\n     let _x = unsafe { *pointer };\n     std::env::set_var(\"FOO\", \"BAR\");\n-    let _y = unsafe { *pointer }; //~ ERROR dangling pointer was dereferenced\n+    let _y = unsafe { *pointer }; //~ ERROR dereferenced after this allocation got freed\n }"}, {"sha": "2e6b58a753cd9d8f01eda654fba5a67664f53ba0", "filename": "tests/compile-fail/execute_memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fexecute_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fexecute_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexecute_memory.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -7,6 +7,6 @@ fn main() {\n     let x = box 42;\n     unsafe {\n         let f = std::mem::transmute::<Box<i32>, fn()>(x);\n-        f() //~ ERROR tried to treat a memory pointer as a function pointer\n+        f() //~ ERROR function pointer but it does not point to a function\n     }\n }"}, {"sha": "7e509d53c2614ee9a51d6550d0e2845e51b01eca", "filename": "tests/compile-fail/fn_ptr_offset.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffn_ptr_offset.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let y : *mut u8 = unsafe { mem::transmute(x) };\n     let y = y.wrapping_offset(1);\n     let x : fn() = unsafe { mem::transmute(y) };\n-    x(); //~ ERROR tried to use a function pointer after offsetting it\n+    x(); //~ ERROR function pointer but it does not point to a function\n }"}, {"sha": "8f873f37a5f80842367ada593af502ad047f267e", "filename": "tests/compile-fail/generator-pinned-moved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fgenerator-pinned-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fgenerator-pinned-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fgenerator-pinned-moved.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -11,7 +11,7 @@ fn firstn() -> impl Generator<Yield = u64, Return = ()> {\n         let num = &mut num;\n \n         yield *num;\n-        *num += 1; //~ ERROR dangling pointer was dereferenced\n+        *num += 1; //~ ERROR dereferenced after this allocation got freed\n     }\n }\n "}, {"sha": "1a8df5eacede810bc6b4871c527e6427c0b989ad", "filename": "tests/compile-fail/intptrcast_alignment_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintptrcast_alignment_check.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -7,6 +7,6 @@ fn main() {\n     let base_addr = x as *mut _ as usize;\n     let base_addr_aligned = if base_addr % 2 == 0 { base_addr } else { base_addr+1 };\n     let u16_ptr = base_addr_aligned as *mut u16;\n-    unsafe { *u16_ptr = 2; } //~ ERROR tried to access memory with alignment 1, but alignment 2 is required\n+    unsafe { *u16_ptr = 2; } //~ ERROR memory with alignment 1, but alignment 2 is required\n     println!(\"{:?}\", x);\n }"}, {"sha": "6ccea35316365ca994780aae5a3dbd4b08d36895", "filename": "tests/compile-fail/invalid_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -3,5 +3,5 @@\n \n fn main() {\n     let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n-    let _x = b == true; //~ ERROR invalid boolean value read\n+    let _x = b == true; //~ ERROR interpreting an invalid 8-bit value as a bool: 2\n }"}, {"sha": "ed61fcbe9d52f35bde42439a756299d77b16ad6c", "filename": "tests/compile-fail/invalid_char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Finvalid_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Finvalid_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_char.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -4,5 +4,5 @@\n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n     let c = unsafe { std::mem::transmute::<i32, char>(-1) };\n-    let _x = c == 'x'; //~ ERROR tried to interpret an invalid 32-bit value as a char\n+    let _x = c == 'x'; //~ ERROR interpreting an invalid 32-bit value as a char\n }"}, {"sha": "2d18dccd319c33795749555ab847c05db024918a", "filename": "tests/compile-fail/modifying_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fmodifying_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fmodifying_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmodifying_constants.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -4,6 +4,6 @@\n fn main() {\n     let x = &1; // the `&1` is promoted to a constant, but it used to be that only the pointer is marked static, not the pointee\n     let y = unsafe { &mut *(x as *const i32 as *mut i32) };\n-    *y = 42;  //~ ERROR tried to modify constant memory\n+    *y = 42;  //~ ERROR read-only\n     assert_eq!(*x, 42);\n }"}, {"sha": "20bcc36f049d1c000770fd9d9334875b874c367f", "filename": "tests/compile-fail/out_of_bounds_ptr_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fout_of_bounds_ptr_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fout_of_bounds_ptr_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_ptr_1.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: must be in-bounds at offset 5, but is outside bounds of allocation\n+// error-pattern: must be in-bounds at offset 5, but is outside bounds of alloc\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;"}, {"sha": "0c175af5266b83b880510bd7c9fd58d4a2649ffc", "filename": "tests/compile-fail/out_of_bounds_read1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fout_of_bounds_read1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fout_of_bounds_read1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read1.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR outside bounds of allocation\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR outside bounds of alloc\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "0c175af5266b83b880510bd7c9fd58d4a2649ffc", "filename": "tests/compile-fail/out_of_bounds_read2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR outside bounds of allocation\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR outside bounds of alloc\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "d8182aaae662ef1d4c6f42f36fa09f7c9e2b21df", "filename": "tests/compile-fail/overwriting_part_of_relocation_makes_the_rest_undefined.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -6,6 +6,6 @@ fn main() {\n         // \"attempted to interpret some raw bytes as a pointer address\" instead of\n         // \"attempted to read undefined bytes\"\n     }\n-    let x = *p; //~ ERROR attempted to read undefined bytes\n+    let x = *p; //~ ERROR this operation requires initialized memory\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "2ac27bf2b44da9660dce3507290734cf27be7c65", "filename": "tests/compile-fail/pointer_byte_read.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fpointer_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fpointer_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -3,5 +3,5 @@ fn main() {\n     let y = &x;\n     let z = &y as *const &i32 as *const u8;\n     // the deref fails, because we are reading only a part of the pointer\n-    let _val = unsafe { *z }; //~ ERROR tried to access part of a pointer value as raw bytes\n+    let _val = unsafe { *z }; //~ ERROR unable to turn this pointer into raw bytes\n }"}, {"sha": "f0cf00884e15b383b8296496b8edea7118fb73a9", "filename": "tests/compile-fail/ptr_offset_int_plus_int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: dangling pointer was dereferenced\n+// error-pattern: invalid use of 1 as a pointer\n \n fn main() {\n     // Can't offset an integer pointer by non-zero offset."}, {"sha": "705ca68970a1aed9b83885960f3fe73815b63497", "filename": "tests/compile-fail/ptr_offset_int_plus_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fptr_offset_int_plus_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fptr_offset_int_plus_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_int_plus_ptr.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: dangling pointer was dereferenced\n+// error-pattern: invalid use of 1 as a pointer\n \n fn main() {\n     let ptr = Box::into_raw(Box::new(0u32));"}, {"sha": "d07ecc4dc7f31212de7e03de50f1d843caf91f53", "filename": "tests/compile-fail/ptr_offset_ptr_plus_0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fptr_offset_ptr_plus_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fptr_offset_ptr_plus_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_ptr_plus_0.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: outside bounds of allocation\n+// error-pattern: outside bounds of alloc\n \n fn main() {\n     let x = Box::into_raw(Box::new(0u32));"}, {"sha": "cb50ca5fcece011f621e643bbffaef13f8b8ccd9", "filename": "tests/compile-fail/rc_as_raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Frc_as_raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Frc_as_raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Frc_as_raw.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -17,5 +17,5 @@ fn main() {\n     drop(strong);\n     // But not any more. We can do Weak::as_raw(&weak), but accessing the pointer would lead to\n     // undefined behaviour.\n-    assert_eq!(42, **unsafe { &*Weak::as_raw(&weak) }); //~ ERROR dangling pointer\n+    assert_eq!(42, **unsafe { &*Weak::as_raw(&weak) }); //~ ERROR dereferenced after this allocation got freed\n }"}, {"sha": "5554d0c49a1109e04805ce8739a27a12f2e9e181", "filename": "tests/compile-fail/reading_half_a_pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Freading_half_a_pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Freading_half_a_pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freading_half_a_pointer.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -24,6 +24,6 @@ fn main() {\n     // starts 1 byte to the right, so using it would actually be wrong!\n     let d_alias = &mut w.data as *mut _ as *mut *const u8;\n     unsafe {\n-        let _x = *d_alias; //~ ERROR tried to access part of a pointer value as raw bytes\n+        let _x = *d_alias; //~ ERROR unable to turn this pointer into raw bytes\n     }\n }"}, {"sha": "a62c1adae7e64004b51971777f9da246f0c2fa2b", "filename": "tests/compile-fail/reallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-size.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -5,7 +5,7 @@ extern crate alloc;\n use alloc::alloc::Global;\n use std::alloc::{AllocRef, Layout};\n \n-// error-pattern: incorrect alloc info: expected size 2 and align 1, got size 1 and align 1\n+// error-pattern: allocation has size 1 and alignment 1, but gave size 2 and alignment 1\n \n fn main() {\n     unsafe {"}, {"sha": "0d4b60e0a336fab571c67e3d1bc3d7dab9c436e7", "filename": "tests/compile-fail/reallocate-change-alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-change-alloc.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -9,6 +9,6 @@ fn main() {\n     unsafe {\n         let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap().0;\n         Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n-        let _z = *(x.as_ptr() as *mut u8); //~ ERROR dangling pointer was dereferenced\n+        let _z = *(x.as_ptr() as *mut u8); //~ ERROR dereferenced after this allocation got freed\n     }\n }"}, {"sha": "9661d7e966746e4bc90939715792f027115ca442", "filename": "tests/compile-fail/reallocate-dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Freallocate-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Freallocate-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-dangling.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -5,7 +5,7 @@ extern crate alloc;\n use alloc::alloc::Global;\n use std::alloc::{AllocRef, Layout};\n \n-// error-pattern: dangling pointer was dereferenced\n+// error-pattern: dereferenced after this allocation got freed\n \n fn main() {\n     unsafe {"}, {"sha": "08104e917d212a677c887f05c2fec40948de870f", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -15,5 +15,5 @@ fn main() {\n         y: 99,\n     };\n     let p = unsafe { &foo.x };\n-    let i = *p; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n+    let i = *p; //~ ERROR memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "ea09d3e2b44a6519c06dadfaec659a9c35ddfb7c", "filename": "tests/compile-fail/stack_free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fstack_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fstack_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstack_free.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -1,7 +1,7 @@\n // Validation/SB changes why we fail\n // compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n-// error-pattern: tried to deallocate `Stack` memory but gave `Machine(Rust)` as the kind\n+// error-pattern: deallocating `Stack` memory using `Machine(Rust)` deallocation operation\n \n fn main() {\n     let x = 42;"}, {"sha": "69f19651e540d8e37653172e7fe3844437cb5664", "filename": "tests/compile-fail/stacked_borrows/issue-miri-1050-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-2.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: dangling pointer was dereferenced\n+// error-pattern: invalid use of 4 as a pointer\n use std::ptr::NonNull;\n \n fn main() { unsafe {"}, {"sha": "6284fec1601ad9d9d55097ba2d46deabe2f67646", "filename": "tests/compile-fail/static_memory_modification1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fstatic_memory_modification1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fstatic_memory_modification1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification1.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -6,7 +6,7 @@ static X: usize = 5;\n #[allow(mutable_transmutes)]\n fn main() {\n     unsafe {\n-        *std::mem::transmute::<&usize, &mut usize>(&X) = 6; //~ ERROR tried to modify constant memory\n+        *std::mem::transmute::<&usize, &mut usize>(&X) = 6; //~ ERROR read-only\n         assert_eq!(X, 6);\n     }\n }"}, {"sha": "558070d8a79176dfc04d5b14175deaefbb4944a0", "filename": "tests/compile-fail/static_memory_modification2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -7,6 +7,6 @@ use std::mem::transmute;\n fn main() {\n     unsafe {\n         let s = \"this is a test\";\n-        transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42; //~ ERROR tried to modify constant memory\n+        transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42; //~ ERROR read-only\n     }\n }"}, {"sha": "93df1c594534478fb84e2881af02aa72d6ed80a3", "filename": "tests/compile-fail/static_memory_modification3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -7,6 +7,6 @@ use std::mem::transmute;\n fn main() {\n     unsafe {\n         let bs = b\"this is a test\";\n-        transmute::<&[u8], &mut [u8]>(bs)[4] = 42; //~ ERROR tried to modify constant memory\n+        transmute::<&[u8], &mut [u8]>(bs)[4] = 42; //~ ERROR read-only\n     }\n }"}, {"sha": "bf2503917ccb41e340f35d419380f5c694bcfcf3", "filename": "tests/compile-fail/storage_dead_dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fstorage_dead_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fstorage_dead_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstorage_dead_dangling.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -8,7 +8,7 @@ fn fill(v: &mut i32) {\n }\n \n fn evil() {\n-    unsafe { &mut *(LEAK as *mut i32) }; //~ ERROR dangling pointer was dereferenced\n+    unsafe { &mut *(LEAK as *mut i32) }; //~ ERROR dereferenced after this allocation got freed\n }\n \n fn main() {"}, {"sha": "0f02697f26152540407aebbd008bdc702a932cf5", "filename": "tests/compile-fail/transmute-pair-undef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     }\n     let v = unsafe { *z.offset(first_undef) };\n     if v == 0 {}\n-    //~^ ERROR attempted to read undefined bytes\n+    //~^ ERROR this operation requires initialized memory\n }"}, {"sha": "978edb56340e1f4882a024bb41465107b7a005da", "filename": "tests/compile-fail/transmute_fat1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Ftransmute_fat1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Ftransmute_fat1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat1.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<&[u8], [u8; 8]>(&[1u8])\n     };\n-    let _val = bad[0] + bad[bad.len()-1]; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n+    let _val = bad[0] + bad[bad.len()-1]; //~ ERROR unable to turn this pointer into raw bytes\n }"}, {"sha": "ee1a130042317a26ccc72dbdd0ea5db199409f03", "filename": "tests/compile-fail/unaligned_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Funaligned_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Funaligned_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr1.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n     let x = &x[0] as *const _ as *const u32;\n     // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n-    let _x = unsafe { *x }; //~ ERROR tried to access memory with alignment 2, but alignment 4 is required\n+    let _x = unsafe { *x }; //~ ERROR memory with alignment 2, but alignment 4 is required\n }"}, {"sha": "853d890ecf07e69ff11e069470a442590ea85d3f", "filename": "tests/compile-fail/unaligned_ptr2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Funaligned_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Funaligned_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr2.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let x = (x.as_ptr() as *const u8).wrapping_offset(3) as *const u32;\n     // This must fail because alignment is violated: the offset is not sufficiently aligned.\n     // Also make the offset not a power of 2, that used to ICE.\n-    let _x = unsafe { *x }; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n+    let _x = unsafe { *x }; //~ ERROR memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "43f6b472da05bbd560a4ee80c288076e205accac", "filename": "tests/compile-fail/unaligned_ptr3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Funaligned_ptr3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Funaligned_ptr3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr3.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     // This must fail because alignment is violated. Test specifically for loading pointers,\n     // which have special code in miri's memory.\n     let _x = unsafe { *x };\n-    //~^ ERROR tried to access memory with alignment 2, but alignment\n+    //~^ ERROR memory with alignment 2, but alignment\n }"}, {"sha": "31f88c838149ef742e4c7b4e9307bcb0cf939137", "filename": "tests/compile-fail/unaligned_ptr_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Funaligned_ptr_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Funaligned_ptr_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_zst.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let x = x as *const _ as *const [u32; 0];\n     // This must fail because alignment is violated. Test specifically for loading ZST.\n     let _x = unsafe { *x };\n-    //~^ ERROR tried to access memory with alignment 2, but alignment 4 is required\n+    //~^ ERROR memory with alignment 2, but alignment 4 is required\n }"}, {"sha": "36c14137bdc1647238f8bb36e8452b3154fc0657", "filename": "tests/compile-fail/undefined_byte_read.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fundefined_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fundefined_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fundefined_byte_read.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let v: Vec<u8> = Vec::with_capacity(10);\n     let undef = unsafe { *v.get_unchecked(5) };\n-    let x = undef + 1; //~ ERROR attempted to read undefined bytes\n+    let x = undef + 1; //~ ERROR this operation requires initialized memory\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "034510f3b283ab2e07a65170313dc0f7a0868610", "filename": "tests/compile-fail/validity/dangling_ref1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -1,5 +1,5 @@\n use std::mem;\n \n fn main() {\n-    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR dangling reference (not entirely in bounds)\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR reference to unallocated address 16\n }"}, {"sha": "4ad9b8135db44ac87fc1a148e680546ea1e12228", "filename": "tests/compile-fail/validity/dangling_ref2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref2.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -3,5 +3,5 @@ use std::mem;\n fn main() {\n     let val = 14;\n     let ptr = (&val as *const i32).wrapping_offset(1);\n-    let _x: &i32 = unsafe { mem::transmute(ptr) }; //~ ERROR dangling reference (not entirely in bounds)\n+    let _x: &i32 = unsafe { mem::transmute(ptr) }; //~ ERROR dangling reference (going beyond the bounds of its allocation)\n }"}, {"sha": "5780cccdb842c5ab08e239f6d8baf80f5427ddbc", "filename": "tests/compile-fail/wild_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwild_pointer_deref.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let p = 44 as *const i32;\n-    let x = unsafe { *p }; //~ ERROR dangling pointer was dereferenced\n+    let x = unsafe { *p }; //~ ERROR invalid use of 44 as a pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "907337dcdb2b4fd7ce4af73c65b98b6cd66578dc", "filename": "tests/compile-fail/zst2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fzst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea/tests%2Fcompile-fail%2Fzst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzst2.rs?ref=1103a10e2c1c9d3c6d9aeafb5154a5f5ef0495ea", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let mut x_box = Box::new(1u8);\n     let x = &mut *x_box as *mut _ as *mut [u8; 0];\n     drop(x_box);\n-    unsafe { *x = zst_val; } //~ ERROR dangling pointer was dereferenced\n+    unsafe { *x = zst_val; } //~ ERROR dereferenced after this allocation got freed\n }"}]}