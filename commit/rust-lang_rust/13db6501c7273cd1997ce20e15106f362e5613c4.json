{"sha": "13db6501c7273cd1997ce20e15106f362e5613c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZGI2NTAxYzcyNzNjZDE5OTdjZTIwZTE1MTA2ZjM2MmU1NjEzYzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-01T18:29:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-01T18:29:09Z"}, "message": "Auto merge of #68133 - Centril:slimmer-syntax, r=petrochenkov\n\nSlimmer syntax\n\nHigh-level summary of changes:\n\n- The `syntax::node_count` pass is moved into `rustc_ast_passes`. This works towards improving #65031 by making compiling `syntax` go faster.\n\n- The `syntax::{GLOBALS, with_globals, ..}` business is consolidated into `syntax::attr` for cleaner code and future possible improvements.\n\n- The pretty printer loses its dependency on `ParseSess`, opting to use `SourceMap` & friends directly instead.\n\n- Some drive by cleanup of `syntax::attr::HasAttr` happens.\n\n- Builtin attribute logic (`syntax::attr::builtin`) + `syntax::attr::allow_internal_unstable` is moved into a new `rustc_attr` crate. More logic from `syntax::attr` should be moved into that crate over time. This also means that `syntax` loses all mentions of `ParseSess`, which enables the next point.\n\n- The pretty printer `syntax::print` is moved into a new crate `rustc_ast_pretty`.\n\n- `rustc_session::node_id` is moved back as `syntax::node_id`. As a result, `syntax` gets to drop dependencies on `rustc_session` (and implicitly `rustc_target`), `rustc_error_codes`, and `rustc_errors`. Moreover `rustc_hir` gets to drop its dependency on `rustc_session` as well. At this point, these crates are mostly \"pure data crates\", which is approaching a desirable end state.\n\n  - We should consider renaming `syntax` to `rustc_ast` now.", "tree": {"sha": "57e51357738bcddc9ce15e18ac5da193f57035d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57e51357738bcddc9ce15e18ac5da193f57035d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13db6501c7273cd1997ce20e15106f362e5613c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13db6501c7273cd1997ce20e15106f362e5613c4", "html_url": "https://github.com/rust-lang/rust/commit/13db6501c7273cd1997ce20e15106f362e5613c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13db6501c7273cd1997ce20e15106f362e5613c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64184a3288eca13ddfb7bc2e7b5231cbb8d5b88f", "url": "https://api.github.com/repos/rust-lang/rust/commits/64184a3288eca13ddfb7bc2e7b5231cbb8d5b88f", "html_url": "https://github.com/rust-lang/rust/commit/64184a3288eca13ddfb7bc2e7b5231cbb8d5b88f"}, {"sha": "1a3141c86e9b91d4f75117075d943b72ee7dba48", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a3141c86e9b91d4f75117075d943b72ee7dba48", "html_url": "https://github.com/rust-lang/rust/commit/1a3141c86e9b91d4f75117075d943b72ee7dba48"}], "stats": {"total": 809, "additions": 451, "deletions": 358}, "files": [{"sha": "ec976b6901646d0ab3276a169eee4c600e1d6962", "filename": "Cargo.lock", "status": "modified", "additions": 55, "deletions": 4, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -3093,6 +3093,7 @@ dependencies = [\n  \"rustc-rayon\",\n  \"rustc-rayon-core\",\n  \"rustc_apfloat\",\n+ \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n@@ -3358,6 +3359,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"log\",\n  \"rustc\",\n+ \"rustc_ast_pretty\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_hir\",\n@@ -3374,6 +3376,8 @@ name = \"rustc_ast_passes\"\n version = \"0.0.0\"\n dependencies = [\n  \"log\",\n+ \"rustc_ast_pretty\",\n+ \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n@@ -3383,12 +3387,40 @@ dependencies = [\n  \"syntax\",\n ]\n \n+[[package]]\n+name = \"rustc_ast_pretty\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"log\",\n+ \"rustc_data_structures\",\n+ \"rustc_span\",\n+ \"syntax\",\n+]\n+\n+[[package]]\n+name = \"rustc_attr\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"rustc_ast_pretty\",\n+ \"rustc_data_structures\",\n+ \"rustc_errors\",\n+ \"rustc_feature\",\n+ \"rustc_macros\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"serialize\",\n+ \"smallvec 1.0.0\",\n+ \"syntax\",\n+]\n+\n [[package]]\n name = \"rustc_builtin_macros\"\n version = \"0.0.0\"\n dependencies = [\n  \"fmt_macros\",\n  \"log\",\n+ \"rustc_ast_pretty\",\n+ \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_expand\",\n@@ -3411,6 +3443,7 @@ dependencies = [\n  \"log\",\n  \"rustc\",\n  \"rustc-demangle\",\n+ \"rustc_attr\",\n  \"rustc_codegen_ssa\",\n  \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n@@ -3442,6 +3475,7 @@ dependencies = [\n  \"num_cpus\",\n  \"rustc\",\n  \"rustc_apfloat\",\n+ \"rustc_attr\",\n  \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n@@ -3506,6 +3540,7 @@ dependencies = [\n  \"lazy_static 1.4.0\",\n  \"log\",\n  \"rustc\",\n+ \"rustc_ast_pretty\",\n  \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n@@ -3552,6 +3587,8 @@ version = \"0.0.0\"\n dependencies = [\n  \"log\",\n  \"rustc_ast_passes\",\n+ \"rustc_ast_pretty\",\n+ \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n@@ -3581,11 +3618,11 @@ version = \"0.0.0\"\n name = \"rustc_hir\"\n version = \"0.0.0\"\n dependencies = [\n+ \"rustc_ast_pretty\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_index\",\n  \"rustc_macros\",\n- \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n@@ -3628,6 +3665,7 @@ dependencies = [\n  \"rustc-rayon\",\n  \"rustc_ast_lowering\",\n  \"rustc_ast_passes\",\n+ \"rustc_attr\",\n  \"rustc_builtin_macros\",\n  \"rustc_codegen_llvm\",\n  \"rustc_codegen_ssa\",\n@@ -3672,6 +3710,8 @@ version = \"0.0.0\"\n dependencies = [\n  \"log\",\n  \"rustc\",\n+ \"rustc_ast_pretty\",\n+ \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n@@ -3712,6 +3752,8 @@ dependencies = [\n  \"log\",\n  \"memmap\",\n  \"rustc\",\n+ \"rustc_ast_pretty\",\n+ \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_expand\",\n@@ -3739,6 +3781,8 @@ dependencies = [\n  \"polonius-engine\",\n  \"rustc\",\n  \"rustc_apfloat\",\n+ \"rustc_ast_pretty\",\n+ \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_hir\",\n@@ -3761,6 +3805,7 @@ dependencies = [\n  \"log\",\n  \"rustc\",\n  \"rustc_apfloat\",\n+ \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_hir\",\n@@ -3780,6 +3825,8 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n  \"log\",\n+ \"rustc_ast_pretty\",\n+ \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n@@ -3797,6 +3844,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"log\",\n  \"rustc\",\n+ \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n@@ -3827,6 +3875,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"log\",\n  \"rustc\",\n+ \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_hir\",\n@@ -3844,6 +3893,8 @@ dependencies = [\n  \"log\",\n  \"rustc\",\n  \"rustc_ast_lowering\",\n+ \"rustc_ast_pretty\",\n+ \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_expand\",\n@@ -3864,6 +3915,7 @@ dependencies = [\n  \"rls-data\",\n  \"rls-span\",\n  \"rustc\",\n+ \"rustc_ast_pretty\",\n  \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n@@ -3887,6 +3939,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n+ \"syntax\",\n ]\n \n [[package]]\n@@ -3961,6 +4014,7 @@ dependencies = [\n  \"arena\",\n  \"log\",\n  \"rustc\",\n+ \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_hir\",\n@@ -4481,12 +4535,9 @@ version = \"0.0.0\"\n dependencies = [\n  \"log\",\n  \"rustc_data_structures\",\n- \"rustc_errors\",\n- \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_lexer\",\n  \"rustc_macros\",\n- \"rustc_session\",\n  \"rustc_span\",\n  \"scoped-tls\",\n  \"serialize\","}, {"sha": "782c6879ac58fd6945bd2e6c921d13c3f4ca16e5", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -21,6 +21,7 @@ rustc-rayon = \"0.3.0\"\n rustc-rayon-core = \"0.3.0\"\n polonius-engine = \"0.11.0\"\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "048c1f026be82c6ad325241d04d24c00dc12b77b", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -10,12 +10,12 @@ use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_index::vec::IndexVec;\n-use rustc_session::node_id::NodeMap;\n use rustc_session::CrateDisambiguator;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use syntax::ast;\n+use syntax::node_id::NodeMap;\n \n use std::borrow::Borrow;\n use std::fmt::Write;"}, {"sha": "061b82ebb430ebe63bc72ef5b1c95278918607c2", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -3,12 +3,12 @@\n \n use crate::hir::map::DefPathHash;\n use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n+use rustc_attr as attr;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n use smallvec::SmallVec;\n use std::mem;\n-use syntax::attr;\n \n impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n     #[inline]"}, {"sha": "9f8c20208616b3d2d4052853a6405d99a14664cc", "filename": "src/librustc/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,6 +1,6 @@\n use crate::mir::mono::Linkage;\n+use rustc_attr::{InlineAttr, OptimizeAttr};\n use rustc_span::symbol::Symbol;\n-use syntax::attr::{InlineAttr, OptimizeAttr};\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub struct CodegenFnAttrs {"}, {"sha": "7cbe77b9e82f0c56d959fb00f693aaaf5df6cfae", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -5,19 +5,20 @@ pub use self::StabilityLevel::*;\n \n use crate::session::{DiagnosticMessageId, Session};\n use crate::ty::{self, TyCtxt};\n+use rustc_attr::{self as attr, ConstStability, Deprecation, RustcDeprecation, Stability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_feature::GateIssue;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, HirId};\n-use rustc_session::lint::{self, BuiltinLintDiagnostics, Lint, LintBuffer};\n+use rustc_session::lint::builtin::{DEPRECATED, DEPRECATED_IN_FUTURE, SOFT_UNSTABLE};\n+use rustc_session::lint::{BuiltinLintDiagnostics, Lint, LintBuffer};\n+use rustc_session::parse::feature_err_issue;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};\n use syntax::ast::CRATE_NODE_ID;\n-use syntax::attr::{self, ConstStability, Deprecation, RustcDeprecation, Stability};\n-use syntax::sess::feature_err_issue;\n \n use std::num::NonZeroU32;\n \n@@ -97,7 +98,7 @@ pub fn report_unstable(\n     issue: Option<NonZeroU32>,\n     is_soft: bool,\n     span: Span,\n-    soft_handler: impl FnOnce(&'static lint::Lint, Span, &str),\n+    soft_handler: impl FnOnce(&'static Lint, Span, &str),\n ) {\n     let msg = match reason {\n         Some(r) => format!(\"use of unstable library feature '{}': {}\", feature, r),\n@@ -119,7 +120,7 @@ pub fn report_unstable(\n     let fresh = sess.one_time_diagnostics.borrow_mut().insert(error_id);\n     if fresh {\n         if is_soft {\n-            soft_handler(lint::builtin::SOFT_UNSTABLE, span, &msg)\n+            soft_handler(SOFT_UNSTABLE, span, &msg)\n         } else {\n             feature_err_issue(&sess.parse_sess, feature, span, GateIssue::Library(issue), &msg)\n                 .emit();\n@@ -175,19 +176,19 @@ fn deprecation_message_common(message: String, reason: Option<Symbol>) -> String\n \n pub fn deprecation_message(depr: &Deprecation, path: &str) -> (String, &'static Lint) {\n     let message = format!(\"use of deprecated item '{}'\", path);\n-    (deprecation_message_common(message, depr.note), lint::builtin::DEPRECATED)\n+    (deprecation_message_common(message, depr.note), DEPRECATED)\n }\n \n pub fn rustc_deprecation_message(depr: &RustcDeprecation, path: &str) -> (String, &'static Lint) {\n     let (message, lint) = if deprecation_in_effect(&depr.since.as_str()) {\n-        (format!(\"use of deprecated item '{}'\", path), lint::builtin::DEPRECATED)\n+        (format!(\"use of deprecated item '{}'\", path), DEPRECATED)\n     } else {\n         (\n             format!(\n                 \"use of item '{}' that will be deprecated in future version {}\",\n                 path, depr.since\n             ),\n-            lint::builtin::DEPRECATED_IN_FUTURE,\n+            DEPRECATED_IN_FUTURE,\n         )\n     };\n     (deprecation_message_common(message, Some(depr.reason)), lint)"}, {"sha": "6da7c09c7df9efbbb1698bd413cfaa08548ed300", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -3,6 +3,7 @@ use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n use crate::session::config::OptLevel;\n use crate::ty::print::obsolete::DefPathBasedNames;\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n+use rustc_attr::InlineAttr;\n use rustc_data_structures::base_n;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -12,7 +13,6 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n use std::fmt;\n use std::hash::Hash;\n-use syntax::attr::InlineAttr;\n \n /// Describes how a monomorphization will be instantiated in object files.\n #[derive(PartialEq)]"}, {"sha": "ca824d40e381ac0187cbdc1131e1bc7d0800f503", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -3,13 +3,13 @@ use fmt_macros::{Parser, Piece, Position};\n use crate::ty::{self, GenericParamDefKind, TyCtxt};\n use crate::util::common::ErrorReported;\n \n+use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::struct_span_err;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use syntax::ast::{MetaItem, NestedMetaItem};\n-use syntax::attr;\n \n #[derive(Clone, Debug)]\n pub struct OnUnimplementedFormatString(Symbol);"}, {"sha": "f12032943f91f11389f093dea8fb5bb64462375b", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -41,32 +41,34 @@ use crate::ty::{ExistentialPredicate, InferTy, ParamTy, PolyFnSig, Predicate, Pr\n use crate::ty::{InferConst, ParamConst};\n use crate::ty::{List, TyKind, TyS};\n use crate::util::common::ErrorReported;\n-use rustc_data_structures::sync;\n-use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex, LOCAL_CRATE};\n-use rustc_hir::{HirId, Node, TraitCandidate};\n-use rustc_hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n-use rustc_session::config::CrateType;\n-use rustc_session::config::{BorrowckMode, OutputFilenames};\n-use rustc_session::Session;\n-\n+use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n use rustc_data_structures::stable_hasher::{\n     hash_stable_hashmap, HashStable, StableHasher, StableVec,\n };\n-use rustc_data_structures::sync::{Lock, Lrc, WorkerLocal};\n+use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n use rustc_errors::DiagnosticBuilder;\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex, LOCAL_CRATE};\n+use rustc_hir::{HirId, Node, TraitCandidate};\n+use rustc_hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n+use rustc_session::config::CrateType;\n+use rustc_session::config::{BorrowckMode, OutputFilenames};\n use rustc_session::lint::{Level, Lint};\n-use rustc_session::node_id::NodeMap;\n+use rustc_session::Session;\n use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n+use syntax::ast;\n+use syntax::expand::allocator::AllocatorKind;\n+use syntax::node_id::NodeMap;\n+\n use smallvec::SmallVec;\n use std::any::Any;\n use std::borrow::Borrow;\n@@ -78,9 +80,6 @@ use std::iter;\n use std::mem;\n use std::ops::{Bound, Deref};\n use std::sync::Arc;\n-use syntax::ast;\n-use syntax::attr;\n-use syntax::expand::allocator::AllocatorKind;\n \n type InternedSet<'tcx, T> = ShardedHashMap<Interned<'tcx, T>, ()>;\n "}, {"sha": "bda42db40b0aea4c78757eacf98f17b672301af0", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,9 +1,9 @@\n use crate::session::{self, DataTypeKind};\n use crate::ty::{self, subst::SubstsRef, ReprOptions, Ty, TyCtxt, TypeFoldable};\n \n+use rustc_attr as attr;\n use rustc_span::DUMMY_SP;\n use syntax::ast::{self, Ident, IntTy, UintTy};\n-use syntax::attr;\n \n use std::cmp;\n use std::fmt;"}, {"sha": "f417b907a381139c31bbf4021ace77a844722487", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -26,6 +26,7 @@ use crate::ty::layout::VariantIdx;\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use crate::ty::util::{Discr, IntTypeExt};\n use crate::ty::walk::TypeWalker;\n+use rustc_attr as attr;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::fx::FxIndexMap;\n@@ -38,11 +39,13 @@ use rustc_hir::{GlobMap, Node, TraitMap};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Encodable, Encoder};\n-use rustc_session::node_id::{NodeMap, NodeSet};\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::Align;\n+use syntax::ast::{self, Constness, Ident, Name};\n+use syntax::node_id::{NodeId, NodeMap, NodeSet};\n+\n use smallvec;\n use std::cell::RefCell;\n use std::cmp::{self, Ordering};\n@@ -52,8 +55,6 @@ use std::ops::Deref;\n use std::ops::Range;\n use std::slice;\n use std::{mem, ptr};\n-use syntax::ast::{self, Constness, Ident, Name, NodeId};\n-use syntax::attr;\n \n pub use self::sty::BoundRegion::*;\n pub use self::sty::InferTy::*;"}, {"sha": "f5c14e73db2bc3b4003dcaa1e84f2e0b081e6c51", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -11,10 +11,10 @@ use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n \n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n+use rustc_attr::{SignedInt, UnsignedInt};\n use rustc_span::symbol::{kw, Symbol};\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n-use syntax::attr::{SignedInt, UnsignedInt};\n \n use std::cell::Cell;\n use std::collections::BTreeMap;"}, {"sha": "393125f278c035b98d60f7d903bc78f659c379c7", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -435,11 +435,11 @@ pub unsafe fn handle_deadlock() {\n     let rustc_span_globals =\n         rustc_span::GLOBALS.with(|rustc_span_globals| rustc_span_globals as *const _);\n     let rustc_span_globals = &*rustc_span_globals;\n-    let syntax_globals = syntax::GLOBALS.with(|syntax_globals| syntax_globals as *const _);\n+    let syntax_globals = syntax::attr::GLOBALS.with(|syntax_globals| syntax_globals as *const _);\n     let syntax_globals = &*syntax_globals;\n     thread::spawn(move || {\n         tls::GCX_PTR.set(gcx_ptr, || {\n-            syntax::GLOBALS.set(syntax_globals, || {\n+            syntax::attr::GLOBALS.set(syntax_globals, || {\n                 rustc_span::GLOBALS\n                     .set(rustc_span_globals, || tls::with_global(|tcx| deadlock(tcx, &registry)))\n             });"}, {"sha": "973cd81014616ffd112f9c9f3e48a766597aca59", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -49,14 +49,14 @@ use rustc_hir::{HirIdSet, ItemLocalId, TraitCandidate};\n use rustc_index::vec::IndexVec;\n use rustc_target::spec::PanicStrategy;\n \n+use rustc_attr as attr;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use std::any::type_name;\n use std::borrow::Cow;\n use std::ops::Deref;\n use std::sync::Arc;\n use syntax::ast;\n-use syntax::attr;\n \n #[macro_use]\n mod plumbing;"}, {"sha": "4dfff85d531477aaa54e71a1dd11f73fde3377aa", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -10,6 +10,7 @@ use crate::ty::TyKind::*;\n use crate::ty::{self, DefIdTree, GenericParamDefKind, Ty, TyCtxt, TypeFoldable};\n use crate::util::common::ErrorReported;\n use rustc_apfloat::Float as _;\n+use rustc_attr::{self as attr, SignedInt, UnsignedInt};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n@@ -19,7 +20,6 @@ use rustc_macros::HashStable;\n use rustc_span::Span;\n use std::{cmp, fmt};\n use syntax::ast;\n-use syntax::attr::{self, SignedInt, UnsignedInt};\n \n #[derive(Copy, Clone, Debug)]\n pub struct Discr<'tcx> {"}, {"sha": "f6ab60e199f335f977d1f92d8a6d6aeb52d080f3", "filename": "src/librustc_ast_lowering/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_lowering%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_lowering%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -12,6 +12,7 @@ doctest = false\n [dependencies]\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n rustc = { path = \"../librustc\" }\n+rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "e27f2bdb8d25f83f2b1c9be563127e058eb02f33", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -7,13 +7,13 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n-use rustc_session::node_id::NodeMap;\n use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n use syntax::ast::*;\n use syntax::attr;\n+use syntax::node_id::NodeMap;\n use syntax::visit::{self, Visitor};\n \n use log::debug;"}, {"sha": "c3e96a31e4001264a4fc890accf97497cbbad3b3", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -38,6 +38,7 @@ use rustc::dep_graph::DepGraph;\n use rustc::hir::map::definitions::{DefKey, DefPathData, Definitions};\n use rustc::hir::map::Map;\n use rustc::{bug, span_bug};\n+use rustc_ast_pretty::pprust;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n@@ -49,8 +50,8 @@ use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::IndexVec;\n use rustc_session::config::nightly_options;\n-use rustc_session::lint::{builtin, BuiltinLintDiagnostics, LintBuffer};\n-use rustc_session::node_id::NodeMap;\n+use rustc_session::lint::{builtin::BARE_TRAIT_OBJECTS, BuiltinLintDiagnostics, LintBuffer};\n+use rustc_session::parse::ParseSess;\n use rustc_session::Session;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, DesugaringKind, ExpnData, ExpnKind};\n@@ -59,8 +60,7 @@ use rustc_span::Span;\n use syntax::ast;\n use syntax::ast::*;\n use syntax::attr;\n-use syntax::print::pprust;\n-use syntax::sess::ParseSess;\n+use syntax::node_id::NodeMap;\n use syntax::token::{self, Nonterminal, Token};\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::visit::{self, Visitor};\n@@ -2621,7 +2621,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .unwrap_or(true);\n         if !is_macro_callsite {\n             self.resolver.lint_buffer().buffer_lint_with_diagnostic(\n-                builtin::BARE_TRAIT_OBJECTS,\n+                BARE_TRAIT_OBJECTS,\n                 id,\n                 span,\n                 \"trait objects without an explicit `dyn` are deprecated\","}, {"sha": "01d2ac449b590b034a054c494f5777ecee71eb09", "filename": "src/librustc_ast_passes/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -10,6 +10,8 @@ path = \"lib.rs\"\n \n [dependencies]\n log = \"0.4\"\n+rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }"}, {"sha": "4bb55d6acddcd2038a9674927f19ce265e2d0d18", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -6,6 +6,7 @@\n // This pass is supposed to perform only simple checks not requiring name resolution\n // or type checking or some other kind of complex analysis.\n \n+use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Applicability, FatalError};\n use rustc_parse::validate_attr;\n@@ -19,7 +20,6 @@ use std::mem;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::expand::is_proc_macro_attr;\n-use syntax::print::pprust;\n use syntax::visit::{self, Visitor};\n use syntax::walk_list;\n \n@@ -331,7 +331,7 @@ impl<'a> AstValidator<'a> {\n             .flat_map(|i| i.attrs.as_ref())\n             .filter(|attr| {\n                 let arr = [sym::allow, sym::cfg, sym::cfg_attr, sym::deny, sym::forbid, sym::warn];\n-                !arr.contains(&attr.name_or_empty()) && attr::is_builtin_attr(attr)\n+                !arr.contains(&attr.name_or_empty()) && rustc_attr::is_builtin_attr(attr)\n             })\n             .for_each(|attr| {\n                 if attr.is_doc_comment() {"}, {"sha": "3b13ab354fdf98e75585d9110357f8db03d42430", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,13 +1,13 @@\n use rustc_errors::{struct_span_err, Handler};\n use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n use rustc_feature::{Features, GateIssue, UnstableFeatures};\n+use rustc_session::parse::{feature_err, feature_err_issue, ParseSess};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};\n use syntax::ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n use syntax::attr;\n-use syntax::sess::{feature_err, feature_err_issue, ParseSess};\n use syntax::visit::{self, FnKind, Visitor};\n \n use log::debug;"}, {"sha": "b4d8ddccb041d247bfbb43aafcd7de1a58f21972", "filename": "src/librustc_ast_passes/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Flib.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,9 +1,12 @@\n //! The `rustc_ast_passes` crate contains passes which validate the AST in `syntax`\n //! parsed by `rustc_parse` and then lowered, after the passes in this crate,\n //! by `rustc_ast_lowering`.\n+//!\n+//! The crate also contains other misc AST visitors, e.g. `node_count` and `show_span`.\n \n #![cfg_attr(bootstrap, feature(slice_patterns))]\n \n pub mod ast_validation;\n pub mod feature_gate;\n+pub mod node_count;\n pub mod show_span;"}, {"sha": "9fe7238fcfc3eaeef3e645673e9cba78c1277be1", "filename": "src/librustc_ast_passes/node_count.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_passes%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_passes%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fnode_count.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,8 +1,8 @@\n // Simply gives a rought count of the number of nodes in an AST.\n \n-use crate::ast::*;\n-use crate::visit::*;\n use rustc_span::Span;\n+use syntax::ast::*;\n+use syntax::visit::*;\n \n pub struct NodeCounter {\n     pub count: usize,", "previous_filename": "src/libsyntax/util/node_count.rs"}, {"sha": "2f7f804b62887a7f9fc79030435404f9cf225f4f", "filename": "src/librustc_ast_pretty/Cargo.toml", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_pretty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_pretty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -0,0 +1,16 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_ast_pretty\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+name = \"rustc_ast_pretty\"\n+path = \"lib.rs\"\n+doctest = false\n+\n+[dependencies]\n+log = \"0.4\"\n+rustc_span = { path = \"../librustc_span\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+syntax = { path = \"../libsyntax\" }"}, {"sha": "dce856df9c66abeb4087f173ce29b64ea929f0e9", "filename": "src/librustc_ast_pretty/helpers.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_pretty%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_pretty%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fhelpers.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,4 +1,4 @@\n-use crate::print::pp::Printer;\n+use crate::pp::Printer;\n use std::borrow::Cow;\n \n impl Printer {", "previous_filename": "src/libsyntax/print/helpers.rs"}, {"sha": "bde5f4bb03d0d78e91895760bf37a095135bb962", "filename": "src/librustc_ast_pretty/lib.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Flib.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -0,0 +1,7 @@\n+#![feature(bool_to_option)]\n+#![feature(crate_visibility_modifier)]\n+#![recursion_limit = \"256\"]\n+\n+mod helpers;\n+pub mod pp;\n+pub mod pprust;"}, {"sha": "e6090db3284a72a1d45a29482bf3035d6dfe73d0", "filename": "src/librustc_ast_pretty/pp.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_pretty%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_pretty%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpp.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "previous_filename": "src/libsyntax/print/pp.rs"}, {"sha": "761af72f95dd61a3a39a44ed527cbca5a8078f8b", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "renamed", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,20 +1,19 @@\n-use crate::ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n-use crate::ast::{Attribute, GenericArg, MacArgs};\n-use crate::ast::{GenericBound, SelfKind, TraitBoundModifier};\n-use crate::attr;\n-use crate::print::pp::Breaks::{Consistent, Inconsistent};\n-use crate::print::pp::{self, Breaks};\n-use crate::ptr::P;\n-use crate::sess::ParseSess;\n-use crate::token::{self, BinOpToken, DelimToken, Nonterminal, Token, TokenKind};\n-use crate::tokenstream::{self, TokenStream, TokenTree};\n-use crate::util::classify;\n-use crate::util::comments;\n-use crate::util::parser::{self, AssocOp, Fixity};\n+use crate::pp::Breaks::{Consistent, Inconsistent};\n+use crate::pp::{self, Breaks};\n \n+use rustc_span::edition::Edition;\n use rustc_span::source_map::{dummy_spanned, SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{BytePos, FileName, Span};\n+use syntax::ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n+use syntax::ast::{Attribute, GenericArg, MacArgs};\n+use syntax::ast::{GenericBound, SelfKind, TraitBoundModifier};\n+use syntax::attr;\n+use syntax::ptr::P;\n+use syntax::token::{self, BinOpToken, DelimToken, Nonterminal, Token, TokenKind};\n+use syntax::tokenstream::{self, TokenStream, TokenTree};\n+use syntax::util::parser::{self, AssocOp, Fixity};\n+use syntax::util::{classify, comments};\n \n use std::borrow::Cow;\n \n@@ -54,13 +53,8 @@ pub struct Comments<'a> {\n }\n \n impl<'a> Comments<'a> {\n-    pub fn new(\n-        cm: &'a SourceMap,\n-        sess: &ParseSess,\n-        filename: FileName,\n-        input: String,\n-    ) -> Comments<'a> {\n-        let comments = comments::gather_comments(sess, filename, input);\n+    pub fn new(cm: &'a SourceMap, filename: FileName, input: String) -> Comments<'a> {\n+        let comments = comments::gather_comments(cm, filename, input);\n         Comments { cm, comments, current: 0 }\n     }\n \n@@ -102,21 +96,22 @@ crate const INDENT_UNIT: usize = 4;\n /// it can scan the input text for comments to copy forward.\n pub fn print_crate<'a>(\n     cm: &'a SourceMap,\n-    sess: &ParseSess,\n     krate: &ast::Crate,\n     filename: FileName,\n     input: String,\n     ann: &'a dyn PpAnn,\n     is_expanded: bool,\n+    edition: Edition,\n+    has_injected_crate: bool,\n ) -> String {\n     let mut s = State {\n         s: pp::mk_printer(),\n-        comments: Some(Comments::new(cm, sess, filename, input)),\n+        comments: Some(Comments::new(cm, filename, input)),\n         ann,\n         is_expanded,\n     };\n \n-    if is_expanded && sess.injected_crate_name.try_get().is_some() {\n+    if is_expanded && has_injected_crate {\n         // We need to print `#![no_std]` (and its feature gate) so that\n         // compiling pretty-printed source won't inject libstd again.\n         // However, we don't want these attributes in the AST because\n@@ -130,7 +125,7 @@ pub fn print_crate<'a>(\n \n         // Currently, in Rust 2018 we don't have `extern crate std;` at the crate\n         // root, so this is not needed, and actually breaks things.\n-        if sess.edition == rustc_span::edition::Edition::Edition2015 {\n+        if edition == Edition::Edition2015 {\n             // `#![no_std]`\n             let no_std_meta = attr::mk_word_item(ast::Ident::with_dummy_span(sym::no_std));\n             let fake_attr = attr::mk_attr_inner(no_std_meta);\n@@ -144,10 +139,7 @@ pub fn print_crate<'a>(\n     s.s.eof()\n }\n \n-pub fn to_string<F>(f: F) -> String\n-where\n-    F: FnOnce(&mut State<'_>),\n-{\n+pub fn to_string(f: impl FnOnce(&mut State<'_>)) -> String {\n     let mut printer =\n         State { s: pp::mk_printer(), comments: None, ann: &NoAnn, is_expanded: false };\n     f(&mut printer);", "previous_filename": "src/libsyntax/print/pprust.rs"}, {"sha": "279e6f518a71da1f2eeb74b24829507727894157", "filename": "src/librustc_ast_pretty/pprust/tests.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,9 +1,9 @@\n use super::*;\n \n-use crate::ast;\n-use crate::with_default_globals;\n use rustc_span;\n use rustc_span::source_map::{dummy_spanned, respan};\n+use syntax::ast;\n+use syntax::with_default_globals;\n \n fn fun_to_string(\n     decl: &ast::FnDecl,", "previous_filename": "src/libsyntax/print/pprust/tests.rs"}, {"sha": "83a5f41989b6c2f7125b7168cefb245eca1ce36c", "filename": "src/librustc_attr/Cargo.toml", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_attr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_attr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -0,0 +1,22 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_attr\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+name = \"rustc_attr\"\n+path = \"lib.rs\"\n+doctest = false\n+\n+[dependencies]\n+rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n+rustc_span = { path = \"../librustc_span\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n+rustc_macros = { path = \"../librustc_macros\" }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+rustc_session = { path = \"../librustc_session\" }\n+syntax = { path = \"../libsyntax\" }"}, {"sha": "be7c164395b0a9e766cb72ec5a19d1570525b2fe", "filename": "src/librustc_attr/builtin.rs", "status": "renamed", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,16 +1,16 @@\n //! Parsing and validation of builtin attributes\n \n-use super::{mark_used, MetaItemKind};\n-use crate::ast::{self, Attribute, MetaItem, NestedMetaItem};\n-use crate::print::pprust;\n-use crate::sess::{feature_err, ParseSess};\n+use super::{find_by_name, mark_used};\n \n+use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, Handler};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};\n use rustc_macros::HashStable_Generic;\n+use rustc_session::parse::{feature_err, ParseSess};\n use rustc_span::hygiene::Transparency;\n use rustc_span::{symbol::sym, symbol::Symbol, Span};\n use std::num::NonZeroU32;\n+use syntax::ast::{self, Attribute, MetaItem, MetaItemKind, NestedMetaItem};\n \n pub fn is_builtin_attr(attr: &Attribute) -> bool {\n     attr.is_doc_comment() || attr.ident().filter(|ident| is_builtin_attr_name(ident.name)).is_some()\n@@ -1043,3 +1043,21 @@ pub fn find_transparency(\n     let fallback = if is_legacy { Transparency::SemiTransparent } else { Transparency::Opaque };\n     (transparency.map_or(fallback, |t| t.0), error)\n }\n+\n+pub fn allow_internal_unstable<'a>(\n+    attrs: &[Attribute],\n+    diag: &'a rustc_errors::Handler,\n+) -> Option<impl Iterator<Item = Symbol> + 'a> {\n+    let attr = find_by_name(attrs, sym::allow_internal_unstable)?;\n+    let list = attr.meta_item_list().or_else(|| {\n+        diag.span_err(attr.span, \"allow_internal_unstable expects list of feature names\");\n+        None\n+    })?;\n+    Some(list.into_iter().filter_map(move |it| {\n+        let name = it.ident().map(|ident| ident.name);\n+        if name.is_none() {\n+            diag.span_err(it.span(), \"`allow_internal_unstable` expects feature names\");\n+        }\n+        name\n+    }))\n+}", "previous_filename": "src/libsyntax/attr/builtin.rs"}, {"sha": "d2ff167db88e5664474e9e02a7ebc18e18831794", "filename": "src/librustc_attr/lib.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_attr%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_attr%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Flib.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -0,0 +1,16 @@\n+//! Functions and types dealing with attributes and meta items.\n+//!\n+//! FIXME(Centril): For now being, much of the logic is still in `syntax::attr`.\n+//! The goal is to move the definition of `MetaItem` and things that don't need to be in `syntax`\n+//! to this crate.\n+\n+mod builtin;\n+\n+pub use builtin::*;\n+pub use IntType::*;\n+pub use ReprAttr::*;\n+pub use StabilityLevel::*;\n+\n+pub use syntax::attr::*;\n+\n+pub(crate) use syntax::HashStableContext;"}, {"sha": "b424ce432148fb755dd20e218fb55dc9c13d94a8", "filename": "src/librustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -12,6 +12,8 @@ doctest = false\n [dependencies]\n fmt_macros = { path = \"../libfmt_macros\" }\n log = \"0.4\"\n+rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }"}, {"sha": "3fc86a5469c2f75c6ed4da1bdf3192c14bb894a2", "filename": "src/librustc_builtin_macros/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fassert.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,11 +1,11 @@\n use rustc_errors::{Applicability, DiagnosticBuilder};\n \n+use rustc_ast_pretty::pprust;\n use rustc_expand::base::*;\n use rustc_parse::parser::Parser;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, *};\n-use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::token::{self, TokenKind};\n use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree};"}, {"sha": "c9a77ee0acd152b7ce5bb43d58f75f15afad6ab0", "filename": "src/librustc_builtin_macros/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fcfg.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -2,11 +2,11 @@\n //! a literal `true` or `false` based on whether the given cfg matches the\n //! current compilation environment.\n \n+use rustc_attr as attr;\n use rustc_errors::DiagnosticBuilder;\n use rustc_expand::base::{self, *};\n use rustc_span::Span;\n use syntax::ast;\n-use syntax::attr;\n use syntax::token;\n use syntax::tokenstream::TokenStream;\n "}, {"sha": "aa373d31e0609f7bd923aa23d2acc6427db0a689", "filename": "src/librustc_builtin_macros/cmdline_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fcmdline_attrs.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,10 +1,10 @@\n //! Attributes injected into the crate root from command line using `-Z crate-attr`.\n \n use rustc_expand::panictry;\n+use rustc_session::parse::ParseSess;\n use rustc_span::FileName;\n use syntax::ast::{self, AttrItem, AttrStyle};\n use syntax::attr::mk_attr;\n-use syntax::sess::ParseSess;\n use syntax::token;\n \n pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -> ast::Crate {"}, {"sha": "364d8ff8e2262bdf413dc21cf130dfb76a16e3d2", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -181,15 +181,15 @@ use std::cell::RefCell;\n use std::iter;\n use std::vec;\n \n+use rustc_attr as attr;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_session::parse::ParseSess;\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use syntax::ast::{GenericArg, GenericParamKind, VariantData};\n-use syntax::attr;\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n use syntax::util::map_in_place::MapInPlace;\n \n use ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};"}, {"sha": "6d9bfbfd05f0aed01509d9e49c72d7bbb7dfbaf3", "filename": "src/librustc_builtin_macros/log_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flog_syntax.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,14 +1,14 @@\n+use rustc_ast_pretty::pprust;\n use rustc_expand::base;\n use rustc_span;\n-use syntax::print;\n use syntax::tokenstream::TokenStream;\n \n pub fn expand_log_syntax<'cx>(\n     _cx: &'cx mut base::ExtCtxt<'_>,\n     sp: rustc_span::Span,\n     tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'cx> {\n-    println!(\"{}\", print::pprust::tts_to_string(tts));\n+    println!(\"{}\", pprust::tts_to_string(tts));\n \n     // any so that `log_syntax` can be invoked as an expression and item.\n     base::DummyResult::any_valid(sp)"}, {"sha": "222456d8fe0d98477eff3655d7b2a2c46ee9cf69", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,17 +1,17 @@\n use std::mem;\n \n+use rustc_ast_pretty::pprust;\n use rustc_expand::base::{ExtCtxt, Resolver};\n use rustc_expand::expand::{AstFragment, ExpansionConfig};\n+use rustc_session::parse::ParseSess;\n use rustc_span::hygiene::AstPass;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{Span, DUMMY_SP};\n use smallvec::smallvec;\n use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::expand::is_proc_macro_attr;\n-use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n use syntax::visit::{self, Visitor};\n \n struct ProcMacroDerive {"}, {"sha": "264223bafbcf9c6eb68572489a7568bea78ae383", "filename": "src/librustc_builtin_macros/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fsource_util.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,11 +1,11 @@\n+use rustc_ast_pretty::pprust;\n use rustc_expand::base::{self, *};\n use rustc_expand::panictry;\n use rustc_parse::{self, new_sub_parser_from_file, parser::Parser, DirectoryOwnership};\n use rustc_session::lint::builtin::INCOMPLETE_INCLUDE;\n use rustc_span::symbol::Symbol;\n use rustc_span::{self, Pos, Span};\n use syntax::ast;\n-use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::token;\n use syntax::tokenstream::TokenStream;"}, {"sha": "6663eecbf5f4b032d7371ffebe02f8bd05c7a11b", "filename": "src/librustc_builtin_macros/standard_library_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,11 +1,11 @@\n use rustc_expand::base::{ExtCtxt, Resolver};\n use rustc_expand::expand::ExpansionConfig;\n+use rustc_session::parse::ParseSess;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::AstPass;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n use syntax::{ast, attr};\n \n pub fn inject("}, {"sha": "2d6ff81aea8b840628b70cad567668a20c0d1804", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -2,13 +2,13 @@\n /// Ideally, this code would be in libtest but for efficiency and error messages it lives here.\n use crate::util::check_builtin_macro_attribute;\n \n+use rustc_ast_pretty::pprust;\n use rustc_expand::base::*;\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use syntax::ast;\n use syntax::attr;\n-use syntax::print::pprust;\n \n use std::iter;\n "}, {"sha": "6a73f121c99bf57b1f7a21b7edbf0a34ea0698b9", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -4,6 +4,7 @@ use log::debug;\n use rustc_expand::base::{ExtCtxt, Resolver};\n use rustc_expand::expand::{AstFragment, ExpansionConfig};\n use rustc_feature::Features;\n+use rustc_session::parse::ParseSess;\n use rustc_span::hygiene::{AstPass, SyntaxContext, Transparency};\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{sym, Symbol};\n@@ -15,7 +16,6 @@ use syntax::attr;\n use syntax::entry::{self, EntryPointType};\n use syntax::mut_visit::{ExpectOne, *};\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n \n use std::{iter, mem};\n "}, {"sha": "e7c0ee5ea763ea2d330810beb6c14271a5cf0ab6", "filename": "src/librustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -17,6 +17,7 @@ libc = \"0.2\"\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc-demangle = \"0.1\"\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_codegen_ssa = { path = \"../librustc_codegen_ssa\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "e3920d99c90bc644f5b5364428119f9b9b05b94c", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -21,7 +21,7 @@ use crate::attributes;\n use crate::llvm::AttributePlace::Function;\n use crate::llvm::{self, Attribute};\n use crate::llvm_util;\n-pub use syntax::attr::{self, InlineAttr, OptimizeAttr};\n+pub use rustc_attr::{self as attr, InlineAttr, OptimizeAttr};\n \n use crate::context::CodegenCx;\n use crate::value::Value;"}, {"sha": "8d767e5c2a04f46be4652a1164b4f11d6ccb02b4", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -24,6 +24,7 @@ syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc = { path = \"../librustc\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_data_structures = { path = \"../librustc_data_structures\"}\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "3a14fa5ae319678199e4dd0d12817d8f07ccacdc", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1723,7 +1723,7 @@ pub fn add_upstream_native_libraries(\n \n pub fn relevant_lib(sess: &Session, lib: &NativeLibrary) -> bool {\n     match lib.cfg {\n-        Some(ref cfg) => syntax::attr::cfg_matches(cfg, &sess.parse_sess, None),\n+        Some(ref cfg) => rustc_attr::cfg_matches(cfg, &sess.parse_sess, None),\n         None => true,\n     }\n }"}, {"sha": "1f43a4027c5ffe34977c32828aca66ba0403d004", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -37,6 +37,7 @@ use rustc::ty::layout::{self, Align, HasTyCtxt, LayoutOf, TyLayout, VariantIdx};\n use rustc::ty::layout::{FAT_PTR_ADDR, FAT_PTR_EXTRA};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Instance, Ty, TyCtxt};\n+use rustc_attr as attr;\n use rustc_codegen_utils::{check_for_rustc_errors_attr, symbol_names_test};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::print_time_passes_entry;\n@@ -46,7 +47,6 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_index::vec::Idx;\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_span::Span;\n-use syntax::attr;\n \n use std::cmp;\n use std::ops::{Deref, DerefMut};"}, {"sha": "7a5966269b30196e4b42f15e8d7d053e9f7e5ef5", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -14,6 +14,7 @@ lazy_static = \"1.0\"\n log = \"0.4\"\n env_logger = { version = \"0.7\", default-features = false }\n rustc = { path = \"../librustc\" }\n+rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "345b03e6db243dacde0a32e45ff1f1adc59ea16d", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -5,14 +5,13 @@ use rustc::session::config::{Input, PpMode, PpSourceMode};\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n use rustc::util::common::ErrorReported;\n+use rustc_ast_pretty::pprust;\n use rustc_hir as hir;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::print as pprust_hir;\n use rustc_mir::util::{write_mir_graphviz, write_mir_pretty};\n-\n use rustc_span::FileName;\n use syntax::ast;\n-use syntax::print::pprust;\n \n use std::cell::Cell;\n use std::fs::File;\n@@ -392,14 +391,16 @@ pub fn print_after_parsing(\n         call_with_pp_support(&s, sess, None, move |annotation| {\n             debug!(\"pretty printing source code {:?}\", s);\n             let sess = annotation.sess();\n+            let parse = &sess.parse_sess;\n             *out = pprust::print_crate(\n                 sess.source_map(),\n-                &sess.parse_sess,\n                 krate,\n                 src_name,\n                 src,\n                 annotation.pp_ann(),\n                 false,\n+                parse.edition,\n+                parse.injected_crate_name.try_get().is_some(),\n             )\n         })\n     } else {\n@@ -432,14 +433,16 @@ pub fn print_after_hir_lowering<'tcx>(\n             call_with_pp_support(&s, tcx.sess, Some(tcx), move |annotation| {\n                 debug!(\"pretty printing source code {:?}\", s);\n                 let sess = annotation.sess();\n+                let parse = &sess.parse_sess;\n                 *out = pprust::print_crate(\n                     sess.source_map(),\n-                    &sess.parse_sess,\n                     krate,\n                     src_name,\n                     src,\n                     annotation.pp_ann(),\n                     true,\n+                    parse.edition,\n+                    parse.injected_crate_name.try_get().is_some(),\n                 )\n             })\n         }\n@@ -449,14 +452,8 @@ pub fn print_after_hir_lowering<'tcx>(\n             call_with_pp_support_hir(&s, tcx, move |annotation, krate| {\n                 debug!(\"pretty printing source code {:?}\", s);\n                 let sess = annotation.sess();\n-                *out = pprust_hir::print_crate(\n-                    sess.source_map(),\n-                    &sess.parse_sess,\n-                    krate,\n-                    src_name,\n-                    src,\n-                    annotation.pp_ann(),\n-                )\n+                let cm = sess.source_map();\n+                *out = pprust_hir::print_crate(cm, krate, src_name, src, annotation.pp_ann())\n             })\n         }\n "}, {"sha": "cb7919d630ad40e99a791a72a2ee23bed416539b", "filename": "src/librustc_expand/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -14,7 +14,9 @@ doctest = false\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n log = \"0.4\"\n rustc_span = { path = \"../librustc_span\" }\n+rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_ast_passes = { path = \"../librustc_ast_passes\" }\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }"}, {"sha": "536259e05471805e6742d90555e567287e69a362", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,20 +1,20 @@\n use crate::expand::{self, AstFragment, Invocation};\n \n+use rustc_attr::{self as attr, Deprecation, HasAttrs, Stability};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_parse::{self, parser, DirectoryOwnership, MACRO_ARGUMENTS};\n+use rustc_session::parse::ParseSess;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{AstPass, ExpnData, ExpnId, ExpnKind};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{FileName, MultiSpan, Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n use syntax::ast::{self, Attribute, Name, NodeId, PatKind};\n-use syntax::attr::{self, Deprecation, HasAttrs, Stability};\n use syntax::mut_visit::{self, MutVisitor};\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n use syntax::token;\n use syntax::tokenstream::{self, TokenStream};\n use syntax::visit::Visitor;\n@@ -62,7 +62,7 @@ impl HasAttrs for Annotatable {\n         }\n     }\n \n-    fn visit_attrs<F: FnOnce(&mut Vec<Attribute>)>(&mut self, f: F) {\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         match self {\n             Annotatable::Item(item) => item.visit_attrs(f),\n             Annotatable::TraitItem(trait_item) => trait_item.visit_attrs(f),"}, {"sha": "f08bed5731530e8558f892d6d05e4e814c808ab9", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -5,23 +5,23 @@ use crate::mbe::macro_rules::annotate_err_with_kind;\n use crate::placeholders::{placeholder, PlaceholderExpander};\n use crate::proc_macro::collect_derives;\n \n+use rustc_ast_pretty::pprust;\n+use rustc_attr::{self as attr, is_builtin_attr, HasAttrs};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, FatalError, PResult};\n use rustc_feature::Features;\n use rustc_parse::configure;\n use rustc_parse::parser::Parser;\n use rustc_parse::validate_attr;\n use rustc_parse::DirectoryOwnership;\n+use rustc_session::parse::{feature_err, ParseSess};\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{FileName, Span, DUMMY_SP};\n use syntax::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n use syntax::ast::{ItemKind, MacArgs, MacStmtStyle, StmtKind};\n-use syntax::attr::{self, is_builtin_attr, HasAttrs};\n use syntax::mut_visit::*;\n-use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::sess::{feature_err, ParseSess};\n use syntax::token;\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::util::map_in_place::MapInPlace;\n@@ -1671,7 +1671,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             }\n \n             let meta = attr::mk_list_item(Ident::with_dummy_span(sym::doc), items);\n-            *at = attr::Attribute {\n+            *at = ast::Attribute {\n                 kind: ast::AttrKind::Normal(AttrItem {\n                     path: meta.path,\n                     args: meta.kind.mac_args(meta.span),"}, {"sha": "b14725fd731b1fb0d0e0a491243bcadc113ad7c1", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -76,13 +76,13 @@ use TokenTreeOrTokenTreeSlice::*;\n \n use crate::mbe::{self, TokenTree};\n \n+use rustc_ast_pretty::pprust;\n use rustc_parse::parser::{FollowedByType, Parser, PathStyle};\n use rustc_parse::Directory;\n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{kw, sym, Symbol};\n use syntax::ast::{Ident, Name};\n-use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n use syntax::token::{self, DocComment, Nonterminal, Token};\n use syntax::tokenstream::TokenStream;\n "}, {"sha": "29d41543fbf8cefb9e562c403634c6304e99fecf", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -8,20 +8,20 @@ use crate::mbe::macro_parser::{Error, Failure, Success};\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedParseResult};\n use crate::mbe::transcribe::transcribe;\n \n+use rustc_ast_pretty::pprust;\n+use rustc_attr::{self as attr, TransparencyError};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder, FatalError};\n use rustc_feature::Features;\n use rustc_parse::parser::Parser;\n use rustc_parse::Directory;\n+use rustc_session::parse::ParseSess;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use syntax::ast;\n-use syntax::attr::{self, TransparencyError};\n-use syntax::print::pprust;\n-use syntax::sess::ParseSess;\n use syntax::token::{self, NtTT, Token, TokenKind::*};\n use syntax::tokenstream::{DelimSpan, TokenStream};\n "}, {"sha": "9ae8ead1a724d1bc8b63acb1d09e841e1325385b", "filename": "src/librustc_expand/mbe/quoted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,10 +1,10 @@\n use crate::mbe::macro_parser;\n use crate::mbe::{Delimited, KleeneOp, KleeneToken, SequenceRepetition, TokenTree};\n \n+use rustc_ast_pretty::pprust;\n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::kw;\n use syntax::ast;\n-use syntax::print::pprust;\n-use syntax::sess::ParseSess;\n use syntax::token::{self, Token};\n use syntax::tokenstream;\n "}, {"sha": "49b9a1b1025abdf88b6ed7e15d55f17943baec7f", "filename": "src/librustc_expand/mut_visit/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,8 +1,8 @@\n use crate::tests::{matches_codepattern, string_to_crate};\n \n+use rustc_ast_pretty::pprust;\n use syntax::ast::{self, Ident};\n use syntax::mut_visit::{self, MutVisitor};\n-use syntax::print::pprust;\n use syntax::with_default_globals;\n \n // This version doesn't care about getting comments or doc-strings in."}, {"sha": "c486839dad506864c48ffd1c16a465b08b863af8", "filename": "src/librustc_expand/parse/lexer/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,10 +1,10 @@\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{emitter::EmitterWriter, Handler};\n use rustc_parse::lexer::StringReader;\n+use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::symbol::Symbol;\n use rustc_span::{BytePos, Span};\n-use syntax::sess::ParseSess;\n use syntax::token::{self, Token, TokenKind};\n use syntax::util::comments::is_doc_comment;\n use syntax::with_default_globals;"}, {"sha": "3641f03cb30c5802c0d6c1719f25e062c1a0b9b8", "filename": "src/librustc_expand/parse/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Ftests.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,14 +1,14 @@\n use crate::tests::{matches_codepattern, string_to_stream, with_error_checking_parse};\n \n+use rustc_ast_pretty::pprust::item_to_string;\n use rustc_errors::PResult;\n use rustc_parse::new_parser_from_source_str;\n+use rustc_session::parse::ParseSess;\n use rustc_span::source_map::FilePathMapping;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{BytePos, FileName, Pos, Span};\n use syntax::ast::{self, Name, PatKind};\n-use syntax::print::pprust::item_to_string;\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n use syntax::token::{self, Token};\n use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use syntax::visit;"}, {"sha": "a7397e576b18cd02e190ab966dfaed0fa6c2f9fd", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,14 +1,14 @@\n use crate::base::ExtCtxt;\n \n+use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::Diagnostic;\n use rustc_parse::lexer::nfc_normalize;\n use rustc_parse::{nt_to_tokenstream, parse_stream_from_source_str};\n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n use syntax::ast;\n-use syntax::print::pprust;\n-use syntax::sess::ParseSess;\n use syntax::token;\n use syntax::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n use syntax::util::comments;"}, {"sha": "4ed60465f24f2832bd891212ff7979ddaf22517e", "filename": "src/librustc_expand/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_expand%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Ftests.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,8 +1,8 @@\n use rustc_parse::{new_parser_from_source_str, parser::Parser, source_file_to_stream};\n+use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::{BytePos, MultiSpan, Span};\n use syntax::ast;\n-use syntax::sess::ParseSess;\n use syntax::tokenstream::TokenStream;\n use syntax::with_default_globals;\n "}, {"sha": "3ae943a4ce08bf7cd3c176ea4baf67ab50068d31", "filename": "src/librustc_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -10,13 +10,13 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n+rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n-rustc_session = { path = \"../librustc_session\" }\n syntax = { path = \"../libsyntax\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "0db75454aee3864c094946a89e8caf2de1458d74", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -12,21 +12,22 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_errors::FatalError;\n use rustc_macros::HashStable_Generic;\n-use rustc_session::node_id::NodeMap;\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n-use smallvec::SmallVec;\n-use std::collections::{BTreeMap, BTreeSet};\n-use std::fmt;\n use syntax::ast::{self, AsmDialect, CrateSugar, Ident, Name, NodeId};\n use syntax::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n pub use syntax::ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use syntax::ast::{CaptureBy, Constness, Movability, Mutability, Unsafety};\n+use syntax::node_id::NodeMap;\n use syntax::tokenstream::TokenStream;\n use syntax::util::parser::ExprPrecedence;\n \n+use smallvec::SmallVec;\n+use std::collections::{BTreeMap, BTreeSet};\n+use std::fmt;\n+\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub struct Lifetime {\n     pub hir_id: HirId,"}, {"sha": "b0d2f96c71a03ac7b750466bd127265825fa5557", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,12 +1,11 @@\n+use rustc_ast_pretty::pp::Breaks::{Consistent, Inconsistent};\n+use rustc_ast_pretty::pp::{self, Breaks};\n+use rustc_ast_pretty::pprust::{self, Comments, PrintState};\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::kw;\n use rustc_span::{self, BytePos, FileName};\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n-use syntax::print::pp::Breaks::{Consistent, Inconsistent};\n-use syntax::print::pp::{self, Breaks};\n-use syntax::print::pprust::{self, Comments, PrintState};\n-use syntax::sess::ParseSess;\n use syntax::util::parser::{self, AssocOp, Fixity};\n \n use crate::hir;\n@@ -142,13 +141,12 @@ pub const INDENT_UNIT: usize = 4;\n /// it can scan the input text for comments to copy forward.\n pub fn print_crate<'a>(\n     cm: &'a SourceMap,\n-    sess: &ParseSess,\n     krate: &hir::Crate<'_>,\n     filename: FileName,\n     input: String,\n     ann: &'a dyn PpAnn,\n ) -> String {\n-    let mut s = State::new_from_input(cm, sess, filename, input, ann);\n+    let mut s = State::new_from_input(cm, filename, input, ann);\n \n     // When printing the AST, we sometimes need to inject `#[no_std]` here.\n     // Since you can't compile the HIR, it's not necessary.\n@@ -161,12 +159,11 @@ pub fn print_crate<'a>(\n impl<'a> State<'a> {\n     pub fn new_from_input(\n         cm: &'a SourceMap,\n-        sess: &ParseSess,\n         filename: FileName,\n         input: String,\n         ann: &'a dyn PpAnn,\n     ) -> State<'a> {\n-        State { s: pp::mk_printer(), comments: Some(Comments::new(cm, sess, filename, input)), ann }\n+        State { s: pp::mk_printer(), comments: Some(Comments::new(cm, filename, input)), ann }\n     }\n }\n "}, {"sha": "de7a9f4f5af1c754ed3d95e6676c0ccb2b6d39c9", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -14,6 +14,7 @@ log = \"0.4\"\n rayon = { version = \"0.3.0\", package = \"rustc-rayon\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_builtin_macros = { path = \"../librustc_builtin_macros\" }\n rustc_expand = { path = \"../librustc_expand\" }\n rustc_parse = { path = \"../librustc_parse\" }"}, {"sha": "2a667541ad3e7f2cc1350b77e5a928e19aceae4b", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -14,13 +14,13 @@ use rustc_data_structures::OnDrop;\n use rustc_errors::registry::Registry;\n use rustc_lint::LintStore;\n use rustc_parse::new_parser_from_source_str;\n+use rustc_session::parse::{CrateConfig, ParseSess};\n use rustc_span::edition;\n use rustc_span::source_map::{FileLoader, FileName, SourceMap};\n use std::path::PathBuf;\n use std::result;\n use std::sync::{Arc, Mutex};\n-use syntax::ast::{self, MetaItemKind};\n-use syntax::sess::ParseSess;\n+use syntax::ast::MetaItemKind;\n use syntax::token;\n \n pub type Result<T> = result::Result<T, ErrorReported>;\n@@ -106,7 +106,7 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n \n                 error!(r#\"expected `key` or `key=\"value\"`\"#);\n             })\n-            .collect::<ast::CrateConfig>();\n+            .collect::<CrateConfig>();\n         cfg.into_iter().map(|(a, b)| (a.to_string(), b.map(|b| b.to_string()))).collect()\n     })\n }"}, {"sha": "c22c00e9154e716a922ed03d4188a8fdb673b213", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -40,7 +40,6 @@ use rustc_span::FileName;\n use rustc_traits;\n use rustc_typeck as typeck;\n use syntax::mut_visit::MutVisitor;\n-use syntax::util::node_count::NodeCounter;\n use syntax::{self, ast, visit};\n \n use rustc_serialize::json;\n@@ -83,7 +82,7 @@ pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n }\n \n fn count_nodes(krate: &ast::Crate) -> usize {\n-    let mut counter = NodeCounter::new();\n+    let mut counter = rustc_ast_passes::node_count::NodeCounter::new();\n     visit::walk_crate(&mut counter, krate);\n     counter.count\n }"}, {"sha": "3052c9fc26f081a8e06f0fa5648cca46527eaa7f", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -14,6 +14,7 @@ use rustc_resolve::{self, Resolver};\n use rustc_session as session;\n use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n+use rustc_session::parse::CrateConfig;\n use rustc_session::CrateDisambiguator;\n use rustc_session::{config, early_error, filesearch, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n@@ -32,15 +33,15 @@ use syntax::ast::{AttrVec, BlockCheckMode};\n use syntax::mut_visit::{visit_clobber, MutVisitor, *};\n use syntax::ptr::P;\n use syntax::util::lev_distance::find_best_match_for_name;\n-use syntax::{self, ast, attr};\n+use syntax::{self, ast};\n \n /// Adds `target_feature = \"...\"` cfgs for a variety of platform\n /// specific features (SSE, NEON etc.).\n ///\n /// This is performed by checking whether a whitelisted set of\n /// features is available on the target machine, by querying LLVM.\n pub fn add_configuration(\n-    cfg: &mut ast::CrateConfig,\n+    cfg: &mut CrateConfig,\n     sess: &Session,\n     codegen_backend: &dyn CodegenBackend,\n ) {\n@@ -547,7 +548,7 @@ pub fn build_output_filenames(\n                 .opts\n                 .crate_name\n                 .clone()\n-                .or_else(|| attr::find_crate_name(attrs).map(|n| n.to_string()))\n+                .or_else(|| rustc_attr::find_crate_name(attrs).map(|n| n.to_string()))\n                 .unwrap_or_else(|| input.filestem().to_owned());\n \n             OutputFilenames::new("}, {"sha": "27df0f904e48aaf93d8c192b30247817b142b181", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -12,6 +12,8 @@ path = \"lib.rs\"\n log = \"0.4\"\n unicode-security = \"0.0.2\"\n rustc = { path = \"../librustc\" }\n+rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "345665de63c3cd67fd300706462ee121a29ac5f8", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -25,6 +25,7 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc::hir::map::Map;\n use rustc::traits::misc::can_type_implement_copy;\n use rustc::ty::{self, layout::VariantIdx, Ty, TyCtxt};\n+use rustc_ast_pretty::pprust::{self, expr_to_string};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_feature::Stability;\n@@ -41,7 +42,6 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{BytePos, Span};\n use syntax::ast::{self, Expr};\n use syntax::attr::{self, HasAttrs};\n-use syntax::print::pprust::{self, expr_to_string};\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::visit::FnKind;\n "}, {"sha": "4f30d2b2226843180500a1be812c0e84e8b5b40a", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,23 +1,22 @@\n use crate::context::{CheckLintNameResult, LintStore};\n use crate::late::unerased_lint_store;\n use rustc::hir::map::Map;\n-use rustc::lint::struct_lint_level;\n-use rustc::lint::{LintLevelMap, LintLevelSets, LintSet, LintSource};\n+use rustc::lint::{struct_lint_level, LintLevelMap, LintLevelSets, LintSet, LintSource};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n-use rustc_hir::hir_id::HirId;\n-use rustc_hir::intravisit;\n+use rustc_hir::{intravisit, HirId};\n use rustc_session::lint::{builtin, Level, Lint};\n+use rustc_session::parse::feature_err;\n use rustc_session::Session;\n-use rustc_span::{sym, MultiSpan, Symbol};\n+use rustc_span::source_map::MultiSpan;\n+use rustc_span::symbol::{sym, Symbol};\n use syntax::ast;\n use syntax::attr;\n-use syntax::print::pprust;\n-use syntax::sess::feature_err;\n use syntax::unwrap_or;\n \n use std::cmp;"}, {"sha": "6fdbfea7f03b3d8322faef6107253ffc797e0ea2", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,5 +1,6 @@\n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc::ty;\n+use rustc_attr as attr;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -9,7 +10,6 @@ use rustc_span::symbol::sym;\n use rustc_span::{symbol::Ident, BytePos, Span};\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n-use syntax::attr;\n \n #[derive(PartialEq)]\n pub enum MethodLateContext {"}, {"sha": "6bc6f58f3e7fd2a6bb58c49a249853b78fc856fb", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -5,6 +5,7 @@ use rustc::mir::interpret::{sign_extend, truncate};\n use rustc::ty::layout::{self, IntegerExt, LayoutOf, SizeSkeleton, VariantIdx};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n+use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -15,7 +16,7 @@ use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n-use syntax::{ast, attr};\n+use syntax::ast;\n \n use log::debug;\n use std::cmp;"}, {"sha": "272c4f29203d8d635919db879d4e03a759a65831", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,6 +1,7 @@\n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc::ty::adjustment;\n use rustc::ty::{self, Ty};\n+use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, Applicability};\n use rustc_feature::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n@@ -13,7 +14,6 @@ use rustc_span::symbol::{kw, sym};\n use rustc_span::{BytePos, Span};\n use syntax::ast;\n use syntax::attr;\n-use syntax::print::pprust;\n use syntax::util::parser;\n \n use log::debug;"}, {"sha": "a4fdcee5e12975a8e888beeeb016d45251cdb5cf", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -15,6 +15,8 @@ log = \"0.4\"\n memmap = \"0.7\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc = { path = \"../librustc\" }\n+rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }"}, {"sha": "2fa9cb099dd515e679f1bd2aa7f1f43feb1d35e5", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -2,14 +2,14 @@ use rustc::middle::cstore::{self, NativeLibrary};\n use rustc::session::parse::feature_err;\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n+use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::spec::abi::Abi;\n-use syntax::attr;\n \n crate fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLibrary> {\n     let mut collector = Collector { tcx, libs: Vec::new() };"}, {"sha": "58cf142ab3a364c1432fa8a8ebe37ee37acc08e0", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -34,14 +34,14 @@ use std::u32;\n \n use log::debug;\n use proc_macro::bridge::client::ProcMacro;\n+use rustc_attr as attr;\n use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::proc_macro::{AttrProcMacro, BangProcMacro, ProcMacroDerive};\n use rustc_serialize::{opaque, Decodable, Decoder, SpecializedDecoder};\n use rustc_span::source_map::{self, respan, Spanned};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{self, hygiene::MacroKind, BytePos, Pos, Span, DUMMY_SP};\n use syntax::ast::{self, Ident};\n-use syntax::attr;\n \n pub use cstore_impl::{provide, provide_extern};\n "}, {"sha": "54fbdb14010c94d246df13d71b9cc8e55162ecf6", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1236,7 +1236,7 @@ impl EncodeContext<'tcx> {\n \n     /// Serialize the text of exported macros\n     fn encode_info_for_macro_def(&mut self, macro_def: &hir::MacroDef<'_>) {\n-        use syntax::print::pprust;\n+        use rustc_ast_pretty::pprust;\n         let def_id = self.tcx.hir().local_def_id(macro_def.hir_id);\n         record!(self.per_def.kind[def_id] <- EntryKind::MacroDef(self.lazy(MacroDef {\n             body: pprust::tts_to_string(macro_def.body.clone()),"}, {"sha": "77ec3eb4555e3e1e8ec3dd3f02ecc4aba0d69646", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -10,6 +10,7 @@ use rustc::mir;\n use rustc::session::config::SymbolManglingVersion;\n use rustc::session::CrateDisambiguator;\n use rustc::ty::{self, ReprOptions, Ty};\n+use rustc_attr as attr;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_hir as hir;\n@@ -21,7 +22,7 @@ use rustc_span::edition::Edition;\n use rustc_span::symbol::Symbol;\n use rustc_span::{self, Span};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n-use syntax::{ast, attr};\n+use syntax::ast;\n \n use std::marker::PhantomData;\n use std::num::NonZeroUsize;"}, {"sha": "6b2e2bb919c1302825f494e79aa27a62e400f1a0", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -17,6 +17,8 @@ log = \"0.4\"\n log_settings = \"0.1.1\"\n polonius-engine = \"0.11.0\"\n rustc = { path = \"../librustc\" }\n+rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }"}, {"sha": "4144bbc41d217cbc5147f1f6c7277a18c6d032a5", "filename": "src/librustc_mir/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,11 +1,11 @@\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_attr as attr;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::abi::Abi;\n-use syntax::attr;\n \n /// Whether the `def_id` counts as const fn in your current crate, considering all active\n /// feature gates"}, {"sha": "7cd7fc309b6b91ce18965e2fa9f813a0ba410255", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,6 +1,6 @@\n+use rustc_ast_pretty::pprust;\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast::{self, MetaItem};\n-use syntax::print::pprust;\n \n use rustc_data_structures::work_queue::WorkQueue;\n use rustc_index::bit_set::{BitSet, HybridBitSet};"}, {"sha": "a3cafcb576323178710f69e28ff2ff2bf3328a9a", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -16,8 +16,8 @@ use crate::transform::{MirPass, MirSource};\n use std::collections::VecDeque;\n use std::iter;\n \n+use rustc_attr as attr;\n use rustc_target::spec::abi::Abi;\n-use syntax::attr;\n \n const DEFAULT_THRESHOLD: usize = 50;\n const HINT_THRESHOLD: usize = 100;"}, {"sha": "6a68ccdddffdcf15da00335513bef38be21c0829", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,11 +1,12 @@\n use rustc::mir::*;\n use rustc::ty::{self, adjustment::PointerCast, Predicate, Ty, TyCtxt};\n+use rustc_attr as attr;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use std::borrow::Cow;\n-use syntax::{ast, attr};\n+use syntax::ast;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n "}, {"sha": "9ff3ed1a935881c3165fc83a29c411aaeefab971", "filename": "src/librustc_mir_build/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir_build%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir_build%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -15,6 +15,7 @@ itertools = \"0.8\"\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "77bbce2d37aa9f03d2884fb229d4b80e77eddf8a", "filename": "src/librustc_mir_build/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -18,8 +18,8 @@ use crate::hair::{self, *};\n use rustc::mir::interpret::truncate;\n use rustc::ty;\n use rustc::ty::layout::{Integer, IntegerExt, Size};\n+use rustc_attr::{SignedInt, UnsignedInt};\n use rustc_hir::RangeEnd;\n-use syntax::attr::{SignedInt, UnsignedInt};\n \n use std::mem;\n "}, {"sha": "1f536b63a394ab9c023dea23c3121a8389071e23", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -7,6 +7,7 @@ use rustc::middle::region;\n use rustc::mir::*;\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_attr::{self as attr, UnwindAttr};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{GeneratorKind, HirIdMap, Node};\n@@ -16,7 +17,6 @@ use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n use rustc_target::spec::PanicStrategy;\n use std::u32;\n-use syntax::attr::{self, UnwindAttr};\n \n use super::lints;\n "}, {"sha": "4f0e5bb45822bb2bf2aa3e379728a7379588ce20", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -245,8 +245,8 @@ use rustc::mir::interpret::{truncate, AllocId, ConstValue, Pointer, Scalar};\n use rustc::mir::Field;\n use rustc::util::common::ErrorReported;\n \n+use rustc_attr::{SignedInt, UnsignedInt};\n use rustc_span::{Span, DUMMY_SP};\n-use syntax::attr::{SignedInt, UnsignedInt};\n \n use arena::TypedArena;\n "}, {"sha": "bd8a9877719e46a7c77b1405c7d1530444dda83c", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1036,7 +1036,7 @@ crate fn compare_const_vals<'tcx>(\n             }\n             ty::Int(ity) => {\n                 use rustc::ty::layout::{Integer, IntegerExt};\n-                use syntax::attr::SignedInt;\n+                use rustc_attr::SignedInt;\n                 let size = Integer::from_attr(&tcx, SignedInt(ity)).size();\n                 let a = sign_extend(a, size);\n                 let b = sign_extend(b, size);"}, {"sha": "176bb58ad27e6d34471c06bb130b0f29351130c2", "filename": "src/librustc_parse/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -12,6 +12,8 @@ doctest = false\n [dependencies]\n bitflags = \"1.0\"\n log = \"0.4\"\n+rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_lexer = { path = \"../librustc_lexer\" }"}, {"sha": "0edd56680f9336a4a48c1a13eec6652f981ace6f", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -9,21 +9,21 @@\n //! [#64197]: https://github.com/rust-lang/rust/issues/64197\n \n use crate::{parse_in, validate_attr};\n+use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{error_code, struct_span_err, Applicability, Handler};\n use rustc_feature::{Feature, Features, State as FeatureState};\n use rustc_feature::{\n     ACCEPTED_FEATURES, ACTIVE_FEATURES, REMOVED_FEATURES, STABLE_REMOVED_FEATURES,\n };\n+use rustc_session::parse::{feature_err, ParseSess};\n use rustc_span::edition::{Edition, ALL_EDITIONS};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, AttrItem, Attribute, MetaItem};\n-use syntax::attr;\n use syntax::attr::HasAttrs;\n use syntax::mut_visit::*;\n use syntax::ptr::P;\n-use syntax::sess::{feature_err, ParseSess};\n use syntax::util::map_in_place::MapInPlace;\n \n use smallvec::SmallVec;"}, {"sha": "af56e9d344d2e81733dcaf18cda59520c38ff2fc", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -2,9 +2,9 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::{DiagnosticBuilder, FatalError};\n use rustc_lexer::unescape;\n use rustc_lexer::Base;\n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{BytePos, Pos, Span};\n-use syntax::sess::ParseSess;\n use syntax::token::{self, Token, TokenKind};\n use syntax::util::comments;\n "}, {"sha": "c28b59a7908015572cce6e33c3d1858a8536cf88", "filename": "src/librustc_parse/lexer/tokentrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,9 +1,9 @@\n use super::{StringReader, UnmatchedBrace};\n \n+use rustc_ast_pretty::pprust::token_to_string;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::PResult;\n use rustc_span::Span;\n-use syntax::print::pprust::token_to_string;\n use syntax::token::{self, Token};\n use syntax::tokenstream::{\n     DelimSpan,"}, {"sha": "bf0f8ff0064d556d2a554a5e5cfdd00fa76358f6", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -4,15 +4,14 @@\n #![feature(crate_visibility_modifier)]\n #![cfg_attr(bootstrap, feature(slice_patterns))]\n \n-use syntax::ast;\n-use syntax::print::pprust;\n-use syntax::sess::ParseSess;\n-use syntax::token::{self, Nonterminal};\n-use syntax::tokenstream::{self, TokenStream, TokenTree};\n-\n+use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Diagnostic, FatalError, Level, PResult};\n+use rustc_session::parse::ParseSess;\n use rustc_span::{FileName, SourceFile, Span};\n+use syntax::ast;\n+use syntax::token::{self, Nonterminal};\n+use syntax::tokenstream::{self, TokenStream, TokenTree};\n \n use std::borrow::Cow;\n use std::path::Path;"}, {"sha": "e58eb9ffc51e74f254bf3db277f2c0be78933c3b", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,9 +1,9 @@\n use super::{Parser, PathStyle, TokenType};\n+use rustc_ast_pretty::pprust;\n use rustc_errors::PResult;\n use rustc_span::{Span, Symbol};\n use syntax::ast;\n use syntax::attr;\n-use syntax::print::pprust;\n use syntax::token::{self, Nonterminal};\n use syntax::util::comments;\n "}, {"sha": "e2227f669738cb2da5128510f9599eff8e8a95f3", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,5 +1,6 @@\n use super::{BlockMode, Parser, PathStyle, SemiColonMode, SeqSep, TokenExpectType, TokenType};\n \n+use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err};\n use rustc_errors::{Applicability, DiagnosticBuilder, Handler, PResult};\n@@ -10,7 +11,6 @@ use syntax::ast::{\n     self, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, Param,\n };\n use syntax::ast::{AttrVec, ItemKind, Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind};\n-use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::token::{self, token_can_begin_expr, TokenKind};\n use syntax::util::parser::AssocOp;"}, {"sha": "0d12f8cf6c03959be57cba54fbc3409a2fa2c5b8", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -3,6 +3,7 @@ use super::{BlockMode, Parser, PathStyle, PrevTokenKind, Restrictions, TokenType\n use super::{SemiColonMode, SeqSep, TokenExpectType};\n use crate::maybe_recover_from_interpolated_ty_qpath;\n \n+use rustc_ast_pretty::pprust;\n use rustc_errors::{Applicability, PResult};\n use rustc_span::source_map::{self, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -12,7 +13,6 @@ use syntax::ast::{\n     AnonConst, BinOp, BinOpKind, FnDecl, FunctionRetTy, Mac, Param, Ty, TyKind, UnOp,\n };\n use syntax::ast::{Arm, BlockCheckMode, Expr, ExprKind, IsAsync, Label, Movability, RangeLimits};\n-use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::token::{self, Token, TokenKind};\n use syntax::util::classify;"}, {"sha": "7f15c403e9af9718f614eb9ee21d88633b0a7b21", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -3,6 +3,7 @@ use super::{FollowedByType, Parser, PathStyle};\n \n use crate::maybe_whole;\n \n+use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, PResult, StashKey};\n use rustc_span::source_map::{self, respan, Span};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -13,7 +14,6 @@ use syntax::ast::{BindingMode, Block, FnDecl, FnSig, Mac, MacArgs, MacDelimiter,\n use syntax::ast::{Constness, Defaultness, Extern, IsAsync, IsAuto, PathSegment, StrLit, Unsafety};\n use syntax::ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n use syntax::ast::{FnHeader, ForeignItem, ForeignItemKind, Mutability, Visibility, VisibilityKind};\n-use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::token;\n use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree};"}, {"sha": "1e28372c384f5d6bb2831dbcdc1d7f53b4617ad6", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -16,15 +16,15 @@ use crate::lexer::UnmatchedBrace;\n use crate::{Directory, DirectoryOwnership};\n \n use log::debug;\n+use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError, PResult};\n+use rustc_session::parse::ParseSess;\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{BytePos, FileName, Span, DUMMY_SP};\n use syntax::ast::{self, AttrStyle, AttrVec, CrateSugar, Extern, Ident, Unsafety, DUMMY_NODE_ID};\n use syntax::ast::{IsAsync, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, VisibilityKind};\n-use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n use syntax::token::{self, DelimToken, Token, TokenKind};\n use syntax::tokenstream::{self, DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n use syntax::util::comments::{doc_comment_style, strip_doc_comment_decoration};"}, {"sha": "e07b0733739d16da678661da044f8e35dd638f75", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,12 +1,12 @@\n use super::{Parser, PathStyle};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n+use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, PResult};\n use rustc_span::source_map::{respan, Span, Spanned};\n use rustc_span::symbol::{kw, sym};\n use syntax::ast::{self, AttrVec, Attribute, FieldPat, Mac, Pat, PatKind, RangeEnd, RangeSyntax};\n use syntax::ast::{BindingMode, Expr, ExprKind, Ident, Mutability, Path, QSelf};\n use syntax::mut_visit::{noop_visit_mac, noop_visit_pat, MutVisitor};\n-use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::token;\n "}, {"sha": "981ef7f8796d3d58e55870c1f1a502b94d2bbbd7", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -11,6 +11,7 @@ path = \"lib.rs\"\n [dependencies]\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }"}, {"sha": "4009cc6d725ab3414dc2573e726d35f48c8c3b5d", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -10,6 +10,7 @@ use rustc::session::Session;\n use rustc::traits::misc::can_type_implement_copy;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_attr::{self as attr, Stability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n@@ -20,7 +21,6 @@ use rustc_hir::{Generics, HirId, Item, StructField, Variant};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use syntax::ast::Attribute;\n-use syntax::attr::{self, Stability};\n \n use std::cmp::Ordering;\n use std::mem::replace;"}, {"sha": "2f7aaf9e5cfe153aac8f4c5848723ab00fafb6db", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -10,6 +10,7 @@ path = \"lib.rs\"\n \n [dependencies]\n rustc = { path = \"../librustc\" }\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_typeck = { path = \"../librustc_typeck\" }"}, {"sha": "74bb72d6fad7f8fc7254318586c4f2bdab2c95ca", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -11,6 +11,7 @@ use rustc::ty::fold::TypeVisitor;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, GenericParamDefKind, TraitRef, Ty, TyCtxt, TypeFoldable};\n+use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n@@ -22,7 +23,6 @@ use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use syntax::ast::Ident;\n-use syntax::attr;\n \n use std::marker::PhantomData;\n use std::{cmp, fmt, mem};"}, {"sha": "f8c96ecaf9373f176b3dad5072bf016d3c9d4399", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -17,6 +17,8 @@ syntax = { path = \"../libsyntax\" }\n arena = { path = \"../libarena\" }\n rustc = { path = \"../librustc\" }\n rustc_ast_lowering = { path = \"../librustc_ast_lowering\" }\n+rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_expand = { path = \"../librustc_expand\" }"}, {"sha": "c77b588d7fbc3ab0af2c74f7ec4068c69f556293", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -20,6 +20,7 @@ use rustc::bug;\n use rustc::hir::exports::Export;\n use rustc::middle::cstore::CrateStore;\n use rustc::ty;\n+use rustc_attr as attr;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_expand::base::SyntaxExtension;\n@@ -34,7 +35,6 @@ use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n use syntax::ast::{AssocItem, AssocItemKind, MetaItemKind, StmtKind};\n use syntax::ast::{Ident, Name};\n-use syntax::attr;\n use syntax::token::{self, Token};\n use syntax::visit::{self, Visitor};\n "}, {"sha": "e8e3b685794882e6ea73440c3e9b4e445f8e7575", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -30,9 +30,9 @@ use rustc::{lint, ty};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::pluralize;\n use rustc_session::lint::BuiltinLintDiagnostics;\n-use rustc_session::node_id::NodeMap;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use syntax::ast;\n+use syntax::node_id::NodeMap;\n use syntax::visit::{self, Visitor};\n \n struct UnusedImport<'a> {"}, {"sha": "f8e963192c99f9a6d0f336b25ac8c2ac93dba8bb", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -4,6 +4,7 @@ use log::debug;\n use rustc::bug;\n use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n+use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n@@ -16,7 +17,6 @@ use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, MultiSpan, Span};\n use syntax::ast::{self, Ident, Path};\n-use syntax::print::pprust;\n use syntax::util::lev_distance::find_best_match_for_name;\n \n use crate::imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};"}, {"sha": "402e25fcf482b2af0121feb4577c894069e98a92", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -25,6 +25,7 @@ use rustc::middle::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc::span_bug;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, DefIdTree, ResolverOutputs};\n+use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_data_structures::sync::Lrc;\n@@ -37,7 +38,6 @@ use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n use rustc_hir::{GlobMap, TraitMap};\n use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n-use rustc_session::node_id::{NodeMap, NodeSet};\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnId, ExpnKind, MacroKind, SyntaxContext, Transparency};\n use rustc_span::source_map::Spanned;\n@@ -47,7 +47,7 @@ use syntax::ast::{self, FloatTy, Ident, IntTy, Name, NodeId, UintTy};\n use syntax::ast::{Crate, CRATE_NODE_ID};\n use syntax::ast::{ItemKind, Path};\n use syntax::attr;\n-use syntax::print::pprust;\n+use syntax::node_id::{NodeMap, NodeSet};\n use syntax::unwrap_or;\n use syntax::visit::{self, Visitor};\n "}, {"sha": "11139a3dc94fcea89a44e282b7de37526284585e", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -10,6 +10,8 @@ use rustc::middle::stability;\n use rustc::session::parse::feature_err;\n use rustc::session::Session;\n use rustc::{lint, span_bug, ty};\n+use rustc_ast_pretty::pprust;\n+use rustc_attr::{self as attr, StabilityLevel};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_expand::base::SyntaxExtension;\n use rustc_expand::base::{self, Indeterminate, InvocationRes};\n@@ -23,8 +25,6 @@ use rustc_span::hygiene::{self, ExpnData, ExpnId, ExpnKind};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, Ident, NodeId};\n-use syntax::attr::{self, StabilityLevel};\n-use syntax::print::pprust;\n \n use rustc_data_structures::sync::Lrc;\n use rustc_span::hygiene::{AstPass, MacroKind};"}, {"sha": "2cbed75eaf597292bb498eb6ef43a9b584955075", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -11,6 +11,7 @@ path = \"lib.rs\"\n [dependencies]\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n+rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_hir = { path = \"../librustc_hir\" }"}, {"sha": "09c261cdc2388abf11162bce28712e7786799e59", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -16,22 +16,21 @@\n use rustc::session::config::Input;\n use rustc::span_bug;\n use rustc::ty::{self, DefIdTree, TyCtxt};\n+use rustc_ast_pretty::pprust::{bounds_to_string, generic_params_to_string, ty_to_string};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::{DefKind as HirDefKind, Res};\n use rustc_hir::def_id::DefId;\n-\n-use std::env;\n-use std::path::Path;\n-\n use rustc_span::source_map::{respan, DUMMY_SP};\n use rustc_span::*;\n use syntax::ast::{self, Attribute, NodeId, PatKind};\n-use syntax::print::pprust::{bounds_to_string, generic_params_to_string, ty_to_string};\n use syntax::ptr::P;\n use syntax::token;\n use syntax::visit::{self, Visitor};\n use syntax::walk_list;\n \n+use std::env;\n+use std::path::Path;\n+\n use crate::dumper::{Access, Dumper};\n use crate::sig;\n use crate::span_utils::SpanUtils;"}, {"sha": "89054441fa3bfed728822f887d4424295358e818", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -13,11 +13,17 @@ use rustc::middle::privacy::AccessLevels;\n use rustc::session::config::{CrateType, Input, OutputType};\n use rustc::ty::{self, DefIdTree, TyCtxt};\n use rustc::{bug, span_bug};\n+use rustc_ast_pretty::pprust::{self, param_to_string, ty_to_string};\n use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind as HirDefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Node;\n+use rustc_span::source_map::Spanned;\n+use rustc_span::*;\n+use syntax::ast::{self, Attribute, NodeId, PatKind, DUMMY_NODE_ID};\n+use syntax::util::comments::strip_doc_comment_decoration;\n+use syntax::visit::{self, Visitor};\n \n use std::cell::Cell;\n use std::default::Default;\n@@ -26,14 +32,6 @@ use std::fs::File;\n use std::io::BufWriter;\n use std::path::{Path, PathBuf};\n \n-use rustc_span::source_map::Spanned;\n-use rustc_span::*;\n-use syntax::ast::{self, Attribute, NodeId, PatKind, DUMMY_NODE_ID};\n-use syntax::print::pprust;\n-use syntax::print::pprust::{param_to_string, ty_to_string};\n-use syntax::util::comments::strip_doc_comment_decoration;\n-use syntax::visit::{self, Visitor};\n-\n use dump_visitor::DumpVisitor;\n use span_utils::SpanUtils;\n "}, {"sha": "dbf29b6531d2abd87da36e9e9f4e56b21867711c", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -29,9 +29,9 @@ use crate::{id_from_def_id, id_from_node_id, SaveContext};\n \n use rls_data::{SigElement, Signature};\n \n+use rustc_ast_pretty::pprust;\n use rustc_hir::def::{DefKind, Res};\n use syntax::ast::{self, Extern, NodeId};\n-use syntax::print::pprust;\n \n pub fn item_signature(item: &ast::Item, scx: &SaveContext<'_, '_>) -> Option<Signature> {\n     if !scx.config.signatures {"}, {"sha": "c74011e26aae8efa1875493264dd7e643bff206a", "filename": "src/librustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -19,3 +19,4 @@ rustc_span = { path = \"../librustc_span\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n num_cpus = \"1.0\"\n+syntax = { path = \"../libsyntax\" }"}, {"sha": "4101c32d547aad70bdae8246ab2394d89b0bc88b", "filename": "src/librustc_session/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_session%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_session%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flib.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -10,7 +10,6 @@ pub mod cgu_reuse_tracker;\n pub mod utils;\n #[macro_use]\n pub mod lint;\n-pub mod node_id;\n pub mod parse;\n \n mod code_stats;"}, {"sha": "983dfb19919dd1c4f26a1a25f0ac8902329c922e", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,8 +1,8 @@\n pub use self::Level::*;\n-use crate::node_id::{NodeId, NodeMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_span::edition::Edition;\n use rustc_span::{sym, symbol::Ident, MultiSpan, Span, Symbol};\n+use syntax::node_id::{NodeId, NodeMap};\n \n pub mod builtin;\n "}, {"sha": "32642300262952bc3ebaaddb9e5ecbce1b3a82ed", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -2,8 +2,6 @@\n //! It also serves as an input to the parser itself.\n \n use crate::lint::{BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId};\n-use crate::node_id::NodeId;\n-\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc, Once};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n@@ -13,6 +11,7 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::{MultiSpan, Span, Symbol};\n+use syntax::node_id::NodeId;\n \n use std::path::PathBuf;\n use std::str;"}, {"sha": "748bfcc79460a12442bf19ec890d6cead07257f9", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -14,6 +14,7 @@ doctest = false\n arena = { path = \"../libarena\" }\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n+rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }"}, {"sha": "0a917a1853eb5ebe30db967440be818b60ed92a5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -115,6 +115,7 @@ use rustc::ty::{\n     self, AdtKind, CanonicalUserType, Const, GenericParamDefKind, RegionKind, ToPolyTraitRef,\n     ToPredicate, Ty, TyCtxt, UserType, WithConstness,\n };\n+use rustc_attr as attr;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n@@ -131,7 +132,6 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{self, BytePos, MultiSpan, Span};\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n-use syntax::attr;\n use syntax::util::parser::ExprPrecedence;\n \n use std::cell::{Cell, Ref, RefCell, RefMut};"}, {"sha": "4d812d2621c612524caf950f3d3f9f8d39d4fac3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -33,6 +33,7 @@ use rustc::ty::util::Discr;\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::{self, AdtKind, Const, DefIdTree, ToPolyTraitRef, Ty, TyCtxt, WithConstness};\n use rustc::ty::{ReprOptions, ToPredicate};\n+use rustc_attr::{list_contains_name, mark_used, InlineAttr, OptimizeAttr};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Applicability, StashKey};\n@@ -46,7 +47,6 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use syntax::ast;\n use syntax::ast::{Ident, MetaItemKind};\n-use syntax::attr::{list_contains_name, mark_used, InlineAttr, OptimizeAttr};\n \n struct OnlySelfBounds(bool);\n "}, {"sha": "da3a277dc2ac6d9412a210adeab2a22e0c17bcd9", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -8,9 +8,9 @@ use std::mem;\n use std::ops;\n \n use rustc_feature::Features;\n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast::{LitKind, MetaItem, MetaItemKind, NestedMetaItem};\n-use syntax::sess::ParseSess;\n \n use rustc_span::Span;\n "}, {"sha": "2a35ab812a5f2f0983dd853296ce67d1802ce1e3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -16,6 +16,7 @@ use rustc::middle::stability;\n use rustc::ty::fold::TypeFolder;\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n+use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n@@ -27,7 +28,6 @@ use rustc_span::symbol::{kw, sym};\n use rustc_span::{self, Pos};\n use rustc_typeck::hir_ty_to_ty;\n use syntax::ast::{self, Ident};\n-use syntax::attr;\n \n use std::collections::hash_map::Entry;\n use std::default::Default;"}, {"sha": "a8baa89c6f18131a1cdfccbf8370bc8d04b53c96", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -15,13 +15,13 @@ use rustc_lint;\n use rustc_resolve as resolve;\n use rustc_session::lint;\n \n+use rustc_attr as attr;\n use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::json::JsonEmitter;\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n use syntax::ast::CRATE_NODE_ID;\n-use syntax::attr;\n \n use rustc_data_structures::sync::{self, Lrc};\n use std::cell::RefCell;"}, {"sha": "1ea053605ec1e485be951b6555e89a6ccaf34aec", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -12,10 +12,10 @@ use std::io;\n use std::io::prelude::*;\n \n use rustc_parse::lexer;\n+use rustc_session::parse::ParseSess;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{FileName, Span};\n-use syntax::sess::ParseSess;\n use syntax::token::{self, Token};\n \n /// Highlights `src`, returning the HTML output."}, {"sha": "c67064139426706b733ce69ccfb6b4615d086433", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -44,6 +44,7 @@ use std::sync::Arc;\n \n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n+use rustc_ast_pretty::pprust;\n use rustc_data_structures::flock;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_feature::UnstableFeatures;\n@@ -57,7 +58,6 @@ use rustc_span::symbol::{sym, Symbol};\n use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n use syntax::ast;\n-use syntax::print::pprust;\n \n use crate::clean::{self, AttributesExt, Deprecation, GetDefId, SelfTy};\n use crate::config::RenderOptions;"}, {"sha": "ed3f0f94e0ed8903b3f2688cbde8f9382843547e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -21,6 +21,8 @@\n extern crate env_logger;\n extern crate getopts;\n extern crate rustc;\n+extern crate rustc_ast_pretty;\n+extern crate rustc_attr;\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_errors;"}, {"sha": "3b7c0db05a5e24e6310517956bd58de93ed782ee", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,9 +1,9 @@\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::Emitter, Applicability, Diagnostic, Handler};\n use rustc_parse::lexer::StringReader as Lexer;\n+use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::{FileName, InnerSpan};\n-use syntax::sess::ParseSess;\n use syntax::token;\n \n use crate::clean;"}, {"sha": "936f63975a58e5307deb4ce9ff421a0cdad29065", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -141,7 +141,7 @@ pub fn run(options: Options) -> i32 {\n \n // Look for `#![doc(test(no_crate_inject))]`, used by crates in the std facade.\n fn scrape_test_config(krate: &::rustc_hir::Crate) -> TestOptions {\n-    use syntax::print::pprust;\n+    use rustc_ast_pretty::pprust;\n \n     let mut opts =\n         TestOptions { no_crate_inject: false, display_warnings: false, attrs: Vec::new() };\n@@ -395,8 +395,8 @@ pub fn make_test(\n             use rustc_errors::emitter::EmitterWriter;\n             use rustc_errors::Handler;\n             use rustc_parse::maybe_new_parser_from_source_str;\n+            use rustc_session::parse::ParseSess;\n             use rustc_span::source_map::FilePathMapping;\n-            use syntax::sess::ParseSess;\n \n             let filename = FileName::anon_source_code(s);\n             let source = crates + &everything_else;"}, {"sha": "ff03ae3f425c425773d908b9152ebecae077a54b", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -13,12 +13,9 @@ doctest = false\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n log = \"0.4\"\n scoped-tls = \"1.0\"\n-rustc_errors = { path = \"../librustc_errors\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n-rustc_session = { path = \"../librustc_session\" }"}, {"sha": "5a8c9f76ea9435c50253c6ede80ccacddc683b32", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -256,15 +256,7 @@ impl ParenthesizedArgs {\n     }\n }\n \n-pub use rustc_session::node_id::NodeId;\n-\n-/// `NodeId` used to represent the root of the crate.\n-pub const CRATE_NODE_ID: NodeId = NodeId::from_u32_const(0);\n-\n-/// When parsing and doing expansions, we initially give all AST nodes this AST\n-/// node value. Then later, in the renumber pass, we renumber them to have\n-/// small, positive ids.\n-pub const DUMMY_NODE_ID: NodeId = NodeId::MAX;\n+pub use crate::node_id::{NodeId, CRATE_NODE_ID, DUMMY_NODE_ID};\n \n /// A modifier on a bound, e.g., `?Sized` or `?const Trait`.\n ///\n@@ -432,8 +424,6 @@ pub struct WhereEqPredicate {\n     pub rhs_ty: P<Ty>,\n }\n \n-pub use rustc_session::parse::CrateConfig;\n-\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Crate {\n     pub module: Mod,\n@@ -1427,7 +1417,7 @@ pub enum MacDelimiter {\n }\n \n impl MacDelimiter {\n-    crate fn to_token(self) -> DelimToken {\n+    pub fn to_token(self) -> DelimToken {\n         match self {\n             MacDelimiter::Parenthesis => DelimToken::Paren,\n             MacDelimiter::Bracket => DelimToken::Bracket,\n@@ -1490,7 +1480,7 @@ pub struct StrLit {\n }\n \n impl StrLit {\n-    crate fn as_lit(&self) -> Lit {\n+    pub fn as_lit(&self) -> Lit {\n         let token_kind = match self.style {\n             StrStyle::Cooked => token::Str,\n             StrStyle::Raw(n) => token::StrRaw(n),"}, {"sha": "313f5269235641a7f13200fd4e5fe0d57ca43aca", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 45, "deletions": 55, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,23 +1,18 @@\n //! Functions dealing with attributes and meta items.\n \n-mod builtin;\n-\n-pub use crate::ast::Attribute;\n-pub use builtin::*;\n-pub use IntType::*;\n-pub use ReprAttr::*;\n-pub use StabilityLevel::*;\n-\n use crate::ast;\n-use crate::ast::{AttrId, AttrItem, AttrKind, AttrStyle, AttrVec, Ident, Name, Path, PathSegment};\n+use crate::ast::{AttrId, AttrItem, AttrKind, AttrStyle, AttrVec, Attribute};\n use crate::ast::{Expr, GenericParam, Item, Lit, LitKind, Local, Stmt, StmtKind};\n+use crate::ast::{Ident, Name, Path, PathSegment};\n use crate::ast::{MacArgs, MacDelimiter, MetaItem, MetaItemKind, NestedMetaItem};\n use crate::mut_visit::visit_clobber;\n use crate::ptr::P;\n use crate::token::{self, Token};\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n-use crate::GLOBALS;\n \n+use rustc_data_structures::sync::Lock;\n+use rustc_index::bit_set::GrowableBitSet;\n+use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::source_map::{BytePos, Spanned};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n@@ -26,6 +21,35 @@ use log::debug;\n use std::iter;\n use std::ops::DerefMut;\n \n+pub struct Globals {\n+    used_attrs: Lock<GrowableBitSet<AttrId>>,\n+    known_attrs: Lock<GrowableBitSet<AttrId>>,\n+    rustc_span_globals: rustc_span::Globals,\n+}\n+\n+impl Globals {\n+    fn new(edition: Edition) -> Globals {\n+        Globals {\n+            // We have no idea how many attributes there will be, so just\n+            // initiate the vectors with 0 bits. We'll grow them as necessary.\n+            used_attrs: Lock::new(GrowableBitSet::new_empty()),\n+            known_attrs: Lock::new(GrowableBitSet::new_empty()),\n+            rustc_span_globals: rustc_span::Globals::new(edition),\n+        }\n+    }\n+}\n+\n+pub fn with_globals<R>(edition: Edition, f: impl FnOnce() -> R) -> R {\n+    let globals = Globals::new(edition);\n+    GLOBALS.set(&globals, || rustc_span::GLOBALS.set(&globals.rustc_span_globals, f))\n+}\n+\n+pub fn with_default_globals<R>(f: impl FnOnce() -> R) -> R {\n+    with_globals(DEFAULT_EDITION, f)\n+}\n+\n+scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n+\n pub fn mark_used(attr: &Attribute) {\n     debug!(\"marking {:?} as used\", attr);\n     GLOBALS.with(|globals| {\n@@ -382,30 +406,6 @@ pub fn find_by_name(attrs: &[Attribute], name: Symbol) -> Option<&Attribute> {\n     attrs.iter().find(|attr| attr.check_name(name))\n }\n \n-pub fn allow_internal_unstable<'a>(\n-    attrs: &[Attribute],\n-    span_diagnostic: &'a rustc_errors::Handler,\n-) -> Option<impl Iterator<Item = Symbol> + 'a> {\n-    find_by_name(attrs, sym::allow_internal_unstable).and_then(|attr| {\n-        attr.meta_item_list()\n-            .or_else(|| {\n-                span_diagnostic\n-                    .span_err(attr.span, \"allow_internal_unstable expects list of feature names\");\n-                None\n-            })\n-            .map(|features| {\n-                features.into_iter().filter_map(move |it| {\n-                    let name = it.ident().map(|ident| ident.name);\n-                    if name.is_none() {\n-                        span_diagnostic\n-                            .span_err(it.span(), \"`allow_internal_unstable` expects feature names\")\n-                    }\n-                    name\n-                })\n-            })\n-    })\n-}\n-\n pub fn filter_by_name(attrs: &[Attribute], name: Symbol) -> impl Iterator<Item = &Attribute> {\n     attrs.iter().filter(move |attr| attr.check_name(name))\n }\n@@ -626,15 +626,15 @@ impl NestedMetaItem {\n }\n \n pub trait HasAttrs: Sized {\n-    fn attrs(&self) -> &[ast::Attribute];\n-    fn visit_attrs<F: FnOnce(&mut Vec<ast::Attribute>)>(&mut self, f: F);\n+    fn attrs(&self) -> &[Attribute];\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>));\n }\n \n impl<T: HasAttrs> HasAttrs for Spanned<T> {\n-    fn attrs(&self) -> &[ast::Attribute] {\n+    fn attrs(&self) -> &[Attribute] {\n         self.node.attrs()\n     }\n-    fn visit_attrs<F: FnOnce(&mut Vec<ast::Attribute>)>(&mut self, f: F) {\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         self.node.visit_attrs(f);\n     }\n }\n@@ -643,7 +643,7 @@ impl HasAttrs for Vec<Attribute> {\n     fn attrs(&self) -> &[Attribute] {\n         self\n     }\n-    fn visit_attrs<F: FnOnce(&mut Vec<Attribute>)>(&mut self, f: F) {\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         f(self)\n     }\n }\n@@ -652,7 +652,7 @@ impl HasAttrs for AttrVec {\n     fn attrs(&self) -> &[Attribute] {\n         self\n     }\n-    fn visit_attrs<F: FnOnce(&mut Vec<Attribute>)>(&mut self, f: F) {\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         visit_clobber(self, |this| {\n             let mut vec = this.into();\n             f(&mut vec);\n@@ -665,7 +665,7 @@ impl<T: HasAttrs + 'static> HasAttrs for P<T> {\n     fn attrs(&self) -> &[Attribute] {\n         (**self).attrs()\n     }\n-    fn visit_attrs<F: FnOnce(&mut Vec<Attribute>)>(&mut self, f: F) {\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         (**self).visit_attrs(f);\n     }\n }\n@@ -683,7 +683,7 @@ impl HasAttrs for StmtKind {\n         }\n     }\n \n-    fn visit_attrs<F: FnOnce(&mut Vec<Attribute>)>(&mut self, f: F) {\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         match self {\n             StmtKind::Local(local) => local.visit_attrs(f),\n             StmtKind::Item(..) => {}\n@@ -702,29 +702,19 @@ impl HasAttrs for Stmt {\n         self.kind.attrs()\n     }\n \n-    fn visit_attrs<F: FnOnce(&mut Vec<ast::Attribute>)>(&mut self, f: F) {\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         self.kind.visit_attrs(f);\n     }\n }\n \n-impl HasAttrs for GenericParam {\n-    fn attrs(&self) -> &[ast::Attribute] {\n-        &self.attrs\n-    }\n-\n-    fn visit_attrs<F: FnOnce(&mut Vec<Attribute>)>(&mut self, f: F) {\n-        self.attrs.visit_attrs(f);\n-    }\n-}\n-\n macro_rules! derive_has_attrs {\n     ($($ty:path),*) => { $(\n         impl HasAttrs for $ty {\n             fn attrs(&self) -> &[Attribute] {\n                 &self.attrs\n             }\n \n-            fn visit_attrs<F: FnOnce(&mut Vec<Attribute>)>(&mut self, f: F) {\n+            fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n                 self.attrs.visit_attrs(f);\n             }\n         }\n@@ -733,5 +723,5 @@ macro_rules! derive_has_attrs {\n \n derive_has_attrs! {\n     Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::AssocItem, ast::Arm,\n-    ast::Field, ast::FieldPat, ast::Variant, ast::Param\n+    ast::Field, ast::FieldPat, ast::Variant, ast::Param, GenericParam\n }"}, {"sha": "66c747f2c517a877ad3f20d5d5215f0695d8989e", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -17,11 +17,6 @@\n #![feature(unicode_internals)]\n #![recursion_limit = \"256\"]\n \n-use ast::AttrId;\n-use rustc_data_structures::sync::Lock;\n-use rustc_index::bit_set::GrowableBitSet;\n-use rustc_span::edition::{Edition, DEFAULT_EDITION};\n-\n #[macro_export]\n macro_rules! unwrap_or {\n     ($opt:expr, $default:expr) => {\n@@ -32,62 +27,27 @@ macro_rules! unwrap_or {\n     };\n }\n \n-pub struct Globals {\n-    used_attrs: Lock<GrowableBitSet<AttrId>>,\n-    known_attrs: Lock<GrowableBitSet<AttrId>>,\n-    rustc_span_globals: rustc_span::Globals,\n-}\n-\n-impl Globals {\n-    fn new(edition: Edition) -> Globals {\n-        Globals {\n-            // We have no idea how many attributes there will be, so just\n-            // initiate the vectors with 0 bits. We'll grow them as necessary.\n-            used_attrs: Lock::new(GrowableBitSet::new_empty()),\n-            known_attrs: Lock::new(GrowableBitSet::new_empty()),\n-            rustc_span_globals: rustc_span::Globals::new(edition),\n-        }\n-    }\n-}\n-\n-pub fn with_globals<R>(edition: Edition, f: impl FnOnce() -> R) -> R {\n-    let globals = Globals::new(edition);\n-    GLOBALS.set(&globals, || rustc_span::GLOBALS.set(&globals.rustc_span_globals, f))\n-}\n-\n-pub fn with_default_globals<R>(f: impl FnOnce() -> R) -> R {\n-    with_globals(DEFAULT_EDITION, f)\n-}\n-\n-scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n-\n pub mod util {\n     pub mod classify;\n     pub mod comments;\n     pub mod lev_distance;\n     pub mod literal;\n     pub mod map_in_place;\n-    pub mod node_count;\n     pub mod parser;\n }\n \n pub mod ast;\n pub mod attr;\n+pub use attr::{with_default_globals, with_globals, GLOBALS};\n pub mod entry;\n pub mod expand;\n pub mod mut_visit;\n+pub mod node_id;\n pub mod ptr;\n-pub use rustc_session::parse as sess;\n pub mod token;\n pub mod tokenstream;\n pub mod visit;\n \n-pub mod print {\n-    mod helpers;\n-    pub mod pp;\n-    pub mod pprust;\n-}\n-\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n /// Requirements for a `StableHashingContext` to be used in this crate."}, {"sha": "58d2334a7b148ccf150bd0acb04d04489b582710", "filename": "src/libsyntax/node_id.rs", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibsyntax%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibsyntax%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fnode_id.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -11,6 +11,14 @@ rustc_index::newtype_index! {\n \n rustc_data_structures::define_id_collections!(NodeMap, NodeSet, NodeId);\n \n+/// `NodeId` used to represent the root of the crate.\n+pub const CRATE_NODE_ID: NodeId = NodeId::from_u32_const(0);\n+\n+/// When parsing and doing expansions, we initially give all AST nodes this AST\n+/// node value. Then later, in the renumber pass, we renumber them to have\n+/// small, positive ids.\n+pub const DUMMY_NODE_ID: NodeId = NodeId::MAX;\n+\n impl NodeId {\n     pub fn placeholder_from_expn_id(expn_id: ExpnId) -> Self {\n         NodeId::from_u32(expn_id.as_u32())", "previous_filename": "src/librustc_session/node_id.rs"}, {"sha": "5a67531624d292003bbf19b9e1321478341c3b73", "filename": "src/libsyntax/util/comments.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibsyntax%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibsyntax%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fcomments.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,14 +1,11 @@\n pub use CommentStyle::*;\n \n use crate::ast;\n-use crate::sess::ParseSess;\n-\n use rustc_span::source_map::SourceMap;\n use rustc_span::{BytePos, CharPos, FileName, Pos};\n \n-use std::usize;\n-\n use log::debug;\n+use std::usize;\n \n #[cfg(test)]\n mod tests;\n@@ -191,8 +188,8 @@ fn split_block_comment_into_lines(text: &str, col: CharPos) -> Vec<String> {\n \n // it appears this function is called only from pprust... that's\n // probably not a good thing.\n-crate fn gather_comments(sess: &ParseSess, path: FileName, src: String) -> Vec<Comment> {\n-    let cm = SourceMap::new(sess.source_map().path_mapping().clone());\n+pub fn gather_comments(sm: &SourceMap, path: FileName, src: String) -> Vec<Comment> {\n+    let cm = SourceMap::new(sm.path_mapping().clone());\n     let source_file = cm.new_source_file(path, src);\n     let text = (*source_file.src.as_ref().unwrap()).clone();\n "}, {"sha": "b98cc96b3c64798ac4e95f55a29facdc80324ccf", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -367,7 +367,7 @@ pub fn prec_let_scrutinee_needs_par() -> usize {\n ///\n /// Conversely, suppose that we have `(let _ = a) OP b` and `order` is that of `OP`.\n /// Can we print this as `let _ = a OP b`?\n-crate fn needs_par_as_let_scrutinee(order: i8) -> bool {\n+pub fn needs_par_as_let_scrutinee(order: i8) -> bool {\n     order <= prec_let_scrutinee_needs_par() as i8\n }\n "}, {"sha": "fbdad29d6494f23e98b933d996463528542c1e68", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -1,20 +1,21 @@\n #![feature(box_syntax, plugin, plugin_registrar, rustc_private)]\n #![crate_type = \"dylib\"]\n \n+extern crate rustc_ast_pretty;\n extern crate rustc_driver;\n extern crate rustc_hir;\n #[macro_use] extern crate rustc_lint;\n #[macro_use] extern crate rustc_session;\n extern crate rustc_span;\n extern crate syntax;\n \n+use rustc_ast_pretty::pprust;\n use rustc_hir::intravisit;\n use rustc_hir as hir;\n use rustc_hir::Node;\n use rustc_lint::{LateContext, LintPass, LintArray, LateLintPass, LintContext};\n use rustc_driver::plugin::Registry;\n use rustc_span::source_map;\n-use syntax::print::pprust;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {"}, {"sha": "be4b49ada02c749efa62df4805e740d5b6eafc85", "filename": "src/test/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -6,12 +6,13 @@\n \n extern crate syntax;\n extern crate rustc_parse;\n+extern crate rustc_session;\n extern crate rustc_span;\n \n use rustc_parse::new_parser_from_file;\n+use rustc_session::parse::ParseSess;\n use rustc_span::source_map::FilePathMapping;\n use std::path::Path;\n-use syntax::sess::ParseSess;\n \n #[path = \"mod_dir_simple/test.rs\"]\n mod gravy;"}, {"sha": "0f6a88b2691a86fab74ee22bdd9e6b1d38f36f08", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db6501c7273cd1997ce20e15106f362e5613c4/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=13db6501c7273cd1997ce20e15106f362e5613c4", "patch": "@@ -19,19 +19,21 @@\n \n #![feature(rustc_private)]\n \n+extern crate rustc_ast_pretty;\n extern crate rustc_data_structures;\n extern crate syntax;\n extern crate rustc_parse;\n+extern crate rustc_session;\n extern crate rustc_span;\n \n+use rustc_ast_pretty::pprust;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_parse::new_parser_from_source_str;\n+use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{Spanned, DUMMY_SP, FileName};\n use rustc_span::source_map::FilePathMapping;\n use syntax::ast::*;\n-use syntax::sess::ParseSess;\n use syntax::mut_visit::{self, MutVisitor, visit_clobber};\n-use syntax::print::pprust;\n use syntax::ptr::P;\n \n fn parse_expr(ps: &ParseSess, src: &str) -> Option<P<Expr>> {"}]}