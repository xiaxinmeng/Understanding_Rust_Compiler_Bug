{"sha": "061e6c77b5fdb63aa1cad63f1420a7fc810fa17d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MWU2Yzc3YjVmZGI2M2FhMWNhZDYzZjE0MjBhN2ZjODEwZmExN2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-21T11:13:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-21T11:13:49Z"}, "message": "Decouple", "tree": {"sha": "c24ffc3fe582c84ad78be3129aef472253b5d9f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c24ffc3fe582c84ad78be3129aef472253b5d9f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d", "html_url": "https://github.com/rust-lang/rust/commit/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "621cf06156975f8bd75e35af46da034f72e11fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/621cf06156975f8bd75e35af46da034f72e11fad", "html_url": "https://github.com/rust-lang/rust/commit/621cf06156975f8bd75e35af46da034f72e11fad"}], "stats": {"total": 180, "additions": 105, "deletions": 75}, "files": [{"sha": "c4935c0d7e7396776171684811cfc46f3bf504b6", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=061e6c77b5fdb63aa1cad63f1420a7fc810fa17d", "patch": "@@ -829,7 +829,7 @@ impl Trait {\n     }\n \n     fn direct_super_traits(self, db: &impl HirDatabase) -> Vec<Trait> {\n-        let resolver = self.resolver(db);\n+        let resolver = self.id.resolver(db);\n         // returning the iterator directly doesn't easily work because of\n         // lifetime problems, but since there usually shouldn't be more than a\n         // few direct traits this should be fine (we could even use some kind of"}, {"sha": "9cdc0c645f57509402ab350c289b6ce9296ff17f", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=061e6c77b5fdb63aa1cad63f1420a7fc810fa17d", "patch": "@@ -122,7 +122,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n \n         let std_result_path = known::std_result_result();\n \n-        let resolver = self.func.resolver(db);\n+        let resolver = self.func.id.resolver(db);\n         let std_result_enum = match resolver.resolve_known_enum(db, &std_result_path) {\n             Some(it) => it,\n             _ => return,"}, {"sha": "c84ceee62b9c2f770ebea858c87985af81e9af74", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=061e6c77b5fdb63aa1cad63f1420a7fc810fa17d", "patch": "@@ -27,12 +27,12 @@ impl ImplBlock {\n     }\n \n     pub fn target_ty(&self, db: &impl HirDatabase) -> Ty {\n-        Ty::from_hir(db, &self.resolver(db), &self.target_type(db))\n+        Ty::from_hir(db, &self.id.resolver(db), &self.target_type(db))\n     }\n \n     pub fn target_trait_ref(&self, db: &impl HirDatabase) -> Option<TraitRef> {\n         let target_ty = self.target_ty(db);\n-        TraitRef::from_hir(db, &self.resolver(db), &self.target_trait(db)?, Some(target_ty))\n+        TraitRef::from_hir(db, &self.id.resolver(db), &self.target_trait(db)?, Some(target_ty))\n     }\n \n     pub fn items(&self, db: &impl DefDatabase) -> Vec<AssocItem> {"}, {"sha": "ed9fa04918f3c33ecaaf9d124a7252c5fcf514a2", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 89, "deletions": 59, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=061e6c77b5fdb63aa1cad63f1420a7fc810fa17d", "patch": "@@ -8,18 +8,18 @@ use hir_def::{\n     generics::GenericParams,\n     nameres::CrateDefMap,\n     path::{Path, PathKind},\n-    AdtId, ConstId, CrateModuleId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, GenericDefId,\n-    ImplId, ModuleDefId, StaticId, StructId, TraitId, TypeAliasId,\n+    AdtId, AstItemDef, ConstId, ContainerId, CrateModuleId, DefWithBodyId, EnumId, EnumVariantId,\n+    FunctionId, GenericDefId, ImplId, Lookup, ModuleDefId, ModuleId, StaticId, StructId, TraitId,\n+    TypeAliasId, UnionId,\n };\n use hir_expand::name::{self, Name};\n use rustc_hash::FxHashSet;\n \n use crate::{\n     code_model::Crate,\n-    db::{DefDatabase, HirDatabase},\n+    db::HirDatabase,\n     expr::{ExprScopes, PatId, ScopeId},\n-    Adt, Const, Container, DefWithBody, Function, GenericDef, ImplBlock, Local, MacroDef, Module,\n-    ModuleDef, PerNs, Static, Trait, TypeAlias,\n+    Adt, DefWithBody, GenericDef, ImplBlock, Local, MacroDef, ModuleDef, PerNs,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -506,7 +506,7 @@ pub(crate) fn resolver_for_scope(\n     owner: DefWithBodyId,\n     scope_id: Option<ScopeId>,\n ) -> Resolver {\n-    let mut r = DefWithBody::from(owner).resolver(db);\n+    let mut r = owner.resolver(db);\n     let scopes = db.expr_scopes(owner);\n     let scope_chain = scopes.scope_chain(scope_id).collect::<Vec<_>>();\n     for scope in scope_chain.into_iter().rev() {\n@@ -517,100 +517,130 @@ pub(crate) fn resolver_for_scope(\n \n pub(crate) trait HasResolver {\n     /// Builds a resolver for type references inside this def.\n-    fn resolver(self, db: &impl DefDatabase) -> Resolver;\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver;\n }\n \n-impl HasResolver for Module {\n-    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        let def_map = db.crate_def_map(self.id.krate);\n-        Resolver::default().push_module_scope(def_map, self.id.module_id)\n+impl HasResolver for ModuleId {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+        let def_map = db.crate_def_map(self.krate);\n+        Resolver::default().push_module_scope(def_map, self.module_id)\n     }\n }\n \n-impl HasResolver for Trait {\n-    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        self.module(db).resolver(db).push_generic_params_scope(db, self.id.into())\n+impl HasResolver for TraitId {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+        self.module(db).resolver(db).push_generic_params_scope(db, self.into())\n     }\n }\n \n-impl<T: Into<Adt>> HasResolver for T {\n-    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        let def = self.into();\n-        def.module(db)\n+impl HasResolver for AdtId {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+        let module = match self {\n+            AdtId::StructId(it) => it.0.module(db),\n+            AdtId::UnionId(it) => it.0.module(db),\n+            AdtId::EnumId(it) => it.module(db),\n+        };\n+\n+        module\n             .resolver(db)\n-            .push_generic_params_scope(db, def.into())\n-            .push_scope(Scope::AdtScope(def.into()))\n+            .push_generic_params_scope(db, self.into())\n+            .push_scope(Scope::AdtScope(self.into()))\n     }\n }\n \n-impl HasResolver for Function {\n-    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        self.container(db)\n-            .map(|c| c.resolver(db))\n-            .unwrap_or_else(|| self.module(db).resolver(db))\n-            .push_generic_params_scope(db, self.id.into())\n+impl HasResolver for StructId {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+        AdtId::from(self).resolver(db)\n     }\n }\n \n-impl HasResolver for DefWithBody {\n-    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+impl HasResolver for UnionId {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+        AdtId::from(self).resolver(db)\n+    }\n+}\n+\n+impl HasResolver for EnumId {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+        AdtId::from(self).resolver(db)\n+    }\n+}\n+\n+impl HasResolver for FunctionId {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+        self.lookup(db).container.resolver(db).push_generic_params_scope(db, self.into())\n+    }\n+}\n+\n+impl HasResolver for DefWithBodyId {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n         match self {\n-            DefWithBody::Const(c) => c.resolver(db),\n-            DefWithBody::Function(f) => f.resolver(db),\n-            DefWithBody::Static(s) => s.resolver(db),\n+            DefWithBodyId::ConstId(c) => c.resolver(db),\n+            DefWithBodyId::FunctionId(f) => f.resolver(db),\n+            DefWithBodyId::StaticId(s) => s.resolver(db),\n         }\n     }\n }\n \n-impl HasResolver for Const {\n-    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        self.container(db).map(|c| c.resolver(db)).unwrap_or_else(|| self.module(db).resolver(db))\n+impl HasResolver for ConstId {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+        self.lookup(db).container.resolver(db)\n     }\n }\n \n-impl HasResolver for Static {\n-    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+impl HasResolver for StaticId {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n         self.module(db).resolver(db)\n     }\n }\n \n-impl HasResolver for TypeAlias {\n-    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        self.container(db)\n-            .map(|ib| ib.resolver(db))\n-            .unwrap_or_else(|| self.module(db).resolver(db))\n-            .push_generic_params_scope(db, self.id.into())\n+impl HasResolver for TypeAliasId {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+        self.lookup(db).container.resolver(db).push_generic_params_scope(db, self.into())\n     }\n }\n \n-impl HasResolver for Container {\n-    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+impl HasResolver for ContainerId {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n         match self {\n-            Container::Trait(trait_) => trait_.resolver(db),\n-            Container::ImplBlock(impl_block) => impl_block.resolver(db),\n+            ContainerId::TraitId(it) => it.resolver(db),\n+            ContainerId::ImplId(it) => it.resolver(db),\n+            ContainerId::ModuleId(it) => it.resolver(db),\n         }\n     }\n }\n \n-impl HasResolver for GenericDef {\n-    fn resolver(self, db: &impl DefDatabase) -> crate::Resolver {\n+impl HasResolver for GenericDefId {\n+    fn resolver(self, db: &impl DefDatabase2) -> crate::Resolver {\n         match self {\n-            GenericDef::Function(inner) => inner.resolver(db),\n-            GenericDef::Adt(adt) => adt.resolver(db),\n-            GenericDef::Trait(inner) => inner.resolver(db),\n-            GenericDef::TypeAlias(inner) => inner.resolver(db),\n-            GenericDef::ImplBlock(inner) => inner.resolver(db),\n-            GenericDef::EnumVariant(inner) => inner.parent_enum(db).resolver(db),\n-            GenericDef::Const(inner) => inner.resolver(db),\n+            GenericDefId::FunctionId(inner) => inner.resolver(db),\n+            GenericDefId::AdtId(adt) => adt.resolver(db),\n+            GenericDefId::TraitId(inner) => inner.resolver(db),\n+            GenericDefId::TypeAliasId(inner) => inner.resolver(db),\n+            GenericDefId::ImplId(inner) => inner.resolver(db),\n+            GenericDefId::EnumVariantId(inner) => inner.parent.resolver(db),\n+            GenericDefId::ConstId(inner) => inner.resolver(db),\n         }\n     }\n }\n \n-impl HasResolver for ImplBlock {\n-    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n+impl HasResolver for ImplId {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n         self.module(db)\n             .resolver(db)\n-            .push_generic_params_scope(db, self.id.into())\n-            .push_impl_block_scope(self.id)\n+            .push_generic_params_scope(db, self.into())\n+            .push_impl_block_scope(self)\n+    }\n+}\n+\n+impl HasResolver for GenericDef {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+        GenericDefId::from(self).resolver(db)\n+    }\n+}\n+\n+impl HasResolver for DefWithBody {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+        DefWithBodyId::from(self).resolver(db)\n     }\n }"}, {"sha": "8e379498a84080d85b9217c120d38f18505f9251", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=061e6c77b5fdb63aa1cad63f1420a7fc810fa17d", "patch": "@@ -35,19 +35,19 @@ fn try_get_resolver_for_node(db: &impl HirDatabase, node: Source<&SyntaxNode>) -\n         match (node.value) {\n             ast::Module(it) => {\n                 let src = node.with_value(it);\n-                Some(crate::Module::from_declaration(db, src)?.resolver(db))\n+                Some(crate::Module::from_declaration(db, src)?.id.resolver(db))\n             },\n              ast::SourceFile(it) => {\n                 let src = node.with_value(crate::ModuleSource::SourceFile(it));\n-                Some(crate::Module::from_definition(db, src)?.resolver(db))\n+                Some(crate::Module::from_definition(db, src)?.id.resolver(db))\n             },\n             ast::StructDef(it) => {\n                 let src = node.with_value(it);\n-                Some(Struct::from_source(db, src)?.resolver(db))\n+                Some(Struct::from_source(db, src)?.id.resolver(db))\n             },\n             ast::EnumDef(it) => {\n                 let src = node.with_value(it);\n-                Some(Enum::from_source(db, src)?.resolver(db))\n+                Some(Enum::from_source(db, src)?.id.resolver(db))\n             },\n             _ => match node.value.kind() {\n                 FN_DEF | CONST_DEF | STATIC_DEF => {"}, {"sha": "8ea2806dd4e0170d6642e7761507a64814a748ce", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=061e6c77b5fdb63aa1cad63f1420a7fc810fa17d", "patch": "@@ -553,8 +553,8 @@ pub(crate) fn callable_item_sig(db: &impl HirDatabase, def: CallableDef) -> FnSi\n pub(crate) fn type_for_field(db: &impl HirDatabase, field: StructField) -> Ty {\n     let parent_def = field.parent_def(db);\n     let resolver = match parent_def {\n-        VariantDef::Struct(it) => it.resolver(db),\n-        VariantDef::EnumVariant(it) => it.parent_enum(db).resolver(db),\n+        VariantDef::Struct(it) => it.id.resolver(db),\n+        VariantDef::EnumVariant(it) => it.parent.id.resolver(db),\n     };\n     let var_data = parent_def.variant_data(db);\n     let type_ref = &var_data.fields().unwrap()[field.id].type_ref;\n@@ -623,7 +623,7 @@ pub(crate) fn generic_defaults_query(db: &impl HirDatabase, def: GenericDef) ->\n \n fn fn_sig_for_fn(db: &impl HirDatabase, def: Function) -> FnSig {\n     let data = def.data(db);\n-    let resolver = def.resolver(db);\n+    let resolver = def.id.resolver(db);\n     let params = data.params().iter().map(|tr| Ty::from_hir(db, &resolver, tr)).collect::<Vec<_>>();\n     let ret = Ty::from_hir(db, &resolver, data.ret_type());\n     FnSig::from_params_and_return(params, ret)\n@@ -640,15 +640,15 @@ fn type_for_fn(db: &impl HirDatabase, def: Function) -> Ty {\n /// Build the declared type of a const.\n fn type_for_const(db: &impl HirDatabase, def: Const) -> Ty {\n     let data = def.data(db);\n-    let resolver = def.resolver(db);\n+    let resolver = def.id.resolver(db);\n \n     Ty::from_hir(db, &resolver, data.type_ref())\n }\n \n /// Build the declared type of a static.\n fn type_for_static(db: &impl HirDatabase, def: Static) -> Ty {\n     let data = def.data(db);\n-    let resolver = def.resolver(db);\n+    let resolver = def.id.resolver(db);\n \n     Ty::from_hir(db, &resolver, data.type_ref())\n }\n@@ -700,7 +700,7 @@ fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> FnSig {\n         Some(fields) => fields,\n         None => panic!(\"fn_sig_for_struct_constructor called on unit struct\"),\n     };\n-    let resolver = def.resolver(db);\n+    let resolver = def.id.resolver(db);\n     let params = fields\n         .iter()\n         .map(|(_, field)| Ty::from_hir(db, &resolver, &field.type_ref))\n@@ -726,7 +726,7 @@ fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant)\n         Some(fields) => fields,\n         None => panic!(\"fn_sig_for_enum_variant_constructor called for unit variant\"),\n     };\n-    let resolver = def.parent_enum(db).resolver(db);\n+    let resolver = def.parent.id.resolver(db);\n     let params = fields\n         .iter()\n         .map(|(_, field)| Ty::from_hir(db, &resolver, &field.type_ref))\n@@ -755,7 +755,7 @@ fn type_for_adt(db: &impl HirDatabase, adt: impl Into<Adt> + HasGenericParams) -\n \n fn type_for_type_alias(db: &impl HirDatabase, t: TypeAlias) -> Ty {\n     let generics = t.generic_params(db);\n-    let resolver = t.resolver(db);\n+    let resolver = t.id.resolver(db);\n     let type_ref = t.type_ref(db);\n     let substs = Substs::identity(&generics);\n     let inner = Ty::from_hir(db, &resolver, &type_ref.unwrap_or(TypeRef::Error));"}]}