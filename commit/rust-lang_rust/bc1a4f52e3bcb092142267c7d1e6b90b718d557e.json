{"sha": "bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMWE0ZjUyZTNiY2IwOTIxNDIyNjdjN2QxZTZiOTBiNzE4ZDU1N2U=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-08T23:56:57Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-09T14:18:05Z"}, "message": "review comments: typo and rewording", "tree": {"sha": "cbe0a5cc76a5f84ad227f489239edaf1959e8f58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbe0a5cc76a5f84ad227f489239edaf1959e8f58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "html_url": "https://github.com/rust-lang/rust/commit/bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33d1082d6e3cb9fe5e0fd090f52a3effa9871fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/33d1082d6e3cb9fe5e0fd090f52a3effa9871fce", "html_url": "https://github.com/rust-lang/rust/commit/33d1082d6e3cb9fe5e0fd090f52a3effa9871fce"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "4fb28db6e94fa09c29530badc86613449f445f7b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -3711,8 +3711,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if let Some(fn_span) = fn_span {\n                             err.span_label(\n                                 fn_span,\n-                                \"this function implicitly returns `()` as its body has no tail \\\n-                                 or `return` expression\",\n+                                \"implicitly returns `()` as its body has no tail or `return` \\\n+                                 expression\",\n                             );\n                         }\n                     }, false);\n@@ -3880,10 +3880,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         sugg_call = fields.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n                         match hir.as_local_hir_id(def_id).and_then(|hir_id| hir.def_kind(hir_id)) {\n                             Some(hir::def::DefKind::Ctor(hir::def::CtorOf::Variant, _)) => {\n-                                msg = \"instatiate this tuple variant\";\n+                                msg = \"instantiate this tuple variant\";\n                             }\n                             Some(hir::def::DefKind::Ctor(hir::def::CtorOf::Struct, _)) => {\n-                                msg = \"instatiate this tuple struct\";\n+                                msg = \"instantiate this tuple struct\";\n                             }\n                             _ => {}\n                         }"}, {"sha": "f4984ca446309d83d88ba24dd63387b1efa5afaf", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn f() -> String {\n    |    -      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     0u8;\n LL |     \"bla\".to_string();\n    |                      - help: consider removing this semicolon\n@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n LL | fn g() -> String {\n    |    -      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"this won't work\".to_string();\n LL |     \"removeme\".to_string();\n    |                           - help: consider removing this semicolon"}, {"sha": "cfb42c601279a9abdc5304b4a3a2fa8806310ffa", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn blah() -> i32 {\n    |    ----      ^^^ expected i32, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n ...\n LL |     ;\n    |     - help: consider removing this semicolon"}, {"sha": "f7cafab3d773bdc3250146dd61596ec369915721", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn foo() -> String {\n    |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n ...\n LL |     ;\n    |     - help: consider removing this semicolon\n@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n LL | fn bar() -> String {\n    |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"foobar\".to_string()\n LL |     ;\n    |     - help: consider removing this semicolon"}, {"sha": "955793e8586e7d221e2253632019a8caa08088f6", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn plus_one(x: i32) -> i32 {\n    |    --------            ^^^ expected i32, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     x + 1;\n    |          - help: consider removing this semicolon\n    |\n@@ -17,7 +17,7 @@ error[E0308]: mismatched types\n LL | fn foo() -> Result<u8, u64> {\n    |    ---      ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Ok(1);\n    |          - help: consider removing this semicolon\n    |"}, {"sha": "6256dc0c550226f3dfe774e26199cc437d02bc25", "filename": "src/test/ui/issues/issue-32323.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n    |        -                     ^^^^^^^^^^^^^^^^^^ expected associated type, found ()\n    |        |\n-   |        this function implicitly returns `()` as its body has no tail or `return` expression\n+   |        implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `<T as Tr<'a>>::Out`\n               found type `()`"}, {"sha": "586146cbaa4ee9fc1eee9fce581fa7eaaa6a6616", "filename": "src/test/ui/issues/issue-35241.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -8,7 +8,7 @@ LL | fn test() -> Foo { Foo }\n    |              ---   ^^^\n    |              |     |\n    |              |     expected struct `Foo`, found fn item\n-   |              |     help: use parentheses to instatiate this tuple struct: `Foo(_)`\n+   |              |     help: use parentheses to instantiate this tuple struct: `Foo(_)`\n    |              expected `Foo` because of return type\n    |\n    = note: expected type `Foo`"}, {"sha": "6d3e8b5ba2323a3c814be17ca77312c14107020d", "filename": "src/test/ui/issues/issue-43162.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n LL | fn foo() -> bool {\n    |    ---      ^^^^ expected bool, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |\n LL |     break true;\n    |               - help: consider removing this semicolon"}, {"sha": "258ffe558e9ba283aef71e1330d709f3320ab936", "filename": "src/test/ui/issues/issue-44023.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize {\n    |    ------------------------        ^^^^^ expected isize, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "ecf729e1032b15f63291a372b62e0264e35cbe57", "filename": "src/test/ui/issues/issue-6458-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn foo(b: bool) -> Result<bool,String> {\n    |    ---             ^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Err(\"bar\".to_string());\n    |                           - help: consider removing this semicolon\n    |"}, {"sha": "4baf351f7eb2d52c31bca83c3fc433780a706f1a", "filename": "src/test/ui/liveness/liveness-forgot-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn f(a: isize) -> isize { if god_exists(a) { return 5; }; }\n    |    -              ^^^^^ expected isize, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "1f60560b45043928ddbd4cff2323fc71d2edcbeb", "filename": "src/test/ui/liveness/liveness-missing-ret2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize {\n    |    -      ^^^^^ expected isize, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "2497d93daa494628cbd367d3247addec99c8ae49", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -5,7 +5,7 @@ LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n    |                                ---      ^^^    - help: consider removing this semicolon\n    |                                |        |\n    |                                |        expected i32, found ()\n-   |                                this function implicitly returns `()` as its body has no tail or `return` expression\n+   |                                implicitly returns `()` as its body has no tail or `return` expression\n ...\n LL |     test!();\n    |     -------- in this macro invocation\n@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n LL | fn no_return() -> i32 {}\n    |    ---------      ^^^ expected i32, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `i32`\n               found type `()`\n@@ -30,7 +30,7 @@ error[E0308]: mismatched types\n LL | fn bar(x: u32) -> u32 {\n    |    ---            ^^^ expected u32, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     x * 2;\n    |          - help: consider removing this semicolon\n    |\n@@ -43,7 +43,7 @@ error[E0308]: mismatched types\n LL | fn baz(x: u64) -> u32 {\n    |    ---            ^^^ expected u32, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `u32`\n               found type `()`"}, {"sha": "3c8ecdcfbcbe4679a7cf259bfdefe18b5242692f", "filename": "src/test/ui/missing/missing-return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize { }\n    |    -      ^^^^^ expected isize, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "3d58b6fba0bafae14fe9ec43880108574cff5f47", "filename": "src/test/ui/parser/issue-62881.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fparser%2Fissue-62881.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fparser%2Fissue-62881.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62881.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize { fn f() -> isize {} pub f<\n    |                      -      ^^^^^ expected isize, found ()\n    |                      |\n-   |                      this function implicitly returns `()` as its body has no tail or `return` expression\n+   |                      implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "39ce980964b77f8b3349e8238222e459f2a657a4", "filename": "src/test/ui/parser/issue-62895.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n LL | fn v() -> isize {\n    |    -      ^^^^^ expected isize, found ()\n    |    |\n-   |    this function implicitly returns `()` as its body has no tail or `return` expression\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "2538bbbf8067f6c4c450f808476224356e2883d4", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -202,7 +202,7 @@ LL |         let _: Z = Z::Fn;\n    |                    ^^^^^\n    |                    |\n    |                    expected enum `m::n::Z`, found fn item\n-   |                    help: use parentheses to instatiate this tuple variant: `Z::Fn(_)`\n+   |                    help: use parentheses to instantiate this tuple variant: `Z::Fn(_)`\n    |\n    = note: expected type `m::n::Z`\n               found type `fn(u8) -> m::n::Z {m::n::Z::Fn}`\n@@ -232,7 +232,7 @@ LL |     let _: E = m::E::Fn;\n    |                ^^^^^^^^\n    |                |\n    |                expected enum `m::E`, found fn item\n-   |                help: use parentheses to instatiate this tuple variant: `m::E::Fn(_)`\n+   |                help: use parentheses to instantiate this tuple variant: `m::E::Fn(_)`\n    |\n    = note: expected type `m::E`\n               found type `fn(u8) -> m::E {m::E::Fn}`\n@@ -262,7 +262,7 @@ LL |     let _: E = E::Fn;\n    |                ^^^^^\n    |                |\n    |                expected enum `m::E`, found fn item\n-   |                help: use parentheses to instatiate this tuple variant: `E::Fn(_)`\n+   |                help: use parentheses to instantiate this tuple variant: `E::Fn(_)`\n    |\n    = note: expected type `m::E`\n               found type `fn(u8) -> m::E {m::E::Fn}`"}, {"sha": "0686b56f97ded5d4a5a9f9707c388b771d6f5dc7", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1a4f52e3bcb092142267c7d1e6b90b718d557e/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=bc1a4f52e3bcb092142267c7d1e6b90b718d557e", "patch": "@@ -32,7 +32,7 @@ LL |     let _: S = S;\n    |                ^\n    |                |\n    |                expected struct `S`, found fn item\n-   |                help: use parentheses to instatiate this tuple struct: `S(_, _)`\n+   |                help: use parentheses to instantiate this tuple struct: `S(_, _)`\n    |\n    = note: expected type `S`\n               found type `fn(usize, usize) -> S {S}`\n@@ -62,7 +62,7 @@ LL |     let _: V = V;\n    |                ^\n    |                |\n    |                expected struct `V`, found fn item\n-   |                help: use parentheses to instatiate this tuple struct: `V()`\n+   |                help: use parentheses to instantiate this tuple struct: `V()`\n    |\n    = note: expected type `V`\n               found type `fn() -> V {V}`\n@@ -107,7 +107,7 @@ LL |     let _: E = E::A;\n    |                ^^^^\n    |                |\n    |                expected enum `E`, found fn item\n-   |                help: use parentheses to instatiate this tuple variant: `E::A(_)`\n+   |                help: use parentheses to instantiate this tuple variant: `E::A(_)`\n    |\n    = note: expected type `E`\n               found type `fn(usize) -> E {E::A}`"}]}