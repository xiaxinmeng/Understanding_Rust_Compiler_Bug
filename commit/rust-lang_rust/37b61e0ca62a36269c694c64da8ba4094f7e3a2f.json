{"sha": "37b61e0ca62a36269c694c64da8ba4094f7e3a2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YjYxZTBjYTYyYTM2MjY5YzY5NGM2NGRhOGJhNDA5NGY3ZTNhMmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-30T14:57:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-30T14:57:40Z"}, "message": "Rustup to rustc 1.29.0-nightly (866a71325 2018-07-29)", "tree": {"sha": "42ee3b3e0c1fd199238ac58a3d0e773b62a9c17f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42ee3b3e0c1fd199238ac58a3d0e773b62a9c17f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37b61e0ca62a36269c694c64da8ba4094f7e3a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37b61e0ca62a36269c694c64da8ba4094f7e3a2f", "html_url": "https://github.com/rust-lang/rust/commit/37b61e0ca62a36269c694c64da8ba4094f7e3a2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37b61e0ca62a36269c694c64da8ba4094f7e3a2f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d86339bb5c2024d48cacf127d55fece303c14df3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d86339bb5c2024d48cacf127d55fece303c14df3", "html_url": "https://github.com/rust-lang/rust/commit/d86339bb5c2024d48cacf127d55fece303c14df3"}], "stats": {"total": 138, "additions": 79, "deletions": 59}, "files": [{"sha": "651fba4133ac78245e2771341acf0916cfbfe784", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37b61e0ca62a36269c694c64da8ba4094f7e3a2f/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/37b61e0ca62a36269c694c64da8ba4094f7e3a2f/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=37b61e0ca62a36269c694c64da8ba4094f7e3a2f", "patch": "@@ -1,7 +1,10 @@\n+cargo-features = [\"edition\"]\n+\n [package]\n name = \"rustc_codegen_cranelift\"\n version = \"0.1.0\"\n authors = [\"bjorn3 <bjorn3@users.noreply.github.com>\"]\n+edition = \"2018\"\n \n [lib]\n crate-type = [\"dylib\"]"}, {"sha": "144ba167c5196366465adf0b236a8ce441d11a01", "filename": "src/abi.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37b61e0ca62a36269c694c64da8ba4094f7e3a2f/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b61e0ca62a36269c694c64da8ba4094f7e3a2f/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=37b61e0ca62a36269c694c64da8ba4094f7e3a2f", "patch": "@@ -3,7 +3,7 @@ use std::iter;\n use rustc::hir;\n use rustc_target::spec::abi::Abi;\n \n-use prelude::*;\n+use crate::prelude::*;\n \n pub fn cton_sig_from_fn_ty<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, fn_ty: Ty<'tcx>) -> Signature {\n     let sig = ty_fn_sig(tcx, fn_ty);\n@@ -250,21 +250,21 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n     args: &[Operand<'tcx>],\n     destination: &Option<(Place<'tcx>, BasicBlock)>,\n ) {\n-    let func = ::base::trans_operand(fx, func);\n+    let func = trans_operand(fx, func);\n     let fn_ty = func.layout().ty;\n     let sig = ty_fn_sig(fx.tcx, fn_ty);\n \n     let return_place = if let Some((place, _)) = destination {\n-        Some(::base::trans_place(fx, place))\n+        Some(trans_place(fx, place))\n     } else {\n         None\n     };\n \n     // Unpack arguments tuple for closures\n     let args = if sig.abi == Abi::RustCall {\n         assert_eq!(args.len(), 2, \"rust-call abi requires two arguments\");\n-        let self_arg = ::base::trans_operand(fx, &args[0]);\n-        let pack_arg = ::base::trans_operand(fx, &args[1]);\n+        let self_arg = trans_operand(fx, &args[0]);\n+        let pack_arg = trans_operand(fx, &args[1]);\n         let mut args = Vec::new();\n         args.push(self_arg);\n         match pack_arg.layout().ty.sty {\n@@ -281,7 +281,7 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n         args\n             .into_iter()\n             .map(|arg| {\n-                ::base::trans_operand(fx, arg)\n+                trans_operand(fx, arg)\n             })\n             .collect::<Vec<_>>()\n     };\n@@ -319,7 +319,7 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n                 }\n                 \"discriminant_value\" => {\n                     assert_eq!(args.len(), 1);\n-                    let discr = ::base::trans_get_discriminant(fx, args[0], ret.layout());\n+                    let discr = crate::base::trans_get_discriminant(fx, args[0], ret.layout());\n                     ret.write_cvalue(fx, discr);\n                 }\n                 \"size_of\" => {\n@@ -351,10 +351,10 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n                     };\n                     let res = match ret.layout().ty.sty {\n                         TypeVariants::TyUint(_) => {\n-                            ::base::trans_int_binop(fx, bin_op, args[0], args[1], ret.layout().ty, false, false)\n+                            crate::base::trans_int_binop(fx, bin_op, args[0], args[1], ret.layout().ty, false, false)\n                         }\n                         TypeVariants::TyInt(_) => {\n-                            ::base::trans_int_binop(fx, bin_op, args[0], args[1], ret.layout().ty, true, false)\n+                            crate::base::trans_int_binop(fx, bin_op, args[0], args[1], ret.layout().ty, true, false)\n                         }\n                         _ => panic!(),\n                     };"}, {"sha": "dbb562e4e5ae7dde4e930800ffe85ee38079dfbf", "filename": "src/base.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/37b61e0ca62a36269c694c64da8ba4094f7e3a2f/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b61e0ca62a36269c694c64da8ba4094f7e3a2f/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=37b61e0ca62a36269c694c64da8ba4094f7e3a2f", "patch": "@@ -1,4 +1,4 @@\n-use prelude::*;\n+use crate::prelude::*;\n \n pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, context: &mut Context, mono_item: MonoItem<'tcx>) {\n     let tcx = cx.tcx;\n@@ -33,15 +33,15 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend\n \n                 let mut f = Function::with_name_signature(ExternalName::user(0, func_id.index() as u32), sig);\n \n-                let comments = match ::base::trans_fn(cx, &mut f, inst){\n+                let comments = match trans_fn(cx, &mut f, inst){\n                     Ok(comments) => comments,\n                     Err(err) => {\n                         tcx.sess.err(&err);\n                         return;\n                     }\n                 };\n \n-                let mut writer = ::pretty_clif::CommentWriter(comments);\n+                let mut writer = crate::pretty_clif::CommentWriter(comments);\n                 let mut cton = String::new();\n                 ::cranelift::codegen::write::decorate_function(&mut writer, &mut cton, &f, None).unwrap();\n                 tcx.sess.warn(&cton);\n@@ -99,7 +99,7 @@ pub fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &\n     };\n     let fx = &mut fx;\n \n-    ::abi::codegen_fn_prelude(fx, start_ebb);\n+    crate::abi::codegen_fn_prelude(fx, start_ebb);\n \n     fx.bcx.ins().jump(*fx.ebb_map.get(&START_BLOCK).unwrap(), &[]);\n \n@@ -143,13 +143,13 @@ pub fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &\n                     let ebb = fx.get_ebb(targets[i]);\n                     jt_data.set_entry(*value as usize, ebb);\n                 }\n-                let mut jump_table = fx.bcx.create_jump_table(jt_data);\n+                let jump_table = fx.bcx.create_jump_table(jt_data);\n                 fx.bcx.ins().br_table(discr, jump_table);\n                 let otherwise_ebb = fx.get_ebb(targets[targets.len() - 1]);\n                 fx.bcx.ins().jump(otherwise_ebb, &[]);\n             }\n             TerminatorKind::Call { func, args, destination, cleanup: _ } => {\n-                ::abi::codegen_call(fx, func, args, destination);\n+                crate::abi::codegen_call(fx, func, args, destination);\n             }\n             TerminatorKind::Resume | TerminatorKind::Abort | TerminatorKind::Unreachable => {\n                 fx.bcx.ins().trap(TrapCode::User(!0));\n@@ -319,13 +319,13 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, cur_ebb: Ebb, stmt: &\n                         (TypeVariants::TyUint(_), TypeVariants::TyInt(_)) |\n                         (TypeVariants::TyUint(_), TypeVariants::TyUint(_)) => {\n                             let from = operand.load_value(fx);\n-                            let res = ::common::cton_intcast(fx, from, from_ty, to_ty, false);\n+                            let res = crate::common::cton_intcast(fx, from, from_ty, to_ty, false);\n                             lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n                         }\n                         (TypeVariants::TyInt(_), TypeVariants::TyInt(_)) |\n                         (TypeVariants::TyInt(_), TypeVariants::TyUint(_)) => {\n                             let from = operand.load_value(fx);\n-                            let res = ::common::cton_intcast(fx, from, from_ty, to_ty, true);\n+                            let res = crate::common::cton_intcast(fx, from, from_ty, to_ty, true);\n                             lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n                         }\n                         _ => return Err(format!(\"rval misc {:?} {:?}\", operand, to_ty)),\n@@ -602,6 +602,7 @@ fn trans_ptr_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, l\n pub fn trans_place<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, place: &Place<'tcx>) -> CPlace<'tcx> {\n     match place {\n         Place::Local(local) => fx.get_local_place(*local),\n+        Place::Promoted(promoted) => crate::constant::trans_promoted(fx, promoted.0),\n         Place::Static(static_) => unimplemented!(\"static place {:?} ty {:?}\", static_.def_id, static_.ty),\n         Place::Projection(projection) => {\n             let base = trans_place(fx, &projection.base);\n@@ -632,7 +633,7 @@ pub fn trans_operand<'a, 'tcx>(fx: &mut FunctionCx<'a, 'tcx>, operand: &Operand<\n             cplace.to_cvalue(fx)\n         },\n         Operand::Constant(const_) => {\n-            ::constant::trans_constant(fx, const_)\n+            crate::constant::trans_constant(fx, const_)\n         }\n     }\n }"}, {"sha": "2ef9d1d6772cce3a301fd9be18ea2767fe4763e4", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37b61e0ca62a36269c694c64da8ba4094f7e3a2f/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b61e0ca62a36269c694c64da8ba4094f7e3a2f/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=37b61e0ca62a36269c694c64da8ba4094f7e3a2f", "patch": "@@ -4,7 +4,7 @@ use rustc_target::spec::{HasTargetSpec, Target};\n \n use cranelift_module::{Module, FuncId, DataId};\n \n-use prelude::*;\n+use crate::prelude::*;\n \n pub type CurrentBackend = ::cranelift_simplejit::SimpleJITBackend;\n \n@@ -313,7 +313,7 @@ impl<'a, 'tcx: 'a> fmt::Debug for FunctionCx<'a, 'tcx> {\n         writeln!(f, \"{:?}\", self.local_map)?;\n \n         let mut clif = String::new();\n-        let mut writer = ::pretty_clif::CommentWriter(self.comments.clone());\n+        let mut writer = crate::pretty_clif::CommentWriter(self.comments.clone());\n         ::cranelift::codegen::write::decorate_function(\n             &mut writer,\n             &mut clif,"}, {"sha": "5520a77bad3594993cb6f677a5bb2013d45ebf18", "filename": "src/constant.rs", "status": "modified", "additions": 47, "deletions": 32, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/37b61e0ca62a36269c694c64da8ba4094f7e3a2f/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b61e0ca62a36269c694c64da8ba4094f7e3a2f/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=37b61e0ca62a36269c694c64da8ba4094f7e3a2f", "patch": "@@ -1,21 +1,30 @@\n-use prelude::*;\n+use crate::prelude::*;\n+use rustc::ty::Const;\n use rustc::mir::interpret::{ConstValue, GlobalId, AllocId, read_target_uint};\n use rustc_mir::interpret::{CompileTimeEvaluator, Memory, MemoryKind};\n use cranelift_module::*;\n \n-pub fn trans_constant<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, const_: &Constant<'tcx>) -> CValue<'tcx> {\n-    let const_val = match const_.literal {\n-        Literal::Value { value } => fx.monomorphize(&value),\n-        Literal::Promoted { index } => fx\n-            .tcx\n-            .const_eval(ParamEnv::reveal_all().and(GlobalId {\n-                instance: fx.instance,\n-                promoted: Some(index),\n-            }))\n-            .unwrap(),\n-    };\n-\n-    let const_ = match const_val.val {\n+pub fn trans_promoted<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, promoted: Promoted) -> CPlace<'tcx> {\n+    let const_ = fx\n+        .tcx\n+        .const_eval(ParamEnv::reveal_all().and(GlobalId {\n+            instance: fx.instance,\n+            promoted: Some(promoted),\n+        }))\n+        .unwrap();\n+\n+    let const_ = force_eval_const(fx, const_);\n+    trans_const_place(fx, const_)\n+}\n+\n+pub fn trans_constant<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, constant: &Constant<'tcx>) -> CValue<'tcx> {\n+    let const_ = fx.monomorphize(&constant.literal);\n+    let const_ = force_eval_const(fx, const_);\n+    trans_const_value(fx, const_)\n+}\n+\n+fn force_eval_const<'a, 'tcx: 'a>(fx: &FunctionCx<'a, 'tcx>, const_: &'tcx Const<'tcx>) -> &'tcx Const<'tcx> {\n+    match const_.val {\n         ConstValue::Unevaluated(def_id, ref substs) => {\n             let param_env = ParamEnv::reveal_all();\n             let instance = Instance::resolve(fx.tcx, param_env, def_id, substs).unwrap();\n@@ -25,11 +34,11 @@ pub fn trans_constant<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, const_: &Cons\n             };\n             fx.tcx.const_eval(param_env.and(cid)).unwrap()\n         },\n-        _ => const_val,\n-    };\n-\n-    fx.tcx.sess.warn(&format!(\"const_val: {:?} const_: {:?}\", const_val, const_));\n+        _ => const_,\n+    }\n+}\n \n+fn trans_const_value<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, const_: &'tcx Const<'tcx>) -> CValue<'tcx> {\n     let ty = fx.monomorphize(&const_.ty);\n     let layout = fx.layout_of(ty);\n     match ty.sty {\n@@ -50,24 +59,30 @@ pub fn trans_constant<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, const_: &Cons\n             CValue::Func(func_ref, layout)\n         }\n         _ => {\n-            if true {\n-                // TODO: cranelift-module api seems to be used wrong,\n-                // thus causing panics for some consts, so this disables it\n-                return CValue::ByRef(fx.bcx.ins().iconst(types::I64, 0), layout);\n-            }\n-            let mut memory = Memory::<CompileTimeEvaluator>::new(fx.tcx.at(DUMMY_SP), ());\n-            let alloc = fx.tcx.const_value_to_allocation(const_);\n-            //println!(\"const value: {:?} allocation: {:?}\", value, alloc);\n-            let alloc_id = memory.allocate_value(alloc.clone(), MemoryKind::Stack).unwrap();\n-            let data_id = get_global_for_alloc_id(fx, &memory, alloc_id);\n-            let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-            // TODO: does global_value return a ptr of a val?\n-            let global_ptr = fx.bcx.ins().global_value(types::I64, local_data_id);\n-            CValue::ByRef(global_ptr, layout)\n+            trans_const_place(fx, const_).to_cvalue(fx)\n         }\n     }\n }\n \n+fn trans_const_place<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, const_: &'tcx Const<'tcx>) -> CPlace<'tcx> {\n+    let ty = fx.monomorphize(&const_.ty);\n+    let layout = fx.layout_of(ty);\n+    if true {\n+        // TODO: cranelift-module api seems to be used wrong,\n+        // thus causing panics for some consts, so this disables it\n+        return CPlace::Addr(fx.bcx.ins().iconst(types::I64, 0), layout);\n+    }\n+    let mut memory = Memory::<CompileTimeEvaluator>::new(fx.tcx.at(DUMMY_SP), ());\n+    let alloc = fx.tcx.const_value_to_allocation(const_);\n+    //println!(\"const value: {:?} allocation: {:?}\", value, alloc);\n+    let alloc_id = memory.allocate_value(alloc.clone(), MemoryKind::Stack).unwrap();\n+    let data_id = get_global_for_alloc_id(fx, &memory, alloc_id);\n+    let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+    // TODO: does global_value return a ptr of a val?\n+    let global_ptr = fx.bcx.ins().global_value(types::I64, local_data_id);\n+    CPlace::Addr(global_ptr, layout)\n+}\n+\n // If ret.1 is true, then the global didn't exist before\n fn define_global_for_alloc_id(fx: &mut FunctionCx, alloc_id: AllocId, todo: &mut HashMap<AllocId, DataId>) -> (DataId, bool) {\n     use std::collections::hash_map::Entry;"}, {"sha": "e69c1625f3fb75eb544f2e1ac1c82877ffa64384", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/37b61e0ca62a36269c694c64da8ba4094f7e3a2f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b61e0ca62a36269c694c64da8ba4094f7e3a2f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=37b61e0ca62a36269c694c64da8ba4094f7e3a2f", "patch": "@@ -76,14 +76,15 @@ mod prelude {\n     pub use cranelift_module::{Module, Backend, DataContext, FuncId, DataId, Linkage, Writability};\n     pub use cranelift_simplejit::{SimpleJITBuilder, SimpleJITBackend};\n \n-    pub use abi::*;\n-    pub use common::Variable;\n-    pub use common::*;\n+    pub use crate::abi::*;\n+    pub use crate::common::Variable;\n+    pub use crate::common::*;\n+    pub use crate::base::{trans_operand, trans_place};\n \n-    pub use CodegenCx;\n+    pub use crate::CodegenCx;\n }\n \n-use prelude::*;\n+use crate::prelude::*;\n \n pub struct CodegenCx<'a, 'tcx: 'a, B: Backend + 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -279,7 +280,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 .unwrap()\n         );\n \n-        Box::new(::OngoingCodegen {\n+        Box::new(OngoingCodegen {\n             product: translated_module.finish(),\n             metadata: metadata.raw_data,\n             crate_name: tcx.crate_name(LOCAL_CRATE),"}, {"sha": "51c170375613e62048d3d536954987b270d23dfb", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b61e0ca62a36269c694c64da8ba4094f7e3a2f/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b61e0ca62a36269c694c64da8ba4094f7e3a2f/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=37b61e0ca62a36269c694c64da8ba4094f7e3a2f", "patch": "@@ -4,7 +4,7 @@ use std::fmt;\n \n use cranelift::codegen::write::{FuncWriter, PlainWriter};\n \n-use prelude::*;\n+use crate::prelude::*;\n \n pub struct CommentWriter(pub HashMap<Inst, String>);\n "}]}