{"sha": "4a9af010ebc728bc4798b1ba30de0322c1f0138a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOWFmMDEwZWJjNzI4YmM0Nzk4YjFiYTMwZGUwMzIyYzFmMDEzOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-04T11:15:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-04T11:15:20Z"}, "message": "Auto merge of #36953 - Manishearth:rollup, r=Manishearth\n\nRollup of 12 pull requests\n\n- Successful merges: #36798, #36878, #36902, #36903, #36908, #36916, #36917, #36921, #36928, #36938, #36941, #36951\n- Failed merges:", "tree": {"sha": "3bff48d27899b511dc1a9c7993de557cb06b887b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bff48d27899b511dc1a9c7993de557cb06b887b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a9af010ebc728bc4798b1ba30de0322c1f0138a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a9af010ebc728bc4798b1ba30de0322c1f0138a", "html_url": "https://github.com/rust-lang/rust/commit/4a9af010ebc728bc4798b1ba30de0322c1f0138a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a9af010ebc728bc4798b1ba30de0322c1f0138a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ea241b9fb411b42f0173113d43ef1020ca3df70", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea241b9fb411b42f0173113d43ef1020ca3df70", "html_url": "https://github.com/rust-lang/rust/commit/5ea241b9fb411b42f0173113d43ef1020ca3df70"}, {"sha": "177aabdfe3c47412d8d29d9d726640a5134a6b7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/177aabdfe3c47412d8d29d9d726640a5134a6b7d", "html_url": "https://github.com/rust-lang/rust/commit/177aabdfe3c47412d8d29d9d726640a5134a6b7d"}], "stats": {"total": 581, "additions": 354, "deletions": 227}, "files": [{"sha": "5add2359282729d132f420aa3777f948994d21a6", "filename": "src/doc/book/getting-started.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Fdoc%2Fbook%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Fdoc%2Fbook%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fgetting-started.md?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -505,6 +505,9 @@ $ cargo run\n Hello, world!\n ```\n \n+The `run` command comes in handy when you need to rapidly iterate on a\n+project.\n+\n Notice that this example didn\u2019t re-build the project. Cargo figured out that\n the file hasn\u2019t changed, and so it just ran the binary. If you'd modified your\n source code, Cargo would have rebuilt the project before running it, and you"}, {"sha": "222597be0a946423ef6a5c5037a6f7ed2d5f7747", "filename": "src/doc/book/guessing-game.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Fdoc%2Fbook%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Fdoc%2Fbook%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fguessing-game.md?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -56,9 +56,7 @@ $ cargo build\n Excellent! Open up your `src/main.rs` again. We\u2019ll be writing all of\n our code in this file.\n \n-Before we move on, let me show you one more Cargo command: `run`. `cargo run`\n-is kind of like `cargo build`, but it also then runs the produced executable.\n-Try it out:\n+Remember the `run` command from last chapter? Try it out again here:\n \n ```bash\n $ cargo run\n@@ -67,9 +65,8 @@ $ cargo run\n Hello, world!\n ```\n \n-Great! The `run` command comes in handy when you need to rapidly iterate on a\n-project. Our game is such a project, we need to quickly test each\n-iteration before moving on to the next one.\n+Great! Our game is just the kind of project `run` is good for: we need\n+to quickly test each iteration before moving on to the next one.\n \n # Processing a Guess\n "}, {"sha": "b4be8a43213d8dbf4974f18c7fd73d5ad7b02ed5", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -1033,7 +1033,7 @@ pub struct Drain<'a, T: 'a> {\n     iter: vec::Drain<'a, T>,\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> Iterator for Drain<'a, T> {\n     type Item = T;\n \n@@ -1048,15 +1048,15 @@ impl<'a, T: 'a> Iterator for Drain<'a, T> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back()\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n \n #[unstable(feature = \"fused\", issue = \"35602\")]"}, {"sha": "788236c24d063a75a00b86cfbc496a1df1f5b6e8", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -136,6 +136,7 @@ pub struct BTreeMap<K, V> {\n     length: usize,\n }\n \n+#[stable(feature = \"btree_drop\", since = \"1.7.0\")]\n impl<K, V> Drop for BTreeMap<K, V> {\n     #[unsafe_destructor_blind_to_params]\n     fn drop(&mut self) {\n@@ -146,6 +147,7 @@ impl<K, V> Drop for BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {\n     fn clone(&self) -> BTreeMap<K, V> {\n         fn clone_subtree<K: Clone, V: Clone>(node: node::NodeRef<marker::Immut,\n@@ -1125,6 +1127,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> IntoIterator for &'a BTreeMap<K, V> {\n     type Item = (&'a K, &'a V);\n     type IntoIter = Iter<'a, K, V>;\n@@ -1134,6 +1137,7 @@ impl<'a, K: 'a, V: 'a> IntoIterator for &'a BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n     type Item = (&'a K, &'a V);\n \n@@ -1154,6 +1158,7 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, K, V> FusedIterator for Iter<'a, K, V> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> DoubleEndedIterator for Iter<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a V)> {\n         if self.length == 0 {\n@@ -1165,12 +1170,14 @@ impl<'a, K: 'a, V: 'a> DoubleEndedIterator for Iter<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> ExactSizeIterator for Iter<'a, K, V> {\n     fn len(&self) -> usize {\n         self.length\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Clone for Iter<'a, K, V> {\n     fn clone(&self) -> Iter<'a, K, V> {\n         Iter {\n@@ -1180,6 +1187,7 @@ impl<'a, K, V> Clone for Iter<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> IntoIterator for &'a mut BTreeMap<K, V> {\n     type Item = (&'a K, &'a mut V);\n     type IntoIter = IterMut<'a, K, V>;\n@@ -1189,6 +1197,7 @@ impl<'a, K: 'a, V: 'a> IntoIterator for &'a mut BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> {\n     type Item = (&'a K, &'a mut V);\n \n@@ -1206,6 +1215,7 @@ impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> DoubleEndedIterator for IterMut<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a mut V)> {\n         if self.length == 0 {\n@@ -1217,6 +1227,7 @@ impl<'a, K: 'a, V: 'a> DoubleEndedIterator for IterMut<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> ExactSizeIterator for IterMut<'a, K, V> {\n     fn len(&self) -> usize {\n         self.length\n@@ -1226,6 +1237,7 @@ impl<'a, K: 'a, V: 'a> ExactSizeIterator for IterMut<'a, K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, K, V> FusedIterator for IterMut<'a, K, V> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V> IntoIterator for BTreeMap<K, V> {\n     type Item = (K, V);\n     type IntoIter = IntoIter<K, V>;\n@@ -1244,6 +1256,7 @@ impl<K, V> IntoIterator for BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"btree_drop\", since = \"1.7.0\")]\n impl<K, V> Drop for IntoIter<K, V> {\n     fn drop(&mut self) {\n         for _ in &mut *self {\n@@ -1260,6 +1273,7 @@ impl<K, V> Drop for IntoIter<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V> Iterator for IntoIter<K, V> {\n     type Item = (K, V);\n \n@@ -1304,6 +1318,7 @@ impl<K, V> Iterator for IntoIter<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V> DoubleEndedIterator for IntoIter<K, V> {\n     fn next_back(&mut self) -> Option<(K, V)> {\n         if self.length == 0 {\n@@ -1342,6 +1357,7 @@ impl<K, V> DoubleEndedIterator for IntoIter<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V> ExactSizeIterator for IntoIter<K, V> {\n     fn len(&self) -> usize {\n         self.length\n@@ -1351,6 +1367,7 @@ impl<K, V> ExactSizeIterator for IntoIter<K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<K, V> FusedIterator for IntoIter<K, V> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     type Item = &'a K;\n \n@@ -1363,12 +1380,14 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> DoubleEndedIterator for Keys<'a, K, V> {\n     fn next_back(&mut self) -> Option<&'a K> {\n         self.inner.next_back().map(|(k, _)| k)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {\n     fn len(&self) -> usize {\n         self.inner.len()\n@@ -1378,12 +1397,14 @@ impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, K, V> FusedIterator for Keys<'a, K, V> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Clone for Keys<'a, K, V> {\n     fn clone(&self) -> Keys<'a, K, V> {\n         Keys { inner: self.inner.clone() }\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Values<'a, K, V> {\n     type Item = &'a V;\n \n@@ -1396,12 +1417,14 @@ impl<'a, K, V> Iterator for Values<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> DoubleEndedIterator for Values<'a, K, V> {\n     fn next_back(&mut self) -> Option<&'a V> {\n         self.inner.next_back().map(|(_, v)| v)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {\n     fn len(&self) -> usize {\n         self.inner.len()\n@@ -1411,6 +1434,7 @@ impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, K, V> FusedIterator for Values<'a, K, V> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Clone for Values<'a, K, V> {\n     fn clone(&self) -> Values<'a, K, V> {\n         Values { inner: self.inner.clone() }\n@@ -1635,6 +1659,7 @@ impl<'a, K, V> RangeMut<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> {\n     fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> BTreeMap<K, V> {\n         let mut map = BTreeMap::new();\n@@ -1643,6 +1668,7 @@ impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Ord, V> Extend<(K, V)> for BTreeMap<K, V> {\n     #[inline]\n     fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {\n@@ -1652,12 +1678,14 @@ impl<K: Ord, V> Extend<(K, V)> for BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, K: Ord + Copy, V: Copy> Extend<(&'a K, &'a V)> for BTreeMap<K, V> {\n     fn extend<I: IntoIterator<Item = (&'a K, &'a V)>>(&mut self, iter: I) {\n         self.extend(iter.into_iter().map(|(&key, &value)| (key, value)));\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Hash, V: Hash> Hash for BTreeMap<K, V> {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n         for elt in self {\n@@ -1666,41 +1694,48 @@ impl<K: Hash, V: Hash> Hash for BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Ord, V> Default for BTreeMap<K, V> {\n     /// Creates an empty `BTreeMap<K, V>`.\n     fn default() -> BTreeMap<K, V> {\n         BTreeMap::new()\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: PartialEq, V: PartialEq> PartialEq for BTreeMap<K, V> {\n     fn eq(&self, other: &BTreeMap<K, V>) -> bool {\n         self.len() == other.len() && self.iter().zip(other).all(|(a, b)| a == b)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Eq, V: Eq> Eq for BTreeMap<K, V> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: PartialOrd, V: PartialOrd> PartialOrd for BTreeMap<K, V> {\n     #[inline]\n     fn partial_cmp(&self, other: &BTreeMap<K, V>) -> Option<Ordering> {\n         self.iter().partial_cmp(other.iter())\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Ord, V: Ord> Ord for BTreeMap<K, V> {\n     #[inline]\n     fn cmp(&self, other: &BTreeMap<K, V>) -> Ordering {\n         self.iter().cmp(other.iter())\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Debug, V: Debug> Debug for BTreeMap<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_map().entries(self.iter()).finish()\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: Ord, Q: ?Sized, V> Index<&'a Q> for BTreeMap<K, V>\n     where K: Borrow<Q>,\n           Q: Ord"}, {"sha": "c57266d9e3b4a5b013a97842bac3ef044220836a", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -779,6 +779,7 @@ impl<T: Debug> Debug for BTreeSet<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> {\n         Iter { iter: self.iter.clone() }\n@@ -864,6 +865,7 @@ fn cmp_opt<T: Ord>(x: Option<&T>, y: Option<&T>, short: Ordering, long: Ordering\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Difference<'a, T> {\n     fn clone(&self) -> Difference<'a, T> {\n         Difference {\n@@ -901,6 +903,7 @@ impl<'a, T: Ord> Iterator for Difference<'a, T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T: Ord> FusedIterator for Difference<'a, T> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for SymmetricDifference<'a, T> {\n     fn clone(&self) -> SymmetricDifference<'a, T> {\n         SymmetricDifference {\n@@ -934,6 +937,7 @@ impl<'a, T: Ord> Iterator for SymmetricDifference<'a, T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T: Ord> FusedIterator for SymmetricDifference<'a, T> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Intersection<'a, T> {\n     fn clone(&self) -> Intersection<'a, T> {\n         Intersection {\n@@ -977,6 +981,7 @@ impl<'a, T: Ord> Iterator for Intersection<'a, T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T: Ord> FusedIterator for Intersection<'a, T> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Union<'a, T> {\n     fn clone(&self) -> Union<'a, T> {\n         Union {"}, {"sha": "2d12b4ccffe01aa246611dd2afa3fb51b86052ef", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -48,7 +48,6 @@ impl<E> Clone for EnumSet<E> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<E: CLike + fmt::Debug> fmt::Debug for EnumSet<E> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         fmt.debug_set().entries(self).finish()\n@@ -277,7 +276,6 @@ impl<E: CLike> FromIterator<E> for EnumSet<E> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E> IntoIterator for &'a EnumSet<E> where E: CLike\n {\n     type Item = E;\n@@ -296,7 +294,6 @@ impl<E: CLike> Extend<E> for EnumSet<E> {\n     }\n }\n \n-#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, E: 'a + CLike + Copy> Extend<&'a E> for EnumSet<E> {\n     fn extend<I: IntoIterator<Item = &'a E>>(&mut self, iter: I) {\n         self.extend(iter.into_iter().cloned());"}, {"sha": "3c4c2c9f61ec97b48b8e88876aac29aea7050104", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -122,7 +122,7 @@ pub struct EncodeUtf16<'a> {\n     encoder: Utf16Encoder<Chars<'a>>,\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n impl<'a> Iterator for EncodeUtf16<'a> {\n     type Item = u16;\n "}, {"sha": "54fd19dbe3058cd7a310ba34077b749fb82634bb", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -1755,7 +1755,7 @@ pub struct IntoIter<T> {\n     end: *const T,\n }\n \n-#[stable(feature = \"vec_intoiter_debug\", since = \"\")]\n+#[stable(feature = \"vec_intoiter_debug\", since = \"1.13.0\")]\n impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"IntoIter\")\n@@ -1929,7 +1929,7 @@ unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a, T: Send> Send for Drain<'a, T> {}\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T> Iterator for Drain<'a, T> {\n     type Item = T;\n \n@@ -1943,15 +1943,15 @@ impl<'a, T> Iterator for Drain<'a, T> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T> DoubleEndedIterator for Drain<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back().map(|elt| unsafe { ptr::read(elt as *const _) })\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T> Drop for Drain<'a, T> {\n     fn drop(&mut self) {\n         // exhaust self first\n@@ -1973,7 +1973,7 @@ impl<'a, T> Drop for Drain<'a, T> {\n }\n \n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T> ExactSizeIterator for Drain<'a, T> {}\n \n #[unstable(feature = \"fused\", issue = \"35602\")]"}, {"sha": "cfed647f5d81c0cc8879b33cbf2f6a689ff372d8", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -2002,7 +2002,7 @@ unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a, T: Send> Send for Drain<'a, T> {}\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> Drop for Drain<'a, T> {\n     fn drop(&mut self) {\n         for _ in self.by_ref() {}\n@@ -2051,7 +2051,7 @@ impl<'a, T: 'a> Drop for Drain<'a, T> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> Iterator for Drain<'a, T> {\n     type Item = T;\n \n@@ -2066,15 +2066,15 @@ impl<'a, T: 'a> Iterator for Drain<'a, T> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back().map(|elt| unsafe { ptr::read(elt) })\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n \n #[unstable(feature = \"fused\", issue = \"35602\")]"}, {"sha": "37bd57034a7b6ed7647f13950730facff135cc82", "filename": "src/libcore/array.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -93,13 +93,15 @@ macro_rules! __impl_slice_eq2 {\n macro_rules! array_impls {\n     ($($N:expr)+) => {\n         $(\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<T> AsRef<[T]> for [T; $N] {\n                 #[inline]\n                 fn as_ref(&self) -> &[T] {\n                     &self[..]\n                 }\n             }\n \n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<T> AsMut<[T]> for [T; $N] {\n                 #[inline]\n                 fn as_mut(&mut self) -> &mut [T] {"}, {"sha": "035418570a019076033f171f1fa98feb3d218ff3", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -386,7 +386,7 @@ pub struct Cloned<I> {\n     it: I,\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n impl<'a, I, T: 'a> Iterator for Cloned<I>\n     where I: Iterator<Item=&'a T>, T: Clone\n {\n@@ -401,7 +401,7 @@ impl<'a, I, T: 'a> Iterator for Cloned<I>\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n impl<'a, I, T: 'a> DoubleEndedIterator for Cloned<I>\n     where I: DoubleEndedIterator<Item=&'a T>, T: Clone\n {\n@@ -410,7 +410,7 @@ impl<'a, I, T: 'a> DoubleEndedIterator for Cloned<I>\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n impl<'a, I, T: 'a> ExactSizeIterator for Cloned<I>\n     where I: ExactSizeIterator<Item=&'a T>, T: Clone\n {}"}, {"sha": "eaa3d50c88adedee40ca18d6f3310adc31933e94", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -328,7 +328,8 @@ impl<A: Step> ops::RangeInclusive<A> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"step_by\", reason = \"recent addition\",\n+           issue = \"27741\")]\n impl<A> Iterator for StepBy<A, ops::RangeFrom<A>> where\n     A: Clone,\n     for<'a> &'a A: Add<&'a A, Output = A>\n@@ -352,7 +353,8 @@ impl<A> Iterator for StepBy<A, ops::RangeFrom<A>> where\n impl<A> FusedIterator for StepBy<A, ops::RangeFrom<A>>\n     where A: Clone, for<'a> &'a A: Add<&'a A, Output = A> {}\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"step_by\", reason = \"recent addition\",\n+           issue = \"27741\")]\n impl<A: Step + Clone> Iterator for StepBy<A, ops::Range<A>> {\n     type Item = A;\n "}, {"sha": "9a403891ebf82b0e5feb6163ed71534c830b3173", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -2570,7 +2570,7 @@ impl fmt::Display for TryFromIntError {\n \n macro_rules! same_sign_from_int_impl {\n     ($storage:ty, $target:ty, $($source:ty),*) => {$(\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$source> for $target {\n             type Err = TryFromIntError;\n \n@@ -2600,7 +2600,7 @@ same_sign_from_int_impl!(i64, isize, i8, i16, i32, i64, isize);\n \n macro_rules! cross_sign_from_int_impl {\n     ($unsigned:ty, $($signed:ty),*) => {$(\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$unsigned> for $signed {\n             type Err = TryFromIntError;\n \n@@ -2614,7 +2614,7 @@ macro_rules! cross_sign_from_int_impl {\n             }\n         }\n \n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$signed> for $unsigned {\n             type Err = TryFromIntError;\n "}, {"sha": "2c69880dfa35ab4417808f8e8c62bafbfaef0062", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -28,7 +28,7 @@ macro_rules! sh_impl_signed {\n             }\n         }\n \n-        #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShlAssign<$f> for Wrapping<$t> {\n             #[inline(always)]\n             fn shl_assign(&mut self, other: $f) {\n@@ -50,7 +50,7 @@ macro_rules! sh_impl_signed {\n             }\n         }\n \n-        #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShrAssign<$f> for Wrapping<$t> {\n             #[inline(always)]\n             fn shr_assign(&mut self, other: $f) {\n@@ -72,7 +72,7 @@ macro_rules! sh_impl_unsigned {\n             }\n         }\n \n-        #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShlAssign<$f> for Wrapping<$t> {\n             #[inline(always)]\n             fn shl_assign(&mut self, other: $f) {\n@@ -90,7 +90,7 @@ macro_rules! sh_impl_unsigned {\n             }\n         }\n \n-        #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShrAssign<$f> for Wrapping<$t> {\n             #[inline(always)]\n             fn shr_assign(&mut self, other: $f) {"}, {"sha": "f0510422a07d7b67faf2ed6442f46bc1be5d3bed", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -761,7 +761,7 @@ impl<T:?Sized> Deref for Unique<T> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"unique\", issue = \"27730\")]\n impl<T> fmt::Pointer for Unique<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Pointer::fmt(&*self.pointer, f)"}, {"sha": "c4fe68dfa438ccbaf3a4eae467ea8c78b56886b3", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -95,7 +95,7 @@ pub struct AtomicBool {\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for AtomicBool {\n-    /// Creates an `AtomicBool` initialised as false.\n+    /// Creates an `AtomicBool` initialized to `false`.\n     fn default() -> Self {\n         Self::new(false)\n     }"}, {"sha": "c1d9240ba0634fa2243db4b0d121a1a15390ce9f", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -749,13 +749,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn plug_leaks<T>(&self,\n                          skol_map: SkolemizationMap<'tcx>,\n                          snapshot: &CombinedSnapshot,\n-                         value: &T) -> T\n+                         value: T) -> T\n         where T : TypeFoldable<'tcx>\n     {\n         debug!(\"plug_leaks(skol_map={:?}, value={:?})\",\n                skol_map,\n                value);\n \n+        if skol_map.is_empty() {\n+            return value;\n+        }\n+\n         // Compute a mapping from the \"taint set\" of each skolemized\n         // region back to the `ty::BoundRegion` that it originally\n         // represented. Because `leak_check` passed, we know that\n@@ -775,7 +779,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         // Remove any instantiated type variables from `value`; those can hide\n         // references to regions from the `fold_regions` code below.\n-        let value = self.resolve_type_vars_if_possible(value);\n+        let value = self.resolve_type_vars_if_possible(&value);\n \n         // Map any skolemization byproducts back to a late-bound\n         // region. Put that late-bound region at whatever the outermost\n@@ -813,9 +817,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         });\n \n-        debug!(\"plug_leaks: result={:?}\",\n-               result);\n-\n         self.pop_skolemized(skol_map, snapshot);\n \n         debug!(\"plug_leaks: result={:?}\", result);"}, {"sha": "ddabc53a89a8122a6821cd1371b05d3e618bd338", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -171,7 +171,7 @@ pub fn poly_project_and_unify_type<'cx, 'gcx, 'tcx>(\n             Ok(result) => {\n                 let span = obligation.cause.span;\n                 match infcx.leak_check(false, span, &skol_map, snapshot) {\n-                    Ok(()) => Ok(infcx.plug_leaks(skol_map, snapshot, &result)),\n+                    Ok(()) => Ok(infcx.plug_leaks(skol_map, snapshot, result)),\n                     Err(e) => Err(MismatchedProjectionTypes { err: e }),\n                 }\n             }"}, {"sha": "666311110971dccb35d8ac5c814b30e7c6d898d2", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -1980,7 +1980,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                                                   normalized_ty,\n                                                   &[]);\n                 obligations.push(skol_obligation);\n-                this.infcx().plug_leaks(skol_map, snapshot, &obligations)\n+                this.infcx().plug_leaks(skol_map, snapshot, obligations)\n             })\n         }).collect()\n     }\n@@ -2899,7 +2899,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     predicate: predicate.value\n                 }))\n         }).collect();\n-        self.infcx().plug_leaks(skol_map, snapshot, &predicates)\n+        self.infcx().plug_leaks(skol_map, snapshot, predicates)\n     }\n }\n "}, {"sha": "0a0d2e4347e075e1988fcc6f201b27cf742e8f22", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -605,6 +605,10 @@ impl<'a, 'b> Visitor for BuildReducedGraphVisitor<'a, 'b> {\n         let parent = self.resolver.current_module;\n         let def_id = parent.def_id().unwrap();\n \n+        if let TraitItemKind::Macro(_) = item.node {\n+            return self.visit_invoc(item.id);\n+        }\n+\n         // Add the item to the trait info.\n         let item_def_id = self.resolver.definitions.local_def_id(item.id);\n         let mut is_static_method = false;\n@@ -615,7 +619,7 @@ impl<'a, 'b> Visitor for BuildReducedGraphVisitor<'a, 'b> {\n                 (Def::Method(item_def_id), ValueNS)\n             }\n             TraitItemKind::Type(..) => (Def::AssociatedTy(item_def_id), TypeNS),\n-            TraitItemKind::Macro(_) => return self.visit_invoc(item.id),\n+            TraitItemKind::Macro(_) => bug!(),  // handled above\n         };\n \n         self.resolver.trait_item_map.insert((item.ident.name, def_id), is_static_method);"}, {"sha": "00114099c44bf2b4f69ba936657f9dfb7f8ca4c1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -2959,18 +2959,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 .emit();\n             self.tcx().types.err\n         } else {\n-            let mut err = self.type_error_struct(expr.span, |actual| {\n-                format!(\"attempted access of field `{}` on type `{}`, \\\n-                         but no field with that name was found\",\n+            let mut err = self.type_error_struct(field.span, |actual| {\n+                format!(\"no field `{}` on type `{}`\",\n                         field.node, actual)\n             }, expr_t);\n             match expr_t.sty {\n                 ty::TyAdt(def, _) if !def.is_enum() => {\n                     if let Some(suggested_field_name) =\n                         Self::suggest_field_name(def.struct_variant(), field, vec![]) {\n-                        err.span_help(field.span,\n-                                      &format!(\"did you mean `{}`?\", suggested_field_name));\n-                    };\n+                            err.span_label(field.span,\n+                                           &format!(\"did you mean `{}`?\", suggested_field_name));\n+                        } else {\n+                            err.span_label(field.span,\n+                                           &format!(\"unknown field\"));\n+                        };\n                 }\n                 ty::TyRawPtr(..) => {\n                     err.note(&format!(\"`{0}` is a native pointer; perhaps you need to deref with \\"}, {"sha": "1c7894794c9c8f6c55b3299f7f114110e5d9b8e1", "filename": "src/librustc_unicode/u_str.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -181,13 +181,16 @@ impl<I> Iterator for Utf16Encoder<I>\n impl<I> FusedIterator for Utf16Encoder<I>\n     where I: FusedIterator<Item = char> {}\n \n+#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n impl<'a> Iterator for SplitWhitespace<'a> {\n     type Item = &'a str;\n \n     fn next(&mut self) -> Option<&'a str> {\n         self.inner.next()\n     }\n }\n+\n+#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n impl<'a> DoubleEndedIterator for SplitWhitespace<'a> {\n     fn next_back(&mut self) -> Option<&'a str> {\n         self.inner.next_back()"}, {"sha": "208a5d810922aa62a725b7f37446e37a20d108e1", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -73,49 +73,49 @@ fn try_inline_def<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let did = def.def_id();\n     let inner = match def {\n         Def::Trait(did) => {\n-            record_extern_fqn(cx, did, clean::TypeTrait);\n+            record_extern_fqn(cx, did, clean::TypeKind::Trait);\n             ret.extend(build_impls(cx, tcx, did));\n             clean::TraitItem(build_external_trait(cx, tcx, did))\n         }\n         Def::Fn(did) => {\n-            record_extern_fqn(cx, did, clean::TypeFunction);\n+            record_extern_fqn(cx, did, clean::TypeKind::Function);\n             clean::FunctionItem(build_external_function(cx, tcx, did))\n         }\n         Def::Struct(did)\n                 // If this is a struct constructor, we skip it\n                 if tcx.def_key(did).disambiguated_data.data != DefPathData::StructCtor => {\n-            record_extern_fqn(cx, did, clean::TypeStruct);\n+            record_extern_fqn(cx, did, clean::TypeKind::Struct);\n             ret.extend(build_impls(cx, tcx, did));\n             clean::StructItem(build_struct(cx, tcx, did))\n         }\n         Def::Union(did) => {\n-            record_extern_fqn(cx, did, clean::TypeUnion);\n+            record_extern_fqn(cx, did, clean::TypeKind::Union);\n             ret.extend(build_impls(cx, tcx, did));\n             clean::UnionItem(build_union(cx, tcx, did))\n         }\n         Def::TyAlias(did) => {\n-            record_extern_fqn(cx, did, clean::TypeTypedef);\n+            record_extern_fqn(cx, did, clean::TypeKind::Typedef);\n             ret.extend(build_impls(cx, tcx, did));\n             clean::TypedefItem(build_type_alias(cx, tcx, did), false)\n         }\n         Def::Enum(did) => {\n-            record_extern_fqn(cx, did, clean::TypeEnum);\n+            record_extern_fqn(cx, did, clean::TypeKind::Enum);\n             ret.extend(build_impls(cx, tcx, did));\n             clean::EnumItem(build_enum(cx, tcx, did))\n         }\n         // Assume that the enum type is reexported next to the variant, and\n         // variants don't show up in documentation specially.\n         Def::Variant(..) => return Some(Vec::new()),\n         Def::Mod(did) => {\n-            record_extern_fqn(cx, did, clean::TypeModule);\n+            record_extern_fqn(cx, did, clean::TypeKind::Module);\n             clean::ModuleItem(build_module(cx, tcx, did))\n         }\n         Def::Static(did, mtbl) => {\n-            record_extern_fqn(cx, did, clean::TypeStatic);\n+            record_extern_fqn(cx, did, clean::TypeKind::Static);\n             clean::StaticItem(build_static(cx, tcx, did, mtbl))\n         }\n         Def::Const(did) | Def::AssociatedConst(did) => {\n-            record_extern_fqn(cx, did, clean::TypeConst);\n+            record_extern_fqn(cx, did, clean::TypeKind::Const);\n             clean::ConstantItem(build_const(cx, tcx, did))\n         }\n         _ => return None,\n@@ -577,7 +577,7 @@ fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics)\n             _ => true,\n         }\n     });\n-    return g;\n+    g\n }\n \n /// Supertrait bounds for a trait are also listed in the generics coming from"}, {"sha": "cf20572510b5c81eb49cda40bc89cf369976d6da", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 56, "deletions": 58, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -12,10 +12,7 @@\n //! that clean them.\n \n pub use self::Type::*;\n-pub use self::TypeKind::*;\n-pub use self::VariantKind::*;\n pub use self::Mutability::*;\n-pub use self::Import::*;\n pub use self::ItemEnum::*;\n pub use self::Attribute::*;\n pub use self::TyParamBound::*;\n@@ -319,7 +316,7 @@ impl Item {\n         match self.inner {\n             StructItem(ref _struct) => Some(_struct.fields_stripped),\n             UnionItem(ref union) => Some(union.fields_stripped),\n-            VariantItem(Variant { kind: StructVariant(ref vstruct)} ) => {\n+            VariantItem(Variant { kind: VariantKind::Struct(ref vstruct)} ) => {\n                 Some(vstruct.fields_stripped)\n             },\n             _ => None,\n@@ -688,7 +685,7 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n                 (tcx.lang_items.sync_trait().unwrap(),\n                  external_path(cx, \"Sync\", None, false, vec![], empty)),\n         };\n-        inline::record_extern_fqn(cx, did, TypeTrait);\n+        inline::record_extern_fqn(cx, did, TypeKind::Trait);\n         TraitBound(PolyTrait {\n             trait_: ResolvedPath {\n                 path: path,\n@@ -707,7 +704,7 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n             Some(tcx) => tcx,\n             None => return RegionBound(Lifetime::statik())\n         };\n-        inline::record_extern_fqn(cx, self.def_id, TypeTrait);\n+        inline::record_extern_fqn(cx, self.def_id, TypeKind::Trait);\n         let path = external_path(cx, &tcx.item_name(self.def_id).as_str(),\n                                  Some(self.def_id), true, vec![], self.substs);\n \n@@ -765,7 +762,7 @@ impl Lifetime {\n     pub fn get_ref<'a>(&'a self) -> &'a str {\n         let Lifetime(ref s) = *self;\n         let s: &'a str = s;\n-        return s;\n+        s\n     }\n \n     pub fn statik() -> Lifetime {\n@@ -1130,7 +1127,7 @@ pub struct FnDecl {\n \n impl FnDecl {\n     pub fn has_self(&self) -> bool {\n-        return self.inputs.values.len() > 0 && self.inputs.values[0].name == \"self\";\n+        self.inputs.values.len() > 0 && self.inputs.values[0].name == \"self\"\n     }\n \n     pub fn self_type(&self) -> Option<SelfTy> {\n@@ -1480,16 +1477,16 @@ pub enum PrimitiveType {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Copy, Debug)]\n pub enum TypeKind {\n-    TypeEnum,\n-    TypeFunction,\n-    TypeModule,\n-    TypeConst,\n-    TypeStatic,\n-    TypeStruct,\n-    TypeUnion,\n-    TypeTrait,\n-    TypeVariant,\n-    TypeTypedef,\n+    Enum,\n+    Function,\n+    Module,\n+    Const,\n+    Static,\n+    Struct,\n+    Union,\n+    Trait,\n+    Variant,\n+    Typedef,\n }\n \n pub trait GetDefId {\n@@ -1572,7 +1569,7 @@ impl PrimitiveType {\n         None\n     }\n \n-    pub fn to_string(&self) -> &'static str {\n+    pub fn as_str(&self) -> &'static str {\n         match *self {\n             PrimitiveType::Isize => \"isize\",\n             PrimitiveType::I8 => \"i8\",\n@@ -1597,7 +1594,7 @@ impl PrimitiveType {\n     }\n \n     pub fn to_url_str(&self) -> &'static str {\n-        self.to_string()\n+        self.as_str()\n     }\n \n     /// Creates a rustdoc-specific node id for primitive types.\n@@ -1795,9 +1792,9 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n             ty::TyAdt(def, substs) => {\n                 let did = def.did;\n                 let kind = match def.adt_kind() {\n-                    AdtKind::Struct => TypeStruct,\n-                    AdtKind::Union => TypeUnion,\n-                    AdtKind::Enum => TypeEnum,\n+                    AdtKind::Struct => TypeKind::Struct,\n+                    AdtKind::Union => TypeKind::Union,\n+                    AdtKind::Enum => TypeKind::Enum,\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n                 let path = external_path(cx, &cx.tcx().item_name(did).as_str(),\n@@ -1811,7 +1808,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n             }\n             ty::TyTrait(ref obj) => {\n                 let did = obj.principal.def_id();\n-                inline::record_extern_fqn(cx, did, TypeTrait);\n+                inline::record_extern_fqn(cx, did, TypeKind::Trait);\n \n                 let mut typarams = vec![];\n                 obj.region_bound.clean(cx).map(|b| typarams.push(RegionBound(b)));\n@@ -2027,7 +2024,7 @@ impl Clean<Item> for doctree::Variant {\n             deprecation: self.depr.clean(cx),\n             def_id: cx.map.local_def_id(self.def.id()),\n             inner: VariantItem(Variant {\n-                kind: struct_def_to_variant_kind(&self.def, cx),\n+                kind: self.def.clean(cx),\n             }),\n         }\n     }\n@@ -2036,14 +2033,14 @@ impl Clean<Item> for doctree::Variant {\n impl<'tcx> Clean<Item> for ty::VariantDefData<'tcx, 'static> {\n     fn clean(&self, cx: &DocContext) -> Item {\n         let kind = match self.kind {\n-            ty::VariantKind::Unit => CLikeVariant,\n+            ty::VariantKind::Unit => VariantKind::CLike,\n             ty::VariantKind::Tuple => {\n-                TupleVariant(\n+                VariantKind::Tuple(\n                     self.fields.iter().map(|f| f.unsubst_ty().clean(cx)).collect()\n                 )\n             }\n             ty::VariantKind::Struct => {\n-                StructVariant(VariantStruct {\n+                VariantKind::Struct(VariantStruct {\n                     struct_type: doctree::Plain,\n                     fields_stripped: false,\n                     fields: self.fields.iter().map(|field| {\n@@ -2076,18 +2073,20 @@ impl<'tcx> Clean<Item> for ty::VariantDefData<'tcx, 'static> {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum VariantKind {\n-    CLikeVariant,\n-    TupleVariant(Vec<Type>),\n-    StructVariant(VariantStruct),\n+    CLike,\n+    Tuple(Vec<Type>),\n+    Struct(VariantStruct),\n }\n \n-fn struct_def_to_variant_kind(struct_def: &hir::VariantData, cx: &DocContext) -> VariantKind {\n-    if struct_def.is_struct() {\n-        StructVariant(struct_def.clean(cx))\n-    } else if struct_def.is_unit() {\n-        CLikeVariant\n-    } else {\n-        TupleVariant(struct_def.fields().iter().map(|x| x.ty.clean(cx)).collect())\n+impl Clean<VariantKind> for hir::VariantData {\n+    fn clean(&self, cx: &DocContext) -> VariantKind {\n+        if self.is_struct() {\n+            VariantKind::Struct(self.clean(cx))\n+        } else if self.is_unit() {\n+            VariantKind::CLike\n+        } else {\n+            VariantKind::Tuple(self.fields().iter().map(|x| x.ty.clean(cx)).collect())\n+        }\n     }\n }\n \n@@ -2526,7 +2525,7 @@ impl Clean<Vec<Item>> for doctree::Import {\n         });\n         let (mut ret, inner) = match self.node {\n             hir::ViewPathGlob(ref p) => {\n-                (vec![], GlobImport(resolve_use_source(cx, p.clean(cx), self.id)))\n+                (vec![], Import::Glob(resolve_use_source(cx, p.clean(cx), self.id)))\n             }\n             hir::ViewPathList(ref p, ref list) => {\n                 // Attempt to inline all reexported items, but be sure\n@@ -2552,17 +2551,16 @@ impl Clean<Vec<Item>> for doctree::Import {\n                 if remaining.is_empty() {\n                     return ret;\n                 }\n-                (ret, ImportList(resolve_use_source(cx, p.clean(cx), self.id),\n-                                 remaining))\n+                (ret, Import::List(resolve_use_source(cx, p.clean(cx), self.id), remaining))\n             }\n             hir::ViewPathSimple(name, ref p) => {\n                 if !denied {\n                     if let Some(items) = inline::try_inline(cx, self.id, Some(name)) {\n                         return items;\n                     }\n                 }\n-                (vec![], SimpleImport(name.clean(cx),\n-                                      resolve_use_source(cx, p.clean(cx), self.id)))\n+                (vec![], Import::Simple(name.clean(cx),\n+                                        resolve_use_source(cx, p.clean(cx), self.id)))\n             }\n         };\n         ret.push(Item {\n@@ -2582,11 +2580,11 @@ impl Clean<Vec<Item>> for doctree::Import {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum Import {\n     // use source as str;\n-    SimpleImport(String, ImportSource),\n+    Simple(String, ImportSource),\n     // use source::*;\n-    GlobImport(ImportSource),\n+    Glob(ImportSource),\n     // use source::{a, b, c};\n-    ImportList(ImportSource, Vec<ViewListIdent>),\n+    List(ImportSource, Vec<ViewListIdent>),\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n@@ -2761,24 +2759,24 @@ fn register_def(cx: &DocContext, def: Def) -> DefId {\n     let tcx = cx.tcx();\n \n     let (did, kind) = match def {\n-        Def::Fn(i) => (i, TypeFunction),\n-        Def::TyAlias(i) => (i, TypeTypedef),\n-        Def::Enum(i) => (i, TypeEnum),\n-        Def::Trait(i) => (i, TypeTrait),\n-        Def::Struct(i) => (i, TypeStruct),\n-        Def::Union(i) => (i, TypeUnion),\n-        Def::Mod(i) => (i, TypeModule),\n-        Def::Static(i, _) => (i, TypeStatic),\n-        Def::Variant(i) => (tcx.parent_def_id(i).unwrap(), TypeEnum),\n-        Def::SelfTy(Some(def_id), _) => (def_id, TypeTrait),\n+        Def::Fn(i) => (i, TypeKind::Function),\n+        Def::TyAlias(i) => (i, TypeKind::Typedef),\n+        Def::Enum(i) => (i, TypeKind::Enum),\n+        Def::Trait(i) => (i, TypeKind::Trait),\n+        Def::Struct(i) => (i, TypeKind::Struct),\n+        Def::Union(i) => (i, TypeKind::Union),\n+        Def::Mod(i) => (i, TypeKind::Module),\n+        Def::Static(i, _) => (i, TypeKind::Static),\n+        Def::Variant(i) => (tcx.parent_def_id(i).unwrap(), TypeKind::Enum),\n+        Def::SelfTy(Some(def_id), _) => (def_id, TypeKind::Trait),\n         Def::SelfTy(_, Some(impl_def_id)) => {\n             return impl_def_id\n         }\n         _ => return def.def_id()\n     };\n     if did.is_local() { return did }\n     inline::record_extern_fqn(cx, did, kind);\n-    if let TypeTrait = kind {\n+    if let TypeKind::Trait = kind {\n         let t = inline::build_external_trait(cx, tcx, did);\n         cx.external_traits.borrow_mut().insert(did, t);\n     }\n@@ -2966,7 +2964,7 @@ fn lang_struct(cx: &DocContext, did: Option<DefId>,\n         Some(did) => did,\n         None => return fallback(box t.clean(cx)),\n     };\n-    inline::record_extern_fqn(cx, did, TypeStruct);\n+    inline::record_extern_fqn(cx, did, TypeKind::Struct);\n     ResolvedPath {\n         typarams: None,\n         did: did,"}, {"sha": "15e042f8c0809287fe23171d7d9d1ff5cfe06b88", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -141,7 +141,7 @@ pub fn ty_params(mut params: Vec<clean::TyParam>) -> Vec<clean::TyParam> {\n     for param in &mut params {\n         param.bounds = ty_bounds(mem::replace(&mut param.bounds, Vec::new()));\n     }\n-    return params;\n+    params\n }\n \n fn ty_bounds(bounds: Vec<clean::TyParamBound>) -> Vec<clean::TyParamBound> {"}, {"sha": "e269d940bfabf8a79931f0b4a8869ca88f654da1", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -74,12 +74,12 @@ pub trait DocFolder : Sized {\n             VariantItem(i) => {\n                 let i2 = i.clone(); // this clone is small\n                 match i.kind {\n-                    StructVariant(mut j) => {\n+                    VariantKind::Struct(mut j) => {\n                         let num_fields = j.fields.len();\n                         j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                         j.fields_stripped |= num_fields != j.fields.len() ||\n                                              j.fields.iter().any(|f| f.is_stripped());\n-                        VariantItem(Variant {kind: StructVariant(j), ..i2})\n+                        VariantItem(Variant {kind: VariantKind::Struct(j), ..i2})\n                     },\n                     _ => VariantItem(i2)\n                 }"}, {"sha": "3f7f01a9a3b51708691317dd5ae6686d3e100f25", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -457,7 +457,7 @@ impl fmt::Display for clean::Type {\n                 tybounds(f, typarams)\n             }\n             clean::Infer => write!(f, \"_\"),\n-            clean::Primitive(prim) => primitive_link(f, prim, prim.to_string()),\n+            clean::Primitive(prim) => primitive_link(f, prim, prim.as_str()),\n             clean::BareFunction(ref decl) => {\n                 write!(f, \"{}{}fn{}{}\",\n                        UnsafetySpace(decl.unsafety),\n@@ -708,17 +708,17 @@ impl fmt::Display for ConstnessSpace {\n impl fmt::Display for clean::Import {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            clean::SimpleImport(ref name, ref src) => {\n+            clean::Import::Simple(ref name, ref src) => {\n                 if *name == src.path.last_name() {\n                     write!(f, \"use {};\", *src)\n                 } else {\n                     write!(f, \"use {} as {};\", *src, *name)\n                 }\n             }\n-            clean::GlobImport(ref src) => {\n+            clean::Import::Glob(ref src) => {\n                 write!(f, \"use {}::*;\", *src)\n             }\n-            clean::ImportList(ref src, ref names) => {\n+            clean::Import::List(ref src, ref names) => {\n                 write!(f, \"use {}::{{\", *src)?;\n                 for (i, n) in names.iter().enumerate() {\n                     if i > 0 {"}, {"sha": "f584c4e2f4d9cae0b61b6ff687b866ed673bc875", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -90,16 +90,16 @@ impl<'a> From<&'a clean::Item> for ItemType {\n impl From<clean::TypeKind> for ItemType {\n     fn from(kind: clean::TypeKind) -> ItemType {\n         match kind {\n-            clean::TypeStruct   => ItemType::Struct,\n-            clean::TypeUnion    => ItemType::Union,\n-            clean::TypeEnum     => ItemType::Enum,\n-            clean::TypeFunction => ItemType::Function,\n-            clean::TypeTrait    => ItemType::Trait,\n-            clean::TypeModule   => ItemType::Module,\n-            clean::TypeStatic   => ItemType::Static,\n-            clean::TypeConst    => ItemType::Constant,\n-            clean::TypeVariant  => ItemType::Variant,\n-            clean::TypeTypedef  => ItemType::Typedef,\n+            clean::TypeKind::Struct   => ItemType::Struct,\n+            clean::TypeKind::Union    => ItemType::Union,\n+            clean::TypeKind::Enum     => ItemType::Enum,\n+            clean::TypeKind::Function => ItemType::Function,\n+            clean::TypeKind::Trait    => ItemType::Trait,\n+            clean::TypeKind::Module   => ItemType::Module,\n+            clean::TypeKind::Static   => ItemType::Static,\n+            clean::TypeKind::Const    => ItemType::Constant,\n+            clean::TypeKind::Variant  => ItemType::Variant,\n+            clean::TypeKind::Typedef  => ItemType::Typedef,\n         }\n     }\n }"}, {"sha": "5a6e167188226a660299e4b7593f745af05f0d8b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -722,7 +722,7 @@ fn write_shared(cx: &Context,\n                 ret.push(line.to_string());\n             }\n         }\n-        return Ok(ret);\n+        Ok(ret)\n     }\n \n     // Update the search index\n@@ -1208,7 +1208,7 @@ impl DocFolder for Cache {\n         self.seen_mod = orig_seen_mod;\n         self.stripped_mod = orig_stripped_mod;\n         self.parent_is_trait_impl = orig_parent_is_trait_impl;\n-        return ret;\n+        ret\n     }\n }\n \n@@ -1249,7 +1249,7 @@ impl Context {\n         self.dst = prev;\n         self.current.pop().unwrap();\n \n-        return ret;\n+        ret\n     }\n \n     /// Main method for rendering a crate.\n@@ -1450,7 +1450,7 @@ impl Context {\n         for (_, items) in &mut map {\n             items.sort();\n         }\n-        return map;\n+        map\n     }\n }\n \n@@ -1647,7 +1647,7 @@ fn full_path(cx: &Context, item: &clean::Item) -> String {\n     let mut s = cx.current.join(\"::\");\n     s.push_str(\"::\");\n     s.push_str(item.name.as_ref().unwrap());\n-    return s\n+    s\n }\n \n fn shorter<'a>(s: Option<&'a str>) -> String {\n@@ -2378,8 +2378,8 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n             match v.inner {\n                 clean::VariantItem(ref var) => {\n                     match var.kind {\n-                        clean::CLikeVariant => write!(w, \"{}\", name)?,\n-                        clean::TupleVariant(ref tys) => {\n+                        clean::VariantKind::CLike => write!(w, \"{}\", name)?,\n+                        clean::VariantKind::Tuple(ref tys) => {\n                             write!(w, \"{}(\", name)?;\n                             for (i, ty) in tys.iter().enumerate() {\n                                 if i > 0 {\n@@ -2389,7 +2389,7 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                             }\n                             write!(w, \")\")?;\n                         }\n-                        clean::StructVariant(ref s) => {\n+                        clean::VariantKind::Struct(ref s) => {\n                             render_struct(w,\n                                           v,\n                                           None,\n@@ -2429,7 +2429,7 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                    ns_id = ns_id,\n                    name = variant.name.as_ref().unwrap())?;\n             if let clean::VariantItem(ref var) = variant.inner {\n-                if let clean::TupleVariant(ref tys) = var.kind {\n+                if let clean::VariantKind::Tuple(ref tys) = var.kind {\n                     write!(w, \"(\")?;\n                     for (i, ty) in tys.iter().enumerate() {\n                         if i > 0 {\n@@ -2443,8 +2443,10 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n             write!(w, \"</code></span></span>\")?;\n             document(w, cx, variant)?;\n \n-            use clean::{Variant, StructVariant};\n-            if let clean::VariantItem( Variant { kind: StructVariant(ref s) } ) = variant.inner {\n+            use clean::{Variant, VariantKind};\n+            if let clean::VariantItem(Variant {\n+                kind: VariantKind::Struct(ref s)\n+            }) = variant.inner {\n                 write!(w, \"<h3 class='fields'>Fields</h3>\\n\n                            <table>\")?;\n                 for field in &s.fields {"}, {"sha": "006dda7d661995d9e67041b156d54765d4a48d98", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -288,15 +288,14 @@ pub fn main_args(args: &[String]) -> isize {\n                               passes.into_iter().collect(),\n                               css_file_extension,\n                               renderinfo)\n-                .expect(\"failed to generate documentation\")\n+                .expect(\"failed to generate documentation\");\n+            0\n         }\n         Some(s) => {\n             println!(\"unknown output format: {}\", s);\n-            return 1;\n+            1\n         }\n     }\n-\n-    return 0;\n }\n \n /// Looks inside the command line arguments to extract the relevant input format"}, {"sha": "1cc4f9371cb68689e02b0b3339e8731b237474fc", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -131,7 +131,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             clean::ImplItem(ref imp) if imp.trait_.is_some() => true,\n             // Struct variant fields have inherited visibility\n             clean::VariantItem(clean::Variant {\n-                kind: clean::StructVariant(..)\n+                kind: clean::VariantKind::Struct(..)\n             }) => true,\n             _ => false,\n         };"}, {"sha": "ed9efca77e7a96f03ac36d1bf025fe86cf9604ad", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -169,7 +169,7 @@ fn scrape_test_config(krate: &::rustc::hir::Crate) -> TestOptions {\n         }\n     }\n \n-    return opts;\n+    opts\n }\n \n fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n@@ -264,9 +264,9 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n         Ok(r) => {\n             match r {\n                 Err(count) => {\n-                    if count > 0 && compile_fail == false {\n+                    if count > 0 && !compile_fail {\n                         sess.fatal(\"aborting due to previous error(s)\")\n-                    } else if count == 0 && compile_fail == true {\n+                    } else if count == 0 && compile_fail {\n                         panic!(\"test compiled while it wasn't supposed to\")\n                     }\n                     if count > 0 && error_codes.len() > 0 {\n@@ -279,7 +279,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n             }\n         }\n         Err(_) => {\n-            if compile_fail == false {\n+            if !compile_fail {\n                 panic!(\"couldn't compile the test\");\n             }\n             if error_codes.len() > 0 {\n@@ -363,7 +363,7 @@ pub fn maketest(s: &str, cratename: Option<&str>, dont_insert_main: bool,\n \n     info!(\"final test program: {}\", prog);\n \n-    return prog\n+    prog\n }\n \n fn partition_source(s: &str) -> (String, String) {\n@@ -387,7 +387,7 @@ fn partition_source(s: &str) -> (String, String) {\n         }\n     }\n \n-    return (before, after);\n+    (before, after)\n }\n \n pub struct Collector {"}, {"sha": "4d1af1622724a37bdae20bb8d7e071b6e892f0b4", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -328,7 +328,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             _ => false,\n         };\n         self.view_item_stack.remove(&def_node_id);\n-        return ret;\n+        ret\n     }\n \n     pub fn visit_item(&mut self, item: &hir::Item,"}, {"sha": "3dfae976bfa7b3a6e9172f110c6d2f12dcd8f7ce", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -1598,14 +1598,14 @@ impl<'a, K, V> ExactSizeIterator for ValuesMut<'a, K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, K, V> FusedIterator for ValuesMut<'a, K, V> {}\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     type Item = (K, V);\n \n     #[inline] fn next(&mut self) -> Option<(K, V)> { self.inner.next().map(|(_, k, v)| (k, v)) }\n     #[inline] fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n     #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n@@ -2070,7 +2070,7 @@ impl Hasher for DefaultHasher {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n impl Default for RandomState {\n     /// Constructs a new `RandomState`.\n     #[inline]"}, {"sha": "f1f62bc24c509fe4486d59a94f947ce3f5cca1e9", "filename": "src/libstd/error.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -13,9 +13,9 @@\n //! # The `Error` trait\n //!\n //! `Error` is a trait representing the basic expectations for error values,\n-//! i.e. values of type `E` in `Result<T, E>`. At a minimum, errors must provide\n+//! i.e. values of type `E` in [`Result<T, E>`]. At a minimum, errors must provide\n //! a description, but they may optionally provide additional detail (via\n-//! `Display`) and cause chain information:\n+//! [`Display`]) and cause chain information:\n //!\n //! ```\n //! use std::fmt::Display;\n@@ -27,12 +27,16 @@\n //! }\n //! ```\n //!\n-//! The `cause` method is generally used when errors cross \"abstraction\n+//! The [`cause`] method is generally used when errors cross \"abstraction\n //! boundaries\", i.e.  when a one module must report an error that is \"caused\"\n //! by an error from a lower-level module. This setup makes it possible for the\n //! high-level module to provide its own errors that do not commit to any\n //! particular implementation, but also reveal some of its implementation for\n-//! debugging via `cause` chains.\n+//! debugging via [`cause`] chains.\n+//!\n+//! [`Result<T, E>`]: ../result/enum.Result.html\n+//! [`Display`]: ../fmt/trait.Display.html\n+//! [`cause`]: trait.Error.html#method.cause\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "ae0085f1044e4bb683e37e49a67592d539013765", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -10,6 +10,7 @@\n \n use io::prelude::*;\n \n+use core::convert::TryInto;\n use cmp;\n use io::{self, SeekFrom, Error, ErrorKind};\n \n@@ -242,26 +243,28 @@ impl<'a> Write for Cursor<&'a mut [u8]> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Cursor<Vec<u8>> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        let pos: usize = self.position().try_into().map_err(|_| {\n+            Error::new(ErrorKind::InvalidInput,\n+                       \"cursor position exceeds maximum possible vector length\")\n+        })?;\n         // Make sure the internal buffer is as least as big as where we\n         // currently are\n-        let pos = self.position();\n-        let amt = pos.saturating_sub(self.inner.len() as u64);\n-        // use `resize` so that the zero filling is as efficient as possible\n         let len = self.inner.len();\n-        self.inner.resize(len + amt as usize, 0);\n-\n+        if len < pos {\n+            // use `resize` so that the zero filling is as efficient as possible\n+            self.inner.resize(pos, 0);\n+        }\n         // Figure out what bytes will be used to overwrite what's currently\n         // there (left), and what will be appended on the end (right)\n         {\n-            let pos = pos as usize;\n             let space = self.inner.len() - pos;\n             let (left, right) = buf.split_at(cmp::min(space, buf.len()));\n             self.inner[pos..pos + left.len()].copy_from_slice(left);\n             self.inner.extend_from_slice(right);\n         }\n \n         // Bump us forward\n-        self.set_position(pos + buf.len() as u64);\n+        self.set_position((pos + buf.len()) as u64);\n         Ok(buf.len())\n     }\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n@@ -580,4 +583,12 @@ mod tests {\n         let mut r = Cursor::new(Vec::new());\n         assert!(r.seek(SeekFrom::End(-2)).is_err());\n     }\n+\n+    #[test]\n+    #[cfg(target_pointer_width = \"32\")]\n+    fn vec_seek_and_write_past_usize_max() {\n+        let mut c = Cursor::new(Vec::new());\n+        c.set_position(<usize>::max_value() as u64 + 1);\n+        assert!(c.write_all(&[1, 2, 3]).is_err());\n+    }\n }"}, {"sha": "73105640cd26b23bf376129fcdfe89a2fe21d229", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -1520,7 +1520,7 @@ impl<T> Take<T> {\n     /// # Ok(())\n     /// # }\n     /// ```\n-    #[unstable(feature = \"io_take_into_inner\", issue = \"0\")]\n+    #[unstable(feature = \"io_take_into_inner\", issue = \"23755\")]\n     pub fn into_inner(self) -> T {\n         self.inner\n     }"}, {"sha": "2030a61f60f38a0c9f4f113f59b7efef6ae92d78", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -277,8 +277,7 @@ impl Ipv4Addr {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(deprecated)]\n+#[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n impl fmt::Display for IpAddr {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "d86711c10ac7965c9dfcb17ab474ce8e771c3875", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -302,7 +302,7 @@ impl<'a> Parser<'a> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n impl FromStr for IpAddr {\n     type Err = AddrParseError;\n     fn from_str(s: &str) -> Result<IpAddr, AddrParseError> {"}, {"sha": "3788568a2fd27e80625daa35dfa5dc9d7496f231", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -196,9 +196,9 @@ impl<'a, T: RefUnwindSafe + ?Sized> UnwindSafe for &'a T {}\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *const T {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *mut T {}\n-#[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n+#[unstable(feature = \"unique\", issue = \"27730\")]\n impl<T: UnwindSafe> UnwindSafe for Unique<T> {}\n-#[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for Shared<T> {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: ?Sized> UnwindSafe for Mutex<T> {}"}, {"sha": "8b4da532af6f00cd3df224b888bfefed7baabb31", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -352,14 +352,12 @@ impl Iterator for Packets {\n     }\n }\n \n-#[stable(feature = \"mpsc_debug\", since = \"1.7.0\")]\n impl fmt::Debug for Select {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"Select {{ .. }}\")\n     }\n }\n \n-#[stable(feature = \"mpsc_debug\", since = \"1.7.0\")]\n impl<'rx, T:Send+'rx> fmt::Debug for Handle<'rx, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"Handle {{ .. }}\")"}, {"sha": "3a7c59d4e6d09d32e1aefbb5331fc60f8589eee8", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -161,21 +161,21 @@ impl AsRawFd for process::ChildStderr {\n     }\n }\n \n-#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for process::ChildStdin {\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n-#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for process::ChildStdout {\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n-#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for process::ChildStderr {\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()"}, {"sha": "bce32959a23c31f779a71bad76e6f7368f56e466", "filename": "src/libstd/sys/windows/ext/process.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -33,7 +33,7 @@ impl AsRawHandle for process::Child {\n     }\n }\n \n-#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawHandle for process::Child {\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n@@ -61,21 +61,21 @@ impl AsRawHandle for process::ChildStderr {\n     }\n }\n \n-#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawHandle for process::ChildStdin {\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n     }\n }\n \n-#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawHandle for process::ChildStdout {\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n     }\n }\n \n-#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawHandle for process::ChildStderr {\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n@@ -91,7 +91,7 @@ pub trait ExitStatusExt {\n     fn from_raw(raw: u32) -> Self;\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n impl ExitStatusExt for process::ExitStatus {\n     fn from_raw(raw: u32) -> Self {\n         process::ExitStatus::from_inner(From::from(raw))"}, {"sha": "0ba2db3310cdae9057e7f2c9f5cd6748f394bf46", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -417,11 +417,9 @@ impl<'a> StringReader<'a> {\n         self.last_pos = self.pos;\n         let current_byte_offset = self.byte_offset(self.pos).to_usize();\n         if current_byte_offset < self.source_text.len() {\n-            assert!(self.curr.is_some());\n             let last_char = self.curr.unwrap();\n             let ch = char_at(&self.source_text, current_byte_offset);\n-            let next = current_byte_offset + ch.len_utf8();\n-            let byte_offset_diff = next - current_byte_offset;\n+            let byte_offset_diff = ch.len_utf8();\n             self.pos = self.pos + Pos::from_usize(byte_offset_diff);\n             self.curr = Some(ch);\n             self.col = self.col + CharPos(1);\n@@ -509,11 +507,7 @@ impl<'a> StringReader<'a> {\n \n                     // line comments starting with \"///\" or \"//!\" are doc-comments\n                     let doc_comment = self.curr_is('/') || self.curr_is('!');\n-                    let start_bpos = if doc_comment {\n-                        self.pos - BytePos(3)\n-                    } else {\n-                        self.last_pos - BytePos(2)\n-                    };\n+                    let start_bpos = self.last_pos - BytePos(2);\n \n                     while !self.is_eof() {\n                         match self.curr.unwrap() {"}, {"sha": "fe8e793ed781a2a765b5e6a1e90a321f13ed9d56", "filename": "src/test/compile-fail/attempted-access-non-fatal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -11,6 +11,6 @@\n // Check that bogus field access is non-fatal\n fn main() {\n     let x = 0;\n-    let _ = x.foo; //~ ERROR attempted access of field\n-    let _ = x.bar; //~ ERROR attempted access of field\n+    let _ = x.foo; //~ no field `foo` on type `{integer}`\n+    let _ = x.bar; //~ no field `bar` on type `{integer}`\n }"}, {"sha": "ee622a17ab12c1199c189363373408b5ba2b68b7", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -112,7 +112,7 @@ fn main()\n     //~| NOTE required for the cast to the object type `Foo`\n \n     // check no error cascade\n-    let _ = main.f as *const u32; //~ ERROR attempted access of field\n+    let _ = main.f as *const u32; //~ no field `f` on type `fn() {main}`\n \n     let cf: *const Foo = &0;\n     let _ = cf as *const [u16];"}, {"sha": "553ad0a33410b221f86303347fb39320bdffc873", "filename": "src/test/compile-fail/derived-errors/issue-30580.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fderived-errors%2Fissue-30580.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fderived-errors%2Fissue-30580.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderived-errors%2Fissue-30580.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -19,7 +19,7 @@ impl<'a, 'tcx> Pass<'a, 'tcx>\n     pub fn tcx(&self) -> &'a &'tcx () { self.1 }\n     fn lol(&mut self, b: &Foo)\n     {\n-        b.c; //~ ERROR no field with that name was found\n+        b.c; //~ ERROR no field `c` on type `&Foo`\n         self.tcx();\n     }\n }"}, {"sha": "069883424222ed04322e850e2f8012e3f964574e", "filename": "src/test/compile-fail/issue-11004.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-11004.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-11004.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11004.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -14,9 +14,9 @@ struct A { x: i32, y: f64 }\n \n #[cfg(not(works))]\n unsafe fn access(n:*mut A) -> (i32, f64) {\n-    let x : i32 = n.x; //~ ERROR attempted access of field `x`\n+    let x : i32 = n.x; //~ no field `x` on type `*mut A`\n                        //~| NOTE `n` is a native pointer; perhaps you need to deref with `(*n).x`\n-    let y : f64 = n.y; //~ ERROR attempted access of field `y`\n+    let y : f64 = n.y; //~ no field `y` on type `*mut A`\n                        //~| NOTE `n` is a native pointer; perhaps you need to deref with `(*n).y`\n     (x, y)\n }"}, {"sha": "58e8e10ee37ac85210a68c89e6ba9b87d5b1b265", "filename": "src/test/compile-fail/issue-14721.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-14721.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-14721.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14721.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -10,6 +10,5 @@\n \n fn main() {\n     let foo = \"str\";\n-    println!(\"{}\", foo.desc); //~ ERROR attempted access of field `desc` on type `&str`,\n-                              //        but no field with that name was found\n+    println!(\"{}\", foo.desc); //~ no field `desc` on type `&str`\n }"}, {"sha": "864f8f6b54e7c30f6fb8cf943816c68b682bb609", "filename": "src/test/compile-fail/issue-19244-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -13,5 +13,5 @@ const STRUCT: MyStruct = MyStruct { field: 42 };\n \n fn main() {\n     let a: [isize; STRUCT.nonexistent_field];\n-    //~^ ERROR attempted access of field `nonexistent_field`\n+    //~^ no field `nonexistent_field` on type `MyStruct`\n }"}, {"sha": "86506de1ea9c5c6f7f3dbc2fd5b48840f4c3b6c7", "filename": "src/test/compile-fail/issue-21837.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-21837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-21837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21837.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Bound {}\n+pub struct Foo<T: Bound>(T);\n+\n+pub trait Trait1 {}\n+impl<T: Bound> Trait1 for Foo<T> {}\n+\n+pub trait Trait2 {}\n+impl<T> Trait2 for Foo<T> {} //~ ERROR the trait bound `T: Bound` is not satisfied\n+\n+fn main() {}"}, {"sha": "626604a87a72c1d6cd801efb8b8f92d80bc04823", "filename": "src/test/compile-fail/issue-23253.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-23253.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-23253.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23253.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -12,5 +12,5 @@ enum Foo { Bar }\n \n fn main() {\n     Foo::Bar.a;\n-    //~^ ERROR: attempted access of field `a` on type `Foo`, but no field with that name was found\n+    //~^ no field `a` on type `Foo`\n }"}, {"sha": "03cae6e64ef5e81a81b5819065602fb4f30ae246", "filename": "src/test/compile-fail/issue-24363.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-24363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-24363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24363.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    1.create_a_type_error[ //~ ERROR attempted access of field\n+    1.create_a_type_error[ //~ no field `create_a_type_error` on type `{integer}`\n         ()+() //~ ERROR binary operation `+` cannot be applied\n               //   ^ ensure that we typeck the inner expression ^\n     ];"}, {"sha": "72df6fb59990f41c7a22d3bfe79b646b5cb1b09d", "filename": "src/test/compile-fail/issue-24365.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-24365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-24365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24365.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -17,13 +17,13 @@ pub enum Foo {\n }\n \n fn test(a: Foo) {\n-    println!(\"{}\", a.b); //~ ERROR attempted access of field\n+    println!(\"{}\", a.b); //~ no field `b` on type `Foo`\n }\n \n fn main() {\n     let x = Attribute::Code {\n         attr_name_idx: 42,\n     };\n-    let z = (&x).attr_name_idx; //~ ERROR attempted access of field\n-    let y = x.attr_name_idx; //~ ERROR attempted access of field\n+    let z = (&x).attr_name_idx; //~ no field `attr_name_idx` on type `&Attribute`\n+    let y = x.attr_name_idx; //~ no field `attr_name_idx` on type `Attribute`\n }"}, {"sha": "716b0bbe77294deed07ef1166d3f0cb5aa80bf3c", "filename": "src/test/compile-fail/issue-31011.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-31011.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fissue-31011.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31011.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -11,7 +11,7 @@\n macro_rules! log {\n     ( $ctx:expr, $( $args:expr),* ) => {\n         if $ctx.trace {\n-        //~^ ERROR attempted access of field `trace` on type `&T`, but no field with that name\n+        //~^ no field `trace` on type `&T`\n             println!( $( $args, )* );\n         }\n     }"}, {"sha": "f049f69e4bba256c680b574cd3762298f86d76f9", "filename": "src/test/compile-fail/no-type-for-node-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fno-type-for-node-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fno-type-for-node-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-type-for-node-ice.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -11,5 +11,5 @@\n // Related issues: #20401, #20506, #20614, #20752, #20829, #20846, #20885, #20886\n \n fn main() {\n-    \"\".homura[\"\"]; //~ ERROR no field with that name was found\n+    \"\".homura[\"\"]; //~ no field `homura` on type `&'static str`\n }"}, {"sha": "0e30c1e86e4f214fb1f6a98ba216dfac846e6412", "filename": "src/test/compile-fail/struct-fields-typo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fstruct-fields-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fstruct-fields-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-fields-typo.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -18,7 +18,7 @@ fn main() {\n         foo: 0,\n         bar: 0.5,\n     };\n-    let x = foo.baa;//~ ERROR attempted access of field `baa` on type `BuildData`\n-    //~^ HELP did you mean `bar`?\n+    let x = foo.baa;//~ no field `baa` on type `BuildData`\n+    //~^ did you mean `bar`?\n     println!(\"{}\", x);\n }"}, {"sha": "f525ec373753d90f3bfbd21dcfc11ab11c77d38e", "filename": "src/test/compile-fail/struct-pat-derived-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fstruct-pat-derived-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Fstruct-pat-derived-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-pat-derived-error.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -15,7 +15,7 @@ struct a {\n \n impl a {\n     fn foo(&self) {\n-        let a { x, y } = self.d; //~ ERROR attempted access of field `d`\n+        let a { x, y } = self.d; //~ ERROR no field `d` on type `&a`\n         //~^ ERROR struct `a` does not have a field named `x`\n         //~^^ ERROR struct `a` does not have a field named `y`\n         //~^^^ ERROR pattern does not mention field `b`"}, {"sha": "3c355989b82f09127301e7f264b7ac10778f9430", "filename": "src/test/compile-fail/union/union-suggest-field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Funion%2Funion-suggest-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Funion%2Funion-suggest-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-suggest-field.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -22,8 +22,8 @@ fn main() {\n     let u = U { principle: 0 };\n     //~^ ERROR union `U` has no field named `principle`\n     //~| NOTE field does not exist - did you mean `principal`?\n-    let w = u.principial; //~ ERROR attempted access of field `principial` on type `U`\n-                          //~^ HELP did you mean `principal`?\n+    let w = u.principial; //~ ERROR no field `principial` on type `U`\n+                          //~^ did you mean `principal`?\n \n     let y = u.calculate; //~ ERROR attempted to take value of method `calculate` on type `U`\n                          //~^ HELP maybe a `()` to call it is missing?"}, {"sha": "15b304c69baf58413355c20056396f3acf9693ad", "filename": "src/test/compile-fail/unsafe-fn-autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Funsafe-fn-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fcompile-fail%2Funsafe-fn-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-autoderef.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -26,7 +26,7 @@ fn f(p: *const Rec) -> isize {\n     // are prohibited by various checks, such as that the enum is\n     // instantiable and so forth).\n \n-    return p.f; //~ ERROR attempted access of field `f` on type `*const Rec`\n+    return p.f; //~ ERROR no field `f` on type `*const Rec`\n }\n \n fn main() {"}, {"sha": "cb43d1274058484a7e25b20a3da3c788cb59ef6e", "filename": "src/test/incremental/struct_change_field_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -39,13 +39,13 @@ pub fn use_X() -> u32 {\n     let x: X = X { x: 22 };\n     //[cfail2]~^ ERROR struct `X` has no field named `x`\n     x.x as u32\n-    //[cfail2]~^ ERROR attempted access of field `x`\n+    //[cfail2]~^ ERROR no field `x` on type `X`\n }\n \n #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n-    //[cfail2]~^ ERROR attempted access of field `x`\n+    //[cfail2]~^ ERROR no field `x` on type `X`\n }\n \n #[rustc_clean(label=\"TypeckItemBody\", cfg=\"cfail2\")]"}, {"sha": "cd0d0951abf8a7dad94a6d87c430363b0664945f", "filename": "src/test/ui/did_you_mean/issue-36798.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    bar: u8\n+}\n+\n+fn main() {\n+    let f = Foo { bar: 22 };\n+    f.baz;\n+}"}, {"sha": "c124747c801d87dcb595a4436541dd0dec905e7e", "filename": "src/test/ui/did_you_mean/issue-36798.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -0,0 +1,8 @@\n+error: no field `baz` on type `Foo`\n+  --> $DIR/issue-36798.rs:17:7\n+   |\n+17 |     f.baz;\n+   |       ^^^ did you mean `bar`?\n+\n+error: aborting due to previous error\n+"}, {"sha": "2970a325a6af823eef177c6aaef02401cad40ecc", "filename": "src/test/ui/did_you_mean/issue-36798_unknown_field.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.rs?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    bar: u8\n+}\n+\n+fn main() {\n+    let f = Foo { bar: 22 };\n+    f.zz;\n+}"}, {"sha": "4e02f8bd0cfb2d1a81087215074cd7ebfdbc7ff5", "filename": "src/test/ui/did_you_mean/issue-36798_unknown_field.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -0,0 +1,8 @@\n+error: no field `zz` on type `Foo`\n+  --> $DIR/issue-36798_unknown_field.rs:17:7\n+   |\n+17 |     f.zz;\n+   |       ^^ unknown field\n+\n+error: aborting due to previous error\n+"}, {"sha": "48f9bac906ecf56a0108f03059234f9f346e47a8", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a9af010ebc728bc4798b1ba30de0322c1f0138a/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=4a9af010ebc728bc4798b1ba30de0322c1f0138a", "patch": "@@ -7,11 +7,11 @@ error: no method named `fake` found for type `{integer}` in the current scope\n 50 |     fake_method_stmt!();\n    |     -------------------- in this macro invocation\n \n-error: attempted access of field `fake` on type `{integer}`, but no field with that name was found\n-  --> $DIR/macro-backtrace-invalid-internals.rs:21:11\n+error: no field `fake` on type `{integer}`\n+  --> $DIR/macro-backtrace-invalid-internals.rs:21:13\n    |\n 21 |           1.fake\n-   |           ^^^^^^\n+   |             ^^^^\n ...\n 51 |     fake_field_stmt!();\n    |     ------------------- in this macro invocation\n@@ -34,11 +34,11 @@ error: no method named `fake` found for type `{integer}` in the current scope\n 54 |     let _ = fake_method_expr!();\n    |             ------------------- in this macro invocation\n \n-error: attempted access of field `fake` on type `{integer}`, but no field with that name was found\n-  --> $DIR/macro-backtrace-invalid-internals.rs:39:11\n+error: no field `fake` on type `{integer}`\n+  --> $DIR/macro-backtrace-invalid-internals.rs:39:13\n    |\n 39 |           1.fake\n-   |           ^^^^^^\n+   |             ^^^^\n ...\n 55 |     let _ = fake_field_expr!();\n    |             ------------------ in this macro invocation"}]}