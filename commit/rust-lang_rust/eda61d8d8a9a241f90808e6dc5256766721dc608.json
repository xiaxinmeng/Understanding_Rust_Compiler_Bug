{"sha": "eda61d8d8a9a241f90808e6dc5256766721dc608", "node_id": "C_kwDOAAsO6NoAKGVkYTYxZDhkOGE5YTI0MWY5MDgwOGU2ZGM1MjU2NzY2NzIxZGM2MDg", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:23:46Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:23:46Z"}, "message": "Move Result::as_deref", "tree": {"sha": "074f8384998a02fca56fc69a2b72423d685b6e7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/074f8384998a02fca56fc69a2b72423d685b6e7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eda61d8d8a9a241f90808e6dc5256766721dc608", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHN+TIACgkQ+boUO5X/\nbYLHuxAAi4urWRKhxViI6+iSnru7LBxarYlSOH0cSgz5p7YN6DePrkv3eluz4jXD\n3DEmpxOKnpTJeanlB3J0nceIb76MGN2JHAMtQ/W2CA+D8WLedOQOc6ExSuUBwSHL\nVkU0L5EsSeaaGU0anOki00AYlPtaNx9i4CHdsEEHBzXrzKdzwQE1ebmdq0ZaBYEA\n+RMCqPk8GxH9zRPhK51N+JPod+ELIJcQda6XDPtFyfgccSzh3V2B1Su8FmR77u59\nP4YDUQ7fL6HSCR7Mzqs4T+rtIaNsYw0NtD/EOTDG5HFY1q8kO2Q5nCTGARINdmA/\nFeBHq9/LtIGI1QHiLHeTnC6XqWVAP3gQ0dWt7QdYlNWdlxP90Xllv9R9ejomb7ui\nxYT4hO4rMmhDJGEDqQTUMM5NbqWMjrdp1AGH/r4NsGVXRMxigCM52I6ZkVaia5wB\nXm58COJP/yeaJ9bepkYN82CLF7LExyZe7wz1hAz+foXPCGVrCZR4WZpSsaZThgfm\ncxJDdODZt/K0N0RVogtMBWCN82nxXrpUSrdeANCZoSWd4JFc1c81nK7uvFKyTOdz\nZw9GWNKM/VyAVnib3CD+G/2Kh0B/4h8U6R6uzI5SwWTM2C9EaTaKb04MoTC/xyQE\nb5M0lF5nh51QJqJ8Up9U6zw/vuNBubF5Zjiwz5o9axypP5W5aF0=\n=zriD\n-----END PGP SIGNATURE-----", "payload": "tree 074f8384998a02fca56fc69a2b72423d685b6e7f\nparent f8d4ee7c7adcea52dfc62328309f5ef7df000266\nauthor David Tolnay <dtolnay@gmail.com> 1640888626 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1640888626 -0800\n\nMove Result::as_deref\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eda61d8d8a9a241f90808e6dc5256766721dc608", "html_url": "https://github.com/rust-lang/rust/commit/eda61d8d8a9a241f90808e6dc5256766721dc608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eda61d8d8a9a241f90808e6dc5256766721dc608/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8d4ee7c7adcea52dfc62328309f5ef7df000266", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d4ee7c7adcea52dfc62328309f5ef7df000266", "html_url": "https://github.com/rust-lang/rust/commit/f8d4ee7c7adcea52dfc62328309f5ef7df000266"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "09feb7e0eda26c1a4a7d351c63487010cb80ebc7", "filename": "library/core/src/result.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/eda61d8d8a9a241f90808e6dc5256766721dc608/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda61d8d8a9a241f90808e6dc5256766721dc608/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=eda61d8d8a9a241f90808e6dc5256766721dc608", "patch": "@@ -901,6 +901,30 @@ impl<T, E> Result<T, E> {\n         self\n     }\n \n+    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&<T as Deref>::Target, &E>`.\n+    ///\n+    /// Coerces the [`Ok`] variant of the original [`Result`] via [`Deref`](crate::ops::Deref)\n+    /// and returns the new [`Result`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x: Result<String, u32> = Ok(\"hello\".to_string());\n+    /// let y: Result<&str, &u32> = Ok(\"hello\");\n+    /// assert_eq!(x.as_deref(), y);\n+    ///\n+    /// let x: Result<String, u32> = Err(42);\n+    /// let y: Result<&str, &u32> = Err(&42);\n+    /// assert_eq!(x.as_deref(), y);\n+    /// ```\n+    #[stable(feature = \"inner_deref\", since = \"1.47.0\")]\n+    pub fn as_deref(&self) -> Result<&T::Target, &E>\n+    where\n+        T: Deref,\n+    {\n+        self.as_ref().map(|t| t.deref())\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Iterator constructors\n     /////////////////////////////////////////////////////////////////////////\n@@ -1508,29 +1532,6 @@ impl<T: Into<!>, E> Result<T, E> {\n     }\n }\n \n-impl<T: Deref, E> Result<T, E> {\n-    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&<T as Deref>::Target, &E>`.\n-    ///\n-    /// Coerces the [`Ok`] variant of the original [`Result`] via [`Deref`](crate::ops::Deref)\n-    /// and returns the new [`Result`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// let x: Result<String, u32> = Ok(\"hello\".to_string());\n-    /// let y: Result<&str, &u32> = Ok(\"hello\");\n-    /// assert_eq!(x.as_deref(), y);\n-    ///\n-    /// let x: Result<String, u32> = Err(42);\n-    /// let y: Result<&str, &u32> = Err(&42);\n-    /// assert_eq!(x.as_deref(), y);\n-    /// ```\n-    #[stable(feature = \"inner_deref\", since = \"1.47.0\")]\n-    pub fn as_deref(&self) -> Result<&T::Target, &E> {\n-        self.as_ref().map(|t| t.deref())\n-    }\n-}\n-\n impl<T: DerefMut, E> Result<T, E> {\n     /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut <T as DerefMut>::Target, &mut E>`.\n     ///"}]}