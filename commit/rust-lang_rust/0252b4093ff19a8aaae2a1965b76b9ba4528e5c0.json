{"sha": "0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "node_id": "C_kwDOAAsO6NoAKDAyNTJiNDA5M2ZmMTlhOGFhYWUyYTE5NjViNzZiOWJhNDUyOGU1YzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-15T22:54:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-15T22:54:43Z"}, "message": "Auto merge of #112681 - GuillaumeGomez:rollup-rwn4086, r=GuillaumeGomez\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #112403 (Prevent `.eh_frame` from being emitted for `-C panic=abort`)\n - #112517 (`suspicious_double_ref_op`: don't lint on `.borrow()`)\n - #112529 (Extend `unused_must_use` to cover block exprs)\n - #112614 (tweak suggestion for argument-position `impl ?Sized`)\n - #112654 (normalize closure output in equate_inputs_and_outputs)\n - #112660 (Migrate GUI colors test to original CSS color format)\n - #112664 (Add support for test tmpdir to fuchsia test runner)\n - #112669 (Fix comment for ptr alignment checks in codegen)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bbd28a869da0e03dd01081a0ea0b87e3e0af9ed7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbd28a869da0e03dd01081a0ea0b87e3e0af9ed7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "html_url": "https://github.com/rust-lang/rust/commit/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "114fb86ca08cfa6a99087e0f0bc264d03590dc37", "url": "https://api.github.com/repos/rust-lang/rust/commits/114fb86ca08cfa6a99087e0f0bc264d03590dc37", "html_url": "https://github.com/rust-lang/rust/commit/114fb86ca08cfa6a99087e0f0bc264d03590dc37"}, {"sha": "05d5449522a4318b740c8acae2f19cc064ba48a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d5449522a4318b740c8acae2f19cc064ba48a8", "html_url": "https://github.com/rust-lang/rust/commit/05d5449522a4318b740c8acae2f19cc064ba48a8"}], "stats": {"total": 791, "additions": 578, "deletions": 213}, "files": [{"sha": "ba47ebd68cbf5a6fc7c70473e148c8b815773918", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -67,7 +67,7 @@ struct ArenaChunk<T = u8> {\n \n unsafe impl<#[may_dangle] T> Drop for ArenaChunk<T> {\n     fn drop(&mut self) {\n-        unsafe { Box::from_raw(self.storage.as_mut()) };\n+        unsafe { drop(Box::from_raw(self.storage.as_mut())) }\n     }\n }\n "}, {"sha": "eec886b7be48fcd01250cc065ee559b91a68c85b", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -124,21 +124,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // Return types are a bit more complex. They may contain opaque `impl Trait` types.\n         let mir_output_ty = body.local_decls[RETURN_PLACE].ty;\n         let output_span = body.local_decls[RETURN_PLACE].source_info.span;\n-        if let Err(terr) = self.eq_types(\n-            normalized_output_ty,\n-            mir_output_ty,\n-            Locations::All(output_span),\n-            ConstraintCategory::BoringNoLocation,\n-        ) {\n-            span_mirbug!(\n-                self,\n-                Location::START,\n-                \"equate_inputs_and_outputs: `{:?}=={:?}` failed with `{:?}`\",\n-                normalized_output_ty,\n-                mir_output_ty,\n-                terr\n-            );\n-        };\n+        self.equate_normalized_input_or_output(normalized_output_ty, mir_output_ty, output_span);\n     }\n \n     #[instrument(skip(self), level = \"debug\")]"}, {"sha": "a4a8aad87269d1eaee83ec83763202d31e30ce26", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -616,7 +616,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             AssertKind::MisalignedPointerDereference { ref required, ref found } => {\n                 let required = self.codegen_operand(bx, required).immediate();\n                 let found = self.codegen_operand(bx, found).immediate();\n-                // It's `fn panic_bounds_check(index: usize, len: usize)`,\n+                // It's `fn panic_misaligned_pointer_dereference(required: usize, found: usize)`,\n                 // and `#[track_caller]` adds an implicit third argument.\n                 (LangItem::PanicMisalignedPointerDereference, vec![required, found, location])\n             }"}, {"sha": "34b7e09576af5f79014e60645ffcfffbc756f5f9", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -479,13 +479,11 @@ lint_requested_level = requested on the command line with `{$level} {$lint_name}\n lint_supertrait_as_deref_target = `{$t}` implements `Deref` with supertrait `{$target_principal}` as target\n     .label = target type is set here\n \n-lint_suspicious_double_ref_op =\n-    using `.{$call}()` on a double reference, which returns `{$ty}` instead of {$op ->\n-        *[should_not_happen] [{$op}]\n-        [deref] dereferencing\n-        [borrow] borrowing\n-        [clone] cloning\n-    } the inner type\n+lint_suspicious_double_ref_clone =\n+    using `.clone()` on a double reference, which returns `{$ty}` instead of cloning the inner type\n+\n+lint_suspicious_double_ref_deref =\n+    using `.deref()` on a double reference, which returns `{$ty}` instead of dereferencing the inner type\n \n lint_trivial_untranslatable_diag = diagnostic with static strings only\n "}, {"sha": "49597516b3601edd1e7da26beaecf1f960177bf6", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 50, "deletions": 15, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -1231,11 +1231,15 @@ pub struct NoopMethodCallDiag<'a> {\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(lint_suspicious_double_ref_op)]\n-pub struct SuspiciousDoubleRefDiag<'a> {\n-    pub call: Symbol,\n+#[diag(lint_suspicious_double_ref_deref)]\n+pub struct SuspiciousDoubleRefDerefDiag<'a> {\n+    pub ty: Ty<'a>,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_suspicious_double_ref_clone)]\n+pub struct SuspiciousDoubleRefCloneDiag<'a> {\n     pub ty: Ty<'a>,\n-    pub op: &'static str,\n }\n \n // pass_by_value.rs\n@@ -1551,8 +1555,29 @@ pub struct UnusedOp<'a> {\n     pub op: &'a str,\n     #[label]\n     pub label: Span,\n-    #[suggestion(style = \"verbose\", code = \"let _ = \", applicability = \"maybe-incorrect\")]\n-    pub suggestion: Span,\n+    #[subdiagnostic]\n+    pub suggestion: UnusedOpSuggestion,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum UnusedOpSuggestion {\n+    #[suggestion(\n+        lint_suggestion,\n+        style = \"verbose\",\n+        code = \"let _ = \",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    NormalExpr {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[multipart_suggestion(lint_suggestion, style = \"verbose\", applicability = \"maybe-incorrect\")]\n+    BlockTailExpr {\n+        #[suggestion_part(code = \"let _ = \")]\n+        before_span: Span,\n+        #[suggestion_part(code = \";\")]\n+        after_span: Span,\n+    },\n }\n \n #[derive(LintDiagnostic)]\n@@ -1595,15 +1620,25 @@ pub struct UnusedDef<'a, 'b> {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(\n-    lint_suggestion,\n-    style = \"verbose\",\n-    code = \"let _ = \",\n-    applicability = \"maybe-incorrect\"\n-)]\n-pub struct UnusedDefSuggestion {\n-    #[primary_span]\n-    pub span: Span,\n+\n+pub enum UnusedDefSuggestion {\n+    #[suggestion(\n+        lint_suggestion,\n+        style = \"verbose\",\n+        code = \"let _ = \",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    NormalExpr {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[multipart_suggestion(lint_suggestion, style = \"verbose\", applicability = \"maybe-incorrect\")]\n+    BlockTailExpr {\n+        #[suggestion_part(code = \"let _ = \")]\n+        before_span: Span,\n+        #[suggestion_part(code = \";\")]\n+        after_span: Span,\n+    },\n }\n \n // Needed because of def_path_str"}, {"sha": "d56c35bb677a5ab88d4388d18139b48658fade2a", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -1,5 +1,7 @@\n use crate::context::LintContext;\n-use crate::lints::{NoopMethodCallDiag, SuspiciousDoubleRefDiag};\n+use crate::lints::{\n+    NoopMethodCallDiag, SuspiciousDoubleRefCloneDiag, SuspiciousDoubleRefDerefDiag,\n+};\n use crate::LateContext;\n use crate::LateLintPass;\n use rustc_hir::def::DefKind;\n@@ -76,22 +78,22 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n \n         // We only care about method calls corresponding to the `Clone`, `Deref` and `Borrow`\n         // traits and ignore any other method call.\n-        let did = match cx.typeck_results().type_dependent_def(expr.hir_id) {\n-            // Verify we are dealing with a method/associated function.\n-            Some((DefKind::AssocFn, did)) => match cx.tcx.trait_of_item(did) {\n-                // Check that we're dealing with a trait method for one of the traits we care about.\n-                Some(trait_id)\n-                    if matches!(\n-                        cx.tcx.get_diagnostic_name(trait_id),\n-                        Some(sym::Borrow | sym::Clone | sym::Deref)\n-                    ) =>\n-                {\n-                    did\n-                }\n-                _ => return,\n-            },\n-            _ => return,\n+\n+        let Some((DefKind::AssocFn, did)) =\n+            cx.typeck_results().type_dependent_def(expr.hir_id)\n+        else {\n+            return;\n+        };\n+\n+        let Some(trait_id) = cx.tcx.trait_of_item(did) else { return };\n+\n+        if !matches!(\n+            cx.tcx.get_diagnostic_name(trait_id),\n+            Some(sym::Borrow | sym::Clone | sym::Deref)\n+        ) {\n+            return;\n         };\n+\n         let substs = cx\n             .tcx\n             .normalize_erasing_regions(cx.param_env, cx.typeck_results().node_substs(expr.hir_id));\n@@ -102,13 +104,6 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n         // (Re)check that it implements the noop diagnostic.\n         let Some(name) = cx.tcx.get_diagnostic_name(i.def_id()) else { return };\n \n-        let op = match name {\n-            sym::noop_method_borrow => \"borrow\",\n-            sym::noop_method_clone => \"clone\",\n-            sym::noop_method_deref => \"deref\",\n-            _ => return,\n-        };\n-\n         let receiver_ty = cx.typeck_results().expr_ty(receiver);\n         let expr_ty = cx.typeck_results().expr_ty_adjusted(expr);\n         let arg_adjustments = cx.typeck_results().expr_adjustments(receiver);\n@@ -129,11 +124,22 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n                 NoopMethodCallDiag { method: call.ident.name, receiver_ty, label: span },\n             );\n         } else {\n-            cx.emit_spanned_lint(\n-                SUSPICIOUS_DOUBLE_REF_OP,\n-                span,\n-                SuspiciousDoubleRefDiag { call: call.ident.name, ty: expr_ty, op },\n-            )\n+            match name {\n+                // If `type_of(x) == T` and `x.borrow()` is used to get `&T`,\n+                // then that should be allowed\n+                sym::noop_method_borrow => return,\n+                sym::noop_method_clone => cx.emit_spanned_lint(\n+                    SUSPICIOUS_DOUBLE_REF_OP,\n+                    span,\n+                    SuspiciousDoubleRefCloneDiag { ty: expr_ty },\n+                ),\n+                sym::noop_method_deref => cx.emit_spanned_lint(\n+                    SUSPICIOUS_DOUBLE_REF_OP,\n+                    span,\n+                    SuspiciousDoubleRefDerefDiag { ty: expr_ty },\n+                ),\n+                _ => return,\n+            }\n         }\n     }\n }"}, {"sha": "9861610612fb0c5b57db9424f65f081831247f76", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 81, "deletions": 13, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -1,7 +1,8 @@\n use crate::lints::{\n     PathStatementDrop, PathStatementDropSub, PathStatementNoEffect, UnusedAllocationDiag,\n     UnusedAllocationMutDiag, UnusedClosure, UnusedDef, UnusedDefSuggestion, UnusedDelim,\n-    UnusedDelimSuggestion, UnusedGenerator, UnusedImportBracesDiag, UnusedOp, UnusedResult,\n+    UnusedDelimSuggestion, UnusedGenerator, UnusedImportBracesDiag, UnusedOp, UnusedOpSuggestion,\n+    UnusedResult,\n };\n use crate::Lint;\n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n@@ -93,7 +94,15 @@ declare_lint_pass!(UnusedResults => [UNUSED_MUST_USE, UNUSED_RESULTS]);\n \n impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, s: &hir::Stmt<'_>) {\n-        let hir::StmtKind::Semi(expr) = s.kind else { return; };\n+        let hir::StmtKind::Semi(mut expr) = s.kind else { return; };\n+\n+        let mut expr_is_from_block = false;\n+        while let hir::ExprKind::Block(blk, ..) = expr.kind\n+            && let hir::Block { expr: Some(e), .. } = blk\n+        {\n+            expr = e;\n+            expr_is_from_block = true;\n+        }\n \n         if let hir::ExprKind::Ret(..) = expr.kind {\n             return;\n@@ -113,6 +122,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 expr.span,\n                 \"output of future returned by \",\n                 \"\",\n+                expr_is_from_block,\n             )\n         {\n             // We have a bare `foo().await;` on an opaque type from an async function that was\n@@ -125,13 +135,13 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n         let must_use_result = is_ty_must_use(cx, ty, &expr, expr.span);\n         let type_lint_emitted_or_suppressed = match must_use_result {\n             Some(path) => {\n-                emit_must_use_untranslated(cx, &path, \"\", \"\", 1, false);\n+                emit_must_use_untranslated(cx, &path, \"\", \"\", 1, false, expr_is_from_block);\n                 true\n             }\n             None => false,\n         };\n \n-        let fn_warned = check_fn_must_use(cx, expr);\n+        let fn_warned = check_fn_must_use(cx, expr, expr_is_from_block);\n \n         if !fn_warned && type_lint_emitted_or_suppressed {\n             // We don't warn about unused unit or uninhabited types.\n@@ -176,7 +186,14 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 UnusedOp {\n                     op: must_use_op,\n                     label: expr.span,\n-                    suggestion: expr.span.shrink_to_lo(),\n+                    suggestion: if expr_is_from_block {\n+                        UnusedOpSuggestion::BlockTailExpr {\n+                            before_span: expr.span.shrink_to_lo(),\n+                            after_span: expr.span.shrink_to_hi(),\n+                        }\n+                    } else {\n+                        UnusedOpSuggestion::NormalExpr { span: expr.span.shrink_to_lo() }\n+                    },\n                 },\n             );\n             op_warned = true;\n@@ -186,7 +203,11 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n             cx.emit_spanned_lint(UNUSED_RESULTS, s.span, UnusedResult { ty });\n         }\n \n-        fn check_fn_must_use(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n+        fn check_fn_must_use(\n+            cx: &LateContext<'_>,\n+            expr: &hir::Expr<'_>,\n+            expr_is_from_block: bool,\n+        ) -> bool {\n             let maybe_def_id = match expr.kind {\n                 hir::ExprKind::Call(ref callee, _) => {\n                     match callee.kind {\n@@ -207,7 +228,14 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 _ => None,\n             };\n             if let Some(def_id) = maybe_def_id {\n-                check_must_use_def(cx, def_id, expr.span, \"return value of \", \"\")\n+                check_must_use_def(\n+                    cx,\n+                    def_id,\n+                    expr.span,\n+                    \"return value of \",\n+                    \"\",\n+                    expr_is_from_block,\n+                )\n             } else {\n                 false\n             }\n@@ -350,6 +378,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n             span: Span,\n             descr_pre_path: &str,\n             descr_post_path: &str,\n+            expr_is_from_block: bool,\n         ) -> bool {\n             is_def_must_use(cx, def_id, span)\n                 .map(|must_use_path| {\n@@ -360,6 +389,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                         descr_post_path,\n                         1,\n                         false,\n+                        expr_is_from_block,\n                     )\n                 })\n                 .is_some()\n@@ -373,28 +403,59 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n             descr_post: &str,\n             plural_len: usize,\n             is_inner: bool,\n+            expr_is_from_block: bool,\n         ) {\n             let plural_suffix = pluralize!(plural_len);\n \n             match path {\n                 MustUsePath::Suppressed => {}\n                 MustUsePath::Boxed(path) => {\n                     let descr_pre = &format!(\"{}boxed \", descr_pre);\n-                    emit_must_use_untranslated(cx, path, descr_pre, descr_post, plural_len, true);\n+                    emit_must_use_untranslated(\n+                        cx,\n+                        path,\n+                        descr_pre,\n+                        descr_post,\n+                        plural_len,\n+                        true,\n+                        expr_is_from_block,\n+                    );\n                 }\n                 MustUsePath::Opaque(path) => {\n                     let descr_pre = &format!(\"{}implementer{} of \", descr_pre, plural_suffix);\n-                    emit_must_use_untranslated(cx, path, descr_pre, descr_post, plural_len, true);\n+                    emit_must_use_untranslated(\n+                        cx,\n+                        path,\n+                        descr_pre,\n+                        descr_post,\n+                        plural_len,\n+                        true,\n+                        expr_is_from_block,\n+                    );\n                 }\n                 MustUsePath::TraitObject(path) => {\n                     let descr_post = &format!(\" trait object{}{}\", plural_suffix, descr_post);\n-                    emit_must_use_untranslated(cx, path, descr_pre, descr_post, plural_len, true);\n+                    emit_must_use_untranslated(\n+                        cx,\n+                        path,\n+                        descr_pre,\n+                        descr_post,\n+                        plural_len,\n+                        true,\n+                        expr_is_from_block,\n+                    );\n                 }\n                 MustUsePath::TupleElement(elems) => {\n                     for (index, path) in elems {\n                         let descr_post = &format!(\" in tuple element {}\", index);\n                         emit_must_use_untranslated(\n-                            cx, path, descr_pre, descr_post, plural_len, true,\n+                            cx,\n+                            path,\n+                            descr_pre,\n+                            descr_post,\n+                            plural_len,\n+                            true,\n+                            expr_is_from_block,\n                         );\n                     }\n                 }\n@@ -407,6 +468,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                         descr_post,\n                         plural_len.saturating_add(usize::try_from(*len).unwrap_or(usize::MAX)),\n                         true,\n+                        expr_is_from_block,\n                     );\n                 }\n                 MustUsePath::Closure(span) => {\n@@ -433,8 +495,14 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                             cx,\n                             def_id: *def_id,\n                             note: *reason,\n-                            suggestion: (!is_inner)\n-                                .then_some(UnusedDefSuggestion { span: span.shrink_to_lo() }),\n+                            suggestion: (!is_inner).then_some(if expr_is_from_block {\n+                                UnusedDefSuggestion::BlockTailExpr {\n+                                    before_span: span.shrink_to_lo(),\n+                                    after_span: span.shrink_to_hi(),\n+                                }\n+                            } else {\n+                                UnusedDefSuggestion::NormalExpr { span: span.shrink_to_lo() }\n+                            }),\n                         },\n                     );\n                 }"}, {"sha": "d89baa9c88d8376579e793a96f4b7a217ee78533", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -14,8 +14,8 @@ use rustc_errors::{Applicability, Diagnostic, DiagnosticArgValue, IntoDiagnostic\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::WherePredicate;\n-use rustc_span::Span;\n+use rustc_hir::{PredicateOrigin, WherePredicate};\n+use rustc_span::{BytePos, Span};\n use rustc_type_ir::sty::TyKind::*;\n \n impl<'tcx> IntoDiagnosticArg for Ty<'tcx> {\n@@ -156,10 +156,11 @@ enum SuggestChangingConstraintsMessage<'a> {\n     RestrictBoundFurther,\n     RestrictType { ty: &'a str },\n     RestrictTypeFurther { ty: &'a str },\n-    RemovingQSized,\n+    RemoveMaybeUnsized,\n+    ReplaceMaybeUnsizedWithSized,\n }\n \n-fn suggest_removing_unsized_bound(\n+fn suggest_changing_unsized_bound(\n     generics: &hir::Generics<'_>,\n     suggestions: &mut Vec<(Span, String, SuggestChangingConstraintsMessage<'_>)>,\n     param: &hir::GenericParam<'_>,\n@@ -183,12 +184,25 @@ fn suggest_removing_unsized_bound(\n             if poly.trait_ref.trait_def_id() != def_id {\n                 continue;\n             }\n-            let sp = generics.span_for_bound_removal(where_pos, pos);\n-            suggestions.push((\n-                sp,\n-                String::new(),\n-                SuggestChangingConstraintsMessage::RemovingQSized,\n-            ));\n+            if predicate.origin == PredicateOrigin::ImplTrait && predicate.bounds.len() == 1 {\n+                // For `impl ?Sized` with no other bounds, suggest `impl Sized` instead.\n+                let bound_span = bound.span();\n+                if bound_span.can_be_used_for_suggestions() {\n+                    let question_span = bound_span.with_hi(bound_span.lo() + BytePos(1));\n+                    suggestions.push((\n+                        question_span,\n+                        String::new(),\n+                        SuggestChangingConstraintsMessage::ReplaceMaybeUnsizedWithSized,\n+                    ));\n+                }\n+            } else {\n+                let sp = generics.span_for_bound_removal(where_pos, pos);\n+                suggestions.push((\n+                    sp,\n+                    String::new(),\n+                    SuggestChangingConstraintsMessage::RemoveMaybeUnsized,\n+                ));\n+            }\n         }\n     }\n }\n@@ -238,14 +252,11 @@ pub fn suggest_constraining_type_params<'a>(\n         {\n             let mut sized_constraints =\n                 constraints.extract_if(|(_, def_id)| *def_id == tcx.lang_items().sized_trait());\n-            if let Some((constraint, def_id)) = sized_constraints.next() {\n+            if let Some((_, def_id)) = sized_constraints.next() {\n                 applicability = Applicability::MaybeIncorrect;\n \n-                err.span_label(\n-                    param.span,\n-                    format!(\"this type parameter needs to be `{}`\", constraint),\n-                );\n-                suggest_removing_unsized_bound(generics, &mut suggestions, param, def_id);\n+                err.span_label(param.span, \"this type parameter needs to be `Sized`\");\n+                suggest_changing_unsized_bound(generics, &mut suggestions, param, def_id);\n             }\n         }\n \n@@ -395,9 +406,12 @@ pub fn suggest_constraining_type_params<'a>(\n             SuggestChangingConstraintsMessage::RestrictTypeFurther { ty } => {\n                 Cow::from(format!(\"consider further restricting type parameter `{}`\", ty))\n             }\n-            SuggestChangingConstraintsMessage::RemovingQSized => {\n+            SuggestChangingConstraintsMessage::RemoveMaybeUnsized => {\n                 Cow::from(\"consider removing the `?Sized` bound to make the type parameter `Sized`\")\n             }\n+            SuggestChangingConstraintsMessage::ReplaceMaybeUnsizedWithSized => {\n+                Cow::from(\"consider replacing `?Sized` with `Sized`\")\n+            }\n         };\n \n         err.span_suggestion_verbose(span, msg, suggestion, applicability);"}, {"sha": "ef64f70fdf3495996e331f4d5a041990fb066b29", "filename": "compiler/rustc_mir_transform/src/check_alignment.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::{Ty, TyCtxt, TypeAndMut};\n use rustc_session::Session;\n+use rustc_target::spec::PanicStrategy;\n \n pub struct CheckAlignment;\n \n@@ -236,7 +237,11 @@ fn insert_alignment_check<'tcx>(\n                 required: Operand::Copy(alignment),\n                 found: Operand::Copy(addr),\n             }),\n-            unwind: UnwindAction::Terminate,\n+            unwind: if tcx.sess.panic_strategy() == PanicStrategy::Unwind {\n+                UnwindAction::Terminate\n+            } else {\n+                UnwindAction::Unreachable\n+            },\n         },\n     });\n }"}, {"sha": "80289ca08c3fca85aeaa84d73cb6f171e48a956d", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -308,7 +308,7 @@ mod prim_never {}\n ///\n /// ```no_run\n /// // Undefined behaviour\n-/// unsafe { char::from_u32_unchecked(0x110000) };\n+/// let _ = unsafe { char::from_u32_unchecked(0x110000) };\n /// ```\n ///\n /// USVs are also the exact set of values that may be encoded in UTF-8. Because"}, {"sha": "ee885adfeee616b5a95a6e7d9c5ddad6e0c7e6d6", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -1001,7 +1001,7 @@ fn nonnull_tagged_pointer_with_provenance() {\n     assert_eq!(p.tag(), 3);\n     assert_eq!(unsafe { *p.pointer().as_ptr() }, 10);\n \n-    unsafe { Box::from_raw(p.pointer().as_ptr()) };\n+    unsafe { drop(Box::from_raw(p.pointer().as_ptr())) };\n \n     /// A non-null pointer type which carries several bits of metadata and maintains provenance.\n     #[repr(transparent)]"}, {"sha": "80289ca08c3fca85aeaa84d73cb6f171e48a956d", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -308,7 +308,7 @@ mod prim_never {}\n ///\n /// ```no_run\n /// // Undefined behaviour\n-/// unsafe { char::from_u32_unchecked(0x110000) };\n+/// let _ = unsafe { char::from_u32_unchecked(0x110000) };\n /// ```\n ///\n /// USVs are also the exact set of values that may be encoded in UTF-8. Because"}, {"sha": "78a8a6662ea64dcb5fd5154c131f76da7280c35c", "filename": "src/ci/docker/scripts/fuchsia-test-runner.py", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -171,7 +171,6 @@ def ffx_isolate_dir(self):\n     def home_dir(self):\n         return os.path.join(self.tmp_dir(), \"user-home\")\n \n-\n     def start_ffx_isolation(self):\n         # Most of this is translated directly from ffx's isolate library\n         os.mkdir(self.ffx_isolate_dir())\n@@ -424,7 +423,7 @@ def start(self):\n         )\n \n         # Create lockfiles\n-        open(self.pm_lockfile_path(), 'a').close()\n+        open(self.pm_lockfile_path(), \"a\").close()\n \n         # Write to file\n         self.write_to_file()\n@@ -458,6 +457,7 @@ def start(self):\n         ],\n         use: [\n             {{ storage: \"data\", path: \"/data\" }},\n+            {{ storage: \"tmp\", path: \"/tmp\" }},\n             {{ protocol: [ \"fuchsia.process.Launcher\" ] }},\n             {{ protocol: [ \"fuchsia.posix.socket.Provider\" ] }}\n         ],\n@@ -571,6 +571,9 @@ def log(msg):\n                 if os.getenv(\"RUST_BACKTRACE\") == None:\n                     env_vars += f'\\n            \"RUST_BACKTRACE=0\",'\n \n+                # Use /tmp as the test temporary directory\n+                env_vars += f'\\n            \"RUST_TEST_TMPDIR=/tmp\",'\n+\n                 cml.write(\n                     self.CML_TEMPLATE.format(env_vars=env_vars, exe_name=exe_name)\n                 )\n@@ -642,7 +645,7 @@ def log(msg):\n             log(\"Publishing package to repo...\")\n \n             # Publish package to repo\n-            with open(self.pm_lockfile_path(), 'w') as pm_lockfile:\n+            with open(self.pm_lockfile_path(), \"w\") as pm_lockfile:\n                 fcntl.lockf(pm_lockfile.fileno(), fcntl.LOCK_EX)\n                 subprocess.check_call(\n                     [\n@@ -1045,9 +1048,7 @@ def print_help(args):\n     )\n     debug_parser.set_defaults(func=debug)\n \n-    syslog_parser = subparsers.add_parser(\n-        \"syslog\", help=\"prints the device syslog\"\n-    )\n+    syslog_parser = subparsers.add_parser(\"syslog\", help=\"prints the device syslog\")\n     syslog_parser.set_defaults(func=syslog)\n \n     args = parser.parse_args()"}, {"sha": "ac55ab5a8e2d1c3b20af923b7d0d0b14c0fcb6ce", "filename": "src/tools/clippy/tests/ui/transmute_ptr_to_ref.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.fixed?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::transmute_ptr_to_ref)]\n #![allow(clippy::match_single_binding)]\n+#![allow(unused_must_use)]\n \n unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n     let _: &T = &*p;\n@@ -38,7 +39,7 @@ fn _issue1231() {\n \n     type Bar<'a> = &'a u8;\n     let raw = 42 as *const i32;\n-    unsafe { &*(raw as *const u8) };\n+    let _ = unsafe { &*(raw as *const u8) };\n }\n \n unsafe fn _issue8924<'a, 'b, 'c>(x: *const &'a u32, y: *const &'b u32) -> &'c &'b u32 {"}, {"sha": "901a3e90dbecceddb53783b384127a9f7cfd5f24", "filename": "src/tools/clippy/tests/ui/transmute_ptr_to_ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::transmute_ptr_to_ref)]\n #![allow(clippy::match_single_binding)]\n+#![allow(unused_must_use)]\n \n unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n     let _: &T = std::mem::transmute(p);\n@@ -38,7 +39,7 @@ fn _issue1231() {\n \n     type Bar<'a> = &'a u8;\n     let raw = 42 as *const i32;\n-    unsafe { std::mem::transmute::<_, Bar>(raw) };\n+    let _ = unsafe { std::mem::transmute::<_, Bar>(raw) };\n }\n \n unsafe fn _issue8924<'a, 'b, 'c>(x: *const &'a u32, y: *const &'b u32) -> &'c &'b u32 {"}, {"sha": "68007edc4102877f5e466721bcbc818cfa3b095b", "filename": "src/tools/clippy/tests/ui/transmute_ptr_to_ref.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -1,133 +1,133 @@\n error: transmute from a pointer type (`*const T`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:7:17\n+  --> $DIR/transmute_ptr_to_ref.rs:8:17\n    |\n LL |     let _: &T = std::mem::transmute(p);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*p`\n    |\n    = note: `-D clippy::transmute-ptr-to-ref` implied by `-D warnings`\n \n error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:10:21\n+  --> $DIR/transmute_ptr_to_ref.rs:11:21\n    |\n LL |     let _: &mut T = std::mem::transmute(m);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *m`\n \n error: transmute from a pointer type (`*mut T`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:13:17\n+  --> $DIR/transmute_ptr_to_ref.rs:14:17\n    |\n LL |     let _: &T = std::mem::transmute(m);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*m`\n \n error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:16:21\n+  --> $DIR/transmute_ptr_to_ref.rs:17:21\n    |\n LL |     let _: &mut T = std::mem::transmute(p as *mut T);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(p as *mut T)`\n \n error: transmute from a pointer type (`*const U`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:19:17\n+  --> $DIR/transmute_ptr_to_ref.rs:20:17\n    |\n LL |     let _: &T = std::mem::transmute(o);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(o as *const T)`\n \n error: transmute from a pointer type (`*mut U`) to a reference type (`&mut T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:22:21\n+  --> $DIR/transmute_ptr_to_ref.rs:23:21\n    |\n LL |     let _: &mut T = std::mem::transmute(om);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(om as *mut T)`\n \n error: transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:25:17\n+  --> $DIR/transmute_ptr_to_ref.rs:26:17\n    |\n LL |     let _: &T = std::mem::transmute(om);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(om as *const T)`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<'_, u8>`)\n-  --> $DIR/transmute_ptr_to_ref.rs:35:32\n+  --> $DIR/transmute_ptr_to_ref.rs:36:32\n    |\n LL |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*raw.cast::<Foo<_>>()`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<'_, &u8>`)\n-  --> $DIR/transmute_ptr_to_ref.rs:37:33\n+  --> $DIR/transmute_ptr_to_ref.rs:38:33\n    |\n LL |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*raw.cast::<Foo<&_>>()`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&u8`)\n-  --> $DIR/transmute_ptr_to_ref.rs:41:14\n+  --> $DIR/transmute_ptr_to_ref.rs:42:22\n    |\n-LL |     unsafe { std::mem::transmute::<_, Bar>(raw) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const u8)`\n+LL |     let _ = unsafe { std::mem::transmute::<_, Bar>(raw) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const u8)`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:46:14\n+  --> $DIR/transmute_ptr_to_ref.rs:47:14\n    |\n LL |         0 => std::mem::transmute(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&u32>()`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:47:14\n+  --> $DIR/transmute_ptr_to_ref.rs:48:14\n    |\n LL |         1 => std::mem::transmute(y),\n    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*y.cast::<&u32>()`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:48:14\n+  --> $DIR/transmute_ptr_to_ref.rs:49:14\n    |\n LL |         2 => std::mem::transmute::<_, &&'b u32>(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&'b u32>()`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:49:14\n+  --> $DIR/transmute_ptr_to_ref.rs:50:14\n    |\n LL |         _ => std::mem::transmute::<_, &&'b u32>(y),\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*y.cast::<&'b u32>()`\n \n error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:57:19\n+  --> $DIR/transmute_ptr_to_ref.rs:58:19\n    |\n LL |     let _: &u32 = std::mem::transmute(a);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*a`\n \n error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:58:19\n+  --> $DIR/transmute_ptr_to_ref.rs:59:19\n    |\n LL |     let _: &u32 = std::mem::transmute::<_, &u32>(a);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*a.cast::<u32>()`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:60:14\n+  --> $DIR/transmute_ptr_to_ref.rs:61:14\n    |\n LL |         0 => std::mem::transmute(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&u32>()`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:61:14\n+  --> $DIR/transmute_ptr_to_ref.rs:62:14\n    |\n LL |         _ => std::mem::transmute::<_, &&'b u32>(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&'b u32>()`\n \n error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:69:19\n+  --> $DIR/transmute_ptr_to_ref.rs:70:19\n    |\n LL |     let _: &u32 = std::mem::transmute(a);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*a`\n \n error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:70:19\n+  --> $DIR/transmute_ptr_to_ref.rs:71:19\n    |\n LL |     let _: &u32 = std::mem::transmute::<_, &u32>(a);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(a as *const u32)`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:72:14\n+  --> $DIR/transmute_ptr_to_ref.rs:73:14\n    |\n LL |         0 => std::mem::transmute(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(x as *const () as *const &u32)`\n \n error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n-  --> $DIR/transmute_ptr_to_ref.rs:73:14\n+  --> $DIR/transmute_ptr_to_ref.rs:74:14\n    |\n LL |         _ => std::mem::transmute::<_, &&'b u32>(x),\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(x as *const () as *const &'b u32)`"}, {"sha": "366930a831c88473ad0e7242420c35b0edf946cf", "filename": "src/tools/miri/tests/fail/dangling_pointers/storage_dead_dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -10,7 +10,7 @@ fn fill(v: &mut i32) {\n }\n \n fn evil() {\n-    unsafe { &mut *(LEAK as *mut i32) }; //~ ERROR: is a dangling pointer\n+    let _ = unsafe { &mut *(LEAK as *mut i32) }; //~ ERROR: is a dangling pointer\n }\n \n fn main() {"}, {"sha": "6c41add60ef4afb394ba9ec60a5a0e90f62f5700", "filename": "src/tools/miri/tests/fail/dangling_pointers/storage_dead_dangling.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: dereferencing pointer failed: $HEX[noalloc] is a dangling pointer (it has no provenance)\n   --> $DIR/storage_dead_dangling.rs:LL:CC\n    |\n-LL |     unsafe { &mut *(LEAK as *mut i32) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: $HEX[noalloc] is a dangling pointer (it has no provenance)\n+LL |     let _ = unsafe { &mut *(LEAK as *mut i32) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: $HEX[noalloc] is a dangling pointer (it has no provenance)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "59781f023661c57a78cf160327d2e155a6a3a21e", "filename": "src/tools/miri/tests/fail/intrinsics/uninit_uninhabited_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -2,6 +2,6 @@\n \n #[allow(deprecated, invalid_value)]\n fn main() {\n-    unsafe { std::mem::uninitialized::<!>() };\n+    let _ = unsafe { std::mem::uninitialized::<!>() };\n     //~^ ERROR: attempted to instantiate uninhabited type `!`\n }"}, {"sha": "f2cc343032627fe0516b3588ab43f7c1a2eeb46f", "filename": "src/tools/miri/tests/fail/intrinsics/uninit_uninhabited_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -1,8 +1,8 @@\n error: abnormal termination: aborted execution: attempted to instantiate uninhabited type `!`\n   --> $DIR/uninit_uninhabited_type.rs:LL:CC\n    |\n-LL |     unsafe { std::mem::uninitialized::<!>() };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n+LL |     let _ = unsafe { std::mem::uninitialized::<!>() };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n    |\n    = note: inside `main` at $DIR/uninit_uninhabited_type.rs:LL:CC\n "}, {"sha": "e9c6e464e88cf48beb55c6e545c4a4af4eeaa60a", "filename": "src/tools/miri/tests/fail/intrinsics/zero_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -1,5 +1,5 @@\n #[allow(deprecated, invalid_value)]\n fn main() {\n-    unsafe { std::mem::zeroed::<fn()>() };\n+    let _ = unsafe { std::mem::zeroed::<fn()>() };\n     //~^ ERROR: attempted to zero-initialize type `fn()`, which is invalid\n }"}, {"sha": "77d5822804315f403c048c6c1300e388f9acefc3", "filename": "src/tools/miri/tests/fail/intrinsics/zero_fn_ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -1,8 +1,8 @@\n error: abnormal termination: aborted execution: attempted to zero-initialize type `fn()`, which is invalid\n   --> $DIR/zero_fn_ptr.rs:LL:CC\n    |\n-LL |     unsafe { std::mem::zeroed::<fn()>() };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `fn()`, which is invalid\n+LL |     let _ = unsafe { std::mem::zeroed::<fn()>() };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `fn()`, which is invalid\n    |\n    = note: inside `main` at $DIR/zero_fn_ptr.rs:LL:CC\n "}, {"sha": "1cb7bf575cbdff2e27258fc74b97099a8b12a118", "filename": "tests/run-make/panic-abort-eh_frame/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Frun-make%2Fpanic-abort-eh_frame%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Frun-make%2Fpanic-abort-eh_frame%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fpanic-abort-eh_frame%2FMakefile?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -0,0 +1,10 @@\n+# only-linux\n+#\n+# This test ensures that `panic=abort` code (without `C-unwind`, that is) should not have any\n+# unwinding related `.eh_frame` sections emitted.\n+\n+include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo.rs --crate-type=lib --emit=obj=$(TMPDIR)/foo.o -Cpanic=abort\n+\tobjdump --dwarf=frames $(TMPDIR)/foo.o | $(CGREP) -v 'DW_CFA'"}, {"sha": "e185352945538335df6f525f270d20f443d990e2", "filename": "tests/run-make/panic-abort-eh_frame/foo.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Frun-make%2Fpanic-abort-eh_frame%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Frun-make%2Fpanic-abort-eh_frame%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fpanic-abort-eh_frame%2Ffoo.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -0,0 +1,10 @@\n+#![no_std]\n+\n+#[panic_handler]\n+fn handler(_: &core::panic::PanicInfo<'_>) -> ! {\n+    loop {}\n+}\n+\n+pub unsafe fn oops(x: *const u32) -> u32 {\n+    *x\n+}"}, {"sha": "7997026dfe498f0b212bd0b03f14319ac2b1ea17", "filename": "tests/ui/const-generics/const-argument-if-length.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/const-argument-if-length.rs:15:12\n    |\n LL | pub struct AtLeastByte<T: ?Sized> {\n-   |                        - this type parameter needs to be `std::marker::Sized`\n+   |                        - this type parameter needs to be `Sized`\n LL |     value: T,\n    |            ^ doesn't have a size known at compile-time\n    |"}, {"sha": "3ba9ffebd4de6214c7ebf6492e77948899d1ab63", "filename": "tests/ui/const-generics/const-argument-if-length.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -11,7 +11,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/const-argument-if-length.rs:15:12\n    |\n LL | pub struct AtLeastByte<T: ?Sized> {\n-   |                        - this type parameter needs to be `std::marker::Sized`\n+   |                        - this type parameter needs to be `Sized`\n LL |     value: T,\n    |            ^ doesn't have a size known at compile-time\n    |"}, {"sha": "cbb7dc5e9f421c7ea370b0169b064bc0f2149d3b", "filename": "tests/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/dst-object-from-unsized-type.rs:8:23\n    |\n LL | fn test1<T: ?Sized + Foo>(t: &T) {\n-   |          - this type parameter needs to be `std::marker::Sized`\n+   |          - this type parameter needs to be `Sized`\n LL |     let u: &dyn Foo = t;\n    |                       ^ doesn't have a size known at compile-time\n    |\n@@ -17,7 +17,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/dst-object-from-unsized-type.rs:13:23\n    |\n LL | fn test2<T: ?Sized + Foo>(t: &T) {\n-   |          - this type parameter needs to be `std::marker::Sized`\n+   |          - this type parameter needs to be `Sized`\n LL |     let v: &dyn Foo = t as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |"}, {"sha": "d77076a28fab6c42c94bde27e65e899c047e00ea", "filename": "tests/ui/generic-associated-types/issue-88287.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/issue-88287.rs:34:9\n    |\n LL | type SearchFutureTy<'f, A, B: 'f>\n-   |                         - this type parameter needs to be `std::marker::Sized`\n+   |                         - this type parameter needs to be `Sized`\n ...\n LL |         async move { todo!() }\n    |         ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "d4a8c8955e233c1a50f2679d92109b22a36ea5d2", "filename": "tests/ui/issues/issue-1460.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fissues%2Fissue-1460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fissues%2Fissue-1460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-1460.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -1,8 +1,8 @@\n warning: unused closure that must be used\n-  --> $DIR/issue-1460.rs:6:5\n+  --> $DIR/issue-1460.rs:6:6\n    |\n LL |     {|i: u32| if 1 == i { }};\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "559edf0e4f23caffd685063a3a932661bbad6020", "filename": "tests/ui/lint/issue-112489.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Flint%2Fissue-112489.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Flint%2Fissue-112489.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-112489.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+use std::borrow::Borrow;\n+\n+struct S;\n+\n+trait T: Sized {\n+    fn foo(self) {}\n+}\n+\n+impl T for S {}\n+impl T for &S {}\n+\n+fn main() {\n+    let s = S;\n+    s.borrow().foo();\n+    s.foo();\n+}"}, {"sha": "642012812bd2a27417e88e7314223f91e350fb11", "filename": "tests/ui/lint/unused/must-use-block-expr.fixed", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.fixed?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -0,0 +1,36 @@\n+// run-rustfix\n+// check-pass\n+\n+#![warn(unused_must_use)]\n+\n+#[must_use]\n+fn foo() -> i32 {\n+    42\n+}\n+\n+fn bar() {\n+    {\n+        let _ = foo();\n+        //~^ WARN unused return value\n+    }\n+}\n+\n+fn baz() {\n+    {\n+        let _ = foo();\n+        //~^ WARN unused return value\n+    };\n+}\n+\n+fn main() {\n+    bar();\n+    baz();\n+    {\n+        let _ = 1 + 2;\n+        //~^ WARN unused arithmetic operation\n+    }\n+    {\n+        let _ = 1 + 2;\n+        //~^ WARN unused arithmetic operation\n+    };\n+}"}, {"sha": "e0a680aa07d088affe22ba4969e144dff7533194", "filename": "tests/ui/lint/unused/must-use-block-expr.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -0,0 +1,36 @@\n+// run-rustfix\n+// check-pass\n+\n+#![warn(unused_must_use)]\n+\n+#[must_use]\n+fn foo() -> i32 {\n+    42\n+}\n+\n+fn bar() {\n+    {\n+        foo();\n+        //~^ WARN unused return value\n+    }\n+}\n+\n+fn baz() {\n+    {\n+        foo()\n+        //~^ WARN unused return value\n+    };\n+}\n+\n+fn main() {\n+    bar();\n+    baz();\n+    {\n+        1 + 2;\n+        //~^ WARN unused arithmetic operation\n+    }\n+    {\n+        1 + 2\n+        //~^ WARN unused arithmetic operation\n+    };\n+}"}, {"sha": "d821beb1d92e74c42a43bb33bc2f15ce08e5771f", "filename": "tests/ui/lint/unused/must-use-block-expr.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fmust-use-block-expr.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -0,0 +1,51 @@\n+warning: unused return value of `foo` that must be used\n+  --> $DIR/must-use-block-expr.rs:13:9\n+   |\n+LL |         foo();\n+   |         ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/must-use-block-expr.rs:4:9\n+   |\n+LL | #![warn(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |         let _ = foo();\n+   |         +++++++\n+\n+warning: unused return value of `foo` that must be used\n+  --> $DIR/must-use-block-expr.rs:20:9\n+   |\n+LL |         foo()\n+   |         ^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |         let _ = foo();\n+   |         +++++++      +\n+\n+warning: unused arithmetic operation that must be used\n+  --> $DIR/must-use-block-expr.rs:29:9\n+   |\n+LL |         1 + 2;\n+   |         ^^^^^ the arithmetic operation produces a value\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |         let _ = 1 + 2;\n+   |         +++++++\n+\n+warning: unused arithmetic operation that must be used\n+  --> $DIR/must-use-block-expr.rs:33:9\n+   |\n+LL |         1 + 2\n+   |         ^^^^^ the arithmetic operation produces a value\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |         let _ = 1 + 2;\n+   |         +++++++      +\n+\n+warning: 4 warnings emitted\n+"}, {"sha": "e4c954eeb33d2bd3fa98af002c1e3366781bc6ba", "filename": "tests/ui/nll/issue-112604-closure-output-normalize.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fnll%2Fissue-112604-closure-output-normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fnll%2Fissue-112604-closure-output-normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-112604-closure-output-normalize.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -0,0 +1,49 @@\n+//check-pass\n+\n+use higher_kinded_types::*;\n+mod higher_kinded_types {\n+    pub(crate) trait HKT {\n+        type Of<'lt>;\n+    }\n+\n+    pub(crate) trait WithLifetime<'lt> {\n+        type T;\n+    }\n+\n+    impl<T: ?Sized + for<'any> WithLifetime<'any>> HKT for T {\n+        type Of<'lt> = <T as WithLifetime<'lt>>::T;\n+    }\n+}\n+\n+trait Trait {\n+    type Gat<'lt>;\n+}\n+\n+impl Trait for () {\n+    type Gat<'lt> = ();\n+}\n+\n+/// Same as `Trait`, but using HKTs rather than GATs\n+trait HTrait {\n+    type Hat: ?Sized + HKT;\n+}\n+\n+impl<T: Trait> HTrait for T {\n+    type Hat = dyn for<'lt> WithLifetime<'lt, T = T::Gat<'lt>>;\n+}\n+\n+impl<Hat: ?Sized + HKT> Trait for Box<dyn '_ + HTrait<Hat = Hat>> {\n+    type Gat<'lt> = Hat::Of<'lt>;\n+}\n+\n+fn existential() -> impl for<'a> Trait<Gat<'a> = ()> {}\n+\n+fn dyn_hoops<T: Trait>(\n+    _: T,\n+) -> Box<dyn HTrait<Hat = dyn for<'a> WithLifetime<'a, T = T::Gat<'a>>>> {\n+    loop {}\n+}\n+\n+fn main() {\n+    let _ = || -> _ { dyn_hoops(existential()) };\n+}"}, {"sha": "3f613d947e488d3d9a5f6cb691aa55a1b4289c77", "filename": "tests/ui/offset-of/offset-of-dst-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -70,7 +70,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/offset-of-dst-field.rs:50:5\n    |\n LL | fn generic_with_maybe_sized<T: ?Sized>() -> usize {\n-   |                             - this type parameter needs to be `std::marker::Sized`\n+   |                             - this type parameter needs to be `Sized`\n LL |     offset_of!(Delta<T>, z)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "cf5f4e530dc4e140a896a967fd8bf30bcde335ed", "filename": "tests/ui/packed/issue-27060-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fpacked%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fpacked%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpacked%2Fissue-27060-2.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/issue-27060-2.rs:3:11\n    |\n LL | pub struct Bad<T: ?Sized> {\n-   |                - this type parameter needs to be `std::marker::Sized`\n+   |                - this type parameter needs to be `Sized`\n LL |     data: T,\n    |           ^ doesn't have a size known at compile-time\n    |"}, {"sha": "d136f5ff6543fcd53d0f8c49ae93e6d5ce966917", "filename": "tests/ui/suggestions/adt-param-with-implicit-sized-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/adt-param-with-implicit-sized-bound.rs:25:9\n    |\n LL | struct Struct5<T: ?Sized>{\n-   |                - this type parameter needs to be `std::marker::Sized`\n+   |                - this type parameter needs to be `Sized`\n LL |     _t: X<T>,\n    |         ^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "eb74679d66049b0267c00408836bf9a58b083022", "filename": "tests/ui/suggestions/removal-of-multiline-trait-bound-in-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fsuggestions%2Fremoval-of-multiline-trait-bound-in-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Fsuggestions%2Fremoval-of-multiline-trait-bound-in-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fremoval-of-multiline-trait-bound-in-where-clause.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn foo<T>(foo: Wrapper<T>)\n    |        -       ^^^^^^^^^^ doesn't have a size known at compile-time\n    |        |\n-   |        this type parameter needs to be `std::marker::Sized`\n+   |        this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Wrapper`\n   --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:1:16\n@@ -33,7 +33,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn bar<T>(foo: Wrapper<T>)\n    |        -       ^^^^^^^^^^ doesn't have a size known at compile-time\n    |        |\n-   |        this type parameter needs to be `std::marker::Sized`\n+   |        this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Wrapper`\n   --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:1:16\n@@ -58,7 +58,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn qux<T>(foo: Wrapper<T>)\n    |        -       ^^^^^^^^^^ doesn't have a size known at compile-time\n    |        |\n-   |        this type parameter needs to be `std::marker::Sized`\n+   |        this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Wrapper`\n   --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:1:16"}, {"sha": "469d6a6345ed969571561583ad017001355e1fe0", "filename": "tests/ui/trait-bounds/apit-unsized.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.rs?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -0,0 +1,4 @@\n+fn foo(_: impl Iterator<Item = i32> + ?Sized) {} //~ ERROR [E0277]\n+fn bar(_: impl ?Sized) {} //~ ERROR [E0277]\n+\n+fn main() {}"}, {"sha": "0f2dc52599f632136e021b809a719ff3227a9334", "filename": "tests/ui/trait-bounds/apit-unsized.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -0,0 +1,41 @@\n+error[E0277]: the size for values of type `impl Iterator<Item = i32> + ?Sized` cannot be known at compilation time\n+  --> $DIR/apit-unsized.rs:1:8\n+   |\n+LL | fn foo(_: impl Iterator<Item = i32> + ?Sized) {}\n+   |        ^  ---------------------------------- this type parameter needs to be `Sized`\n+   |        |\n+   |        doesn't have a size known at compile-time\n+   |\n+   = help: unsized fn params are gated as an unstable feature\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL - fn foo(_: impl Iterator<Item = i32> + ?Sized) {}\n+LL + fn foo(_: impl Iterator<Item = i32>) {}\n+   |\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn foo(_: &impl Iterator<Item = i32> + ?Sized) {}\n+   |           +\n+\n+error[E0277]: the size for values of type `impl ?Sized` cannot be known at compilation time\n+  --> $DIR/apit-unsized.rs:2:8\n+   |\n+LL | fn bar(_: impl ?Sized) {}\n+   |        ^  ----------- this type parameter needs to be `Sized`\n+   |        |\n+   |        doesn't have a size known at compile-time\n+   |\n+   = help: unsized fn params are gated as an unstable feature\n+help: consider replacing `?Sized` with `Sized`\n+   |\n+LL - fn bar(_: impl ?Sized) {}\n+LL + fn bar(_: impl Sized) {}\n+   |\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn bar(_: &impl ?Sized) {}\n+   |           +\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4d45bffabce5e8ccb1a425fd9674d2d72f1a814a", "filename": "tests/ui/trait-bounds/unsized-bound.stderr", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `B` cannot be known at compilation tim\n LL | impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, B: ?Sized, {}\n    |         -                    ^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         this type parameter needs to be `std::marker::Sized`\n+   |         this type parameter needs to be `Sized`\n    |\n    = note: required because it appears within the type `(A, B)`\n note: required by a bound in `Trait`\n@@ -28,7 +28,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n LL | impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, B: ?Sized, {}\n    |      -                       ^^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n    = note: only the last element of a tuple may have a dynamically sized type\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -43,7 +43,7 @@ error[E0277]: the size for values of type `C` cannot be known at compilation tim\n LL | impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n    |                    -                               ^^^^^^^^^ doesn't have a size known at compile-time\n    |                    |\n-   |                    this type parameter needs to be `std::marker::Sized`\n+   |                    this type parameter needs to be `Sized`\n    |\n    = note: required because it appears within the type `(A, B, C)`\n note: required by a bound in `Trait`\n@@ -65,9 +65,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/unsized-bound.rs:5:52\n    |\n LL | impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n-   |      -                                             ^^^^^^^^^ doesn't have a size known at compile-time\n-   |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      - this type parameter needs to be `Sized`     ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: only the last element of a tuple may have a dynamically sized type\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -80,9 +78,7 @@ error[E0277]: the size for values of type `B` cannot be known at compilation tim\n   --> $DIR/unsized-bound.rs:5:52\n    |\n LL | impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n-   |         -                                          ^^^^^^^^^ doesn't have a size known at compile-time\n-   |         |\n-   |         this type parameter needs to be `std::marker::Sized`\n+   |         - this type parameter needs to be `Sized`  ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: only the last element of a tuple may have a dynamically sized type\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -97,7 +93,7 @@ error[E0277]: the size for values of type `B` cannot be known at compilation tim\n LL | impl<A: ?Sized, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n    |                 -                             ^^^^^^ doesn't have a size known at compile-time\n    |                 |\n-   |                 this type parameter needs to be `std::marker::Sized`\n+   |                 this type parameter needs to be `Sized`\n    |\n    = note: required because it appears within the type `(A, B)`\n note: required by a bound in `Trait2`\n@@ -121,7 +117,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n LL | impl<A: ?Sized, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n    |      -                                        ^^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n    = note: only the last element of a tuple may have a dynamically sized type\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -136,7 +132,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n LL | impl<A> Trait3<A> for A where A: ?Sized {}\n    |      -                ^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Trait3`\n   --> $DIR/unsized-bound.rs:13:14\n@@ -159,7 +155,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n LL | impl<A: ?Sized> Trait4<A> for A {}\n    |      -                        ^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Trait4`\n   --> $DIR/unsized-bound.rs:16:14\n@@ -182,7 +178,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | impl<X, Y> Trait5<X, Y> for X where X: ?Sized {}\n    |      -                      ^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Trait5`\n   --> $DIR/unsized-bound.rs:19:14\n@@ -205,7 +201,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | impl<X: ?Sized, Y> Trait6<X, Y> for X {}\n    |      -                              ^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Trait6`\n   --> $DIR/unsized-bound.rs:22:14\n@@ -228,7 +224,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n LL | impl<X, Y> Trait7<X, Y> for X where Y: ?Sized {}\n    |         -  ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         this type parameter needs to be `std::marker::Sized`\n+   |         this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Trait7`\n   --> $DIR/unsized-bound.rs:25:17\n@@ -251,7 +247,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n LL | impl<X, Y: ?Sized> Trait8<X, Y> for X {}\n    |         -          ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         this type parameter needs to be `std::marker::Sized`\n+   |         this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Trait8`\n   --> $DIR/unsized-bound.rs:28:17"}, {"sha": "f3a4c6890337756cfce3e3e31db056eedb83b39b", "filename": "tests/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `U` cannot be known at compilation tim\n   --> $DIR/suggest-where-clause.rs:7:20\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n-   |                       - this type parameter needs to be `std::marker::Sized`\n+   |                       - this type parameter needs to be `Sized`\n LL |     // suggest a where-clause, if needed\n LL |     mem::size_of::<U>();\n    |                    ^ doesn't have a size known at compile-time\n@@ -19,7 +19,7 @@ error[E0277]: the size for values of type `U` cannot be known at compilation tim\n   --> $DIR/suggest-where-clause.rs:10:20\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n-   |                       - this type parameter needs to be `std::marker::Sized`\n+   |                       - this type parameter needs to be `Sized`\n ...\n LL |     mem::size_of::<Misc<U>>();\n    |                    ^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "0a79f8bba01a0950611380d4003a5ce03f8f082c", "filename": "tests/ui/union/union-sized-field.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-sized-field.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/union-sized-field.rs:4:12\n    |\n LL | union Foo<T: ?Sized> {\n-   |           - this type parameter needs to be `std::marker::Sized`\n+   |           - this type parameter needs to be `Sized`\n LL |     value: ManuallyDrop<T>,\n    |            ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -28,7 +28,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/union-sized-field.rs:9:12\n    |\n LL | struct Foo2<T: ?Sized> {\n-   |             - this type parameter needs to be `std::marker::Sized`\n+   |             - this type parameter needs to be `Sized`\n LL |     value: ManuallyDrop<T>,\n    |            ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -54,7 +54,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/union-sized-field.rs:15:11\n    |\n LL | enum Foo3<T: ?Sized> {\n-   |           - this type parameter needs to be `std::marker::Sized`\n+   |           - this type parameter needs to be `Sized`\n LL |     Value(ManuallyDrop<T>),\n    |           ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "daef984404a7951bcdc553283cf4a3568e458827", "filename": "tests/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn foo<T: ?Sized>() { bar::<T>() }\n    |        -                    ^ doesn't have a size known at compile-time\n    |        |\n-   |        this type parameter needs to be `std::marker::Sized`\n+   |        this type parameter needs to be `Sized`\n    |\n note: required by a bound in `bar`\n   --> $DIR/unsized-bare-typaram.rs:1:8"}, {"sha": "9e6408e8143677ab18121182efbf50ce08780173", "filename": "tests/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-enum.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         -                          ^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         this type parameter needs to be `std::marker::Sized`\n+   |         this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Foo`\n   --> $DIR/unsized-enum.rs:4:10"}, {"sha": "71cf782120e575a8c0d4896db78cb37cfd24db05", "filename": "tests/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-enum2.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `W` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:23:8\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |        - this type parameter needs to be `std::marker::Sized`\n+   |        - this type parameter needs to be `Sized`\n LL |     // parameter\n LL |     VA(W),\n    |        ^ doesn't have a size known at compile-time\n@@ -27,7 +27,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:25:11\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |                   - this type parameter needs to be `std::marker::Sized`\n+   |                   - this type parameter needs to be `Sized`\n ...\n LL |     VB{x: X},\n    |           ^ doesn't have a size known at compile-time\n@@ -52,7 +52,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:27:15\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |                              - this type parameter needs to be `std::marker::Sized`\n+   |                              - this type parameter needs to be `Sized`\n ...\n LL |     VC(isize, Y),\n    |               ^ doesn't have a size known at compile-time\n@@ -77,7 +77,7 @@ error[E0277]: the size for values of type `Z` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:29:21\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |                                         - this type parameter needs to be `std::marker::Sized`\n+   |                                         - this type parameter needs to be `Sized`\n ...\n LL |     VD{u: isize, x: Z},\n    |                     ^ doesn't have a size known at compile-time"}, {"sha": "0f6fadde19a05a54dae6577377a328aeb6d07a0f", "filename": "tests/ui/unsized/unsized-fn-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-fn-arg.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn f<T: ?Sized>(t: T) {}\n    |      -          ^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n    = help: unsized fn params are gated as an unstable feature\n help: consider removing the `?Sized` bound to make the type parameter `Sized`"}, {"sha": "9e5ad92eb04cd010d82a61940ef5a054dfa14241", "filename": "tests/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | impl<X: ?Sized> S5<X> {\n    |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `S5`\n   --> $DIR/unsized-inherent-impl-self-type.rs:5:11"}, {"sha": "4e7cb09f0ccafcc83c9e0af57828bf1caad6e600", "filename": "tests/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-struct.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         -                          ^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         this type parameter needs to be `std::marker::Sized`\n+   |         this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Foo`\n   --> $DIR/unsized-struct.rs:4:12\n@@ -30,7 +30,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n    |         -                         ^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         this type parameter needs to be `std::marker::Sized`\n+   |         this type parameter needs to be `Sized`\n    |\n note: required because it appears within the type `Bar<T>`\n   --> $DIR/unsized-struct.rs:11:8"}, {"sha": "4955d463fc26f0b4a6326a7db9df9c1a8ee07f40", "filename": "tests/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | impl<X: ?Sized> T3<X> for S5<X> {\n    |      -                    ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `S5`\n   --> $DIR/unsized-trait-impl-self-type.rs:8:11"}, {"sha": "8761c293af46515a44b33109b32424d04d029fc5", "filename": "tests/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | impl<X: ?Sized> T2<X> for S4<X> {\n    |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `T2`\n   --> $DIR/unsized-trait-impl-trait-arg.rs:4:10"}, {"sha": "3ef9a875358c0f1c6d5201df7568e3de04de7718", "filename": "tests/ui/unsized/unsized3.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized3.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:7:13\n    |\n LL | fn f1<X: ?Sized>(x: &X) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n LL |     f2::<X>(x);\n    |     ------- ^ doesn't have a size known at compile-time\n    |     |\n@@ -27,7 +27,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:18:13\n    |\n LL | fn f3<X: ?Sized + T>(x: &X) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n LL |     f4::<X>(x);\n    |     ------- ^ doesn't have a size known at compile-time\n    |     |\n@@ -52,7 +52,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:33:8\n    |\n LL | fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n LL |     f5(x1);\n    |     -- ^^ doesn't have a size known at compile-time\n    |     |\n@@ -82,7 +82,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:40:5\n    |\n LL | fn f9<X: ?Sized>(x1: Box<S<X>>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n LL |     f5(&(*x1, 34));\n    |     ^^ doesn't have a size known at compile-time\n    |\n@@ -102,7 +102,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:45:9\n    |\n LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n-   |        - this type parameter needs to be `std::marker::Sized`\n+   |        - this type parameter needs to be `Sized`\n LL |     f5(&(32, *x1));\n    |         ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -123,7 +123,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:45:8\n    |\n LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n-   |        - this type parameter needs to be `std::marker::Sized`\n+   |        - this type parameter needs to be `Sized`\n LL |     f5(&(32, *x1));\n    |     -- ^^^^^^^^^^ doesn't have a size known at compile-time\n    |     |"}, {"sha": "53e7fc17ef9f360d065bb94bc36f093f8578cfb8", "filename": "tests/ui/unsized/unsized5.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized5.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:4:9\n    |\n LL | struct S1<X: ?Sized> {\n-   |           - this type parameter needs to be `std::marker::Sized`\n+   |           - this type parameter needs to be `Sized`\n LL |     f1: X,\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -26,7 +26,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:10:8\n    |\n LL | struct S2<X: ?Sized> {\n-   |           - this type parameter needs to be `std::marker::Sized`\n+   |           - this type parameter needs to be `Sized`\n LL |     f: isize,\n LL |     g: X,\n    |        ^ doesn't have a size known at compile-time\n@@ -87,7 +87,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:25:8\n    |\n LL | enum E<X: ?Sized> {\n-   |        - this type parameter needs to be `std::marker::Sized`\n+   |        - this type parameter needs to be `Sized`\n LL |     V1(X, isize),\n    |        ^ doesn't have a size known at compile-time\n    |\n@@ -111,7 +111,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:29:12\n    |\n LL | enum F<X: ?Sized> {\n-   |        - this type parameter needs to be `std::marker::Sized`\n+   |        - this type parameter needs to be `Sized`\n LL |     V2{f1: X, f: isize},\n    |            ^ doesn't have a size known at compile-time\n    |"}, {"sha": "56e7f60f9ff0852733310eda559977f47bed49fb", "filename": "tests/ui/unsized/unsized6.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized6.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:9:9\n    |\n LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   |                             - this type parameter needs to be `std::marker::Sized`\n+   |                             - this type parameter needs to be `Sized`\n ...\n LL |     let y: Y;\n    |         ^ doesn't have a size known at compile-time\n@@ -23,7 +23,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:7:12\n    |\n LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   |                  - this type parameter needs to be `std::marker::Sized`\n+   |                  - this type parameter needs to be `Sized`\n LL |     let _: W; // <-- this is OK, no bindings created, no initializer.\n LL |     let _: (isize, (X, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -39,7 +39,7 @@ error[E0277]: the size for values of type `Z` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:11:12\n    |\n LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   |                                        - this type parameter needs to be `std::marker::Sized`\n+   |                                        - this type parameter needs to be `Sized`\n ...\n LL |     let y: (isize, (Z, usize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -55,7 +55,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:15:9\n    |\n LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n LL |     let y: X;\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -75,7 +75,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:17:12\n    |\n LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n-   |                  - this type parameter needs to be `std::marker::Sized`\n+   |                  - this type parameter needs to be `Sized`\n ...\n LL |     let y: (isize, (Y, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -91,7 +91,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:22:9\n    |\n LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -111,7 +111,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:24:9\n    |\n LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n ...\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n@@ -128,7 +128,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:26:10\n    |\n LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n ...\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n@@ -145,7 +145,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:30:9\n    |\n LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -165,7 +165,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:32:9\n    |\n LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n ...\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n@@ -182,7 +182,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:34:10\n    |\n LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n ...\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n@@ -201,7 +201,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | fn g1<X: ?Sized>(x: X) {}\n    |       -          ^ doesn't have a size known at compile-time\n    |       |\n-   |       this type parameter needs to be `std::marker::Sized`\n+   |       this type parameter needs to be `Sized`\n    |\n    = help: unsized fn params are gated as an unstable feature\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -220,7 +220,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | fn g2<X: ?Sized + T>(x: X) {}\n    |       -              ^ doesn't have a size known at compile-time\n    |       |\n-   |       this type parameter needs to be `std::marker::Sized`\n+   |       this type parameter needs to be `Sized`\n    |\n    = help: unsized fn params are gated as an unstable feature\n help: consider removing the `?Sized` bound to make the type parameter `Sized`"}, {"sha": "c313a2724c038a74d47851674f26c8a231190187", "filename": "tests/ui/unsized/unsized7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0252b4093ff19a8aaae2a1965b76b9ba4528e5c0/tests%2Fui%2Funsized%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized7.stderr?ref=0252b4093ff19a8aaae2a1965b76b9ba4528e5c0", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n    |      -              ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `T1`\n   --> $DIR/unsized7.rs:7:10"}]}