{"sha": "9626f2bd84ccf99635dfdbca3da782db3596190a", "node_id": "C_kwDOAAsO6NoAKDk2MjZmMmJkODRjY2Y5OTYzNWRmZGJjYTNkYTc4MmRiMzU5NjE5MGE", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-10-02T20:18:11Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-10-03T12:33:14Z"}, "message": "Fix extra `non_snake_case` warning for shorthand field bindings", "tree": {"sha": "9a81eb5b3e7aabb74af2834e9e4c0a43b3fd2266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a81eb5b3e7aabb74af2834e9e4c0a43b3fd2266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9626f2bd84ccf99635dfdbca3da782db3596190a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9626f2bd84ccf99635dfdbca3da782db3596190a", "html_url": "https://github.com/rust-lang/rust/commit/9626f2bd84ccf99635dfdbca3da782db3596190a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9626f2bd84ccf99635dfdbca3da782db3596190a/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edebf77e0090195bf80c0d8cda821e1bf9d03053", "url": "https://api.github.com/repos/rust-lang/rust/commits/edebf77e0090195bf80c0d8cda821e1bf9d03053", "html_url": "https://github.com/rust-lang/rust/commit/edebf77e0090195bf80c0d8cda821e1bf9d03053"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "bcddc4f3d7643b539b23e67f92704537ba034b2e", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9626f2bd84ccf99635dfdbca3da782db3596190a/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9626f2bd84ccf99635dfdbca3da782db3596190a/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=9626f2bd84ccf99635dfdbca3da782db3596190a", "patch": "@@ -437,12 +437,13 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n             if let hir::Node::Pat(parent_pat) = cx.tcx.hir().get(cx.tcx.hir().get_parent_node(hid))\n             {\n                 if let PatKind::Struct(_, field_pats, _) = &parent_pat.kind {\n-                    for field in field_pats.iter() {\n-                        if field.ident != ident {\n-                            // Only check if a new name has been introduced, to avoid warning\n-                            // on both the struct definition and this pattern.\n-                            self.check_snake_case(cx, \"variable\", &ident);\n-                        }\n+                    if field_pats\n+                        .iter()\n+                        .any(|field| !field.is_shorthand && field.pat.hir_id == p.hir_id)\n+                    {\n+                        // Only check if a new name has been introduced, to avoid warning\n+                        // on both the struct definition and this pattern.\n+                        self.check_snake_case(cx, \"variable\", &ident);\n                     }\n                     return;\n                 }"}, {"sha": "3a6ab452840acbea313677cfb5d0bc3c4c8cdfba", "filename": "src/test/ui/lint/issue-89469.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9626f2bd84ccf99635dfdbca3da782db3596190a/src%2Ftest%2Fui%2Flint%2Fissue-89469.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9626f2bd84ccf99635dfdbca3da782db3596190a/src%2Ftest%2Fui%2Flint%2Fissue-89469.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-89469.rs?ref=9626f2bd84ccf99635dfdbca3da782db3596190a", "patch": "@@ -0,0 +1,20 @@\n+// Regression test for #89469, where an extra non_snake_case warning was\n+// reported for a shorthand field binding.\n+\n+// check-pass\n+#![deny(non_snake_case)]\n+\n+#[allow(non_snake_case)]\n+struct Entry {\n+    A: u16,\n+    a: u16\n+}\n+\n+fn foo() -> Entry {todo!()}\n+\n+pub fn f() {\n+    let Entry { A, a } = foo();\n+    let _ = (A, a);\n+}\n+\n+fn main() {}"}]}