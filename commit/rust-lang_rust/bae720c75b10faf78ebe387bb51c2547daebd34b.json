{"sha": "bae720c75b10faf78ebe387bb51c2547daebd34b", "node_id": "C_kwDOAAsO6NoAKGJhZTcyMGM3NWIxMGZhZjc4ZWJlMzg3YmI1MWMyNTQ3ZGFlYmQzNGI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-10T23:56:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-10T23:56:19Z"}, "message": "add ptr_offset_from OOB test, and update test errors", "tree": {"sha": "dd9c229cf5995b06491cc2917b9abe1e612ff094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd9c229cf5995b06491cc2917b9abe1e612ff094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bae720c75b10faf78ebe387bb51c2547daebd34b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bae720c75b10faf78ebe387bb51c2547daebd34b", "html_url": "https://github.com/rust-lang/rust/commit/bae720c75b10faf78ebe387bb51c2547daebd34b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bae720c75b10faf78ebe387bb51c2547daebd34b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a35877b5f102f9da3d7e7d6aac3800a96b549de9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a35877b5f102f9da3d7e7d6aac3800a96b549de9", "html_url": "https://github.com/rust-lang/rust/commit/a35877b5f102f9da3d7e7d6aac3800a96b549de9"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "8f32ad1a760ffb4745f43936b8f420ec41c649a2", "filename": "tests/compile-fail/intrinsics/copy_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bae720c75b10faf78ebe387bb51c2547daebd34b/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae720c75b10faf78ebe387bb51c2547daebd34b/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_null.rs?ref=bae720c75b10faf78ebe387bb51c2547daebd34b", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     let mut data = [0u16; 4];\n     let ptr = &mut data[0] as *mut u16;\n     // Even copying 0 elements from NULL should error.\n-    unsafe { copy_nonoverlapping(std::ptr::null(), ptr, 0); } //~ ERROR: memory access failed: 0x0 is not a valid pointer\n+    unsafe { copy_nonoverlapping(std::ptr::null(), ptr, 0); } //~ ERROR: memory access failed: null pointer is not a valid pointer\n }"}, {"sha": "248d85d65e24b4d9bcff8c6db80c67ebe908c44b", "filename": "tests/compile-fail/intrinsics/ptr_offset_0_plus_0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bae720c75b10faf78ebe387bb51c2547daebd34b/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_0_plus_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae720c75b10faf78ebe387bb51c2547daebd34b/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_0_plus_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_0_plus_0.rs?ref=bae720c75b10faf78ebe387bb51c2547daebd34b", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: pointer arithmetic failed: 0x0 is not a valid pointer\n+// error-pattern: pointer arithmetic failed: null pointer is not a valid pointer\n \n fn main() {\n     let x = 0 as *mut i32;"}, {"sha": "ef1ca1e2729d6d22f22d785c7610632bf63f29fc", "filename": "tests/compile-fail/intrinsics/ptr_offset_from_oob.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bae720c75b10faf78ebe387bb51c2547daebd34b/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_from_oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae720c75b10faf78ebe387bb51c2547daebd34b/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_from_oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_from_oob.rs?ref=bae720c75b10faf78ebe387bb51c2547daebd34b", "patch": "@@ -0,0 +1,11 @@\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::ptr_offset_from;\n+\n+fn main() {\n+    let start_ptr = &4 as *const _ as *const u8;\n+    let length = 10;\n+    let end_ptr = start_ptr.wrapping_add(length);\n+    // Even if the offset is 0, a dangling OOB pointer is not allowed.\n+    unsafe { ptr_offset_from(end_ptr, end_ptr) }; //~ERROR pointer at offset 10 is out-of-bounds\n+}"}, {"sha": "60966f0a94c0d257952b1640e05ce893614136a9", "filename": "tests/compile-fail/intrinsics/write_bytes_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bae720c75b10faf78ebe387bb51c2547daebd34b/tests%2Fcompile-fail%2Fintrinsics%2Fwrite_bytes_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae720c75b10faf78ebe387bb51c2547daebd34b/tests%2Fcompile-fail%2Fintrinsics%2Fwrite_bytes_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fwrite_bytes_null.rs?ref=bae720c75b10faf78ebe387bb51c2547daebd34b", "patch": "@@ -6,5 +6,5 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { write_bytes::<u8>(std::ptr::null_mut(), 0, 0) }; //~ ERROR memory access failed: 0x0 is not a valid pointer\n+    unsafe { write_bytes::<u8>(std::ptr::null_mut(), 0, 0) }; //~ ERROR memory access failed: null pointer is not a valid pointer\n }"}, {"sha": "f3830c078e5e7da788889734ccd13b3d595677b1", "filename": "tests/compile-fail/null_pointer_deref_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bae720c75b10faf78ebe387bb51c2547daebd34b/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae720c75b10faf78ebe387bb51c2547daebd34b/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.rs?ref=bae720c75b10faf78ebe387bb51c2547daebd34b", "patch": "@@ -3,6 +3,6 @@\n \n #[allow(deref_nullptr)]\n fn main() {\n-    let x: () = unsafe { *std::ptr::null() }; //~ ERROR dereferencing pointer failed: 0x0 is not a valid pointer\n+    let x: () = unsafe { *std::ptr::null() }; //~ ERROR dereferencing pointer failed: null pointer is not a valid pointer\n     panic!(\"this should never print: {:?}\", x);\n }"}, {"sha": "63474d9651756444bce8152e0dc09587c99ffab5", "filename": "tests/compile-fail/null_pointer_write_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bae720c75b10faf78ebe387bb51c2547daebd34b/tests%2Fcompile-fail%2Fnull_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae720c75b10faf78ebe387bb51c2547daebd34b/tests%2Fcompile-fail%2Fnull_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_write_zst.rs?ref=bae720c75b10faf78ebe387bb51c2547daebd34b", "patch": "@@ -1,6 +1,6 @@\n // Some optimizations remove ZST accesses, thus masking this UB.\n // compile-flags: -Zmir-opt-level=0\n-// error-pattern: memory access failed: 0x0 is not a valid pointer\n+// error-pattern: memory access failed: null pointer is not a valid pointer\n \n #[allow(deref_nullptr)]\n fn main() {"}]}