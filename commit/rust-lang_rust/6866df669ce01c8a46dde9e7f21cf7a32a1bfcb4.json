{"sha": "6866df669ce01c8a46dde9e7f21cf7a32a1bfcb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NjZkZjY2OWNlMDFjOGE0NmRkZTllN2YyMWNmN2EzMmExYmZjYjQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-11T04:41:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-11T04:41:38Z"}, "message": "Rollup merge of #39721 - whataloadofwhat:catch-unwind-bang, r=alexcrichton\n\nChange std::panicking::try::Data into a union\n\nNo longer potentially call `mem::uninitialized::<!>()`\n\nFixes #39432", "tree": {"sha": "e7e48729e89a52f43d0bc321bebc990f49ac0b8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7e48729e89a52f43d0bc321bebc990f49ac0b8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6866df669ce01c8a46dde9e7f21cf7a32a1bfcb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6866df669ce01c8a46dde9e7f21cf7a32a1bfcb4", "html_url": "https://github.com/rust-lang/rust/commit/6866df669ce01c8a46dde9e7f21cf7a32a1bfcb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6866df669ce01c8a46dde9e7f21cf7a32a1bfcb4/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fd89adcaa54bac1314186de66890a74c8ffe179", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fd89adcaa54bac1314186de66890a74c8ffe179", "html_url": "https://github.com/rust-lang/rust/commit/0fd89adcaa54bac1314186de66890a74c8ffe179"}, {"sha": "ca92c516820e760173c40a9cbb42daef8111c93e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca92c516820e760173c40a9cbb42daef8111c93e", "html_url": "https://github.com/rust-lang/rust/commit/ca92c516820e760173c40a9cbb42daef8111c93e"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "070690773b6c4792a05dc525ce790c9d1cdc72ce", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6866df669ce01c8a46dde9e7f21cf7a32a1bfcb4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6866df669ce01c8a46dde9e7f21cf7a32a1bfcb4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6866df669ce01c8a46dde9e7f21cf7a32a1bfcb4", "patch": "@@ -303,6 +303,7 @@\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unique)]\n+#![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n #![feature(vec_push_all)]\n #![feature(zero_one)]"}, {"sha": "3fba49345e63d1e5ee34cf8f63cc483f44492353", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6866df669ce01c8a46dde9e7f21cf7a32a1bfcb4/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6866df669ce01c8a46dde9e7f21cf7a32a1bfcb4/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=6866df669ce01c8a46dde9e7f21cf7a32a1bfcb4", "patch": "@@ -389,48 +389,41 @@ pub use realstd::rt::update_panic_count;\n \n /// Invoke a closure, capturing the cause of an unwinding panic if one occurs.\n pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<Any + Send>> {\n-    struct Data<F, R> {\n+    #[allow(unions_with_drop_fields)]\n+    union Data<F, R> {\n         f: F,\n         r: R,\n     }\n \n     // We do some sketchy operations with ownership here for the sake of\n-    // performance. The `Data` structure is never actually fully valid, but\n-    // instead it always contains at least one uninitialized field. We can only\n-    // pass pointers down to `__rust_maybe_catch_panic` (can't pass objects by\n-    // value), so we do all the ownership tracking here manully.\n+    // performance. We can only  pass pointers down to\n+    // `__rust_maybe_catch_panic` (can't pass objects by value), so we do all\n+    // the ownership tracking here manually using a union.\n     //\n-    // Note that this is all invalid if any of these functions unwind, but the\n-    // whole point of this function is to prevent that! As a result we go\n-    // through a transition where:\n+    // We go through a transition where:\n     //\n-    // * First, only the closure we're going to call is initialized. The return\n-    //   value is uninitialized.\n+    // * First, we set the data to be the closure that we're going to call.\n     // * When we make the function call, the `do_call` function below, we take\n-    //   ownership of the function pointer, replacing it with uninitialized\n-    //   data. At this point the `Data` structure is entirely uninitialized, but\n-    //   it won't drop due to an unwind because it's owned on the other side of\n-    //   the catch panic.\n+    //   ownership of the function pointer. At this point the `Data` union is\n+    //   entirely uninitialized.\n     // * If the closure successfully returns, we write the return value into the\n     //   data's return slot. Note that `ptr::write` is used as it's overwriting\n     //   uninitialized data.\n     // * Finally, when we come back out of the `__rust_maybe_catch_panic` we're\n     //   in one of two states:\n     //\n     //      1. The closure didn't panic, in which case the return value was\n-    //         filled in. We have to be careful to `forget` the closure,\n-    //         however, as ownership was passed to the `do_call` function.\n+    //         filled in. We move it out of `data` and return it.\n     //      2. The closure panicked, in which case the return value wasn't\n-    //         filled in. In this case the entire `data` structure is invalid,\n-    //         so we forget the entire thing.\n+    //         filled in. In this case the entire `data` union is invalid, so\n+    //         there is no need to drop anything.\n     //\n     // Once we stack all that together we should have the \"most efficient'\n     // method of calling a catch panic whilst juggling ownership.\n     let mut any_data = 0;\n     let mut any_vtable = 0;\n     let mut data = Data {\n         f: f,\n-        r: mem::uninitialized(),\n     };\n \n     let r = __rust_maybe_catch_panic(do_call::<F, R>,\n@@ -439,12 +432,9 @@ pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<Any + Send>> {\n                                      &mut any_vtable);\n \n     return if r == 0 {\n-        let Data { f, r } = data;\n-        mem::forget(f);\n         debug_assert!(update_panic_count(0) == 0);\n-        Ok(r)\n+        Ok(data.r)\n     } else {\n-        mem::forget(data);\n         update_panic_count(-1);\n         debug_assert!(update_panic_count(0) == 0);\n         Err(mem::transmute(raw::TraitObject {"}, {"sha": "df54ec90022ee80d1f29932e715f04c250218169", "filename": "src/test/run-pass/catch-unwind-bang.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6866df669ce01c8a46dde9e7f21cf7a32a1bfcb4/src%2Ftest%2Frun-pass%2Fcatch-unwind-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6866df669ce01c8a46dde9e7f21cf7a32a1bfcb4/src%2Ftest%2Frun-pass%2Fcatch-unwind-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcatch-unwind-bang.rs?ref=6866df669ce01c8a46dde9e7f21cf7a32a1bfcb4", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn worker() -> ! {\n+    panic!()\n+}\n+\n+fn main() {\n+    std::panic::catch_unwind(worker).unwrap_err();\n+}"}]}