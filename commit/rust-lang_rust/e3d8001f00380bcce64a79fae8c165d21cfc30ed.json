{"sha": "e3d8001f00380bcce64a79fae8c165d21cfc30ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZDgwMDFmMDAzODBiY2NlNjRhNzlmYWU4YzE2NWQyMWNmYzMwZWQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-06-23T19:50:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-23T19:50:59Z"}, "message": "Fix typos pointed out by @varkor\n\nCo-Authored-By: varkor <github@varkor.com>", "tree": {"sha": "3b9b5b6bdec54b39b781d1bdd79c020b009f4a5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b9b5b6bdec54b39b781d1bdd79c020b009f4a5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3d8001f00380bcce64a79fae8c165d21cfc30ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdD9gjCRBK7hj4Ov3rIwAAdHIIACxH8/o+UUSNDwHHDoMoL4sA\nLtPBLSFQHUYhbB8L207SekeC4519y//svtWUDQmUe8Vq7zZCKQGHlN5ITxxrxuXN\n88/sx1dm9TjwYW9DEy/j+fsgRklK2i788/CdBqN638RB583ZjHyy9hOKPB2g/SBm\nsXpmwvypJEMRjy6nlx0VImfTho8egfwycRsR7+GTD1UUqfCPKFSYaC0L5pPTESFr\n/xBMX9Y8XCLAuMwhihZVcsJeNbRBwirr6DD/5Oo6x82rhT/8M/RiaYnvShYEs/ju\n2wS7M5jdFtVeDNeAJbnveKTINW8JMHz5B2/io1rMTsAtjiMHsTU2eTwvjwSDe1k=\n=dd/d\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b9b5b6bdec54b39b781d1bdd79c020b009f4a5e\nparent 93aa60b4bf50ec619f6f55bb5cd6d27ea280a573\nauthor Aaron Hill <aa1ronham@gmail.com> 1561319459 -0400\ncommitter GitHub <noreply@github.com> 1561319459 -0400\n\nFix typos pointed out by @varkor\n\nCo-Authored-By: varkor <github@varkor.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d8001f00380bcce64a79fae8c165d21cfc30ed", "html_url": "https://github.com/rust-lang/rust/commit/e3d8001f00380bcce64a79fae8c165d21cfc30ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3d8001f00380bcce64a79fae8c165d21cfc30ed/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93aa60b4bf50ec619f6f55bb5cd6d27ea280a573", "url": "https://api.github.com/repos/rust-lang/rust/commits/93aa60b4bf50ec619f6f55bb5cd6d27ea280a573", "html_url": "https://github.com/rust-lang/rust/commit/93aa60b4bf50ec619f6f55bb5cd6d27ea280a573"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "c43a375c56782a3d4cc1231e89affa89be83e7ac", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e3d8001f00380bcce64a79fae8c165d21cfc30ed/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d8001f00380bcce64a79fae8c165d21cfc30ed/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=e3d8001f00380bcce64a79fae8c165d21cfc30ed", "patch": "@@ -371,14 +371,14 @@ struct RegionResolutionVisitor<'tcx> {\n \n     // The number of expressions and patterns visited in the current body\n     expr_and_pat_count: usize,\n-    // When this is 'true', we record the Scopes we encounter\n+    // When this is `true`, we record the `Scopes` we encounter\n     // when processing a Yield expression. This allows us to fix\n     // up their indices.\n     pessimistic_yield: bool,\n     // Stores scopes when pessimistic_yield is true.\n     // Each time we encounter an ExprKind::AssignOp, we push\n-    // a new Vec into the outermost Vec. This inner Vec is uesd\n-    // to store any scopes we encounter when visiting the inenr expressions\n+    // a new Vec into the outermost Vec. This inner Vec is used\n+    // to store any scopes we encounter when visiting the inner expressions\n     // of the AssignOp. Once we finish visiting the inner expressions, we pop\n     // off the inner Vec, and process the Scopes it contains.\n     // This allows us to handle nested AssignOps - while a terrible idea,\n@@ -963,9 +963,9 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n     let prev_pessimistic = visitor.pessimistic_yield;\n \n     // Ordinarily, we can rely on the visit order of HIR intravisit\n-    // to correspond to the actual exectuion order of statements.\n+    // to correspond to the actual execution order of statements.\n     // However, there's a weird corner case with compund assignment\n-    // operators (e.g. 'a += b'). The evaluation order depends on whether\n+    // operators (e.g. `a += b`). The evaluation order depends on whether\n     // or not the operator is overloaded (e.g. whether or not a trait\n     // like AddAssign is implemented).\n \n@@ -996,10 +996,10 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n     // To determine the actual execution order, we need to perform\n     // trait resolution. Unfortunately, we need to be able to compute\n     // yield_in_scope before type checking is even done, as it gets\n-    // used by AST borrowcheck\n+    // used by AST borrowcheck.\n     //\n     // Fortunately, we don't need to know the actual execution order.\n-    // It sufficies to know the 'worst case' order with respect to yields.\n+    // It suffices to know the 'worst case' order with respect to yields.\n     // Specifically, we need to know the highest 'expr_and_pat_count'\n     // that we could assign to the yield expression. To do this,\n     // we pick the greater of the two values from the left-hand\n@@ -1029,7 +1029,7 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n \n             // If the actual execution order turns out to be right-to-left,\n             // then we're fine. However, if the actual execution order is left-to-right,\n-            // then we'll assign too low of a count to any 'yield' expressions\n+            // then we'll assign too low a count to any `yield` expressions\n             // we encounter in 'right_expression' - they should really occur after all of the\n             // expressions in 'left_expression'.\n             visitor.visit_expr(&right_expression);\n@@ -1474,7 +1474,7 @@ fn region_scope_tree<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ScopeTree\n             },\n             terminating_scopes: Default::default(),\n             pessimistic_yield: false,\n-            fixup_scopes: vec![]\n+            fixup_scopes: vec![],\n         };\n \n         let body = tcx.hir().body(body_id);"}]}