{"sha": "d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZGNmZDgxYzVkNDMyNTM3OWFjODhjNDI1MGI5Yzc3ZWNiZDc1ZTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-01T17:16:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-01T17:26:37Z"}, "message": "Simplify xtask\n\nlib/bin/test separation isn't really needed.", "tree": {"sha": "0795d7277733920361a260db1a65306f1a47e1ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0795d7277733920361a260db1a65306f1a47e1ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "html_url": "https://github.com/rust-lang/rust/commit/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c17f2bf2a27798858ef2e3012ca28295aed46efa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c17f2bf2a27798858ef2e3012ca28295aed46efa", "html_url": "https://github.com/rust-lang/rust/commit/c17f2bf2a27798858ef2e3012ca28295aed46efa"}], "stats": {"total": 347, "additions": 167, "deletions": 180}, "files": [{"sha": "0455dd2eb3951de331cedbec86795e57eb32104a", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -6,9 +6,6 @@ authors = [\"rust-analyzer developers\"]\n publish = false\n license = \"MIT OR Apache-2.0\"\n \n-[lib]\n-doctest = false\n-\n [dependencies]\n anyhow = \"1.0.26\"\n flate2 = \"1.0\""}, {"sha": "743e83e766025f469606cc2e5c4301f51e42965e", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -20,7 +20,7 @@ use xshell::{cmd, pushenv, read_file, write_file};\n \n use crate::{ensure_rustfmt, project_root, Result};\n \n-pub use self::{\n+pub(crate) use self::{\n     gen_assists_docs::{generate_assists_docs, generate_assists_tests},\n     gen_diagnostic_docs::generate_diagnostic_docs,\n     gen_feature_docs::generate_feature_docs,\n@@ -30,17 +30,17 @@ pub use self::{\n };\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n-pub enum Mode {\n+pub(crate) enum Mode {\n     Overwrite,\n     Verify,\n }\n \n-pub struct CodegenCmd {\n-    pub features: bool,\n+pub(crate) struct CodegenCmd {\n+    pub(crate) features: bool,\n }\n \n impl CodegenCmd {\n-    pub fn run(self) -> Result<()> {\n+    pub(crate) fn run(self) -> Result<()> {\n         if self.features {\n             generate_lint_completions(Mode::Overwrite)?;\n         }"}, {"sha": "c469b388d9a21e26cd9326f2917fb4eb388e77b2", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -7,12 +7,12 @@ use crate::{\n     project_root, rust_files_in, Result,\n };\n \n-pub fn generate_assists_tests(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_assists_tests(mode: Mode) -> Result<()> {\n     let assists = Assist::collect()?;\n     generate_tests(&assists, mode)\n }\n \n-pub fn generate_assists_docs(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_assists_docs(mode: Mode) -> Result<()> {\n     let assists = Assist::collect()?;\n     let contents = assists.into_iter().map(|it| it.to_string()).collect::<Vec<_>>().join(\"\\n\\n\");\n     let contents = format!(\"//{}\\n{}\\n\", PREAMBLE, contents.trim());"}, {"sha": "a2561817b9d323a19dc73a65ba812f146a03f242", "filename": "xtask/src/codegen/gen_diagnostic_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fcodegen%2Fgen_diagnostic_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fcodegen%2Fgen_diagnostic_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_diagnostic_docs.rs?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -7,7 +7,7 @@ use crate::{\n     project_root, rust_files, Result,\n };\n \n-pub fn generate_diagnostic_docs(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_diagnostic_docs(mode: Mode) -> Result<()> {\n     let diagnostics = Diagnostic::collect()?;\n     let contents =\n         diagnostics.into_iter().map(|it| it.to_string()).collect::<Vec<_>>().join(\"\\n\\n\");"}, {"sha": "cad7ff477f3e00051ea62b9c441b50df042ee611", "filename": "xtask/src/codegen/gen_feature_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -7,7 +7,7 @@ use crate::{\n     project_root, rust_files, Result,\n };\n \n-pub fn generate_feature_docs(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_feature_docs(mode: Mode) -> Result<()> {\n     let features = Feature::collect()?;\n     let contents = features.into_iter().map(|it| it.to_string()).collect::<Vec<_>>().join(\"\\n\\n\");\n     let contents = format!(\"//{}\\n{}\\n\", PREAMBLE, contents.trim());"}, {"sha": "b1c05703755cbba4160f14e820e53d01c9e078b9", "filename": "xtask/src/codegen/gen_lint_completions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -10,7 +10,7 @@ use crate::{\n     run_rustfmt,\n };\n \n-pub fn generate_lint_completions(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_lint_completions(mode: Mode) -> Result<()> {\n     if !Path::new(\"./target/rust\").exists() {\n         cmd!(\"git clone --depth=1 https://github.com/rust-lang/rust ./target/rust\").run()?;\n     }"}, {"sha": "cb89390637558de6547232fde5aa35f078daaa13", "filename": "xtask/src/codegen/gen_parser_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     project_root, Result,\n };\n \n-pub fn generate_parser_tests(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_parser_tests(mode: Mode) -> Result<()> {\n     let tests = tests_from_dir(&project_root().join(Path::new(\"crates/parser/src/grammar\")))?;\n     fn install_tests(tests: &HashMap<String, Test>, into: &str, mode: Mode) -> Result<()> {\n         let tests_dir = project_root().join(into);"}, {"sha": "191bc0e9d07988084c9222033ea33d5ddf48c2f1", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -18,7 +18,7 @@ use crate::{\n     project_root, Result,\n };\n \n-pub fn generate_syntax(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_syntax(mode: Mode) -> Result<()> {\n     let grammar = rust_grammar();\n     let ast = lower(&grammar);\n "}, {"sha": "f2503f8076278b5a20192ac0e1ac09a9725134df", "filename": "xtask/src/dist.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fdist.rs?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -11,13 +11,13 @@ use xshell::{cmd, cp, mkdir_p, pushd, read_file, rm_rf, write_file};\n \n use crate::{date_iso, project_root};\n \n-pub struct DistCmd {\n-    pub nightly: bool,\n-    pub client_version: Option<String>,\n+pub(crate) struct DistCmd {\n+    pub(crate) nightly: bool,\n+    pub(crate) client_version: Option<String>,\n }\n \n impl DistCmd {\n-    pub fn run(self) -> Result<()> {\n+    pub(crate) fn run(self) -> Result<()> {\n         let dist = project_root().join(\"dist\");\n         rm_rf(&dist)?;\n         mkdir_p(&dist)?;"}, {"sha": "ea21942485489582a51ae5a466dbf7983a02996b", "filename": "xtask/src/install.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -8,13 +8,13 @@ use xshell::{cmd, pushd};\n // Latest stable, feel free to send a PR if this lags behind.\n const REQUIRED_RUST_VERSION: u32 = 50;\n \n-pub struct InstallCmd {\n-    pub client: Option<ClientOpt>,\n-    pub server: Option<ServerOpt>,\n+pub(crate) struct InstallCmd {\n+    pub(crate) client: Option<ClientOpt>,\n+    pub(crate) server: Option<ServerOpt>,\n }\n \n #[derive(Clone, Copy)]\n-pub enum ClientOpt {\n+pub(crate) enum ClientOpt {\n     VsCode,\n     VsCodeExploration,\n     VsCodeInsiders,\n@@ -24,7 +24,7 @@ pub enum ClientOpt {\n }\n \n impl ClientOpt {\n-    pub const fn as_cmds(&self) -> &'static [&'static str] {\n+    pub(crate) const fn as_cmds(&self) -> &'static [&'static str] {\n         match self {\n             ClientOpt::VsCode => &[\"code\"],\n             ClientOpt::VsCodeExploration => &[\"code-exploration\"],\n@@ -60,18 +60,18 @@ impl std::str::FromStr for ClientOpt {\n     }\n }\n \n-pub struct ServerOpt {\n-    pub malloc: Malloc,\n+pub(crate) struct ServerOpt {\n+    pub(crate) malloc: Malloc,\n }\n \n-pub enum Malloc {\n+pub(crate) enum Malloc {\n     System,\n     Mimalloc,\n     Jemalloc,\n }\n \n impl InstallCmd {\n-    pub fn run(self) -> Result<()> {\n+    pub(crate) fn run(self) -> Result<()> {\n         if cfg!(target_os = \"macos\") {\n             fix_path_for_mac().context(\"Fix path for mac\")?\n         }"}, {"sha": "b19985fb238479b1d44d66e4c0ae59e71787d0ec", "filename": "xtask/src/lib.rs", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/c17f2bf2a27798858ef2e3012ca28295aed46efa/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17f2bf2a27798858ef2e3012ca28295aed46efa/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=c17f2bf2a27798858ef2e3012ca28295aed46efa", "patch": "@@ -1,131 +0,0 @@\n-//! Support library for `cargo xtask` command.\n-//!\n-//! See https://github.com/matklad/cargo-xtask/\n-\n-pub mod codegen;\n-mod ast_src;\n-\n-pub mod install;\n-pub mod release;\n-pub mod dist;\n-pub mod pre_commit;\n-pub mod metrics;\n-pub mod pre_cache;\n-\n-use std::{\n-    env,\n-    path::{Path, PathBuf},\n-};\n-\n-use walkdir::{DirEntry, WalkDir};\n-use xshell::{cmd, pushd, pushenv};\n-\n-use crate::codegen::Mode;\n-\n-pub use anyhow::{bail, Context as _, Result};\n-\n-pub fn project_root() -> PathBuf {\n-    Path::new(\n-        &env::var(\"CARGO_MANIFEST_DIR\").unwrap_or_else(|_| env!(\"CARGO_MANIFEST_DIR\").to_owned()),\n-    )\n-    .ancestors()\n-    .nth(1)\n-    .unwrap()\n-    .to_path_buf()\n-}\n-\n-pub fn rust_files() -> impl Iterator<Item = PathBuf> {\n-    rust_files_in(&project_root().join(\"crates\"))\n-}\n-\n-pub fn cargo_files() -> impl Iterator<Item = PathBuf> {\n-    files_in(&project_root(), \"toml\")\n-        .filter(|path| path.file_name().map(|it| it == \"Cargo.toml\").unwrap_or(false))\n-}\n-\n-pub fn rust_files_in(path: &Path) -> impl Iterator<Item = PathBuf> {\n-    files_in(path, \"rs\")\n-}\n-\n-pub fn run_rustfmt(mode: Mode) -> Result<()> {\n-    let _dir = pushd(project_root())?;\n-    let _e = pushenv(\"RUSTUP_TOOLCHAIN\", \"stable\");\n-    ensure_rustfmt()?;\n-    let check = match mode {\n-        Mode::Overwrite => &[][..],\n-        Mode::Verify => &[\"--\", \"--check\"],\n-    };\n-    cmd!(\"cargo fmt {check...}\").run()?;\n-    Ok(())\n-}\n-\n-fn ensure_rustfmt() -> Result<()> {\n-    let out = cmd!(\"rustfmt --version\").read()?;\n-    if !out.contains(\"stable\") {\n-        bail!(\n-            \"Failed to run rustfmt from toolchain 'stable'. \\\n-             Please run `rustup component add rustfmt --toolchain stable` to install it.\",\n-        )\n-    }\n-    Ok(())\n-}\n-\n-pub fn run_clippy() -> Result<()> {\n-    if cmd!(\"cargo clippy --version\").read().is_err() {\n-        bail!(\n-            \"Failed run cargo clippy. \\\n-            Please run `rustup component add clippy` to install it.\",\n-        )\n-    }\n-\n-    let allowed_lints = \"\n-        -A clippy::collapsible_if\n-        -A clippy::needless_pass_by_value\n-        -A clippy::nonminimal_bool\n-        -A clippy::redundant_pattern_matching\n-    \"\n-    .split_ascii_whitespace();\n-    cmd!(\"cargo clippy --all-features --all-targets -- {allowed_lints...}\").run()?;\n-    Ok(())\n-}\n-\n-pub fn run_fuzzer() -> Result<()> {\n-    let _d = pushd(\"./crates/syntax\")?;\n-    let _e = pushenv(\"RUSTUP_TOOLCHAIN\", \"nightly\");\n-    if cmd!(\"cargo fuzz --help\").read().is_err() {\n-        cmd!(\"cargo install cargo-fuzz\").run()?;\n-    };\n-\n-    // Expecting nightly rustc\n-    let out = cmd!(\"rustc --version\").read()?;\n-    if !out.contains(\"nightly\") {\n-        bail!(\"fuzz tests require nightly rustc\")\n-    }\n-\n-    cmd!(\"cargo fuzz run parser\").run()?;\n-    Ok(())\n-}\n-\n-fn date_iso() -> Result<String> {\n-    let res = cmd!(\"date --iso --utc\").read()?;\n-    Ok(res)\n-}\n-\n-fn is_release_tag(tag: &str) -> bool {\n-    tag.len() == \"2020-02-24\".len() && tag.starts_with(|c: char| c.is_ascii_digit())\n-}\n-\n-fn files_in(path: &Path, ext: &'static str) -> impl Iterator<Item = PathBuf> {\n-    let iter = WalkDir::new(path);\n-    return iter\n-        .into_iter()\n-        .filter_entry(|e| !is_hidden(e))\n-        .map(|e| e.unwrap())\n-        .filter(|e| !e.file_type().is_dir())\n-        .map(|e| e.into_path())\n-        .filter(move |path| path.extension().map(|it| it == ext).unwrap_or(false));\n-\n-    fn is_hidden(entry: &DirEntry) -> bool {\n-        entry.file_name().to_str().map(|s| s.starts_with('.')).unwrap_or(false)\n-    }\n-}"}, {"sha": "48c0d99206937fe9fd62aede560a456c32d6e888", "filename": "xtask/src/main.rs", "status": "modified", "additions": 127, "deletions": 7, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -7,22 +7,35 @@\n //!\n //! This binary is integrated into the `cargo` command line by using an alias in\n //! `.cargo/config`.\n+mod codegen;\n+mod ast_src;\n+#[cfg(test)]\n+mod tidy;\n \n-use std::env;\n+mod install;\n+mod release;\n+mod dist;\n+mod pre_commit;\n+mod metrics;\n+mod pre_cache;\n \n-use anyhow::bail;\n+use anyhow::{bail, Result};\n use codegen::CodegenCmd;\n use pico_args::Arguments;\n-use xshell::{cmd, cp, pushd};\n-use xtask::{\n-    codegen::{self, Mode},\n+use std::{\n+    env,\n+    path::{Path, PathBuf},\n+};\n+use walkdir::{DirEntry, WalkDir};\n+use xshell::{cmd, cp, pushd, pushenv};\n+\n+use crate::{\n+    codegen::Mode,\n     dist::DistCmd,\n     install::{InstallCmd, Malloc, ServerOpt},\n     metrics::MetricsCmd,\n     pre_cache::PreCacheCmd,\n-    pre_commit, project_root,\n     release::{PromoteCmd, ReleaseCmd},\n-    run_clippy, run_fuzzer, run_rustfmt, Result,\n };\n \n fn main() -> Result<()> {\n@@ -172,3 +185,110 @@ fn finish_args(args: Arguments) -> Result<()> {\n     }\n     Ok(())\n }\n+\n+fn project_root() -> PathBuf {\n+    Path::new(\n+        &env::var(\"CARGO_MANIFEST_DIR\").unwrap_or_else(|_| env!(\"CARGO_MANIFEST_DIR\").to_owned()),\n+    )\n+    .ancestors()\n+    .nth(1)\n+    .unwrap()\n+    .to_path_buf()\n+}\n+\n+fn rust_files() -> impl Iterator<Item = PathBuf> {\n+    rust_files_in(&project_root().join(\"crates\"))\n+}\n+\n+#[cfg(test)]\n+fn cargo_files() -> impl Iterator<Item = PathBuf> {\n+    files_in(&project_root(), \"toml\")\n+        .filter(|path| path.file_name().map(|it| it == \"Cargo.toml\").unwrap_or(false))\n+}\n+\n+fn rust_files_in(path: &Path) -> impl Iterator<Item = PathBuf> {\n+    files_in(path, \"rs\")\n+}\n+\n+fn run_rustfmt(mode: Mode) -> Result<()> {\n+    let _dir = pushd(project_root())?;\n+    let _e = pushenv(\"RUSTUP_TOOLCHAIN\", \"stable\");\n+    ensure_rustfmt()?;\n+    let check = match mode {\n+        Mode::Overwrite => &[][..],\n+        Mode::Verify => &[\"--\", \"--check\"],\n+    };\n+    cmd!(\"cargo fmt {check...}\").run()?;\n+    Ok(())\n+}\n+\n+fn ensure_rustfmt() -> Result<()> {\n+    let out = cmd!(\"rustfmt --version\").read()?;\n+    if !out.contains(\"stable\") {\n+        bail!(\n+            \"Failed to run rustfmt from toolchain 'stable'. \\\n+             Please run `rustup component add rustfmt --toolchain stable` to install it.\",\n+        )\n+    }\n+    Ok(())\n+}\n+\n+fn run_clippy() -> Result<()> {\n+    if cmd!(\"cargo clippy --version\").read().is_err() {\n+        bail!(\n+            \"Failed run cargo clippy. \\\n+            Please run `rustup component add clippy` to install it.\",\n+        )\n+    }\n+\n+    let allowed_lints = \"\n+        -A clippy::collapsible_if\n+        -A clippy::needless_pass_by_value\n+        -A clippy::nonminimal_bool\n+        -A clippy::redundant_pattern_matching\n+    \"\n+    .split_ascii_whitespace();\n+    cmd!(\"cargo clippy --all-features --all-targets -- {allowed_lints...}\").run()?;\n+    Ok(())\n+}\n+\n+fn run_fuzzer() -> Result<()> {\n+    let _d = pushd(\"./crates/syntax\")?;\n+    let _e = pushenv(\"RUSTUP_TOOLCHAIN\", \"nightly\");\n+    if cmd!(\"cargo fuzz --help\").read().is_err() {\n+        cmd!(\"cargo install cargo-fuzz\").run()?;\n+    };\n+\n+    // Expecting nightly rustc\n+    let out = cmd!(\"rustc --version\").read()?;\n+    if !out.contains(\"nightly\") {\n+        bail!(\"fuzz tests require nightly rustc\")\n+    }\n+\n+    cmd!(\"cargo fuzz run parser\").run()?;\n+    Ok(())\n+}\n+\n+fn date_iso() -> Result<String> {\n+    let res = cmd!(\"date --iso --utc\").read()?;\n+    Ok(res)\n+}\n+\n+fn is_release_tag(tag: &str) -> bool {\n+    tag.len() == \"2020-02-24\".len() && tag.starts_with(|c: char| c.is_ascii_digit())\n+}\n+\n+fn files_in(path: &Path, ext: &'static str) -> impl Iterator<Item = PathBuf> {\n+    let iter = WalkDir::new(path);\n+    return iter\n+        .into_iter()\n+        .filter_entry(|e| !is_hidden(e))\n+        .map(|e| e.unwrap())\n+        .filter(|e| !e.file_type().is_dir())\n+        .map(|e| e.into_path())\n+        .filter(move |path| path.extension().map(|it| it == ext).unwrap_or(false));\n+\n+    fn is_hidden(entry: &DirEntry) -> bool {\n+        entry.file_name().to_str().map(|s| s.starts_with('.')).unwrap_or(false)\n+    }\n+}"}, {"sha": "babc2a6d4c598ecfc73a519a8631b3c48810acc6", "filename": "xtask/src/metrics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmetrics.rs?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -11,12 +11,12 @@ use xshell::{cmd, mkdir_p, pushd, pushenv, read_file, rm_rf};\n \n type Unit = String;\n \n-pub struct MetricsCmd {\n-    pub dry_run: bool,\n+pub(crate) struct MetricsCmd {\n+    pub(crate) dry_run: bool,\n }\n \n impl MetricsCmd {\n-    pub fn run(self) -> Result<()> {\n+    pub(crate) fn run(self) -> Result<()> {\n         let mut metrics = Metrics::new()?;\n         if !self.dry_run {\n             rm_rf(\"./target/release\")?;"}, {"sha": "54f4a95a99ef772af78ddb4ba00136574aaa2ba5", "filename": "xtask/src/pre_cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fpre_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fpre_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fpre_cache.rs?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -6,12 +6,12 @@ use std::{\n use anyhow::Result;\n use xshell::rm_rf;\n \n-pub struct PreCacheCmd;\n+pub(crate) struct PreCacheCmd;\n \n impl PreCacheCmd {\n     /// Cleans the `./target` dir after the build such that only\n     /// dependencies are cached on CI.\n-    pub fn run(self) -> Result<()> {\n+    pub(crate) fn run(self) -> Result<()> {\n         let slow_tests_cookie = Path::new(\"./target/.slow_tests_cookie\");\n         if !slow_tests_cookie.exists() {\n             panic!(\"slow tests were skipped on CI!\")"}, {"sha": "b57cf3ce2bbf07c2737888244378d2f7e57368bf", "filename": "xtask/src/pre_commit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fpre_commit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Fpre_commit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fpre_commit.rs?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -9,7 +9,7 @@ use crate::{project_root, run_rustfmt, Mode};\n \n // FIXME: if there are changed `.ts` files, also reformat TypeScript (by\n // shelling out to `npm fmt`).\n-pub fn run_hook() -> Result<()> {\n+pub(crate) fn run_hook() -> Result<()> {\n     run_rustfmt(Mode::Overwrite)?;\n \n     let diff = cmd!(\"git diff --diff-filter=MAR --name-only --cached\").read()?;\n@@ -23,7 +23,7 @@ pub fn run_hook() -> Result<()> {\n     Ok(())\n }\n \n-pub fn install_hook() -> Result<()> {\n+pub(crate) fn install_hook() -> Result<()> {\n     let hook_path: PathBuf =\n         format!(\"./.git/hooks/pre-commit{}\", std::env::consts::EXE_SUFFIX).into();\n "}, {"sha": "5008881e485cbab7e84a16f3ef07090f0ade8025", "filename": "xtask/src/release.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Frelease.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Frelease.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease.rs?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -4,12 +4,12 @@ use xshell::{cmd, cp, pushd, read_dir, write_file};\n \n use crate::{codegen, date_iso, is_release_tag, project_root, Mode, Result};\n \n-pub struct ReleaseCmd {\n-    pub dry_run: bool,\n+pub(crate) struct ReleaseCmd {\n+    pub(crate) dry_run: bool,\n }\n \n impl ReleaseCmd {\n-    pub fn run(self) -> Result<()> {\n+    pub(crate) fn run(self) -> Result<()> {\n         if !self.dry_run {\n             cmd!(\"git switch release\").run()?;\n             cmd!(\"git fetch upstream --tags --force\").run()?;\n@@ -86,12 +86,12 @@ https://github.com/sponsors/rust-analyzer[GitHub Sponsors].\n     }\n }\n \n-pub struct PromoteCmd {\n-    pub dry_run: bool,\n+pub(crate) struct PromoteCmd {\n+    pub(crate) dry_run: bool,\n }\n \n impl PromoteCmd {\n-    pub fn run(self) -> Result<()> {\n+    pub(crate) fn run(self) -> Result<()> {\n         let _dir = pushd(\"../rust-rust-analyzer\")?;\n         cmd!(\"git switch master\").run()?;\n         cmd!(\"git fetch upstream\").run()?;"}, {"sha": "63116ec6b907e7a324ac2a456fccf2e801bb70a8", "filename": "xtask/src/tidy.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8/xtask%2Fsrc%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Ftidy.rs?ref=d9dcfd81c5d4325379ac88c4250b9c77ecbd75e8", "patch": "@@ -4,7 +4,8 @@ use std::{\n };\n \n use xshell::{cmd, read_file};\n-use xtask::{\n+\n+use crate::{\n     cargo_files,\n     codegen::{self, Mode},\n     project_root, run_rustfmt, rust_files,", "previous_filename": "xtask/tests/tidy.rs"}]}