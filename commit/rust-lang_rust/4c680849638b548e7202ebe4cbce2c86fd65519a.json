{"sha": "4c680849638b548e7202ebe4cbce2c86fd65519a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNjgwODQ5NjM4YjU0OGU3MjAyZWJlNGNiY2UyYzg2ZmQ2NTUxOWE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-12T23:12:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-13T00:21:39Z"}, "message": "Convert most codemap types from records to structs", "tree": {"sha": "ec1071213df45eb85c6bb3a03d02e58238fa1ec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec1071213df45eb85c6bb3a03d02e58238fa1ec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c680849638b548e7202ebe4cbce2c86fd65519a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c680849638b548e7202ebe4cbce2c86fd65519a", "html_url": "https://github.com/rust-lang/rust/commit/4c680849638b548e7202ebe4cbce2c86fd65519a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c680849638b548e7202ebe4cbce2c86fd65519a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f05e2da709cca3b20e560eaf2e05d73c0ca5d91b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f05e2da709cca3b20e560eaf2e05d73c0ca5d91b", "html_url": "https://github.com/rust-lang/rust/commit/f05e2da709cca3b20e560eaf2e05d73c0ca5d91b"}], "stats": {"total": 86, "additions": 52, "deletions": 34}, "files": [{"sha": "d406c98d884a9721009372bfa3ad0259c7a06b09", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=4c680849638b548e7202ebe4cbce2c86fd65519a", "patch": "@@ -15,7 +15,7 @@ pure fn dummy_spanned<T>(+t: T) -> spanned<T> {\n \n /* assuming that we're not in macro expansion */\n pure fn mk_sp(lo: uint, hi: uint) -> span {\n-    {lo: lo, hi: hi, expn_info: None}\n+    span {lo: lo, hi: hi, expn_info: None}\n }\n \n // make this a const, once the compiler supports it"}, {"sha": "80c6aabdf411fbaa603ee2eb5fc6b8df3b2e641a", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=4c680849638b548e7202ebe4cbce2c86fd65519a", "patch": "@@ -6,6 +6,7 @@ use std::serialization::{Serializable,\n \n export filename;\n export filemap;\n+export filemap_;\n export span;\n export file_substr;\n export fss_none;\n@@ -34,7 +35,9 @@ export new_codemap;\n \n type filename = ~str;\n \n-type file_pos = {ch: uint, byte: uint};\n+struct file_pos {\n+    ch: uint, byte: uint\n+}\n \n impl file_pos : cmp::Eq {\n     pure fn eq(other: &file_pos) -> bool {\n@@ -55,23 +58,34 @@ enum file_substr {\n     fss_external({filename: ~str, line: uint, col: uint})\n }\n \n-type filemap =\n-    @{name: filename, substr: file_substr, src: @~str,\n-      start_pos: file_pos, mut lines: ~[file_pos]};\n+struct filemap_ {\n+    name: filename, substr: file_substr, src: @~str,\n+    start_pos: file_pos, mut lines: ~[file_pos]\n+}\n+\n+type filemap = @filemap_;\n+\n+struct CodeMap_ {\n+    files: DVec<filemap>\n+}\n \n-type CodeMap = @{files: DVec<filemap>};\n+type CodeMap = @CodeMap_;\n \n-type loc = {file: filemap, line: uint, col: uint};\n+struct loc {\n+    file: filemap, line: uint, col: uint\n+}\n \n-fn new_codemap() -> CodeMap { @{files: DVec()} }\n+fn new_codemap() -> CodeMap { @CodeMap_ {files: DVec()} }\n \n fn new_filemap_w_substr(+filename: filename, +substr: file_substr,\n                         src: @~str,\n                         start_pos_ch: uint, start_pos_byte: uint)\n    -> filemap {\n-    return @{name: filename, substr: substr, src: src,\n-          start_pos: {ch: start_pos_ch, byte: start_pos_byte},\n-          mut lines: ~[{ch: start_pos_ch, byte: start_pos_byte}]};\n+    return @filemap_ {\n+        name: filename, substr: substr, src: src,\n+        start_pos: file_pos {ch: start_pos_ch, byte: start_pos_byte},\n+        mut lines: ~[file_pos {ch: start_pos_ch, byte: start_pos_byte}]\n+    };\n }\n \n fn new_filemap(+filename: filename, src: @~str,\n@@ -88,7 +102,7 @@ fn mk_substr_filename(cm: CodeMap, sp: span) -> ~str\n }\n \n fn next_line(file: filemap, chpos: uint, byte_pos: uint) {\n-    file.lines.push({ch: chpos, byte: byte_pos + file.start_pos.byte});\n+    file.lines.push(file_pos {ch: chpos, byte: byte_pos + file.start_pos.byte});\n }\n \n type lookup_fn = pure fn(file_pos) -> uint;\n@@ -118,7 +132,7 @@ fn lookup_line(map: CodeMap, pos: uint, lookup: lookup_fn)\n \n fn lookup_pos(map: CodeMap, pos: uint, lookup: lookup_fn) -> loc {\n     let {fm: f, line: a} = lookup_line(map, pos, lookup);\n-    return {file: f, line: a + 1u, col: pos - lookup(f.lines[a])};\n+    return loc {file: f, line: a + 1u, col: pos - lookup(f.lines[a])};\n }\n \n fn lookup_char_pos(map: CodeMap, pos: uint) -> loc {\n@@ -160,9 +174,9 @@ fn adjust_span(map: CodeMap, sp: span) -> span {\n     match (line.fm.substr) {\n       fss_none => sp,\n       fss_internal(s) => {\n-        adjust_span(map, {lo: s.lo + (sp.lo - line.fm.start_pos.ch),\n-                          hi: s.lo + (sp.hi - line.fm.start_pos.ch),\n-                          expn_info: sp.expn_info})}\n+        adjust_span(map, span {lo: s.lo + (sp.lo - line.fm.start_pos.ch),\n+                               hi: s.lo + (sp.hi - line.fm.start_pos.ch),\n+                               expn_info: sp.expn_info})}\n       fss_external(_) => sp\n     }\n }\n@@ -173,7 +187,7 @@ enum expn_info_ {\n }\n type expn_info = Option<@expn_info_>;\n \n-type span = {lo: uint, hi: uint, expn_info: expn_info};\n+struct span {lo: uint, hi: uint, expn_info: expn_info}\n \n impl span : cmp::Eq {\n     pure fn eq(other: &span) -> bool {\n@@ -207,7 +221,10 @@ fn span_to_str(sp: span, cm: CodeMap) -> ~str {\n              lo.line, lo.col, hi.line, hi.col)\n }\n \n-type file_lines = {file: filemap, lines: ~[uint]};\n+struct file_lines {\n+    file: filemap,\n+    lines: ~[uint]\n+}\n \n fn span_to_filename(sp: span, cm: codemap::CodeMap) -> filename {\n     let lo = lookup_char_pos(cm, sp.lo);\n@@ -221,7 +238,7 @@ fn span_to_lines(sp: span, cm: codemap::CodeMap) -> @file_lines {\n     for uint::range(lo.line - 1u, hi.line as uint) |i| {\n         lines.push(i);\n     };\n-    return @{file: lo.file, lines: lines};\n+    return @file_lines {file: lo.file, lines: lines};\n }\n \n fn get_line(fm: filemap, line: int) -> ~str unsafe {"}, {"sha": "f588a6390d5499786f9947e62e8911193d7fae42", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=4c680849638b548e7202ebe4cbce2c86fd65519a", "patch": "@@ -2,6 +2,7 @@ use std::map::HashMap;\n use parse::parser;\n use diagnostic::span_handler;\n use codemap::{CodeMap, span, expn_info, expanded_from};\n+use ast_util::dummy_sp;\n \n // obsolete old-style #macro code:\n //\n@@ -169,15 +170,15 @@ fn mk_ctxt(parse_sess: parse::parse_sess,\n               expanded_from({call_site: cs, callie: callie}) => {\n                 self.backtrace =\n                     Some(@expanded_from({\n-                        call_site: {lo: cs.lo, hi: cs.hi,\n-                                    expn_info: self.backtrace},\n+                        call_site: span {lo: cs.lo, hi: cs.hi,\n+                                         expn_info: self.backtrace},\n                         callie: callie}));\n               }\n             }\n         }\n         fn bt_pop() {\n             match self.backtrace {\n-              Some(@expanded_from({call_site: {expn_info: prev, _}, _})) => {\n+              Some(@expanded_from({call_site: span {expn_info: prev, _}, _})) => {\n                 self.backtrace = prev\n               }\n               _ => self.bug(~\"tried to pop without a push\")\n@@ -311,7 +312,7 @@ fn tt_args_to_original_flavor(cx: ext_ctxt, sp: span, arg: ~[ast::token_tree])\n \n     // these spans won't matter, anyways\n     fn ms(m: matcher_) -> matcher {\n-        {node: m, span: {lo: 0u, hi: 0u, expn_info: None}}\n+        {node: m, span: dummy_sp()}\n     }\n     let arg_nm = cx.parse_sess().interner.gensym(@~\"arg\");\n "}, {"sha": "ca054255fa6438f770ee76cf1e985779153a9d76", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=4c680849638b548e7202ebe4cbce2c86fd65519a", "patch": "@@ -232,7 +232,7 @@ fn expand_item_mac(exts: HashMap<~str, syntax_extension>,\n \n fn new_span(cx: ext_ctxt, sp: span) -> span {\n     /* this discards information in the case of macro-defining macros */\n-    return {lo: sp.lo, hi: sp.hi, expn_info: cx.backtrace()};\n+    return span {lo: sp.lo, hi: sp.hi, expn_info: cx.backtrace()};\n }\n \n // FIXME (#2247): this is a terrible kludge to inject some macros into"}, {"sha": "3d63b0ddb775ddf8a2e40e60ad26bd5db2f3fd55", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=4c680849638b548e7202ebe4cbce2c86fd65519a", "patch": "@@ -24,7 +24,7 @@ fn path(ids: ~[ident], span: span) -> @ast::path {\n }\n \n fn empty_span() -> span {\n-    {lo: 0, hi: 0, expn_info: None}\n+    span {lo: 0, hi: 0, expn_info: None}\n }\n \n trait append_types {\n@@ -95,7 +95,7 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n     }\n \n     fn empty_span() -> span {\n-        {lo: 0, hi: 0, expn_info: self.backtrace()}\n+        span {lo: 0, hi: 0, expn_info: self.backtrace()}\n     }\n \n     fn block_expr(b: ast::blk) -> @ast::expr {"}, {"sha": "df7674264ca110d5b24da5682b1011ffae2a08b0", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=4c680849638b548e7202ebe4cbce2c86fd65519a", "patch": "@@ -177,7 +177,7 @@ fn transcribe(cx: ext_ctxt, b: bindings, body: @expr) -> @expr {\n     fn new_id(_old: node_id, cx: ext_ctxt) -> node_id { return cx.next_id(); }\n     fn new_span(cx: ext_ctxt, sp: span) -> span {\n         /* this discards information in the case of macro-defining macros */\n-        return {lo: sp.lo, hi: sp.hi, expn_info: cx.backtrace()};\n+        return span {lo: sp.lo, hi: sp.hi, expn_info: cx.backtrace()};\n     }\n     let afp = default_ast_fold();\n     let f_pre ="}, {"sha": "90f08095286d4f79804a5cf39c5e2b444d4eb4d1", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=4c680849638b548e7202ebe4cbce2c86fd65519a", "patch": "@@ -1,5 +1,5 @@\n use base::*;\n-use codemap::span;\n+use codemap::{span, loc, filemap_};\n use print::pprust;\n use build::{mk_base_vec_e,mk_uint,mk_u8,mk_uniq_str};\n \n@@ -34,7 +34,7 @@ fn expand_col(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n fn expand_file(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                _body: ast::mac_body) -> @ast::expr {\n     get_mac_args(cx, sp, arg, 0u, option::Some(0u), ~\"file\");\n-    let { file: @{ name: filename, _ }, _ } =\n+    let loc { file: @filemap_ { name: filename, _ }, _ } =\n         codemap::lookup_char_pos(cx.codemap(), sp.lo);\n     return mk_uniq_str(cx, sp, filename);\n }"}, {"sha": "8bfd1c0a18d39176660f64c7b11cae1eb37a70b3", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=4c680849638b548e7202ebe4cbce2c86fd65519a", "patch": "@@ -9,12 +9,13 @@ use macro_parser::{parse, parse_or_else, success, failure, named_match,\n                       matched_seq, matched_nonterminal, error};\n use std::map::HashMap;\n use parse::token::special_idents;\n+use ast_util::dummy_sp;\n \n fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n                      arg: ~[ast::token_tree]) -> base::mac_result {\n     // these spans won't matter, anyways\n     fn ms(m: matcher_) -> matcher {\n-        {node: m, span: {lo: 0u, hi: 0u, expn_info: None}}\n+        {node: m, span: dummy_sp()}\n     }\n \n     let lhs_nm =  cx.parse_sess().interner.gensym(@~\"lhs\");\n@@ -65,7 +66,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n         }\n \n         // Which arm's failure should we report? (the one furthest along)\n-        let mut best_fail_spot = {lo: 0u, hi: 0u, expn_info: None};\n+        let mut best_fail_spot = dummy_sp();\n         let mut best_fail_msg = ~\"internal error: ran no matchers\";\n \n         let s_d = cx.parse_sess().span_diagnostic;"}, {"sha": "9df6b7ab5d2f0c281852833f5cbf4063c4820833", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c680849638b548e7202ebe4cbce2c86fd65519a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4c680849638b548e7202ebe4cbce2c86fd65519a", "patch": "@@ -3415,9 +3415,8 @@ impl Parser {\n                 |p| p.parse_token_tree());\n             let m = ast::mac_invoc_tt(pth, tts);\n             let m: ast::mac = {node: m,\n-                               span: {lo: self.span.lo,\n-                                      hi: self.span.hi,\n-                                      expn_info: None}};\n+                               span: mk_sp(self.span.lo,\n+                                           self.span.hi)};\n             let item_ = item_mac(m);\n             return iovi_item(self.mk_item(lo, self.last_span.hi, id, item_,\n                                           visibility, attrs));"}]}