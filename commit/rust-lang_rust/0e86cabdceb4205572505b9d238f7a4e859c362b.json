{"sha": "0e86cabdceb4205572505b9d238f7a4e859c362b", "node_id": "C_kwDOAAsO6NoAKDBlODZjYWJkY2ViNDIwNTU3MjUwNWI5ZDIzOGY3YTRlODU5YzM2MmI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-23T02:05:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-23T02:05:28Z"}, "message": "Rollup merge of #92955 - llogiq:cloned-side-effect-doc, r=yaahc\n\nadd perf side effect docs to `Iterator::cloned()`\n\nNow that #90209 has been closed, as the current state of affairs is neither here nor there, this at least adds a paragraph + example on what to expect performance-wise and how to deal with it to the .cloned() docs.\n\ncc `@the8472`", "tree": {"sha": "08e9d23f4d2759919227727afa200d4c9f93c2e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08e9d23f4d2759919227727afa200d4c9f93c2e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e86cabdceb4205572505b9d238f7a4e859c362b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiOoBpCRBK7hj4Ov3rIwAAQ40IADvrzGEWZjO2Jh3wio2HpAc0\nVKJnOchrhCtLUqPQTvZkmJQhxY/1lOzJ00PreL1WjMYRBIkd/jg4jKHHbr6BryiZ\nQAo0c8ZSNchmn8mZx1GMwoKfB9LTuwzy58nFaIzkHgwpmO+FGxjv4b2RfqWUYBNF\nwIViC52FWlAEHgbZM95/ZxoLFd24jiFdVfkyGkWyyJ3m9EviqwPbatZ7j0PzeZ8R\nxj8xlCO6437b08ncE4EdVmFLu6dVEaB31HJwIAUJWrPfLUv2F7OAHlwHpuWOR4nh\njfBP6eVPOkk01GEuen2fNCY+ZtfEMAQ/04RQC5lfeHC9bQjkOWwFpN5W7+xJpmQ=\n=4uhA\n-----END PGP SIGNATURE-----\n", "payload": "tree 08e9d23f4d2759919227727afa200d4c9f93c2e5\nparent 67d6cc6ef3883b6598ee6347f119cdfd7c4029b8\nparent 1fb43f66624554d3fd63afc8e141386cbd6d414b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648001128 +0100\ncommitter GitHub <noreply@github.com> 1648001128 +0100\n\nRollup merge of #92955 - llogiq:cloned-side-effect-doc, r=yaahc\n\nadd perf side effect docs to `Iterator::cloned()`\n\nNow that #90209 has been closed, as the current state of affairs is neither here nor there, this at least adds a paragraph + example on what to expect performance-wise and how to deal with it to the .cloned() docs.\n\ncc `@the8472`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e86cabdceb4205572505b9d238f7a4e859c362b", "html_url": "https://github.com/rust-lang/rust/commit/0e86cabdceb4205572505b9d238f7a4e859c362b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e86cabdceb4205572505b9d238f7a4e859c362b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67d6cc6ef3883b6598ee6347f119cdfd7c4029b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8", "html_url": "https://github.com/rust-lang/rust/commit/67d6cc6ef3883b6598ee6347f119cdfd7c4029b8"}, {"sha": "1fb43f66624554d3fd63afc8e141386cbd6d414b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb43f66624554d3fd63afc8e141386cbd6d414b", "html_url": "https://github.com/rust-lang/rust/commit/1fb43f66624554d3fd63afc8e141386cbd6d414b"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "53fbe4cbc42f53fca6dd42ccfa1c59b53c29522f", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e86cabdceb4205572505b9d238f7a4e859c362b/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e86cabdceb4205572505b9d238f7a4e859c362b/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=0e86cabdceb4205572505b9d238f7a4e859c362b", "patch": "@@ -3189,6 +3189,10 @@ pub trait Iterator {\n     /// This is useful when you have an iterator over `&T`, but you need an\n     /// iterator over `T`.\n     ///\n+    /// There is no guarantee whatsoever about the `clone` method actually\n+    /// being called *or* optimized away. So code should not depend on\n+    /// either.\n+    ///\n     /// [`clone`]: Clone::clone\n     ///\n     /// # Examples\n@@ -3206,6 +3210,18 @@ pub trait Iterator {\n     /// assert_eq!(v_cloned, vec![1, 2, 3]);\n     /// assert_eq!(v_map, vec![1, 2, 3]);\n     /// ```\n+    ///\n+    /// To get the best performance, try to clone late:\n+    ///\n+    /// ```\n+    /// let a = [vec![0_u8, 1, 2], vec![3, 4], vec![23]];\n+    /// // don't do this:\n+    /// let slower: Vec<_> = a.iter().cloned().filter(|s| s.len() == 1).collect();\n+    /// assert_eq!(&[vec![23]], &slower[..]);\n+    /// // instead call `cloned` late\n+    /// let faster: Vec<_> = a.iter().filter(|s| s.len() == 1).cloned().collect();\n+    /// assert_eq!(&[vec![23]], &faster[..]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn cloned<'a, T: 'a>(self) -> Cloned<Self>\n     where"}]}