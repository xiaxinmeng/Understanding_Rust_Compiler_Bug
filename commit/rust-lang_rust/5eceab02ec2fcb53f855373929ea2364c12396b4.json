{"sha": "5eceab02ec2fcb53f855373929ea2364c12396b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlY2VhYjAyZWMyZmNiNTNmODU1MzczOTI5ZWEyMzY0YzEyMzk2YjQ=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-09-11T14:32:18Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-10-24T12:59:07Z"}, "message": "Implement by-value trait object method call.", "tree": {"sha": "b5384e3fe4efd0dae426cb97d4729b04b35fc562", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5384e3fe4efd0dae426cb97d4729b04b35fc562"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eceab02ec2fcb53f855373929ea2364c12396b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eceab02ec2fcb53f855373929ea2364c12396b4", "html_url": "https://github.com/rust-lang/rust/commit/5eceab02ec2fcb53f855373929ea2364c12396b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eceab02ec2fcb53f855373929ea2364c12396b4/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4", "html_url": "https://github.com/rust-lang/rust/commit/f2ef005d1d9bfb6a594dc08805eef271fb9bbcd4"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "72daa0beb0982168d80df93718ddbe0d6c2da4b6", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5eceab02ec2fcb53f855373929ea2364c12396b4/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eceab02ec2fcb53f855373929ea2364c12396b4/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=5eceab02ec2fcb53f855373929ea2364c12396b4", "patch": "@@ -305,17 +305,17 @@ impl<'tcx> FnTypeExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n             // Don't pass the vtable, it's not an argument of the virtual fn.\n             // Instead, pass just the (thin pointer) first field of `*dyn Trait`.\n             if arg_idx == Some(0) {\n-                if layout.is_unsized() {\n-                    unimplemented!(\"by-value trait object is not \\\n-                                    yet implemented in #![feature(unsized_locals)]\");\n-                }\n                 // FIXME(eddyb) `layout.field(cx, 0)` is not enough because e.g.\n                 // `Box<dyn Trait>` has a few newtype wrappers around the raw\n                 // pointer, so we'd have to \"dig down\" to find `*dyn Trait`.\n-                let pointee = layout.ty.builtin_deref(true)\n-                    .unwrap_or_else(|| {\n-                        bug!(\"FnType::new_vtable: non-pointer self {:?}\", layout)\n-                    }).ty;\n+                let pointee = if layout.is_unsized() {\n+                    layout.ty\n+                } else {\n+                    layout.ty.builtin_deref(true)\n+                        .unwrap_or_else(|| {\n+                            bug!(\"FnType::new_vtable: non-pointer self {:?}\", layout)\n+                        }).ty\n+                };\n                 let fat_ptr_ty = cx.tcx.mk_mut_ptr(pointee);\n                 layout = cx.layout_of(fat_ptr_ty).field(cx, 0);\n             }"}, {"sha": "fc97e350ad243fe70f28b20d76a45e7aa5f3eafc", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5eceab02ec2fcb53f855373929ea2364c12396b4/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eceab02ec2fcb53f855373929ea2364c12396b4/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=5eceab02ec2fcb53f855373929ea2364c12396b4", "patch": "@@ -651,6 +651,12 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                                 .get_fn(&bx, meta, &fn_ty));\n                             llargs.push(data_ptr);\n                             continue;\n+                        } else if let Ref(data_ptr, Some(meta), _) = op.val {\n+                            // by-value dynamic dispatch\n+                            llfn = Some(meth::VirtualIndex::from_index(idx)\n+                                .get_fn(&bx, meta, &fn_ty));\n+                            llargs.push(data_ptr);\n+                            continue;\n                         }\n                     }\n "}]}