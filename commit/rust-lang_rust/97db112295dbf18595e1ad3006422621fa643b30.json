{"sha": "97db112295dbf18595e1ad3006422621fa643b30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZGIxMTIyOTVkYmYxODU5NWUxYWQzMDA2NDIyNjIxZmE2NDNiMzA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-07T11:16:32Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-07T11:16:32Z"}, "message": "Move time \"codegen mono items\" out of codegen_mono_items", "tree": {"sha": "377f23742d9a7791095486877d4cd758410b75c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/377f23742d9a7791095486877d4cd758410b75c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97db112295dbf18595e1ad3006422621fa643b30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97db112295dbf18595e1ad3006422621fa643b30", "html_url": "https://github.com/rust-lang/rust/commit/97db112295dbf18595e1ad3006422621fa643b30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97db112295dbf18595e1ad3006422621fa643b30/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "575836ebe3caa9963b61355561d16acb57e11aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/575836ebe3caa9963b61355561d16acb57e11aa3", "html_url": "https://github.com/rust-lang/rust/commit/575836ebe3caa9963b61355561d16acb57e11aa3"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "e67c2a50bc8aaf52dddc7bd4e9413f05a566c736", "filename": "src/driver.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/97db112295dbf18595e1ad3006422621fa643b30/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97db112295dbf18595e1ad3006422621fa643b30/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=97db112295dbf18595e1ad3006422621fa643b30", "patch": "@@ -74,7 +74,9 @@ fn run_jit(tcx: TyCtxt<'_>) -> ! {\n         .flatten()\n         .collect::<FxHashMap<_, (_, _)>>();\n \n-    codegen_mono_items(tcx, &mut jit_module, None, mono_items);\n+    time(tcx.sess, \"codegen mono items\", || {\n+        codegen_mono_items(tcx, &mut jit_module, None, mono_items);\n+    });\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module);\n     crate::allocator::codegen(tcx, &mut jit_module);\n \n@@ -224,7 +226,9 @@ fn run_aot(\n         None\n     };\n \n-    codegen_mono_items(tcx, &mut module, debug.as_mut(), mono_items);\n+    time(tcx.sess, \"codegen mono items\", || {\n+        codegen_mono_items(tcx, &mut module, debug.as_mut(), mono_items);\n+    });\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module);\n \n     tcx.sess.abort_if_errors();\n@@ -308,30 +312,28 @@ fn codegen_mono_items<'tcx>(\n ) {\n     let mut cx = CodegenCx::new(tcx, module, debug_context);\n \n-    time(tcx.sess, \"codegen mono items\", move || {\n-        tcx.sess.time(\"predefine functions\", || {\n-            for (&mono_item, &(linkage, visibility)) in &mono_items {\n-                match mono_item {\n-                    MonoItem::Fn(instance) => {\n-                        let (name, sig) =\n-                            get_function_name_and_sig(tcx, cx.module.isa().triple(), instance, false);\n-                        let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-                        cx.module.declare_function(&name, linkage, &sig).unwrap();\n-                    }\n-                    MonoItem::Static(_) | MonoItem::GlobalAsm(_) => {}\n+    tcx.sess.time(\"predefine functions\", || {\n+        for (&mono_item, &(linkage, visibility)) in &mono_items {\n+            match mono_item {\n+                MonoItem::Fn(instance) => {\n+                    let (name, sig) =\n+                        get_function_name_and_sig(tcx, cx.module.isa().triple(), instance, false);\n+                    let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n+                    cx.module.declare_function(&name, linkage, &sig).unwrap();\n                 }\n+                MonoItem::Static(_) | MonoItem::GlobalAsm(_) => {}\n             }\n-        });\n-\n-        for (mono_item, (linkage, visibility)) in mono_items {\n-            crate::unimpl::try_unimpl(tcx, || {\n-                let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-                trans_mono_item(&mut cx, mono_item, linkage);\n-            });\n         }\n-\n-        tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());\n     });\n+\n+    for (mono_item, (linkage, visibility)) in mono_items {\n+        crate::unimpl::try_unimpl(tcx, || {\n+            let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n+            trans_mono_item(&mut cx, mono_item, linkage);\n+        });\n+    }\n+\n+    tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());\n }\n \n fn trans_mono_item<'clif, 'tcx, B: Backend + 'static>("}]}