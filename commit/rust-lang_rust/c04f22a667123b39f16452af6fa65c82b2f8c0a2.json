{"sha": "c04f22a667123b39f16452af6fa65c82b2f8c0a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNGYyMmE2NjcxMjNiMzlmMTY0NTJhZjZmYTY1YzgyYjJmOGMwYTI=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-03-23T13:21:42Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-04-05T16:52:57Z"}, "message": "Refactored core::str::pattern to become a user-facing module and hide away\nCharEq.", "tree": {"sha": "6ccef6b45238353636227401ba0aeebb866bc8a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ccef6b45238353636227401ba0aeebb866bc8a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c04f22a667123b39f16452af6fa65c82b2f8c0a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c04f22a667123b39f16452af6fa65c82b2f8c0a2", "html_url": "https://github.com/rust-lang/rust/commit/c04f22a667123b39f16452af6fa65c82b2f8c0a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c04f22a667123b39f16452af6fa65c82b2f8c0a2/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91d1aa71f6c4317d91bc04a53213b04f13b09c44", "url": "https://api.github.com/repos/rust-lang/rust/commits/91d1aa71f6c4317d91bc04a53213b04f13b09c44", "html_url": "https://github.com/rust-lang/rust/commit/91d1aa71f6c4317d91bc04a53213b04f13b09c44"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "28ba7369d52a3ffac26418334130ce0f0d5032bb", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c04f22a667123b39f16452af6fa65c82b2f8c0a2/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04f22a667123b39f16452af6fa65c82b2f8c0a2/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=c04f22a667123b39f16452af6fa65c82b2f8c0a2", "patch": "@@ -58,6 +58,8 @@ use core::iter::{Iterator, Extend};\n use core::option::Option::{self, Some, None};\n use core::result::Result;\n use core::str as core_str;\n+use core::str::pattern::Pattern;\n+use core::str::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n use unicode::str::{UnicodeStr, Utf16Encoder};\n \n use core::convert::AsRef;\n@@ -78,8 +80,7 @@ pub use core::str::{MatchIndices, RMatchIndices};\n pub use core::str::{from_utf8, Chars, CharIndices, Bytes};\n pub use core::str::{from_utf8_unchecked, ParseBoolError};\n pub use unicode::str::{Words, Graphemes, GraphemeIndices};\n-pub use core::str::Pattern;\n-pub use core::str::{Searcher, ReverseSearcher, DoubleEndedSearcher, SearchStep};\n+pub use core::str::pattern;\n \n /*\n Section: Creating a string"}, {"sha": "178cf5fa3fed01fcb3d3de61ddf9542e913e5826", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c04f22a667123b39f16452af6fa65c82b2f8c0a2/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04f22a667123b39f16452af6fa65c82b2f8c0a2/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=c04f22a667123b39f16452af6fa65c82b2f8c0a2", "patch": "@@ -24,7 +24,7 @@ use core::mem;\n use core::ops::{self, Deref, Add, Index};\n use core::ptr;\n use core::slice;\n-use core::str::Pattern;\n+use core::str::pattern::Pattern;\n use unicode::str as unicode_str;\n use unicode::str::Utf16Item;\n "}, {"sha": "107a3376277aaecac45a259d6e8636cab2cb0660", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c04f22a667123b39f16452af6fa65c82b2f8c0a2/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04f22a667123b39f16452af6fa65c82b2f8c0a2/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=c04f22a667123b39f16452af6fa65c82b2f8c0a2", "patch": "@@ -17,6 +17,8 @@\n #![doc(primitive = \"str\")]\n \n use self::OldSearcher::{TwoWay, TwoWayLong};\n+use self::pattern::Pattern;\n+use self::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n \n use char::CharExt;\n use clone::Clone;\n@@ -34,10 +36,7 @@ use result::Result::{self, Ok, Err};\n use slice::{self, SliceExt};\n use usize;\n \n-pub use self::pattern::Pattern;\n-pub use self::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher, SearchStep};\n-\n-mod pattern;\n+pub mod pattern;\n \n /// A trait to abstract the idea of creating a new instance of a type from a\n /// string."}, {"sha": "ef10fe5e707b75fa093df237f332b7b253b916e8", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c04f22a667123b39f16452af6fa65c82b2f8c0a2/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04f22a667123b39f16452af6fa65c82b2f8c0a2/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=c04f22a667123b39f16452af6fa65c82b2f8c0a2", "patch": "@@ -471,29 +471,28 @@ fn str_search_step<F, G>(mut m: &mut StrSearcher,\n \n macro_rules! pattern_methods {\n     ($t:ty, $pmap:expr, $smap:expr) => {\n-        // FIXME: #22463\n-        //type Searcher = $t;\n+        type Searcher = $t;\n \n         #[inline]\n         fn into_searcher(self, haystack: &'a str) -> $t {\n-            $smap($pmap(self).into_searcher(haystack))\n+            ($smap)(($pmap)(self).into_searcher(haystack))\n         }\n \n         #[inline]\n         fn is_contained_in(self, haystack: &'a str) -> bool {\n-            $pmap(self).is_contained_in(haystack)\n+            ($pmap)(self).is_contained_in(haystack)\n         }\n \n         #[inline]\n         fn is_prefix_of(self, haystack: &'a str) -> bool {\n-            $pmap(self).is_prefix_of(haystack)\n+            ($pmap)(self).is_prefix_of(haystack)\n         }\n \n         #[inline]\n         fn is_suffix_of(self, haystack: &'a str) -> bool\n             where $t: ReverseSearcher<'a>\n         {\n-            $pmap(self).is_suffix_of(haystack)\n+            ($pmap)(self).is_suffix_of(haystack)\n         }\n     }\n }\n@@ -553,7 +552,6 @@ impl<'a> DoubleEndedSearcher<'a> for CharSearcher<'a> {}\n \n /// Searches for chars that are equal to a given char\n impl<'a> Pattern<'a> for char {\n-    type Searcher =  CharSearcher<'a>;\n     pattern_methods!(CharSearcher<'a>, CharEqPattern, CharSearcher);\n }\n \n@@ -579,7 +577,6 @@ impl<'a, 'b> DoubleEndedSearcher<'a> for CharSliceSearcher<'a, 'b> {}\n \n /// Searches for chars that are equal to any of the chars in the array\n impl<'a, 'b> Pattern<'a> for &'b [char] {\n-    type Searcher =  CharSliceSearcher<'a, 'b>;\n     pattern_methods!(CharSliceSearcher<'a, 'b>, CharEqPattern, CharSliceSearcher);\n }\n \n@@ -609,6 +606,14 @@ impl<'a, F> DoubleEndedSearcher<'a> for CharPredicateSearcher<'a, F>\n \n /// Searches for chars that match the given predicate\n impl<'a, F> Pattern<'a> for F where F: FnMut(char) -> bool {\n-    type Searcher =  CharPredicateSearcher<'a, F>;\n     pattern_methods!(CharPredicateSearcher<'a, F>, CharEqPattern, CharPredicateSearcher);\n }\n+\n+/////////////////////////////////////////////////////////////////////////////\n+// Impl for &&str\n+/////////////////////////////////////////////////////////////////////////////\n+\n+/// Delegates to the `&str` impl.\n+impl<'a, 'b> Pattern<'a> for &'b &'b str {\n+    pattern_methods!(StrSearcher<'a, 'b>, |&s| s, |s| s);\n+}"}, {"sha": "e6d6a32e3eca97f42fc66872a4d8f569741f4f6d", "filename": "src/libcoretest/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c04f22a667123b39f16452af6fa65c82b2f8c0a2/src%2Flibcoretest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04f22a667123b39f16452af6fa65c82b2f8c0a2/src%2Flibcoretest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fstr.rs?ref=c04f22a667123b39f16452af6fa65c82b2f8c0a2", "patch": "@@ -185,14 +185,14 @@ fn trim_ws() {\n }\n \n mod pattern {\n-    use std::str::Pattern;\n-    use std::str::{Searcher, ReverseSearcher};\n-    use std::str::SearchStep::{self, Match, Reject, Done};\n+    use std::str::pattern::Pattern;\n+    use std::str::pattern::{Searcher, ReverseSearcher};\n+    use std::str::pattern::SearchStep::{self, Match, Reject, Done};\n \n     macro_rules! make_test {\n         ($name:ident, $p:expr, $h:expr, [$($e:expr,)*]) => {\n             mod $name {\n-                use std::str::SearchStep::{Match, Reject};\n+                use std::str::pattern::SearchStep::{Match, Reject};\n                 use super::{cmp_search_to_vec};\n                 #[test]\n                 fn fwd() {"}]}