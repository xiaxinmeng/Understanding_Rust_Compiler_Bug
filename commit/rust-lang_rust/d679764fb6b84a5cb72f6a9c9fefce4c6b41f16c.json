{"sha": "d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "node_id": "C_kwDOAAsO6NoAKGQ2Nzk3NjRmYjZiODRhNWNiNzJmNmE5YzlmZWZjZTRjNmI0MWYxNmM", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-18T20:37:38Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-18T20:37:38Z"}, "message": "Make `#[debug_format]` an attribute in `newtype_index`\n\nThis removes the `custom` format functionality as its only user was\ntrivially migrated to using a normal format.\n\nIf a new use case for a custom formatting impl pops up, you can add it\nback.", "tree": {"sha": "926ed2d285303de0a64f833a46fee04744d0d7de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/926ed2d285303de0a64f833a46fee04744d0d7de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "html_url": "https://github.com/rust-lang/rust/commit/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb", "html_url": "https://github.com/rust-lang/rust/commit/91c3c2040ce109d6e9ea00ffb8e8f69f3fd6d9bb"}], "stats": {"total": 156, "additions": 64, "deletions": 92}, "files": [{"sha": "4140bff6e299d5ba53750f3809386ad4d807f3e7", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -2555,8 +2555,8 @@ pub enum AttrStyle {\n \n rustc_index::newtype_index! {\n     #[custom_encodable]\n+    #[debug_format = \"AttrId({})]\"]\n     pub struct AttrId {\n-        DEBUG_FORMAT = \"AttrId({})\"\n     }\n }\n "}, {"sha": "8ba6b8c2c33bc8ef61b2871231d148b1ced357fe", "filename": "compiler/rustc_ast/src/node_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -8,8 +8,8 @@ rustc_index::newtype_index! {\n     /// This is later turned into [`DefId`] and `HirId` for the HIR.\n     ///\n     /// [`DefId`]: rustc_span::def_id::DefId\n+    #[debug_format = \"NodeId({})\"]\n     pub struct NodeId {\n-        DEBUG_FORMAT = \"NodeId({})\"\n     }\n }\n "}, {"sha": "0e5a874735ce2bff04afee6f6468154e66b2931a", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -115,13 +115,13 @@ impl<'tcx> fmt::Debug for OutlivesConstraint<'tcx> {\n }\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"OutlivesConstraintIndex({})\"]\n     pub struct OutlivesConstraintIndex {\n-        DEBUG_FORMAT = \"OutlivesConstraintIndex({})\"\n     }\n }\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"ConstraintSccIndex({})\"]\n     pub struct ConstraintSccIndex {\n-        DEBUG_FORMAT = \"ConstraintSccIndex({})\"\n     }\n }"}, {"sha": "6f533cec9fad4e2baacfb849cfcbeabc37efe4a8", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -108,8 +108,8 @@ impl_visitable! {\n }\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"bw{}\"]\n     pub struct BorrowIndex {\n-        DEBUG_FORMAT = \"bw{}\"\n     }\n }\n "}, {"sha": "0614163474c56ca86e872495c4d6d0587a0d155d", "filename": "compiler/rustc_borrowck/src/location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -20,8 +20,8 @@ pub struct LocationTable {\n }\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"LocationIndex({})\"]\n     pub struct LocationIndex {\n-        DEBUG_FORMAT = \"LocationIndex({})\"\n     }\n }\n "}, {"sha": "ccf6fcac9d2e157cb691a57f2a7b5377e0326403", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -55,8 +55,8 @@ pub(crate) struct NllMemberConstraint<'tcx> {\n }\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"MemberConstraintIndex({})\"]\n     pub(crate) struct NllMemberConstraintIndex {\n-        DEBUG_FORMAT = \"MemberConstraintIndex({})\"\n     }\n }\n "}, {"sha": "c3dfeedc205f7e8e4a4841fea994ea2abf79070f", "filename": "compiler/rustc_borrowck/src/region_infer/values.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -90,12 +90,14 @@ impl RegionValueElements {\n rustc_index::newtype_index! {\n     /// A single integer representing a `Location` in the MIR control-flow\n     /// graph. Constructed efficiently from `RegionValueElements`.\n-    pub struct PointIndex { DEBUG_FORMAT = \"PointIndex({})\" }\n+    #[debug_format = \"PointIndex({})\"]\n+    pub struct PointIndex {}\n }\n \n rustc_index::newtype_index! {\n     /// A single integer representing a `ty::Placeholder`.\n-    pub struct PlaceholderIndex { DEBUG_FORMAT = \"PlaceholderIndex({})\" }\n+    #[debug_format = \"PlaceholderIndex({})\"]\n+    pub struct PlaceholderIndex {}\n }\n \n /// An individual element in a region value -- the value of a"}, {"sha": "3f59e8ddf1546af3c2d076512dc9c10cc4e14184", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/arg_matrix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Farg_matrix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Farg_matrix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Farg_matrix.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -4,14 +4,14 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::ty::error::TypeError;\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"ExpectedIdx({})\"]\n     pub(crate) struct ExpectedIdx {\n-        DEBUG_FORMAT = \"ExpectedIdx({})\",\n     }\n }\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"ProvidedIdx({})\"]\n     pub(crate) struct ProvidedIdx {\n-        DEBUG_FORMAT = \"ProvidedIdx({})\",\n     }\n }\n "}, {"sha": "3763373ad68a73d7cd7399f26d8d688d8a49db84", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -96,14 +96,14 @@ fn for_each_consumable<'tcx>(hir: Map<'tcx>, place: TrackedValue, mut f: impl Fn\n }\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"id({})\"]\n     pub struct PostOrderId {\n-        DEBUG_FORMAT = \"id({})\",\n     }\n }\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"hidx({})\"]\n     pub struct TrackedValueIndex {\n-        DEBUG_FORMAT = \"hidx({})\",\n     }\n }\n "}, {"sha": "64dc0e8f56d445ac804934856244326c4a7b9ed7", "filename": "compiler/rustc_infer/src/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -357,14 +357,14 @@ impl<'tcx> SccUniverse<'tcx> {\n }\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"LeakCheckNode({})\"]\n     struct LeakCheckNode {\n-        DEBUG_FORMAT = \"LeakCheckNode({})\"\n     }\n }\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"LeakCheckScc({})\"]\n     struct LeakCheckScc {\n-        DEBUG_FORMAT = \"LeakCheckScc({})\"\n     }\n }\n "}, {"sha": "7b7e475da5b5f7144de6a1fcbce161a226fef7f2", "filename": "compiler/rustc_macros/src/newtype.rs", "status": "modified", "additions": 21, "deletions": 45, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -3,22 +3,6 @@ use quote::quote;\n use syn::parse::*;\n use syn::*;\n \n-mod kw {\n-    syn::custom_keyword!(DEBUG_FORMAT);\n-    syn::custom_keyword!(MAX);\n-    syn::custom_keyword!(custom);\n-}\n-\n-#[derive(Debug)]\n-enum DebugFormat {\n-    // The user will provide a custom `Debug` impl, so we shouldn't generate\n-    // one\n-    Custom,\n-    // Use the specified format string in the generated `Debug` impl\n-    // By default, this is \"{}\"\n-    Format(String),\n-}\n-\n // We parse the input and emit the output in a single step.\n // This field stores the final macro output\n struct Newtype(TokenStream);\n@@ -35,7 +19,7 @@ impl Parse for Newtype {\n \n         // Any additional `#[derive]` macro paths to apply\n         let mut derive_paths: Vec<Path> = Vec::new();\n-        let mut debug_format: Option<DebugFormat> = None;\n+        let mut debug_format: Option<Lit> = None;\n         let mut max = None;\n         let mut consts = Vec::new();\n         let mut encodable = true;\n@@ -65,7 +49,18 @@ impl Parse for Newtype {\n                     };\n \n                     if let Some(old) = max.replace(literal.lit) {\n-                        panic!(\"Specified multiple MAX: {:?}\", old);\n+                        panic!(\"Specified multiple max: {:?}\", old);\n+                    }\n+\n+                    false\n+                }\n+                \"debug_format\" => {\n+                    let Ok(Meta::NameValue(literal) )= attr.parse_meta() else {\n+                        panic!(\"#[debug_format = FMT] attribute requires a format\");\n+                    };\n+\n+                    if let Some(old) = debug_format.replace(literal.lit) {\n+                        panic!(\"Specified multiple debug format options: {:?}\", old);\n                     }\n \n                     false\n@@ -79,23 +74,6 @@ impl Parse for Newtype {\n             body.parse::<Token![..]>()?;\n         } else {\n             loop {\n-                if body.lookahead1().peek(kw::DEBUG_FORMAT) {\n-                    body.parse::<kw::DEBUG_FORMAT>()?;\n-                    body.parse::<Token![=]>()?;\n-                    let new_debug_format = if body.lookahead1().peek(kw::custom) {\n-                        body.parse::<kw::custom>()?;\n-                        DebugFormat::Custom\n-                    } else {\n-                        let format_str: LitStr = body.parse()?;\n-                        DebugFormat::Format(format_str.value())\n-                    };\n-                    try_comma()?;\n-                    if let Some(old) = debug_format.replace(new_debug_format) {\n-                        panic!(\"Specified multiple debug format options: {:?}\", old);\n-                    }\n-                    continue;\n-                }\n-\n                 // We've parsed everything that the user provided, so we're done\n                 if body.is_empty() {\n                     break;\n@@ -112,7 +90,9 @@ impl Parse for Newtype {\n             }\n         }\n \n-        let debug_format = debug_format.unwrap_or(DebugFormat::Format(\"{}\".to_string()));\n+        let debug_format =\n+            debug_format.unwrap_or_else(|| Lit::Str(LitStr::new(\"{}\", Span::call_site())));\n+\n         // shave off 256 indices at the end to allow space for packing these indices into enums\n         let max = max.unwrap_or_else(|| Lit::Int(LitInt::new(\"0xFFFF_FF00\", Span::call_site())));\n \n@@ -167,18 +147,14 @@ impl Parse for Newtype {\n             quote! {}\n         };\n \n-        let debug_impl = match debug_format {\n-            DebugFormat::Custom => quote! {},\n-            DebugFormat::Format(format) => {\n-                quote! {\n-                    impl ::std::fmt::Debug for #name {\n-                        fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n-                            write!(fmt, #format, self.as_u32())\n-                        }\n-                    }\n+        let debug_impl = quote! {\n+            impl ::std::fmt::Debug for #name {\n+                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n+                    write!(fmt, #debug_format, self.as_u32())\n                 }\n             }\n         };\n+\n         let spec_partial_eq_impl = if let Lit::Int(max) = &max {\n             if let Ok(max_val) = max.base10_parse::<u32>() {\n                 quote! {"}, {"sha": "8806077175b8ce75b47e027ba8313910ddc5922b", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -12,8 +12,8 @@ rustc_index::newtype_index! {\n     /// constant value of `0`.\n     #[derive(HashStable)]\n     #[max = 0xFFFF_FFFF]\n+    #[debug_format = \"ExpressionOperandId({})\"]\n     pub struct ExpressionOperandId {\n-        DEBUG_FORMAT = \"ExpressionOperandId({})\",\n     }\n }\n \n@@ -34,8 +34,8 @@ impl ExpressionOperandId {\n rustc_index::newtype_index! {\n     #[derive(HashStable)]\n     #[max = 0xFFFF_FFFF]\n+    #[debug_format = \"CounterValueReference({})\"]\n     pub struct CounterValueReference {\n-        DEBUG_FORMAT = \"CounterValueReference({})\",\n     }\n }\n \n@@ -58,8 +58,8 @@ rustc_index::newtype_index! {\n     /// Values descend from u32::MAX.\n     #[derive(HashStable)]\n     #[max = 0xFFFF_FFFF]\n+    #[debug_format = \"InjectedExpressionId({})\"]\n     pub struct InjectedExpressionId {\n-        DEBUG_FORMAT = \"InjectedExpressionId({})\",\n     }\n }\n \n@@ -69,8 +69,8 @@ rustc_index::newtype_index! {\n     /// Values ascend from 0.\n     #[derive(HashStable)]\n     #[max = 0xFFFF_FFFF]\n+    #[debug_format = \"InjectedExpressionIndex({})\"]\n     pub struct InjectedExpressionIndex {\n-        DEBUG_FORMAT = \"InjectedExpressionIndex({})\",\n     }\n }\n \n@@ -80,8 +80,8 @@ rustc_index::newtype_index! {\n     /// \"mapgen\" process. They cannot be computed algorithmically, from the other `newtype_index`s.\n     #[derive(HashStable)]\n     #[max = 0xFFFF_FFFF]\n+    #[debug_format = \"MappedExpressionIndex({})\"]\n     pub struct MappedExpressionIndex {\n-        DEBUG_FORMAT = \"MappedExpressionIndex({})\",\n     }\n }\n "}, {"sha": "6057fdcaebba2e6014a6d47adc051c08061d7d5a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -655,8 +655,8 @@ impl SourceInfo {\n \n rustc_index::newtype_index! {\n     #[derive(HashStable)]\n+    #[debug_format = \"_{}\"]\n     pub struct Local {\n-        DEBUG_FORMAT = \"_{}\",\n         const RETURN_PLACE = 0,\n     }\n }\n@@ -1147,8 +1147,8 @@ rustc_index::newtype_index! {\n     /// [`CriticalCallEdges`]: ../../rustc_const_eval/transform/add_call_guards/enum.AddCallGuards.html#variant.CriticalCallEdges\n     /// [guide-mir]: https://rustc-dev-guide.rust-lang.org/mir/\n     #[derive(HashStable)]\n+    #[debug_format = \"bb{}\"]\n     pub struct BasicBlock {\n-        DEBUG_FORMAT = \"bb{}\",\n         const START_BLOCK = 0,\n     }\n }\n@@ -1531,8 +1531,8 @@ rustc_index::newtype_index! {\n     /// [CFG]: https://rustc-dev-guide.rust-lang.org/appendix/background.html#cfg\n     /// [mir-datatypes]: https://rustc-dev-guide.rust-lang.org/mir/index.html#mir-data-types\n     #[derive(HashStable)]\n+    #[debug_format = \"field[{}]\"]\n     pub struct Field {\n-        DEBUG_FORMAT = \"field[{}]\"\n     }\n }\n \n@@ -1758,8 +1758,8 @@ impl Debug for Place<'_> {\n \n rustc_index::newtype_index! {\n     #[derive(HashStable)]\n+    #[debug_format = \"scope[{}]\"]\n     pub struct SourceScope {\n-        DEBUG_FORMAT = \"scope[{}]\",\n         const OUTERMOST_SOURCE_SCOPE = 0,\n     }\n }\n@@ -2756,8 +2756,8 @@ impl<'tcx> TypeVisitable<'tcx> for UserTypeProjection {\n \n rustc_index::newtype_index! {\n     #[derive(HashStable)]\n+    #[debug_format = \"promoted[{}]\"]\n     pub struct Promoted {\n-        DEBUG_FORMAT = \"promoted[{}]\"\n     }\n }\n "}, {"sha": "160e9691e69ba2c45bd5a51382d519c4f051b8d3", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -131,8 +131,8 @@ pub struct UnsafetyCheckResult {\n \n rustc_index::newtype_index! {\n     #[derive(HashStable)]\n+    #[debug_format = \"_{}\"]\n     pub struct GeneratorSavedLocal {\n-        DEBUG_FORMAT = \"_{}\",\n     }\n }\n "}, {"sha": "ad8f873bf9b792a3937103a87aa89037238b06e6", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -35,8 +35,8 @@ macro_rules! thir_with_elements {\n         $(\n             newtype_index! {\n                 #[derive(HashStable)]\n+                #[debug_format = $format]\n                 pub struct $id {\n-                    DEBUG_FORMAT = $format\n                 }\n             }\n         )*"}, {"sha": "30073b541ecbd0e5c09a32e0c91bcd028a6fa770", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -99,12 +99,6 @@ impl<'tcx> fmt::Debug for ty::ConstVid<'tcx> {\n     }\n }\n \n-impl fmt::Debug for ty::RegionVid {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"'_#{}r\", self.index())\n-    }\n-}\n-\n impl<'tcx> fmt::Debug for ty::TraitRef<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         with_no_trimmed_paths!(fmt::Display::fmt(self, f))"}, {"sha": "3f22b0e5a9a04a2b0a0b1aa8baa5c7a37f32b5a4", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -1378,8 +1378,8 @@ pub struct ConstVid<'tcx> {\n rustc_index::newtype_index! {\n     /// A **region** (lifetime) **v**ariable **ID**.\n     #[derive(HashStable)]\n+    #[debug_format = \"'_#{}r\"]\n     pub struct RegionVid {\n-        DEBUG_FORMAT = custom,\n     }\n }\n "}, {"sha": "8483b1745c7ef08da6db859166169ee047c3c6b6", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -609,8 +609,8 @@ impl<'a, V> LocalTableInContextMut<'a, V> {\n \n rustc_index::newtype_index! {\n     #[derive(HashStable)]\n+    #[debug_format = \"UserType({})\"]\n     pub struct UserTypeAnnotationIndex {\n-        DEBUG_FORMAT = \"UserType({})\",\n         const START_INDEX = 0,\n     }\n }"}, {"sha": "f286aff8420cf7ce87bb4e908397bd6cf9242c25", "filename": "compiler/rustc_mir_dataflow/src/move_paths/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -14,8 +14,8 @@ use self::abs_domain::{AbstractElem, Lift};\n mod abs_domain;\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"mp{}\"]\n     pub struct MovePathIndex {\n-        DEBUG_FORMAT = \"mp{}\"\n     }\n }\n \n@@ -26,14 +26,14 @@ impl polonius_engine::Atom for MovePathIndex {\n }\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"mo{}\"]\n     pub struct MoveOutIndex {\n-        DEBUG_FORMAT = \"mo{}\"\n     }\n }\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"in{}\"]\n     pub struct InitIndex {\n-        DEBUG_FORMAT = \"in{}\"\n     }\n }\n "}, {"sha": "40ed6ceb839e09c5d9a034eccd6a4af9503a4140", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -282,8 +282,8 @@ impl graph::WithPredecessors for CoverageGraph {\n \n rustc_index::newtype_index! {\n     /// A node in the control-flow graph of CoverageGraph.\n+    #[debug_format = \"bcb{}\"]\n     pub(super) struct BasicCoverageBlock {\n-        DEBUG_FORMAT = \"bcb{}\",\n         const START_BCB = 0,\n     }\n }"}, {"sha": "bfbe65b5bfc3d73843787b85b034435d507cf8c4", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -108,14 +108,14 @@ use std::rc::Rc;\n mod rwu_table;\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"v({})\"]\n     pub struct Variable {\n-        DEBUG_FORMAT = \"v({})\",\n     }\n }\n \n rustc_index::newtype_index! {\n+    #[debug_format = \"ln({})\"]\n     pub struct LiveNode {\n-        DEBUG_FORMAT = \"ln({})\",\n     }\n }\n "}, {"sha": "5d15757f1ab34fd2d56bffed5177e71589ffdd70", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -11,8 +11,8 @@ use std::hash::{Hash, Hasher};\n \n rustc_index::newtype_index! {\n     #[custom_encodable]\n+    #[debug_format = \"crate{}\"]\n     pub struct CrateNum {\n-        DEBUG_FORMAT = \"crate{}\"\n     }\n }\n \n@@ -195,8 +195,8 @@ rustc_index::newtype_index! {\n     /// particular definition. It should really be considered an interned\n     /// shorthand for a particular DefPath.\n     #[custom_encodable] // (only encodable in metadata)\n+    #[debug_format = \"DefIndex({})\"]\n     pub struct DefIndex {\n-        DEBUG_FORMAT = \"DefIndex({})\",\n         /// The crate root is always assigned index 0 by the AST Map code,\n         /// thanks to `NodeCollector::new`.\n         const CRATE_DEF_INDEX = 0,"}, {"sha": "f80b5d99df63b7a57f3305e08191077eba07d5d8", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -84,8 +84,8 @@ rustc_index::newtype_index! {\n     /// A unique ID associated with a macro invocation and expansion.\n     #[custom_encodable]\n     #[no_ord_impl]\n+    #[debug_format = \"expn{}\"]\n     pub struct LocalExpnId {\n-        DEBUG_FORMAT = \"expn{}\"\n     }\n }\n "}, {"sha": "5a6ee6721d3819c17ae21c8c93b2570d518e350d", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "patch": "@@ -301,8 +301,8 @@ rustc_index::newtype_index! {\n     ///\n     /// [dbi]: https://en.wikipedia.org/wiki/De_Bruijn_index\n     #[derive(HashStable_Generic)]\n+    #[debug_format = \"DebruijnIndex({})\"]\n     pub struct DebruijnIndex {\n-        DEBUG_FORMAT = \"DebruijnIndex({})\",\n         const INNERMOST = 0,\n     }\n }\n@@ -499,8 +499,8 @@ pub struct FloatVarValue(pub FloatTy);\n \n rustc_index::newtype_index! {\n     /// A **ty**pe **v**ariable **ID**.\n+    #[debug_format = \"_#{}t\"]\n     pub struct TyVid {\n-        DEBUG_FORMAT = \"_#{}t\"\n     }\n }\n \n@@ -788,8 +788,8 @@ rustc_index::newtype_index! {\n     /// type -- an idealized representative of \"types in general\" that we\n     /// use for checking generic functions.\n     #[derive(HashStable_Generic)]\n+    #[debug_format = \"U{}\"]\n     pub struct UniverseIndex {\n-        DEBUG_FORMAT = \"U{}\",\n     }\n }\n "}]}