{"sha": "c847c079fd66d7ed09c64ff398baf05317b16500", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NDdjMDc5ZmQ2NmQ3ZWQwOWM2NGZmMzk4YmFmMDUzMTdiMTY1MDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-17T10:09:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-19T18:28:27Z"}, "message": "Add AssistConfig", "tree": {"sha": "f7560983031a6f122156b3d4c3fccaf3f4c23d5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7560983031a6f122156b3d4c3fccaf3f4c23d5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c847c079fd66d7ed09c64ff398baf05317b16500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c847c079fd66d7ed09c64ff398baf05317b16500", "html_url": "https://github.com/rust-lang/rust/commit/c847c079fd66d7ed09c64ff398baf05317b16500", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c847c079fd66d7ed09c64ff398baf05317b16500/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "131849f2abd94dc8143f0c5d65e022136f29561a", "url": "https://api.github.com/repos/rust-lang/rust/commits/131849f2abd94dc8143f0c5d65e022136f29561a", "html_url": "https://github.com/rust-lang/rust/commit/131849f2abd94dc8143f0c5d65e022136f29561a"}], "stats": {"total": 168, "additions": 129, "deletions": 39}, "files": [{"sha": "c0a0226fb247bb4aa96a57d501556ccfe32ae219", "filename": "crates/ra_assists/src/assist_config.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_assists%2Fsrc%2Fassist_config.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_assists%2Fsrc%2Fassist_config.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_config.rs?ref=c847c079fd66d7ed09c64ff398baf05317b16500", "patch": "@@ -0,0 +1,27 @@\n+//! Settings for tweaking assists.\n+//!\n+//! The fun thing here is `SnippetCap` -- this type can only be created in this\n+//! module, and we use to statically check that we only produce snippet\n+//! assists if we are allowed to.\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct AssistConfig {\n+    pub snippet_cap: Option<SnippetCap>,\n+}\n+\n+impl AssistConfig {\n+    pub fn allow_snippets(&mut self, yes: bool) {\n+        self.snippet_cap = if yes { Some(SnippetCap { _private: () }) } else { None }\n+    }\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n+pub struct SnippetCap {\n+    _private: (),\n+}\n+\n+impl Default for AssistConfig {\n+    fn default() -> Self {\n+        AssistConfig { snippet_cap: Some(SnippetCap { _private: () }) }\n+    }\n+}"}, {"sha": "b90bbf8b2e6f81fdea138bc70fc4ffa4371075c2", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=c847c079fd66d7ed09c64ff398baf05317b16500", "patch": "@@ -15,7 +15,10 @@ use ra_syntax::{\n };\n use ra_text_edit::TextEditBuilder;\n \n-use crate::{Assist, AssistId, GroupLabel, ResolvedAssist};\n+use crate::{\n+    assist_config::{AssistConfig, SnippetCap},\n+    Assist, AssistId, GroupLabel, ResolvedAssist,\n+};\n \n /// `AssistContext` allows to apply an assist or check if it could be applied.\n ///\n@@ -48,17 +51,22 @@ use crate::{Assist, AssistId, GroupLabel, ResolvedAssist};\n /// moment, because the LSP API is pretty awkward in this place, and it's much\n /// easier to just compute the edit eagerly :-)\n pub(crate) struct AssistContext<'a> {\n+    pub(crate) config: &'a AssistConfig,\n     pub(crate) sema: Semantics<'a, RootDatabase>,\n     pub(crate) db: &'a RootDatabase,\n     pub(crate) frange: FileRange,\n     source_file: SourceFile,\n }\n \n impl<'a> AssistContext<'a> {\n-    pub fn new(sema: Semantics<'a, RootDatabase>, frange: FileRange) -> AssistContext<'a> {\n+    pub(crate) fn new(\n+        sema: Semantics<'a, RootDatabase>,\n+        config: &'a AssistConfig,\n+        frange: FileRange,\n+    ) -> AssistContext<'a> {\n         let source_file = sema.parse(frange.file_id);\n         let db = sema.db;\n-        AssistContext { sema, db, frange, source_file }\n+        AssistContext { config, sema, db, frange, source_file }\n     }\n \n     // NB, this ignores active selection.\n@@ -165,11 +173,17 @@ pub(crate) struct AssistBuilder {\n     edit: TextEditBuilder,\n     cursor_position: Option<TextSize>,\n     file: FileId,\n+    is_snippet: bool,\n }\n \n impl AssistBuilder {\n     pub(crate) fn new(file: FileId) -> AssistBuilder {\n-        AssistBuilder { edit: TextEditBuilder::default(), cursor_position: None, file }\n+        AssistBuilder {\n+            edit: TextEditBuilder::default(),\n+            cursor_position: None,\n+            file,\n+            is_snippet: false,\n+        }\n     }\n \n     /// Remove specified `range` of text.\n@@ -180,10 +194,30 @@ impl AssistBuilder {\n     pub(crate) fn insert(&mut self, offset: TextSize, text: impl Into<String>) {\n         self.edit.insert(offset, text.into())\n     }\n+    /// Append specified `text` at the given `offset`\n+    pub(crate) fn insert_snippet(\n+        &mut self,\n+        _cap: SnippetCap,\n+        offset: TextSize,\n+        text: impl Into<String>,\n+    ) {\n+        self.is_snippet = true;\n+        self.edit.insert(offset, text.into())\n+    }\n     /// Replaces specified `range` of text with a given string.\n     pub(crate) fn replace(&mut self, range: TextRange, replace_with: impl Into<String>) {\n         self.edit.replace(range, replace_with.into())\n     }\n+    /// Append specified `text` at the given `offset`\n+    pub(crate) fn replace_snippet(\n+        &mut self,\n+        _cap: SnippetCap,\n+        range: TextRange,\n+        replace_with: impl Into<String>,\n+    ) {\n+        self.is_snippet = true;\n+        self.edit.replace(range, replace_with.into())\n+    }\n     pub(crate) fn replace_ast<N: AstNode>(&mut self, old: N, new: N) {\n         algo::diff(old.syntax(), new.syntax()).into_text_edit(&mut self.edit)\n     }\n@@ -227,7 +261,12 @@ impl AssistBuilder {\n         if edit.is_empty() && self.cursor_position.is_none() {\n             panic!(\"Only call `add_assist` if the assist can be applied\")\n         }\n-        SingleFileChange { label: change_label, edit, cursor_position: self.cursor_position }\n-            .into_source_change(self.file)\n+        let mut res =\n+            SingleFileChange { label: change_label, edit, cursor_position: self.cursor_position }\n+                .into_source_change(self.file);\n+        if self.is_snippet {\n+            res.is_snippet = true;\n+        }\n+        res\n     }\n }"}, {"sha": "7f0a723c9e75c0a61819e922e763b2ab72c89527", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=c847c079fd66d7ed09c64ff398baf05317b16500", "patch": "@@ -10,6 +10,7 @@ macro_rules! eprintln {\n     ($($tt:tt)*) => { stdx::eprintln!($($tt)*) };\n }\n \n+mod assist_config;\n mod assist_context;\n mod marks;\n #[cfg(test)]\n@@ -24,6 +25,8 @@ use ra_syntax::TextRange;\n \n pub(crate) use crate::assist_context::{AssistContext, Assists};\n \n+pub use assist_config::AssistConfig;\n+\n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -54,9 +57,9 @@ impl Assist {\n     ///\n     /// Assists are returned in the \"unresolved\" state, that is only labels are\n     /// returned, without actual edits.\n-    pub fn unresolved(db: &RootDatabase, range: FileRange) -> Vec<Assist> {\n+    pub fn unresolved(db: &RootDatabase, config: &AssistConfig, range: FileRange) -> Vec<Assist> {\n         let sema = Semantics::new(db);\n-        let ctx = AssistContext::new(sema, range);\n+        let ctx = AssistContext::new(sema, config, range);\n         let mut acc = Assists::new_unresolved(&ctx);\n         handlers::all().iter().for_each(|handler| {\n             handler(&mut acc, &ctx);\n@@ -68,9 +71,13 @@ impl Assist {\n     ///\n     /// Assists are returned in the \"resolved\" state, that is with edit fully\n     /// computed.\n-    pub fn resolved(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssist> {\n+    pub fn resolved(\n+        db: &RootDatabase,\n+        config: &AssistConfig,\n+        range: FileRange,\n+    ) -> Vec<ResolvedAssist> {\n         let sema = Semantics::new(db);\n-        let ctx = AssistContext::new(sema, range);\n+        let ctx = AssistContext::new(sema, config, range);\n         let mut acc = Assists::new_resolved(&ctx);\n         handlers::all().iter().for_each(|handler| {\n             handler(&mut acc, &ctx);"}, {"sha": "9ba3da78622eaf638c73ec35d44ba1c87a330828", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=c847c079fd66d7ed09c64ff398baf05317b16500", "patch": "@@ -11,7 +11,7 @@ use test_utils::{\n     RangeOrOffset,\n };\n \n-use crate::{handlers::Handler, Assist, AssistContext, Assists};\n+use crate::{handlers::Handler, Assist, AssistConfig, AssistContext, Assists};\n \n pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n     let (mut db, file_id) = RootDatabase::with_single_file(text);\n@@ -41,14 +41,14 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n     let (db, file_id) = crate::tests::with_single_file(&before);\n     let frange = FileRange { file_id, range: selection.into() };\n \n-    let mut assist = Assist::resolved(&db, frange)\n+    let mut assist = Assist::resolved(&db, &AssistConfig::default(), frange)\n         .into_iter()\n         .find(|assist| assist.assist.id.0 == assist_id)\n         .unwrap_or_else(|| {\n             panic!(\n                 \"\\n\\nAssist is not applicable: {}\\nAvailable assists: {}\",\n                 assist_id,\n-                Assist::resolved(&db, frange)\n+                Assist::resolved(&db, &AssistConfig::default(), frange)\n                     .into_iter()\n                     .map(|assist| assist.assist.id.0)\n                     .collect::<Vec<_>>()\n@@ -90,7 +90,8 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult) {\n     let frange = FileRange { file_id: file_with_caret_id, range: range_or_offset.into() };\n \n     let sema = Semantics::new(&db);\n-    let ctx = AssistContext::new(sema, frange);\n+    let config = AssistConfig::default();\n+    let ctx = AssistContext::new(sema, &config, frange);\n     let mut acc = Assists::new_resolved(&ctx);\n     handler(&mut acc, &ctx);\n     let mut res = acc.finish_resolved();\n@@ -103,19 +104,20 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult) {\n             let mut actual = db.file_text(change.file_id).as_ref().to_owned();\n             change.edit.apply(&mut actual);\n \n-            match source_change.cursor_position {\n-                None => {\n-                    if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {\n-                        let off = change\n-                            .edit\n-                            .apply_to_offset(before_cursor_pos)\n-                            .expect(\"cursor position is affected by the edit\");\n-                        actual = add_cursor(&actual, off)\n+            if !source_change.is_snippet {\n+                match source_change.cursor_position {\n+                    None => {\n+                        if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {\n+                            let off = change\n+                                .edit\n+                                .apply_to_offset(before_cursor_pos)\n+                                .expect(\"cursor position is affected by the edit\");\n+                            actual = add_cursor(&actual, off)\n+                        }\n                     }\n-                }\n-                Some(off) => actual = add_cursor(&actual, off.offset),\n-            };\n-\n+                    Some(off) => actual = add_cursor(&actual, off.offset),\n+                };\n+            }\n             assert_eq_text!(after, &actual);\n         }\n         (Some(assist), ExpectedResult::Target(target)) => {\n@@ -136,7 +138,7 @@ fn assist_order_field_struct() {\n     let (before_cursor_pos, before) = extract_offset(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range: TextRange::empty(before_cursor_pos) };\n-    let assists = Assist::resolved(&db, frange);\n+    let assists = Assist::resolved(&db, &AssistConfig::default(), frange);\n     let mut assists = assists.iter();\n \n     assert_eq!(\n@@ -159,7 +161,7 @@ fn assist_order_if_expr() {\n     let (range, before) = extract_range(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range };\n-    let assists = Assist::resolved(&db, frange);\n+    let assists = Assist::resolved(&db, &AssistConfig::default(), frange);\n     let mut assists = assists.iter();\n \n     assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Extract into variable\");"}, {"sha": "191300704b5531ac1ea396ac110ab777c4907373", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=c847c079fd66d7ed09c64ff398baf05317b16500", "patch": "@@ -59,8 +59,8 @@ pub use crate::completion::{\n /// with ordering of completions (currently this is done by the client).\n pub(crate) fn completions(\n     db: &RootDatabase,\n-    position: FilePosition,\n     config: &CompletionConfig,\n+    position: FilePosition,\n ) -> Option<Completions> {\n     let ctx = CompletionContext::new(db, position, config)?;\n "}, {"sha": "bf22452a281c76cf798aad520d97064151bf5fb3", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=c847c079fd66d7ed09c64ff398baf05317b16500", "patch": "@@ -20,7 +20,7 @@ pub(crate) fn do_completion_with_options(\n     } else {\n         single_file_with_position(code)\n     };\n-    let completions = analysis.completions(position, options).unwrap().unwrap();\n+    let completions = analysis.completions(options, position).unwrap().unwrap();\n     let completion_items: Vec<CompletionItem> = completions.into();\n     let mut kind_completions: Vec<CompletionItem> =\n         completion_items.into_iter().filter(|c| c.completion_kind == kind).collect();"}, {"sha": "54c2bcc0942aab887b0cc8e13f98392e65ed0d9e", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=c847c079fd66d7ed09c64ff398baf05317b16500", "patch": "@@ -629,6 +629,7 @@ mod tests {\n                             },\n                         ],\n                         cursor_position: None,\n+                        is_snippet: false,\n                     },\n                 ),\n                 severity: Error,\n@@ -685,6 +686,7 @@ mod tests {\n                         ],\n                         file_system_edits: [],\n                         cursor_position: None,\n+                        is_snippet: false,\n                     },\n                 ),\n                 severity: Error,"}, {"sha": "66125f2f59b5cb751e05a653a43213c8e6601a95", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=c847c079fd66d7ed09c64ff398baf05317b16500", "patch": "@@ -82,7 +82,7 @@ pub use crate::{\n };\n \n pub use hir::Documentation;\n-pub use ra_assists::AssistId;\n+pub use ra_assists::{AssistConfig, AssistId};\n pub use ra_db::{\n     Canceled, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRootId,\n };\n@@ -458,17 +458,17 @@ impl Analysis {\n     /// Computes completions at the given position.\n     pub fn completions(\n         &self,\n-        position: FilePosition,\n         config: &CompletionConfig,\n+        position: FilePosition,\n     ) -> Cancelable<Option<Vec<CompletionItem>>> {\n-        self.with_db(|db| completion::completions(db, position, config).map(Into::into))\n+        self.with_db(|db| completion::completions(db, config, position).map(Into::into))\n     }\n \n     /// Computes assists (aka code actions aka intentions) for the given\n     /// position.\n-    pub fn assists(&self, frange: FileRange) -> Cancelable<Vec<Assist>> {\n+    pub fn assists(&self, config: &AssistConfig, frange: FileRange) -> Cancelable<Vec<Assist>> {\n         self.with_db(|db| {\n-            ra_assists::Assist::resolved(db, frange)\n+            ra_assists::Assist::resolved(db, config, frange)\n                 .into_iter()\n                 .map(|assist| Assist {\n                     id: assist.assist.id,"}, {"sha": "68a53ad4b07e86b640a56d50e9b7bc61a7459718", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=c847c079fd66d7ed09c64ff398baf05317b16500", "patch": "@@ -670,6 +670,7 @@ mod tests {\n                         },\n                     ],\n                     cursor_position: None,\n+                    is_snippet: false,\n                 },\n             },\n         )\n@@ -722,6 +723,7 @@ mod tests {\n                         },\n                     ],\n                     cursor_position: None,\n+                    is_snippet: false,\n                 },\n             },\n         )\n@@ -818,6 +820,7 @@ mod tests {\n                         },\n                     ],\n                     cursor_position: None,\n+                    is_snippet: false,\n                 },\n             },\n         )"}, {"sha": "c64165f3a90028681f4694050f541dd9fc5770ae", "filename": "crates/ra_ide_db/src/source_change.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs?ref=c847c079fd66d7ed09c64ff398baf05317b16500", "patch": "@@ -13,6 +13,7 @@ pub struct SourceChange {\n     pub source_file_edits: Vec<SourceFileEdit>,\n     pub file_system_edits: Vec<FileSystemEdit>,\n     pub cursor_position: Option<FilePosition>,\n+    pub is_snippet: bool,\n }\n \n impl SourceChange {\n@@ -28,6 +29,7 @@ impl SourceChange {\n             source_file_edits,\n             file_system_edits,\n             cursor_position: None,\n+            is_snippet: false,\n         }\n     }\n \n@@ -41,6 +43,7 @@ impl SourceChange {\n             source_file_edits: edits,\n             file_system_edits: vec![],\n             cursor_position: None,\n+            is_snippet: false,\n         }\n     }\n \n@@ -52,6 +55,7 @@ impl SourceChange {\n             source_file_edits: vec![],\n             file_system_edits: edits,\n             cursor_position: None,\n+            is_snippet: false,\n         }\n     }\n \n@@ -115,6 +119,7 @@ impl SingleFileChange {\n             source_file_edits: vec![SourceFileEdit { file_id, edit: self.edit }],\n             file_system_edits: Vec::new(),\n             cursor_position: self.cursor_position.map(|offset| FilePosition { file_id, offset }),\n+            is_snippet: false,\n         }\n     }\n }"}, {"sha": "b20efe98d8cb2156547443ae367666f32c02eb32", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=c847c079fd66d7ed09c64ff398baf05317b16500", "patch": "@@ -105,7 +105,7 @@ pub fn analysis_bench(\n             if is_completion {\n                 let options = CompletionConfig::default();\n                 let res = do_work(&mut host, file_id, |analysis| {\n-                    analysis.completions(file_position, &options)\n+                    analysis.completions(&options, file_position)\n                 });\n                 if verbosity.is_verbose() {\n                     println!(\"\\n{:#?}\", res);"}, {"sha": "063b1b3161732fc1294b8b4dc4cd0f3bbe8a4c0a", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c847c079fd66d7ed09c64ff398baf05317b16500", "patch": "@@ -11,7 +11,7 @@ use std::{ffi::OsString, path::PathBuf};\n \n use lsp_types::ClientCapabilities;\n use ra_flycheck::FlycheckConfig;\n-use ra_ide::{CompletionConfig, InlayHintsConfig};\n+use ra_ide::{AssistConfig, CompletionConfig, InlayHintsConfig};\n use ra_project_model::CargoConfig;\n use serde::Deserialize;\n \n@@ -32,6 +32,7 @@ pub struct Config {\n \n     pub inlay_hints: InlayHintsConfig,\n     pub completion: CompletionConfig,\n+    pub assist: AssistConfig,\n     pub call_info_full: bool,\n     pub lens: LensConfig,\n }\n@@ -136,6 +137,7 @@ impl Default for Config {\n                 add_call_argument_snippets: true,\n                 ..CompletionConfig::default()\n             },\n+            assist: AssistConfig::default(),\n             call_info_full: true,\n             lens: LensConfig::default(),\n         }\n@@ -281,6 +283,7 @@ impl Config {\n                     }\n                 }\n             }\n+            self.assist.allow_snippets(false);\n         }\n \n         if let Some(window_caps) = caps.window.as_ref() {"}, {"sha": "13ae061fa0f2dff7cc0c287cfdca56b10ffff8e3", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c847c079fd66d7ed09c64ff398baf05317b16500/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=c847c079fd66d7ed09c64ff398baf05317b16500", "patch": "@@ -476,7 +476,7 @@ pub fn handle_completion(\n         return Ok(None);\n     }\n \n-    let items = match world.analysis().completions(position, &world.config.completion)? {\n+    let items = match world.analysis().completions(&world.config.completion, position)? {\n         None => return Ok(None),\n         Some(items) => items,\n     };\n@@ -740,7 +740,9 @@ pub fn handle_code_action(\n     }\n \n     let mut grouped_assists: FxHashMap<String, (usize, Vec<Assist>)> = FxHashMap::default();\n-    for assist in world.analysis().assists(FileRange { file_id, range })?.into_iter() {\n+    for assist in\n+        world.analysis().assists(&world.config.assist, FileRange { file_id, range })?.into_iter()\n+    {\n         match &assist.group_label {\n             Some(label) => grouped_assists\n                 .entry(label.to_owned())"}]}