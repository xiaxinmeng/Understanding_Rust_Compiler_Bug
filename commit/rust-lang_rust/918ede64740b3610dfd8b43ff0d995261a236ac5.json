{"sha": "918ede64740b3610dfd8b43ff0d995261a236ac5", "node_id": "C_kwDOAAsO6NoAKDkxOGVkZTY0NzQwYjM2MTBkZmQ4YjQzZmYwZDk5NTI2MWEyMzZhYzU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-26T20:43:31Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-13T17:27:41Z"}, "message": "make Opaque have one field: OpaqueTy", "tree": {"sha": "89a87e5db71fe836eeab6a519dc681f126a3011e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89a87e5db71fe836eeab6a519dc681f126a3011e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/918ede64740b3610dfd8b43ff0d995261a236ac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/918ede64740b3610dfd8b43ff0d995261a236ac5", "html_url": "https://github.com/rust-lang/rust/commit/918ede64740b3610dfd8b43ff0d995261a236ac5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/918ede64740b3610dfd8b43ff0d995261a236ac5/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed620cf9690fdafed65845bf35c455db992fbba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed620cf9690fdafed65845bf35c455db992fbba1", "html_url": "https://github.com/rust-lang/rust/commit/ed620cf9690fdafed65845bf35c455db992fbba1"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "efc45b5646e2a4b8d3bb3589422c8e474de096dc", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918ede64740b3610dfd8b43ff0d995261a236ac5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918ede64740b3610dfd8b43ff0d995261a236ac5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=918ede64740b3610dfd8b43ff0d995261a236ac5", "patch": "@@ -97,7 +97,7 @@ pub use self::sty::{\n     BoundVariableKind, CanonicalPolyFnSig, ClosureSubsts, ClosureSubstsParts, ConstVid,\n     EarlyBoundRegion, ExistentialPredicate, ExistentialProjection, ExistentialTraitRef, FnSig,\n     FreeRegion, GenSig, GeneratorSubsts, GeneratorSubstsParts, InlineConstSubsts,\n-    InlineConstSubstsParts, ParamConst, ParamTy, PolyExistentialPredicate,\n+    InlineConstSubstsParts, OpaqueTy, ParamConst, ParamTy, PolyExistentialPredicate,\n     PolyExistentialProjection, PolyExistentialTraitRef, PolyFnSig, PolyGenSig, PolyTraitRef,\n     ProjectionTy, Region, RegionKind, RegionVid, TraitRef, TyKind, TypeAndMut, UpvarSubsts,\n     VarianceDiagInfo,"}, {"sha": "4c75614a5bc6ad9e7c306e6385ed64470b31692c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/918ede64740b3610dfd8b43ff0d995261a236ac5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918ede64740b3610dfd8b43ff0d995261a236ac5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=918ede64740b3610dfd8b43ff0d995261a236ac5", "patch": "@@ -1199,6 +1199,16 @@ impl<'tcx> ProjectionTy<'tcx> {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n+pub struct OpaqueTy<'tcx> {\n+    /// The parameters of the opaque.\n+    pub substs: SubstsRef<'tcx>,\n+\n+    /// The `DefId` of the `impl Trait`.\n+    pub def_id: DefId,\n+}\n+\n #[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable, Lift)]\n pub struct GenSig<'tcx> {\n     pub resume_ty: Ty<'tcx>,"}, {"sha": "983fc9d992ade000b448753277faad0d2648ef1c", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918ede64740b3610dfd8b43ff0d995261a236ac5/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918ede64740b3610dfd8b43ff0d995261a236ac5/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=918ede64740b3610dfd8b43ff0d995261a236ac5", "patch": "@@ -44,6 +44,7 @@ pub trait Interner {\n     type ListTy: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type ProjectionTy: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type ParamTy: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n+    type OpaqueTy: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type BoundTy: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type PlaceholderType: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type InferTy: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;"}, {"sha": "5119733d84cd8ee6f37098d8bcb376036a643e8a", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/918ede64740b3610dfd8b43ff0d995261a236ac5/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918ede64740b3610dfd8b43ff0d995261a236ac5/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=918ede64740b3610dfd8b43ff0d995261a236ac5", "patch": "@@ -184,7 +184,7 @@ pub enum TyKind<I: Interner> {\n     /// while for TAIT it is used for the generic parameters of the alias.\n     ///\n     /// During codegen, `tcx.type_of(def_id)` can be used to get the underlying type.\n-    Opaque(I::DefId, I::SubstsRef),\n+    Opaque(I::OpaqueTy),\n \n     /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.\n     Param(I::ParamTy),\n@@ -253,7 +253,7 @@ const fn tykind_discriminant<I: Interner>(value: &TyKind<I>) -> usize {\n         Never => 18,\n         Tuple(_) => 19,\n         Projection(_) => 20,\n-        Opaque(_, _) => 21,\n+        Opaque(_) => 21,\n         Param(_) => 22,\n         Bound(_, _) => 23,\n         Placeholder(_) => 24,\n@@ -287,7 +287,7 @@ impl<I: Interner> Clone for TyKind<I> {\n             Never => Never,\n             Tuple(t) => Tuple(t.clone()),\n             Projection(p) => Projection(p.clone()),\n-            Opaque(d, s) => Opaque(d.clone(), s.clone()),\n+            Opaque(o) => Opaque(o.clone()),\n             Param(p) => Param(p.clone()),\n             Bound(d, b) => Bound(d.clone(), b.clone()),\n             Placeholder(p) => Placeholder(p.clone()),\n@@ -324,7 +324,7 @@ impl<I: Interner> PartialEq for TyKind<I> {\n                 (GeneratorWitness(a_g), GeneratorWitness(b_g)) => a_g == b_g,\n                 (Tuple(a_t), Tuple(b_t)) => a_t == b_t,\n                 (Projection(a_p), Projection(b_p)) => a_p == b_p,\n-                (Opaque(a_d, a_s), Opaque(b_d, b_s)) => a_d == b_d && a_s == b_s,\n+                (Opaque(a_o), Opaque(b_o)) => a_o == b_o,\n                 (Param(a_p), Param(b_p)) => a_p == b_p,\n                 (Bound(a_d, a_b), Bound(b_d, b_b)) => a_d == b_d && a_b == b_b,\n                 (Placeholder(a_p), Placeholder(b_p)) => a_p == b_p,\n@@ -382,7 +382,7 @@ impl<I: Interner> Ord for TyKind<I> {\n                 (GeneratorWitness(a_g), GeneratorWitness(b_g)) => a_g.cmp(b_g),\n                 (Tuple(a_t), Tuple(b_t)) => a_t.cmp(b_t),\n                 (Projection(a_p), Projection(b_p)) => a_p.cmp(b_p),\n-                (Opaque(a_d, a_s), Opaque(b_d, b_s)) => a_d.cmp(b_d).then_with(|| a_s.cmp(b_s)),\n+                (Opaque(a_o), Opaque(b_o)) => a_o.cmp(b_o),\n                 (Param(a_p), Param(b_p)) => a_p.cmp(b_p),\n                 (Bound(a_d, a_b), Bound(b_d, b_b)) => a_d.cmp(b_d).then_with(|| a_b.cmp(b_b)),\n                 (Placeholder(a_p), Placeholder(b_p)) => a_p.cmp(b_p),\n@@ -444,9 +444,8 @@ impl<I: Interner> hash::Hash for TyKind<I> {\n             GeneratorWitness(g) => g.hash(state),\n             Tuple(t) => t.hash(state),\n             Projection(p) => p.hash(state),\n-            Opaque(d, s) => {\n-                d.hash(state);\n-                s.hash(state)\n+            Opaque(o) => {\n+                o.hash(state);\n             }\n             Param(p) => p.hash(state),\n             Bound(d, b) => {\n@@ -486,7 +485,7 @@ impl<I: Interner> fmt::Debug for TyKind<I> {\n             Never => f.write_str(\"Never\"),\n             Tuple(t) => f.debug_tuple_field1_finish(\"Tuple\", t),\n             Projection(p) => f.debug_tuple_field1_finish(\"Projection\", p),\n-            Opaque(d, s) => f.debug_tuple_field2_finish(\"Opaque\", d, s),\n+            Opaque(o) => f.debug_tuple_field1_finish(\"Opaque\", o),\n             Param(p) => f.debug_tuple_field1_finish(\"Param\", p),\n             Bound(d, b) => f.debug_tuple_field2_finish(\"Bound\", d, b),\n             Placeholder(p) => f.debug_tuple_field1_finish(\"Placeholder\", p),\n@@ -515,6 +514,7 @@ where\n     I::ListTy: Encodable<E>,\n     I::ProjectionTy: Encodable<E>,\n     I::ParamTy: Encodable<E>,\n+    I::OpaqueTy: Encodable<E>,\n     I::BoundTy: Encodable<E>,\n     I::PlaceholderType: Encodable<E>,\n     I::InferTy: Encodable<E>,\n@@ -589,9 +589,8 @@ where\n             Projection(p) => e.emit_enum_variant(disc, |e| {\n                 p.encode(e);\n             }),\n-            Opaque(def_id, substs) => e.emit_enum_variant(disc, |e| {\n-                def_id.encode(e);\n-                substs.encode(e);\n+            Opaque(o) => e.emit_enum_variant(disc, |e| {\n+                o.encode(e);\n             }),\n             Param(p) => e.emit_enum_variant(disc, |e| {\n                 p.encode(e);\n@@ -632,6 +631,7 @@ where\n     I::ListTy: Decodable<D>,\n     I::ProjectionTy: Decodable<D>,\n     I::ParamTy: Decodable<D>,\n+    I::OpaqueTy: Decodable<D>,\n     I::BoundTy: Decodable<D>,\n     I::PlaceholderType: Decodable<D>,\n     I::InferTy: Decodable<D>,\n@@ -661,7 +661,7 @@ where\n             18 => Never,\n             19 => Tuple(Decodable::decode(d)),\n             20 => Projection(Decodable::decode(d)),\n-            21 => Opaque(Decodable::decode(d), Decodable::decode(d)),\n+            21 => Opaque(Decodable::decode(d)),\n             22 => Param(Decodable::decode(d)),\n             23 => Bound(Decodable::decode(d), Decodable::decode(d)),\n             24 => Placeholder(Decodable::decode(d)),\n@@ -698,6 +698,7 @@ where\n     I::ProjectionTy: HashStable<CTX>,\n     I::BoundTy: HashStable<CTX>,\n     I::ParamTy: HashStable<CTX>,\n+    I::OpaqueTy: HashStable<CTX>,\n     I::PlaceholderType: HashStable<CTX>,\n     I::InferTy: HashStable<CTX>,\n     I::ErrorGuaranteed: HashStable<CTX>,\n@@ -775,9 +776,8 @@ where\n             Projection(p) => {\n                 p.hash_stable(__hcx, __hasher);\n             }\n-            Opaque(def_id, substs) => {\n-                def_id.hash_stable(__hcx, __hasher);\n-                substs.hash_stable(__hcx, __hasher);\n+            Opaque(o) => {\n+                o.hash_stable(__hcx, __hasher);\n             }\n             Param(p) => {\n                 p.hash_stable(__hcx, __hasher);"}]}