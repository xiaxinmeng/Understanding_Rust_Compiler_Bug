{"sha": "457aed7ca003d7cbef2cda8360ad9b8b5bb83650", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1N2FlZDdjYTAwM2Q3Y2JlZjJjZGE4MzYwYWQ5YjhiNWJiODM2NTA=", "commit": {"author": {"name": "Geoffrey Thomas", "email": "geofft@ldpreload.com", "date": "2015-05-12T18:13:03Z"}, "committer": {"name": "Geoffrey Thomas", "email": "geofft@ldpreload.com", "date": "2015-05-13T00:21:19Z"}, "message": "trpl: move tuple-structs.md into structs.md", "tree": {"sha": "a9a2582f098c4c206720e42101ed2622b7631824", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9a2582f098c4c206720e42101ed2622b7631824"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/457aed7ca003d7cbef2cda8360ad9b8b5bb83650", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/457aed7ca003d7cbef2cda8360ad9b8b5bb83650", "html_url": "https://github.com/rust-lang/rust/commit/457aed7ca003d7cbef2cda8360ad9b8b5bb83650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/457aed7ca003d7cbef2cda8360ad9b8b5bb83650/comments", "author": {"login": "geofft", "id": 74644, "node_id": "MDQ6VXNlcjc0NjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/74644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geofft", "html_url": "https://github.com/geofft", "followers_url": "https://api.github.com/users/geofft/followers", "following_url": "https://api.github.com/users/geofft/following{/other_user}", "gists_url": "https://api.github.com/users/geofft/gists{/gist_id}", "starred_url": "https://api.github.com/users/geofft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geofft/subscriptions", "organizations_url": "https://api.github.com/users/geofft/orgs", "repos_url": "https://api.github.com/users/geofft/repos", "events_url": "https://api.github.com/users/geofft/events{/privacy}", "received_events_url": "https://api.github.com/users/geofft/received_events", "type": "User", "site_admin": false}, "committer": {"login": "geofft", "id": 74644, "node_id": "MDQ6VXNlcjc0NjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/74644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geofft", "html_url": "https://github.com/geofft", "followers_url": "https://api.github.com/users/geofft/followers", "following_url": "https://api.github.com/users/geofft/following{/other_user}", "gists_url": "https://api.github.com/users/geofft/gists{/gist_id}", "starred_url": "https://api.github.com/users/geofft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geofft/subscriptions", "organizations_url": "https://api.github.com/users/geofft/orgs", "repos_url": "https://api.github.com/users/geofft/repos", "events_url": "https://api.github.com/users/geofft/events{/privacy}", "received_events_url": "https://api.github.com/users/geofft/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a5a320babdf000bc9cf719ccd9d95d250f83a02", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a5a320babdf000bc9cf719ccd9d95d250f83a02", "html_url": "https://github.com/rust-lang/rust/commit/2a5a320babdf000bc9cf719ccd9d95d250f83a02"}], "stats": {"total": 121, "additions": 60, "deletions": 61}, "files": [{"sha": "2ab71189ff8fc666f9a45ae7392cd3727fee9bd3", "filename": "src/doc/trpl/SUMMARY.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/457aed7ca003d7cbef2cda8360ad9b8b5bb83650/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/457aed7ca003d7cbef2cda8360ad9b8b5bb83650/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FSUMMARY.md?ref=457aed7ca003d7cbef2cda8360ad9b8b5bb83650", "patch": "@@ -43,7 +43,6 @@\n     * [Universal Function Call Syntax](ufcs.md)\n     * [Crates and Modules](crates-and-modules.md)\n     * [`const` and `static`](const-and-static.md)\n-    * [Tuple Structs](tuple-structs.md)\n     * [Attributes](attributes.md)\n     * [`type` aliases](type-aliases.md)\n     * [Casting between types](casting-between-types.md)"}, {"sha": "2f8d2bfdea0a17ccc7870b96ba23f351829fa88c", "filename": "src/doc/trpl/structs.md", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/457aed7ca003d7cbef2cda8360ad9b8b5bb83650/src%2Fdoc%2Ftrpl%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/457aed7ca003d7cbef2cda8360ad9b8b5bb83650/src%2Fdoc%2Ftrpl%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstructs.md?ref=457aed7ca003d7cbef2cda8360ad9b8b5bb83650", "patch": "@@ -117,3 +117,63 @@ ones, and it will copy the values you don\u2019t specify:\n let origin = Point3d { x: 0, y: 0, z: 0 };\n let point = Point3d { z: 1, x: 2, .. origin };\n ```\n+\n+# Tuple structs\n+\n+Rust has another data type that\u2019s like a hybrid between a [tuple][tuple] and a\n+struct, called a \u2018tuple struct\u2019. Tuple structs have a name, but\n+their fields don\u2019t:\n+\n+```rust\n+struct Color(i32, i32, i32);\n+struct Point(i32, i32, i32);\n+```\n+\n+[tuple]: primitive-types.html#tuples\n+\n+These two will not be equal, even if they have the same values:\n+\n+```rust\n+# struct Color(i32, i32, i32);\n+# struct Point(i32, i32, i32);\n+let black = Color(0, 0, 0);\n+let origin = Point(0, 0, 0);\n+```\n+\n+It is almost always better to use a struct than a tuple struct. We would write\n+`Color` and `Point` like this instead:\n+\n+```rust\n+struct Color {\n+    red: i32,\n+    blue: i32,\n+    green: i32,\n+}\n+\n+struct Point {\n+    x: i32,\n+    y: i32,\n+    z: i32,\n+}\n+```\n+\n+Now, we have actual names, rather than positions. Good names are important,\n+and with a struct, we have actual names.\n+\n+There _is_ one case when a tuple struct is very useful, though, and that\u2019s a\n+tuple struct with only one element. We call this the \u2018newtype\u2019 pattern, because\n+it allows you to create a new type, distinct from that of its contained value\n+and expressing its own semantic meaning:\n+\n+```rust\n+struct Inches(i32);\n+\n+let length = Inches(10);\n+\n+let Inches(integer_length) = length;\n+println!(\"length is {} inches\", integer_length);\n+```\n+\n+As you can see here, you can extract the inner integer type through a\n+destructuring `let`, just as with regular tuples. In this case, the\n+`let Inches(integer_length)` assigns `10` to `integer_length`."}, {"sha": "bdaef70711ae418990568151a86fa624d00f135a", "filename": "src/doc/trpl/tuple-structs.md", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2a5a320babdf000bc9cf719ccd9d95d250f83a02/src%2Fdoc%2Ftrpl%2Ftuple-structs.md", "raw_url": "https://github.com/rust-lang/rust/raw/2a5a320babdf000bc9cf719ccd9d95d250f83a02/src%2Fdoc%2Ftrpl%2Ftuple-structs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftuple-structs.md?ref=2a5a320babdf000bc9cf719ccd9d95d250f83a02", "patch": "@@ -1,60 +0,0 @@\n-% Tuple Structs\n-\n-Rust has another data type that's like a hybrid between a [tuple][tuple] and a\n-[struct][struct], called a \u2018tuple struct\u2019. Tuple structs have a name, but\n-their fields don\u2019t:\n-\n-```rust\n-struct Color(i32, i32, i32);\n-struct Point(i32, i32, i32);\n-```\n-\n-[tuple]: primitive-types.html#tuples\n-[struct]: structs.html\n-\n-These two will not be equal, even if they have the same values:\n-\n-```rust\n-# struct Color(i32, i32, i32);\n-# struct Point(i32, i32, i32);\n-let black = Color(0, 0, 0);\n-let origin = Point(0, 0, 0);\n-```\n-\n-It is almost always better to use a struct than a tuple struct. We would write\n-`Color` and `Point` like this instead:\n-\n-```rust\n-struct Color {\n-    red: i32,\n-    blue: i32,\n-    green: i32,\n-}\n-\n-struct Point {\n-    x: i32,\n-    y: i32,\n-    z: i32,\n-}\n-```\n-\n-Now, we have actual names, rather than positions. Good names are important,\n-and with a struct, we have actual names.\n-\n-There _is_ one case when a tuple struct is very useful, though, and that\u2019s a\n-tuple struct with only one element. We call this the \u2018newtype\u2019 pattern, because\n-it allows you to create a new type, distinct from that of its contained value\n-and expressing its own semantic meaning:\n-\n-```rust\n-struct Inches(i32);\n-\n-let length = Inches(10);\n-\n-let Inches(integer_length) = length;\n-println!(\"length is {} inches\", integer_length);\n-```\n-\n-As you can see here, you can extract the inner integer type through a\n-destructuring `let`, as we discussed previously in \u2018tuples\u2019. In this case, the\n-`let Inches(integer_length)` assigns `10` to `integer_length`."}]}