{"sha": "3899914131053cafb46f61ba3c7d6846673ebd22", "node_id": "C_kwDOAAsO6NoAKDM4OTk5MTQxMzEwNTNjYWZiNDZmNjFiYTNjN2Q2ODQ2NjczZWJkMjI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-25T13:31:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-25T20:03:25Z"}, "message": "bless after rebase", "tree": {"sha": "09db5708eaa97a940d458901ecb5d1e011d0f0ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09db5708eaa97a940d458901ecb5d1e011d0f0ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3899914131053cafb46f61ba3c7d6846673ebd22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3899914131053cafb46f61ba3c7d6846673ebd22", "html_url": "https://github.com/rust-lang/rust/commit/3899914131053cafb46f61ba3c7d6846673ebd22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3899914131053cafb46f61ba3c7d6846673ebd22/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af58692ad10d402612a80fec782cc8e5dce2a75a", "url": "https://api.github.com/repos/rust-lang/rust/commits/af58692ad10d402612a80fec782cc8e5dce2a75a", "html_url": "https://github.com/rust-lang/rust/commit/af58692ad10d402612a80fec782cc8e5dce2a75a"}], "stats": {"total": 773, "additions": 750, "deletions": 23}, "files": [{"sha": "e7345ff3f9a6436f2ad779ee9171f469135eb560", "filename": "src/test/ui/borrowck/issue-81899.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -27,3 +27,16 @@ LL | const _CONST: &[u8] = &f(&[], |_| {});\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/issue-81899.rs:4:23\n+   |\n+LL | const _CONST: &[u8] = &f(&[], |_| {});\n+   | ----------------------^^^^^^^^^^^^^^^-\n+   |                       |\n+   |                       referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "47d83c653558323aa3d5db84ad589a467902068c", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -27,3 +27,16 @@ LL | const _CONST: &() = &f(&|_| {});\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/issue-88434-minimal-example.rs:3:21\n+   |\n+LL | const _CONST: &() = &f(&|_| {});\n+   | --------------------^^^^^^^^^^^-\n+   |                     |\n+   |                     referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "b08a7cfc7fe1a01a6650821aec3f59df0ef97aaa", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -27,3 +27,16 @@ LL | const _CONST: &[u8] = &f(&[], |_| {});\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/issue-88434-removal-index-should-be-less.rs:3:23\n+   |\n+LL | const _CONST: &[u8] = &f(&[], |_| {});\n+   | ----------------------^^^^^^^^^^^^^^^-\n+   |                       |\n+   |                       referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "bbec2a830e64b42082881e7925210f51fc336cb2", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -37,18 +37,29 @@ query stack during panic:\n end of query stack\n Future incompatibility report: Future breakage diagnostic:\n warning: any use of this value will cause an error\n-  --> $DIR/const-eval-query-stack.rs:20:16\n+  --> $DIR/const-eval-query-stack.rs:19:16\n    |\n LL | const X: i32 = 1 / 0;\n    | ---------------^^^^^-\n    |                |\n    |                attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n-  --> $DIR/const-eval-query-stack.rs:19:8\n+  --> $DIR/const-eval-query-stack.rs:18:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n+Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/const-eval-query-stack.rs:23:27\n+   |\n+LL |     let x: &'static i32 = &X;\n+   |                           ^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "b004637fd8300b87601e4a1d26663a68e8676db7", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.64bit.stderr", "status": "modified", "additions": 111, "deletions": 20, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -323,7 +323,20 @@ error: aborting due to 29 previous errors\n For more information about this error, try `rustc --explain E0080`.\n Future incompatibility report: Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:29:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:26:49\n+   |\n+LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n+   |     --------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                                 |\n+   |                                                 unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:30:43\n    |\n LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -336,7 +349,7 @@ LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:33:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:34:45\n    |\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -349,7 +362,7 @@ LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uin\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:37:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:38:45\n    |\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -362,7 +375,20 @@ LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uin\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:47:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:42:45\n+   |\n+LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:49:43\n    |\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -375,7 +401,7 @@ LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:51:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:53:45\n    |\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -388,7 +414,7 @@ LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:55:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:57:45\n    |\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -401,7 +427,20 @@ LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:65:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:61:45\n+   |\n+LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:68:45\n    |\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -414,7 +453,20 @@ LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.flo\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:72:47\n+  --> $DIR/const-pointer-values-in-various-types.rs:72:45\n+   |\n+LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n+   |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                             |\n+   |                                             unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:76:47\n    |\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -427,7 +479,7 @@ LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.t\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:76:47\n+  --> $DIR/const-pointer-values-in-various-types.rs:80:47\n    |\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -440,7 +492,7 @@ LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.c\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:80:39\n+  --> $DIR/const-pointer-values-in-various-types.rs:84:39\n    |\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -453,7 +505,7 @@ LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:84:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:88:41\n    |\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -466,7 +518,7 @@ LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 }\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:88:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:92:41\n    |\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -479,7 +531,20 @@ LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 }\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:95:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:96:41\n+   |\n+LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:100:43\n    |\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -492,7 +557,7 @@ LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_12\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:99:39\n+  --> $DIR/const-pointer-values-in-various-types.rs:104:39\n    |\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -505,7 +570,7 @@ LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:103:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:108:41\n    |\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -518,7 +583,7 @@ LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:107:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:112:41\n    |\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -531,7 +596,20 @@ LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:114:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:116:41\n+   |\n+LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:120:43\n    |\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -544,7 +622,7 @@ LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:118:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:124:41\n    |\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -557,7 +635,20 @@ LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:125:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:128:41\n+   |\n+LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n+   |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                         |\n+   |                                         unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-pointer-values-in-various-types.rs:132:43\n    |\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -570,7 +661,7 @@ LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:129:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:136:43\n    |\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---"}, {"sha": "b00cadcea991fd79ab116cc23fce5746142bda65", "filename": "src/test/ui/consts/const-eval/format.stderr", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -76,3 +76,49 @@ LL |     println!(\"{:?}\", 0);\n error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0015`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/format.rs:2:12\n+   |\n+LL |     panic!(\"{:?}\", 0);\n+   |            ^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/format.rs:2:20\n+   |\n+LL |     panic!(\"{:?}\", 0);\n+   |                    ^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this error originates in the macro `$crate::const_format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/format.rs:11:14\n+   |\n+LL |     println!(\"{:?}\", 0);\n+   |              ^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: erroneous constant used\n+  --> $DIR/format.rs:11:22\n+   |\n+LL |     println!(\"{:?}\", 0);\n+   |                      ^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "a55fd8c156e07833a7be1ee42f75a5ea17f48fb8", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.32bit.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -24,3 +24,16 @@ LL |         10..=BAR => {},\n \n error: aborting due to 3 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ref_to_int_match.rs:25:27\n+   |\n+LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n+   | --------------------------^^^^^^^^^^^^^^^^---\n+   |                           |\n+   |                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "a55fd8c156e07833a7be1ee42f75a5ea17f48fb8", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.64bit.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -24,3 +24,16 @@ LL |         10..=BAR => {},\n \n error: aborting due to 3 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ref_to_int_match.rs:25:27\n+   |\n+LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n+   | --------------------------^^^^^^^^^^^^^^^^---\n+   |                           |\n+   |                           unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "2440cd2272c6ca69a6b20e7b1296a482b0f84aa4", "filename": "src/test/ui/consts/const-eval/ub-enum.32bit.stderr", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -125,3 +125,58 @@ LL | const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe {\n error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:26:1\n+   |\n+LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:30:1\n+   |\n+LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:45:1\n+   |\n+LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:49:1\n+   |\n+LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:63:1\n+   |\n+LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "e9b4023068e94930a93aa6ecccce49880c360af9", "filename": "src/test/ui/consts/const-eval/ub-enum.64bit.stderr", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -125,3 +125,58 @@ LL | const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe {\n error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:26:1\n+   |\n+LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:30:1\n+   |\n+LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:45:1\n+   |\n+LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:49:1\n+   |\n+LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-enum.rs:63:1\n+   |\n+LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "10a0ccd552b6d25384141e35d50151f9831cc438", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.32bit.stderr", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -176,3 +176,66 @@ LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n error: aborting due to 16 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:31:1\n+   |\n+LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:35:39\n+   |\n+LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n+   | --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                       |\n+   |                                       unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:35:38\n+   |\n+LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n+   | -------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                      |\n+   |                                      referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:41:86\n+   |\n+LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n+   | -------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^----\n+   |                                                                                      |\n+   |                                                                                      unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:41:85\n+   |\n+LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n+   | ------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^^----\n+   |                                                                                     |\n+   |                                                                                     referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "e9fcefe12c7d97b21d3716eb661a0399c04f6f62", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.64bit.stderr", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -176,3 +176,66 @@ LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n error: aborting due to 16 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:31:1\n+   |\n+LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:35:39\n+   |\n+LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n+   | --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                       |\n+   |                                       unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:35:38\n+   |\n+LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n+   | -------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                      |\n+   |                                      referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:41:86\n+   |\n+LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n+   | -------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^----\n+   |                                                                                      |\n+   |                                                                                      unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-ref-ptr.rs:41:85\n+   |\n+LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n+   | ------------------------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^^----\n+   |                                                                                     |\n+   |                                                                                     referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "0c398f5bfd45e151c17095000982c76bfbaa72ab", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.32bit.stderr", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -344,3 +344,86 @@ LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n error: aborting due to 32 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:42:1\n+   |\n+LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:46:1\n+   |\n+LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:75:1\n+   |\n+LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:82:1\n+   |\n+LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:87:40\n+   |\n+LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n+   | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                        |\n+   |                                        referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:95:42\n+   |\n+LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                          |\n+   |                                          referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:100:42\n+   |\n+LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                          |\n+   |                                          referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "bf53995d956c5621651f5a1f628e25ad19c18369", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -344,3 +344,86 @@ LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n error: aborting due to 32 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:42:1\n+   |\n+LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:46:1\n+   |\n+LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:75:1\n+   |\n+LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:82:1\n+   |\n+LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:87:40\n+   |\n+LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n+   | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                        |\n+   |                                        referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:95:42\n+   |\n+LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                          |\n+   |                                          referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:100:42\n+   |\n+LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n+   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                          |\n+   |                                          referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "d822171df7234dc8f4fe1fdcc26276f64db0e40f", "filename": "src/test/ui/consts/const-float-bits-reject-conv.stderr", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -214,3 +214,115 @@ LL |         const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:30:34\n+   |\n+LL |             const _: () = assert!($a);\n+   |             --------------------------\n+...\n+LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n+   |                                  ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:33:34\n+   |\n+LL |             const _: () = assert!($a);\n+   |             --------------------------\n+...\n+LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n+   |                                  ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:41:38\n+   |\n+LL |             const _: () = assert!($a == $b);\n+   |             --------------------------------\n+...\n+LL |         const_assert!(f32::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n+   |                                      ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:44:38\n+   |\n+LL |             const _: () = assert!($a == $b);\n+   |             --------------------------------\n+...\n+LL |         const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n+   |                                      ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:57:34\n+   |\n+LL |             const _: () = assert!($a);\n+   |             --------------------------\n+...\n+LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n+   |                                  ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:60:34\n+   |\n+LL |             const _: () = assert!($a);\n+   |             --------------------------\n+...\n+LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n+   |                                  ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:66:38\n+   |\n+LL |             const _: () = assert!($a == $b);\n+   |             --------------------------------\n+...\n+LL |         const_assert!(f64::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n+   |                                      ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-float-bits-reject-conv.rs:69:38\n+   |\n+LL |             const _: () = assert!($a == $b);\n+   |             --------------------------------\n+...\n+LL |         const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n+   |                                      ^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "594576fe2cf3d8adf81353e0156787efaacc728d", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899914131053cafb46f61ba3c7d6846673ebd22/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=3899914131053cafb46f61ba3c7d6846673ebd22", "patch": "@@ -62,7 +62,7 @@ error: any use of this value will cause an error\n   --> $DIR/ptr_comparisons.rs:70:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n-   | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------\n    |                           |\n    |                           unable to turn pointer into raw bytes\n    |"}]}