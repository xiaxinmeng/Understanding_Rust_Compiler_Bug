{"sha": "303306cf5ede678719ec1324bb02d3d02c014183", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMzMwNmNmNWVkZTY3ODcxOWVjMTMyNGJiMDJkM2QwMmMwMTQxODM=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2018-07-14T22:28:39Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2018-07-14T22:28:39Z"}, "message": "Add unaligned volatile intrinsics", "tree": {"sha": "b203264b0dbbc76bca04a0dc706c8c4916f21ad7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b203264b0dbbc76bca04a0dc706c8c4916f21ad7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/303306cf5ede678719ec1324bb02d3d02c014183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/303306cf5ede678719ec1324bb02d3d02c014183", "html_url": "https://github.com/rust-lang/rust/commit/303306cf5ede678719ec1324bb02d3d02c014183", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/303306cf5ede678719ec1324bb02d3d02c014183/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9363342be956d1bf7781a3b7455d80fc5d94b1f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9363342be956d1bf7781a3b7455d80fc5d94b1f8", "html_url": "https://github.com/rust-lang/rust/commit/9363342be956d1bf7781a3b7455d80fc5d94b1f8"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "854cb5f4e3b3f77a1791896e3f8df6d0eaba57dd", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/303306cf5ede678719ec1324bb02d3d02c014183/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303306cf5ede678719ec1324bb02d3d02c014183/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=303306cf5ede678719ec1324bb02d3d02c014183", "patch": "@@ -1085,6 +1085,15 @@ extern \"rust-intrinsic\" {\n     /// [`std::ptr::write_volatile`](../../std/ptr/fn.write_volatile.html).\n     pub fn volatile_store<T>(dst: *mut T, val: T);\n \n+    /// Perform a volatile load from the `src` pointer\n+    /// The pointer is not required to be aligned.\n+    #[cfg(not(stage0))]\n+    pub fn unaligned_volatile_load<T>(src: *const T) -> T;\n+    /// Perform a volatile store to the `dst` pointer.\n+    /// The pointer is not required to be aligned.\n+    #[cfg(not(stage0))]\n+    pub fn unaligned_volatile_store<T>(dst: *mut T, val: T);\n+\n     /// Returns the square root of an `f32`\n     pub fn sqrtf32(x: f32) -> f32;\n     /// Returns the square root of an `f64`"}, {"sha": "c8dc579cd62e98f3581f67beafaa859216a1e277", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/303306cf5ede678719ec1324bb02d3d02c014183/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303306cf5ede678719ec1324bb02d3d02c014183/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=303306cf5ede678719ec1324bb02d3d02c014183", "patch": "@@ -54,6 +54,7 @@ bitflags! {\n     pub struct MemFlags: u8 {\n         const VOLATILE = 1 << 0;\n         const NONTEMPORAL = 1 << 1;\n+        const UNALIGNED = 1 << 2;\n     }\n }\n \n@@ -602,7 +603,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let ptr = self.check_store(val, ptr);\n         unsafe {\n             let store = llvm::LLVMBuildStore(self.llbuilder, val, ptr);\n-            llvm::LLVMSetAlignment(store, align.abi() as c_uint);\n+            let align = if flags.contains(MemFlags::UNALIGNED) {\n+                1\n+            } else {\n+                align.abi() as c_uint\n+            };\n+            llvm::LLVMSetAlignment(store, align);\n             if flags.contains(MemFlags::VOLATILE) {\n                 llvm::LLVMSetVolatile(store, llvm::True);\n             }"}, {"sha": "567595b699798f702dd4f8e1c0e40ee2574fcb94", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/303306cf5ede678719ec1324bb02d3d02c014183/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303306cf5ede678719ec1324bb02d3d02c014183/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=303306cf5ede678719ec1324bb02d3d02c014183", "patch": "@@ -234,15 +234,20 @@ pub fn codegen_intrinsic_call<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n             memset_intrinsic(bx, true, substs.type_at(0),\n                              args[0].immediate(), args[1].immediate(), args[2].immediate())\n         }\n-        \"volatile_load\" => {\n+        \"volatile_load\" | \"unaligned_volatile_load\" => {\n             let tp_ty = substs.type_at(0);\n             let mut ptr = args[0].immediate();\n             if let PassMode::Cast(ty) = fn_ty.ret.mode {\n                 ptr = bx.pointercast(ptr, ty.llvm_type(cx).ptr_to());\n             }\n             let load = bx.volatile_load(ptr);\n+            let align = if name == \"unaligned_volatile_load\" {\n+                1\n+            } else {\n+                cx.align_of(tp_ty).abi() as u32\n+            };\n             unsafe {\n-                llvm::LLVMSetAlignment(load, cx.align_of(tp_ty).abi() as u32);\n+                llvm::LLVMSetAlignment(load, align);\n             }\n             to_immediate(bx, load, cx.layout_of(tp_ty))\n         },\n@@ -251,6 +256,11 @@ pub fn codegen_intrinsic_call<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n             args[1].val.volatile_store(bx, dst);\n             return;\n         },\n+        \"unaligned_volatile_store\" => {\n+            let dst = args[0].deref(bx.cx);\n+            args[1].val.unaligned_volatile_store(bx, dst);\n+            return;\n+        },\n         \"prefetch_read_data\" | \"prefetch_write_data\" |\n         \"prefetch_read_instruction\" | \"prefetch_write_instruction\" => {\n             let expect = cx.get_intrinsic(&(\"llvm.prefetch\"));"}, {"sha": "49cc07d6854a75324c38506dbdadddbc33b5a5d7", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/303306cf5ede678719ec1324bb02d3d02c014183/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303306cf5ede678719ec1324bb02d3d02c014183/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=303306cf5ede678719ec1324bb02d3d02c014183", "patch": "@@ -286,6 +286,10 @@ impl<'a, 'tcx> OperandValue {\n         self.store_with_flags(bx, dest, MemFlags::VOLATILE);\n     }\n \n+    pub fn unaligned_volatile_store(self, bx: &Builder<'a, 'tcx>, dest: PlaceRef<'tcx>) {\n+        self.store_with_flags(bx, dest, MemFlags::VOLATILE | MemFlags::UNALIGNED);\n+    }\n+\n     pub fn nontemporal_store(self, bx: &Builder<'a, 'tcx>, dest: PlaceRef<'tcx>) {\n         self.store_with_flags(bx, dest, MemFlags::NONTEMPORAL);\n     }"}, {"sha": "46cf9d1fa7fad3c84f9215d9e8b8cc528e5743de", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/303306cf5ede678719ec1324bb02d3d02c014183/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303306cf5ede678719ec1324bb02d3d02c014183/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=303306cf5ede678719ec1324bb02d3d02c014183", "patch": "@@ -270,9 +270,9 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"roundf32\"     => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n             \"roundf64\"     => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n \n-            \"volatile_load\" =>\n+            \"volatile_load\" | \"unaligned_volatile_load\" =>\n                 (1, vec![ tcx.mk_imm_ptr(param(0)) ], param(0)),\n-            \"volatile_store\" =>\n+            \"volatile_store\" | \"unaligned_volatile_store\" =>\n                 (1, vec![ tcx.mk_mut_ptr(param(0)), param(0) ], tcx.mk_nil()),\n \n             \"ctpop\" | \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" |"}, {"sha": "d214a20139c9ca8bfd597ed9c82247d08ebc7a8e", "filename": "src/test/run-make-fulldeps/volatile-intrinsics/main.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/303306cf5ede678719ec1324bb02d3d02c014183/src%2Ftest%2Frun-make-fulldeps%2Fvolatile-intrinsics%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303306cf5ede678719ec1324bb02d3d02c014183/src%2Ftest%2Frun-make-fulldeps%2Fvolatile-intrinsics%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fvolatile-intrinsics%2Fmain.rs?ref=303306cf5ede678719ec1324bb02d3d02c014183", "patch": "@@ -10,17 +10,24 @@\n \n #![feature(core_intrinsics, volatile)]\n \n-use std::intrinsics::{volatile_load, volatile_store};\n+use std::intrinsics::{\n+    unaligned_volatile_load, unaligned_volatile_store, volatile_load, volatile_store,\n+};\n use std::ptr::{read_volatile, write_volatile};\n \n pub fn main() {\n     unsafe {\n-        let mut i : isize = 1;\n+        let mut i: isize = 1;\n         volatile_store(&mut i, 2);\n         assert_eq!(volatile_load(&i), 2);\n     }\n     unsafe {\n-        let mut i : isize = 1;\n+        let mut i: isize = 1;\n+        unaligned_volatile_store(&mut i, 2);\n+        assert_eq!(unaligned_volatile_load(&i), 2);\n+    }\n+    unsafe {\n+        let mut i: isize = 1;\n         write_volatile(&mut i, 2);\n         assert_eq!(read_volatile(&i), 2);\n     }"}]}