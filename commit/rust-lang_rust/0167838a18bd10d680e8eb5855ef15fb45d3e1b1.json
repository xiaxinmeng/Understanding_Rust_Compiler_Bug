{"sha": "0167838a18bd10d680e8eb5855ef15fb45d3e1b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNjc4MzhhMThiZDEwZDY4MGU4ZWI1ODU1ZWYxNWZiNDVkM2UxYjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-05T16:14:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-05T16:14:41Z"}, "message": "Auto merge of #88499 - eddyb:layout-off, r=nagisa\n\nProvide `layout_of` automatically (given tcx + param_env + error handling).\n\nAfter #88337, there's no longer any uses of `LayoutOf` within `rustc_target` itself, so I realized I could move the trait to `rustc_middle::ty::layout` and redesign it a bit.\n\nThis is similar to #88338 (and supersedes it), but at no ergonomic loss, since there's no funky `C: LayoutOf<Ty = Ty>` -> `Ty: TyAbiInterface<C>` generic `impl` chain, and each `LayoutOf` still corresponds to one `impl` (of `LayoutOfHelpers`) for the specific context.\n\nAfter this PR, this is what's needed to get `trait LayoutOf` (with the `layout_of` method) implemented on some context type:\n* `TyCtxt`, via `HasTyCtxt`\n* `ParamEnv`, via `HasParamEnv`\n* a way to transform `LayoutError`s into the desired error type\n  * an error type of `!` can be paired with having `cx.layout_of(...)` return `TyAndLayout` *without* `Result<...>` around it, such as used by codegen\n  * this is done through a new `LayoutOfHelpers` trait (and so is specifying the type of `cx.layout_of(...)`)\n\nWhen going through this path (and not bypassing it with a manual `impl` of `LayoutOf`), the end result is that only the error case can be customized, the query itself and the success paths are guaranteed to be uniform.\n\n(**EDIT**: just noticed that because of the supertrait relationship, you cannot actually implement `LayoutOf` yourself, the blanket `impl` fully covers all possible context types that could ever implement it)\n\nPart of the motivation for this shape of API is that I've been working on querifying `FnAbi::of_*`, and what I want/need to introduce for that looks a lot like the setup in this PR - in particular, it's harder to express the `FnAbi` methods in `rustc_target`, since they're much more tied to `rustc` concepts.\n\nr? `@nagisa` cc `@oli-obk` `@bjorn3`", "tree": {"sha": "7cd14788e31eb34a62d73685abc13030911d86cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cd14788e31eb34a62d73685abc13030911d86cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0167838a18bd10d680e8eb5855ef15fb45d3e1b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0167838a18bd10d680e8eb5855ef15fb45d3e1b1", "html_url": "https://github.com/rust-lang/rust/commit/0167838a18bd10d680e8eb5855ef15fb45d3e1b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0167838a18bd10d680e8eb5855ef15fb45d3e1b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "771c2c6986add82216ff3900d42b5d0762d7917f", "url": "https://api.github.com/repos/rust-lang/rust/commits/771c2c6986add82216ff3900d42b5d0762d7917f", "html_url": "https://github.com/rust-lang/rust/commit/771c2c6986add82216ff3900d42b5d0762d7917f"}, {"sha": "dc6c4defdcfe4a518a1dd1b54602d2a9693f161c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6c4defdcfe4a518a1dd1b54602d2a9693f161c", "html_url": "https://github.com/rust-lang/rust/commit/dc6c4defdcfe4a518a1dd1b54602d2a9693f161c"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "6f7ca51d038c0155233e9ad8dcea64cfa70a6b47", "filename": "src/common.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0167838a18bd10d680e8eb5855ef15fb45d3e1b1/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0167838a18bd10d680e8eb5855ef15fb45d3e1b1/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=0167838a18bd10d680e8eb5855ef15fb45d3e1b1", "patch": "@@ -1,4 +1,5 @@\n use rustc_index::vec::IndexVec;\n+use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers};\n use rustc_middle::ty::SymbolName;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::{Integer, Primitive};\n@@ -256,12 +257,12 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n     pub(crate) inline_asm_index: u32,\n }\n \n-impl<'tcx> LayoutOf<'tcx> for FunctionCx<'_, '_, 'tcx> {\n-    type Ty = Ty<'tcx>;\n-    type TyAndLayout = TyAndLayout<'tcx>;\n+impl<'tcx> LayoutOfHelpers<'tcx> for FunctionCx<'_, '_, 'tcx> {\n+    type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> TyAndLayout<'tcx> {\n-        RevealAllLayoutCx(self.tcx).layout_of(ty)\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        RevealAllLayoutCx(self.tcx).handle_layout_err(err, span, ty)\n     }\n }\n \n@@ -364,19 +365,16 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n \n pub(crate) struct RevealAllLayoutCx<'tcx>(pub(crate) TyCtxt<'tcx>);\n \n-impl<'tcx> LayoutOf<'tcx> for RevealAllLayoutCx<'tcx> {\n-    type Ty = Ty<'tcx>;\n-    type TyAndLayout = TyAndLayout<'tcx>;\n+impl<'tcx> LayoutOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n+    type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> TyAndLayout<'tcx> {\n-        assert!(!ty.still_further_specializable());\n-        self.0.layout_of(ParamEnv::reveal_all().and(&ty)).unwrap_or_else(|e| {\n-            if let layout::LayoutError::SizeOverflow(_) = e {\n-                self.0.sess.fatal(&e.to_string())\n-            } else {\n-                bug!(\"failed to get layout for `{}`: {}\", ty, e)\n-            }\n-        })\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        if let layout::LayoutError::SizeOverflow(_) = err {\n+            self.0.sess.span_fatal(span, &err.to_string())\n+        } else {\n+            span_bug!(span, \"failed to get layout for `{}`: {}\", ty, err)\n+        }\n     }\n }\n "}, {"sha": "2e5e8f683cdaaad47aa2e75c1ef4775345a9ba10", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0167838a18bd10d680e8eb5855ef15fb45d3e1b1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0167838a18bd10d680e8eb5855ef15fb45d3e1b1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0167838a18bd10d680e8eb5855ef15fb45d3e1b1", "patch": "@@ -79,12 +79,12 @@ mod prelude {\n     pub(crate) use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n     pub(crate) use rustc_middle::bug;\n     pub(crate) use rustc_middle::mir::{self, *};\n-    pub(crate) use rustc_middle::ty::layout::{self, TyAndLayout};\n+    pub(crate) use rustc_middle::ty::layout::{self, LayoutOf, TyAndLayout};\n     pub(crate) use rustc_middle::ty::{\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n         TypeFoldable, UintTy,\n     };\n-    pub(crate) use rustc_target::abi::{Abi, LayoutOf, Scalar, Size, VariantIdx};\n+    pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx};\n \n     pub(crate) use rustc_data_structures::fx::FxHashMap;\n "}]}