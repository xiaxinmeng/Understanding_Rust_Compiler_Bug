{"sha": "c0889a6005ecac3d304009e734baa97b37b534d2", "node_id": "C_kwDOAAsO6NoAKGMwODg5YTYwMDVlY2FjM2QzMDQwMDllNzM0YmFhOTdiMzdiNTM0ZDI", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-06T13:39:13Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-06T13:39:18Z"}, "message": "fixyfixfix", "tree": {"sha": "88d1bc28e9859b5dc766081501653540bdd0017c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88d1bc28e9859b5dc766081501653540bdd0017c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0889a6005ecac3d304009e734baa97b37b534d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0889a6005ecac3d304009e734baa97b37b534d2", "html_url": "https://github.com/rust-lang/rust/commit/c0889a6005ecac3d304009e734baa97b37b534d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0889a6005ecac3d304009e734baa97b37b534d2/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88935e0beacb49bb552de1628bdf50b183f7b926", "url": "https://api.github.com/repos/rust-lang/rust/commits/88935e0beacb49bb552de1628bdf50b183f7b926", "html_url": "https://github.com/rust-lang/rust/commit/88935e0beacb49bb552de1628bdf50b183f7b926"}], "stats": {"total": 170, "additions": 141, "deletions": 29}, "files": [{"sha": "b9583bd2244b9b4d1fb742f00a377cf6bc2a84ab", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 87, "deletions": 5, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/c0889a6005ecac3d304009e734baa97b37b534d2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0889a6005ecac3d304009e734baa97b37b534d2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=c0889a6005ecac3d304009e734baa97b37b534d2", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::bug;\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime::*;\n-use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n+use rustc_middle::ty::{self, DefIdTree, TyCtxt, TypeSuperVisitable, TypeVisitor};\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n@@ -1781,7 +1781,7 @@ fn is_late_bound_map(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<&FxIndexSet<\n \n     let mut late_bound = FxIndexSet::default();\n \n-    let mut constrained_by_input = ConstrainedCollector::default();\n+    let mut constrained_by_input = ConstrainedCollector { regions: Default::default(), tcx };\n     for arg_ty in decl.inputs {\n         constrained_by_input.visit_ty(arg_ty);\n     }\n@@ -1834,12 +1834,44 @@ fn is_late_bound_map(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<&FxIndexSet<\n     debug!(?late_bound);\n     return Some(tcx.arena.alloc(late_bound));\n \n-    #[derive(Default)]\n-    struct ConstrainedCollector {\n+    struct ConstrainedCollectorPostAstConv {\n+        arg_is_constrained: Box<[bool]>,\n+    }\n+\n+    use std::ops::ControlFlow;\n+    use ty::Ty;\n+    impl<'tcx> TypeVisitor<'tcx> for ConstrainedCollectorPostAstConv {\n+        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<!> {\n+            match t.kind() {\n+                ty::Param(param_ty) => {\n+                    self.arg_is_constrained[param_ty.index as usize] = true;\n+                }\n+                ty::Projection(_) => return ControlFlow::Continue(()),\n+                _ => (),\n+            }\n+            t.super_visit_with(self)\n+        }\n+\n+        fn visit_const(&mut self, _: ty::Const<'tcx>) -> ControlFlow<!> {\n+            ControlFlow::Continue(())\n+        }\n+\n+        fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<!> {\n+            debug!(\"r={:?}\", r.kind());\n+            if let ty::RegionKind::ReEarlyBound(region) = r.kind() {\n+                self.arg_is_constrained[region.index as usize] = true;\n+            }\n+\n+            ControlFlow::Continue(())\n+        }\n+    }\n+\n+    struct ConstrainedCollector<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n         regions: FxHashSet<LocalDefId>,\n     }\n \n-    impl<'v> Visitor<'v> for ConstrainedCollector {\n+    impl<'v> Visitor<'v> for ConstrainedCollector<'_> {\n         fn visit_ty(&mut self, ty: &'v hir::Ty<'v>) {\n             match ty.kind {\n                 hir::TyKind::Path(\n@@ -1850,6 +1882,56 @@ fn is_late_bound_map(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<&FxIndexSet<\n                     // (defined above)\n                 }\n \n+                hir::TyKind::Path(hir::QPath::Resolved(\n+                    None,\n+                    hir::Path { res: Res::Def(DefKind::TyAlias, alias_def), segments, span },\n+                )) => {\n+                    // If this is a top level type alias attempt to \"look through\" it to see if the args\n+                    // are constrained, instead of assuming they are and inserting all the lifetimes.\n+                    // This is necessary for the following case:\n+                    // ```\n+                    // type Alias<'a, T> = <T as Trait<'a>>::Assoc;\n+                    // fn foo<'a>(_: Alias<'a, ()>) -> Alias<'a, ()> { ... }\n+                    // ```\n+                    // If we considered `'a` constrained then it would become late bound causing an error\n+                    // during astconv as the `'a` is not constrained by the input type `<() as Trait<'a>>::Assoc`\n+                    // but appears in the output type `<() as Trait<'a>>::Assoc`.\n+\n+                    let generics = self.tcx.generics_of(alias_def);\n+                    let mut walker = ConstrainedCollectorPostAstConv {\n+                        arg_is_constrained: vec![false; generics.params.len()].into_boxed_slice(),\n+                    };\n+                    walker.visit_ty(self.tcx.type_of(alias_def));\n+\n+                    match segments.last() {\n+                        Some(hir::PathSegment { args: Some(args), .. }) => {\n+                            let tcx = self.tcx;\n+                            for constrained_arg in\n+                                args.args.iter().enumerate().flat_map(|(n, arg)| {\n+                                    match walker.arg_is_constrained.get(n) {\n+                                        Some(true) => Some(arg),\n+                                        Some(false) => None,\n+                                        None => {\n+                                            tcx.sess.delay_span_bug(\n+                                                *span,\n+                                                format!(\n+                                                    \"Incorrect generic arg count for alias {:?}\",\n+                                                    alias_def\n+                                                ),\n+                                            );\n+                                            None\n+                                        }\n+                                    }\n+                                })\n+                            {\n+                                self.visit_generic_arg(constrained_arg);\n+                            }\n+                        }\n+                        Some(_) => (),\n+                        None => bug!(\"Path with no segments or self type\"),\n+                    }\n+                }\n+\n                 hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) => {\n                     // consider only the lifetimes on the final\n                     // segment; I am not sure it's even currently"}, {"sha": "9998ee0e8d0c69c801528a509eb6371d10af4f86", "filename": "src/test/ui/issues/issue-47511.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/88935e0beacb49bb552de1628bdf50b183f7b926/src%2Ftest%2Fui%2Fissues%2Fissue-47511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88935e0beacb49bb552de1628bdf50b183f7b926/src%2Ftest%2Fui%2Fissues%2Fissue-47511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47511.stderr?ref=88935e0beacb49bb552de1628bdf50b183f7b926", "patch": "@@ -1,18 +0,0 @@\n-error[E0581]: return type references an anonymous lifetime, which is not constrained by the fn input types\n-  --> $DIR/issue-47511.rs:8:15\n-   |\n-LL | fn f(_: X) -> X {\n-   |               ^\n-   |\n-   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n-   = note: consider introducing a named lifetime parameter\n-\n-error[E0581]: return type references lifetime `'a`, which is not constrained by the fn input types\n-  --> $DIR/issue-47511.rs:12:23\n-   |\n-LL | fn g<'a>(_: X<'a>) -> X<'a> {\n-   |                       ^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0581`."}, {"sha": "e56a34218e231c82d7f1c07e59cd449ee6706979", "filename": "src/test/ui/late-bound-lifetimes/downgraded_to_early_through_alias.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c0889a6005ecac3d304009e734baa97b37b534d2/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fdowngraded_to_early_through_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0889a6005ecac3d304009e734baa97b37b534d2/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fdowngraded_to_early_through_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fdowngraded_to_early_through_alias.rs?ref=c0889a6005ecac3d304009e734baa97b37b534d2", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+trait Gats<'a> {\n+    type Assoc;\n+    type Assoc2;\n+}\n+\n+trait Trait: for<'a> Gats<'a> {\n+    fn foo<'a>(_: &mut <Self as Gats<'a>>::Assoc) -> <Self as Gats<'a>>::Assoc2;\n+}\n+\n+impl<'a> Gats<'a> for () {\n+    type Assoc = &'a u32;\n+    type Assoc2 = ();\n+}\n+\n+type GatsAssoc<'a, T> = <T as Gats<'a>>::Assoc;\n+type GatsAssoc2<'a, T> = <T as Gats<'a>>::Assoc2;\n+\n+impl Trait for () {\n+    fn foo<'a>(_: &mut GatsAssoc<'a, Self>) -> GatsAssoc2<'a, Self> {}\n+}\n+\n+fn main() {}"}, {"sha": "7894435154082c91d2779695f04fbf5575fe22c9", "filename": "src/test/ui/late-bound-lifetimes/issue-47511.rs", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0889a6005ecac3d304009e734baa97b37b534d2/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fissue-47511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0889a6005ecac3d304009e734baa97b37b534d2/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fissue-47511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fissue-47511.rs?ref=c0889a6005ecac3d304009e734baa97b37b534d2", "patch": "@@ -1,9 +1,4 @@\n-// check-fail\n-// known-bug: #47511\n-\n-// Regression test for #47511: anonymous lifetimes can appear\n-// unconstrained in a return type, but only if they appear just once\n-// in the input, as the input to a projection.\n+// check-pass\n \n fn f(_: X) -> X {\n     unimplemented!()", "previous_filename": "src/test/ui/issues/issue-47511.rs"}, {"sha": "0b331e2039f25a94134cc41749ec3d415260722a", "filename": "src/test/ui/late-bound-lifetimes/mismatched_arg_count.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0889a6005ecac3d304009e734baa97b37b534d2/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0889a6005ecac3d304009e734baa97b37b534d2/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.rs?ref=c0889a6005ecac3d304009e734baa97b37b534d2", "patch": "@@ -0,0 +1,12 @@\n+// ensures that we don't ICE when there are too many args supplied to the alias.\n+\n+trait Trait<'a> {\n+    type Assoc;\n+}\n+\n+type Alias<'a, T> = <T as Trait<'a>>::Assoc;\n+\n+fn bar<'a, T: Trait<'a>>(_: Alias<'a, 'a, T>) {}\n+//~^ error: this type alias takes 1 lifetime argument but 2 lifetime arguments were supplied\n+\n+fn main() {}"}, {"sha": "3704d9bb957ed2af6a2bfe18408047dfbb9175fe", "filename": "src/test/ui/late-bound-lifetimes/mismatched_arg_count.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c0889a6005ecac3d304009e734baa97b37b534d2/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0889a6005ecac3d304009e734baa97b37b534d2/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.stderr?ref=c0889a6005ecac3d304009e734baa97b37b534d2", "patch": "@@ -0,0 +1,17 @@\n+error[E0107]: this type alias takes 1 lifetime argument but 2 lifetime arguments were supplied\n+  --> $DIR/mismatched_arg_count.rs:9:29\n+   |\n+LL | fn bar<'a, T: Trait<'a>>(_: Alias<'a, 'a, T>) {}\n+   |                             ^^^^^     -- help: remove this lifetime argument\n+   |                             |\n+   |                             expected 1 lifetime argument\n+   |\n+note: type alias defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/mismatched_arg_count.rs:7:6\n+   |\n+LL | type Alias<'a, T> = <T as Trait<'a>>::Assoc;\n+   |      ^^^^^ --\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}]}