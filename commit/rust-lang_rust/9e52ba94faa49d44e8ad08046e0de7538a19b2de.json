{"sha": "9e52ba94faa49d44e8ad08046e0de7538a19b2de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNTJiYTk0ZmFhNDlkNDRlOGFkMDgwNDZlMGRlNzUzOGExOWIyZGU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-30T14:35:14Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-07T23:31:58Z"}, "message": "Create buffers in top-level rendering\n\nThis avoids needlessly creating and threading the buffers through when\nwe only use them once.", "tree": {"sha": "a40549e548116f7c8efe331bb4a7a6a85b43dd6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a40549e548116f7c8efe331bb4a7a6a85b43dd6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e52ba94faa49d44e8ad08046e0de7538a19b2de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e52ba94faa49d44e8ad08046e0de7538a19b2de", "html_url": "https://github.com/rust-lang/rust/commit/9e52ba94faa49d44e8ad08046e0de7538a19b2de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e52ba94faa49d44e8ad08046e0de7538a19b2de/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eebd0265c328b80d67f89df04879ef64bd229a5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/eebd0265c328b80d67f89df04879ef64bd229a5f", "html_url": "https://github.com/rust-lang/rust/commit/eebd0265c328b80d67f89df04879ef64bd229a5f"}], "stats": {"total": 66, "additions": 29, "deletions": 37}, "files": [{"sha": "3b6d4f3b92d5052e7770dd52e55836fc42c9a399", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9e52ba94faa49d44e8ad08046e0de7538a19b2de/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e52ba94faa49d44e8ad08046e0de7538a19b2de/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=9e52ba94faa49d44e8ad08046e0de7538a19b2de", "patch": "@@ -26,15 +26,15 @@ pub struct Page<'a> {\n }\n \n pub fn render<T: fmt::Display, S: fmt::Display>(\n-    dst: &mut Buffer,\n     layout: &Layout,\n     page: &Page<'_>,\n     sidebar: &S,\n     t: &T,\n     css_file_extension: bool,\n     themes: &[PathBuf],\n     generate_search_filter: bool,\n-) {\n+) -> String {\n+    let mut dst = Buffer::html();\n     let static_root_path = page.static_root_path.unwrap_or(page.root_path);\n     write!(dst,\n \"<!DOCTYPE html>\\\n@@ -235,12 +235,13 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n     } else {\n         \"\"\n     },\n-    )\n+    );\n+    dst.into_inner()\n }\n \n-pub fn redirect(dst: &mut Buffer, url: &str) {\n+pub fn redirect(url: &str) -> String {\n     // <script> triggers a redirect before refresh, so this is fine.\n-    write!(dst,\n+    format!(\n r##\"<!DOCTYPE html>\n <html lang=\"en\">\n <head>"}, {"sha": "7ac606f89d2b96a533fb6d177ee3c5c3e7a4c8bb", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 21, "deletions": 28, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9e52ba94faa49d44e8ad08046e0de7538a19b2de/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e52ba94faa49d44e8ad08046e0de7538a19b2de/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=9e52ba94faa49d44e8ad08046e0de7538a19b2de", "patch": "@@ -65,7 +65,7 @@ use crate::docfs::{DocFS, ErrorStorage, PathError};\n use crate::doctree;\n use crate::fold::DocFolder;\n use crate::html::escape::Escape;\n-use crate::html::format::{Buffer, AsyncSpace, ConstnessSpace};\n+use crate::html::format::{AsyncSpace, ConstnessSpace};\n use crate::html::format::{GenericBounds, WhereClause, href, AbiSpace, DefaultSpace};\n use crate::html::format::{VisSpace, Function, UnsafetySpace, MutableSpace};\n use crate::html::format::fmt_impl_for_trait_page;\n@@ -1185,13 +1185,12 @@ themePicker.onblur = handleThemeButtonsBlur;\n                                                 SlashChecker(s), s)\n                                     })\n                                     .collect::<String>());\n-            let mut v = Buffer::html();\n-            layout::render(&mut v, &cx.shared.layout,\n+            let v = layout::render(&cx.shared.layout,\n                            &page, &(\"\"), &content,\n                            cx.shared.css_file_extension.is_some(),\n                            &cx.shared.themes,\n                            cx.shared.generate_search_filter);\n-            cx.shared.fs.write(&dst, v.into_inner().as_bytes())?;\n+            cx.shared.fs.write(&dst, v.as_bytes())?;\n         }\n     }\n \n@@ -1939,13 +1938,12 @@ impl Context {\n         } else {\n             String::new()\n         };\n-        let mut v = Buffer::html();\n-        layout::render(&mut v, &self.shared.layout,\n+        let v = layout::render(&self.shared.layout,\n                        &page, &sidebar, &all,\n                        self.shared.css_file_extension.is_some(),\n                        &self.shared.themes,\n                        self.shared.generate_search_filter);\n-        self.shared.fs.write(&final_file, v.into_inner().as_bytes())?;\n+        self.shared.fs.write(&final_file, v.as_bytes())?;\n \n         // Generating settings page.\n         let settings = Settings::new(self.shared.static_root_path.as_deref().unwrap_or(\"./\"),\n@@ -1958,24 +1956,21 @@ impl Context {\n         let sidebar = \"<p class='location'>Settings</p><div class='sidebar-elems'></div>\";\n         themes.push(PathBuf::from(\"settings.css\"));\n         let layout = self.shared.layout.clone();\n-        let mut v = Buffer::html();\n-        layout::render(\n-            &mut v,\n+        let v = layout::render(\n             &layout,\n             &page, &sidebar, &settings,\n             self.shared.css_file_extension.is_some(),\n             &themes,\n             self.shared.generate_search_filter,\n         );\n-        self.shared.fs.write(&settings_file, v.into_inner().as_bytes())?;\n+        self.shared.fs.write(&settings_file, v.as_bytes())?;\n \n         Ok(())\n     }\n \n     fn render_item(&self,\n-                   writer: &mut Buffer,\n                    it: &clean::Item,\n-                   pushname: bool) {\n+                   pushname: bool) -> String {\n         // A little unfortunate that this is done like this, but it sure\n         // does make formatting *a lot* nicer.\n         CURRENT_DEPTH.with(|slot| {\n@@ -2022,12 +2017,12 @@ impl Context {\n         }\n \n         if !self.render_redirect_pages {\n-            layout::render(writer, &self.shared.layout, &page,\n+            layout::render(&self.shared.layout, &page,\n                            &Sidebar{ cx: self, item: it },\n                            &Item{ cx: self, item: it },\n                            self.shared.css_file_extension.is_some(),\n                            &self.shared.themes,\n-                           self.shared.generate_search_filter);\n+                           self.shared.generate_search_filter)\n         } else {\n             let mut url = self.root_path();\n             if let Some(&(ref names, ty)) = cache().paths.get(&it.def_id) {\n@@ -2036,7 +2031,9 @@ impl Context {\n                     url.push_str(\"/\");\n                 }\n                 url.push_str(&item_path(ty, names.last().unwrap()));\n-                layout::redirect(writer, &url);\n+                layout::redirect(&url)\n+            } else {\n+                String::new()\n             }\n         }\n     }\n@@ -2074,13 +2071,12 @@ impl Context {\n \n             info!(\"Recursing into {}\", self.dst.display());\n \n-            let mut buf = Buffer::html();\n-            self.render_item(&mut buf, &item, false);\n+            let buf = self.render_item(&item, false);\n             // buf will be empty if the module is stripped and there is no redirect for it\n             if !buf.is_empty() {\n                 self.shared.ensure_dir(&self.dst)?;\n                 let joint_dst = self.dst.join(\"index.html\");\n-                scx.fs.write(&joint_dst, buf.into_inner().as_bytes())?;\n+                scx.fs.write(&joint_dst, buf.as_bytes())?;\n             }\n \n             let m = match item.inner {\n@@ -2109,16 +2105,15 @@ impl Context {\n             self.dst = prev;\n             self.current.pop().unwrap();\n         } else if item.name.is_some() {\n-            let mut buf = Buffer::html();\n-            self.render_item(&mut buf, &item, true);\n+            let buf = self.render_item(&item, true);\n             // buf will be empty if the item is stripped and there is no redirect for it\n             if !buf.is_empty() {\n                 let name = item.name.as_ref().unwrap();\n                 let item_type = item.type_();\n                 let file_name = &item_path(item_type, name);\n                 self.shared.ensure_dir(&self.dst)?;\n                 let joint_dst = self.dst.join(file_name);\n-                self.shared.fs.write(&joint_dst, buf.into_inner().as_bytes())?;\n+                self.shared.fs.write(&joint_dst, buf.as_bytes())?;\n \n                 if !self.render_redirect_pages {\n                     all.append(full_path(self, &item), &item_type);\n@@ -2128,18 +2123,16 @@ impl Context {\n                     // URL for the page.\n                     let redir_name = format!(\"{}.{}.html\", name, item_type.name_space());\n                     let redir_dst = self.dst.join(redir_name);\n-                    let mut v = Buffer::html();\n-                    layout::redirect(&mut v, file_name);\n-                    self.shared.fs.write(&redir_dst, v.into_inner().as_bytes())?;\n+                    let v = layout::redirect(file_name);\n+                    self.shared.fs.write(&redir_dst, v.as_bytes())?;\n                 }\n                 // If the item is a macro, redirect from the old macro URL (with !)\n                 // to the new one (without).\n                 if item_type == ItemType::Macro {\n                     let redir_name = format!(\"{}.{}!.html\", item_type, name);\n                     let redir_dst = self.dst.join(redir_name);\n-                    let mut v = Buffer::html();\n-                    layout::redirect(&mut v, file_name);\n-                    self.shared.fs.write(&redir_dst, v.into_inner().as_bytes())?;\n+                    let v = layout::redirect(file_name);\n+                    self.shared.fs.write(&redir_dst, v.as_bytes())?;\n                 }\n             }\n         }"}, {"sha": "d3e006447415b7993ede044f956f0a133a2c34b5", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e52ba94faa49d44e8ad08046e0de7538a19b2de/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e52ba94faa49d44e8ad08046e0de7538a19b2de/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=9e52ba94faa49d44e8ad08046e0de7538a19b2de", "patch": "@@ -4,7 +4,6 @@ use crate::fold::DocFolder;\n use crate::html::layout;\n use crate::html::render::{Error, SharedContext, BASIC_KEYWORDS};\n use crate::html::highlight;\n-use crate::html::format::Buffer;\n use std::ffi::OsStr;\n use std::fs;\n use std::path::{Component, Path, PathBuf};\n@@ -106,7 +105,6 @@ impl<'a> SourceCollector<'a> {\n         cur.push(&fname);\n         href.push_str(&fname.to_string_lossy());\n \n-        let mut v = Buffer::html();\n         let title = format!(\"{} -- source\", cur.file_name().expect(\"failed to get file name\")\n                                                .to_string_lossy());\n         let desc = format!(\"Source to the Rust file `{}`.\", filename);\n@@ -121,12 +119,12 @@ impl<'a> SourceCollector<'a> {\n             extra_scripts: &[&format!(\"source-files{}\", self.scx.resource_suffix)],\n             static_extra_scripts: &[&format!(\"source-script{}\", self.scx.resource_suffix)],\n         };\n-        layout::render(&mut v, &self.scx.layout,\n+        let v = layout::render(&self.scx.layout,\n                        &page, &(\"\"), &Source(contents),\n                        self.scx.css_file_extension.is_some(),\n                        &self.scx.themes,\n                        self.scx.generate_search_filter);\n-        self.scx.fs.write(&cur, v.into_inner().as_bytes())?;\n+        self.scx.fs.write(&cur, v.as_bytes())?;\n         self.scx.local_sources.insert(p.clone(), href);\n         Ok(())\n     }"}]}