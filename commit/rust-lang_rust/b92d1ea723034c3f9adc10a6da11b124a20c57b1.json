{"sha": "b92d1ea723034c3f9adc10a6da11b124a20c57b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MmQxZWE3MjMwMzRjM2Y5YWRjMTBhNmRhMTFiMTI0YTIwYzU3YjE=", "commit": {"author": {"name": "Stepan Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2013-07-28T12:53:00Z"}, "committer": {"name": "User", "email": "stepancheg@yandex-team.ru", "date": "2013-07-28T12:53:00Z"}, "message": "ReaderUtil::each_byte shouldn't include EOF byte -- Issue #5056", "tree": {"sha": "c5a135627c5f691280a1e67987b838a31761c93c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5a135627c5f691280a1e67987b838a31761c93c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b92d1ea723034c3f9adc10a6da11b124a20c57b1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b92d1ea723034c3f9adc10a6da11b124a20c57b1", "html_url": "https://github.com/rust-lang/rust/commit/b92d1ea723034c3f9adc10a6da11b124a20c57b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b92d1ea723034c3f9adc10a6da11b124a20c57b1/comments", "author": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5842ab36b81f0a3e8d6dd48a200bc405ad19ca96", "url": "https://api.github.com/repos/rust-lang/rust/commits/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96", "html_url": "https://github.com/rust-lang/rust/commit/5842ab36b81f0a3e8d6dd48a200bc405ad19ca96"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "1865dc5dece43be85f7c1f06ca7560ee527b5de5", "filename": "src/libstd/io.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b92d1ea723034c3f9adc10a6da11b124a20c57b1/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92d1ea723034c3f9adc10a6da11b124a20c57b1/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=b92d1ea723034c3f9adc10a6da11b124a20c57b1", "patch": "@@ -148,6 +148,9 @@ pub trait Reader {\n     /**\n     * Returns a boolean value: are we currently at EOF?\n     *\n+    * Note that stream position may be already at the end-of-file point,\n+    * but `eof` returns false until an attempt to read at that position.\n+    *\n     * `eof` is conceptually similar to C's `feof` function.\n     *\n     * # Examples\n@@ -724,15 +727,21 @@ impl<T:Reader> ReaderUtil for T {\n     }\n \n     fn each_byte(&self, it: &fn(int) -> bool) -> bool {\n-        while !self.eof() {\n-            if !it(self.read_byte()) { return false; }\n+        loop {\n+            match self.read_byte() {\n+                -1 => break,\n+                ch => if !it(ch) { return false; }\n+            }\n         }\n         return true;\n     }\n \n     fn each_char(&self, it: &fn(char) -> bool) -> bool {\n-        while !self.eof() {\n-            if !it(self.read_char()) { return false; }\n+        loop {\n+            match self.read_char() {\n+                eof if eof == (-1 as char) => break,\n+                ch => if !it(ch) { return false; }\n+            }\n         }\n         return true;\n     }\n@@ -1858,6 +1867,31 @@ mod tests {\n         assert_eq!(frood, frood2);\n     }\n \n+    #[test]\n+    fn test_each_byte_each_char_file() {\n+        // Issue #5056 -- shouldn't include trailing EOF.\n+        let path = Path(\"tmp/lib-io-test-each-byte-each-char-file.tmp\");\n+\n+        {\n+            // create empty, enough to reproduce a problem\n+            io::file_writer(&path, [io::Create]).unwrap();\n+        }\n+\n+        {\n+            let file = io::file_reader(&path).unwrap();\n+            for file.each_byte() |_| {\n+                fail!(\"must be empty\");\n+            }\n+        }\n+\n+        {\n+            let file = io::file_reader(&path).unwrap();\n+            for file.each_char() |_| {\n+                fail!(\"must be empty\");\n+            }\n+        }\n+    }\n+\n     #[test]\n     fn test_readchars_empty() {\n         do io::with_str_reader(\"\") |inp| {"}]}