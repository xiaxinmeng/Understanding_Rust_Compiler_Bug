{"sha": "7b11a52a37d389dda85cfb810f2b93548c5d2a49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMTFhNTJhMzdkMzg5ZGRhODVjZmI4MTBmMmI5MzU0OGM1ZDJhNDk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-29T21:06:50Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-29T21:06:50Z"}, "message": "Update LLVM translation to match changes to slot and ty.", "tree": {"sha": "87bab913f9eab071aa44924131e9d4432c3d2867", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87bab913f9eab071aa44924131e9d4432c3d2867"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b11a52a37d389dda85cfb810f2b93548c5d2a49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b11a52a37d389dda85cfb810f2b93548c5d2a49", "html_url": "https://github.com/rust-lang/rust/commit/7b11a52a37d389dda85cfb810f2b93548c5d2a49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b11a52a37d389dda85cfb810f2b93548c5d2a49/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f9fd2710ec9122ddddcedaab51650a92ad7c8cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9fd2710ec9122ddddcedaab51650a92ad7c8cf", "html_url": "https://github.com/rust-lang/rust/commit/1f9fd2710ec9122ddddcedaab51650a92ad7c8cf"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "0a5706cc5c0e81af3f2e7ecce1bf3d9ec0b2abba", "filename": "src/boot/llvm/lltrans.ml", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7b11a52a37d389dda85cfb810f2b93548c5d2a49/src%2Fboot%2Fllvm%2Flltrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7b11a52a37d389dda85cfb810f2b93548c5d2a49/src%2Fboot%2Fllvm%2Flltrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fllvm%2Flltrans.ml?ref=7b11a52a37d389dda85cfb810f2b93548c5d2a49", "patch": "@@ -253,16 +253,24 @@ let trans_crate\n             fn_ty void_ty (Array.append [| lloutptr; lltaskty |] llins)\n \n       | Ast.TY_tup slots ->\n-          s (Array.map (trans_slot None) slots)\n+          s (Array.map trans_ty slots)\n \n       | Ast.TY_rec entries ->\n-          s (Array.map (fun e -> trans_slot None (snd e)) entries)\n+          s (Array.map (fun (_, e) -> trans_ty e) entries)\n \n       | Ast.TY_constrained (ty', _) -> trans_ty ty'\n \n       | Ast.TY_chan _ | Ast.TY_port _ | Ast.TY_task  ->\n           p rc_opaque_ty\n \n+      | Ast.TY_exterior t ->\n+          (* FIXME: wrong, this needs to point to a refcounted cell. *)\n+          p (trans_ty t)\n+\n+      | Ast.TY_mutable t ->\n+          (* FIXME: No idea if 'mutable' translates to LLVM-type. *)\n+          (trans_ty t)\n+\n       | Ast.TY_native _ ->\n           word_ty\n \n@@ -286,7 +294,6 @@ let trans_crate\n     in\n     let base_llty = trans_ty ty in\n       match slot.Ast.slot_mode with\n-          Ast.MODE_exterior _\n         | Ast.MODE_alias _ ->\n             Llvm.pointer_type base_llty\n         | Ast.MODE_interior _ -> base_llty\n@@ -320,14 +327,14 @@ let trans_crate\n       | _ -> trans_free llbuilder lltask ptr\n   in\n \n-  let rec iter_ty_slots_full\n+  let rec iter_ty_parts_full\n       (llbuilder:Llvm.llbuilder ref)\n       (ty:Ast.ty)\n       (dst_ptr:Llvm.llvalue)\n       (src_ptr:Llvm.llvalue)\n       (f:(Llvm.llvalue\n           -> Llvm.llvalue\n-            -> Ast.slot\n+            -> Ast.ty\n               -> (Ast.ty_iso option)\n                 -> unit))\n       (curr_iso:Ast.ty_iso option)\n@@ -338,38 +345,38 @@ let trans_crate\n \n     match ty with\n         Ast.TY_rec entries ->\n-          iter_rec_slots gep dst_ptr src_ptr entries f curr_iso\n+          iter_rec_parts gep dst_ptr src_ptr entries f curr_iso\n \n-      | Ast.TY_tup slots ->\n-          iter_tup_slots gep dst_ptr src_ptr slots f curr_iso\n+      | Ast.TY_tup tys ->\n+          iter_tup_parts gep dst_ptr src_ptr tys f curr_iso\n \n       | Ast.TY_tag _\n       | Ast.TY_iso _\n       | Ast.TY_fn _\n       | Ast.TY_obj _ ->\n-          bug () \"unimplemented ty in Lltrans.iter_ty_slots_full\"\n+          bug () \"unimplemented ty in Lltrans.iter_ty_parts_full\"\n \n       | _ -> ()\n \n-  and iter_ty_slots\n+  and iter_ty_parts\n       (llbuilder:Llvm.llbuilder ref)\n       (ty:Ast.ty)\n       (ptr:Llvm.llvalue)\n-      (f:Llvm.llvalue -> Ast.slot -> (Ast.ty_iso option) -> unit)\n+      (f:Llvm.llvalue -> Ast.ty -> (Ast.ty_iso option) -> unit)\n       (curr_iso:Ast.ty_iso option)\n       : unit =\n-    iter_ty_slots_full llbuilder ty ptr ptr\n+    iter_ty_parts_full llbuilder ty ptr ptr\n       (fun _ src_ptr slot curr_iso -> f src_ptr slot curr_iso)\n       curr_iso\n \n   and drop_ty\n       (llbuilder:Llvm.llbuilder ref)\n       (lltask:Llvm.llvalue)\n-      (ty:Ast.ty)\n       (ptr:Llvm.llvalue)\n+      (ty:Ast.ty)\n       (curr_iso:Ast.ty_iso option)\n       : unit =\n-    iter_ty_slots llbuilder ty ptr (drop_slot llbuilder lltask) curr_iso\n+    iter_ty_parts llbuilder ty ptr (drop_ty llbuilder lltask) curr_iso\n \n   and drop_slot\n       (llbuilder:Llvm.llbuilder ref)\n@@ -461,7 +468,7 @@ let trans_crate\n             | MEM_interior when Semant.type_is_structured ty ->\n                 (* FIXME: to handle recursive types, need to call drop\n                    glue here, not inline. *)\n-                drop_ty llbuilder lltask ty slot_ptr curr_iso\n+                drop_ty llbuilder lltask slot_ptr ty curr_iso\n \n             | _ -> ()\n         end\n@@ -757,7 +764,7 @@ let trans_crate\n                 Ast.STMT_init_tup (dest, atoms) ->\n                   let zero = const_i32 0 in\n                   let lldest = trans_lval dest in\n-                  let trans_tup_atom idx (_, _, atom) =\n+                  let trans_tup_atom idx atom =\n                     let indices = [| zero; const_i32 idx |] in\n                     let gep_id = anon_llid \"init_tup_gep\" in\n                     let ptr ="}]}