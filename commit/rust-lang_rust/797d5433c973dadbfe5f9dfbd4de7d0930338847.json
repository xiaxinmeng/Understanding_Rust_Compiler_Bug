{"sha": "797d5433c973dadbfe5f9dfbd4de7d0930338847", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5N2Q1NDMzYzk3M2RhZGJmZTVmOWRmYmQ0ZGU3ZDA5MzAzMzg4NDc=", "commit": {"author": {"name": "Martin Pool", "email": "mbp@sourcefrog.net", "date": "2015-11-29T20:00:07Z"}, "committer": {"name": "Martin Pool", "email": "mbp@sourcefrog.net", "date": "2015-11-29T20:00:07Z"}, "message": "Rephrased description of casting", "tree": {"sha": "dcee90c26d324f8fcbb07fe6561b0234e1dd2792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcee90c26d324f8fcbb07fe6561b0234e1dd2792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/797d5433c973dadbfe5f9dfbd4de7d0930338847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/797d5433c973dadbfe5f9dfbd4de7d0930338847", "html_url": "https://github.com/rust-lang/rust/commit/797d5433c973dadbfe5f9dfbd4de7d0930338847", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/797d5433c973dadbfe5f9dfbd4de7d0930338847/comments", "author": {"login": "sourcefrog", "id": 346355, "node_id": "MDQ6VXNlcjM0NjM1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/346355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sourcefrog", "html_url": "https://github.com/sourcefrog", "followers_url": "https://api.github.com/users/sourcefrog/followers", "following_url": "https://api.github.com/users/sourcefrog/following{/other_user}", "gists_url": "https://api.github.com/users/sourcefrog/gists{/gist_id}", "starred_url": "https://api.github.com/users/sourcefrog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sourcefrog/subscriptions", "organizations_url": "https://api.github.com/users/sourcefrog/orgs", "repos_url": "https://api.github.com/users/sourcefrog/repos", "events_url": "https://api.github.com/users/sourcefrog/events{/privacy}", "received_events_url": "https://api.github.com/users/sourcefrog/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sourcefrog", "id": 346355, "node_id": "MDQ6VXNlcjM0NjM1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/346355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sourcefrog", "html_url": "https://github.com/sourcefrog", "followers_url": "https://api.github.com/users/sourcefrog/followers", "following_url": "https://api.github.com/users/sourcefrog/following{/other_user}", "gists_url": "https://api.github.com/users/sourcefrog/gists{/gist_id}", "starred_url": "https://api.github.com/users/sourcefrog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sourcefrog/subscriptions", "organizations_url": "https://api.github.com/users/sourcefrog/orgs", "repos_url": "https://api.github.com/users/sourcefrog/repos", "events_url": "https://api.github.com/users/sourcefrog/events{/privacy}", "received_events_url": "https://api.github.com/users/sourcefrog/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34e6995aa3cec561595d52ca28471d9a6c8dd437", "url": "https://api.github.com/repos/rust-lang/rust/commits/34e6995aa3cec561595d52ca28471d9a6c8dd437", "html_url": "https://github.com/rust-lang/rust/commit/34e6995aa3cec561595d52ca28471d9a6c8dd437"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "e2b114b7e54b468adcbcf0195578cd7a89301754", "filename": "src/doc/book/casting-between-types.md", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/797d5433c973dadbfe5f9dfbd4de7d0930338847/src%2Fdoc%2Fbook%2Fcasting-between-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/797d5433c973dadbfe5f9dfbd4de7d0930338847/src%2Fdoc%2Fbook%2Fcasting-between-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcasting-between-types.md?ref=797d5433c973dadbfe5f9dfbd4de7d0930338847", "patch": "@@ -7,9 +7,12 @@ most dangerous features of Rust!\n \n # Coercion\n \n-Coercion between types is implicit and has no explicit syntax. Coercion occurs\n-in `let`, `const`, and `static` statements; in function call arguments; in\n-field values in struct initialization; and in a function result.\n+Coercion between types is implicit and has no syntax of its own, but can\n+be spelled out with [`as`](#explicit-coercions).\n+\n+Coercion occurs in `let`, `const`, and `static` statements; in\n+function call arguments; in field values in struct initialization; and in a\n+function result.\n \n The main cases of coercion are:\n \n@@ -21,6 +24,9 @@ The main cases of coercion are:\n \n  * `&mut T` to `*mut T`\n  \n+ * A custom coercion using [`Deref`](deref-coercions.md)\n+ \n+ \n # `as`\n \n The `as` keyword does safe casting:\n@@ -50,15 +56,14 @@ let a = \"hello\";\n let b = a as String;\n ```\n \n-All coercions will be made implicitly when necessary and unambiguous.\n-\n ## Numeric casts\n \n A cast `e as U` is also valid in any of the following cases:\n \n  * `e` has type `T` and `T` and `U` are any numeric types; *numeric-cast*\n- * `e` is a C-like enum and `U` is an integer type; *enum-cast*\n- * `e` has type `bool` or `char` and `U` is an integer; *prim-int-cast*\n+ * `e` is a C-like enum (with no data attached to the variants),\n+    and `U` is an integer type; *enum-cast*\n+ * `e` has type `bool` or `char` and `U` is an integer type; *prim-int-cast*\n  * `e` has type `u8` and `U` is `char`; *u8-char-cast*\n  \n For example\n@@ -68,7 +73,7 @@ let one = true as u8;\n let at_sign = 64 as char;\n ```\n \n-For numeric casts, there are quite a few cases to consider:\n+The semantics of numeric casts are:\n \n * Casting between two integers of the same size (e.g. i32 -> u32) is a no-op\n * Casting from a larger integer to a smaller integer (e.g. u32 -> u8) will\n@@ -100,13 +105,20 @@ Perhaps surprisingly, it is safe to cast pointers to and from integers, and\n to cast between pointers to different types subject to some constraints. It\n is only unsafe to dereference the pointer.\n \n+`e as U` is a valid pointer cast in any of the following cases:\n+\n * `e` has type `*T`, `U` has type `*U_0`, and either `U_0: Sized` or\n-  unsize_kind(`T`) = unsize_kind(`U_0`); a *ptr-ptr-cast*\n+  `unsize_kind(T) == unsize_kind(U_0)`; a *ptr-ptr-cast*\n+  \n * `e` has type `*T` and `U` is a numeric type, while `T: Sized`; *ptr-addr-cast*\n+\n * `e` is an integer and `U` is `*U_0`, while `U_0: Sized`; *addr-ptr-cast*\n+\n * `e` has type `&[T; n]` and `U` is `*const T`; *array-ptr-cast*\n+\n * `e` is a function pointer type and `U` has type `*T`,\n   while `T: Sized`; *fptr-ptr-cast*\n+\n * `e` is a function pointer type and `U` is an integer; *fptr-addr-cast*\n \n "}]}