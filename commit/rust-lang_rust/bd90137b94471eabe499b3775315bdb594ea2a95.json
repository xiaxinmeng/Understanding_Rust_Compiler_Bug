{"sha": "bd90137b94471eabe499b3775315bdb594ea2a95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkOTAxMzdiOTQ0NzFlYWJlNDk5YjM3NzUzMTViZGI1OTRlYTJhOTU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-26T23:06:57Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-05T14:54:49Z"}, "message": "Improve query efficiency", "tree": {"sha": "438de9ba3ce3eb74be07d57b131565e2010322a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/438de9ba3ce3eb74be07d57b131565e2010322a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd90137b94471eabe499b3775315bdb594ea2a95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd90137b94471eabe499b3775315bdb594ea2a95", "html_url": "https://github.com/rust-lang/rust/commit/bd90137b94471eabe499b3775315bdb594ea2a95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd90137b94471eabe499b3775315bdb594ea2a95/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5d5e6a5604dbc14090e1a5919b6eac522442f6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d5e6a5604dbc14090e1a5919b6eac522442f6e", "html_url": "https://github.com/rust-lang/rust/commit/e5d5e6a5604dbc14090e1a5919b6eac522442f6e"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "b7281cf0445cdf0a30c72cfc7f5c44030a215d4f", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd90137b94471eabe499b3775315bdb594ea2a95/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd90137b94471eabe499b3775315bdb594ea2a95/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=bd90137b94471eabe499b3775315bdb594ea2a95", "patch": "@@ -615,7 +615,7 @@ define_dep_nodes!( <'tcx>\n     [input] CrateName(CrateNum),\n     [] ItemChildren(DefId),\n     [] ExternModStmtCnum(DefId),\n-    [input] GetLibFeatures,\n+    [eval_always] GetLibFeatures,\n     [] DefinedLibFeatures(CrateNum),\n     [eval_always] GetLangItems,\n     [] DefinedLangItems(CrateNum),"}, {"sha": "47c6bfbe6945a4b6822ff88e3ff2f3f33b0ed447", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd90137b94471eabe499b3775315bdb594ea2a95/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd90137b94471eabe499b3775315bdb594ea2a95/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=bd90137b94471eabe499b3775315bdb594ea2a95", "patch": "@@ -37,10 +37,12 @@ impl LibFeatures {\n         }\n     }\n \n-    pub fn iter(&self) -> Vec<(Symbol, Option<Symbol>)> {\n-        self.stable.iter().map(|(f, s)| (*f, Some(*s)))\n+    pub fn to_vec(&self) -> Vec<(Symbol, Option<Symbol>)> {\n+        let mut all_features: Vec<_> = self.stable.iter().map(|(f, s)| (*f, Some(*s)))\n             .chain(self.unstable.iter().map(|f| (*f, None)))\n-            .collect()\n+            .collect();\n+        all_features.sort_unstable_by_key(|f| f.0.as_str());\n+        all_features\n     }\n }\n "}, {"sha": "7fd788ff2eafc9d47d74cdb7688d60b8e098d761", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd90137b94471eabe499b3775315bdb594ea2a95/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd90137b94471eabe499b3775315bdb594ea2a95/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=bd90137b94471eabe499b3775315bdb594ea2a95", "patch": "@@ -841,7 +841,7 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     // FIXME: only remove `libc` when `stdbuild` is active.\n     remaining_lib_features.remove(&Symbol::intern(\"libc\"));\n \n-    for (feature, stable) in tcx.lib_features().iter() {\n+    for (feature, stable) in tcx.lib_features().to_vec() {\n         if let Some(since) = stable {\n             if let Some(span) = remaining_lib_features.get(&feature) {\n                 // Warn if the user has enabled an already-stable lib feature."}, {"sha": "bb14af29a7afe4d71bf4d6747c57296cc2d9c088", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd90137b94471eabe499b3775315bdb594ea2a95/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd90137b94471eabe499b3775315bdb594ea2a95/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=bd90137b94471eabe499b3775315bdb594ea2a95", "patch": "@@ -2846,8 +2846,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     };\n     providers.get_lib_features = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n-        // FIXME(#42293): see comment below.\n-        tcx.dep_graph.with_ignore(|| Lrc::new(middle::lib_features::collect(tcx)))\n+        Lrc::new(middle::lib_features::collect(tcx))\n     };\n     providers.get_lang_items = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);"}, {"sha": "45a61ec33085d2345e1fde4d47ce1fc1b3688a4f", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd90137b94471eabe499b3775315bdb594ea2a95/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd90137b94471eabe499b3775315bdb594ea2a95/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=bd90137b94471eabe499b3775315bdb594ea2a95", "patch": "@@ -647,12 +647,10 @@ impl<'a, 'tcx> CrateMetadata {\n \n     /// Iterates over all the stability attributes in the given crate.\n     pub fn get_lib_features(&self) -> Vec<(ast::Name, Option<ast::Name>)> {\n-        let mut features: Vec<_> = self.root\n+        self.root\n             .lib_features\n             .decode(self)\n-            .collect();\n-        features.sort_unstable_by_key(|f| f.0.as_str());\n-        features\n+            .collect()\n     }\n \n     /// Iterates over the language items in the given crate."}, {"sha": "96d6c5b75f49e677b475ea161dc9b43f5275bde1", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd90137b94471eabe499b3775315bdb594ea2a95/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd90137b94471eabe499b3775315bdb594ea2a95/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=bd90137b94471eabe499b3775315bdb594ea2a95", "patch": "@@ -1466,7 +1466,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n     fn encode_lib_features(&mut self, _: ()) -> LazySeq<(ast::Name, Option<ast::Name>)> {\n         let tcx = self.tcx;\n         let lib_features = tcx.lib_features();\n-        self.lazy_seq(lib_features.iter())\n+        self.lazy_seq(lib_features.to_vec())\n     }\n \n     fn encode_lang_items(&mut self, _: ()) -> LazySeq<(DefIndex, usize)> {"}]}