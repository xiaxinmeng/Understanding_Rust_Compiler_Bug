{"sha": "d14d194f61bfd775411c2450e1d939bbb06542b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNGQxOTRmNjFiZmQ3NzU0MTFjMjQ1MGUxZDkzOWJiYjA2NTQyYjk=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-05-12T06:10:52Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-05-13T14:02:29Z"}, "message": "Support #[allow] etc logic on a per macro level\n\nThis commit extends the current unused macro linter\nto support directives like #[allow(unused_macros)]\nor #[deny(unused_macros)] directly next to the macro\ndefinition, or in one of the modules the macro is\ninside. Before, we only supported such directives\nat a per crate level, due to the crate's NodeId\nbeing passed to session.add_lint.\n\nWe also had to implement handling of the macro's\nNodeId in the lint visitor.", "tree": {"sha": "32a833a4a79f662d1aac206706d9623d042e457a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32a833a4a79f662d1aac206706d9623d042e457a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d14d194f61bfd775411c2450e1d939bbb06542b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d14d194f61bfd775411c2450e1d939bbb06542b9", "html_url": "https://github.com/rust-lang/rust/commit/d14d194f61bfd775411c2450e1d939bbb06542b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d14d194f61bfd775411c2450e1d939bbb06542b9/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db82c57cb7ff7f4f629ceeaefdbc693d2886fda7", "url": "https://api.github.com/repos/rust-lang/rust/commits/db82c57cb7ff7f4f629ceeaefdbc693d2886fda7", "html_url": "https://github.com/rust-lang/rust/commit/db82c57cb7ff7f4f629ceeaefdbc693d2886fda7"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "172b74d539334a5d9278feeea33b726e4b9bd6ac", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d14d194f61bfd775411c2450e1d939bbb06542b9/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14d194f61bfd775411c2450e1d939bbb06542b9/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=d14d194f61bfd775411c2450e1d939bbb06542b9", "patch": "@@ -49,6 +49,7 @@ use hir;\n use hir::def_id::LOCAL_CRATE;\n use hir::intravisit as hir_visit;\n use syntax::visit as ast_visit;\n+use syntax::tokenstream::ThinTokenStream;\n \n /// Information about the registered lints.\n ///\n@@ -1125,6 +1126,13 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n     fn visit_attribute(&mut self, attr: &'a ast::Attribute) {\n         run_lints!(self, check_attribute, early_passes, attr);\n     }\n+\n+    fn visit_mac_def(&mut self, _mac: &'a ThinTokenStream, id: ast::NodeId) {\n+        let lints = self.sess.lints.borrow_mut().take(id);\n+        for early_lint in lints {\n+            self.early_lint(&early_lint);\n+        }\n+    }\n }\n \n enum CheckLintNameResult {"}, {"sha": "3027489d65be2ea1f955e5e3c5e1c8e611b66280", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d14d194f61bfd775411c2450e1d939bbb06542b9/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14d194f61bfd775411c2450e1d939bbb06542b9/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=d14d194f61bfd775411c2450e1d939bbb06542b9", "patch": "@@ -103,7 +103,8 @@ impl<'a> Registry<'a> {\n         }\n         self.syntax_exts.push((name, match extension {\n             NormalTT(ext, _, allow_internal_unstable) => {\n-                NormalTT(ext, Some(self.krate_span), allow_internal_unstable)\n+                let nid = ast::CRATE_NODE_ID;\n+                NormalTT(ext, Some((nid, self.krate_span)), allow_internal_unstable)\n             }\n             IdentTT(ext, _, allow_internal_unstable) => {\n                 IdentTT(ext, Some(self.krate_span), allow_internal_unstable)"}, {"sha": "f6155c6cafdea1256c7d452f1900a3bc2a3f022c", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d14d194f61bfd775411c2450e1d939bbb06542b9/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14d194f61bfd775411c2450e1d939bbb06542b9/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d14d194f61bfd775411c2450e1d939bbb06542b9", "patch": "@@ -305,17 +305,14 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n     fn check_unused_macros(&self) {\n         for (did, _) in self.unused_macros.iter().filter(|&(_, b)| *b) {\n-            let span = match *self.macro_map[did] {\n-                           SyntaxExtension::NormalTT(_, sp, _) => sp,\n-                           SyntaxExtension::IdentTT(_, sp, _) => sp,\n+            let id_span = match *self.macro_map[did] {\n+                           SyntaxExtension::NormalTT(_, isp, _) => isp,\n                            _ => None\n                        };\n-            if let Some(span) = span {\n+            if let Some((id, span)) = id_span {\n                 let lint = lint::builtin::UNUSED_MACROS;\n-                let msg = \"unused macro\".to_string();\n-                // We are using CRATE_NODE_ID here even though its inaccurate, as we\n-                // sadly don't have the NodeId of the macro definition.\n-                self.session.add_lint(lint, ast::CRATE_NODE_ID, span, msg);\n+                let msg = \"unused macro definition\".to_string();\n+                self.session.add_lint(lint, id, span, msg);\n             } else {\n                 bug!(\"attempted to create unused macro error, but span not available\");\n             }"}, {"sha": "86202f77dbf8afa04da0ae16dd3ff5d14ac64f32", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d14d194f61bfd775411c2450e1d939bbb06542b9/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14d194f61bfd775411c2450e1d939bbb06542b9/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=d14d194f61bfd775411c2450e1d939bbb06542b9", "patch": "@@ -535,7 +535,7 @@ pub enum SyntaxExtension {\n     ///\n     /// The `bool` dictates whether the contents of the macro can\n     /// directly use `#[unstable]` things (true == yes).\n-    NormalTT(Box<TTMacroExpander>, Option<Span>, bool),\n+    NormalTT(Box<TTMacroExpander>, Option<(ast::NodeId, Span)>, bool),\n \n     /// A function-like syntax extension that has an extra ident before\n     /// the block."}, {"sha": "75dd09f23115e507b9cf9eb42b16b5057b136dd9", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d14d194f61bfd775411c2450e1d939bbb06542b9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14d194f61bfd775411c2450e1d939bbb06542b9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d14d194f61bfd775411c2450e1d939bbb06542b9", "patch": "@@ -469,7 +469,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     call_site: span,\n                     callee: NameAndSpan {\n                         format: MacroBang(Symbol::intern(&format!(\"{}\", path))),\n-                        span: exp_span,\n+                        span: exp_span.map(|(_, s)| s),\n                         allow_internal_unstable: allow_internal_unstable,\n                     },\n                 });"}, {"sha": "0c787dcbecb9a8d207cdc0f3872fe53906d52345", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d14d194f61bfd775411c2450e1d939bbb06542b9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14d194f61bfd775411c2450e1d939bbb06542b9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=d14d194f61bfd775411c2450e1d939bbb06542b9", "patch": "@@ -252,7 +252,11 @@ pub fn compile(sess: &ParseSess, features: &RefCell<Features>, def: &ast::Item)\n         valid: valid,\n     });\n \n-    NormalTT(exp, Some(def.span), attr::contains_name(&def.attrs, \"allow_internal_unstable\"))\n+    NormalTT(\n+             exp,\n+             Some((def.id, def.span)),\n+             attr::contains_name(&def.attrs, \"allow_internal_unstable\")\n+    )\n }\n \n fn check_lhs_nt_follows(sess: &ParseSess,"}]}