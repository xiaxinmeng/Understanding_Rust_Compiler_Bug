{"sha": "e54cde52151feabf4dbcd4905f580eeae9a7f28f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NGNkZTUyMTUxZmVhYmY0ZGJjZDQ5MDVmNTgwZWVhZTlhN2YyOGY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-13T14:35:29Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-13T15:20:31Z"}, "message": "Use type size/alignment of target, rather than host, in debuginfo", "tree": {"sha": "cea0293fede6a15a4367cff432f16ab29a09b093", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cea0293fede6a15a4367cff432f16ab29a09b093"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e54cde52151feabf4dbcd4905f580eeae9a7f28f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e54cde52151feabf4dbcd4905f580eeae9a7f28f", "html_url": "https://github.com/rust-lang/rust/commit/e54cde52151feabf4dbcd4905f580eeae9a7f28f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e54cde52151feabf4dbcd4905f580eeae9a7f28f/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "463cf837ebe97423739c134f2497f89f571fa4e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/463cf837ebe97423739c134f2497f89f571fa4e2", "html_url": "https://github.com/rust-lang/rust/commit/463cf837ebe97423739c134f2497f89f571fa4e2"}], "stats": {"total": 94, "additions": 24, "deletions": 70}, "files": [{"sha": "5793fab275cbd8ee8f5cd67f855a0a6978230318", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 24, "deletions": 70, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/e54cde52151feabf4dbcd4905f580eeae9a7f28f/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e54cde52151feabf4dbcd4905f580eeae9a7f28f/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=e54cde52151feabf4dbcd4905f580eeae9a7f28f", "patch": "@@ -268,8 +268,10 @@ fn create_block(cx: block) -> @metadata<block_md> {\n     ret mdval;\n }\n \n-fn size_and_align_of<T>() -> (int, int) {\n-    (sys::size_of::<T>() as int, sys::align_of::<T>() as int)\n+fn size_and_align_of(cx: crate_ctxt, t: ty::t) -> (int, int) {\n+    let llty = type_of::type_of(cx, t);\n+    (shape::llsize_of_real(cx, llty) as int,\n+     shape::llalign_of_real(cx, llty) as int)\n }\n \n fn create_basic_type(cx: crate_ctxt, t: ty::t, ty: ast::prim_ty, span: span)\n@@ -282,33 +284,34 @@ fn create_basic_type(cx: crate_ctxt, t: ty::t, ty: ast::prim_ty, span: span)\n       option::none {}\n     }\n \n-    let (name, (size, align), encoding) = alt check ty {\n-      ast::ty_bool {(\"bool\", size_and_align_of::<bool>(), DW_ATE_boolean)}\n+    let (name, encoding) = alt check ty {\n+      ast::ty_bool {(\"bool\", DW_ATE_boolean)}\n       ast::ty_int(m) { alt m {\n-        ast::ty_char {(\"char\", size_and_align_of::<char>(), DW_ATE_unsigned)}\n-        ast::ty_i {(\"int\", size_and_align_of::<int>(), DW_ATE_signed)}\n-        ast::ty_i8 {(\"i8\", size_and_align_of::<i8>(), DW_ATE_signed_char)}\n-        ast::ty_i16 {(\"i16\", size_and_align_of::<i16>(), DW_ATE_signed)}\n-        ast::ty_i32 {(\"i32\", size_and_align_of::<i32>(), DW_ATE_signed)}\n-        ast::ty_i64 {(\"i64\", size_and_align_of::<i64>(), DW_ATE_signed)}\n+        ast::ty_char {(\"char\", DW_ATE_unsigned)}\n+        ast::ty_i {(\"int\", DW_ATE_signed)}\n+        ast::ty_i8 {(\"i8\", DW_ATE_signed_char)}\n+        ast::ty_i16 {(\"i16\", DW_ATE_signed)}\n+        ast::ty_i32 {(\"i32\", DW_ATE_signed)}\n+        ast::ty_i64 {(\"i64\", DW_ATE_signed)}\n       }}\n       ast::ty_uint(m) { alt m {\n-        ast::ty_u {(\"uint\", size_and_align_of::<uint>(), DW_ATE_unsigned)}\n-        ast::ty_u8 {(\"u8\", size_and_align_of::<u8>(), DW_ATE_unsigned_char)}\n-        ast::ty_u16 {(\"u16\", size_and_align_of::<u16>(), DW_ATE_unsigned)}\n-        ast::ty_u32 {(\"u32\", size_and_align_of::<u32>(), DW_ATE_unsigned)}\n-        ast::ty_u64 {(\"u64\", size_and_align_of::<u64>(), DW_ATE_unsigned)}\n+        ast::ty_u {(\"uint\", DW_ATE_unsigned)}\n+        ast::ty_u8 {(\"u8\", DW_ATE_unsigned_char)}\n+        ast::ty_u16 {(\"u16\", DW_ATE_unsigned)}\n+        ast::ty_u32 {(\"u32\", DW_ATE_unsigned)}\n+        ast::ty_u64 {(\"u64\", DW_ATE_unsigned)}\n       }}\n       ast::ty_float(m) { alt m {\n-        ast::ty_f {(\"float\", size_and_align_of::<float>(), DW_ATE_float)}\n-        ast::ty_f32 {(\"f32\", size_and_align_of::<f32>(), DW_ATE_float)}\n-        ast::ty_f64 {(\"f64\", size_and_align_of::<f64>(), DW_ATE_float)}\n+        ast::ty_f {(\"float\", DW_ATE_float)}\n+        ast::ty_f32 {(\"f32\", DW_ATE_float)}\n+        ast::ty_f64 {(\"f64\", DW_ATE_float)}\n       }}\n     };\n \n     let fname = filename_from_span(cx, span);\n     let file_node = create_file(cx, fname);\n     let cu_node = create_compile_unit(cx, fname);\n+    let (size, align) = size_and_align_of(cx, t);\n     let lldata = [lltag(tg),\n                   cu_node.node,\n                   llstr(name),\n@@ -336,7 +339,7 @@ fn create_pointer_type(cx: crate_ctxt, t: ty::t, span: span,\n       option::some(md) { ret md; }\n       option::none {}\n     }*/\n-    let (size, align) = size_and_align_of::<libc::intptr_t>();\n+    let (size, align) = size_and_align_of(cx, t);\n     let fname = filename_from_span(cx, span);\n     let file_node = create_file(cx, fname);\n     //let cu_node = create_compile_unit(cx, fname);\n@@ -410,7 +413,7 @@ fn create_record(cx: crate_ctxt, t: ty::t, fields: [ast::ty_field],\n     for field in fields {\n         let field_t = ty::get_field(t, field.node.ident).mt.ty;\n         let ty_md = create_ty(cx, field_t, field.node.mt.ty);\n-        let (size, align) = member_size_and_align(cx.tcx, field.node.mt.ty);\n+        let (size, align) = size_and_align_of(cx, field_t);\n         add_member(scx, field.node.ident,\n                    line_from_span(cx.sess.codemap, field.span) as int,\n                    size as int, align as int, ty_md.node);\n@@ -492,7 +495,7 @@ fn create_vec(cx: crate_ctxt, vec_t: ty::t, elem_t: ty::t,\n     add_member(scx, \"alloc\", 0, sys::size_of::<libc::size_t>() as int,\n                sys::align_of::<libc::size_t>() as int, size_t_type.node);\n     let subrange = llmdnode([lltag(SubrangeTag), lli64(0), lli64(0)]);\n-    let (arr_size, arr_align) = member_size_and_align(cx.tcx, elem_ty);\n+    let (arr_size, arr_align) = size_and_align_of(cx, elem_t);\n     let data_ptr = create_composite_type(ArrayTypeTag, \"\", file_node.node, 0,\n                                          arr_size, arr_align, 0,\n                                          option::some(elem_ty_md.node),\n@@ -503,55 +506,6 @@ fn create_vec(cx: crate_ctxt, vec_t: ty::t, elem_t: ty::t,\n     ret @{node: llnode, data: {hash: ty::type_id(vec_t)}};\n }\n \n-fn member_size_and_align(tcx: ty::ctxt, ty: @ast::ty) -> (int, int) {\n-    alt ty.node {\n-      ast::ty_path(_, id) {\n-        alt check tcx.def_map.get(id) {\n-          ast::def_prim_ty(nty) {\n-            alt check nty {\n-              ast::ty_bool { size_and_align_of::<bool>() }\n-              ast::ty_int(m) { alt m {\n-                ast::ty_char { size_and_align_of::<char>() }\n-                ast::ty_i { size_and_align_of::<int>() }\n-                ast::ty_i8 { size_and_align_of::<i8>() }\n-                ast::ty_i16 { size_and_align_of::<i16>() }\n-                ast::ty_i32 { size_and_align_of::<i32>() }\n-                ast::ty_i64 { size_and_align_of::<i64>() }\n-              }}\n-              ast::ty_uint(m) { alt m {\n-                ast::ty_u { size_and_align_of::<uint>() }\n-                ast::ty_u8 { size_and_align_of::<i8>() }\n-                ast::ty_u16 { size_and_align_of::<u16>() }\n-                ast::ty_u32 { size_and_align_of::<u32>() }\n-                ast::ty_u64 { size_and_align_of::<u64>() }\n-              }}\n-              ast::ty_float(m) { alt m {\n-                ast::ty_f { size_and_align_of::<float>() }\n-                ast::ty_f32 { size_and_align_of::<f32>() }\n-                ast::ty_f64 { size_and_align_of::<f64>() }\n-              }}\n-            }\n-          }\n-        }\n-      }\n-      ast::ty_box(_) | ast::ty_uniq(_) {\n-        size_and_align_of::<libc::uintptr_t>()\n-      }\n-      ast::ty_rec(fields) {\n-        let total_size = 0;\n-        for field in fields {\n-            let (size, _) = member_size_and_align(tcx, field.node.mt.ty);\n-            total_size += size;\n-        }\n-        (total_size, 64) //XXX different align for other arches?\n-      }\n-      ast::ty_vec(_) {\n-        size_and_align_of::<libc::uintptr_t>()\n-      }\n-      _ { fail \"member_size_and_align: can't handle this type\"; }\n-    }\n-}\n-\n fn create_ty(_cx: crate_ctxt, _t: ty::t, _ty: @ast::ty)\n     -> @metadata<tydesc_md> {\n     /*let cache = get_cache(cx);"}]}