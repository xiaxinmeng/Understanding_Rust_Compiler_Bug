{"sha": "4a0a0e949a077a6d83ca152daa404ff47c9c1dcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMGEwZTk0OWEwNzdhNmQ4M2NhMTUyZGFhNDA0ZmY0N2M5YzFkY2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-10T02:29:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-12T00:19:23Z"}, "message": "remove type variable defaults code\n\nThis just limits ourselves to the \"old school\" defaults: diverging\nvariables and integer variables.", "tree": {"sha": "859fb6a54788113539f6e5e742b5d96894cc2cbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/859fb6a54788113539f6e5e742b5d96894cc2cbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a0a0e949a077a6d83ca152daa404ff47c9c1dcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a0a0e949a077a6d83ca152daa404ff47c9c1dcf", "html_url": "https://github.com/rust-lang/rust/commit/4a0a0e949a077a6d83ca152daa404ff47c9c1dcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a0a0e949a077a6d83ca152daa404ff47c9c1dcf/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c58c928e658d2e45f816fd05796a964aa83759da", "url": "https://api.github.com/repos/rust-lang/rust/commits/c58c928e658d2e45f816fd05796a964aa83759da", "html_url": "https://github.com/rust-lang/rust/commit/c58c928e658d2e45f816fd05796a964aa83759da"}], "stats": {"total": 488, "additions": 3, "deletions": 485}, "files": [{"sha": "d300552af2caf5e53263bb20d87bd6aeccfd632a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 208, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/4a0a0e949a077a6d83ca152daa404ff47c9c1dcf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a0a0e949a077a6d83ca152daa404ff47c9c1dcf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4a0a0e949a077a6d83ca152daa404ff47c9c1dcf", "patch": "@@ -88,7 +88,7 @@ use hir::def::{Def, CtorKind};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_back::slice::ref_slice;\n use rustc::infer::{self, InferCtxt, InferOk, RegionVariableOrigin};\n-use rustc::infer::type_variable::{self, TypeVariableOrigin};\n+use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::{ParamTy, ParameterEnvironment};\n@@ -105,7 +105,7 @@ use session::{Session, CompileResult};\n use TypeAndSubsts;\n use lint;\n use util::common::{ErrorReported, indenter};\n-use util::nodemap::{DefIdMap, FxHashMap, FxHashSet, NodeMap};\n+use util::nodemap::{DefIdMap, FxHashMap, NodeMap};\n \n use std::cell::{Cell, RefCell};\n use std::cmp;\n@@ -1978,218 +1978,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    // Implements type inference fallback algorithm\n     fn select_all_obligations_and_apply_defaults(&self) {\n-        if self.tcx.sess.features.borrow().default_type_parameter_fallback {\n-            self.new_select_all_obligations_and_apply_defaults();\n-        } else {\n-            self.old_select_all_obligations_and_apply_defaults();\n-        }\n-    }\n-\n-    // Implements old type inference fallback algorithm\n-    fn old_select_all_obligations_and_apply_defaults(&self) {\n         self.select_obligations_where_possible();\n         self.default_type_parameters();\n         self.select_obligations_where_possible();\n     }\n \n-    fn new_select_all_obligations_and_apply_defaults(&self) {\n-        use rustc::ty::error::UnconstrainedNumeric::Neither;\n-        use rustc::ty::error::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat};\n-\n-        // For the time being this errs on the side of being memory wasteful but provides better\n-        // error reporting.\n-        // let type_variables = self.type_variables.clone();\n-\n-        // There is a possibility that this algorithm will have to run an arbitrary number of times\n-        // to terminate so we bound it by the compiler's recursion limit.\n-        for _ in 0..self.tcx.sess.recursion_limit.get() {\n-            // First we try to solve all obligations, it is possible that the last iteration\n-            // has made it possible to make more progress.\n-            self.select_obligations_where_possible();\n-\n-            let mut conflicts = Vec::new();\n-\n-            // Collect all unsolved type, integral and floating point variables.\n-            let unsolved_variables = self.unsolved_variables();\n-\n-            // We must collect the defaults *before* we do any unification. Because we have\n-            // directly attached defaults to the type variables any unification that occurs\n-            // will erase defaults causing conflicting defaults to be completely ignored.\n-            let default_map: FxHashMap<Ty<'tcx>, _> =\n-                unsolved_variables\n-                    .iter()\n-                    .filter_map(|t| self.default(t).map(|d| (*t, d)))\n-                    .collect();\n-\n-            let mut unbound_tyvars = FxHashSet();\n-\n-            debug!(\"select_all_obligations_and_apply_defaults: defaults={:?}\", default_map);\n-\n-            // We loop over the unsolved variables, resolving them and if they are\n-            // and unconstrainted numeric type we add them to the set of unbound\n-            // variables. We do this so we only apply literal fallback to type\n-            // variables without defaults.\n-            for ty in &unsolved_variables {\n-                let resolved = self.resolve_type_vars_if_possible(ty);\n-                if self.type_var_diverges(resolved) {\n-                    self.demand_eqtype(syntax_pos::DUMMY_SP, *ty,\n-                                       self.tcx.mk_diverging_default());\n-                } else {\n-                    match self.type_is_unconstrained_numeric(resolved) {\n-                        UnconstrainedInt | UnconstrainedFloat => {\n-                            unbound_tyvars.insert(resolved);\n-                        },\n-                        Neither => {}\n-                    }\n-                }\n-            }\n-\n-            // We now remove any numeric types that also have defaults, and instead insert\n-            // the type variable with a defined fallback.\n-            for ty in &unsolved_variables {\n-                if let Some(_default) = default_map.get(ty) {\n-                    let resolved = self.resolve_type_vars_if_possible(ty);\n-\n-                    debug!(\"select_all_obligations_and_apply_defaults: \\\n-                            ty: {:?} with default: {:?}\",\n-                             ty, _default);\n-\n-                    match resolved.sty {\n-                        ty::TyInfer(ty::TyVar(_)) => {\n-                            unbound_tyvars.insert(ty);\n-                        }\n-\n-                        ty::TyInfer(ty::IntVar(_)) | ty::TyInfer(ty::FloatVar(_)) => {\n-                            unbound_tyvars.insert(ty);\n-                            if unbound_tyvars.contains(resolved) {\n-                                unbound_tyvars.remove(resolved);\n-                            }\n-                        }\n-\n-                        _ => {}\n-                    }\n-                }\n-            }\n-\n-            // If there are no more fallbacks to apply at this point we have applied all possible\n-            // defaults and type inference will proceed as normal.\n-            if unbound_tyvars.is_empty() {\n-                break;\n-            }\n-\n-            // Finally we go through each of the unbound type variables and unify them with\n-            // the proper fallback, reporting a conflicting default error if any of the\n-            // unifications fail. We know it must be a conflicting default because the\n-            // variable would only be in `unbound_tyvars` and have a concrete value if\n-            // it had been solved by previously applying a default.\n-\n-            // We wrap this in a transaction for error reporting, if we detect a conflict\n-            // we will rollback the inference context to its prior state so we can probe\n-            // for conflicts and correctly report them.\n-\n-            let _ = self.commit_if_ok(|_: &infer::CombinedSnapshot| {\n-                conflicts.extend(\n-                    self.apply_defaults_and_return_conflicts(&unbound_tyvars, &default_map, None)\n-                );\n-\n-                // If there are conflicts we rollback, otherwise commit\n-                if conflicts.len() > 0 {\n-                    Err(())\n-                } else {\n-                    Ok(())\n-                }\n-            });\n-\n-            // Loop through each conflicting default, figuring out the default that caused\n-            // a unification failure and then report an error for each.\n-            for (conflict, default) in conflicts {\n-                let conflicting_default =\n-                    self.apply_defaults_and_return_conflicts(\n-                            &unbound_tyvars,\n-                            &default_map,\n-                            Some(conflict)\n-                        )\n-                        .last()\n-                        .map(|(_, tv)| tv)\n-                        .unwrap_or(type_variable::Default {\n-                            ty: self.next_ty_var(\n-                                TypeVariableOrigin::MiscVariable(syntax_pos::DUMMY_SP)),\n-                            origin_span: syntax_pos::DUMMY_SP,\n-                            // what do I put here?\n-                            def_id: self.tcx.hir.local_def_id(ast::CRATE_NODE_ID)\n-                        });\n-\n-                // This is to ensure that we elimnate any non-determinism from the error\n-                // reporting by fixing an order, it doesn't matter what order we choose\n-                // just that it is consistent.\n-                let (first_default, second_default) =\n-                    if default.def_id < conflicting_default.def_id {\n-                        (default, conflicting_default)\n-                    } else {\n-                        (conflicting_default, default)\n-                    };\n-\n-\n-                self.report_conflicting_default_types(\n-                    first_default.origin_span,\n-                    self.body_id,\n-                    first_default,\n-                    second_default)\n-            }\n-        }\n-\n-        self.select_obligations_where_possible();\n-    }\n-\n-    // For use in error handling related to default type parameter fallback. We explicitly\n-    // apply the default that caused conflict first to a local version of the type variable\n-    // table then apply defaults until we find a conflict. That default must be the one\n-    // that caused conflict earlier.\n-    fn apply_defaults_and_return_conflicts<'b>(\n-        &'b self,\n-        unbound_vars: &'b FxHashSet<Ty<'tcx>>,\n-        default_map: &'b FxHashMap<Ty<'tcx>, type_variable::Default<'tcx>>,\n-        conflict: Option<Ty<'tcx>>,\n-    ) -> impl Iterator<Item=(Ty<'tcx>, type_variable::Default<'tcx>)> + 'b {\n-        use rustc::ty::error::UnconstrainedNumeric::Neither;\n-        use rustc::ty::error::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat};\n-\n-        conflict.into_iter().chain(unbound_vars.iter().cloned()).flat_map(move |ty| {\n-            if self.type_var_diverges(ty) {\n-                self.demand_eqtype(syntax_pos::DUMMY_SP, ty,\n-                                   self.tcx.mk_diverging_default());\n-            } else {\n-                match self.type_is_unconstrained_numeric(ty) {\n-                    UnconstrainedInt => {\n-                        self.demand_eqtype(syntax_pos::DUMMY_SP, ty, self.tcx.types.i32)\n-                    },\n-                    UnconstrainedFloat => {\n-                        self.demand_eqtype(syntax_pos::DUMMY_SP, ty, self.tcx.types.f64)\n-                    },\n-                    Neither => {\n-                        if let Some(default) = default_map.get(ty) {\n-                            let default = default.clone();\n-                            let default_ty = self.normalize_associated_types_in(\n-                                default.origin_span, &default.ty);\n-                            match self.eq_types(false,\n-                                                &self.misc(default.origin_span),\n-                                                ty,\n-                                                default_ty) {\n-                                Ok(ok) => self.register_infer_ok_obligations(ok),\n-                                Err(_) => {\n-                                    return Some((ty, default));\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-\n-            None\n-        })\n-    }\n-\n     fn select_all_obligations_or_error(&self) {\n         debug!(\"select_all_obligations_or_error\");\n "}, {"sha": "8cde239ca6edf0c8c3126d6de4e4a7b540dad199", "filename": "src/test/compile-fail/default_ty_param_conflict.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict.rs?ref=c58c928e658d2e45f816fd05796a964aa83759da", "patch": "@@ -1,33 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(default_type_parameter_fallback)]\n-\n-use std::fmt::Debug;\n-\n-// Example from the RFC\n-fn foo<F:Default=usize>() -> F { F::default() }\n-//~^ NOTE: a default was defined here...\n-\n-fn bar<B:Debug=isize>(b: B) { println!(\"{:?}\", b); }\n-//~^ NOTE: a second default was defined here...\n-\n-fn main() {\n-    // Here, F is instantiated with $0=uint\n-    let x = foo();\n-    //~^ ERROR: mismatched types\n-    //~| NOTE: conflicting type parameter defaults `usize` and `isize`\n-    //~| NOTE: conflicting type parameter defaults `usize` and `isize`\n-    //~| NOTE: ...that was applied to an unconstrained type variable here\n-\n-    // Here, B is instantiated with $1=uint, and constraint $0 <: $1 is added.\n-    bar(x);\n-    //~^ NOTE: ...that also applies to the same type variable here\n-}"}, {"sha": "e5b035e50aa931c625e36761098f26cd85a5f161", "filename": "src/test/compile-fail/default_ty_param_conflict_cross_crate.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs?ref=c58c928e658d2e45f816fd05796a964aa83759da", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-//\n-//aux-build:default_ty_param_cross_crate_crate.rs\n-\n-#![feature(default_type_parameter_fallback)]\n-\n-extern crate default_param_test;\n-\n-use default_param_test::{Foo, bleh};\n-\n-fn meh<X, B=bool>(x: Foo<X, B>) {}\n-//~^ NOTE: a default was defined here...\n-\n-fn main() {\n-    let foo = bleh();\n-    //~^ NOTE: ...that also applies to the same type variable here\n-\n-    meh(foo);\n-    //~^ ERROR: mismatched types\n-    //~| NOTE: conflicting type parameter defaults `bool` and `char`\n-    //~| NOTE: conflicting type parameter defaults `bool` and `char`\n-    //~| a second default is defined on `default_param_test::bleh`\n-    //~| NOTE:  ...that was applied to an unconstrained type variable here\n-}"}, {"sha": "8fc2c2e6bce70009bc949f187d6458ef82f5b1ec", "filename": "src/test/run-pass/default_ty_param_default_dependent_associated_type.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_default_dependent_associated_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_default_dependent_associated_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_default_dependent_associated_type.rs?ref=c58c928e658d2e45f816fd05796a964aa83759da", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-//\n-\n-#![feature(default_type_parameter_fallback)]\n-\n-use std::marker::PhantomData;\n-\n-trait Id {\n-    type This;\n-}\n-\n-impl<A> Id for A {\n-    type This = A;\n-}\n-\n-struct Foo<X: Default = usize, Y = <X as Id>::This> {\n-    data: PhantomData<(X, Y)>\n-}\n-\n-impl<X: Default, Y> Foo<X, Y> {\n-    fn new() -> Foo<X, Y> {\n-        Foo { data: PhantomData }\n-    }\n-}\n-\n-fn main() {\n-    let foo = Foo::new();\n-}"}, {"sha": "ac833d0f54744e2a659d0c9738da4695edfe3cc4", "filename": "src/test/run-pass/default_ty_param_dependent_defaults.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_dependent_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_dependent_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_dependent_defaults.rs?ref=c58c928e658d2e45f816fd05796a964aa83759da", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-//\n-\n-#![feature(default_type_parameter_fallback)]\n-use std::marker::PhantomData;\n-\n-struct Foo<T,U=T> { t: T, data: PhantomData<U> }\n-\n-fn main() {\n-    let foo = Foo { t: 'a', data: PhantomData };\n-}"}, {"sha": "e8d93092ec53d31704a5da06482dd58a9d00a719", "filename": "src/test/run-pass/default_ty_param_method_call_test.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_method_call_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_method_call_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_method_call_test.rs?ref=c58c928e658d2e45f816fd05796a964aa83759da", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(default_type_parameter_fallback)]\n-\n-struct Foo;\n-\n-impl Foo {\n-    fn method<A:Default=String>(&self) -> A {\n-        A::default()\n-    }\n-}\n-\n-fn main() {\n-    let f = Foo.method();\n-    println!(\"{}\", f);\n-}"}, {"sha": "d9ac51fc23b0281a07a4934f97fda0dec7f7bcf8", "filename": "src/test/run-pass/default_ty_param_struct.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_struct.rs?ref=c58c928e658d2e45f816fd05796a964aa83759da", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(default_type_parameter_fallback)]\n-\n-struct Foo<A>(A);\n-\n-impl<A:Default=i32> Foo<A> {\n-    fn new() -> Foo<A> {\n-        Foo(A::default())\n-    }\n-}\n-\n-fn main() {\n-    let foo = Foo::new();\n-}"}, {"sha": "d3bdab9082e32a38a676bacb7b009e0270a646a8", "filename": "src/test/run-pass/default_ty_param_struct_and_type_alias.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_struct_and_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_struct_and_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_struct_and_type_alias.rs?ref=c58c928e658d2e45f816fd05796a964aa83759da", "patch": "@@ -1,40 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-//\n-\n-#![feature(default_type_parameter_fallback)]\n-\n-use std::marker::PhantomData;\n-\n-pub struct DeterministicHasher;\n-pub struct RandomHasher;\n-\n-\n-pub struct MyHashMap<K, V, H=DeterministicHasher> {\n-    data: PhantomData<(K, V, H)>\n-}\n-\n-impl<K, V, H> MyHashMap<K, V, H> {\n-    fn new() -> MyHashMap<K, V, H> {\n-        MyHashMap { data: PhantomData }\n-    }\n-}\n-\n-mod mystd {\n-    use super::{MyHashMap, RandomHasher};\n-    pub type HashMap<K, V, H=RandomHasher> = MyHashMap<K, V, H>;\n-}\n-\n-fn try_me<H>(hash_map: mystd::HashMap<i32, i32, H>) {}\n-\n-fn main() {\n-    let hash_map = mystd::HashMap::new();\n-    try_me(hash_map);\n-}"}, {"sha": "c67d3a49aff3d01a1288affa33fb307305dd036a", "filename": "src/test/run-pass/default_ty_param_trait_impl.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_trait_impl.rs?ref=c58c928e658d2e45f816fd05796a964aa83759da", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(default_type_parameter_fallback)]\n-\n-// Another example from the RFC\n-trait Foo { }\n-trait Bar { }\n-\n-impl<T:Bar=usize> Foo for Vec<T> {}\n-impl Bar for usize {}\n-\n-fn takes_foo<F:Foo>(f: F) {}\n-\n-fn main() {\n-    let x = Vec::new(); // x: Vec<$0>\n-    takes_foo(x); // adds oblig Vec<$0> : Foo\n-}"}, {"sha": "067ad524922c0bfa17066c0939457504b321fe1d", "filename": "src/test/run-pass/default_ty_param_trait_impl_simple.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_trait_impl_simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_trait_impl_simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_trait_impl_simple.rs?ref=c58c928e658d2e45f816fd05796a964aa83759da", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(default_type_parameter_fallback)]\n-\n-// An example from the RFC\n-trait Foo { fn takes_foo(&self); }\n-trait Bar { }\n-\n-impl<T:Bar=usize> Foo for Vec<T> {\n-    fn takes_foo(&self) {}\n-}\n-\n-impl Bar for usize {}\n-\n-fn main() {\n-    let x = Vec::new(); // x: Vec<$0>\n-    x.takes_foo(); // adds oblig Vec<$0> : Foo\n-}"}, {"sha": "1b4747406d0c66e948f33b3b9be0773887cab1af", "filename": "src/test/run-pass/default_ty_param_type_alias.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58c928e658d2e45f816fd05796a964aa83759da/src%2Ftest%2Frun-pass%2Fdefault_ty_param_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_type_alias.rs?ref=c58c928e658d2e45f816fd05796a964aa83759da", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(default_type_parameter_fallback)]\n-\n-use std::collections::HashMap;\n-\n-type IntMap<K=usize> = HashMap<K, usize>;\n-\n-fn main() {\n-    let x = IntMap::new();\n-}"}]}