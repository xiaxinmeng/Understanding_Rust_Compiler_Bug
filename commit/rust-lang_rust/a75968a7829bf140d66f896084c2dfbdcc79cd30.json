{"sha": "a75968a7829bf140d66f896084c2dfbdcc79cd30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NTk2OGE3ODI5YmYxNDBkNjZmODk2MDg0YzJkZmJkY2M3OWNkMzA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-24T03:39:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-24T03:39:58Z"}, "message": "Rollup merge of #67551 - ldm0:E0627, r=Dylan-DPC\n\nAdd long error code explanation message for E0627\n\nPart of #61137.\n\nr? @GuillaumeGomez", "tree": {"sha": "1f8fb252c00a5df968c21cbbe62a79befdfe11df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f8fb252c00a5df968c21cbbe62a79befdfe11df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a75968a7829bf140d66f896084c2dfbdcc79cd30", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeAYiOCRBK7hj4Ov3rIwAAdHIIAFbHkYhHh288OXHqjPG0gILM\nCT6RQKSQOS2zDlvh7FJKFjv4QsvKWPw6blgXRC2Q+eMzcZMIQLaoDruEloYhi6F3\nXm6UNJ+voYWZo6/xppaK4/j1wKaDZzykIdqmtcEuU9/D5N4uC+Wxl8yra+N/XVnQ\ndQGtwUk9wxJzJTAvlChWqmUZ4tN9bbyYFgt/ljfN69M1mTD+z6tbhJZ8OI7fT43/\nHD9SQqFt+M9yLLEg+lNxH0IDdbKbKs1OpV5uI/Vr96fo8azx9F0Mi4ICmnZPOcrc\nHihKkNZWfzM0v9gKOmyX2xs84X4/4Z+3f9jCeeoGjU/nvQ39DdS/ugSRnyr0dFM=\n=BjKN\n-----END PGP SIGNATURE-----\n", "payload": "tree 1f8fb252c00a5df968c21cbbe62a79befdfe11df\nparent d130e8d550909413299bc9ac11490f98cb55340a\nparent 587d03bea89b2b551633aa561073ba97409a5dac\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1577158798 +0100\ncommitter GitHub <noreply@github.com> 1577158798 +0100\n\nRollup merge of #67551 - ldm0:E0627, r=Dylan-DPC\n\nAdd long error code explanation message for E0627\n\nPart of #61137.\n\nr? @GuillaumeGomez\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a75968a7829bf140d66f896084c2dfbdcc79cd30", "html_url": "https://github.com/rust-lang/rust/commit/a75968a7829bf140d66f896084c2dfbdcc79cd30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a75968a7829bf140d66f896084c2dfbdcc79cd30/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d130e8d550909413299bc9ac11490f98cb55340a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d130e8d550909413299bc9ac11490f98cb55340a", "html_url": "https://github.com/rust-lang/rust/commit/d130e8d550909413299bc9ac11490f98cb55340a"}, {"sha": "587d03bea89b2b551633aa561073ba97409a5dac", "url": "https://api.github.com/repos/rust-lang/rust/commits/587d03bea89b2b551633aa561073ba97409a5dac", "html_url": "https://github.com/rust-lang/rust/commit/587d03bea89b2b551633aa561073ba97409a5dac"}], "stats": {"total": 60, "additions": 47, "deletions": 13}, "files": [{"sha": "fbcc976bd491e98bb8fe8ba3f41b5a95640fcdaa", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=a75968a7829bf140d66f896084c2dfbdcc79cd30", "patch": "@@ -346,6 +346,7 @@ E0622: include_str!(\"./error_codes/E0622.md\"),\n E0623: include_str!(\"./error_codes/E0623.md\"),\n E0624: include_str!(\"./error_codes/E0624.md\"),\n E0626: include_str!(\"./error_codes/E0626.md\"),\n+E0627: include_str!(\"./error_codes/E0627.md\"),\n E0631: include_str!(\"./error_codes/E0631.md\"),\n E0633: include_str!(\"./error_codes/E0633.md\"),\n E0635: include_str!(\"./error_codes/E0635.md\"),\n@@ -574,7 +575,6 @@ E0745: include_str!(\"./error_codes/E0745.md\"),\n //  E0612, // merged into E0609\n //  E0613, // Removed (merged with E0609)\n     E0625, // thread-local statics cannot be accessed at compile-time\n-    E0627, // yield statement outside of generator literal\n     E0628, // generators cannot have explicit parameters\n     E0629, // missing 'feature' (rustc_const_unstable)\n     // rustc_const_unstable attribute must be paired with stable/unstable"}, {"sha": "21358e1e567dce08806878c048f9eb8861117197", "filename": "src/librustc_error_codes/error_codes/E0627.md", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Flibrustc_error_codes%2Ferror_codes%2FE0627.md", "raw_url": "https://github.com/rust-lang/rust/raw/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Flibrustc_error_codes%2Ferror_codes%2FE0627.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0627.md?ref=a75968a7829bf140d66f896084c2dfbdcc79cd30", "patch": "@@ -0,0 +1,30 @@\n+A yield expression was used outside of the generator literal.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0627\n+#![feature(generators, generator_trait)]\n+\n+fn fake_generator() -> &'static str {\n+    yield 1;\n+    return \"foo\"\n+}\n+\n+fn main() {\n+    let mut generator = fake_generator;\n+}\n+```\n+\n+The error occurs because keyword `yield` can only be used inside the generator\n+literal. This can be fixed by constructing the generator correctly.\n+\n+```\n+#![feature(generators, generator_trait)]\n+\n+fn main() {\n+    let mut generator = || {\n+        yield 1;\n+        return \"foo\"\n+    };\n+}\n+```"}, {"sha": "0d136bd7d9cf9a437e5ea7fc7a0727113f01c00f", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=a75968a7829bf140d66f896084c2dfbdcc79cd30", "patch": "@@ -1424,7 +1424,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     }\n \n     /// Reports an error if this is a borrow of local data.\n-    /// This is called for all Yield statements on movable generators\n+    /// This is called for all Yield expressions on movable generators\n     fn check_for_local_borrow(&mut self, borrow: &BorrowData<'tcx>, yield_span: Span) {\n         debug!(\"check_for_local_borrow({:?})\", borrow);\n "}, {"sha": "23b4799643a6cfb6282b167ee692cb3c6425c6ab", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=a75968a7829bf140d66f896084c2dfbdcc79cd30", "patch": "@@ -131,7 +131,7 @@ pub(super) fn is_active<'tcx>(\n }\n \n /// Determines if a given borrow is borrowing local data\n-/// This is called for all Yield statements on movable generators\n+/// This is called for all Yield expressions on movable generators\n pub(super) fn borrow_of_local_data(place: &Place<'_>) -> bool {\n     match place.base {\n         PlaceBase::Static(_) => false,"}, {"sha": "e862971c9e2b321c025fdfc8cefdc7cb5cae69a2", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=a75968a7829bf140d66f896084c2dfbdcc79cd30", "patch": "@@ -1810,7 +1810,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.tcx.sess,\n                     expr.span,\n                     E0627,\n-                    \"yield statement outside of generator literal\"\n+                    \"yield expression outside of generator literal\"\n                 )\n                 .emit();\n             }"}, {"sha": "931fee13471267771c795ba0908c12b1db17efbf", "filename": "src/test/ui/feature-gates/feature-gate-generators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.rs?ref=a75968a7829bf140d66f896084c2dfbdcc79cd30", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     yield true; //~ ERROR yield syntax is experimental\n-                //~^ ERROR yield statement outside of generator literal\n+                //~^ ERROR yield expression outside of generator literal\n }\n \n #[cfg(FALSE)]"}, {"sha": "4adc21efc6a2125f21fb2bad85244725769e827b", "filename": "src/test/ui/feature-gates/feature-gate-generators.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.stderr?ref=a75968a7829bf140d66f896084c2dfbdcc79cd30", "patch": "@@ -25,12 +25,13 @@ LL |     yield 0;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/43122\n    = help: add `#![feature(generators)]` to the crate attributes to enable\n \n-error[E0627]: yield statement outside of generator literal\n+error[E0627]: yield expression outside of generator literal\n   --> $DIR/feature-gate-generators.rs:2:5\n    |\n LL |     yield true;\n    |     ^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0627, E0658.\n+For more information about an error, try `rustc --explain E0627`."}, {"sha": "fe5ca822ceca1ce39e09cb24b9b9a24aa3e34817", "filename": "src/test/ui/generator/yield-in-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.rs?ref=a75968a7829bf140d66f896084c2dfbdcc79cd30", "patch": "@@ -1,6 +1,6 @@\n #![feature(generators)]\n \n const A: u8 = { yield 3u8; 3u8};\n-//~^ ERROR yield statement outside\n+//~^ ERROR yield expression outside\n \n fn main() {}"}, {"sha": "dcf4fe63e64bcf9622d83a768b8516df262ca495", "filename": "src/test/ui/generator/yield-in-const.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.stderr?ref=a75968a7829bf140d66f896084c2dfbdcc79cd30", "patch": "@@ -1,8 +1,9 @@\n-error[E0627]: yield statement outside of generator literal\n+error[E0627]: yield expression outside of generator literal\n   --> $DIR/yield-in-const.rs:3:17\n    |\n LL | const A: u8 = { yield 3u8; 3u8};\n    |                 ^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0627`."}, {"sha": "29b811621de1efecb5d6472f9b20b7f7a88cb32b", "filename": "src/test/ui/generator/yield-in-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-function.rs?ref=a75968a7829bf140d66f896084c2dfbdcc79cd30", "patch": "@@ -1,4 +1,4 @@\n #![feature(generators)]\n \n fn main() { yield; }\n-//~^ ERROR yield statement outside\n+//~^ ERROR yield expression outside"}, {"sha": "51cce198ca3b45a7d4da74f4274639f9a7f97707", "filename": "src/test/ui/generator/yield-in-function.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-function.stderr?ref=a75968a7829bf140d66f896084c2dfbdcc79cd30", "patch": "@@ -1,8 +1,9 @@\n-error[E0627]: yield statement outside of generator literal\n+error[E0627]: yield expression outside of generator literal\n   --> $DIR/yield-in-function.rs:3:13\n    |\n LL | fn main() { yield; }\n    |             ^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0627`."}, {"sha": "d27fbb33ba10acfa67191812fa701543ef4719a3", "filename": "src/test/ui/generator/yield-in-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.rs?ref=a75968a7829bf140d66f896084c2dfbdcc79cd30", "patch": "@@ -1,6 +1,6 @@\n #![feature(generators)]\n \n static B: u8 = { yield 3u8; 3u8};\n-//~^ ERROR yield statement outside\n+//~^ ERROR yield expression outside\n \n fn main() {}"}, {"sha": "d867f3ad345288b4fede56c3b6ab7e747650df40", "filename": "src/test/ui/generator/yield-in-static.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a75968a7829bf140d66f896084c2dfbdcc79cd30/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.stderr?ref=a75968a7829bf140d66f896084c2dfbdcc79cd30", "patch": "@@ -1,8 +1,9 @@\n-error[E0627]: yield statement outside of generator literal\n+error[E0627]: yield expression outside of generator literal\n   --> $DIR/yield-in-static.rs:3:18\n    |\n LL | static B: u8 = { yield 3u8; 3u8};\n    |                  ^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0627`."}]}