{"sha": "3d21c371effa15fcf3562b5b722c80623dbd2c43", "node_id": "C_kwDOAAsO6NoAKDNkMjFjMzcxZWZmYTE1ZmNmMzU2MmI1YjcyMmM4MDYyM2RiZDJjNDM", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-08-01T12:32:09Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-08-10T14:56:09Z"}, "message": "std: optimize thread ID generation", "tree": {"sha": "f0b10ce242834f081d5c60c809dac83b66a246f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0b10ce242834f081d5c60c809dac83b66a246f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d21c371effa15fcf3562b5b722c80623dbd2c43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmLzxx0ACgkQcE4BSbAZ\nSzxisBAAiffKwRoKc6rjUyN5CeMdzp5V5q2DLhZ8cJjGeeFifb2M9emgoPoN6GuX\nCsPOqLqOmG1lPUCplry80m7SENAMfxUyiC9gVpjqBHGACmRE7iSL97lU8LAYBq6a\nAvNJR3RTz8ykkuJD7auEAnckWcLm7CkwLiNO7tUr38ft/KG4nnV5UE4Y/elcZ+51\n/FAYrkqRb0Sdj04DZ3baItC2co3JEMYMO+4j6EZBi27Xw0PLBr0JRBUHUvLk5CVv\nX1ljEVqEaxna2nsV5u7VIIF0PAkw0ZYJ21tpl6tAPluCNDbb6XfPH8gRb/Nt2JPD\neTQIHUSCoardbCf+LiXUhwECRpTE7YRkiMzd4MUw3gYFS50Qt2+oMJqKxOvSlni3\ngZZEfPQ9+M1f0a44pPpI6LV3T2Kag714HI5wPj09CCltv4rxSC9cfdq+KC3i+RDX\niXFIdgRn+ueY0r+gJ5hC2tu5qT9JJTUIuAM4hk3Ge2q7NeDxPszXTkzrajWtCFD1\nc/0J0tSV1VmAqdFqjz4g8lSSsUxNO0FD1hya/n/661xyWg50toMkiwrtCJ+6efRn\nSgjCjASM+BuCtQSms2vNnyBKV/KluieGg2zmFiU9NAMaZXqCCLILumxjRjnewAJ2\niEQOEf86rbpXjc3xXa/bFR2ADStnXs6jpEu9rrbHrAflt4aFy/k=\n=4+1w\n-----END PGP SIGNATURE-----", "payload": "tree f0b10ce242834f081d5c60c809dac83b66a246f4\nparent 1f5d8d49eb6111931091f700d07518cd2b80bc18\nauthor joboet <jonasboettiger@icloud.com> 1659357129 +0200\ncommitter joboet <jonasboettiger@icloud.com> 1660143369 +0200\n\nstd: optimize thread ID generation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d21c371effa15fcf3562b5b722c80623dbd2c43", "html_url": "https://github.com/rust-lang/rust/commit/3d21c371effa15fcf3562b5b722c80623dbd2c43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d21c371effa15fcf3562b5b722c80623dbd2c43/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5d8d49eb6111931091f700d07518cd2b80bc18", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5d8d49eb6111931091f700d07518cd2b80bc18", "html_url": "https://github.com/rust-lang/rust/commit/1f5d8d49eb6111931091f700d07518cd2b80bc18"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "479669647c12843c743b19ebabd9b6743e6919f2", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3d21c371effa15fcf3562b5b722c80623dbd2c43/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d21c371effa15fcf3562b5b722c80623dbd2c43/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=3d21c371effa15fcf3562b5b722c80623dbd2c43", "patch": "@@ -170,7 +170,6 @@ use crate::ptr::addr_of_mut;\n use crate::str;\n use crate::sync::Arc;\n use crate::sys::thread as imp;\n-use crate::sys_common::mutex;\n use crate::sys_common::thread;\n use crate::sys_common::thread_info;\n use crate::sys_common::thread_parker::Parker;\n@@ -1033,24 +1032,48 @@ pub struct ThreadId(NonZeroU64);\n impl ThreadId {\n     // Generate a new unique thread ID.\n     fn new() -> ThreadId {\n-        // It is UB to attempt to acquire this mutex reentrantly!\n-        static GUARD: mutex::StaticMutex = mutex::StaticMutex::new();\n-        static mut COUNTER: u64 = 1;\n-\n-        unsafe {\n-            let guard = GUARD.lock();\n-\n-            // If we somehow use up all our bits, panic so that we're not\n-            // covering up subtle bugs of IDs being reused.\n-            if COUNTER == u64::MAX {\n-                drop(guard); // in case the panic handler ends up calling `ThreadId::new()`, avoid reentrant lock acquire.\n-                panic!(\"failed to generate unique thread ID: bitspace exhausted\");\n-            }\n-\n-            let id = COUNTER;\n-            COUNTER += 1;\n+        #[cold]\n+        fn exhausted() -> ! {\n+            panic!(\"failed to generate unique thread ID: bitspace exhausted\")\n+        }\n \n-            ThreadId(NonZeroU64::new(id).unwrap())\n+        cfg_if::cfg_if! {\n+            if #[cfg(target_has_atomic = \"64\")] {\n+                use crate::sync::atomic::{AtomicU64, Ordering::Relaxed};\n+\n+                static COUNTER: AtomicU64 = AtomicU64::new(0);\n+\n+                let mut last = COUNTER.load(Relaxed);\n+                loop {\n+                    let Some(id) = last.checked_add(1) else {\n+                        exhausted();\n+                    };\n+\n+                    match COUNTER.compare_exchange_weak(last, id, Relaxed, Relaxed) {\n+                        Ok(_) => return ThreadId(NonZeroU64::new(id).unwrap()),\n+                        Err(id) => last = id,\n+                    }\n+                }\n+            } else {\n+                use crate::sys_common::mutex::StaticMutex;\n+\n+                // It is UB to attempt to acquire this mutex reentrantly!\n+                static GUARD: StaticMutex = StaticMutex::new();\n+                static mut COUNTER: u64 = 0;\n+\n+                unsafe {\n+                    let guard = GUARD.lock();\n+\n+                    let Some(id) = COUNTER.checked_add(1) else {\n+                        drop(guard); // in case the panic handler ends up calling `ThreadId::new()`, avoid reentrant lock acquire.\n+                        exhausted();\n+                    };\n+\n+                    COUNTER = id;\n+                    drop(guard);\n+                    ThreadId(NonZeroU64::new(id).unwrap())\n+                }\n+            }\n         }\n     }\n "}]}