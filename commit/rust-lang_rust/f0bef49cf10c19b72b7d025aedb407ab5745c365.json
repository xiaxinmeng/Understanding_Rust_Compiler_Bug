{"sha": "f0bef49cf10c19b72b7d025aedb407ab5745c365", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYmVmNDljZjEwYzE5YjcyYjdkMDI1YWVkYjQwN2FiNTc0NWMzNjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-13T16:13:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-13T16:25:41Z"}, "message": "fix invalidating references in BTree iterators", "tree": {"sha": "e3dd44ac1a197af11b52b2234abcb9f1d3e2b094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3dd44ac1a197af11b52b2234abcb9f1d3e2b094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0bef49cf10c19b72b7d025aedb407ab5745c365", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0bef49cf10c19b72b7d025aedb407ab5745c365", "html_url": "https://github.com/rust-lang/rust/commit/f0bef49cf10c19b72b7d025aedb407ab5745c365", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0bef49cf10c19b72b7d025aedb407ab5745c365/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d87df696b1811dc6da6a0be1d90b4398a67eb87e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d87df696b1811dc6da6a0be1d90b4398a67eb87e", "html_url": "https://github.com/rust-lang/rust/commit/d87df696b1811dc6da6a0be1d90b4398a67eb87e"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "18fdc8ca2e418a28c4a4e88160ba07c8d83357da", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f0bef49cf10c19b72b7d025aedb407ab5745c365/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0bef49cf10c19b72b7d025aedb407ab5745c365/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=f0bef49cf10c19b72b7d025aedb407ab5745c365", "patch": "@@ -1634,9 +1634,11 @@ impl<'a, K, V> RangeMut<'a, K, V> {\n \n         let mut cur_handle = match handle.right_kv() {\n             Ok(kv) => {\n-                let (k, v) = ptr::read(&kv).into_kv_mut();\n-                self.front = kv.right_edge();\n-                return (k, v);\n+                self.front = ptr::read(&kv).right_edge();\n+                // Doing the descend invalidates the references returned by `into_kv_mut`,\n+                // so we have to do this last.\n+                let (k, v) = kv.into_kv_mut();\n+                return (k, v); // coerce k from `&mut K` to `&K`\n             }\n             Err(last_edge) => {\n                 let next_level = last_edge.into_node().ascend().ok();\n@@ -1647,9 +1649,11 @@ impl<'a, K, V> RangeMut<'a, K, V> {\n         loop {\n             match cur_handle.right_kv() {\n                 Ok(kv) => {\n-                    let (k, v) = ptr::read(&kv).into_kv_mut();\n-                    self.front = first_leaf_edge(kv.right_edge().descend());\n-                    return (k, v);\n+                    self.front = first_leaf_edge(ptr::read(&kv).right_edge().descend());\n+                    // Doing the descend invalidates the references returned by `into_kv_mut`,\n+                    // so we have to do this last.\n+                    let (k, v) = kv.into_kv_mut();\n+                    return (k, v); // coerce k from `&mut K` to `&K`\n                 }\n                 Err(last_edge) => {\n                     let next_level = last_edge.into_node().ascend().ok();\n@@ -1680,9 +1684,11 @@ impl<'a, K, V> RangeMut<'a, K, V> {\n \n         let mut cur_handle = match handle.left_kv() {\n             Ok(kv) => {\n-                let (k, v) = ptr::read(&kv).into_kv_mut();\n-                self.back = kv.left_edge();\n-                return (k, v);\n+                self.back = ptr::read(&kv).left_edge();\n+                // Doing the descend invalidates the references returned by `into_kv_mut`,\n+                // so we have to do this last.\n+                let (k, v) = kv.into_kv_mut();\n+                return (k, v); // coerce k from `&mut K` to `&K`\n             }\n             Err(last_edge) => {\n                 let next_level = last_edge.into_node().ascend().ok();\n@@ -1693,9 +1699,11 @@ impl<'a, K, V> RangeMut<'a, K, V> {\n         loop {\n             match cur_handle.left_kv() {\n                 Ok(kv) => {\n-                    let (k, v) = ptr::read(&kv).into_kv_mut();\n-                    self.back = last_leaf_edge(kv.left_edge().descend());\n-                    return (k, v);\n+                    self.back = last_leaf_edge(ptr::read(&kv).left_edge().descend());\n+                    // Doing the descend invalidates the references returned by `into_kv_mut`,\n+                    // so we have to do this last.\n+                    let (k, v) = kv.into_kv_mut();\n+                    return (k, v); // coerce k from `&mut K` to `&K`\n                 }\n                 Err(last_edge) => {\n                     let next_level = last_edge.into_node().ascend().ok();"}, {"sha": "1cdf4fdd2db20bb1091251de28ae64836c65a8f1", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0bef49cf10c19b72b7d025aedb407ab5745c365/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0bef49cf10c19b72b7d025aedb407ab5745c365/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=f0bef49cf10c19b72b7d025aedb407ab5745c365", "patch": "@@ -675,7 +675,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         // invalidates the reference returned by the first.\n         // More precisely, it is the call to `len` that is the culprit,\n         // because that creates a shared reference to the header, which *can*\n-        // overlap with the keys.\n+        // overlap with the keys (and even the values, for ZST keys).\n         unsafe {\n             let len = self.len();\n             let leaf = self.as_leaf_mut();"}]}