{"sha": "dc135cc0760f7d7c119d636f51b24142970df362", "node_id": "C_kwDOAAsO6NoAKGRjMTM1Y2MwNzYwZjdkN2MxMTlkNjM2ZjUxYjI0MTQyOTcwZGYzNjI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-06T13:56:50Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-06T13:56:50Z"}, "message": "internal: Support registered tools and attributes in ide layer", "tree": {"sha": "b9d05910f4e399c06c0fb178e0e117e5d24b187b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9d05910f4e399c06c0fb178e0e117e5d24b187b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc135cc0760f7d7c119d636f51b24142970df362", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc135cc0760f7d7c119d636f51b24142970df362", "html_url": "https://github.com/rust-lang/rust/commit/dc135cc0760f7d7c119d636f51b24142970df362", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc135cc0760f7d7c119d636f51b24142970df362/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8887d2016f2e87332e4de216aaf0b5d125e0fe11", "url": "https://api.github.com/repos/rust-lang/rust/commits/8887d2016f2e87332e4de216aaf0b5d125e0fe11", "html_url": "https://github.com/rust-lang/rust/commit/8887d2016f2e87332e4de216aaf0b5d125e0fe11"}], "stats": {"total": 95, "additions": 76, "deletions": 19}, "files": [{"sha": "ee423573d5ce6ed95f0b1e1a05b4a480d9603522", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 52, "deletions": 14, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/dc135cc0760f7d7c119d636f51b24142970df362/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc135cc0760f7d7c119d636f51b24142970df362/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=dc135cc0760f7d7c119d636f51b24142970df362", "patch": "@@ -2064,37 +2064,75 @@ impl Local {\n     }\n }\n \n+// FIXME: Wrong name? This is could also be a registered attribute\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub struct BuiltinAttr(usize);\n+pub struct BuiltinAttr {\n+    krate: Option<CrateId>,\n+    idx: usize,\n+}\n \n impl BuiltinAttr {\n-    pub(crate) fn by_name(name: &str) -> Option<Self> {\n-        // FIXME: def maps registered attrs?\n-        hir_def::builtin_attr::find_builtin_attr_idx(name).map(Self)\n+    // FIXME: consider crates\\hir_def\\src\\nameres\\attr_resolution.rs?\n+    pub(crate) fn by_name(db: &dyn HirDatabase, krate: Crate, name: &str) -> Option<Self> {\n+        if let builtin @ Some(_) = Self::builtin(name) {\n+            return builtin;\n+        }\n+        let idx = db.crate_def_map(krate.id).registered_attrs().iter().position(|it| it == name)?;\n+        Some(BuiltinAttr { krate: Some(krate.id), idx })\n+    }\n+\n+    pub(crate) fn builtin(name: &str) -> Option<Self> {\n+        hir_def::builtin_attr::INERT_ATTRIBUTES\n+            .iter()\n+            .position(|tool| tool.name == name)\n+            .map(|idx| BuiltinAttr { krate: None, idx })\n     }\n \n-    pub fn name(&self, _: &dyn HirDatabase) -> &str {\n+    pub fn name(&self, db: &dyn HirDatabase) -> SmolStr {\n         // FIXME: Return a `Name` here\n-        hir_def::builtin_attr::INERT_ATTRIBUTES[self.0].name\n+        match self.krate {\n+            Some(krate) => db.crate_def_map(krate).registered_attrs()[self.idx].clone(),\n+            None => SmolStr::new(hir_def::builtin_attr::INERT_ATTRIBUTES[self.idx].name),\n+        }\n     }\n \n-    pub fn template(&self, _: &dyn HirDatabase) -> AttributeTemplate {\n-        hir_def::builtin_attr::INERT_ATTRIBUTES[self.0].template\n+    pub fn template(&self, _: &dyn HirDatabase) -> Option<AttributeTemplate> {\n+        match self.krate {\n+            Some(_) => None,\n+            None => Some(hir_def::builtin_attr::INERT_ATTRIBUTES[self.idx].template),\n+        }\n     }\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub struct ToolModule(usize);\n+pub struct ToolModule {\n+    krate: Option<CrateId>,\n+    idx: usize,\n+}\n \n impl ToolModule {\n-    pub(crate) fn by_name(name: &str) -> Option<Self> {\n-        // FIXME: def maps registered tools\n-        hir_def::builtin_attr::TOOL_MODULES.iter().position(|&tool| tool == name).map(Self)\n+    // FIXME: consider crates\\hir_def\\src\\nameres\\attr_resolution.rs?\n+    pub(crate) fn by_name(db: &dyn HirDatabase, krate: Crate, name: &str) -> Option<Self> {\n+        if let builtin @ Some(_) = Self::builtin(name) {\n+            return builtin;\n+        }\n+        let idx = db.crate_def_map(krate.id).registered_tools().iter().position(|it| it == name)?;\n+        Some(ToolModule { krate: Some(krate.id), idx })\n     }\n \n-    pub fn name(&self, _: &dyn HirDatabase) -> &str {\n+    pub(crate) fn builtin(name: &str) -> Option<Self> {\n+        hir_def::builtin_attr::TOOL_MODULES\n+            .iter()\n+            .position(|&tool| tool == name)\n+            .map(|idx| ToolModule { krate: None, idx })\n+    }\n+\n+    pub fn name(&self, db: &dyn HirDatabase) -> SmolStr {\n         // FIXME: Return a `Name` here\n-        hir_def::builtin_attr::TOOL_MODULES[self.0]\n+        match self.krate {\n+            Some(krate) => db.crate_def_map(krate).registered_tools()[self.idx].clone(),\n+            None => SmolStr::new(hir_def::builtin_attr::TOOL_MODULES[self.idx]),\n+        }\n     }\n }\n "}, {"sha": "ef3dfa1f335d0cabcdd7a8adccfc5b05d5153536", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc135cc0760f7d7c119d636f51b24142970df362/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc135cc0760f7d7c119d636f51b24142970df362/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=dc135cc0760f7d7c119d636f51b24142970df362", "patch": "@@ -346,7 +346,11 @@ impl SourceAnalyzer {\n             return match resolve_hir_path_qualifier(db, &self.resolver, &hir_path) {\n                 None if is_path_of_attr => {\n                     path.first_segment().and_then(|it| it.name_ref()).and_then(|name_ref| {\n-                        ToolModule::by_name(&name_ref.text()).map(PathResolution::ToolModule)\n+                        match self.resolver.krate() {\n+                            Some(krate) => ToolModule::by_name(db, krate.into(), &name_ref.text()),\n+                            None => ToolModule::builtin(&name_ref.text()),\n+                        }\n+                        .map(PathResolution::ToolModule)\n                     })\n                 }\n                 res => res,\n@@ -356,8 +360,10 @@ impl SourceAnalyzer {\n             // in this case we have to check for inert/builtin attributes and tools and prioritize\n             // resolution of attributes over other namespaces\n             let name_ref = path.as_single_name_ref();\n-            let builtin =\n-                name_ref.as_ref().map(ast::NameRef::text).as_deref().and_then(BuiltinAttr::by_name);\n+            let builtin = name_ref.as_ref().and_then(|name_ref| match self.resolver.krate() {\n+                Some(krate) => BuiltinAttr::by_name(db, krate.into(), &name_ref.text()),\n+                None => BuiltinAttr::builtin(&name_ref.text()),\n+            });\n             if let builtin @ Some(_) = builtin {\n                 return builtin.map(PathResolution::BuiltinAttr);\n             }\n@@ -366,7 +372,11 @@ impl SourceAnalyzer {\n                 // this labels any path that starts with a tool module as the tool itself, this is technically wrong\n                 // but there is no benefit in differentiating these two cases for the time being\n                 _ => path.first_segment().and_then(|it| it.name_ref()).and_then(|name_ref| {\n-                    ToolModule::by_name(&name_ref.text()).map(PathResolution::ToolModule)\n+                    match self.resolver.krate() {\n+                        Some(krate) => ToolModule::by_name(db, krate.into(), &name_ref.text()),\n+                        None => ToolModule::builtin(&name_ref.text()),\n+                    }\n+                    .map(PathResolution::ToolModule)\n                 }),\n             };\n         }"}, {"sha": "64929c02b407177d28dc2233493ecf79d7421df6", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc135cc0760f7d7c119d636f51b24142970df362/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc135cc0760f7d7c119d636f51b24142970df362/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=dc135cc0760f7d7c119d636f51b24142970df362", "patch": "@@ -296,6 +296,12 @@ impl DefMap {\n     pub fn exported_proc_macros(&self) -> impl Iterator<Item = (MacroDefId, Name)> + '_ {\n         self.exported_proc_macros.iter().map(|(id, def)| (*id, def.name.clone()))\n     }\n+    pub fn registered_tools(&self) -> &[SmolStr] {\n+        &self.registered_tools\n+    }\n+    pub fn registered_attrs(&self) -> &[SmolStr] {\n+        &self.registered_attrs\n+    }\n     pub fn root(&self) -> LocalModuleId {\n         self.root\n     }"}, {"sha": "d29833a65b306ed3fe1bde8e72c6d86d6abc1add", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc135cc0760f7d7c119d636f51b24142970df362/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc135cc0760f7d7c119d636f51b24142970df362/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=dc135cc0760f7d7c119d636f51b24142970df362", "patch": "@@ -393,7 +393,10 @@ fn render_builtin_attr(db: &RootDatabase, attr: hir::BuiltinAttr) -> Option<Mark\n     let name = attr.name(db);\n     let desc = format!(\"#[{}]\", name);\n \n-    let AttributeTemplate { word, list, name_value_str } = attr.template(db);\n+    let AttributeTemplate { word, list, name_value_str } = match attr.template(db) {\n+        Some(template) => template,\n+        None => return Some(Markup::fenced_block(&attr.name(db))),\n+    };\n     let mut docs = \"Valid forms are:\".to_owned();\n     if word {\n         format_to!(docs, \"\\n - #\\\\[{}]\", name);"}]}