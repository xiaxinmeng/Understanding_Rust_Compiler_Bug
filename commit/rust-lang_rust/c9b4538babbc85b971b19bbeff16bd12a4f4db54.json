{"sha": "c9b4538babbc85b971b19bbeff16bd12a4f4db54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YjQ1MzhiYWJiYzg1Yjk3MWIxOWJiZWZmMTZiZDEyYTRmNGRiNTQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-18T11:25:32Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-19T03:09:16Z"}, "message": "str: add a function for truncating a vector of u16 at NUL.\n\nMany of the functions interacting with Windows APIs allocate a vector of\n0's and do not retrieve a length directly from the API call, and so need\nto be sure to remove the unmodified junk at the end of the vector.", "tree": {"sha": "8efb0c748d1330d1e5bfcb5c9b0c1a14ff92655b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8efb0c748d1330d1e5bfcb5c9b0c1a14ff92655b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9b4538babbc85b971b19bbeff16bd12a4f4db54", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b4538babbc85b971b19bbeff16bd12a4f4db54", "html_url": "https://github.com/rust-lang/rust/commit/c9b4538babbc85b971b19bbeff16bd12a4f4db54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9b4538babbc85b971b19bbeff16bd12a4f4db54/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f841ee1509fafdf688a3898e01560ae29ee7836", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f841ee1509fafdf688a3898e01560ae29ee7836", "html_url": "https://github.com/rust-lang/rust/commit/4f841ee1509fafdf688a3898e01560ae29ee7836"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "6d3a156a2b01a9711e0e7a71136ebfe3cbe9bf0b", "filename": "src/libnative/io/file.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4538babbc85b971b19bbeff16bd12a4f4db54/src%2Flibnative%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4538babbc85b971b19bbeff16bd12a4f4db54/src%2Flibnative%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile.rs?ref=c9b4538babbc85b971b19bbeff16bd12a4f4db54", "patch": "@@ -571,7 +571,8 @@ pub fn readdir(p: &CString) -> IoResult<~[Path]> {\n                         else {\n                             let fp_vec = vec::from_buf(\n                                 fp_buf, wcslen(fp_buf) as uint);\n-                            let fp_str = str::from_utf16(fp_vec)\n+                            let fp_trimmed = str::truncate_utf16_at_nul(fp_vec);\n+                            let fp_str = str::from_utf16(fp_trimmed)\n                                     .expect(\"rust_list_dir_wfd_fp_buf returned invalid UTF-16\");\n                             paths.push(Path::new(fp_str));\n                         }"}, {"sha": "74e2fceb6cae6d7854a93db3eb2f36a91fd3f6a5", "filename": "src/libstd/os.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4538babbc85b971b19bbeff16bd12a4f4db54/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4538babbc85b971b19bbeff16bd12a4f4db54/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=c9b4538babbc85b971b19bbeff16bd12a4f4db54", "patch": "@@ -88,7 +88,8 @@ pub fn getcwd() -> Path {\n             fail!();\n         }\n     }\n-    Path::new(str::from_utf16(buf).expect(\"GetCurrentDirectoryW returned invalid UTF-16\"))\n+    Path::new(str::from_utf16(str::truncate_utf16_at_nul(buf))\n+              .expect(\"GetCurrentDirectoryW returned invalid UTF-16\"))\n }\n \n #[cfg(windows)]\n@@ -744,7 +745,8 @@ pub fn last_os_error() -> ~str {\n                 fail!(\"[{}] FormatMessage failure\", errno());\n             }\n \n-            str::from_utf16(buf).expect(\"FormatMessageW returned invalid UTF-16\")\n+            str::from_utf16(str::truncate_utf16_at_nul(buf))\n+                .expect(\"FormatMessageW returned invalid UTF-16\")\n         }\n     }\n \n@@ -833,7 +835,9 @@ fn real_args() -> ~[~str] {\n             while *ptr.offset(len as int) != 0 { len += 1; }\n \n             // Push it onto the list.\n-            let opt_s = vec::raw::buf_as_slice(ptr, len, str::from_utf16);\n+            let opt_s = vec::raw::buf_as_slice(ptr, len, |buf| {\n+                    str::from_utf16(str::truncate_utf16_at_nul(buf))\n+                });\n             args.push(opt_s.expect(\"CommandLineToArgvW returned invalid UTF-16\"));\n         }\n     }"}, {"sha": "1f94aaaa7c413c000ca1214b9023044868211b6c", "filename": "src/libstd/str.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4538babbc85b971b19bbeff16bd12a4f4db54/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4538babbc85b971b19bbeff16bd12a4f4db54/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=c9b4538babbc85b971b19bbeff16bd12a4f4db54", "patch": "@@ -920,6 +920,32 @@ pub fn utf16_items<'a>(v: &'a [u16]) -> UTF16Items<'a> {\n     UTF16Items { iter : v.iter() }\n }\n \n+/// Return a slice of `v` ending at (and not including) the first NUL\n+/// (0).\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::str;\n+///\n+/// // \"abcd\"\n+/// let mut v = ['a' as u16, 'b' as u16, 'c' as u16, 'd' as u16];\n+/// // no NULs so no change\n+/// assert_eq!(str::truncate_utf16_at_nul(v), v.as_slice());\n+///\n+/// // \"ab\\0d\"\n+/// v[2] = 0;\n+/// assert_eq!(str::truncate_utf16_at_nul(v),\n+///            &['a' as u16, 'b' as u16]);\n+/// ```\n+pub fn truncate_utf16_at_nul<'a>(v: &'a [u16]) -> &'a [u16] {\n+    match v.iter().position(|c| *c == 0) {\n+        // don't include the 0\n+        Some(i) => v.slice_to(i),\n+        None => v\n+    }\n+}\n+\n /// Decode a UTF-16 encoded vector `v` into a string, returning `None`\n /// if `v` contains any invalid data.\n ///\n@@ -3875,6 +3901,24 @@ mod tests {\n         assert_eq!(from_utf16_lossy([0xD800, 0xd801, 0xdc8b, 0xD800]), ~\"\\uFFFD\ud801\udc8b\\uFFFD\");\n     }\n \n+    #[test]\n+    fn test_truncate_utf16_at_nul() {\n+        let v = [];\n+        assert_eq!(truncate_utf16_at_nul(v), &[]);\n+\n+        let v = [0, 2, 3];\n+        assert_eq!(truncate_utf16_at_nul(v), &[]);\n+\n+        let v = [1, 0, 3];\n+        assert_eq!(truncate_utf16_at_nul(v), &[1]);\n+\n+        let v = [1, 2, 0];\n+        assert_eq!(truncate_utf16_at_nul(v), &[1, 2]);\n+\n+        let v = [1, 2, 3];\n+        assert_eq!(truncate_utf16_at_nul(v), &[1, 2, 3]);\n+    }\n+\n     #[test]\n     fn test_char_at() {\n         let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";"}]}