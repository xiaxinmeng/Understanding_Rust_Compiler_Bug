{"sha": "5d59b4412e71298e6e44b55afbfaa9dd86aee590", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNTliNDQxMmU3MTI5OGU2ZTQ0YjU1YWZiZmFhOWRkODZhZWU1OTA=", "commit": {"author": {"name": "Anton Golov", "email": "jesyspa@gmail.com", "date": "2021-07-30T14:09:33Z"}, "committer": {"name": "Anton Golov", "email": "jesyspa@gmail.com", "date": "2021-07-30T14:26:39Z"}, "message": "Add warning when whitespace is not skipped after an escaped newline.", "tree": {"sha": "61861a3d3fa2d1f48f61b69793bf817e8e200364", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61861a3d3fa2d1f48f61b69793bf817e8e200364"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d59b4412e71298e6e44b55afbfaa9dd86aee590", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d59b4412e71298e6e44b55afbfaa9dd86aee590", "html_url": "https://github.com/rust-lang/rust/commit/5d59b4412e71298e6e44b55afbfaa9dd86aee590", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d59b4412e71298e6e44b55afbfaa9dd86aee590/comments", "author": {"login": "jesyspa", "id": 543293, "node_id": "MDQ6VXNlcjU0MzI5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/543293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesyspa", "html_url": "https://github.com/jesyspa", "followers_url": "https://api.github.com/users/jesyspa/followers", "following_url": "https://api.github.com/users/jesyspa/following{/other_user}", "gists_url": "https://api.github.com/users/jesyspa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesyspa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesyspa/subscriptions", "organizations_url": "https://api.github.com/users/jesyspa/orgs", "repos_url": "https://api.github.com/users/jesyspa/repos", "events_url": "https://api.github.com/users/jesyspa/events{/privacy}", "received_events_url": "https://api.github.com/users/jesyspa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jesyspa", "id": 543293, "node_id": "MDQ6VXNlcjU0MzI5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/543293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesyspa", "html_url": "https://github.com/jesyspa", "followers_url": "https://api.github.com/users/jesyspa/followers", "following_url": "https://api.github.com/users/jesyspa/following{/other_user}", "gists_url": "https://api.github.com/users/jesyspa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesyspa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesyspa/subscriptions", "organizations_url": "https://api.github.com/users/jesyspa/orgs", "repos_url": "https://api.github.com/users/jesyspa/repos", "events_url": "https://api.github.com/users/jesyspa/events{/privacy}", "received_events_url": "https://api.github.com/users/jesyspa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1195bea5a7b73e079fa14b37ac7e375fc77d368a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1195bea5a7b73e079fa14b37ac7e375fc77d368a", "html_url": "https://github.com/rust-lang/rust/commit/1195bea5a7b73e079fa14b37ac7e375fc77d368a"}], "stats": {"total": 83, "additions": 75, "deletions": 8}, "files": [{"sha": "9c6ad47427d21e77f4715ed17884bda80253c8a7", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5d59b4412e71298e6e44b55afbfaa9dd86aee590/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d59b4412e71298e6e44b55afbfaa9dd86aee590/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=5d59b4412e71298e6e44b55afbfaa9dd86aee590", "patch": "@@ -63,7 +63,11 @@ impl LitKind {\n                         unescape_literal(&s, Mode::Str, &mut |_, unescaped_char| {\n                             match unescaped_char {\n                                 Ok(c) => buf.push(c),\n-                                Err(_) => error = Err(LitError::LexerError),\n+                                Err(err) => {\n+                                    if err.is_fatal() {\n+                                        error = Err(LitError::LexerError);\n+                                    }\n+                                }\n                             }\n                         });\n                         error?;\n@@ -83,7 +87,11 @@ impl LitKind {\n                         unescape_literal(&s, Mode::RawStr, &mut |_, unescaped_char| {\n                             match unescaped_char {\n                                 Ok(c) => buf.push(c),\n-                                Err(_) => error = Err(LitError::LexerError),\n+                                Err(err) => {\n+                                    if err.is_fatal() {\n+                                        error = Err(LitError::LexerError);\n+                                    }\n+                                }\n                             }\n                         });\n                         error?;\n@@ -100,7 +108,11 @@ impl LitKind {\n                 unescape_byte_literal(&s, Mode::ByteStr, &mut |_, unescaped_byte| {\n                     match unescaped_byte {\n                         Ok(c) => buf.push(c),\n-                        Err(_) => error = Err(LitError::LexerError),\n+                        Err(err) => {\n+                            if err.is_fatal() {\n+                                error = Err(LitError::LexerError);\n+                            }\n+                        }\n                     }\n                 });\n                 error?;\n@@ -114,7 +126,11 @@ impl LitKind {\n                     unescape_byte_literal(&s, Mode::RawByteStr, &mut |_, unescaped_byte| {\n                         match unescaped_byte {\n                             Ok(c) => buf.push(c),\n-                            Err(_) => error = Err(LitError::LexerError),\n+                            Err(err) => {\n+                                if err.is_fatal() {\n+                                    error = Err(LitError::LexerError);\n+                                }\n+                            }\n                         }\n                     });\n                     error?;"}, {"sha": "9a96c03cd3c8086806ebcfd1ea3ee3f47395e6d1", "filename": "compiler/rustc_lexer/src/unescape.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5d59b4412e71298e6e44b55afbfaa9dd86aee590/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d59b4412e71298e6e44b55afbfaa9dd86aee590/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs?ref=5d59b4412e71298e6e44b55afbfaa9dd86aee590", "patch": "@@ -7,7 +7,7 @@ use std::str::Chars;\n #[cfg(test)]\n mod tests;\n \n-/// Errors that can occur during string unescaping.\n+/// Errors and warnings that can occur during string unescaping.\n #[derive(Debug, PartialEq, Eq)]\n pub enum EscapeError {\n     /// Expected 1 char, but 0 were found.\n@@ -56,6 +56,20 @@ pub enum EscapeError {\n     NonAsciiCharInByte,\n     /// Non-ascii character in byte string literal.\n     NonAsciiCharInByteString,\n+\n+    /// After a line ending with '\\', the next line contains whitespace\n+    /// characters that are not skipped.\n+    UnskippedWhitespaceWarning,\n+}\n+\n+impl EscapeError {\n+    /// Returns true for actual errors, as opposed to warnings.\n+    pub fn is_fatal(&self) -> bool {\n+        match self {\n+            EscapeError::UnskippedWhitespaceWarning => false,\n+            _ => true,\n+        }\n+    }\n }\n \n /// Takes a contents of a literal (without quotes) and produces a\n@@ -283,7 +297,7 @@ where\n                         // if unescaped '\\' character is followed by '\\n'.\n                         // For details see [Rust language reference]\n                         // (https://doc.rust-lang.org/reference/tokens.html#string-literals).\n-                        skip_ascii_whitespace(&mut chars);\n+                        skip_ascii_whitespace(&mut chars, start, callback);\n                         continue;\n                     }\n                     _ => scan_escape(first_char, &mut chars, mode),\n@@ -297,13 +311,25 @@ where\n         callback(start..end, unescaped_char);\n     }\n \n-    fn skip_ascii_whitespace(chars: &mut Chars<'_>) {\n+    fn skip_ascii_whitespace<F>(chars: &mut Chars<'_>, start: usize, callback: &mut F)\n+    where\n+        F: FnMut(Range<usize>, Result<char, EscapeError>),\n+    {\n         let str = chars.as_str();\n         let first_non_space = str\n             .bytes()\n             .position(|b| b != b' ' && b != b'\\t' && b != b'\\n' && b != b'\\r')\n             .unwrap_or(str.len());\n-        *chars = str[first_non_space..].chars()\n+        let tail = &str[first_non_space..];\n+        if let Some(c) = tail.chars().nth(0) {\n+            // For error reporting, we would like the span to contain the character that was not\n+            // skipped.  The +1 is necessary to account for the leading \\ that started the escape.\n+            let end = start + first_non_space + c.len_utf8() + 1;\n+            if c.is_whitespace() {\n+                callback(start..end, Err(EscapeError::UnskippedWhitespaceWarning));\n+            }\n+        }\n+        *chars = tail.chars();\n     }\n }\n "}, {"sha": "1f4dbb20f4e9896e292e44e3208146c8ab23830e", "filename": "compiler/rustc_lexer/src/unescape/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5d59b4412e71298e6e44b55afbfaa9dd86aee590/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d59b4412e71298e6e44b55afbfaa9dd86aee590/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs?ref=5d59b4412e71298e6e44b55afbfaa9dd86aee590", "patch": "@@ -98,6 +98,25 @@ fn test_unescape_char_good() {\n     check(r\"\\u{1F63b}\", '\ud83d\ude3b');\n }\n \n+#[test]\n+fn test_unescape_str_warn() {\n+    fn check(literal: &str, expected: &[(Range<usize>, Result<char, EscapeError>)]) {\n+        let mut unescaped = Vec::with_capacity(literal.len());\n+        unescape_literal(literal, Mode::Str, &mut |range, res| unescaped.push((range, res)));\n+        assert_eq!(unescaped, expected);\n+    }\n+\n+    check(\n+        \"\\\\\\n \\u{a0} x\",\n+        &[\n+            (0..5, Err(EscapeError::UnskippedWhitespaceWarning)),\n+            (3..5, Ok('\\u{a0}')),\n+            (5..6, Ok(' ')),\n+            (6..7, Ok('x')),\n+        ],\n+    );\n+}\n+\n #[test]\n fn test_unescape_str_good() {\n     fn check(literal_text: &str, expected: &str) {"}, {"sha": "1c5be61130b61a65b6af07c12f22a8a1dd8a9152", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d59b4412e71298e6e44b55afbfaa9dd86aee590/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d59b4412e71298e6e44b55afbfaa9dd86aee590/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=5d59b4412e71298e6e44b55afbfaa9dd86aee590", "patch": "@@ -253,6 +253,12 @@ pub(crate) fn emit_unescape_error(\n             let msg = \"invalid trailing slash in literal\";\n             handler.struct_span_err(span, msg).span_label(span, msg).emit();\n         }\n+        EscapeError::UnskippedWhitespaceWarning => {\n+            let (c, char_span) = last_char();\n+            let msg =\n+                format!(\"non-ASCII whitespace symbol '{}' is not skipped\", c.escape_unicode());\n+            handler.struct_span_warn(span, &msg).span_label(char_span, &msg).emit();\n+        }\n     }\n }\n "}]}