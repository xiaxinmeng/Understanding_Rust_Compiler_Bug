{"sha": "be37c3369b4a2203ace1d65d65bf6ddb5c7faa45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMzdjMzM2OWI0YTIyMDNhY2UxZDY1ZDY1YmY2ZGRiNWM3ZmFhNDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-29T21:40:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-29T21:40:42Z"}, "message": "Merge #2681\n\n2681: cargo-watcher: Resolve macro call site in more cases r=matklad a=kiljacken\n\nThis resolves the actual macro call site in a few more cases, f.x. when a macro invokes `compile_error!` (I'm looking at you `ra_hir_def::path::__path`).\n\nCo-authored-by: Emil Lauridsen <mine809@gmail.com>", "tree": {"sha": "7e1a4317b0f918e6a78995dca73851e3796c06f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e1a4317b0f918e6a78995dca73851e3796c06f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be37c3369b4a2203ace1d65d65bf6ddb5c7faa45", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeCR1aCRBK7hj4Ov3rIwAAdHIIAFW2kZR1PLN1oohqF45POoWp\nuMP54skwzsyJNvEJrakHakaw//2XX2nZIebAhoCZS0pyZL5SzjWW+4/bvEF24XtU\ntPXtgPPQvHSySFvtijGh5qQ2a4gAM9J5rgH/GIePs7XaAei0PDv+ueQ5BMs2gJHH\nmZQnq9wct6OR/P04C3sHMaDbsXpjPLNHcJ4MNRYB9rLfUhjm+im7G2mRJWj987/e\nb6J347eVxD6wAhDyEdZ/+VlhYk2JKR/TE6PeCy8Khee65KpxrYyHAHP9/WP9E/+O\n6NsEC7OSH5m4Nbu75284+IQl4AipPXSX+y+NX/yuCn5kL8Ncw4GpBlSrJ2ZpGO4=\n=a/y/\n-----END PGP SIGNATURE-----\n", "payload": "tree 7e1a4317b0f918e6a78995dca73851e3796c06f7\nparent fc77921accbcdf410ea3db6363de9fa3d833eba1\nparent bca8524fa285f3e583bea7608295c846d71c3315\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577655642 +0000\ncommitter GitHub <noreply@github.com> 1577655642 +0000\n\nMerge #2681\n\n2681: cargo-watcher: Resolve macro call site in more cases r=matklad a=kiljacken\n\nThis resolves the actual macro call site in a few more cases, f.x. when a macro invokes `compile_error!` (I'm looking at you `ra_hir_def::path::__path`).\n\nCo-authored-by: Emil Lauridsen <mine809@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be37c3369b4a2203ace1d65d65bf6ddb5c7faa45", "html_url": "https://github.com/rust-lang/rust/commit/be37c3369b4a2203ace1d65d65bf6ddb5c7faa45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be37c3369b4a2203ace1d65d65bf6ddb5c7faa45/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc77921accbcdf410ea3db6363de9fa3d833eba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc77921accbcdf410ea3db6363de9fa3d833eba1", "html_url": "https://github.com/rust-lang/rust/commit/fc77921accbcdf410ea3db6363de9fa3d833eba1"}, {"sha": "bca8524fa285f3e583bea7608295c846d71c3315", "url": "https://api.github.com/repos/rust-lang/rust/commits/bca8524fa285f3e583bea7608295c846d71c3315", "html_url": "https://github.com/rust-lang/rust/commit/bca8524fa285f3e583bea7608295c846d71c3315"}], "stats": {"total": 309, "additions": 307, "deletions": 2}, "files": [{"sha": "ac0f1d28ad791da879828e07fc180582b01d6cee", "filename": "crates/ra_cargo_watch/src/conv.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/be37c3369b4a2203ace1d65d65bf6ddb5c7faa45/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be37c3369b4a2203ace1d65d65bf6ddb5c7faa45/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs?ref=be37c3369b4a2203ace1d65d65bf6ddb5c7faa45", "patch": "@@ -50,15 +50,20 @@ fn map_macro_span_to_location(\n     None\n }\n \n-/// Converts a Rust span to a LSP location\n+/// Converts a Rust span to a LSP location, resolving macro expansion site if neccesary\n fn map_span_to_location(span: &DiagnosticSpan, workspace_root: &PathBuf) -> Location {\n-    if is_from_macro(&span.file_name) && span.expansion.is_some() {\n+    if span.expansion.is_some() {\n         let expansion = span.expansion.as_ref().unwrap();\n         if let Some(macro_range) = map_macro_span_to_location(&expansion, workspace_root) {\n             return macro_range;\n         }\n     }\n \n+    map_span_to_location_naive(span, workspace_root)\n+}\n+\n+/// Converts a Rust span to a LSP location\n+fn map_span_to_location_naive(span: &DiagnosticSpan, workspace_root: &PathBuf) -> Location {\n     let mut file_name = workspace_root.clone();\n     file_name.push(&span.file_name);\n     let uri = url_from_path_with_drive_lowercasing(file_name).unwrap();\n@@ -228,6 +233,16 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     let mut related_information = vec![];\n     let mut tags = vec![];\n \n+    // If error occurs from macro expansion, add related info pointing to\n+    // where the error originated\n+    if !is_from_macro(&primary_span.file_name) && primary_span.expansion.is_some() {\n+        let def_loc = map_span_to_location_naive(&primary_span, workspace_root);\n+        related_information.push(DiagnosticRelatedInformation {\n+            location: def_loc,\n+            message: \"Error originated from macro here\".to_string(),\n+        });\n+    }\n+\n     for secondary_span in rd.spans.iter().filter(|s| !s.is_primary) {\n         let related = map_secondary_span_to_related(secondary_span, workspace_root);\n         if let Some(related) = related {"}, {"sha": "92f7eec0570be1162e4ac1a461e502ee0b3903ba", "filename": "crates/ra_cargo_watch/src/conv/snapshots/test__snap_macro_compiler_error.snap", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/be37c3369b4a2203ace1d65d65bf6ddb5c7faa45/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_macro_compiler_error.snap", "raw_url": "https://github.com/rust-lang/rust/raw/be37c3369b4a2203ace1d65d65bf6ddb5c7faa45/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_macro_compiler_error.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Ftest__snap_macro_compiler_error.snap?ref=be37c3369b4a2203ace1d65d65bf6ddb5c7faa45", "patch": "@@ -0,0 +1,61 @@\n+---\n+source: crates/ra_cargo_watch/src/conv/test.rs\n+expression: diag\n+---\n+MappedRustDiagnostic {\n+    location: Location {\n+        uri: \"file:///test/crates/ra_hir_def/src/data.rs\",\n+        range: Range {\n+            start: Position {\n+                line: 79,\n+                character: 15,\n+            },\n+            end: Position {\n+                line: 79,\n+                character: 41,\n+            },\n+        },\n+    },\n+    diagnostic: Diagnostic {\n+        range: Range {\n+            start: Position {\n+                line: 79,\n+                character: 15,\n+            },\n+            end: Position {\n+                line: 79,\n+                character: 41,\n+            },\n+        },\n+        severity: Some(\n+            Error,\n+        ),\n+        code: None,\n+        source: Some(\n+            \"rustc\",\n+        ),\n+        message: \"Please register your known path in the path module\",\n+        related_information: Some(\n+            [\n+                DiagnosticRelatedInformation {\n+                    location: Location {\n+                        uri: \"file:///test/crates/ra_hir_def/src/path.rs\",\n+                        range: Range {\n+                            start: Position {\n+                                line: 264,\n+                                character: 8,\n+                            },\n+                            end: Position {\n+                                line: 264,\n+                                character: 76,\n+                            },\n+                        },\n+                    },\n+                    message: \"Error originated from macro here\",\n+                },\n+            ],\n+        ),\n+        tags: None,\n+    },\n+    suggested_fixes: [],\n+}"}, {"sha": "38199238880216b9b0585757855ebb749273ed4c", "filename": "crates/ra_cargo_watch/src/conv/test.rs", "status": "modified", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/be37c3369b4a2203ace1d65d65bf6ddb5c7faa45/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be37c3369b4a2203ace1d65d65bf6ddb5c7faa45/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Ftest.rs?ref=be37c3369b4a2203ace1d65d65bf6ddb5c7faa45", "patch": "@@ -698,3 +698,232 @@ fn snap_handles_macro_location() {\n     let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n     insta::assert_debug_snapshot!(diag);\n }\n+\n+#[test]\n+fn snap_macro_compiler_error() {\n+    let diag = parse_diagnostic(\n+        r##\"{\n+    \"rendered\": \"error: Please register your known path in the path module\\n   --> crates/ra_hir_def/src/path.rs:265:9\\n    |\\n265 |         compile_error!(\\\"Please register your known path in the path module\\\")\\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n    | \\n   ::: crates/ra_hir_def/src/data.rs:80:16\\n    |\\n80  |     let path = path![std::future::Future];\\n    |                -------------------------- in this macro invocation\\n\\n\",\n+    \"children\": [],\n+    \"code\": null,\n+    \"level\": \"error\",\n+    \"message\": \"Please register your known path in the path module\",\n+    \"spans\": [\n+        {\n+            \"byte_end\": 8285,\n+            \"byte_start\": 8217,\n+            \"column_end\": 77,\n+            \"column_start\": 9,\n+            \"expansion\": {\n+                \"def_site_span\": {\n+                    \"byte_end\": 8294,\n+                    \"byte_start\": 7858,\n+                    \"column_end\": 2,\n+                    \"column_start\": 1,\n+                    \"expansion\": null,\n+                    \"file_name\": \"crates/ra_hir_def/src/path.rs\",\n+                    \"is_primary\": false,\n+                    \"label\": null,\n+                    \"line_end\": 267,\n+                    \"line_start\": 254,\n+                    \"suggested_replacement\": null,\n+                    \"suggestion_applicability\": null,\n+                    \"text\": [\n+                        {\n+                            \"highlight_end\": 28,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"macro_rules! __known_path {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 37,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"    (std::iter::IntoIterator) => {};\"\n+                        },\n+                        {\n+                            \"highlight_end\": 33,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"    (std::result::Result) => {};\"\n+                        },\n+                        {\n+                            \"highlight_end\": 29,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"    (std::ops::Range) => {};\"\n+                        },\n+                        {\n+                            \"highlight_end\": 33,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"    (std::ops::RangeFrom) => {};\"\n+                        },\n+                        {\n+                            \"highlight_end\": 33,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"    (std::ops::RangeFull) => {};\"\n+                        },\n+                        {\n+                            \"highlight_end\": 31,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"    (std::ops::RangeTo) => {};\"\n+                        },\n+                        {\n+                            \"highlight_end\": 40,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"    (std::ops::RangeToInclusive) => {};\"\n+                        },\n+                        {\n+                            \"highlight_end\": 38,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"    (std::ops::RangeInclusive) => {};\"\n+                        },\n+                        {\n+                            \"highlight_end\": 27,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"    (std::ops::Try) => {};\"\n+                        },\n+                        {\n+                            \"highlight_end\": 22,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"    ($path:path) => {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 77,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"        compile_error!(\\\"Please register your known path in the path module\\\")\"\n+                        },\n+                        {\n+                            \"highlight_end\": 7,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"    };\"\n+                        },\n+                        {\n+                            \"highlight_end\": 2,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"}\"\n+                        }\n+                    ]\n+                },\n+                \"macro_decl_name\": \"$crate::__known_path!\",\n+                \"span\": {\n+                    \"byte_end\": 8427,\n+                    \"byte_start\": 8385,\n+                    \"column_end\": 51,\n+                    \"column_start\": 9,\n+                    \"expansion\": {\n+                        \"def_site_span\": {\n+                            \"byte_end\": 8611,\n+                            \"byte_start\": 8312,\n+                            \"column_end\": 2,\n+                            \"column_start\": 1,\n+                            \"expansion\": null,\n+                            \"file_name\": \"crates/ra_hir_def/src/path.rs\",\n+                            \"is_primary\": false,\n+                            \"label\": null,\n+                            \"line_end\": 277,\n+                            \"line_start\": 270,\n+                            \"suggested_replacement\": null,\n+                            \"suggestion_applicability\": null,\n+                            \"text\": [\n+                                {\n+                                    \"highlight_end\": 22,\n+                                    \"highlight_start\": 1,\n+                                    \"text\": \"macro_rules! __path {\"\n+                                },\n+                                {\n+                                    \"highlight_end\": 43,\n+                                    \"highlight_start\": 1,\n+                                    \"text\": \"    ($start:ident $(:: $seg:ident)*) => ({\"\n+                                },\n+                                {\n+                                    \"highlight_end\": 51,\n+                                    \"highlight_start\": 1,\n+                                    \"text\": \"        $crate::__known_path!($start $(:: $seg)*);\"\n+                                },\n+                                {\n+                                    \"highlight_end\": 87,\n+                                    \"highlight_start\": 1,\n+                                    \"text\": \"        $crate::path::ModPath::from_simple_segments($crate::path::PathKind::Abs, vec![\"\n+                                },\n+                                {\n+                                    \"highlight_end\": 76,\n+                                    \"highlight_start\": 1,\n+                                    \"text\": \"            $crate::path::__name![$start], $($crate::path::__name![$seg],)*\"\n+                                },\n+                                {\n+                                    \"highlight_end\": 11,\n+                                    \"highlight_start\": 1,\n+                                    \"text\": \"        ])\"\n+                                },\n+                                {\n+                                    \"highlight_end\": 8,\n+                                    \"highlight_start\": 1,\n+                                    \"text\": \"    });\"\n+                                },\n+                                {\n+                                    \"highlight_end\": 2,\n+                                    \"highlight_start\": 1,\n+                                    \"text\": \"}\"\n+                                }\n+                            ]\n+                        },\n+                        \"macro_decl_name\": \"path!\",\n+                        \"span\": {\n+                            \"byte_end\": 2966,\n+                            \"byte_start\": 2940,\n+                            \"column_end\": 42,\n+                            \"column_start\": 16,\n+                            \"expansion\": null,\n+                            \"file_name\": \"crates/ra_hir_def/src/data.rs\",\n+                            \"is_primary\": false,\n+                            \"label\": null,\n+                            \"line_end\": 80,\n+                            \"line_start\": 80,\n+                            \"suggested_replacement\": null,\n+                            \"suggestion_applicability\": null,\n+                            \"text\": [\n+                                {\n+                                    \"highlight_end\": 42,\n+                                    \"highlight_start\": 16,\n+                                    \"text\": \"    let path = path![std::future::Future];\"\n+                                }\n+                            ]\n+                        }\n+                    },\n+                    \"file_name\": \"crates/ra_hir_def/src/path.rs\",\n+                    \"is_primary\": false,\n+                    \"label\": null,\n+                    \"line_end\": 272,\n+                    \"line_start\": 272,\n+                    \"suggested_replacement\": null,\n+                    \"suggestion_applicability\": null,\n+                    \"text\": [\n+                        {\n+                            \"highlight_end\": 51,\n+                            \"highlight_start\": 9,\n+                            \"text\": \"        $crate::__known_path!($start $(:: $seg)*);\"\n+                        }\n+                    ]\n+                }\n+            },\n+            \"file_name\": \"crates/ra_hir_def/src/path.rs\",\n+            \"is_primary\": true,\n+            \"label\": null,\n+            \"line_end\": 265,\n+            \"line_start\": 265,\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"text\": [\n+                {\n+                    \"highlight_end\": 77,\n+                    \"highlight_start\": 9,\n+                    \"text\": \"        compile_error!(\\\"Please register your known path in the path module\\\")\"\n+                }\n+            ]\n+        }\n+    ]\n+}\n+        \"##,\n+    );\n+\n+    let workspace_root = PathBuf::from(\"/test/\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+    insta::assert_debug_snapshot!(diag);\n+}"}]}