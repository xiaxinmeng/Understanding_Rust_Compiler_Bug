{"sha": "857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1N2NiNGRlMjAxNjBlZDhhNDkzMWE4N2VlMTExMmFlYjhjMGQ5N2U=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-04-27T18:34:23Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-04-27T18:34:23Z"}, "message": "Make traits with GATs not object safe", "tree": {"sha": "69969d11a69e6b222faefc9af18b3321fe6d1305", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69969d11a69e6b222faefc9af18b3321fe6d1305"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "html_url": "https://github.com/rust-lang/rust/commit/857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1919b3f22706fee0b2c6ac3d42316545900b7734", "url": "https://api.github.com/repos/rust-lang/rust/commits/1919b3f22706fee0b2c6ac3d42316545900b7734", "html_url": "https://github.com/rust-lang/rust/commit/1919b3f22706fee0b2c6ac3d42316545900b7734"}], "stats": {"total": 204, "additions": 179, "deletions": 25}, "files": [{"sha": "c9b73c682098b6fd728e8c388294de4774658beb", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "patch": "@@ -670,6 +670,9 @@ pub enum ObjectSafetyViolation {\n \n     /// Associated const.\n     AssocConst(Symbol, Span),\n+\n+    /// GAT\n+    GAT(Symbol, Span),\n }\n \n impl ObjectSafetyViolation {\n@@ -715,6 +718,9 @@ impl ObjectSafetyViolation {\n                 format!(\"it contains associated `const` `{}`\", name).into()\n             }\n             ObjectSafetyViolation::AssocConst(..) => \"it contains this associated `const`\".into(),\n+            ObjectSafetyViolation::GAT(name, _) => {\n+                format!(\"it contains the generic associated type `{}`\", name).into()\n+            }\n         }\n     }\n \n@@ -773,6 +779,7 @@ impl ObjectSafetyViolation {\n                 );\n             }\n             ObjectSafetyViolation::AssocConst(name, _)\n+            | ObjectSafetyViolation::GAT(name, _)\n             | ObjectSafetyViolation::Method(name, ..) => {\n                 err.help(&format!(\"consider moving `{}` to another trait\", name));\n             }\n@@ -786,6 +793,7 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::SupertraitSelf(spans)\n             | ObjectSafetyViolation::SizedSelf(spans) => spans.clone(),\n             ObjectSafetyViolation::AssocConst(_, span)\n+            | ObjectSafetyViolation::GAT(_, span)\n             | ObjectSafetyViolation::Method(_, _, span)\n                 if *span != DUMMY_SP =>\n             {"}, {"sha": "d5e1bd3f9ea2eec0cdb652acc564b69c047f8c4a", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "patch": "@@ -132,6 +132,14 @@ fn object_safety_violations_for_trait(\n             .map(|item| ObjectSafetyViolation::AssocConst(item.ident.name, item.ident.span)),\n     );\n \n+    violations.extend(\n+        tcx.associated_items(trait_def_id)\n+            .in_definition_order()\n+            .filter(|item| item.kind == ty::AssocKind::Type)\n+            .filter(|item| !tcx.generics_of(item.def_id).params.is_empty())\n+            .map(|item| ObjectSafetyViolation::GAT(item.ident.name, item.ident.span)),\n+    );\n+\n     debug!(\n         \"object_safety_violations_for_trait(trait_def_id={:?}) = {:?}\",\n         trait_def_id, violations"}, {"sha": "e338a21b60308d43748a5a764cc92f592e33b72d", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "patch": "@@ -462,12 +462,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         for assoc_type in assoc_types {\n             if !tcx.generics_of(assoc_type).params.is_empty() {\n-                // FIXME(generic_associated_types) generate placeholders to\n-                // extend the trait substs.\n-                tcx.sess.span_fatal(\n+                tcx.sess.delay_span_bug(\n                     obligation.cause.span,\n-                    \"generic associated types in trait objects are not supported yet\",\n+                    \"GATs in trait object shouldn't have been considered\",\n                 );\n+                return Err(SelectionError::Unimplemented);\n             }\n             // This maybe belongs in wf, but that can't (doesn't) handle\n             // higher-ranked things."}, {"sha": "6527eb4750455f79dcf08c30b6fa378e78a632fa", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs?ref=857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "patch": "@@ -1,5 +1,3 @@\n-// check-pass\n-\n #![feature(generic_associated_types)]\n   //~^ WARNING: the feature `generic_associated_types` is incomplete\n #![feature(associated_type_defaults)]\n@@ -22,6 +20,7 @@ impl<T> Foo for Fooer<T> {\n }\n \n fn f(_arg : Box<dyn for<'a> Foo<A<'a> = &'a ()>>) {}\n+//~^ the trait `Foo` cannot be made into an object\n \n \n fn main() {"}, {"sha": "49dfce8b4bd380199930e3caf9bf6ad1b8e7bf65", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr?ref=857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "patch": "@@ -1,11 +1,27 @@\n warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/gat-in-trait-path.rs:3:12\n+  --> $DIR/gat-in-trait-path.rs:1:12\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n-warning: 1 warning emitted\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/gat-in-trait-path.rs:22:13\n+   |\n+LL | fn f(_arg : Box<dyn for<'a> Foo<A<'a> = &'a ()>>) {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+   = help: consider moving `A` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/gat-in-trait-path.rs:6:10\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     type A<'a> where Self: 'a;\n+   |          ^ ...because it contains the generic associated type `A`\n+\n+error: aborting due to previous error; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "6ee865072aebf8886b851674ef46720438919fc1", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs?ref=857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "patch": "@@ -1,5 +1,3 @@\n-// check-pass\n-\n #![feature(generic_associated_types)]\n   //~^ WARNING: the feature `generic_associated_types` is incomplete\n \n@@ -8,5 +6,6 @@ trait X {\n }\n \n fn _func1<'a>(_x: Box<dyn X<Y<'a>=&'a ()>>) {}\n+//~^ ERROR the trait `X` cannot be made into an object\n \n fn main() {}"}, {"sha": "65998afa7f914428f7cb8bdfd06d340ef95cc98f", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr?ref=857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "patch": "@@ -1,11 +1,27 @@\n warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-67510-pass.rs:3:12\n+  --> $DIR/issue-67510-pass.rs:1:12\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n-warning: 1 warning emitted\n+error[E0038]: the trait `X` cannot be made into an object\n+  --> $DIR/issue-67510-pass.rs:8:19\n+   |\n+LL | fn _func1<'a>(_x: Box<dyn X<Y<'a>=&'a ()>>) {}\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ `X` cannot be made into an object\n+   |\n+   = help: consider moving `Y` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-67510-pass.rs:5:10\n+   |\n+LL | trait X {\n+   |       - this trait cannot be made into an object...\n+LL |     type Y<'a>;\n+   |          ^ ...because it contains the generic associated type `Y`\n+\n+error: aborting due to previous error; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "9643c82db773257f08e6172a6fd2726303517780", "filename": "src/test/ui/generic-associated-types/issue-76535.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs?ref=857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "patch": "@@ -36,4 +36,6 @@ impl SuperTrait for SuperStruct {\n \n fn main() {\n     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n+    //~^ ERROR the trait `SuperTrait` cannot be made into an object\n+    //~^^ ERROR the trait `SuperTrait` cannot be made into an object\n }"}, {"sha": "d31560f12f0bb81af8669081e159e5a37f576bc6", "filename": "src/test/ui/generic-associated-types/issue-76535.stderr", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr?ref=857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "patch": "@@ -23,6 +23,39 @@ help: use angle brackets to add missing lifetime argument\n LL |     type SubType<'a><'a>: SubTrait;\n    |                 ^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error[E0038]: the trait `SuperTrait` cannot be made into an object\n+  --> $DIR/issue-76535.rs:38:14\n+   |\n+LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n+   |\n+   = help: consider moving `SubType` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-76535.rs:7:10\n+   |\n+LL | pub trait SuperTrait {\n+   |           ---------- this trait cannot be made into an object...\n+LL |     type SubType<'a>: SubTrait;\n+   |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n+\n+error[E0038]: the trait `SuperTrait` cannot be made into an object\n+  --> $DIR/issue-76535.rs:38:57\n+   |\n+LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n+   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n+   |\n+   = help: consider moving `SubType` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-76535.rs:7:10\n+   |\n+LL | pub trait SuperTrait {\n+   |           ---------- this trait cannot be made into an object...\n+LL |     type SubType<'a>: SubTrait;\n+   |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n+   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn SuperTrait<SubType = SubStruct<'_>>>>` for `Box<SuperStruct>`\n+   = note: required by cast to type `Box<dyn SuperTrait<SubType = SubStruct<'_>>>`\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0038, E0107.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "4e47d3c665505a48d597513201637262fda48fcb", "filename": "src/test/ui/generic-associated-types/issue-78671.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs?ref=857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "patch": "@@ -7,6 +7,7 @@ trait CollectionFamily {\n }\n fn floatify() {\n     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n+    //~^ the trait `CollectionFamily` cannot be made into an object\n }\n \n struct Family;"}, {"sha": "c9febfb59af62126ceb93b815cef6df9b55ce35a", "filename": "src/test/ui/generic-associated-types/issue-78671.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr?ref=857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "patch": "@@ -14,6 +14,22 @@ help: use angle brackets to add missing type argument\n LL |     type Member<T><T>;\n    |                ^^^\n \n-error: aborting due to previous error\n+error[E0038]: the trait `CollectionFamily` cannot be made into an object\n+  --> $DIR/issue-78671.rs:9:25\n+   |\n+LL |     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `CollectionFamily` cannot be made into an object\n+   |\n+   = help: consider moving `Member` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-78671.rs:5:10\n+   |\n+LL | trait CollectionFamily {\n+   |       ---------------- this trait cannot be made into an object...\n+LL |     type Member<T>;\n+   |          ^^^^^^ ...because it contains the generic associated type `Member`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0038, E0107.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "b2ba3c24abbe1d7cb90a545bb452173283cd8e2c", "filename": "src/test/ui/generic-associated-types/issue-79422.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs?ref=857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "patch": "@@ -42,5 +42,6 @@ impl<K, V: Default> MapLike<K, V> for Source {\n fn main() {\n     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n-    //~^^ ERROR type mismatch resolving\n+    //~^^ the trait `MapLike` cannot be made into an object\n+    //~^^ the trait `MapLike` cannot be made into an object\n }"}, {"sha": "4973ae19729acd6771b482f8086b271db27d003d", "filename": "src/test/ui/generic-associated-types/issue-79422.stderr", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr?ref=857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "patch": "@@ -14,17 +14,39 @@ help: use angle brackets to add missing lifetime argument\n LL |     type VRefCont<'a><'a>: RefCont<'a, V>;\n    |                  ^^^^\n \n-error[E0271]: type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'static> == (dyn RefCont<'_, u8> + 'static)`\n+error[E0038]: the trait `MapLike` cannot be made into an object\n+  --> $DIR/issue-79422.rs:44:12\n+   |\n+LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n+   |\n+   = help: consider moving `VRefCont` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-79422.rs:21:10\n+   |\n+LL | trait MapLike<K, V> {\n+   |       ------- this trait cannot be made into an object...\n+LL |     type VRefCont<'a>: RefCont<'a, V>;\n+   |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n+\n+error[E0038]: the trait `MapLike` cannot be made into an object\n   --> $DIR/issue-79422.rs:43:13\n    |\n LL |     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn RefCont`, found reference\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n+   |\n+   = help: consider moving `VRefCont` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-79422.rs:21:10\n    |\n-   = note: expected trait object `(dyn RefCont<'_, u8> + 'static)`\n-                 found reference `&'static u8`\n-   = note: required for the cast to the object type `dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>`\n+LL | trait MapLike<K, V> {\n+   |       ------- this trait cannot be made into an object...\n+LL |     type VRefCont<'a>: RefCont<'a, V>;\n+   |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n+   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>>` for `Box<BTreeMap<u8, u8>>`\n+   = note: required by cast to type `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0107, E0271.\n-For more information about an error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0038, E0107.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "997a550b0effb714a3cf023c7829ddc12b6ffbc4", "filename": "src/test/ui/generic-associated-types/trait-objects.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs?ref=857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "patch": "@@ -0,0 +1,16 @@\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+trait StreamingIterator {\n+    type Item<'a> where Self: 'a;\n+    fn size_hint(&self) -> (usize, Option<usize>);\n+    // Uncommenting makes `StreamingIterator` not object safe\n+//    fn next(&mut self) -> Self::Item<'_>;\n+}\n+\n+fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n+    //~^ the trait `StreamingIterator` cannot be made into an object\n+    x.size_hint().0\n+}\n+\n+fn main() {}"}, {"sha": "a8f1768ba261798e10392bae55865f0830c6fcc4", "filename": "src/test/ui/generic-associated-types/trait-objects.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/857cb4de20160ed8a4931a87ee1112aeb8c0d97e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.stderr?ref=857cb4de20160ed8a4931a87ee1112aeb8c0d97e", "patch": "@@ -0,0 +1,18 @@\n+error[E0038]: the trait `StreamingIterator` cannot be made into an object\n+  --> $DIR/trait-objects.rs:11:16\n+   |\n+LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `StreamingIterator` cannot be made into an object\n+   |\n+   = help: consider moving `Item` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/trait-objects.rs:5:10\n+   |\n+LL | trait StreamingIterator {\n+   |       ----------------- this trait cannot be made into an object...\n+LL |     type Item<'a> where Self: 'a;\n+   |          ^^^^ ...because it contains the generic associated type `Item`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}]}