{"sha": "7c34d8d6629506a596215886e5fc4bb2b04b00ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMzRkOGQ2NjI5NTA2YTU5NjIxNTg4NmU1ZmM0YmIyYjA0YjAwYWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-14T06:22:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-14T06:22:40Z"}, "message": "Auto merge of #69756 - wesleywiser:simplify_try, r=oli-obk\n\nModify SimplifyArmIdentity so it can trigger on mir-opt-level=1\n\nI also added test cases to make sure the optimization can fire on all of\nthese cases:\n\n```rust\nfn case_1(o: Option<u8>) -> Option<u8> {\n  match o {\n    Some(u) => Some(u),\n    None => None,\n  }\n}\n\nfn case2(r: Result<u8, i32>) -> Result<u8, i32> {\n  match r {\n    Ok(u) => Ok(u),\n    Err(i) => Err(i),\n  }\n}\n\nfn case3(r: Result<u8, i32>) -> Result<u8, i32> {\n  let u = r?;\n  Ok(u)\n}\n\n```\n\nWithout MIR inlining, this still does not completely optimize away the\n`?` operator because the `Try::into_result()`, `From::from()` and\n`Try::from_error()` calls still exist. This does move us a bit closer to\nthat goal though because:\n\n- We can now run the pass on mir-opt-level=1\n\n- We no longer depend on the copy propagation pass running which is\n  unlikely to stabilize anytime soon.\n\nFixes #66855", "tree": {"sha": "9a7536b7fc39a340e7bf4d9d72c7c43485321fc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a7536b7fc39a340e7bf4d9d72c7c43485321fc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c34d8d6629506a596215886e5fc4bb2b04b00ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c34d8d6629506a596215886e5fc4bb2b04b00ae", "html_url": "https://github.com/rust-lang/rust/commit/7c34d8d6629506a596215886e5fc4bb2b04b00ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c34d8d6629506a596215886e5fc4bb2b04b00ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23ffeea307c31f0c20ebb5a15d5171e0c414629d", "url": "https://api.github.com/repos/rust-lang/rust/commits/23ffeea307c31f0c20ebb5a15d5171e0c414629d", "html_url": "https://github.com/rust-lang/rust/commit/23ffeea307c31f0c20ebb5a15d5171e0c414629d"}, {"sha": "6de6d70ae0a21b779d63d885438c7214e17e7a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6de6d70ae0a21b779d63d885438c7214e17e7a6d", "html_url": "https://github.com/rust-lang/rust/commit/6de6d70ae0a21b779d63d885438c7214e17e7a6d"}], "stats": {"total": 1105, "additions": 1032, "deletions": 73}, "files": [{"sha": "7ad5baac2051d59c1461a78c7cc210861a685095", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -317,12 +317,12 @@ fn run_optimization_passes<'tcx>(\n         //   2. It creates additional possibilities for some MIR optimizations to trigger\n         // FIXME(#70073): Why is this done here and not in `post_borrowck_cleanup`?\n         &deaggregator::Deaggregator,\n+        &simplify_try::SimplifyArmIdentity,\n+        &simplify_try::SimplifyBranchSame,\n         &copy_prop::CopyPropagation,\n         &simplify_branches::SimplifyBranches::new(\"after-copy-prop\"),\n         &remove_noop_landing_pads::RemoveNoopLandingPads,\n         &simplify::SimplifyCfg::new(\"after-remove-noop-landing-pads\"),\n-        &simplify_try::SimplifyArmIdentity,\n-        &simplify_try::SimplifyBranchSame,\n         &simplify::SimplifyCfg::new(\"final\"),\n         &simplify::SimplifyLocals,\n     ];"}, {"sha": "41ffa6594418f8091a1b3b3a51d2bea01ec4e8bc", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 313, "deletions": 39, "changes": 352, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -11,17 +11,21 @@\n \n use crate::transform::{simplify, MirPass, MirSource};\n use itertools::Itertools as _;\n+use rustc_index::vec::IndexVec;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n+use std::iter::{Enumerate, Peekable};\n+use std::slice::Iter;\n \n /// Simplifies arms of form `Variant(x) => Variant(x)` to just a move.\n ///\n /// This is done by transforming basic blocks where the statements match:\n ///\n /// ```rust\n /// _LOCAL_TMP = ((_LOCAL_1 as Variant ).FIELD: TY );\n-/// ((_LOCAL_0 as Variant).FIELD: TY) = move _LOCAL_TMP;\n+/// _TMP_2 = _LOCAL_TMP;\n+/// ((_LOCAL_0 as Variant).FIELD: TY) = move _TMP_2;\n /// discriminant(_LOCAL_0) = VAR_IDX;\n /// ```\n ///\n@@ -32,50 +36,320 @@ use rustc_target::abi::VariantIdx;\n /// ```\n pub struct SimplifyArmIdentity;\n \n+#[derive(Debug)]\n+struct ArmIdentityInfo<'tcx> {\n+    /// Storage location for the variant's field\n+    local_temp_0: Local,\n+    /// Storage location holding the variant being read from\n+    local_1: Local,\n+    /// The variant field being read from\n+    vf_s0: VarField<'tcx>,\n+    /// Index of the statement which loads the variant being read\n+    get_variant_field_stmt: usize,\n+\n+    /// Tracks each assignment to a temporary of the variant's field\n+    field_tmp_assignments: Vec<(Local, Local)>,\n+\n+    /// Storage location holding the variant's field that was read from\n+    local_tmp_s1: Local,\n+    /// Storage location holding the enum that we are writing to\n+    local_0: Local,\n+    /// The variant field being written to\n+    vf_s1: VarField<'tcx>,\n+\n+    /// Storage location that the discriminant is being written to\n+    set_discr_local: Local,\n+    /// The variant being written\n+    set_discr_var_idx: VariantIdx,\n+\n+    /// Index of the statement that should be overwritten as a move\n+    stmt_to_overwrite: usize,\n+    /// SourceInfo for the new move\n+    source_info: SourceInfo,\n+\n+    /// Indices of matching Storage{Live,Dead} statements encountered.\n+    /// (StorageLive index,, StorageDead index, Local)\n+    storage_stmts: Vec<(usize, usize, Local)>,\n+\n+    /// The statements that should be removed (turned into nops)\n+    stmts_to_remove: Vec<usize>,\n+}\n+\n+fn get_arm_identity_info<'a, 'tcx>(stmts: &'a [Statement<'tcx>]) -> Option<ArmIdentityInfo<'tcx>> {\n+    // This can't possibly match unless there are at least 3 statements in the block\n+    // so fail fast on tiny blocks.\n+    if stmts.len() < 3 {\n+        return None;\n+    }\n+\n+    let mut tmp_assigns = Vec::new();\n+    let mut nop_stmts = Vec::new();\n+    let mut storage_stmts = Vec::new();\n+    let mut storage_live_stmts = Vec::new();\n+    let mut storage_dead_stmts = Vec::new();\n+\n+    type StmtIter<'a, 'tcx> = Peekable<Enumerate<Iter<'a, Statement<'tcx>>>>;\n+\n+    fn is_storage_stmt<'tcx>(stmt: &Statement<'tcx>) -> bool {\n+        matches!(stmt.kind, StatementKind::StorageLive(_) | StatementKind::StorageDead(_))\n+    }\n+\n+    /// Eats consecutive Statements which match `test`, performing the specified `action` for each.\n+    /// The iterator `stmt_iter` is not advanced if none were matched.\n+    fn try_eat<'a, 'tcx>(\n+        stmt_iter: &mut StmtIter<'a, 'tcx>,\n+        test: impl Fn(&'a Statement<'tcx>) -> bool,\n+        mut action: impl FnMut(usize, &'a Statement<'tcx>) -> (),\n+    ) {\n+        while stmt_iter.peek().map(|(_, stmt)| test(stmt)).unwrap_or(false) {\n+            let (idx, stmt) = stmt_iter.next().unwrap();\n+\n+            action(idx, stmt);\n+        }\n+    }\n+\n+    /// Eats consecutive `StorageLive` and `StorageDead` Statements.\n+    /// The iterator `stmt_iter` is not advanced if none were found.\n+    fn try_eat_storage_stmts<'a, 'tcx>(\n+        stmt_iter: &mut StmtIter<'a, 'tcx>,\n+        storage_live_stmts: &mut Vec<(usize, Local)>,\n+        storage_dead_stmts: &mut Vec<(usize, Local)>,\n+    ) {\n+        try_eat(stmt_iter, is_storage_stmt, |idx, stmt| {\n+            if let StatementKind::StorageLive(l) = stmt.kind {\n+                storage_live_stmts.push((idx, l));\n+            } else if let StatementKind::StorageDead(l) = stmt.kind {\n+                storage_dead_stmts.push((idx, l));\n+            }\n+        })\n+    }\n+\n+    fn is_tmp_storage_stmt<'tcx>(stmt: &Statement<'tcx>) -> bool {\n+        use rustc_middle::mir::StatementKind::Assign;\n+        if let Assign(box (place, Rvalue::Use(Operand::Copy(p) | Operand::Move(p)))) = &stmt.kind {\n+            place.as_local().is_some() && p.as_local().is_some()\n+        } else {\n+            false\n+        }\n+    }\n+\n+    /// Eats consecutive `Assign` Statements.\n+    // The iterator `stmt_iter` is not advanced if none were found.\n+    fn try_eat_assign_tmp_stmts<'a, 'tcx>(\n+        stmt_iter: &mut StmtIter<'a, 'tcx>,\n+        tmp_assigns: &mut Vec<(Local, Local)>,\n+        nop_stmts: &mut Vec<usize>,\n+    ) {\n+        try_eat(stmt_iter, is_tmp_storage_stmt, |idx, stmt| {\n+            use rustc_middle::mir::StatementKind::Assign;\n+            if let Assign(box (place, Rvalue::Use(Operand::Copy(p) | Operand::Move(p)))) =\n+                &stmt.kind\n+            {\n+                tmp_assigns.push((place.as_local().unwrap(), p.as_local().unwrap()));\n+                nop_stmts.push(idx);\n+            }\n+        })\n+    }\n+\n+    fn find_storage_live_dead_stmts_for_local<'tcx>(\n+        local: Local,\n+        stmts: &[Statement<'tcx>],\n+    ) -> Option<(usize, usize)> {\n+        trace!(\"looking for {:?}\", local);\n+        let mut storage_live_stmt = None;\n+        let mut storage_dead_stmt = None;\n+        for (idx, stmt) in stmts.iter().enumerate() {\n+            if stmt.kind == StatementKind::StorageLive(local) {\n+                storage_live_stmt = Some(idx);\n+            } else if stmt.kind == StatementKind::StorageDead(local) {\n+                storage_dead_stmt = Some(idx);\n+            }\n+        }\n+\n+        Some((storage_live_stmt?, storage_dead_stmt.unwrap_or(usize::MAX)))\n+    }\n+\n+    // Try to match the expected MIR structure with the basic block we're processing.\n+    // We want to see something that looks like:\n+    // ```\n+    // (StorageLive(_) | StorageDead(_));*\n+    // _LOCAL_INTO = ((_LOCAL_FROM as Variant).FIELD: TY);\n+    // (StorageLive(_) | StorageDead(_));*\n+    // (tmp_n+1 = tmp_n);*\n+    // (StorageLive(_) | StorageDead(_));*\n+    // (tmp_n+1 = tmp_n);*\n+    // ((LOCAL_FROM as Variant).FIELD: TY) = move tmp;\n+    // discriminant(LOCAL_FROM) = VariantIdx;\n+    // (StorageLive(_) | StorageDead(_));*\n+    // ```\n+    let mut stmt_iter = stmts.iter().enumerate().peekable();\n+\n+    try_eat_storage_stmts(&mut stmt_iter, &mut storage_live_stmts, &mut storage_dead_stmts);\n+\n+    let (get_variant_field_stmt, stmt) = stmt_iter.next()?;\n+    let (local_tmp_s0, local_1, vf_s0) = match_get_variant_field(stmt)?;\n+\n+    try_eat_storage_stmts(&mut stmt_iter, &mut storage_live_stmts, &mut storage_dead_stmts);\n+\n+    try_eat_assign_tmp_stmts(&mut stmt_iter, &mut tmp_assigns, &mut nop_stmts);\n+\n+    try_eat_storage_stmts(&mut stmt_iter, &mut storage_live_stmts, &mut storage_dead_stmts);\n+\n+    try_eat_assign_tmp_stmts(&mut stmt_iter, &mut tmp_assigns, &mut nop_stmts);\n+\n+    let (idx, stmt) = stmt_iter.next()?;\n+    let (local_tmp_s1, local_0, vf_s1) = match_set_variant_field(stmt)?;\n+    nop_stmts.push(idx);\n+\n+    let (idx, stmt) = stmt_iter.next()?;\n+    let (set_discr_local, set_discr_var_idx) = match_set_discr(stmt)?;\n+    let discr_stmt_source_info = stmt.source_info;\n+    nop_stmts.push(idx);\n+\n+    try_eat_storage_stmts(&mut stmt_iter, &mut storage_live_stmts, &mut storage_dead_stmts);\n+\n+    for (live_idx, live_local) in storage_live_stmts {\n+        if let Some(i) = storage_dead_stmts.iter().rposition(|(_, l)| *l == live_local) {\n+            let (dead_idx, _) = storage_dead_stmts.swap_remove(i);\n+            storage_stmts.push((live_idx, dead_idx, live_local));\n+\n+            if live_local == local_tmp_s0 {\n+                nop_stmts.push(get_variant_field_stmt);\n+            }\n+        }\n+    }\n+\n+    nop_stmts.sort();\n+\n+    // Use one of the statements we're going to discard between the point\n+    // where the storage location for the variant field becomes live and\n+    // is killed.\n+    let (live_idx, dead_idx) = find_storage_live_dead_stmts_for_local(local_tmp_s0, stmts)?;\n+    let stmt_to_overwrite =\n+        nop_stmts.iter().find(|stmt_idx| live_idx < **stmt_idx && **stmt_idx < dead_idx);\n+\n+    Some(ArmIdentityInfo {\n+        local_temp_0: local_tmp_s0,\n+        local_1,\n+        vf_s0,\n+        get_variant_field_stmt,\n+        field_tmp_assignments: tmp_assigns,\n+        local_tmp_s1,\n+        local_0,\n+        vf_s1,\n+        set_discr_local,\n+        set_discr_var_idx,\n+        stmt_to_overwrite: *stmt_to_overwrite?,\n+        source_info: discr_stmt_source_info,\n+        storage_stmts,\n+        stmts_to_remove: nop_stmts,\n+    })\n+}\n+\n+fn optimization_applies<'tcx>(\n+    opt_info: &ArmIdentityInfo<'tcx>,\n+    local_decls: &IndexVec<Local, LocalDecl<'tcx>>,\n+) -> bool {\n+    trace!(\"testing if optimization applies...\");\n+\n+    // FIXME(wesleywiser): possibly relax this restriction?\n+    if opt_info.local_0 == opt_info.local_1 {\n+        trace!(\"NO: moving into ourselves\");\n+        return false;\n+    } else if opt_info.vf_s0 != opt_info.vf_s1 {\n+        trace!(\"NO: the field-and-variant information do not match\");\n+        return false;\n+    } else if local_decls[opt_info.local_0].ty != local_decls[opt_info.local_1].ty {\n+        // FIXME(Centril,oli-obk): possibly relax to same layout?\n+        trace!(\"NO: source and target locals have different types\");\n+        return false;\n+    } else if (opt_info.local_0, opt_info.vf_s0.var_idx)\n+        != (opt_info.set_discr_local, opt_info.set_discr_var_idx)\n+    {\n+        trace!(\"NO: the discriminants do not match\");\n+        return false;\n+    }\n+\n+    // Verify the assigment chain consists of the form b = a; c = b; d = c; etc...\n+    if opt_info.field_tmp_assignments.len() == 0 {\n+        trace!(\"NO: no assignments found\");\n+    }\n+    let mut last_assigned_to = opt_info.field_tmp_assignments[0].1;\n+    let source_local = last_assigned_to;\n+    for (l, r) in &opt_info.field_tmp_assignments {\n+        if *r != last_assigned_to {\n+            trace!(\"NO: found unexpected assignment {:?} = {:?}\", l, r);\n+            return false;\n+        }\n+\n+        last_assigned_to = *l;\n+    }\n+\n+    if source_local != opt_info.local_temp_0 {\n+        trace!(\n+            \"NO: start of assignment chain does not match enum variant temp: {:?} != {:?}\",\n+            source_local,\n+            opt_info.local_temp_0\n+        );\n+        return false;\n+    } else if last_assigned_to != opt_info.local_tmp_s1 {\n+        trace!(\n+            \"NO: end of assignemnt chain does not match written enum temp: {:?} != {:?}\",\n+            last_assigned_to,\n+            opt_info.local_tmp_s1\n+        );\n+        return false;\n+    }\n+\n+    trace!(\"SUCCESS: optimization applies!\");\n+    return true;\n+}\n+\n impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n-    fn run_pass(&self, _: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+    fn run_pass(&self, _: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        trace!(\"running SimplifyArmIdentity on {:?}\", source);\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n         for bb in basic_blocks {\n-            // Need 3 statements:\n-            let (s0, s1, s2) = match &mut *bb.statements {\n-                [s0, s1, s2] => (s0, s1, s2),\n-                _ => continue,\n-            };\n+            if let Some(opt_info) = get_arm_identity_info(&bb.statements) {\n+                trace!(\"got opt_info = {:#?}\", opt_info);\n+                if !optimization_applies(&opt_info, local_decls) {\n+                    debug!(\"optimization skipped for {:?}\", source);\n+                    continue;\n+                }\n \n-            // Pattern match on the form we want:\n-            let (local_tmp_s0, local_1, vf_s0) = match match_get_variant_field(s0) {\n-                None => continue,\n-                Some(x) => x,\n-            };\n-            let (local_tmp_s1, local_0, vf_s1) = match match_set_variant_field(s1) {\n-                None => continue,\n-                Some(x) => x,\n-            };\n-            if local_tmp_s0 != local_tmp_s1\n-                // Avoid moving into ourselves.\n-                || local_0 == local_1\n-                // The field-and-variant information match up.\n-                || vf_s0 != vf_s1\n-                // Source and target locals have the same type.\n-                // FIXME(Centril | oli-obk): possibly relax to same layout?\n-                || local_decls[local_0].ty != local_decls[local_1].ty\n-                // We're setting the discriminant of `local_0` to this variant.\n-                || Some((local_0, vf_s0.var_idx)) != match_set_discr(s2)\n-            {\n-                continue;\n-            }\n+                // Also remove unused Storage{Live,Dead} statements which correspond\n+                // to temps used previously.\n+                for (live_idx, dead_idx, local) in &opt_info.storage_stmts {\n+                    // The temporary that we've read the variant field into is scoped to this block,\n+                    // so we can remove the assignment.\n+                    if *local == opt_info.local_temp_0 {\n+                        bb.statements[opt_info.get_variant_field_stmt].make_nop();\n+                    }\n \n-            // Right shape; transform!\n-            s0.source_info = s2.source_info;\n-            match &mut s0.kind {\n-                StatementKind::Assign(box (place, rvalue)) => {\n-                    *place = local_0.into();\n-                    *rvalue = Rvalue::Use(Operand::Move(local_1.into()));\n+                    for (left, right) in &opt_info.field_tmp_assignments {\n+                        if local == left || local == right {\n+                            bb.statements[*live_idx].make_nop();\n+                            bb.statements[*dead_idx].make_nop();\n+                        }\n+                    }\n                 }\n-                _ => unreachable!(),\n+\n+                // Right shape; transform\n+                for stmt_idx in opt_info.stmts_to_remove {\n+                    bb.statements[stmt_idx].make_nop();\n+                }\n+\n+                let stmt = &mut bb.statements[opt_info.stmt_to_overwrite];\n+                stmt.source_info = opt_info.source_info;\n+                stmt.kind = StatementKind::Assign(box (\n+                    opt_info.local_0.into(),\n+                    Rvalue::Use(Operand::Move(opt_info.local_1.into())),\n+                ));\n+\n+                bb.statements.retain(|stmt| stmt.kind != StatementKind::Nop);\n+\n+                trace!(\"block is now {:?}\", bb.statements);\n             }\n-            s1.make_nop();\n-            s2.make_nop();\n         }\n     }\n }\n@@ -129,7 +403,7 @@ fn match_set_discr<'tcx>(stmt: &Statement<'tcx>) -> Option<(Local, VariantIdx)>\n     }\n }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Debug)]\n struct VarField<'tcx> {\n     field: Field,\n     field_ty: Ty<'tcx>,"}, {"sha": "6199e2c56625df1718ee1aab101577feb19c7197", "filename": "src/test/mir-opt/simplify-arm-identity/32bit/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F32bit%2Frustc.main.SimplifyArmIdentity.diff?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -35,9 +35,38 @@\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-arm-identity.rs:20:9: 20:20\n                                            // + literal: Const { ty: isize, val: Value(Scalar(0x00000000)) }\n+          goto -> bb3;                     // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n+      }\n+  \n+      bb1: {\n+          ((_2 as Foo).0: u8) = const 0u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm-identity.rs:21:30: 21:31\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n+      }\n+  \n+      bb2: {\n+          unreachable;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:24: 19:25\n+      }\n+  \n+      bb3: {\n+          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm-identity.rs:20:18: 20:19\n           _4 = ((_1 as Foo).0: u8);        // scope 1 at $DIR/simplify-arm-identity.rs:20:18: 20:19\n-          ((_2 as Foo).0: u8) = move _4;   // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n+          StorageLive(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:20:33: 20:34\n+          _5 = _4;                         // scope 3 at $DIR/simplify-arm-identity.rs:20:33: 20:34\n+          ((_2 as Foo).0: u8) = move _5;   // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           discriminant(_2) = 0;            // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n+          StorageDead(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:20:34: 20:35\n+          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm-identity.rs:20:35: 20:36\n+          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n+      }\n+  \n+      bb4: {\n           StorageDead(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:22:6: 22:7\n           _0 = const ();                   // scope 0 at $DIR/simplify-arm-identity.rs:17:11: 23:2\n                                            // ty::Const"}, {"sha": "bf875c6a555fe3d2f6241d7e63a8c0fd867e2453", "filename": "src/test/mir-opt/simplify-arm-identity/64bit/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F64bit%2Frustc.main.SimplifyArmIdentity.diff?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -35,9 +35,38 @@\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-arm-identity.rs:20:9: 20:20\n                                            // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000000)) }\n+          goto -> bb3;                     // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n+      }\n+  \n+      bb1: {\n+          ((_2 as Foo).0: u8) = const 0u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm-identity.rs:21:30: 21:31\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n+      }\n+  \n+      bb2: {\n+          unreachable;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:24: 19:25\n+      }\n+  \n+      bb3: {\n+          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm-identity.rs:20:18: 20:19\n           _4 = ((_1 as Foo).0: u8);        // scope 1 at $DIR/simplify-arm-identity.rs:20:18: 20:19\n-          ((_2 as Foo).0: u8) = move _4;   // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n+          StorageLive(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:20:33: 20:34\n+          _5 = _4;                         // scope 3 at $DIR/simplify-arm-identity.rs:20:33: 20:34\n+          ((_2 as Foo).0: u8) = move _5;   // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           discriminant(_2) = 0;            // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n+          StorageDead(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:20:34: 20:35\n+          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm-identity.rs:20:35: 20:36\n+          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n+      }\n+  \n+      bb4: {\n           StorageDead(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:22:6: 22:7\n           _0 = const ();                   // scope 0 at $DIR/simplify-arm-identity.rs:17:11: 23:2\n                                            // ty::Const"}, {"sha": "0e3f86501bb44a2cc08ec0fa830b2a607b098245", "filename": "src/test/mir-opt/simplify-arm.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -0,0 +1,32 @@\n+// compile-flags: -Z mir-opt-level=1\n+// EMIT_MIR rustc.id.SimplifyArmIdentity.diff\n+// EMIT_MIR rustc.id.SimplifyBranchSame.diff\n+// EMIT_MIR rustc.id_result.SimplifyArmIdentity.diff\n+// EMIT_MIR rustc.id_result.SimplifyBranchSame.diff\n+// EMIT_MIR rustc.id_try.SimplifyArmIdentity.diff\n+// EMIT_MIR rustc.id_try.SimplifyBranchSame.diff\n+\n+fn id(o: Option<u8>) -> Option<u8> {\n+    match o {\n+        Some(v) => Some(v),\n+        None => None,\n+    }\n+}\n+\n+fn id_result(r: Result<u8, i32>) -> Result<u8, i32> {\n+    match r {\n+        Ok(x) => Ok(x),\n+        Err(y) => Err(y),\n+    }\n+}\n+\n+fn id_try(r: Result<u8, i32>) -> Result<u8, i32> {\n+    let x = r?;\n+    Ok(x)\n+}\n+\n+fn main() {\n+    id(None);\n+    id_result(Ok(4));\n+    id_try(Ok(4));\n+}"}, {"sha": "8d08267d75bfddc862cf8dd6c9df844bcaf709c7", "filename": "src/test/mir-opt/simplify-arm/rustc.id.SimplifyArmIdentity.diff", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id.SimplifyArmIdentity.diff?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -0,0 +1,45 @@\n+- // MIR for `id` before SimplifyArmIdentity\n++ // MIR for `id` after SimplifyArmIdentity\n+  \n+  fn id(_1: std::option::Option<u8>) -> std::option::Option<u8> {\n+      debug o => _1;                       // in scope 0 at $DIR/simplify-arm.rs:9:7: 9:8\n+      let mut _0: std::option::Option<u8>; // return place in scope 0 at $DIR/simplify-arm.rs:9:25: 9:35\n+      let mut _2: isize;                   // in scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n+      let _3: u8;                          // in scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n+      let mut _4: u8;                      // in scope 0 at $DIR/simplify-arm.rs:11:25: 11:26\n+      scope 1 {\n+          debug v => _3;                   // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n+      }\n+  \n+      bb0: {\n+          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n+          switchInt(move _2) -> [0isize: bb1, 1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n+      }\n+  \n+      bb1: {\n+          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 13:6\n+      }\n+  \n+      bb2: {\n+          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:10:11: 10:12\n+      }\n+  \n+      bb3: {\n+-         StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n+-         _3 = ((_1 as Some).0: u8);       // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n+-         StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n+-         _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n+-         ((_0 as Some).0: u8) = move _4;  // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+-         discriminant(_0) = 1;            // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+-         StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:26: 11:27\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:27: 11:28\n++         _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 13:6\n+      }\n+  \n+      bb4: {\n+          return;                          // scope 0 at $DIR/simplify-arm.rs:14:2: 14:2\n+      }\n+  }\n+  "}, {"sha": "23fa9817f80f6b7eca7a83d0f56d1c6d53a0647d", "filename": "src/test/mir-opt/simplify-arm/rustc.id.SimplifyBranchSame.diff", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id.SimplifyBranchSame.diff?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -0,0 +1,37 @@\n+- // MIR for `id` before SimplifyBranchSame\n++ // MIR for `id` after SimplifyBranchSame\n+  \n+  fn id(_1: std::option::Option<u8>) -> std::option::Option<u8> {\n+      debug o => _1;                       // in scope 0 at $DIR/simplify-arm.rs:9:7: 9:8\n+      let mut _0: std::option::Option<u8>; // return place in scope 0 at $DIR/simplify-arm.rs:9:25: 9:35\n+      let mut _2: isize;                   // in scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n+      let _3: u8;                          // in scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n+      let mut _4: u8;                      // in scope 0 at $DIR/simplify-arm.rs:11:25: 11:26\n+      scope 1 {\n+          debug v => _3;                   // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n+      }\n+  \n+      bb0: {\n+          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n+          switchInt(move _2) -> [0isize: bb1, 1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n+      }\n+  \n+      bb1: {\n+          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 13:6\n+      }\n+  \n+      bb2: {\n+          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:10:11: 10:12\n+      }\n+  \n+      bb3: {\n+          _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 13:6\n+      }\n+  \n+      bb4: {\n+          return;                          // scope 0 at $DIR/simplify-arm.rs:14:2: 14:2\n+      }\n+  }\n+  "}, {"sha": "e2a12ca5be26c5c8ce41821b1665db13b44aac49", "filename": "src/test/mir-opt/simplify-arm/rustc.id_result.SimplifyArmIdentity.diff", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_result.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_result.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_result.SimplifyArmIdentity.diff?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -0,0 +1,58 @@\n+- // MIR for `id_result` before SimplifyArmIdentity\n++ // MIR for `id_result` after SimplifyArmIdentity\n+  \n+  fn id_result(_1: std::result::Result<u8, i32>) -> std::result::Result<u8, i32> {\n+      debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:16:14: 16:15\n+      let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:16:37: 16:52\n+      let mut _2: isize;                   // in scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n+      let _3: u8;                          // in scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n+      let mut _4: u8;                      // in scope 0 at $DIR/simplify-arm.rs:18:21: 18:22\n+      let _5: i32;                         // in scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n+      let mut _6: i32;                     // in scope 0 at $DIR/simplify-arm.rs:19:23: 19:24\n+      scope 1 {\n+          debug x => _3;                   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n+      }\n+      scope 2 {\n+          debug y => _5;                   // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n+      }\n+  \n+      bb0: {\n+          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n+          switchInt(move _2) -> [0isize: bb3, 1isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n+-         _5 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n+-         StorageLive(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n+-         _6 = _5;                         // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n+-         ((_0 as Err).0: i32) = move _6;  // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+-         discriminant(_0) = 1;            // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+-         StorageDead(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:24: 19:25\n+-         StorageDead(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:25: 19:26\n++         _0 = move _1;                    // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n+      }\n+  \n+      bb2: {\n+          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:17:11: 17:12\n+      }\n+  \n+      bb3: {\n+-         StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n+-         _3 = ((_1 as Ok).0: u8);         // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n+-         StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n+-         _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n+-         ((_0 as Ok).0: u8) = move _4;    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+-         discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+-         StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:22: 18:23\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:23: 18:24\n++         _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n+      }\n+  \n+      bb4: {\n+          return;                          // scope 0 at $DIR/simplify-arm.rs:21:2: 21:2\n+      }\n+  }\n+  "}, {"sha": "9d1ff22dc510999d521aac4275c9d72dd8e1e3e9", "filename": "src/test/mir-opt/simplify-arm/rustc.id_result.SimplifyBranchSame.diff", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_result.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_result.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_result.SimplifyBranchSame.diff?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -0,0 +1,45 @@\n+- // MIR for `id_result` before SimplifyBranchSame\n++ // MIR for `id_result` after SimplifyBranchSame\n+  \n+  fn id_result(_1: std::result::Result<u8, i32>) -> std::result::Result<u8, i32> {\n+      debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:16:14: 16:15\n+      let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:16:37: 16:52\n+      let mut _2: isize;                   // in scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n+      let _3: u8;                          // in scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n+      let mut _4: u8;                      // in scope 0 at $DIR/simplify-arm.rs:18:21: 18:22\n+      let _5: i32;                         // in scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n+      let mut _6: i32;                     // in scope 0 at $DIR/simplify-arm.rs:19:23: 19:24\n+      scope 1 {\n+          debug x => _3;                   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n+      }\n+      scope 2 {\n+          debug y => _5;                   // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n+      }\n+  \n+      bb0: {\n+          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n+-         switchInt(move _2) -> [0isize: bb3, 1isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n++         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n+      }\n+  \n+      bb1: {\n+-         _0 = move _1;                    // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n+-     }\n+- \n+-     bb2: {\n+-         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:17:11: 17:12\n+-     }\n+- \n+-     bb3: {\n+          _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n++         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n+      }\n+  \n+-     bb4: {\n++     bb2: {\n+          return;                          // scope 0 at $DIR/simplify-arm.rs:21:2: 21:2\n+      }\n+  }\n+  "}, {"sha": "ba6e1ac24cb4ed2339bc926d94bba84eecaf488c", "filename": "src/test/mir-opt/simplify-arm/rustc.id_try.SimplifyArmIdentity.diff", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyArmIdentity.diff?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -0,0 +1,109 @@\n+- // MIR for `id_try` before SimplifyArmIdentity\n++ // MIR for `id_try` after SimplifyArmIdentity\n+  \n+  fn id_try(_1: std::result::Result<u8, i32>) -> std::result::Result<u8, i32> {\n+      debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:23:11: 23:12\n+      let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:23:34: 23:49\n+      let _2: u8;                          // in scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n+      let mut _3: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+      let mut _4: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+      let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+      let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:25:8: 25:9\n+      scope 1 {\n+          debug x => _2;                   // in scope 1 at $DIR/simplify-arm.rs:24:9: 24:10\n+      }\n+      scope 2 {\n+          debug err => _6;                 // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n+          scope 3 {\n+          }\n+      }\n+      scope 4 {\n+          debug val => _10;                // in scope 4 at $DIR/simplify-arm.rs:24:13: 24:15\n+          scope 5 {\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+          StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n+          _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n+          _3 = const <std::result::Result<u8, i32> as std::ops::Try>::into_result(move _4) -> bb1; // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+                                           // ty::Const\n+                                           // + ty: fn(std::result::Result<u8, i32>) -> std::result::Result<<std::result::Result<u8, i32> as std::ops::Try>::Ok, <std::result::Result<u8, i32> as std::ops::Try>::Error> {<std::result::Result<u8, i32> as std::ops::Try>::into_result}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm.rs:24:13: 24:15\n+                                           // + literal: Const { ty: fn(std::result::Result<u8, i32>) -> std::result::Result<<std::result::Result<u8, i32> as std::ops::Try>::Ok, <std::result::Result<u8, i32> as std::ops::Try>::Error> {<std::result::Result<u8, i32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          switchInt(move _5) -> [0isize: bb2, 1isize: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+      }\n+  \n+      bb2: {\n+-         StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+-         _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+-         _2 = _10;                        // scope 5 at $DIR/simplify-arm.rs:24:13: 24:15\n+-         StorageDead(_10);                // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n++         _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n+-         StorageLive(_11);                // scope 1 at $DIR/simplify-arm.rs:25:8: 25:9\n+-         _11 = _2;                        // scope 1 at $DIR/simplify-arm.rs:25:8: 25:9\n+-         ((_0 as Ok).0: u8) = move _11;   // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n+-         discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n+-         StorageDead(_11);                // scope 1 at $DIR/simplify-arm.rs:25:9: 25:10\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n+          goto -> bb7;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+      }\n+  \n+      bb3: {\n+          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+      }\n+  \n+      bb4: {\n+          StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          StorageLive(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+          StorageLive(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+          _9 = _6;                         // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+          _8 = const <i32 as std::convert::From<i32>>::from(move _9) -> bb5; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+                                           // ty::Const\n+                                           // + ty: fn(i32) -> i32 {<i32 as std::convert::From<i32>>::from}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm.rs:24:14: 24:15\n+                                           // + literal: Const { ty: fn(i32) -> i32 {<i32 as std::convert::From<i32>>::from}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+          _0 = const <std::result::Result<u8, i32> as std::ops::Try>::from_error(move _8) -> bb6; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+                                           // ty::Const\n+                                           // + ty: fn(<std::result::Result<u8, i32> as std::ops::Try>::Error) -> std::result::Result<u8, i32> {<std::result::Result<u8, i32> as std::ops::Try>::from_error}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm.rs:24:13: 24:15\n+                                           // + literal: Const { ty: fn(<std::result::Result<u8, i32> as std::ops::Try>::Error) -> std::result::Result<u8, i32> {<std::result::Result<u8, i32> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb6: {\n+          StorageDead(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+          StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n+          goto -> bb7;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+      }\n+  \n+      bb7: {\n+          return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+      }\n+  }\n+  "}, {"sha": "4061c5e74ac616631a449e002bba6d13eacc3886", "filename": "src/test/mir-opt/simplify-arm/rustc.id_try.SimplifyBranchSame.diff", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyBranchSame.diff?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -0,0 +1,100 @@\n+- // MIR for `id_try` before SimplifyBranchSame\n++ // MIR for `id_try` after SimplifyBranchSame\n+  \n+  fn id_try(_1: std::result::Result<u8, i32>) -> std::result::Result<u8, i32> {\n+      debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:23:11: 23:12\n+      let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:23:34: 23:49\n+      let _2: u8;                          // in scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n+      let mut _3: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+      let mut _4: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+      let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+      let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:25:8: 25:9\n+      scope 1 {\n+          debug x => _2;                   // in scope 1 at $DIR/simplify-arm.rs:24:9: 24:10\n+      }\n+      scope 2 {\n+          debug err => _6;                 // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n+          scope 3 {\n+          }\n+      }\n+      scope 4 {\n+          debug val => _10;                // in scope 4 at $DIR/simplify-arm.rs:24:13: 24:15\n+          scope 5 {\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+          StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n+          _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n+          _3 = const <std::result::Result<u8, i32> as std::ops::Try>::into_result(move _4) -> bb1; // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+                                           // ty::Const\n+                                           // + ty: fn(std::result::Result<u8, i32>) -> std::result::Result<<std::result::Result<u8, i32> as std::ops::Try>::Ok, <std::result::Result<u8, i32> as std::ops::Try>::Error> {<std::result::Result<u8, i32> as std::ops::Try>::into_result}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm.rs:24:13: 24:15\n+                                           // + literal: Const { ty: fn(std::result::Result<u8, i32>) -> std::result::Result<<std::result::Result<u8, i32> as std::ops::Try>::Ok, <std::result::Result<u8, i32> as std::ops::Try>::Error> {<std::result::Result<u8, i32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          switchInt(move _5) -> [0isize: bb2, 1isize: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+      }\n+  \n+      bb2: {\n+          _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n+          goto -> bb7;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+      }\n+  \n+      bb3: {\n+          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+      }\n+  \n+      bb4: {\n+          StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          StorageLive(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+          StorageLive(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+          _9 = _6;                         // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+          _8 = const <i32 as std::convert::From<i32>>::from(move _9) -> bb5; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+                                           // ty::Const\n+                                           // + ty: fn(i32) -> i32 {<i32 as std::convert::From<i32>>::from}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm.rs:24:14: 24:15\n+                                           // + literal: Const { ty: fn(i32) -> i32 {<i32 as std::convert::From<i32>>::from}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+          _0 = const <std::result::Result<u8, i32> as std::ops::Try>::from_error(move _8) -> bb6; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+                                           // ty::Const\n+                                           // + ty: fn(<std::result::Result<u8, i32> as std::ops::Try>::Error) -> std::result::Result<u8, i32> {<std::result::Result<u8, i32> as std::ops::Try>::from_error}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm.rs:24:13: 24:15\n+                                           // + literal: Const { ty: fn(<std::result::Result<u8, i32> as std::ops::Try>::Error) -> std::result::Result<u8, i32> {<std::result::Result<u8, i32> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb6: {\n+          StorageDead(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+          StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n+          goto -> bb7;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+      }\n+  \n+      bb7: {\n+          return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+      }\n+  }\n+  "}, {"sha": "58c5313909f6baa97f5d4417a70210a6c05c5089", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -15,16 +15,16 @@\n       let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n       let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:7:8: 7:9\n       scope 1 {\n-          debug y => _10;                  // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+          debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n       }\n       scope 2 {\n           debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n           scope 3 {\n               scope 7 {\n-                  debug t => _6;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+                  debug t => _9;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n               }\n               scope 8 {\n-                  debug v => _6;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+                  debug v => _8;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n                   let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:6:14: 6:15\n               }\n           }\n@@ -35,31 +35,54 @@\n           }\n       }\n       scope 6 {\n-          debug self => _1;                // in scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n+          debug self => _4;                // in scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n       }\n   \n       bb0: {\n-          _5 = discriminant(_1);           // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:6:9: 6:10\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+          StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:6:13: 6:14\n+          _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:6:13: 6:14\n+          _3 = move _4;                    // scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n+          StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n           switchInt(move _5) -> [0isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n       }\n   \n       bb1: {\n--         _10 = ((_1 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n--         ((_0 as Ok).0: u32) = move _10;  // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+-         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+-         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+-         _2 = _10;                        // scope 5 at $DIR/simplify_try.rs:6:13: 6:15\n+-         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n++         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:6:15: 6:16\n+-         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:7:8: 7:9\n+-         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:7:8: 7:9\n+-         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n -         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-+         _0 = move _1;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+-         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n           goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n       }\n   \n       bb2: {\n--         _6 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n--         ((_0 as Err).0: i32) = move _6;  // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+-         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+-         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+-         StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+-         StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+-         _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+-         _8 = move _9;                    // scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+-         StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+-         StorageLive(_12);                // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+-         _12 = move _8;                   // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+-         ((_0 as Err).0: i32) = move _12; // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n -         discriminant(_0) = 1;            // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-+         _0 = move _1;                    // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-+         nop;                             // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-+         nop;                             // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+-         StorageDead(_12);                // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+-         StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:6:14: 6:15\n+-         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n++         _0 = move _3;                    // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:6:15: 6:16\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n           goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n       }\n   "}, {"sha": "be61e5e2a9fff17a2f518379ded0cafb2c3df3a4", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -14,16 +14,16 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n     let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:7:8: 7:9\n     scope 1 {\n-        debug y => _10;                  // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+        debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n     }\n     scope 2 {\n         debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n         scope 3 {\n             scope 7 {\n-                debug t => _6;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+                debug t => _9;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n             }\n             scope 8 {\n-                debug v => _6;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+                debug v => _8;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n                 let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:6:14: 6:15\n             }\n         }\n@@ -34,18 +34,24 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n         }\n     }\n     scope 6 {\n-        debug self => _1;                // in scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n+        debug self => _4;                // in scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n     }\n \n     bb0: {\n-        _5 = discriminant(_1);           // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:6:9: 6:10\n+        StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:6:13: 6:14\n+        _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:6:13: 6:14\n+        _3 = move _4;                    // scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n+        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+        _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n         goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n     }\n \n     bb1: {\n-        _0 = move _1;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-        nop;                             // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-        nop;                             // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:6:15: 6:16\n+        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n         goto -> bb2;                     // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n     }\n "}, {"sha": "b12036f6a03e422190c8d63cf4e8c9590bfa5e50", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -3,24 +3,27 @@\n fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n     debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:5:17: 5:18\n     let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:5:41: 5:57\n-    let _2: i32;                         // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-    let _3: u32;                         // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:6:9: 6:10\n+    let _3: i32;                         // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+    let mut _4: i32;                     // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+    let mut _5: i32;                     // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+    let _6: u32;                         // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n     scope 1 {\n-        debug y => _3;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+        debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n     }\n     scope 2 {\n-        debug err => _2;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n+        debug err => _3;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n         scope 3 {\n             scope 7 {\n-                debug t => _2;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+                debug t => _5;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n             }\n             scope 8 {\n-                debug v => _2;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+                debug v => _4;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n             }\n         }\n     }\n     scope 4 {\n-        debug val => _3;                 // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n+        debug val => _6;                 // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n         scope 5 {\n         }\n     }\n@@ -29,7 +32,9 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     }\n \n     bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:6:9: 6:10\n         _0 = move _1;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n         return;                          // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n     }\n }"}, {"sha": "daa961c3c8c6c042f3fa32fc9402ad439f7a3e00", "filename": "src/test/mir-opt/simplify_try_if_let.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.rs?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -0,0 +1,40 @@\n+// compile-flags: -Zmir-opt-level=1\n+// EMIT_MIR rustc.{{impl}}-append.SimplifyArmIdentity.diff\n+\n+use std::ptr::NonNull;\n+\n+pub struct LinkedList {\n+    head: Option<NonNull<Node>>,\n+    tail: Option<NonNull<Node>>,\n+}\n+\n+pub struct Node {\n+    next: Option<NonNull<Node>>,\n+}\n+\n+impl LinkedList {\n+    pub fn new() -> Self {\n+        Self { head: None, tail: None }\n+    }\n+\n+    pub fn append(&mut self, other: &mut Self) {\n+        match self.tail {\n+            None => { },\n+            Some(mut tail) => {\n+                // `as_mut` is okay here because we have exclusive access to the entirety\n+                // of both lists.\n+                if let Some(other_head) = other.head.take() {\n+                    unsafe {\n+                        tail.as_mut().next = Some(other_head);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let mut one = LinkedList::new();\n+    let mut two = LinkedList::new();\n+    one.append(&mut two);\n+}"}, {"sha": "6ccec937b9b90f957d601a442a6f2e3c2def8573", "filename": "src/test/mir-opt/simplify_try_if_let/rustc.{{impl}}-append.SimplifyArmIdentity.diff", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let%2Frustc.%7B%7Bimpl%7D%7D-append.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7c34d8d6629506a596215886e5fc4bb2b04b00ae/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let%2Frustc.%7B%7Bimpl%7D%7D-append.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let%2Frustc.%7B%7Bimpl%7D%7D-append.SimplifyArmIdentity.diff?ref=7c34d8d6629506a596215886e5fc4bb2b04b00ae", "patch": "@@ -0,0 +1,127 @@\n+- // MIR for `<impl at $DIR/simplify_try_if_let.rs:15:1: 34:2>::append` before SimplifyArmIdentity\n++ // MIR for `<impl at $DIR/simplify_try_if_let.rs:15:1: 34:2>::append` after SimplifyArmIdentity\n+  \n+  fn <impl at $DIR/simplify_try_if_let.rs:15:1: 34:2>::append(_1: &mut LinkedList, _2: &mut LinkedList) -> () {\n+      debug self => _1;                    // in scope 0 at $DIR/simplify_try_if_let.rs:20:19: 20:28\n+      debug other => _2;                   // in scope 0 at $DIR/simplify_try_if_let.rs:20:30: 20:35\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_try_if_let.rs:20:48: 20:48\n+      let mut _3: isize;                   // in scope 0 at $DIR/simplify_try_if_let.rs:22:13: 22:17\n+      let mut _4: std::ptr::NonNull<Node>; // in scope 0 at $DIR/simplify_try_if_let.rs:23:18: 23:26\n+      let mut _5: std::option::Option<std::ptr::NonNull<Node>>; // in scope 0 at $DIR/simplify_try_if_let.rs:26:43: 26:60\n+      let mut _6: &mut std::option::Option<std::ptr::NonNull<Node>>; // in scope 0 at $DIR/simplify_try_if_let.rs:26:43: 26:53\n+      let mut _7: isize;                   // in scope 0 at $DIR/simplify_try_if_let.rs:26:24: 26:40\n+      let mut _9: std::option::Option<std::ptr::NonNull<Node>>; // in scope 0 at $DIR/simplify_try_if_let.rs:28:46: 28:62\n+      let mut _10: std::ptr::NonNull<Node>; // in scope 0 at $DIR/simplify_try_if_let.rs:28:51: 28:61\n+      let mut _11: &mut Node;              // in scope 0 at $DIR/simplify_try_if_let.rs:28:25: 28:38\n+      let mut _12: &mut std::ptr::NonNull<Node>; // in scope 0 at $DIR/simplify_try_if_let.rs:28:25: 28:29\n+      scope 1 {\n+          debug tail => _4;                // in scope 1 at $DIR/simplify_try_if_let.rs:23:18: 23:26\n+          let _8: std::ptr::NonNull<Node>; // in scope 1 at $DIR/simplify_try_if_let.rs:26:29: 26:39\n+          scope 2 {\n+              debug other_head => _8;      // in scope 2 at $DIR/simplify_try_if_let.rs:26:29: 26:39\n+              scope 3 {\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          _3 = discriminant(((*_1).1: std::option::Option<std::ptr::NonNull<Node>>)); // scope 0 at $DIR/simplify_try_if_let.rs:22:13: 22:17\n+          switchInt(move _3) -> [0isize: bb3, 1isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try_if_let.rs:22:13: 22:17\n+      }\n+  \n+      bb1: {\n+          StorageLive(_4);                 // scope 0 at $DIR/simplify_try_if_let.rs:23:18: 23:26\n+          _4 = ((((*_1).1: std::option::Option<std::ptr::NonNull<Node>>) as Some).0: std::ptr::NonNull<Node>); // scope 0 at $DIR/simplify_try_if_let.rs:23:18: 23:26\n+          StorageLive(_5);                 // scope 1 at $DIR/simplify_try_if_let.rs:26:43: 26:60\n+          StorageLive(_6);                 // scope 1 at $DIR/simplify_try_if_let.rs:26:43: 26:53\n+          _6 = &mut ((*_2).0: std::option::Option<std::ptr::NonNull<Node>>); // scope 1 at $DIR/simplify_try_if_let.rs:26:43: 26:53\n+          _5 = const std::option::Option::<std::ptr::NonNull<Node>>::take(move _6) -> bb4; // scope 1 at $DIR/simplify_try_if_let.rs:26:43: 26:60\n+                                           // ty::Const\n+                                           // + ty: for<'r> fn(&'r mut std::option::Option<std::ptr::NonNull<Node>>) -> std::option::Option<std::ptr::NonNull<Node>> {std::option::Option::<std::ptr::NonNull<Node>>::take}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_try_if_let.rs:26:54: 26:58\n+                                           // + literal: Const { ty: for<'r> fn(&'r mut std::option::Option<std::ptr::NonNull<Node>>) -> std::option::Option<std::ptr::NonNull<Node>> {std::option::Option::<std::ptr::NonNull<Node>>::take}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb2: {\n+          unreachable;                     // scope 0 at $DIR/simplify_try_if_let.rs:21:15: 21:24\n+      }\n+  \n+      bb3: {\n+          _0 = const ();                   // scope 0 at $DIR/simplify_try_if_let.rs:22:21: 22:24\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_try_if_let.rs:22:21: 22:24\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          goto -> bb9;                     // scope 0 at $DIR/simplify_try_if_let.rs:21:9: 32:10\n+      }\n+  \n+      bb4: {\n+          StorageDead(_6);                 // scope 1 at $DIR/simplify_try_if_let.rs:26:59: 26:60\n+          _7 = discriminant(_5);           // scope 1 at $DIR/simplify_try_if_let.rs:26:24: 26:40\n+          switchInt(move _7) -> [1isize: bb6, otherwise: bb5]; // scope 1 at $DIR/simplify_try_if_let.rs:26:24: 26:40\n+      }\n+  \n+      bb5: {\n+          _0 = const ();                   // scope 1 at $DIR/simplify_try_if_let.rs:26:17: 30:18\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_try_if_let.rs:26:17: 30:18\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          goto -> bb8;                     // scope 1 at $DIR/simplify_try_if_let.rs:26:17: 30:18\n+      }\n+  \n+      bb6: {\n+          StorageLive(_8);                 // scope 1 at $DIR/simplify_try_if_let.rs:26:29: 26:39\n+          _8 = ((_5 as Some).0: std::ptr::NonNull<Node>); // scope 1 at $DIR/simplify_try_if_let.rs:26:29: 26:39\n+          StorageLive(_9);                 // scope 3 at $DIR/simplify_try_if_let.rs:28:46: 28:62\n+-         StorageLive(_10);                // scope 3 at $DIR/simplify_try_if_let.rs:28:51: 28:61\n+-         _10 = _8;                        // scope 3 at $DIR/simplify_try_if_let.rs:28:51: 28:61\n+-         ((_9 as Some).0: std::ptr::NonNull<Node>) = move _10; // scope 3 at $DIR/simplify_try_if_let.rs:28:46: 28:62\n+-         discriminant(_9) = 1;            // scope 3 at $DIR/simplify_try_if_let.rs:28:46: 28:62\n+-         StorageDead(_10);                // scope 3 at $DIR/simplify_try_if_let.rs:28:61: 28:62\n++         _9 = move _5;                    // scope 3 at $DIR/simplify_try_if_let.rs:28:46: 28:62\n+          StorageLive(_11);                // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:38\n+          StorageLive(_12);                // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:29\n+          _12 = &mut _4;                   // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:29\n+          _11 = const std::ptr::NonNull::<Node>::as_mut(move _12) -> bb7; // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:38\n+                                           // ty::Const\n+                                           // + ty: for<'r> unsafe fn(&'r mut std::ptr::NonNull<Node>) -> &'r mut Node {std::ptr::NonNull::<Node>::as_mut}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_try_if_let.rs:28:30: 28:36\n+                                           // + literal: Const { ty: for<'r> unsafe fn(&'r mut std::ptr::NonNull<Node>) -> &'r mut Node {std::ptr::NonNull::<Node>::as_mut}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb7: {\n+          StorageDead(_12);                // scope 3 at $DIR/simplify_try_if_let.rs:28:37: 28:38\n+          ((*_11).0: std::option::Option<std::ptr::NonNull<Node>>) = move _9; // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:62\n+          StorageDead(_9);                 // scope 3 at $DIR/simplify_try_if_let.rs:28:61: 28:62\n+          StorageDead(_11);                // scope 3 at $DIR/simplify_try_if_let.rs:28:62: 28:63\n+          _0 = const ();                   // scope 3 at $DIR/simplify_try_if_let.rs:27:21: 29:22\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_try_if_let.rs:27:21: 29:22\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_8);                 // scope 1 at $DIR/simplify_try_if_let.rs:30:17: 30:18\n+          goto -> bb8;                     // scope 1 at $DIR/simplify_try_if_let.rs:26:17: 30:18\n+      }\n+  \n+      bb8: {\n+          StorageDead(_5);                 // scope 1 at $DIR/simplify_try_if_let.rs:31:13: 31:14\n+          StorageDead(_4);                 // scope 0 at $DIR/simplify_try_if_let.rs:32:9: 32:10\n+          goto -> bb9;                     // scope 0 at $DIR/simplify_try_if_let.rs:21:9: 32:10\n+      }\n+  \n+      bb9: {\n+          return;                          // scope 0 at $DIR/simplify_try_if_let.rs:33:6: 33:6\n+      }\n+  }\n+  "}]}