{"sha": "a6cb1189ddcb2973ba816634e909ed7ddc131058", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2Y2IxMTg5ZGRjYjI5NzNiYTgxNjYzNGU5MDllZDdkZGMxMzEwNTg=", "commit": {"author": {"name": "Jay Hardee", "email": "hardeejj9@gmail.com", "date": "2017-07-30T22:46:41Z"}, "committer": {"name": "Jay Hardee", "email": "hardeejj9@gmail.com", "date": "2017-07-31T23:06:51Z"}, "message": "do_lint() shouldn't format warnings.", "tree": {"sha": "01cc8aebfb2639da0b3125cf8226a20d22c1b2a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01cc8aebfb2639da0b3125cf8226a20d22c1b2a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6cb1189ddcb2973ba816634e909ed7ddc131058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6cb1189ddcb2973ba816634e909ed7ddc131058", "html_url": "https://github.com/rust-lang/rust/commit/a6cb1189ddcb2973ba816634e909ed7ddc131058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6cb1189ddcb2973ba816634e909ed7ddc131058/comments", "author": {"login": "jayhardee9", "id": 6964208, "node_id": "MDQ6VXNlcjY5NjQyMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/6964208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayhardee9", "html_url": "https://github.com/jayhardee9", "followers_url": "https://api.github.com/users/jayhardee9/followers", "following_url": "https://api.github.com/users/jayhardee9/following{/other_user}", "gists_url": "https://api.github.com/users/jayhardee9/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayhardee9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayhardee9/subscriptions", "organizations_url": "https://api.github.com/users/jayhardee9/orgs", "repos_url": "https://api.github.com/users/jayhardee9/repos", "events_url": "https://api.github.com/users/jayhardee9/events{/privacy}", "received_events_url": "https://api.github.com/users/jayhardee9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jayhardee9", "id": 6964208, "node_id": "MDQ6VXNlcjY5NjQyMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/6964208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayhardee9", "html_url": "https://github.com/jayhardee9", "followers_url": "https://api.github.com/users/jayhardee9/followers", "following_url": "https://api.github.com/users/jayhardee9/following{/other_user}", "gists_url": "https://api.github.com/users/jayhardee9/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayhardee9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayhardee9/subscriptions", "organizations_url": "https://api.github.com/users/jayhardee9/orgs", "repos_url": "https://api.github.com/users/jayhardee9/repos", "events_url": "https://api.github.com/users/jayhardee9/events{/privacy}", "received_events_url": "https://api.github.com/users/jayhardee9/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "471b6811d8ab95815331aff8470076fbc45dae8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/471b6811d8ab95815331aff8470076fbc45dae8e", "html_url": "https://github.com/rust-lang/rust/commit/471b6811d8ab95815331aff8470076fbc45dae8e"}], "stats": {"total": 37, "additions": 13, "deletions": 24}, "files": [{"sha": "ac59f4cb3f1689e8b5267cc5e7b9f3e0f346e9fe", "filename": "clippy_lints/src/literal_digit_grouping.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a6cb1189ddcb2973ba816634e909ed7ddc131058/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cb1189ddcb2973ba816634e909ed7ddc131058/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs?ref=a6cb1189ddcb2973ba816634e909ed7ddc131058", "patch": "@@ -331,28 +331,23 @@ impl LiteralDigitGrouping {\n         digits\n     }\n \n-    /// Performs lint on `digits` (no decimal point) and returns the group size. `None` is\n-    /// returned when emitting a warning.\n-    fn do_lint(digits: &str, cx: &EarlyContext, span: &syntax_pos::Span) -> Option<usize> {\n+    /// Performs lint on `digits` (no decimal point) and returns the group\n+    /// size on success or `WarningType` when emitting a warning.\n+    fn do_lint(digits: &str) -> Result<usize, WarningType> {\n         // Grab underscore indices with respect to the units digit.\n-        let underscore_positions: Vec<usize> = digits.chars().rev().enumerate()\n-            .filter_map(|(idx, digit)|\n-                if digit == '_' {\n-                    Some(idx)\n-                } else {\n-                    None\n-                })\n+        let underscore_positions: Vec<usize> = digits\n+            .chars()\n+            .rev()\n+            .enumerate()\n+            .filter_map(|(idx, digit)| if digit == '_' { Some(idx) } else { None })\n             .collect();\n \n         if underscore_positions.is_empty() {\n             // Check if literal needs underscores.\n             if digits.len() > 4 {\n-                span_help_and_lint(cx, UNREADABLE_LITERAL, *span,\n-                                   \"long literal lacking separators\",\n-                                   \"consider using underscores to make literal more readable\");\n-                return None;\n+                return Err(WarningType::UnreadableLiteral);\n             } else {\n-                return Some(0);\n+                return Ok(0);\n             }\n         } else {\n             // Check consistency and the sizes of the groups.\n@@ -364,17 +359,11 @@ impl LiteralDigitGrouping {\n                 && (digits.len() - underscore_positions.last().unwrap() <= group_size + 1);\n \n             if !consistent {\n-                span_help_and_lint(cx, INCONSISTENT_DIGIT_GROUPING, *span,\n-                                   \"digits grouped inconsistently by underscores\",\n-                                   \"consider making each group three or four digits\");\n-                return None;\n+                return Err(WarningType::InconsistentDigitGrouping);\n             } else if group_size > 4 {\n-                span_help_and_lint(cx, LARGE_DIGIT_GROUPS, *span,\n-                                   \"digit groups should be smaller\",\n-                                   \"consider using groups of three or four digits\");\n-                return None;\n+                return Err(WarningType::LargeDigitGroups);\n             }\n-            return Some(group_size);\n+            return Ok(group_size);\n         }\n     }\n }"}]}