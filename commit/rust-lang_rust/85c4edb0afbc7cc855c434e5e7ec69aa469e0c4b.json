{"sha": "85c4edb0afbc7cc855c434e5e7ec69aa469e0c4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YzRlZGIwYWZiYzdjYzg1NWM0MzRlNWU3ZWM2OWFhNDY5ZTBjNGI=", "commit": {"author": {"name": "Aaron Loucks", "email": "aloucks@cofront.net", "date": "2020-06-03T10:14:56Z"}, "committer": {"name": "Aaron Loucks", "email": "aloucks@cofront.net", "date": "2020-06-03T10:54:41Z"}, "message": "Consolidate documentation expansion and merging\n\nRemoves the duplicated `expand_doc_attrs` and `merge_doc_comments_and_attrs`\nfunctions from `ra_ide` and exposes the same functionality via\n`ra_hir::Documentation::from_ast`.", "tree": {"sha": "56464d5e77119bafcff03711de24dba775d54beb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56464d5e77119bafcff03711de24dba775d54beb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85c4edb0afbc7cc855c434e5e7ec69aa469e0c4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85c4edb0afbc7cc855c434e5e7ec69aa469e0c4b", "html_url": "https://github.com/rust-lang/rust/commit/85c4edb0afbc7cc855c434e5e7ec69aa469e0c4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85c4edb0afbc7cc855c434e5e7ec69aa469e0c4b/comments", "author": {"login": "aloucks", "id": 221559, "node_id": "MDQ6VXNlcjIyMTU1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/221559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aloucks", "html_url": "https://github.com/aloucks", "followers_url": "https://api.github.com/users/aloucks/followers", "following_url": "https://api.github.com/users/aloucks/following{/other_user}", "gists_url": "https://api.github.com/users/aloucks/gists{/gist_id}", "starred_url": "https://api.github.com/users/aloucks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aloucks/subscriptions", "organizations_url": "https://api.github.com/users/aloucks/orgs", "repos_url": "https://api.github.com/users/aloucks/repos", "events_url": "https://api.github.com/users/aloucks/events{/privacy}", "received_events_url": "https://api.github.com/users/aloucks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aloucks", "id": 221559, "node_id": "MDQ6VXNlcjIyMTU1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/221559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aloucks", "html_url": "https://github.com/aloucks", "followers_url": "https://api.github.com/users/aloucks/followers", "following_url": "https://api.github.com/users/aloucks/following{/other_user}", "gists_url": "https://api.github.com/users/aloucks/gists{/gist_id}", "starred_url": "https://api.github.com/users/aloucks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aloucks/subscriptions", "organizations_url": "https://api.github.com/users/aloucks/orgs", "repos_url": "https://api.github.com/users/aloucks/repos", "events_url": "https://api.github.com/users/aloucks/events{/privacy}", "received_events_url": "https://api.github.com/users/aloucks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5837acce532e0cd65a1c0cb8c03cc18a4c22f327", "url": "https://api.github.com/repos/rust-lang/rust/commits/5837acce532e0cd65a1c0cb8c03cc18a4c22f327", "html_url": "https://github.com/rust-lang/rust/commit/5837acce532e0cd65a1c0cb8c03cc18a4c22f327"}], "stats": {"total": 67, "additions": 14, "deletions": 53}, "files": [{"sha": "2630b3d895e60db1c6a07ffaee6cb233b37d490e", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85c4edb0afbc7cc855c434e5e7ec69aa469e0c4b/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c4edb0afbc7cc855c434e5e7ec69aa469e0c4b/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=85c4edb0afbc7cc855c434e5e7ec69aa469e0c4b", "patch": "@@ -29,6 +29,13 @@ impl Documentation {\n         Documentation(s.into())\n     }\n \n+    pub fn from_ast<N>(node: &N) -> Option<Documentation>\n+    where\n+        N: ast::DocCommentsOwner + ast::AttrsOwner,\n+    {\n+        docs_from_ast(node)\n+    }\n+\n     pub fn as_str(&self) -> &str {\n         &*self.0\n     }"}, {"sha": "9636cd0d6af7ad32bec9d4dff2084933c82d639b", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 7, "deletions": 53, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/85c4edb0afbc7cc855c434e5e7ec69aa469e0c4b/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c4edb0afbc7cc855c434e5e7ec69aa469e0c4b/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=85c4edb0afbc7cc855c434e5e7ec69aa469e0c4b", "patch": "@@ -1,21 +1,16 @@\n use std::iter::once;\n \n use hir::{\n-    Adt, AsAssocItem, AssocItemContainer, FieldSource, HasSource, HirDisplay, ModuleDef,\n-    ModuleSource, Semantics,\n+    Adt, AsAssocItem, AssocItemContainer, Documentation, FieldSource, HasSource, HirDisplay,\n+    ModuleDef, ModuleSource, Semantics,\n };\n use itertools::Itertools;\n use ra_db::SourceDatabase;\n use ra_ide_db::{\n     defs::{classify_name, classify_name_ref, Definition},\n     RootDatabase,\n };\n-use ra_syntax::{\n-    ast::{self, DocCommentsOwner},\n-    match_ast, AstNode,\n-    SyntaxKind::*,\n-    SyntaxToken, TokenAtOffset,\n-};\n+use ra_syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset};\n \n use crate::{\n     display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel},\n@@ -169,18 +164,14 @@ fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<Strin\n     return match def {\n         Definition::Macro(it) => {\n             let src = it.source(db);\n-            let doc_comment_text = src.value.doc_comment_text();\n-            let doc_attr_text = expand_doc_attrs(&src.value);\n-            let docs = merge_doc_comments_and_attrs(doc_comment_text, doc_attr_text);\n+            let docs = Documentation::from_ast(&src.value).map(Into::into);\n             hover_text(docs, Some(macro_label(&src.value)), mod_path)\n         }\n         Definition::Field(it) => {\n             let src = it.source(db);\n             match src.value {\n                 FieldSource::Named(it) => {\n-                    let doc_comment_text = it.doc_comment_text();\n-                    let doc_attr_text = expand_doc_attrs(&it);\n-                    let docs = merge_doc_comments_and_attrs(doc_comment_text, doc_attr_text);\n+                    let docs = Documentation::from_ast(&it).map(Into::into);\n                     hover_text(docs, it.short_label(), mod_path)\n                 }\n                 _ => None,\n@@ -189,9 +180,7 @@ fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<Strin\n         Definition::ModuleDef(it) => match it {\n             ModuleDef::Module(it) => match it.definition_source(db).value {\n                 ModuleSource::Module(it) => {\n-                    let doc_comment_text = it.doc_comment_text();\n-                    let doc_attr_text = expand_doc_attrs(&it);\n-                    let docs = merge_doc_comments_and_attrs(doc_comment_text, doc_attr_text);\n+                    let docs = Documentation::from_ast(&it).map(Into::into);\n                     hover_text(docs, it.short_label(), mod_path)\n                 }\n                 _ => None,\n@@ -220,46 +209,11 @@ fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<Strin\n         A: ast::DocCommentsOwner + ast::NameOwner + ShortLabel + ast::AttrsOwner,\n     {\n         let src = def.source(db);\n-        let doc_comment_text = src.value.doc_comment_text();\n-        let doc_attr_text = expand_doc_attrs(&src.value);\n-        let docs = merge_doc_comments_and_attrs(doc_comment_text, doc_attr_text);\n+        let docs = Documentation::from_ast(&src.value).map(Into::into);\n         hover_text(docs, src.value.short_label(), mod_path)\n     }\n }\n \n-fn merge_doc_comments_and_attrs(\n-    doc_comment_text: Option<String>,\n-    doc_attr_text: Option<String>,\n-) -> Option<String> {\n-    match (doc_comment_text, doc_attr_text) {\n-        (Some(mut comment_text), Some(attr_text)) => {\n-            comment_text.push_str(\"\\n\\n\");\n-            comment_text.push_str(&attr_text);\n-            Some(comment_text)\n-        }\n-        (Some(comment_text), None) => Some(comment_text),\n-        (None, Some(attr_text)) => Some(attr_text),\n-        (None, None) => None,\n-    }\n-}\n-\n-fn expand_doc_attrs(owner: &dyn ast::AttrsOwner) -> Option<String> {\n-    let mut docs = String::new();\n-    for attr in owner.attrs() {\n-        if let Some((\"doc\", value)) =\n-            attr.as_simple_key_value().as_ref().map(|(k, v)| (k.as_str(), v.as_str()))\n-        {\n-            docs.push_str(value);\n-            docs.push_str(\"\\n\\n\");\n-        }\n-    }\n-    if docs.is_empty() {\n-        None\n-    } else {\n-        Some(docs.trim_end_matches(\"\\n\\n\").to_owned())\n-    }\n-}\n-\n fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     return tokens.max_by_key(priority);\n     fn priority(n: &SyntaxToken) -> usize {"}]}