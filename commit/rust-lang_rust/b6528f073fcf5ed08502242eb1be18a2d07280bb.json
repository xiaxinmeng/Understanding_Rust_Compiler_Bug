{"sha": "b6528f073fcf5ed08502242eb1be18a2d07280bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NTI4ZjA3M2ZjZjVlZDA4NTAyMjQyZWIxYmUxOGEyZDA3MjgwYmI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-07-05T13:14:12Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-08-16T14:08:39Z"}, "message": "Cleanup: Every `BitDenotation` is a `DataflowOperator`, so build that in.\n\nPost-rebase: ariel confirmed `SetDiscriminant` should indeed be a mutate.", "tree": {"sha": "1c9774539ed438226f2d7d8b9717d5c79ef3343c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c9774539ed438226f2d7d8b9717d5c79ef3343c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6528f073fcf5ed08502242eb1be18a2d07280bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6528f073fcf5ed08502242eb1be18a2d07280bb", "html_url": "https://github.com/rust-lang/rust/commit/b6528f073fcf5ed08502242eb1be18a2d07280bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6528f073fcf5ed08502242eb1be18a2d07280bb/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15c411d7c1929444a5ea3e418f92feb463fe9684", "url": "https://api.github.com/repos/rust-lang/rust/commits/15c411d7c1929444a5ea3e418f92feb463fe9684", "html_url": "https://github.com/rust-lang/rust/commit/15c411d7c1929444a5ea3e418f92feb463fe9684"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "e460848450e0be4f41d300bcb461b185d245d07a", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b6528f073fcf5ed08502242eb1be18a2d07280bb/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6528f073fcf5ed08502242eb1be18a2d07280bb/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=b6528f073fcf5ed08502242eb1be18a2d07280bb", "patch": "@@ -62,8 +62,7 @@ pub trait Dataflow<BD: BitDenotation> {\n     fn propagate(&mut self);\n }\n \n-impl<'a, 'tcx: 'a, BD> Dataflow<BD> for DataflowBuilder<'a, 'tcx, BD>\n-    where BD: BitDenotation + DataflowOperator\n+impl<'a, 'tcx: 'a, BD> Dataflow<BD> for DataflowBuilder<'a, 'tcx, BD> where BD: BitDenotation\n {\n     fn dataflow<P>(&mut self, p: P) where P: Fn(&BD, BD::Idx) -> &Debug {\n         self.flow_state.build_sets();\n@@ -104,7 +103,7 @@ pub(crate) fn do_dataflow<'a, 'tcx, BD, P>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 bd: BD,\n                                 p: P)\n                                 -> DataflowResults<BD>\n-    where BD: BitDenotation + DataflowOperator,\n+    where BD: BitDenotation,\n           P: Fn(&BD, BD::Idx) -> &fmt::Debug\n {\n     let name_found = |sess: &Session, attrs: &[ast::Attribute], name| -> Option<String> {\n@@ -137,15 +136,13 @@ pub(crate) fn do_dataflow<'a, 'tcx, BD, P>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mbcx.flow_state.results()\n }\n \n-struct PropagationContext<'b, 'a: 'b, 'tcx: 'a, O>\n-    where O: 'b + BitDenotation\n+struct PropagationContext<'b, 'a: 'b, 'tcx: 'a, O> where O: 'b + BitDenotation\n {\n     builder: &'b mut DataflowAnalysis<'a, 'tcx, O>,\n     changed: bool,\n }\n \n-impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD>\n-    where BD: BitDenotation + DataflowOperator\n+impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation\n {\n     fn propagate(&mut self) {\n         let mut temp = IdxSetBuf::new_empty(self.flow_state.sets.bits_per_block);\n@@ -189,8 +186,7 @@ impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD>\n     }\n }\n \n-impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD>\n-    where BD: BitDenotation + DataflowOperator\n+impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD> where BD: BitDenotation\n {\n     fn reset(&mut self, bits: &mut IdxSet<BD::Idx>) {\n         let e = if BD::bottom_value() {!0} else {0};\n@@ -227,8 +223,7 @@ fn dataflow_path(context: &str, prepost: &str, path: &str) -> PathBuf {\n     path\n }\n \n-impl<'a, 'tcx: 'a, BD> DataflowBuilder<'a, 'tcx, BD>\n-    where BD: BitDenotation\n+impl<'a, 'tcx: 'a, BD> DataflowBuilder<'a, 'tcx, BD> where BD: BitDenotation\n {\n     fn pre_dataflow_instrumentation<P>(&self, p: P) -> io::Result<()>\n         where P: Fn(&BD, BD::Idx) -> &Debug\n@@ -356,16 +351,14 @@ pub trait DataflowResultsConsumer<'a, 'tcx: 'a> {\n                           flow_state: &mut Self::FlowState);\n }\n \n-pub struct DataflowAnalysis<'a, 'tcx: 'a, O>\n-    where O: BitDenotation\n+pub struct DataflowAnalysis<'a, 'tcx: 'a, O> where O: BitDenotation\n {\n     flow_state: DataflowState<O>,\n     dead_unwinds: &'a IdxSet<mir::BasicBlock>,\n     mir: &'a Mir<'tcx>,\n }\n \n-impl<'a, 'tcx: 'a, O> DataflowAnalysis<'a, 'tcx, O>\n-    where O: BitDenotation\n+impl<'a, 'tcx: 'a, O> DataflowAnalysis<'a, 'tcx, O> where O: BitDenotation\n {\n     pub fn results(self) -> DataflowResults<O> {\n         DataflowResults(self.flow_state)\n@@ -516,7 +509,7 @@ pub trait DataflowOperator: BitwiseOperator {\n     fn bottom_value() -> bool;\n }\n \n-pub trait BitDenotation {\n+pub trait BitDenotation: DataflowOperator {\n     /// Specifies what index type is used to access the bitvector.\n     type Idx: Idx;\n \n@@ -597,8 +590,7 @@ pub trait BitDenotation {\n                              dest_lval: &mir::Lvalue);\n }\n \n-impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n-    where D: BitDenotation + DataflowOperator\n+impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n {\n     pub fn new(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                mir: &'a Mir<'tcx>,\n@@ -639,8 +631,7 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n     }\n }\n \n-impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n-    where D: BitDenotation + DataflowOperator\n+impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n {\n     /// Propagates the bits of `in_out` into all the successors of `bb`,\n     /// using bitwise operator denoted by `self.operator`."}, {"sha": "e1f79c2f36498cde1768bc110d49706d53e53a06", "filename": "src/librustc_mir/transform/borrow_check.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6528f073fcf5ed08502242eb1be18a2d07280bb/src%2Flibrustc_mir%2Ftransform%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6528f073fcf5ed08502242eb1be18a2d07280bb/src%2Flibrustc_mir%2Ftransform%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fborrow_check.rs?ref=b6528f073fcf5ed08502242eb1be18a2d07280bb", "patch": "@@ -193,7 +193,6 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> DataflowResultsConsumer<'b, 'gcx>\n                                     (rhs, span), location, flow_state);\n             }\n             StatementKind::SetDiscriminant { ref lvalue, variant_index: _ } => {\n-                // FIXME: should this count as a mutate from borrowck POV?\n                 self.mutate_lvalue(ContextKind::SetDiscrim.new(location),\n                                    (lvalue, span), JustWrite, flow_state);\n             }"}]}