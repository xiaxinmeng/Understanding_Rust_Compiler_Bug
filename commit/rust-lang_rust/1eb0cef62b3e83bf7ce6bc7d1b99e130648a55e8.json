{"sha": "1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYjBjZWY2MmIzZTgzYmY3Y2U2YmM3ZDFiOTllMTMwNjQ4YTU1ZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-28T04:14:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-28T04:14:12Z"}, "message": "Auto merge of #50149 - aaronaaeng:master, r=estebank\n\nAdded warning for unused arithmetic expressions\n\nThe compiler now displays a warning when a binary arithmetic operation is evaluated but not used.  This resolves #50124  by following the instructions outlined in the issue.  The changes are as follows:\n\n- Added new pattern matching for unused arithmetic expressions in `src/librustc_lint/unused.rs`\n- Added `#[must_use]` attributes to the binary operation methods in `src/libcore/internal_macros.rs`\n- Added `#[must_use]` attributes to the non-assigning binary operators in `src/libcore/ops/arith.rs`", "tree": {"sha": "a421589312b46f56be896405fea3f3b01c3ed228", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a421589312b46f56be896405fea3f3b01c3ed228"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8", "html_url": "https://github.com/rust-lang/rust/commit/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ede7f94794213187b7d8984fdd24be6eb6106b96", "url": "https://api.github.com/repos/rust-lang/rust/commits/ede7f94794213187b7d8984fdd24be6eb6106b96", "html_url": "https://github.com/rust-lang/rust/commit/ede7f94794213187b7d8984fdd24be6eb6106b96"}, {"sha": "91aa267eda21be36d7cae43b6809eba63f1aac4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/91aa267eda21be36d7cae43b6809eba63f1aac4c", "html_url": "https://github.com/rust-lang/rust/commit/91aa267eda21be36d7cae43b6809eba63f1aac4c"}], "stats": {"total": 239, "additions": 224, "deletions": 15}, "files": [{"sha": "a1bc5463f7333dfa114105b2a6489ff2e28e220e", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8", "patch": "@@ -94,6 +94,7 @@ pub trait Add<RHS=Self> {\n     type Output;\n \n     /// Performs the `+` operation.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn add(self, rhs: RHS) -> Self::Output;\n }\n@@ -191,6 +192,7 @@ pub trait Sub<RHS=Self> {\n     type Output;\n \n     /// Performs the `-` operation.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn sub(self, rhs: RHS) -> Self::Output;\n }\n@@ -310,6 +312,7 @@ pub trait Mul<RHS=Self> {\n     type Output;\n \n     /// Performs the `*` operation.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn mul(self, rhs: RHS) -> Self::Output;\n }\n@@ -433,6 +436,7 @@ pub trait Div<RHS=Self> {\n     type Output;\n \n     /// Performs the `/` operation.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn div(self, rhs: RHS) -> Self::Output;\n }\n@@ -517,6 +521,7 @@ pub trait Rem<RHS=Self> {\n     type Output = Self;\n \n     /// Performs the `%` operation.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn rem(self, rhs: RHS) -> Self::Output;\n }\n@@ -601,6 +606,7 @@ pub trait Neg {\n     type Output;\n \n     /// Performs the unary `-` operation.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn neg(self) -> Self::Output;\n }"}, {"sha": "3900f365b0ab197364bb2f3c47b190c9b8507d82", "filename": "src/libcore/ops/bit.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8/src%2Flibcore%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8/src%2Flibcore%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fbit.rs?ref=1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8", "patch": "@@ -46,6 +46,7 @@ pub trait Not {\n     type Output;\n \n     /// Performs the unary `!` operation.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn not(self) -> Self::Output;\n }\n@@ -129,6 +130,7 @@ pub trait BitAnd<RHS=Self> {\n     type Output;\n \n     /// Performs the `&` operation.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn bitand(self, rhs: RHS) -> Self::Output;\n }\n@@ -212,6 +214,7 @@ pub trait BitOr<RHS=Self> {\n     type Output;\n \n     /// Performs the `|` operation.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn bitor(self, rhs: RHS) -> Self::Output;\n }\n@@ -298,6 +301,7 @@ pub trait BitXor<RHS=Self> {\n     type Output;\n \n     /// Performs the `^` operation.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn bitxor(self, rhs: RHS) -> Self::Output;\n }\n@@ -385,6 +389,7 @@ pub trait Shl<RHS=Self> {\n     type Output;\n \n     /// Performs the `<<` operation.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn shl(self, rhs: RHS) -> Self::Output;\n }\n@@ -493,6 +498,7 @@ pub trait Shr<RHS=Self> {\n     type Output;\n \n     /// Performs the `>>` operation.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn shr(self, rhs: RHS) -> Self::Output;\n }"}, {"sha": "54eecc82e19ef4325e52ed7ec39b207f153313e1", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8", "patch": "@@ -77,6 +77,7 @@ pub trait Deref {\n     type Target: ?Sized;\n \n     /// Dereferences the value.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn deref(&self) -> &Self::Target;\n }"}, {"sha": "5ec8305de788c3ecb4fa4fa84ca4a05b6466c47c", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8", "patch": "@@ -91,23 +91,35 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 let def_id = def.def_id();\n                 fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n             }\n-\n-            if let hir::ExprBinary(bin_op, ..) = expr.node {\n-                match bin_op.node {\n-                    // Hardcoding the comparison operators here seemed more\n-                    // expedient than the refactoring that would be needed to\n-                    // look up the `#[must_use]` attribute which does exist on\n-                    // the comparison trait methods\n-                    hir::BiEq | hir::BiLt | hir::BiLe | hir::BiNe | hir::BiGe | hir::BiGt => {\n-                        let msg = \"unused comparison which must be used\";\n-                        cx.span_lint(UNUSED_MUST_USE, expr.span, msg);\n-                        op_warned = true;\n-                    },\n-                    _ => {},\n-                }\n+            let must_use_op = match expr.node {\n+                // Hardcoding operators here seemed more expedient than the\n+                // refactoring that would be needed to look up the `#[must_use]`\n+                // attribute which does exist on the comparison trait methods\n+                hir::ExprBinary(bin_op, ..)  => {\n+                    match bin_op.node {\n+                        hir::BiEq | hir::BiLt | hir::BiLe | hir::BiNe | hir::BiGe | hir::BiGt => {\n+                            Some(\"comparison\")\n+                        },\n+                        hir::BiAdd | hir::BiSub | hir::BiDiv | hir::BiMul | hir::BiRem => {\n+                            Some(\"arithmetic operation\")\n+                        },\n+                        hir::BiAnd | hir::BiOr => {\n+                            Some(\"logical operation\")\n+                        },\n+                        hir::BiBitXor | hir::BiBitAnd | hir::BiBitOr | hir::BiShl | hir::BiShr => {\n+                            Some(\"bitwise operation\")\n+                        },\n+                    }\n+                },\n+                hir::ExprUnary(..) => Some(\"unary operation\"),\n+                _ => None\n+            };\n+            if let Some(must_use_op) = must_use_op {\n+                cx.span_lint(UNUSED_MUST_USE, expr.span,\n+                    &format!(\"unused {} which must be used\", must_use_op));\n+                op_warned = true;\n             }\n         }\n-\n         if !(ty_warned || fn_warned || op_warned) {\n             cx.span_lint(UNUSED_RESULTS, s.span, \"unused result\");\n         }"}, {"sha": "4ed82ab3b4025c283726b3b47b3cac4e2412d935", "filename": "src/test/ui/lint/must-use-ops.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8/src%2Ftest%2Fui%2Flint%2Fmust-use-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8/src%2Ftest%2Fui%2Flint%2Fmust-use-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust-use-ops.rs?ref=1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #50124 - Test warning for unused operator expressions\n+\n+// compile-pass\n+\n+#![feature(fn_must_use)]\n+#![warn(unused_must_use)]\n+\n+fn main() {\n+    let val = 1;\n+    let val_pointer = &val;\n+\n+// Comparison Operators\n+    val == 1;\n+    val < 1;\n+    val <= 1;\n+    val != 1;\n+    val >= 1;\n+    val > 1;\n+\n+// Arithmetic Operators\n+    val + 2;\n+    val - 2;\n+    val / 2;\n+    val * 2;\n+    val % 2;\n+\n+// Logical Operators\n+    true && true;\n+    false || true;\n+\n+// Bitwise Operators\n+    5 ^ val;\n+    5 & val;\n+    5 | val;\n+    5 << val;\n+    5 >> val;\n+\n+// Unary Operators\n+    !val;\n+    -val;\n+    *val_pointer;\n+}"}, {"sha": "f444ef0907575e4b7cc5f3373ee811b7eed2d355", "filename": "src/test/ui/lint/must-use-ops.stderr", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8/src%2Ftest%2Fui%2Flint%2Fmust-use-ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8/src%2Ftest%2Fui%2Flint%2Fmust-use-ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust-use-ops.stderr?ref=1eb0cef62b3e83bf7ce6bc7d1b99e130648a55e8", "patch": "@@ -0,0 +1,132 @@\n+warning: unused comparison which must be used\n+  --> $DIR/must-use-ops.rs:23:5\n+   |\n+LL |     val == 1;\n+   |     ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/must-use-ops.rs:16:9\n+   |\n+LL | #![warn(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+warning: unused comparison which must be used\n+  --> $DIR/must-use-ops.rs:24:5\n+   |\n+LL |     val < 1;\n+   |     ^^^^^^^\n+\n+warning: unused comparison which must be used\n+  --> $DIR/must-use-ops.rs:25:5\n+   |\n+LL |     val <= 1;\n+   |     ^^^^^^^^\n+\n+warning: unused comparison which must be used\n+  --> $DIR/must-use-ops.rs:26:5\n+   |\n+LL |     val != 1;\n+   |     ^^^^^^^^\n+\n+warning: unused comparison which must be used\n+  --> $DIR/must-use-ops.rs:27:5\n+   |\n+LL |     val >= 1;\n+   |     ^^^^^^^^\n+\n+warning: unused comparison which must be used\n+  --> $DIR/must-use-ops.rs:28:5\n+   |\n+LL |     val > 1;\n+   |     ^^^^^^^\n+\n+warning: unused arithmetic operation which must be used\n+  --> $DIR/must-use-ops.rs:31:5\n+   |\n+LL |     val + 2;\n+   |     ^^^^^^^\n+\n+warning: unused arithmetic operation which must be used\n+  --> $DIR/must-use-ops.rs:32:5\n+   |\n+LL |     val - 2;\n+   |     ^^^^^^^\n+\n+warning: unused arithmetic operation which must be used\n+  --> $DIR/must-use-ops.rs:33:5\n+   |\n+LL |     val / 2;\n+   |     ^^^^^^^\n+\n+warning: unused arithmetic operation which must be used\n+  --> $DIR/must-use-ops.rs:34:5\n+   |\n+LL |     val * 2;\n+   |     ^^^^^^^\n+\n+warning: unused arithmetic operation which must be used\n+  --> $DIR/must-use-ops.rs:35:5\n+   |\n+LL |     val % 2;\n+   |     ^^^^^^^\n+\n+warning: unused logical operation which must be used\n+  --> $DIR/must-use-ops.rs:38:5\n+   |\n+LL |     true && true;\n+   |     ^^^^^^^^^^^^\n+\n+warning: unused logical operation which must be used\n+  --> $DIR/must-use-ops.rs:39:5\n+   |\n+LL |     false || true;\n+   |     ^^^^^^^^^^^^^\n+\n+warning: unused bitwise operation which must be used\n+  --> $DIR/must-use-ops.rs:42:5\n+   |\n+LL |     5 ^ val;\n+   |     ^^^^^^^\n+\n+warning: unused bitwise operation which must be used\n+  --> $DIR/must-use-ops.rs:43:5\n+   |\n+LL |     5 & val;\n+   |     ^^^^^^^\n+\n+warning: unused bitwise operation which must be used\n+  --> $DIR/must-use-ops.rs:44:5\n+   |\n+LL |     5 | val;\n+   |     ^^^^^^^\n+\n+warning: unused bitwise operation which must be used\n+  --> $DIR/must-use-ops.rs:45:5\n+   |\n+LL |     5 << val;\n+   |     ^^^^^^^^\n+\n+warning: unused bitwise operation which must be used\n+  --> $DIR/must-use-ops.rs:46:5\n+   |\n+LL |     5 >> val;\n+   |     ^^^^^^^^\n+\n+warning: unused unary operation which must be used\n+  --> $DIR/must-use-ops.rs:49:5\n+   |\n+LL |     !val;\n+   |     ^^^^\n+\n+warning: unused unary operation which must be used\n+  --> $DIR/must-use-ops.rs:50:5\n+   |\n+LL |     -val;\n+   |     ^^^^\n+\n+warning: unused unary operation which must be used\n+  --> $DIR/must-use-ops.rs:51:5\n+   |\n+LL |     *val_pointer;\n+   |     ^^^^^^^^^^^^\n+"}]}