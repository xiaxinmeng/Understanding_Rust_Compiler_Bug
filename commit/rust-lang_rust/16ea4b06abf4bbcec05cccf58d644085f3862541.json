{"sha": "16ea4b06abf4bbcec05cccf58d644085f3862541", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZWE0YjA2YWJmNGJiY2VjMDVjY2NmNThkNjQ0MDg1ZjM4NjI1NDE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-31T03:02:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-31T03:02:31Z"}, "message": "rustdoc: Stop using a custom error handler. Closes #4698", "tree": {"sha": "b21d68a611c11095595fff8bd924713420edbf2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b21d68a611c11095595fff8bd924713420edbf2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16ea4b06abf4bbcec05cccf58d644085f3862541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16ea4b06abf4bbcec05cccf58d644085f3862541", "html_url": "https://github.com/rust-lang/rust/commit/16ea4b06abf4bbcec05cccf58d644085f3862541", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16ea4b06abf4bbcec05cccf58d644085f3862541/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "409d8af3c4455638d017b4d34a16230c34d94771", "url": "https://api.github.com/repos/rust-lang/rust/commits/409d8af3c4455638d017b4d34a16230c34d94771", "html_url": "https://github.com/rust-lang/rust/commit/409d8af3c4455638d017b4d34a16230c34d94771"}], "stats": {"total": 57, "additions": 2, "deletions": 55}, "files": [{"sha": "3f117f049f3ae8b488fac73d40586f37e816de96", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 2, "deletions": 55, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/16ea4b06abf4bbcec05cccf58d644085f3862541/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ea4b06abf4bbcec05cccf58d644085f3862541/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=16ea4b06abf4bbcec05cccf58d644085f3862541", "patch": "@@ -135,65 +135,12 @@ fn build_ctxt(sess: Session,\n \n fn build_session() -> Session {\n     let sopts: @options = basic_options();\n-    let codemap = @codemap::CodeMap::new();\n-    let error_handlers = build_error_handlers(codemap);\n-    let {emitter, span_handler} = error_handlers;\n+    let emitter = syntax::diagnostic::emit;\n \n-    let session = driver::build_session_(sopts, codemap, emitter,\n-                                         span_handler);\n+    let session = driver::build_session(sopts, emitter);\n     session\n }\n \n-type ErrorHandlers = {\n-    emitter: diagnostic::emitter,\n-    span_handler: diagnostic::span_handler\n-};\n-\n-// Build a custom error handler that will allow us to ignore non-fatal\n-// errors\n-fn build_error_handlers(\n-    codemap: @codemap::CodeMap\n-) -> ErrorHandlers {\n-\n-    struct DiagnosticHandler {\n-        inner: diagnostic::handler,\n-    }\n-\n-    impl DiagnosticHandler: diagnostic::handler {\n-        fn fatal(msg: &str) -> ! { self.inner.fatal(msg) }\n-        fn err(msg: &str) { self.inner.err(msg) }\n-        fn bump_err_count() {\n-            self.inner.bump_err_count();\n-        }\n-        fn has_errors() -> bool { self.inner.has_errors() }\n-        fn abort_if_errors() { self.inner.abort_if_errors() }\n-        fn warn(msg: &str) { self.inner.warn(msg) }\n-        fn note(msg: &str) { self.inner.note(msg) }\n-        fn bug(msg: &str) -> ! { self.inner.bug(msg) }\n-        fn unimpl(msg: &str) -> ! { self.inner.unimpl(msg) }\n-        fn emit(cmsp: Option<(@codemap::CodeMap, codemap::span)>,\n-                msg: &str, lvl: diagnostic::level) {\n-            self.inner.emit(cmsp, msg, lvl)\n-        }\n-    }\n-\n-    let emitter = fn@(cmsp: Option<(@codemap::CodeMap, codemap::span)>,\n-                       msg: &str, lvl: diagnostic::level) {\n-        diagnostic::emit(cmsp, msg, lvl);\n-    };\n-    let inner_handler = diagnostic::mk_handler(Some(emitter));\n-    let handler = DiagnosticHandler {\n-        inner: inner_handler,\n-    };\n-    let span_handler = diagnostic::mk_span_handler(\n-        handler as diagnostic::handler, codemap);\n-\n-    {\n-        emitter: emitter,\n-        span_handler: span_handler\n-    }\n-}\n-\n #[test]\n fn should_prune_unconfigured_items() {\n     let source = ~\"#[cfg(shut_up_and_leave_me_alone)]fn a() { }\";"}]}