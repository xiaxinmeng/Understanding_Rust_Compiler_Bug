{"sha": "f09d474836d14811af1f9ebead4c1649c54e4e4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwOWQ0NzQ4MzZkMTQ4MTFhZjFmOWViZWFkNGMxNjQ5YzU0ZTRlNGM=", "commit": {"author": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2020-11-04T06:23:08Z"}, "committer": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2020-11-18T20:49:09Z"}, "message": "Use PackedFingerprint in DepNode to reduce memory consumption", "tree": {"sha": "ddf66a7bde0377b6618015c6090a0818577f608d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddf66a7bde0377b6618015c6090a0818577f608d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f09d474836d14811af1f9ebead4c1649c54e4e4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f09d474836d14811af1f9ebead4c1649c54e4e4c", "html_url": "https://github.com/rust-lang/rust/commit/f09d474836d14811af1f9ebead4c1649c54e4e4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f09d474836d14811af1f9ebead4c1649c54e4e4c/comments", "author": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d2d0014922e9f541694bfe87642749239990e0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2d0014922e9f541694bfe87642749239990e0e", "html_url": "https://github.com/rust-lang/rust/commit/8d2d0014922e9f541694bfe87642749239990e0e"}], "stats": {"total": 69, "additions": 60, "deletions": 9}, "files": [{"sha": "9927511e3c195087181eb8b568c2ad80848f0423", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f09d474836d14811af1f9ebead4c1649c54e4e4c/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09d474836d14811af1f9ebead4c1649c54e4e4c/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=f09d474836d14811af1f9ebead4c1649c54e4e4c", "patch": "@@ -151,8 +151,50 @@ impl<D: rustc_serialize::Decoder> FingerprintDecoder for D {\n         panic!(\"Cannot decode `Fingerprint` with `{}`\", std::any::type_name::<D>());\n     }\n }\n+\n impl FingerprintDecoder for opaque::Decoder<'_> {\n     fn decode_fingerprint(&mut self) -> Result<Fingerprint, String> {\n         Fingerprint::decode_opaque(self)\n     }\n }\n+\n+// `PackedFingerprint` wraps a `Fingerprint`. Its purpose is to, on certain\n+// architectures, behave like a `Fingerprint` without alignment requirements.\n+// This behavior is only enabled on x86 and x86_64, where the impact of\n+// unaligned accesses is tolerable in small doses.\n+//\n+// This may be preferable to use in large collections of structs containing\n+// fingerprints, as it can reduce memory consumption by preventing the padding\n+// that the more strictly-aligned `Fingerprint` can introduce. An application of\n+// this is in the query dependency graph, which contains a large collection of\n+// `DepNode`s. As of this writing, the size of a `DepNode` decreases by ~30%\n+// (from 24 bytes to 17) by using the packed representation here, which\n+// noticeably decreases total memory usage when compiling large crates.\n+#[cfg_attr(any(target_arch = \"x86\", target_arch = \"x86_64\"), repr(packed))]\n+#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]\n+pub struct PackedFingerprint(pub Fingerprint);\n+\n+impl std::fmt::Display for PackedFingerprint {\n+    #[inline]\n+    fn fmt(&self, formatter: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        // Copy to avoid taking reference to packed field.\n+        let copy = self.0;\n+        copy.fmt(formatter)\n+    }\n+}\n+\n+impl<E: rustc_serialize::Encoder> Encodable<E> for PackedFingerprint {\n+    #[inline]\n+    fn encode(&self, s: &mut E) -> Result<(), E::Error> {\n+        // Copy to avoid taking reference to packed field.\n+        let copy = self.0;\n+        copy.encode(s)\n+    }\n+}\n+\n+impl<D: rustc_serialize::Decoder> Decodable<D> for PackedFingerprint {\n+    #[inline]\n+    fn decode(d: &mut D) -> Result<Self, D::Error> {\n+        Fingerprint::decode(d).map(|f| PackedFingerprint(f))\n+    }\n+}"}, {"sha": "9cd3689e897a598520affb75c23e1bae5b8b82a8", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f09d474836d14811af1f9ebead4c1649c54e4e4c/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09d474836d14811af1f9ebead4c1649c54e4e4c/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=f09d474836d14811af1f9ebead4c1649c54e4e4c", "patch": "@@ -61,7 +61,7 @@ use crate::traits::query::{\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n \n-use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::fingerprint::{Fingerprint, PackedFingerprint};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::definitions::DefPathHash;\n use rustc_hir::HirId;\n@@ -193,6 +193,15 @@ macro_rules! define_dep_nodes {\n \n         pub type DepNode = rustc_query_system::dep_graph::DepNode<DepKind>;\n \n+        // We keep a lot of `DepNode`s in memory during compilation. It's not\n+        // required that their size stay the same, but we don't want to change\n+        // it inadvertently. This assert just ensures we're aware of any change.\n+        #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+        static_assert_size!(DepNode, 17);\n+\n+        #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n+        static_assert_size!(DepNode, 24);\n+\n         pub trait DepNodeExt: Sized {\n             /// Construct a DepNode from the given DepKind and DefPathHash. This\n             /// method will assert that the given DepKind actually requires a\n@@ -227,7 +236,7 @@ macro_rules! define_dep_nodes {\n                 debug_assert!(kind.can_reconstruct_query_key() && kind.has_params());\n                 DepNode {\n                     kind,\n-                    hash: def_path_hash.0,\n+                    hash: PackedFingerprint(def_path_hash.0),\n                 }\n             }\n \n@@ -243,7 +252,7 @@ macro_rules! define_dep_nodes {\n             /// has been removed.\n             fn extract_def_id(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n                 if self.kind.can_reconstruct_query_key() {\n-                    let def_path_hash = DefPathHash(self.hash);\n+                    let def_path_hash = DefPathHash(self.hash.0);\n                     tcx.def_path_hash_to_def_id.as_ref()?.get(&def_path_hash).cloned()\n                 } else {\n                     None"}, {"sha": "2ab3834468cc32f547ac5d47c497642cf1e7ef21", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f09d474836d14811af1f9ebead4c1649c54e4e4c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09d474836d14811af1f9ebead4c1649c54e4e4c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=f09d474836d14811af1f9ebead4c1649c54e4e4c", "patch": "@@ -44,7 +44,7 @@\n \n use super::{DepContext, DepKind};\n \n-use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::fingerprint::{Fingerprint, PackedFingerprint};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n use std::fmt;\n@@ -53,7 +53,7 @@ use std::hash::Hash;\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n pub struct DepNode<K> {\n     pub kind: K,\n-    pub hash: Fingerprint,\n+    pub hash: PackedFingerprint,\n }\n \n impl<K: DepKind> DepNode<K> {\n@@ -62,7 +62,7 @@ impl<K: DepKind> DepNode<K> {\n     /// does not require any parameters.\n     pub fn new_no_params(kind: K) -> DepNode<K> {\n         debug_assert!(!kind.has_params());\n-        DepNode { kind, hash: Fingerprint::ZERO }\n+        DepNode { kind, hash: PackedFingerprint(Fingerprint::ZERO) }\n     }\n \n     pub fn construct<Ctxt, Key>(tcx: Ctxt, kind: K, arg: &Key) -> DepNode<K>\n@@ -71,7 +71,7 @@ impl<K: DepKind> DepNode<K> {\n         Key: DepNodeParams<Ctxt>,\n     {\n         let hash = arg.to_fingerprint(tcx);\n-        let dep_node = DepNode { kind, hash };\n+        let dep_node = DepNode { kind, hash: PackedFingerprint(hash) };\n \n         #[cfg(debug_assertions)]\n         {"}, {"sha": "893017ac3bc87a66d6812c1b9e160e5991c27660", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09d474836d14811af1f9ebead4c1649c54e4e4c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09d474836d14811af1f9ebead4c1649c54e4e4c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=f09d474836d14811af1f9ebead4c1649c54e4e4c", "patch": "@@ -1,4 +1,4 @@\n-use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::fingerprint::{Fingerprint, PackedFingerprint};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::QueryInvocationId;\n use rustc_data_structures::sharded::{self, Sharded};\n@@ -976,7 +976,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n             // Fingerprint::combine() is faster than sending Fingerprint\n             // through the StableHasher (at least as long as StableHasher\n             // is so slow).\n-            hash: self.anon_id_seed.combine(hasher.finish()),\n+            hash: PackedFingerprint(self.anon_id_seed.combine(hasher.finish())),\n         };\n \n         self.intern_node(target_dep_node, task_deps.reads, Fingerprint::ZERO)"}]}