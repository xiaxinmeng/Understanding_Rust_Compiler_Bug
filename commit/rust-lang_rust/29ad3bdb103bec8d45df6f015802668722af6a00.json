{"sha": "29ad3bdb103bec8d45df6f015802668722af6a00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YWQzYmRiMTAzYmVjOGQ0NWRmNmYwMTU4MDI2Njg3MjJhZjZhMDA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-18T22:07:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T01:23:48Z"}, "message": "Make fn denote a bare function. Convert fn to fn@ as needed", "tree": {"sha": "81154dcf545b6848eb54cc780aa44273cb61aefb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81154dcf545b6848eb54cc780aa44273cb61aefb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29ad3bdb103bec8d45df6f015802668722af6a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29ad3bdb103bec8d45df6f015802668722af6a00", "html_url": "https://github.com/rust-lang/rust/commit/29ad3bdb103bec8d45df6f015802668722af6a00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29ad3bdb103bec8d45df6f015802668722af6a00/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f324704c0a010a2ba89bec67d89eb6eccfa4e412", "url": "https://api.github.com/repos/rust-lang/rust/commits/f324704c0a010a2ba89bec67d89eb6eccfa4e412", "html_url": "https://github.com/rust-lang/rust/commit/f324704c0a010a2ba89bec67d89eb6eccfa4e412"}], "stats": {"total": 511, "additions": 263, "deletions": 248}, "files": [{"sha": "425b43f7ce6de78065259b041c9dbc6a31fb9624", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -88,7 +88,7 @@ fn parse_input_src(sess: session::session, cfg: ast::crate_cfg, infile: str)\n     ret {crate: crate, src: src};\n }\n \n-fn time<@T>(do_it: bool, what: str, thunk: fn() -> T) -> T {\n+fn time<@T>(do_it: bool, what: str, thunk: fn@() -> T) -> T {\n     if !do_it { ret thunk(); }\n     let start = std::time::precise_time_s();\n     let rv = thunk();"}, {"sha": "e9e4b0aed3467563e530a52603d393464eb39762", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -12,7 +12,7 @@ import front::attr;\n \n export modify_for_testing;\n \n-type node_id_gen = fn() -> ast::node_id;\n+type node_id_gen = fn@() -> ast::node_id;\n \n type test = {span: span, path: [ast::ident], ignore: bool};\n \n@@ -369,7 +369,7 @@ fn mk_main(cx: test_ctxt) -> @ast::item {\n          il: ast::il_normal,\n          cf: ast::return_val,\n          constraints: []};\n-    let proto = ast::proto_fn;\n+    let proto = ast::proto_bare;\n \n     let test_main_call_expr = mk_test_main_call(cx);\n "}, {"sha": "fe97845a4483d2825a85f4068f31225dcfb6b12d", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -28,9 +28,9 @@ export external_resolver;\n // def_id for an item defined in another crate, somebody needs to figure out\n // what crate that's in and give us a def_id that makes sense for the current\n // build.\n-type external_resolver = fn(ast::def_id) -> ast::def_id;\n+type external_resolver = fn@(ast::def_id) -> ast::def_id;\n \n-fn lookup_hash(d: ebml::doc, eq_fn: fn([u8]) -> bool, hash: uint) ->\n+fn lookup_hash(d: ebml::doc, eq_fn: fn@([u8]) -> bool, hash: uint) ->\n    [ebml::doc] {\n     let index = ebml::get_doc(d, tag_index);\n     let table = ebml::get_doc(index, tag_index_table);"}, {"sha": "4d56d5ae6addc7c45851b994232947be9fda4335", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -16,7 +16,7 @@ export parse_ty_data;\n // data buffer. Whatever format you choose should not contain pipe characters.\n \n // Callback to translate defs to strs or back:\n-type str_def = fn(str) -> ast::def_id;\n+type str_def = fn@(str) -> ast::def_id;\n \n type pstate =\n     {data: @[u8], crate: int, mutable pos: uint, len: uint, tcx: ty::ctxt};\n@@ -34,7 +34,7 @@ fn parse_ident(st: @pstate, sd: str_def, last: char) -> ast::ident {\n     ret parse_ident_(st, sd, bind is_last(last, _));\n }\n \n-fn parse_ident_(st: @pstate, _sd: str_def, is_last: fn(char) -> bool) ->\n+fn parse_ident_(st: @pstate, _sd: str_def, is_last: fn@(char) -> bool) ->\n    ast::ident {\n     let rslt = \"\";\n     while !is_last(peek(st) as char) {"}, {"sha": "ea6d57e351b048145923e04ce05414e0e0fef3e6", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -24,7 +24,7 @@ type freevar_map = hashmap<ast::node_id, freevar_info>;\n // Since we want to be able to collect upvars in some arbitrary piece\n // of the AST, we take a walker function that we invoke with a visitor\n // in order to start the search.\n-fn collect_freevars(def_map: resolve::def_map, walker: fn(visit::vt<int>)) ->\n+fn collect_freevars(def_map: resolve::def_map, walker: fn@(visit::vt<int>)) ->\n    freevar_info {\n     let seen = new_int_hash();\n     let refs = @mutable [];"}, {"sha": "96b70568bf500777cf16f52bed7631bcc8429a78", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -595,6 +595,7 @@ fn lookup_in_scope_strict(e: env, sc: scopes, sp: span, name: ident,\n fn scope_is_fn(sc: scope) -> bool {\n     ret alt sc {\n           scope_fn(_, ast::proto_iter., _) | scope_fn(_, ast::proto_fn., _) |\n+          scope_fn(_, ast::proto_bare., _) |\n           scope_native_item(_) {\n             true\n           }"}, {"sha": "814a287bbc66f89e3db5568420705e0c7a0a7600", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -109,7 +109,7 @@ fn matches_always(p: @ast::pat) -> bool {\n         };\n }\n \n-type enter_pat = fn(@ast::pat) -> option::t<[@ast::pat]>;\n+type enter_pat = fn@(@ast::pat) -> option::t<[@ast::pat]>;\n \n fn enter_match(m: match, col: uint, val: ValueRef, e: enter_pat) -> match {\n     let result = [];\n@@ -314,7 +314,7 @@ fn any_tup_pat(m: match, col: uint) -> bool {\n }\n \n type exit_node = {bound: bind_map, from: BasicBlockRef, to: BasicBlockRef};\n-type mk_fail = fn() -> BasicBlockRef;\n+type mk_fail = fn@() -> BasicBlockRef;\n \n fn pick_col(m: match) -> uint {\n     let scores = vec::init_elt_mut(0u, vec::len(m[0].pats));"}, {"sha": "651ac61277e1e1f77e8d32324b0ac8cec6972634", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -259,8 +259,8 @@ type fn_ctxt =\n      lcx: @local_ctxt};\n \n tag cleanup {\n-    clean(fn(@block_ctxt) -> @block_ctxt);\n-    clean_temp(ValueRef, fn(@block_ctxt) -> @block_ctxt);\n+    clean(fn@(@block_ctxt) -> @block_ctxt);\n+    clean_temp(ValueRef, fn@(@block_ctxt) -> @block_ctxt);\n }\n \n fn add_clean(cx: @block_ctxt, val: ValueRef, ty: ty::t) {"}, {"sha": "9a0b1059bf2fbd9b45c94a5a784ba5607a374b54", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -151,7 +151,7 @@ fn relax_precond_block(fcx: fn_ctxt, i: node_id, b: blk) {\n           visit_stmt: relax_precond_stmt,\n           visit_item:\n               fn (_i: @item, _cx: relax_ctxt, _vt: visit::vt<relax_ctxt>) { },\n-          visit_fn: do_nothing\n+          visit_fn: bind do_nothing(_, _, _, _, _, _, _)\n              with *visitor};\n     let v1 = visit::mk_vt(visitor);\n     v1.visit_block(b, cx, v1);"}, {"sha": "2d1167bcc2d46b870388b191057adcdda3a751ae", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -111,7 +111,8 @@ fn check_states_against_conditions(fcx: fn_ctxt, f: _fn, tps: [ast::ty_param],\n     visitor =\n         @{visit_stmt: check_states_stmt,\n           visit_expr: check_states_expr,\n-          visit_fn: do_nothing with *visitor};\n+          visit_fn: bind do_nothing(_, _, _, _, _, _, _)\n+              with *visitor};\n     visit::visit_fn(f, tps, sp, i, id, fcx, visit::mk_vt(visitor));\n \n     /* Check that the return value is initialized */"}, {"sha": "64c8a6c91741aac0ba056fbfa320f44348cb0fcb", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -54,7 +54,8 @@ fn find_locals(tcx: ty::ctxt, f: _fn, tps: [ty_param], sp: span, i: fn_ident,\n     visitor =\n         @{visit_local: collect_local,\n           visit_expr: collect_pred,\n-          visit_fn: do_nothing with *visitor};\n+          visit_fn: bind do_nothing(_, _, _, _, _, _, _)\n+              with *visitor};\n     visit::visit_fn(f, tps, sp, i, id, cx, visit::mk_vt(visitor));\n     ret cx;\n }"}, {"sha": "512b648fe0ce19fea430baaf4838505e37edc8a9", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -603,7 +603,7 @@ fn cname(cx: ctxt, typ: t) -> option::t<str> {\n \n \n // Type folds\n-type ty_walk = fn(t);\n+type ty_walk = fn@(t);\n \n fn walk_ty(cx: ctxt, walker: ty_walk, ty: t) {\n     alt struct(cx, ty) {\n@@ -655,9 +655,9 @@ fn walk_ty(cx: ctxt, walker: ty_walk, ty: t) {\n }\n \n tag fold_mode {\n-    fm_var(fn(int) -> t);\n-    fm_param(fn(uint, ast::kind) -> t);\n-    fm_general(fn(t) -> t);\n+    fm_var(fn@(int) -> t);\n+    fm_param(fn@(uint, ast::kind) -> t);\n+    fm_general(fn@(t) -> t);\n }\n \n fn fold_ty(cx: ctxt, fld: fold_mode, ty_0: t) -> t {\n@@ -2712,13 +2712,14 @@ fn type_err_to_str(err: ty::type_err) -> str {\n \n // Converts type parameters in a type to type variables and returns the\n // resulting type along with a list of type variable IDs.\n-fn bind_params_in_type(sp: span, cx: ctxt, next_ty_var: fn() -> int, typ: t,\n+fn bind_params_in_type(sp: span, cx: ctxt, next_ty_var: fn@() -> int, typ: t,\n                        ty_param_count: uint) -> {ids: [int], ty: t} {\n     let param_var_ids: @mutable [int] = @mutable [];\n     let i = 0u;\n     while i < ty_param_count { *param_var_ids += [next_ty_var()]; i += 1u; }\n     fn binder(sp: span, cx: ctxt, param_var_ids: @mutable [int],\n-              _next_ty_var: fn() -> int, index: uint, _kind: ast::kind) -> t {\n+              _next_ty_var: fn@() -> int, index: uint,\n+              _kind: ast::kind) -> t {\n         if index < vec::len(*param_var_ids) {\n             ret mk_var(cx, param_var_ids[index]);\n         } else {"}, {"sha": "6bb9529042aa96660590d6b98ae96533266e2adf", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -53,7 +53,7 @@ type fn_ctxt =\n \n \n // Used for ast_ty_to_ty() below.\n-type ty_getter = fn(ast::def_id) -> ty::ty_param_kinds_and_ty;\n+type ty_getter = fn@(ast::def_id) -> ty::ty_param_kinds_and_ty;\n \n fn lookup_local(fcx: @fn_ctxt, sp: span, id: ast::node_id) -> int {\n     alt fcx.locals.find(id) {\n@@ -516,8 +516,8 @@ mod collect {\n         ret k;\n     }\n \n-    fn ty_of_fn_decl(cx: @ctxt, convert: fn(&&@ast::ty) -> ty::t,\n-                     ty_of_arg: fn(ast::arg) -> arg, decl: ast::fn_decl,\n+    fn ty_of_fn_decl(cx: @ctxt, convert: fn@(&&@ast::ty) -> ty::t,\n+                     ty_of_arg: fn@(ast::arg) -> arg, decl: ast::fn_decl,\n                      proto: ast::proto, ty_params: [ast::ty_param],\n                      def_id: option::t<ast::def_id>) ->\n        ty::ty_param_kinds_and_ty {\n@@ -536,8 +536,8 @@ mod collect {\n         alt def_id { some(did) { cx.tcx.tcache.insert(did, tpt); } _ { } }\n         ret tpt;\n     }\n-    fn ty_of_native_fn_decl(cx: @ctxt, convert: fn(&&@ast::ty) -> ty::t,\n-                            ty_of_arg: fn(ast::arg) -> arg,\n+    fn ty_of_native_fn_decl(cx: @ctxt, convert: fn@(&&@ast::ty) -> ty::t,\n+                            ty_of_arg: fn@(ast::arg) -> arg,\n                             decl: ast::fn_decl, abi: ast::native_abi,\n                             ty_params: [ast::ty_param], def_id: ast::def_id)\n        -> ty::ty_param_kinds_and_ty {\n@@ -1227,8 +1227,10 @@ fn gather_locals(ccx: @crate_ctxt, f: ast::_fn, id: ast::node_id,\n     let visit =\n         @{visit_local: visit_local,\n           visit_pat: visit_pat,\n-          visit_fn: visit_fn,\n-          visit_item: visit_item with *visit::default_visitor()};\n+          visit_fn: bind visit_fn(_, _, _, _, _, _, _),\n+          visit_item: bind visit_item(_, _, _)\n+              with *visit::default_visitor()};\n+\n     visit::visit_block(f.body, (), visit::mk_vt(visit));\n     ret {var_bindings: vb,\n          locals: locals,\n@@ -2787,7 +2789,7 @@ fn arg_is_argv_ty(tcx: ty::ctxt, a: ty::arg) -> bool {\n fn check_main_fn_ty(tcx: ty::ctxt, main_id: ast::node_id) {\n     let main_t = ty::node_id_to_monotype(tcx, main_id);\n     alt ty::struct(tcx, main_t) {\n-      ty::ty_fn(ast::proto_fn., args, rs, ast::return_val., constrs) {\n+      ty::ty_fn(ast::proto_bare., args, rs, ast::return_val., constrs) {\n         let ok = vec::len(constrs) == 0u;\n         ok &= ty::type_is_nil(tcx, rs);\n         let num_args = vec::len(args);"}, {"sha": "fb3b7caa3ca0189d8b46a1d2ab7563a73cb78b03", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -6,10 +6,10 @@ import std::map::new_str_hash;\n import codemap;\n \n type syntax_expander =\n-    fn(ext_ctxt, span, @ast::expr, option::t<str>) -> @ast::expr;\n+    fn@(ext_ctxt, span, @ast::expr, option::t<str>) -> @ast::expr;\n type macro_def = {ident: str, ext: syntax_extension};\n type macro_definer =\n-    fn(ext_ctxt, span, @ast::expr, option::t<str>) -> macro_def;\n+    fn@(ext_ctxt, span, @ast::expr, option::t<str>) -> macro_def;\n \n tag syntax_extension {\n     normal(syntax_expander);"}, {"sha": "81a50d2f0b7c0492c46873c043b244d2139b1fab", "filename": "src/comp/syntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -11,7 +11,7 @@ import syntax::ext::base::*;\n \n \n fn expand_expr(exts: hashmap<str, syntax_extension>, cx: ext_ctxt, e: expr_,\n-               fld: ast_fold, orig: fn(expr_, ast_fold) -> expr_) -> expr_ {\n+               fld: ast_fold, orig: fn@(expr_, ast_fold) -> expr_) -> expr_ {\n     ret alt e {\n           expr_mac(mac) {\n             alt mac.node {"}, {"sha": "d7b4214f2d0bce45b9473e24b47179c45fab01a9", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -72,7 +72,7 @@ fn match_error(cx: ext_ctxt, m: matchable, expected: str) -> ! {\n // we'll want to return something indicating amount of progress and location\n // of failure instead of `none`.\n type match_result = option::t<arb_depth<matchable>>;\n-type selector = fn(matchable) -> match_result;\n+type selector = fn@(matchable) -> match_result;\n \n fn elts_to_ell(cx: ext_ctxt, elts: [@expr]) ->\n    {pre: [@expr], rep: option::t<@expr>, post: [@expr]} {\n@@ -104,7 +104,7 @@ fn elts_to_ell(cx: ext_ctxt, elts: [@expr]) ->\n         }\n }\n \n-fn option_flatten_map<T, @U>(f: fn(T) -> option::t<U>, v: [T]) ->\n+fn option_flatten_map<T, @U>(f: fn@(T) -> option::t<U>, v: [T]) ->\n    option::t<[U]> {\n     let res = [];\n     for elem: T in v {\n@@ -263,7 +263,7 @@ iter free_vars(b: bindings, e: @expr) -> ident {\n \n /* handle sequences (anywhere in the AST) of exprs, either real or ...ed */\n fn transcribe_exprs(cx: ext_ctxt, b: bindings, idx_path: @mutable [uint],\n-                    recur: fn(&&@expr) -> @expr, exprs: [@expr]) -> [@expr] {\n+                    recur: fn@(&&@expr) -> @expr, exprs: [@expr]) -> [@expr] {\n     alt elts_to_ell(cx, exprs) {\n       {pre: pre, rep: repeat_me_maybe, post: post} {\n         let res = vec::map(recur, pre);\n@@ -351,7 +351,7 @@ fn transcribe_path(cx: ext_ctxt, b: bindings, idx_path: @mutable [uint],\n \n fn transcribe_expr(cx: ext_ctxt, b: bindings, idx_path: @mutable [uint],\n                    e: ast::expr_, fld: ast_fold,\n-                   orig: fn(ast::expr_, ast_fold) -> ast::expr_) ->\n+                   orig: fn@(ast::expr_, ast_fold) -> ast::expr_) ->\n    ast::expr_ {\n     ret alt e {\n           expr_path(p) {\n@@ -378,7 +378,7 @@ fn transcribe_expr(cx: ext_ctxt, b: bindings, idx_path: @mutable [uint],\n \n fn transcribe_type(cx: ext_ctxt, b: bindings, idx_path: @mutable [uint],\n                    t: ast::ty_, fld: ast_fold,\n-                   orig: fn(ast::ty_, ast_fold) -> ast::ty_) -> ast::ty_ {\n+                   orig: fn@(ast::ty_, ast_fold) -> ast::ty_) -> ast::ty_ {\n     ret alt t {\n           ast::ty_path(pth, _) {\n             alt path_to_ident(pth) {\n@@ -402,7 +402,7 @@ fn transcribe_type(cx: ext_ctxt, b: bindings, idx_path: @mutable [uint],\n \n fn transcribe_block(cx: ext_ctxt, b: bindings, idx_path: @mutable [uint],\n                     blk: blk_, fld: ast_fold,\n-                    orig: fn(blk_, ast_fold) -> blk_) -> blk_ {\n+                    orig: fn@(blk_, ast_fold) -> blk_) -> blk_ {\n     ret alt block_to_ident(blk) {\n           some(id) {\n             alt follow_for_trans(cx, b.find(id), idx_path) {"}, {"sha": "4e384efd5b2a5337c9db85af7af2d5caa59b4465", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 80, "deletions": 77, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -20,58 +20,59 @@ type ast_fold = @mutable a_f;\n \n type ast_fold_precursor =\n     //unlike the others, item_ is non-trivial\n-    {fold_crate: fn(crate_, ast_fold) -> crate_,\n-     fold_crate_directive: fn(crate_directive_, ast_fold) -> crate_directive_,\n-     fold_view_item: fn(view_item_, ast_fold) -> view_item_,\n-     fold_native_item: fn(&&@native_item, ast_fold) -> @native_item,\n-     fold_item: fn(&&@item, ast_fold) -> @item,\n-     fold_item_underscore: fn(item_, ast_fold) -> item_,\n-     fold_method: fn(method_, ast_fold) -> method_,\n-     fold_block: fn(blk_, ast_fold) -> blk_,\n-     fold_stmt: fn(stmt_, ast_fold) -> stmt_,\n-     fold_arm: fn(arm, ast_fold) -> arm,\n-     fold_pat: fn(pat_, ast_fold) -> pat_,\n-     fold_decl: fn(decl_, ast_fold) -> decl_,\n-     fold_expr: fn(expr_, ast_fold) -> expr_,\n-     fold_ty: fn(ty_, ast_fold) -> ty_,\n-     fold_constr: fn(ast::constr_, ast_fold) -> constr_,\n-     fold_fn: fn(_fn, ast_fold) -> _fn,\n-     fold_mod: fn(_mod, ast_fold) -> _mod,\n-     fold_native_mod: fn(native_mod, ast_fold) -> native_mod,\n-     fold_variant: fn(variant_, ast_fold) -> variant_,\n-     fold_ident: fn(&&ident, ast_fold) -> ident,\n-     fold_path: fn(path_, ast_fold) -> path_,\n-     fold_local: fn(local_, ast_fold) -> local_,\n-     map_exprs: fn(fn(&&@expr) -> @expr, [@expr]) -> [@expr],\n-     new_id: fn(node_id) -> node_id,\n-     new_span: fn(span) -> span};\n+    {fold_crate: fn@(crate_, ast_fold) -> crate_,\n+     fold_crate_directive: fn@(crate_directive_,\n+                               ast_fold) -> crate_directive_,\n+     fold_view_item: fn@(view_item_, ast_fold) -> view_item_,\n+     fold_native_item: fn@(&&@native_item, ast_fold) -> @native_item,\n+     fold_item: fn@(&&@item, ast_fold) -> @item,\n+     fold_item_underscore: fn@(item_, ast_fold) -> item_,\n+     fold_method: fn@(method_, ast_fold) -> method_,\n+     fold_block: fn@(blk_, ast_fold) -> blk_,\n+     fold_stmt: fn@(stmt_, ast_fold) -> stmt_,\n+     fold_arm: fn@(arm, ast_fold) -> arm,\n+     fold_pat: fn@(pat_, ast_fold) -> pat_,\n+     fold_decl: fn@(decl_, ast_fold) -> decl_,\n+     fold_expr: fn@(expr_, ast_fold) -> expr_,\n+     fold_ty: fn@(ty_, ast_fold) -> ty_,\n+     fold_constr: fn@(ast::constr_, ast_fold) -> constr_,\n+     fold_fn: fn@(_fn, ast_fold) -> _fn,\n+     fold_mod: fn@(_mod, ast_fold) -> _mod,\n+     fold_native_mod: fn@(native_mod, ast_fold) -> native_mod,\n+     fold_variant: fn@(variant_, ast_fold) -> variant_,\n+     fold_ident: fn@(&&ident, ast_fold) -> ident,\n+     fold_path: fn@(path_, ast_fold) -> path_,\n+     fold_local: fn@(local_, ast_fold) -> local_,\n+     map_exprs: fn@(fn@(&&@expr) -> @expr, [@expr]) -> [@expr],\n+     new_id: fn@(node_id) -> node_id,\n+     new_span: fn@(span) -> span};\n \n type a_f =\n-    {fold_crate: fn(crate) -> crate,\n-     fold_crate_directive: fn(&&@crate_directive) -> @crate_directive,\n-     fold_view_item: fn(&&@view_item) -> @view_item,\n-     fold_native_item: fn(&&@native_item) -> @native_item,\n-     fold_item: fn(&&@item) -> @item,\n-     fold_item_underscore: fn(item_) -> item_,\n-     fold_method: fn(&&@method) -> @method,\n-     fold_block: fn(blk) -> blk,\n-     fold_stmt: fn(&&@stmt) -> @stmt,\n-     fold_arm: fn(arm) -> arm,\n-     fold_pat: fn(&&@pat) -> @pat,\n-     fold_decl: fn(&&@decl) -> @decl,\n-     fold_expr: fn(&&@expr) -> @expr,\n-     fold_ty: fn(&&@ty) -> @ty,\n-     fold_constr: fn(&&@constr) -> @constr,\n-     fold_fn: fn(_fn) -> _fn,\n-     fold_mod: fn(_mod) -> _mod,\n-     fold_native_mod: fn(native_mod) -> native_mod,\n-     fold_variant: fn(variant) -> variant,\n-     fold_ident: fn(&&ident) -> ident,\n-     fold_path: fn(path) -> path,\n-     fold_local: fn(&&@local) -> @local,\n-     map_exprs: fn(fn(&&@expr) -> @expr, [@expr]) -> [@expr],\n-     new_id: fn(node_id) -> node_id,\n-     new_span: fn(span) -> span};\n+    {fold_crate: fn@(crate) -> crate,\n+     fold_crate_directive: fn@(&&@crate_directive) -> @crate_directive,\n+     fold_view_item: fn@(&&@view_item) -> @view_item,\n+     fold_native_item: fn@(&&@native_item) -> @native_item,\n+     fold_item: fn@(&&@item) -> @item,\n+     fold_item_underscore: fn@(item_) -> item_,\n+     fold_method: fn@(&&@method) -> @method,\n+     fold_block: fn@(blk) -> blk,\n+     fold_stmt: fn@(&&@stmt) -> @stmt,\n+     fold_arm: fn@(arm) -> arm,\n+     fold_pat: fn@(&&@pat) -> @pat,\n+     fold_decl: fn@(&&@decl) -> @decl,\n+     fold_expr: fn@(&&@expr) -> @expr,\n+     fold_ty: fn@(&&@ty) -> @ty,\n+     fold_constr: fn@(&&@constr) -> @constr,\n+     fold_fn: fn@(_fn) -> _fn,\n+     fold_mod: fn@(_mod) -> _mod,\n+     fold_native_mod: fn@(native_mod) -> native_mod,\n+     fold_variant: fn@(variant) -> variant,\n+     fold_ident: fn@(&&ident) -> ident,\n+     fold_path: fn@(path) -> path,\n+     fold_local: fn@(&&@local) -> @local,\n+     map_exprs: fn@(fn@(&&@expr) -> @expr, [@expr]) -> [@expr],\n+     new_id: fn@(node_id) -> node_id,\n+     new_span: fn@(span) -> span};\n \n \n //fn nf_dummy<T>(&T node) -> T { fail; }\n@@ -119,7 +120,7 @@ fn fold_meta_item_(&&mi: @meta_item, fld: ast_fold) -> @meta_item {\n           span: mi.span};\n }\n //used in noop_fold_item and noop_fold_crate\n-fn fold_attribute_(at: attribute, fmi: fn(&&@meta_item) -> @meta_item) ->\n+fn fold_attribute_(at: attribute, fmi: fn@(&&@meta_item) -> @meta_item) ->\n    attribute {\n     ret {node: {style: at.node.style, value: *fmi(@at.node.value)},\n          span: at.span};\n@@ -495,7 +496,7 @@ fn noop_fold_local(l: local_, fld: ast_fold) -> local_ {\n \n /* temporarily eta-expand because of a compiler bug with using `fn<T>` as a\n    value */\n-fn noop_map_exprs(f: fn(&&@expr) -> @expr, es: [@expr]) -> [@expr] {\n+fn noop_map_exprs(f: fn@(&&@expr) -> @expr, es: [@expr]) -> [@expr] {\n     ret vec::map(f, es);\n }\n \n@@ -568,32 +569,34 @@ resource foldres(f: ast_fold) {\n }\n \n fn make_fold(afp: ast_fold_precursor) -> @foldres {\n+    // FIXME: Have to bind all the bare functions into shared functions\n+    // because @mutable is invariant with respect to its contents\n     let result: ast_fold =\n-        @mutable {fold_crate: nf_crate_dummy,\n-                  fold_crate_directive: nf_crate_directive_dummy,\n-                  fold_view_item: nf_view_item_dummy,\n-                  fold_native_item: nf_native_item_dummy,\n-                  fold_item: nf_item_dummy,\n-                  fold_item_underscore: nf_item_underscore_dummy,\n-                  fold_method: nf_method_dummy,\n-                  fold_block: nf_blk_dummy,\n-                  fold_stmt: nf_stmt_dummy,\n-                  fold_arm: nf_arm_dummy,\n-                  fold_pat: nf_pat_dummy,\n-                  fold_decl: nf_decl_dummy,\n-                  fold_expr: nf_expr_dummy,\n-                  fold_ty: nf_ty_dummy,\n-                  fold_constr: nf_constr_dummy,\n-                  fold_fn: nf_fn_dummy,\n-                  fold_mod: nf_mod_dummy,\n-                  fold_native_mod: nf_native_mod_dummy,\n-                  fold_variant: nf_variant_dummy,\n-                  fold_ident: nf_ident_dummy,\n-                  fold_path: nf_path_dummy,\n-                  fold_local: nf_local_dummy,\n-                  map_exprs: noop_map_exprs,\n-                  new_id: noop_id,\n-                  new_span: noop_span};\n+        @mutable {fold_crate: bind nf_crate_dummy(_),\n+                  fold_crate_directive: bind nf_crate_directive_dummy(_),\n+                  fold_view_item: bind nf_view_item_dummy(_),\n+                  fold_native_item: bind nf_native_item_dummy(_),\n+                  fold_item: bind nf_item_dummy(_),\n+                  fold_item_underscore: bind nf_item_underscore_dummy(_),\n+                  fold_method: bind nf_method_dummy(_),\n+                  fold_block: bind nf_blk_dummy(_),\n+                  fold_stmt: bind nf_stmt_dummy(_),\n+                  fold_arm: bind nf_arm_dummy(_),\n+                  fold_pat: bind nf_pat_dummy(_),\n+                  fold_decl: bind nf_decl_dummy(_),\n+                  fold_expr: bind nf_expr_dummy(_),\n+                  fold_ty: bind nf_ty_dummy(_),\n+                  fold_constr: bind nf_constr_dummy(_),\n+                  fold_fn: bind nf_fn_dummy(_),\n+                  fold_mod: bind nf_mod_dummy(_),\n+                  fold_native_mod: bind nf_native_mod_dummy(_),\n+                  fold_variant: bind nf_variant_dummy(_),\n+                  fold_ident: bind nf_ident_dummy(_),\n+                  fold_path: bind nf_path_dummy(_),\n+                  fold_local: bind nf_local_dummy(_),\n+                  map_exprs: bind noop_map_exprs(_, _),\n+                  new_id: bind noop_id(_),\n+                  new_span: bind noop_span(_)};\n \n     /* naturally, a macro to write these would be nice */\n     fn f_crate(afp: ast_fold_precursor, f: ast_fold, c: crate) -> crate {"}, {"sha": "3846e9dc03b9358f6b8cea1e2c786a8a1bd2638d", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -390,7 +390,8 @@ fn parse_constr_in_type(p: parser) -> @ast::ty_constr {\n }\n \n \n-fn parse_constrs<T>(pser: fn(parser) -> @ast::constr_general<T>, p: parser) ->\n+fn parse_constrs<T>(pser: fn@(parser) -> @ast::constr_general<T>,\n+                    p: parser) ->\n    [@ast::constr_general<T>] {\n     let constrs: [@ast::constr_general<T>] = [];\n     while true {\n@@ -602,7 +603,7 @@ fn parse_fn_block_arg(p: parser) -> ast::arg {\n }\n \n fn parse_seq_to_before_gt<@T>(sep: option::t<token::token>,\n-                              f: fn(parser) -> T,\n+                              f: fn@(parser) -> T,\n                               p: parser) -> [T] {\n     let first = true;\n     let v = [];\n@@ -618,15 +619,15 @@ fn parse_seq_to_before_gt<@T>(sep: option::t<token::token>,\n     ret v;\n }\n \n-fn parse_seq_to_gt<@T>(sep: option::t<token::token>, f: fn(parser) -> T,\n+fn parse_seq_to_gt<@T>(sep: option::t<token::token>, f: fn@(parser) -> T,\n                       p: parser) -> [T] {\n     let v = parse_seq_to_before_gt(sep, f, p);\n     expect_gt(p);\n \n     ret v;\n }\n \n-fn parse_seq_lt_gt<@T>(sep: option::t<token::token>, f: fn(parser) -> T,\n+fn parse_seq_lt_gt<@T>(sep: option::t<token::token>, f: fn@(parser) -> T,\n                       p: parser) -> spanned<[T]> {\n     let lo = p.get_lo_pos();\n     expect(p, token::LT);\n@@ -645,7 +646,7 @@ fn parse_seq_to_end<@T>(ket: token::token, sep: option::t<token::token>,\n \n fn parse_seq_to_before_end<@T>(ket: token::token,\n                                sep: option::t<token::token>,\n-                               f: fn(parser) -> T, p: parser) -> [T] {\n+                               f: fn@(parser) -> T, p: parser) -> [T] {\n     let first: bool = true;\n     let v: [T] = [];\n     while p.peek() != ket {\n@@ -660,7 +661,7 @@ fn parse_seq_to_before_end<@T>(ket: token::token,\n \n \n fn parse_seq<@T>(bra: token::token, ket: token::token,\n-                sep: option::t<token::token>, f: fn(parser) -> T, p: parser)\n+                sep: option::t<token::token>, f: fn@(parser) -> T, p: parser)\n    -> spanned<[T]> {\n     let lo = p.get_lo_pos();\n     expect(p, bra);\n@@ -2141,7 +2142,7 @@ fn parse_fn_item_proto(p: parser) -> ast::proto {\n         p.bump();\n         ast::proto_fn\n     } else {\n-        ast::proto_fn\n+        ast::proto_bare\n     }\n }\n \n@@ -2153,7 +2154,7 @@ fn parse_fn_ty_proto(p: parser) -> ast::proto {\n         p.bump();\n         ast::proto_fn\n     } else {\n-        ast::proto_fn\n+        ast::proto_bare\n     }\n }\n \n@@ -2165,7 +2166,7 @@ fn parse_fn_anon_proto(p: parser) -> ast::proto {\n         p.bump();\n         ast::proto_fn\n     } else {\n-        ast::proto_fn\n+        ast::proto_bare\n     }\n }\n \n@@ -2198,7 +2199,8 @@ fn parse_item(p: parser, attrs: [ast::attribute]) -> option::t<@ast::item> {\n     } else if is_word(p, \"unsafe\") && p.look_ahead(1u) != token::LBRACE {\n         p.bump();\n         expect_word(p, \"fn\");\n-        ret some(parse_item_fn_or_iter(p, ast::unsafe_fn, ast::proto_fn,\n+        let proto = parse_fn_item_proto(p);\n+        ret some(parse_item_fn_or_iter(p, ast::unsafe_fn, proto,\n                                        attrs, ast::il_normal));\n     } else if eat_word(p, \"iter\") {\n         ret some(parse_item_fn_or_iter(p, ast::impure_fn, ast::proto_iter,"}, {"sha": "008cbac0218a833f3fe7dba50cf88c62a241a872", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -18,7 +18,7 @@ tag ann_node {\n     node_expr(ps, @ast::expr);\n     node_pat(ps, @ast::pat);\n }\n-type pp_ann = {pre: fn(ann_node), post: fn(ann_node)};\n+type pp_ann = {pre: fn@(ann_node), post: fn@(ann_node)};\n \n fn no_ann() -> pp_ann {\n     fn ignore(_node: ann_node) { }\n@@ -352,7 +352,7 @@ fn print_native_item(s: ps, item: @ast::native_item) {\n \n \n       ast::native_item_fn(lname, decl, typarams) {\n-        print_fn(s, decl, ast::proto_fn, item.ident, typarams,\n+        print_fn(s, decl, ast::proto_bare, item.ident, typarams,\n                  decl.constraints);\n         alt lname {\n           none. { }\n@@ -1557,7 +1557,7 @@ fn escape_str(st: str, to_escape: char) -> str {\n     ret out;\n }\n \n-fn to_str<T>(t: T, f: fn(ps, T)) -> str {\n+fn to_str<T>(t: T, f: fn@(ps, T)) -> str {\n     let writer = io::string_writer();\n     let s = rust_printer(writer.get_writer());\n     f(s, t);\n@@ -1578,7 +1578,7 @@ fn next_comment(s: ps) -> option::t<lexer::cmnt> {\n \n // Removing the aliases from the type of f in the next two functions\n // triggers memory corruption, but I haven't isolated the bug yet. FIXME\n-fn constr_args_to_str<T>(f: fn(T) -> str, args: [@ast::sp_constr_arg<T>]) ->\n+fn constr_args_to_str<T>(f: fn@(T) -> str, args: [@ast::sp_constr_arg<T>]) ->\n    str {\n     let comma = false;\n     let s = \"(\";\n@@ -1590,7 +1590,7 @@ fn constr_args_to_str<T>(f: fn(T) -> str, args: [@ast::sp_constr_arg<T>]) ->\n     ret s;\n }\n \n-fn constr_arg_to_str<T>(f: fn(T) -> str, c: ast::constr_arg_general_<T>) ->\n+fn constr_arg_to_str<T>(f: fn@(T) -> str, c: ast::constr_arg_general_<T>) ->\n    str {\n     alt c {\n       ast::carg_base. { ret \"*\"; }\n@@ -1643,11 +1643,11 @@ fn ast_fn_constrs_str(decl: ast::fn_decl, constrs: [@ast::constr]) -> str {\n \n fn proto_to_str(p: ast::proto) -> str {\n     ret alt p {\n-          ast::proto_fn. { \"fn\" }\n+          ast::proto_fn. { \"fn@\" }\n           ast::proto_iter. { \"iter\" }\n           ast::proto_block. { \"block\" }\n           ast::proto_closure. { \"lambda\" }\n-          ast::proto_bare. { \"fn#\" }\n+          ast::proto_bare. { \"fn\" }\n         };\n }\n "}, {"sha": "98d6026ed84ec5ba52d11b8838cddbac238e5c6f", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -18,20 +18,20 @@ tag vt<E> { mk_vt(visitor<E>); }\n type visitor<E> =\n     // takes the components so that one function can be\n     // generic over constr and ty_constr\n-    @{visit_mod: fn(_mod, span, E, vt<E>),\n-      visit_view_item: fn(@view_item, E, vt<E>),\n-      visit_native_item: fn(@native_item, E, vt<E>),\n-      visit_item: fn(@item, E, vt<E>),\n-      visit_local: fn(@local, E, vt<E>),\n-      visit_block: fn(ast::blk, E, vt<E>),\n-      visit_stmt: fn(@stmt, E, vt<E>),\n-      visit_arm: fn(arm, E, vt<E>),\n-      visit_pat: fn(@pat, E, vt<E>),\n-      visit_decl: fn(@decl, E, vt<E>),\n-      visit_expr: fn(@expr, E, vt<E>),\n-      visit_ty: fn(@ty, E, vt<E>),\n-      visit_constr: fn(path, span, node_id, E, vt<E>),\n-      visit_fn: fn(_fn, [ty_param], span, fn_ident, node_id, E, vt<E>)};\n+    @{visit_mod: fn@(_mod, span, E, vt<E>),\n+      visit_view_item: fn@(@view_item, E, vt<E>),\n+      visit_native_item: fn@(@native_item, E, vt<E>),\n+      visit_item: fn@(@item, E, vt<E>),\n+      visit_local: fn@(@local, E, vt<E>),\n+      visit_block: fn@(ast::blk, E, vt<E>),\n+      visit_stmt: fn@(@stmt, E, vt<E>),\n+      visit_arm: fn@(arm, E, vt<E>),\n+      visit_pat: fn@(@pat, E, vt<E>),\n+      visit_decl: fn@(@decl, E, vt<E>),\n+      visit_expr: fn@(@expr, E, vt<E>),\n+      visit_ty: fn@(@ty, E, vt<E>),\n+      visit_constr: fn@(path, span, node_id, E, vt<E>),\n+      visit_fn: fn@(_fn, [ty_param], span, fn_ident, node_id, E, vt<E>)};\n \n fn default_visitor<E>() -> visitor<E> {\n     ret @{visit_mod: bind visit_mod::<E>(_, _, _, _),\n@@ -341,97 +341,97 @@ fn visit_arm<E>(a: arm, e: E, v: vt<E>) {\n type simple_visitor =\n     // takes the components so that one function can be\n     // generic over constr and ty_constr\n-    @{visit_mod: fn(_mod, span),\n-      visit_view_item: fn(@view_item),\n-      visit_native_item: fn(@native_item),\n-      visit_item: fn(@item),\n-      visit_local: fn(@local),\n-      visit_block: fn(ast::blk),\n-      visit_stmt: fn(@stmt),\n-      visit_arm: fn(arm),\n-      visit_pat: fn(@pat),\n-      visit_decl: fn(@decl),\n-      visit_expr: fn(@expr),\n-      visit_ty: fn(@ty),\n-      visit_constr: fn(path, span, node_id),\n-      visit_fn: fn(_fn, [ty_param], span, fn_ident, node_id)};\n+    @{visit_mod: fn@(_mod, span),\n+      visit_view_item: fn@(@view_item),\n+      visit_native_item: fn@(@native_item),\n+      visit_item: fn@(@item),\n+      visit_local: fn@(@local),\n+      visit_block: fn@(ast::blk),\n+      visit_stmt: fn@(@stmt),\n+      visit_arm: fn@(arm),\n+      visit_pat: fn@(@pat),\n+      visit_decl: fn@(@decl),\n+      visit_expr: fn@(@expr),\n+      visit_ty: fn@(@ty),\n+      visit_constr: fn@(path, span, node_id),\n+      visit_fn: fn@(_fn, [ty_param], span, fn_ident, node_id)};\n \n fn default_simple_visitor() -> simple_visitor {\n-    ret @{visit_mod: fn (_m: _mod, _sp: span) { },\n-          visit_view_item: fn (_vi: @view_item) { },\n-          visit_native_item: fn (_ni: @native_item) { },\n-          visit_item: fn (_i: @item) { },\n-          visit_local: fn (_l: @local) { },\n-          visit_block: fn (_b: ast::blk) { },\n-          visit_stmt: fn (_s: @stmt) { },\n-          visit_arm: fn (_a: arm) { },\n-          visit_pat: fn (_p: @pat) { },\n-          visit_decl: fn (_d: @decl) { },\n-          visit_expr: fn (_e: @expr) { },\n-          visit_ty: fn (_t: @ty) { },\n-          visit_constr: fn (_p: path, _sp: span, _id: node_id) { },\n+    ret @{visit_mod: fn(_m: _mod, _sp: span) { },\n+          visit_view_item: fn(_vi: @view_item) { },\n+          visit_native_item: fn(_ni: @native_item) { },\n+          visit_item: fn(_i: @item) { },\n+          visit_local: fn(_l: @local) { },\n+          visit_block: fn(_b: ast::blk) { },\n+          visit_stmt: fn(_s: @stmt) { },\n+          visit_arm: fn(_a: arm) { },\n+          visit_pat: fn(_p: @pat) { },\n+          visit_decl: fn(_d: @decl) { },\n+          visit_expr: fn(_e: @expr) { },\n+          visit_ty: fn(_t: @ty) { },\n+          visit_constr: fn(_p: path, _sp: span, _id: node_id) { },\n           visit_fn:\n-              fn (_f: _fn, _tps: [ty_param], _sp: span, _ident: fn_ident,\n+              fn(_f: _fn, _tps: [ty_param], _sp: span, _ident: fn_ident,\n                   _id: node_id) {\n               }};\n }\n \n fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n-    fn v_mod(f: fn(_mod, span), m: _mod, sp: span, &&e: (), v: vt<()>) {\n+    fn v_mod(f: fn@(_mod, span), m: _mod, sp: span, &&e: (), v: vt<()>) {\n         f(m, sp);\n         visit_mod(m, sp, e, v);\n     }\n-    fn v_view_item(f: fn(@view_item), vi: @view_item, &&e: (), v: vt<()>) {\n+    fn v_view_item(f: fn@(@view_item), vi: @view_item, &&e: (), v: vt<()>) {\n         f(vi);\n         visit_view_item(vi, e, v);\n     }\n-    fn v_native_item(f: fn(@native_item), ni: @native_item, &&e: (),\n+    fn v_native_item(f: fn@(@native_item), ni: @native_item, &&e: (),\n                      v: vt<()>) {\n         f(ni);\n         visit_native_item(ni, e, v);\n     }\n-    fn v_item(f: fn(@item), i: @item, &&e: (), v: vt<()>) {\n+    fn v_item(f: fn@(@item), i: @item, &&e: (), v: vt<()>) {\n         f(i);\n         visit_item(i, e, v);\n     }\n-    fn v_local(f: fn(@local), l: @local, &&e: (), v: vt<()>) {\n+    fn v_local(f: fn@(@local), l: @local, &&e: (), v: vt<()>) {\n         f(l);\n         visit_local(l, e, v);\n     }\n-    fn v_block(f: fn(ast::blk), bl: ast::blk, &&e: (), v: vt<()>) {\n+    fn v_block(f: fn@(ast::blk), bl: ast::blk, &&e: (), v: vt<()>) {\n         f(bl);\n         visit_block(bl, e, v);\n     }\n-    fn v_stmt(f: fn(@stmt), st: @stmt, &&e: (), v: vt<()>) {\n+    fn v_stmt(f: fn@(@stmt), st: @stmt, &&e: (), v: vt<()>) {\n         f(st);\n         visit_stmt(st, e, v);\n     }\n-    fn v_arm(f: fn(arm), a: arm, &&e: (), v: vt<()>) {\n+    fn v_arm(f: fn@(arm), a: arm, &&e: (), v: vt<()>) {\n         f(a);\n         visit_arm(a, e, v);\n     }\n-    fn v_pat(f: fn(@pat), p: @pat, &&e: (), v: vt<()>) {\n+    fn v_pat(f: fn@(@pat), p: @pat, &&e: (), v: vt<()>) {\n         f(p);\n         visit_pat(p, e, v);\n     }\n-    fn v_decl(f: fn(@decl), d: @decl, &&e: (), v: vt<()>) {\n+    fn v_decl(f: fn@(@decl), d: @decl, &&e: (), v: vt<()>) {\n         f(d);\n         visit_decl(d, e, v);\n     }\n-    fn v_expr(f: fn(@expr), ex: @expr, &&e: (), v: vt<()>) {\n+    fn v_expr(f: fn@(@expr), ex: @expr, &&e: (), v: vt<()>) {\n         f(ex);\n         visit_expr(ex, e, v);\n     }\n-    fn v_ty(f: fn(@ty), ty: @ty, &&e: (), v: vt<()>) {\n+    fn v_ty(f: fn@(@ty), ty: @ty, &&e: (), v: vt<()>) {\n         f(ty);\n         visit_ty(ty, e, v);\n     }\n-    fn v_constr(f: fn(path, span, node_id), pt: path, sp: span, id: node_id,\n+    fn v_constr(f: fn@(path, span, node_id), pt: path, sp: span, id: node_id,\n                 &&e: (), v: vt<()>) {\n         f(pt, sp, id);\n         visit_constr(pt, sp, id, e, v);\n     }\n-    fn v_fn(f: fn(_fn, [ty_param], span, fn_ident, node_id), ff: _fn,\n+    fn v_fn(f: fn@(_fn, [ty_param], span, fn_ident, node_id), ff: _fn,\n             tps: [ty_param], sp: span, ident: fn_ident, id: node_id, &&e: (),\n             v: vt<()>) {\n         f(ff, tps, sp, ident, id);"}, {"sha": "7a45cc40bae0bf4dfdc4395714d5f9f37d57ced3", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -128,8 +128,8 @@ fn test_opts(config: config) -> test::test_opts {\n }\n \n type tests_and_conv_fn = {\n-    tests: [test::test_desc<fn()>],\n-    to_task: fn(fn()) -> test::joinable\n+    tests: [test::test_desc<fn@()>],\n+    to_task: fn@(fn@()) -> test::joinable\n };\n \n fn make_tests(cx: cx) -> tests_and_conv_fn {\n@@ -167,7 +167,7 @@ fn is_test(config: config, testfile: str) -> bool {\n }\n \n fn make_test(cx: cx, testfile: str, configport: port<[u8]>) ->\n-   test::test_desc<fn()> {\n+   test::test_desc<fn@()> {\n     {name: make_test_name(cx.config, testfile),\n      fn: make_test_closure(testfile, chan(configport)),\n      ignore: header::is_test_ignored(cx.config, testfile)}\n@@ -178,15 +178,15 @@ fn make_test_name(config: config, testfile: str) -> str {\n }\n \n fn make_test_closure(testfile: str,\n-                     configchan: chan<[u8]>) -> test::test_fn<fn()> {\n+                     configchan: chan<[u8]>) -> test::test_fn<fn@()> {\n     bind send_config(testfile, configchan)\n }\n \n fn send_config(testfile: str, configchan: chan<[u8]>) {\n     send(configchan, str::bytes(testfile));\n }\n \n-fn closure_to_task(cx: cx, configport: port<[u8]>, testfn: fn()) ->\n+fn closure_to_task(cx: cx, configport: port<[u8]>, testfn: fn@()) ->\n    test::joinable {\n     testfn();\n     let testfile = recv(configport);"}, {"sha": "4083029c4f58289f462b1604b931405b5616edb1", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -154,13 +154,13 @@ fn worker(p: port<request>) {\n \n // Only windows needs to set the library path\n #[cfg(target_os = \"win32\")]\n-fn maybe_with_lib_path<@T>(path: str, f: fn() -> T) -> T {\n+fn maybe_with_lib_path<@T>(path: str, f: fn@() -> T) -> T {\n     with_lib_path(path, f)\n }\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n-fn maybe_with_lib_path<@T>(_path: str, f: fn() -> T) -> T {\n+fn maybe_with_lib_path<@T>(_path: str, f: fn@() -> T) -> T {\n     f()\n }\n "}, {"sha": "2697f8bbc98b72532118dd070cb86563fd6d1abe", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -232,7 +232,7 @@ fn exec_compiled_test(cx: cx, props: test_props, testfile: str) -> procres {\n }\n \n fn compose_and_run(cx: cx, testfile: str,\n-                   make_args: fn(config, str) -> procargs, lib_path: str,\n+                   make_args: fn@(config, str) -> procargs, lib_path: str,\n                    input: option::t<str>) -> procres {\n     let procargs = make_args(cx.config, testfile);\n     ret program_output(cx, testfile, lib_path, procargs.prog, procargs.args,"}, {"sha": "d8e8d43e591ff8487792ca9663e7afeaf95f3f20", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -216,7 +216,7 @@ iter under(n: uint) -> uint {\n \n fn devnull() -> io::writer { std::io::string_writer().get_writer() }\n \n-fn as_str(f: fn(io::writer)) -> str {\n+fn as_str(f: fn@(io::writer)) -> str {\n     let w = std::io::string_writer();\n     f(w.get_writer());\n     ret w.get_str();"}, {"sha": "3f43707cc1b6753e65455f946c8f66ef309e0930", "filename": "src/lib/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Flib%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Flib%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fextfmt.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -67,7 +67,7 @@ mod ct {\n \n     // A fragment of the output sequence\n     tag piece { piece_string(str); piece_conv(conv); }\n-    type error_fn = fn(str) -> ! ;\n+    type error_fn = fn@(str) -> ! ;\n \n     fn parse_fmt_string(s: str, error: error_fn) -> [piece] {\n         let pieces: [piece] = [];"}, {"sha": "d327d15db7cfb93d705ff343efaa9a711cf729e8", "filename": "src/lib/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Flib%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Flib%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flist.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -50,7 +50,7 @@ fn has<@T>(ls_: list<T>, elt: T) -> bool {\n \n fn length<@T>(ls: list<T>) -> uint {\n     fn count<T>(_t: T, &&u: uint) -> uint { ret u + 1u; }\n-    ret foldl(ls, 0u, count);\n+    ret foldl(ls, 0u, bind count(_, _));\n }\n \n fn cdr<@T>(ls: list<T>) -> list<T> {"}, {"sha": "3445f4b6c822fcd79e34ebff3cd605a614a5cc8a", "filename": "src/lib/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Flib%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Flib%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmap.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -1,9 +1,9 @@\n /**\n  * Hashmap implementation.\n  */\n-type hashfn<K> = fn(K) -> uint;\n+type hashfn<K> = fn@(K) -> uint;\n \n-type eqfn<K> = fn(K, K) -> bool;\n+type eqfn<K> = fn@(K, K) -> bool;\n \n type hashmap<K, V> =\n     obj {"}, {"sha": "903e4b34a816b9d17a28c5af3d1c2015fa66e50d", "filename": "src/lib/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -136,7 +136,7 @@ fn spawn_inner2<~T>(-data: T, f: fn#(T),\n \n // FIXME: This is the old spawn function that spawns a shared closure.\n // It is a hack and needs to be rewritten.\n-fn unsafe_spawn_inner(-thunk: fn(),\n+fn unsafe_spawn_inner(-thunk: fn@(),\n                       notify: option<comm::chan<task_notification>>) ->\n    task_id unsafe {\n     let id = rustrt::new_task();"}, {"sha": "0df3667ea4a4307fc022f43b6172d6c57f4cc39a", "filename": "src/lib/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -100,7 +100,7 @@ type joinable = (task, comm::port<task::task_notification>);\n // In cases where test functions are closures it is not ok to just dump them\n // into a task and run them, so this transformation gives the caller a chance\n // to create the test task.\n-type test_to_task<@T> = fn(test_fn<T>) -> joinable;\n+type test_to_task<@T> = fn@(test_fn<T>) -> joinable;\n \n // A simple console test runner\n fn run_tests_console(opts: test_opts,\n@@ -215,7 +215,7 @@ tag testevent<@T> {\n \n fn run_tests<@T>(opts: test_opts, tests: [test_desc<T>],\n                  to_task: test_to_task<T>,\n-                 callback: fn(testevent<T>)) {\n+                 callback: fn@(testevent<T>)) {\n \n     let filtered_tests = filter_tests(opts, tests);\n \n@@ -286,7 +286,7 @@ fn filter_tests<@T>(opts: test_opts,\n             } else { ret option::none; }\n         };\n \n-        vec::filter_map(filter, filtered)\n+        vec::filter_map(bind filter(_), filtered)\n     };\n \n     // Sort the tests alphabetically\n@@ -295,13 +295,13 @@ fn filter_tests<@T>(opts: test_opts,\n             fn lteq<@T>(t1: test_desc<T>, t2: test_desc<T>) -> bool {\n                 str::lteq(t1.name, t2.name)\n             }\n-            sort::merge_sort(lteq, filtered)\n+            sort::merge_sort(bind lteq(_, _), filtered)\n         };\n \n     ret filtered;\n }\n \n-type test_future<@T> = {test: test_desc<T>, wait: fn() -> test_result};\n+type test_future<@T> = {test: test_desc<T>, wait: fn@() -> test_result};\n \n fn run_test<@T>(test: test_desc<T>,\n                 to_task: test_to_task<T>) -> test_future<T> {"}, {"sha": "c9817c2d7304e3fd0c4e1889145fa9b1faf7f5e0", "filename": "src/lib/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Flib%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Flib%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftreemap.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -52,7 +52,7 @@ fn find<@K, @V>(m: treemap<K, V>, k: K) -> option<V> {\n }\n \n // Performs an in-order traversal\n-fn traverse<@K, @V>(m: treemap<K, V>, f: fn(K, V)) {\n+fn traverse<@K, @V>(m: treemap<K, V>, f: fn@(K, V)) {\n     alt *m {\n       empty. { }\n       node(k, v, _, _) {"}, {"sha": "e5b1e33ac8a11157a6dc9f3d657317da48fd390b", "filename": "src/lib/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -20,7 +20,7 @@ fn reserve<@T>(&v: [mutable? T], n: uint) {\n \n pure fn len<T>(v: [mutable? T]) -> uint { unchecked { rusti::vec_len(v) } }\n \n-type init_op<T> = fn(uint) -> T;\n+type init_op<T> = fn@(uint) -> T;\n \n fn init_fn<@T>(op: init_op<T>, n_elts: uint) -> [T] {\n     let v = [];"}, {"sha": "f7c49d6432fb77a02cf38ad0cca3a4ac88c6f59e", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -51,11 +51,11 @@ mod map_reduce {\n     export reducer;\n     export map_reduce;\n \n-    type putter = fn(str, int);\n+    type putter = fn@(str, int);\n \n     type mapper = fn(str, putter);\n \n-    type getter = fn() -> option<int>;\n+    type getter = fn@() -> option<int>;\n \n     type reducer = fn(str, getter);\n "}, {"sha": "05ead1b2836925550298e8f4e993f5d03a86dba6", "filename": "src/test/compile-fail/fn-bare-bind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Fcompile-fail%2Ffn-bare-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Fcompile-fail%2Ffn-bare-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-bare-bind.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:mismatched types: expected fn#() but found fn()\n+// error-pattern:mismatched types: expected fn() but found fn@()\n \n fn# f() {\n }"}, {"sha": "3e5233460b7243475714883bf63066127596257e", "filename": "src/test/compile-fail/unsafe-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Fcompile-fail%2Funsafe-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Fcompile-fail%2Funsafe-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-alias.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:may alias with argument\n \n-fn foo(x: {mutable x: int}, f: fn()) { log x; }\n+fn foo(x: {mutable x: int}, f: fn@()) { log x; }\n \n fn whoknows(x: @mutable {mutable x: int}) { *x = {mutable x: 10}; }\n "}, {"sha": "19f5f13e5a6afdf5b677db58ef53e4ce622bdafd", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -1,3 +1,7 @@\n+// FIXME: Autobind doesn't work for bare functions currently\n+// because it would have to convert them to shared closures\n+// xfail-test\n+\n fn f<@T>(x: [T]) -> T { ret x[0]; }\n \n fn g(act: fn([int]) -> int) -> int { ret act([1, 2, 3]); }"}, {"sha": "980a1e568f6612441fc8b1168a5aa3d98f10a2b9", "filename": "src/test/run-pass/bind-interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fbind-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fbind-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-interior.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -5,7 +5,7 @@\n fn f(n: int) -> int { ret n; }\n \n fn main() {\n-    let g: fn() -> int = bind f(10);\n+    let g: fn@() -> int = bind f(10);\n     let i: int = g();\n     assert (i == 10);\n }"}, {"sha": "e0a21fba2a547f1429171bd43f61f549510b1fb7", "filename": "src/test/run-pass/bind-parameterized-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fbind-parameterized-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fbind-parameterized-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-parameterized-args.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     fn echo<T>(c: int, x: [T]) { }\n \n-    let y: fn([int]) = bind echo(42, _);\n+    let y: fn@([int]) = bind echo(42, _);\n \n     y([1]);\n }"}, {"sha": "52bae30b8ff61de64d40d9fe9b6ebd33125acd7a", "filename": "src/test/run-pass/bind-thunk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fbind-thunk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fbind-thunk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-thunk.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -5,7 +5,7 @@\n fn f() -> int { ret 42; }\n \n fn main() {\n-    let g: fn() -> int = bind f();\n+    let g: fn@() -> int = bind f();\n     let i: int = g();\n     assert (i == 42);\n }"}, {"sha": "8ae7e4cf200191cb41bac2c849cefa9c454d230c", "filename": "src/test/run-pass/bind-trivial.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fbind-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fbind-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-trivial.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -5,7 +5,7 @@\n fn f(n: int) -> int { ret n; }\n \n fn main() {\n-    let g: fn(int) -> int = bind f(_);\n+    let g: fn@(int) -> int = bind f(_);\n     let i: int = g(42);\n     assert (i == 42);\n }"}, {"sha": "0c58d9d6727bcbaac5c82ac4f637dc50bfc592ef", "filename": "src/test/run-pass/expr-alt-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn(@T, @T) -> bool;\n+type compare<T> = fn@(@T, @T) -> bool;\n \n fn test_generic<T>(expected: @T, eq: compare<T>) {\n     let actual: @T = alt true { true { expected } };"}, {"sha": "556e00adc54ed6f6bb3cac9c540bc7e0711aaa60", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn(T, T) -> bool;\n+type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<@T>(expected: T, eq: compare<T>) {\n     let actual: T = alt true { true { expected } };"}, {"sha": "6548c98b469b765375897c4ba2e57f4d17922006", "filename": "src/test/run-pass/expr-alt-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -1,7 +1,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn(~T, ~T) -> bool;\n+type compare<T> = fn@(~T, ~T) -> bool;\n \n fn test_generic<@T>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = alt true { true { expected } };"}, {"sha": "f56070a64442d97db7db472bcff9e8b0934be9f9", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn(T, T) -> bool;\n+type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<@T>(expected: T, eq: compare<T>) {\n     let actual: T = alt true { true { expected } };"}, {"sha": "b2d686db43d5106bbf9645eed4d7f5e7def8a9a6", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn(T, T) -> bool;\n+type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<@T>(expected: T, eq: compare<T>) {\n     let actual: T = alt true { true { expected } };"}, {"sha": "2e689b5f07dc239a8feb42466eb6ff724aa7234d", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn(@T, @T) -> bool;\n+type compare<T> = fn@(@T, @T) -> bool;\n \n fn test_generic<T>(expected: @T, eq: compare<T>) {\n     let actual: @T = { expected };"}, {"sha": "63526729f5e4a0fa0d0bea10667c29dbd2ed5ea5", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn(T, T) -> bool;\n+type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<@T>(expected: T, eq: compare<T>) {\n     let actual: T = { expected };"}, {"sha": "6415558fb1ec8d6b421ece4de6504d3f73ad4848", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -1,7 +1,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn(~T, ~T) -> bool;\n+type compare<T> = fn@(~T, ~T) -> bool;\n \n fn test_generic<@T>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = { expected };"}, {"sha": "6a1716493f442cbc9e43833505764c841ea521ba", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn(T, T) -> bool;\n+type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<@T>(expected: T, eq: compare<T>) {\n     let actual: T = { expected };"}, {"sha": "147ae500b7c97efcd853615cc6696e6e84ba13d0", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n \n // Tests for standalone blocks as expressions with dynamic type sizes\n-type compare<T> = fn(T, T) -> bool;\n+type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<@T>(expected: T, eq: compare<T>) {\n     let actual: T = { expected };"}, {"sha": "f7869b093b90433cd003620c80f0e8862c71c130", "filename": "src/test/run-pass/expr-if-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn(@T, @T) -> bool;\n+type compare<T> = fn@(@T, @T) -> bool;\n \n fn test_generic<T>(expected: @T, not_expected: @T, eq: compare<T>) {\n     let actual: @T = if true { expected } else { not_expected };"}, {"sha": "42b57a7c1936dc5fa4ef04a81817a0414e8e984e", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn(T, T) -> bool;\n+type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<@T>(expected: T, not_expected: T, eq: compare<T>) {\n     let actual: T = if true { expected } else { not_expected };"}, {"sha": "4ccef87fb8ca413d077758d500a3c554ef2ba422", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n \n // Tests for if as expressions with dynamic type sizes\n-type compare<T> = fn(T, T) -> bool;\n+type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<@T>(expected: T, not_expected: T, eq: compare<T>) {\n     let actual: T = if true { expected } else { not_expected };"}, {"sha": "531c59fffbc0f78bef0c81af6dda07f2a47b204e", "filename": "src/test/run-pass/fixed-point-bind-box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -1,12 +1,12 @@\n-fn fix_help<A, @B>(f: fn(fn(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A, @B>(f: fn(fn@(A) -> B, A) -> B, x: A) -> B {\n     ret f(bind fix_help(f, _), x);\n }\n \n-fn fix<A, @B>(f: fn(fn(A) -> B, A) -> B) -> fn(A) -> B {\n+fn fix<A, @B>(f: fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n     ret bind fix_help(f, _);\n }\n \n-fn fact_(f: fn(&&int) -> int, &&n: int) -> int {\n+fn fact_(f: fn@(&&int) -> int, &&n: int) -> int {\n     // fun fact 0 = 1\n     ret if n == 0 { 1 } else { n * f(n - 1) };\n }"}, {"sha": "aaee23ff35b85129c128d81f1af607f0f125b930", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -1,12 +1,12 @@\n-fn fix_help<A, ~B>(f: fn(fn(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A, ~B>(f: fn(fn@(A) -> B, A) -> B, x: A) -> B {\n     ret f(bind fix_help(f, _), x);\n }\n \n-fn fix<A, ~B>(f: fn(fn(A) -> B, A) -> B) -> fn(A) -> B {\n+fn fix<A, ~B>(f: fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n     ret bind fix_help(f, _);\n }\n \n-fn fact_(f: fn(&&int) -> int, &&n: int) -> int {\n+fn fact_(f: fn@(&&int) -> int, &&n: int) -> int {\n     // fun fact 0 = 1\n     ret if n == 0 { 1 } else { n * f(n - 1) };\n }"}, {"sha": "3e5935427f097e44b6426cb44ddeb95345a287c6", "filename": "src/test/run-pass/fn-bare-bind-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Ffn-bare-bind-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Ffn-bare-bind-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-bind-generic.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -5,6 +5,6 @@ fn# f<T>(i: T, j: T, k: T) {\n \n fn main() {\n     // Binding a bare function turns it into a shared closure\n-    let g: fn() = bind f(10, 10, 20);\n+    let g: fn@() = bind f(10, 10, 20);\n     g();\n }\n\\ No newline at end of file"}, {"sha": "ec6747cd2553835d57cbcd60fb86afe78b16b512", "filename": "src/test/run-pass/fn-bare-bind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Ffn-bare-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Ffn-bare-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-bind.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -4,6 +4,6 @@ fn# f(i: int) {\n \n fn main() {\n     // Binding a bare function turns it into a shared closure\n-    let g: fn() = bind f(10);\n+    let g: fn@() = bind f(10);\n     g();\n }\n\\ No newline at end of file"}, {"sha": "c11e64c234fcfe9a61aec12f230bbfb1f0a06b8a", "filename": "src/test/run-pass/fun-call-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -1,5 +1,5 @@\n // -*- rust -*-\n-fn ho(f: fn(int) -> int) -> int { let n: int = f(3); ret n; }\n+fn ho(f: fn@(int) -> int) -> int { let n: int = f(3); ret n; }\n \n fn direct(x: int) -> int { ret x + 1; }\n "}, {"sha": "9f4c4bb17d28612cd9001567a4eec85033b29c88", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -26,7 +26,7 @@ mod map_reduce {\n     export mapper;\n     export map_reduce;\n \n-    type putter = fn(str, str);\n+    type putter = fn@(str, str);\n \n     type mapper = fn(str, putter);\n "}, {"sha": "abae3c5dcb240141ca6f49f302cb2c0b2db363ae", "filename": "src/test/run-pass/issue-333.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fissue-333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Fissue-333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-333.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -1,4 +1,4 @@\n-fn quux<@T>(x: T) -> T { let f = id::<T>; ret f(x); }\n+fn quux<@T>(x: T) -> T { let f = bind id::<T>(_); ret f(x); }\n \n fn id<@T>(x: T) -> T { ret x; }\n "}, {"sha": "3c5e1d825ab155c3910ffd479e562defe6855a4b", "filename": "src/test/run-pass/lambda-no-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -1,5 +1,5 @@\n // Make sure we don't leak lambdas in silly ways.\n-fn force(f: fn()) { f() }\n+fn force(f: fn@()) { f() }\n fn main() {\n     let x = 7;\n     lambda () { log_err x; };"}, {"sha": "c651bb50af8652ae41354920c837d97adaece58b", "filename": "src/test/run-pass/rebind-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Frebind-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Frebind-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frebind-fn.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -1,5 +1,5 @@\n fn add(i: int, j: int) -> int { ret i + j; }\n-fn binder(n: int) -> fn() -> int { let f = bind add(n, _); ret bind f(2); }\n+fn binder(n: int) -> fn@() -> int { let f = bind add(n, _); ret bind f(2); }\n fn main() {\n     binder(5);\n     let f = binder(1);"}, {"sha": "8f4791399eae613f1999871cf6bc2febd2955e23", "filename": "src/test/run-pass/unchecked-predicates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -13,7 +13,7 @@ fn pure_foldl<@T, @U>(ls: list<T>, u: U, f: block(T, U) -> U) -> U {\n // fn from a pure fn\n pure fn pure_length<@T>(ls: list<T>) -> uint {\n     fn count<T>(_t: T, &&u: uint) -> uint { u + 1u }\n-    unchecked{ pure_foldl(ls, 0u, count) }\n+    unchecked{ pure_foldl(ls, 0u, bind count(_, _)) }\n }\n \n pure fn nonempty_list<@T>(ls: list<T>) -> bool { pure_length(ls) > 0u }"}, {"sha": "d532d975535eb425db672194ad792293bc4dc44f", "filename": "src/test/stdtest/deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Fstdtest%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Fstdtest%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fdeque.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -79,7 +79,7 @@ fn test_boxes(a: @int, b: @int, c: @int, d: @int) {\n     assert (deq.get(3) == d);\n }\n \n-type eqfn<T> = fn(T, T) -> bool;\n+type eqfn<T> = fn@(T, T) -> bool;\n \n fn test_parameterized<@T>(e: eqfn<T>, a: T, b: T, c: T, d: T) {\n     let deq: deque::t<T> = deque::create::<T>();\n@@ -178,7 +178,7 @@ fn test() {\n                                 two(17, 42));\n \n     log \"*** test parameterized: taggypar<int>\";\n-    let eq4: eqfn<taggypar<int>> = taggypareq::<int>;\n+    let eq4: eqfn<taggypar<int>> = bind taggypareq::<int>(_, _);\n     test_parameterized::<taggypar<int>>(eq4, onepar::<int>(1),\n                                         twopar::<int>(1, 2),\n                                         threepar::<int>(1, 2, 3),"}, {"sha": "45d1a535e02d4050f07feace4faa2f3e25f523f8", "filename": "src/test/stdtest/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Fstdtest%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad3bdb103bec8d45df6f015802668722af6a00/src%2Ftest%2Fstdtest%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fmap.rs?ref=29ad3bdb103bec8d45df6f015802668722af6a00", "patch": "@@ -12,7 +12,7 @@ import std::option;\n fn test_simple() {\n     log \"*** starting test_simple\";\n     fn eq_uint(&&x: uint, &&y: uint) -> bool { ret x == y; }\n-    let hasher_uint: map::hashfn<uint> = util::id;\n+    let hasher_uint: map::hashfn<uint> = bind util::id(_);\n     let eqer_uint: map::eqfn<uint> = eq_uint;\n     let hasher_str: map::hashfn<str> = str::hash;\n     let eqer_str: map::eqfn<str> = str::eq;\n@@ -85,7 +85,7 @@ fn test_growth() {\n     let num_to_insert: uint = 64u;\n     fn eq_uint(&&x: uint, &&y: uint) -> bool { ret x == y; }\n     log \"uint -> uint\";\n-    let hasher_uint: map::hashfn<uint> = util::id;\n+    let hasher_uint: map::hashfn<uint> = bind util::id(_);\n     let eqer_uint: map::eqfn<uint> = eq_uint;\n     let hm_uu: map::hashmap<uint, uint> =\n         map::mk_hashmap::<uint, uint>(hasher_uint, eqer_uint);"}]}