{"sha": "604ffab063e0b488f43b6f8faf60421a4533dbc0", "node_id": "C_kwDOAAsO6NoAKDYwNGZmYWIwNjNlMGI0ODhmNDNiNmY4ZmFmNjA0MjFhNDUzM2RiYzA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-06-05T14:22:45Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-06-05T14:22:45Z"}, "message": "Avoid going through queries if a value of type `AssocItem` is already available", "tree": {"sha": "a70c724f10e6c1672de9042c70dcf961a31af336", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a70c724f10e6c1672de9042c70dcf961a31af336"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/604ffab063e0b488f43b6f8faf60421a4533dbc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/604ffab063e0b488f43b6f8faf60421a4533dbc0", "html_url": "https://github.com/rust-lang/rust/commit/604ffab063e0b488f43b6f8faf60421a4533dbc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/604ffab063e0b488f43b6f8faf60421a4533dbc0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42f28f9eb41adb7a197697e5e2d6535d00fd0f4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/42f28f9eb41adb7a197697e5e2d6535d00fd0f4a", "html_url": "https://github.com/rust-lang/rust/commit/42f28f9eb41adb7a197697e5e2d6535d00fd0f4a"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "9e78d9858a6dadd1774ce98295c92dd68f58f0fa", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/604ffab063e0b488f43b6f8faf60421a4533dbc0/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604ffab063e0b488f43b6f8faf60421a4533dbc0/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=604ffab063e0b488f43b6f8faf60421a4533dbc0", "patch": "@@ -1601,7 +1601,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             tcx.associated_items(pred.def_id())\n                                 .in_definition_order()\n                                 .filter(|item| item.kind == ty::AssocKind::Type)\n-                                .filter(|item| tcx.opt_rpitit_info(item.def_id).is_none())\n+                                .filter(|item| item.opt_rpitit_info.is_none())\n                                 .map(|item| item.def_id),\n                         );\n                     }"}, {"sha": "d95862420da11c717552b403fd233f80d2122b00", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/604ffab063e0b488f43b6f8faf60421a4533dbc0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604ffab063e0b488f43b6f8faf60421a4533dbc0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=604ffab063e0b488f43b6f8faf60421a4533dbc0", "patch": "@@ -1216,7 +1216,7 @@ fn compare_number_of_generics<'tcx>(\n     // has mismatched type or const generic arguments, then the method that it's\n     // inheriting the generics from will also have mismatched arguments, and\n     // we'll report an error for that instead. Delay a bug for safety, though.\n-    if tcx.opt_rpitit_info(trait_.def_id).is_some() {\n+    if trait_.opt_rpitit_info.is_some() {\n         return Err(tcx.sess.delay_span_bug(\n             rustc_span::DUMMY_SP,\n             \"errors comparing numbers of generics of trait/impl functions were not emitted\",\n@@ -2006,7 +2006,7 @@ pub(super) fn check_type_bounds<'tcx>(\n     // A synthetic impl Trait for RPITIT desugaring has no HIR, which we currently use to get the\n     // span for an impl's associated type. Instead, for these, use the def_span for the synthesized\n     // associated type.\n-    let impl_ty_span = if tcx.opt_rpitit_info(impl_ty.def_id).is_some() {\n+    let impl_ty_span = if impl_ty.opt_rpitit_info.is_some() {\n         tcx.def_span(impl_ty_def_id)\n     } else {\n         match tcx.hir().get_by_def_id(impl_ty_def_id) {"}, {"sha": "c9e74896ac08e252987770393a75b8e78d33e2b0", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/604ffab063e0b488f43b6f8faf60421a4533dbc0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604ffab063e0b488f43b6f8faf60421a4533dbc0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=604ffab063e0b488f43b6f8faf60421a4533dbc0", "patch": "@@ -188,7 +188,7 @@ fn missing_items_err(\n     full_impl_span: Span,\n ) {\n     let missing_items =\n-        missing_items.iter().filter(|trait_item| tcx.opt_rpitit_info(trait_item.def_id).is_none());\n+        missing_items.iter().filter(|trait_item| trait_item.opt_rpitit_info.is_none());\n \n     let missing_items_msg = missing_items\n         .clone()"}, {"sha": "e61cc19354e0fc564c059983d79a24b05ad39f8e", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/604ffab063e0b488f43b6f8faf60421a4533dbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604ffab063e0b488f43b6f8faf60421a4533dbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=604ffab063e0b488f43b6f8faf60421a4533dbc0", "patch": "@@ -161,7 +161,7 @@ fn object_safety_violations_for_trait(\n                 .in_definition_order()\n                 .filter(|item| item.kind == ty::AssocKind::Type)\n                 .filter(|item| !tcx.generics_of(item.def_id).params.is_empty())\n-                .filter(|item| tcx.opt_rpitit_info(item.def_id).is_none())\n+                .filter(|item| item.opt_rpitit_info.is_none())\n                 .map(|item| {\n                     let ident = item.ident(tcx);\n                     ObjectSafetyViolation::GAT(ident.name, ident.span)"}]}