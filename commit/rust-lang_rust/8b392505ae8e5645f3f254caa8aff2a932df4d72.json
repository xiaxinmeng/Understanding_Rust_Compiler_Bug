{"sha": "8b392505ae8e5645f3f254caa8aff2a932df4d72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMzkyNTA1YWU4ZTU2NDVmM2YyNTRjYWE4YWZmMmE5MzJkZjRkNzI=", "commit": {"author": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-09-09T11:23:25Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-09-09T11:23:25Z"}, "message": "Fix non-determinism in generated format string.", "tree": {"sha": "beef447d11d3059770b3723c6499ddd6d06a00d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beef447d11d3059770b3723c6499ddd6d06a00d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b392505ae8e5645f3f254caa8aff2a932df4d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b392505ae8e5645f3f254caa8aff2a932df4d72", "html_url": "https://github.com/rust-lang/rust/commit/8b392505ae8e5645f3f254caa8aff2a932df4d72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b392505ae8e5645f3f254caa8aff2a932df4d72/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f5e617e3630ad61aa35637bbe0ab704eada5974", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5e617e3630ad61aa35637bbe0ab704eada5974", "html_url": "https://github.com/rust-lang/rust/commit/3f5e617e3630ad61aa35637bbe0ab704eada5974"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "610b9155cfc182059d58a39901bd3be03dd46585", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b392505ae8e5645f3f254caa8aff2a932df4d72/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b392505ae8e5645f3f254caa8aff2a932df4d72/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=8b392505ae8e5645f3f254caa8aff2a932df4d72", "patch": "@@ -1,11 +1,9 @@\n #![deny(unused_must_use)]\n-use quote::format_ident;\n-use quote::quote;\n-\n use proc_macro::Diagnostic;\n+use quote::{format_ident, quote};\n use syn::spanned::Spanned;\n \n-use std::collections::{HashMap, HashSet};\n+use std::collections::{BTreeSet, HashMap};\n \n /// Implements #[derive(SessionDiagnostic)], which allows for errors to be specified as a struct, independent\n /// from the actual diagnostics emitting code.\n@@ -577,7 +575,10 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n     /// ```\n     /// This function builds the entire call to format!.\n     fn build_format(&self, input: &String, span: proc_macro2::Span) -> proc_macro2::TokenStream {\n-        let mut referenced_fields: HashSet<String> = HashSet::new();\n+        // This set is used later to generate the final format string. To keep builds reproducible,\n+        // the iteration order needs to be deterministic, hence why we use a BTreeSet here instead\n+        // of a HashSet.\n+        let mut referenced_fields: BTreeSet<String> = BTreeSet::new();\n \n         // At this point, we can start parsing the format string.\n         let mut it = input.chars().peekable();"}]}