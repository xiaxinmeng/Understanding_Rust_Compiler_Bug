{"sha": "6d43225bfb08ec91f7476b76c7fec632c4a096ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNDMyMjViZmIwOGVjOTFmNzQ3NmI3NmM3ZmVjNjMyYzRhMDk2ZWY=", "commit": {"author": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-02-03T21:36:33Z"}, "committer": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-02-03T21:36:33Z"}, "message": "Fixes #80335", "tree": {"sha": "8b457f7a1eb39f91c3169e8d2564ae3174a7d10c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b457f7a1eb39f91c3169e8d2564ae3174a7d10c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d43225bfb08ec91f7476b76c7fec632c4a096ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d43225bfb08ec91f7476b76c7fec632c4a096ef", "html_url": "https://github.com/rust-lang/rust/commit/6d43225bfb08ec91f7476b76c7fec632c4a096ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d43225bfb08ec91f7476b76c7fec632c4a096ef/comments", "author": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "186f7ae5b04d31d8ccd1746ac63cdf1ab4bc2354", "url": "https://api.github.com/repos/rust-lang/rust/commits/186f7ae5b04d31d8ccd1746ac63cdf1ab4bc2354", "html_url": "https://github.com/rust-lang/rust/commit/186f7ae5b04d31d8ccd1746ac63cdf1ab4bc2354"}], "stats": {"total": 72, "additions": 54, "deletions": 18}, "files": [{"sha": "a7584c6b65100546bbf2670cd47982552dec9b95", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6d43225bfb08ec91f7476b76c7fec632c4a096ef/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d43225bfb08ec91f7476b76c7fec632c4a096ef/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=6d43225bfb08ec91f7476b76c7fec632c4a096ef", "patch": "@@ -90,8 +90,8 @@ impl<S: Borrow<str>> Join<&str> for [S] {\n     }\n }\n \n-macro_rules! spezialize_for_lengths {\n-    ($separator:expr, $target:expr, $iter:expr; $($num:expr),*) => {\n+macro_rules! specialize_for_lengths {\n+    ($separator:expr, $target:expr, $iter:expr; $($num:expr),*) => {{\n         let mut target = $target;\n         let iter = $iter;\n         let sep_bytes = $separator;\n@@ -102,19 +102,22 @@ macro_rules! spezialize_for_lengths {\n                 $num => {\n                     for s in iter {\n                         copy_slice_and_advance!(target, sep_bytes);\n-                        copy_slice_and_advance!(target, s.borrow().as_ref());\n+                        let content_bytes = s.borrow().as_ref();\n+                        copy_slice_and_advance!(target, content_bytes);\n                     }\n                 },\n             )*\n             _ => {\n                 // arbitrary non-zero size fallback\n                 for s in iter {\n                     copy_slice_and_advance!(target, sep_bytes);\n-                    copy_slice_and_advance!(target, s.borrow().as_ref());\n+                    let content_bytes = s.borrow().as_ref();\n+                    copy_slice_and_advance!(target, content_bytes);\n                 }\n             }\n         }\n-    };\n+        target\n+    }}\n }\n \n macro_rules! copy_slice_and_advance {\n@@ -153,30 +156,33 @@ where\n     // if the `len` calculation overflows, we'll panic\n     // we would have run out of memory anyway and the rest of the function requires\n     // the entire Vec pre-allocated for safety\n-    let len = sep_len\n+    let reserved_len = sep_len\n         .checked_mul(iter.len())\n         .and_then(|n| {\n             slice.iter().map(|s| s.borrow().as_ref().len()).try_fold(n, usize::checked_add)\n         })\n         .expect(\"attempt to join into collection with len > usize::MAX\");\n \n     // crucial for safety\n-    let mut result = Vec::with_capacity(len);\n-    assert!(result.capacity() >= len);\n+    let mut result = Vec::with_capacity(reserved_len);\n+    debug_assert!(result.capacity() >= reserved_len);\n \n     result.extend_from_slice(first.borrow().as_ref());\n \n     unsafe {\n-        {\n-            let pos = result.len();\n-            let target = result.get_unchecked_mut(pos..len);\n-\n-            // copy separator and slices over without bounds checks\n-            // generate loops with hardcoded offsets for small separators\n-            // massive improvements possible (~ x2)\n-            spezialize_for_lengths!(sep, target, iter; 0, 1, 2, 3, 4);\n-        }\n-        result.set_len(len);\n+        let pos = result.len();\n+        let target = result.get_unchecked_mut(pos..reserved_len);\n+\n+        // copy separator and slices over without bounds checks\n+        // generate loops with hardcoded offsets for small separators\n+        // massive improvements possible (~ x2)\n+        let remain = specialize_for_lengths!(sep, target, iter; 0, 1, 2, 3, 4);\n+\n+        // issue #80335: A weird borrow implementation can return different\n+        // slices for the length calculation and the actual copy, so\n+        // `remain.len()` might be non-zero.\n+        let result_len = reserved_len - remain.len();\n+        result.set_len(result_len);\n     }\n     result\n }"}, {"sha": "6df8d8c2f354f9a6256bde30bc4e97fa9bfd68d4", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6d43225bfb08ec91f7476b76c7fec632c4a096ef/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d43225bfb08ec91f7476b76c7fec632c4a096ef/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=6d43225bfb08ec91f7476b76c7fec632c4a096ef", "patch": "@@ -160,6 +160,36 @@ fn test_join_for_different_lengths_with_long_separator() {\n     test_join!(\"\uff5e\uff5e\uff5e\uff5e\uff5ea\uff5e\uff5e\uff5e\uff5e\uff5ebc\", [\"\", \"a\", \"bc\"], \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n }\n \n+#[test]\n+fn test_join_isue_80335() {\n+    use core::{borrow::Borrow, cell::Cell};\n+\n+    struct WeirdBorrow {\n+        state: Cell<bool>,\n+    }\n+\n+    impl Default for WeirdBorrow {\n+        fn default() -> Self {\n+            WeirdBorrow { state: Cell::new(false) }\n+        }\n+    }\n+\n+    impl Borrow<str> for WeirdBorrow {\n+        fn borrow(&self) -> &str {\n+            let state = self.state.get();\n+            if state {\n+                \"0\"\n+            } else {\n+                self.state.set(true);\n+                \"123456\"\n+            }\n+        }\n+    }\n+\n+    let arr: [WeirdBorrow; 3] = Default::default();\n+    test_join!(\"0-0-0\", arr, \"-\");\n+}\n+\n #[test]\n #[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_unsafe_slice() {"}]}