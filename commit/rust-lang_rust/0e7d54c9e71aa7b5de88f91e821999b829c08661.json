{"sha": "0e7d54c9e71aa7b5de88f91e821999b829c08661", "node_id": "C_kwDOAAsO6NoAKDBlN2Q1NGM5ZTcxYWE3YjVkZTg4ZjkxZTgyMTk5OWI4MjljMDg2NjE", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-04-30T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-04-30T14:40:54Z"}, "message": "Fix -Zdump-mir-dataflow by implementing DebugWithContext for ChunkedBitSet", "tree": {"sha": "af3eaf4048d2c1fbb89bceca165ba69ff0a92737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af3eaf4048d2c1fbb89bceca165ba69ff0a92737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e7d54c9e71aa7b5de88f91e821999b829c08661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7d54c9e71aa7b5de88f91e821999b829c08661", "html_url": "https://github.com/rust-lang/rust/commit/0e7d54c9e71aa7b5de88f91e821999b829c08661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e7d54c9e71aa7b5de88f91e821999b829c08661/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdfdb99c9ecd3cc9bd4ac1ad30786ad318518e4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdfdb99c9ecd3cc9bd4ac1ad30786ad318518e4e", "html_url": "https://github.com/rust-lang/rust/commit/cdfdb99c9ecd3cc9bd4ac1ad30786ad318518e4e"}], "stats": {"total": 98, "additions": 62, "deletions": 36}, "files": [{"sha": "209e6f7ac9fe41c98c605de5e70388e67f2d3306", "filename": "compiler/rustc_mir_dataflow/src/framework/fmt.rs", "status": "modified", "additions": 62, "deletions": 36, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/0e7d54c9e71aa7b5de88f91e821999b829c08661/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7d54c9e71aa7b5de88f91e821999b829c08661/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs?ref=0e7d54c9e71aa7b5de88f91e821999b829c08661", "patch": "@@ -93,57 +93,83 @@ where\n             };\n         }\n \n-        let mut first = true;\n-        for idx in set_in_self.iter() {\n-            let delim = if first {\n-                \"\\u{001f}+\"\n-            } else if f.alternate() {\n-                \"\\n\\u{001f}+\"\n-            } else {\n-                \", \"\n-            };\n+        fmt_diff(&set_in_self, &cleared_in_self, ctxt, f)\n+    }\n+}\n \n-            write!(f, \"{}\", delim)?;\n-            idx.fmt_with(ctxt, f)?;\n-            first = false;\n-        }\n+impl<T, C> DebugWithContext<C> for ChunkedBitSet<T>\n+where\n+    T: Idx + DebugWithContext<C>,\n+{\n+    fn fmt_with(&self, ctxt: &C, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_set().entries(self.iter().map(|i| DebugWithAdapter { this: i, ctxt })).finish()\n+    }\n \n-        if !f.alternate() {\n-            first = true;\n-            if !set_in_self.is_empty() && !cleared_in_self.is_empty() {\n-                write!(f, \"\\t\")?;\n-            }\n-        }\n+    fn fmt_diff_with(&self, old: &Self, ctxt: &C, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let size = self.domain_size();\n+        assert_eq!(size, old.domain_size());\n \n-        for idx in cleared_in_self.iter() {\n-            let delim = if first {\n-                \"\\u{001f}-\"\n-            } else if f.alternate() {\n-                \"\\n\\u{001f}-\"\n-            } else {\n-                \", \"\n-            };\n+        let mut set_in_self = HybridBitSet::new_empty(size);\n+        let mut cleared_in_self = HybridBitSet::new_empty(size);\n \n-            write!(f, \"{}\", delim)?;\n-            idx.fmt_with(ctxt, f)?;\n-            first = false;\n+        for i in (0..size).map(T::new) {\n+            match (self.contains(i), old.contains(i)) {\n+                (true, false) => set_in_self.insert(i),\n+                (false, true) => cleared_in_self.insert(i),\n+                _ => continue,\n+            };\n         }\n \n-        Ok(())\n+        fmt_diff(&set_in_self, &cleared_in_self, ctxt, f)\n     }\n }\n \n-impl<T, C> DebugWithContext<C> for ChunkedBitSet<T>\n+fn fmt_diff<T, C>(\n+    inserted: &HybridBitSet<T>,\n+    removed: &HybridBitSet<T>,\n+    ctxt: &C,\n+    f: &mut fmt::Formatter<'_>,\n+) -> fmt::Result\n where\n     T: Idx + DebugWithContext<C>,\n {\n-    fn fmt_with(&self, _ctxt: &C, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        unimplemented!(\"implement when/if needed\");\n+    let mut first = true;\n+    for idx in inserted.iter() {\n+        let delim = if first {\n+            \"\\u{001f}+\"\n+        } else if f.alternate() {\n+            \"\\n\\u{001f}+\"\n+        } else {\n+            \", \"\n+        };\n+\n+        write!(f, \"{}\", delim)?;\n+        idx.fmt_with(ctxt, f)?;\n+        first = false;\n+    }\n+\n+    if !f.alternate() {\n+        first = true;\n+        if !inserted.is_empty() && !removed.is_empty() {\n+            write!(f, \"\\t\")?;\n+        }\n     }\n \n-    fn fmt_diff_with(&self, _old: &Self, _ctxt: &C, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        unimplemented!(\"implement when/if needed\");\n+    for idx in removed.iter() {\n+        let delim = if first {\n+            \"\\u{001f}-\"\n+        } else if f.alternate() {\n+            \"\\n\\u{001f}-\"\n+        } else {\n+            \", \"\n+        };\n+\n+        write!(f, \"{}\", delim)?;\n+        idx.fmt_with(ctxt, f)?;\n+        first = false;\n     }\n+\n+    Ok(())\n }\n \n impl<T, C> DebugWithContext<C> for &'_ T"}]}