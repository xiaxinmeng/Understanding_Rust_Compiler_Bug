{"sha": "a8196ffe8466aa60dec56e77c2da717793c0debe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MTk2ZmZlODQ2NmFhNjBkZWM1NmU3N2MyZGE3MTc3OTNjMGRlYmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-17T11:06:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-17T11:56:38Z"}, "message": "Correctly highlight ranges of diagnostics from macros\n\ncloses #2799", "tree": {"sha": "03869b8175d5325de1baa95e0a385d2823b5946e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03869b8175d5325de1baa95e0a385d2823b5946e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8196ffe8466aa60dec56e77c2da717793c0debe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8196ffe8466aa60dec56e77c2da717793c0debe", "html_url": "https://github.com/rust-lang/rust/commit/a8196ffe8466aa60dec56e77c2da717793c0debe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8196ffe8466aa60dec56e77c2da717793c0debe/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7", "html_url": "https://github.com/rust-lang/rust/commit/302bf97bbf1855e3c7def9ab4f9f3d338be5e3b7"}], "stats": {"total": 110, "additions": 89, "deletions": 21}, "files": [{"sha": "0b477f0e9ea73e8e86a80a64cf102b50fecf162d", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8196ffe8466aa60dec56e77c2da717793c0debe/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8196ffe8466aa60dec56e77c2da717793c0debe/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=a8196ffe8466aa60dec56e77c2da717793c0debe", "patch": "@@ -20,6 +20,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n     db::HirDatabase,\n+    diagnostics::Diagnostic,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n     AssocItem, Function, HirFileId, ImplDef, InFile, Local, MacroDef, Module, ModuleDef, Name,\n@@ -126,6 +127,13 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         original_range(self.db, node.as_ref())\n     }\n \n+    pub fn diagnostics_range(&self, diagnostics: &dyn Diagnostic) -> FileRange {\n+        let src = diagnostics.source();\n+        let root = self.db.parse_or_expand(src.file_id).unwrap();\n+        let node = src.value.to_node(&root);\n+        original_range(self.db, src.with_value(&node))\n+    }\n+\n     pub fn ancestors_with_macros(&self, node: SyntaxNode) -> impl Iterator<Item = SyntaxNode> + '_ {\n         let node = self.find_file(node);\n         node.ancestors_with_macros(self.db).map(|it| it.value)"}, {"sha": "2ee28fbaaabca2781b1246328072e774d07554fd", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8196ffe8466aa60dec56e77c2da717793c0debe/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8196ffe8466aa60dec56e77c2da717793c0debe/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=a8196ffe8466aa60dec56e77c2da717793c0debe", "patch": "@@ -20,11 +20,11 @@ impl Diagnostic for UnresolvedModule {\n     fn message(&self) -> String {\n         \"unresolved module\".to_string()\n     }\n-    fn highlight_range(&self) -> TextRange {\n-        self.highlight_range\n+    fn highlight_range(&self) -> InFile<TextRange> {\n+        InFile::new(self.file, self.highlight_range)\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.decl.clone().into() }\n+        InFile::new(self.file, self.decl.clone().into())\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self"}, {"sha": "813fbf0e270ff174512da406b7215da05307485c", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8196ffe8466aa60dec56e77c2da717793c0debe/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8196ffe8466aa60dec56e77c2da717793c0debe/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=a8196ffe8466aa60dec56e77c2da717793c0debe", "patch": "@@ -22,7 +22,7 @@ use crate::{db::AstDatabase, InFile};\n \n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn message(&self) -> String;\n-    fn highlight_range(&self) -> TextRange;\n+    fn highlight_range(&self) -> InFile<TextRange>;\n     fn source(&self) -> InFile<SyntaxNodePtr>;\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n }"}, {"sha": "018c2ad3f005a14c99639f2e480439b99ff7b6ac", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a8196ffe8466aa60dec56e77c2da717793c0debe/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8196ffe8466aa60dec56e77c2da717793c0debe/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=a8196ffe8466aa60dec56e77c2da717793c0debe", "patch": "@@ -21,12 +21,12 @@ impl Diagnostic for NoSuchField {\n         \"no such field\".to_string()\n     }\n \n-    fn highlight_range(&self) -> TextRange {\n-        self.highlight_range\n+    fn highlight_range(&self) -> InFile<TextRange> {\n+        InFile::new(self.file, self.highlight_range)\n     }\n \n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.field.clone().into() }\n+        InFile::new(self.file, self.field.clone().into())\n     }\n \n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -50,8 +50,8 @@ impl Diagnostic for MissingFields {\n         }\n         buf\n     }\n-    fn highlight_range(&self) -> TextRange {\n-        self.highlight_range\n+    fn highlight_range(&self) -> InFile<TextRange> {\n+        InFile::new(self.file, self.highlight_range)\n     }\n \n     fn source(&self) -> InFile<SyntaxNodePtr> {\n@@ -88,8 +88,8 @@ impl Diagnostic for MissingPatFields {\n         }\n         buf\n     }\n-    fn highlight_range(&self) -> TextRange {\n-        self.highlight_range\n+    fn highlight_range(&self) -> InFile<TextRange> {\n+        InFile::new(self.file, self.highlight_range)\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.field_list.clone().into() }\n@@ -111,8 +111,8 @@ impl Diagnostic for MissingMatchArms {\n     fn message(&self) -> String {\n         String::from(\"Missing match arm\")\n     }\n-    fn highlight_range(&self) -> TextRange {\n-        self.highlight_range\n+    fn highlight_range(&self) -> InFile<TextRange> {\n+        InFile::new(self.file, self.highlight_range)\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.match_expr.clone().into() }\n@@ -133,8 +133,8 @@ impl Diagnostic for MissingOkInTailExpr {\n     fn message(&self) -> String {\n         \"wrap return expression in Ok\".to_string()\n     }\n-    fn highlight_range(&self) -> TextRange {\n-        self.highlight_range\n+    fn highlight_range(&self) -> InFile<TextRange> {\n+        InFile::new(self.file, self.highlight_range)\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }"}, {"sha": "e7e201709880c9c947bf0d6d5e2da7437f93cb6e", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 66, "deletions": 6, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a8196ffe8466aa60dec56e77c2da717793c0debe/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8196ffe8466aa60dec56e77c2da717793c0debe/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=a8196ffe8466aa60dec56e77c2da717793c0debe", "patch": "@@ -1,4 +1,8 @@\n-//! FIXME: write short doc here\n+//! Collects diagnostics & fixits  for a single file.\n+//!\n+//! The tricky bit here is that diagnostics are produced by hir in terms of\n+//! macro-expanded files, but we need to present them to the users in terms of\n+//! original files. So we need to map the ranges.\n \n use std::cell::RefCell;\n \n@@ -46,7 +50,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n     let mut sink = DiagnosticSink::new(|d| {\n         res.borrow_mut().push(Diagnostic {\n             message: d.message(),\n-            range: d.highlight_range(),\n+            range: sema.diagnostics_range(d).range,\n             severity: Severity::Error,\n             fix: None,\n         })\n@@ -62,7 +66,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         let create_file = FileSystemEdit::CreateFile { source_root, path };\n         let fix = SourceChange::file_system_edit(\"create module\", create_file);\n         res.borrow_mut().push(Diagnostic {\n-            range: d.highlight_range(),\n+            range: sema.diagnostics_range(d).range,\n             message: d.message(),\n             severity: Severity::Error,\n             fix: Some(fix),\n@@ -95,15 +99,15 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         };\n \n         res.borrow_mut().push(Diagnostic {\n-            range: d.highlight_range(),\n+            range: sema.diagnostics_range(d).range,\n             message: d.message(),\n             severity: Severity::Error,\n             fix,\n         })\n     })\n     .on::<hir::diagnostics::MissingMatchArms, _>(|d| {\n         res.borrow_mut().push(Diagnostic {\n-            range: d.highlight_range(),\n+            range: sema.diagnostics_range(d).range,\n             message: d.message(),\n             severity: Severity::Error,\n             fix: None,\n@@ -115,7 +119,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         let edit = TextEdit::replace(node.syntax().text_range(), replacement);\n         let fix = SourceChange::source_file_edit_from(\"wrap with ok\", file_id, edit);\n         res.borrow_mut().push(Diagnostic {\n-            range: d.highlight_range(),\n+            range: sema.diagnostics_range(d).range,\n             message: d.message(),\n             severity: Severity::Error,\n             fix: Some(fix),\n@@ -621,6 +625,62 @@ mod tests {\n         \"###);\n     }\n \n+    #[test]\n+    fn range_mapping_out_of_macros() {\n+        let (analysis, file_id) = single_file(\n+            r\"\n+            fn some() {}\n+            fn items() {}\n+            fn here() {}\n+\n+            macro_rules! id {\n+                ($($tt:tt)*) => { $($tt)*};\n+            }\n+\n+            fn main() {\n+                let _x = id![Foo { a: 42 }];\n+            }\n+\n+            pub struct Foo {\n+                pub a: i32,\n+                pub b: i32,\n+            }\n+        \",\n+        );\n+        let diagnostics = analysis.diagnostics(file_id).unwrap();\n+        assert_debug_snapshot!(diagnostics, @r###\"\n+        [\n+            Diagnostic {\n+                message: \"Missing structure fields:\\n- b\",\n+                range: [224; 233),\n+                fix: Some(\n+                    SourceChange {\n+                        label: \"fill struct fields\",\n+                        source_file_edits: [\n+                            SourceFileEdit {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                edit: TextEdit {\n+                                    atoms: [\n+                                        AtomTextEdit {\n+                                            delete: [3; 9),\n+                                            insert: \"{a:42, b: ()}\",\n+                                        },\n+                                    ],\n+                                },\n+                            },\n+                        ],\n+                        file_system_edits: [],\n+                        cursor_position: None,\n+                    },\n+                ),\n+                severity: Error,\n+            },\n+        ]\n+        \"###);\n+    }\n+\n     #[test]\n     fn test_check_unnecessary_braces_in_use_statement() {\n         check_not_applicable("}]}