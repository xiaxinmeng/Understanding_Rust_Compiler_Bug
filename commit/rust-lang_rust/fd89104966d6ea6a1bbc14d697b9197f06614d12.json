{"sha": "fd89104966d6ea6a1bbc14d697b9197f06614d12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkODkxMDQ5NjZkNmVhNmExYmJjMTRkNjk3YjkxOTdmMDY2MTRkMTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-08T09:04:31Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T18:20:41Z"}, "message": "extract can_begin_bound", "tree": {"sha": "8afdd9545eb0395a725bf9a3f819f234664d20b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8afdd9545eb0395a725bf9a3f819f234664d20b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd89104966d6ea6a1bbc14d697b9197f06614d12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd89104966d6ea6a1bbc14d697b9197f06614d12", "html_url": "https://github.com/rust-lang/rust/commit/fd89104966d6ea6a1bbc14d697b9197f06614d12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd89104966d6ea6a1bbc14d697b9197f06614d12/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e61cb44f2f55a79562d1c714b42620c81c962d5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e61cb44f2f55a79562d1c714b42620c81c962d5d", "html_url": "https://github.com/rust-lang/rust/commit/e61cb44f2f55a79562d1c714b42620c81c962d5d"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "ca8dd62cc6a023b82c7b3e2ed1378e764e7661ae", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd89104966d6ea6a1bbc14d697b9197f06614d12/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd89104966d6ea6a1bbc14d697b9197f06614d12/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=fd89104966d6ea6a1bbc14d697b9197f06614d12", "patch": "@@ -367,19 +367,7 @@ impl<'a> Parser<'a> {\n         let mut negative_bounds = Vec::new();\n         let mut last_plus_span = None;\n         let mut was_negative = false;\n-        loop {\n-            // This needs to be synchronized with `TokenKind::can_begin_bound`.\n-            let is_bound_start = self.check_path()\n-                || self.check_lifetime()\n-                || self.check(&token::Not) // Used for error reporting only.\n-                || self.check(&token::Question)\n-                || self.check_keyword(kw::For)\n-                || self.check(&token::OpenDelim(token::Paren));\n-\n-            if !is_bound_start {\n-                break;\n-            }\n-\n+        while self.can_begin_bound() {\n             let lo = self.token.span;\n             let has_parens = self.eat(&token::OpenDelim(token::Paren));\n             let inner_lo = self.token.span;\n@@ -456,6 +444,17 @@ impl<'a> Parser<'a> {\n         return Ok(bounds);\n     }\n \n+    /// Can the current token begin a bound?\n+    fn can_begin_bound(&mut self) -> bool {\n+        // This needs to be synchronized with `TokenKind::can_begin_bound`.\n+        self.check_path()\n+        || self.check_lifetime()\n+        || self.check(&token::Not) // Used for error reporting only.\n+        || self.check(&token::Question)\n+        || self.check_keyword(kw::For)\n+        || self.check(&token::OpenDelim(token::Paren))\n+    }\n+\n     fn error_opt_out_lifetime(&self, question: Option<Span>) {\n         if let Some(span) = question {\n             self.struct_span_err(span, \"`?` may only modify trait bounds, not lifetime bounds\")"}]}