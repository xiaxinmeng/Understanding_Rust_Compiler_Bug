{"sha": "cdb69e2747e41db25d64cf77e99721e9134aa5b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYjY5ZTI3NDdlNDFkYjI1ZDY0Y2Y3N2U5OTcyMWU5MTM0YWE1Yjc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-11T01:31:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-17T16:07:16Z"}, "message": "std: Stabilize the remaining wrapping_* functions\n\nThis commit stabilizes the remaining `wrapping_*` functions on the primitive\ninteger types as they follow the same conventions as other wrapping methods are\nwere likely just initially unstable to be conservative.", "tree": {"sha": "a0486d6793e2a5820d85d51cdcc8a4fb706bd062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0486d6793e2a5820d85d51cdcc8a4fb706bd062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdb69e2747e41db25d64cf77e99721e9134aa5b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb69e2747e41db25d64cf77e99721e9134aa5b7", "html_url": "https://github.com/rust-lang/rust/commit/cdb69e2747e41db25d64cf77e99721e9134aa5b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdb69e2747e41db25d64cf77e99721e9134aa5b7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8797c9ec6ee2a00e2398ab736b0467c8e38cb496", "url": "https://api.github.com/repos/rust-lang/rust/commits/8797c9ec6ee2a00e2398ab736b0467c8e38cb496", "html_url": "https://github.com/rust-lang/rust/commit/8797c9ec6ee2a00e2398ab736b0467c8e38cb496"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "6af2148d4ed3d6a0378ae29fe26ef509575810d7", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cdb69e2747e41db25d64cf77e99721e9134aa5b7/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb69e2747e41db25d64cf77e99721e9134aa5b7/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=cdb69e2747e41db25d64cf77e99721e9134aa5b7", "patch": "@@ -468,7 +468,7 @@ macro_rules! int_impl {\n         /// to `-MIN`, a positive value that is too large to represent\n         /// in the type. In such a case, this function returns `MIN`\n         /// itself..\n-        #[unstable(feature = \"num_wrapping\")]\n+        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n         pub fn wrapping_div(self, rhs: Self) -> Self {\n             self.overflowing_div(rhs).0\n@@ -481,7 +481,7 @@ macro_rules! int_impl {\n         /// implementation artifacts make `x % y` illegal for `MIN /\n         /// -1` on a signed type illegal (where `MIN` is the negative\n         /// minimal value). In such a case, this function returns `0`.\n-        #[unstable(feature = \"num_wrapping\")]\n+        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n         pub fn wrapping_rem(self, rhs: Self) -> Self {\n             self.overflowing_rem(rhs).0\n@@ -495,7 +495,7 @@ macro_rules! int_impl {\n         /// negative minimal value for the type); this is a positive\n         /// value that is too large to represent in the type. In such\n         /// a case, this function returns `MIN` itself.\n-        #[unstable(feature = \"num_wrapping\")]\n+        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n         pub fn wrapping_neg(self) -> Self {\n             self.overflowing_neg().0\n@@ -504,7 +504,7 @@ macro_rules! int_impl {\n         /// Panic-free bitwise shift-left; yields `self << mask(rhs)`,\n         /// where `mask` removes any high-order bits of `rhs` that\n         /// would cause the shift to exceed the bitwidth of the type.\n-        #[unstable(feature = \"num_wrapping\")]\n+        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n         pub fn wrapping_shl(self, rhs: u32) -> Self {\n             self.overflowing_shl(rhs).0\n@@ -513,7 +513,7 @@ macro_rules! int_impl {\n         /// Panic-free bitwise shift-left; yields `self >> mask(rhs)`,\n         /// where `mask` removes any high-order bits of `rhs` that\n         /// would cause the shift to exceed the bitwidth of the type.\n-        #[unstable(feature = \"num_wrapping\")]\n+        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n         pub fn wrapping_shr(self, rhs: u32) -> Self {\n             self.overflowing_shr(rhs).0\n@@ -1038,7 +1038,7 @@ macro_rules! uint_impl {\n         /// to `-MIN`, a positive value that is too large to represent\n         /// in the type. In such a case, this function returns `MIN`\n         /// itself..\n-        #[unstable(feature = \"num_wrapping\")]\n+        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n         pub fn wrapping_div(self, rhs: Self) -> Self {\n             self.overflowing_div(rhs).0\n@@ -1051,7 +1051,7 @@ macro_rules! uint_impl {\n         /// implementation artifacts make `x % y` illegal for `MIN /\n         /// -1` on a signed type illegal (where `MIN` is the negative\n         /// minimal value). In such a case, this function returns `0`.\n-        #[unstable(feature = \"num_wrapping\")]\n+        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n         pub fn wrapping_rem(self, rhs: Self) -> Self {\n             self.overflowing_rem(rhs).0\n@@ -1065,7 +1065,7 @@ macro_rules! uint_impl {\n         /// negative minimal value for the type); this is a positive\n         /// value that is too large to represent in the type. In such\n         /// a case, this function returns `MIN` itself.\n-        #[unstable(feature = \"num_wrapping\")]\n+        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n         pub fn wrapping_neg(self) -> Self {\n             self.overflowing_neg().0\n@@ -1074,7 +1074,7 @@ macro_rules! uint_impl {\n         /// Panic-free bitwise shift-left; yields `self << mask(rhs)`,\n         /// where `mask` removes any high-order bits of `rhs` that\n         /// would cause the shift to exceed the bitwidth of the type.\n-        #[unstable(feature = \"num_wrapping\")]\n+        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n         pub fn wrapping_shl(self, rhs: u32) -> Self {\n             self.overflowing_shl(rhs).0\n@@ -1083,7 +1083,7 @@ macro_rules! uint_impl {\n         /// Panic-free bitwise shift-left; yields `self >> mask(rhs)`,\n         /// where `mask` removes any high-order bits of `rhs` that\n         /// would cause the shift to exceed the bitwidth of the type.\n-        #[unstable(feature = \"num_wrapping\")]\n+        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n         pub fn wrapping_shr(self, rhs: u32) -> Self {\n             self.overflowing_shr(rhs).0"}]}