{"sha": "0ebd3ab63aa08337bb4e4600358679262ce8d242", "node_id": "C_kwDOAAsO6NoAKDBlYmQzYWI2M2FhMDgzMzdiYjRlNDYwMDM1ODY3OTI2MmNlOGQyNDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-04T18:10:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-04T18:10:04Z"}, "message": "Auto merge of #101411 - matthiaskrgr:rollup-uj24yb5, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #101322 (Fix internal doc link)\n - #101385 (updated description of File struct in std::fs)\n - #101388 (Don't delay invalid LHS bug unless it will be covered by an error in `check_overloaded_binop`)\n - #101394 (Forbid mixing `System` with direct sytem allocator calls)\n - #101397 (rustdoc: remove redundant mobile-sized `.source nav:not(.sidebar).sub`)\n - #101401 (Make `char::is_lowercase` and `char::is_uppercase` const)\n - #101407 (Remove duplicated test (superseeded by search-form-elements.goml))\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0dfaee0b3b84f3594c86d2d25958f0b44c8accc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dfaee0b3b84f3594c86d2d25958f0b44c8accc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ebd3ab63aa08337bb4e4600358679262ce8d242", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ebd3ab63aa08337bb4e4600358679262ce8d242", "html_url": "https://github.com/rust-lang/rust/commit/0ebd3ab63aa08337bb4e4600358679262ce8d242", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ebd3ab63aa08337bb4e4600358679262ce8d242/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "html_url": "https://github.com/rust-lang/rust/commit/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318"}, {"sha": "cea11f50dc9e6e28d74e0e08e24641147c7c7fb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cea11f50dc9e6e28d74e0e08e24641147c7c7fb8", "html_url": "https://github.com/rust-lang/rust/commit/cea11f50dc9e6e28d74e0e08e24641147c7c7fb8"}], "stats": {"total": 190, "additions": 130, "deletions": 60}, "files": [{"sha": "0d9dbb5bc11c24ece1ef00c329fff37c1cf5a55f", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd3ab63aa08337bb4e4600358679262ce8d242/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd3ab63aa08337bb4e4600358679262ce8d242/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=0ebd3ab63aa08337bb4e4600358679262ce8d242", "patch": "@@ -57,9 +57,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     )\n                     .is_ok()\n                 {\n-                    // Suppress this error, since we already emitted\n-                    // a deref suggestion in check_overloaded_binop\n-                    err.downgrade_to_delayed_bug();\n+                    // If LHS += RHS is an error, but *LHS += RHS is successful, then we will have\n+                    // emitted a better suggestion during error handling in check_overloaded_binop.\n+                    if self\n+                        .lookup_op_method(\n+                            lhs_ty,\n+                            Some(rhs_ty),\n+                            Some(rhs),\n+                            Op::Binary(op, IsAssign::Yes),\n+                            expected,\n+                        )\n+                        .is_err()\n+                    {\n+                        err.downgrade_to_delayed_bug();\n+                    } else {\n+                        // Otherwise, it's valid to suggest dereferencing the LHS here.\n+                        err.span_suggestion_verbose(\n+                            lhs.span.shrink_to_lo(),\n+                            \"consider dereferencing the left-hand side of this operation\",\n+                            \"*\",\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n                 }\n             }\n         });"}, {"sha": "17ee78045a9b2b8d089f6880ecd21d35fda28111", "filename": "library/alloc/src/collections/btree/dedup_sorted_iter.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd3ab63aa08337bb4e4600358679262ce8d242/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fdedup_sorted_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd3ab63aa08337bb4e4600358679262ce8d242/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fdedup_sorted_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fdedup_sorted_iter.rs?ref=0ebd3ab63aa08337bb4e4600358679262ce8d242", "patch": "@@ -3,7 +3,9 @@ use core::iter::Peekable;\n /// A iterator for deduping the key of a sorted iterator.\n /// When encountering the duplicated key, only the last key-value pair is yielded.\n ///\n-/// Used by [`BTreeMap::bulk_build_from_sorted_iter`].\n+/// Used by [`BTreeMap::bulk_build_from_sorted_iter`][1].\n+///\n+/// [1]: crate::collections::BTreeMap::bulk_build_from_sorted_iter\n pub struct DedupSortedIter<K, V, I>\n where\n     I: Iterator<Item = (K, V)>,"}, {"sha": "b7a63b7c675666d627f4ac9c504b89955390a56c", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd3ab63aa08337bb4e4600358679262ce8d242/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd3ab63aa08337bb4e4600358679262ce8d242/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=0ebd3ab63aa08337bb4e4600358679262ce8d242", "patch": "@@ -746,10 +746,19 @@ impl char {\n     /// assert!(!'\u4e2d'.is_lowercase());\n     /// assert!(!' '.is_lowercase());\n     /// ```\n+    ///\n+    /// In a const context:\n+    ///\n+    /// ```\n+    /// #![feature(const_unicode_case_lookup)]\n+    /// const CAPITAL_DELTA_IS_LOWERCASE: bool = '\u0394'.is_lowercase();\n+    /// assert!(!CAPITAL_DELTA_IS_LOWERCASE);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_unicode_case_lookup\", issue = \"101400\")]\n     #[inline]\n-    pub fn is_lowercase(self) -> bool {\n+    pub const fn is_lowercase(self) -> bool {\n         match self {\n             'a'..='z' => true,\n             c => c > '\\x7f' && unicode::Lowercase(c),\n@@ -779,10 +788,19 @@ impl char {\n     /// assert!(!'\u4e2d'.is_uppercase());\n     /// assert!(!' '.is_uppercase());\n     /// ```\n+    ///\n+    /// In a const context:\n+    ///\n+    /// ```\n+    /// #![feature(const_unicode_case_lookup)]\n+    /// const CAPITAL_DELTA_IS_UPPERCASE: bool = '\u0394'.is_uppercase();\n+    /// assert!(CAPITAL_DELTA_IS_UPPERCASE);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_unicode_case_lookup\", issue = \"101400\")]\n     #[inline]\n-    pub fn is_uppercase(self) -> bool {\n+    pub const fn is_uppercase(self) -> bool {\n         match self {\n             'A'..='Z' => true,\n             c => c > '\\x7f' && unicode::Uppercase(c),"}, {"sha": "5b1e2045fff63e07df043843dfdd1872b635abdf", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd3ab63aa08337bb4e4600358679262ce8d242/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd3ab63aa08337bb4e4600358679262ce8d242/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=0ebd3ab63aa08337bb4e4600358679262ce8d242", "patch": "@@ -143,6 +143,7 @@\n #![feature(const_type_id)]\n #![feature(const_type_name)]\n #![feature(const_default_impls)]\n+#![feature(const_unicode_case_lookup)]\n #![feature(const_unsafecell_get_mut)]\n #![feature(core_panic)]\n #![feature(duration_consts_float)]"}, {"sha": "7301da2afec466e59140835acbd166859d0cca78", "filename": "library/core/src/unicode/unicode_data.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd3ab63aa08337bb4e4600358679262ce8d242/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd3ab63aa08337bb4e4600358679262ce8d242/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs?ref=0ebd3ab63aa08337bb4e4600358679262ce8d242", "patch": "@@ -1,7 +1,8 @@\n ///! This file is generated by src/tools/unicode-table-generator; do not edit manually!\n \n+#[rustc_const_unstable(feature = \"const_unicode_case_lookup\", issue = \"101400\")]\n #[inline(always)]\n-fn bitset_search<\n+const fn bitset_search<\n     const N: usize,\n     const CHUNK_SIZE: usize,\n     const N1: usize,\n@@ -17,14 +18,18 @@ fn bitset_search<\n     let bucket_idx = (needle / 64) as usize;\n     let chunk_map_idx = bucket_idx / CHUNK_SIZE;\n     let chunk_piece = bucket_idx % CHUNK_SIZE;\n-    let chunk_idx = if let Some(&v) = chunk_idx_map.get(chunk_map_idx) {\n-        v\n+    // FIXME: const-hack: Revert to `slice::get` after `const_slice_index`\n+    // feature stabilizes.\n+    let chunk_idx = if chunk_map_idx < chunk_idx_map.len() {\n+        chunk_idx_map[chunk_map_idx]\n     } else {\n         return false;\n     };\n     let idx = bitset_chunk_idx[chunk_idx as usize][chunk_piece] as usize;\n-    let word = if let Some(word) = bitset_canonical.get(idx) {\n-        *word\n+    // FIXME: const-hack: Revert to `slice::get` after `const_slice_index`\n+    // feature stabilizes.\n+    let word = if idx < bitset_canonical.len() {\n+        bitset_canonical[idx]\n     } else {\n         let (real_idx, mapping) = bitset_canonicalized[idx - bitset_canonical.len()];\n         let mut word = bitset_canonical[real_idx as usize];\n@@ -318,14 +323,14 @@ pub mod grapheme_extend {\n \n #[rustfmt::skip]\n pub mod lowercase {\n-    static BITSET_CHUNKS_MAP: [u8; 123] = [\n+    const BITSET_CHUNKS_MAP: &'static [u8; 123] = &[\n         14, 17, 0, 0, 9, 0, 0, 12, 13, 10, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 4, 1, 0, 15, 0, 8, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0,\n         3, 0, 0, 7,\n     ];\n-    static BITSET_INDEX_CHUNKS: [[u8; 16]; 19] = [\n+    const BITSET_INDEX_CHUNKS: &'static [[u8; 16]; 19] = &[\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 14, 55, 0],\n@@ -346,7 +351,7 @@ pub mod lowercase {\n         [16, 49, 2, 20, 66, 9, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n         [63, 39, 54, 12, 73, 61, 18, 1, 6, 62, 71, 19, 68, 69, 3, 44],\n     ];\n-    static BITSET_CANONICAL: [u64; 55] = [\n+    const BITSET_CANONICAL: &'static [u64; 55] = &[\n         0b0000000000000000000000000000000000000000000000000000000000000000,\n         0b1111111111111111110000000000000000000000000011111111111111111111,\n         0b1010101010101010101010101010101010101010101010101010100000000010,\n@@ -403,13 +408,14 @@ pub mod lowercase {\n         0b1110011111111111111111111111111111111111111111110000000000000000,\n         0b1110101111000000000000000000000000001111111111111111111111111100,\n     ];\n-    static BITSET_MAPPING: [(u8, u8); 20] = [\n+    const BITSET_MAPPING: &'static [(u8, u8); 20] = &[\n         (0, 64), (1, 188), (1, 183), (1, 176), (1, 109), (1, 124), (1, 126), (1, 66), (1, 70),\n         (1, 77), (2, 146), (2, 144), (2, 83), (3, 12), (3, 6), (4, 156), (4, 78), (5, 187),\n         (6, 132), (7, 93),\n     ];\n \n-    pub fn lookup(c: char) -> bool {\n+    #[rustc_const_unstable(feature = \"const_unicode_case_lookup\", issue = \"101400\")]\n+    pub const fn lookup(c: char) -> bool {\n         super::bitset_search(\n             c as u32,\n             &BITSET_CHUNKS_MAP,\n@@ -454,14 +460,14 @@ pub mod n {\n \n #[rustfmt::skip]\n pub mod uppercase {\n-    static BITSET_CHUNKS_MAP: [u8; 125] = [\n+    const BITSET_CHUNKS_MAP: &'static [u8; 125] = &[\n         12, 15, 6, 6, 0, 6, 6, 2, 4, 11, 6, 16, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n         6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n         6, 6, 6, 5, 6, 14, 6, 10, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n         6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 13, 6, 6,\n         6, 6, 9, 6, 3,\n     ];\n-    static BITSET_INDEX_CHUNKS: [[u8; 16]; 17] = [\n+    const BITSET_INDEX_CHUNKS: &'static [[u8; 16]; 17] = &[\n         [43, 43, 5, 34, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 5, 1],\n         [43, 43, 5, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n         [43, 43, 39, 43, 43, 43, 43, 43, 17, 17, 62, 17, 42, 29, 24, 23],\n@@ -480,7 +486,7 @@ pub mod uppercase {\n         [57, 19, 2, 18, 10, 47, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n         [57, 37, 17, 27, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n     ];\n-    static BITSET_CANONICAL: [u64; 43] = [\n+    const BITSET_CANONICAL: &'static [u64; 43] = &[\n         0b0000011111111111111111111111111000000000000000000000000000000000,\n         0b0000000000111111111111111111111111111111111111111111111111111111,\n         0b0101010101010101010101010101010101010101010101010101010000000001,\n@@ -525,13 +531,14 @@ pub mod uppercase {\n         0b1111011111111111000000000000000000000000000000000000000000000000,\n         0b1111111100000000111111110000000000111111000000001111111100000000,\n     ];\n-    static BITSET_MAPPING: [(u8, u8); 25] = [\n+    const BITSET_MAPPING: &'static [(u8, u8); 25] = &[\n         (0, 187), (0, 177), (0, 171), (0, 167), (0, 164), (0, 32), (0, 47), (0, 51), (0, 121),\n         (0, 117), (0, 109), (1, 150), (1, 148), (1, 142), (1, 134), (1, 131), (1, 64), (2, 164),\n         (2, 146), (2, 20), (3, 146), (3, 140), (3, 134), (4, 178), (4, 171),\n     ];\n \n-    pub fn lookup(c: char) -> bool {\n+    #[rustc_const_unstable(feature = \"const_unicode_case_lookup\", issue = \"101400\")]\n+    pub const fn lookup(c: char) -> bool {\n         super::bitset_search(\n             c as u32,\n             &BITSET_CHUNKS_MAP,"}, {"sha": "61c1ff578b2cad4ec3f8c46b09bd71ab80ef0d1b", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd3ab63aa08337bb4e4600358679262ce8d242/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd3ab63aa08337bb4e4600358679262ce8d242/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=0ebd3ab63aa08337bb4e4600358679262ce8d242", "patch": "@@ -68,7 +68,10 @@ pub use alloc_crate::alloc::*;\n /// The default memory allocator provided by the operating system.\n ///\n /// This is based on `malloc` on Unix platforms and `HeapAlloc` on Windows,\n-/// plus related functions.\n+/// plus related functions. However, it is not valid to mix use of the backing\n+/// system allocator with `System`, as this implementation may include extra\n+/// work, such as to serve alignment requests greater than the alignment\n+/// provided directly by the backing system allocator.\n ///\n /// This type implements the `GlobalAlloc` trait and Rust programs by default\n /// work as if they had this definition:"}, {"sha": "c6c78dc3939e7b12ba4d49d2165539a8e574ed9c", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd3ab63aa08337bb4e4600358679262ce8d242/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd3ab63aa08337bb4e4600358679262ce8d242/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=0ebd3ab63aa08337bb4e4600358679262ce8d242", "patch": "@@ -19,7 +19,7 @@ use crate::sys::fs as fs_imp;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n use crate::time::SystemTime;\n \n-/// A reference to an open file on the filesystem.\n+/// An object providing access to an open file on the filesystem.\n ///\n /// An instance of a `File` can be read and/or written depending on what options\n /// it was opened with. Files also implement [`Seek`] to alter the logical cursor"}, {"sha": "52a7776153dac353e3d2ca72f95a13958efff3dc", "filename": "src/ci/docker/host-x86_64/mingw-check/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd3ab63aa08337bb4e4600358679262ce8d242/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd3ab63aa08337bb4e4600358679262ce8d242/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile?ref=0ebd3ab63aa08337bb4e4600358679262ce8d242", "patch": "@@ -45,7 +45,8 @@ ENV SCRIPT python3 ../x.py --stage 2 test src/tools/expand-yaml-anchors && \\\n            python3 ../x.py test --stage 0 src/tools/compiletest && \\\n            python3 ../x.py test --stage 2 src/tools/tidy && \\\n            python3 ../x.py test --stage 0 core alloc std test proc_macro && \\\n-           python3 ../x.py doc --stage 0 library/test && \\\n+           # Build both public and internal documentation.\n+           RUSTDOCFLAGS=\"--document-private-items\" python3 ../x.py doc --stage 0 library/test && \\\n            /scripts/validate-toolstate.sh && \\\n            /scripts/validate-error-codes.sh && \\\n            reuse lint && \\"}, {"sha": "3502d97d470fecb56c39d3012db24cfb62ea1bb2", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd3ab63aa08337bb4e4600358679262ce8d242/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd3ab63aa08337bb4e4600358679262ce8d242/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=0ebd3ab63aa08337bb4e4600358679262ce8d242", "patch": "@@ -1883,10 +1883,6 @@ in storage.js plus the media query with (min-width: 701px)\n \t\tbackground-color: var(--sidebar-background-color);\n \t}\n \n-\t.source nav:not(.sidebar).sub {\n-\t\tmargin-left: 32px;\n-\t}\n-\n \t.content {\n \t\tmargin-left: 0px;\n \t}"}, {"sha": "fd61c4f43d18139e9b5449cde0f10fec82d9ac34", "filename": "src/test/rustdoc-gui/search-input.goml", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Frustdoc-gui%2Fsearch-input.goml", "raw_url": "https://github.com/rust-lang/rust/raw/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Frustdoc-gui%2Fsearch-input.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-input.goml?ref=a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "patch": "@@ -1,22 +0,0 @@\n-// Ensures that the search input border color changes on focus.\n-goto: file://|DOC_PATH|/test_docs/index.html\n-local-storage: {\"rustdoc-use-system-theme\": \"false\", \"rustdoc-theme\": \"dark\"}\n-reload:\n-\n-assert-css: (\".search-input\", {\"border-color\": \"rgb(224, 224, 224)\"})\n-click: \".search-input\"\n-assert-css: (\".search-input\", {\"border-color\": \"rgb(0, 141, 253)\"})\n-\n-local-storage: {\"rustdoc-theme\": \"light\"}\n-reload:\n-\n-assert-css: (\".search-input\", {\"border-color\": \"rgb(224, 224, 224)\"})\n-click: \".search-input\"\n-assert-css: (\".search-input\", {\"border-color\": \"rgb(102, 175, 233)\"})\n-\n-local-storage: {\"rustdoc-theme\": \"ayu\"}\n-reload:\n-\n-assert-css: (\".search-input\", {\"border-color\": \"rgb(92, 103, 115)\"})\n-click: \".search-input\"\n-assert-css: (\".search-input\", {\"border-color\": \"rgb(92, 103, 115)\"})"}, {"sha": "c979d76b4f4161a90ed637c969528ade1875cc51", "filename": "src/test/ui/typeck/assign-non-lval-needs-deref.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd3ab63aa08337bb4e4600358679262ce8d242/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-needs-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd3ab63aa08337bb4e4600358679262ce8d242/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-needs-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-needs-deref.rs?ref=0ebd3ab63aa08337bb4e4600358679262ce8d242", "patch": "@@ -0,0 +1,19 @@\n+// issue #101376\n+\n+use std::ops::AddAssign;\n+struct Foo;\n+\n+impl AddAssign<()> for Foo {\n+    fn add_assign(&mut self, _: ()) {}\n+}\n+\n+impl AddAssign<()> for &mut Foo {\n+    fn add_assign(&mut self, _: ()) {}\n+}\n+\n+fn main() {\n+    (&mut Foo) += ();\n+    //~^ ERROR invalid left-hand side of assignment\n+    //~| NOTE cannot assign to this expression\n+    //~| HELP consider dereferencing the left-hand side of this operation\n+}"}, {"sha": "ee83b1453213174c3a6ce07e8c8bd6e05a753959", "filename": "src/test/ui/typeck/assign-non-lval-needs-deref.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd3ab63aa08337bb4e4600358679262ce8d242/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-needs-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd3ab63aa08337bb4e4600358679262ce8d242/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-needs-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-needs-deref.stderr?ref=0ebd3ab63aa08337bb4e4600358679262ce8d242", "patch": "@@ -0,0 +1,16 @@\n+error[E0067]: invalid left-hand side of assignment\n+  --> $DIR/assign-non-lval-needs-deref.rs:15:16\n+   |\n+LL |     (&mut Foo) += ();\n+   |     ---------- ^^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+help: consider dereferencing the left-hand side of this operation\n+   |\n+LL |     *(&mut Foo) += ();\n+   |     +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0067`."}, {"sha": "3a5b869f72f76d05beb08d12f96c29e2bce4e6b8", "filename": "src/tools/unicode-table-generator/src/range_search.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd3ab63aa08337bb4e4600358679262ce8d242/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd3ab63aa08337bb4e4600358679262ce8d242/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs?ref=0ebd3ab63aa08337bb4e4600358679262ce8d242", "patch": "@@ -1,5 +1,6 @@\n+#[rustc_const_unstable(feature = \"const_unicode_case_lookup\", issue = \"101400\")]\n #[inline(always)]\n-fn bitset_search<\n+const fn bitset_search<\n     const N: usize,\n     const CHUNK_SIZE: usize,\n     const N1: usize,\n@@ -15,14 +16,18 @@ fn bitset_search<\n     let bucket_idx = (needle / 64) as usize;\n     let chunk_map_idx = bucket_idx / CHUNK_SIZE;\n     let chunk_piece = bucket_idx % CHUNK_SIZE;\n-    let chunk_idx = if let Some(&v) = chunk_idx_map.get(chunk_map_idx) {\n-        v\n+    // FIXME: const-hack: Revert to `slice::get` after `const_slice_index`\n+    // feature stabilizes.\n+    let chunk_idx = if chunk_map_idx < chunk_idx_map.len() {\n+        chunk_idx_map[chunk_map_idx]\n     } else {\n         return false;\n     };\n     let idx = bitset_chunk_idx[chunk_idx as usize][chunk_piece] as usize;\n-    let word = if let Some(word) = bitset_canonical.get(idx) {\n-        *word\n+    // FIXME: const-hack: Revert to `slice::get` after `const_slice_index`\n+    // feature stabilizes.\n+    let word = if idx < bitset_canonical.len() {\n+        bitset_canonical[idx]\n     } else {\n         let (real_idx, mapping) = bitset_canonicalized[idx - bitset_canonical.len()];\n         let mut word = bitset_canonical[real_idx as usize];"}, {"sha": "890ff986c2be05c6178b0c79fd637c88e17e1b28", "filename": "src/tools/unicode-table-generator/src/raw_emitter.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd3ab63aa08337bb4e4600358679262ce8d242/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd3ab63aa08337bb4e4600358679262ce8d242/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs?ref=0ebd3ab63aa08337bb4e4600358679262ce8d242", "patch": "@@ -76,15 +76,15 @@ impl RawEmitter {\n \n         writeln!(\n             &mut self.file,\n-            \"static BITSET_CANONICAL: [u64; {}] = [{}];\",\n+            \"const BITSET_CANONICAL: &'static [u64; {}] = &[{}];\",\n             canonicalized.canonical_words.len(),\n             fmt_list(canonicalized.canonical_words.iter().map(|v| Bits(*v))),\n         )\n         .unwrap();\n         self.bytes_used += 8 * canonicalized.canonical_words.len();\n         writeln!(\n             &mut self.file,\n-            \"static BITSET_MAPPING: [(u8, u8); {}] = [{}];\",\n+            \"const BITSET_MAPPING: &'static [(u8, u8); {}] = &[{}];\",\n             canonicalized.canonicalized_words.len(),\n             fmt_list(&canonicalized.canonicalized_words),\n         )\n@@ -96,7 +96,12 @@ impl RawEmitter {\n \n         self.blank_line();\n \n-        writeln!(&mut self.file, \"pub fn lookup(c: char) -> bool {{\").unwrap();\n+        writeln!(\n+            &mut self.file,\n+            r#\"#[rustc_const_unstable(feature = \"const_unicode_case_lookup\", issue = \"101400\")]\"#\n+        )\n+        .unwrap();\n+        writeln!(&mut self.file, \"pub const fn lookup(c: char) -> bool {{\").unwrap();\n         writeln!(&mut self.file, \"    super::bitset_search(\",).unwrap();\n         writeln!(&mut self.file, \"        c as u32,\").unwrap();\n         writeln!(&mut self.file, \"        &BITSET_CHUNKS_MAP,\").unwrap();\n@@ -130,15 +135,15 @@ impl RawEmitter {\n \n         writeln!(\n             &mut self.file,\n-            \"static BITSET_CHUNKS_MAP: [u8; {}] = [{}];\",\n+            \"const BITSET_CHUNKS_MAP: &'static [u8; {}] = &[{}];\",\n             chunk_indices.len(),\n             fmt_list(&chunk_indices),\n         )\n         .unwrap();\n         self.bytes_used += chunk_indices.len();\n         writeln!(\n             &mut self.file,\n-            \"static BITSET_INDEX_CHUNKS: [[u8; {}]; {}] = [{}];\",\n+            \"const BITSET_INDEX_CHUNKS: &'static [[u8; {}]; {}] = &[{}];\",\n             chunk_length,\n             chunks.len(),\n             fmt_list(chunks.iter()),"}]}