{"sha": "718268398e312b02775e946af31d77fe35fb5550", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxODI2ODM5OGUzMTJiMDI3NzVlOTQ2YWYzMWQ3N2ZlMzVmYjU1NTA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-06-14T22:06:01Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-06-14T22:06:01Z"}, "message": "Rebasing and bug fixing", "tree": {"sha": "c3213562ddb1eeee03135b644d07aa69db5e7d44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3213562ddb1eeee03135b644d07aa69db5e7d44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/718268398e312b02775e946af31d77fe35fb5550", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/718268398e312b02775e946af31d77fe35fb5550", "html_url": "https://github.com/rust-lang/rust/commit/718268398e312b02775e946af31d77fe35fb5550", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/718268398e312b02775e946af31d77fe35fb5550/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92d66764121a719d6755a7c33829598d32c9f4ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/92d66764121a719d6755a7c33829598d32c9f4ba", "html_url": "https://github.com/rust-lang/rust/commit/92d66764121a719d6755a7c33829598d32c9f4ba"}], "stats": {"total": 84, "additions": 45, "deletions": 39}, "files": [{"sha": "cbc40af4b524e8009dc346c34909a82f8e3127a9", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/718268398e312b02775e946af31d77fe35fb5550/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/718268398e312b02775e946af31d77fe35fb5550/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=718268398e312b02775e946af31d77fe35fb5550", "patch": "@@ -873,30 +873,31 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n \n         self.write_sub_paths_truncated(path, false);\n \n-        let struct_lit_data = self.save_ctxt.get_expr_data(ex);\n-        down_cast_data!(struct_lit_data, TypeRefData, self, ex.span);\n-        self.fmt.ref_str(recorder::TypeRef,\n-                         ex.span,\n-                         Some(struct_lit_data.span),\n-                         struct_lit_data.ref_id,\n-                         struct_lit_data.scope);\n-        let struct_def = struct_lit_data.ref_id;\n-\n-        for field in fields {\n-            if generated_code(field.ident.span) {\n-                continue;\n-            }\n+        if let Some(struct_lit_data) = self.save_ctxt.get_expr_data(ex) {\n+            down_cast_data!(struct_lit_data, TypeRefData, self, ex.span);\n+            self.fmt.ref_str(recorder::TypeRef,\n+                             ex.span,\n+                             Some(struct_lit_data.span),\n+                             struct_lit_data.ref_id,\n+                             struct_lit_data.scope);\n+            let struct_def = struct_lit_data.ref_id;\n+\n+            for field in fields {\n+                if generated_code(field.ident.span) {\n+                    continue;\n+                }\n \n-            let field_data = self.save_ctxt.get_field_ref_data(field,\n-                                                               struct_def,\n-                                                               self.cur_scope);\n-            self.fmt.ref_str(recorder::VarRef,\n-                             field.ident.span,\n-                             Some(field_data.span),\n-                             field_data.ref_id,\n-                             field_data.scope);\n+                let field_data = self.save_ctxt.get_field_ref_data(field,\n+                                                                   struct_def,\n+                                                                   self.cur_scope);\n+                self.fmt.ref_str(recorder::VarRef,\n+                                 field.ident.span,\n+                                 Some(field_data.span),\n+                                 field_data.ref_id,\n+                                 field_data.scope);\n \n-            self.visit_expr(&field.expr)\n+                self.visit_expr(&field.expr)\n+            }\n         }\n \n         visit::walk_expr_opt(self, base)\n@@ -1256,13 +1257,14 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n \n                 self.visit_expr(&sub_ex);\n \n-                let field_data = self.save_ctxt.get_expr_data(ex);\n-                down_cast_data!(field_data, VariableRefData, self, ex.span);\n-                self.fmt.ref_str(recorder::VarRef,\n-                                 ex.span,\n-                                 Some(field_data.span),\n-                                 field_data.ref_id,\n-                                 field_data.scope);\n+                if let Some(field_data) = self.save_ctxt.get_expr_data(ex) {\n+                    down_cast_data!(field_data, VariableRefData, self, ex.span);\n+                    self.fmt.ref_str(recorder::VarRef,\n+                                     ex.span,\n+                                     Some(field_data.span),\n+                                     field_data.ref_id,\n+                                     field_data.scope);\n+                }\n             },\n             ast::ExprTupField(ref sub_ex, idx) => {\n                 if generated_code(sub_ex.span) {"}, {"sha": "380d6b0ee6578a4264eda8fe48cf6c9601194bba", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/718268398e312b02775e946af31d77fe35fb5550/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/718268398e312b02775e946af31d77fe35fb5550/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=718268398e312b02775e946af31d77fe35fb5550", "patch": "@@ -329,7 +329,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         })\n     }\n \n-    pub fn get_expr_data(&self, expr: &ast::Expr) -> Data {\n+    pub fn get_expr_data(&self, expr: &ast::Expr) -> Option<Data> {\n         match expr.node {\n             ast::ExprField(ref sub_ex, ident) => {\n                 let ty = &ty::expr_ty_adjusted(&self.analysis.ty_cx, &sub_ex).sty;\n@@ -339,12 +339,12 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                         for f in &fields {\n                             if f.name == ident.node.name {\n                                 let sub_span = self.span_utils.span_for_last_ident(expr.span);\n-                                return Data::VariableRefData(VariableRefData {\n+                                return Some(Data::VariableRefData(VariableRefData {\n                                     name: get_ident(ident.node).to_string(),\n                                     span: sub_span.unwrap(),\n                                     scope: self.analysis.ty_cx.map.get_parent(expr.id),\n                                     ref_id: f.id,\n-                                });\n+                                }));\n                             }\n                         }\n \n@@ -353,24 +353,28 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                                                     &get_ident(ident.node),\n                                                     ty))\n                     }\n-                    _ => self.sess.span_bug(expr.span,\n-                                            &format!(\"Expected struct type, found {:?}\", ty)),\n+                    _ => {\n+                        debug!(\"Expected struct type, found {:?}\", ty);\n+                        None\n+                    }\n                 }\n             }\n             ast::ExprStruct(ref path, _, _) => {\n                 let ty = &ty::expr_ty_adjusted(&self.analysis.ty_cx, expr).sty;\n                 match *ty {\n-                    ty::ty_struct(def_id, _) => {\n+                    ty::TyStruct(def_id, _) => {\n                         let sub_span = self.span_utils.span_for_last_ident(path.span);\n-                        Data::TypeRefData(TypeRefData {\n+                        Some(Data::TypeRefData(TypeRefData {\n                             span: sub_span.unwrap(),\n                             scope: self.analysis.ty_cx.map.get_parent(expr.id),\n                             ref_id: def_id,\n-                        })\n+                        }))\n                     }\n                     _ => {\n-                        self.sess.span_bug(expr.span,\n-                                           &format!(\"expected ty_struct, found {:?}\", ty));\n+                        // FIXME ty could legitimately be a TyEnum, but then we will fail\n+                        // later if we try to look up the fields.\n+                        debug!(\"expected TyStruct, found {:?}\", ty);\n+                        None\n                     }\n                 }\n             }"}]}