{"sha": "4e496de26d483447d309673a47c5e2013e46bf2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNDk2ZGUyNmQ0ODM0NDdkMzA5NjczYTQ3YzVlMjAxM2U0NmJmMmI=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2017-10-29T04:13:49Z"}, "committer": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2017-11-02T00:12:10Z"}, "message": "Add derive and doc comment capabilities to newtype_index macro", "tree": {"sha": "58e0d48c37c49c180f9f5923831f07b2e4176925", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58e0d48c37c49c180f9f5923831f07b2e4176925"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e496de26d483447d309673a47c5e2013e46bf2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e496de26d483447d309673a47c5e2013e46bf2b", "html_url": "https://github.com/rust-lang/rust/commit/4e496de26d483447d309673a47c5e2013e46bf2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e496de26d483447d309673a47c5e2013e46bf2b/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2be4cc040211a85b17f21e813ff62351ae4de642", "url": "https://api.github.com/repos/rust-lang/rust/commits/2be4cc040211a85b17f21e813ff62351ae4de642", "html_url": "https://github.com/rust-lang/rust/commit/2be4cc040211a85b17f21e813ff62351ae4de642"}], "stats": {"total": 205, "additions": 143, "deletions": 62}, "files": [{"sha": "120af4821e36f3496b3f7c599f89044b56bb2254", "filename": "src/librustc/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e496de26d483447d309673a47c5e2013e46bf2b/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e496de26d483447d309673a47c5e2013e46bf2b/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fserialized.rs?ref=4e496de26d483447d309673a47c5e2013e46bf2b", "patch": "@@ -14,7 +14,7 @@ use dep_graph::DepNode;\n use ich::Fingerprint;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n-newtype_index!(SerializedDepNodeIndex);\n+newtype_index!(SerializedDepNodeIndex { derive[RustcEncodable, RustcDecodable] });\n \n /// Data for use when recompiling the **current crate**.\n #[derive(Debug, RustcEncodable, RustcDecodable)]"}, {"sha": "6c401482c97727b24c06a741085893519e44e9dd", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4e496de26d483447d309673a47c5e2013e46bf2b/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e496de26d483447d309673a47c5e2013e46bf2b/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=4e496de26d483447d309673a47c5e2013e46bf2b", "patch": "@@ -16,30 +16,19 @@ use serialize::{self, Encoder, Decoder};\n use std::fmt;\n use std::u32;\n \n-#[derive(Clone, Copy, Eq, Ord, PartialOrd, PartialEq, Hash, Debug)]\n-pub struct CrateNum(u32);\n-\n-impl Idx for CrateNum {\n-    fn new(value: usize) -> Self {\n-        assert!(value < (u32::MAX) as usize);\n-        CrateNum(value as u32)\n-    }\n-\n-    fn index(self) -> usize {\n-        self.0 as usize\n-    }\n-}\n-\n-/// Item definitions in the currently-compiled crate would have the CrateNum\n-/// LOCAL_CRATE in their DefId.\n-pub const LOCAL_CRATE: CrateNum = CrateNum(0);\n-\n-/// Virtual crate for builtin macros\n-// FIXME(jseyfried): this is also used for custom derives until proc-macro crates get `CrateNum`s.\n-pub const BUILTIN_MACROS_CRATE: CrateNum = CrateNum(u32::MAX);\n-\n-/// A CrateNum value that indicates that something is wrong.\n-pub const INVALID_CRATE: CrateNum = CrateNum(u32::MAX - 1);\n+newtype_index!(CrateNum nopub\n+    {\n+        /// Item definitions in the currently-compiled crate would have the CrateNum\n+        /// LOCAL_CRATE in their DefId.\n+        const LOCAL_CRATE = 0,\n+\n+        /// Virtual crate for builtin macros\n+        // FIXME(jseyfried): this is also used for custom derives until proc-macro crates get `CrateNum`s.\n+        const BUILTIN_MACROS_CRATE = u32::MAX,\n+\n+        /// A CrateNum value that indicates that something is wrong.\n+        const INVALID_CRATE = u32::MAX - 1,\n+    });\n \n impl CrateNum {\n     pub fn new(x: usize) -> CrateNum {"}, {"sha": "e428ff185ac898eda96a9507defd61e3df861755", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e496de26d483447d309673a47c5e2013e46bf2b/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e496de26d483447d309673a47c5e2013e46bf2b/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=4e496de26d483447d309673a47c5e2013e46bf2b", "patch": "@@ -158,7 +158,8 @@ pub struct BlockRemainder {\n \n newtype_index!(FirstStatementIndex\n     {\n-        DEBUG_FORMAT = \"{}\",\n+        derive[RustcEncodable, RustcDecodable]\n+        DEBUG_NAME = \"\",\n         MAX = SCOPE_DATA_REMAINDER_MAX,\n     });\n "}, {"sha": "02cb6585eb2aab9722ffb7c03207e2f50bf87e8f", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4e496de26d483447d309673a47c5e2013e46bf2b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e496de26d483447d309673a47c5e2013e46bf2b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4e496de26d483447d309673a47c5e2013e46bf2b", "patch": "@@ -417,7 +417,8 @@ pub enum BorrowKind {\n \n newtype_index!(Local\n     {\n-        DEBUG_FORMAT = \"_{}\",\n+        derive[RustcEncodable, RustcDecodable]\n+        DEBUG_NAME = \"_\",\n         const RETURN_POINTER = 0,\n     });\n \n@@ -553,7 +554,11 @@ pub struct UpvarDecl {\n ///////////////////////////////////////////////////////////////////////////\n // BasicBlock\n \n-newtype_index!(BasicBlock { DEBUG_FORMAT = \"bb{}\" });\n+newtype_index!(BasicBlock\n+    {\n+        derive[RustcEncodable, RustcDecodable]\n+        DEBUG_NAME = \"bb\"\n+    });\n \n ///////////////////////////////////////////////////////////////////////////\n // BasicBlockData and Terminator\n@@ -1135,7 +1140,11 @@ pub type LvalueProjection<'tcx> = Projection<'tcx, Lvalue<'tcx>, Local, Ty<'tcx>\n /// and the index is a local.\n pub type LvalueElem<'tcx> = ProjectionElem<'tcx, Local, Ty<'tcx>>;\n \n-newtype_index!(Field { DEBUG_FORMAT = \"field[{}]\" });\n+newtype_index!(Field\n+    {\n+        derive[RustcEncodable, RustcDecodable]\n+        DEBUG_NAME = \"field\"\n+    });\n \n impl<'tcx> Lvalue<'tcx> {\n     pub fn field(self, f: Field, ty: Ty<'tcx>) -> Lvalue<'tcx> {\n@@ -1202,7 +1211,8 @@ impl<'tcx> Debug for Lvalue<'tcx> {\n \n newtype_index!(VisibilityScope\n     {\n-        DEBUG_FORMAT = \"scope[{}]\",\n+        derive[RustcEncodable, RustcDecodable]\n+        DEBUG_NAME = \"scope\",\n         const ARGUMENT_VISIBILITY_SCOPE = 0,\n     });\n \n@@ -1529,7 +1539,12 @@ pub struct Constant<'tcx> {\n     pub literal: Literal<'tcx>,\n }\n \n-newtype_index!(Promoted { DEBUG_FORMAT = \"promoted[{}]\" });\n+newtype_index!(Promoted\n+    {\n+        derive[RustcEncodable, RustcDecodable]\n+        DEBUG_NAME = \"promoted\"\n+    });\n+\n \n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum Literal<'tcx> {"}, {"sha": "06fd10bf6a9132aec6d50f2900e1935edecfde82", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 106, "deletions": 30, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/4e496de26d483447d309673a47c5e2013e46bf2b/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e496de26d483447d309673a47c5e2013e46bf2b/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=4e496de26d483447d309673a47c5e2013e46bf2b", "patch": "@@ -45,77 +45,153 @@ macro_rules! newtype_index {\n     // Use default constants\n     ($name:ident) => (\n         newtype_index!(\n-            @type[$name]\n-            @max[::std::u32::MAX]\n-            @debug_format[\"{}\"]);\n+            // Leave out derives marker so we can use its absence to ensure it comes first\n+            @type       [$name]\n+            @pub        [pub]\n+            @max        [::std::u32::MAX]\n+            @debug_name [unsafe {::std::intrinsics::type_name::<$name>() }]);\n+    );\n+\n+    ($name:ident nopub) => (\n+        newtype_index!(\n+            // Leave out derives marker so we can use its absence to ensure it comes first\n+            @type       [$name]\n+            @pub        []\n+            @max        [::std::u32::MAX]\n+            @debug_name [unsafe {::std::intrinsics::type_name::<$name>() }]);\n     );\n \n     // Define any constants\n     ($name:ident { $($tokens:tt)+ }) => (\n         newtype_index!(\n-            @type[$name]\n-            @max[::std::u32::MAX]\n-            @debug_format[\"{}\"]\n-            $($tokens)+);\n+            // Leave out derives marker so we can use its absence to ensure it comes first\n+            @type       [$name]\n+            @pub        [pub]\n+            @max        [::std::u32::MAX]\n+            @debug_name [unsafe {::std::intrinsics::type_name::<$name>() }]\n+                        $($tokens)+);\n+    );\n+\n+    // Define any constants\n+    ($name:ident nopub { $($tokens:tt)+ }) => (\n+        newtype_index!(\n+            // Leave out derives marker so we can use its absence to ensure it comes first\n+            @type       [$name]\n+            @pub        []\n+            @max        [::std::u32::MAX]\n+            @debug_name [unsafe {::std::intrinsics::type_name::<$name>() }]\n+                        $($tokens)+);\n     );\n \n     // ---- private rules ----\n \n     // Base case, user-defined constants (if any) have already been defined\n-    (@type[$type:ident] @max[$max:expr] @debug_format[$debug_format:expr]) => (\n-        #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord,\n-            RustcEncodable, RustcDecodable)]\n-        pub struct $type(pub u32);\n+    (@derives[$($derives:ident),*] @type[$type:ident] @pub[$($pub:tt)*] @max[$max:expr] @debug_name[$debug_name:expr]) => (\n+        #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n+        pub struct $type($($pub)* u32);\n \n         impl Idx for $type {\n             fn new(value: usize) -> Self {\n                 assert!(value < ($max) as usize);\n                 $type(value as u32)\n             }\n+\n             fn index(self) -> usize {\n                 self.0 as usize\n             }\n         }\n \n         impl ::std::fmt::Debug for $type {\n             fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n-                write!(fmt, $debug_format, self.0)\n+                write!(fmt, \"{}{}\", $debug_name, self.0)\n             }\n         }\n     );\n \n+    // By not including the @derives marker in this list nor in the default args, we can force it\n+    // to come first if it exists\n+    (@type[$type:ident] @pub[$($pub:tt)*] @max[$max:expr] @debug_name[$debug_name:expr]\n+            derive [$($derives:ident),+] $($tokens:tt)*) => (\n+        newtype_index!(\n+            @derives    [$($derives),+]\n+            @type       [$type]\n+            @pub        [$($pub)*]\n+            @max        [$max]\n+            @debug_name [$debug_name]\n+                        $($tokens)*);\n+    );\n+\n+    // The case where no derives are added\n+    (@type[$type:ident] @pub[$($pub:tt)*] @max[$max:expr] @debug_name[$debug_name:expr] $($tokens:tt)*) => (\n+        newtype_index!(\n+            @derives    []\n+            @type       [$type]\n+            @pub        [$($pub)*]\n+            @max        [$max]\n+            @debug_name [$debug_name]\n+                        $($tokens)*);\n+    );\n+\n     // Rewrite final without comma to one that includes comma\n-    (@type[$type:ident] @max[$max:expr] @debug_format[$debug_format:expr]\n+    (@derives[$($derives:ident),*] @type[$type:ident] @pub[$($pub:tt)*] @max[$max:expr] @debug_name[$debug_name:expr]\n             $name:ident = $constant:expr) => (\n-        newtype_index!(@type[$type] @max[$max] @debug_format[$debug_format] $name = $constant,);\n+        newtype_index!(\n+            @derives    [$($derives),*]\n+            @type       [$type]\n+            @pub        [$($pub)*]\n+            @max        [$max]\n+            @debug_name [$debug_name]\n+                        $name = $constant,);\n     );\n \n     // Rewrite final const without comma to one that includes comma\n-    (@type[$type:ident] @max[$_max:expr] @debug_format[$debug_format:expr]\n-            const $name:ident = $constant:expr) => (\n-        newtype_index!(@type[$type]\n-                       @max[$max]\n-                       @debug_format[$debug_format]\n-                       const $name = $constant,);\n+    (@derives[$($derives:ident),*] @type[$type:ident] @pub[$($pub:tt)*] @max[$_max:expr] @debug_name[$debug_name:expr]\n+            $(#[doc = $doc:expr])* const $name:ident = $constant:expr) => (\n+        newtype_index!(\n+            @derives    [$($derives),*]\n+            @type       [$type]\n+            @pub        [$($pub)*]\n+            @max        [$max]\n+            @debug_name [$debug_name]\n+                        $(#[doc = $doc])* const $name = $constant,);\n     );\n \n     // Replace existing default for max\n-    (@type[$type:ident] @max[$_max:expr] @debug_format[$debug_format:expr]\n+    (@derives[$($derives:ident),*] @type[$type:ident] @pub[$($pub:tt)*] @max[$_max:expr] @debug_name[$debug_name:expr]\n             MAX = $max:expr, $($tokens:tt)*) => (\n-        newtype_index!(@type[$type] @max[$max] @debug_format[$debug_format] $($tokens)*);\n+        newtype_index!(\n+            @derives    [$($derives),*]\n+            @type       [$type]\n+            @pub        [$($pub)*]\n+            @max        [$max]\n+            @debug_name [$debug_name]\n+                        $($tokens)*);\n     );\n \n-    // Replace existing default for debug_format\n-    (@type[$type:ident] @max[$max:expr] @debug_format[$_debug_format:expr]\n-            DEBUG_FORMAT = $debug_format:expr, $($tokens:tt)*) => (\n-        newtype_index!(@type[$type] @max[$max] @debug_format[$debug_format] $($tokens)*);\n+    // Replace existing default for debug_name\n+    (@derives[$($derives:ident),*] @type[$type:ident] @pub[$($pub:tt)*] @max[$max:expr] @debug_name[$_debug_name:expr]\n+            DEBUG_NAME = $debug_name:expr, $($tokens:tt)*) => (\n+        newtype_index!(\n+            @derives    [$($derives),*]\n+            @type       [$type]\n+            @pub        [$($pub)*]\n+            @max        [$max]\n+            @debug_name [$debug_name]\n+                        $($tokens)*);\n     );\n \n-    // Assign a user-defined constant (as final param)\n-    (@type[$type:ident] @max[$max:expr] @debug_format[$debug_format:expr]\n-            const $name:ident = $constant:expr, $($tokens:tt)*) => (\n+    // Assign a user-defined constant\n+    (@derives[$($derives:ident),*] @type[$type:ident] @pub[$($pub:tt)*] @max[$max:expr] @debug_name[$debug_name:expr]\n+            $(#[doc = $doc:expr])* const $name:ident = $constant:expr, $($tokens:tt)*) => (\n+        $(#[doc = $doc])*\n         pub const $name: $type = $type($constant);\n-        newtype_index!(@type[$type] @max[$max] @debug_format[$debug_format] $($tokens)*);\n+        newtype_index!(\n+            @derives    [$($derives),*]\n+            @type       [$type]\n+            @pub        [$($pub)*]\n+            @max        [$max]\n+            @debug_name [$debug_name]\n+                        $($tokens)*);\n     );\n }\n "}, {"sha": "b206538324b4a22dc35a0100e560f0efd195c433", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e496de26d483447d309673a47c5e2013e46bf2b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e496de26d483447d309673a47c5e2013e46bf2b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=4e496de26d483447d309673a47c5e2013e46bf2b", "patch": "@@ -312,7 +312,7 @@ struct CFG<'tcx> {\n     basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n }\n \n-newtype_index!(ScopeId);\n+newtype_index!(ScopeId { derive[RustcEncodable, RustcDecodable] });\n \n ///////////////////////////////////////////////////////////////////////////\n /// The `BlockAnd` \"monad\" packages up the new basic block along with a"}]}