{"sha": "0ac09aef84b40fe4d1efc9580f49215ea8c94b2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYzA5YWVmODRiNDBmZTRkMWVmYzk1ODBmNDkyMTVlYThjOTRiMmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-08T10:11:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-08T10:11:55Z"}, "message": "Rollup merge of #62205 - timvermeulen:iter_order_by, r=KodrAus\n\nAdd Iterator comparison methods that take a comparison function\n\nThis PR adds `Iterator::{cmp_by, partial_cmp_by, eq_by, ne_by, lt_by, le_by, gt_by, ge_by}`. We already have `Iterator::{cmp, partial_cmp, ...}` which are less general (but not any simpler) than the ones I'm proposing here.\n\nI'm submitting this PR now because #61505 has been merged, so this change should not have a noticeable effect on the `Iterator` docs page size.\n\nThe diff is quite messy, here's what I changed:\n- The logic of `cmp` / `partial_cmp` / `eq` is moved to `cmp_by` / `partial_cmp_by` / `eq_by` respectively, changing `x.cmp(&y)` to `cmp(&x, &y)` in the `cmp` method where `cmp` is the given comparison function (and similar for `partial_cmp_by` and `eq_by`).\n- `ne_by` / `lt_by` / `le_by` / `gt_by` / `ge_by` are each implemented in terms of one of the three methods above.\n- The existing comparison methods are each forwarded to their `_by` counterpart, passing one of `Ord::cmp` / `PartialOrd::partial_cmp` / `PartialEq::eq` as the comparison function.\n\nThe corresponding `_by_key` methods aren't included because they're not as fundamental as the `_by` methods and can easily be implemented in terms of them. Is that reasonable, or would adding the `_by_key` methods be desirable for the sake of completeness?\n\nI didn't add any tests \u2013 I couldn't think of any that weren't already covered by our existing tests. Let me know if there's a particular test that would be useful to add.", "tree": {"sha": "fcf457a60b33ac47a3223ab5f6bc865d8452cb75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcf457a60b33ac47a3223ab5f6bc865d8452cb75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ac09aef84b40fe4d1efc9580f49215ea8c94b2a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJddNPrCRBK7hj4Ov3rIwAAdHIIABnDItVqmLYFgmsiWOBh+nNj\nNvVInSP1fV5afARNcMK9jkk/e+lYWJtIVGe0b/O5coGkvo6Ae8pFnWQEvDQNr/UD\nppku+sCqFrgETaCy0fT8Pqt2oj+cZEfXRRvwBjCUclFga/YlrTi9M5w6ZuKUEacH\nLi0MT0mf5FbktoDLEZYxOWGdS9lsLhHBP+oS101PQkjC5fgnceecBTX82shX/85C\nt+tvJO9dwcy4uh9gjpYBtIgaMfw9alqpDb6awijZ+AzYrEecjuI+bLd19PevKvCJ\n8lw7FOqkd489pK29VBErRklx6pgJO+uJu9+5BHFwNSk0sFPqgXd1hgs+3yf54aA=\n=zB1K\n-----END PGP SIGNATURE-----\n", "payload": "tree fcf457a60b33ac47a3223ab5f6bc865d8452cb75\nparent 50362372d68eae9b02a351f0fab42962cd0518de\nparent 58ba1f51efab249411a932880e3c10d36355b166\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567937515 +0200\ncommitter GitHub <noreply@github.com> 1567937515 +0200\n\nRollup merge of #62205 - timvermeulen:iter_order_by, r=KodrAus\n\nAdd Iterator comparison methods that take a comparison function\n\nThis PR adds `Iterator::{cmp_by, partial_cmp_by, eq_by, ne_by, lt_by, le_by, gt_by, ge_by}`. We already have `Iterator::{cmp, partial_cmp, ...}` which are less general (but not any simpler) than the ones I'm proposing here.\n\nI'm submitting this PR now because #61505 has been merged, so this change should not have a noticeable effect on the `Iterator` docs page size.\n\nThe diff is quite messy, here's what I changed:\n- The logic of `cmp` / `partial_cmp` / `eq` is moved to `cmp_by` / `partial_cmp_by` / `eq_by` respectively, changing `x.cmp(&y)` to `cmp(&x, &y)` in the `cmp` method where `cmp` is the given comparison function (and similar for `partial_cmp_by` and `eq_by`).\n- `ne_by` / `lt_by` / `le_by` / `gt_by` / `ge_by` are each implemented in terms of one of the three methods above.\n- The existing comparison methods are each forwarded to their `_by` counterpart, passing one of `Ord::cmp` / `PartialOrd::partial_cmp` / `PartialEq::eq` as the comparison function.\n\nThe corresponding `_by_key` methods aren't included because they're not as fundamental as the `_by` methods and can easily be implemented in terms of them. Is that reasonable, or would adding the `_by_key` methods be desirable for the sake of completeness?\n\nI didn't add any tests \u2013 I couldn't think of any that weren't already covered by our existing tests. Let me know if there's a particular test that would be useful to add.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac09aef84b40fe4d1efc9580f49215ea8c94b2a", "html_url": "https://github.com/rust-lang/rust/commit/0ac09aef84b40fe4d1efc9580f49215ea8c94b2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ac09aef84b40fe4d1efc9580f49215ea8c94b2a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50362372d68eae9b02a351f0fab42962cd0518de", "url": "https://api.github.com/repos/rust-lang/rust/commits/50362372d68eae9b02a351f0fab42962cd0518de", "html_url": "https://github.com/rust-lang/rust/commit/50362372d68eae9b02a351f0fab42962cd0518de"}, {"sha": "58ba1f51efab249411a932880e3c10d36355b166", "url": "https://api.github.com/repos/rust-lang/rust/commits/58ba1f51efab249411a932880e3c10d36355b166", "html_url": "https://github.com/rust-lang/rust/commit/58ba1f51efab249411a932880e3c10d36355b166"}], "stats": {"total": 166, "additions": 160, "deletions": 6}, "files": [{"sha": "c09df3f7f22cbd8c650cf85a33a93fe5c77061ff", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 103, "deletions": 6, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/0ac09aef84b40fe4d1efc9580f49215ea8c94b2a/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac09aef84b40fe4d1efc9580f49215ea8c94b2a/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=0ac09aef84b40fe4d1efc9580f49215ea8c94b2a", "patch": "@@ -2557,10 +2557,40 @@ pub trait Iterator {\n     /// assert_eq!([1, 2].iter().cmp([1].iter()), Ordering::Greater);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n-    fn cmp<I>(mut self, other: I) -> Ordering where\n+    fn cmp<I>(self, other: I) -> Ordering\n+    where\n         I: IntoIterator<Item = Self::Item>,\n         Self::Item: Ord,\n         Self: Sized,\n+    {\n+        self.cmp_by(other, |x, y| x.cmp(&y))\n+    }\n+\n+    /// Lexicographically compares the elements of this `Iterator` with those\n+    /// of another with respect to the specified comparison function.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_order_by)]\n+    ///\n+    /// use std::cmp::Ordering;\n+    ///\n+    /// let xs = [1, 2, 3, 4];\n+    /// let ys = [1, 4, 9, 16];\n+    ///\n+    /// assert_eq!(xs.iter().cmp_by(&ys, |&x, &y| x.cmp(&y)), Ordering::Less);\n+    /// assert_eq!(xs.iter().cmp_by(&ys, |&x, &y| (x * x).cmp(&y)), Ordering::Equal);\n+    /// assert_eq!(xs.iter().cmp_by(&ys, |&x, &y| (2 * x).cmp(&y)), Ordering::Greater);\n+    /// ```\n+    #[unstable(feature = \"iter_order_by\", issue = \"0\")]\n+    fn cmp_by<I, F>(mut self, other: I, mut cmp: F) -> Ordering\n+    where\n+        Self: Sized,\n+        I: IntoIterator,\n+        F: FnMut(Self::Item, I::Item) -> Ordering,\n     {\n         let mut other = other.into_iter();\n \n@@ -2579,7 +2609,7 @@ pub trait Iterator {\n                 Some(val) => val,\n             };\n \n-            match x.cmp(&y) {\n+            match cmp(x, y) {\n                 Ordering::Equal => (),\n                 non_eq => return non_eq,\n             }\n@@ -2601,10 +2631,49 @@ pub trait Iterator {\n     /// assert_eq!([std::f64::NAN].iter().partial_cmp([1.].iter()), None);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n-    fn partial_cmp<I>(mut self, other: I) -> Option<Ordering> where\n+    fn partial_cmp<I>(self, other: I) -> Option<Ordering>\n+    where\n         I: IntoIterator,\n         Self::Item: PartialOrd<I::Item>,\n         Self: Sized,\n+    {\n+        self.partial_cmp_by(other, |x, y| x.partial_cmp(&y))\n+    }\n+\n+    /// Lexicographically compares the elements of this `Iterator` with those\n+    /// of another with respect to the specified comparison function.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_order_by)]\n+    ///\n+    /// use std::cmp::Ordering;\n+    ///\n+    /// let xs = [1.0, 2.0, 3.0, 4.0];\n+    /// let ys = [1.0, 4.0, 9.0, 16.0];\n+    ///\n+    /// assert_eq!(\n+    ///     xs.iter().partial_cmp_by(&ys, |&x, &y| x.partial_cmp(&y)),\n+    ///     Some(Ordering::Less)\n+    /// );\n+    /// assert_eq!(\n+    ///     xs.iter().partial_cmp_by(&ys, |&x, &y| (x * x).partial_cmp(&y)),\n+    ///     Some(Ordering::Equal)\n+    /// );\n+    /// assert_eq!(\n+    ///     xs.iter().partial_cmp_by(&ys, |&x, &y| (2.0 * x).partial_cmp(&y)),\n+    ///     Some(Ordering::Greater)\n+    /// );\n+    /// ```\n+    #[unstable(feature = \"iter_order_by\", issue = \"0\")]\n+    fn partial_cmp_by<I, F>(mut self, other: I, mut partial_cmp: F) -> Option<Ordering>\n+    where\n+        Self: Sized,\n+        I: IntoIterator,\n+        F: FnMut(Self::Item, I::Item) -> Option<Ordering>,\n     {\n         let mut other = other.into_iter();\n \n@@ -2623,7 +2692,7 @@ pub trait Iterator {\n                 Some(val) => val,\n             };\n \n-            match x.partial_cmp(&y) {\n+            match partial_cmp(x, y) {\n                 Some(Ordering::Equal) => (),\n                 non_eq => return non_eq,\n             }\n@@ -2640,10 +2709,36 @@ pub trait Iterator {\n     /// assert_eq!([1].iter().eq([1, 2].iter()), false);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n-    fn eq<I>(mut self, other: I) -> bool where\n+    fn eq<I>(self, other: I) -> bool\n+    where\n         I: IntoIterator,\n         Self::Item: PartialEq<I::Item>,\n         Self: Sized,\n+    {\n+        self.eq_by(other, |x, y| x == y)\n+    }\n+\n+    /// Determines if the elements of this `Iterator` are equal to those of\n+    /// another with respect to the specified equality function.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_order_by)]\n+    ///\n+    /// let xs = [1, 2, 3, 4];\n+    /// let ys = [1, 4, 9, 16];\n+    ///\n+    /// assert!(xs.iter().eq_by(&ys, |&x, &y| x * x == y));\n+    /// ```\n+    #[unstable(feature = \"iter_order_by\", issue = \"0\")]\n+    fn eq_by<I, F>(mut self, other: I, mut eq: F) -> bool\n+    where\n+        Self: Sized,\n+        I: IntoIterator,\n+        F: FnMut(Self::Item, I::Item) -> bool,\n     {\n         let mut other = other.into_iter();\n \n@@ -2658,7 +2753,9 @@ pub trait Iterator {\n                 Some(val) => val,\n             };\n \n-            if x != y { return false }\n+            if !eq(x, y) {\n+                return false;\n+            }\n         }\n     }\n "}, {"sha": "d7088cf891f77112ac74cf092ee425c9862dd599", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0ac09aef84b40fe4d1efc9580f49215ea8c94b2a/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac09aef84b40fe4d1efc9580f49215ea8c94b2a/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=0ac09aef84b40fe4d1efc9580f49215ea8c94b2a", "patch": "@@ -57,6 +57,62 @@ fn test_multi_iter() {\n     assert!(xs.iter().lt(xs.iter().skip(2)));\n }\n \n+#[test]\n+fn test_cmp_by() {\n+    use core::cmp::Ordering;\n+\n+    let f = |x: i32, y: i32| (x * x).cmp(&y);\n+    let xs = || [1, 2, 3, 4].iter().copied();\n+    let ys = || [1, 4, 16].iter().copied();\n+\n+    assert_eq!(xs().cmp_by(ys(), f), Ordering::Less);\n+    assert_eq!(ys().cmp_by(xs(), f), Ordering::Greater);\n+    assert_eq!(xs().cmp_by(xs().map(|x| x * x), f), Ordering::Equal);\n+    assert_eq!(xs().rev().cmp_by(ys().rev(), f), Ordering::Greater);\n+    assert_eq!(xs().cmp_by(ys().rev(), f), Ordering::Less);\n+    assert_eq!(xs().cmp_by(ys().take(2), f), Ordering::Greater);\n+}\n+\n+#[test]\n+fn test_partial_cmp_by() {\n+    use core::cmp::Ordering;\n+    use core::f64;\n+\n+    let f = |x: i32, y: i32| (x * x).partial_cmp(&y);\n+    let xs = || [1, 2, 3, 4].iter().copied();\n+    let ys = || [1, 4, 16].iter().copied();\n+\n+    assert_eq!(xs().partial_cmp_by(ys(), f), Some(Ordering::Less));\n+    assert_eq!(ys().partial_cmp_by(xs(), f), Some(Ordering::Greater));\n+    assert_eq!(xs().partial_cmp_by(xs().map(|x| x * x), f), Some(Ordering::Equal));\n+    assert_eq!(xs().rev().partial_cmp_by(ys().rev(), f), Some(Ordering::Greater));\n+    assert_eq!(xs().partial_cmp_by(xs().rev(), f), Some(Ordering::Less));\n+    assert_eq!(xs().partial_cmp_by(ys().take(2), f), Some(Ordering::Greater));\n+\n+    let f = |x: f64, y: f64| (x * x).partial_cmp(&y);\n+    let xs = || [1.0, 2.0, 3.0, 4.0].iter().copied();\n+    let ys = || [1.0, 4.0, f64::NAN, 16.0].iter().copied();\n+\n+    assert_eq!(xs().partial_cmp_by(ys(), f), None);\n+    assert_eq!(ys().partial_cmp_by(xs(), f), Some(Ordering::Greater));\n+}\n+\n+#[test]\n+fn test_eq_by() {\n+    let f = |x: i32, y: i32| x * x == y;\n+    let xs = || [1, 2, 3, 4].iter().copied();\n+    let ys = || [1, 4, 9, 16].iter().copied();\n+\n+    assert!(xs().eq_by(ys(), f));\n+    assert!(!ys().eq_by(xs(), f));\n+    assert!(!xs().eq_by(xs(), f));\n+    assert!(!ys().eq_by(ys(), f));\n+\n+    assert!(!xs().take(3).eq_by(ys(), f));\n+    assert!(!xs().eq_by(ys().take(3), f));\n+    assert!(xs().take(3).eq_by(ys().take(3), f));\n+}\n+\n #[test]\n fn test_counter_from_iter() {\n     let it = (0..).step_by(5).take(10);"}, {"sha": "050195cd2ef51eaca905ce2b05e9f0ae15556393", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ac09aef84b40fe4d1efc9580f49215ea8c94b2a/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac09aef84b40fe4d1efc9580f49215ea8c94b2a/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=0ac09aef84b40fe4d1efc9580f49215ea8c94b2a", "patch": "@@ -33,6 +33,7 @@\n #![feature(const_fn)]\n #![feature(iter_partition_in_place)]\n #![feature(iter_is_partitioned)]\n+#![feature(iter_order_by)]\n \n extern crate test;\n "}]}