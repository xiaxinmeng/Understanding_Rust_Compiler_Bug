{"sha": "54f7b1d455915794ab000448799c5092c57535c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZjdiMWQ0NTU5MTU3OTRhYjAwMDQ0ODc5OWM1MDkyYzU3NTM1YzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-26T20:06:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-26T20:06:51Z"}, "message": "Auto merge of #28632 - alexcrichton:update-match-indices, r=Kimundi\n\nThis commit updates the `MatchIndices` and `RMatchIndices` iterators to follow\r\nthe same pattern as the `chars` and `char_indices` iterators. The `matches`\r\niterator currently yield `&str` elements, so the `MatchIndices` iterator now\r\nyields the index of the match as well as the `&str` that matched (instead of\r\nstart/end indexes).\r\n\r\ncc #27743", "tree": {"sha": "932679fbce03884e869d0fe91faddb5fec77fc52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/932679fbce03884e869d0fe91faddb5fec77fc52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54f7b1d455915794ab000448799c5092c57535c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54f7b1d455915794ab000448799c5092c57535c1", "html_url": "https://github.com/rust-lang/rust/commit/54f7b1d455915794ab000448799c5092c57535c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54f7b1d455915794ab000448799c5092c57535c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9c79084b0b60766b5e330074206b27007b237c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9c79084b0b60766b5e330074206b27007b237c0", "html_url": "https://github.com/rust-lang/rust/commit/c9c79084b0b60766b5e330074206b27007b237c0"}, {"sha": "d5f2d3b1773d70bf3d32b94ad2a2bf3125bf743e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f2d3b1773d70bf3d32b94ad2a2bf3125bf743e", "html_url": "https://github.com/rust-lang/rust/commit/d5f2d3b1773d70bf3d32b94ad2a2bf3125bf743e"}], "stats": {"total": 96, "additions": 44, "deletions": 52}, "files": [{"sha": "a3d38bdd1b31b3b5c667b6d9aa6c07beff484cdd", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 30, "deletions": 42, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/54f7b1d455915794ab000448799c5092c57535c1/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f7b1d455915794ab000448799c5092c57535c1/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=54f7b1d455915794ab000448799c5092c57535c1", "patch": "@@ -1157,25 +1157,21 @@ impl str {\n         core_str::StrExt::rmatches(self, pat)\n     }\n \n-    /// An iterator over the start and end indices of the disjoint matches\n-    /// of a pattern within `self`.\n+    /// An iterator over the disjoint matches of a pattern within `self` as well\n+    /// as the index that the match starts at.\n     ///\n     /// For matches of `pat` within `self` that overlap, only the indices\n-    /// corresponding to the first\n-    /// match are returned.\n+    /// corresponding to the first match are returned.\n     ///\n-    /// The pattern can be a simple `&str`, `char`, or a closure that\n-    /// determines if a character matches.\n-    /// Additional libraries might provide more complex patterns like\n-    /// regular expressions.\n+    /// The pattern can be a simple `&str`, `char`, or a closure that determines\n+    /// if a character matches. Additional libraries might provide more complex\n+    /// patterns like regular expressions.\n     ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will be double ended if the pattern allows a\n-    /// reverse search\n-    /// and forward/reverse search yields the same elements. This is true for,\n-    /// eg, `char` but not\n-    /// for `&str`.\n+    /// reverse search and forward/reverse search yields the same elements. This\n+    /// is true for, eg, `char` but not for `&str`.\n     ///\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, `rmatch_indices()` can be used.\n@@ -1185,42 +1181,36 @@ impl str {\n     /// ```\n     /// #![feature(str_match_indices)]\n     ///\n-    /// let v: Vec<(usize, usize)> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\n-    /// assert_eq!(v, [(0, 3), (6, 9), (12, 15)]);\n+    /// let v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\n+    /// assert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n     ///\n-    /// let v: Vec<(usize, usize)> = \"1abcabc2\".match_indices(\"abc\").collect();\n-    /// assert_eq!(v, [(1, 4), (4, 7)]);\n+    /// let v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\n+    /// assert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n     ///\n-    /// let v: Vec<(usize, usize)> = \"ababa\".match_indices(\"aba\").collect();\n-    /// assert_eq!(v, [(0, 3)]); // only the first `aba`\n+    /// let v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\n+    /// assert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n     /// ```\n     #[unstable(feature = \"str_match_indices\",\n                reason = \"might have its iterator type changed\",\n                issue = \"27743\")]\n-    // NB: Right now MatchIndices yields `(usize, usize)`, but it would\n-    // be more consistent with `matches` and `char_indices` to return `(usize, &str)`\n     pub fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P> {\n         core_str::StrExt::match_indices(self, pat)\n     }\n \n-    /// An iterator over the start and end indices of the disjoint matches of\n-    /// a pattern within\n-    /// `self`, yielded in reverse order.\n+    /// An iterator over the disjoint matches of a pattern within `self`,\n+    /// yielded in reverse order along with the index of the match.\n     ///\n     /// For matches of `pat` within `self` that overlap, only the indices\n-    /// corresponding to the last\n-    /// match are returned.\n+    /// corresponding to the last match are returned.\n     ///\n-    /// The pattern can be a simple `&str`, `char`, or a closure that\n-    /// determines if a character matches.\n-    /// Additional libraries might provide more complex patterns like\n-    /// regular expressions.\n+    /// The pattern can be a simple `&str`, `char`, or a closure that determines\n+    /// if a character matches. Additional libraries might provide more complex\n+    /// patterns like regular expressions.\n     ///\n     /// # Iterator behavior\n     ///\n-    /// The returned iterator requires that the pattern supports a\n-    /// reverse search,\n-    /// and it will be double ended if a forward/reverse search yields\n+    /// The returned iterator requires that the pattern supports a reverse\n+    /// search, and it will be double ended if a forward/reverse search yields\n     /// the same elements.\n     ///\n     /// For iterating from the front, `match_indices()` can be used.\n@@ -1230,20 +1220,18 @@ impl str {\n     /// ```\n     /// #![feature(str_match_indices)]\n     ///\n-    /// let v: Vec<(usize, usize)> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\n-    /// assert_eq!(v, [(12, 15), (6, 9), (0, 3)]);\n+    /// let v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\n+    /// assert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n     ///\n-    /// let v: Vec<(usize, usize)> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\n-    /// assert_eq!(v, [(4, 7), (1, 4)]);\n+    /// let v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\n+    /// assert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n     ///\n-    /// let v: Vec<(usize, usize)> = \"ababa\".rmatch_indices(\"aba\").collect();\n-    /// assert_eq!(v, [(2, 5)]); // only the last `aba`\n+    /// let v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\n+    /// assert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n     /// ```\n     #[unstable(feature = \"str_match_indices\",\n                reason = \"might have its iterator type changed\",\n                issue = \"27743\")]\n-    // NB: Right now RMatchIndices yields `(usize, usize)`, but it would\n-    // be more consistent with `rmatches` and `char_indices` to return `(usize, &str)`\n     pub fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1416,10 +1404,10 @@ impl str {\n     pub fn replace(&self, from: &str, to: &str) -> String {\n         let mut result = String::new();\n         let mut last_end = 0;\n-        for (start, end) in self.match_indices(from) {\n+        for (start, part) in self.match_indices(from) {\n             result.push_str(unsafe { self.slice_unchecked(last_end, start) });\n             result.push_str(to);\n-            last_end = end;\n+            last_end = start + part.len();\n         }\n         result.push_str(unsafe { self.slice_unchecked(last_end, self.len()) });\n         result"}, {"sha": "b4555679e9c1bf351736263d3d5eb3153286c54e", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54f7b1d455915794ab000448799c5092c57535c1/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f7b1d455915794ab000448799c5092c57535c1/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=54f7b1d455915794ab000448799c5092c57535c1", "patch": "@@ -1047,7 +1047,7 @@ fn test_pattern_deref_forward() {\n fn test_empty_match_indices() {\n     let data = \"a\u00e4\u4e2d!\";\n     let vec: Vec<_> = data.match_indices(\"\").collect();\n-    assert_eq!(vec, [(0, 0), (1, 1), (3, 3), (6, 6), (7, 7)]);\n+    assert_eq!(vec, [(0, \"\"), (1, \"\"), (3, \"\"), (6, \"\"), (7, \"\")]);\n }\n \n #[test]\n@@ -1477,7 +1477,7 @@ generate_iterator_test! {\n \n generate_iterator_test! {\n     double_ended_match_indices {\n-        (\"a1b2c3\", char::is_numeric) -> [(1, 2), (3, 4), (5, 6)];\n+        (\"a1b2c3\", char::is_numeric) -> [(1, \"1\"), (3, \"2\"), (5, \"3\")];\n     }\n     with str::match_indices, str::rmatch_indices;\n }"}, {"sha": "3c7f1b3688398fd64f904fd55d620de37fbe9e65", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/54f7b1d455915794ab000448799c5092c57535c1/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f7b1d455915794ab000448799c5092c57535c1/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=54f7b1d455915794ab000448799c5092c57535c1", "patch": "@@ -729,15 +729,19 @@ struct MatchIndicesInternal<'a, P: Pattern<'a>>(P::Searcher);\n \n impl<'a, P: Pattern<'a>> MatchIndicesInternal<'a, P> {\n     #[inline]\n-    fn next(&mut self) -> Option<(usize, usize)> {\n-        self.0.next_match()\n+    fn next(&mut self) -> Option<(usize, &'a str)> {\n+        self.0.next_match().map(|(start, end)| unsafe {\n+            (start, self.0.haystack().slice_unchecked(start, end))\n+        })\n     }\n \n     #[inline]\n-    fn next_back(&mut self) -> Option<(usize, usize)>\n+    fn next_back(&mut self) -> Option<(usize, &'a str)>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        self.0.next_match_back()\n+        self.0.next_match_back().map(|(start, end)| unsafe {\n+            (start, self.0.haystack().slice_unchecked(start, end))\n+        })\n     }\n }\n \n@@ -753,7 +757,7 @@ generate_pattern_iterators! {\n                    reason = \"type may be removed or have its iterator impl changed\",\n                    issue = \"27743\")]\n     internal:\n-        MatchIndicesInternal yielding ((usize, usize));\n+        MatchIndicesInternal yielding ((usize, &'a str));\n     delegate double ended;\n }\n "}, {"sha": "9d1674b74d1fce197aeced5325f59a4c9b64cafd", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54f7b1d455915794ab000448799c5092c57535c1/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f7b1d455915794ab000448799c5092c57535c1/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=54f7b1d455915794ab000448799c5092c57535c1", "patch": "@@ -331,10 +331,10 @@ fn split_msg_into_multilines(msg: &str) -> Option<String> {\n     let first = msg.match_indices(\"expected\").filter(|s| {\n         s.0 > 0 && (msg.char_at_reverse(s.0) == ' ' ||\n                     msg.char_at_reverse(s.0) == '(')\n-    }).map(|(a, b)| (a - 1, b));\n+    }).map(|(a, b)| (a - 1, a + b.len()));\n     let second = msg.match_indices(\"found\").filter(|s| {\n         msg.char_at_reverse(s.0) == ' '\n-    }).map(|(a, b)| (a - 1, b));\n+    }).map(|(a, b)| (a - 1, a + b.len()));\n \n     let mut new_msg = String::new();\n     let mut head = 0;"}, {"sha": "d3c9fe9161ccb52259606a86f63755e0e73f4c59", "filename": "src/test/run-pass/issue-14919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54f7b1d455915794ab000448799c5092c57535c1/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f7b1d455915794ab000448799c5092c57535c1/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14919.rs?ref=54f7b1d455915794ab000448799c5092c57535c1", "patch": "@@ -59,5 +59,5 @@ fn match_indices<'a, M, T: IntoMatcher<'a, M>>(s: &'a str, from: T) -> MatchIndi\n fn main() {\n     let s = \"abcbdef\";\n     match_indices(s, |c: char| c == 'b')\n-        .collect::<Vec<(usize, usize)>>();\n+        .collect::<Vec<_>>();\n }"}]}