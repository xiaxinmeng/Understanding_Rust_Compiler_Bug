{"sha": "4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlM2RiZjk1OWE1MTI0NDgxZDFlM2VjOWIwYjMwZjQ4YWM2ZGQ0ZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-22T14:01:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-22T14:01:27Z"}, "message": "auto merge of #8666 : nikomatsakis/rust/issue-3678-extern-fn-types, r=pcwalton\n\nChange the type of crust fns like this one:\r\n\r\n    extern fn foo() { ... }\r\n\r\nfrom `*u8` to `extern \"C\" fn()`.\r\n\r\nr? @pcwalton (or whomever)", "tree": {"sha": "300cc28c46b9d183c57f24936694c3d4fd849feb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/300cc28c46b9d183c57f24936694c3d4fd849feb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "html_url": "https://github.com/rust-lang/rust/commit/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f6f79b789e8000ce4903857a210318e92724da8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f6f79b789e8000ce4903857a210318e92724da8", "html_url": "https://github.com/rust-lang/rust/commit/3f6f79b789e8000ce4903857a210318e92724da8"}, {"sha": "ffb6404c5ade3af113738c3cb72fd853e82a379e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffb6404c5ade3af113738c3cb72fd853e82a379e", "html_url": "https://github.com/rust-lang/rust/commit/ffb6404c5ade3af113738c3cb72fd853e82a379e"}], "stats": {"total": 516, "additions": 385, "deletions": 131}, "files": [{"sha": "b316f889ad1e4805bb1021d25050190da227d402", "filename": "doc/rust.md", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -1006,20 +1006,25 @@ code_. They are defined in the same way as any other Rust function,\n except that they have the `extern` modifier.\n \n ~~~\n+// Declares an extern fn, the ABI defaults to \"C\" \n extern fn new_vec() -> ~[int] { ~[] }\n+\n+// Declares an extern fn with \"stdcall\" ABI\n+extern \"stdcall\" fn new_vec_stdcall() -> ~[int] { ~[] }\n ~~~\n \n-Extern functions may not be called from Rust code,\n-but Rust code may take their value as a raw `u8` pointer.\n+Unlike normal functions, extern fns have an `extern \"ABI\" fn()`.\n+This is the same type as the functions declared in an extern\n+block.\n \n ~~~\n # extern fn new_vec() -> ~[int] { ~[] }\n-let fptr: *u8 = new_vec;\n+let fptr: extern \"C\" fn() -> ~[int] = new_vec;\n ~~~\n \n-The primary motivation for extern functions is\n-to create callbacks for foreign functions that expect to receive function\n-pointers.\n+Extern functions may be called from Rust code, but\n+caution must be taken with respect to the size of the stack\n+segment, just as when calling an extern function normally.\n \n ### Type definitions\n \n@@ -1384,14 +1389,13 @@ between the Rust ABI and the foreign ABI.\n A number of [attributes](#attributes) control the behavior of external\n blocks.\n \n-By default external blocks assume\n-that the library they are calling uses the standard C \"cdecl\" ABI.\n-Other ABIs may be specified using the `abi` attribute as in\n+By default external blocks assume that the library they are calling\n+uses the standard C \"cdecl\" ABI.  Other ABIs may be specified using\n+an `abi` string, as shown here:\n \n ~~~{.xfail-test}\n // Interface to the Windows API\n-#[abi = \"stdcall\"]\n-extern { }\n+extern \"stdcall\" { }\n ~~~\n \n The `link_name` attribute allows the name of the library to be specified.\n@@ -1407,6 +1411,12 @@ This is particularly useful for creating external blocks for libc,\n which tends to not follow standard library naming conventions\n and is linked to all Rust programs anyway.\n \n+The type of a function\n+declared in an extern block\n+is `extern \"abi\" fn(A1, ..., An) -> R`,\n+where `A1...An` are the declared types of its arguments\n+and `R` is the decalred return type.\n+\n ## Attributes\n \n ~~~~~~~~{.ebnf .gram}"}, {"sha": "09ef7f22be5912b4d34c9d3f22c13e68b05d6844", "filename": "src/libextra/rl.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibextra%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibextra%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frl.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -16,27 +16,31 @@ use std::libc::{c_char, c_int};\n use std::local_data;\n use std::str;\n \n+#[cfg(stage0)]\n pub mod rustrt {\n     use std::libc::{c_char, c_int};\n \n-    #[cfg(stage0)]\n-    mod macro_hack {\n-    #[macro_escape];\n-    macro_rules! externfn(\n-        (fn $name:ident ($($arg_name:ident : $arg_ty:ty),*) $(-> $ret_ty:ty),*) => (\n-            extern {\n-                fn $name($($arg_name : $arg_ty),*) $(-> $ret_ty),*;\n-            }\n-        )\n-    )\n+    extern {\n+        fn linenoise(prompt: *c_char) -> *c_char;\n+        fn linenoiseHistoryAdd(line: *c_char) -> c_int;\n+        fn linenoiseHistorySetMaxLen(len: c_int) -> c_int;\n+        fn linenoiseHistorySave(file: *c_char) -> c_int;\n+        fn linenoiseHistoryLoad(file: *c_char) -> c_int;\n+        fn linenoiseSetCompletionCallback(callback: *u8);\n+        fn linenoiseAddCompletion(completions: *(), line: *c_char);\n     }\n+}\n+\n+#[cfg(not(stage0))]\n+pub mod rustrt {\n+    use std::libc::{c_char, c_int};\n \n     externfn!(fn linenoise(prompt: *c_char) -> *c_char)\n     externfn!(fn linenoiseHistoryAdd(line: *c_char) -> c_int)\n     externfn!(fn linenoiseHistorySetMaxLen(len: c_int) -> c_int)\n     externfn!(fn linenoiseHistorySave(file: *c_char) -> c_int)\n     externfn!(fn linenoiseHistoryLoad(file: *c_char) -> c_int)\n-    externfn!(fn linenoiseSetCompletionCallback(callback: *u8))\n+    externfn!(fn linenoiseSetCompletionCallback(callback: extern \"C\" fn(*i8, *())))\n     externfn!(fn linenoiseAddCompletion(completions: *(), line: *c_char))\n }\n "}, {"sha": "f735c059ab6151f4372b217dd5ee75725efd361a", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -52,6 +52,7 @@ use middle::trans::expr;\n use middle::trans::foreign;\n use middle::trans::glue;\n use middle::trans::inline;\n+use middle::trans::llrepr::LlvmRepr;\n use middle::trans::machine;\n use middle::trans::machine::{llalign_of_min, llsize_of};\n use middle::trans::meth;\n@@ -1739,6 +1740,10 @@ pub fn copy_args_to_allocas(fcx: @mut FunctionContext,\n                             args: &[ast::arg],\n                             raw_llargs: &[ValueRef],\n                             arg_tys: &[ty::t]) -> @mut Block {\n+    debug!(\"copy_args_to_allocas: raw_llargs=%s arg_tys=%s\",\n+           raw_llargs.llrepr(fcx.ccx),\n+           arg_tys.repr(fcx.ccx.tcx));\n+\n     let _icx = push_ctxt(\"copy_args_to_allocas\");\n     let mut bcx = bcx;\n "}, {"sha": "9b910ab1ebc05ae395d8084bc85856aff4311110", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -22,6 +22,7 @@ use std::hashmap::HashMap;\n use std::libc::{c_uint, c_ulonglong, c_char};\n use std::vec;\n use syntax::codemap::span;\n+use std::ptr::is_not_null;\n \n pub struct Builder {\n     llbuilder: BuilderRef,\n@@ -483,6 +484,7 @@ impl Builder {\n         debug!(\"Store %s -> %s\",\n                self.ccx.tn.val_to_str(val),\n                self.ccx.tn.val_to_str(ptr));\n+        assert!(is_not_null(self.llbuilder));\n         self.count_insn(\"store\");\n         unsafe {\n             llvm::LLVMBuildStore(self.llbuilder, val, ptr);"}, {"sha": "0912e412fcf6e323ffa8fb37408dd9f249351d39", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 23, "deletions": 42, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -824,56 +824,30 @@ fn trans_def_datum_unadjusted(bcx: @mut Block,\n {\n     let _icx = push_ctxt(\"trans_def_datum_unadjusted\");\n \n-    match def {\n+    let fn_data = match def {\n         ast::def_fn(did, _) | ast::def_static_method(did, None, _) => {\n-            let fn_data = callee::trans_fn_ref(bcx, did, ref_expr.id);\n-            return fn_data_to_datum(bcx, ref_expr, did, fn_data);\n+            callee::trans_fn_ref(bcx, did, ref_expr.id)\n         }\n         ast::def_static_method(impl_did, Some(trait_did), _) => {\n-            let fn_data = meth::trans_static_method_callee(bcx, impl_did,\n-                                                           trait_did,\n-                                                           ref_expr.id);\n-            return fn_data_to_datum(bcx, ref_expr, impl_did, fn_data);\n+            meth::trans_static_method_callee(bcx, impl_did,\n+                                             trait_did,\n+                                             ref_expr.id)\n         }\n         _ => {\n             bcx.tcx().sess.span_bug(ref_expr.span, fmt!(\n                 \"Non-DPS def %? referened by %s\",\n                 def, bcx.node_id_to_str(ref_expr.id)));\n         }\n-    }\n+    };\n \n-    fn fn_data_to_datum(bcx: @mut Block,\n-                        ref_expr: &ast::expr,\n-                        def_id: ast::def_id,\n-                        fn_data: callee::FnData) -> DatumBlock {\n-        /*!\n-        *\n-        * Translates a reference to a top-level fn item into a rust\n-        * value.  This is just a fn pointer.\n-        */\n-\n-        let is_extern = {\n-            let fn_tpt = ty::lookup_item_type(bcx.tcx(), def_id);\n-            ty::ty_fn_purity(fn_tpt.ty) == ast::extern_fn\n-        };\n-        let (rust_ty, llval) = if is_extern {\n-            let rust_ty = ty::mk_ptr(\n-                bcx.tcx(),\n-                ty::mt {\n-                    ty: ty::mk_mach_uint(ast::ty_u8),\n-                    mutbl: ast::m_imm\n-                }); // *u8\n-            (rust_ty, PointerCast(bcx, fn_data.llfn, Type::i8p()))\n-        } else {\n-            let fn_ty = expr_ty(bcx, ref_expr);\n-            (fn_ty, fn_data.llfn)\n-        };\n-        return DatumBlock {\n-            bcx: bcx,\n-            datum: Datum {val: llval,\n-                          ty: rust_ty,\n-                          mode: ByValue}\n-        };\n+    let fn_ty = expr_ty(bcx, ref_expr);\n+    DatumBlock {\n+        bcx: bcx,\n+        datum: Datum {\n+            val: fn_data.llfn,\n+            ty: fn_ty,\n+            mode: ByValue\n+        }\n     }\n }\n \n@@ -1657,6 +1631,7 @@ pub fn cast_type_kind(t: ty::t) -> cast_kind {\n         ty::ty_float(*)   => cast_float,\n         ty::ty_ptr(*)     => cast_pointer,\n         ty::ty_rptr(*)    => cast_pointer,\n+        ty::ty_bare_fn(*) => cast_pointer,\n         ty::ty_int(*)     => cast_integral,\n         ty::ty_uint(*)    => cast_integral,\n         ty::ty_bool       => cast_integral,\n@@ -1719,10 +1694,16 @@ fn trans_imm_cast(bcx: @mut Block, expr: @ast::expr,\n                                               val_ty(lldiscrim_a),\n                                               lldiscrim_a, true),\n                     cast_float => SIToFP(bcx, lldiscrim_a, ll_t_out),\n-                    _ => ccx.sess.bug(\"translating unsupported cast.\")\n+                    _ => ccx.sess.bug(fmt!(\"translating unsupported cast: \\\n+                                           %s (%?) -> %s (%?)\",\n+                                           t_in.repr(ccx.tcx), k_in,\n+                                           t_out.repr(ccx.tcx), k_out))\n                 }\n             }\n-            _ => ccx.sess.bug(\"translating unsupported cast.\")\n+            _ => ccx.sess.bug(fmt!(\"translating unsupported cast: \\\n+                                   %s (%?) -> %s (%?)\",\n+                                   t_in.repr(ccx.tcx), k_in,\n+                                   t_out.repr(ccx.tcx), k_out))\n         };\n     return immediate_rvalue_bcx(bcx, newval, t_out);\n }"}, {"sha": "bd4e50e01b5d0e045f29c579664aa8939a82fe0e", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -21,6 +21,7 @@ use middle::trans::cabi;\n use middle::trans::build::*;\n use middle::trans::builder::noname;\n use middle::trans::common::*;\n+use middle::trans::llrepr::LlvmRepr;\n use middle::trans::type_of::*;\n use middle::trans::type_of;\n use middle::ty;\n@@ -399,7 +400,29 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: @mut CrateContext,\n             ccx, vec::append_one((*path).clone(), ast_map::path_name(\n                 special_idents::clownshoe_abi\n             )));\n-        let llty = type_of_fn_from_ty(ccx, t);\n+\n+        // Compute the LLVM type that the function would have if it\n+        // were just a normal Rust function. This will be the type of\n+        // the wrappee fn.\n+        let llty = match ty::get(t).sty {\n+            ty::ty_bare_fn(ref f) => {\n+                assert!(!f.abis.is_rust() && !f.abis.is_intrinsic());\n+                type_of_rust_fn(ccx, f.sig.inputs, f.sig.output)\n+            }\n+            _ => {\n+                ccx.sess.bug(fmt!(\"build_rust_fn: extern fn %s has ty %s, \\\n+                                  expected a bare fn ty\",\n+                                  path.repr(tcx),\n+                                  t.repr(tcx)));\n+            }\n+        };\n+\n+        debug!(\"build_rust_fn: path=%s id=%? t=%s llty=%s\",\n+               path.repr(tcx),\n+               id,\n+               t.repr(tcx),\n+               llty.llrepr(ccx));\n+\n         let llfndecl = base::decl_internal_cdecl_fn(ccx.llmod, ps, llty);\n         base::trans_fn(ccx,\n                        (*path).clone(),"}, {"sha": "43fd6625766ef0ca2c740ae009523fdac9fa823d", "filename": "src/librustc/middle/trans/llrepr.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fllrepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fllrepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fllrepr.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use middle::trans::context::CrateContext;\n+use middle::trans::type_::Type;\n+use lib::llvm::ValueRef;\n+\n+pub trait LlvmRepr {\n+    fn llrepr(&self, ccx: &CrateContext) -> ~str;\n+}\n+\n+impl<'self, T:LlvmRepr> LlvmRepr for &'self [T] {\n+    fn llrepr(&self, ccx: &CrateContext) -> ~str {\n+        let reprs = self.map(|t| t.llrepr(ccx));\n+        fmt!(\"[%s]\", reprs.connect(\",\"))\n+    }\n+}\n+\n+impl LlvmRepr for Type {\n+    fn llrepr(&self, ccx: &CrateContext) -> ~str {\n+        ccx.tn.type_to_str(*self)\n+    }\n+}\n+\n+impl LlvmRepr for ValueRef {\n+    fn llrepr(&self, ccx: &CrateContext) -> ~str {\n+        ccx.tn.val_to_str(*self)\n+    }\n+}\n+\n+"}, {"sha": "008da7f7ff8f26d8b1f1b0c0a761499d076485be", "filename": "src/librustc/middle/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -45,3 +45,4 @@ pub mod asm;\n pub mod type_;\n pub mod value;\n pub mod basic_block;\n+pub mod llrepr;"}, {"sha": "7d1b5f7e93f145c3276f6dce27d57ba7eb65e351", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -3099,22 +3099,6 @@ pub fn ty_param_bounds_and_ty_for_def(fcx: @mut FnCtxt,\n           let typ = fcx.local_ty(sp, nid);\n           return no_params(typ);\n       }\n-      ast::def_fn(_, ast::extern_fn) => {\n-        // extern functions are just u8 pointers\n-        return ty_param_bounds_and_ty {\n-            generics: ty::Generics {\n-                type_param_defs: @~[],\n-                region_param: None\n-            },\n-            ty: ty::mk_ptr(\n-                fcx.ccx.tcx,\n-                ty::mt {\n-                    ty: ty::mk_mach_uint(ast::ty_u8),\n-                    mutbl: ast::m_imm\n-                })\n-        };\n-      }\n-\n       ast::def_fn(id, _) | ast::def_static_method(id, _, _) |\n       ast::def_static(id, _) | ast::def_variant(_, id) |\n       ast::def_struct(id) => {"}, {"sha": "987b5949f983d3974501fe82f667bebd5385434e", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -1087,13 +1087,13 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::item)\n         tcx.tcache.insert(local_def(it.id), tpt);\n         return tpt;\n       }\n-      ast::item_fn(ref decl, purity, _, ref generics, _) => {\n+      ast::item_fn(ref decl, purity, abi, ref generics, _) => {\n         assert!(rp.is_none());\n         let ty_generics = ty_generics(ccx, None, generics, 0);\n         let tofd = astconv::ty_of_bare_fn(ccx,\n                                           &empty_rscope,\n                                           purity,\n-                                          AbiSet::Rust(),\n+                                          abi,\n                                           &generics.lifetimes,\n                                           decl);\n         let tpt = ty_param_bounds_and_ty {"}, {"sha": "5f232c7881a62c87bf235cb77fd2938d7093ff85", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -369,6 +369,47 @@ impl<T> Eq for *const T {\n     fn ne(&self, other: &*const T) -> bool { !self.eq(other) }\n }\n \n+// Equality for extern \"C\" fn pointers\n+#[cfg(not(test))]\n+mod externfnpointers {\n+    use cast;\n+    use cmp::Eq;\n+\n+    impl<_R> Eq for extern \"C\" fn() -> _R {\n+        #[inline]\n+        fn eq(&self, other: &extern \"C\" fn() -> _R) -> bool {\n+            let self_: *() = unsafe { cast::transmute(*self) };\n+            let other_: *() = unsafe { cast::transmute(*other) };\n+            self_ == other_\n+        }\n+        #[inline]\n+        fn ne(&self, other: &extern \"C\" fn() -> _R) -> bool {\n+            !self.eq(other)\n+        }\n+    }\n+    macro_rules! fnptreq(\n+        ($($p:ident),*) => {\n+            impl<_R,$($p),*> Eq for extern \"C\" fn($($p),*) -> _R {\n+                #[inline]\n+                fn eq(&self, other: &extern \"C\" fn($($p),*) -> _R) -> bool {\n+                    let self_: *() = unsafe { cast::transmute(*self) };\n+                    let other_: *() = unsafe { cast::transmute(*other) };\n+                    self_ == other_\n+                }\n+                #[inline]\n+                fn ne(&self, other: &extern \"C\" fn($($p),*) -> _R) -> bool {\n+                    !self.eq(other)\n+                }\n+            }\n+        }\n+    )\n+    fnptreq!(A)\n+    fnptreq!(A,B)\n+    fnptreq!(A,B,C)\n+    fnptreq!(A,B,C,D)\n+    fnptreq!(A,B,C,D,E)\n+}\n+\n // Comparison for pointers\n #[cfg(not(test))]\n impl<T> Ord for *const T {"}, {"sha": "12ba39a6dcd67c9195636a2b0a6d92b95e130cdc", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -445,8 +445,17 @@ impl Unwinder {\n         }\n \n         extern {\n+            #[cfg(not(stage0))]\n             #[rust_stack]\n-            fn rust_try(f: *u8, code: *c_void, data: *c_void) -> uintptr_t;\n+            fn rust_try(f: extern \"C\" fn(*c_void, *c_void),\n+                        code: *c_void,\n+                        data: *c_void) -> uintptr_t;\n+\n+            #[cfg(stage0)]\n+            #[rust_stack]\n+            fn rust_try(f: *u8,\n+                        code: *c_void,\n+                        data: *c_void) -> uintptr_t;\n         }\n     }\n "}, {"sha": "71387b09a8d0a5bf628b77859a2a5a791d893ca8", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 102, "deletions": 21, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -31,6 +31,8 @@\n \n use c_str::ToCStr;\n use libc::{size_t, c_int, c_uint, c_void, c_char, uintptr_t};\n+#[cfg(not(stage0))]\n+use libc::ssize_t;\n use libc::{malloc, free};\n use libc;\n use prelude::*;\n@@ -63,17 +65,78 @@ pub type uv_idle_t = c_void;\n pub type uv_tcp_t = c_void;\n pub type uv_udp_t = c_void;\n pub type uv_connect_t = c_void;\n+pub type uv_connection_t = c_void;\n pub type uv_write_t = c_void;\n pub type uv_async_t = c_void;\n pub type uv_timer_t = c_void;\n pub type uv_stream_t = c_void;\n pub type uv_fs_t = c_void;\n pub type uv_udp_send_t = c_void;\n \n+#[cfg(stage0)]\n pub type uv_idle_cb = *u8;\n+#[cfg(stage0)]\n pub type uv_alloc_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_read_cb = *u8;\n+#[cfg(stage0)]\n pub type uv_udp_send_cb = *u8;\n+#[cfg(stage0)]\n pub type uv_udp_recv_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_close_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_walk_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_async_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_connect_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_connection_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_timer_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_write_cb = *u8;\n+\n+#[cfg(not(stage0))]\n+pub type uv_idle_cb = extern \"C\" fn(handle: *uv_idle_t,\n+                                    status: c_int);\n+#[cfg(not(stage0))]\n+pub type uv_alloc_cb = extern \"C\" fn(stream: *uv_stream_t,\n+                                     suggested_size: size_t) -> uv_buf_t;\n+#[cfg(not(stage0))]\n+pub type uv_read_cb = extern \"C\" fn(stream: *uv_stream_t,\n+                                    nread: ssize_t,\n+                                    buf: uv_buf_t);\n+#[cfg(not(stage0))]\n+pub type uv_udp_send_cb = extern \"C\" fn(req: *uv_udp_send_t,\n+                                        status: c_int);\n+#[cfg(not(stage0))]\n+pub type uv_udp_recv_cb = extern \"C\" fn(handle: *uv_udp_t,\n+                                        nread: ssize_t,\n+                                        buf: uv_buf_t,\n+                                        addr: *sockaddr,\n+                                        flags: c_uint);\n+#[cfg(not(stage0))]\n+pub type uv_close_cb = extern \"C\" fn(handle: *uv_handle_t);\n+#[cfg(not(stage0))]\n+pub type uv_walk_cb = extern \"C\" fn(handle: *uv_handle_t,\n+                                    arg: *c_void);\n+#[cfg(not(stage0))]\n+pub type uv_async_cb = extern \"C\" fn(handle: *uv_async_t,\n+                                     status: c_int);\n+#[cfg(not(stage0))]\n+pub type uv_connect_cb = extern \"C\" fn(handle: *uv_connect_t,\n+                                       status: c_int);\n+#[cfg(not(stage0))]\n+pub type uv_connection_cb = extern \"C\" fn(handle: *uv_connection_t,\n+                                          status: c_int);\n+#[cfg(not(stage0))]\n+pub type uv_timer_cb = extern \"C\" fn(handle: *uv_timer_t,\n+                                     status: c_int);\n+#[cfg(not(stage0))]\n+pub type uv_write_cb = extern \"C\" fn(handle: *uv_write_t,\n+                                     status: c_int);\n \n pub type sockaddr = c_void;\n pub type sockaddr_in = c_void;\n@@ -191,13 +254,13 @@ pub unsafe fn run(loop_handle: *c_void) {\n     rust_uv_run(loop_handle);\n }\n \n-pub unsafe fn close<T>(handle: *T, cb: *u8) {\n+pub unsafe fn close<T>(handle: *T, cb: uv_close_cb) {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     rust_uv_close(handle as *c_void, cb);\n }\n \n-pub unsafe fn walk(loop_handle: *c_void, cb: *u8, arg: *c_void) {\n+pub unsafe fn walk(loop_handle: *c_void, cb: uv_walk_cb, arg: *c_void) {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     rust_uv_walk(loop_handle, cb, arg);\n@@ -332,14 +395,14 @@ pub unsafe fn tcp_init(loop_handle: *c_void, handle: *uv_tcp_t) -> c_int {\n }\n \n pub unsafe fn tcp_connect(connect_ptr: *uv_connect_t, tcp_handle_ptr: *uv_tcp_t,\n-                          addr_ptr: *sockaddr_in, after_connect_cb: *u8) -> c_int {\n+                          addr_ptr: *sockaddr_in, after_connect_cb: uv_connect_cb) -> c_int {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     return rust_uv_tcp_connect(connect_ptr, tcp_handle_ptr, after_connect_cb, addr_ptr);\n }\n \n pub unsafe fn tcp_connect6(connect_ptr: *uv_connect_t, tcp_handle_ptr: *uv_tcp_t,\n-                           addr_ptr: *sockaddr_in6, after_connect_cb: *u8) -> c_int {\n+                           addr_ptr: *sockaddr_in6, after_connect_cb: uv_connect_cb) -> c_int {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     return rust_uv_tcp_connect6(connect_ptr, tcp_handle_ptr, after_connect_cb, addr_ptr);\n@@ -387,7 +450,8 @@ pub unsafe fn tcp_simultaneous_accepts(handle: *uv_tcp_t, enable: c_int) -> c_in\n     return rust_uv_tcp_simultaneous_accepts(handle, enable);\n }\n \n-pub unsafe fn listen<T>(stream: *T, backlog: c_int, cb: *u8) -> c_int {\n+pub unsafe fn listen<T>(stream: *T, backlog: c_int,\n+                        cb: uv_connection_cb) -> c_int {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     return rust_uv_listen(stream as *c_void, backlog, cb);\n@@ -399,14 +463,19 @@ pub unsafe fn accept(server: *c_void, client: *c_void) -> c_int {\n     return rust_uv_accept(server as *c_void, client as *c_void);\n }\n \n-pub unsafe fn write<T>(req: *uv_write_t, stream: *T, buf_in: &[uv_buf_t], cb: *u8) -> c_int {\n+pub unsafe fn write<T>(req: *uv_write_t,\n+                       stream: *T,\n+                       buf_in: &[uv_buf_t],\n+                       cb: uv_write_cb) -> c_int {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     let buf_ptr = vec::raw::to_ptr(buf_in);\n     let buf_cnt = buf_in.len() as i32;\n     return rust_uv_write(req as *c_void, stream as *c_void, buf_ptr, buf_cnt, cb);\n }\n-pub unsafe fn read_start(stream: *uv_stream_t, on_alloc: uv_alloc_cb, on_read: *u8) -> c_int {\n+pub unsafe fn read_start(stream: *uv_stream_t,\n+                         on_alloc: uv_alloc_cb,\n+                         on_read: uv_read_cb) -> c_int {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     return rust_uv_read_start(stream as *c_void, on_alloc, on_read);\n@@ -435,7 +504,9 @@ pub unsafe fn err_name(err: *uv_err_t) -> *c_char {\n     return rust_uv_err_name(err);\n }\n \n-pub unsafe fn async_init(loop_handle: *c_void, async_handle: *uv_async_t, cb: *u8) -> c_int {\n+pub unsafe fn async_init(loop_handle: *c_void,\n+                         async_handle: *uv_async_t,\n+                         cb: uv_async_cb) -> c_int {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     return rust_uv_async_init(loop_handle, async_handle, cb);\n@@ -460,7 +531,8 @@ pub unsafe fn timer_init(loop_ptr: *c_void, timer_ptr: *uv_timer_t) -> c_int {\n \n     return rust_uv_timer_init(loop_ptr, timer_ptr);\n }\n-pub unsafe fn timer_start(timer_ptr: *uv_timer_t, cb: *u8, timeout: u64,\n+pub unsafe fn timer_start(timer_ptr: *uv_timer_t,\n+                          cb: uv_timer_cb, timeout: u64,\n                           repeat: u64) -> c_int {\n     #[fixed_stack_segment]; #[inline(never)];\n \n@@ -634,8 +706,8 @@ extern {\n     fn rust_uv_loop_new() -> *c_void;\n     fn rust_uv_loop_delete(lp: *c_void);\n     fn rust_uv_run(loop_handle: *c_void);\n-    fn rust_uv_close(handle: *c_void, cb: *u8);\n-    fn rust_uv_walk(loop_handle: *c_void, cb: *u8, arg: *c_void);\n+    fn rust_uv_close(handle: *c_void, cb: uv_close_cb);\n+    fn rust_uv_walk(loop_handle: *c_void, cb: uv_walk_cb, arg: *c_void);\n \n     fn rust_uv_idle_new() -> *uv_idle_t;\n     fn rust_uv_idle_delete(handle: *uv_idle_t);\n@@ -644,7 +716,9 @@ extern {\n     fn rust_uv_idle_stop(handle: *uv_idle_t) -> c_int;\n \n     fn rust_uv_async_send(handle: *uv_async_t);\n-    fn rust_uv_async_init(loop_handle: *c_void, async_handle: *uv_async_t, cb: *u8) -> c_int;\n+    fn rust_uv_async_init(loop_handle: *c_void,\n+                          async_handle: *uv_async_t,\n+                          cb: uv_async_cb) -> c_int;\n     fn rust_uv_tcp_init(loop_handle: *c_void, handle_ptr: *uv_tcp_t) -> c_int;\n     fn rust_uv_buf_init(out_buf: *uv_buf_t, base: *u8, len: size_t);\n     fn rust_uv_last_error(loop_handle: *c_void) -> uv_err_t;\n@@ -658,10 +732,12 @@ extern {\n     fn rust_uv_ip6_name(src: *sockaddr_in6, dst: *u8, size: size_t) -> c_int;\n     fn rust_uv_ip4_port(src: *sockaddr_in) -> c_uint;\n     fn rust_uv_ip6_port(src: *sockaddr_in6) -> c_uint;\n-    fn rust_uv_tcp_connect(req: *uv_connect_t, handle: *uv_tcp_t, cb: *u8,\n+    fn rust_uv_tcp_connect(req: *uv_connect_t, handle: *uv_tcp_t,\n+                           cb: uv_connect_cb,\n                            addr: *sockaddr_in) -> c_int;\n     fn rust_uv_tcp_bind(tcp_server: *uv_tcp_t, addr: *sockaddr_in) -> c_int;\n-    fn rust_uv_tcp_connect6(req: *uv_connect_t, handle: *uv_tcp_t, cb: *u8,\n+    fn rust_uv_tcp_connect6(req: *uv_connect_t, handle: *uv_tcp_t,\n+                            cb: uv_connect_cb,\n                             addr: *sockaddr_in6) -> c_int;\n     fn rust_uv_tcp_bind6(tcp_server: *uv_tcp_t, addr: *sockaddr_in6) -> c_int;\n     fn rust_uv_tcp_getpeername(tcp_handle_ptr: *uv_tcp_t, name: *sockaddr_storage) -> c_int;\n@@ -674,10 +750,12 @@ extern {\n     fn rust_uv_udp_bind(server: *uv_udp_t, addr: *sockaddr_in, flags: c_uint) -> c_int;\n     fn rust_uv_udp_bind6(server: *uv_udp_t, addr: *sockaddr_in6, flags: c_uint) -> c_int;\n     fn rust_uv_udp_send(req: *uv_udp_send_t, handle: *uv_udp_t, buf_in: *uv_buf_t,\n-                        buf_cnt: c_int, addr: *sockaddr_in, cb: *u8) -> c_int;\n+                        buf_cnt: c_int, addr: *sockaddr_in, cb: uv_udp_send_cb) -> c_int;\n     fn rust_uv_udp_send6(req: *uv_udp_send_t, handle: *uv_udp_t, buf_in: *uv_buf_t,\n-                         buf_cnt: c_int, addr: *sockaddr_in6, cb: *u8) -> c_int;\n-    fn rust_uv_udp_recv_start(server: *uv_udp_t, on_alloc: *u8, on_recv: *u8) -> c_int;\n+                         buf_cnt: c_int, addr: *sockaddr_in6, cb: uv_udp_send_cb) -> c_int;\n+    fn rust_uv_udp_recv_start(server: *uv_udp_t,\n+                              on_alloc: uv_alloc_cb,\n+                              on_recv: uv_udp_recv_cb) -> c_int;\n     fn rust_uv_udp_recv_stop(server: *uv_udp_t) -> c_int;\n     fn rust_uv_get_udp_handle_from_send_req(req: *uv_udp_send_t) -> *uv_udp_t;\n     fn rust_uv_udp_getsockname(handle: *uv_udp_t, name: *sockaddr_storage) -> c_int;\n@@ -693,14 +771,17 @@ extern {\n     fn rust_uv_malloc_sockaddr_storage() -> *sockaddr_storage;\n     fn rust_uv_free_sockaddr_storage(ss: *sockaddr_storage);\n \n-    fn rust_uv_listen(stream: *c_void, backlog: c_int, cb: *u8) -> c_int;\n+    fn rust_uv_listen(stream: *c_void, backlog: c_int,\n+                      cb: uv_connection_cb) -> c_int;\n     fn rust_uv_accept(server: *c_void, client: *c_void) -> c_int;\n     fn rust_uv_write(req: *c_void, stream: *c_void, buf_in: *uv_buf_t, buf_cnt: c_int,\n-                     cb: *u8) -> c_int;\n-    fn rust_uv_read_start(stream: *c_void, on_alloc: *u8, on_read: *u8) -> c_int;\n+                     cb: uv_write_cb) -> c_int;\n+    fn rust_uv_read_start(stream: *c_void,\n+                          on_alloc: uv_alloc_cb,\n+                          on_read: uv_read_cb) -> c_int;\n     fn rust_uv_read_stop(stream: *c_void) -> c_int;\n     fn rust_uv_timer_init(loop_handle: *c_void, timer_handle: *uv_timer_t) -> c_int;\n-    fn rust_uv_timer_start(timer_handle: *uv_timer_t, cb: *u8, timeout: libc::uint64_t,\n+    fn rust_uv_timer_start(timer_handle: *uv_timer_t, cb: uv_timer_cb, timeout: libc::uint64_t,\n                            repeat: libc::uint64_t) -> c_int;\n     fn rust_uv_timer_stop(handle: *uv_timer_t) -> c_int;\n "}, {"sha": "e34fb610e0605470c7704ee17dabd2d688136b9f", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -19,7 +19,8 @@ pub mod rustrt {\n     use std::libc;\n \n     extern {\n-        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n+        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n+                             data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }\n }"}, {"sha": "8ccd92316e922dce42ae243761dfd3ebb9f6361d", "filename": "src/test/compile-fail/extern-cstack-lint.rs", "status": "renamed", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Fcompile-fail%2Fextern-cstack-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Fcompile-fail%2Fextern-cstack-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-cstack-lint.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -8,10 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:expected function but found `*u8`\n extern fn f() {\n }\n \n-fn main() {\n-    f();\n+extern fn call1() {\n+    f(); // OK from another extern fn!\n }\n+\n+fn call2() {\n+    f(); //~ ERROR invoking non-Rust fn\n+}\n+\n+\n+fn main() {}", "previous_filename": "src/test/compile-fail/extern-no-call.rs"}, {"sha": "069c5a77c6c330ffb439019ea3b487cfbc494df3", "filename": "src/test/compile-fail/extern-wrong-value-type.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -12,6 +12,7 @@ extern fn f() {\n }\n \n fn main() {\n-    // extern functions are *u8 types\n-    let _x: &fn() = f; //~ ERROR found `*u8`\n+    // extern functions are extern \"C\" fn\n+    let _x: extern \"C\" fn() = f; // OK\n+    let _x: &fn() = f; //~ ERROR mismatched types\n }"}, {"sha": "d511930c70fa7a3add33363b8f61e0fd4fd335df", "filename": "src/test/run-pass/const-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -12,7 +12,7 @@ use std::libc;\n \n extern fn foo() {}\n \n-static x: *u8 = foo;\n+static x: extern \"C\" fn() = foo;\n static y: *libc::c_void = x as *libc::c_void;\n static a: &'static int = &10;\n static b: *int = a as *int;"}, {"sha": "eb7ae3d6fec99bdedf2736df02c3a696e3d61192", "filename": "src/test/run-pass/const-cross-crate-extern.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -13,8 +13,11 @@\n \n extern mod cci_const;\n use cci_const::bar;\n-static foo: *u8 = bar;\n+use std::cast::transmute;\n+static foo: extern \"C\" fn() = bar;\n \n pub fn main() {\n-    assert_eq!(foo, cci_const::bar);\n+    unsafe {\n+        assert_eq!(foo, bar);\n+    }\n }"}, {"sha": "e07af4b0383fd1375f0eb2a8db4be96521e4e5ae", "filename": "src/test/run-pass/const-extern-function.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -10,14 +10,16 @@\n \n extern fn foopy() {}\n \n-static f: *u8 = foopy;\n+static f: extern \"C\" fn() = foopy;\n static s: S = S { f: foopy };\n \n struct S {\n-    f: *u8\n+    f: extern \"C\" fn()\n }\n \n pub fn main() {\n-    assert_eq!(foopy, f);\n-    assert_eq!(f, s.f);\n+    unsafe {\n+        assert_eq!(foopy, f);\n+        assert_eq!(f, s.f);\n+    }\n }"}, {"sha": "1153cb4177daaec5e43ab6b8b1e130da8f5eda9c", "filename": "src/test/run-pass/extern-call-deep.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -14,7 +14,8 @@ mod rustrt {\n     use std::libc;\n \n     extern {\n-        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n+        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n+                             data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }\n }"}, {"sha": "a8fa9c2cef028aaa55ceb26c5fe440d0f0673fb5", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -15,7 +15,8 @@ mod rustrt {\n     use std::libc;\n \n     extern {\n-        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n+        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n+                             data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }\n }"}, {"sha": "bc6ee63c0f4574ebbb68d7460509d86941dbbfb5", "filename": "src/test/run-pass/extern-call-direct.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-call-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-call-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-direct.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test direct calls to extern fns.\n+\n+extern fn f(x: uint) -> uint { x * 2 }\n+\n+fn main() {\n+    #[fixed_stack_segment];\n+\n+    let x = f(22);\n+    assert_eq!(x, 44);\n+}"}, {"sha": "9929cb447a6c74234cc0fc0ea3a78af749c5d0a8", "filename": "src/test/run-pass/extern-call-indirect.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -14,7 +14,8 @@ mod rustrt {\n     use std::libc;\n \n     extern {\n-        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n+        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n+                             data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }\n }", "previous_filename": "src/test/run-pass/extern-call.rs"}, {"sha": "4388ef65e986548436fa3314c81d365b919a2f3f", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -19,7 +19,8 @@ mod rustrt {\n     use std::libc;\n \n     extern {\n-        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n+        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n+                             data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }\n }"}, {"sha": "41bf4a10b5d9e74c19e82a5c31e1aaeb416abf23", "filename": "src/test/run-pass/extern-compare-with-return-type.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that we can compare various kinds of extern fn signatures.\n+\n+extern fn voidret1() {}\n+extern fn voidret2() {}\n+\n+extern fn uintret() -> uint { 22 }\n+\n+extern fn uintvoidret(x: uint) {}\n+\n+extern fn uintuintuintuintret(x: uint, y: uint, z: uint) -> uint { x+y+z }\n+\n+fn main() {\n+    assert_eq!(voidret1, voidret1);\n+    assert!(voidret1 != voidret2);\n+\n+    assert_eq!(uintret, uintret);\n+\n+    assert_eq!(uintvoidret, uintvoidret);\n+\n+    assert_eq!(uintuintuintuintret, uintuintuintuintret);\n+}\n+"}, {"sha": "2323567ccce4360385bdd5447cdb54d93775d129", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -18,7 +18,8 @@ mod rustrt {\n     use std::libc;\n \n     extern {\n-        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n+        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n+                             data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }\n }"}, {"sha": "e636f511da8d309620b59c4c114a475e2bfa682d", "filename": "src/test/run-pass/extern-take-value.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-take-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-take-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-take-value.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -8,18 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::cast::transmute;\n+\n extern fn f() {\n }\n \n extern fn g() {\n }\n \n pub fn main() {\n-    // extern functions are *u8 types\n-    let a: *u8 = f;\n-    let b: *u8 = f;\n-    let c: *u8 = g;\n+    unsafe {\n+        let a: extern \"C\" fn() = f;\n+        let b: extern \"C\" fn() = f;\n+        let c: extern \"C\" fn() = g;\n \n-    assert_eq!(a, b);\n-    assert!(a != c);\n+        assert_eq!(a, b);\n+        assert!(a != c);\n+    }\n }"}, {"sha": "fd0807dffc84c06029dd0b7a7eef9f943f4a15ec", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -15,7 +15,8 @@ mod rustrt {\n     use std::libc;\n \n     extern {\n-        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n+        pub fn rust_dbg_call(cb: extern \"C\" fn (libc::uintptr_t) -> libc::uintptr_t,\n+                             data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }\n }"}, {"sha": "2fa4f191ed14d759c8f67e9b6d0ead54dd69ac4c", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=4e3dbf959a5124481d1e3ec9b0b30f48ac6dd4f0", "patch": "@@ -2,7 +2,8 @@ use std::cast;\n use std::libc;\n use std::unstable::run_in_bare_thread;\n \n-externfn!(fn rust_dbg_call(cb: *u8, data: libc::uintptr_t) -> libc::uintptr_t)\n+externfn!(fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t),\n+                           data: libc::uintptr_t) -> libc::uintptr_t)\n \n pub fn main() {\n     unsafe {"}]}