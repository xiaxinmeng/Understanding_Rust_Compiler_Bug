{"sha": "b2478052f88db8c8526ee2dc4a382da91eefc76c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNDc4MDUyZjg4ZGI4Yzg1MjZlZTJkYzRhMzgyZGE5MWVlZmM3NmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-25T05:02:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-25T05:02:32Z"}, "message": "Auto merge of #45473 - SimonSapin:variance-red-green, r=nikomatsakis\n\nRemove dependency tracking for variance computation\n\nThis custom tracking is now replaced by the red/green algorithm.\n\nFix https://github.com/rust-lang/rust/issues/45471", "tree": {"sha": "c056961392615284583563585978eb9c8883191d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c056961392615284583563585978eb9c8883191d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2478052f88db8c8526ee2dc4a382da91eefc76c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2478052f88db8c8526ee2dc4a382da91eefc76c", "html_url": "https://github.com/rust-lang/rust/commit/b2478052f88db8c8526ee2dc4a382da91eefc76c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2478052f88db8c8526ee2dc4a382da91eefc76c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "html_url": "https://github.com/rust-lang/rust/commit/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51"}, {"sha": "94edd8fa4836e42820529ab751a4bbd56b6f4b14", "url": "https://api.github.com/repos/rust-lang/rust/commits/94edd8fa4836e42820529ab751a4bbd56b6f4b14", "html_url": "https://github.com/rust-lang/rust/commit/94edd8fa4836e42820529ab751a4bbd56b6f4b14"}], "stats": {"total": 61, "additions": 11, "deletions": 50}, "files": [{"sha": "8a8dfbabbe1170e4ffeafe19b6274448d5e3ccca", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2478052f88db8c8526ee2dc4a382da91eefc76c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2478052f88db8c8526ee2dc4a382da91eefc76c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=b2478052f88db8c8526ee2dc4a382da91eefc76c", "patch": "@@ -755,13 +755,11 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::CrateVariancesMap {\n                                           hcx: &mut StableHashingContext<'gcx>,\n                                           hasher: &mut StableHasher<W>) {\n         let ty::CrateVariancesMap {\n-            ref dependencies,\n             ref variances,\n             // This is just an irrelevant helper value.\n             empty_variance: _,\n         } = *self;\n \n-        dependencies.hash_stable(hcx, hasher);\n         variances.hash_stable(hcx, hasher);\n     }\n }"}, {"sha": "02e550711cdf08f2b68af7c2f46298ff7adce64e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2478052f88db8c8526ee2dc4a382da91eefc76c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2478052f88db8c8526ee2dc4a382da91eefc76c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b2478052f88db8c8526ee2dc4a382da91eefc76c", "patch": "@@ -55,7 +55,6 @@ use rustc_const_math::ConstInt;\n use rustc_data_structures::accumulate_vec::IntoIter as AccIntoIter;\n use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n                                            HashStable};\n-use rustc_data_structures::transitive_relation::TransitiveRelation;\n \n use hir;\n \n@@ -313,11 +312,6 @@ pub enum Variance {\n /// `tcx.variances_of()` to get the variance for a *particular*\n /// item.\n pub struct CrateVariancesMap {\n-    /// This relation tracks the dependencies between the variance of\n-    /// various items. In particular, if `a < b`, then the variance of\n-    /// `a` depends on the sources of `b`.\n-    pub dependencies: TransitiveRelation<DefId>,\n-\n     /// For each item with generics, maps to a vector of the variance\n     /// of its generics.  If an item has no generics, it will have no\n     /// entry."}, {"sha": "64d3389b34af7ed83b9e115414aba552689276d1", "filename": "src/librustc_typeck/variance/README.md", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b2478052f88db8c8526ee2dc4a382da91eefc76c/src%2Flibrustc_typeck%2Fvariance%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/b2478052f88db8c8526ee2dc4a382da91eefc76c/src%2Flibrustc_typeck%2Fvariance%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2FREADME.md?ref=b2478052f88db8c8526ee2dc4a382da91eefc76c", "patch": "@@ -104,22 +104,16 @@ into two queries:\n - `crate_variances` computes the variance for all items in the current crate.\n - `variances_of` accesses the variance for an individual reading; it\n   works by requesting `crate_variances` and extracting the relevant data.\n-  \n+\n If you limit yourself to reading `variances_of`, your code will only\n depend then on the inference inferred for that particular item.\n \n-Eventually, the goal is to rely on the red-green dependency management\n-algorithm. At the moment, however, we rely instead on a hack, where\n-`variances_of` ignores the dependencies of accessing\n-`crate_variances` and instead computes the *correct* dependencies\n-itself. To this end, when we build up the constraints in the system,\n-we also built up a transitive `dependencies` relation as part of the\n-crate map. A `(X, Y)` pair is added to the map each time we have a\n-constraint that the variance of some inferred for the item `X` depends\n-on the variance of some element of `Y`. This is to some extent a\n-mirroring of the inference graph in the dependency graph. This means\n-we can just completely ignore the fixed-point iteration, since it is\n-just shuffling values along this graph.\n+Ultimately, this setup relies on the red-green algorithm.\n+In particular, every variance query ultimately depends on -- effectively --\n+all type definitions in the entire crate (through `crate_variances`),\n+but since most changes will not result in a change\n+to the actual results from variance inference,\n+the `variances_of` query will wind up being considered green after it is re-evaluated.\n \n ### Addendum: Variance on traits\n "}, {"sha": "857b35158f2736438c64f1dfa5245e4e6f98fd38", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2478052f88db8c8526ee2dc4a382da91eefc76c/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2478052f88db8c8526ee2dc4a382da91eefc76c/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=b2478052f88db8c8526ee2dc4a382da91eefc76c", "patch": "@@ -22,7 +22,6 @@ use syntax::ast;\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n-use rustc_data_structures::transitive_relation::TransitiveRelation;\n use rustc_data_structures::stable_hasher::StableHashingContextProvider;\n \n use super::terms::*;\n@@ -38,11 +37,6 @@ pub struct ConstraintContext<'a, 'tcx: 'a> {\n     bivariant: VarianceTermPtr<'a>,\n \n     pub constraints: Vec<Constraint<'a>>,\n-\n-    /// This relation tracks the dependencies between the variance of\n-    /// various items. In particular, if `a < b`, then the variance of\n-    /// `a` depends on the sources of `b`.\n-    pub dependencies: TransitiveRelation<DefId>,\n }\n \n /// Declares that the variable `decl_id` appears in a location with\n@@ -63,7 +57,6 @@ pub struct Constraint<'a> {\n /// then while we are visiting `Bar<T>`, the `CurrentItem` would have\n /// the def-id and the start of `Foo`'s inferreds.\n pub struct CurrentItem {\n-    def_id: DefId,\n     inferred_start: InferredIndex,\n }\n \n@@ -81,7 +74,6 @@ pub fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>)\n         invariant,\n         bivariant,\n         constraints: Vec::new(),\n-        dependencies: TransitiveRelation::new(),\n     };\n \n     tcx.hir.krate().visit_all_item_likes(&mut constraint_cx);\n@@ -201,7 +193,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n \n         let id = tcx.hir.as_local_node_id(def_id).unwrap();\n         let inferred_start = self.terms_cx.inferred_starts[&id];\n-        let current_item = &CurrentItem { def_id, inferred_start };\n+        let current_item = &CurrentItem { inferred_start };\n         match tcx.type_of(def_id).sty {\n             ty::TyAdt(def, _) => {\n                 // Not entirely obvious: constraints on structs/enums do not\n@@ -410,12 +402,6 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             return;\n         }\n \n-        // Add a corresponding relation into the dependencies to\n-        // indicate that the variance for `current` relies on `def_id`.\n-        if self.tcx().dep_graph.is_fully_enabled() {\n-            self.dependencies.add(current.def_id, def_id);\n-        }\n-\n         let (local, remote) = if let Some(id) = self.tcx().hir.as_local_node_id(def_id) {\n             (Some(self.terms_cx.inferred_starts[&id]), None)\n         } else {"}, {"sha": "418d2b9467096db1508ed76d9654c975ee4102fe", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b2478052f88db8c8526ee2dc4a382da91eefc76c/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2478052f88db8c8526ee2dc4a382da91eefc76c/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=b2478052f88db8c8526ee2dc4a382da91eefc76c", "patch": "@@ -94,20 +94,9 @@ fn variances_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_def_id: DefId)\n \n     // Everything else must be inferred.\n \n-    // Lacking red/green, we read the variances for all items here\n-    // but ignore the dependencies, then re-synthesize the ones we need.\n-    let crate_map = tcx.dep_graph.with_ignore(|| tcx.crate_variances(LOCAL_CRATE));\n+    let crate_map = tcx.crate_variances(LOCAL_CRATE);\n     let dep_node = item_def_id.to_dep_node(tcx, DepKind::ItemVarianceConstraints);\n     tcx.dep_graph.read(dep_node);\n-    for &dep_def_id in crate_map.dependencies.less_than(&item_def_id) {\n-        if dep_def_id.is_local() {\n-            let dep_node = dep_def_id.to_dep_node(tcx, DepKind::ItemVarianceConstraints);\n-            tcx.dep_graph.read(dep_node);\n-        } else {\n-            let dep_node = dep_def_id.to_dep_node(tcx, DepKind::ItemVariances);\n-            tcx.dep_graph.read(dep_node);\n-        }\n-    }\n \n     crate_map.variances.get(&item_def_id)\n                        .unwrap_or(&crate_map.empty_variance)"}, {"sha": "434e8ce148f3b2c827384418e0b72aec0f1e7d6c", "filename": "src/librustc_typeck/variance/solve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2478052f88db8c8526ee2dc4a382da91eefc76c/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2478052f88db8c8526ee2dc4a382da91eefc76c/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs?ref=b2478052f88db8c8526ee2dc4a382da91eefc76c", "patch": "@@ -34,7 +34,7 @@ struct SolveContext<'a, 'tcx: 'a> {\n }\n \n pub fn solve_constraints(constraints_cx: ConstraintContext) -> ty::CrateVariancesMap {\n-    let ConstraintContext { terms_cx, dependencies, constraints, .. } = constraints_cx;\n+    let ConstraintContext { terms_cx, constraints, .. } = constraints_cx;\n \n     let mut solutions = vec![ty::Bivariant; terms_cx.inferred_terms.len()];\n     for &(id, ref variances) in &terms_cx.lang_items {\n@@ -53,7 +53,7 @@ pub fn solve_constraints(constraints_cx: ConstraintContext) -> ty::CrateVariance\n     let variances = solutions_cx.create_map();\n     let empty_variance = Rc::new(Vec::new());\n \n-    ty::CrateVariancesMap { dependencies, variances, empty_variance }\n+    ty::CrateVariancesMap { variances, empty_variance }\n }\n \n impl<'a, 'tcx> SolveContext<'a, 'tcx> {"}]}