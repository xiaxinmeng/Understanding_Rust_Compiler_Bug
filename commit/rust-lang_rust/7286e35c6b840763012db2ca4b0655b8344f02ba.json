{"sha": "7286e35c6b840763012db2ca4b0655b8344f02ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyODZlMzVjNmI4NDA3NjMwMTJkYjJjYTRiMDY1NWI4MzQ0ZjAyYmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-07T19:43:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-11T21:55:23Z"}, "message": "error_reporting -- explain reborrowed upvar constraints in a hopefully useful way", "tree": {"sha": "08ec1b364202a308ad0ed3dff29108ddad1025a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08ec1b364202a308ad0ed3dff29108ddad1025a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7286e35c6b840763012db2ca4b0655b8344f02ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7286e35c6b840763012db2ca4b0655b8344f02ba", "html_url": "https://github.com/rust-lang/rust/commit/7286e35c6b840763012db2ca4b0655b8344f02ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7286e35c6b840763012db2ca4b0655b8344f02ba/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64c9b5c3aeb037f8113948da2c098bb8c86b9d8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/64c9b5c3aeb037f8113948da2c098bb8c86b9d8a", "html_url": "https://github.com/rust-lang/rust/commit/64c9b5c3aeb037f8113948da2c098bb8c86b9d8a"}], "stats": {"total": 64, "additions": 55, "deletions": 9}, "files": [{"sha": "3a3f24a2e2d88d1163ab94c9c4571201e0e13adc", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7286e35c6b840763012db2ca4b0655b8344f02ba/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7286e35c6b840763012db2ca4b0655b8344f02ba/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=7286e35c6b840763012db2ca4b0655b8344f02ba", "patch": "@@ -237,6 +237,24 @@ impl ErrorReporting for InferCtxt {\n                     sup,\n                     \"\");\n             }\n+            infer::ReborrowUpvar(span, ref upvar_id) => {\n+                self.tcx.sess.span_err(\n+                    span,\n+                    format!(\"lifetime of borrowed pointer outlives \\\n+                            lifetime of captured variable `{}`...\",\n+                            ty::local_var_name_str(self.tcx, upvar_id.var_id).get().to_str()));\n+                note_and_explain_region(\n+                    self.tcx,\n+                    \"...the borrowed pointer is valid for \",\n+                    sub,\n+                    \"...\");\n+                note_and_explain_region(\n+                    self.tcx,\n+                    format!(\"...but `{}` is only valid for \",\n+                            ty::local_var_name_str(self.tcx, upvar_id.var_id).get().to_str()),\n+                    sup,\n+                    \"\");\n+            }\n             infer::InfStackClosure(span) => {\n                 self.tcx.sess.span_err(\n                     span,\n@@ -272,10 +290,12 @@ impl ErrorReporting for InferCtxt {\n                     sup,\n                     \"\");\n             }\n-            infer::FreeVariable(span) => {\n+            infer::FreeVariable(span, id) => {\n                 self.tcx.sess.span_err(\n                     span,\n-                    \"captured variable does not outlive the enclosing closure\");\n+                    format!(\"captured variable `{}` does not \\\n+                            outlive the enclosing closure\",\n+                            ty::local_var_name_str(self.tcx, id).get().to_str()));\n                 note_and_explain_region(\n                     self.tcx,\n                     \"captured variable is valid for \",\n@@ -473,6 +493,10 @@ impl ErrorReportingHelpers for InferCtxt {\n             infer::BoundRegionInCoherence(..) => {\n                 format!(\" for coherence check\")\n             }\n+            infer::UpvarRegion(ref upvar_id, _) => {\n+                format!(\" for capture of `{}` by closure\",\n+                        ty::local_var_name_str(self.tcx, upvar_id.var_id).get().to_str())\n+            }\n         };\n \n         self.tcx.sess.span_err(\n@@ -533,6 +557,12 @@ impl ErrorReportingHelpers for InferCtxt {\n                     \"...so that reference does not outlive \\\n                     borrowed content\");\n             }\n+            infer::ReborrowUpvar(span, ref upvar_id) => {\n+                self.tcx.sess.span_note(\n+                    span,\n+                    format!(\"...so that closure can access `{}`\",\n+                            ty::local_var_name_str(self.tcx, upvar_id.var_id).get().to_str()))\n+            }\n             infer::InfStackClosure(span) => {\n                 self.tcx.sess.span_note(\n                     span,\n@@ -549,11 +579,12 @@ impl ErrorReportingHelpers for InferCtxt {\n                     \"...so that pointer is not dereferenced \\\n                     outside its lifetime\");\n             }\n-            infer::FreeVariable(span) => {\n+            infer::FreeVariable(span, id) => {\n                 self.tcx.sess.span_note(\n                     span,\n-                    \"...so that captured variable does not outlive the \\\n-                    enclosing closure\");\n+                    format!(\"...so that captured variable `{}` \\\n+                            does not outlive the enclosing closure\",\n+                            ty::local_var_name_str(self.tcx, id).get().to_str()));\n             }\n             infer::IndexSlice(span) => {\n                 self.tcx.sess.span_note("}, {"sha": "deec4100617412d6da3723ac6b68de4ab49bc6aa", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7286e35c6b840763012db2ca4b0655b8344f02ba/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7286e35c6b840763012db2ca4b0655b8344f02ba/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=7286e35c6b840763012db2ca4b0655b8344f02ba", "patch": "@@ -160,7 +160,7 @@ pub enum SubregionOrigin {\n     DerefPointer(Span),\n \n     // Closure bound must not outlive captured free variables\n-    FreeVariable(Span),\n+    FreeVariable(Span, ast::NodeId),\n \n     // Index into slice must be within its lifetime\n     IndexSlice(Span),\n@@ -172,6 +172,9 @@ pub enum SubregionOrigin {\n     // Creating a pointer `b` to contents of another reference\n     Reborrow(Span),\n \n+    // Creating a pointer `b` to contents of an upvar\n+    ReborrowUpvar(Span, ty::UpvarId),\n+\n     // (&'a &'b T) where a >= b\n     ReferenceOutlivesReferent(ty::t, Span),\n \n@@ -225,6 +228,8 @@ pub enum RegionVariableOrigin {\n     // when doing subtyping/lub/glb computations\n     BoundRegionInFnType(Span, ty::BoundRegion),\n \n+    UpvarRegion(ty::UpvarId, Span),\n+\n     BoundRegionInTypeOrImpl(Span),\n \n     BoundRegionInCoherence,\n@@ -876,10 +881,11 @@ impl SubregionOrigin {\n             InfStackClosure(a) => a,\n             InvokeClosure(a) => a,\n             DerefPointer(a) => a,\n-            FreeVariable(a) => a,\n+            FreeVariable(a, _) => a,\n             IndexSlice(a) => a,\n             RelateObjectBound(a) => a,\n             Reborrow(a) => a,\n+            ReborrowUpvar(a, _) => a,\n             ReferenceOutlivesReferent(_, a) => a,\n             BindingTypeIsNotValidAtDecl(a) => a,\n             CallRcvr(a) => a,\n@@ -898,10 +904,11 @@ impl Repr for SubregionOrigin {\n             InfStackClosure(a) => format!(\"InfStackClosure({})\", a.repr(tcx)),\n             InvokeClosure(a) => format!(\"InvokeClosure({})\", a.repr(tcx)),\n             DerefPointer(a) => format!(\"DerefPointer({})\", a.repr(tcx)),\n-            FreeVariable(a) => format!(\"FreeVariable({})\", a.repr(tcx)),\n+            FreeVariable(a, b) => format!(\"FreeVariable({}, {})\", a.repr(tcx), b),\n             IndexSlice(a) => format!(\"IndexSlice({})\", a.repr(tcx)),\n             RelateObjectBound(a) => format!(\"RelateObjectBound({})\", a.repr(tcx)),\n             Reborrow(a) => format!(\"Reborrow({})\", a.repr(tcx)),\n+            ReborrowUpvar(a, b) => format!(\"ReborrowUpvar({},{:?})\", a.repr(tcx), b),\n             ReferenceOutlivesReferent(_, a) =>\n                 format!(\"ReferenceOutlivesReferent({})\", a.repr(tcx)),\n             BindingTypeIsNotValidAtDecl(a) =>\n@@ -928,6 +935,7 @@ impl RegionVariableOrigin {\n             BoundRegionInFnType(a, _) => a,\n             BoundRegionInTypeOrImpl(a) => a,\n             BoundRegionInCoherence => codemap::DUMMY_SP,\n+            UpvarRegion(_, a) => a\n         }\n     }\n }\n@@ -948,6 +956,9 @@ impl Repr for RegionVariableOrigin {\n             BoundRegionInTypeOrImpl(a) => format!(\"bound_regionInTypeOrImpl({})\",\n                                                a.repr(tcx)),\n             BoundRegionInCoherence => format!(\"bound_regionInCoherence\"),\n+            UpvarRegion(a, b) => format!(\"UpvarRegion({}, {})\",\n+                                         a.repr(tcx),\n+                                         b.repr(tcx)),\n         }\n     }\n }"}, {"sha": "bbd9d8e1c4dcc4dd19b4be9480fa2d420b81028f", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7286e35c6b840763012db2ca4b0655b8344f02ba/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7286e35c6b840763012db2ca4b0655b8344f02ba/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=7286e35c6b840763012db2ca4b0655b8344f02ba", "patch": "@@ -270,7 +270,11 @@ impl RegionVarBindings {\n         // cannot add constraints once regions are resolved\n         assert!(self.values_are_none());\n \n-        debug!(\"RegionVarBindings: make_subregion({:?}, {:?})\", sub, sup);\n+        debug!(\"RegionVarBindings: make_subregion({}, {}) due to {}\",\n+               sub.repr(self.tcx),\n+               sup.repr(self.tcx),\n+               origin.repr(self.tcx));\n+\n         match (sub, sup) {\n           (ReEarlyBound(..), _) |\n           (ReLateBound(..), _) |"}]}