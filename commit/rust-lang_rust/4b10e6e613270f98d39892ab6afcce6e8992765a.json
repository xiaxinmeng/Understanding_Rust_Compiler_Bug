{"sha": "4b10e6e613270f98d39892ab6afcce6e8992765a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMTBlNmU2MTMyNzBmOThkMzk4OTJhYjZhZmNjZTZlODk5Mjc2NWE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-14T09:58:39Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-14T09:58:39Z"}, "message": "Workaround missing encoding for icmp.i8", "tree": {"sha": "ec8bccaa1871c93c23684505f70436e5bf2e35b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec8bccaa1871c93c23684505f70436e5bf2e35b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b10e6e613270f98d39892ab6afcce6e8992765a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b10e6e613270f98d39892ab6afcce6e8992765a", "html_url": "https://github.com/rust-lang/rust/commit/4b10e6e613270f98d39892ab6afcce6e8992765a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b10e6e613270f98d39892ab6afcce6e8992765a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f4926f43fe2ef4ba3ab54a7dc10468e26b37ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f4926f43fe2ef4ba3ab54a7dc10468e26b37ea3", "html_url": "https://github.com/rust-lang/rust/commit/3f4926f43fe2ef4ba3ab54a7dc10468e26b37ea3"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "7f0e8d8b3b7dbf8e588c9403e1781900a1bd2909", "filename": "Readme.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b10e6e613270f98d39892ab6afcce6e8992765a/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/4b10e6e613270f98d39892ab6afcce6e8992765a/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=4b10e6e613270f98d39892ab6afcce6e8992765a", "patch": "@@ -33,7 +33,6 @@ $ ./build.sh\n ## Not yet supported\n \n * Checked binops\n-* Statics\n * Drop glue\n \n * Building libraries"}, {"sha": "3ac2e8966b3679b24d2dda079d55c2066bcfa73f", "filename": "examples/mini_core_hello_world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b10e6e613270f98d39892ab6afcce6e8992765a/examples%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b10e6e613270f98d39892ab6afcce6e8992765a/examples%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core_hello_world.rs?ref=4b10e6e613270f98d39892ab6afcce6e8992765a", "patch": "@@ -27,7 +27,7 @@ fn start(_main: *const u8, i: isize, _: *const *const u8) -> isize {\n     }\n \n     unsafe {\n-        NUM = 6 * 7 + 5;\n+        NUM = 6 * 7 + 1 + (1u8 == 1u8) as u8; // 44\n         *NUM_REF as isize\n     }\n }"}, {"sha": "508cbcf1b7fa0896ae8afa49e34afbfca2a83d72", "filename": "src/base.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4b10e6e613270f98d39892ab6afcce6e8992765a/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b10e6e613270f98d39892ab6afcce6e8992765a/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=4b10e6e613270f98d39892ab6afcce6e8992765a", "patch": "@@ -382,13 +382,13 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, cur_ebb: Ebb, stmt: &\n                         | (TypeVariants::TyUint(_), TypeVariants::TyInt(_))\n                         | (TypeVariants::TyUint(_), TypeVariants::TyUint(_)) => {\n                             let from = operand.load_value(fx);\n-                            let res = crate::common::cton_intcast(fx, from, from_ty, to_ty, false);\n+                            let res = crate::common::cton_intcast(fx, from, fx.cton_type(to_ty).unwrap(), false);\n                             lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n                         }\n                         (TypeVariants::TyInt(_), TypeVariants::TyInt(_))\n                         | (TypeVariants::TyInt(_), TypeVariants::TyUint(_)) => {\n                             let from = operand.load_value(fx);\n-                            let res = crate::common::cton_intcast(fx, from, from_ty, to_ty, true);\n+                            let res = crate::common::cton_intcast(fx, from, fx.cton_type(to_ty).unwrap(), true);\n                             lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n                         }\n                         (TypeVariants::TyFloat(from_flt), TypeVariants::TyFloat(to_flt)) => {\n@@ -516,7 +516,7 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n                 layout::Int(_, signed) => signed,\n                 _ => false,\n             };\n-            let val = cton_intcast(fx, lldiscr, discr_ty, dest_layout.ty, signed);\n+            let val = cton_intcast(fx, lldiscr, fx.cton_type(dest_layout.ty).unwrap(), signed);\n             return CValue::ByVal(val, dest_layout);\n         }\n         layout::Variants::NicheFilling {\n@@ -552,7 +552,7 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n                     lldiscr,\n                     *niche_variants.end() as u64 as i64,\n                 );\n-                let if_true = cton_intcast(fx, lldiscr, discr_ty, dest_layout.ty, false);\n+                let if_true = cton_intcast(fx, lldiscr, fx.cton_type(dest_layout.ty).unwrap(), false);\n                 let if_false = fx\n                     .bcx\n                     .ins()\n@@ -565,25 +565,33 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n }\n \n macro_rules! binop_match {\n-    (@single $fx:expr, $bug_fmt:expr, $var:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, bug) => {\n+    (@single $fx:expr, $bug_fmt:expr, $var:expr, $signed:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, bug) => {\n         bug!(\"binop {} on {} lhs: {:?} rhs: {:?}\", stringify!($var), $bug_fmt, $lhs, $rhs)\n     };\n-    (@single $fx:expr, $bug_fmt:expr, $var:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, icmp($cc:ident)) => {{\n+    (@single $fx:expr, $bug_fmt:expr, $var:expr, $signed:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, icmp($cc:ident)) => {{\n         assert_eq!($fx.tcx.types.bool, $ret_ty);\n         let ret_layout = $fx.layout_of($ret_ty);\n-        let b = $fx.bcx.ins().icmp(IntCC::$cc, $lhs, $rhs);\n+\n+        // TODO HACK no encoding for icmp.i8\n+        use crate::common::cton_intcast;\n+        let (lhs, rhs) = (\n+            cton_intcast($fx, $lhs, types::I64, $signed),\n+            cton_intcast($fx, $rhs, types::I64, $signed),\n+        );\n+        let b = $fx.bcx.ins().icmp(IntCC::$cc, lhs, rhs);\n+\n         CValue::ByVal($fx.bcx.ins().bint(types::I8, b), ret_layout)\n     }};\n-    (@single $fx:expr, $bug_fmt:expr, $var:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, fcmp($cc:ident)) => {{\n+    (@single $fx:expr, $bug_fmt:expr, $var:expr, $signed:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, fcmp($cc:ident)) => {{\n         assert_eq!($fx.tcx.types.bool, $ret_ty);\n         let ret_layout = $fx.layout_of($ret_ty);\n         let b = $fx.bcx.ins().fcmp(FloatCC::$cc, $lhs, $rhs);\n         CValue::ByVal($fx.bcx.ins().bint(types::I8, b), ret_layout)\n     }};\n-    (@single $fx:expr, $bug_fmt:expr, $var:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, custom(|| $body:expr)) => {{\n+    (@single $fx:expr, $bug_fmt:expr, $var:expr, $signed:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, custom(|| $body:expr)) => {{\n         $body\n     }};\n-    (@single $fx:expr, $bug_fmt:expr, $var:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, $name:ident) => {{\n+    (@single $fx:expr, $bug_fmt:expr, $var:expr, $signed:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, $name:ident) => {{\n         let ret_layout = $fx.layout_of($ret_ty);\n         CValue::ByVal($fx.bcx.ins().$name($lhs, $rhs), ret_layout)\n     }};\n@@ -597,7 +605,7 @@ macro_rules! binop_match {\n         let rhs = $rhs.load_value($fx);\n         match ($bin_op, $signed) {\n             $(\n-                (BinOp::$var, $sign) => binop_match!(@single $fx, $bug_fmt, $var, lhs, rhs, $ret_ty, $name $( ( $($next)* ) )?),\n+                (BinOp::$var, $sign) => binop_match!(@single $fx, $bug_fmt, $var, $signed, lhs, rhs, $ret_ty, $name $( ( $($next)* ) )?),\n             )*\n         }\n     }}"}, {"sha": "dc9023eda4f39963ce6b87352910a051c4ca963a", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b10e6e613270f98d39892ab6afcce6e8992765a/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b10e6e613270f98d39892ab6afcce6e8992765a/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=4b10e6e613270f98d39892ab6afcce6e8992765a", "patch": "@@ -331,12 +331,10 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n pub fn cton_intcast<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx>,\n     val: Value,\n-    from: Ty<'tcx>,\n-    to: Ty<'tcx>,\n+    to: Type,\n     signed: bool,\n ) -> Value {\n-    let from = fx.cton_type(from).unwrap();\n-    let to = fx.cton_type(to).unwrap();\n+    let from = fx.bcx.func.dfg.value_type(val);\n     if from == to {\n         return val;\n     }"}]}