{"sha": "f4075e9467ef704d7f8cd120669faec455eb84f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MDc1ZTk0NjdlZjcwNGQ3ZjhjZDEyMDY2OWZhZWM0NTVlYjg0Zjk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-19T10:18:54Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-21T23:01:01Z"}, "message": "Use `expand_mac_invoc` in `expand_pat`", "tree": {"sha": "d6f78b89c6fc3c5322997b026e4ee04bc13aa068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6f78b89c6fc3c5322997b026e4ee04bc13aa068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4075e9467ef704d7f8cd120669faec455eb84f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4075e9467ef704d7f8cd120669faec455eb84f9", "html_url": "https://github.com/rust-lang/rust/commit/f4075e9467ef704d7f8cd120669faec455eb84f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4075e9467ef704d7f8cd120669faec455eb84f9/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ee93b73d16ba7909a33f5ae4f729af3ba1a3de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee93b73d16ba7909a33f5ae4f729af3ba1a3de8", "html_url": "https://github.com/rust-lang/rust/commit/8ee93b73d16ba7909a33f5ae4f729af3ba1a3de8"}], "stats": {"total": 78, "additions": 3, "deletions": 75}, "files": [{"sha": "8a5689daca51cb5aa5964d5613898336b703a382", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 75, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/f4075e9467ef704d7f8cd120669faec455eb84f9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4075e9467ef704d7f8cd120669faec455eb84f9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f4075e9467ef704d7f8cd120669faec455eb84f9", "patch": "@@ -750,77 +750,10 @@ fn expand_pat(p: P<ast::Pat>, fld: &mut MacroExpander) -> P<ast::Pat> {\n         PatKind::Mac(_) => {}\n         _ => return noop_fold_pat(p, fld)\n     }\n-    p.map(|ast::Pat {node, span, ..}| {\n-        let (pth, tts) = match node {\n-            PatKind::Mac(mac) => (mac.node.path, mac.node.tts),\n+    p.and_then(|ast::Pat {node, span, ..}| {\n+        match node {\n+            PatKind::Mac(mac) => expand_mac_invoc(mac, span, fld),\n             _ => unreachable!()\n-        };\n-\n-        if pth.segments.len() > 1 {\n-            fld.cx.span_err(pth.span, \"expected macro name without module separators\");\n-            return DummyResult::raw_pat(span);\n-        }\n-        let extname = pth.segments[0].identifier.name;\n-        let marked_after = match fld.cx.syntax_env.find(extname) {\n-            None => {\n-                fld.cx.span_err(pth.span,\n-                                &format!(\"macro undefined: '{}!'\",\n-                                        extname));\n-                // let compilation continue\n-                return DummyResult::raw_pat(span);\n-            }\n-\n-            Some(rc) => match *rc {\n-                NormalTT(ref expander, tt_span, allow_internal_unstable) => {\n-                    fld.cx.bt_push(ExpnInfo {\n-                        call_site: span,\n-                        callee: NameAndSpan {\n-                            format: MacroBang(extname),\n-                            span: tt_span,\n-                            allow_internal_unstable: allow_internal_unstable,\n-                        }\n-                    });\n-\n-                    let fm = fresh_mark();\n-                    let marked_before = mark_tts(&tts[..], fm);\n-                    let mac_span = fld.cx.original_span();\n-                    let pat = expander.expand(fld.cx,\n-                                              mac_span,\n-                                              &marked_before[..]).make_pat();\n-                    let expanded = match pat {\n-                        Some(e) => e,\n-                        None => {\n-                            fld.cx.span_err(\n-                                pth.span,\n-                                &format!(\n-                                    \"non-pattern macro in pattern position: {}\",\n-                                    extname\n-                                    )\n-                            );\n-                            return DummyResult::raw_pat(span);\n-                        }\n-                    };\n-\n-                    // mark after:\n-                    mark_pat(expanded,fm)\n-                }\n-                _ => {\n-                    fld.cx.span_err(span,\n-                                    &format!(\"{}! is not legal in pattern position\",\n-                                            extname));\n-                    return DummyResult::raw_pat(span);\n-                }\n-            }\n-        };\n-\n-        let fully_expanded =\n-            fld.fold_pat(marked_after).node.clone();\n-        fld.cx.bt_pop();\n-\n-        ast::Pat {\n-            id: ast::DUMMY_NODE_ID,\n-            node: fully_expanded,\n-            span: span\n         }\n     })\n }\n@@ -1388,11 +1321,6 @@ fn mark_tts(tts: &[TokenTree], m: Mrk) -> Vec<TokenTree> {\n     noop_fold_tts(tts, &mut Marker{mark:m})\n }\n \n-// apply a given mark to the given pattern. Used following the expansion of a macro.\n-fn mark_pat(pat: P<ast::Pat>, m: Mrk) -> P<ast::Pat> {\n-    Marker{mark:m}.fold_pat(pat)\n-}\n-\n // apply a given mark to the given item. Used following the expansion of a macro.\n fn mark_item(expr: P<ast::Item>, m: Mrk) -> P<ast::Item> {\n     Marker{mark:m}.fold_item(expr)"}]}