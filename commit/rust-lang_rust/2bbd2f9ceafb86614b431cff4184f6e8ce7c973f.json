{"sha": "2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYmQyZjljZWFmYjg2NjE0YjQzMWNmZjQxODRmNmU4Y2U3Yzk3M2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-28T00:42:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-30T14:36:22Z"}, "message": "Remove the def-id from type parameters. Having this def-id was bad for several reasons:\n\n1. Produced more unique types than is necessary. This increases memory consumption.\n2. Linking the type parameter to its definition *seems* like a good idea, but it\n   encourages reliance on the bounds listing.\n3. It made pretty-printing harder and in particular was causing bad error messages\n   when errors occurred before the `TypeParameterDef` entries were fully stored.", "tree": {"sha": "1d1e6de5d56ca1665dc15532228b9036148cbd23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d1e6de5d56ca1665dc15532228b9036148cbd23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "html_url": "https://github.com/rust-lang/rust/commit/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "964a5fabb7e32ac2b53678497a359e6eba2d5261", "url": "https://api.github.com/repos/rust-lang/rust/commits/964a5fabb7e32ac2b53678497a359e6eba2d5261", "html_url": "https://github.com/rust-lang/rust/commit/964a5fabb7e32ac2b53678497a359e6eba2d5261"}], "stats": {"total": 258, "additions": 120, "deletions": 138}, "files": [{"sha": "88c7ccf1b1e36e4860264db404f2d07c29a0bddc", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "patch": "@@ -420,13 +420,13 @@ fn parse_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did) -> Ty<'tcx> {\n         return ty::mk_trait(tcx, trait_ref, bounds);\n       }\n       'p' => {\n-        let did = parse_def(st, TypeParameter, |x,y| conv(x,y));\n-        debug!(\"parsed ty_param: did={}\", did);\n+        assert_eq!(next(st), '[');\n         let index = parse_u32(st);\n         assert_eq!(next(st), '|');\n         let space = parse_param_space(st);\n         assert_eq!(next(st), '|');\n-        return ty::mk_param(tcx, space, index, did);\n+        let name = token::intern(parse_str(st, ']')[]);\n+        return ty::mk_param(tcx, space, index, name);\n       }\n       '~' => return ty::mk_uniq(tcx, parse_ty(st, |x,y| conv(x,y))),\n       '*' => return ty::mk_ptr(tcx, parse_mt(st, |x,y| conv(x,y))),\n@@ -507,7 +507,7 @@ fn parse_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did) -> Ty<'tcx> {\n       'P' => {\n           assert_eq!(next(st), '[');\n           let trait_ref = parse_trait_ref(st, |x,y| conv(x,y));\n-          let name = token::str_to_ident(parse_str(st, ']').as_slice()).name;\n+          let name = token::intern(parse_str(st, ']').as_slice());\n           return ty::mk_projection(tcx, trait_ref, name);\n       }\n       'e' => {"}, {"sha": "30746f51a8fe70dcf5a84e044d488e03c525e3a3", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "patch": "@@ -135,8 +135,8 @@ pub fn enc_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>, t: Ty<'t\n         ty::ty_infer(_) => {\n             cx.diag.handler().bug(\"cannot encode inference variable types\");\n         }\n-        ty::ty_param(ParamTy {space, idx: id, def_id: did}) => {\n-            mywrite!(w, \"p{}|{}|{}|\", (cx.ds)(did), id, space.to_uint())\n+        ty::ty_param(ParamTy {space, idx, name}) => {\n+            mywrite!(w, \"p[{}|{}|{}]\", idx, space.to_uint(), token::get_name(name))\n         }\n         ty::ty_struct(def, substs) => {\n             mywrite!(w, \"a[{}|\", (cx.ds)(def));"}, {"sha": "a9c4f0ddd8c2d8f0924c7e55f71d22dda59c4cc5", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "patch": "@@ -448,7 +448,7 @@ impl tr for def::Def {\n           def::DefAssociatedPath(def::TyParamProvenance::FromParam(did), ident) =>\n               def::DefAssociatedPath(def::TyParamProvenance::FromParam(did.tr(dcx)), ident),\n           def::DefPrimTy(p) => def::DefPrimTy(p),\n-          def::DefTyParam(s, did, v) => def::DefTyParam(s, did.tr(dcx), v),\n+          def::DefTyParam(s, index, def_id, n) => def::DefTyParam(s, index, def_id.tr(dcx), n),\n           def::DefUse(did) => def::DefUse(did.tr(dcx)),\n           def::DefUpvar(nid1, nid2, nid3) => {\n             def::DefUpvar(dcx.tr_id(nid1),"}, {"sha": "59fd41b5d29e3d655fca8263a79e063650e770ec", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "patch": "@@ -39,7 +39,7 @@ pub enum Def {\n     DefAssociatedPath(TyParamProvenance, ast::Ident),\n     DefTrait(ast::DefId),\n     DefPrimTy(ast::PrimTy),\n-    DefTyParam(ParamSpace, ast::DefId, u32),\n+    DefTyParam(ParamSpace, u32, ast::DefId, ast::Name),\n     DefUse(ast::DefId),\n     DefUpvar(ast::NodeId,  // id of closed over local\n              ast::NodeId,  // expr node that creates the closure\n@@ -130,7 +130,7 @@ impl Def {\n             DefFn(id, _) | DefStaticMethod(id, _) | DefMod(id) |\n             DefForeignMod(id) | DefStatic(id, _) |\n             DefVariant(_, id, _) | DefTy(id, _) | DefAssociatedTy(id) |\n-            DefTyParam(_, id, _) | DefUse(id) | DefStruct(id) | DefTrait(id) |\n+            DefTyParam(_, _, id, _) | DefUse(id) | DefStruct(id) | DefTrait(id) |\n             DefMethod(id, _, _) | DefConst(id) |\n             DefAssociatedPath(TyParamProvenance::FromSelf(id), _) |\n             DefAssociatedPath(TyParamProvenance::FromParam(id), _) => {"}, {"sha": "6225a0f3fba18607ce877559b25f347ab1010fa9", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 26, "deletions": 34, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "patch": "@@ -86,7 +86,7 @@ use syntax::ast::{Visibility};\n use syntax::ast_util::{mod, is_local, lit_is_str, local_def, PostExpansionMethod};\n use syntax::attr::{mod, AttrMetaMethods};\n use syntax::codemap::Span;\n-use syntax::parse::token::{mod, InternedString};\n+use syntax::parse::token::{mod, InternedString, special_idents};\n use syntax::{ast, ast_map};\n \n pub type Disr = u64;\n@@ -1079,7 +1079,7 @@ pub type PolyFnSig<'tcx> = Binder<FnSig<'tcx>>;\n pub struct ParamTy {\n     pub space: subst::ParamSpace,\n     pub idx: u32,\n-    pub def_id: DefId\n+    pub name: ast::Name,\n }\n \n /// A [De Bruijn index][dbi] is a standard means of representing\n@@ -2775,17 +2775,19 @@ pub fn mk_infer<'tcx>(cx: &ctxt<'tcx>, it: InferTy) -> Ty<'tcx> {\n     mk_t(cx, ty_infer(it))\n }\n \n-pub fn mk_param<'tcx>(cx: &ctxt<'tcx>, space: subst::ParamSpace,\n-                      n: u32, k: DefId) -> Ty<'tcx> {\n-    mk_t(cx, ty_param(ParamTy { space: space, idx: n, def_id: k }))\n+pub fn mk_param<'tcx>(cx: &ctxt<'tcx>,\n+                      space: subst::ParamSpace,\n+                      index: u32,\n+                      name: ast::Name) -> Ty<'tcx> {\n+    mk_t(cx, ty_param(ParamTy { space: space, idx: index, name: name }))\n }\n \n-pub fn mk_self_type<'tcx>(cx: &ctxt<'tcx>, did: ast::DefId) -> Ty<'tcx> {\n-    mk_param(cx, subst::SelfSpace, 0, did)\n+pub fn mk_self_type<'tcx>(cx: &ctxt<'tcx>) -> Ty<'tcx> {\n+    mk_param(cx, subst::SelfSpace, 0, special_idents::type_self.name)\n }\n \n pub fn mk_param_from_def<'tcx>(cx: &ctxt<'tcx>, def: &TypeParameterDef) -> Ty<'tcx> {\n-    mk_param(cx, def.space, def.index, def.def_id)\n+    mk_param(cx, def.space, def.index, def.name)\n }\n \n pub fn mk_open<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> { mk_t(cx, ty_open(ty)) }\n@@ -2854,21 +2856,21 @@ pub fn fold_ty<'tcx, F>(cx: &ctxt<'tcx>, t0: Ty<'tcx>,\n impl ParamTy {\n     pub fn new(space: subst::ParamSpace,\n                index: u32,\n-               def_id: ast::DefId)\n+               name: ast::Name)\n                -> ParamTy {\n-        ParamTy { space: space, idx: index, def_id: def_id }\n+        ParamTy { space: space, idx: index, name: name }\n     }\n \n-    pub fn for_self(trait_def_id: ast::DefId) -> ParamTy {\n-        ParamTy::new(subst::SelfSpace, 0, trait_def_id)\n+    pub fn for_self() -> ParamTy {\n+        ParamTy::new(subst::SelfSpace, 0, special_idents::type_self.name)\n     }\n \n     pub fn for_def(def: &TypeParameterDef) -> ParamTy {\n-        ParamTy::new(def.space, def.index, def.def_id)\n+        ParamTy::new(def.space, def.index, def.name)\n     }\n \n     pub fn to_ty<'tcx>(self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx> {\n-        ty::mk_param(tcx, self.space, self.idx, self.def_id)\n+        ty::mk_param(tcx, self.space, self.idx, self.name)\n     }\n \n     pub fn is_self(&self) -> bool {\n@@ -6256,8 +6258,9 @@ pub fn hash_crate_independent<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh) -\n                 }\n                 ty_param(p) => {\n                     byte!(20);\n+                    hash!(p.space);\n                     hash!(p.idx);\n-                    did(state, p.def_id);\n+                    hash!(token::get_name(p.name));\n                 }\n                 ty_open(_) => byte!(22),\n                 ty_infer(_) => unreachable!(),\n@@ -6312,17 +6315,11 @@ pub fn construct_parameter_environment<'tcx>(\n \n     // map T => T\n     let mut types = VecPerParamSpace::empty();\n-    for &space in subst::ParamSpace::all().iter() {\n-        push_types_from_defs(tcx, &mut types, space,\n-                             generics.types.get_slice(space));\n-    }\n+    push_types_from_defs(tcx, &mut types, generics.types.as_slice());\n \n     // map bound 'a => free 'a\n     let mut regions = VecPerParamSpace::empty();\n-    for &space in subst::ParamSpace::all().iter() {\n-        push_region_params(&mut regions, space, free_id,\n-                           generics.regions.get_slice(space));\n-    }\n+    push_region_params(&mut regions, free_id, generics.regions.as_slice());\n \n     let free_substs = Substs {\n         types: types,\n@@ -6359,27 +6356,22 @@ pub fn construct_parameter_environment<'tcx>(\n     };\n \n     fn push_region_params(regions: &mut VecPerParamSpace<ty::Region>,\n-                          space: subst::ParamSpace,\n                           free_id: ast::NodeId,\n                           region_params: &[RegionParameterDef])\n     {\n         for r in region_params.iter() {\n-            regions.push(space, ty::free_region_from_def(free_id, r));\n+            regions.push(r.space, ty::free_region_from_def(free_id, r));\n         }\n     }\n \n     fn push_types_from_defs<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                   types: &mut subst::VecPerParamSpace<Ty<'tcx>>,\n-                                  space: subst::ParamSpace,\n                                   defs: &[TypeParameterDef<'tcx>]) {\n-        for (i, def) in defs.iter().enumerate() {\n-            debug!(\"construct_parameter_environment(): push_types_from_defs: \\\n-                    space={} def={} index={}\",\n-                   space,\n-                   def.repr(tcx),\n-                   i);\n-            let ty = ty::mk_param(tcx, space, i as u32, def.def_id);\n-            types.push(space, ty);\n+        for def in defs.iter() {\n+            debug!(\"construct_parameter_environment(): push_types_from_defs: def={}\",\n+                   def.repr(tcx));\n+            let ty = ty::mk_param_from_def(tcx, def);\n+            types.push(def.space, ty);\n         }\n     }\n "}, {"sha": "ee1432bc953de66a82e43c398d270f9ff808e98c", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "patch": "@@ -1328,17 +1328,8 @@ impl<'tcx> Repr<'tcx> for ty::ExplicitSelfCategory {\n }\n \n impl<'tcx> UserString<'tcx> for ParamTy {\n-    fn user_string(&self, tcx: &ctxt) -> String {\n-        let id = self.idx;\n-        let did = self.def_id;\n-        let ident = match tcx.ty_param_defs.borrow().get(&did.node) {\n-            Some(def) => token::get_name(def.name).get().to_string(),\n-\n-            // This can only happen when a type mismatch error happens and\n-            // the actual type has more type parameters than the expected one.\n-            None => format!(\"<generic #{}>\", id),\n-        };\n-        ident\n+    fn user_string(&self, _tcx: &ctxt) -> String {\n+        format!(\"{}\", token::get_name(self.name))\n     }\n }\n "}, {"sha": "52bd096eb83dea2f5b45f0675d02a0ddae1ff6f2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "patch": "@@ -3906,7 +3906,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             // If the def is a ty param, and came from the parent\n                             // item, it's ok\n                             match def {\n-                                DefTyParam(_, did, _) if {\n+                                DefTyParam(_, _, did, _) if {\n                                     self.def_map.borrow().get(&did.node).cloned()\n                                         == Some(DefTyParamBinder(item_id))\n                                 } => {} // ok\n@@ -3959,7 +3959,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             // If the def is a ty param, and came from the parent\n                             // item, it's ok\n                             match def {\n-                                DefTyParam(_, did, _) if {\n+                                DefTyParam(_, _, did, _) if {\n                                     self.def_map.borrow().get(&did.node).cloned()\n                                         == Some(DefTyParamBinder(item_id))\n                                 } => {} // ok\n@@ -4265,8 +4265,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     seen_bindings.insert(name);\n \n                     let def_like = DlDef(DefTyParam(space,\n+                                                    index as u32,\n                                                     local_def(type_parameter.id),\n-                                                    index as u32));\n+                                                    name));\n                     // Associate this type parameter with\n                     // the item that bound it\n                     self.record_def(type_parameter.id,\n@@ -5161,7 +5162,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                           path.span) {\n                 Some((def, last_private)) => {\n                     match def {\n-                        DefTyParam(_, did, _) => {\n+                        DefTyParam(_, _, did, _) => {\n                             let def = DefAssociatedPath(TyParamProvenance::FromParam(did),\n                                                         path.segments.last()\n                                                             .unwrap().identifier);"}, {"sha": "477171051640b8cc70de267f04e935359354b647", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "patch": "@@ -1118,17 +1118,16 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                     def::DefTy(did, _) | def::DefStruct(did) => {\n                         ast_path_to_ty(this, rscope, did, path).ty\n                     }\n-                    def::DefTyParam(space, id, n) => {\n+                    def::DefTyParam(space, index, _, name) => {\n                         check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n-                        ty::mk_param(tcx, space, n, id)\n+                        ty::mk_param(tcx, space, index, name)\n                     }\n-                    def::DefSelfTy(id) => {\n+                    def::DefSelfTy(_) => {\n                         // n.b.: resolve guarantees that the this type only appears in a\n                         // trait, which we rely upon in various places when creating\n                         // substs\n                         check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n-                        let did = ast_util::local_def(id);\n-                        ty::mk_self_type(tcx, did)\n+                        ty::mk_self_type(tcx)\n                     }\n                     def::DefMod(id) => {\n                         tcx.sess.span_fatal(ast_ty.span,"}, {"sha": "139ef010d212424b9ddaa4a7d53ff53669090c97", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "patch": "@@ -5065,7 +5065,7 @@ pub fn type_scheme_for_def<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n       def::DefAssociatedTy(..) |\n       def::DefAssociatedPath(..) |\n       def::DefPrimTy(_) |\n-      def::DefTyParam(..)=> {\n+      def::DefTyParam(..) => {\n         fcx.ccx.tcx.sess.span_bug(sp, \"expected value, found type\");\n       }\n       def::DefMod(..) | def::DefForeignMod(..) => {\n@@ -5635,7 +5635,8 @@ pub fn check_bounds_are_used<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n     fn param<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, n: u32) -> Ty<'tcx> {\n-        ty::mk_param(ccx.tcx, subst::FnSpace, n, local_def(0))\n+        let name = token::intern(format!(\"P{}\", n).as_slice());\n+        ty::mk_param(ccx.tcx, subst::FnSpace, n, name)\n     }\n \n     let tcx = ccx.tcx;"}, {"sha": "d01b79068aa2c17a72bbc973fd4c545e30c976b4", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "patch": "@@ -1848,11 +1848,9 @@ fn param_must_outlive<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n     // well-formed, then, A must be lower-bounded by `'a`, but we\n     // don't know that this holds from first principles.\n     for &(ref r, ref p) in rcx.region_param_pairs.iter() {\n-        debug!(\"param_ty={}/{} p={}/{}\",\n+        debug!(\"param_ty={} p={}\",\n                param_ty.repr(rcx.tcx()),\n-               param_ty.def_id,\n-               p.repr(rcx.tcx()),\n-               p.def_id);\n+               p.repr(rcx.tcx()));\n         if param_ty == *p {\n             param_bounds.push(*r);\n         }"}, {"sha": "1187baa9a9ce950b53e7b7c7b86886abd06e0b17", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "patch": "@@ -349,7 +349,7 @@ fn collect_trait_methods<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                 (*trait_generics).clone());\n \n         let (fty, explicit_self_category) = {\n-            let trait_self_ty = ty::mk_self_type(ccx.tcx, local_def(trait_id));\n+            let trait_self_ty = ty::mk_self_type(ccx.tcx);\n             astconv::ty_of_method(ccx,\n                                   *m_unsafety,\n                                   trait_self_ty,\n@@ -639,10 +639,7 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::Item) {\n                    trait_def.repr(ccx.tcx()));\n \n             for trait_method in trait_methods.iter() {\n-                let self_type = ty::mk_param(ccx.tcx,\n-                                             subst::SelfSpace,\n-                                             0,\n-                                             local_def(it.id));\n+                let self_type = ty::mk_self_type(tcx);\n                 match *trait_method {\n                     ast::RequiredMethod(ref type_method) => {\n                         let rscope = BindingRscope::new();\n@@ -668,8 +665,7 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::Item) {\n             }\n \n             // Run convert_methods on the provided methods.\n-            let untransformed_rcvr_ty = ty::mk_self_type(tcx,\n-                                                         local_def(it.id));\n+            let untransformed_rcvr_ty = ty::mk_self_type(tcx);\n             convert_methods(ccx,\n                             TraitContainer(local_def(it.id)),\n                             trait_methods.iter().filter_map(|m| match *m {\n@@ -834,7 +830,7 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         }\n     };\n \n-    let substs = ccx.tcx.mk_substs(mk_trait_substs(ccx, it.id, generics));\n+    let substs = ccx.tcx.mk_substs(mk_trait_substs(ccx, generics));\n \n     let ty_generics = ty_generics_for_trait(ccx,\n                                             it.id,\n@@ -844,7 +840,7 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n     assert_eq!(mk_item_substs(ccx, &ty_generics), substs);\n \n-    let self_param_ty = ty::ParamTy::for_self(def_id);\n+    let self_param_ty = ty::ParamTy::for_self();\n \n     let bounds = compute_bounds(ccx,\n                                 self_param_ty.to_ty(ccx.tcx),\n@@ -878,7 +874,6 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     return trait_def;\n \n     fn mk_trait_substs<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n-                                 trait_id: ast::NodeId,\n                                  generics: &ast::Generics)\n                                  -> subst::Substs<'tcx>\n     {\n@@ -899,12 +894,11 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                     .iter()\n                     .enumerate()\n                     .map(|(i, def)| ty::mk_param(ccx.tcx, subst::TypeSpace,\n-                                                 i as u32, local_def(def.id)))\n+                                                 i as u32, def.ident.name))\n                     .collect();\n \n         // ...and also create the `Self` parameter.\n-        let self_ty =\n-            ty::mk_param(ccx.tcx, subst::SelfSpace, 0, local_def(trait_id));\n+        let self_ty = ty::mk_self_type(ccx.tcx);\n \n         subst::Substs::new_trait(types, regions, Vec::new(), self_ty)\n     }\n@@ -1311,7 +1305,7 @@ fn get_or_create_type_parameter_def<'tcx,AC>(this: &AC,\n         None => { }\n     }\n \n-    let param_ty = ty::ParamTy::new(space, index, local_def(param.id));\n+    let param_ty = ty::ParamTy::new(space, index, param.ident.name);\n     let bounds = compute_bounds(this,\n                                 param_ty.to_ty(this.tcx()),\n                                 param.bounds[],"}, {"sha": "2914895aa7a73149a8bad14ba900a46a6ad37bbc", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 50, "deletions": 36, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "patch": "@@ -479,8 +479,13 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ConstraintContext<'a, 'tcx> {\n         let did = ast_util::local_def(item.id);\n         let tcx = self.terms_cx.tcx;\n \n+        debug!(\"visit_item item={}\",\n+               item.repr(tcx));\n+\n         match item.node {\n             ast::ItemEnum(ref enum_definition, _) => {\n+                let generics = &ty::lookup_item_type(tcx, did).generics;\n+\n                 // Hack: If we directly call `ty::enum_variants`, it\n                 // annoyingly takes it upon itself to run off and\n                 // evaluate the discriminants eagerly (*grumpy* that's\n@@ -497,17 +502,18 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ConstraintContext<'a, 'tcx> {\n                                                           &**ast_variant,\n                                                           /*discriminant*/ 0);\n                     for arg_ty in variant.args.iter() {\n-                        self.add_constraints_from_ty(*arg_ty, self.covariant);\n+                        self.add_constraints_from_ty(generics, *arg_ty, self.covariant);\n                     }\n                 }\n             }\n \n             ast::ItemStruct(..) => {\n+                let generics = &ty::lookup_item_type(tcx, did).generics;\n                 let struct_fields = ty::lookup_struct_fields(tcx, did);\n                 for field_info in struct_fields.iter() {\n                     assert_eq!(field_info.id.krate, ast::LOCAL_CRATE);\n                     let field_ty = ty::node_id_to_type(tcx, field_info.id.node);\n-                    self.add_constraints_from_ty(field_ty, self.covariant);\n+                    self.add_constraints_from_ty(generics, field_ty, self.covariant);\n                 }\n             }\n \n@@ -516,7 +522,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ConstraintContext<'a, 'tcx> {\n                 for trait_item in trait_items.iter() {\n                     match *trait_item {\n                         ty::MethodTraitItem(ref method) => {\n-                            self.add_constraints_from_sig(&method.fty.sig,\n+                            self.add_constraints_from_sig(&method.generics,\n+                                                          &method.fty.sig,\n                                                           self.covariant);\n                         }\n                         ty::TypeTraitItem(_) => {}\n@@ -713,8 +720,10 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     }\n \n     /// Adds constraints appropriate for an instance of `ty` appearing\n-    /// in a context with ambient variance `variance`\n+    /// in a context with the generics defined in `generics` and\n+    /// ambient variance `variance`\n     fn add_constraints_from_ty(&mut self,\n+                               generics: &ty::Generics<'tcx>,\n                                ty: Ty<'tcx>,\n                                variance: VarianceTermPtr<'a>) {\n         debug!(\"add_constraints_from_ty(ty={})\", ty.repr(self.tcx()));\n@@ -732,80 +741,81 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n \n             ty::ty_rptr(region, ref mt) => {\n                 let contra = self.contravariant(variance);\n-                self.add_constraints_from_region(*region, contra);\n-                self.add_constraints_from_mt(mt, variance);\n+                self.add_constraints_from_region(generics, *region, contra);\n+                self.add_constraints_from_mt(generics, mt, variance);\n             }\n \n             ty::ty_uniq(typ) | ty::ty_vec(typ, _) | ty::ty_open(typ) => {\n-                self.add_constraints_from_ty(typ, variance);\n+                self.add_constraints_from_ty(generics, typ, variance);\n             }\n \n             ty::ty_ptr(ref mt) => {\n-                self.add_constraints_from_mt(mt, variance);\n+                self.add_constraints_from_mt(generics, mt, variance);\n             }\n \n             ty::ty_tup(ref subtys) => {\n                 for &subty in subtys.iter() {\n-                    self.add_constraints_from_ty(subty, variance);\n+                    self.add_constraints_from_ty(generics, subty, variance);\n                 }\n             }\n \n             ty::ty_enum(def_id, substs) |\n             ty::ty_struct(def_id, substs) => {\n                 let item_type = ty::lookup_item_type(self.tcx(), def_id);\n-                let generics = &item_type.generics;\n \n                 // All type parameters on enums and structs should be\n                 // in the TypeSpace.\n-                assert!(generics.types.is_empty_in(subst::SelfSpace));\n-                assert!(generics.types.is_empty_in(subst::FnSpace));\n-                assert!(generics.regions.is_empty_in(subst::SelfSpace));\n-                assert!(generics.regions.is_empty_in(subst::FnSpace));\n+                assert!(item_type.generics.types.is_empty_in(subst::SelfSpace));\n+                assert!(item_type.generics.types.is_empty_in(subst::FnSpace));\n+                assert!(item_type.generics.regions.is_empty_in(subst::SelfSpace));\n+                assert!(item_type.generics.regions.is_empty_in(subst::FnSpace));\n \n                 self.add_constraints_from_substs(\n+                    generics,\n                     def_id,\n-                    generics.types.get_slice(subst::TypeSpace),\n-                    generics.regions.get_slice(subst::TypeSpace),\n+                    item_type.generics.types.get_slice(subst::TypeSpace),\n+                    item_type.generics.regions.get_slice(subst::TypeSpace),\n                     substs,\n                     variance);\n             }\n \n             ty::ty_projection(ref data) => {\n                 let trait_ref = &data.trait_ref;\n                 let trait_def = ty::lookup_trait_def(self.tcx(), trait_ref.def_id);\n-                let generics = &trait_def.generics;\n                 self.add_constraints_from_substs(\n+                    generics,\n                     trait_ref.def_id,\n-                    generics.types.as_slice(),\n-                    generics.regions.as_slice(),\n+                    trait_def.generics.types.as_slice(),\n+                    trait_def.generics.regions.as_slice(),\n                     &trait_ref.substs,\n                     variance);\n             }\n \n             ty::ty_trait(ref data) => {\n                 let trait_ref = data.principal_trait_ref_with_self_ty(self.tcx().types.err);\n                 let trait_def = ty::lookup_trait_def(self.tcx(), trait_ref.def_id());\n-                let generics = &trait_def.generics;\n \n                 // Traits never declare region parameters in the self\n                 // space nor anything in the fn space.\n-                assert!(generics.regions.is_empty_in(subst::SelfSpace));\n-                assert!(generics.types.is_empty_in(subst::FnSpace));\n-                assert!(generics.regions.is_empty_in(subst::FnSpace));\n+                assert!(trait_def.generics.regions.is_empty_in(subst::SelfSpace));\n+                assert!(trait_def.generics.types.is_empty_in(subst::FnSpace));\n+                assert!(trait_def.generics.regions.is_empty_in(subst::FnSpace));\n \n                 // The type `Foo<T+'a>` is contravariant w/r/t `'a`:\n                 let contra = self.contravariant(variance);\n-                self.add_constraints_from_region(data.bounds.region_bound, contra);\n+                self.add_constraints_from_region(generics, data.bounds.region_bound, contra);\n \n                 self.add_constraints_from_substs(\n+                    generics,\n                     trait_ref.def_id(),\n-                    generics.types.get_slice(subst::TypeSpace),\n-                    generics.regions.get_slice(subst::TypeSpace),\n+                    trait_def.generics.types.get_slice(subst::TypeSpace),\n+                    trait_def.generics.regions.get_slice(subst::TypeSpace),\n                     trait_ref.substs(),\n                     variance);\n             }\n \n-            ty::ty_param(ty::ParamTy { ref def_id, .. }) => {\n+            ty::ty_param(ref data) => {\n+                let def_id = generics.types.get(data.space, data.idx).def_id;\n                 assert_eq!(def_id.krate, ast::LOCAL_CRATE);\n                 match self.terms_cx.inferred_map.get(&def_id.node) {\n                     Some(&index) => {\n@@ -826,14 +836,14 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                     ..\n                 }) =>\n             {\n-                self.add_constraints_from_sig(sig, variance);\n+                self.add_constraints_from_sig(generics, sig, variance);\n             }\n \n             ty::ty_closure(box ty::ClosureTy { ref sig,\n                     store: ty::RegionTraitStore(region, _), .. }) => {\n                 let contra = self.contravariant(variance);\n-                self.add_constraints_from_region(region, contra);\n-                self.add_constraints_from_sig(sig, variance);\n+                self.add_constraints_from_region(generics, region, contra);\n+                self.add_constraints_from_sig(generics, sig, variance);\n             }\n \n             ty::ty_infer(..) | ty::ty_err => {\n@@ -849,6 +859,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     /// Adds constraints appropriate for a nominal type (enum, struct,\n     /// object, etc) appearing in a context with ambient variance `variance`\n     fn add_constraints_from_substs(&mut self,\n+                                   generics: &ty::Generics<'tcx>,\n                                    def_id: ast::DefId,\n                                    type_param_defs: &[ty::TypeParameterDef<'tcx>],\n                                    region_param_defs: &[ty::RegionParameterDef],\n@@ -862,7 +873,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                                        p.space, p.index as uint);\n             let variance_i = self.xform(variance, variance_decl);\n             let substs_ty = *substs.types.get(p.space, p.index as uint);\n-            self.add_constraints_from_ty(substs_ty, variance_i);\n+            self.add_constraints_from_ty(generics, substs_ty, variance_i);\n         }\n \n         for p in region_param_defs.iter() {\n@@ -871,27 +882,29 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                                        RegionParam, p.space, p.index as uint);\n             let variance_i = self.xform(variance, variance_decl);\n             let substs_r = *substs.regions().get(p.space, p.index as uint);\n-            self.add_constraints_from_region(substs_r, variance_i);\n+            self.add_constraints_from_region(generics, substs_r, variance_i);\n         }\n     }\n \n     /// Adds constraints appropriate for a function with signature\n     /// `sig` appearing in a context with ambient variance `variance`\n     fn add_constraints_from_sig(&mut self,\n+                                generics: &ty::Generics<'tcx>,\n                                 sig: &ty::PolyFnSig<'tcx>,\n                                 variance: VarianceTermPtr<'a>) {\n         let contra = self.contravariant(variance);\n         for &input in sig.0.inputs.iter() {\n-            self.add_constraints_from_ty(input, contra);\n+            self.add_constraints_from_ty(generics, input, contra);\n         }\n         if let ty::FnConverging(result_type) = sig.0.output {\n-            self.add_constraints_from_ty(result_type, variance);\n+            self.add_constraints_from_ty(generics, result_type, variance);\n         }\n     }\n \n     /// Adds constraints appropriate for a region appearing in a\n     /// context with ambient variance `variance`\n     fn add_constraints_from_region(&mut self,\n+                                   _generics: &ty::Generics<'tcx>,\n                                    region: ty::Region,\n                                    variance: VarianceTermPtr<'a>) {\n         match region {\n@@ -925,16 +938,17 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     /// Adds constraints appropriate for a mutability-type pair\n     /// appearing in a context with ambient variance `variance`\n     fn add_constraints_from_mt(&mut self,\n+                               generics: &ty::Generics<'tcx>,\n                                mt: &ty::mt<'tcx>,\n                                variance: VarianceTermPtr<'a>) {\n         match mt.mutbl {\n             ast::MutMutable => {\n                 let invar = self.invariant(variance);\n-                self.add_constraints_from_ty(mt.ty, invar);\n+                self.add_constraints_from_ty(generics, mt.ty, invar);\n             }\n \n             ast::MutImmutable => {\n-                self.add_constraints_from_ty(mt.ty, variance);\n+                self.add_constraints_from_ty(generics, mt.ty, variance);\n             }\n         }\n     }"}, {"sha": "b4bfaa9afdabe57d7d07d58169ee212adb948472", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "patch": "@@ -34,8 +34,7 @@ use syntax::ast_util::PostExpansionMethod;\n use syntax::attr;\n use syntax::attr::{AttributeMethods, AttrMetaMethods};\n use syntax::codemap::{DUMMY_SP, Pos, Spanned};\n-use syntax::parse::token::InternedString;\n-use syntax::parse::token;\n+use syntax::parse::token::{mod, InternedString, special_idents};\n use syntax::ptr::P;\n \n use rustc_trans::back::link;\n@@ -1200,11 +1199,9 @@ pub enum Type {\n     },\n     // I have no idea how to usefully use this.\n     TyParamBinder(ast::NodeId),\n-    /// For parameterized types, so the consumer of the JSON don't go looking\n-    /// for types which don't exist anywhere.\n-    Generic(ast::DefId),\n-    /// For references to self\n-    Self(ast::DefId),\n+    /// For parameterized types, so the consumer of the JSON don't go\n+    /// looking for types which don't exist anywhere.\n+    Generic(String),\n     /// Primitives are just the fixed-size numeric types (plus int/uint/float), and char.\n     Primitive(PrimitiveType),\n     Closure(Box<ClosureDecl>),\n@@ -1485,13 +1482,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 }\n             }\n \n-            ty::ty_param(ref p) => {\n-                if p.space == subst::SelfSpace {\n-                    Self(p.def_id)\n-                } else {\n-                    Generic(p.def_id)\n-                }\n-            }\n+            ty::ty_param(ref p) => Generic(token::get_name(p.name).to_string()),\n \n             ty::ty_unboxed_closure(..) => Tuple(vec![]), // FIXME(pcwalton)\n \n@@ -2276,7 +2267,9 @@ fn resolve_type(cx: &DocContext,\n     };\n \n     match def {\n-        def::DefSelfTy(i) => return Self(ast_util::local_def(i)),\n+        def::DefSelfTy(..) => {\n+            return Generic(token::get_name(special_idents::type_self.name).to_string());\n+        }\n         def::DefPrimTy(p) => match p {\n             ast::TyStr => return Primitive(Str),\n             ast::TyBool => return Primitive(Bool),\n@@ -2294,7 +2287,7 @@ fn resolve_type(cx: &DocContext,\n             ast::TyFloat(ast::TyF32) => return Primitive(F32),\n             ast::TyFloat(ast::TyF64) => return Primitive(F64),\n         },\n-        def::DefTyParam(_, i, _) => return Generic(i),\n+        def::DefTyParam(_, _, _, n) => return Generic(token::get_name(n).to_string()),\n         def::DefTyParamBinder(i) => return TyParamBinder(i),\n         _ => {}\n     };"}, {"sha": "dc264a5b5aa05526c1edfbc6698c935e62b2598f", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbd2f9ceafb86614b431cff4184f6e8ce7c973f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=2bbd2f9ceafb86614b431cff4184f6e8ce7c973f", "patch": "@@ -435,15 +435,14 @@ impl fmt::Show for clean::Type {\n             clean::TyParamBinder(id) => {\n                 f.write(cache().typarams[ast_util::local_def(id)].as_bytes())\n             }\n-            clean::Generic(did) => {\n-                f.write(cache().typarams[did].as_bytes())\n+            clean::Generic(ref name) => {\n+                f.write(name.as_bytes())\n             }\n             clean::ResolvedPath{ did, ref typarams, ref path } => {\n                 try!(resolved_path(f, did, path, false));\n                 tybounds(f, typarams)\n             }\n             clean::Infer => write!(f, \"_\"),\n-            clean::Self(..) => f.write(\"Self\".as_bytes()),\n             clean::Primitive(prim) => primitive_link(f, prim, prim.to_string()),\n             clean::Closure(ref decl) => {\n                 write!(f, \"{style}{lifetimes}|{args}|{bounds}{arrow}\","}]}