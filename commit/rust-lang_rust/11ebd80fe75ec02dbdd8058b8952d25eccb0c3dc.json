{"sha": "11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZWJkODBmZTc1ZWMwMmRiZGQ4MDU4Yjg5NTJkMjVlY2NiMGMzZGM=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-28T18:39:20Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-28T18:39:20Z"}, "message": "Make incomplete features part of delcaration\n\nThis prevents mistakes where the feature is in the list of incomplete\nfeatures but not actually a feature by making the incompleteness a part\nof the declaration.", "tree": {"sha": "90c1545aedcc496d58758a57c49076d78f775414", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90c1545aedcc496d58758a57c49076d78f775414"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc", "html_url": "https://github.com/rust-lang/rust/commit/11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1abb5bc992f0ab95ec507aa4b4feed12ec5a4450", "url": "https://api.github.com/repos/rust-lang/rust/commits/1abb5bc992f0ab95ec507aa4b4feed12ec5a4450", "html_url": "https://github.com/rust-lang/rust/commit/1abb5bc992f0ab95ec507aa4b4feed12ec5a4450"}], "stats": {"total": 96, "additions": 40, "deletions": 56}, "files": [{"sha": "d0600918c8246af042de0b45a388ee6d4417551c", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 37, "deletions": 43, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc", "patch": "@@ -16,8 +16,14 @@ macro_rules! set {\n }\n \n macro_rules! declare_features {\n+    (__status_to_bool active) => {\n+        false\n+    };\n+    (__status_to_bool incomplete) => {\n+        true\n+    };\n     ($(\n-        $(#[doc = $doc:tt])* (active, $feature:ident, $ver:expr, $issue:expr, $edition:expr),\n+        $(#[doc = $doc:tt])* ($status:ident, $feature:ident, $ver:expr, $issue:expr, $edition:expr),\n     )+) => {\n         /// Represents active features that are currently being implemented or\n         /// currently being considered for addition/removal.\n@@ -67,6 +73,18 @@ macro_rules! declare_features {\n             pub fn unordered_const_ty_params(&self) -> bool {\n                 self.const_generics || self.const_generics_defaults\n             }\n+\n+            /// Some features are known to be incomplete and using them is likely to have\n+            /// unanticipated results, such as compiler crashes. We warn the user about these\n+            /// to alert them.\n+            pub fn incomplete(&self, feature: Symbol) -> bool {\n+                match feature {\n+                    $(\n+                        sym::$feature => declare_features!(__status_to_bool $status),\n+                    )*\n+                    _ => false,\n+                }\n+            }\n         }\n     };\n }\n@@ -305,7 +323,7 @@ declare_features! (\n     (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n \n     /// Allows specialization of implementations (RFC 1210).\n-    (active, specialization, \"1.7.0\", Some(31844), None),\n+    (incomplete, specialization, \"1.7.0\", Some(31844), None),\n \n     /// A minimal, sound subset of specialization intended to be used by the\n     /// standard library until the soundness issues with specialization\n@@ -342,7 +360,7 @@ declare_features! (\n     (active, abi_ptx, \"1.15.0\", Some(38788), None),\n \n     /// Allows the `#[repr(i128)]` attribute for enums.\n-    (active, repr128, \"1.16.0\", Some(56071), None),\n+    (incomplete, repr128, \"1.16.0\", Some(56071), None),\n \n     /// Allows `#[link(kind=\"static-nobundle\"...)]`.\n     (active, static_nobundle, \"1.16.0\", Some(37403), None),\n@@ -384,7 +402,7 @@ declare_features! (\n     (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n \n     /// Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n-    (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n+    (incomplete, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n     /// Allows defining `trait X = A + B;` alias items.\n     (active, trait_alias, \"1.24.0\", Some(41517), None),\n@@ -429,7 +447,7 @@ declare_features! (\n     (active, proc_macro_hygiene, \"1.30.0\", Some(54727), None),\n \n     /// Allows unsized rvalues at arguments and parameters.\n-    (active, unsized_locals, \"1.30.0\", Some(48055), None),\n+    (incomplete, unsized_locals, \"1.30.0\", Some(48055), None),\n \n     /// Allows custom test frameworks with `#![test_runner]` and `#[test_case]`.\n     (active, custom_test_frameworks, \"1.30.0\", Some(50297), None),\n@@ -438,7 +456,7 @@ declare_features! (\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n \n     /// Allows `impl Trait` in bindings (`let`, `const`, `static`).\n-    (active, impl_trait_in_bindings, \"1.30.0\", Some(63065), None),\n+    (incomplete, impl_trait_in_bindings, \"1.30.0\", Some(63065), None),\n \n     /// Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n@@ -450,7 +468,7 @@ declare_features! (\n     (active, ffi_returns_twice, \"1.34.0\", Some(58314), None),\n \n     /// Allows const generic types (e.g. `struct Foo<const N: usize>(...);`).\n-    (active, const_generics, \"1.34.0\", Some(44580), None),\n+    (incomplete, const_generics, \"1.34.0\", Some(44580), None),\n \n     /// Allows using `#[optimize(X)]`.\n     (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n@@ -462,7 +480,7 @@ declare_features! (\n     (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n \n     /// Allows `if/while p && let q = r && ...` chains.\n-    (active, let_chains, \"1.37.0\", Some(53667), None),\n+    (incomplete, let_chains, \"1.37.0\", Some(53667), None),\n \n     /// Allows #[repr(transparent)] on unions (RFC 2645).\n     (active, transparent_unions, \"1.37.0\", Some(60405), None),\n@@ -474,13 +492,13 @@ declare_features! (\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n \n     /// Allows `impl Trait` to be used inside type aliases (RFC 2515).\n-    (active, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n+    (incomplete, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n \n     /// Allows the definition of `const extern fn` and `const unsafe extern fn`.\n     (active, const_extern_fn, \"1.40.0\", Some(64926), None),\n \n     /// Allows the use of raw-dylibs (RFC 2627).\n-    (active, raw_dylib, \"1.40.0\", Some(58713), None),\n+    (incomplete, raw_dylib, \"1.40.0\", Some(58713), None),\n \n     /// Allows making `dyn Trait` well-formed even if `Trait` is not object safe.\n     /// In that case, `dyn Trait: Trait` does not hold. Moreover, coercions and\n@@ -516,10 +534,10 @@ declare_features! (\n     (active, bindings_after_at, \"1.41.0\", Some(65490), None),\n \n     /// Allows `impl const Trait for T` syntax.\n-    (active, const_trait_impl, \"1.42.0\", Some(67792), None),\n+    (incomplete, const_trait_impl, \"1.42.0\", Some(67792), None),\n \n     /// Allows `T: ?const Trait` syntax in bounds.\n-    (active, const_trait_bound_opt_out, \"1.42.0\", Some(67794), None),\n+    (incomplete, const_trait_bound_opt_out, \"1.42.0\", Some(67794), None),\n \n     /// Allows the use of `no_sanitize` attribute.\n     (active, no_sanitize, \"1.42.0\", Some(39699), None),\n@@ -552,16 +570,16 @@ declare_features! (\n     (active, format_args_capture, \"1.46.0\", Some(67984), None),\n \n     /// Lazily evaluate constants. This allows constants to depend on type parameters.\n-    (active, lazy_normalization_consts, \"1.46.0\", Some(72219), None),\n+    (incomplete, lazy_normalization_consts, \"1.46.0\", Some(72219), None),\n \n     /// Allows calling `transmute` in const fn\n     (active, const_fn_transmute, \"1.46.0\", Some(53605), None),\n \n     /// Allows `if let` guard in match arms.\n-    (active, if_let_guard, \"1.47.0\", Some(51114), None),\n+    (incomplete, if_let_guard, \"1.47.0\", Some(51114), None),\n \n     /// Allows non-trivial generic constants which have to be manually propagated upwards.\n-    (active, const_evaluatable_checked, \"1.48.0\", Some(76560), None),\n+    (incomplete, const_evaluatable_checked, \"1.48.0\", Some(76560), None),\n \n     /// Allows basic arithmetic on floating point types in a `const fn`.\n     (active, const_fn_floating_point_arithmetic, \"1.48.0\", Some(57241), None),\n@@ -582,7 +600,7 @@ declare_features! (\n     (active, isa_attribute, \"1.48.0\", Some(74727), None),\n \n     /// Allow anonymous constants from an inline `const` block\n-    (active, inline_const, \"1.49.0\", Some(76001), None),\n+    (incomplete, inline_const, \"1.49.0\", Some(76001), None),\n \n     /// Allows unsized fn parameters.\n     (active, unsized_fn_params, \"1.49.0\", Some(48055), None),\n@@ -594,7 +612,7 @@ declare_features! (\n     (active, cfg_panic, \"1.49.0\", Some(77443), None),\n \n     /// Allows capturing disjoint fields in a closure/generator (RFC 2229).\n-    (active, capture_disjoint_fields, \"1.49.0\", Some(53488), None),\n+    (incomplete, capture_disjoint_fields, \"1.49.0\", Some(53488), None),\n \n     /// Allows const generics to have default values (e.g. `struct Foo<const N: usize = 3>(...);`).\n     (active, const_generics_defaults, \"1.51.0\", Some(44580), None),\n@@ -618,7 +636,7 @@ declare_features! (\n     (active, min_type_alias_impl_trait, \"1.52.0\", Some(63063), None),\n \n     /// Allows associated types in inherent impls.\n-    (active, inherent_associated_types, \"1.52.0\", Some(8995), None),\n+    (incomplete, inherent_associated_types, \"1.52.0\", Some(8995), None),\n \n     // Allows setting the threshold for the `large_assignments` lint.\n     (active, large_assignments, \"1.52.0\", Some(83518), None),\n@@ -661,7 +679,7 @@ declare_features! (\n     (active, native_link_modifiers_as_needed, \"1.53.0\", Some(81490), None),\n \n     /// Allows unnamed fields of struct and union type\n-    (active, unnamed_fields, \"1.53.0\", Some(49804), None),\n+    (incomplete, unnamed_fields, \"1.53.0\", Some(49804), None),\n \n     /// Allows qualified paths in struct expressions, struct patterns and tuple struct patterns.\n     (active, more_qualified_paths, \"1.54.0\", Some(80080), None),\n@@ -671,30 +689,6 @@ declare_features! (\n     // -------------------------------------------------------------------------\n );\n \n-/// Some features are known to be incomplete and using them is likely to have\n-/// unanticipated results, such as compiler crashes. We warn the user about these\n-/// to alert them.\n-pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n-    sym::if_let_guard,\n-    sym::impl_trait_in_bindings,\n-    sym::generic_associated_types,\n-    sym::const_generics,\n-    sym::let_chains,\n-    sym::raw_dylib,\n-    sym::const_evaluatable_checked,\n-    sym::const_trait_impl,\n-    sym::const_trait_bound_opt_out,\n-    sym::lazy_normalization_consts,\n-    sym::specialization,\n-    sym::inline_const,\n-    sym::repr128,\n-    sym::unsized_locals,\n-    sym::capture_disjoint_fields,\n-    sym::inherent_associated_types,\n-    sym::type_alias_impl_trait,\n-    sym::unnamed_fields,\n-];\n-\n /// Some features are not allowed to be used together at the same time, if\n /// the two are present, produce an error.\n ///"}, {"sha": "cf102aa16e0571ffbf89dbbb64ced39c99282ebf", "filename": "compiler/rustc_feature/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Flib.rs?ref=11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc", "patch": "@@ -146,7 +146,7 @@ pub fn find_feature_issue(feature: Symbol, issue: GateIssue) -> Option<NonZeroU3\n }\n \n pub use accepted::ACCEPTED_FEATURES;\n-pub use active::{Features, ACTIVE_FEATURES, INCOMPATIBLE_FEATURES, INCOMPLETE_FEATURES};\n+pub use active::{Features, ACTIVE_FEATURES, INCOMPATIBLE_FEATURES};\n pub use builtin_attrs::{\n     deprecated_attributes, find_gated_cfg, is_builtin_attr_name, AttributeGate, AttributeTemplate,\n     AttributeType, BuiltinAttribute, GatedCfg, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,"}, {"sha": "d7d0c978ca42d61cea5e61be400bfe7a898765c1", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc", "patch": "@@ -2327,7 +2327,7 @@ impl EarlyLintPass for IncompleteFeatures {\n             .iter()\n             .map(|(name, span, _)| (name, span))\n             .chain(features.declared_lib_features.iter().map(|(name, span)| (name, span)))\n-            .filter(|(name, _)| rustc_feature::INCOMPLETE_FEATURES.iter().any(|f| name == &f))\n+            .filter(|(&name, _)| features.incomplete(name))\n             .for_each(|(&name, &span)| {\n                 cx.struct_span_lint(INCOMPLETE_FEATURES, span, |lint| {\n                     let mut builder = lint.build(&format!("}, {"sha": "b3b214a7ce23120976d1ba3de606484e33e9c6e5", "filename": "src/test/ui/feature-gates/rustc_insignificant_dtor.rs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1abb5bc992f0ab95ec507aa4b4feed12ec5a4450/src%2Ftest%2Fui%2Ffeature-gates%2Frustc_insignificant_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1abb5bc992f0ab95ec507aa4b4feed12ec5a4450/src%2Ftest%2Fui%2Ffeature-gates%2Frustc_insignificant_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Frustc_insignificant_dtor.rs?ref=1abb5bc992f0ab95ec507aa4b4feed12ec5a4450", "patch": "@@ -1,2 +0,0 @@\n-#![feature(rustc_insignificant_dtor)] //~ ERROR unknown feature `rustc_insignificant_dtor`\n-fn main() {}"}, {"sha": "560e27e34bc112e32989dfcb189b205c0a8e55cc", "filename": "src/test/ui/feature-gates/rustc_insignificant_dtor.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1abb5bc992f0ab95ec507aa4b4feed12ec5a4450/src%2Ftest%2Fui%2Ffeature-gates%2Frustc_insignificant_dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1abb5bc992f0ab95ec507aa4b4feed12ec5a4450/src%2Ftest%2Fui%2Ffeature-gates%2Frustc_insignificant_dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Frustc_insignificant_dtor.stderr?ref=1abb5bc992f0ab95ec507aa4b4feed12ec5a4450", "patch": "@@ -1,9 +0,0 @@\n-error[E0635]: unknown feature `rustc_insignificant_dtor`\n-  --> $DIR/rustc_insignificant_dtor.rs:1:12\n-   |\n-LL | #![feature(rustc_insignificant_dtor)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0635`."}, {"sha": "338dfd11310aaa0e17d14ac63ef5b115dc00ceff", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=11ebd80fe75ec02dbdd8058b8952d25eccb0c3dc", "patch": "@@ -301,6 +301,7 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n             let mut parts = line.split(',');\n             let level = match parts.next().map(|l| l.trim().trim_start_matches('(')) {\n                 Some(\"active\") => Status::Unstable,\n+                Some(\"incomplete\") => Status::Unstable,\n                 Some(\"removed\") => Status::Removed,\n                 Some(\"accepted\") => Status::Stable,\n                 _ => return None,"}]}