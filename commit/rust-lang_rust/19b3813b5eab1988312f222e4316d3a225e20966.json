{"sha": "19b3813b5eab1988312f222e4316d3a225e20966", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YjM4MTNiNWVhYjE5ODgzMTJmMjIyZTQzMTZkM2EyMjVlMjA5NjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-19T23:02:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-19T23:02:09Z"}, "message": "Auto merge of #67440 - Mark-Simulacrum:rollup-z59a7ky, r=Mark-Simulacrum\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #67253 (Add more delegations to the fmt docs and add doctests)\n - #67281 (add string.insert benchmarks)\n - #67351 (Set release channel on non-dist builders)\n - #67421 (Fix internal documentation typo)\n - #67432 (Fix toolstate history format)\n - #67436 (Correct the todo! stabilization version)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3ec858ec8bd3f7411f1f54b1b3a2c8f5c8fc5543", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ec858ec8bd3f7411f1f54b1b3a2c8f5c8fc5543"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19b3813b5eab1988312f222e4316d3a225e20966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19b3813b5eab1988312f222e4316d3a225e20966", "html_url": "https://github.com/rust-lang/rust/commit/19b3813b5eab1988312f222e4316d3a225e20966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19b3813b5eab1988312f222e4316d3a225e20966/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0de96d37fbcc54978458c18f5067cd9817669bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0de96d37fbcc54978458c18f5067cd9817669bc8", "html_url": "https://github.com/rust-lang/rust/commit/0de96d37fbcc54978458c18f5067cd9817669bc8"}, {"sha": "5f64777e63ad368887df0a9325917ccdbce4d240", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f64777e63ad368887df0a9325917ccdbce4d240", "html_url": "https://github.com/rust-lang/rust/commit/5f64777e63ad368887df0a9325917ccdbce4d240"}], "stats": {"total": 181, "additions": 129, "deletions": 52}, "files": [{"sha": "f0e343ef22ad557f2c6ce2d992819cdd03ec9745", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19b3813b5eab1988312f222e4316d3a225e20966/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b3813b5eab1988312f222e4316d3a225e20966/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=19b3813b5eab1988312f222e4316d3a225e20966", "patch": "@@ -13,13 +13,13 @@ use std::env;\n // Each cycle is 42 days long (6 weeks); the last week is 35..=42 then.\n const BETA_WEEK_START: u64 = 35;\n \n-#[cfg(linux)]\n+#[cfg(target_os = \"linux\")]\n const OS: Option<&str> = Some(\"linux\");\n \n #[cfg(windows)]\n const OS: Option<&str> = Some(\"windows\");\n \n-#[cfg(all(not(linux), not(windows)))]\n+#[cfg(all(not(target_os = \"linux\"), not(windows)))]\n const OS: Option<&str> = None;\n \n type ToolstateData = HashMap<Box<str>, ToolState>;\n@@ -379,7 +379,7 @@ fn change_toolstate(\n     let mut regressed = false;\n     for repo_state in old_toolstate {\n         let tool = &repo_state.tool;\n-        let state = if cfg!(linux) {\n+        let state = if cfg!(target_os = \"linux\") {\n             &repo_state.linux\n         } else if cfg!(windows) {\n             &repo_state.windows\n@@ -413,7 +413,7 @@ fn change_toolstate(\n     let history_path = format!(\"rust-toolstate/history/{}.tsv\", OS.expect(\"linux/windows only\"));\n     let mut file = t!(fs::read_to_string(&history_path));\n     let end_of_first_line = file.find('\\n').unwrap();\n-    file.insert_str(end_of_first_line, &format!(\"{}\\t{}\\n\", commit, toolstate_serialized));\n+    file.insert_str(end_of_first_line, &format!(\"\\n{}\\t{}\", commit, toolstate_serialized));\n     t!(fs::write(&history_path, file));\n }\n "}, {"sha": "73c3a964f53967d2578c5b543c70335b514a43fc", "filename": "src/ci/run.sh", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19b3813b5eab1988312f222e4316d3a225e20966/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/19b3813b5eab1988312f222e4316d3a225e20966/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=19b3813b5eab1988312f222e4316d3a225e20966", "patch": "@@ -44,8 +44,13 @@ fi\n # FIXME: need a scheme for changing this `nightly` value to `beta` and `stable`\n #        either automatically or manually.\n export RUST_RELEASE_CHANNEL=nightly\n+\n+# Always set the release channel for bootstrap; this is normally not important (i.e., only dist\n+# builds would seem to matter) but in practice bootstrap wants to know whether we're targeting\n+# master, beta, or stable with a build to determine whether to run some checks (notably toolstate).\n+RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=$RUST_RELEASE_CHANNEL\"\n+\n if [ \"$DEPLOY$DEPLOY_ALT\" = \"1\" ]; then\n-  RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=$RUST_RELEASE_CHANNEL\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-static-stdcpp\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.remap-debuginfo\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --debuginfo-level-std=1\""}, {"sha": "599c8b1682851a7dc0a6dfbf66b4b969ca078d42", "filename": "src/liballoc/benches/string.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/19b3813b5eab1988312f222e4316d3a225e20966/src%2Fliballoc%2Fbenches%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b3813b5eab1988312f222e4316d3a225e20966/src%2Fliballoc%2Fbenches%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fstring.rs?ref=19b3813b5eab1988312f222e4316d3a225e20966", "patch": "@@ -122,3 +122,43 @@ fn bench_to_string(b: &mut Bencher) {\n              Lorem ipsum dolor sit amet, consectetur. \";\n     b.iter(|| s.to_string())\n }\n+\n+#[bench]\n+fn bench_insert_char_short(b: &mut Bencher) {\n+    let s = \"Hello, World!\";\n+    b.iter(|| {\n+        let mut x = String::from(s);\n+        black_box(&mut x).insert(6, black_box(' '));\n+        x\n+    })\n+}\n+\n+#[bench]\n+fn bench_insert_char_long(b: &mut Bencher) {\n+    let s = \"Hello, World!\";\n+    b.iter(|| {\n+        let mut x = String::from(s);\n+        black_box(&mut x).insert(6, black_box('\u2764'));\n+        x\n+    })\n+}\n+\n+#[bench]\n+fn bench_insert_str_short(b: &mut Bencher) {\n+    let s = \"Hello, World!\";\n+    b.iter(|| {\n+        let mut x = String::from(s);\n+        black_box(&mut x).insert_str(6, black_box(\" \"));\n+        x\n+    })\n+}\n+\n+#[bench]\n+fn bench_insert_str_long(b: &mut Bencher) {\n+    let s = \"Hello, World!\";\n+    b.iter(|| {\n+        let mut x = String::from(s);\n+        black_box(&mut x).insert_str(6, black_box(\" rustic \"));\n+        x\n+    })\n+}"}, {"sha": "793c1f124ed6590e4d0a5f873e9638336bdf6ff6", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 76, "deletions": 44, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/19b3813b5eab1988312f222e4316d3a225e20966/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b3813b5eab1988312f222e4316d3a225e20966/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=19b3813b5eab1988312f222e4316d3a225e20966", "patch": "@@ -63,7 +63,7 @@ pub mod rt {\n ///\n /// let pythagorean_triple = Triangle { a: 3.0, b: 4.0, c: 5.0 };\n ///\n-/// println!(\"{}\", pythagorean_triple);\n+/// assert_eq!(format!(\"{}\", pythagorean_triple), \"(3, 4, 5)\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type Result = result::Result<(), Error>;\n@@ -440,7 +440,7 @@ impl Display for Arguments<'_> {\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// println!(\"The origin is: {:?}\", origin);\n+/// assert_eq!(format!(\"The origin is: {:?}\", origin), \"The origin is: Point { x: 0, y: 0 }\");\n /// ```\n ///\n /// Manually implementing:\n@@ -455,28 +455,25 @@ impl Display for Arguments<'_> {\n ///\n /// impl fmt::Debug for Point {\n ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-///         write!(f, \"Point {{ x: {}, y: {} }}\", self.x, self.y)\n+///         f.debug_struct(\"Point\")\n+///          .field(\"x\", &self.x)\n+///          .field(\"y\", &self.y)\n+///          .finish()\n ///     }\n /// }\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// println!(\"The origin is: {:?}\", origin);\n+/// assert_eq!(format!(\"The origin is: {:?}\", origin), \"The origin is: Point { x: 0, y: 0 }\");\n /// ```\n ///\n-/// This outputs:\n-///\n-/// ```text\n-/// The origin is: Point { x: 0, y: 0 }\n-/// ```\n-///\n-/// There are a number of `debug_*` methods on [`Formatter`] to help you with manual\n-/// implementations, such as [`debug_struct`][debug_struct].\n+/// There are a number of helper methods on the [`Formatter`] struct to help you with manual\n+/// implementations, such as [`debug_struct`].\n ///\n /// `Debug` implementations using either `derive` or the debug builder API\n /// on [`Formatter`] support pretty-printing using the alternate flag: `{:#?}`.\n ///\n-/// [debug_struct]: ../../std/fmt/struct.Formatter.html#method.debug_struct\n+/// [`debug_struct`]: ../../std/fmt/struct.Formatter.html#method.debug_struct\n /// [`Formatter`]: ../../std/fmt/struct.Formatter.html\n ///\n /// Pretty-printing with `#?`:\n@@ -490,17 +487,13 @@ impl Display for Arguments<'_> {\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// println!(\"The origin is: {:#?}\", origin);\n-/// ```\n-///\n-/// This outputs:\n-///\n-/// ```text\n-/// The origin is: Point {\n+/// assert_eq!(format!(\"The origin is: {:#?}\", origin),\n+/// \"The origin is: Point {\n ///     x: 0,\n-///     y: 0\n-/// }\n+///     y: 0,\n+/// }\");\n /// ```\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n     on(\n@@ -528,12 +521,20 @@ pub trait Debug {\n     ///\n     /// impl fmt::Debug for Position {\n     ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"({:?}, {:?})\", self.longitude, self.latitude)\n+    ///         f.debug_tuple(\"\")\n+    ///          .field(&self.longitude)\n+    ///          .field(&self.latitude)\n+    ///          .finish()\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(\"(1.987, 2.983)\".to_owned(),\n-    ///            format!(\"{:?}\", Position { longitude: 1.987, latitude: 2.983, }));\n+    /// let position = Position { longitude: 1.987, latitude: 2.983 };\n+    /// assert_eq!(format!(\"{:?}\", position), \"(1.987, 2.983)\");\n+    ///\n+    /// assert_eq!(format!(\"{:#?}\", position), \"(\n+    ///     1.987,\n+    ///     2.983,\n+    /// )\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n@@ -584,7 +585,7 @@ pub use macros::Debug;\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// println!(\"The origin is: {}\", origin);\n+/// assert_eq!(format!(\"The origin is: {}\", origin), \"The origin is: (0, 0)\");\n /// ```\n #[rustc_on_unimplemented(\n     on(\n@@ -618,7 +619,7 @@ pub trait Display {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(\"(1.987, 2.983)\".to_owned(),\n+    /// assert_eq!(\"(1.987, 2.983)\",\n     ///            format!(\"{}\", Position { longitude: 1.987, latitude: 2.983, }));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -668,7 +669,9 @@ pub trait Display {\n ///\n /// let l = Length(9);\n ///\n-/// println!(\"l as octal is: {:o}\", l);\n+/// assert_eq!(format!(\"l as octal is: {:o}\", l), \"l as octal is: 11\");\n+///\n+/// assert_eq!(format!(\"l as octal is: {:#06o}\", l), \"l as octal is: 0o0011\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Octal {\n@@ -718,7 +721,12 @@ pub trait Octal {\n ///\n /// let l = Length(107);\n ///\n-/// println!(\"l as binary is: {:b}\", l);\n+/// assert_eq!(format!(\"l as binary is: {:b}\", l), \"l as binary is: 1101011\");\n+///\n+/// assert_eq!(\n+///     format!(\"l as binary is: {:#032b}\", l),\n+///     \"l as binary is: 0b000000000000000000000001101011\"\n+/// );\n /// ```\n ///\n /// [module]: ../../std/fmt/index.html\n@@ -777,7 +785,9 @@ pub trait Binary {\n ///\n /// let l = Length(9);\n ///\n-/// println!(\"l as hex is: {:x}\", l);\n+/// assert_eq!(format!(\"l as hex is: {:x}\", l), \"l as hex is: 9\");\n+///\n+/// assert_eq!(format!(\"l as hex is: {:#010x}\", l), \"l as hex is: 0x00000009\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait LowerHex {\n@@ -828,9 +838,11 @@ pub trait LowerHex {\n ///     }\n /// }\n ///\n-/// let l = Length(9);\n+/// let l = Length(i32::max_value());\n ///\n-/// println!(\"l as hex is: {:X}\", l);\n+/// assert_eq!(format!(\"l as hex is: {:X}\", l), \"l as hex is: 7FFFFFFF\");\n+///\n+/// assert_eq!(format!(\"l as hex is: {:#010X}\", l), \"l as hex is: 0x7FFFFFFF\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait UpperHex {\n@@ -877,6 +889,10 @@ pub trait UpperHex {\n /// let l = Length(42);\n ///\n /// println!(\"l is in memory here: {:p}\", l);\n+///\n+/// let l_ptr = format!(\"{:018p}\", l);\n+/// assert_eq!(l_ptr.len(), 18);\n+/// assert_eq!(&l_ptr[..2], \"0x\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Pointer {\n@@ -912,14 +928,22 @@ pub trait Pointer {\n ///\n /// impl fmt::LowerExp for Length {\n ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-///         let val = self.0;\n-///         write!(f, \"{}e1\", val / 10)\n+///         let val = f64::from(self.0);\n+///         fmt::LowerExp::fmt(&val, f) // delegate to f64's implementation\n ///     }\n /// }\n ///\n /// let l = Length(100);\n ///\n-/// println!(\"l in scientific notation is: {:e}\", l);\n+/// assert_eq!(\n+///     format!(\"l in scientific notation is: {:e}\", l),\n+///     \"l in scientific notation is: 1e2\"\n+/// );\n+///\n+/// assert_eq!(\n+///     format!(\"l in scientific notation is: {:05e}\", l),\n+///     \"l in scientific notation is: 001e2\"\n+/// );\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait LowerExp {\n@@ -955,14 +979,22 @@ pub trait LowerExp {\n ///\n /// impl fmt::UpperExp for Length {\n ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-///         let val = self.0;\n-///         write!(f, \"{}E1\", val / 10)\n+///         let val = f64::from(self.0);\n+///         fmt::UpperExp::fmt(&val, f) // delegate to f64's implementation\n ///     }\n /// }\n ///\n /// let l = Length(100);\n ///\n-/// println!(\"l in scientific notation is: {:E}\", l);\n+/// assert_eq!(\n+///     format!(\"l in scientific notation is: {:E}\", l),\n+///     \"l in scientific notation is: 1E2\"\n+/// );\n+///\n+/// assert_eq!(\n+///     format!(\"l in scientific notation is: {:05E}\", l),\n+///     \"l in scientific notation is: 001E2\"\n+/// );\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait UpperExp {\n@@ -1807,8 +1839,7 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// // prints \"[10, 11]\"\n-    /// println!(\"{:?}\", Foo(vec![10, 11]));\n+    /// assert_eq!(format!(\"{:?}\", Foo(vec![10, 11])), \"[10, 11]\");\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn debug_list<'b>(&'b mut self) -> DebugList<'b, 'a> {\n@@ -1831,8 +1862,7 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// // prints \"{10, 11}\"\n-    /// println!(\"{:?}\", Foo(vec![10, 11]));\n+    /// assert_eq!(format!(\"{:?}\", Foo(vec![10, 11])), \"{10, 11}\");\n     /// ```\n     ///\n     /// [`format_args!`]: ../../std/macro.format_args.html\n@@ -1890,8 +1920,10 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// // prints \"{\"A\": 10, \"B\": 11}\"\n-    /// println!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)]));\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\",  Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n+    ///     r#\"{\"A\": 10, \"B\": 11}\"#\n+    ///  );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn debug_map<'b>(&'b mut self) -> DebugMap<'b, 'a> {"}, {"sha": "dd06da7a6d23e76e4764a7f625bfde14c48cc8ef", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b3813b5eab1988312f222e4316d3a225e20966/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b3813b5eab1988312f222e4316d3a225e20966/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=19b3813b5eab1988312f222e4316d3a225e20966", "patch": "@@ -686,7 +686,7 @@ macro_rules! unimplemented {\n /// }\n /// ```\n #[macro_export]\n-#[stable(feature = \"todo_macro\", since = \"1.39.0\")]\n+#[stable(feature = \"todo_macro\", since = \"1.40.0\")]\n macro_rules! todo {\n     () => (panic!(\"not yet implemented\"));\n     ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+)));"}, {"sha": "2365fc3ee2e4d2b7be2d2febb6b2ce7e91ed5770", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b3813b5eab1988312f222e4316d3a225e20966/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b3813b5eab1988312f222e4316d3a225e20966/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=19b3813b5eab1988312f222e4316d3a225e20966", "patch": "@@ -25,7 +25,7 @@ use syntax_pos::edition;\n pub type Result<T> = result::Result<T, ErrorReported>;\n \n /// Represents a compiler session.\n-/// Can be used run `rustc_interface` queries.\n+/// Can be used to run `rustc_interface` queries.\n /// Created by passing `Config` to `run_compiler`.\n pub struct Compiler {\n     pub(crate) sess: Lrc<Session>,"}, {"sha": "9930b8f63af5bdaba26be1835b053115c859ab73", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b3813b5eab1988312f222e4316d3a225e20966/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b3813b5eab1988312f222e4316d3a225e20966/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=19b3813b5eab1988312f222e4316d3a225e20966", "patch": "@@ -524,8 +524,8 @@ pub use core::{\n     unreachable,\n     write,\n     writeln,\n-    // Unstable\n     todo,\n+    // Unstable\n     matches,\n };\n "}]}