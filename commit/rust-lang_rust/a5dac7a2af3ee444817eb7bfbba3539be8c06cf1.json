{"sha": "a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZGFjN2EyYWYzZWU0NDQ4MTdlYjdiZmJiYTM1MzliZThjMDZjZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-04T15:29:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-04T15:29:41Z"}, "message": "Auto merge of #36874 - japaric:thumbs, r=alexcrichton\n\nadd Thumbs to the compiler\n\nthis commit adds 4 new target definitions to the compiler for easier\ncross compilation to ARM Cortex-M devices.\n\n- `thumbv6m-none-eabi`\n  - For the Cortex-M0, Cortex-M0+ and Cortex-M1\n  - This architecture doesn't have hardware support (instructions) for\n    atomics. Hence, the `Atomic*` structs are not available for this\n    target.\n- `thumbv7m-none-eabi`\n  - For the Cortex-M3\n- `thumbv7em-none-eabi`\n  - For the FPU-less variants of the Cortex-M4 and Cortex-M7\n  - On this target, all the floating point operations will be lowered\n    software routines (intrinsics)\n- `thumbv7em-none-eabihf`\n  - For the variants of the Cortex-M4 and Cortex-M7 that do have a FPU.\n  - On this target, all the floating point operations will be lowered\n    to hardware instructions\n\nNo binary releases of standard crates, like `core`, are planned for\nthese targets because Cargo, in the future, will compile e.g. the `core`\ncrate on the fly as part of the `cargo build` process. In the meantime,\nyou'll have to compile the `core` crate yourself. [Xargo] is the easiest\nway to do that as in handles the compilation of `core` automatically and\ncan be used just like Cargo: `xargo build --target thumbv6m-none-eabi`\nis all that's needed.\n\n[Xargo]: https://crates.io/crates/xargo\n\n---\n\ncc @brson @alexcrichton", "tree": {"sha": "b6505ae6342fe65dc6f9ab2778572419e41eb7e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6505ae6342fe65dc6f9ab2778572419e41eb7e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "html_url": "https://github.com/rust-lang/rust/commit/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a9af010ebc728bc4798b1ba30de0322c1f0138a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a9af010ebc728bc4798b1ba30de0322c1f0138a", "html_url": "https://github.com/rust-lang/rust/commit/4a9af010ebc728bc4798b1ba30de0322c1f0138a"}, {"sha": "6136069609f40e2436d810d4a35433d42266fadc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6136069609f40e2436d810d4a35433d42266fadc", "html_url": "https://github.com/rust-lang/rust/commit/6136069609f40e2436d810d4a35433d42266fadc"}], "stats": {"total": 356, "additions": 291, "deletions": 65}, "files": [{"sha": "07e1b70e0ec1096b2bb7b9e2b64daadbc650dda7", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -933,7 +933,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     let os = &sess.target.target.target_os;\n     let env = &sess.target.target.target_env;\n     let vendor = &sess.target.target.target_vendor;\n-    let max_atomic_width = sess.target.target.options.max_atomic_width;\n+    let max_atomic_width = sess.target.target.max_atomic_width();\n \n     let fam = if let Some(ref fam) = sess.target.target.options.target_family {\n         intern(fam)"}, {"sha": "0d85d1ad90ad05555acd70919e9ae307602be262", "filename": "src/librustc_back/target/aarch64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+cyclone\".to_string(),\n             eliminate_frame_pointer: false,\n-            max_atomic_width: 128,\n+            max_atomic_width: Some(128),\n             .. base\n         },\n     })"}, {"sha": "8440ed1c4d19822e9850b3d431887ae4385644c0", "filename": "src/librustc_back/target/aarch64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -12,7 +12,7 @@ use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n-    base.max_atomic_width = 128;\n+    base.max_atomic_width = Some(128);\n     // As documented in http://developer.android.com/ndk/guides/cpu-features.html\n     // the neon (ASIMD) and FP must exist on all android aarch64 targets.\n     base.features = \"+neon,+fp-armv8\".to_string();"}, {"sha": "bb5376ff3ef0459134afc2a140625d758fce0fca", "filename": "src/librustc_back/target/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -12,7 +12,7 @@ use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n-    base.max_atomic_width = 128;\n+    base.max_atomic_width = Some(128);\n     Ok(Target {\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "e1906610441f1ca5cdae6fe7ca1e430b92066bd8", "filename": "src/librustc_back/target/arm_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n     base.features = \"+v7,+vfp3,+d16\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n \n     Ok(Target {\n         llvm_target: \"arm-linux-androideabi\".to_string(),"}, {"sha": "7c6da341da6320d9d9c6257d3847b560be0991e3", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -12,7 +12,7 @@ use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     Ok(Target {\n         llvm_target: \"arm-unknown-linux-gnueabi\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "45f8f722059e26877f1a5599988ed84dabc3c5c2", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -12,7 +12,7 @@ use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     Ok(Target {\n         llvm_target: \"arm-unknown-linux-gnueabihf\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "547afb3e8e580dd12a83f2bc79320926f63a1658", "filename": "src/librustc_back/target/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n     // Most of these settings are copied from the arm_unknown_linux_gnueabi\n     // target.\n     base.features = \"+v6\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     Ok(Target {\n         // It's important we use \"gnueabi\" and not \"musleabi\" here. LLVM uses it\n         // to determine the calling convention and float ABI, and it doesn't"}, {"sha": "7e9996dea983c6736ea43d1e3a2b79d8c9053c48", "filename": "src/librustc_back/target/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n     // Most of these settings are copied from the arm_unknown_linux_gnueabihf\n     // target.\n     base.features = \"+v6,+vfp2\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     Ok(Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and it"}, {"sha": "2bef25327a43847d279bae5e107f4847fb789f7b", "filename": "src/librustc_back/target/armv7_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n         target_vendor: \"apple\".to_string(),\n         options: TargetOptions {\n             features: \"+v7,+vfp3,+neon\".to_string(),\n-            max_atomic_width: 64,\n+            max_atomic_width: Some(64),\n             .. base\n         }\n     })"}, {"sha": "21ad18223dbc7f665c975d9edec6ba12508d734c", "filename": "src/librustc_back/target/armv7_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n     base.features = \"+v7,+thumb2,+vfp3,+d16\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n \n     Ok(Target {\n         llvm_target: \"armv7-none-linux-android\".to_string(),"}, {"sha": "1abf8b0b69a2ac6a9f3b997b13058e1e9e0ccbaf", "filename": "src/librustc_back/target/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_gnueabihf.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n             features: \"+v7,+vfp3,+d16,+thumb2\".to_string(),\n             cpu: \"generic\".to_string(),\n-            max_atomic_width: 64,\n+            max_atomic_width: Some(64),\n             .. base\n         }\n     })"}, {"sha": "efed7963c95e610222e6a002a03d08378eb48fc0", "filename": "src/librustc_back/target/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n     // target.\n     base.features = \"+v7,+vfp3,+neon\".to_string();\n     base.cpu = \"cortex-a8\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     Ok(Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and LLVM"}, {"sha": "0b3ebf1294bd0785d9bec99f45ab1e2c7a4c1966", "filename": "src/librustc_back/target/armv7s_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n         target_vendor: \"apple\".to_string(),\n         options: TargetOptions {\n             features: \"+v7,+vfp4,+neon\".to_string(),\n-            max_atomic_width: 64,\n+            max_atomic_width: Some(64),\n             .. base\n         }\n     })"}, {"sha": "d86a9b093272e9b78b93e7b976f7fb4a84d483fe", "filename": "src/librustc_back/target/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> Result<Target, String> {\n         linker_is_gnu: true,\n         allow_asm: false,\n         obj_is_bitcode: true,\n-        max_atomic_width: 32,\n+        max_atomic_width: Some(32),\n         post_link_args: vec![\"-s\".to_string(), \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()],\n         .. Default::default()\n     };"}, {"sha": "319ada4f8e17c11b05f56aa50fdebd75c805aca2", "filename": "src/librustc_back/target/i386_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n         target_env: \"\".to_string(),\n         target_vendor: \"apple\".to_string(),\n         options: TargetOptions {\n-            max_atomic_width: 64,\n+            max_atomic_width: Some(64),\n             .. base\n         }\n     })"}, {"sha": "d3b09d9a0f1121354a76ce92cb56194e27b0b031", "filename": "src/librustc_back/target/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::apple_base::opts();\n     base.cpu = \"yonah\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     base.pre_link_args.push(\"-m32\".to_string());\n \n     Ok(Target {"}, {"sha": "a2c007d49696021d50c5b6a7164b1d1b0a235ca6", "filename": "src/librustc_back/target/i686_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_linux_android.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n \n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n \n     // http://developer.android.com/ndk/guides/abis.html#x86\n     base.cpu = \"pentiumpro\".to_string();"}, {"sha": "0c2c5433e6c41c2515de68e9a0bbbe5ac35b1ef0", "filename": "src/librustc_back/target/i686_pc_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::windows_base::opts();\n     base.cpu = \"pentium4\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n \n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n     // space available to x86 Windows binaries on x86_64."}, {"sha": "2290d2057f13076f28ae40ba66e9a9bbaeceaf3e", "filename": "src/librustc_back/target/i686_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_msvc.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();\n     base.cpu = \"pentium4\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n \n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n     // space available to x86 Windows binaries on x86_64."}, {"sha": "d8f8431e66e7fa51b3937a8ced9dfedb78d09c3f", "filename": "src/librustc_back/target/i686_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::dragonfly_base::opts();\n     base.cpu = \"pentium4\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     base.pre_link_args.push(\"-m32\".to_string());\n \n     Ok(Target {"}, {"sha": "ddbc74f25c9cdd9533283ea759a040239b808a26", "filename": "src/librustc_back/target/i686_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"pentium4\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     base.pre_link_args.push(\"-m32\".to_string());\n \n     Ok(Target {"}, {"sha": "9078206c9e069cf3b98ee93c19626d217299d0c3", "filename": "src/librustc_back/target/i686_unknown_haiku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_haiku.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::haiku_base::opts();\n     base.cpu = \"pentium4\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     base.pre_link_args.push(\"-m32\".to_string());\n \n     Ok(Target {"}, {"sha": "bf9c28b0c10e5ada26c1c2b13462aab4aeb4ff07", "filename": "src/librustc_back/target/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"pentium4\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     base.pre_link_args.push(\"-m32\".to_string());\n \n     Ok(Target {"}, {"sha": "3d563fa6e5d97ece067ba6f547af8b33c80e9467", "filename": "src/librustc_back/target/i686_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_musl.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"pentium4\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     base.pre_link_args.push(\"-m32\".to_string());\n     base.pre_link_args.push(\"-Wl,-melf_i386\".to_string());\n "}, {"sha": "a98a33feb5e9dba38ff557a8bcbf38799e7c14e9", "filename": "src/librustc_back/target/le32_unknown_nacl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n         exe_suffix: \".pexe\".to_string(),\n         linker_is_gnu: true,\n         allow_asm: false,\n-        max_atomic_width: 32,\n+        max_atomic_width: Some(32),\n         .. Default::default()\n     };\n     Ok(Target {"}, {"sha": "9f0b6fcc4364c6c6b3ac3f9bdfba1740fcf3c2b5", "filename": "src/librustc_back/target/mips64_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips64_unknown_linux_gnuabi64.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n             // NOTE(mips64r2) matches C toolchain\n             cpu: \"mips64r2\".to_string(),\n             features: \"+mips64r2\".to_string(),\n-            max_atomic_width: 64,\n+            max_atomic_width: Some(64),\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "9c4531c5b2124e185253edbe0246a053a5e24412", "filename": "src/librustc_back/target/mips64el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmips64el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmips64el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips64el_unknown_linux_gnuabi64.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n             // NOTE(mips64r2) matches C toolchain\n             cpu: \"mips64r2\".to_string(),\n             features: \"+mips64r2\".to_string(),\n-            max_atomic_width: 64,\n+            max_atomic_width: Some(64),\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "e744dce2bb4a1f8cfc3f4f10bb2c41e346a123cb", "filename": "src/librustc_back/target/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2\".to_string(),\n-            max_atomic_width: 32,\n+            max_atomic_width: Some(32),\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "4254c1b83e3199c383947574a72cf5f54d41fc28", "filename": "src/librustc_back/target/mips_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_musl.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float\".to_string(),\n-            max_atomic_width: 32,\n+            max_atomic_width: Some(32),\n             ..super::linux_base::opts()\n         }\n     })"}, {"sha": "e6b2672a8e393bf47d500ecb863f4a8c78ccab2d", "filename": "src/librustc_back/target/mips_unknown_linux_uclibc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_uclibc.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float\".to_string(),\n-            max_atomic_width: 32,\n+            max_atomic_width: Some(32),\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "4949055861e57a74699cf89f0dca533620ba0d36", "filename": "src/librustc_back/target/mipsel_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             cpu: \"mips32\".to_string(),\n             features: \"+mips32\".to_string(),\n-            max_atomic_width: 32,\n+            max_atomic_width: Some(32),\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "f282ac7e88b889f0e67051cc0016ce65431069ca", "filename": "src/librustc_back/target/mipsel_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_musl.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             cpu: \"mips32\".to_string(),\n             features: \"+mips32,+soft-float\".to_string(),\n-            max_atomic_width: 32,\n+            max_atomic_width: Some(32),\n             ..super::linux_base::opts()\n         }\n     })"}, {"sha": "0f9b562068f51ce63bd6320e5a2eeb113fc33f46", "filename": "src/librustc_back/target/mipsel_unknown_linux_uclibc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_uclibc.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             cpu: \"mips32\".to_string(),\n             features: \"+mips32,+soft-float\".to_string(),\n-            max_atomic_width: 32,\n+            max_atomic_width: Some(32),\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "1843fc581f1c231b47f7fd60842315539dd000c7", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -66,11 +66,12 @@ mod netbsd_base;\n mod solaris_base;\n mod windows_base;\n mod windows_msvc_base;\n+mod thumb_base;\n \n pub type TargetResult = Result<Target, String>;\n \n macro_rules! supported_targets {\n-    ( $(($triple:expr, $module:ident)),+ ) => (\n+    ( $(($triple:expr, $module:ident),)+ ) => (\n         $(mod $module;)*\n \n         /// List of supported targets\n@@ -191,7 +192,12 @@ supported_targets! {\n \n     (\"le32-unknown-nacl\", le32_unknown_nacl),\n     (\"asmjs-unknown-emscripten\", asmjs_unknown_emscripten),\n-    (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten)\n+    (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten),\n+\n+    (\"thumbv6m-none-eabi\", thumbv6m_none_eabi),\n+    (\"thumbv7m-none-eabi\", thumbv7m_none_eabi),\n+    (\"thumbv7em-none-eabi\", thumbv7em_none_eabi),\n+    (\"thumbv7em-none-eabihf\", thumbv7em_none_eabihf),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target.\n@@ -347,9 +353,8 @@ pub struct TargetOptions {\n     // will 'just work'.\n     pub obj_is_bitcode: bool,\n \n-    /// Maximum integer size in bits that this target can perform atomic\n-    /// operations on.\n-    pub max_atomic_width: u64,\n+    /// Don't use this field; instead use the `.max_atomic_width()` method.\n+    pub max_atomic_width: Option<u64>,\n \n     /// Panic strategy: \"unwind\" or \"abort\"\n     pub panic_strategy: PanicStrategy,\n@@ -401,7 +406,7 @@ impl Default for TargetOptions {\n             allow_asm: true,\n             has_elf_tls: false,\n             obj_is_bitcode: false,\n-            max_atomic_width: 0,\n+            max_atomic_width: None,\n             panic_strategy: PanicStrategy::Unwind,\n         }\n     }\n@@ -422,6 +427,12 @@ impl Target {\n         }\n     }\n \n+    /// Maximum integer size in bits that this target can perform atomic\n+    /// operations on.\n+    pub fn max_atomic_width(&self) -> u64 {\n+        self.options.max_atomic_width.unwrap_or(self.target_pointer_width.parse().unwrap())\n+    }\n+\n     /// Load a target descriptor from a JSON object.\n     pub fn from_json(obj: Json) -> TargetResult {\n         // While ugly, this code must remain this way to retain\n@@ -460,9 +471,6 @@ impl Target {\n             options: Default::default(),\n         };\n \n-        // Default max-atomic-width to target-pointer-width\n-        base.options.max_atomic_width = base.target_pointer_width.parse().unwrap();\n-\n         macro_rules! key {\n             ($key_name:ident) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n@@ -475,11 +483,11 @@ impl Target {\n                     .map(|o| o.as_boolean()\n                          .map(|s| base.options.$key_name = s));\n             } );\n-            ($key_name:ident, u64) => ( {\n+            ($key_name:ident, Option<u64>) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..])\n                     .map(|o| o.as_u64()\n-                         .map(|s| base.options.$key_name = s));\n+                         .map(|s| base.options.$key_name = Some(s)));\n             } );\n             ($key_name:ident, PanicStrategy) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n@@ -553,7 +561,7 @@ impl Target {\n         key!(exe_allocation_crate);\n         key!(has_elf_tls, bool);\n         key!(obj_is_bitcode, bool);\n-        key!(max_atomic_width, u64);\n+        key!(max_atomic_width, Option<u64>);\n         try!(key!(panic_strategy, PanicStrategy));\n \n         Ok(base)"}, {"sha": "333bfad4a26830cf74c5067544981b08b5b9aa8b", "filename": "src/librustc_back/target/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -14,7 +14,7 @@ pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"ppc64\".to_string();\n     base.pre_link_args.push(\"-m64\".to_string());\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n \n     Ok(Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),"}, {"sha": "e75da133314a413e21e3170d520624614f0678d7", "filename": "src/librustc_back/target/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -14,7 +14,7 @@ pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"ppc64le\".to_string();\n     base.pre_link_args.push(\"-m64\".to_string());\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n \n     Ok(Target {\n         llvm_target: \"powerpc64le-unknown-linux-gnu\".to_string(),"}, {"sha": "45d28dd031f7ebf7ebac49f9fc3d01b7c16518c7", "filename": "src/librustc_back/target/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.pre_link_args.push(\"-m32\".to_string());\n-    base.max_atomic_width = 32;\n+    base.max_atomic_width = Some(32);\n \n     Ok(Target {\n         llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),"}, {"sha": "6e2dd6cd67c933962bac3d89eb0096aada18c4ff", "filename": "src/librustc_back/target/s390x_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fs390x_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fs390x_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fs390x_unknown_linux_gnu.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> TargetResult {\n     // cabi_s390x.rs are for now hard-coded to assume the no-vector ABI.\n     // Pass the -vector feature string to LLVM to respect this assumption.\n     base.features = \"-vector\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n \n     Ok(Target {\n         llvm_target: \"s390x-unknown-linux-gnu\".to_string(),"}, {"sha": "b612261dfbf36eb9d644dcc659690d4734234c8e", "filename": "src/librustc_back/target/thumb_base.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// These 4 `thumbv*` targets cover the ARM Cortex-M family of processors which are widely used in\n+// microcontrollers. Namely, all these processors:\n+//\n+// - Cortex-M0\n+// - Cortex-M0+\n+// - Cortex-M1\n+// - Cortex-M3\n+// - Cortex-M4(F)\n+// - Cortex-M7(F)\n+//\n+// We have opted for 4 targets instead of one target per processor (e.g. `cortex-m0`, `cortex-m3`,\n+// etc) because the differences between some processors like the cortex-m0 and cortex-m1 are almost\n+// non-existent from the POV of codegen so it doesn't make sense to have separate targets for them.\n+// And if differences exist between two processors under the same target, rustc flags can be used to\n+// optimize for one processor or the other.\n+//\n+// Also, we have not chosen a single target (`arm-none-eabi`) like GCC does because this makes\n+// difficult to integrate Rust code and C code. Targeting the Cortex-M4 requires different gcc flags\n+// than the ones you would use for the Cortex-M0 and with a single target it'd be impossible to\n+// differentiate one processor from the other.\n+//\n+// About arm vs thumb in the name. The Cortex-M devices only support the Thumb instruction set,\n+// which is more compact (higher code density), and not the ARM instruction set. That's why LLVM\n+// triples use thumb instead of arm. We follow suit because having thumb in the name let us\n+// differentiate these targets from our other `arm(v7)-*-*-gnueabi(hf)` targets in the context of\n+// build scripts / gcc flags.\n+\n+use PanicStrategy;\n+use std::default::Default;\n+use target::TargetOptions;\n+\n+pub fn opts() -> TargetOptions {\n+    // See rust-lang/rfcs#1645 for a discussion about these defaults\n+    TargetOptions {\n+        executables: true,\n+        // In 99%+ of cases, we want to use the `arm-none-eabi-gcc` compiler (there aren't many\n+        // options around)\n+        linker: \"arm-none-eabi-gcc\".to_string(),\n+        // Because these devices have very little resources having an unwinder is too onerous so we\n+        // default to \"abort\" because the \"unwind\" strategy is very rare.\n+        panic_strategy: PanicStrategy::Abort,\n+        // Similarly, one almost always never wants to use relocatable code because of the extra\n+        // costs it involves.\n+        relocation_model: \"static\".to_string(),\n+        .. Default::default()\n+    }\n+}"}, {"sha": "6c22f98538459ea5711308df1729b475ec60ab97", "filename": "src/librustc_back/target/thumbv6m_none_eabi.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv6m_none_eabi.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Targets the Cortex-M0, Cortex-M0+ and Cortex-M1 processors (ARMv6-M architecture)\n+\n+use target::{Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"thumbv6m-none-eabi\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"\".to_string(),\n+\n+        options: TargetOptions {\n+            // The ARMv6-M architecture doesn't support unaligned loads/stores so we disable them\n+            // with +strict-align.\n+            features: \"+strict-align\".to_string(),\n+            // There are no atomic instructions available in the instruction set of the ARMv6-M\n+            // architecture\n+            max_atomic_width: Some(0),\n+            .. super::thumb_base::opts()\n+        }\n+    })\n+}"}, {"sha": "ddad4e3624f3cef16a960f8f5058fcf82f2370e1", "filename": "src/librustc_back/target/thumbv7em_none_eabi.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabi.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Targets the Cortex-M4 and Cortex-M7 processors (ARMv7E-M)\n+//\n+// This target assumes that the device doesn't have a FPU (Floating Point Unit) and lowers all the\n+// floating point operations to software routines (intrinsics).\n+//\n+// As such, this target uses the \"soft\" calling convention (ABI) where floating point values are\n+// passed to/from subroutines via general purpose registers (R0, R1, etc.).\n+//\n+// To opt-in to hardware accelerated floating point operations, you can use, for example,\n+// `-C target-feature=+vfp4` or `-C target-cpu=cortex-m4`.\n+\n+use target::{Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"thumbv7em-none-eabi\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"\".to_string(),\n+\n+        options: TargetOptions {\n+            max_atomic_width: Some(32),\n+            .. super::thumb_base::opts()\n+        },\n+    })\n+}"}, {"sha": "a9fac48e8e5ac39c549ea88439af6d99851d8102", "filename": "src/librustc_back/target/thumbv7em_none_eabihf.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabihf.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Targets the Cortex-M4F and Cortex-M7F processors (ARMv7E-M)\n+//\n+// This target assumes that the device does have a FPU (Floating Point Unit) and lowers all (single\n+// precision) floating point operations to hardware instructions.\n+//\n+// Additionally, this target uses the \"hard\" floating convention (ABI) where floating point values\n+// are passed to/from subroutines via FPU registers (S0, S1, D0, D1, etc.).\n+//\n+// To opt into double precision hardware support, use the `-C target-feature=-fp-only-sp` flag.\n+\n+use target::{Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"thumbv7em-none-eabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"\".to_string(),\n+\n+        options: TargetOptions {\n+            // `+vfp4` is the lowest common denominator between the Cortex-M4 (vfp4-16) and the\n+            // Cortex-M7 (vfp5)\n+            // `+d16` both the Cortex-M4 and the Cortex-M7 only have 16 double-precision registers\n+            // available\n+            // `+fp-only-sp` The Cortex-M4 only supports single precision floating point operations\n+            // whereas in the Cortex-M7 double precision is optional\n+            //\n+            // Reference:\n+            // ARMv7-M Architecture Reference Manual - A2.5 The optional floating-point extension\n+            features: \"+vfp4,+d16,+fp-only-sp\".to_string(),\n+            max_atomic_width: Some(32),\n+            .. super::thumb_base::opts()\n+        }\n+    })\n+}"}, {"sha": "ed61dd0459b4d7c23ac8a5012d83ba514d846a12", "filename": "src/librustc_back/target/thumbv7m_none_eabi.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fthumbv7m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fthumbv7m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv7m_none_eabi.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Targets the Cortex-M3 processor (ARMv7-M)\n+\n+use target::{Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"thumbv7m-none-eabi\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"\".to_string(),\n+\n+        options: TargetOptions {\n+            max_atomic_width: Some(32),\n+            .. super::thumb_base::opts()\n+        },\n+    })\n+}"}, {"sha": "77ab4fcae70087dfc95ceb9e883d2f8931c5d896", "filename": "src/librustc_back/target/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> Result<Target, String> {\n         linker_is_gnu: true,\n         allow_asm: false,\n         obj_is_bitcode: true,\n-        max_atomic_width: 32,\n+        max_atomic_width: Some(32),\n         post_link_args: vec![\"-s\".to_string(), \"BINARYEN=1\".to_string(),\n                              \"-s\".to_string(), \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()],\n         .. Default::default()"}, {"sha": "b3c1561dbcc0bb06f2556b1a68a1f34244388d41", "filename": "src/librustc_back/target/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::apple_base::opts();\n     base.cpu = \"core2\".to_string();\n-    base.max_atomic_width = 128; // core2 support cmpxchg16b\n+    base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n     base.eliminate_frame_pointer = false;\n     base.pre_link_args.push(\"-m64\".to_string());\n "}, {"sha": "7a58bb34ce7f6e67eeefb15074917a3ef5ab00c4", "filename": "src/librustc_back/target/x86_64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n         target_env: \"\".to_string(),\n         target_vendor: \"apple\".to_string(),\n         options: TargetOptions {\n-            max_atomic_width: 64,\n+            max_atomic_width: Some(64),\n             .. base\n         }\n     })"}, {"sha": "321585cd65eb39020824daeaffc3da90b70164d9", "filename": "src/librustc_back/target/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -14,7 +14,7 @@ pub fn target() -> TargetResult {\n     let mut base = super::windows_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.push(\"-m64\".to_string());\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n \n     Ok(Target {\n         llvm_target: \"x86_64-pc-windows-gnu\".to_string(),"}, {"sha": "ea8909d213e80b79463cae221a7a634f679b5ca0", "filename": "src/librustc_back/target/x86_64_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();\n     base.cpu = \"x86-64\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n \n     Ok(Target {\n         llvm_target: \"x86_64-pc-windows-msvc\".to_string(),"}, {"sha": "33137214396961a05e7fff8139bd7e341ad7da37", "filename": "src/librustc_back/target/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n     base.pre_link_args.push(\"-m64\".to_string());\n     base.linker = \"x86_64-rumprun-netbsd-gcc\".to_string();\n     base.ar = \"x86_64-rumprun-netbsd-ar\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n \n     base.dynamic_linking = false;\n     base.has_rpath = false;"}, {"sha": "8e4fd94e7bce4375afd14a991f5cb1b5cde92271", "filename": "src/librustc_back/target/x86_64_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -14,7 +14,7 @@ pub fn target() -> TargetResult {\n     let mut base = super::solaris_base::opts();\n     base.pre_link_args.push(\"-m64\".to_string());\n     base.cpu = \"x86-64\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n \n     Ok(Target {\n         llvm_target: \"x86_64-pc-solaris\".to_string(),"}, {"sha": "eda16c29466b54ce5e8a2c2276dfb2ba261d034a", "filename": "src/librustc_back/target/x86_64_unknown_bitrig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::bitrig_base::opts();\n     base.cpu = \"x86-64\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Ok(Target {"}, {"sha": "194efb8fc232254af9523d0ad249a1644bb46aa1", "filename": "src/librustc_back/target/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::dragonfly_base::opts();\n     base.cpu = \"x86-64\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Ok(Target {"}, {"sha": "b127bee163b86ed5df3a610a3d00711eff51c024", "filename": "src/librustc_back/target/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Ok(Target {"}, {"sha": "7cf0599037c1e97efd71fac637aac8fbfad3af4b", "filename": "src/librustc_back/target/x86_64_unknown_haiku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_haiku.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::haiku_base::opts();\n     base.cpu = \"x86-64\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Ok(Target {"}, {"sha": "f95bcb556e57f0bf3ac2838e6c36f7acf67de42d", "filename": "src/librustc_back/target/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"x86-64\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Ok(Target {"}, {"sha": "c3bf9dcca6ee4ff9e24d0e2522b3aae4a59a07e9", "filename": "src/librustc_back/target/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"x86-64\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Ok(Target {"}, {"sha": "87a7c184644d57082215e8cf465c38674529f981", "filename": "src/librustc_back/target/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Ok(Target {"}, {"sha": "e9d645b0d38f259f74f4a29d21aa2c1f3b08ba34", "filename": "src/librustc_back/target/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -13,7 +13,7 @@ use target::{Target, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n-    base.max_atomic_width = 64;\n+    base.max_atomic_width = Some(64);\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Ok(Target {"}, {"sha": "48c53a5651114df0c3a5417cc940322822c89c11", "filename": "src/test/run-make/target-without-atomics/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Ftest%2Frun-make%2Ftarget-without-atomics%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1/src%2Ftest%2Frun-make%2Ftarget-without-atomics%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-without-atomics%2FMakefile?ref=a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+# The target used below doesn't support atomic operations. Verify that's the case\n+all:\n+\t$(RUSTC) --print cfg --target thumbv6m-none-eabi | grep -qv target_has_atomic"}]}