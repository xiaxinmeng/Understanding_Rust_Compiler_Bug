{"sha": "0666a33a6b8d39112f77cff65b6742092cfa736a", "node_id": "C_kwDOAAsO6NoAKDA2NjZhMzNhNmI4ZDM5MTEyZjc3Y2ZmNjViNjc0MjA5MmNmYTczNmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-02T14:52:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-02T14:52:00Z"}, "message": "Rollup merge of #89234 - nbdd0121:discr, r=jackh726\n\nDisallow non-c-like but \"fieldless\" ADTs from being casted to integer if they use arbitrary enum discriminant\n\nCode like\n\n```rust\n#[repr(u8)]\nenum Enum {\n    Foo /* = 0 */,\n    Bar(),\n    Baz{}\n}\n\nlet x = Enum::Bar() as u8;\n```\n\nseems to be unintentionally allowed so we couldn't disallow them now ~~, but we could disallow them if arbitrary enum discriminant is used before 1.56 hits stable~~ (stabilization was reverted).\n\nRelated: #88621\n\n`@rustbot` label +T-lang", "tree": {"sha": "b3a16008d55866bffbea5f99886f504e4fb6a84e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3a16008d55866bffbea5f99886f504e4fb6a84e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0666a33a6b8d39112f77cff65b6742092cfa736a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhqN2RCRBK7hj4Ov3rIwAAc3AIABFYLWXN+lS2DNptiVGS7L6B\nws7uIN++VUdWHRnVnlUNtjRy506SKswDs39el85FP/VMYIJ8XygLneBBijA1Xpqb\nZTSCp27PL2/2bo12PbKO64CRrL0JdhDtTWDrARU8OFd4kPFZw/Jc/+e2rLnhiUR/\nh//llDnqiQP8veEeVR722C/LZdkkbgGkcgD6MWahk+ZfAiJN8Cyc2RQZvJXjxloS\n/I0y2KU0Rml3xt7Yfo2C91o2Io1oEdUAuStvOz5LOd52oOufS7htIAVPwWDw1R5e\njFbVyQMwtDwes/z6QfoJWYQC0X7YQj3IfALBMyIyCX99ltYFG0odQ9UGu+fQxKM=\n=dQG4\n-----END PGP SIGNATURE-----\n", "payload": "tree b3a16008d55866bffbea5f99886f504e4fb6a84e\nparent d9baa361902b172be716f96619b909f340802dea\nparent f7ef1c9f4163df30ae67ab177d5c306cb90b3d47\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638456720 +0100\ncommitter GitHub <noreply@github.com> 1638456720 +0100\n\nRollup merge of #89234 - nbdd0121:discr, r=jackh726\n\nDisallow non-c-like but \"fieldless\" ADTs from being casted to integer if they use arbitrary enum discriminant\n\nCode like\n\n```rust\n#[repr(u8)]\nenum Enum {\n    Foo /* = 0 */,\n    Bar(),\n    Baz{}\n}\n\nlet x = Enum::Bar() as u8;\n```\n\nseems to be unintentionally allowed so we couldn't disallow them now ~~, but we could disallow them if arbitrary enum discriminant is used before 1.56 hits stable~~ (stabilization was reverted).\n\nRelated: #88621\n\n`@rustbot` label +T-lang\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0666a33a6b8d39112f77cff65b6742092cfa736a", "html_url": "https://github.com/rust-lang/rust/commit/0666a33a6b8d39112f77cff65b6742092cfa736a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0666a33a6b8d39112f77cff65b6742092cfa736a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9baa361902b172be716f96619b909f340802dea", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9baa361902b172be716f96619b909f340802dea", "html_url": "https://github.com/rust-lang/rust/commit/d9baa361902b172be716f96619b909f340802dea"}, {"sha": "f7ef1c9f4163df30ae67ab177d5c306cb90b3d47", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ef1c9f4163df30ae67ab177d5c306cb90b3d47", "html_url": "https://github.com/rust-lang/rust/commit/f7ef1c9f4163df30ae67ab177d5c306cb90b3d47"}], "stats": {"total": 53, "additions": 39, "deletions": 14}, "files": [{"sha": "69eb73b42552c5c438fe3f69013df8ae4031f7be", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0666a33a6b8d39112f77cff65b6742092cfa736a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0666a33a6b8d39112f77cff65b6742092cfa736a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=0666a33a6b8d39112f77cff65b6742092cfa736a", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_query_system::ich::StableHashingContext;\n@@ -314,6 +314,22 @@ impl<'tcx> AdtDef {\n     /// Whether the ADT lacks fields. Note that this includes uninhabited enums,\n     /// e.g., `enum Void {}` is considered payload free as well.\n     pub fn is_payloadfree(&self) -> bool {\n+        // Treat the ADT as not payload-free if arbitrary_enum_discriminant is used (#88621).\n+        // This would disallow the following kind of enum from being casted into integer.\n+        // ```\n+        // enum Enum {\n+        //    Foo() = 1,\n+        //    Bar{} = 2,\n+        //    Baz = 3,\n+        // }\n+        // ```\n+        if self\n+            .variants\n+            .iter()\n+            .any(|v| matches!(v.discr, VariantDiscr::Explicit(_)) && v.ctor_kind != CtorKind::Const)\n+        {\n+            return false;\n+        }\n         self.variants.iter().all(|v| v.fields.is_empty())\n     }\n "}, {"sha": "9242b80e22939eb419b2b7ff370fe46fe6a59917", "filename": "src/test/ui/cast/issue-88621.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0666a33a6b8d39112f77cff65b6742092cfa736a/src%2Ftest%2Fui%2Fcast%2Fissue-88621.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0666a33a6b8d39112f77cff65b6742092cfa736a/src%2Ftest%2Fui%2Fcast%2Fissue-88621.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-88621.rs?ref=0666a33a6b8d39112f77cff65b6742092cfa736a", "patch": "@@ -0,0 +1,13 @@\n+#![feature(arbitrary_enum_discriminant)]\n+\n+#[repr(u8)]\n+enum Kind2 {\n+    Foo() = 1,\n+    Bar{} = 2,\n+    Baz = 3,\n+}\n+\n+fn main() {\n+    let _ = Kind2::Foo() as u8;\n+    //~^ ERROR non-primitive cast\n+}"}, {"sha": "e96d866515238416af31288af13c4dae386a1714", "filename": "src/test/ui/cast/issue-88621.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0666a33a6b8d39112f77cff65b6742092cfa736a/src%2Ftest%2Fui%2Fcast%2Fissue-88621.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0666a33a6b8d39112f77cff65b6742092cfa736a/src%2Ftest%2Fui%2Fcast%2Fissue-88621.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-88621.stderr?ref=0666a33a6b8d39112f77cff65b6742092cfa736a", "patch": "@@ -0,0 +1,9 @@\n+error[E0605]: non-primitive cast: `Kind2` as `u8`\n+  --> $DIR/issue-88621.rs:11:13\n+   |\n+LL |     let _ = Kind2::Foo() as u8;\n+   |             ^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0605`."}, {"sha": "ccc423e4a194cf2c357dd1113e969a87458d31ea", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0666a33a6b8d39112f77cff65b6742092cfa736a/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0666a33a6b8d39112f77cff65b6742092cfa736a/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs?ref=0666a33a6b8d39112f77cff65b6742092cfa736a", "patch": "@@ -22,14 +22,6 @@ impl Enum {\n     }\n }\n \n-#[allow(dead_code)]\n-#[repr(u8)]\n-enum FieldlessEnum {\n-    Unit = 3,\n-    Tuple() = 2,\n-    Struct {} = 1,\n-}\n-\n fn main() {\n     const UNIT: Enum = Enum::Unit;\n     const TUPLE: Enum = Enum::Tuple(5);\n@@ -48,9 +40,4 @@ fn main() {\n     assert_eq!(3, UNIT_TAG);\n     assert_eq!(2, TUPLE_TAG);\n     assert_eq!(1, STRUCT_TAG);\n-\n-    // Ensure `as` conversions are correct\n-    assert_eq!(3, FieldlessEnum::Unit as u8);\n-    assert_eq!(2, FieldlessEnum::Tuple() as u8);\n-    assert_eq!(1, FieldlessEnum::Struct{} as u8);\n }"}]}