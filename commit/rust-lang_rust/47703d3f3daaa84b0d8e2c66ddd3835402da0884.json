{"sha": "47703d3f3daaa84b0d8e2c66ddd3835402da0884", "node_id": "C_kwDOAAsO6NoAKDQ3NzAzZDNmM2RhYWE4NGIwZDhlMmM2NmRkZDM4MzU0MDJkYTA4ODQ", "commit": {"author": {"name": "Andrew Pollack", "email": "andrewpollack@google.com", "date": "2022-10-03T19:36:27Z"}, "committer": {"name": "Andrew Pollack", "email": "andrewpollack@google.com", "date": "2022-10-19T18:33:47Z"}, "message": "compiletest: refactor rustcflags to Vec", "tree": {"sha": "4f251afa9639a0bbbb370b027b9f780a3044f627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f251afa9639a0bbbb370b027b9f780a3044f627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47703d3f3daaa84b0d8e2c66ddd3835402da0884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47703d3f3daaa84b0d8e2c66ddd3835402da0884", "html_url": "https://github.com/rust-lang/rust/commit/47703d3f3daaa84b0d8e2c66ddd3835402da0884", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47703d3f3daaa84b0d8e2c66ddd3835402da0884/comments", "author": {"login": "andrewpollack", "id": 24868505, "node_id": "MDQ6VXNlcjI0ODY4NTA1", "avatar_url": "https://avatars.githubusercontent.com/u/24868505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewpollack", "html_url": "https://github.com/andrewpollack", "followers_url": "https://api.github.com/users/andrewpollack/followers", "following_url": "https://api.github.com/users/andrewpollack/following{/other_user}", "gists_url": "https://api.github.com/users/andrewpollack/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewpollack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewpollack/subscriptions", "organizations_url": "https://api.github.com/users/andrewpollack/orgs", "repos_url": "https://api.github.com/users/andrewpollack/repos", "events_url": "https://api.github.com/users/andrewpollack/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewpollack/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andrewpollack", "id": 24868505, "node_id": "MDQ6VXNlcjI0ODY4NTA1", "avatar_url": "https://avatars.githubusercontent.com/u/24868505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewpollack", "html_url": "https://github.com/andrewpollack", "followers_url": "https://api.github.com/users/andrewpollack/followers", "following_url": "https://api.github.com/users/andrewpollack/following{/other_user}", "gists_url": "https://api.github.com/users/andrewpollack/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewpollack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewpollack/subscriptions", "organizations_url": "https://api.github.com/users/andrewpollack/orgs", "repos_url": "https://api.github.com/users/andrewpollack/repos", "events_url": "https://api.github.com/users/andrewpollack/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewpollack/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f172b4f0b024990a0fd3df2fedd0fe18b48a303", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f172b4f0b024990a0fd3df2fedd0fe18b48a303", "html_url": "https://github.com/rust-lang/rust/commit/2f172b4f0b024990a0fd3df2fedd0fe18b48a303"}], "stats": {"total": 61, "additions": 22, "deletions": 39}, "files": [{"sha": "0346f652ae27265c7b79659bb21ab0e203f0fda0", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47703d3f3daaa84b0d8e2c66ddd3835402da0884/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47703d3f3daaa84b0d8e2c66ddd3835402da0884/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=47703d3f3daaa84b0d8e2c66ddd3835402da0884", "patch": "@@ -1386,7 +1386,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         }\n         let mut flags = if is_rustdoc { Vec::new() } else { vec![\"-Crpath\".to_string()] };\n         flags.push(format!(\"-Cdebuginfo={}\", builder.config.rust_debuginfo_level_tests));\n-        flags.push(builder.config.cmd.rustc_args().join(\" \"));\n+        flags.extend(builder.config.cmd.rustc_args().iter().map(|s| s.to_string()));\n \n         if let Some(linker) = builder.linker(target) {\n             cmd.arg(\"--linker\").arg(linker);\n@@ -1395,12 +1395,16 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         let mut hostflags = flags.clone();\n         hostflags.push(format!(\"-Lnative={}\", builder.test_helpers_out(compiler.host).display()));\n         hostflags.extend(builder.lld_flags(compiler.host));\n-        cmd.arg(\"--host-rustcflags\").arg(hostflags.join(\" \"));\n+        for flag in hostflags {\n+            cmd.arg(\"--host-rustcflags\").arg(flag);\n+        }\n \n         let mut targetflags = flags;\n         targetflags.push(format!(\"-Lnative={}\", builder.test_helpers_out(target).display()));\n         targetflags.extend(builder.lld_flags(target));\n-        cmd.arg(\"--target-rustcflags\").arg(targetflags.join(\" \"));\n+        for flag in targetflags {\n+            cmd.arg(\"--target-rustcflags\").arg(flag);\n+        }\n \n         cmd.arg(\"--python\").arg(builder.python());\n "}, {"sha": "0260f684838644a47cda01a7e5b0e638f738a15f", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47703d3f3daaa84b0d8e2c66ddd3835402da0884/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47703d3f3daaa84b0d8e2c66ddd3835402da0884/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=47703d3f3daaa84b0d8e2c66ddd3835402da0884", "patch": "@@ -269,10 +269,10 @@ pub struct Config {\n     pub runtool: Option<String>,\n \n     /// Flags to pass to the compiler when building for the host\n-    pub host_rustcflags: Option<String>,\n+    pub host_rustcflags: Vec<String>,\n \n     /// Flags to pass to the compiler when building for the target\n-    pub target_rustcflags: Option<String>,\n+    pub target_rustcflags: Vec<String>,\n \n     /// Whether tests should be optimized by default. Individual test-suites and test files may\n     /// override this setting.\n@@ -457,12 +457,12 @@ pub enum Endian {\n }\n \n impl TargetCfg {\n-    fn new(rustc_path: &Path, target: &str, target_rustcflags: &Option<String>) -> TargetCfg {\n+    fn new(rustc_path: &Path, target: &str, target_rustcflags: &Vec<String>) -> TargetCfg {\n         let output = match Command::new(rustc_path)\n             .arg(\"--print=cfg\")\n             .arg(\"--target\")\n             .arg(target)\n-            .args(target_rustcflags.into_iter().map(|s| s.split_whitespace()).flatten())\n+            .args(target_rustcflags)\n             .output()\n         {\n             Ok(output) => output,"}, {"sha": "f2d80d7f5325a5c37ebca1cdeb1b04d8130e9590", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47703d3f3daaa84b0d8e2c66ddd3835402da0884/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47703d3f3daaa84b0d8e2c66ddd3835402da0884/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=47703d3f3daaa84b0d8e2c66ddd3835402da0884", "patch": "@@ -252,8 +252,8 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         }),\n         logfile: matches.opt_str(\"logfile\").map(|s| PathBuf::from(&s)),\n         runtool: matches.opt_str(\"runtool\"),\n-        host_rustcflags: Some(matches.opt_strs(\"host-rustcflags\").join(\" \")),\n-        target_rustcflags: Some(matches.opt_strs(\"target-rustcflags\").join(\" \")),\n+        host_rustcflags: matches.opt_strs(\"host-rustcflags\"),\n+        target_rustcflags: matches.opt_strs(\"target-rustcflags\"),\n         optimize_tests: matches.opt_present(\"optimize-tests\"),\n         target,\n         host: opt_str2(matches.opt_str(\"host\")),\n@@ -320,8 +320,8 @@ pub fn log_config(config: &Config) {\n         format!(\"force_pass_mode: {}\", opt_str(&config.force_pass_mode.map(|m| format!(\"{}\", m))),),\n     );\n     logv(c, format!(\"runtool: {}\", opt_str(&config.runtool)));\n-    logv(c, format!(\"host-rustcflags: {}\", opt_str(&config.host_rustcflags)));\n-    logv(c, format!(\"target-rustcflags: {}\", opt_str(&config.target_rustcflags)));\n+    logv(c, format!(\"host-rustcflags: {:?}\", config.host_rustcflags));\n+    logv(c, format!(\"target-rustcflags: {:?}\", config.target_rustcflags));\n     logv(c, format!(\"target: {}\", config.target));\n     logv(c, format!(\"host: {}\", config.host));\n     logv(c, format!(\"android-cross-path: {:?}\", config.android_cross_path.display()));"}, {"sha": "3068f3c5b0b0cdfcd1513418fbf722c463d86b89", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 7, "deletions": 28, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/47703d3f3daaa84b0d8e2c66ddd3835402da0884/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47703d3f3daaa84b0d8e2c66ddd3835402da0884/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=47703d3f3daaa84b0d8e2c66ddd3835402da0884", "patch": "@@ -558,10 +558,7 @@ impl<'test> TestCx<'test> {\n             .arg(&aux_dir)\n             .args(&self.props.compile_flags)\n             .envs(self.props.rustc_env.clone());\n-        self.maybe_add_external_args(\n-            &mut rustc,\n-            self.split_maybe_args(&self.config.target_rustcflags),\n-        );\n+        self.maybe_add_external_args(&mut rustc, &self.config.target_rustcflags);\n \n         let src = match read_from {\n             ReadFrom::Stdin(src) => Some(src),\n@@ -629,10 +626,7 @@ impl<'test> TestCx<'test> {\n             .arg(\"-L\")\n             .arg(aux_dir);\n         self.set_revision_flags(&mut rustc);\n-        self.maybe_add_external_args(\n-            &mut rustc,\n-            self.split_maybe_args(&self.config.target_rustcflags),\n-        );\n+        self.maybe_add_external_args(&mut rustc, &self.config.target_rustcflags);\n         rustc.args(&self.props.compile_flags);\n \n         self.compose_and_run_compiler(rustc, Some(src))\n@@ -1186,23 +1180,14 @@ impl<'test> TestCx<'test> {\n         ProcRes { status, stdout: out, stderr: err, cmdline: format!(\"{:?}\", cmd) }\n     }\n \n-    fn cleanup_debug_info_options(&self, options: &Option<String>) -> Option<String> {\n-        if options.is_none() {\n-            return None;\n-        }\n-\n+    fn cleanup_debug_info_options(&self, options: &Vec<String>) -> Vec<String> {\n         // Remove options that are either unwanted (-O) or may lead to duplicates due to RUSTFLAGS.\n         let options_to_remove = [\"-O\".to_owned(), \"-g\".to_owned(), \"--debuginfo\".to_owned()];\n-        let new_options = self\n-            .split_maybe_args(options)\n-            .into_iter()\n-            .filter(|x| !options_to_remove.contains(x))\n-            .collect::<Vec<String>>();\n \n-        Some(new_options.join(\" \"))\n+        options.to_vec().into_iter().filter(|x| !options_to_remove.contains(x)).collect()\n     }\n \n-    fn maybe_add_external_args(&self, cmd: &mut Command, args: Vec<String>) {\n+    fn maybe_add_external_args(&self, cmd: &mut Command, args: &Vec<String>) {\n         // Filter out the arguments that should not be added by runtest here.\n         //\n         // Notable use-cases are: do not add our optimisation flag if\n@@ -2035,15 +2020,9 @@ impl<'test> TestCx<'test> {\n         }\n \n         if self.props.force_host {\n-            self.maybe_add_external_args(\n-                &mut rustc,\n-                self.split_maybe_args(&self.config.host_rustcflags),\n-            );\n+            self.maybe_add_external_args(&mut rustc, &self.config.host_rustcflags);\n         } else {\n-            self.maybe_add_external_args(\n-                &mut rustc,\n-                self.split_maybe_args(&self.config.target_rustcflags),\n-            );\n+            self.maybe_add_external_args(&mut rustc, &self.config.target_rustcflags);\n             if !is_rustdoc {\n                 if let Some(ref linker) = self.config.linker {\n                     rustc.arg(format!(\"-Clinker={}\", linker));"}]}