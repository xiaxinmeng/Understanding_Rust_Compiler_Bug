{"sha": "e45d9973b2665897a768312e971b82cc62633103", "node_id": "C_kwDOAAsO6NoAKGU0NWQ5OTczYjI2NjU4OTdhNzY4MzEyZTk3MWI4MmNjNjI2MzMxMDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-08T08:05:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-08T08:05:47Z"}, "message": "Auto merge of #97860 - Dylan-DPC:rollup-t3vxos8, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97595 (Remove unwrap from get_vtable)\n - #97597 (Preserve unused pointer to address casts)\n - #97819 (Recover `import` instead of `use` in item)\n - #97823 (Recover missing comma after match arm)\n - #97851 (Use repr(C) when depending on struct layout in ptr tests)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7010049e4a0bd89610767791bb05b7696aa27d8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7010049e4a0bd89610767791bb05b7696aa27d8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e45d9973b2665897a768312e971b82cc62633103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e45d9973b2665897a768312e971b82cc62633103", "html_url": "https://github.com/rust-lang/rust/commit/e45d9973b2665897a768312e971b82cc62633103", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e45d9973b2665897a768312e971b82cc62633103/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a7aa7016de32f4d991c30bfa40d3911e18a213", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a7aa7016de32f4d991c30bfa40d3911e18a213", "html_url": "https://github.com/rust-lang/rust/commit/64a7aa7016de32f4d991c30bfa40d3911e18a213"}, {"sha": "1660b4b70cfb43a03680f12d61dd89fb50e6a54e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1660b4b70cfb43a03680f12d61dd89fb50e6a54e", "html_url": "https://github.com/rust-lang/rust/commit/1660b4b70cfb43a03680f12d61dd89fb50e6a54e"}], "stats": {"total": 400, "additions": 335, "deletions": 65}, "files": [{"sha": "4fe81a91d1ab56f50c1a0c81da8e30f9b13472a5", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -2605,9 +2605,34 @@ pub enum Rvalue<'tcx> {\n static_assert_size!(Rvalue<'_>, 40);\n \n impl<'tcx> Rvalue<'tcx> {\n+    /// Returns true if rvalue can be safely removed when the result is unused.\n     #[inline]\n-    pub fn is_pointer_int_cast(&self) -> bool {\n-        matches!(self, Rvalue::Cast(CastKind::PointerExposeAddress, _, _))\n+    pub fn is_safe_to_remove(&self) -> bool {\n+        match self {\n+            // Pointer to int casts may be side-effects due to exposing the provenance.\n+            // While the model is undecided, we should be conservative. See\n+            // <https://www.ralfj.de/blog/2022/04/11/provenance-exposed.html>\n+            Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => false,\n+\n+            Rvalue::Use(_)\n+            | Rvalue::Repeat(_, _)\n+            | Rvalue::Ref(_, _, _)\n+            | Rvalue::ThreadLocalRef(_)\n+            | Rvalue::AddressOf(_, _)\n+            | Rvalue::Len(_)\n+            | Rvalue::Cast(\n+                CastKind::Misc | CastKind::Pointer(_) | CastKind::PointerFromExposedAddress,\n+                _,\n+                _,\n+            )\n+            | Rvalue::BinaryOp(_, _)\n+            | Rvalue::CheckedBinaryOp(_, _)\n+            | Rvalue::NullaryOp(_, _)\n+            | Rvalue::UnaryOp(_, _)\n+            | Rvalue::Discriminant(_)\n+            | Rvalue::Aggregate(_, _)\n+            | Rvalue::ShallowInitBox(_, _) => true,\n+        }\n     }\n }\n "}, {"sha": "9b62ee5473c7b6b6459f2793101991646b60d014", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -244,13 +244,10 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n         // Compute the place that we are storing to, if any\n         let destination = match &statement.kind {\n             StatementKind::Assign(assign) => {\n-                if assign.1.is_pointer_int_cast() {\n-                    // Pointer to int casts may be side-effects due to exposing the provenance.\n-                    // While the model is undecided, we should be conservative. See\n-                    // <https://www.ralfj.de/blog/2022/04/11/provenance-exposed.html>\n-                    None\n-                } else {\n+                if assign.1.is_safe_to_remove() {\n                     Some(assign.0)\n+                } else {\n+                    None\n                 }\n             }\n             StatementKind::SetDiscriminant { place, .. } | StatementKind::Deinit(place) => {"}, {"sha": "779f3c778156b6e97e2cd85d814457ddbe39531f", "filename": "compiler/rustc_mir_transform/src/dead_store_elimination.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -34,7 +34,7 @@ pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitS\n         for (statement_index, statement) in bb_data.statements.iter().enumerate().rev() {\n             let loc = Location { block: bb, statement_index };\n             if let StatementKind::Assign(assign) = &statement.kind {\n-                if assign.1.is_pointer_int_cast() {\n+                if !assign.1.is_safe_to_remove() {\n                     continue;\n                 }\n             }"}, {"sha": "8a78ea5c82bb190de16ee36ad1fbfdc0974ffd0a", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -494,8 +494,12 @@ impl<'tcx> Visitor<'tcx> for UsedLocals {\n             StatementKind::StorageLive(_local) | StatementKind::StorageDead(_local) => {}\n \n             StatementKind::Assign(box (ref place, ref rvalue)) => {\n-                self.visit_lhs(place, location);\n-                self.visit_rvalue(rvalue, location);\n+                if rvalue.is_safe_to_remove() {\n+                    self.visit_lhs(place, location);\n+                    self.visit_rvalue(rvalue, location);\n+                } else {\n+                    self.super_statement(statement, location);\n+                }\n             }\n \n             StatementKind::SetDiscriminant { ref place, variant_index: _ }"}, {"sha": "324e04b198101a9e2de387cd0f04cda3ef8438b6", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -2718,13 +2718,12 @@ impl<'a> Parser<'a> {\n                     ));\n                 }\n                 this.expect_one_of(&[token::Comma], &[token::CloseDelim(Delimiter::Brace)])\n-                    .map_err(|mut err| {\n-                        match (sm.span_to_lines(expr.span), sm.span_to_lines(arm_start_span)) {\n-                            (Ok(ref expr_lines), Ok(ref arm_start_lines))\n-                                if arm_start_lines.lines[0].end_col\n-                                    == expr_lines.lines[0].end_col\n-                                    && expr_lines.lines.len() == 2\n-                                    && this.token == token::FatArrow =>\n+                    .or_else(|mut err| {\n+                        if this.token == token::FatArrow {\n+                            if let Ok(expr_lines) = sm.span_to_lines(expr.span)\n+                            && let Ok(arm_start_lines) = sm.span_to_lines(arm_start_span)\n+                            && arm_start_lines.lines[0].end_col == expr_lines.lines[0].end_col\n+                            && expr_lines.lines.len() == 2\n                             {\n                                 // We check whether there's any trailing code in the parse span,\n                                 // if there isn't, we very likely have the following:\n@@ -2743,15 +2742,41 @@ impl<'a> Parser<'a> {\n                                     \",\".to_owned(),\n                                     Applicability::MachineApplicable,\n                                 );\n+                                return Err(err);\n                             }\n-                            _ => {\n-                                err.span_label(\n-                                    arrow_span,\n-                                    \"while parsing the `match` arm starting here\",\n-                                );\n+                        } else {\n+                            // FIXME(compiler-errors): We could also recover `; PAT =>` here\n+\n+                            // Try to parse a following `PAT =>`, if successful\n+                            // then we should recover.\n+                            let mut snapshot = this.create_snapshot_for_diagnostic();\n+                            let pattern_follows = snapshot\n+                                .parse_pat_allow_top_alt(\n+                                    None,\n+                                    RecoverComma::Yes,\n+                                    RecoverColon::Yes,\n+                                    CommaRecoveryMode::EitherTupleOrPipe,\n+                                )\n+                                .map_err(|err| err.cancel())\n+                                .is_ok();\n+                            if pattern_follows && snapshot.check(&TokenKind::FatArrow) {\n+                                err.cancel();\n+                                this.struct_span_err(\n+                                    hi.shrink_to_hi(),\n+                                    \"expected `,` following `match` arm\",\n+                                )\n+                                .span_suggestion(\n+                                    hi.shrink_to_hi(),\n+                                    \"missing a comma here to end this `match` arm\",\n+                                    \",\".to_owned(),\n+                                    Applicability::MachineApplicable,\n+                                )\n+                                .emit();\n+                                return Ok(true);\n                             }\n                         }\n-                        err\n+                        err.span_label(arrow_span, \"while parsing the `match` arm starting here\");\n+                        Err(err)\n                     })?;\n             } else {\n                 this.eat(&token::Comma);"}, {"sha": "48c3c467becc8648702d64b7229a0328aed9c33c", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 49, "deletions": 20, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -204,25 +204,7 @@ impl<'a> Parser<'a> {\n         let mut def = || mem::replace(def, Defaultness::Final);\n \n         let info = if self.eat_keyword(kw::Use) {\n-            // USE ITEM\n-            let tree = self.parse_use_tree()?;\n-\n-            // If wildcard or glob-like brace syntax doesn't have `;`,\n-            // the user may not know `*` or `{}` should be the last.\n-            if let Err(mut e) = self.expect_semi() {\n-                match tree.kind {\n-                    UseTreeKind::Glob => {\n-                        e.note(\"the wildcard token must be last on the path\");\n-                    }\n-                    UseTreeKind::Nested(..) => {\n-                        e.note(\"glob-like brace syntax must be last on the path\");\n-                    }\n-                    _ => (),\n-                }\n-                return Err(e);\n-            }\n-\n-            (Ident::empty(), ItemKind::Use(tree))\n+            self.parse_use_item()?\n         } else if self.check_fn_front_matter(def_final) {\n             // FUNCTION ITEM\n             let (ident, sig, generics, body) = self.parse_fn(attrs, fn_parse_mode, lo, vis)?;\n@@ -288,7 +270,12 @@ impl<'a> Parser<'a> {\n         } else if let IsMacroRulesItem::Yes { has_bang } = self.is_macro_rules_item() {\n             // MACRO_RULES ITEM\n             self.parse_item_macro_rules(vis, has_bang)?\n-        } else if vis.kind.is_pub() && self.isnt_macro_invocation() {\n+        } else if self.isnt_macro_invocation()\n+            && (self.token.is_ident_named(Symbol::intern(\"import\"))\n+                || self.token.is_ident_named(Symbol::intern(\"using\")))\n+        {\n+            return self.recover_import_as_use();\n+        } else if self.isnt_macro_invocation() && vis.kind.is_pub() {\n             self.recover_missing_kw_before_item()?;\n             return Ok(None);\n         } else if macros_allowed && self.check_path() {\n@@ -300,6 +287,48 @@ impl<'a> Parser<'a> {\n         Ok(Some(info))\n     }\n \n+    fn recover_import_as_use(&mut self) -> PResult<'a, Option<(Ident, ItemKind)>> {\n+        let span = self.token.span;\n+        let token_name = super::token_descr(&self.token);\n+        let snapshot = self.create_snapshot_for_diagnostic();\n+        self.bump();\n+        match self.parse_use_item() {\n+            Ok(u) => {\n+                self.struct_span_err(span, format!(\"expected item, found {token_name}\"))\n+                    .span_suggestion_short(\n+                        span,\n+                        \"items are imported using the `use` keyword\",\n+                        \"use\".to_owned(),\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+                Ok(Some(u))\n+            }\n+            Err(e) => {\n+                e.cancel();\n+                self.restore_snapshot(snapshot);\n+                Ok(None)\n+            }\n+        }\n+    }\n+\n+    fn parse_use_item(&mut self) -> PResult<'a, (Ident, ItemKind)> {\n+        let tree = self.parse_use_tree()?;\n+        if let Err(mut e) = self.expect_semi() {\n+            match tree.kind {\n+                UseTreeKind::Glob => {\n+                    e.note(\"the wildcard token must be last on the path\");\n+                }\n+                UseTreeKind::Nested(..) => {\n+                    e.note(\"glob-like brace syntax must be last on the path\");\n+                }\n+                _ => (),\n+            }\n+            return Err(e);\n+        }\n+        Ok((Ident::empty(), ItemKind::Use(tree)))\n+    }\n+\n     /// When parsing a statement, would the start of a path be an item?\n     pub(super) fn is_path_start_item(&mut self) -> bool {\n         self.is_kw_followed_by_ident(kw::Union) // no: `union::b`, yes: `union U { .. }`"}, {"sha": "3a00c41d90ae6e8db1544e26b3b2c5496fe7b47c", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -304,22 +304,24 @@ pub fn get_vtable_index_of_object_method<'tcx, N>(\n     tcx: TyCtxt<'tcx>,\n     object: &super::ImplSourceObjectData<'tcx, N>,\n     method_def_id: DefId,\n-) -> usize {\n+) -> Option<usize> {\n     let existential_trait_ref = object\n         .upcast_trait_ref\n         .map_bound(|trait_ref| ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref));\n     let existential_trait_ref = tcx.erase_regions(existential_trait_ref);\n+\n     // Count number of methods preceding the one we are selecting and\n     // add them to the total offset.\n-    let index = tcx\n+    if let Some(index) = tcx\n         .own_existential_vtable_entries(existential_trait_ref)\n         .iter()\n         .copied()\n         .position(|def_id| def_id == method_def_id)\n-        .unwrap_or_else(|| {\n-            bug!(\"get_vtable_index_of_object_method: {:?} was not found\", method_def_id);\n-        });\n-    object.vtable_base + index\n+    {\n+        Some(object.vtable_base + index)\n+    } else {\n+        None\n+    }\n }\n \n pub fn closure_trait_ref_and_return_type<'tcx>("}, {"sha": "7c89ce125e01d771c906b0f5dcdd86d149948272", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -349,11 +349,15 @@ fn resolve_associated_item<'tcx>(\n             _ => None,\n         },\n         traits::ImplSource::Object(ref data) => {\n-            let index = traits::get_vtable_index_of_object_method(tcx, data, trait_item_id);\n-            Some(Instance {\n-                def: ty::InstanceDef::Virtual(trait_item_id, index),\n-                substs: rcvr_substs,\n-            })\n+            if let Some(index) = traits::get_vtable_index_of_object_method(tcx, data, trait_item_id)\n+            {\n+                Some(Instance {\n+                    def: ty::InstanceDef::Virtual(trait_item_id, index),\n+                    substs: rcvr_substs,\n+                })\n+            } else {\n+                None\n+            }\n         }\n         traits::ImplSource::Builtin(..) => {\n             if Some(trait_ref.def_id) == tcx.lang_items().clone_trait() {"}, {"sha": "3e2956eac8753064d4772cb55c18643ce53d8d2c", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -19,6 +19,7 @@ fn test_const_from_raw_parts() {\n #[test]\n fn test() {\n     unsafe {\n+        #[repr(C)]\n         struct Pair {\n             fst: isize,\n             snd: isize,"}, {"sha": "f6bf396cd05152f3571049e6cd9c87828f40aed8", "filename": "src/test/mir-opt/simplify-locals.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -62,6 +62,12 @@ fn t4() -> u32 {\n     unsafe { X + 1 }\n }\n \n+// EMIT_MIR simplify_locals.expose_addr.SimplifyLocals.diff\n+fn expose_addr(p: *const usize) {\n+    // Used pointer to address cast. Has a side effect of exposing the provenance.\n+    p as usize;\n+}\n+\n fn main() {\n     c();\n     d1();\n@@ -71,4 +77,5 @@ fn main() {\n     t2();\n     t3();\n     t4();\n+    expose_addr(&0);\n }"}, {"sha": "93d77ad40aa4b7e1acc3de814441149c6484d14c", "filename": "src/test/mir-opt/simplify_locals.expose_addr.SimplifyLocals.diff", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fmir-opt%2Fsimplify_locals.expose_addr.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fmir-opt%2Fsimplify_locals.expose_addr.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.expose_addr.SimplifyLocals.diff?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -0,0 +1,21 @@\n+- // MIR for `expose_addr` before SimplifyLocals\n++ // MIR for `expose_addr` after SimplifyLocals\n+  \n+  fn expose_addr(_1: *const usize) -> () {\n+      debug p => _1;                       // in scope 0 at $DIR/simplify-locals.rs:66:16: 66:17\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:66:33: 66:33\n+      let _2: usize;                       // in scope 0 at $DIR/simplify-locals.rs:68:5: 68:15\n+      let mut _3: *const usize;            // in scope 0 at $DIR/simplify-locals.rs:68:5: 68:6\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify-locals.rs:68:5: 68:15\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-locals.rs:68:5: 68:6\n+          _3 = _1;                         // scope 0 at $DIR/simplify-locals.rs:68:5: 68:6\n+          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/simplify-locals.rs:68:5: 68:15\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-locals.rs:68:14: 68:15\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:68:15: 68:16\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:66:33: 69:2\n+          return;                          // scope 0 at $DIR/simplify-locals.rs:69:2: 69:2\n+      }\n+  }\n+  "}, {"sha": "87d453e1565c5249a967abf95c59e1c1cac5b5e3", "filename": "src/test/ui/did_you_mean/use_instead_of_import.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.fixed?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+use std::{\n+    //~^ ERROR expected item, found `import`\n+    io::Write,\n+    rc::Rc,\n+};\n+\n+pub use std::io;\n+//~^ ERROR expected item, found `using`\n+\n+fn main() {\n+    let x = Rc::new(1);\n+    let _ = write!(io::stdout(), \"{:?}\", x);\n+}"}, {"sha": "59e83732328d9fc73baf33ce32a3178c5578bd0e", "filename": "src/test/ui/did_you_mean/use_instead_of_import.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.rs?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+import std::{\n+    //~^ ERROR expected item, found `import`\n+    io::Write,\n+    rc::Rc,\n+};\n+\n+pub using std::io;\n+//~^ ERROR expected item, found `using`\n+\n+fn main() {\n+    let x = Rc::new(1);\n+    let _ = write!(io::stdout(), \"{:?}\", x);\n+}"}, {"sha": "b22954af80f0600704d7a5a50b378ac50689f9ee", "filename": "src/test/ui/did_you_mean/use_instead_of_import.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.stderr?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -0,0 +1,14 @@\n+error: expected item, found `import`\n+  --> $DIR/use_instead_of_import.rs:3:1\n+   |\n+LL | import std::{\n+   | ^^^^^^ help: items are imported using the `use` keyword\n+\n+error: expected item, found `using`\n+  --> $DIR/use_instead_of_import.rs:9:5\n+   |\n+LL | pub using std::io;\n+   |     ^^^^^ help: items are imported using the `use` keyword\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "bba38fd0fa4c915fd9b3c3548cbfa4dbfb0b6fcc", "filename": "src/test/ui/parser/match-arm-without-braces.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.rs?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -45,9 +45,9 @@ fn main() {\n           15;\n     }\n     match S::get(16) {\n-        Some(Val::Foo) => 17\n-        _ => 18, //~ ERROR expected one of\n-    }\n+        Some(Val::Foo) => 17 //~ ERROR expected `,` following `match` arm\n+        _ => 18,\n+    };\n     match S::get(19) {\n         Some(Val::Foo) =>\n           20; //~ ERROR `match` arm body without braces"}, {"sha": "37d55aa53f87c14871f2418fce5829367cd75266", "filename": "src/test/ui/parser/match-arm-without-braces.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.stderr?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -52,15 +52,11 @@ LL ~           { 14;\n LL ~           15; }\n    |\n \n-error: expected one of `,`, `.`, `?`, `}`, or an operator, found reserved identifier `_`\n-  --> $DIR/match-arm-without-braces.rs:49:9\n+error: expected `,` following `match` arm\n+  --> $DIR/match-arm-without-braces.rs:48:29\n    |\n LL |         Some(Val::Foo) => 17\n-   |                        --   - expected one of `,`, `.`, `?`, `}`, or an operator\n-   |                        |\n-   |                        while parsing the `match` arm starting here\n-LL |         _ => 18,\n-   |         ^ unexpected token\n+   |                             ^ help: missing a comma here to end this `match` arm: `,`\n \n error: `match` arm body without braces\n   --> $DIR/match-arm-without-braces.rs:53:11"}, {"sha": "393cf91efc2d2101446a8368538f17df18121553", "filename": "src/test/ui/traits/vtable/issue-97381.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.rs?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -0,0 +1,30 @@\n+use std::ops::Deref;\n+trait MyTrait: Deref<Target = u32> {}\n+struct MyStruct(u32);\n+impl MyTrait for MyStruct {}\n+impl Deref for MyStruct {\n+    type Target = u32;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+fn get_concrete_value(i: u32) -> MyStruct {\n+    MyStruct(i)\n+}\n+fn get_boxed_value(i: u32) -> Box<dyn MyTrait> {\n+    Box::new(get_concrete_value(i))\n+}\n+fn main() {\n+    let v = [1, 2, 3]\n+        .iter()\n+        .map(|i| get_boxed_value(*i))\n+        .collect::<Vec<_>>();\n+\n+    let el = &v[0];\n+\n+    for _ in v {\n+        //~^ ERROR cannot move out of `v` because it is borrowed\n+        println!(\"{}\", ***el > 0);\n+    }\n+}"}, {"sha": "f88c8716ff7401945e1d19502842d18c954a4363", "filename": "src/test/ui/traits/vtable/issue-97381.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.stderr?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -0,0 +1,15 @@\n+error[E0505]: cannot move out of `v` because it is borrowed\n+  --> $DIR/issue-97381.rs:26:14\n+   |\n+LL |     let el = &v[0];\n+   |               - borrow of `v` occurs here\n+LL | \n+LL |     for _ in v {\n+   |              ^ move out of `v` occurs here\n+LL |\n+LL |         println!(\"{}\", ***el > 0);\n+   |                         ---- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "7fbbb50dc115fea5bde15c9e767556b0f301f50b", "filename": "src/test/ui/type/type-unsatisfiable.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Ftype%2Ftype-unsatisfiable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Ftype%2Ftype-unsatisfiable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-unsatisfiable.rs?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -0,0 +1,59 @@\n+// revisions: lib usage\n+//[lib] compile-flags: --crate-type=lib\n+//[lib] build-pass\n+\n+use std::ops::Sub;\n+trait Vector2 {\n+    type ScalarType;\n+\n+    fn from_values(x: Self::ScalarType, y: Self::ScalarType) -> Self\n+    where\n+        Self: Sized;\n+\n+    fn x(&self) -> Self::ScalarType;\n+    fn y(&self) -> Self::ScalarType;\n+}\n+\n+impl<T> Sub for dyn Vector2<ScalarType = T>\n+where\n+    T: Sub<Output = T>,\n+    (dyn Vector2<ScalarType = T>): Sized,\n+{\n+    type Output = dyn Vector2<ScalarType = T>;\n+\n+    fn sub(self, rhs: Self) -> Self::Output {\n+        Self::from_values(self.x() - rhs.x(), self.y() - rhs.y())\n+    }\n+}\n+\n+struct Vec2 {\n+    x: i32,\n+    y: i32,\n+}\n+\n+impl Vector2 for Vec2 {\n+    type ScalarType = i32;\n+\n+    fn from_values(x: Self::ScalarType, y: Self::ScalarType) -> Self\n+    where\n+        Self: Sized,\n+    {\n+        Self { x, y }\n+    }\n+\n+    fn x(&self) -> Self::ScalarType {\n+        self.x\n+    }\n+    fn y(&self) -> Self::ScalarType {\n+        self.y\n+    }\n+}\n+\n+#[cfg(usage)]\n+fn main() {\n+    let hey: Box<dyn Vector2<ScalarType = i32>> = Box::new(Vec2 { x: 1, y: 2 });\n+    let word: Box<dyn Vector2<ScalarType = i32>> = Box::new(Vec2 { x: 1, y: 2 });\n+\n+    let bar = *hey - *word;\n+    //[usage]~^ ERROR cannot subtract\n+}"}, {"sha": "56e2e30afaca59e928080a91ef3113a8dec4c0d9", "filename": "src/test/ui/type/type-unsatisfiable.usage.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Ftype%2Ftype-unsatisfiable.usage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e45d9973b2665897a768312e971b82cc62633103/src%2Ftest%2Fui%2Ftype%2Ftype-unsatisfiable.usage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-unsatisfiable.usage.stderr?ref=e45d9973b2665897a768312e971b82cc62633103", "patch": "@@ -0,0 +1,11 @@\n+error[E0369]: cannot subtract `(dyn Vector2<ScalarType = i32> + 'static)` from `dyn Vector2<ScalarType = i32>`\n+  --> $DIR/type-unsatisfiable.rs:57:20\n+   |\n+LL |     let bar = *hey - *word;\n+   |               ---- ^ ----- (dyn Vector2<ScalarType = i32> + 'static)\n+   |               |\n+   |               dyn Vector2<ScalarType = i32>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0369`."}]}